public class com.feelingk.iap.net.IAPNet extends java.lang.Object
{
    static final java.lang.String TAG;
    private static boolean connect;
    private static boolean connectBP;
    private static java.io.InputStream inputStream;
    private static java.io.InputStream inputStreamBP;
    private static boolean isInit;
    private static boolean isWifi;
    private static java.io.OutputStream outputStream;
    private static java.io.OutputStream outputStreamBP;
    private static java.net.Socket socketBP;
    private static java.net.Socket socketGateway;

    static void <clinit>()
    {
        <com.feelingk.iap.net.IAPNet: java.lang.String TAG> = "IAPNet";

        <com.feelingk.iap.net.IAPNet: boolean isWifi> = 0;

        <com.feelingk.iap.net.IAPNet: boolean connectBP> = 0;

        <com.feelingk.iap.net.IAPNet: boolean connect> = 0;

        <com.feelingk.iap.net.IAPNet: boolean isInit> = 0;

        <com.feelingk.iap.net.IAPNet: java.net.Socket socketGateway> = null;

        <com.feelingk.iap.net.IAPNet: java.io.InputStream inputStream> = null;

        <com.feelingk.iap.net.IAPNet: java.io.OutputStream outputStream> = null;

        <com.feelingk.iap.net.IAPNet: java.net.Socket socketBP> = null;

        <com.feelingk.iap.net.IAPNet: java.io.InputStream inputStreamBP> = null;

        <com.feelingk.iap.net.IAPNet: java.io.OutputStream outputStreamBP> = null;

        return;
    }

    public void <init>()
    {
        com.feelingk.iap.net.IAPNet r0;

        r0 := @this: com.feelingk.iap.net.IAPNet;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    protected static int iapClose(boolean)
    {
        java.io.OutputStream $r1;
        java.net.Socket $r2;
        java.lang.Exception $r3, $r4, $r5;
        boolean $z0;
        java.io.InputStream $r0;

        $z0 := @parameter0: boolean;

        staticinvoke <com.feelingk.iap.util.CommonF$LOGGER: void e(java.lang.String,java.lang.String)>("IAPNet", "[ DEBUG ] Socket Close!");

        $r0 = <com.feelingk.iap.net.IAPNet: java.io.InputStream inputStream>;

        if $r0 == null goto label2;

        $r0 = <com.feelingk.iap.net.IAPNet: java.io.InputStream inputStream>;

     label1:
        virtualinvoke $r0.<java.io.InputStream: void close()>();

     label2:
        $r1 = <com.feelingk.iap.net.IAPNet: java.io.OutputStream outputStream>;

        if $r1 == null goto label4;

        $r1 = <com.feelingk.iap.net.IAPNet: java.io.OutputStream outputStream>;

     label3:
        virtualinvoke $r1.<java.io.OutputStream: void close()>();

     label4:
        $r2 = <com.feelingk.iap.net.IAPNet: java.net.Socket socketGateway>;

        if $r2 == null goto label6;

        $r2 = <com.feelingk.iap.net.IAPNet: java.net.Socket socketGateway>;

     label5:
        virtualinvoke $r2.<java.net.Socket: void close()>();

     label6:
        <com.feelingk.iap.net.IAPNet: java.io.InputStream inputStream> = null;

        <com.feelingk.iap.net.IAPNet: java.io.OutputStream outputStream> = null;

        <com.feelingk.iap.net.IAPNet: java.net.Socket socketGateway> = null;

        <com.feelingk.iap.net.IAPNet: boolean connect> = 0;

        <com.feelingk.iap.net.IAPNet: boolean isInit> = 0;

        return 0;

     label7:
        $r3 := @caughtexception;

        goto label6;

     label8:
        $r4 := @caughtexception;

        goto label4;

     label9:
        $r5 := @caughtexception;

        goto label2;

        catch java.lang.Exception from label1 to label2 with label9;
        catch java.lang.Exception from label3 to label4 with label8;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    protected static int iapCloseBP(boolean)
    {
        java.io.OutputStream $r1;
        java.net.Socket $r2;
        java.lang.Exception $r3, $r4, $r5;
        boolean $z0;
        java.io.InputStream $r0;

        $z0 := @parameter0: boolean;

        $r0 = <com.feelingk.iap.net.IAPNet: java.io.InputStream inputStreamBP>;

        if $r0 == null goto label2;

        $r0 = <com.feelingk.iap.net.IAPNet: java.io.InputStream inputStreamBP>;

     label1:
        virtualinvoke $r0.<java.io.InputStream: void close()>();

     label2:
        $r1 = <com.feelingk.iap.net.IAPNet: java.io.OutputStream outputStreamBP>;

        if $r1 == null goto label4;

        $r1 = <com.feelingk.iap.net.IAPNet: java.io.OutputStream outputStreamBP>;

     label3:
        virtualinvoke $r1.<java.io.OutputStream: void close()>();

     label4:
        $r2 = <com.feelingk.iap.net.IAPNet: java.net.Socket socketBP>;

        if $r2 == null goto label6;

        $r2 = <com.feelingk.iap.net.IAPNet: java.net.Socket socketBP>;

     label5:
        virtualinvoke $r2.<java.net.Socket: void close()>();

     label6:
        <com.feelingk.iap.net.IAPNet: java.io.InputStream inputStreamBP> = null;

        <com.feelingk.iap.net.IAPNet: java.io.OutputStream outputStreamBP> = null;

        <com.feelingk.iap.net.IAPNet: java.net.Socket socketBP> = null;

        <com.feelingk.iap.net.IAPNet: boolean connectBP> = 0;

        return 0;

     label7:
        $r3 := @caughtexception;

        goto label6;

     label8:
        $r4 := @caughtexception;

        goto label4;

     label9:
        $r5 := @caughtexception;

        goto label2;

        catch java.lang.Exception from label1 to label2 with label9;
        catch java.lang.Exception from label3 to label4 with label8;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    protected static com.feelingk.iap.net.InitConfirm iapConnect(com.feelingk.iap.net.ServerInfo, int, java.lang.String, java.lang.String, java.lang.String, int, java.lang.String, java.lang.String, java.lang.String, boolean)
    {
        byte[] $r22;
        javax.net.ssl.SSLContext $r11;
        java.security.SecureRandom $r14, $r27;
        byte $b3;
        boolean $z0, $z1;
        com.feelingk.iap.net.TrustManager $r13, $r26;
        java.net.InetSocketAddress r10, $r25;
        java.lang.Exception r21;
        javax.net.ssl.SSLSocketFactory $r15;
        java.lang.StringBuilder r8, $r24;
        com.feelingk.iap.net.ServerInfo r5;
        java.lang.Throwable r19, r20;
        java.net.Socket $r16, $r28;
        java.net.SocketTimeoutException $r29;
        int $i0, i1, $i2;
        java.lang.String $r0, $r1, $r2, $r3, r6, r7, $r9;
        java.io.OutputStream $r18;
        java.io.IOException $r30;
        com.feelingk.iap.net.TrustManager[] r12;
        com.feelingk.iap.net.InitConfirm r4, $r23;
        java.io.InputStream $r17;

        r5 := @parameter0: com.feelingk.iap.net.ServerInfo;

        i1 := @parameter1: int;

        r6 := @parameter2: java.lang.String;

        r7 := @parameter3: java.lang.String;

        $r0 := @parameter4: java.lang.String;

        $i0 := @parameter5: int;

        $r1 := @parameter6: java.lang.String;

        $r2 := @parameter7: java.lang.String;

        $r3 := @parameter8: java.lang.String;

        $z0 := @parameter9: boolean;

        $r23 = new com.feelingk.iap.net.InitConfirm;

        r4 = $r23;

        specialinvoke $r23.<com.feelingk.iap.net.InitConfirm: void <init>()>();

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>(java.lang.String)>("[ DEBUG ] Server connect - Start : iapConnect Wifi= ");

        $z1 = <com.feelingk.iap.net.IAPNet: boolean isWifi>;

        r8 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r9 = virtualinvoke r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.feelingk.iap.util.CommonF$LOGGER: void i(java.lang.String,java.lang.String)>("IAPNet", $r9);

        $z1 = <com.feelingk.iap.net.IAPNet: boolean connect>;

        if $z1 == 0 goto label01;

        virtualinvoke r4.<com.feelingk.iap.net.InitConfirm: void setResultCode(byte)>(-1);

        return r4;

     label01:
        $z1 = <com.feelingk.iap.net.IAPNet: boolean isWifi>;

        if $z1 == 0 goto label20;

        $r25 = new java.net.InetSocketAddress;

        r10 = $r25;

     label02:
        $r9 = virtualinvoke r5.<com.feelingk.iap.net.ServerInfo: java.lang.String getHostAddress()>();

        $i2 = virtualinvoke r5.<com.feelingk.iap.net.ServerInfo: int getPort()>();

        specialinvoke $r25.<java.net.InetSocketAddress: void <init>(java.lang.String,int)>($r9, $i2);

        $r11 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>("TLS");

     label03:
        r12 = newarray (com.feelingk.iap.net.TrustManager)[1];

        $r26 = new com.feelingk.iap.net.TrustManager;

        $r13 = $r26;

     label04:
        specialinvoke $r26.<com.feelingk.iap.net.TrustManager: void <init>()>();

     label05:
        r12[0] = $r13;

     label06:
        $r27 = new java.security.SecureRandom;

        $r14 = $r27;

     label07:
        specialinvoke $r27.<java.security.SecureRandom: void <init>()>();

        virtualinvoke $r11.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(null, r12, $r14);

        $r15 = virtualinvoke $r11.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

        $r16 = virtualinvoke $r15.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket()>();

     label08:
        <com.feelingk.iap.net.IAPNet: java.net.Socket socketGateway> = $r16;

        $r16 = <com.feelingk.iap.net.IAPNet: java.net.Socket socketGateway>;

     label09:
        virtualinvoke $r16.<java.net.Socket: void setSoTimeout(int)>(20000);

     label10:
        $r16 = <com.feelingk.iap.net.IAPNet: java.net.Socket socketGateway>;

     label11:
        virtualinvoke $r16.<java.net.Socket: void connect(java.net.SocketAddress,int)>(r10, 20000);

     label12:
        $r16 = <com.feelingk.iap.net.IAPNet: java.net.Socket socketGateway>;

     label13:
        $r17 = virtualinvoke $r16.<java.net.Socket: java.io.InputStream getInputStream()>();

     label14:
        <com.feelingk.iap.net.IAPNet: java.io.InputStream inputStream> = $r17;

        $r16 = <com.feelingk.iap.net.IAPNet: java.net.Socket socketGateway>;

     label15:
        $r18 = virtualinvoke $r16.<java.net.Socket: java.io.OutputStream getOutputStream()>();

     label16:
        <com.feelingk.iap.net.IAPNet: java.io.OutputStream outputStream> = $r18;

     label17:
        <com.feelingk.iap.net.IAPNet: boolean connect> = 1;

        staticinvoke <com.feelingk.iap.util.CommonF$LOGGER: void i(java.lang.String,java.lang.String)>("IAPNet", "[ DEBUG ] Server connect - Complete!!!");

        staticinvoke <com.feelingk.iap.net.IAPNet: void iapSendInit(com.feelingk.iap.net.InitConfirm,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,boolean)>(r4, i1, r6, $r3, r7, $r0, $i0, $r1, $r2, $z0);

        $b3 = virtualinvoke r4.<com.feelingk.iap.net.InitConfirm: byte getResultCode()>();

        if $b3 == 0 goto label34;

        $b3 = virtualinvoke r4.<com.feelingk.iap.net.InitConfirm: byte getResultCode()>();

        i1 = (int) $b3;

        $i0 = -7;

        if i1 == $i0 goto label18;

        <com.feelingk.iap.net.IAPNet: boolean isInit> = 0;

     label18:
        $b3 = virtualinvoke r4.<com.feelingk.iap.net.InitConfirm: byte getResultCode()>();

        i1 = (int) $b3;

        $i0 = -5;

        if i1 == $i0 goto label19;

        $b3 = virtualinvoke r4.<com.feelingk.iap.net.InitConfirm: byte getResultCode()>();

        i1 = (int) $b3;

        $i0 = -4;

        if i1 != $i0 goto label36;

     label19:
        virtualinvoke r4.<com.feelingk.iap.net.InitConfirm: void SetUserMessage(java.lang.String)>("\ub124\ud2b8\uc6cc\ud06c \uc5f0\uacb0\uc744 \ud655\uc778 \ud574\uc8fc\uc2dc\uae30 \ubc14\ub78d\ub2c8\ub2e4.");

        return r4;

     label20:
        $r28 = new java.net.Socket;

     label21:
        specialinvoke $r28.<java.net.Socket: void <init>()>();

     label22:
        <com.feelingk.iap.net.IAPNet: java.net.Socket socketGateway> = $r28;

        $r16 = <com.feelingk.iap.net.IAPNet: java.net.Socket socketGateway>;

     label23:
        virtualinvoke $r16.<java.net.Socket: void setSoTimeout(int)>(20000);

     label24:
        $r16 = <com.feelingk.iap.net.IAPNet: java.net.Socket socketGateway>;

        $r25 = new java.net.InetSocketAddress;

        r10 = $r25;

     label25:
        $r9 = virtualinvoke r5.<com.feelingk.iap.net.ServerInfo: java.lang.String getHostAddress()>();

        $i2 = virtualinvoke r5.<com.feelingk.iap.net.ServerInfo: int getPort()>();

        specialinvoke $r25.<java.net.InetSocketAddress: void <init>(java.lang.String,int)>($r9, $i2);

        virtualinvoke $r16.<java.net.Socket: void connect(java.net.SocketAddress,int)>(r10, 20000);

     label26:
        $r16 = <com.feelingk.iap.net.IAPNet: java.net.Socket socketGateway>;

     label27:
        $r17 = virtualinvoke $r16.<java.net.Socket: java.io.InputStream getInputStream()>();

     label28:
        <com.feelingk.iap.net.IAPNet: java.io.InputStream inputStream> = $r17;

        $r16 = <com.feelingk.iap.net.IAPNet: java.net.Socket socketGateway>;

     label29:
        $r18 = virtualinvoke $r16.<java.net.Socket: java.io.OutputStream getOutputStream()>();

     label30:
        <com.feelingk.iap.net.IAPNet: java.io.OutputStream outputStream> = $r18;

        goto label17;

     label31:
        r19 := @caughtexception;

        <com.feelingk.iap.net.IAPNet: boolean connect> = 0;

        virtualinvoke r4.<com.feelingk.iap.net.InitConfirm: void setResultCode(byte)>(-11);

        virtualinvoke r4.<com.feelingk.iap.net.InitConfirm: void SetUserMessage(java.lang.String)>("\ub124\ud2b8\uc6cc\ud06c \uc5f0\uacb0\uc744 \ud655\uc778 \ud574\uc8fc\uc2dc\uae30 \ubc14\ub78d\ub2c8\ub2e4.");

        $r29 = (java.net.SocketTimeoutException) r19;

        virtualinvoke $r29.<java.net.SocketTimeoutException: void printStackTrace()>();

        return r4;

     label32:
        r20 := @caughtexception;

        <com.feelingk.iap.net.IAPNet: boolean connect> = 0;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>(java.lang.String)>("[ Exception ] iapConnect() DUMP :");

        $r30 = (java.io.IOException) r20;

        r6 = virtualinvoke $r30.<java.io.IOException: java.lang.String toString()>();

        r8 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        r6 = virtualinvoke r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.feelingk.iap.util.CommonF$LOGGER: void i(java.lang.String,java.lang.String)>("IAPNet", r6);

        virtualinvoke r4.<com.feelingk.iap.net.InitConfirm: void setResultCode(byte)>(-3);

        virtualinvoke r4.<com.feelingk.iap.net.InitConfirm: void SetUserMessage(java.lang.String)>("\ub124\ud2b8\uc6cc\ud06c \uc5f0\uacb0\uc744 \ud655\uc778 \ud574\uc8fc\uc2dc\uae30 \ubc14\ub78d\ub2c8\ub2e4.");

        $r30 = (java.io.IOException) r20;

        virtualinvoke $r30.<java.io.IOException: void printStackTrace()>();

        return r4;

     label33:
        r21 := @caughtexception;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>(java.lang.String)>("[ Exception ] iapConnect() DUMP :");

        r6 = virtualinvoke r21.<java.lang.Exception: java.lang.String toString()>();

        r8 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        r6 = virtualinvoke r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.feelingk.iap.util.CommonF$LOGGER: void i(java.lang.String,java.lang.String)>("IAPNet", r6);

        <com.feelingk.iap.net.IAPNet: boolean connect> = 0;

        virtualinvoke r4.<com.feelingk.iap.net.InitConfirm: void setResultCode(byte)>(-3);

        r6 = virtualinvoke r21.<java.lang.Exception: java.lang.String toString()>();

        virtualinvoke r4.<com.feelingk.iap.net.InitConfirm: void SetDumpMessage(java.lang.String)>(r6);

        virtualinvoke r21.<java.lang.Exception: void printStackTrace()>();

        return r4;

     label34:
        $r22 = staticinvoke <com.feelingk.iap.net.IAPNet: byte[] iapReceive(com.feelingk.iap.net.Confirm)>(r4);

        $b3 = virtualinvoke r4.<com.feelingk.iap.net.InitConfirm: byte getResultCode()>();

        if $b3 == 0 goto label35;

        <com.feelingk.iap.net.IAPNet: boolean isInit> = 0;

        virtualinvoke r4.<com.feelingk.iap.net.InitConfirm: void SetUserMessage(java.lang.String)>("\ub124\ud2b8\uc6cc\ud06c \uc804\uc1a1\uc911 \uc5d0\ub7ec\uc785\ub2c8\ub2e4.");

        return r4;

     label35:
        virtualinvoke r4.<com.feelingk.iap.net.InitConfirm: void parse(byte[])>($r22);

     label36:
        return r4;

        catch java.net.SocketTimeoutException from label02 to label03 with label31;
        catch java.net.SocketTimeoutException from label04 to label05 with label31;
        catch java.net.SocketTimeoutException from label07 to label08 with label31;
        catch java.net.SocketTimeoutException from label09 to label10 with label31;
        catch java.net.SocketTimeoutException from label11 to label12 with label31;
        catch java.net.SocketTimeoutException from label13 to label14 with label31;
        catch java.net.SocketTimeoutException from label15 to label16 with label31;
        catch java.io.IOException from label02 to label03 with label32;
        catch java.io.IOException from label04 to label05 with label32;
        catch java.io.IOException from label07 to label08 with label32;
        catch java.io.IOException from label09 to label10 with label32;
        catch java.io.IOException from label11 to label12 with label32;
        catch java.io.IOException from label13 to label14 with label32;
        catch java.io.IOException from label15 to label16 with label32;
        catch java.lang.Exception from label02 to label03 with label33;
        catch java.lang.Exception from label04 to label06 with label33;
        catch java.lang.Exception from label07 to label08 with label33;
        catch java.lang.Exception from label09 to label10 with label33;
        catch java.lang.Exception from label11 to label12 with label33;
        catch java.lang.Exception from label13 to label14 with label33;
        catch java.lang.Exception from label15 to label16 with label33;
        catch java.net.SocketTimeoutException from label21 to label22 with label31;
        catch java.net.SocketTimeoutException from label23 to label24 with label31;
        catch java.net.SocketTimeoutException from label25 to label26 with label31;
        catch java.net.SocketTimeoutException from label27 to label28 with label31;
        catch java.net.SocketTimeoutException from label29 to label30 with label31;
        catch java.io.IOException from label21 to label22 with label32;
        catch java.io.IOException from label23 to label24 with label32;
        catch java.io.IOException from label25 to label26 with label32;
        catch java.io.IOException from label27 to label28 with label32;
        catch java.io.IOException from label29 to label30 with label32;
        catch java.lang.Exception from label21 to label22 with label33;
        catch java.lang.Exception from label23 to label24 with label33;
        catch java.lang.Exception from label25 to label26 with label33;
        catch java.lang.Exception from label27 to label28 with label33;
        catch java.lang.Exception from label29 to label30 with label33;
    }

    protected static com.feelingk.iap.net.InitConfirm iapConnectBP(com.feelingk.iap.net.ServerInfo, int, java.lang.String, java.lang.String, java.lang.String, int)
    {
        byte[] $r16;
        javax.net.ssl.SSLContext $r7;
        java.net.Socket $r12, $r23;
        java.security.SecureRandom $r10, $r21;
        byte $b3;
        int $i0, i1, $i2;
        java.lang.String $r0, r3, r4, $r6;
        boolean $z0;
        com.feelingk.iap.net.TrustManager $r9, $r20;
        java.io.OutputStream $r15;
        java.net.InetSocketAddress r13, $r22;
        java.lang.Exception r17;
        javax.net.ssl.SSLSocketFactory $r11;
        com.feelingk.iap.net.TrustManager[] r8;
        java.lang.StringBuilder r5, $r19;
        com.feelingk.iap.net.ServerInfo r2;
        com.feelingk.iap.net.InitConfirm r1, $r18;
        java.io.InputStream $r14;

        r2 := @parameter0: com.feelingk.iap.net.ServerInfo;

        i1 := @parameter1: int;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        $r0 := @parameter4: java.lang.String;

        $i0 := @parameter5: int;

        $r18 = new com.feelingk.iap.net.InitConfirm;

        r1 = $r18;

        specialinvoke $r18.<com.feelingk.iap.net.InitConfirm: void <init>()>();

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>("[ DEBUG ] iapConnectBP - Start! isWifi= ");

        $z0 = <com.feelingk.iap.net.IAPNet: boolean isWifi>;

        r5 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r6 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.feelingk.iap.util.CommonF$LOGGER: void i(java.lang.String,java.lang.String)>("IAPNet", $r6);

        $z0 = <com.feelingk.iap.net.IAPNet: boolean connectBP>;

        if $z0 == 0 goto label01;

        virtualinvoke r1.<com.feelingk.iap.net.InitConfirm: void setResultCode(byte)>(-1);

        return r1;

     label01:
        $z0 = <com.feelingk.iap.net.IAPNet: boolean isWifi>;

        if $z0 == 0 goto label15;

     label02:
        $r7 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>("TLS");

     label03:
        r8 = newarray (com.feelingk.iap.net.TrustManager)[1];

        $r20 = new com.feelingk.iap.net.TrustManager;

        $r9 = $r20;

     label04:
        specialinvoke $r20.<com.feelingk.iap.net.TrustManager: void <init>()>();

        r8[0] = $r9;

     label05:
        $r21 = new java.security.SecureRandom;

        $r10 = $r21;

     label06:
        specialinvoke $r21.<java.security.SecureRandom: void <init>()>();

        virtualinvoke $r7.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(null, r8, $r10);

        $r11 = virtualinvoke $r7.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

        $r12 = virtualinvoke $r11.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket()>();

     label07:
        <com.feelingk.iap.net.IAPNet: java.net.Socket socketBP> = $r12;

     label08:
        $r12 = <com.feelingk.iap.net.IAPNet: java.net.Socket socketBP>;

        $r22 = new java.net.InetSocketAddress;

        r13 = $r22;

     label09:
        $r6 = virtualinvoke r2.<com.feelingk.iap.net.ServerInfo: java.lang.String getHostAddress()>();

        $i2 = virtualinvoke r2.<com.feelingk.iap.net.ServerInfo: int getPort()>();

        specialinvoke $r22.<java.net.InetSocketAddress: void <init>(java.lang.String,int)>($r6, $i2);

        virtualinvoke $r12.<java.net.Socket: void connect(java.net.SocketAddress,int)>(r13, 10000);

     label10:
        $r12 = <com.feelingk.iap.net.IAPNet: java.net.Socket socketBP>;

     label11:
        $r14 = virtualinvoke $r12.<java.net.Socket: java.io.InputStream getInputStream()>();

     label12:
        <com.feelingk.iap.net.IAPNet: java.io.InputStream inputStreamBP> = $r14;

        $r12 = <com.feelingk.iap.net.IAPNet: java.net.Socket socketBP>;

     label13:
        $r15 = virtualinvoke $r12.<java.net.Socket: java.io.OutputStream getOutputStream()>();

     label14:
        <com.feelingk.iap.net.IAPNet: java.io.OutputStream outputStreamBP> = $r15;

        <com.feelingk.iap.net.IAPNet: boolean connectBP> = 1;

        staticinvoke <com.feelingk.iap.util.CommonF$LOGGER: void i(java.lang.String,java.lang.String)>("IAPNet", "[ DEBUG ] iapConnectBP - Connection Complete!");

        $r16 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        staticinvoke <com.feelingk.iap.net.IAPNet: void iapSendInitBP(com.feelingk.iap.net.InitConfirm,int,java.lang.String,java.lang.String,byte[],int)>(r1, i1, r3, r4, $r16, $i0);

        $b3 = virtualinvoke r1.<com.feelingk.iap.net.InitConfirm: byte getResultCode()>();

        if $b3 == 0 goto label19;

        $b3 = virtualinvoke r1.<com.feelingk.iap.net.InitConfirm: byte getResultCode()>();

        i1 = (int) $b3;

        $i0 = -7;

        if i1 == $i0 goto label19;

        virtualinvoke r1.<com.feelingk.iap.net.InitConfirm: void SetUserMessage(java.lang.String)>("\ub124\ud2b8\uc6cc\ud06c \uc5f0\uacb0\uc744 \ud655\uc778 \ud574\uc8fc\uc2dc\uae30 \ubc14\ub78d\ub2c8\ub2e4.");

        return r1;

     label15:
        $r23 = new java.net.Socket;

     label16:
        specialinvoke $r23.<java.net.Socket: void <init>()>();

     label17:
        <com.feelingk.iap.net.IAPNet: java.net.Socket socketBP> = $r23;

        goto label08;

     label18:
        r17 := @caughtexception;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>("[ Exception ] iapConnectBP() ");

        r5 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r17);

        r3 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.feelingk.iap.util.CommonF$LOGGER: void i(java.lang.String,java.lang.String)>("IAPNet", r3);

        <com.feelingk.iap.net.IAPNet: boolean connectBP> = 0;

        virtualinvoke r1.<com.feelingk.iap.net.InitConfirm: void setResultCode(byte)>(-3);

        virtualinvoke r1.<com.feelingk.iap.net.InitConfirm: void SetUserMessage(java.lang.String)>("\ub124\ud2b8\uc6cc\ud06c \uc5f0\uacb0\uc744 \ud655\uc778 \ud574\uc8fc\uc2dc\uae30 \ubc14\ub78d\ub2c8\ub2e4.");

        return r1;

     label19:
        $r16 = staticinvoke <com.feelingk.iap.net.IAPNet: byte[] iapReceiveBP(com.feelingk.iap.net.Confirm)>(r1);

        $b3 = virtualinvoke r1.<com.feelingk.iap.net.InitConfirm: byte getResultCode()>();

        if $b3 == 0 goto label20;

        virtualinvoke r1.<com.feelingk.iap.net.InitConfirm: void SetUserMessage(java.lang.String)>("\ub124\ud2b8\uc6cc\ud06c \uc5f0\uacb0\uc744 \ud655\uc778 \ud574\uc8fc\uc2dc\uae30 \ubc14\ub78d\ub2c8\ub2e4.");

        return r1;

     label20:
        virtualinvoke r1.<com.feelingk.iap.net.InitConfirm: void parse(byte[])>($r16);

        return r1;

        catch java.lang.Exception from label02 to label03 with label18;
        catch java.lang.Exception from label04 to label05 with label18;
        catch java.lang.Exception from label06 to label07 with label18;
        catch java.lang.Exception from label09 to label10 with label18;
        catch java.lang.Exception from label11 to label12 with label18;
        catch java.lang.Exception from label13 to label14 with label18;
        catch java.lang.Exception from label16 to label17 with label18;
    }

    protected static com.feelingk.iap.net.InitConfirm iapReAuth(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String, int, java.lang.String, java.lang.String)
    {
        byte[] $r7;
        byte $b2;
        int $i0, i1;
        java.lang.String $r0, $r1, $r2, $r3, $r4, r6;
        com.feelingk.iap.net.InitConfirm r5;

        i1 := @parameter0: int;

        r6 := @parameter1: java.lang.String;

        $r0 := @parameter2: java.lang.String;

        $r1 := @parameter3: java.lang.String;

        $r2 := @parameter4: java.lang.String;

        $i0 := @parameter5: int;

        $r3 := @parameter6: java.lang.String;

        $r4 := @parameter7: java.lang.String;

        r5 = new com.feelingk.iap.net.InitConfirm;

        specialinvoke r5.<com.feelingk.iap.net.InitConfirm: void <init>()>();

        <com.feelingk.iap.net.IAPNet: boolean isInit> = 0;

        staticinvoke <com.feelingk.iap.net.IAPNet: void iapSendInit(com.feelingk.iap.net.InitConfirm,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,boolean)>(r5, i1, r6, $r0, $r1, $r2, $i0, $r3, $r4, 0);

        $b2 = virtualinvoke r5.<com.feelingk.iap.net.InitConfirm: byte getResultCode()>();

        if $b2 == 0 goto label1;

        return r5;

     label1:
        $r7 = staticinvoke <com.feelingk.iap.net.IAPNet: byte[] iapReceive(com.feelingk.iap.net.Confirm)>(r5);

        $b2 = virtualinvoke r5.<com.feelingk.iap.net.InitConfirm: byte getResultCode()>();

        if $b2 == 0 goto label2;

        virtualinvoke r5.<com.feelingk.iap.net.InitConfirm: void SetUserMessage(java.lang.String)>("\ub124\ud2b8\uc6cc\ud06c \uc804\uc1a1\uc911 \uc5d0\ub7ec\uc785\ub2c8\ub2e4.");

        return r5;

     label2:
        virtualinvoke r5.<com.feelingk.iap.net.InitConfirm: void parse(byte[])>($r7);

        return r5;
    }

    private static byte[] iapReceive(com.feelingk.iap.net.Confirm)
    {
        java.lang.Throwable $r6, $r9;
        byte[] $r3, r4, r8;
        byte $b2;
        com.feelingk.iap.net.Confirm $r0;
        int i0, i1, $i3, $i4;
        java.lang.String $r2, $r11;
        boolean $z0;
        java.lang.Exception $r7;
        java.lang.StringBuilder $r1, $r10;
        java.io.InputStream $r5;

        $r0 := @parameter0: com.feelingk.iap.net.Confirm;

        entermonitor class "Lcom/feelingk/iap/net/IAPNet;";

     label01:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("[ DEBUG ] iapReceive() Header Start (");

        $z0 = <com.feelingk.iap.net.IAPNet: boolean isInit>;

        $r1 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.feelingk.iap.util.CommonF$LOGGER: void e(java.lang.String,java.lang.String)>("IAPNet", $r2);

        $z0 = <com.feelingk.iap.net.IAPNet: boolean isInit>;

        if $z0 != 0 goto label04;

        virtualinvoke $r0.<com.feelingk.iap.net.Confirm: void setResultCode(byte)>(-6);

     label02:
        $r3 = null;

     label03:
        exitmonitor class "Lcom/feelingk/iap/net/IAPNet;";

        return $r3;

     label04:
        i0 = 0;

     label05:
        $r3 = newarray (byte)[12];

     label06:
        if i0 < 12 goto label19;

     label07:
        $r11 = new java.lang.String;

        $r2 = $r11;

     label08:
        specialinvoke $r11.<java.lang.String: void <init>(byte[],int,int)>($r3, 2, 10);

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        i0 = virtualinvoke $r2.<java.lang.String: int length()>();

     label09:
        if i0 <= 0 goto label27;

     label10:
        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

     label11:
        r4 = newarray (byte)[i0];

     label12:
        i1 = 0;

     label13:
        if i1 < i0 goto label29;

     label14:
        i0 = i0 - 1;

     label15:
        $b2 = r4[i0];

     label16:
        i0 = (int) $b2;

        if 23 == i0 goto label37;

     label17:
        staticinvoke <com.feelingk.iap.util.CommonF$LOGGER: void e(java.lang.String,java.lang.String)>("IAPNet", "[ DEBUG ] IAP_ERR_INVALIDPARITY =");

        virtualinvoke $r0.<com.feelingk.iap.net.Confirm: void setResultCode(byte)>(-8);

     label18:
        $r3 = null;

        goto label03;

     label19:
        $r5 = <com.feelingk.iap.net.IAPNet: java.io.InputStream inputStream>;

     label20:
        i1 = lengthof $r3;

     label21:
        i1 = i1 - i0;

     label22:
        i1 = virtualinvoke $r5.<java.io.InputStream: int read(byte[],int,int)>($r3, i0, i1);

     label23:
        $i3 = -1;

        if i1 == $i3 goto label24;

        i0 = i0 + i1;

        goto label06;

     label24:
        i0 = -1;

        if i1 != i0 goto label07;

     label25:
        virtualinvoke $r0.<com.feelingk.iap.net.Confirm: void setResultCode(byte)>(-5);

     label26:
        $r3 = null;

        goto label03;

     label27:
        virtualinvoke $r0.<com.feelingk.iap.net.Confirm: void setResultCode(byte)>(-5);

     label28:
        $r3 = null;

        goto label03;

     label29:
        $r5 = <com.feelingk.iap.net.IAPNet: java.io.InputStream inputStream>;

     label30:
        $i3 = lengthof r4;

     label31:
        $i3 = $i3 - i1;

     label32:
        $i3 = virtualinvoke $r5.<java.io.InputStream: int read(byte[],int,int)>(r4, i1, $i3);

     label33:
        $i4 = -1;

        if $i3 == $i4 goto label14;

        i1 = i1 + $i3;

        goto label13;

     label34:
        $r6 := @caughtexception;

     label35:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("[ Exception ] iapReceive() ");

        $r1 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.feelingk.iap.util.CommonF$LOGGER: void i(java.lang.String,java.lang.String)>("IAPNet", $r2);

        virtualinvoke $r0.<com.feelingk.iap.net.Confirm: void setResultCode(byte)>(-13);

        $r3 = null;

        goto label03;

     label36:
        $r7 := @caughtexception;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("[ Exception ] iapReceive() ");

        $r1 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.feelingk.iap.util.CommonF$LOGGER: void i(java.lang.String,java.lang.String)>("IAPNet", $r2);

        virtualinvoke $r0.<com.feelingk.iap.net.Confirm: void setResultCode(byte)>(-5);

        $r3 = null;

        goto label03;

     label37:
        i0 = lengthof $r3;

        i1 = lengthof r4;

        i0 = i0 + i1;

        r8 = newarray (byte)[i0];

        i0 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r8, 0, i0);

        i0 = lengthof $r3;

        i1 = lengthof r4;

        i1 = i1 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, r8, i0, i1);

        if $r0 == null goto label38;

        virtualinvoke $r0.<com.feelingk.iap.net.Confirm: void setResultCode(byte)>(0);

     label38:
        i0 = lengthof $r3;

        i1 = lengthof r4;

        i0 = i0 + i1;

        staticinvoke <com.feelingk.iap.net.IAPNetworkUtil: void packetDebug(byte[],int)>(r8, i0);

        staticinvoke <com.feelingk.iap.util.CommonF$LOGGER: void e(java.lang.String,java.lang.String)>("IAPNet", "[ DEBUG ] iapReceive() Success!!  ");

     label39:
        $r3 = r8;

        goto label03;

     label40:
        $r9 := @caughtexception;

        exitmonitor class "Lcom/feelingk/iap/net/IAPNet;";

        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label40;
        catch java.net.SocketTimeoutException from label08 to label09 with label34;
        catch java.net.SocketTimeoutException from label10 to label11 with label34;
        catch java.net.SocketTimeoutException from label17 to label18 with label34;
        catch java.net.SocketTimeoutException from label22 to label23 with label34;
        catch java.net.SocketTimeoutException from label25 to label26 with label34;
        catch java.net.SocketTimeoutException from label27 to label28 with label34;
        catch java.net.SocketTimeoutException from label32 to label33 with label34;
        catch java.lang.Exception from label08 to label09 with label36;
        catch java.lang.Exception from label10 to label12 with label36;
        catch java.lang.Exception from label15 to label16 with label36;
        catch java.lang.Exception from label17 to label18 with label36;
        catch java.lang.Exception from label20 to label21 with label36;
        catch java.lang.Exception from label22 to label23 with label36;
        catch java.lang.Exception from label25 to label26 with label36;
        catch java.lang.Exception from label27 to label28 with label36;
        catch java.lang.Exception from label30 to label31 with label36;
        catch java.lang.Exception from label32 to label33 with label36;
        catch java.lang.Throwable from label05 to label33 with label40;
        catch java.lang.Throwable from label35 to label39 with label40;
    }

    private static byte[] iapReceiveBP(com.feelingk.iap.net.Confirm)
    {
        java.lang.Throwable $r8;
        byte[] r1, r4, r5;
        byte $b2;
        com.feelingk.iap.net.Confirm $r0;
        int i0, i1, $i3, $i4;
        java.lang.String $r2, $r9;
        java.lang.Exception $r7;
        java.lang.StringBuilder $r3, $r10;
        java.io.InputStream $r6;

        $r0 := @parameter0: com.feelingk.iap.net.Confirm;

        entermonitor class "Lcom/feelingk/iap/net/IAPNet;";

        i0 = 0;

     label01:
        r1 = newarray (byte)[12];

     label02:
        if i0 < 12 goto label18;

     label03:
        staticinvoke <com.feelingk.iap.util.CommonF$LOGGER: void i(java.lang.String,java.lang.String)>("IAPNet", "[ DEBUG ] iapReceiveBP() Header Receive Complete!");

     label04:
        $r9 = new java.lang.String;

        $r2 = $r9;

     label05:
        specialinvoke $r9.<java.lang.String: void <init>(byte[],int,int)>(r1, 2, 10);

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        i0 = virtualinvoke $r2.<java.lang.String: int length()>();

     label06:
        if i0 <= 0 goto label26;

     label07:
        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

     label08:
        $r10 = new java.lang.StringBuilder;

        $r3 = $r10;

     label09:
        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("[ DEBUG ] iapReceiveBP() Data Length: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.feelingk.iap.util.CommonF$LOGGER: void i(java.lang.String,java.lang.String)>("IAPNet", $r2);

        r4 = newarray (byte)[i0];

     label10:
        i1 = 0;

     label11:
        if i1 < i0 goto label28;

     label12:
        i0 = i0 - 1;

     label13:
        $b2 = r4[i0];

     label14:
        i0 = lengthof r1;

        i1 = lengthof r4;

        i0 = i0 + i1;

        r5 = newarray (byte)[i0];

        i0 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r5, 0, i0);

        i0 = lengthof r1;

        i1 = lengthof r4;

        i1 = i1 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, r5, i0, i1);

        if $r0 == null goto label15;

        virtualinvoke $r0.<com.feelingk.iap.net.Confirm: void setResultCode(byte)>(0);

     label15:
        i0 = lengthof r1;

        i1 = lengthof r4;

        i0 = i0 + i1;

        staticinvoke <com.feelingk.iap.net.IAPNetworkUtil: void packetDebug(byte[],int)>(r5, i0);

     label16:
        r1 = r5;

     label17:
        exitmonitor class "Lcom/feelingk/iap/net/IAPNet;";

        return r1;

     label18:
        $r6 = <com.feelingk.iap.net.IAPNet: java.io.InputStream inputStreamBP>;

     label19:
        i1 = lengthof r1;

     label20:
        i1 = i1 - i0;

     label21:
        i1 = virtualinvoke $r6.<java.io.InputStream: int read(byte[],int,int)>(r1, i0, i1);

     label22:
        $i3 = -1;

        if i1 == $i3 goto label23;

        i0 = i0 + i1;

        goto label02;

     label23:
        i0 = -1;

        if i1 != i0 goto label03;

     label24:
        virtualinvoke $r0.<com.feelingk.iap.net.Confirm: void setResultCode(byte)>(-5);

     label25:
        r1 = null;

        goto label17;

     label26:
        virtualinvoke $r0.<com.feelingk.iap.net.Confirm: void setResultCode(byte)>(-5);

     label27:
        r1 = null;

        goto label17;

     label28:
        $r6 = <com.feelingk.iap.net.IAPNet: java.io.InputStream inputStreamBP>;

     label29:
        $i3 = lengthof r4;

     label30:
        $i3 = $i3 - i1;

     label31:
        $i3 = virtualinvoke $r6.<java.io.InputStream: int read(byte[],int,int)>(r4, i1, $i3);

     label32:
        $i4 = -1;

        if $i3 == $i4 goto label12;

        i1 = i1 + $i3;

        goto label11;

     label33:
        $r7 := @caughtexception;

     label34:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("[ Exception ] iapReceiveBP() ");

        $r3 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.feelingk.iap.util.CommonF$LOGGER: void i(java.lang.String,java.lang.String)>("IAPNet", $r2);

        virtualinvoke $r0.<com.feelingk.iap.net.Confirm: void setResultCode(byte)>(-5);

     label35:
        r1 = null;

        goto label17;

     label36:
        $r8 := @caughtexception;

        exitmonitor class "Lcom/feelingk/iap/net/IAPNet;";

        throw $r8;

        catch java.lang.Exception from label03 to label04 with label33;
        catch java.lang.Exception from label05 to label06 with label33;
        catch java.lang.Exception from label07 to label08 with label33;
        catch java.lang.Exception from label09 to label10 with label33;
        catch java.lang.Exception from label13 to label14 with label33;
        catch java.lang.Throwable from label01 to label14 with label36;
        catch java.lang.Throwable from label14 to label16 with label36;
        catch java.lang.Exception from label19 to label20 with label33;
        catch java.lang.Exception from label21 to label22 with label33;
        catch java.lang.Exception from label24 to label25 with label33;
        catch java.lang.Exception from label26 to label27 with label33;
        catch java.lang.Exception from label29 to label30 with label33;
        catch java.lang.Exception from label31 to label32 with label33;
        catch java.lang.Throwable from label18 to label32 with label36;
        catch java.lang.Throwable from label34 to label35 with label36;
    }

    protected static byte[] iapSendData(byte[])
    {
        byte[] $r0, r2, $r3;
        byte $b2;
        int i0, i1;
        com.feelingk.iap.net.DataPacket r1;

        $r0 := @parameter0: byte[];

        r1 = new com.feelingk.iap.net.DataPacket;

        specialinvoke r1.<com.feelingk.iap.net.DataPacket: void <init>()>();

        staticinvoke <com.feelingk.iap.util.CommonF$LOGGER: void e(java.lang.String,java.lang.String)>("IAPNet", "[ DEBUG ] iapSendData!!!!() Start ~~~~~~~~~~~~~~~~~~~~");

        i0 = lengthof $r0;

        i0 = i0 + 12;

        i0 = i0 + 1;

        r2 = newarray (byte)[i0];

        i1 = 0;

     label1:
        if i1 < i0 goto label2;

        i1 = lengthof $r0;

        i1 = i1 + 1;

        $r3 = staticinvoke <com.feelingk.iap.net.IAPNetworkUtil: byte[] iapMakePacketHeader(java.lang.String,int)>("DP", i1);

        i1 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r2, 0, i1);

        i1 = lengthof $r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, r2, 12, i1);

        i0 = i0 - 1;

        r2[i0] = 23;

        $b2 = staticinvoke <com.feelingk.iap.net.IAPNet: byte iapWrite(byte[])>(r2);

        if $b2 == 0 goto label3;

        return null;

     label2:
        r2[i1] = 0;

        i1 = i1 + 1;

        goto label1;

     label3:
        $r0 = staticinvoke <com.feelingk.iap.net.IAPNet: byte[] iapReceive(com.feelingk.iap.net.Confirm)>(r1);

        $b2 = virtualinvoke r1.<com.feelingk.iap.net.DataPacket: byte getResultCode()>();

        if $b2 == 0 goto label4;

        return null;

     label4:
        virtualinvoke r1.<com.feelingk.iap.net.DataPacket: void parse(byte[])>($r0);

        staticinvoke <com.feelingk.iap.util.CommonF$LOGGER: void e(java.lang.String,java.lang.String)>("IAPNet", "[ DEBUG ] iapSendData() End~~~~~~~~~~~~~~~~~~~~");

        $r0 = virtualinvoke r1.<com.feelingk.iap.net.DataPacket: byte[] getData()>();

        return $r0;
    }

    protected static byte[] iapSendDataBP(byte[])
    {
        byte[] $r0, r2, $r3;
        byte $b2;
        int i0, i1;
        com.feelingk.iap.net.DataPacket r1;

        $r0 := @parameter0: byte[];

        r1 = new com.feelingk.iap.net.DataPacket;

        specialinvoke r1.<com.feelingk.iap.net.DataPacket: void <init>()>();

        staticinvoke <com.feelingk.iap.util.CommonF$LOGGER: void i(java.lang.String,java.lang.String)>("IAPNet", "[ DEBUG ] iapSendDataBP()");

        i0 = lengthof $r0;

        i0 = i0 + 12;

        i0 = i0 + 1;

        r2 = newarray (byte)[i0];

        i1 = 0;

     label1:
        if i1 < i0 goto label2;

        i1 = lengthof $r0;

        i1 = i1 + 1;

        $r3 = staticinvoke <com.feelingk.iap.net.IAPNetworkUtil: byte[] iapMakePacketHeader(java.lang.String,int)>("DP", i1);

        i1 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r2, 0, i1);

        i1 = lengthof $r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, r2, 12, i1);

        i0 = i0 - 1;

        r2[i0] = 23;

        $b2 = staticinvoke <com.feelingk.iap.net.IAPNet: byte iapWriteBP(byte[])>(r2);

        if $b2 == 0 goto label3;

        return null;

     label2:
        r2[i1] = 0;

        i1 = i1 + 1;

        goto label1;

     label3:
        $r0 = staticinvoke <com.feelingk.iap.net.IAPNet: byte[] iapReceiveBP(com.feelingk.iap.net.Confirm)>(r1);

        i0 = lengthof $r0;

        staticinvoke <com.feelingk.iap.net.IAPNetworkUtil: void packetDebug(byte[],int)>($r0, i0);

        $b2 = virtualinvoke r1.<com.feelingk.iap.net.DataPacket: byte getResultCode()>();

        if $b2 == 0 goto label4;

        return null;

     label4:
        virtualinvoke r1.<com.feelingk.iap.net.DataPacket: void parse(byte[])>($r0);

        $r0 = virtualinvoke r1.<com.feelingk.iap.net.DataPacket: byte[] getData()>();

        return $r0;
    }

    protected static com.feelingk.iap.net.MsgConfirm iapSendDataMembership(int, java.lang.String)
    {
        byte[] $r3, $r4;
        com.feelingk.iap.net.MsgConfirm r0, $r7;
        byte $b4;
        int i0, i1, i2, $i3;
        java.lang.StringBuilder r6, $r8;
        java.lang.String r1, r2, $r5;

        i1 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r7 = new com.feelingk.iap.net.MsgConfirm;

        r0 = $r7;

        specialinvoke $r7.<com.feelingk.iap.net.MsgConfirm: void <init>()>();

        r2 = <android.os.Build: java.lang.String MODEL>;

        staticinvoke <com.feelingk.iap.util.CommonF$LOGGER: void i(java.lang.String,java.lang.String)>("IAPNet", "[ DEBUG ] iapSendItemMembership()");

        i0 = 12 + 2;

        i0 = i0 + 11;

        i0 = i0 + 1;

        if i1 == 2 goto label01;

        if i1 != 3 goto label02;

     label01:
        if r2 == null goto label02;

        $r3 = virtualinvoke r2.<java.lang.String: byte[] getBytes()>();

        i2 = lengthof $r3;

        if i2 <= 64 goto label08;

        i0 = i0 + 64;

     label02:
        i0 = i0 + 1;

        $r3 = newarray (byte)[i0];

        i2 = 0;

     label03:
        if i2 < i0 goto label09;

        i2 = i0 - 12;

        $r4 = staticinvoke <com.feelingk.iap.net.IAPNetworkUtil: byte[] iapMakePacketHeader(java.lang.String,int)>("SP", i2);

        i2 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r3, 0, i2);

        i2 = 12;

        if i1 != 1 goto label10;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("11");

        $r4 = virtualinvoke $r5.<java.lang.String: byte[] getBytes()>();

        $i3 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r3, i2, $i3);

     label04:
        i2 = i2 + 2;

        r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        $r4 = virtualinvoke r1.<java.lang.String: byte[] getBytes()>();

        $i3 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r3, i2, $i3);

        i2 = i2 + 11;

        if i1 != 1 goto label12;

        $r3[i2] = 0;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("[ DEBUG ] byte_modelLength = ");

        $b4 = $r3[25];

        $i3 = (int) $b4;

        r6 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        r1 = virtualinvoke r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.feelingk.iap.util.CommonF$LOGGER: void e(java.lang.String,java.lang.String)>("IAPNet", r1);

     label05:
        i2 = i2 + 1;

        if i1 == 2 goto label06;

        if i1 != 3 goto label15;

     label06:
        r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2);

        $r4 = virtualinvoke r1.<java.lang.String: byte[] getBytes()>();

        i1 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r3, i2, i1);

        i1 = lengthof $r4;

     label07:
        i1 = i0 - 1;

        $r3[i1] = 23;

        $b4 = staticinvoke <com.feelingk.iap.net.IAPNet: byte iapWrite(byte[])>($r3);

        if $b4 == 0 goto label13;

        virtualinvoke r0.<com.feelingk.iap.net.MsgConfirm: void setResultCode(byte)>($b4);

        virtualinvoke r0.<com.feelingk.iap.net.MsgConfirm: void SetUserMessage(java.lang.String)>("\ub124\ud2b8\uc6cc\ud06c \uc804\uc1a1\uc911 \uc5d0\ub7ec\uc785\ub2c8\ub2e4.");

        return r0;

     label08:
        $r3 = virtualinvoke r2.<java.lang.String: byte[] getBytes()>();

        i0 = lengthof $r3;

        i0 = i0 + 26;

        goto label02;

     label09:
        $r3[i2] = 0;

        i2 = i2 + 1;

        goto label03;

     label10:
        if i1 != 2 goto label11;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("12");

        $r4 = virtualinvoke $r5.<java.lang.String: byte[] getBytes()>();

        $i3 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r3, i2, $i3);

        goto label04;

     label11:
        if i1 != 3 goto label04;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("13");

        $r4 = virtualinvoke $r5.<java.lang.String: byte[] getBytes()>();

        $i3 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r3, i2, $i3);

        goto label04;

     label12:
        $i3 = virtualinvoke r2.<java.lang.String: int length()>();

        $b4 = (byte) $i3;

        $r3[i2] = $b4;

        goto label05;

     label13:
        $r3 = staticinvoke <com.feelingk.iap.net.IAPNet: byte[] iapReceive(com.feelingk.iap.net.Confirm)>(r0);

        $b4 = virtualinvoke r0.<com.feelingk.iap.net.MsgConfirm: byte getResultCode()>();

        if $b4 == 0 goto label14;

        virtualinvoke r0.<com.feelingk.iap.net.MsgConfirm: void SetUserMessage(java.lang.String)>("\ub124\ud2b8\uc6cc\ud06c \uc804\uc1a1\uc911 \uc5d0\ub7ec\uc785\ub2c8\ub2e4.");

        return r0;

     label14:
        virtualinvoke r0.<com.feelingk.iap.net.MsgConfirm: void parse(byte[])>($r3);

        return r0;

     label15:
        goto label07;
    }

    protected static void iapSendInit(com.feelingk.iap.net.InitConfirm, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String, int, java.lang.String, java.lang.String, boolean)
    {
        byte[] $r9, r10, $r11, $r12, $r13;
        byte b2;
        int i0, i1, i3, i4;
        java.lang.String $r0, $r1, r3, r4, r5, r6, $r8;
        boolean $z0, z1;
        java.lang.StringBuilder r7;
        com.feelingk.iap.net.InitConfirm r2;

        r2 := @parameter0: com.feelingk.iap.net.InitConfirm;

        i0 := @parameter1: int;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String;

        r6 := @parameter5: java.lang.String;

        i1 := @parameter6: int;

        $r0 := @parameter7: java.lang.String;

        $r1 := @parameter8: java.lang.String;

        $z0 := @parameter9: boolean;

        r7 = new java.lang.StringBuilder;

        specialinvoke r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("iapSendInit  Start() isInit=");

        z1 = <com.feelingk.iap.net.IAPNet: boolean isInit>;

        r7 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z1);

        $r8 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.feelingk.iap.util.CommonF$LOGGER: void i(java.lang.String,java.lang.String)>("IAPNet", $r8);

        r7 = new java.lang.StringBuilder;

        specialinvoke r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("iapSendInit  Start() useBpServer =");

        r7 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r8 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.feelingk.iap.util.CommonF$LOGGER: void i(java.lang.String,java.lang.String)>("IAPNet", $r8);

        r7 = new java.lang.StringBuilder;

        specialinvoke r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("iapSendInit  Start() encJuminNumberCheck =");

        if r4 == null goto label02;

        b2 = 1;

     label01:
        r7 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(b2);

        $r8 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.feelingk.iap.util.CommonF$LOGGER: void i(java.lang.String,java.lang.String)>("IAPNet", $r8);

        z1 = <com.feelingk.iap.net.IAPNet: boolean isInit>;

        if z1 == 0 goto label03;

        virtualinvoke r2.<com.feelingk.iap.net.InitConfirm: void setResultCode(byte)>(-7);

        return;

     label02:
        b2 = 0;

        goto label01;

     label03:
        if r6 == null goto label17;

        r10 = virtualinvoke r6.<java.lang.String: byte[] getBytes()>();

     label04:
        r6 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i1);

        $r11 = virtualinvoke r6.<java.lang.String: byte[] getBytes()>();

        i1 = 12;

        if $r1 == null goto label18;

        i1 = 12 + 100;

        r6 = "QP";

     label05:
        i1 = i1 + 1;

        i1 = i1 + 8;

        i1 = i1 + 1;

        i1 = i1 + 10;

        i1 = i1 + 11;

        i1 = i1 + 1;

        if r10 == null goto label06;

        i3 = lengthof r10;

        i1 = i1 + i3;

     label06:
        i1 = i1 + 7;

        i1 = i1 + 10;

        if i0 == 2 goto label07;

        if i0 != 3 goto label08;

     label07:
        i1 = i1 + 2;

        if $z0 == 0 goto label19;

        i1 = i1 + 1;

        $r8 = "SENDBPDATA";

        i3 = virtualinvoke $r8.<java.lang.String: int length()>();

        i1 = i1 + i3;

     label08:
        i1 = i1 + 1;

        $r9 = newarray (byte)[i1];

        i3 = 0;

     label09:
        if i3 < i1 goto label20;

        i3 = i1 - 12;

        $r12 = staticinvoke <com.feelingk.iap.net.IAPNetworkUtil: byte[] iapMakePacketHeader(java.lang.String,int)>(r6, i3);

        i3 = lengthof $r12;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r12, 0, $r9, 0, i3);

        i3 = 12;

        i4 = i3 + 1;

        $r9[i3] = 71;

        r6 = "IAP11.06.07";

        $r12 = virtualinvoke r6.<java.lang.String: byte[] getBytes()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r12, 0, $r9, i4, 8);

        i4 = i4 + 8;

        i3 = i4 + 1;

        $r9[i4] = 65;

        $r12 = virtualinvoke r3.<java.lang.String: byte[] getBytes()>();

        $r13 = virtualinvoke r3.<java.lang.String: byte[] getBytes()>();

        i4 = lengthof $r13;

        i4 = staticinvoke <java.lang.Math: int min(int,int)>(i4, 10);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r12, 0, $r9, i3, i4);

        i3 = i3 + 10;

        $r12 = virtualinvoke r5.<java.lang.String: byte[] getBytes()>();

        $r13 = virtualinvoke r5.<java.lang.String: byte[] getBytes()>();

        i4 = lengthof $r13;

        i4 = staticinvoke <java.lang.Math: int min(int,int)>(i4, 11);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r12, 0, $r9, i3, i4);

        i3 = i3 + 11;

        if r10 == null goto label10;

        i4 = lengthof r10;

        b2 = (byte) i4;

        $r9[i3] = b2;

     label10:
        i3 = i3 + 1;

        if r10 == null goto label11;

        i4 = lengthof r10;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r10, 0, $r9, i3, i4);

        i3 = lengthof r10;

        i3 = i3 + 44;

        i4 = lengthof $r11;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r11, 0, $r9, i3, i4);

     label11:
        i3 = i3 + 7;

        if $r0 == null goto label12;

        r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r0);

        r10 = virtualinvoke r3.<java.lang.String: byte[] getBytes()>();

        i4 = lengthof r10;

        if i4 > 10 goto label12;

        i4 = lengthof r10;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r10, 0, $r9, i3, i4);

     label12:
        i3 = i3 + 10;

        if $r1 == null goto label25;

        r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        r10 = virtualinvoke r3.<java.lang.String: byte[] getBytes()>();

        i4 = lengthof r10;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r10, 0, $r9, i3, i4);

        i3 = i3 + 100;

     label13:
        if i0 == 2 goto label14;

        if i0 != 3 goto label24;

     label14:
        if i0 != 2 goto label21;

        r3 = "12";

     label15:
        r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3);

        r10 = virtualinvoke r3.<java.lang.String: byte[] getBytes()>();

        i0 = lengthof r10;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r10, 0, $r9, i3, i0);

        i0 = i3 + 2;

        if $z0 == 0 goto label22;

        i3 = i0 + 1;

        r3 = "SENDBPDATA";

        i4 = virtualinvoke r3.<java.lang.String: int length()>();

        b2 = (byte) i4;

        $r9[i0] = b2;

        r3 = "SENDBPDATA";

        r10 = virtualinvoke r3.<java.lang.String: byte[] getBytes()>();

        i0 = lengthof r10;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r10, 0, $r9, i3, i0);

        i0 = lengthof r10;

     label16:
        i0 = i1 - 1;

        $r9[i0] = 23;

        b2 = staticinvoke <com.feelingk.iap.net.IAPNet: byte iapWrite(byte[])>($r9);

        if b2 == 0 goto label23;

        virtualinvoke r2.<com.feelingk.iap.net.InitConfirm: void setResultCode(byte)>(b2);

        virtualinvoke r2.<com.feelingk.iap.net.InitConfirm: void SetUserMessage(java.lang.String)>("\ub124\ud2b8\uc6cc\ud06c \uc804\uc1a1\uc911 \uc5d0\ub7ec\uc785\ub2c8\ub2e4.");

        return;

     label17:
        r10 = null;

        goto label04;

     label18:
        r6 = "IP";

        goto label05;

     label19:
        i1 = i1 + 1;

        i3 = virtualinvoke r4.<java.lang.String: int length()>();

        i1 = i1 + i3;

        goto label08;

     label20:
        $r9[i3] = 0;

        i3 = i3 + 1;

        goto label09;

     label21:
        r3 = "13";

        goto label15;

     label22:
        i3 = i0 + 1;

        i4 = virtualinvoke r4.<java.lang.String: int length()>();

        b2 = (byte) i4;

        $r9[i0] = b2;

        r10 = virtualinvoke r4.<java.lang.String: byte[] getBytes()>();

        i0 = lengthof r10;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r10, 0, $r9, i3, i0);

        r10 = virtualinvoke r4.<java.lang.String: byte[] getBytes()>();

        i0 = lengthof r10;

        goto label16;

     label23:
        virtualinvoke r2.<com.feelingk.iap.net.InitConfirm: void setResultCode(byte)>(0);

        <com.feelingk.iap.net.IAPNet: boolean isInit> = 1;

        return;

     label24:
        goto label16;

     label25:
        goto label13;
    }

    protected static void iapSendInitBP(com.feelingk.iap.net.InitConfirm, int, java.lang.String, java.lang.String, byte[], int)
    {
        byte[] r1, r4, $r6, $r7, $r8;
        byte b4;
        int i0, i1, $i2, i3;
        java.lang.StringBuilder r9;
        java.lang.String r2, r3, $r5;
        com.feelingk.iap.net.InitConfirm $r0;

        $r0 := @parameter0: com.feelingk.iap.net.InitConfirm;

        i1 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: byte[];

        i0 := @parameter5: int;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.String: byte[] getBytes()>();

        staticinvoke <com.feelingk.iap.util.CommonF$LOGGER: void i(java.lang.String,java.lang.String)>("IAPNet", "[ DEBUG ] iapSendInitBP()  __ Start");

        i0 = 12 + 1;

        i0 = i0 + 8;

        i0 = i0 + 1;

        i0 = i0 + 10;

        i0 = i0 + 11;

        i0 = i0 + 1;

        if r4 == null goto label01;

        i0 = lengthof r4;

        i0 = i0 + 44;

     label01:
        i0 = i0 + 7;

        i0 = i0 + 10;

        if i1 == 2 goto label02;

        if i1 != 3 goto label03;

     label02:
        i0 = i0 + 2;

        i0 = i0 + 1;

        $r5 = "SENDBPDATA";

        $i2 = virtualinvoke $r5.<java.lang.String: int length()>();

        i0 = i0 + $i2;

     label03:
        i0 = i0 + 1;

        r1 = newarray (byte)[i0];

        $i2 = 0;

     label04:
        if $i2 < i0 goto label10;

        $i2 = i0 - 12;

        $r7 = staticinvoke <com.feelingk.iap.net.IAPNetworkUtil: byte[] iapMakePacketHeader(java.lang.String,int)>("IP", $i2);

        $i2 = lengthof $r7;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, r1, 0, $i2);

        $i2 = 12;

        i3 = $i2 + 1;

        r1[$i2] = 71;

        $r5 = "IAP11.06.07";

        $r7 = virtualinvoke $r5.<java.lang.String: byte[] getBytes()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, r1, i3, 8);

        i3 = i3 + 8;

        $i2 = i3 + 1;

        r1[i3] = 65;

        $r7 = virtualinvoke r2.<java.lang.String: byte[] getBytes()>();

        $r8 = virtualinvoke r2.<java.lang.String: byte[] getBytes()>();

        i3 = lengthof $r8;

        i3 = staticinvoke <java.lang.Math: int min(int,int)>(i3, 10);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, r1, $i2, i3);

        $i2 = $i2 + 10;

        $r7 = virtualinvoke r3.<java.lang.String: byte[] getBytes()>();

        $r8 = virtualinvoke r3.<java.lang.String: byte[] getBytes()>();

        i3 = lengthof $r8;

        i3 = staticinvoke <java.lang.Math: int min(int,int)>(i3, 11);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, r1, $i2, i3);

        $i2 = $i2 + 11;

        if r4 == null goto label05;

        i3 = lengthof r4;

        b4 = (byte) i3;

        r1[$i2] = b4;

     label05:
        $i2 = $i2 + 1;

        if r4 == null goto label06;

        i3 = lengthof r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, r1, $i2, i3);

        $i2 = lengthof r4;

        $i2 = $i2 + 44;

        i3 = lengthof $r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r1, $i2, i3);

     label06:
        $i2 = $i2 + 7;

        $i2 = $i2 + 10;

        r9 = new java.lang.StringBuilder;

        specialinvoke r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("[ DEBUG ] \ud1b5\uc2e0\uc0ac ");

        r9 = virtualinvoke r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        r2 = virtualinvoke r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("IAPNet", r2);

        if i1 == 2 goto label07;

        if i1 != 3 goto label13;

     label07:
        if i1 != 2 goto label11;

        r2 = "12";

     label08:
        r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2);

        r4 = virtualinvoke r2.<java.lang.String: byte[] getBytes()>();

        i1 = lengthof r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, r1, $i2, i1);

        $i2 = $i2 + 2;

        i1 = $i2 + 1;

        r2 = "SENDBPDATA";

        i3 = virtualinvoke r2.<java.lang.String: int length()>();

        b4 = (byte) i3;

        r1[$i2] = b4;

        r2 = "SENDBPDATA";

        r4 = virtualinvoke r2.<java.lang.String: byte[] getBytes()>();

        $i2 = lengthof r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, r1, i1, $i2);

        i1 = lengthof r4;

     label09:
        i1 = i0 - 1;

        r1[i1] = 23;

        b4 = staticinvoke <com.feelingk.iap.net.IAPNet: byte iapWriteBP(byte[])>(r1);

        if b4 == 0 goto label12;

        virtualinvoke $r0.<com.feelingk.iap.net.InitConfirm: void setResultCode(byte)>(b4);

        virtualinvoke $r0.<com.feelingk.iap.net.InitConfirm: void SetUserMessage(java.lang.String)>("\ub124\ud2b8\uc6cc\ud06c \uc5f0\uacb0\uc744 \ud655\uc778 \ud574\uc8fc\uc2dc\uae30 \ubc14\ub78d\ub2c8\ub2e4.");

        return;

     label10:
        r1[$i2] = 0;

        $i2 = $i2 + 1;

        goto label04;

     label11:
        r2 = "13";

        goto label08;

     label12:
        virtualinvoke $r0.<com.feelingk.iap.net.InitConfirm: void setResultCode(byte)>(0);

        return;

     label13:
        goto label09;
    }

    protected static com.feelingk.iap.net.ItemInfoConfirm iapSendItemInfoQuery(java.lang.String)
    {
        com.feelingk.iap.net.ItemInfoConfirm r1;
        byte[] r2, $r3;
        byte $b3;
        int i0, i1, $i2;
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        r1 = new com.feelingk.iap.net.ItemInfoConfirm;

        specialinvoke r1.<com.feelingk.iap.net.ItemInfoConfirm: void <init>()>();

        staticinvoke <com.feelingk.iap.util.CommonF$LOGGER: void i(java.lang.String,java.lang.String)>("IAPNet", "[ DEBUG ] iapSendItemInfoQuery()");

        i0 = 12 + 10;

        i0 = i0 + 1;

        r2 = newarray (byte)[i0];

        i1 = 0;

     label1:
        if i1 < i0 goto label2;

        i1 = i0 - 12;

        $r3 = staticinvoke <com.feelingk.iap.net.IAPNetworkUtil: byte[] iapMakePacketHeader(java.lang.String,int)>("GP", i1);

        i1 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r2, 0, i1);

        i1 = 12;

        $r0 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r0);

        $r3 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        $i2 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r2, i1, $i2);

        i0 = i0 - 1;

        r2[i0] = 23;

        $b3 = staticinvoke <com.feelingk.iap.net.IAPNet: byte iapWrite(byte[])>(r2);

        if $b3 == 0 goto label3;

        virtualinvoke r1.<com.feelingk.iap.net.ItemInfoConfirm: void setResultCode(byte)>($b3);

        virtualinvoke r1.<com.feelingk.iap.net.ItemInfoConfirm: void SetUserMessage(java.lang.String)>("\ub124\ud2b8\uc6cc\ud06c \uc804\uc1a1\uc911 \uc5d0\ub7ec\uc785\ub2c8\ub2e4.");

        return r1;

     label2:
        r2[i1] = 0;

        i1 = i1 + 1;

        goto label1;

     label3:
        r2 = staticinvoke <com.feelingk.iap.net.IAPNet: byte[] iapReceive(com.feelingk.iap.net.Confirm)>(r1);

        $b3 = virtualinvoke r1.<com.feelingk.iap.net.ItemInfoConfirm: byte getResultCode()>();

        if $b3 == 0 goto label4;

        virtualinvoke r1.<com.feelingk.iap.net.ItemInfoConfirm: void SetUserMessage(java.lang.String)>("\ub124\ud2b8\uc6cc\ud06c \uc804\uc1a1\uc911 \uc5d0\ub7ec\uc785\ub2c8\ub2e4.");

        return r1;

     label4:
        virtualinvoke r1.<com.feelingk.iap.net.ItemInfoConfirm: void parse(byte[])>(r2);

        return r1;
    }

    protected static com.feelingk.iap.net.MsgConfirm iapSendItemPurchase(java.lang.String, java.lang.String, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.Boolean)
    {
        byte[] r2, $r11, $r12;
        byte $b2;
        int i0, i1, i3;
        java.lang.Boolean r5, r7;
        java.lang.String $r0, r3, r4, r6, $r9, $r10;
        boolean $z0;
        com.feelingk.iap.net.MsgConfirm r1;
        java.lang.StringBuilder r8;

        r3 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        r5 := @parameter2: java.lang.Boolean;

        r6 := @parameter3: java.lang.String;

        $r0 := @parameter4: java.lang.String;

        r7 := @parameter5: java.lang.Boolean;

        r1 = new com.feelingk.iap.net.MsgConfirm;

        specialinvoke r1.<com.feelingk.iap.net.MsgConfirm: void <init>()>();

        r8 = new java.lang.StringBuilder;

        specialinvoke r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("[ DEBUG ] iapSendItemPurchase() bUseBPProtocol = ");

        r8 = virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        r8 = virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  START !!!!!!!!");

        $r9 = virtualinvoke r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.feelingk.iap.util.CommonF$LOGGER: void i(java.lang.String,java.lang.String)>("IAPNet", $r9);

        i0 = 12 + 10;

        $z0 = virtualinvoke r7.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label09;

        $r9 = "BP";

     label01:
        i0 = i0 + 1;

        r2 = newarray (byte)[i0];

        i1 = 0;

     label02:
        if i1 < i0 goto label12;

        r8 = new java.lang.StringBuilder;

        specialinvoke r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("[ DEBUG ] iapSendItemPurchase()  bTCash=");

        r8 = virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        r8 = virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("// PName=");

        if r4 != null goto label13;

        $b2 = 0;

     label03:
        r8 = virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($b2);

        $r10 = virtualinvoke r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.feelingk.iap.util.CommonF$LOGGER: void i(java.lang.String,java.lang.String)>("IAPNet", $r10);

        i1 = i0 - 12;

        $r11 = staticinvoke <com.feelingk.iap.net.IAPNetworkUtil: byte[] iapMakePacketHeader(java.lang.String,int)>($r9, i1);

        i1 = lengthof $r11;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r11, 0, r2, 0, i1);

        i1 = 12;

        r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3);

        $r11 = virtualinvoke r3.<java.lang.String: byte[] getBytes()>();

        i3 = lengthof $r11;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r11, 0, r2, i1, i3);

        i1 = i1 + 10;

        $z0 = virtualinvoke r7.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label08;

        $z0 = virtualinvoke r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label14;

        r2[i1] = 89;

     label04:
        i1 = i1 + 1;

        if r4 == null goto label05;

        i3 = virtualinvoke r4.<java.lang.String: int length()>();

        $b2 = (byte) i3;

        r2[i1] = $b2;

     label05:
        i1 = i1 + 1;

        if r4 == null goto label06;

        $r11 = virtualinvoke r4.<java.lang.String: byte[] getBytes()>();

        $r12 = virtualinvoke r4.<java.lang.String: byte[] getBytes()>();

        i3 = lengthof $r12;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r11, 0, r2, i1, i3);

        $r11 = virtualinvoke r4.<java.lang.String: byte[] getBytes()>();

        i1 = lengthof $r11;

        i1 = i1 + 24;

     label06:
        if r6 == null goto label07;

        $r11 = virtualinvoke r6.<java.lang.String: byte[] getBytes()>();

        $r12 = virtualinvoke r6.<java.lang.String: byte[] getBytes()>();

        i3 = lengthof $r12;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r11, 0, r2, i1, i3);

        i1 = i1 + 100;

     label07:
        if $r0 == null goto label08;

        i3 = virtualinvoke $r0.<java.lang.String: int length()>();

        $b2 = (byte) i3;

        r2[i1] = $b2;

        i1 = i1 + 1;

        $r11 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        $r12 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        i3 = lengthof $r12;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r11, 0, r2, i1, i3);

        $r11 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        i1 = lengthof $r11;

     label08:
        i0 = i0 - 1;

        r2[i0] = 23;

        $b2 = staticinvoke <com.feelingk.iap.net.IAPNet: byte iapWrite(byte[])>(r2);

        if $b2 == 0 goto label15;

        virtualinvoke r1.<com.feelingk.iap.net.MsgConfirm: void setResultCode(byte)>($b2);

        virtualinvoke r1.<com.feelingk.iap.net.MsgConfirm: void SetUserMessage(java.lang.String)>("\ub124\ud2b8\uc6cc\ud06c \uc804\uc1a1\uc911 \uc5d0\ub7ec\uc785\ub2c8\ub2e4.");

        return r1;

     label09:
        $r9 = "HP";

        i0 = i0 + 1;

        i0 = i0 + 1;

        if r4 == null goto label10;

        r2 = virtualinvoke r4.<java.lang.String: byte[] getBytes()>();

        i0 = lengthof r2;

        i0 = i0 + 24;

     label10:
        if r6 == null goto label11;

        $r9 = "OP";

        i0 = i0 + 100;

        i0 = i0 + 1;

     label11:
        if $r0 == null goto label17;

        r2 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        i1 = lengthof r2;

        i0 = i0 + i1;

        goto label01;

     label12:
        r2[i1] = 0;

        i1 = i1 + 1;

        goto label02;

     label13:
        $b2 = 1;

        goto label03;

     label14:
        r2[i1] = 78;

        goto label04;

     label15:
        r2 = staticinvoke <com.feelingk.iap.net.IAPNet: byte[] iapReceive(com.feelingk.iap.net.Confirm)>(r1);

        $b2 = virtualinvoke r1.<com.feelingk.iap.net.MsgConfirm: byte getResultCode()>();

        if $b2 == 0 goto label16;

        virtualinvoke r1.<com.feelingk.iap.net.MsgConfirm: void SetUserMessage(java.lang.String)>("\ub124\ud2b8\uc6cc\ud06c \uc804\uc1a1\uc911 \uc5d0\ub7ec\uc785\ub2c8\ub2e4.");

        return r1;

     label16:
        virtualinvoke r1.<com.feelingk.iap.net.MsgConfirm: void parse(byte[])>(r2);

        return r1;

     label17:
        goto label01;
    }

    protected static com.feelingk.iap.net.MsgConfirm iapSendItemPurchaseByDanal(java.lang.String, java.lang.String, java.lang.String, int, java.lang.String, java.lang.String, boolean, java.lang.String)
    {
        byte[] r10, $r11, $r12;
        byte b3;
        int $i0, i1, $i2, $i4;
        java.lang.String $r0, $r1, r3, r4, r5, r6, r7, $r9;
        boolean $z0, z1;
        com.feelingk.iap.net.MsgConfirm r2;
        java.lang.StringBuilder r8;

        r3 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        r5 := @parameter2: java.lang.String;

        $i0 := @parameter3: int;

        r6 := @parameter4: java.lang.String;

        $r0 := @parameter5: java.lang.String;

        $z0 := @parameter6: boolean;

        $r1 := @parameter7: java.lang.String;

        r7 = "KP";

        r2 = new com.feelingk.iap.net.MsgConfirm;

        specialinvoke r2.<com.feelingk.iap.net.MsgConfirm: void <init>()>();

        if r5 == null goto label20;

        i1 = virtualinvoke r5.<java.lang.String: int length()>();

        i1 = i1 + 13;

     label01:
        if r6 != null goto label02;

        if $r0 == null goto label19;

     label02:
        i1 = i1 + 100;

        i1 = i1 + 1;

        if $r0 == null goto label18;

        $i2 = virtualinvoke $r0.<java.lang.String: int length()>();

        z1 = 1;

        i1 = i1 + $i2;

        r7 = "XP";

     label03:
        r8 = new java.lang.StringBuilder;

        specialinvoke r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("[ DEBUG ] iapSendItemPurchaseByDanal() STart!! ");

        r8 = virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r9 = virtualinvoke r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.feelingk.iap.util.CommonF$LOGGER: void i(java.lang.String,java.lang.String)>("IAPNet", $r9);

        i1 = i1 + 10;

        i1 = i1 + 2;

        i1 = i1 + 11;

        i1 = i1 + 1;

        $i2 = virtualinvoke $r1.<java.lang.String: int length()>();

        i1 = i1 + $i2;

        i1 = i1 + 1;

        i1 = i1 + 1;

        if $i0 != 2 goto label12;

        $r9 = "12";

     label04:
        r10 = newarray (byte)[i1];

        $i0 = 0;

     label05:
        if $i0 < i1 goto label14;

        $i0 = i1 - 12;

        $r11 = staticinvoke <com.feelingk.iap.net.IAPNetworkUtil: byte[] iapMakePacketHeader(java.lang.String,int)>(r7, $i0);

        $i0 = lengthof $r11;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r11, 0, r10, 0, $i0);

        $i0 = 12;

        r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r4);

        $r11 = virtualinvoke r4.<java.lang.String: byte[] getBytes()>();

        $i2 = lengthof $r11;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r11, 0, r10, $i0, $i2);

        $i0 = $i0 + 10;

        r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r9);

        $r11 = virtualinvoke r4.<java.lang.String: byte[] getBytes()>();

        $i2 = lengthof $r11;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r11, 0, r10, $i0, $i2);

        $i0 = $i0 + 2;

        r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3);

        $r11 = virtualinvoke r3.<java.lang.String: byte[] getBytes()>();

        $i2 = lengthof $r11;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r11, 0, r10, $i0, $i2);

        $i0 = $i0 + 11;

        if r6 == null goto label06;

        $r11 = virtualinvoke r6.<java.lang.String: byte[] getBytes()>();

        $r12 = virtualinvoke r6.<java.lang.String: byte[] getBytes()>();

        $i2 = lengthof $r12;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r11, 0, r10, $i0, $i2);

        $i0 = $i0 + 100;

     label06:
        if r5 == null goto label07;

        $i2 = virtualinvoke r5.<java.lang.String: int length()>();

        b3 = (byte) $i2;

        r10[$i0] = b3;

     label07:
        $i0 = $i0 + 1;

        if r5 == null goto label08;

        $r11 = virtualinvoke r5.<java.lang.String: byte[] getBytes()>();

        $r12 = virtualinvoke r5.<java.lang.String: byte[] getBytes()>();

        $i2 = lengthof $r12;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r11, 0, r10, $i0, $i2);

        $r11 = virtualinvoke r5.<java.lang.String: byte[] getBytes()>();

        $i2 = lengthof $r11;

        $i0 = $i0 + $i2;

     label08:
        if z1 == 0 goto label10;

        if $r0 == null goto label09;

        $i2 = virtualinvoke $r0.<java.lang.String: int length()>();

        b3 = (byte) $i2;

        r10[$i0] = b3;

     label09:
        $i0 = $i0 + 1;

        if $r0 == null goto label10;

        $r11 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        $r12 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        $i2 = lengthof $r12;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r11, 0, r10, $i0, $i2);

        $r11 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        $i2 = lengthof $r11;

        $i0 = $i0 + $i2;

     label10:
        $i2 = $i0 + 1;

        $i4 = virtualinvoke $r1.<java.lang.String: int length()>();

        b3 = (byte) $i4;

        r10[$i0] = b3;

        r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        $r11 = virtualinvoke r3.<java.lang.String: byte[] getBytes()>();

        $i0 = lengthof $r11;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r11, 0, r10, $i2, $i0);

        $r11 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        $i0 = lengthof $r11;

        $i0 = $i0 + $i2;

        r8 = new java.lang.StringBuilder;

        specialinvoke r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("Jumin=");

        $i2 = virtualinvoke $r1.<java.lang.String: int length()>();

        r8 = virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        r8 = virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  // Value = ");

        r8 = virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        r3 = virtualinvoke r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.feelingk.iap.util.CommonF$LOGGER: void e(java.lang.String,java.lang.String)>("DEBUG", r3);

        if $z0 == 0 goto label15;

        r10[$i0] = 89;

     label11:
        $i0 = i1 - 1;

        r10[$i0] = 23;

        b3 = staticinvoke <com.feelingk.iap.net.IAPNet: byte iapWrite(byte[])>(r10);

        $i0 = lengthof r10;

        staticinvoke <com.feelingk.iap.net.IAPNetworkUtil: void packetDebug(byte[],int)>(r10, $i0);

        if b3 == 0 goto label16;

        virtualinvoke r2.<com.feelingk.iap.net.MsgConfirm: void setResultCode(byte)>(b3);

        virtualinvoke r2.<com.feelingk.iap.net.MsgConfirm: void SetUserMessage(java.lang.String)>("\ub124\ud2b8\uc6cc\ud06c \uc804\uc1a1\uc911 \uc5d0\ub7ec\uc785\ub2c8\ub2e4.");

        return r2;

     label12:
        if $i0 != 3 goto label13;

        $r9 = "13";

        goto label04;

     label13:
        $r9 = "11";

        goto label04;

     label14:
        r10[$i0] = 0;

        $i0 = $i0 + 1;

        goto label05;

     label15:
        r10[$i0] = 78;

        goto label11;

     label16:
        r10 = staticinvoke <com.feelingk.iap.net.IAPNet: byte[] iapReceive(com.feelingk.iap.net.Confirm)>(r2);

        b3 = virtualinvoke r2.<com.feelingk.iap.net.MsgConfirm: byte getResultCode()>();

        if b3 == 0 goto label17;

        virtualinvoke r2.<com.feelingk.iap.net.MsgConfirm: void SetUserMessage(java.lang.String)>("\ub124\ud2b8\uc6cc\ud06c \uc804\uc1a1\uc911 \uc5d0\ub7ec\uc785\ub2c8\ub2e4.");

        return r2;

     label17:
        virtualinvoke r2.<com.feelingk.iap.net.MsgConfirm: void parse(byte[])>(r10);

        staticinvoke <com.feelingk.iap.util.CommonF$LOGGER: void i(java.lang.String,java.lang.String)>("IAPNet", "[ DEBUG ] iapSendItemPurchaseByDanal()  End !!!!!!!!");

        return r2;

     label18:
        z1 = 1;

        r7 = "XP";

        goto label03;

     label19:
        z1 = 0;

        goto label03;

     label20:
        i1 = 12 + 1;

        goto label01;
    }

    protected static com.feelingk.iap.net.MsgConfirm iapSendItemQuery(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        byte[] $r8, $r9, $r10;
        com.feelingk.iap.net.MsgConfirm r1;
        byte b3;
        int i0, $i1, i2;
        java.lang.StringBuilder r6;
        java.lang.String $r0, r2, r3, r4, r5, $r7;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        $r0 := @parameter3: java.lang.String;

        r5 = "LP";

        r1 = new com.feelingk.iap.net.MsgConfirm;

        specialinvoke r1.<com.feelingk.iap.net.MsgConfirm: void <init>()>();

        r6 = new java.lang.StringBuilder;

        specialinvoke r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("[ DEBUG ] iapSendItemQuery() PID=");

        r6 = virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r7 = virtualinvoke r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.feelingk.iap.util.CommonF$LOGGER: void i(java.lang.String,java.lang.String)>("IAPNet", $r7);

        i0 = 12 + 10;

        i0 = i0 + 1;

        if r3 == null goto label01;

        $r8 = virtualinvoke r3.<java.lang.String: byte[] getBytes()>();

        i0 = lengthof $r8;

        i0 = i0 + 23;

        r5 = "EP";

     label01:
        if r4 == null goto label12;

        i0 = i0 + 100;

        r5 = "NP";

        i0 = i0 + 1;

     label02:
        if $r0 == null goto label03;

        $r8 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        $i1 = lengthof $r8;

        i0 = i0 + $i1;

     label03:
        i0 = i0 + 1;

        $r8 = newarray (byte)[i0];

        $i1 = 0;

     label04:
        if $i1 < i0 goto label09;

        $i1 = i0 - 12;

        $r9 = staticinvoke <com.feelingk.iap.net.IAPNetworkUtil: byte[] iapMakePacketHeader(java.lang.String,int)>(r5, $i1);

        staticinvoke <com.feelingk.iap.net.IAPNetworkUtil: void packetDebug(byte[],int)>($r9, 12);

        $i1 = lengthof $r9;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, $r8, 0, $i1);

        $i1 = 12;

        r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2);

        $r9 = virtualinvoke r2.<java.lang.String: byte[] getBytes()>();

        i2 = lengthof $r9;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, $r8, $i1, i2);

        $i1 = $i1 + 10;

        if r3 == null goto label05;

        $r9 = virtualinvoke r3.<java.lang.String: byte[] getBytes()>();

        i2 = lengthof $r9;

        b3 = (byte) i2;

        $r8[$i1] = b3;

     label05:
        $i1 = $i1 + 1;

        if r3 == null goto label06;

        $r9 = virtualinvoke r3.<java.lang.String: byte[] getBytes()>();

        $r10 = virtualinvoke r3.<java.lang.String: byte[] getBytes()>();

        i2 = lengthof $r10;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, $r8, $i1, i2);

        $r9 = virtualinvoke r3.<java.lang.String: byte[] getBytes()>();

        $i1 = lengthof $r9;

        $i1 = $i1 + 23;

     label06:
        if r4 == null goto label07;

        $r9 = virtualinvoke r4.<java.lang.String: byte[] getBytes()>();

        $r10 = virtualinvoke r4.<java.lang.String: byte[] getBytes()>();

        i2 = lengthof $r10;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, $r8, $i1, i2);

        $i1 = $i1 + 100;

        $i1 = $i1 + 1;

     label07:
        if $r0 == null goto label08;

        $r9 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        i2 = lengthof $r9;

        b3 = (byte) i2;

        $r8[$i1] = b3;

        $r9 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        $r10 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        i2 = lengthof $r10;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, $r8, $i1, i2);

        $r9 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        $i1 = lengthof $r9;

     label08:
        i0 = i0 - 1;

        $r8[i0] = 23;

        b3 = staticinvoke <com.feelingk.iap.net.IAPNet: byte iapWrite(byte[])>($r8);

        if b3 == 0 goto label10;

        virtualinvoke r1.<com.feelingk.iap.net.MsgConfirm: void setResultCode(byte)>(b3);

        virtualinvoke r1.<com.feelingk.iap.net.MsgConfirm: void SetUserMessage(java.lang.String)>("\ub124\ud2b8\uc6cc\ud06c \uc804\uc1a1\uc911 \uc5d0\ub7ec\uc785\ub2c8\ub2e4.");

        return r1;

     label09:
        $r8[$i1] = 0;

        $i1 = $i1 + 1;

        goto label04;

     label10:
        $r8 = staticinvoke <com.feelingk.iap.net.IAPNet: byte[] iapReceive(com.feelingk.iap.net.Confirm)>(r1);

        b3 = virtualinvoke r1.<com.feelingk.iap.net.MsgConfirm: byte getResultCode()>();

        if b3 == 0 goto label11;

        virtualinvoke r1.<com.feelingk.iap.net.MsgConfirm: void SetUserMessage(java.lang.String)>("\ub124\ud2b8\uc6cc\ud06c \uc804\uc1a1\uc911 \uc5d0\ub7ec\uc785\ub2c8\ub2e4.");

        return r1;

     label11:
        virtualinvoke r1.<com.feelingk.iap.net.MsgConfirm: void parse(byte[])>($r8);

        return r1;

     label12:
        goto label02;
    }

    protected static com.feelingk.iap.net.ItemUseConfirm iapSendItemUse(java.lang.String)
    {
        byte[] r2, $r3;
        byte $b3;
        int i0, i1, $i2;
        java.lang.String $r0;
        com.feelingk.iap.net.ItemUseConfirm r1;

        $r0 := @parameter0: java.lang.String;

        r1 = new com.feelingk.iap.net.ItemUseConfirm;

        specialinvoke r1.<com.feelingk.iap.net.ItemUseConfirm: void <init>()>();

        i0 = 12 + 10;

        i0 = i0 + 1;

        r2 = newarray (byte)[i0];

        i1 = 0;

     label1:
        if i1 < i0 goto label2;

        i1 = i0 - 12;

        $r3 = staticinvoke <com.feelingk.iap.net.IAPNetworkUtil: byte[] iapMakePacketHeader(java.lang.String,int)>("MP", i1);

        i1 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r2, 0, i1);

        i1 = 12;

        $r0 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r0);

        $r3 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        $i2 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r2, i1, $i2);

        i0 = i0 - 1;

        r2[i0] = 23;

        $b3 = staticinvoke <com.feelingk.iap.net.IAPNet: byte iapWrite(byte[])>(r2);

        if $b3 == 0 goto label3;

        virtualinvoke r1.<com.feelingk.iap.net.ItemUseConfirm: void setResultCode(byte)>($b3);

        virtualinvoke r1.<com.feelingk.iap.net.ItemUseConfirm: void SetUserMessage(java.lang.String)>("\ub124\ud2b8\uc6cc\ud06c \uc804\uc1a1\uc911 \uc5d0\ub7ec\uc785\ub2c8\ub2e4.");

        return r1;

     label2:
        r2[i1] = 0;

        i1 = i1 + 1;

        goto label1;

     label3:
        r2 = staticinvoke <com.feelingk.iap.net.IAPNet: byte[] iapReceive(com.feelingk.iap.net.Confirm)>(r1);

        $b3 = virtualinvoke r1.<com.feelingk.iap.net.ItemUseConfirm: byte getResultCode()>();

        if $b3 == 0 goto label4;

        virtualinvoke r1.<com.feelingk.iap.net.ItemUseConfirm: void SetUserMessage(java.lang.String)>("\ub124\ud2b8\uc6cc\ud06c \uc804\uc1a1\uc911 \uc5d0\ub7ec\uc785\ub2c8\ub2e4.");

        return r1;

     label4:
        virtualinvoke r1.<com.feelingk.iap.net.ItemUseConfirm: void parse(byte[])>(r2);

        return r1;
    }

    protected static com.feelingk.iap.net.ItemWholeAuthConfirm iapSendItemWholeAuth()
    {
        byte[] r1, $r2;
        byte $b2;
        int i0, i1;
        com.feelingk.iap.net.ItemWholeAuthConfirm r0;

        r0 = new com.feelingk.iap.net.ItemWholeAuthConfirm;

        specialinvoke r0.<com.feelingk.iap.net.ItemWholeAuthConfirm: void <init>()>();

        staticinvoke <com.feelingk.iap.util.CommonF$LOGGER: void i(java.lang.String,java.lang.String)>("IAPNet", "[ DEBUG ] iapSendItemWholeAuth()");

        i0 = 12 + 1;

        r1 = newarray (byte)[i0];

        i1 = 0;

     label1:
        if i1 < i0 goto label2;

        i1 = i0 - 12;

        $r2 = staticinvoke <com.feelingk.iap.net.IAPNetworkUtil: byte[] iapMakePacketHeader(java.lang.String,int)>("AP", i1);

        i1 = lengthof $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, i1);

        i0 = i0 - 1;

        r1[i0] = 23;

        $b2 = staticinvoke <com.feelingk.iap.net.IAPNet: byte iapWrite(byte[])>(r1);

        if $b2 == 0 goto label3;

        virtualinvoke r0.<com.feelingk.iap.net.ItemWholeAuthConfirm: void setResultCode(byte)>($b2);

        virtualinvoke r0.<com.feelingk.iap.net.ItemWholeAuthConfirm: void SetUserMessage(java.lang.String)>("\ub124\ud2b8\uc6cc\ud06c \uc804\uc1a1\uc911 \uc5d0\ub7ec\uc785\ub2c8\ub2e4.");

        return r0;

     label2:
        r1[i1] = 0;

        i1 = i1 + 1;

        goto label1;

     label3:
        r1 = staticinvoke <com.feelingk.iap.net.IAPNet: byte[] iapReceive(com.feelingk.iap.net.Confirm)>(r0);

        $b2 = virtualinvoke r0.<com.feelingk.iap.net.ItemWholeAuthConfirm: byte getResultCode()>();

        if $b2 == 0 goto label4;

        virtualinvoke r0.<com.feelingk.iap.net.ItemWholeAuthConfirm: void SetUserMessage(java.lang.String)>("\ub124\ud2b8\uc6cc\ud06c \uc804\uc1a1\uc911 \uc5d0\ub7ec\uc785\ub2c8\ub2e4.");

        return r0;

     label4:
        virtualinvoke r0.<com.feelingk.iap.net.ItemWholeAuthConfirm: void parse(byte[])>(r1);

        return r0;
    }

    protected static byte iapWrite(byte[])
    {
        java.io.OutputStream $r3;
        java.lang.Throwable $r4, $r5, $r6;
        byte[] $r0;
        byte $b0;
        java.net.SocketTimeoutException $r8;
        int $i1;
        java.lang.StringBuilder $r1, $r7;
        java.lang.String $r2;
        boolean $z0;

        $r0 := @parameter0: byte[];

        entermonitor class "Lcom/feelingk/iap/net/IAPNet;";

     label01:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("[ DEBUG ] iapWrite connect(");

        $z0 = <com.feelingk.iap.net.IAPNet: boolean connect>;

        $r1 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.feelingk.iap.util.CommonF$LOGGER: void e(java.lang.String,java.lang.String)>("IAPNet", $r2);

        $z0 = <com.feelingk.iap.net.IAPNet: boolean connect>;

     label02:
        if $z0 != 0 goto label04;

        $b0 = -2;

     label03:
        exitmonitor class "Lcom/feelingk/iap/net/IAPNet;";

        return $b0;

     label04:
        $i1 = lengthof $r0;

        staticinvoke <com.feelingk.iap.net.IAPNetworkUtil: void packetDebug(byte[],int)>($r0, $i1);

     label05:
        $r3 = <com.feelingk.iap.net.IAPNet: java.io.OutputStream outputStream>;

        $i1 = lengthof $r0;

     label06:
        virtualinvoke $r3.<java.io.OutputStream: void write(byte[],int,int)>($r0, 0, $i1);

     label07:
        $r3 = <com.feelingk.iap.net.IAPNet: java.io.OutputStream outputStream>;

     label08:
        virtualinvoke $r3.<java.io.OutputStream: void flush()>();

     label09:
        staticinvoke <com.feelingk.iap.util.CommonF$LOGGER: void e(java.lang.String,java.lang.String)>("IAPNet", "[ DEBUG ] iapWrite End  ");

        $b0 = 0;

        goto label03;

     label10:
        $r4 := @caughtexception;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("[ Exception ] iapWrite() ");

        $r1 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.feelingk.iap.util.CommonF$LOGGER: void i(java.lang.String,java.lang.String)>("IAPNet", $r2);

        $r8 = (java.net.SocketTimeoutException) $r4;

        virtualinvoke $r8.<java.net.SocketTimeoutException: void printStackTrace()>();

        $b0 = -12;

        goto label03;

     label11:
        $r5 := @caughtexception;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("[ Exception ] iapWrite() ");

        $r1 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.feelingk.iap.util.CommonF$LOGGER: void i(java.lang.String,java.lang.String)>("IAPNet", $r2);

     label12:
        $b0 = -4;

        goto label03;

     label13:
        $r6 := @caughtexception;

        exitmonitor class "Lcom/feelingk/iap/net/IAPNet;";

        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.net.SocketTimeoutException from label06 to label07 with label10;
        catch java.net.SocketTimeoutException from label08 to label09 with label10;
        catch java.io.IOException from label06 to label07 with label11;
        catch java.io.IOException from label08 to label09 with label11;
        catch java.lang.Throwable from label05 to label09 with label13;
        catch java.lang.Throwable from label09 to label12 with label13;
    }

    protected static byte iapWriteBP(byte[])
    {
        java.io.OutputStream $r1;
        java.lang.Throwable $r2, $r5;
        byte[] $r0;
        byte $b0;
        int $i1;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        boolean $z0;

        $r0 := @parameter0: byte[];

        entermonitor class "Lcom/feelingk/iap/net/IAPNet;";

     label01:
        $z0 = <com.feelingk.iap.net.IAPNet: boolean connectBP>;

     label02:
        if $z0 != 0 goto label04;

        $b0 = -2;

     label03:
        exitmonitor class "Lcom/feelingk/iap/net/IAPNet;";

        return $b0;

     label04:
        $r1 = <com.feelingk.iap.net.IAPNet: java.io.OutputStream outputStreamBP>;

        $i1 = lengthof $r0;

     label05:
        virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>($r0, 0, $i1);

     label06:
        $r1 = <com.feelingk.iap.net.IAPNet: java.io.OutputStream outputStreamBP>;

     label07:
        virtualinvoke $r1.<java.io.OutputStream: void flush()>();

     label08:
        $b0 = 0;

        goto label03;

     label09:
        $r2 := @caughtexception;

     label10:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("[ DEBUG ] iapWriteBP() ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.feelingk.iap.util.CommonF$LOGGER: void i(java.lang.String,java.lang.String)>("IAPNet", $r4);

     label11:
        $b0 = -4;

        goto label03;

     label12:
        $r5 := @caughtexception;

        exitmonitor class "Lcom/feelingk/iap/net/IAPNet;";

        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.io.IOException from label05 to label06 with label09;
        catch java.io.IOException from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label08 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
    }

    protected static boolean isConnect()
    {
        boolean z0;

        z0 = <com.feelingk.iap.net.IAPNet: boolean connect>;

        return z0;
    }

    protected static boolean isWifi()
    {
        boolean z0;

        z0 = <com.feelingk.iap.net.IAPNet: boolean isWifi>;

        return z0;
    }

    protected static void setWifi(boolean)
    {
        boolean $z0;

        $z0 := @parameter0: boolean;

        <com.feelingk.iap.net.IAPNet: boolean isWifi> = $z0;

        return;
    }
}
