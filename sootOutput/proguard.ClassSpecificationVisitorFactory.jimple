public class proguard.ClassSpecificationVisitorFactory extends java.lang.Object
{

    public void <init>()
    {
        proguard.ClassSpecificationVisitorFactory r0;

        r0 := @this: proguard.ClassSpecificationVisitorFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static void addMemberVisitors(java.util.List, boolean, proguard.classfile.visitor.MultiClassVisitor, proguard.classfile.visitor.MemberVisitor)
    {
        proguard.classfile.visitor.ClassVisitor $r5;
        proguard.classfile.visitor.MemberVisitor $r2;
        java.util.List $r0;
        proguard.classfile.visitor.MultiClassVisitor $r1;
        int $i0, $i1;
        java.lang.Object $r3;
        proguard.MemberSpecification $r4;
        boolean $z0;

        $r0 := @parameter0: java.util.List;

        $z0 := @parameter1: boolean;

        $r1 := @parameter2: proguard.classfile.visitor.MultiClassVisitor;

        $r2 := @parameter3: proguard.classfile.visitor.MemberVisitor;

        if $r0 == null goto label2;

        $i0 = 0;

     label1:
        $i1 = interfaceinvoke $r0.<java.util.List: int size()>();

        if $i0 >= $i1 goto label2;

        $r3 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>($i0);

        $r4 = (proguard.MemberSpecification) $r3;

        $r5 = staticinvoke <proguard.ClassSpecificationVisitorFactory: proguard.classfile.visitor.ClassVisitor createClassVisitor(proguard.MemberSpecification,boolean,proguard.classfile.visitor.MemberVisitor)>($r4, $z0, $r2);

        virtualinvoke $r1.<proguard.classfile.visitor.MultiClassVisitor: void addClassVisitor(proguard.classfile.visitor.ClassVisitor)>($r5);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    private static boolean containsWildCards(java.lang.String)
    {
        int $i0;
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        if $r0 == null goto label2;

        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(int)>(33);

        if $i0 >= 0 goto label1;

        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(int)>(42);

        if $i0 >= 0 goto label1;

        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(int)>(63);

        if $i0 >= 0 goto label1;

        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(int)>(37);

        if $i0 >= 0 goto label1;

        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(int)>(44);

        if $i0 >= 0 goto label1;

        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("///");

        if $i0 < 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    private static proguard.classfile.visitor.ClassVisitor createClassMemberTester(java.util.List, boolean, proguard.classfile.visitor.ClassVisitor)
    {
        proguard.classfile.visitor.ClassVisitor $r1;
        java.util.List $r0;
        int $i0, $i1;
        java.lang.Object $r3;
        proguard.classfile.visitor.MemberToClassVisitor $r2;
        proguard.MemberSpecification $r4;
        boolean $z0;

        $r0 := @parameter0: java.util.List;

        $z0 := @parameter1: boolean;

        $r1 := @parameter2: proguard.classfile.visitor.ClassVisitor;

        if $r0 == null goto label2;

        $i0 = 0;

     label1:
        $i1 = interfaceinvoke $r0.<java.util.List: int size()>();

        if $i0 >= $i1 goto label2;

        $r3 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>($i0);

        $r4 = (proguard.MemberSpecification) $r3;

        $r2 = new proguard.classfile.visitor.MemberToClassVisitor;

        specialinvoke $r2.<proguard.classfile.visitor.MemberToClassVisitor: void <init>(proguard.classfile.visitor.ClassVisitor)>($r1);

        $i0 = $i0 + 1;

        $r1 = staticinvoke <proguard.ClassSpecificationVisitorFactory: proguard.classfile.visitor.ClassVisitor createClassVisitor(proguard.MemberSpecification,boolean,proguard.classfile.visitor.MemberVisitor)>($r4, $z0, $r2);

        goto label1;

     label2:
        return $r1;
    }

    private static proguard.classfile.visitor.ClassVisitor createClassMemberTester(proguard.ClassSpecification, proguard.classfile.visitor.ClassVisitor)
    {
        java.util.List $r2, $r3;
        proguard.ClassSpecification $r0;
        proguard.classfile.visitor.ClassVisitor $r1;

        $r0 := @parameter0: proguard.ClassSpecification;

        $r1 := @parameter1: proguard.classfile.visitor.ClassVisitor;

        $r2 = $r0.<proguard.ClassSpecification: java.util.List fieldSpecifications>;

        $r3 = $r0.<proguard.ClassSpecification: java.util.List methodSpecifications>;

        $r1 = staticinvoke <proguard.ClassSpecificationVisitorFactory: proguard.classfile.visitor.ClassVisitor createClassMemberTester(java.util.List,boolean,proguard.classfile.visitor.ClassVisitor)>($r3, 0, $r1);

        $r1 = staticinvoke <proguard.ClassSpecificationVisitorFactory: proguard.classfile.visitor.ClassVisitor createClassMemberTester(java.util.List,boolean,proguard.classfile.visitor.ClassVisitor)>($r2, 1, $r1);

        return $r1;
    }

    public static proguard.classfile.visitor.ClassPoolVisitor createClassPoolVisitor(java.util.List, proguard.classfile.visitor.ClassVisitor, proguard.classfile.visitor.MemberVisitor)
    {
        proguard.classfile.visitor.ClassVisitor $r1;
        proguard.classfile.visitor.MemberVisitor $r2;
        java.util.List $r0;
        proguard.ClassSpecification $r5;
        proguard.classfile.visitor.ClassPoolVisitor $r6;
        int $i0, $i1;
        java.lang.Object $r4;
        proguard.classfile.visitor.MultiClassPoolVisitor $r3;

        $r0 := @parameter0: java.util.List;

        $r1 := @parameter1: proguard.classfile.visitor.ClassVisitor;

        $r2 := @parameter2: proguard.classfile.visitor.MemberVisitor;

        $r3 = new proguard.classfile.visitor.MultiClassPoolVisitor;

        specialinvoke $r3.<proguard.classfile.visitor.MultiClassPoolVisitor: void <init>()>();

        if $r0 == null goto label2;

        $i0 = 0;

     label1:
        $i1 = interfaceinvoke $r0.<java.util.List: int size()>();

        if $i0 >= $i1 goto label2;

        $r4 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>($i0);

        $r5 = (proguard.ClassSpecification) $r4;

        $r6 = staticinvoke <proguard.ClassSpecificationVisitorFactory: proguard.classfile.visitor.ClassPoolVisitor createClassPoolVisitor(proguard.ClassSpecification,proguard.classfile.visitor.ClassVisitor,proguard.classfile.visitor.MemberVisitor)>($r5, $r1, $r2);

        virtualinvoke $r3.<proguard.classfile.visitor.MultiClassPoolVisitor: void addClassPoolVisitor(proguard.classfile.visitor.ClassPoolVisitor)>($r6);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return $r3;
    }

    public static proguard.classfile.visitor.ClassPoolVisitor createClassPoolVisitor(java.util.List, proguard.classfile.visitor.ClassVisitor, proguard.classfile.visitor.MemberVisitor, boolean, boolean, boolean)
    {
        proguard.classfile.visitor.ClassVisitor $r1;
        proguard.classfile.visitor.MemberVisitor $r2;
        proguard.KeepClassSpecification $r5;
        java.util.List $r0;
        proguard.classfile.visitor.ClassPoolVisitor $r6;
        int $i0, $i1;
        java.lang.Object $r4;
        proguard.classfile.visitor.MultiClassPoolVisitor $r3;
        boolean $z0, $z1, $z2, $z3;

        $r0 := @parameter0: java.util.List;

        $r1 := @parameter1: proguard.classfile.visitor.ClassVisitor;

        $r2 := @parameter2: proguard.classfile.visitor.MemberVisitor;

        $z0 := @parameter3: boolean;

        $z1 := @parameter4: boolean;

        $z2 := @parameter5: boolean;

        $r3 = new proguard.classfile.visitor.MultiClassPoolVisitor;

        specialinvoke $r3.<proguard.classfile.visitor.MultiClassPoolVisitor: void <init>()>();

        if $r0 == null goto label6;

        $i0 = 0;

     label1:
        $i1 = interfaceinvoke $r0.<java.util.List: int size()>();

        if $i0 >= $i1 goto label6;

        $r4 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>($i0);

        $r5 = (proguard.KeepClassSpecification) $r4;

        if $z0 == 0 goto label2;

        $z3 = $r5.<proguard.KeepClassSpecification: boolean allowShrinking>;

        if $z3 == 0 goto label4;

     label2:
        if $z1 == 0 goto label3;

        $z3 = $r5.<proguard.KeepClassSpecification: boolean allowOptimization>;

        if $z3 == 0 goto label4;

     label3:
        if $z2 == 0 goto label5;

        $z3 = $r5.<proguard.KeepClassSpecification: boolean allowObfuscation>;

        if $z3 != 0 goto label5;

     label4:
        $r6 = staticinvoke <proguard.ClassSpecificationVisitorFactory: proguard.classfile.visitor.ClassPoolVisitor createClassPoolVisitor(proguard.KeepClassSpecification,proguard.classfile.visitor.ClassVisitor,proguard.classfile.visitor.MemberVisitor)>($r5, $r1, $r2);

        virtualinvoke $r3.<proguard.classfile.visitor.MultiClassPoolVisitor: void addClassPoolVisitor(proguard.classfile.visitor.ClassPoolVisitor)>($r6);

     label5:
        $i0 = $i0 + 1;

        goto label1;

     label6:
        return $r3;
    }

    private static proguard.classfile.visitor.ClassPoolVisitor createClassPoolVisitor(proguard.ClassSpecification, proguard.classfile.visitor.ClassVisitor, proguard.classfile.visitor.MemberVisitor)
    {
        proguard.classfile.attribute.'annotation'.visitor.AnnotatedClassVisitor $r10;
        proguard.classfile.attribute.'annotation'.visitor.AllAnnotationVisitor $r12;
        proguard.classfile.visitor.ClassVisitor $r1, $r5;
        proguard.classfile.attribute.visitor.AllAttributeVisitor $r13;
        proguard.classfile.attribute.'annotation'.visitor.AnnotationTypeFilter $r11;
        proguard.classfile.visitor.ClassHierarchyTraveler $r15;
        proguard.ClassSpecification $r0;
        int $i0, $i1;
        java.lang.String $r3, $r4, $r6, $r8;
        boolean $z0;
        proguard.classfile.visitor.ClassNameFilter $r7, $r9;
        proguard.classfile.visitor.NamedClassVisitor $r16;
        proguard.classfile.visitor.AllClassVisitor $r17;
        proguard.classfile.visitor.MemberVisitor $r2;
        proguard.classfile.visitor.ClassAccessFilter $r14;

        $r0 := @parameter0: proguard.ClassSpecification;

        $r1 := @parameter1: proguard.classfile.visitor.ClassVisitor;

        $r2 := @parameter2: proguard.classfile.visitor.MemberVisitor;

        $r1 = staticinvoke <proguard.ClassSpecificationVisitorFactory: proguard.classfile.visitor.ClassVisitor createCombinedClassVisitor(proguard.ClassSpecification,proguard.classfile.visitor.ClassVisitor,proguard.classfile.visitor.MemberVisitor)>($r0, $r1, $r2);

        $r5 = $r1;

        $r6 = $r0.<proguard.ClassSpecification: java.lang.String className>;

        $r3 = $r0.<proguard.ClassSpecification: java.lang.String extendsAnnotationType>;

        $r4 = $r0.<proguard.ClassSpecification: java.lang.String extendsClassName>;

        if $r6 == null goto label14;

        if $r3 != null goto label01;

        if $r4 != null goto label01;

        $z0 = staticinvoke <proguard.ClassSpecificationVisitorFactory: boolean containsWildCards(java.lang.String)>($r6);

        if $z0 == 0 goto label14;

     label01:
        $r9 = new proguard.classfile.visitor.ClassNameFilter;

        specialinvoke $r9.<proguard.classfile.visitor.ClassNameFilter: void <init>(java.lang.String,proguard.classfile.visitor.ClassVisitor)>($r6, $r1);

        $r6 = null;

        $r5 = $r9;

     label02:
        $r8 = $r0.<proguard.ClassSpecification: java.lang.String annotationType>;

        if $r8 == null goto label03;

        $r13 = new proguard.classfile.attribute.visitor.AllAttributeVisitor;

        $r12 = new proguard.classfile.attribute.'annotation'.visitor.AllAnnotationVisitor;

        $r11 = new proguard.classfile.attribute.'annotation'.visitor.AnnotationTypeFilter;

        $r10 = new proguard.classfile.attribute.'annotation'.visitor.AnnotatedClassVisitor;

        specialinvoke $r10.<proguard.classfile.attribute.'annotation'.visitor.AnnotatedClassVisitor: void <init>(proguard.classfile.visitor.ClassVisitor)>($r5);

        specialinvoke $r11.<proguard.classfile.attribute.'annotation'.visitor.AnnotationTypeFilter: void <init>(java.lang.String,proguard.classfile.attribute.'annotation'.visitor.AnnotationVisitor)>($r8, $r10);

        specialinvoke $r12.<proguard.classfile.attribute.'annotation'.visitor.AllAnnotationVisitor: void <init>(proguard.classfile.attribute.'annotation'.visitor.AnnotationVisitor)>($r11);

        specialinvoke $r13.<proguard.classfile.attribute.visitor.AllAttributeVisitor: void <init>(proguard.classfile.attribute.visitor.AttributeVisitor)>($r12);

        $r5 = $r13;

     label03:
        $i0 = $r0.<proguard.ClassSpecification: int requiredSetAccessFlags>;

        if $i0 != 0 goto label04;

        $i0 = $r0.<proguard.ClassSpecification: int requiredUnsetAccessFlags>;

        if $i0 == 0 goto label13;

     label04:
        $r14 = new proguard.classfile.visitor.ClassAccessFilter;

        $i0 = $r0.<proguard.ClassSpecification: int requiredSetAccessFlags>;

        $i1 = $r0.<proguard.ClassSpecification: int requiredUnsetAccessFlags>;

        specialinvoke $r14.<proguard.classfile.visitor.ClassAccessFilter: void <init>(int,int,proguard.classfile.visitor.ClassVisitor)>($i0, $i1, $r5);

        $r5 = $r14;

     label05:
        if $r3 != null goto label06;

        if $r4 == null goto label12;

     label06:
        $r15 = new proguard.classfile.visitor.ClassHierarchyTraveler;

        $r1 = $r15;

        specialinvoke $r15.<proguard.classfile.visitor.ClassHierarchyTraveler: void <init>(boolean,boolean,boolean,boolean,proguard.classfile.visitor.ClassVisitor)>(0, 0, 0, 1, $r5);

        if $r3 == null goto label07;

        $r13 = new proguard.classfile.attribute.visitor.AllAttributeVisitor;

        $r12 = new proguard.classfile.attribute.'annotation'.visitor.AllAnnotationVisitor;

        $r11 = new proguard.classfile.attribute.'annotation'.visitor.AnnotationTypeFilter;

        $r10 = new proguard.classfile.attribute.'annotation'.visitor.AnnotatedClassVisitor;

        specialinvoke $r10.<proguard.classfile.attribute.'annotation'.visitor.AnnotatedClassVisitor: void <init>(proguard.classfile.visitor.ClassVisitor)>($r1);

        specialinvoke $r11.<proguard.classfile.attribute.'annotation'.visitor.AnnotationTypeFilter: void <init>(java.lang.String,proguard.classfile.attribute.'annotation'.visitor.AnnotationVisitor)>($r3, $r10);

        specialinvoke $r12.<proguard.classfile.attribute.'annotation'.visitor.AllAnnotationVisitor: void <init>(proguard.classfile.attribute.'annotation'.visitor.AnnotationVisitor)>($r11);

        specialinvoke $r13.<proguard.classfile.attribute.visitor.AllAttributeVisitor: void <init>(proguard.classfile.attribute.visitor.AttributeVisitor)>($r12);

        $r1 = $r13;

     label07:
        if $r4 == null goto label11;

        $z0 = staticinvoke <proguard.ClassSpecificationVisitorFactory: boolean containsWildCards(java.lang.String)>($r4);

        if $z0 == 0 goto label09;

        $r7 = new proguard.classfile.visitor.ClassNameFilter;

        $r5 = $r7;

        specialinvoke $r7.<proguard.classfile.visitor.ClassNameFilter: void <init>(java.lang.String,proguard.classfile.visitor.ClassVisitor)>($r4, $r1);

        $r3 = $r6;

     label08:
        if $r3 == null goto label10;

        $r16 = new proguard.classfile.visitor.NamedClassVisitor;

        specialinvoke $r16.<proguard.classfile.visitor.NamedClassVisitor: void <init>(proguard.classfile.visitor.ClassVisitor,java.lang.String)>($r5, $r3);

        return $r16;

     label09:
        $r5 = $r1;

        $r3 = $r4;

        goto label08;

     label10:
        $r17 = new proguard.classfile.visitor.AllClassVisitor;

        specialinvoke $r17.<proguard.classfile.visitor.AllClassVisitor: void <init>(proguard.classfile.visitor.ClassVisitor)>($r5);

        return $r17;

     label11:
        $r5 = $r1;

        $r3 = $r6;

        goto label08;

     label12:
        $r3 = $r6;

        goto label08;

     label13:
        goto label05;

     label14:
        goto label02;
    }

    private static proguard.classfile.visitor.ClassPoolVisitor createClassPoolVisitor(proguard.KeepClassSpecification, proguard.classfile.visitor.ClassVisitor, proguard.classfile.visitor.MemberVisitor)
    {
        proguard.classfile.visitor.ClassPoolVisitor $r3;
        proguard.classfile.visitor.ClassVisitor $r1;
        proguard.classfile.visitor.MemberVisitor $r2;
        proguard.KeepClassSpecification $r0;
        boolean $z0;

        $r0 := @parameter0: proguard.KeepClassSpecification;

        $r1 := @parameter1: proguard.classfile.visitor.ClassVisitor;

        $r2 := @parameter2: proguard.classfile.visitor.MemberVisitor;

        $z0 = $r0.<proguard.KeepClassSpecification: boolean markClasses>;

        if $z0 != 0 goto label4;

        $z0 = $r0.<proguard.KeepClassSpecification: boolean markConditionally>;

        if $z0 != 0 goto label4;

        $r1 = null;

     label1:
        $z0 = $r0.<proguard.KeepClassSpecification: boolean markConditionally>;

        if $z0 == 0 goto label3;

        $r1 = staticinvoke <proguard.ClassSpecificationVisitorFactory: proguard.classfile.visitor.ClassVisitor createCombinedClassVisitor(proguard.ClassSpecification,proguard.classfile.visitor.ClassVisitor,proguard.classfile.visitor.MemberVisitor)>($r0, $r1, $r2);

        $r1 = staticinvoke <proguard.ClassSpecificationVisitorFactory: proguard.classfile.visitor.ClassVisitor createClassMemberTester(proguard.ClassSpecification,proguard.classfile.visitor.ClassVisitor)>($r0, $r1);

        $r2 = null;

     label2:
        $r3 = staticinvoke <proguard.ClassSpecificationVisitorFactory: proguard.classfile.visitor.ClassPoolVisitor createClassPoolVisitor(proguard.ClassSpecification,proguard.classfile.visitor.ClassVisitor,proguard.classfile.visitor.MemberVisitor)>($r0, $r1, $r2);

        return $r3;

     label3:
        goto label2;

     label4:
        goto label1;
    }

    private static proguard.classfile.visitor.ClassVisitor createClassVisitor(proguard.ClassSpecification, proguard.classfile.visitor.MemberVisitor)
    {
        java.util.List $r3;
        proguard.ClassSpecification $r0;
        proguard.classfile.visitor.MultiClassVisitor $r2;
        proguard.classfile.visitor.MemberVisitor $r1;
        proguard.classfile.visitor.ClassHierarchyTraveler $r4;

        $r0 := @parameter0: proguard.ClassSpecification;

        $r1 := @parameter1: proguard.classfile.visitor.MemberVisitor;

        $r2 = new proguard.classfile.visitor.MultiClassVisitor;

        specialinvoke $r2.<proguard.classfile.visitor.MultiClassVisitor: void <init>()>();

        $r3 = $r0.<proguard.ClassSpecification: java.util.List fieldSpecifications>;

        staticinvoke <proguard.ClassSpecificationVisitorFactory: void addMemberVisitors(java.util.List,boolean,proguard.classfile.visitor.MultiClassVisitor,proguard.classfile.visitor.MemberVisitor)>($r3, 1, $r2, $r1);

        $r3 = $r0.<proguard.ClassSpecification: java.util.List methodSpecifications>;

        staticinvoke <proguard.ClassSpecificationVisitorFactory: void addMemberVisitors(java.util.List,boolean,proguard.classfile.visitor.MultiClassVisitor,proguard.classfile.visitor.MemberVisitor)>($r3, 0, $r2, $r1);

        $r4 = new proguard.classfile.visitor.ClassHierarchyTraveler;

        specialinvoke $r4.<proguard.classfile.visitor.ClassHierarchyTraveler: void <init>(boolean,boolean,boolean,boolean,proguard.classfile.visitor.ClassVisitor)>(1, 1, 0, 0, $r2);

        return $r4;
    }

    private static proguard.classfile.visitor.ClassVisitor createClassVisitor(proguard.MemberSpecification, boolean, proguard.classfile.visitor.MemberVisitor)
    {
        proguard.classfile.attribute.'annotation'.visitor.AllAnnotationVisitor $r10;
        proguard.classfile.attribute.'annotation'.visitor.AnnotationToMemberVisitor $r8;
        proguard.classfile.attribute.visitor.AllAttributeVisitor $r11;
        proguard.classfile.attribute.'annotation'.visitor.AnnotationTypeFilter $r9;
        proguard.classfile.visitor.AllMethodVisitor $r16;
        proguard.classfile.visitor.NamedMethodVisitor $r15;
        int $i0, $i1;
        proguard.classfile.visitor.AllFieldVisitor $r14;
        java.lang.String $r2, $r3, $r4;
        boolean $z0, $z1;
        proguard.classfile.visitor.MemberNameFilter $r7;
        proguard.classfile.visitor.NamedFieldVisitor $r13;
        proguard.classfile.visitor.MemberVisitor $r1, $r5;
        proguard.classfile.visitor.MemberDescriptorFilter $r6;
        proguard.MemberSpecification $r0;
        proguard.classfile.visitor.MemberAccessFilter $r12;

        $r0 := @parameter0: proguard.MemberSpecification;

        $z0 := @parameter1: boolean;

        $r1 := @parameter2: proguard.classfile.visitor.MemberVisitor;

        $r4 = $r0.<proguard.MemberSpecification: java.lang.String name>;

        $r2 = $r0.<proguard.MemberSpecification: java.lang.String descriptor>;

        if $r4 == null goto label07;

        if $r2 == null goto label07;

        $z1 = staticinvoke <proguard.ClassSpecificationVisitorFactory: boolean containsWildCards(java.lang.String)>($r4);

        if $z1 != 0 goto label07;

        $z1 = staticinvoke <proguard.ClassSpecificationVisitorFactory: boolean containsWildCards(java.lang.String)>($r2);

        if $z1 != 0 goto label07;

        $z1 = 1;

     label01:
        if $z1 != 0 goto label12;

        if $r2 == null goto label11;

        $r6 = new proguard.classfile.visitor.MemberDescriptorFilter;

        $r5 = $r6;

        specialinvoke $r6.<proguard.classfile.visitor.MemberDescriptorFilter: void <init>(java.lang.String,proguard.classfile.visitor.MemberVisitor)>($r2, $r1);

     label02:
        if $r4 == null goto label03;

        $r7 = new proguard.classfile.visitor.MemberNameFilter;

        specialinvoke $r7.<proguard.classfile.visitor.MemberNameFilter: void <init>(java.lang.String,proguard.classfile.visitor.MemberVisitor)>($r4, $r5);

        $r5 = $r7;

     label03:
        $r3 = $r0.<proguard.MemberSpecification: java.lang.String annotationType>;

        if $r3 == null goto label04;

        $r11 = new proguard.classfile.attribute.visitor.AllAttributeVisitor;

        $r10 = new proguard.classfile.attribute.'annotation'.visitor.AllAnnotationVisitor;

        $r9 = new proguard.classfile.attribute.'annotation'.visitor.AnnotationTypeFilter;

        $r3 = $r0.<proguard.MemberSpecification: java.lang.String annotationType>;

        $r8 = new proguard.classfile.attribute.'annotation'.visitor.AnnotationToMemberVisitor;

        specialinvoke $r8.<proguard.classfile.attribute.'annotation'.visitor.AnnotationToMemberVisitor: void <init>(proguard.classfile.visitor.MemberVisitor)>($r5);

        specialinvoke $r9.<proguard.classfile.attribute.'annotation'.visitor.AnnotationTypeFilter: void <init>(java.lang.String,proguard.classfile.attribute.'annotation'.visitor.AnnotationVisitor)>($r3, $r8);

        specialinvoke $r10.<proguard.classfile.attribute.'annotation'.visitor.AllAnnotationVisitor: void <init>(proguard.classfile.attribute.'annotation'.visitor.AnnotationVisitor)>($r9);

        specialinvoke $r11.<proguard.classfile.attribute.visitor.AllAttributeVisitor: void <init>(proguard.classfile.attribute.visitor.AttributeVisitor)>($r10);

        $r5 = $r11;

     label04:
        $i0 = $r0.<proguard.MemberSpecification: int requiredSetAccessFlags>;

        if $i0 != 0 goto label05;

        $i0 = $r0.<proguard.MemberSpecification: int requiredUnsetAccessFlags>;

        if $i0 == 0 goto label06;

     label05:
        $r12 = new proguard.classfile.visitor.MemberAccessFilter;

        $i0 = $r0.<proguard.MemberSpecification: int requiredSetAccessFlags>;

        $i1 = $r0.<proguard.MemberSpecification: int requiredUnsetAccessFlags>;

        specialinvoke $r12.<proguard.classfile.visitor.MemberAccessFilter: void <init>(int,int,proguard.classfile.visitor.MemberVisitor)>($i0, $i1, $r5);

        $r5 = $r12;

     label06:
        if $z0 == 0 goto label09;

        if $z1 == 0 goto label08;

        $r13 = new proguard.classfile.visitor.NamedFieldVisitor;

        specialinvoke $r13.<proguard.classfile.visitor.NamedFieldVisitor: void <init>(java.lang.String,java.lang.String,proguard.classfile.visitor.MemberVisitor)>($r4, $r2, $r5);

        return $r13;

     label07:
        $z1 = 0;

        goto label01;

     label08:
        $r14 = new proguard.classfile.visitor.AllFieldVisitor;

        specialinvoke $r14.<proguard.classfile.visitor.AllFieldVisitor: void <init>(proguard.classfile.visitor.MemberVisitor)>($r5);

        return $r14;

     label09:
        if $z1 == 0 goto label10;

        $r15 = new proguard.classfile.visitor.NamedMethodVisitor;

        specialinvoke $r15.<proguard.classfile.visitor.NamedMethodVisitor: void <init>(java.lang.String,java.lang.String,proguard.classfile.visitor.MemberVisitor)>($r4, $r2, $r5);

        return $r15;

     label10:
        $r16 = new proguard.classfile.visitor.AllMethodVisitor;

        specialinvoke $r16.<proguard.classfile.visitor.AllMethodVisitor: void <init>(proguard.classfile.visitor.MemberVisitor)>($r5);

        return $r16;

     label11:
        $r5 = $r1;

        goto label02;

     label12:
        $r5 = $r1;

        goto label03;
    }

    private static proguard.classfile.visitor.ClassVisitor createCombinedClassVisitor(proguard.ClassSpecification, proguard.classfile.visitor.ClassVisitor, proguard.classfile.visitor.MemberVisitor)
    {
        java.util.List $r5;
        proguard.ClassSpecification $r0;
        proguard.classfile.visitor.MultiClassVisitor $r3;
        proguard.classfile.visitor.ClassVisitor $r1, $r4;
        proguard.classfile.visitor.MemberVisitor $r2;

        $r0 := @parameter0: proguard.ClassSpecification;

        $r1 := @parameter1: proguard.classfile.visitor.ClassVisitor;

        $r2 := @parameter2: proguard.classfile.visitor.MemberVisitor;

        $r5 = $r0.<proguard.ClassSpecification: java.util.List fieldSpecifications>;

        if $r5 != null goto label5;

        $r5 = $r0.<proguard.ClassSpecification: java.util.List methodSpecifications>;

        if $r5 != null goto label5;

        $r2 = null;

     label1:
        $r3 = new proguard.classfile.visitor.MultiClassVisitor;

        specialinvoke $r3.<proguard.classfile.visitor.MultiClassVisitor: void <init>()>();

        if $r1 == null goto label3;

        if $r2 != null goto label2;

        return $r1;

     label2:
        virtualinvoke $r3.<proguard.classfile.visitor.MultiClassVisitor: void addClassVisitor(proguard.classfile.visitor.ClassVisitor)>($r1);

     label3:
        if $r2 == null goto label4;

        $r4 = staticinvoke <proguard.ClassSpecificationVisitorFactory: proguard.classfile.visitor.ClassVisitor createClassVisitor(proguard.ClassSpecification,proguard.classfile.visitor.MemberVisitor)>($r0, $r2);

        if $r1 == null goto label6;

        virtualinvoke $r3.<proguard.classfile.visitor.MultiClassVisitor: void addClassVisitor(proguard.classfile.visitor.ClassVisitor)>($r4);

     label4:
        return $r3;

     label5:
        goto label1;

     label6:
        return $r4;
    }
}
