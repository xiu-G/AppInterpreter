public class org.blockdroid.View.ShowImage$LoadImg extends android.os.AsyncTask
{
    protected int loadingInt;
    final org.blockdroid.View.ShowImage this$0;

    protected void <init>(org.blockdroid.View.ShowImage)
    {
        org.blockdroid.View.ShowImage $r1;
        org.blockdroid.View.ShowImage$LoadImg r0;

        r0 := @this: org.blockdroid.View.ShowImage$LoadImg;

        $r1 := @parameter0: org.blockdroid.View.ShowImage;

        r0.<org.blockdroid.View.ShowImage$LoadImg: org.blockdroid.View.ShowImage this$0> = $r1;

        specialinvoke r0.<android.os.AsyncTask: void <init>()>();

        r0.<org.blockdroid.View.ShowImage$LoadImg: int loadingInt> = 1;

        return;
    }

    protected transient volatile java.lang.Object doInBackground(java.lang.Object[])
    {
        java.lang.Object[] $r2;
        android.content.Context[] $r3;
        org.blockdroid.View.ShowImage$LoadImg r0;

        r0 := @this: org.blockdroid.View.ShowImage$LoadImg;

        $r2 := @parameter0: java.lang.Object[];

        $r3 = (android.content.Context[]) $r2;

        virtualinvoke r0.<org.blockdroid.View.ShowImage$LoadImg: java.lang.String doInBackground(android.content.Context[])>($r3);

        return "DONE";
    }

    protected transient java.lang.String doInBackground(android.content.Context[])
    {
        org.blockdroid.View.ShowImage $r3, $r6;
        java.util.regex.Matcher $r5;
        android.content.Context[] $r1;
        org.blockdroid.View.ShowImage$LoadImg r0;
        android.graphics.Bitmap $r8;
        org.blockdroid.Others.Base64EncodeDecode $r7;
        java.util.regex.Pattern $r2;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: org.blockdroid.View.ShowImage$LoadImg;

        $r1 := @parameter0: android.content.Context[];

        $r2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("http:");

        $r3 = r0.<org.blockdroid.View.ShowImage$LoadImg: org.blockdroid.View.ShowImage this$0>;

        $r4 = staticinvoke <org.blockdroid.View.ShowImage: java.lang.String access$0(org.blockdroid.View.ShowImage)>($r3);

        $r5 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r4);

        $z0 = virtualinvoke $r5.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<org.blockdroid.View.ShowImage$LoadImg: org.blockdroid.View.ShowImage this$0>;

        $r6 = r0.<org.blockdroid.View.ShowImage$LoadImg: org.blockdroid.View.ShowImage this$0>;

        $r7 = $r6.<org.blockdroid.View.ShowImage: org.blockdroid.Others.Base64EncodeDecode base64>;

        $r6 = r0.<org.blockdroid.View.ShowImage$LoadImg: org.blockdroid.View.ShowImage this$0>;

        $r4 = staticinvoke <org.blockdroid.View.ShowImage: java.lang.String access$0(org.blockdroid.View.ShowImage)>($r6);

        $r4 = virtualinvoke $r7.<org.blockdroid.Others.Base64EncodeDecode: java.lang.String imageHttpToBase64(java.lang.String)>($r4);

        $r8 = staticinvoke <org.blockdroid.Others.Base64EncodeDecode: android.graphics.Bitmap base64toBitmap(java.lang.String)>($r4);

        staticinvoke <org.blockdroid.View.ShowImage: void access$1(org.blockdroid.View.ShowImage,android.graphics.Bitmap)>($r3, $r8);

     label1:
        return "DONE";
    }

    protected volatile void onPostExecute(java.lang.Object)
    {
        java.lang.Object $r1;
        java.lang.String $r2;
        org.blockdroid.View.ShowImage$LoadImg r0;

        r0 := @this: org.blockdroid.View.ShowImage$LoadImg;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.String) $r1;

        virtualinvoke r0.<org.blockdroid.View.ShowImage$LoadImg: void onPostExecute(java.lang.String)>($r2);

        return;
    }

    protected void onPostExecute(java.lang.String)
    {
        org.blockdroid.View.ShowImage $r2;
        android.content.Context $r4;
        org.blockdroid.View.ShowImage$LoadImg r0;
        android.graphics.Bitmap $r3;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: org.blockdroid.View.ShowImage$LoadImg;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<android.os.AsyncTask: void onPostExecute(java.lang.Object)>($r1);

        $r2 = r0.<org.blockdroid.View.ShowImage$LoadImg: org.blockdroid.View.ShowImage this$0>;

        $r3 = staticinvoke <org.blockdroid.View.ShowImage: android.graphics.Bitmap access$2(org.blockdroid.View.ShowImage)>($r2);

        if $r3 != null goto label2;

        $r2 = r0.<org.blockdroid.View.ShowImage$LoadImg: org.blockdroid.View.ShowImage this$0>;

        staticinvoke <org.blockdroid.View.ShowImage: void access$3(org.blockdroid.View.ShowImage)>($r2);

     label1:
        $r2 = r0.<org.blockdroid.View.ShowImage$LoadImg: org.blockdroid.View.ShowImage this$0>;

        $r4 = virtualinvoke $r2.<org.blockdroid.View.ShowImage: android.content.Context getApplicationContext()>();

        $z0 = staticinvoke <org.blockdroid.View.Prefs: boolean getShowZoomMessage(android.content.Context)>($r4);

        if $z0 == 0 goto label4;

        $r2 = r0.<org.blockdroid.View.ShowImage$LoadImg: org.blockdroid.View.ShowImage this$0>;

        staticinvoke <org.blockdroid.View.ShowImage: void access$6(org.blockdroid.View.ShowImage)>($r2);

        return;

     label2:
        $r2 = r0.<org.blockdroid.View.ShowImage$LoadImg: org.blockdroid.View.ShowImage this$0>;

        $r4 = virtualinvoke $r2.<org.blockdroid.View.ShowImage: android.content.Context getApplicationContext()>();

        $z0 = staticinvoke <org.blockdroid.View.Prefs: boolean getMultiZoom(android.content.Context)>($r4);

        if $z0 == 0 goto label3;

        $r2 = r0.<org.blockdroid.View.ShowImage$LoadImg: org.blockdroid.View.ShowImage this$0>;

        staticinvoke <org.blockdroid.View.ShowImage: void access$4(org.blockdroid.View.ShowImage)>($r2);

        goto label1;

     label3:
        $r2 = r0.<org.blockdroid.View.ShowImage$LoadImg: org.blockdroid.View.ShowImage this$0>;

        staticinvoke <org.blockdroid.View.ShowImage: void access$5(org.blockdroid.View.ShowImage)>($r2);

        goto label1;

     label4:
        return;
    }

    protected void onPreExecute()
    {
        org.blockdroid.View.ShowImage $r2, $r5;
        java.util.regex.Matcher $r4;
        org.blockdroid.View.ShowImage$LoadImg r0;
        android.graphics.Bitmap $r6;
        java.util.regex.Pattern $r1;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: org.blockdroid.View.ShowImage$LoadImg;

        specialinvoke r0.<android.os.AsyncTask: void onPreExecute()>();

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("http:");

        $r2 = r0.<org.blockdroid.View.ShowImage$LoadImg: org.blockdroid.View.ShowImage this$0>;

        $r3 = staticinvoke <org.blockdroid.View.ShowImage: java.lang.String access$0(org.blockdroid.View.ShowImage)>($r2);

        $r4 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r3);

        $z0 = virtualinvoke $r4.<java.util.regex.Matcher: boolean find()>();

        if $z0 != 0 goto label1;

        $r2 = r0.<org.blockdroid.View.ShowImage$LoadImg: org.blockdroid.View.ShowImage this$0>;

        $r5 = r0.<org.blockdroid.View.ShowImage$LoadImg: org.blockdroid.View.ShowImage this$0>;

        $r3 = staticinvoke <org.blockdroid.View.ShowImage: java.lang.String access$0(org.blockdroid.View.ShowImage)>($r5);

        $r6 = staticinvoke <org.blockdroid.Others.Base64EncodeDecode: android.graphics.Bitmap base64toBitmap(java.lang.String)>($r3);

        staticinvoke <org.blockdroid.View.ShowImage: void access$1(org.blockdroid.View.ShowImage,android.graphics.Bitmap)>($r2, $r6);

     label1:
        return;
    }
}
