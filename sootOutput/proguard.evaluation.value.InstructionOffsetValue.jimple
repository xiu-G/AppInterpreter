public class proguard.evaluation.value.InstructionOffsetValue extends proguard.evaluation.value.Category1Value
{
    public static final proguard.evaluation.value.InstructionOffsetValue EMPTY_VALUE;
    private int[] values;

    static void <clinit>()
    {
        proguard.evaluation.value.InstructionOffsetValue $r0;

        $r0 = new proguard.evaluation.value.InstructionOffsetValue;

        specialinvoke $r0.<proguard.evaluation.value.InstructionOffsetValue: void <init>()>();

        <proguard.evaluation.value.InstructionOffsetValue: proguard.evaluation.value.InstructionOffsetValue EMPTY_VALUE> = $r0;

        return;
    }

    private void <init>()
    {
        proguard.evaluation.value.InstructionOffsetValue r0;

        r0 := @this: proguard.evaluation.value.InstructionOffsetValue;

        specialinvoke r0.<proguard.evaluation.value.Category1Value: void <init>()>();

        return;
    }

    public void <init>(int)
    {
        int $i0;
        int[] $r1;
        proguard.evaluation.value.InstructionOffsetValue r0;

        r0 := @this: proguard.evaluation.value.InstructionOffsetValue;

        $i0 := @parameter0: int;

        specialinvoke r0.<proguard.evaluation.value.Category1Value: void <init>()>();

        $r1 = newarray (int)[1];

        $r1[0] = $i0;

        r0.<proguard.evaluation.value.InstructionOffsetValue: int[] values> = $r1;

        return;
    }

    public void <init>(int[])
    {
        int[] $r1;
        proguard.evaluation.value.InstructionOffsetValue r0;

        r0 := @this: proguard.evaluation.value.InstructionOffsetValue;

        $r1 := @parameter0: int[];

        specialinvoke r0.<proguard.evaluation.value.Category1Value: void <init>()>();

        r0.<proguard.evaluation.value.InstructionOffsetValue: int[] values> = $r1;

        return;
    }

    public final int computationalType()
    {
        proguard.evaluation.value.InstructionOffsetValue r0;

        r0 := @this: proguard.evaluation.value.InstructionOffsetValue;

        return 6;
    }

    public boolean contains(int)
    {
        int[] $r1;
        proguard.evaluation.value.InstructionOffsetValue r0;
        int $i0, $i1, $i2;

        r0 := @this: proguard.evaluation.value.InstructionOffsetValue;

        $i0 := @parameter0: int;

        $r1 = r0.<proguard.evaluation.value.InstructionOffsetValue: int[] values>;

        if $r1 == null goto label3;

        $i1 = 0;

     label1:
        $r1 = r0.<proguard.evaluation.value.InstructionOffsetValue: int[] values>;

        $i2 = lengthof $r1;

        if $i1 >= $i2 goto label3;

        $r1 = r0.<proguard.evaluation.value.InstructionOffsetValue: int[] values>;

        $i2 = $r1[$i1];

        if $i2 != $i0 goto label2;

        return 1;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    public boolean equals(java.lang.Object)
    {
        int[] $r5, $r6;
        proguard.evaluation.value.InstructionOffsetValue r0, $r4;
        int $i0, $i1;
        java.lang.Object $r1;
        java.lang.Class $r2, $r3;
        boolean $z0;

        r0 := @this: proguard.evaluation.value.InstructionOffsetValue;

        $r1 := @parameter0: java.lang.Object;

        if $r1 == null goto label1;

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 == $r3 goto label2;

     label1:
        return 0;

     label2:
        $r4 = (proguard.evaluation.value.InstructionOffsetValue) $r1;

        $r5 = r0.<proguard.evaluation.value.InstructionOffsetValue: int[] values>;

        $r6 = $r4.<proguard.evaluation.value.InstructionOffsetValue: int[] values>;

        if $r5 != $r6 goto label3;

        return 1;

     label3:
        $r5 = r0.<proguard.evaluation.value.InstructionOffsetValue: int[] values>;

        if $r5 == null goto label4;

        $r5 = $r4.<proguard.evaluation.value.InstructionOffsetValue: int[] values>;

        if $r5 == null goto label4;

        $r5 = r0.<proguard.evaluation.value.InstructionOffsetValue: int[] values>;

        $i0 = lengthof $r5;

        $r5 = $r4.<proguard.evaluation.value.InstructionOffsetValue: int[] values>;

        $i1 = lengthof $r5;

        if $i0 == $i1 goto label5;

     label4:
        return 0;

     label5:
        $i0 = 0;

     label6:
        $r5 = $r4.<proguard.evaluation.value.InstructionOffsetValue: int[] values>;

        $i1 = lengthof $r5;

        if $i0 >= $i1 goto label8;

        $r5 = $r4.<proguard.evaluation.value.InstructionOffsetValue: int[] values>;

        $i1 = $r5[$i0];

        $z0 = virtualinvoke r0.<proguard.evaluation.value.InstructionOffsetValue: boolean contains(int)>($i1);

        if $z0 != 0 goto label7;

        return 0;

     label7:
        $i0 = $i0 + 1;

        goto label6;

     label8:
        return 1;
    }

    public final proguard.evaluation.value.Value generalize(proguard.evaluation.value.InstructionOffsetValue)
    {
        int[] $r2, $r3;
        proguard.evaluation.value.InstructionOffsetValue r0, $r1;
        int $i0, $i1, $i2, $i3;
        boolean $z0;

        r0 := @this: proguard.evaluation.value.InstructionOffsetValue;

        $r1 := @parameter0: proguard.evaluation.value.InstructionOffsetValue;

        $r2 = r0.<proguard.evaluation.value.InstructionOffsetValue: int[] values>;

        if $r2 != null goto label01;

        return $r1;

     label01:
        $r2 = $r1.<proguard.evaluation.value.InstructionOffsetValue: int[] values>;

        if $r2 != null goto label02;

        return r0;

     label02:
        $r2 = r0.<proguard.evaluation.value.InstructionOffsetValue: int[] values>;

        $i0 = lengthof $r2;

        $i1 = 0;

     label03:
        $r2 = $r1.<proguard.evaluation.value.InstructionOffsetValue: int[] values>;

        $i2 = lengthof $r2;

        if $i1 >= $i2 goto label05;

        $r2 = $r1.<proguard.evaluation.value.InstructionOffsetValue: int[] values>;

        $i2 = $r2[$i1];

        $z0 = virtualinvoke r0.<proguard.evaluation.value.InstructionOffsetValue: boolean contains(int)>($i2);

        if $z0 != 0 goto label04;

        $i0 = $i0 + 1;

     label04:
        $i1 = $i1 + 1;

        goto label03;

     label05:
        $r2 = $r1.<proguard.evaluation.value.InstructionOffsetValue: int[] values>;

        $i1 = lengthof $r2;

        if $i0 != $i1 goto label06;

        return $r1;

     label06:
        $r2 = newarray (int)[$i0];

        $i1 = 0;

        $i0 = 0;

     label07:
        $r3 = r0.<proguard.evaluation.value.InstructionOffsetValue: int[] values>;

        $i2 = lengthof $r3;

        if $i1 >= $i2 goto label09;

        $r3 = r0.<proguard.evaluation.value.InstructionOffsetValue: int[] values>;

        $i2 = $r3[$i1];

        $z0 = virtualinvoke $r1.<proguard.evaluation.value.InstructionOffsetValue: boolean contains(int)>($i2);

        if $z0 != 0 goto label08;

        $r3 = r0.<proguard.evaluation.value.InstructionOffsetValue: int[] values>;

        $i3 = $r3[$i1];

        $r2[$i0] = $i3;

        $i0 = $i0 + 1;

     label08:
        $i1 = $i1 + 1;

        goto label07;

     label09:
        $i1 = 0;

     label10:
        $r3 = $r1.<proguard.evaluation.value.InstructionOffsetValue: int[] values>;

        $i2 = lengthof $r3;

        if $i1 >= $i2 goto label11;

        $r3 = $r1.<proguard.evaluation.value.InstructionOffsetValue: int[] values>;

        $i3 = $r3[$i1];

        $r2[$i0] = $i3;

        $i1 = $i1 + 1;

        $i0 = $i0 + 1;

        goto label10;

     label11:
        r0 = new proguard.evaluation.value.InstructionOffsetValue;

        specialinvoke r0.<proguard.evaluation.value.InstructionOffsetValue: void <init>(int[])>($r2);

        return r0;
    }

    public final proguard.evaluation.value.Value generalize(proguard.evaluation.value.Value)
    {
        proguard.evaluation.value.Value $r1;
        proguard.evaluation.value.InstructionOffsetValue r0, $r2;

        r0 := @this: proguard.evaluation.value.InstructionOffsetValue;

        $r1 := @parameter0: proguard.evaluation.value.Value;

        $r2 = virtualinvoke $r1.<proguard.evaluation.value.Value: proguard.evaluation.value.InstructionOffsetValue instructionOffsetValue()>();

        $r1 = virtualinvoke r0.<proguard.evaluation.value.InstructionOffsetValue: proguard.evaluation.value.Value generalize(proguard.evaluation.value.InstructionOffsetValue)>($r2);

        return $r1;
    }

    public int hashCode()
    {
        int[] $r2;
        proguard.evaluation.value.InstructionOffsetValue r0;
        int $i0, $i1, $i2;
        java.lang.Class $r1;

        r0 := @this: proguard.evaluation.value.InstructionOffsetValue;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $r2 = r0.<proguard.evaluation.value.InstructionOffsetValue: int[] values>;

        if $r2 == null goto label2;

        $i1 = 0;

     label1:
        $r2 = r0.<proguard.evaluation.value.InstructionOffsetValue: int[] values>;

        $i2 = lengthof $r2;

        if $i1 >= $i2 goto label2;

        $r2 = r0.<proguard.evaluation.value.InstructionOffsetValue: int[] values>;

        $i2 = $r2[$i1];

        $i0 = $i0 ^ $i2;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $i0;
    }

    public int instructionOffset(int)
    {
        int $i0;
        int[] $r1;
        proguard.evaluation.value.InstructionOffsetValue r0;

        r0 := @this: proguard.evaluation.value.InstructionOffsetValue;

        $i0 := @parameter0: int;

        $r1 = r0.<proguard.evaluation.value.InstructionOffsetValue: int[] values>;

        $i0 = $r1[$i0];

        return $i0;
    }

    public int instructionOffsetCount()
    {
        int $i0;
        int[] $r1;
        proguard.evaluation.value.InstructionOffsetValue r0;

        r0 := @this: proguard.evaluation.value.InstructionOffsetValue;

        $r1 = r0.<proguard.evaluation.value.InstructionOffsetValue: int[] values>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r1 = r0.<proguard.evaluation.value.InstructionOffsetValue: int[] values>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public final proguard.evaluation.value.InstructionOffsetValue instructionOffsetValue()
    {
        proguard.evaluation.value.InstructionOffsetValue r0;

        r0 := @this: proguard.evaluation.value.InstructionOffsetValue;

        return r0;
    }

    public final java.lang.String internalType()
    {
        java.lang.String $r1;
        proguard.evaluation.value.InstructionOffsetValue r0;

        r0 := @this: proguard.evaluation.value.InstructionOffsetValue;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(73);

        return $r1;
    }

    public boolean isParticular()
    {
        proguard.evaluation.value.InstructionOffsetValue r0;

        r0 := @this: proguard.evaluation.value.InstructionOffsetValue;

        return 1;
    }

    public boolean isSpecific()
    {
        proguard.evaluation.value.InstructionOffsetValue r0;

        r0 := @this: proguard.evaluation.value.InstructionOffsetValue;

        return 1;
    }

    public int maximumValue()
    {
        int[] $r1;
        proguard.evaluation.value.InstructionOffsetValue r0;
        int $i0, $i1, $i2;

        r0 := @this: proguard.evaluation.value.InstructionOffsetValue;

        $r1 = r0.<proguard.evaluation.value.InstructionOffsetValue: int[] values>;

        if $r1 == null goto label4;

        $i0 = -2147483648;

        $i1 = 0;

     label1:
        $r1 = r0.<proguard.evaluation.value.InstructionOffsetValue: int[] values>;

        $i2 = lengthof $r1;

        if $i1 >= $i2 goto label3;

        $r1 = r0.<proguard.evaluation.value.InstructionOffsetValue: int[] values>;

        $i2 = $r1[$i1];

        if $i0 >= $i2 goto label2;

        $i0 = $i2;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return $i0;

     label4:
        return -2147483648;
    }

    public int minimumValue()
    {
        int[] $r1;
        proguard.evaluation.value.InstructionOffsetValue r0;
        int $i0, $i1, $i2;

        r0 := @this: proguard.evaluation.value.InstructionOffsetValue;

        $r1 = r0.<proguard.evaluation.value.InstructionOffsetValue: int[] values>;

        if $r1 == null goto label4;

        $i0 = 2147483647;

        $i1 = 0;

     label1:
        $r1 = r0.<proguard.evaluation.value.InstructionOffsetValue: int[] values>;

        $i2 = lengthof $r1;

        if $i1 >= $i2 goto label3;

        $r1 = r0.<proguard.evaluation.value.InstructionOffsetValue: int[] values>;

        $i2 = $r1[$i1];

        if $i0 <= $i2 goto label2;

        $i0 = $i2;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return $i0;

     label4:
        return 2147483647;
    }

    public java.lang.String toString()
    {
        int[] $r2;
        java.lang.StringBuffer $r1;
        proguard.evaluation.value.InstructionOffsetValue r0;
        int $i0, $i1;
        java.lang.String $r3;

        r0 := @this: proguard.evaluation.value.InstructionOffsetValue;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = r0.<proguard.evaluation.value.InstructionOffsetValue: int[] values>;

        if $r2 == null goto label3;

        $i0 = 0;

     label1:
        $r2 = r0.<proguard.evaluation.value.InstructionOffsetValue: int[] values>;

        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label3;

        if $i0 <= 0 goto label2;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(44);

     label2:
        $r2 = r0.<proguard.evaluation.value.InstructionOffsetValue: int[] values>;

        $i1 = $r2[$i0];

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $i0 = $i0 + 1;

        goto label1;

     label3:
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }
}
