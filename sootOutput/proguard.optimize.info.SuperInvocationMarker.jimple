public class proguard.optimize.info.SuperInvocationMarker extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.instruction.visitor.InstructionVisitor, proguard.classfile.constant.visitor.ConstantVisitor
{
    private boolean invokesSuperMethods;

    public void <init>()
    {
        proguard.optimize.info.SuperInvocationMarker r0;

        r0 := @this: proguard.optimize.info.SuperInvocationMarker;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        return;
    }

    public static boolean invokesSuperMethods(proguard.classfile.Method)
    {
        proguard.classfile.Method $r0;
        proguard.optimize.info.MethodOptimizationInfo $r1;
        boolean $z0;

        $r0 := @parameter0: proguard.classfile.Method;

        $r1 = staticinvoke <proguard.optimize.info.MethodOptimizationInfo: proguard.optimize.info.MethodOptimizationInfo getMethodOptimizationInfo(proguard.classfile.Method)>($r0);

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r1.<proguard.optimize.info.MethodOptimizationInfo: boolean invokesSuperMethods()>();

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    private static void setInvokesSuperMethods(proguard.classfile.Method)
    {
        proguard.classfile.Method $r0;
        proguard.optimize.info.MethodOptimizationInfo $r1;

        $r0 := @parameter0: proguard.classfile.Method;

        $r1 = staticinvoke <proguard.optimize.info.MethodOptimizationInfo: proguard.optimize.info.MethodOptimizationInfo getMethodOptimizationInfo(proguard.classfile.Method)>($r0);

        if $r1 == null goto label1;

        virtualinvoke $r1.<proguard.optimize.info.MethodOptimizationInfo: void setInvokesSuperMethods()>();

     label1:
        return;
    }

    public void visitAnyInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.Instruction)
    {
        proguard.optimize.info.SuperInvocationMarker r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.instruction.Instruction $r4;
        int $i0;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.optimize.info.SuperInvocationMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.Instruction;

        return;
    }

    public void visitAnyMethodrefConstant(proguard.classfile.Clazz, proguard.classfile.constant.RefConstant)
    {
        proguard.optimize.info.SuperInvocationMarker r0;
        proguard.classfile.Clazz $r1, $r3;
        java.lang.String $r4;
        proguard.classfile.constant.RefConstant $r2;
        boolean $z0;

        r0 := @this: proguard.optimize.info.SuperInvocationMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.RefConstant;

        $r3 = $r2.<proguard.classfile.constant.RefConstant: proguard.classfile.Clazz referencedClass>;

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label2;

        $r4 = virtualinvoke $r2.<proguard.classfile.constant.RefConstant: java.lang.String getName(proguard.classfile.Clazz)>($r1);

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("<init>");

        if $z0 != 0 goto label2;

        $z0 = 1;

     label1:
        r0.<proguard.optimize.info.SuperInvocationMarker: boolean invokesSuperMethods> = $z0;

        return;

     label2:
        $z0 = 0;

        goto label1;
    }

    public void visitConstantInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.ConstantInstruction)
    {
        byte $b1;
        proguard.optimize.info.SuperInvocationMarker r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.instruction.ConstantInstruction $r4;
        proguard.classfile.Method $r2;
        boolean $z0;

        r0 := @this: proguard.optimize.info.SuperInvocationMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.ConstantInstruction;

        $b1 = $r4.<proguard.classfile.instruction.ConstantInstruction: byte opcode>;

        $i0 = (int) $b1;

        if $i0 != -73 goto label1;

        r0.<proguard.optimize.info.SuperInvocationMarker: boolean invokesSuperMethods> = 0;

        $i0 = $r4.<proguard.classfile.instruction.ConstantInstruction: int constantIndex>;

        interfaceinvoke $r1.<proguard.classfile.Clazz: void constantPoolEntryAccept(int,proguard.classfile.constant.visitor.ConstantVisitor)>($i0, r0);

        $z0 = r0.<proguard.optimize.info.SuperInvocationMarker: boolean invokesSuperMethods>;

        if $z0 == 0 goto label1;

        staticinvoke <proguard.optimize.info.SuperInvocationMarker: void setInvokesSuperMethods(proguard.classfile.Method)>($r2);

     label1:
        return;
    }
}
