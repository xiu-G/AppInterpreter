public class proguard.evaluation.BasicInvocationUnit extends proguard.classfile.util.SimplifiedVisitor implements proguard.evaluation.InvocationUnit, proguard.classfile.constant.visitor.ConstantVisitor, proguard.classfile.visitor.MemberVisitor
{
    private boolean isLoad;
    private boolean isStatic;
    private proguard.classfile.Clazz returnTypeClass;
    private proguard.evaluation.Stack stack;
    protected final proguard.evaluation.value.ValueFactory valueFactory;

    public void <init>(proguard.evaluation.value.ValueFactory)
    {
        proguard.evaluation.value.ValueFactory $r1;
        proguard.evaluation.BasicInvocationUnit r0;

        r0 := @this: proguard.evaluation.BasicInvocationUnit;

        $r1 := @parameter0: proguard.evaluation.value.ValueFactory;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        r0.<proguard.evaluation.BasicInvocationUnit: proguard.evaluation.value.ValueFactory valueFactory> = $r1;

        return;
    }

    public void enterMethod(proguard.classfile.Clazz, proguard.classfile.Method, proguard.evaluation.Variables)
    {
        proguard.classfile.Clazz[] $r8;
        proguard.evaluation.BasicInvocationUnit r0;
        proguard.evaluation.Variables $r3;
        proguard.classfile.Clazz $r1, $r9;
        proguard.classfile.util.InternalTypeEnumeration $r4;
        proguard.classfile.ProgramMethod $r7;
        int $i0, $i1, $i2, $i3;
        proguard.classfile.Method $r2;
        java.lang.String $r5;
        proguard.evaluation.value.Value $r6;
        boolean $z0;

        r0 := @this: proguard.evaluation.BasicInvocationUnit;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.evaluation.Variables;

        $r5 = interfaceinvoke $r2.<proguard.classfile.Method: java.lang.String getDescriptor(proguard.classfile.Clazz)>($r1);

        $i1 = interfaceinvoke $r2.<proguard.classfile.Method: int getAccessFlags()>();

        $i1 = $i1 & 8;

        if $i1 == 0 goto label5;

        $z0 = 1;

     label1:
        $i1 = staticinvoke <proguard.classfile.util.ClassUtil: int internalMethodParameterSize(java.lang.String,boolean)>($r5, $z0);

        virtualinvoke $r3.<proguard.evaluation.Variables: void reset(int)>($i1);

        $r4 = new proguard.classfile.util.InternalTypeEnumeration;

        specialinvoke $r4.<proguard.classfile.util.InternalTypeEnumeration: void <init>(java.lang.String)>($r5);

        if $z0 != 0 goto label9;

        $r5 = interfaceinvoke $r1.<proguard.classfile.Clazz: java.lang.String getName()>();

        $r5 = staticinvoke <proguard.classfile.util.ClassUtil: java.lang.String internalTypeFromClassName(java.lang.String)>($r5);

        $r6 = virtualinvoke r0.<proguard.evaluation.BasicInvocationUnit: proguard.evaluation.value.Value getMethodParameterValue(proguard.classfile.Clazz,proguard.classfile.Method,int,java.lang.String,proguard.classfile.Clazz)>($r1, $r2, 0, $r5, $r1);

        $i2 = 1;

        virtualinvoke $r3.<proguard.evaluation.Variables: void store(int,proguard.evaluation.value.Value)>(0, $r6);

        $i0 = 1;

     label2:
        $r7 = (proguard.classfile.ProgramMethod) $r2;

        $r8 = $r7.<proguard.classfile.ProgramMethod: proguard.classfile.Clazz[] referencedClasses>;

        $i1 = 0;

        $i3 = $i0;

     label3:
        $z0 = virtualinvoke $r4.<proguard.classfile.util.InternalTypeEnumeration: boolean hasMoreTypes()>();

        if $z0 == 0 goto label7;

        $r5 = virtualinvoke $r4.<proguard.classfile.util.InternalTypeEnumeration: java.lang.String nextType()>();

        if $r8 == null goto label6;

        $z0 = staticinvoke <proguard.classfile.util.ClassUtil: boolean isInternalClassType(java.lang.String)>($r5);

        if $z0 == 0 goto label6;

        $r9 = $r8[$i1];

        $i1 = $i1 + 1;

     label4:
        $i0 = $i3 + 1;

        $r6 = virtualinvoke r0.<proguard.evaluation.BasicInvocationUnit: proguard.evaluation.value.Value getMethodParameterValue(proguard.classfile.Clazz,proguard.classfile.Method,int,java.lang.String,proguard.classfile.Clazz)>($r1, $r2, $i3, $r5, $r9);

        $i3 = $i2 + 1;

        virtualinvoke $r3.<proguard.evaluation.Variables: void store(int,proguard.evaluation.value.Value)>($i2, $r6);

        $z0 = virtualinvoke $r6.<proguard.evaluation.value.Value: boolean isCategory2()>();

        if $z0 == 0 goto label8;

        $i2 = $i3 + 1;

        $i3 = $i0;

        goto label3;

     label5:
        $z0 = 0;

        goto label1;

     label6:
        $r9 = null;

        goto label4;

     label7:
        return;

     label8:
        $i2 = $i3;

        $i3 = $i0;

        goto label3;

     label9:
        $i2 = 0;

        $i0 = 0;

        goto label2;
    }

    public void exitMethod(proguard.classfile.Clazz, proguard.classfile.Method, proguard.evaluation.value.Value)
    {
        proguard.evaluation.BasicInvocationUnit r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.Method $r2;
        proguard.evaluation.value.Value $r3;

        r0 := @this: proguard.evaluation.BasicInvocationUnit;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.evaluation.value.Value;

        virtualinvoke r0.<proguard.evaluation.BasicInvocationUnit: void setMethodReturnValue(proguard.classfile.Clazz,proguard.classfile.Method,proguard.evaluation.value.Value)>($r1, $r2, $r3);

        return;
    }

    protected proguard.evaluation.value.Value getFieldClassValue(proguard.classfile.Clazz, proguard.classfile.constant.RefConstant, java.lang.String)
    {
        proguard.evaluation.BasicInvocationUnit r0;
        proguard.classfile.Clazz $r1;
        proguard.evaluation.value.ValueFactory $r5;
        java.lang.String $r3;
        proguard.classfile.constant.RefConstant $r2;
        proguard.evaluation.value.Value $r4;

        r0 := @this: proguard.evaluation.BasicInvocationUnit;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.RefConstant;

        $r3 := @parameter2: java.lang.String;

        r0.<proguard.evaluation.BasicInvocationUnit: proguard.classfile.Clazz returnTypeClass> = null;

        virtualinvoke $r2.<proguard.classfile.constant.RefConstant: void referencedMemberAccept(proguard.classfile.visitor.MemberVisitor)>(r0);

        $r5 = r0.<proguard.evaluation.BasicInvocationUnit: proguard.evaluation.value.ValueFactory valueFactory>;

        $r1 = r0.<proguard.evaluation.BasicInvocationUnit: proguard.classfile.Clazz returnTypeClass>;

        $r4 = virtualinvoke $r5.<proguard.evaluation.value.ValueFactory: proguard.evaluation.value.Value createValue(java.lang.String,proguard.classfile.Clazz,boolean)>($r3, $r1, 1);

        return $r4;
    }

    protected proguard.evaluation.value.Value getFieldValue(proguard.classfile.Clazz, proguard.classfile.constant.RefConstant, java.lang.String)
    {
        proguard.evaluation.BasicInvocationUnit r0;
        proguard.classfile.Clazz $r1;
        proguard.evaluation.value.ValueFactory $r5;
        java.lang.String $r3;
        proguard.classfile.constant.RefConstant $r2;
        proguard.evaluation.value.Value $r4;

        r0 := @this: proguard.evaluation.BasicInvocationUnit;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.RefConstant;

        $r3 := @parameter2: java.lang.String;

        r0.<proguard.evaluation.BasicInvocationUnit: proguard.classfile.Clazz returnTypeClass> = null;

        virtualinvoke $r2.<proguard.classfile.constant.RefConstant: void referencedMemberAccept(proguard.classfile.visitor.MemberVisitor)>(r0);

        $r5 = r0.<proguard.evaluation.BasicInvocationUnit: proguard.evaluation.value.ValueFactory valueFactory>;

        $r1 = r0.<proguard.evaluation.BasicInvocationUnit: proguard.classfile.Clazz returnTypeClass>;

        $r4 = virtualinvoke $r5.<proguard.evaluation.value.ValueFactory: proguard.evaluation.value.Value createValue(java.lang.String,proguard.classfile.Clazz,boolean)>($r3, $r1, 1);

        return $r4;
    }

    protected proguard.evaluation.value.Value getMethodParameterValue(proguard.classfile.Clazz, proguard.classfile.Method, int, java.lang.String, proguard.classfile.Clazz)
    {
        proguard.evaluation.BasicInvocationUnit r0;
        proguard.evaluation.value.ValueFactory $r6;
        proguard.classfile.Clazz $r1, $r4;
        int $i0;
        proguard.classfile.Method $r2;
        java.lang.String $r3;
        proguard.evaluation.value.Value $r5;

        r0 := @this: proguard.evaluation.BasicInvocationUnit;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $i0 := @parameter2: int;

        $r3 := @parameter3: java.lang.String;

        $r4 := @parameter4: proguard.classfile.Clazz;

        $r6 = r0.<proguard.evaluation.BasicInvocationUnit: proguard.evaluation.value.ValueFactory valueFactory>;

        $r5 = virtualinvoke $r6.<proguard.evaluation.value.ValueFactory: proguard.evaluation.value.Value createValue(java.lang.String,proguard.classfile.Clazz,boolean)>($r3, $r4, 1);

        return $r5;
    }

    protected proguard.evaluation.value.Value getMethodReturnValue(proguard.classfile.Clazz, proguard.classfile.constant.RefConstant, java.lang.String)
    {
        proguard.evaluation.BasicInvocationUnit r0;
        proguard.classfile.Clazz $r1;
        proguard.evaluation.value.ValueFactory $r5;
        java.lang.String $r3;
        proguard.classfile.constant.RefConstant $r2;
        proguard.evaluation.value.Value $r4;

        r0 := @this: proguard.evaluation.BasicInvocationUnit;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.RefConstant;

        $r3 := @parameter2: java.lang.String;

        r0.<proguard.evaluation.BasicInvocationUnit: proguard.classfile.Clazz returnTypeClass> = null;

        virtualinvoke $r2.<proguard.classfile.constant.RefConstant: void referencedMemberAccept(proguard.classfile.visitor.MemberVisitor)>(r0);

        $r5 = r0.<proguard.evaluation.BasicInvocationUnit: proguard.evaluation.value.ValueFactory valueFactory>;

        $r1 = r0.<proguard.evaluation.BasicInvocationUnit: proguard.classfile.Clazz returnTypeClass>;

        $r4 = virtualinvoke $r5.<proguard.evaluation.value.ValueFactory: proguard.evaluation.value.Value createValue(java.lang.String,proguard.classfile.Clazz,boolean)>($r3, $r1, 1);

        return $r4;
    }

    public void invokeMember(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.ConstantInstruction, proguard.evaluation.Stack)
    {
        proguard.evaluation.BasicInvocationUnit r0;
        proguard.evaluation.Stack $r5;
        byte $b1;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0, $i2;
        proguard.classfile.instruction.ConstantInstruction $r4;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.evaluation.BasicInvocationUnit;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.ConstantInstruction;

        $r5 := @parameter5: proguard.evaluation.Stack;

        $i0 = $r4.<proguard.classfile.instruction.ConstantInstruction: int constantIndex>;

        $b1 = $r4.<proguard.classfile.instruction.ConstantInstruction: byte opcode>;

        $i2 = (int) $b1;

        lookupswitch($i2)
        {
            case -78: goto label2;
            case -77: goto label3;
            case -76: goto label4;
            case -75: goto label5;
            case -74: goto label7;
            case -73: goto label7;
            case -72: goto label6;
            case -71: goto label7;
            default: goto label1;
        };

     label1:
        r0.<proguard.evaluation.BasicInvocationUnit: proguard.evaluation.Stack stack> = $r5;

        interfaceinvoke $r1.<proguard.classfile.Clazz: void constantPoolEntryAccept(int,proguard.classfile.constant.visitor.ConstantVisitor)>($i0, r0);

        r0.<proguard.evaluation.BasicInvocationUnit: proguard.evaluation.Stack stack> = null;

        return;

     label2:
        r0.<proguard.evaluation.BasicInvocationUnit: boolean isStatic> = 1;

        r0.<proguard.evaluation.BasicInvocationUnit: boolean isLoad> = 1;

        goto label1;

     label3:
        r0.<proguard.evaluation.BasicInvocationUnit: boolean isStatic> = 1;

        r0.<proguard.evaluation.BasicInvocationUnit: boolean isLoad> = 0;

        goto label1;

     label4:
        r0.<proguard.evaluation.BasicInvocationUnit: boolean isStatic> = 0;

        r0.<proguard.evaluation.BasicInvocationUnit: boolean isLoad> = 1;

        goto label1;

     label5:
        r0.<proguard.evaluation.BasicInvocationUnit: boolean isStatic> = 0;

        r0.<proguard.evaluation.BasicInvocationUnit: boolean isLoad> = 0;

        goto label1;

     label6:
        r0.<proguard.evaluation.BasicInvocationUnit: boolean isStatic> = 1;

        goto label1;

     label7:
        r0.<proguard.evaluation.BasicInvocationUnit: boolean isStatic> = 0;

        goto label1;
    }

    protected void setFieldClassValue(proguard.classfile.Clazz, proguard.classfile.constant.RefConstant, proguard.evaluation.value.ReferenceValue)
    {
        proguard.evaluation.BasicInvocationUnit r0;
        proguard.evaluation.value.ReferenceValue $r3;
        proguard.classfile.Clazz $r1;
        proguard.classfile.constant.RefConstant $r2;

        r0 := @this: proguard.evaluation.BasicInvocationUnit;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.RefConstant;

        $r3 := @parameter2: proguard.evaluation.value.ReferenceValue;

        return;
    }

    protected void setFieldValue(proguard.classfile.Clazz, proguard.classfile.constant.RefConstant, proguard.evaluation.value.Value)
    {
        proguard.evaluation.BasicInvocationUnit r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.constant.RefConstant $r2;
        proguard.evaluation.value.Value $r3;

        r0 := @this: proguard.evaluation.BasicInvocationUnit;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.RefConstant;

        $r3 := @parameter2: proguard.evaluation.value.Value;

        return;
    }

    protected void setMethodParameterValue(proguard.classfile.Clazz, proguard.classfile.constant.RefConstant, int, proguard.evaluation.value.Value)
    {
        proguard.evaluation.BasicInvocationUnit r0;
        proguard.classfile.Clazz $r1;
        int $i0;
        proguard.classfile.constant.RefConstant $r2;
        proguard.evaluation.value.Value $r3;

        r0 := @this: proguard.evaluation.BasicInvocationUnit;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.RefConstant;

        $i0 := @parameter2: int;

        $r3 := @parameter3: proguard.evaluation.value.Value;

        return;
    }

    protected void setMethodReturnValue(proguard.classfile.Clazz, proguard.classfile.Method, proguard.evaluation.value.Value)
    {
        proguard.evaluation.BasicInvocationUnit r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.Method $r2;
        proguard.evaluation.value.Value $r3;

        r0 := @this: proguard.evaluation.BasicInvocationUnit;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.evaluation.value.Value;

        return;
    }

    public void visitAnyMethodrefConstant(proguard.classfile.Clazz, proguard.classfile.constant.RefConstant)
    {
        proguard.evaluation.BasicInvocationUnit r0;
        proguard.evaluation.Stack $r4;
        char $c2;
        proguard.classfile.constant.RefConstant $r2;
        proguard.classfile.Clazz $r1;
        int $i0, $i1;
        java.lang.String $r3;
        proguard.evaluation.value.Value $r5;
        boolean $z0;

        r0 := @this: proguard.evaluation.BasicInvocationUnit;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.RefConstant;

        $r3 = virtualinvoke $r2.<proguard.classfile.constant.RefConstant: java.lang.String getType(proguard.classfile.Clazz)>($r1);

        $i0 = staticinvoke <proguard.classfile.util.ClassUtil: int internalMethodParameterCount(java.lang.String)>($r3);

        $i1 = $i0;

        $z0 = r0.<proguard.evaluation.BasicInvocationUnit: boolean isStatic>;

        if $z0 != 0 goto label1;

        $i1 = $i0 + 1;

     label1:
        $i0 = $i1 - 1;

     label2:
        if $i0 < 0 goto label3;

        $r4 = r0.<proguard.evaluation.BasicInvocationUnit: proguard.evaluation.Stack stack>;

        $r5 = virtualinvoke $r4.<proguard.evaluation.Stack: proguard.evaluation.value.Value pop()>();

        virtualinvoke r0.<proguard.evaluation.BasicInvocationUnit: void setMethodParameterValue(proguard.classfile.Clazz,proguard.classfile.constant.RefConstant,int,proguard.evaluation.value.Value)>($r1, $r2, $i0, $r5);

        $i0 = $i0 + -1;

        goto label2;

     label3:
        $r3 = staticinvoke <proguard.classfile.util.ClassUtil: java.lang.String internalMethodReturnType(java.lang.String)>($r3);

        $c2 = virtualinvoke $r3.<java.lang.String: char charAt(int)>(0);

        $i0 = (int) $c2;

        if $i0 == 86 goto label4;

        $r4 = r0.<proguard.evaluation.BasicInvocationUnit: proguard.evaluation.Stack stack>;

        $r5 = virtualinvoke r0.<proguard.evaluation.BasicInvocationUnit: proguard.evaluation.value.Value getMethodReturnValue(proguard.classfile.Clazz,proguard.classfile.constant.RefConstant,java.lang.String)>($r1, $r2, $r3);

        virtualinvoke $r4.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r5);

     label4:
        return;
    }

    public void visitFieldrefConstant(proguard.classfile.Clazz, proguard.classfile.constant.FieldrefConstant)
    {
        proguard.evaluation.BasicInvocationUnit r0;
        proguard.classfile.constant.FieldrefConstant $r2;
        proguard.evaluation.Stack $r3;
        proguard.evaluation.value.ReferenceValue $r5;
        proguard.classfile.Clazz $r1;
        java.lang.String $r6;
        proguard.evaluation.value.Value $r4;
        boolean $z0;

        r0 := @this: proguard.evaluation.BasicInvocationUnit;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.FieldrefConstant;

        $z0 = r0.<proguard.evaluation.BasicInvocationUnit: boolean isLoad>;

        if $z0 != 0 goto label1;

        $r3 = r0.<proguard.evaluation.BasicInvocationUnit: proguard.evaluation.Stack stack>;

        $r4 = virtualinvoke $r3.<proguard.evaluation.Stack: proguard.evaluation.value.Value pop()>();

        virtualinvoke r0.<proguard.evaluation.BasicInvocationUnit: void setFieldValue(proguard.classfile.Clazz,proguard.classfile.constant.RefConstant,proguard.evaluation.value.Value)>($r1, $r2, $r4);

     label1:
        $z0 = r0.<proguard.evaluation.BasicInvocationUnit: boolean isStatic>;

        if $z0 != 0 goto label2;

        $r3 = r0.<proguard.evaluation.BasicInvocationUnit: proguard.evaluation.Stack stack>;

        $r5 = virtualinvoke $r3.<proguard.evaluation.Stack: proguard.evaluation.value.ReferenceValue apop()>();

        virtualinvoke r0.<proguard.evaluation.BasicInvocationUnit: void setFieldClassValue(proguard.classfile.Clazz,proguard.classfile.constant.RefConstant,proguard.evaluation.value.ReferenceValue)>($r1, $r2, $r5);

     label2:
        $z0 = r0.<proguard.evaluation.BasicInvocationUnit: boolean isLoad>;

        if $z0 == 0 goto label3;

        $r6 = virtualinvoke $r2.<proguard.classfile.constant.FieldrefConstant: java.lang.String getType(proguard.classfile.Clazz)>($r1);

        $r3 = r0.<proguard.evaluation.BasicInvocationUnit: proguard.evaluation.Stack stack>;

        $r4 = virtualinvoke r0.<proguard.evaluation.BasicInvocationUnit: proguard.evaluation.value.Value getFieldValue(proguard.classfile.Clazz,proguard.classfile.constant.RefConstant,java.lang.String)>($r1, $r2, $r6);

        virtualinvoke $r3.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r4);

     label3:
        return;
    }

    public void visitLibraryField(proguard.classfile.LibraryClass, proguard.classfile.LibraryField)
    {
        proguard.classfile.LibraryClass $r1;
        proguard.evaluation.BasicInvocationUnit r0;
        proguard.classfile.Clazz $r3;
        proguard.classfile.LibraryField $r2;

        r0 := @this: proguard.evaluation.BasicInvocationUnit;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        $r2 := @parameter1: proguard.classfile.LibraryField;

        $r3 = $r2.<proguard.classfile.LibraryField: proguard.classfile.Clazz referencedClass>;

        r0.<proguard.evaluation.BasicInvocationUnit: proguard.classfile.Clazz returnTypeClass> = $r3;

        return;
    }

    public void visitLibraryMethod(proguard.classfile.LibraryClass, proguard.classfile.LibraryMethod)
    {
        proguard.classfile.LibraryClass $r1;
        proguard.classfile.Clazz[] $r3;
        proguard.evaluation.BasicInvocationUnit r0;
        proguard.classfile.Clazz $r4;
        int $i0;
        proguard.classfile.LibraryMethod $r2;

        r0 := @this: proguard.evaluation.BasicInvocationUnit;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        $r2 := @parameter1: proguard.classfile.LibraryMethod;

        $r3 = $r2.<proguard.classfile.LibraryMethod: proguard.classfile.Clazz[] referencedClasses>;

        if $r3 == null goto label1;

        $i0 = lengthof $r3;

        $i0 = $i0 - 1;

        $r4 = $r3[$i0];

        r0.<proguard.evaluation.BasicInvocationUnit: proguard.classfile.Clazz returnTypeClass> = $r4;

     label1:
        return;
    }

    public void visitProgramField(proguard.classfile.ProgramClass, proguard.classfile.ProgramField)
    {
        proguard.evaluation.BasicInvocationUnit r0;
        proguard.classfile.ProgramField $r2;
        proguard.classfile.Clazz $r3;
        proguard.classfile.ProgramClass $r1;

        r0 := @this: proguard.evaluation.BasicInvocationUnit;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.ProgramField;

        $r3 = $r2.<proguard.classfile.ProgramField: proguard.classfile.Clazz referencedClass>;

        r0.<proguard.evaluation.BasicInvocationUnit: proguard.classfile.Clazz returnTypeClass> = $r3;

        return;
    }

    public void visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod)
    {
        proguard.classfile.Clazz[] $r3;
        proguard.evaluation.BasicInvocationUnit r0;
        proguard.classfile.Clazz $r4;
        proguard.classfile.ProgramMethod $r2;
        int $i0;
        proguard.classfile.ProgramClass $r1;

        r0 := @this: proguard.evaluation.BasicInvocationUnit;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.ProgramMethod;

        $r3 = $r2.<proguard.classfile.ProgramMethod: proguard.classfile.Clazz[] referencedClasses>;

        if $r3 == null goto label1;

        $i0 = lengthof $r3;

        $i0 = $i0 - 1;

        $r4 = $r3[$i0];

        r0.<proguard.evaluation.BasicInvocationUnit: proguard.classfile.Clazz returnTypeClass> = $r4;

     label1:
        return;
    }
}
