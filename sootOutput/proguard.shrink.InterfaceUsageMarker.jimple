public class proguard.shrink.InterfaceUsageMarker extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.visitor.ClassVisitor, proguard.classfile.constant.visitor.ConstantVisitor
{
    private boolean anyUsed;
    private final proguard.shrink.UsageMarker usageMarker;
    private boolean used;

    public void <init>(proguard.shrink.UsageMarker)
    {
        proguard.shrink.InterfaceUsageMarker r0;
        proguard.shrink.UsageMarker $r1;

        r0 := @this: proguard.shrink.InterfaceUsageMarker;

        $r1 := @parameter0: proguard.shrink.UsageMarker;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        r0.<proguard.shrink.InterfaceUsageMarker: proguard.shrink.UsageMarker usageMarker> = $r1;

        return;
    }

    public void visitClassConstant(proguard.classfile.Clazz, proguard.classfile.constant.ClassConstant)
    {
        proguard.classfile.constant.ClassConstant $r2;
        proguard.shrink.UsageMarker $r3;
        proguard.classfile.Clazz $r1;
        int $i0;
        proguard.shrink.InterfaceUsageMarker r0;
        boolean $z0, $z1;

        r0 := @this: proguard.shrink.InterfaceUsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.ClassConstant;

        $r3 = r0.<proguard.shrink.InterfaceUsageMarker: proguard.shrink.UsageMarker usageMarker>;

        $z0 = virtualinvoke $r3.<proguard.shrink.UsageMarker: boolean isUsed(proguard.classfile.VisitorAccepter)>($r2);

        $z1 = $z0;

        if $z0 != 0 goto label1;

        virtualinvoke $r2.<proguard.classfile.constant.ClassConstant: void referencedClassAccept(proguard.classfile.visitor.ClassVisitor)>(r0);

        $z1 = r0.<proguard.shrink.InterfaceUsageMarker: boolean used>;

        if $z1 == 0 goto label1;

        $r3 = r0.<proguard.shrink.InterfaceUsageMarker: proguard.shrink.UsageMarker usageMarker>;

        virtualinvoke $r3.<proguard.shrink.UsageMarker: void markAsUsed(proguard.classfile.VisitorAccepter)>($r2);

        $i0 = $r2.<proguard.classfile.constant.ClassConstant: int u2nameIndex>;

        interfaceinvoke $r1.<proguard.classfile.Clazz: void constantPoolEntryAccept(int,proguard.classfile.constant.visitor.ConstantVisitor)>($i0, r0);

     label1:
        r0.<proguard.shrink.InterfaceUsageMarker: boolean used> = $z1;

        $z0 = r0.<proguard.shrink.InterfaceUsageMarker: boolean anyUsed>;

        $z1 = $z1 | $z0;

        r0.<proguard.shrink.InterfaceUsageMarker: boolean anyUsed> = $z1;

        return;
    }

    public void visitLibraryClass(proguard.classfile.LibraryClass)
    {
        proguard.shrink.InterfaceUsageMarker r0;
        proguard.classfile.LibraryClass $r1;

        r0 := @this: proguard.shrink.InterfaceUsageMarker;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        r0.<proguard.shrink.InterfaceUsageMarker: boolean used> = 1;

        r0.<proguard.shrink.InterfaceUsageMarker: boolean anyUsed> = 1;

        return;
    }

    public void visitProgramClass(proguard.classfile.ProgramClass)
    {
        proguard.shrink.UsageMarker $r2;
        proguard.shrink.InterfaceUsageMarker r0;
        proguard.classfile.ProgramClass $r1;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: proguard.shrink.InterfaceUsageMarker;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 = r0.<proguard.shrink.InterfaceUsageMarker: proguard.shrink.UsageMarker usageMarker>;

        $z1 = virtualinvoke $r2.<proguard.shrink.UsageMarker: boolean isUsed(proguard.classfile.VisitorAccepter)>($r1);

        $z2 = $z1;

        $r2 = r0.<proguard.shrink.InterfaceUsageMarker: proguard.shrink.UsageMarker usageMarker>;

        $z3 = virtualinvoke $r2.<proguard.shrink.UsageMarker: boolean isPossiblyUsed(proguard.classfile.VisitorAccepter)>($r1);

        if $z1 != 0 goto label1;

        if $z3 == 0 goto label2;

     label1:
        $z0 = r0.<proguard.shrink.InterfaceUsageMarker: boolean anyUsed>;

        r0.<proguard.shrink.InterfaceUsageMarker: boolean anyUsed> = 0;

        virtualinvoke $r1.<proguard.classfile.ProgramClass: void interfaceConstantsAccept(proguard.classfile.constant.visitor.ConstantVisitor)>(r0);

        $z2 = r0.<proguard.shrink.InterfaceUsageMarker: boolean anyUsed>;

        $z2 = $z1 | $z2;

        r0.<proguard.shrink.InterfaceUsageMarker: boolean anyUsed> = $z0;

        if $z3 == 0 goto label2;

        if $z2 == 0 goto label3;

        $r2 = r0.<proguard.shrink.InterfaceUsageMarker: proguard.shrink.UsageMarker usageMarker>;

        virtualinvoke $r2.<proguard.shrink.UsageMarker: void markAsUsed(proguard.classfile.VisitorAccepter)>($r1);

        virtualinvoke $r1.<proguard.classfile.ProgramClass: void thisClassConstantAccept(proguard.classfile.constant.visitor.ConstantVisitor)>(r0);

        virtualinvoke $r1.<proguard.classfile.ProgramClass: void superClassConstantAccept(proguard.classfile.constant.visitor.ConstantVisitor)>(r0);

     label2:
        r0.<proguard.shrink.InterfaceUsageMarker: boolean used> = $z2;

        return;

     label3:
        $r2 = r0.<proguard.shrink.InterfaceUsageMarker: proguard.shrink.UsageMarker usageMarker>;

        virtualinvoke $r2.<proguard.shrink.UsageMarker: void markAsUnused(proguard.classfile.VisitorAccepter)>($r1);

        goto label2;
    }

    public void visitUtf8Constant(proguard.classfile.Clazz, proguard.classfile.constant.Utf8Constant)
    {
        proguard.shrink.UsageMarker $r3;
        proguard.classfile.Clazz $r1;
        proguard.shrink.InterfaceUsageMarker r0;
        proguard.classfile.constant.Utf8Constant $r2;
        boolean $z0;

        r0 := @this: proguard.shrink.InterfaceUsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.Utf8Constant;

        $r3 = r0.<proguard.shrink.InterfaceUsageMarker: proguard.shrink.UsageMarker usageMarker>;

        $z0 = virtualinvoke $r3.<proguard.shrink.UsageMarker: boolean isUsed(proguard.classfile.VisitorAccepter)>($r2);

        if $z0 != 0 goto label1;

        $r3 = r0.<proguard.shrink.InterfaceUsageMarker: proguard.shrink.UsageMarker usageMarker>;

        virtualinvoke $r3.<proguard.shrink.UsageMarker: void markAsUsed(proguard.classfile.VisitorAccepter)>($r2);

     label1:
        return;
    }
}
