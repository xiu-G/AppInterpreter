public class com.izp.classes.t extends com.izp.classes.p
{
    com.izp.classes.b c;
    java.lang.StringBuffer d;
    com.izp.classes.m e;

    public void <init>()
    {
        com.izp.classes.m $r2;
        com.izp.classes.t r0;
        java.lang.StringBuffer $r1;

        r0 := @this: com.izp.classes.t;

        specialinvoke r0.<com.izp.classes.p: void <init>()>();

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        r0.<com.izp.classes.t: java.lang.StringBuffer d> = $r1;

        $r2 = new com.izp.classes.m;

        specialinvoke $r2.<com.izp.classes.m: void <init>()>();

        r0.<com.izp.classes.t: com.izp.classes.m e> = $r2;

        return;
    }

    public void a(int)
    {
        int $i0;
        com.izp.classes.t r0;

        r0 := @this: com.izp.classes.t;

        $i0 := @parameter0: int;

        return;
    }

    public void a(com.izp.classes.b)
    {
        com.izp.classes.t r0;
        com.izp.classes.b $r1;
        java.lang.StringBuffer $r2;
        com.izp.classes.k $r4;
        com.izp.classes.m $r6;
        java.lang.StringBuilder $r3;
        java.lang.String $r5, $r7;

        r0 := @this: com.izp.classes.t;

        $r1 := @parameter0: com.izp.classes.b;

        r0.<com.izp.classes.t: com.izp.classes.b c> = $r1;

        $r2 = r0.<com.izp.classes.t: java.lang.StringBuffer d>;

        virtualinvoke $r2.<java.lang.StringBuffer: void setLength(int)>(0);

        $r2 = r0.<com.izp.classes.t: java.lang.StringBuffer d>;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ret=2");

        $r2 = r0.<com.izp.classes.t: java.lang.StringBuffer d>;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&rqt=3");

        $r2 = r0.<com.izp.classes.t: java.lang.StringBuffer d>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&aid=");

        $r4 = $r1.<com.izp.classes.b: com.izp.classes.k b>;

        $r5 = $r4.<com.izp.classes.k: java.lang.String d>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r2 = r0.<com.izp.classes.t: java.lang.StringBuffer d>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&u=");

        $r5 = $r1.<com.izp.classes.b: java.lang.String g>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r2 = r0.<com.izp.classes.t: java.lang.StringBuffer d>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&tid=");

        $r5 = $r1.<com.izp.classes.b: java.lang.String d>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r2 = r0.<com.izp.classes.t: java.lang.StringBuffer d>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&shid=");

        $r4 = $r1.<com.izp.classes.b: com.izp.classes.k b>;

        $r5 = $r4.<com.izp.classes.k: java.lang.String c>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r2 = r0.<com.izp.classes.t: java.lang.StringBuffer d>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&pid=");

        $r5 = $r1.<com.izp.classes.b: java.lang.String c>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r2 = r0.<com.izp.classes.t: java.lang.StringBuffer d>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&m=");

        $r5 = $r1.<com.izp.classes.b: java.lang.String h>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r2 = r0.<com.izp.classes.t: java.lang.StringBuffer d>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&o=");

        $r5 = $r1.<com.izp.classes.b: java.lang.String i>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r2 = r0.<com.izp.classes.t: java.lang.StringBuffer d>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&ty=");

        $r5 = $r1.<com.izp.classes.b: java.lang.String f>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r2 = r0.<com.izp.classes.t: java.lang.StringBuffer d>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&ip=");

        $r5 = $r1.<com.izp.classes.b: java.lang.String j>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r2 = r0.<com.izp.classes.t: java.lang.StringBuffer d>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&tt=");

        $r5 = $r1.<com.izp.classes.b: java.lang.String l>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r2 = r0.<com.izp.classes.t: java.lang.StringBuffer d>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&v=");

        $r5 = $r1.<com.izp.classes.b: java.lang.String q>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r2 = r0.<com.izp.classes.t: java.lang.StringBuffer d>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&st=");

        $r5 = $r1.<com.izp.classes.b: java.lang.String n>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r2 = r0.<com.izp.classes.t: java.lang.StringBuffer d>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&ac=");

        $r5 = <com.izp.classes.b: java.lang.String r>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r2 = r0.<com.izp.classes.t: java.lang.StringBuffer d>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&ca=");

        $r5 = $r1.<com.izp.classes.b: java.lang.String s>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r6 = r0.<com.izp.classes.t: com.izp.classes.m e>;

        $r5 = <com.izp.classes.t: java.lang.String a>;

        $r2 = r0.<com.izp.classes.t: java.lang.StringBuffer d>;

        $r7 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r6.<com.izp.classes.m: void a(java.lang.String,java.lang.String,com.izp.classes.n)>($r5, $r7, r0);

        return;
    }

    public void a(java.io.InputStream)
    {
        java.lang.Throwable $r2;
        com.izp.classes.t r0;
        java.io.IOException $r3;
        java.io.InputStream $r1;

        r0 := @this: com.izp.classes.t;

        $r1 := @parameter0: java.io.InputStream;

     label1:
        virtualinvoke $r1.<java.io.InputStream: void close()>();

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = (java.io.IOException) $r2;

        virtualinvoke $r3.<java.io.IOException: void printStackTrace()>();

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }
}
