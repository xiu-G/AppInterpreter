public final enum class cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy extends java.lang.Enum
{
    private static final cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy[] $VALUES;
    public static final enum cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy ALWAYS;
    public static final enum cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy DISABLED;
    public static final enum cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy PRE_HONEYCOMB_ONLY;

    static void <clinit>()
    {
        cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy[] $r1;
        cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy $r0;

        $r0 = new cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy;

        specialinvoke $r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy: void <init>(java.lang.String,int)>("DISABLED", 0);

        <cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy: cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy DISABLED> = $r0;

        $r0 = new cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy;

        specialinvoke $r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy: void <init>(java.lang.String,int)>("PRE_HONEYCOMB_ONLY", 1);

        <cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy: cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy PRE_HONEYCOMB_ONLY> = $r0;

        $r0 = new cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy;

        specialinvoke $r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy: void <init>(java.lang.String,int)>("ALWAYS", 2);

        <cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy: cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy ALWAYS> = $r0;

        $r1 = newarray (cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy)[3];

        $r0 = <cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy: cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy DISABLED>;

        $r1[0] = $r0;

        $r0 = <cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy: cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy PRE_HONEYCOMB_ONLY>;

        $r1[1] = $r0;

        $r0 = <cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy: cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy ALWAYS>;

        $r1[2] = $r0;

        <cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy: cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy[] $VALUES> = $r1;

        return;
    }

    private void <init>(java.lang.String, int)
    {
        int $i0;
        java.lang.String $r1;
        cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy r0;

        r0 := @this: cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0);

        return;
    }

    public static cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy valueOf(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.Enum $r1;
        cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lcn/ffcs/lib/bitmapcache/BitmapLruCache$RecyclePolicy;", $r0);

        $r2 = (cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy) $r1;

        return $r2;
    }

    public static cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy[] values()
    {
        cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy[] $r1;
        java.lang.Object $r0;

        $r1 = <cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy: cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy[] $VALUES>;

        $r0 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy[]) $r0;

        return $r1;
    }

    boolean canInBitmap()
    {
        int $i0;
        int[] $r1;
        cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy r0;

        r0 := @this: cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy;

        $r1 = <cn.ffcs.lib.bitmapcache.BitmapLruCache$1: int[] $SwitchMap$cn$ffcs$lib$bitmapcache$BitmapLruCache$RecyclePolicy>;

        $i0 = virtualinvoke r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy: int ordinal()>();

        $i0 = $r1[$i0];

        lookupswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label2;
            default: goto label1;
        };

     label1:
        return 0;

     label2:
        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 11 goto label3;

        return 1;

     label3:
        return 0;
    }

    boolean canRecycle()
    {
        int[] $r1;
        int $i0;
        cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy r0;
        boolean $z0;

        r0 := @this: cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy;

        $z0 = 1;

        $r1 = <cn.ffcs.lib.bitmapcache.BitmapLruCache$1: int[] $SwitchMap$cn$ffcs$lib$bitmapcache$BitmapLruCache$RecyclePolicy>;

        $i0 = virtualinvoke r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy: int ordinal()>();

        $i0 = $r1[$i0];

        lookupswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label1;
            case 3: goto label5;
            default: goto label1;
        };

     label1:
        return 0;

     label2:
        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 >= 11 goto label4;

     label3:
        return $z0;

     label4:
        $z0 = 0;

        goto label3;

     label5:
        return 1;
    }
}
