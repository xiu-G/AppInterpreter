public class proguard.classfile.visitor.ClassHierarchyTraveler extends java.lang.Object implements proguard.classfile.visitor.ClassVisitor
{
    private final proguard.classfile.visitor.ClassVisitor classVisitor;
    private final boolean visitInterfaces;
    private final boolean visitSubclasses;
    private final boolean visitSuperClass;
    private final boolean visitThisClass;

    public void <init>(boolean, boolean, boolean, boolean, proguard.classfile.visitor.ClassVisitor)
    {
        proguard.classfile.visitor.ClassVisitor $r1;
        proguard.classfile.visitor.ClassHierarchyTraveler r0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: proguard.classfile.visitor.ClassHierarchyTraveler;

        $z0 := @parameter0: boolean;

        $z1 := @parameter1: boolean;

        $z2 := @parameter2: boolean;

        $z3 := @parameter3: boolean;

        $r1 := @parameter4: proguard.classfile.visitor.ClassVisitor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<proguard.classfile.visitor.ClassHierarchyTraveler: boolean visitThisClass> = $z0;

        r0.<proguard.classfile.visitor.ClassHierarchyTraveler: boolean visitSuperClass> = $z1;

        r0.<proguard.classfile.visitor.ClassHierarchyTraveler: boolean visitInterfaces> = $z2;

        r0.<proguard.classfile.visitor.ClassHierarchyTraveler: boolean visitSubclasses> = $z3;

        r0.<proguard.classfile.visitor.ClassHierarchyTraveler: proguard.classfile.visitor.ClassVisitor classVisitor> = $r1;

        return;
    }

    public void visitLibraryClass(proguard.classfile.LibraryClass)
    {
        proguard.classfile.LibraryClass $r1;
        proguard.classfile.visitor.ClassVisitor $r2;
        proguard.classfile.visitor.ClassHierarchyTraveler r0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: proguard.classfile.visitor.ClassHierarchyTraveler;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        $z0 = r0.<proguard.classfile.visitor.ClassHierarchyTraveler: boolean visitThisClass>;

        $z1 = r0.<proguard.classfile.visitor.ClassHierarchyTraveler: boolean visitSuperClass>;

        $z2 = r0.<proguard.classfile.visitor.ClassHierarchyTraveler: boolean visitInterfaces>;

        $z3 = r0.<proguard.classfile.visitor.ClassHierarchyTraveler: boolean visitSubclasses>;

        $r2 = r0.<proguard.classfile.visitor.ClassHierarchyTraveler: proguard.classfile.visitor.ClassVisitor classVisitor>;

        virtualinvoke $r1.<proguard.classfile.LibraryClass: void hierarchyAccept(boolean,boolean,boolean,boolean,proguard.classfile.visitor.ClassVisitor)>($z0, $z1, $z2, $z3, $r2);

        return;
    }

    public void visitProgramClass(proguard.classfile.ProgramClass)
    {
        proguard.classfile.visitor.ClassVisitor $r2;
        proguard.classfile.visitor.ClassHierarchyTraveler r0;
        proguard.classfile.ProgramClass $r1;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: proguard.classfile.visitor.ClassHierarchyTraveler;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $z0 = r0.<proguard.classfile.visitor.ClassHierarchyTraveler: boolean visitThisClass>;

        $z1 = r0.<proguard.classfile.visitor.ClassHierarchyTraveler: boolean visitSuperClass>;

        $z2 = r0.<proguard.classfile.visitor.ClassHierarchyTraveler: boolean visitInterfaces>;

        $z3 = r0.<proguard.classfile.visitor.ClassHierarchyTraveler: boolean visitSubclasses>;

        $r2 = r0.<proguard.classfile.visitor.ClassHierarchyTraveler: proguard.classfile.visitor.ClassVisitor classVisitor>;

        virtualinvoke $r1.<proguard.classfile.ProgramClass: void hierarchyAccept(boolean,boolean,boolean,boolean,proguard.classfile.visitor.ClassVisitor)>($z0, $z1, $z2, $z3, $r2);

        return;
    }
}
