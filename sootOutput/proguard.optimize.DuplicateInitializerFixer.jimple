public class proguard.optimize.DuplicateInitializerFixer extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.visitor.MemberVisitor, proguard.classfile.attribute.visitor.AttributeVisitor
{
    private static final boolean DEBUG;
    private static final char[] TYPES;
    private final proguard.classfile.visitor.MemberVisitor extraFixedInitializerVisitor;

    static void <clinit>()
    {
        char[] $r0;

        $r0 = newarray (char)[5];

        $r0[0] = 66;

        $r0[1] = 67;

        $r0[2] = 83;

        $r0[3] = 73;

        $r0[4] = 90;

        <proguard.optimize.DuplicateInitializerFixer: char[] TYPES> = $r0;

        return;
    }

    public void <init>()
    {
        proguard.optimize.DuplicateInitializerFixer r0;

        r0 := @this: proguard.optimize.DuplicateInitializerFixer;

        specialinvoke r0.<proguard.optimize.DuplicateInitializerFixer: void <init>(proguard.classfile.visitor.MemberVisitor)>(null);

        return;
    }

    public void <init>(proguard.classfile.visitor.MemberVisitor)
    {
        proguard.optimize.DuplicateInitializerFixer r0;
        proguard.classfile.visitor.MemberVisitor $r1;

        r0 := @this: proguard.optimize.DuplicateInitializerFixer;

        $r1 := @parameter0: proguard.classfile.visitor.MemberVisitor;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        r0.<proguard.optimize.DuplicateInitializerFixer: proguard.classfile.visitor.MemberVisitor extraFixedInitializerVisitor> = $r1;

        return;
    }

    public void visitAnyAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.Attribute)
    {
        proguard.optimize.DuplicateInitializerFixer r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.Attribute $r2;

        r0 := @this: proguard.optimize.DuplicateInitializerFixer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.Attribute;

        return;
    }

    public void visitAnyParameterAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute)
    {
        proguard.classfile.attribute.'annotation'.Annotation[][] $r5, $r7;
        proguard.classfile.Clazz $r1;
        int[] $r4, $r6;
        int $i0, $i1, $i2;
        proguard.optimize.DuplicateInitializerFixer r0;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute $r3;

        r0 := @this: proguard.optimize.DuplicateInitializerFixer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute;

        $i0 = $r3.<proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute: int u2parametersCount>;

        $i1 = $i0 + 1;

        $r3.<proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute: int u2parametersCount> = $i1;

        $r4 = $r3.<proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute: int[] u2parameterAnnotationsCount>;

        if $r4 == null goto label1;

        $r4 = $r3.<proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute: int[] u2parameterAnnotationsCount>;

        $i1 = lengthof $r4;

        $i2 = $r3.<proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute: int u2parametersCount>;

        if $i1 >= $i2 goto label2;

     label1:
        $i1 = $r3.<proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute: int u2parametersCount>;

        $r4 = newarray (int)[$i1];

        $i1 = $r3.<proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute: int u2parametersCount>;

        $r5 = newarray (proguard.classfile.attribute.'annotation'.Annotation[])[$i1];

        $r6 = $r3.<proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute: int[] u2parameterAnnotationsCount>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, $r4, 0, $i0);

        $r7 = $r3.<proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute: proguard.classfile.attribute.'annotation'.Annotation[][] parameterAnnotations>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, $r5, 0, $i0);

        $r3.<proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute: int[] u2parameterAnnotationsCount> = $r4;

        $r3.<proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute: proguard.classfile.attribute.'annotation'.Annotation[][] parameterAnnotations> = $r5;

     label2:
        return;
    }

    public void visitCodeAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0, $i1;
        proguard.optimize.DuplicateInitializerFixer r0;
        proguard.classfile.Method $r2;
        java.lang.String $r4;

        r0 := @this: proguard.optimize.DuplicateInitializerFixer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 = interfaceinvoke $r2.<proguard.classfile.Method: java.lang.String getDescriptor(proguard.classfile.Clazz)>($r1);

        $i0 = interfaceinvoke $r2.<proguard.classfile.Method: int getAccessFlags()>();

        $i0 = staticinvoke <proguard.classfile.util.ClassUtil: int internalMethodParameterSize(java.lang.String,int)>($r4, $i0);

        $i1 = $r3.<proguard.classfile.attribute.CodeAttribute: int u2maxLocals>;

        if $i1 >= $i0 goto label1;

        $r3.<proguard.classfile.attribute.CodeAttribute: int u2maxLocals> = $i0;

     label1:
        return;
    }

    public void visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod)
    {
        java.lang.IllegalStateException $r11;
        proguard.classfile.ProgramClass $r1;
        java.lang.StringBuffer $r7;
        proguard.classfile.ProgramMethod $r2;
        int $i0, $i1, $i2;
        java.lang.String $r3, $r4, $r8;
        proguard.classfile.editor.ConstantPoolEditor $r9;
        boolean $z0;
        proguard.classfile.visitor.MemberVisitor $r10;
        char $c3;
        proguard.optimize.DuplicateInitializerFixer r0;
        proguard.classfile.Method $r5;
        char[] $r6;

        r0 := @this: proguard.optimize.DuplicateInitializerFixer;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.ProgramMethod;

        $r3 = virtualinvoke $r2.<proguard.classfile.ProgramMethod: java.lang.String getName(proguard.classfile.Clazz)>($r1);

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("<init>");

        if $z0 == 0 goto label5;

        $r4 = virtualinvoke $r2.<proguard.classfile.ProgramMethod: java.lang.String getDescriptor(proguard.classfile.Clazz)>($r1);

        $r5 = virtualinvoke $r1.<proguard.classfile.ProgramClass: proguard.classfile.Method findMethod(java.lang.String,java.lang.String)>($r3, $r4);

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label5;

        $z0 = staticinvoke <proguard.optimize.KeepMarker: boolean isKept(proguard.classfile.VisitorAccepter)>($r2);

        if $z0 != 0 goto label1;

        $r2 = (proguard.classfile.ProgramMethod) $r5;

     label1:
        $i0 = virtualinvoke $r4.<java.lang.String: int indexOf(int)>(41);

        $i1 = 0;

     label2:
        $r6 = <proguard.optimize.DuplicateInitializerFixer: char[] TYPES>;

        $i2 = lengthof $r6;

        if $i1 >= $i2 goto label4;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r6 = <proguard.optimize.DuplicateInitializerFixer: char[] TYPES>;

        $c3 = $r6[$i1];

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c3);

        $r8 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int)>($i0);

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        $r5 = virtualinvoke $r1.<proguard.classfile.ProgramClass: proguard.classfile.Method findMethod(java.lang.String,java.lang.String)>($r3, $r8);

        if $r5 != null goto label3;

        $r9 = new proguard.classfile.editor.ConstantPoolEditor;

        specialinvoke $r9.<proguard.classfile.editor.ConstantPoolEditor: void <init>(proguard.classfile.ProgramClass)>($r1);

        $i0 = virtualinvoke $r9.<proguard.classfile.editor.ConstantPoolEditor: int addUtf8Constant(java.lang.String)>($r8);

        $r2.<proguard.classfile.ProgramMethod: int u2descriptorIndex> = $i0;

        virtualinvoke $r2.<proguard.classfile.ProgramMethod: void attributesAccept(proguard.classfile.ProgramClass,proguard.classfile.attribute.visitor.AttributeVisitor)>($r1, r0);

        $r10 = r0.<proguard.optimize.DuplicateInitializerFixer: proguard.classfile.visitor.MemberVisitor extraFixedInitializerVisitor>;

        if $r10 == null goto label5;

        $r10 = r0.<proguard.optimize.DuplicateInitializerFixer: proguard.classfile.visitor.MemberVisitor extraFixedInitializerVisitor>;

        interfaceinvoke $r10.<proguard.classfile.visitor.MemberVisitor: void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod)>($r1, $r2);

        return;

     label3:
        $i1 = $i1 + 1;

        goto label2;

     label4:
        $r11 = new java.lang.IllegalStateException;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Can\'t find unique constructor descriptor for [");

        $r3 = virtualinvoke $r1.<proguard.classfile.ProgramClass: java.lang.String getName()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        $r3 = virtualinvoke $r2.<proguard.classfile.ProgramMethod: java.lang.String getName(proguard.classfile.Clazz)>($r1);

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r2.<proguard.classfile.ProgramMethod: java.lang.String getDescriptor(proguard.classfile.Clazz)>($r1);

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r3 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        throw $r11;

     label5:
        return;
    }

    public void visitSignatureAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.SignatureAttribute)
    {
        char $c2;
        proguard.classfile.ProgramClass $r9;
        proguard.classfile.Clazz $r3;
        java.lang.StringBuffer $r6;
        int $i0, $i1;
        proguard.optimize.DuplicateInitializerFixer r0;
        proguard.classfile.Method $r1;
        proguard.classfile.attribute.SignatureAttribute $r2;
        java.lang.String $r4, $r5, $r7;
        proguard.classfile.editor.ConstantPoolEditor $r8;

        r0 := @this: proguard.optimize.DuplicateInitializerFixer;

        $r3 := @parameter0: proguard.classfile.Clazz;

        $r1 := @parameter1: proguard.classfile.Method;

        $r2 := @parameter2: proguard.classfile.attribute.SignatureAttribute;

        $r4 = interfaceinvoke $r1.<proguard.classfile.Method: java.lang.String getDescriptor(proguard.classfile.Clazz)>($r3);

        $i0 = virtualinvoke $r4.<java.lang.String: int indexOf(int)>(41);

        $i1 = $r2.<proguard.classfile.attribute.SignatureAttribute: int u2signatureIndex>;

        $r5 = interfaceinvoke $r3.<proguard.classfile.Clazz: java.lang.String getString(int)>($i1);

        $i1 = virtualinvoke $r5.<java.lang.String: int indexOf(int)>(41);

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $i0 = $i0 - 1;

        $c2 = virtualinvoke $r4.<java.lang.String: char charAt(int)>($i0);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2);

        $r4 = virtualinvoke $r5.<java.lang.String: java.lang.String substring(int)>($i1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        $r8 = new proguard.classfile.editor.ConstantPoolEditor;

        $r9 = (proguard.classfile.ProgramClass) $r3;

        specialinvoke $r8.<proguard.classfile.editor.ConstantPoolEditor: void <init>(proguard.classfile.ProgramClass)>($r9);

        $i0 = virtualinvoke $r8.<proguard.classfile.editor.ConstantPoolEditor: int addUtf8Constant(java.lang.String)>($r4);

        $r2.<proguard.classfile.attribute.SignatureAttribute: int u2signatureIndex> = $i0;

        return;
    }
}
