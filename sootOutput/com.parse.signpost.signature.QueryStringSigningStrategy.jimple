public class com.parse.signpost.signature.QueryStringSigningStrategy extends java.lang.Object implements com.parse.signpost.signature.SigningStrategy
{
    private static final long serialVersionUID;

    public void <init>()
    {
        com.parse.signpost.signature.QueryStringSigningStrategy r0;

        r0 := @this: com.parse.signpost.signature.QueryStringSigningStrategy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.String writeSignature(java.lang.String, com.parse.signpost.http.HttpRequest, com.parse.signpost.http.HttpParameters)
    {
        com.parse.signpost.signature.QueryStringSigningStrategy r0;
        java.lang.String[] $r6;
        com.parse.signpost.http.HttpParameters $r3;
        com.parse.signpost.http.HttpRequest $r2;
        java.lang.StringBuilder $r4;
        java.lang.String $r1, $r5;
        boolean $z0;

        r0 := @this: com.parse.signpost.signature.QueryStringSigningStrategy;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: com.parse.signpost.http.HttpRequest;

        $r3 := @parameter2: com.parse.signpost.http.HttpParameters;

        $r4 = new java.lang.StringBuilder;

        $r5 = interfaceinvoke $r2.<com.parse.signpost.http.HttpRequest: java.lang.String getRequestUrl()>();

        $r6 = newarray (java.lang.String)[2];

        $r6[0] = "oauth_signature";

        $r6[1] = $r1;

        $r1 = staticinvoke <com.parse.signpost.OAuth: java.lang.String addQueryParameters(java.lang.String,java.lang.String[])>($r5, $r6);

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>($r1);

        $z0 = virtualinvoke $r3.<com.parse.signpost.http.HttpParameters: boolean containsKey(java.lang.Object)>("oauth_token");

        if $z0 == 0 goto label1;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&");

        $r1 = virtualinvoke $r3.<com.parse.signpost.http.HttpParameters: java.lang.String getAsQueryString(java.lang.Object)>("oauth_token");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

     label1:
        $z0 = virtualinvoke $r3.<com.parse.signpost.http.HttpParameters: boolean containsKey(java.lang.Object)>("oauth_callback");

        if $z0 == 0 goto label2;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&");

        $r1 = virtualinvoke $r3.<com.parse.signpost.http.HttpParameters: java.lang.String getAsQueryString(java.lang.Object)>("oauth_callback");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

     label2:
        $z0 = virtualinvoke $r3.<com.parse.signpost.http.HttpParameters: boolean containsKey(java.lang.Object)>("oauth_verifier");

        if $z0 == 0 goto label3;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&");

        $r1 = virtualinvoke $r3.<com.parse.signpost.http.HttpParameters: java.lang.String getAsQueryString(java.lang.Object)>("oauth_verifier");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

     label3:
        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&");

        $r1 = virtualinvoke $r3.<com.parse.signpost.http.HttpParameters: java.lang.String getAsQueryString(java.lang.Object)>("oauth_consumer_key");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&");

        $r1 = virtualinvoke $r3.<com.parse.signpost.http.HttpParameters: java.lang.String getAsQueryString(java.lang.Object)>("oauth_version");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&");

        $r1 = virtualinvoke $r3.<com.parse.signpost.http.HttpParameters: java.lang.String getAsQueryString(java.lang.Object)>("oauth_signature_method");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&");

        $r1 = virtualinvoke $r3.<com.parse.signpost.http.HttpParameters: java.lang.String getAsQueryString(java.lang.Object)>("oauth_timestamp");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&");

        $r1 = virtualinvoke $r3.<com.parse.signpost.http.HttpParameters: java.lang.String getAsQueryString(java.lang.Object)>("oauth_nonce");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r2.<com.parse.signpost.http.HttpRequest: void setRequestUrl(java.lang.String)>($r1);

        return $r1;
    }

    public static void <clinit>()
    {
        <com.parse.signpost.signature.QueryStringSigningStrategy: long serialVersionUID> = 1L;

        return;
    }
}
