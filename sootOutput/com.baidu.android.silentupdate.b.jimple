class com.baidu.android.silentupdate.b extends java.lang.Object
{
    private static final java.lang.String a;

    void <init>()
    {
        com.baidu.android.silentupdate.b r0;

        r0 := @this: com.baidu.android.silentupdate.b;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.ClassLoader a(java.lang.String, java.lang.String, java.lang.String, android.content.Context)
    {
        java.lang.Throwable $r21, $r22, $r23, $r24, $r25, $r26;
        android.content.Context $r3;
        java.lang.Object[] $r16;
        java.lang.Integer $r17;
        int $i0;
        java.lang.String $r0, $r1, $r2, $r6;
        java.lang.reflect.Method $r15;
        dalvik.system.DexClassLoader $r8;
        boolean $z0;
        dalvik.system.DexFile $r11;
        java.lang.Class[] $r13;
        java.lang.reflect.Field $r19;
        java.io.File $r4, $r7;
        java.lang.Exception $r10;
        dalvik.system.PathClassLoader $r20;
        java.lang.StringBuilder $r5;
        java.lang.Class $r12, $r14;
        java.lang.Object $r18;
        java.lang.ClassNotFoundException $r27;
        java.lang.ClassLoader $r9;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: android.content.Context;

        $r4 = new java.io.File;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/plugin-deploy.dex");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>($r6);

        $z0 = virtualinvoke $r4.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label01;

        $r7 = new java.io.File;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.io.File: java.lang.String getAbsolutePath()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_0");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.io.File: void <init>(java.lang.String)>($r6);

        virtualinvoke $r4.<java.io.File: boolean renameTo(java.io.File)>($r7);

     label01:
        $r8 = new dalvik.system.DexClassLoader;

     label02:
        $r9 = virtualinvoke $r3.<android.content.Context: java.lang.ClassLoader getClassLoader()>();

        specialinvoke $r8.<dalvik.system.DexClassLoader: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.ClassLoader)>($r0, $r1, $r2, $r9);

     label03:
        return $r8;

     label04:
        $r10 := @caughtexception;

        $r11 = new dalvik.system.DexFile;

     label05:
        $r2 = virtualinvoke $r3.<android.content.Context: java.lang.String getPackageResourcePath()>();

        specialinvoke $r11.<dalvik.system.DexFile: void <init>(java.lang.String)>($r2);

        $r12 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("dalvik.system.DexFile");

     label06:
        $r13 = newarray (java.lang.Class)[3];

        $r13[0] = class "Ljava/lang/String;";

        $r13[1] = class "Ljava/lang/String;";

        $r14 = <java.lang.Integer: java.lang.Class TYPE>;

        $r13[2] = $r14;

     label07:
        $r15 = virtualinvoke $r12.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("openDexFile", $r13);

        virtualinvoke $r15.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

     label08:
        $r16 = newarray (java.lang.Object)[3];

        $r16[0] = $r0;

        $r16[1] = $r1;

     label09:
        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

     label10:
        $r16[2] = $r17;

     label11:
        $r18 = virtualinvoke $r15.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r11, $r16);

     label12:
        $r17 = (java.lang.Integer) $r18;

     label13:
        $i0 = virtualinvoke $r17.<java.lang.Integer: int intValue()>();

        $r19 = virtualinvoke $r12.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("mCookie");

        virtualinvoke $r19.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        virtualinvoke $r19.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>($r11, $r17);

        $r19 = virtualinvoke $r12.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("mFileName");

        virtualinvoke $r19.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        virtualinvoke $r19.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>($r11, $r0);

     label14:
        $r20 = new dalvik.system.PathClassLoader;

     label15:
        $r0 = virtualinvoke $r3.<android.content.Context: java.lang.String getPackageResourcePath()>();

        $r9 = virtualinvoke $r3.<android.content.Context: java.lang.ClassLoader getClassLoader()>();

        specialinvoke $r20.<dalvik.system.PathClassLoader: void <init>(java.lang.String,java.lang.ClassLoader)>($r0, $r9);

        $r12 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("dalvik.system.BaseDexClassLoader");

        $r19 = virtualinvoke $r12.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("pathList");

        virtualinvoke $r19.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        $r18 = virtualinvoke $r19.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>($r20);

        $r12 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("dalvik.system.DexPathList");

        $r19 = virtualinvoke $r12.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("dexElements");

        virtualinvoke $r19.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        $r18 = virtualinvoke $r19.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>($r18);

     label16:
        $r16 = (java.lang.Object[]) $r18;

        $i0 = lengthof $r16;

        if $i0 <= 0 goto label22;

     label17:
        $r12 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("dalvik.system.DexPathList$Element");

        $r19 = virtualinvoke $r12.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("dexFile");

        virtualinvoke $r19.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

     label18:
        $r18 = $r16[0];

     label19:
        virtualinvoke $r19.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>($r18, $r11);

     label20:
        return $r20;

     label21:
        $r21 := @caughtexception;

     label22:
        return null;

     label23:
        $r22 := @caughtexception;

        goto label22;

     label24:
        $r23 := @caughtexception;

        goto label22;

     label25:
        $r24 := @caughtexception;

        goto label22;

     label26:
        $r25 := @caughtexception;

        goto label22;

     label27:
        $r26 := @caughtexception;

        goto label22;

     label28:
        $r27 := @caughtexception;

        goto label22;

        catch java.lang.Exception from label02 to label03 with label04;
        catch java.lang.ClassNotFoundException from label05 to label06 with label28;
        catch java.lang.ClassNotFoundException from label07 to label08 with label28;
        catch java.lang.ClassNotFoundException from label09 to label10 with label28;
        catch java.lang.ClassNotFoundException from label11 to label12 with label28;
        catch java.lang.ClassNotFoundException from label13 to label14 with label28;
        catch java.lang.ClassNotFoundException from label15 to label16 with label28;
        catch java.lang.ClassNotFoundException from label17 to label18 with label28;
        catch java.lang.ClassNotFoundException from label19 to label20 with label28;
        catch java.lang.NoSuchMethodException from label05 to label06 with label27;
        catch java.lang.NoSuchMethodException from label07 to label08 with label27;
        catch java.lang.NoSuchMethodException from label09 to label10 with label27;
        catch java.lang.NoSuchMethodException from label11 to label12 with label27;
        catch java.lang.NoSuchMethodException from label13 to label14 with label27;
        catch java.lang.NoSuchMethodException from label15 to label16 with label27;
        catch java.lang.NoSuchMethodException from label17 to label18 with label27;
        catch java.lang.NoSuchMethodException from label19 to label20 with label27;
        catch java.lang.IllegalArgumentException from label05 to label06 with label26;
        catch java.lang.IllegalArgumentException from label07 to label08 with label26;
        catch java.lang.IllegalArgumentException from label09 to label10 with label26;
        catch java.lang.IllegalArgumentException from label11 to label12 with label26;
        catch java.lang.IllegalArgumentException from label13 to label14 with label26;
        catch java.lang.IllegalArgumentException from label15 to label16 with label26;
        catch java.lang.IllegalArgumentException from label17 to label18 with label26;
        catch java.lang.IllegalArgumentException from label19 to label20 with label26;
        catch java.lang.IllegalAccessException from label05 to label06 with label25;
        catch java.lang.IllegalAccessException from label07 to label08 with label25;
        catch java.lang.IllegalAccessException from label09 to label10 with label25;
        catch java.lang.IllegalAccessException from label11 to label12 with label25;
        catch java.lang.IllegalAccessException from label13 to label14 with label25;
        catch java.lang.IllegalAccessException from label15 to label16 with label25;
        catch java.lang.IllegalAccessException from label17 to label18 with label25;
        catch java.lang.IllegalAccessException from label19 to label20 with label25;
        catch java.lang.NoSuchFieldException from label05 to label06 with label24;
        catch java.lang.NoSuchFieldException from label07 to label08 with label24;
        catch java.lang.NoSuchFieldException from label09 to label10 with label24;
        catch java.lang.NoSuchFieldException from label11 to label12 with label24;
        catch java.lang.NoSuchFieldException from label13 to label14 with label24;
        catch java.lang.NoSuchFieldException from label15 to label16 with label24;
        catch java.lang.NoSuchFieldException from label17 to label18 with label24;
        catch java.lang.NoSuchFieldException from label19 to label20 with label24;
        catch java.io.IOException from label05 to label06 with label23;
        catch java.io.IOException from label07 to label08 with label23;
        catch java.io.IOException from label09 to label10 with label23;
        catch java.io.IOException from label11 to label12 with label23;
        catch java.io.IOException from label13 to label14 with label23;
        catch java.io.IOException from label15 to label16 with label23;
        catch java.io.IOException from label17 to label18 with label23;
        catch java.io.IOException from label19 to label20 with label23;
        catch java.lang.reflect.InvocationTargetException from label05 to label06 with label21;
        catch java.lang.reflect.InvocationTargetException from label07 to label08 with label21;
        catch java.lang.reflect.InvocationTargetException from label09 to label10 with label21;
        catch java.lang.reflect.InvocationTargetException from label11 to label12 with label21;
        catch java.lang.reflect.InvocationTargetException from label13 to label14 with label21;
        catch java.lang.reflect.InvocationTargetException from label15 to label16 with label21;
        catch java.lang.reflect.InvocationTargetException from label17 to label18 with label21;
        catch java.lang.reflect.InvocationTargetException from label19 to label20 with label21;
    }

    public static boolean a(java.lang.ClassLoader, java.lang.ClassLoader)
    {
        java.lang.Throwable $r7, $r8, $r9, $r10;
        java.lang.reflect.Field $r4;
        java.lang.Class $r3;
        java.lang.Object $r5;
        java.lang.ClassNotFoundException $r6;
        java.lang.ClassLoader $r0, $r1, $r2;

        $r0 := @parameter0: java.lang.ClassLoader;

        $r1 := @parameter1: java.lang.ClassLoader;

        $r2 = $r1;

     label01:
        if $r2 == null goto label03;

        if $r2 != $r0 goto label02;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("PushClassloader", "the classloader has been inserted");

        return 1;

     label02:
        $r2 = virtualinvoke $r2.<java.lang.ClassLoader: java.lang.ClassLoader getParent()>();

        goto label01;

     label03:
        $r3 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("java.lang.ClassLoader");

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("parent");

        virtualinvoke $r4.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        $r5 = virtualinvoke $r4.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>($r1);

        virtualinvoke $r4.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>($r0, $r5);

        virtualinvoke $r4.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>($r1, $r0);

     label04:
        return 1;

     label05:
        $r6 := @caughtexception;

     label06:
        return 0;

     label07:
        $r7 := @caughtexception;

        goto label06;

     label08:
        $r8 := @caughtexception;

        goto label06;

     label09:
        $r9 := @caughtexception;

        goto label06;

     label10:
        $r10 := @caughtexception;

        goto label06;

        catch java.lang.ClassNotFoundException from label03 to label04 with label05;
        catch java.lang.SecurityException from label03 to label04 with label10;
        catch java.lang.NoSuchFieldException from label03 to label04 with label09;
        catch java.lang.IllegalArgumentException from label03 to label04 with label08;
        catch java.lang.IllegalAccessException from label03 to label04 with label07;
    }

    public static void <clinit>()
    {
        <com.baidu.android.silentupdate.b: java.lang.String a> = "PushClassloader";

        return;
    }
}
