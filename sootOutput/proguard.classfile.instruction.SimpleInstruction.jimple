public class proguard.classfile.instruction.SimpleInstruction extends proguard.classfile.instruction.Instruction
{
    public int constant;

    public void <init>()
    {
        proguard.classfile.instruction.SimpleInstruction r0;

        r0 := @this: proguard.classfile.instruction.SimpleInstruction;

        specialinvoke r0.<proguard.classfile.instruction.Instruction: void <init>()>();

        return;
    }

    public void <init>(byte)
    {
        int $i1;
        proguard.classfile.instruction.SimpleInstruction r0;
        byte $b0;

        r0 := @this: proguard.classfile.instruction.SimpleInstruction;

        $b0 := @parameter0: byte;

        $i1 = staticinvoke <proguard.classfile.instruction.SimpleInstruction: int embeddedConstant(byte)>($b0);

        specialinvoke r0.<proguard.classfile.instruction.SimpleInstruction: void <init>(byte,int)>($b0, $i1);

        return;
    }

    public void <init>(byte, int)
    {
        int $i1;
        proguard.classfile.instruction.SimpleInstruction r0;
        byte $b0;

        r0 := @this: proguard.classfile.instruction.SimpleInstruction;

        $b0 := @parameter0: byte;

        $i1 := @parameter1: int;

        specialinvoke r0.<proguard.classfile.instruction.Instruction: void <init>()>();

        r0.<proguard.classfile.instruction.SimpleInstruction: byte opcode> = $b0;

        r0.<proguard.classfile.instruction.SimpleInstruction: int constant> = $i1;

        return;
    }

    private int constantSize()
    {
        int $i1;
        proguard.classfile.instruction.SimpleInstruction r0;
        byte $b0;

        r0 := @this: proguard.classfile.instruction.SimpleInstruction;

        $b0 = r0.<proguard.classfile.instruction.SimpleInstruction: byte opcode>;

        $i1 = (int) $b0;

        if $i1 == 16 goto label1;

        $b0 = r0.<proguard.classfile.instruction.SimpleInstruction: byte opcode>;

        $i1 = (int) $b0;

        if $i1 != -68 goto label2;

     label1:
        return 1;

     label2:
        $b0 = r0.<proguard.classfile.instruction.SimpleInstruction: byte opcode>;

        $i1 = (int) $b0;

        if $i1 != 17 goto label3;

        return 2;

     label3:
        return 0;
    }

    private static int embeddedConstant(byte)
    {
        int $i1;
        byte $b0;

        $b0 := @parameter0: byte;

        $i1 = (int) $b0;

        lookupswitch($i1)
        {
            case 2: goto label2;
            case 3: goto label1;
            case 4: goto label3;
            case 5: goto label4;
            case 6: goto label5;
            case 7: goto label6;
            case 8: goto label7;
            case 9: goto label1;
            case 10: goto label3;
            case 11: goto label1;
            case 12: goto label3;
            case 13: goto label4;
            case 14: goto label1;
            case 15: goto label3;
            default: goto label1;
        };

     label1:
        return 0;

     label2:
        return -1;

     label3:
        return 1;

     label4:
        return 2;

     label5:
        return 3;

     label6:
        return 4;

     label7:
        return 5;
    }

    private int requiredConstantSize()
    {
        int $i0, $i1;
        proguard.classfile.instruction.SimpleInstruction r0;

        r0 := @this: proguard.classfile.instruction.SimpleInstruction;

        $i0 = r0.<proguard.classfile.instruction.SimpleInstruction: int constant>;

        if $i0 < -1 goto label1;

        $i0 = r0.<proguard.classfile.instruction.SimpleInstruction: int constant>;

        if $i0 > 5 goto label1;

        return 0;

     label1:
        $i0 = r0.<proguard.classfile.instruction.SimpleInstruction: int constant>;

        $i0 = $i0 << 24;

        $i0 = $i0 >> 24;

        $i1 = r0.<proguard.classfile.instruction.SimpleInstruction: int constant>;

        if $i0 != $i1 goto label2;

        return 1;

     label2:
        $i0 = r0.<proguard.classfile.instruction.SimpleInstruction: int constant>;

        $i0 = $i0 << 16;

        $i0 = $i0 >> 16;

        $i1 = r0.<proguard.classfile.instruction.SimpleInstruction: int constant>;

        if $i0 != $i1 goto label3;

        return 2;

     label3:
        return 4;
    }

    public void accept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.visitor.InstructionVisitor)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.Method $r2;
        proguard.classfile.instruction.SimpleInstruction r0;
        proguard.classfile.instruction.visitor.InstructionVisitor $r4;

        r0 := @this: proguard.classfile.instruction.SimpleInstruction;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.visitor.InstructionVisitor;

        interfaceinvoke $r4.<proguard.classfile.instruction.visitor.InstructionVisitor: void visitSimpleInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.SimpleInstruction)>($r1, $r2, $r3, $i0, r0);

        return;
    }

    public byte canonicalOpcode()
    {
        int $i1;
        proguard.classfile.instruction.SimpleInstruction r0;
        byte $b0;

        r0 := @this: proguard.classfile.instruction.SimpleInstruction;

        $b0 = r0.<proguard.classfile.instruction.SimpleInstruction: byte opcode>;

        $i1 = (int) $b0;

        lookupswitch($i1)
        {
            case 2: goto label2;
            case 3: goto label2;
            case 4: goto label2;
            case 5: goto label2;
            case 6: goto label2;
            case 7: goto label2;
            case 8: goto label2;
            case 9: goto label3;
            case 10: goto label3;
            case 11: goto label4;
            case 12: goto label4;
            case 13: goto label4;
            case 14: goto label5;
            case 15: goto label5;
            case 16: goto label2;
            case 17: goto label2;
            default: goto label1;
        };

     label1:
        $b0 = r0.<proguard.classfile.instruction.SimpleInstruction: byte opcode>;

        return $b0;

     label2:
        return 3;

     label3:
        return 9;

     label4:
        return 11;

     label5:
        return 14;
    }

    public proguard.classfile.instruction.SimpleInstruction copy(proguard.classfile.instruction.SimpleInstruction)
    {
        byte $b0;
        int $i1;
        proguard.classfile.instruction.SimpleInstruction r0, $r1;

        r0 := @this: proguard.classfile.instruction.SimpleInstruction;

        $r1 := @parameter0: proguard.classfile.instruction.SimpleInstruction;

        $b0 = $r1.<proguard.classfile.instruction.SimpleInstruction: byte opcode>;

        r0.<proguard.classfile.instruction.SimpleInstruction: byte opcode> = $b0;

        $i1 = $r1.<proguard.classfile.instruction.SimpleInstruction: int constant>;

        r0.<proguard.classfile.instruction.SimpleInstruction: int constant> = $i1;

        return r0;
    }

    public int length(int)
    {
        int $i0;
        proguard.classfile.instruction.SimpleInstruction r0;

        r0 := @this: proguard.classfile.instruction.SimpleInstruction;

        $i0 := @parameter0: int;

        $i0 = specialinvoke r0.<proguard.classfile.instruction.SimpleInstruction: int constantSize()>();

        $i0 = $i0 + 1;

        return $i0;
    }

    protected void readInfo(byte[], int)
    {
        byte[] $r1;
        byte $b2;
        int $i0, $i1;
        proguard.classfile.instruction.SimpleInstruction r0;

        r0 := @this: proguard.classfile.instruction.SimpleInstruction;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 = specialinvoke r0.<proguard.classfile.instruction.SimpleInstruction: int constantSize()>();

        if $i1 != 0 goto label2;

        $b2 = r0.<proguard.classfile.instruction.SimpleInstruction: byte opcode>;

        $i0 = staticinvoke <proguard.classfile.instruction.SimpleInstruction: int embeddedConstant(byte)>($b2);

     label1:
        r0.<proguard.classfile.instruction.SimpleInstruction: int constant> = $i0;

        return;

     label2:
        $i0 = staticinvoke <proguard.classfile.instruction.SimpleInstruction: int readSignedValue(byte[],int,int)>($r1, $i0, $i1);

        goto label1;
    }

    public proguard.classfile.instruction.Instruction shrink()
    {
        int $i0;
        proguard.classfile.instruction.SimpleInstruction r0;
        byte $b1;

        r0 := @this: proguard.classfile.instruction.SimpleInstruction;

        $b1 = r0.<proguard.classfile.instruction.SimpleInstruction: byte opcode>;

        $i0 = (int) $b1;

        lookupswitch($i0)
        {
            case 2: goto label2;
            case 3: goto label2;
            case 4: goto label2;
            case 5: goto label2;
            case 6: goto label2;
            case 7: goto label2;
            case 8: goto label2;
            case 9: goto label7;
            case 10: goto label7;
            case 11: goto label8;
            case 12: goto label8;
            case 13: goto label8;
            case 14: goto label9;
            case 15: goto label9;
            case 16: goto label2;
            case 17: goto label2;
            default: goto label1;
        };

     label1:
        return r0;

     label2:
        $i0 = specialinvoke r0.<proguard.classfile.instruction.SimpleInstruction: int requiredConstantSize()>();

        lookupswitch($i0)
        {
            case 0: goto label4;
            case 1: goto label5;
            case 2: goto label6;
            default: goto label3;
        };

     label3:
        return r0;

     label4:
        $i0 = r0.<proguard.classfile.instruction.SimpleInstruction: int constant>;

        $i0 = $i0 + 3;

        $b1 = (byte) $i0;

        r0.<proguard.classfile.instruction.SimpleInstruction: byte opcode> = $b1;

        return r0;

     label5:
        r0.<proguard.classfile.instruction.SimpleInstruction: byte opcode> = 16;

        return r0;

     label6:
        r0.<proguard.classfile.instruction.SimpleInstruction: byte opcode> = 17;

        return r0;

     label7:
        $i0 = r0.<proguard.classfile.instruction.SimpleInstruction: int constant>;

        $i0 = $i0 + 9;

        $b1 = (byte) $i0;

        r0.<proguard.classfile.instruction.SimpleInstruction: byte opcode> = $b1;

        return r0;

     label8:
        $i0 = r0.<proguard.classfile.instruction.SimpleInstruction: int constant>;

        $i0 = $i0 + 11;

        $b1 = (byte) $i0;

        r0.<proguard.classfile.instruction.SimpleInstruction: byte opcode> = $b1;

        return r0;

     label9:
        $i0 = r0.<proguard.classfile.instruction.SimpleInstruction: int constant>;

        $i0 = $i0 + 14;

        $b1 = (byte) $i0;

        r0.<proguard.classfile.instruction.SimpleInstruction: byte opcode> = $b1;

        return r0;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuffer $r1, $r3;
        int $i0;
        proguard.classfile.instruction.SimpleInstruction r0;
        java.lang.String $r2;

        r0 := @this: proguard.classfile.instruction.SimpleInstruction;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke r0.<proguard.classfile.instruction.SimpleInstruction: java.lang.String getName()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $i0 = specialinvoke r0.<proguard.classfile.instruction.SimpleInstruction: int constantSize()>();

        if $i0 <= 0 goto label2;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $i0 = r0.<proguard.classfile.instruction.SimpleInstruction: int constant>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r2 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

     label1:
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;

     label2:
        $r2 = "";

        goto label1;
    }

    protected void writeInfo(byte[], int)
    {
        byte[] $r1;
        proguard.classfile.instruction.SimpleInstruction r0;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuffer $r3;
        int $i0, $i1, $i2;
        java.lang.String $r4;

        r0 := @this: proguard.classfile.instruction.SimpleInstruction;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 = specialinvoke r0.<proguard.classfile.instruction.SimpleInstruction: int constantSize()>();

        $i2 = specialinvoke r0.<proguard.classfile.instruction.SimpleInstruction: int requiredConstantSize()>();

        if $i2 <= $i1 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Instruction has invalid constant size (");

        $r4 = virtualinvoke r0.<proguard.classfile.instruction.SimpleInstruction: java.lang.String toString(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label1:
        $i2 = r0.<proguard.classfile.instruction.SimpleInstruction: int constant>;

        staticinvoke <proguard.classfile.instruction.SimpleInstruction: void writeSignedValue(byte[],int,int,int)>($r1, $i0, $i2, $i1);

        return;
    }
}
