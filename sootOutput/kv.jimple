public final class kv extends ku
{
    protected java.lang.String a;
    protected int b;
    protected java.lang.String c;
    protected int d;

    public void <init>(java.lang.String, java.lang.String)
    {
        kv r0;
        java.lang.String $r1, $r2;

        r0 := @this: kv;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        specialinvoke r0.<ku: void <init>()>();

        if $r1 != null goto label1;

        $r1 = "";

     label1:
        r0.<kv: java.lang.String a> = $r1;

        r0.<kv: int b> = 0;

        r0.<kv: java.lang.String c> = "ISO-8859-1";

        r0.<kv: int d> = -1;

        return;
    }

    public final char a(int)
    {
        int $i0, $i2;
        char $c1;
        java.io.IOException $r2;
        kv r0;
        java.lang.String $r1;

        r0 := @this: kv;

        $i0 := @parameter0: int;

        $r1 = r0.<kv: java.lang.String a>;

        if $r1 != null goto label1;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("source is closed");

        throw $r2;

     label1:
        $i2 = r0.<kv: int b>;

        if $i0 < $i2 goto label2;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("read beyond current offset");

        throw $r2;

     label2:
        $r1 = r0.<kv: java.lang.String a>;

        $c1 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i0);

        return $c1;
    }

    public final java.lang.String a()
    {
        kv r0;
        java.lang.String r1;

        r0 := @this: kv;

        r1 = r0.<kv: java.lang.String c>;

        return r1;
    }

    public final java.lang.String a(int, int)
    {
        int $i0, $i1, $i2, $i3;
        java.io.IOException $r2;
        kv r0;
        java.lang.String $r1;

        r0 := @this: kv;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = r0.<kv: java.lang.String a>;

        if $r1 != null goto label1;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("source is closed");

        throw $r2;

     label1:
        $i2 = $i0 + $i1;

        $i3 = r0.<kv: int b>;

        if $i2 <= $i3 goto label2;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("read beyond end of string");

        throw $r2;

     label2:
        $r1 = r0.<kv: java.lang.String a>;

        $i1 = $i0 + $i1;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>($i0, $i1);

        return $r1;
    }

    public final void a(java.lang.String)
    {
        kv r0;
        java.lang.String $r1;

        r0 := @this: kv;

        $r1 := @parameter0: java.lang.String;

        r0.<kv: java.lang.String c> = $r1;

        return;
    }

    public final void a(java.lang.StringBuffer, int, int)
    {
        java.io.IOException $r3;
        kv r0;
        java.lang.StringBuffer $r1;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r2;

        r0 := @this: kv;

        $r1 := @parameter0: java.lang.StringBuffer;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = r0.<kv: java.lang.String a>;

        if $r2 != null goto label1;

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("source is closed");

        throw $r3;

     label1:
        $i2 = $i0 + $i1;

        $i3 = r0.<kv: int b>;

        if $i2 <= $i3 goto label2;

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("read beyond end of string");

        throw $r3;

     label2:
        $r2 = r0.<kv: java.lang.String a>;

        $i1 = $i0 + $i1;

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>($i0, $i1);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        return;
    }

    public final void b()
    {
        int $i0;
        java.io.IOException $r2;
        kv r0;
        java.lang.String $r1;

        r0 := @this: kv;

        $r1 = r0.<kv: java.lang.String a>;

        if $r1 != null goto label1;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("source is closed");

        throw $r2;

     label1:
        $i0 = r0.<kv: int b>;

        if $i0 > 0 goto label2;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("can\'t unread no characters");

        throw $r2;

     label2:
        $i0 = r0.<kv: int b>;

        $i0 = $i0 - 1;

        r0.<kv: int b> = $i0;

        return;
    }

    public final void c()
    {
        kv r0;

        r0 := @this: kv;

        r0.<kv: java.lang.String a> = null;

        return;
    }

    public final void close()
    {
        kv r0;

        r0 := @this: kv;

        return;
    }

    public final int d()
    {
        int i0;
        kv r0;
        java.lang.String $r1;

        r0 := @this: kv;

        $r1 = r0.<kv: java.lang.String a>;

        if $r1 != null goto label1;

        return -1;

     label1:
        i0 = r0.<kv: int b>;

        return i0;
    }

    public final void mark(int)
    {
        int $i0;
        java.io.IOException $r2;
        kv r0;
        java.lang.String $r1;

        r0 := @this: kv;

        $i0 := @parameter0: int;

        $r1 = r0.<kv: java.lang.String a>;

        if $r1 != null goto label1;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("source is closed");

        throw $r2;

     label1:
        $i0 = r0.<kv: int b>;

        r0.<kv: int d> = $i0;

        return;
    }

    public final boolean markSupported()
    {
        kv r0;

        r0 := @this: kv;

        return 1;
    }

    public final int read()
    {
        int $i0, $i1;
        char $c2;
        java.io.IOException $r2;
        kv r0;
        java.lang.String $r1;

        r0 := @this: kv;

        $r1 = r0.<kv: java.lang.String a>;

        if $r1 != null goto label1;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("source is closed");

        throw $r2;

     label1:
        $i0 = r0.<kv: int b>;

        $r1 = r0.<kv: java.lang.String a>;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 < $i1 goto label2;

        return -1;

     label2:
        $r1 = r0.<kv: java.lang.String a>;

        $i0 = r0.<kv: int b>;

        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i0);

        $i0 = r0.<kv: int b>;

        $i0 = $i0 + 1;

        r0.<kv: int b> = $i0;

        $i0 = (int) $c2;

        return $i0;
    }

    public final int read(char[])
    {
        int $i0;
        char[] $r1;
        kv r0;

        r0 := @this: kv;

        $r1 := @parameter0: char[];

        $i0 = lengthof $r1;

        $i0 = virtualinvoke r0.<kv: int read(char[],int,int)>($r1, 0, $i0);

        return $i0;
    }

    public final int read(char[], int, int)
    {
        java.io.IOException $r3;
        kv r0;
        int $i0, $i1, $i2, $i3;
        char[] $r1;
        java.lang.String $r2;

        r0 := @this: kv;

        $r1 := @parameter0: char[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = r0.<kv: java.lang.String a>;

        if $r2 != null goto label1;

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("source is closed");

        throw $r3;

     label1:
        $r2 = r0.<kv: java.lang.String a>;

        $i2 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i3 = r0.<kv: int b>;

        if $i3 < $i2 goto label2;

        $i0 = -1;

        return $i0;

     label2:
        $i3 = r0.<kv: int b>;

        $i3 = $i2 - $i3;

        if $i1 <= $i3 goto label4;

        $i1 = r0.<kv: int b>;

        $i1 = $i2 - $i1;

     label3:
        $r2 = r0.<kv: java.lang.String a>;

        $i2 = r0.<kv: int b>;

        $i3 = r0.<kv: int b>;

        $i3 = $i3 + $i1;

        virtualinvoke $r2.<java.lang.String: void getChars(int,int,char[],int)>($i2, $i3, $r1, $i0);

        $i0 = r0.<kv: int b>;

        $i0 = $i0 + $i1;

        r0.<kv: int b> = $i0;

        return $i1;

     label4:
        goto label3;
    }

    public final boolean ready()
    {
        int $i0, $i1;
        java.io.IOException $r2;
        kv r0;
        java.lang.String $r1;

        r0 := @this: kv;

        $r1 = r0.<kv: java.lang.String a>;

        if $r1 != null goto label1;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("source is closed");

        throw $r2;

     label1:
        $i1 = r0.<kv: int b>;

        $r1 = r0.<kv: java.lang.String a>;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i1 >= $i0 goto label2;

        return 1;

     label2:
        return 0;
    }

    public final void reset()
    {
        java.lang.IllegalStateException $r2;
        int $i0, $i1;
        kv r0;
        java.lang.String $r1;

        r0 := @this: kv;

        $r1 = r0.<kv: java.lang.String a>;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("source is closed");

        throw $r2;

     label1:
        $i0 = r0.<kv: int d>;

        $i1 = -1;

        if $i1 == $i0 goto label2;

        $i0 = r0.<kv: int d>;

        r0.<kv: int b> = $i0;

        return;

     label2:
        r0.<kv: int b> = 0;

        return;
    }

    public final long skip(long)
    {
        long $l0, $l4;
        java.io.IOException $r2;
        kv r0;
        java.lang.IllegalArgumentException $r3;
        byte $b2;
        int $i1, $i3;
        java.lang.String $r1;

        r0 := @this: kv;

        $l0 := @parameter0: long;

        $r1 = r0.<kv: java.lang.String a>;

        if $r1 != null goto label1;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("source is closed");

        throw $r2;

     label1:
        $b2 = 0L cmp $l0;

        $i1 = (int) $b2;

        if $i1 <= 0 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("cannot skip backwards");

        throw $r3;

     label2:
        $r1 = r0.<kv: java.lang.String a>;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i3 = r0.<kv: int b>;

        if $i3 < $i1 goto label4;

        $l0 = 0L;

     label3:
        $i1 = r0.<kv: int b>;

        $l4 = (long) $i1;

        $l4 = $l4 + $l0;

        $i1 = (int) $l4;

        r0.<kv: int b> = $i1;

        return $l0;

     label4:
        $i3 = r0.<kv: int b>;

        $i3 = $i1 - $i3;

        $l4 = (long) $i3;

        $b2 = $l0 cmp $l4;

        $i3 = (int) $b2;

        if $i3 <= 0 goto label5;

        $i3 = r0.<kv: int b>;

        $i1 = $i1 - $i3;

        $l0 = (long) $i1;

        goto label3;

     label5:
        goto label3;
    }
}
