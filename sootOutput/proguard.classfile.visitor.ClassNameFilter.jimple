public class proguard.classfile.visitor.ClassNameFilter extends java.lang.Object implements proguard.classfile.visitor.ClassVisitor
{
    private final proguard.classfile.visitor.ClassVisitor classVisitor;
    private final proguard.util.StringMatcher regularExpressionMatcher;

    public void <init>(java.lang.String, proguard.classfile.visitor.ClassVisitor)
    {
        proguard.util.ListParser $r5;
        proguard.classfile.visitor.ClassVisitor $r2;
        proguard.util.ClassNameParser $r3;
        java.lang.String $r1;
        proguard.util.StringMatcher $r4;
        proguard.classfile.visitor.ClassNameFilter r0;

        r0 := @this: proguard.classfile.visitor.ClassNameFilter;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: proguard.classfile.visitor.ClassVisitor;

        $r5 = new proguard.util.ListParser;

        $r3 = new proguard.util.ClassNameParser;

        specialinvoke $r3.<proguard.util.ClassNameParser: void <init>()>();

        specialinvoke $r5.<proguard.util.ListParser: void <init>(proguard.util.StringParser)>($r3);

        $r4 = virtualinvoke $r5.<proguard.util.ListParser: proguard.util.StringMatcher parse(java.lang.String)>($r1);

        specialinvoke r0.<proguard.classfile.visitor.ClassNameFilter: void <init>(proguard.util.StringMatcher,proguard.classfile.visitor.ClassVisitor)>($r4, $r2);

        return;
    }

    public void <init>(java.util.List, proguard.classfile.visitor.ClassVisitor)
    {
        java.util.List $r1;
        proguard.util.ListParser $r5;
        proguard.classfile.visitor.ClassVisitor $r2;
        proguard.util.ClassNameParser $r3;
        proguard.util.StringMatcher $r4;
        proguard.classfile.visitor.ClassNameFilter r0;

        r0 := @this: proguard.classfile.visitor.ClassNameFilter;

        $r1 := @parameter0: java.util.List;

        $r2 := @parameter1: proguard.classfile.visitor.ClassVisitor;

        $r5 = new proguard.util.ListParser;

        $r3 = new proguard.util.ClassNameParser;

        specialinvoke $r3.<proguard.util.ClassNameParser: void <init>()>();

        specialinvoke $r5.<proguard.util.ListParser: void <init>(proguard.util.StringParser)>($r3);

        $r4 = virtualinvoke $r5.<proguard.util.ListParser: proguard.util.StringMatcher parse(java.util.List)>($r1);

        specialinvoke r0.<proguard.classfile.visitor.ClassNameFilter: void <init>(proguard.util.StringMatcher,proguard.classfile.visitor.ClassVisitor)>($r4, $r2);

        return;
    }

    public void <init>(proguard.util.StringMatcher, proguard.classfile.visitor.ClassVisitor)
    {
        proguard.util.StringMatcher $r1;
        proguard.classfile.visitor.ClassVisitor $r2;
        proguard.classfile.visitor.ClassNameFilter r0;

        r0 := @this: proguard.classfile.visitor.ClassNameFilter;

        $r1 := @parameter0: proguard.util.StringMatcher;

        $r2 := @parameter1: proguard.classfile.visitor.ClassVisitor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<proguard.classfile.visitor.ClassNameFilter: proguard.util.StringMatcher regularExpressionMatcher> = $r1;

        r0.<proguard.classfile.visitor.ClassNameFilter: proguard.classfile.visitor.ClassVisitor classVisitor> = $r2;

        return;
    }

    private boolean accepted(java.lang.String)
    {
        java.lang.String $r1;
        proguard.util.StringMatcher $r2;
        proguard.classfile.visitor.ClassNameFilter r0;
        boolean $z0;

        r0 := @this: proguard.classfile.visitor.ClassNameFilter;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<proguard.classfile.visitor.ClassNameFilter: proguard.util.StringMatcher regularExpressionMatcher>;

        $z0 = interfaceinvoke $r2.<proguard.util.StringMatcher: boolean matches(java.lang.String)>($r1);

        return $z0;
    }

    public void visitLibraryClass(proguard.classfile.LibraryClass)
    {
        proguard.classfile.LibraryClass $r1;
        proguard.classfile.visitor.ClassVisitor $r3;
        java.lang.String $r2;
        proguard.classfile.visitor.ClassNameFilter r0;
        boolean $z0;

        r0 := @this: proguard.classfile.visitor.ClassNameFilter;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        $r2 = virtualinvoke $r1.<proguard.classfile.LibraryClass: java.lang.String getName()>();

        $z0 = specialinvoke r0.<proguard.classfile.visitor.ClassNameFilter: boolean accepted(java.lang.String)>($r2);

        if $z0 == 0 goto label1;

        $r3 = r0.<proguard.classfile.visitor.ClassNameFilter: proguard.classfile.visitor.ClassVisitor classVisitor>;

        interfaceinvoke $r3.<proguard.classfile.visitor.ClassVisitor: void visitLibraryClass(proguard.classfile.LibraryClass)>($r1);

     label1:
        return;
    }

    public void visitProgramClass(proguard.classfile.ProgramClass)
    {
        proguard.classfile.visitor.ClassVisitor $r3;
        java.lang.String $r2;
        proguard.classfile.ProgramClass $r1;
        proguard.classfile.visitor.ClassNameFilter r0;
        boolean $z0;

        r0 := @this: proguard.classfile.visitor.ClassNameFilter;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 = virtualinvoke $r1.<proguard.classfile.ProgramClass: java.lang.String getName()>();

        $z0 = specialinvoke r0.<proguard.classfile.visitor.ClassNameFilter: boolean accepted(java.lang.String)>($r2);

        if $z0 == 0 goto label1;

        $r3 = r0.<proguard.classfile.visitor.ClassNameFilter: proguard.classfile.visitor.ClassVisitor classVisitor>;

        interfaceinvoke $r3.<proguard.classfile.visitor.ClassVisitor: void visitProgramClass(proguard.classfile.ProgramClass)>($r1);

     label1:
        return;
    }
}
