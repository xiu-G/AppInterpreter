public class com.umeng.update.UpdateResponse extends com.umeng.common.net.l
{
    public boolean hasUpdate;
    public java.lang.String path;
    public java.lang.String updateLog;
    public java.lang.String version;

    public void <init>(org.json.JSONObject)
    {
        com.umeng.update.UpdateResponse r0;
        org.json.JSONObject $r1;
        java.lang.String $r2;
        java.lang.Exception $r3;
        boolean $z0;

        r0 := @this: com.umeng.update.UpdateResponse;

        $r1 := @parameter0: org.json.JSONObject;

        specialinvoke r0.<com.umeng.common.net.l: void <init>(org.json.JSONObject)>($r1);

        r0.<com.umeng.update.UpdateResponse: boolean hasUpdate> = 0;

        r0.<com.umeng.update.UpdateResponse: java.lang.String updateLog> = null;

        r0.<com.umeng.update.UpdateResponse: java.lang.String version> = null;

     label1:
        $z0 = virtualinvoke $r1.<org.json.JSONObject: boolean has(java.lang.String)>("update");

     label2:
        if $z0 == 0 goto label8;

     label3:
        $r2 = virtualinvoke $r1.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("update");

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("no");

     label4:
        if $z0 == 0 goto label5;

        return;

     label5:
        $r2 = virtualinvoke $r1.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("update_log");

        r0.<com.umeng.update.UpdateResponse: java.lang.String updateLog> = $r2;

        $r2 = virtualinvoke $r1.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("version");

        r0.<com.umeng.update.UpdateResponse: java.lang.String version> = $r2;

        $r2 = virtualinvoke $r1.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("path");

        r0.<com.umeng.update.UpdateResponse: java.lang.String path> = $r2;

        r0.<com.umeng.update.UpdateResponse: boolean hasUpdate> = 1;

     label6:
        return;

     label7:
        $r3 := @caughtexception;

     label8:
        return;

        catch java.lang.Exception from label1 to label2 with label7;
        catch java.lang.Exception from label3 to label4 with label7;
        catch java.lang.Exception from label5 to label6 with label7;
    }
}
