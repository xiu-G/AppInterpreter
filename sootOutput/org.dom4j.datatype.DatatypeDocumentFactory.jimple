public class org.dom4j.datatype.DatatypeDocumentFactory extends org.dom4j.DocumentFactory
{
    private static final boolean DO_INTERN_QNAME;
    private static final org.dom4j.Namespace XSI_NAMESPACE;
    private static final org.dom4j.QName XSI_NO_SCHEMA_LOCATION;
    private static final org.dom4j.QName XSI_SCHEMA_LOCATION;
    protected static transient org.dom4j.datatype.DatatypeDocumentFactory singleton;
    private boolean autoLoadSchema;
    private org.dom4j.datatype.SchemaParser schemaBuilder;
    private org.dom4j.io.SAXReader xmlSchemaReader;

    static void <clinit>()
    {
        org.dom4j.datatype.DatatypeDocumentFactory $r0;
        org.dom4j.QName $r2;
        org.dom4j.Namespace $r1;

        $r0 = new org.dom4j.datatype.DatatypeDocumentFactory;

        specialinvoke $r0.<org.dom4j.datatype.DatatypeDocumentFactory: void <init>()>();

        <org.dom4j.datatype.DatatypeDocumentFactory: org.dom4j.datatype.DatatypeDocumentFactory singleton> = $r0;

        $r1 = staticinvoke <org.dom4j.Namespace: org.dom4j.Namespace get(java.lang.String,java.lang.String)>("xsi", "http://www.w3.org/2001/XMLSchema-instance");

        <org.dom4j.datatype.DatatypeDocumentFactory: org.dom4j.Namespace XSI_NAMESPACE> = $r1;

        $r1 = <org.dom4j.datatype.DatatypeDocumentFactory: org.dom4j.Namespace XSI_NAMESPACE>;

        $r2 = staticinvoke <org.dom4j.QName: org.dom4j.QName get(java.lang.String,org.dom4j.Namespace)>("schemaLocation", $r1);

        <org.dom4j.datatype.DatatypeDocumentFactory: org.dom4j.QName XSI_SCHEMA_LOCATION> = $r2;

        $r1 = <org.dom4j.datatype.DatatypeDocumentFactory: org.dom4j.Namespace XSI_NAMESPACE>;

        $r2 = staticinvoke <org.dom4j.QName: org.dom4j.QName get(java.lang.String,org.dom4j.Namespace)>("noNamespaceSchemaLocation", $r1);

        <org.dom4j.datatype.DatatypeDocumentFactory: org.dom4j.QName XSI_NO_SCHEMA_LOCATION> = $r2;

        return;
    }

    public void <init>()
    {
        org.dom4j.datatype.DatatypeDocumentFactory r0;
        org.dom4j.io.SAXReader $r1;
        org.dom4j.datatype.SchemaParser $r2;

        r0 := @this: org.dom4j.datatype.DatatypeDocumentFactory;

        specialinvoke r0.<org.dom4j.DocumentFactory: void <init>()>();

        $r1 = new org.dom4j.io.SAXReader;

        specialinvoke $r1.<org.dom4j.io.SAXReader: void <init>()>();

        r0.<org.dom4j.datatype.DatatypeDocumentFactory: org.dom4j.io.SAXReader xmlSchemaReader> = $r1;

        r0.<org.dom4j.datatype.DatatypeDocumentFactory: boolean autoLoadSchema> = 1;

        $r2 = new org.dom4j.datatype.SchemaParser;

        specialinvoke $r2.<org.dom4j.datatype.SchemaParser: void <init>(org.dom4j.datatype.DatatypeDocumentFactory)>(r0);

        r0.<org.dom4j.datatype.DatatypeDocumentFactory: org.dom4j.datatype.SchemaParser schemaBuilder> = $r2;

        return;
    }

    public static org.dom4j.DocumentFactory getInstance()
    {
        org.dom4j.datatype.DatatypeDocumentFactory r0;

        r0 = <org.dom4j.datatype.DatatypeDocumentFactory: org.dom4j.datatype.DatatypeDocumentFactory singleton>;

        return r0;
    }

    public org.dom4j.Attribute createAttribute(org.dom4j.Element, org.dom4j.QName, java.lang.String)
    {
        org.dom4j.Document r4;
        org.dom4j.Namespace $r8;
        org.dom4j.datatype.DatatypeDocumentFactory r0;
        int $i0;
        org.dom4j.Element $r1;
        org.dom4j.QName $r2, $r5;
        java.lang.String $r3, $r7;
        org.dom4j.Attribute $r6;
        boolean $z0;

        r0 := @this: org.dom4j.datatype.DatatypeDocumentFactory;

        $r1 := @parameter0: org.dom4j.Element;

        $r2 := @parameter1: org.dom4j.QName;

        $r3 := @parameter2: java.lang.String;

        r4 = null;

        $z0 = r0.<org.dom4j.datatype.DatatypeDocumentFactory: boolean autoLoadSchema>;

        if $z0 == 0 goto label3;

        $r5 = <org.dom4j.datatype.DatatypeDocumentFactory: org.dom4j.QName XSI_NO_SCHEMA_LOCATION>;

        $z0 = virtualinvoke $r2.<org.dom4j.QName: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label3;

        if $r1 == null goto label1;

        r4 = interfaceinvoke $r1.<org.dom4j.Element: org.dom4j.Document getDocument()>();

     label1:
        virtualinvoke r0.<org.dom4j.datatype.DatatypeDocumentFactory: void loadSchema(org.dom4j.Document,java.lang.String)>(r4, $r3);

     label2:
        $r6 = specialinvoke r0.<org.dom4j.DocumentFactory: org.dom4j.Attribute createAttribute(org.dom4j.Element,org.dom4j.QName,java.lang.String)>($r1, $r2, $r3);

        return $r6;

     label3:
        $z0 = r0.<org.dom4j.datatype.DatatypeDocumentFactory: boolean autoLoadSchema>;

        if $z0 == 0 goto label2;

        $r5 = <org.dom4j.datatype.DatatypeDocumentFactory: org.dom4j.QName XSI_SCHEMA_LOCATION>;

        $z0 = virtualinvoke $r2.<org.dom4j.QName: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label2;

        if $r1 == null goto label4;

        r4 = interfaceinvoke $r1.<org.dom4j.Element: org.dom4j.Document getDocument()>();

     label4:
        $i0 = virtualinvoke $r3.<java.lang.String: int indexOf(int)>(32);

        $r7 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r8 = interfaceinvoke $r1.<org.dom4j.Element: org.dom4j.Namespace getNamespaceForURI(java.lang.String)>($r7);

        $i0 = virtualinvoke $r3.<java.lang.String: int indexOf(int)>(32);

        $i0 = $i0 + 1;

        $r7 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int)>($i0);

        virtualinvoke r0.<org.dom4j.datatype.DatatypeDocumentFactory: void loadSchema(org.dom4j.Document,java.lang.String,org.dom4j.Namespace)>(r4, $r7, $r8);

        goto label2;
    }

    public org.dom4j.datatype.DatatypeElementFactory getElementFactory(org.dom4j.QName)
    {
        org.dom4j.datatype.DatatypeDocumentFactory r0;
        org.dom4j.datatype.DatatypeElementFactory r3;
        org.dom4j.QName $r1;
        boolean $z0;
        org.dom4j.DocumentFactory $r2;

        r0 := @this: org.dom4j.datatype.DatatypeDocumentFactory;

        $r1 := @parameter0: org.dom4j.QName;

        $r2 = virtualinvoke $r1.<org.dom4j.QName: org.dom4j.DocumentFactory getDocumentFactory()>();

        $z0 = $r2 instanceof org.dom4j.datatype.DatatypeElementFactory;

        if $z0 == 0 goto label1;

        r3 = (org.dom4j.datatype.DatatypeElementFactory) $r2;

        return r3;

     label1:
        return null;
    }

    public void loadSchema(org.dom4j.Document)
    {
        org.dom4j.datatype.DatatypeDocumentFactory r0;
        org.dom4j.Document $r1;
        org.dom4j.datatype.SchemaParser $r2;

        r0 := @this: org.dom4j.datatype.DatatypeDocumentFactory;

        $r1 := @parameter0: org.dom4j.Document;

        $r2 = r0.<org.dom4j.datatype.DatatypeDocumentFactory: org.dom4j.datatype.SchemaParser schemaBuilder>;

        virtualinvoke $r2.<org.dom4j.datatype.SchemaParser: void build(org.dom4j.Document)>($r1);

        return;
    }

    protected void loadSchema(org.dom4j.Document, java.lang.String)
    {
        java.io.PrintStream $r8;
        org.xml.sax.InputSource $r9;
        org.dom4j.Document $r1;
        org.dom4j.io.SAXReader $r10;
        java.lang.Exception r3;
        org.dom4j.datatype.DatatypeDocumentFactory r0;
        java.lang.StringBuffer $r6;
        java.lang.String $r2, $r7;
        org.dom4j.datatype.InvalidSchemaException $r5;
        org.xml.sax.EntityResolver $r4;

        r0 := @this: org.dom4j.datatype.DatatypeDocumentFactory;

        $r1 := @parameter0: org.dom4j.Document;

        $r2 := @parameter1: java.lang.String;

     label1:
        $r4 = interfaceinvoke $r1.<org.dom4j.Document: org.xml.sax.EntityResolver getEntityResolver()>();

     label2:
        if $r4 != null goto label5;

        $r5 = new org.dom4j.datatype.InvalidSchemaException;

        $r6 = new java.lang.StringBuffer;

     label3:
        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No EntityResolver available for resolving URI: ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r5.<org.dom4j.datatype.InvalidSchemaException: void <init>(java.lang.String)>($r7);

        throw $r5;

     label4:
        r3 := @caughtexception;

        $r8 = <java.lang.System: java.io.PrintStream out>;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Failed to load schema: ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r7);

        $r8 = <java.lang.System: java.io.PrintStream out>;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Caught: ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r7);

        virtualinvoke r3.<java.lang.Exception: void printStackTrace()>();

        $r5 = new org.dom4j.datatype.InvalidSchemaException;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Failed to load schema: ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r5.<org.dom4j.datatype.InvalidSchemaException: void <init>(java.lang.String)>($r2);

        throw $r5;

     label5:
        $r9 = interfaceinvoke $r4.<org.xml.sax.EntityResolver: org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String)>(null, $r2);

     label6:
        if $r4 != null goto label8;

        $r5 = new org.dom4j.datatype.InvalidSchemaException;

        $r6 = new java.lang.StringBuffer;

     label7:
        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not resolve the URI: ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r5.<org.dom4j.datatype.InvalidSchemaException: void <init>(java.lang.String)>($r7);

        throw $r5;

     label8:
        $r10 = r0.<org.dom4j.datatype.DatatypeDocumentFactory: org.dom4j.io.SAXReader xmlSchemaReader>;

        $r1 = virtualinvoke $r10.<org.dom4j.io.SAXReader: org.dom4j.Document read(org.xml.sax.InputSource)>($r9);

        virtualinvoke r0.<org.dom4j.datatype.DatatypeDocumentFactory: void loadSchema(org.dom4j.Document)>($r1);

     label9:
        return;

        catch java.lang.Exception from label1 to label2 with label4;
        catch java.lang.Exception from label3 to label4 with label4;
        catch java.lang.Exception from label5 to label6 with label4;
        catch java.lang.Exception from label7 to label9 with label4;
    }

    protected void loadSchema(org.dom4j.Document, java.lang.String, org.dom4j.Namespace)
    {
        java.io.PrintStream $r9;
        org.xml.sax.InputSource $r10;
        org.dom4j.Document $r1;
        org.dom4j.Namespace $r3;
        org.dom4j.io.SAXReader $r11;
        java.lang.Exception r4;
        org.dom4j.datatype.DatatypeDocumentFactory r0;
        java.lang.StringBuffer $r7;
        java.lang.String $r2, $r8;
        org.dom4j.datatype.InvalidSchemaException $r6;
        org.xml.sax.EntityResolver $r5;

        r0 := @this: org.dom4j.datatype.DatatypeDocumentFactory;

        $r1 := @parameter0: org.dom4j.Document;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: org.dom4j.Namespace;

     label1:
        $r5 = interfaceinvoke $r1.<org.dom4j.Document: org.xml.sax.EntityResolver getEntityResolver()>();

     label2:
        if $r5 != null goto label5;

        $r6 = new org.dom4j.datatype.InvalidSchemaException;

        $r7 = new java.lang.StringBuffer;

     label3:
        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No EntityResolver available for resolving URI: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r6.<org.dom4j.datatype.InvalidSchemaException: void <init>(java.lang.String)>($r8);

        throw $r6;

     label4:
        r4 := @caughtexception;

        $r9 = <java.lang.System: java.io.PrintStream out>;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Failed to load schema: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r8);

        $r9 = <java.lang.System: java.io.PrintStream out>;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Caught: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r4);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r8);

        virtualinvoke r4.<java.lang.Exception: void printStackTrace()>();

        $r6 = new org.dom4j.datatype.InvalidSchemaException;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Failed to load schema: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r6.<org.dom4j.datatype.InvalidSchemaException: void <init>(java.lang.String)>($r2);

        throw $r6;

     label5:
        $r10 = interfaceinvoke $r5.<org.xml.sax.EntityResolver: org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String)>(null, $r2);

     label6:
        if $r5 != null goto label8;

        $r6 = new org.dom4j.datatype.InvalidSchemaException;

        $r7 = new java.lang.StringBuffer;

     label7:
        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not resolve the URI: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r6.<org.dom4j.datatype.InvalidSchemaException: void <init>(java.lang.String)>($r8);

        throw $r6;

     label8:
        $r11 = r0.<org.dom4j.datatype.DatatypeDocumentFactory: org.dom4j.io.SAXReader xmlSchemaReader>;

        $r1 = virtualinvoke $r11.<org.dom4j.io.SAXReader: org.dom4j.Document read(org.xml.sax.InputSource)>($r10);

        virtualinvoke r0.<org.dom4j.datatype.DatatypeDocumentFactory: void loadSchema(org.dom4j.Document,org.dom4j.Namespace)>($r1, $r3);

     label9:
        return;

        catch java.lang.Exception from label1 to label2 with label4;
        catch java.lang.Exception from label3 to label4 with label4;
        catch java.lang.Exception from label5 to label6 with label4;
        catch java.lang.Exception from label7 to label9 with label4;
    }

    public void loadSchema(org.dom4j.Document, org.dom4j.Namespace)
    {
        org.dom4j.datatype.DatatypeDocumentFactory r0;
        org.dom4j.Document $r1;
        org.dom4j.Namespace $r2;
        org.dom4j.datatype.SchemaParser $r3;

        r0 := @this: org.dom4j.datatype.DatatypeDocumentFactory;

        $r1 := @parameter0: org.dom4j.Document;

        $r2 := @parameter1: org.dom4j.Namespace;

        $r3 = r0.<org.dom4j.datatype.DatatypeDocumentFactory: org.dom4j.datatype.SchemaParser schemaBuilder>;

        virtualinvoke $r3.<org.dom4j.datatype.SchemaParser: void build(org.dom4j.Document,org.dom4j.Namespace)>($r1, $r2);

        return;
    }
}
