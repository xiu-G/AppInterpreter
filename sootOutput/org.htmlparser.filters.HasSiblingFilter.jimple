public class org.htmlparser.filters.HasSiblingFilter extends java.lang.Object implements org.htmlparser.NodeFilter
{
    protected org.htmlparser.NodeFilter a;

    public void <init>()
    {
        org.htmlparser.filters.HasSiblingFilter r0;

        r0 := @this: org.htmlparser.filters.HasSiblingFilter;

        specialinvoke r0.<org.htmlparser.filters.HasSiblingFilter: void <init>(org.htmlparser.NodeFilter)>(null);

        return;
    }

    public void <init>(org.htmlparser.NodeFilter)
    {
        org.htmlparser.filters.HasSiblingFilter r0;
        org.htmlparser.NodeFilter $r1;

        r0 := @this: org.htmlparser.filters.HasSiblingFilter;

        $r1 := @parameter0: org.htmlparser.NodeFilter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        virtualinvoke r0.<org.htmlparser.filters.HasSiblingFilter: void setSiblingFilter(org.htmlparser.NodeFilter)>($r1);

        return;
    }

    public boolean accept(org.htmlparser.Node)
    {
        org.htmlparser.Node[] $r5;
        org.htmlparser.Node $r1;
        org.htmlparser.NodeFilter $r4;
        org.htmlparser.Tag $r2;
        org.htmlparser.filters.HasSiblingFilter r0;
        int $i0, $i1;
        lg $r3;
        boolean $z0, $z1;

        r0 := @this: org.htmlparser.filters.HasSiblingFilter;

        $r1 := @parameter0: org.htmlparser.Node;

        $i1 = 0;

        $z0 = $r1 instanceof org.htmlparser.Tag;

        if $z0 == 0 goto label1;

        $r2 = (org.htmlparser.Tag) $r1;

        $z0 = interfaceinvoke $r2.<org.htmlparser.Tag: boolean isEndTag()>();

        if $z0 != 0 goto label5;

     label1:
        $r1 = interfaceinvoke $r1.<org.htmlparser.Node: org.htmlparser.Node getParent()>();

        if $r1 == null goto label5;

        $r3 = interfaceinvoke $r1.<org.htmlparser.Node: lg getChildren()>();

        if $r3 == null goto label5;

        $i0 = $r3.<lg: int b>;

        $z0 = 0;

     label2:
        if $z0 != 0 goto label4;

        if $i1 >= $i0 goto label4;

        $r4 = virtualinvoke r0.<org.htmlparser.filters.HasSiblingFilter: org.htmlparser.NodeFilter getSiblingFilter()>();

        $r5 = $r3.<lg: org.htmlparser.Node[] a>;

        $r1 = $r5[$i1];

        $z1 = interfaceinvoke $r4.<org.htmlparser.NodeFilter: boolean accept(org.htmlparser.Node)>($r1);

        if $z1 == 0 goto label3;

        $z0 = 1;

     label3:
        $i1 = $i1 + 1;

        goto label2;

     label4:
        return $z0;

     label5:
        return 0;
    }

    public org.htmlparser.NodeFilter getSiblingFilter()
    {
        org.htmlparser.filters.HasSiblingFilter r0;
        org.htmlparser.NodeFilter r1;

        r0 := @this: org.htmlparser.filters.HasSiblingFilter;

        r1 = r0.<org.htmlparser.filters.HasSiblingFilter: org.htmlparser.NodeFilter a>;

        return r1;
    }

    public void setSiblingFilter(org.htmlparser.NodeFilter)
    {
        org.htmlparser.filters.HasSiblingFilter r0;
        org.htmlparser.NodeFilter $r1;

        r0 := @this: org.htmlparser.filters.HasSiblingFilter;

        $r1 := @parameter0: org.htmlparser.NodeFilter;

        r0.<org.htmlparser.filters.HasSiblingFilter: org.htmlparser.NodeFilter a> = $r1;

        return;
    }
}
