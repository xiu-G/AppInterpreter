public class proguard.optimize.info.ReadWriteFieldMarker extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.instruction.visitor.InstructionVisitor, proguard.classfile.constant.visitor.ConstantVisitor, proguard.classfile.visitor.MemberVisitor
{
    private boolean reading;
    private boolean writing;

    public void <init>()
    {
        proguard.optimize.info.ReadWriteFieldMarker r0;

        r0 := @this: proguard.optimize.info.ReadWriteFieldMarker;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        r0.<proguard.optimize.info.ReadWriteFieldMarker: boolean reading> = 1;

        r0.<proguard.optimize.info.ReadWriteFieldMarker: boolean writing> = 1;

        return;
    }

    public static boolean isRead(proguard.classfile.Field)
    {
        proguard.optimize.info.FieldOptimizationInfo $r1;
        proguard.classfile.Field $r0;
        boolean $z0;

        $r0 := @parameter0: proguard.classfile.Field;

        $r1 = staticinvoke <proguard.optimize.info.FieldOptimizationInfo: proguard.optimize.info.FieldOptimizationInfo getFieldOptimizationInfo(proguard.classfile.Field)>($r0);

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r1.<proguard.optimize.info.FieldOptimizationInfo: boolean isRead()>();

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public static boolean isWritten(proguard.classfile.Field)
    {
        proguard.optimize.info.FieldOptimizationInfo $r1;
        proguard.classfile.Field $r0;
        boolean $z0;

        $r0 := @parameter0: proguard.classfile.Field;

        $r1 = staticinvoke <proguard.optimize.info.FieldOptimizationInfo: proguard.optimize.info.FieldOptimizationInfo getFieldOptimizationInfo(proguard.classfile.Field)>($r0);

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r1.<proguard.optimize.info.FieldOptimizationInfo: boolean isWritten()>();

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    private static void markAsRead(proguard.classfile.Field)
    {
        proguard.optimize.info.FieldOptimizationInfo $r1;
        proguard.classfile.Field $r0;

        $r0 := @parameter0: proguard.classfile.Field;

        $r1 = staticinvoke <proguard.optimize.info.FieldOptimizationInfo: proguard.optimize.info.FieldOptimizationInfo getFieldOptimizationInfo(proguard.classfile.Field)>($r0);

        if $r1 == null goto label1;

        virtualinvoke $r1.<proguard.optimize.info.FieldOptimizationInfo: void setRead()>();

     label1:
        return;
    }

    private static void markAsWritten(proguard.classfile.Field)
    {
        proguard.optimize.info.FieldOptimizationInfo $r1;
        proguard.classfile.Field $r0;

        $r0 := @parameter0: proguard.classfile.Field;

        $r1 = staticinvoke <proguard.optimize.info.FieldOptimizationInfo: proguard.optimize.info.FieldOptimizationInfo getFieldOptimizationInfo(proguard.classfile.Field)>($r0);

        if $r1 == null goto label1;

        virtualinvoke $r1.<proguard.optimize.info.FieldOptimizationInfo: void setWritten()>();

     label1:
        return;
    }

    public void visitAnyConstant(proguard.classfile.Clazz, proguard.classfile.constant.Constant)
    {
        proguard.optimize.info.ReadWriteFieldMarker r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.constant.Constant $r2;

        r0 := @this: proguard.optimize.info.ReadWriteFieldMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.Constant;

        return;
    }

    public void visitAnyInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.Instruction)
    {
        proguard.optimize.info.ReadWriteFieldMarker r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.instruction.Instruction $r4;
        int $i0;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.optimize.info.ReadWriteFieldMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.Instruction;

        return;
    }

    public void visitAnyMember(proguard.classfile.Clazz, proguard.classfile.Member)
    {
        proguard.optimize.info.ReadWriteFieldMarker r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.Member $r2;

        r0 := @this: proguard.optimize.info.ReadWriteFieldMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Member;

        return;
    }

    public void visitConstantInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.ConstantInstruction)
    {
        proguard.optimize.info.ReadWriteFieldMarker r0;
        byte $b1;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.instruction.ConstantInstruction $r4;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.optimize.info.ReadWriteFieldMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.ConstantInstruction;

        $b1 = $r4.<proguard.classfile.instruction.ConstantInstruction: byte opcode>;

        $i0 = (int) $b1;

        lookupswitch($i0)
        {
            case -78: goto label3;
            case -77: goto label4;
            case -76: goto label3;
            case -75: goto label4;
            case 18: goto label2;
            case 19: goto label2;
            default: goto label1;
        };

     label1:
        return;

     label2:
        r0.<proguard.optimize.info.ReadWriteFieldMarker: boolean reading> = 1;

        r0.<proguard.optimize.info.ReadWriteFieldMarker: boolean writing> = 1;

        $i0 = $r4.<proguard.classfile.instruction.ConstantInstruction: int constantIndex>;

        interfaceinvoke $r1.<proguard.classfile.Clazz: void constantPoolEntryAccept(int,proguard.classfile.constant.visitor.ConstantVisitor)>($i0, r0);

        return;

     label3:
        r0.<proguard.optimize.info.ReadWriteFieldMarker: boolean reading> = 1;

        r0.<proguard.optimize.info.ReadWriteFieldMarker: boolean writing> = 0;

        $i0 = $r4.<proguard.classfile.instruction.ConstantInstruction: int constantIndex>;

        interfaceinvoke $r1.<proguard.classfile.Clazz: void constantPoolEntryAccept(int,proguard.classfile.constant.visitor.ConstantVisitor)>($i0, r0);

        return;

     label4:
        r0.<proguard.optimize.info.ReadWriteFieldMarker: boolean reading> = 0;

        r0.<proguard.optimize.info.ReadWriteFieldMarker: boolean writing> = 1;

        $i0 = $r4.<proguard.classfile.instruction.ConstantInstruction: int constantIndex>;

        interfaceinvoke $r1.<proguard.classfile.Clazz: void constantPoolEntryAccept(int,proguard.classfile.constant.visitor.ConstantVisitor)>($i0, r0);

        return;
    }

    public void visitFieldrefConstant(proguard.classfile.Clazz, proguard.classfile.constant.FieldrefConstant)
    {
        proguard.optimize.info.ReadWriteFieldMarker r0;
        proguard.classfile.constant.FieldrefConstant $r2;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.optimize.info.ReadWriteFieldMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.FieldrefConstant;

        virtualinvoke $r2.<proguard.classfile.constant.FieldrefConstant: void referencedMemberAccept(proguard.classfile.visitor.MemberVisitor)>(r0);

        return;
    }

    public void visitProgramField(proguard.classfile.ProgramClass, proguard.classfile.ProgramField)
    {
        proguard.optimize.info.ReadWriteFieldMarker r0;
        proguard.classfile.ProgramField $r2;
        proguard.classfile.ProgramClass $r1;
        boolean $z0;

        r0 := @this: proguard.optimize.info.ReadWriteFieldMarker;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.ProgramField;

        $z0 = r0.<proguard.optimize.info.ReadWriteFieldMarker: boolean reading>;

        if $z0 == 0 goto label1;

        staticinvoke <proguard.optimize.info.ReadWriteFieldMarker: void markAsRead(proguard.classfile.Field)>($r2);

     label1:
        $z0 = r0.<proguard.optimize.info.ReadWriteFieldMarker: boolean writing>;

        if $z0 == 0 goto label2;

        staticinvoke <proguard.optimize.info.ReadWriteFieldMarker: void markAsWritten(proguard.classfile.Field)>($r2);

     label2:
        return;
    }

    public void visitStringConstant(proguard.classfile.Clazz, proguard.classfile.constant.StringConstant)
    {
        proguard.classfile.constant.StringConstant $r2;
        proguard.optimize.info.ReadWriteFieldMarker r0;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.optimize.info.ReadWriteFieldMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.StringConstant;

        virtualinvoke $r2.<proguard.classfile.constant.StringConstant: void referencedMemberAccept(proguard.classfile.visitor.MemberVisitor)>(r0);

        return;
    }
}
