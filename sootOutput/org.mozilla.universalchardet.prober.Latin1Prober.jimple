public class org.mozilla.universalchardet.prober.Latin1Prober extends org.mozilla.universalchardet.prober.CharsetProber
{
    public static final byte ACO;
    public static final byte ACV;
    public static final byte ASC;
    public static final byte ASO;
    public static final byte ASS;
    public static final byte ASV;
    public static final int CLASS_NUM;
    public static final int FREQ_CAT_NUM;
    public static final byte OTH;
    public static final byte UDF;
    private static final byte[] latin1CharToClass;
    private static final byte[] latin1ClassModel;
    private int[] freqCounter;
    private byte lastCharClass;
    private org.mozilla.universalchardet.prober.CharsetProber$ProbingState state;

    static void <clinit>()
    {
        byte[] $r0;

        <org.mozilla.universalchardet.prober.Latin1Prober: byte OTH> = 1;

        <org.mozilla.universalchardet.prober.Latin1Prober: int FREQ_CAT_NUM> = 4;

        <org.mozilla.universalchardet.prober.Latin1Prober: int CLASS_NUM> = 8;

        <org.mozilla.universalchardet.prober.Latin1Prober: byte ASV> = 6;

        <org.mozilla.universalchardet.prober.Latin1Prober: byte ASS> = 3;

        <org.mozilla.universalchardet.prober.Latin1Prober: byte ASO> = 7;

        <org.mozilla.universalchardet.prober.Latin1Prober: byte ASC> = 2;

        <org.mozilla.universalchardet.prober.Latin1Prober: byte ACV> = 4;

        <org.mozilla.universalchardet.prober.Latin1Prober: byte ACO> = 5;

        $r0 = newarray (byte)[256];

        $r0[0] = 1;

        $r0[1] = 1;

        $r0[2] = 1;

        $r0[3] = 1;

        $r0[4] = 1;

        $r0[5] = 1;

        $r0[6] = 1;

        $r0[7] = 1;

        $r0[8] = 1;

        $r0[9] = 1;

        $r0[10] = 1;

        $r0[11] = 1;

        $r0[12] = 1;

        $r0[13] = 1;

        $r0[14] = 1;

        $r0[15] = 1;

        $r0[16] = 1;

        $r0[17] = 1;

        $r0[18] = 1;

        $r0[19] = 1;

        $r0[20] = 1;

        $r0[21] = 1;

        $r0[22] = 1;

        $r0[23] = 1;

        $r0[24] = 1;

        $r0[25] = 1;

        $r0[26] = 1;

        $r0[27] = 1;

        $r0[28] = 1;

        $r0[29] = 1;

        $r0[30] = 1;

        $r0[31] = 1;

        $r0[32] = 1;

        $r0[33] = 1;

        $r0[34] = 1;

        $r0[35] = 1;

        $r0[36] = 1;

        $r0[37] = 1;

        $r0[38] = 1;

        $r0[39] = 1;

        $r0[40] = 1;

        $r0[41] = 1;

        $r0[42] = 1;

        $r0[43] = 1;

        $r0[44] = 1;

        $r0[45] = 1;

        $r0[46] = 1;

        $r0[47] = 1;

        $r0[48] = 1;

        $r0[49] = 1;

        $r0[50] = 1;

        $r0[51] = 1;

        $r0[52] = 1;

        $r0[53] = 1;

        $r0[54] = 1;

        $r0[55] = 1;

        $r0[56] = 1;

        $r0[57] = 1;

        $r0[58] = 1;

        $r0[59] = 1;

        $r0[60] = 1;

        $r0[61] = 1;

        $r0[62] = 1;

        $r0[63] = 1;

        $r0[64] = 1;

        $r0[65] = 2;

        $r0[66] = 2;

        $r0[67] = 2;

        $r0[68] = 2;

        $r0[69] = 2;

        $r0[70] = 2;

        $r0[71] = 2;

        $r0[72] = 2;

        $r0[73] = 2;

        $r0[74] = 2;

        $r0[75] = 2;

        $r0[76] = 2;

        $r0[77] = 2;

        $r0[78] = 2;

        $r0[79] = 2;

        $r0[80] = 2;

        $r0[81] = 2;

        $r0[82] = 2;

        $r0[83] = 2;

        $r0[84] = 2;

        $r0[85] = 2;

        $r0[86] = 2;

        $r0[87] = 2;

        $r0[88] = 2;

        $r0[89] = 2;

        $r0[90] = 2;

        $r0[91] = 1;

        $r0[92] = 1;

        $r0[93] = 1;

        $r0[94] = 1;

        $r0[95] = 1;

        $r0[96] = 1;

        $r0[97] = 3;

        $r0[98] = 3;

        $r0[99] = 3;

        $r0[100] = 3;

        $r0[101] = 3;

        $r0[102] = 3;

        $r0[103] = 3;

        $r0[104] = 3;

        $r0[105] = 3;

        $r0[106] = 3;

        $r0[107] = 3;

        $r0[108] = 3;

        $r0[109] = 3;

        $r0[110] = 3;

        $r0[111] = 3;

        $r0[112] = 3;

        $r0[113] = 3;

        $r0[114] = 3;

        $r0[115] = 3;

        $r0[116] = 3;

        $r0[117] = 3;

        $r0[118] = 3;

        $r0[119] = 3;

        $r0[120] = 3;

        $r0[121] = 3;

        $r0[122] = 3;

        $r0[123] = 1;

        $r0[124] = 1;

        $r0[125] = 1;

        $r0[126] = 1;

        $r0[127] = 1;

        $r0[128] = 1;

        $r0[129] = 0;

        $r0[130] = 1;

        $r0[131] = 7;

        $r0[132] = 1;

        $r0[133] = 1;

        $r0[134] = 1;

        $r0[135] = 1;

        $r0[136] = 1;

        $r0[137] = 1;

        $r0[138] = 5;

        $r0[139] = 1;

        $r0[140] = 5;

        $r0[141] = 0;

        $r0[142] = 5;

        $r0[143] = 0;

        $r0[144] = 0;

        $r0[145] = 1;

        $r0[146] = 1;

        $r0[147] = 1;

        $r0[148] = 1;

        $r0[149] = 1;

        $r0[150] = 1;

        $r0[151] = 1;

        $r0[152] = 1;

        $r0[153] = 1;

        $r0[154] = 7;

        $r0[155] = 1;

        $r0[156] = 7;

        $r0[157] = 0;

        $r0[158] = 7;

        $r0[159] = 5;

        $r0[160] = 1;

        $r0[161] = 1;

        $r0[162] = 1;

        $r0[163] = 1;

        $r0[164] = 1;

        $r0[165] = 1;

        $r0[166] = 1;

        $r0[167] = 1;

        $r0[168] = 1;

        $r0[169] = 1;

        $r0[170] = 1;

        $r0[171] = 1;

        $r0[172] = 1;

        $r0[173] = 1;

        $r0[174] = 1;

        $r0[175] = 1;

        $r0[176] = 1;

        $r0[177] = 1;

        $r0[178] = 1;

        $r0[179] = 1;

        $r0[180] = 1;

        $r0[181] = 1;

        $r0[182] = 1;

        $r0[183] = 1;

        $r0[184] = 1;

        $r0[185] = 1;

        $r0[186] = 1;

        $r0[187] = 1;

        $r0[188] = 1;

        $r0[189] = 1;

        $r0[190] = 1;

        $r0[191] = 1;

        $r0[192] = 4;

        $r0[193] = 4;

        $r0[194] = 4;

        $r0[195] = 4;

        $r0[196] = 4;

        $r0[197] = 4;

        $r0[198] = 5;

        $r0[199] = 5;

        $r0[200] = 4;

        $r0[201] = 4;

        $r0[202] = 4;

        $r0[203] = 4;

        $r0[204] = 4;

        $r0[205] = 4;

        $r0[206] = 4;

        $r0[207] = 4;

        $r0[208] = 5;

        $r0[209] = 5;

        $r0[210] = 4;

        $r0[211] = 4;

        $r0[212] = 4;

        $r0[213] = 4;

        $r0[214] = 4;

        $r0[215] = 1;

        $r0[216] = 4;

        $r0[217] = 4;

        $r0[218] = 4;

        $r0[219] = 4;

        $r0[220] = 4;

        $r0[221] = 5;

        $r0[222] = 5;

        $r0[223] = 5;

        $r0[224] = 6;

        $r0[225] = 6;

        $r0[226] = 6;

        $r0[227] = 6;

        $r0[228] = 6;

        $r0[229] = 6;

        $r0[230] = 7;

        $r0[231] = 7;

        $r0[232] = 6;

        $r0[233] = 6;

        $r0[234] = 6;

        $r0[235] = 6;

        $r0[236] = 6;

        $r0[237] = 6;

        $r0[238] = 6;

        $r0[239] = 6;

        $r0[240] = 7;

        $r0[241] = 7;

        $r0[242] = 6;

        $r0[243] = 6;

        $r0[244] = 6;

        $r0[245] = 6;

        $r0[246] = 6;

        $r0[247] = 1;

        $r0[248] = 6;

        $r0[249] = 6;

        $r0[250] = 6;

        $r0[251] = 6;

        $r0[252] = 6;

        $r0[253] = 7;

        $r0[254] = 7;

        $r0[255] = 7;

        <org.mozilla.universalchardet.prober.Latin1Prober: byte[] latin1CharToClass> = $r0;

        $r0 = newarray (byte)[64];

        $r0[0] = 0;

        $r0[1] = 0;

        $r0[2] = 0;

        $r0[3] = 0;

        $r0[4] = 0;

        $r0[5] = 0;

        $r0[6] = 0;

        $r0[7] = 0;

        $r0[8] = 0;

        $r0[9] = 3;

        $r0[10] = 3;

        $r0[11] = 3;

        $r0[12] = 3;

        $r0[13] = 3;

        $r0[14] = 3;

        $r0[15] = 3;

        $r0[16] = 0;

        $r0[17] = 3;

        $r0[18] = 3;

        $r0[19] = 3;

        $r0[20] = 3;

        $r0[21] = 3;

        $r0[22] = 3;

        $r0[23] = 3;

        $r0[24] = 0;

        $r0[25] = 3;

        $r0[26] = 3;

        $r0[27] = 3;

        $r0[28] = 1;

        $r0[29] = 1;

        $r0[30] = 3;

        $r0[31] = 3;

        $r0[32] = 0;

        $r0[33] = 3;

        $r0[34] = 3;

        $r0[35] = 3;

        $r0[36] = 1;

        $r0[37] = 2;

        $r0[38] = 1;

        $r0[39] = 2;

        $r0[40] = 0;

        $r0[41] = 3;

        $r0[42] = 3;

        $r0[43] = 3;

        $r0[44] = 3;

        $r0[45] = 3;

        $r0[46] = 3;

        $r0[47] = 3;

        $r0[48] = 0;

        $r0[49] = 3;

        $r0[50] = 1;

        $r0[51] = 3;

        $r0[52] = 1;

        $r0[53] = 1;

        $r0[54] = 1;

        $r0[55] = 3;

        $r0[56] = 0;

        $r0[57] = 3;

        $r0[58] = 1;

        $r0[59] = 3;

        $r0[60] = 1;

        $r0[61] = 1;

        $r0[62] = 3;

        $r0[63] = 3;

        <org.mozilla.universalchardet.prober.Latin1Prober: byte[] latin1ClassModel> = $r0;

        return;
    }

    public void <init>()
    {
        org.mozilla.universalchardet.prober.Latin1Prober r0;
        int[] $r1;

        r0 := @this: org.mozilla.universalchardet.prober.Latin1Prober;

        specialinvoke r0.<org.mozilla.universalchardet.prober.CharsetProber: void <init>()>();

        $r1 = newarray (int)[4];

        r0.<org.mozilla.universalchardet.prober.Latin1Prober: int[] freqCounter> = $r1;

        virtualinvoke r0.<org.mozilla.universalchardet.prober.Latin1Prober: void reset()>();

        return;
    }

    public java.lang.String getCharSetName()
    {
        org.mozilla.universalchardet.prober.Latin1Prober r0;
        java.lang.String r1;

        r0 := @this: org.mozilla.universalchardet.prober.Latin1Prober;

        r1 = <org.mozilla.universalchardet.Constants: java.lang.String CHARSET_WINDOWS_1252>;

        return r1;
    }

    public float getConfidence()
    {
        org.mozilla.universalchardet.prober.CharsetProber$ProbingState $r1, $r2;
        byte $b3;
        int[] $r3;
        org.mozilla.universalchardet.prober.Latin1Prober r0;
        int $i0, $i1, $i2;
        float $f0, $f1, $f2;

        r0 := @this: org.mozilla.universalchardet.prober.Latin1Prober;

        $i0 = 0;

        $r1 = r0.<org.mozilla.universalchardet.prober.Latin1Prober: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state>;

        $r2 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState NOT_ME>;

        if $r1 != $r2 goto label1;

        return 0.01F;

     label1:
        $i1 = 0;

     label2:
        $r3 = r0.<org.mozilla.universalchardet.prober.Latin1Prober: int[] freqCounter>;

        $i2 = lengthof $r3;

        if $i0 >= $i2 goto label3;

        $r3 = r0.<org.mozilla.universalchardet.prober.Latin1Prober: int[] freqCounter>;

        $i2 = $r3[$i0];

        $i1 = $i1 + $i2;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        if $i1 > 0 goto label6;

        $f0 = 0.0F;

     label4:
        $b3 = $f0 cmpg 0.0F;

        $i1 = (int) $b3;

        if $i1 >= 0 goto label5;

        $f0 = 0.0F;

     label5:
        $f0 = $f0 * 0.5F;

        return $f0;

     label6:
        $r3 = r0.<org.mozilla.universalchardet.prober.Latin1Prober: int[] freqCounter>;

        $i0 = $r3[3];

        $f0 = (float) $i0;

        $f0 = $f0 * 1.0F;

        $f1 = (float) $i1;

        $f0 = $f0 / $f1;

        $r3 = r0.<org.mozilla.universalchardet.prober.Latin1Prober: int[] freqCounter>;

        $i0 = $r3[1];

        $f1 = (float) $i0;

        $f1 = $f1 * 20.0F;

        $f2 = (float) $i1;

        $f1 = $f1 / $f2;

        $f0 = $f0 - $f1;

        goto label4;
    }

    public org.mozilla.universalchardet.prober.CharsetProber$ProbingState getState()
    {
        org.mozilla.universalchardet.prober.Latin1Prober r0;
        org.mozilla.universalchardet.prober.CharsetProber$ProbingState r1;

        r0 := @this: org.mozilla.universalchardet.prober.Latin1Prober;

        r1 = r0.<org.mozilla.universalchardet.prober.Latin1Prober: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state>;

        return r1;
    }

    public org.mozilla.universalchardet.prober.CharsetProber$ProbingState handleData(byte[], int, int)
    {
        byte[] $r1, $r3;
        org.mozilla.universalchardet.prober.CharsetProber$ProbingState $r4;
        java.nio.ByteBuffer $r2;
        short $s3;
        byte $b2, $b4;
        int[] $r5;
        org.mozilla.universalchardet.prober.Latin1Prober r0;
        int $i0, $i1, $i5, $i6;

        r0 := @this: org.mozilla.universalchardet.prober.Latin1Prober;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = virtualinvoke r0.<org.mozilla.universalchardet.prober.Latin1Prober: java.nio.ByteBuffer filterWithEnglishLetters(byte[],int,int)>($r1, 0, $i1);

        $r1 = virtualinvoke $r2.<java.nio.ByteBuffer: byte[] array()>();

        $i0 = virtualinvoke $r2.<java.nio.ByteBuffer: int position()>();

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $b2 = $r1[$i1];

        $s3 = (short) $b2;

        $s3 = $s3 & 255;

        $r3 = <org.mozilla.universalchardet.prober.Latin1Prober: byte[] latin1CharToClass>;

        $i5 = (int) $s3;

        $b2 = $r3[$i5];

        $r3 = <org.mozilla.universalchardet.prober.Latin1Prober: byte[] latin1ClassModel>;

        $b4 = r0.<org.mozilla.universalchardet.prober.Latin1Prober: byte lastCharClass>;

        $i5 = (int) $b4;

        $i5 = $i5 * 8;

        $i6 = (int) $b2;

        $i5 = $i5 + $i6;

        $b4 = $r3[$i5];

        if $b4 != 0 goto label3;

        $r4 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState NOT_ME>;

        r0.<org.mozilla.universalchardet.prober.Latin1Prober: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state> = $r4;

     label2:
        $r4 = r0.<org.mozilla.universalchardet.prober.Latin1Prober: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state>;

        return $r4;

     label3:
        $r5 = r0.<org.mozilla.universalchardet.prober.Latin1Prober: int[] freqCounter>;

        $i5 = (int) $b4;

        $i5 = $r5[$i5];

        $i5 = $i5 + 1;

        $i6 = (int) $b4;

        $r5[$i6] = $i5;

        r0.<org.mozilla.universalchardet.prober.Latin1Prober: byte lastCharClass> = $b2;

        $i1 = $i1 + 1;

        goto label1;
    }

    public void reset()
    {
        org.mozilla.universalchardet.prober.CharsetProber$ProbingState $r1;
        int[] $r2;
        org.mozilla.universalchardet.prober.Latin1Prober r0;
        int $i0, $i1;

        r0 := @this: org.mozilla.universalchardet.prober.Latin1Prober;

        $r1 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState DETECTING>;

        r0.<org.mozilla.universalchardet.prober.Latin1Prober: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state> = $r1;

        r0.<org.mozilla.universalchardet.prober.Latin1Prober: byte lastCharClass> = 1;

        $i0 = 0;

     label1:
        $r2 = r0.<org.mozilla.universalchardet.prober.Latin1Prober: int[] freqCounter>;

        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label2;

        $r2 = r0.<org.mozilla.universalchardet.prober.Latin1Prober: int[] freqCounter>;

        $r2[$i0] = 0;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void setOption()
    {
        org.mozilla.universalchardet.prober.Latin1Prober r0;

        r0 := @this: org.mozilla.universalchardet.prober.Latin1Prober;

        return;
    }
}
