public class proguard.obfuscate.MemberNameConflictFixer extends java.lang.Object implements proguard.classfile.visitor.MemberVisitor
{
    private final boolean allowAggressiveOverloading;
    private final java.util.Map descriptorMap;
    private final proguard.obfuscate.MemberObfuscator memberObfuscator;
    private final proguard.classfile.util.WarningPrinter warningPrinter;

    public void <init>(boolean, java.util.Map, proguard.classfile.util.WarningPrinter, proguard.obfuscate.MemberObfuscator)
    {
        proguard.obfuscate.MemberNameConflictFixer r0;
        proguard.classfile.util.WarningPrinter $r2;
        java.util.Map $r1;
        proguard.obfuscate.MemberObfuscator $r3;
        boolean $z0;

        r0 := @this: proguard.obfuscate.MemberNameConflictFixer;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: java.util.Map;

        $r2 := @parameter2: proguard.classfile.util.WarningPrinter;

        $r3 := @parameter3: proguard.obfuscate.MemberObfuscator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<proguard.obfuscate.MemberNameConflictFixer: boolean allowAggressiveOverloading> = $z0;

        r0.<proguard.obfuscate.MemberNameConflictFixer: java.util.Map descriptorMap> = $r1;

        r0.<proguard.obfuscate.MemberNameConflictFixer: proguard.classfile.util.WarningPrinter warningPrinter> = $r2;

        r0.<proguard.obfuscate.MemberNameConflictFixer: proguard.obfuscate.MemberObfuscator memberObfuscator> = $r3;

        return;
    }

    private void visitMember(proguard.classfile.Clazz, proguard.classfile.Member, boolean)
    {
        proguard.obfuscate.MemberNameConflictFixer r0;
        proguard.obfuscate.MemberObfuscator $r14;
        proguard.classfile.Clazz $r1;
        java.lang.StringBuffer $r11, $r13;
        java.util.Map $r7;
        int $i0;
        java.lang.String $r4, $r5, $r6, $r9, $r10, $r12;
        boolean $z0, $z1;
        proguard.classfile.util.WarningPrinter $r3;
        proguard.classfile.Member $r2;
        java.lang.Object $r8;

        r0 := @this: proguard.obfuscate.MemberNameConflictFixer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Member;

        $z0 := @parameter2: boolean;

        $r4 = interfaceinvoke $r2.<proguard.classfile.Member: java.lang.String getName(proguard.classfile.Clazz)>($r1);

        $r5 = interfaceinvoke $r2.<proguard.classfile.Member: java.lang.String getDescriptor(proguard.classfile.Clazz)>($r1);

        $r6 = $r5;

        $z1 = r0.<proguard.obfuscate.MemberNameConflictFixer: boolean allowAggressiveOverloading>;

        if $z1 != 0 goto label1;

        $i0 = virtualinvoke $r5.<java.lang.String: int indexOf(int)>(41);

        $i0 = $i0 + 1;

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

     label1:
        $r7 = r0.<proguard.obfuscate.MemberNameConflictFixer: java.util.Map descriptorMap>;

        $r7 = staticinvoke <proguard.obfuscate.MemberObfuscator: java.util.Map retrieveNameMap(java.util.Map,java.lang.String)>($r7, $r6);

        $r6 = staticinvoke <proguard.obfuscate.MemberObfuscator: java.lang.String newMemberName(proguard.classfile.Member)>($r2);

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

        $r9 = (java.lang.String) $r8;

        if $r9 == null goto label7;

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z1 != 0 goto label7;

        $z1 = staticinvoke <proguard.obfuscate.MemberObfuscator: boolean hasFixedNewMemberName(proguard.classfile.Member)>($r2);

        if $z1 == 0 goto label4;

        $r3 = r0.<proguard.obfuscate.MemberNameConflictFixer: proguard.classfile.util.WarningPrinter warningPrinter>;

        if $r3 == null goto label4;

        $r10 = interfaceinvoke $r2.<proguard.classfile.Member: java.lang.String getDescriptor(proguard.classfile.Clazz)>($r1);

        $r3 = r0.<proguard.obfuscate.MemberNameConflictFixer: proguard.classfile.util.WarningPrinter warningPrinter>;

        $r5 = interfaceinvoke $r1.<proguard.classfile.Clazz: java.lang.String getName()>();

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Warning: ");

        $r12 = interfaceinvoke $r1.<proguard.classfile.Clazz: java.lang.String getName()>();

        $r12 = staticinvoke <proguard.classfile.util.ClassUtil: java.lang.String externalClassName(java.lang.String)>($r12);

        $r11 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        if $z0 == 0 goto label5;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": field \'");

        $r4 = staticinvoke <proguard.classfile.util.ClassUtil: java.lang.String externalFullFieldDescription(int,java.lang.String,java.lang.String)>(0, $r4, $r10);

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

     label2:
        $r11 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r11 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' can\'t be mapped to \'");

        $r11 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r11 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' because it would conflict with ");

        if $z0 == 0 goto label6;

        $r4 = "field \'";

     label3:
        $r11 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r11 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\', which is already being mapped to \'");

        $r11 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r11 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r6 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r3.<proguard.classfile.util.WarningPrinter: void print(java.lang.String,java.lang.String)>($r5, $r6);

     label4:
        staticinvoke <proguard.obfuscate.MemberObfuscator: void setNewMemberName(proguard.classfile.Member,java.lang.String)>($r2, null);

        $r14 = r0.<proguard.obfuscate.MemberNameConflictFixer: proguard.obfuscate.MemberObfuscator memberObfuscator>;

        interfaceinvoke $r2.<proguard.classfile.Member: void accept(proguard.classfile.Clazz,proguard.classfile.visitor.MemberVisitor)>($r1, $r14);

        return;

     label5:
        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": method \'");

        $r12 = interfaceinvoke $r1.<proguard.classfile.Clazz: java.lang.String getName()>();

        $r4 = staticinvoke <proguard.classfile.util.ClassUtil: java.lang.String externalFullMethodDescription(java.lang.String,int,java.lang.String,java.lang.String)>($r12, 0, $r4, $r10);

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label2;

     label6:
        $r4 = "method \'";

        goto label3;

     label7:
        return;
    }

    public void visitLibraryField(proguard.classfile.LibraryClass, proguard.classfile.LibraryField)
    {
        proguard.obfuscate.MemberNameConflictFixer r0;
        proguard.classfile.LibraryClass $r1;
        proguard.classfile.LibraryField $r2;

        r0 := @this: proguard.obfuscate.MemberNameConflictFixer;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        $r2 := @parameter1: proguard.classfile.LibraryField;

        return;
    }

    public void visitLibraryMethod(proguard.classfile.LibraryClass, proguard.classfile.LibraryMethod)
    {
        proguard.obfuscate.MemberNameConflictFixer r0;
        proguard.classfile.LibraryMethod $r2;
        proguard.classfile.LibraryClass $r1;

        r0 := @this: proguard.obfuscate.MemberNameConflictFixer;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        $r2 := @parameter1: proguard.classfile.LibraryMethod;

        return;
    }

    public void visitProgramField(proguard.classfile.ProgramClass, proguard.classfile.ProgramField)
    {
        proguard.obfuscate.MemberNameConflictFixer r0;
        proguard.classfile.ProgramField $r2;
        proguard.classfile.ProgramClass $r1;

        r0 := @this: proguard.obfuscate.MemberNameConflictFixer;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.ProgramField;

        specialinvoke r0.<proguard.obfuscate.MemberNameConflictFixer: void visitMember(proguard.classfile.Clazz,proguard.classfile.Member,boolean)>($r1, $r2, 1);

        return;
    }

    public void visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod)
    {
        proguard.obfuscate.MemberNameConflictFixer r0;
        proguard.classfile.ProgramMethod $r2;
        java.lang.String $r3;
        proguard.classfile.ProgramClass $r1;
        boolean $z0;

        r0 := @this: proguard.obfuscate.MemberNameConflictFixer;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.ProgramMethod;

        $r3 = virtualinvoke $r2.<proguard.classfile.ProgramMethod: java.lang.String getName(proguard.classfile.Clazz)>($r1);

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("<clinit>");

        if $z0 != 0 goto label2;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("<init>");

        if $z0 == 0 goto label1;

        return;

     label1:
        specialinvoke r0.<proguard.obfuscate.MemberNameConflictFixer: void visitMember(proguard.classfile.Clazz,proguard.classfile.Member,boolean)>($r1, $r2, 0);

     label2:
        return;
    }
}
