public class winterwell.jtwitter.TwitterListTest extends junit.framework.TestCase
{
    static final boolean $assertionsDisabled;

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0;

        $r0 = class "Lwinterwell/jtwitter/TwitterListTest;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label2;

        $z0 = 1;

     label1:
        <winterwell.jtwitter.TwitterListTest: boolean $assertionsDisabled> = $z0;

        return;

     label2:
        $z0 = 0;

        goto label1;
    }

    public void <init>()
    {
        winterwell.jtwitter.TwitterListTest r0;

        r0 := @this: winterwell.jtwitter.TwitterListTest;

        specialinvoke r0.<junit.framework.TestCase: void <init>()>();

        return;
    }

    public static void main(java.lang.String[])
    {
        java.lang.Throwable r9, r10, r11;
        java.lang.Object[] $r7;
        java.lang.String[] $r0;
        java.lang.reflect.Method[] $r4;
        int $i0, $i1, $i2;
        java.lang.String $r5;
        java.lang.reflect.Method r1;
        boolean $z0;
        java.io.PrintStream $r8;
        java.lang.IllegalAccessException $r16;
        java.lang.Class[] $r6;
        java.lang.IllegalArgumentException $r15;
        java.lang.reflect.InvocationTargetException $r17;
        winterwell.jtwitter.TwitterListTest r2, $r13;
        java.lang.Class $r3;
        java.lang.StringBuilder $r12, $r14;

        $r0 := @parameter0: java.lang.String[];

        $i0 = 0;

        $r13 = new winterwell.jtwitter.TwitterListTest;

        r2 = $r13;

        specialinvoke $r13.<winterwell.jtwitter.TwitterListTest: void <init>()>();

        $r3 = class "Lwinterwell/jtwitter/TwitterListTest;";

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        $i1 = lengthof $r4;

     label01:
        if $i0 < $i1 goto label02;

        return;

     label02:
        r1 = $r4[$i0];

        $r5 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean startsWith(java.lang.String)>("test");

        if $z0 == 0 goto label03;

        $r6 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i2 = lengthof $r6;

        if $i2 == 0 goto label04;

     label03:
        $i0 = $i0 + 1;

        goto label01;

     label04:
        $r7 = newarray (java.lang.Object)[0];

     label05:
        virtualinvoke r1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r2, $r7);

     label06:
        $r8 = <java.lang.System: java.io.PrintStream out>;

     label07:
        $r5 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.String getName()>();

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r5);

     label08:
        goto label03;

     label09:
        r9 := @caughtexception;

        $r15 = (java.lang.IllegalArgumentException) r9;

        virtualinvoke $r15.<java.lang.IllegalArgumentException: void printStackTrace()>();

        goto label03;

     label10:
        r10 := @caughtexception;

        $r16 = (java.lang.IllegalAccessException) r10;

        virtualinvoke $r16.<java.lang.IllegalAccessException: void printStackTrace()>();

        goto label03;

     label11:
        r11 := @caughtexception;

        $r8 = <java.lang.System: java.io.PrintStream out>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("TEST FAILED: ");

        $r5 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.String getName()>();

        $r12 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r5);

        $r8 = <java.lang.System: java.io.PrintStream out>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("\t");

        $r17 = (java.lang.reflect.InvocationTargetException) r11;

        r9 = virtualinvoke $r17.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        $r12 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r9);

        $r5 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r5);

        goto label03;

        catch java.lang.IllegalArgumentException from label05 to label06 with label09;
        catch java.lang.IllegalArgumentException from label07 to label08 with label09;
        catch java.lang.IllegalAccessException from label05 to label06 with label10;
        catch java.lang.IllegalAccessException from label07 to label08 with label10;
        catch java.lang.reflect.InvocationTargetException from label05 to label06 with label11;
        catch java.lang.reflect.InvocationTargetException from label07 to label08 with label11;
    }

    public void testDelete()
    {
        winterwell.jtwitter.Twitter r1;
        winterwell.jtwitter.TwitterList r5;
        java.util.List $r2;
        winterwell.jtwitter.TwitterListTest r0;
        java.util.Iterator $r3;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: winterwell.jtwitter.TwitterListTest;

        r1 = new winterwell.jtwitter.Twitter;

        specialinvoke r1.<winterwell.jtwitter.Twitter: void <init>(java.lang.String,java.lang.String)>("jtwit", "notsofast");

        $r2 = virtualinvoke r1.<winterwell.jtwitter.Twitter: java.util.List getLists()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        return;

     label2:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (winterwell.jtwitter.TwitterList) $r4;

        virtualinvoke r5.<winterwell.jtwitter.TwitterList: void delete()>();

        goto label1;
    }

    public void testGetInt()
    {
        winterwell.jtwitter.Twitter r1;
        winterwell.jtwitter.TwitterList r2;
        winterwell.jtwitter.TwitterListTest r0;
        java.lang.AssertionError $r4;
        winterwell.jtwitter.Twitter$User $r3;
        boolean $z0;

        r0 := @this: winterwell.jtwitter.TwitterListTest;

        r1 = new winterwell.jtwitter.Twitter;

        specialinvoke r1.<winterwell.jtwitter.Twitter: void <init>(java.lang.String,java.lang.String)>("jtwit", "notsofast");

        r2 = new winterwell.jtwitter.TwitterList;

        specialinvoke r2.<winterwell.jtwitter.TwitterList: void <init>(java.lang.String,java.lang.String,winterwell.jtwitter.Twitter)>("tweetminster", "scotland", r1);

        virtualinvoke r2.<winterwell.jtwitter.TwitterList: winterwell.jtwitter.Twitter$User get(int)>(0);

        $r3 = virtualinvoke r2.<winterwell.jtwitter.TwitterList: winterwell.jtwitter.Twitter$User get(int)>(25);

        $z0 = <winterwell.jtwitter.TwitterListTest: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if $r3 != null goto label1;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label1:
        return;
    }

    public void testGetLists()
    {
        winterwell.jtwitter.Twitter r1;
        java.util.List $r2;
        winterwell.jtwitter.TwitterListTest r0;
        java.lang.AssertionError $r3;
        boolean $z0;

        r0 := @this: winterwell.jtwitter.TwitterListTest;

        r1 = new winterwell.jtwitter.Twitter;

        specialinvoke r1.<winterwell.jtwitter.Twitter: void <init>(java.lang.String,java.lang.String)>("jtwit", "notsofast");

        $r2 = virtualinvoke r1.<winterwell.jtwitter.Twitter: java.util.List getLists(java.lang.String)>("tweetminster");

        $z0 = <winterwell.jtwitter.TwitterListTest: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        return;
    }

    public void testMakeList()
    {
        java.util.Random $r3;
        java.lang.AssertionError $r7;
        winterwell.jtwitter.Twitter r1;
        winterwell.jtwitter.TwitterList r2;
        java.util.List $r6;
        winterwell.jtwitter.TwitterListTest r0;
        int $i0;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        boolean $z0;

        r0 := @this: winterwell.jtwitter.TwitterListTest;

        r1 = new winterwell.jtwitter.Twitter;

        specialinvoke r1.<winterwell.jtwitter.Twitter: void <init>(java.lang.String,java.lang.String)>("jtwit", "notsofast");

        $r3 = new java.util.Random;

        specialinvoke $r3.<java.util.Random: void <init>()>();

        $i0 = virtualinvoke $r3.<java.util.Random: int nextInt(int)>(1000);

        r2 = new winterwell.jtwitter.TwitterList;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("testlist");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r2.<winterwell.jtwitter.TwitterList: void <init>(java.lang.String,winterwell.jtwitter.Twitter,boolean,java.lang.String)>($r5, r1, 1, "This is a test of the JTwitter library");

        $r6 = virtualinvoke r2.<winterwell.jtwitter.TwitterList: java.util.List getStatuses()>();

        $z0 = <winterwell.jtwitter.TwitterListTest: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if $r6 != null goto label1;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label1:
        virtualinvoke r2.<winterwell.jtwitter.TwitterList: void delete()>();

        return;
    }

    public void testTwitterList()
    {
        winterwell.jtwitter.Twitter r1;
        winterwell.jtwitter.TwitterList r2;
        winterwell.jtwitter.TwitterListTest r0;
        int $i0;
        java.lang.AssertionError $r3;
        boolean $z0;

        r0 := @this: winterwell.jtwitter.TwitterListTest;

        r1 = new winterwell.jtwitter.Twitter;

        specialinvoke r1.<winterwell.jtwitter.Twitter: void <init>(java.lang.String,java.lang.String)>("jtwit", "notsofast");

        r2 = new winterwell.jtwitter.TwitterList;

        specialinvoke r2.<winterwell.jtwitter.TwitterList: void <init>(java.lang.String,java.lang.String,winterwell.jtwitter.Twitter)>("tweetminster", "scotland", r1);

        $z0 = <winterwell.jtwitter.TwitterListTest: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i0 = virtualinvoke r2.<winterwell.jtwitter.TwitterList: int size()>();

        if $i0 > 0 goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        return;
    }
}
