public class proguard.optimize.peephole.ReachableCodeMarker extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.attribute.visitor.AttributeVisitor, proguard.classfile.instruction.visitor.InstructionVisitor, proguard.classfile.attribute.visitor.ExceptionInfoVisitor
{
    private boolean evaluateExceptions;
    private boolean[] isReachable;
    private boolean next;

    public void <init>()
    {
        boolean[] $r1;
        proguard.optimize.peephole.ReachableCodeMarker r0;

        r0 := @this: proguard.optimize.peephole.ReachableCodeMarker;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        $r1 = newarray (boolean)[1024];

        r0.<proguard.optimize.peephole.ReachableCodeMarker: boolean[] isReachable> = $r1;

        return;
    }

    private void markBranchTarget(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.optimize.peephole.ReachableCodeMarker r0;
        proguard.classfile.Method $r2;
        boolean $z0;

        r0 := @this: proguard.optimize.peephole.ReachableCodeMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $z0 = r0.<proguard.optimize.peephole.ReachableCodeMarker: boolean next>;

        specialinvoke r0.<proguard.optimize.peephole.ReachableCodeMarker: void markCode(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int)>($r1, $r2, $r3, $i0);

        r0.<proguard.optimize.peephole.ReachableCodeMarker: boolean next> = $z0;

        return;
    }

    private void markBranchTargets(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, int[])
    {
        proguard.optimize.peephole.ReachableCodeMarker r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int[] $r4;
        int $i0, $i1, $i2;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.optimize.peephole.ReachableCodeMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: int[];

        $i1 = 0;

     label1:
        $i2 = lengthof $r4;

        if $i1 >= $i2 goto label2;

        $i2 = $r4[$i1];

        $i2 = $i2 + $i0;

        specialinvoke r0.<proguard.optimize.peephole.ReachableCodeMarker: void markCode(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int)>($r1, $r2, $r3, $i2);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return;
    }

    private void markCode(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int)
    {
        byte[] $r4;
        boolean[] $r5;
        proguard.optimize.peephole.ReachableCodeMarker r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.instruction.Instruction $r6;
        int $i0, $i1;
        proguard.classfile.Method $r2;
        boolean $z0, $z1;

        r0 := @this: proguard.optimize.peephole.ReachableCodeMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $z0 = r0.<proguard.optimize.peephole.ReachableCodeMarker: boolean next>;

        $r4 = $r3.<proguard.classfile.attribute.CodeAttribute: byte[] code>;

     label1:
        $r5 = r0.<proguard.optimize.peephole.ReachableCodeMarker: boolean[] isReachable>;

        $z1 = $r5[$i0];

        if $z1 != 0 goto label2;

        $r6 = staticinvoke <proguard.classfile.instruction.InstructionFactory: proguard.classfile.instruction.Instruction create(byte[],int)>($r4, $i0);

        $r5 = r0.<proguard.optimize.peephole.ReachableCodeMarker: boolean[] isReachable>;

        $r5[$i0] = 1;

        r0.<proguard.optimize.peephole.ReachableCodeMarker: boolean next> = 1;

        virtualinvoke $r6.<proguard.classfile.instruction.Instruction: void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.visitor.InstructionVisitor)>($r1, $r2, $r3, $i0, r0);

        $z1 = r0.<proguard.optimize.peephole.ReachableCodeMarker: boolean next>;

        if $z1 != 0 goto label3;

     label2:
        r0.<proguard.optimize.peephole.ReachableCodeMarker: boolean next> = $z0;

        return;

     label3:
        $i1 = virtualinvoke $r6.<proguard.classfile.instruction.Instruction: int length(int)>($i0);

        $i0 = $i1 + $i0;

        goto label1;
    }

    public boolean isReachable(int)
    {
        int $i0;
        boolean[] $r1;
        proguard.optimize.peephole.ReachableCodeMarker r0;
        boolean $z0;

        r0 := @this: proguard.optimize.peephole.ReachableCodeMarker;

        $i0 := @parameter0: int;

        $r1 = r0.<proguard.optimize.peephole.ReachableCodeMarker: boolean[] isReachable>;

        $z0 = $r1[$i0];

        return $z0;
    }

    public boolean isReachable(int, int)
    {
        int $i0, $i1;
        boolean[] $r1;
        proguard.optimize.peephole.ReachableCodeMarker r0;
        boolean $z0;

        r0 := @this: proguard.optimize.peephole.ReachableCodeMarker;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

     label1:
        if $i0 >= $i1 goto label3;

        $r1 = r0.<proguard.optimize.peephole.ReachableCodeMarker: boolean[] isReachable>;

        $z0 = $r1[$i0];

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        return 0;
    }

    public void visitAnyAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.Attribute)
    {
        proguard.optimize.peephole.ReachableCodeMarker r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.Attribute $r2;

        r0 := @this: proguard.optimize.peephole.ReachableCodeMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.Attribute;

        return;
    }

    public void visitAnySwitchInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.SwitchInstruction)
    {
        proguard.optimize.peephole.ReachableCodeMarker r0;
        proguard.classfile.instruction.SwitchInstruction $r4;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int[] $r5;
        int $i0, $i1;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.optimize.peephole.ReachableCodeMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.SwitchInstruction;

        $i1 = $r4.<proguard.classfile.instruction.SwitchInstruction: int defaultOffset>;

        $i1 = $i1 + $i0;

        specialinvoke r0.<proguard.optimize.peephole.ReachableCodeMarker: void markBranchTarget(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int)>($r1, $r2, $r3, $i1);

        $r5 = $r4.<proguard.classfile.instruction.SwitchInstruction: int[] jumpOffsets>;

        specialinvoke r0.<proguard.optimize.peephole.ReachableCodeMarker: void markBranchTargets(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,int[])>($r1, $r2, $r3, $i0, $r5);

        r0.<proguard.optimize.peephole.ReachableCodeMarker: boolean next> = 0;

        return;
    }

    public void visitBranchInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.BranchInstruction)
    {
        proguard.optimize.peephole.ReachableCodeMarker r0;
        proguard.classfile.instruction.BranchInstruction $r4;
        byte $b2;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0, $i1;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.optimize.peephole.ReachableCodeMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.BranchInstruction;

        $i1 = $r4.<proguard.classfile.instruction.BranchInstruction: int branchOffset>;

        $i0 = $i1 + $i0;

        specialinvoke r0.<proguard.optimize.peephole.ReachableCodeMarker: void markBranchTarget(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int)>($r1, $r2, $r3, $i0);

        $b2 = $r4.<proguard.classfile.instruction.BranchInstruction: byte opcode>;

        $i0 = (int) $b2;

        if $i0 == -89 goto label1;

        $i0 = (int) $b2;

        if $i0 != -56 goto label2;

     label1:
        r0.<proguard.optimize.peephole.ReachableCodeMarker: boolean next> = 0;

     label2:
        return;
    }

    public void visitCodeAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute)
    {
        boolean[] $r4;
        proguard.optimize.peephole.ReachableCodeMarker r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0, $i1;
        proguard.classfile.Method $r2;
        boolean $z0;

        r0 := @this: proguard.optimize.peephole.ReachableCodeMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 = $r3.<proguard.classfile.attribute.CodeAttribute: int u4codeLength>;

        $r4 = r0.<proguard.optimize.peephole.ReachableCodeMarker: boolean[] isReachable>;

        $i1 = lengthof $r4;

        if $i1 >= $i0 goto label3;

        $r4 = newarray (boolean)[$i0];

        r0.<proguard.optimize.peephole.ReachableCodeMarker: boolean[] isReachable> = $r4;

     label1:
        specialinvoke r0.<proguard.optimize.peephole.ReachableCodeMarker: void markCode(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int)>($r1, $r2, $r3, 0);

     label2:
        r0.<proguard.optimize.peephole.ReachableCodeMarker: boolean evaluateExceptions> = 0;

        virtualinvoke $r3.<proguard.classfile.attribute.CodeAttribute: void exceptionsAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.visitor.ExceptionInfoVisitor)>($r1, $r2, r0);

        $z0 = r0.<proguard.optimize.peephole.ReachableCodeMarker: boolean evaluateExceptions>;

        if $z0 != 0 goto label2;

        return;

     label3:
        $i1 = 0;

     label4:
        if $i1 >= $i0 goto label1;

        $r4 = r0.<proguard.optimize.peephole.ReachableCodeMarker: boolean[] isReachable>;

        $r4[$i1] = 0;

        $i1 = $i1 + 1;

        goto label4;
    }

    public void visitConstantInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.ConstantInstruction)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.instruction.ConstantInstruction $r4;
        proguard.optimize.peephole.ReachableCodeMarker r0;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.optimize.peephole.ReachableCodeMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.ConstantInstruction;

        return;
    }

    public void visitExceptionInfo(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.ExceptionInfo)
    {
        proguard.optimize.peephole.ReachableCodeMarker r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0, $i1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.ExceptionInfo $r4;
        boolean $z0;

        r0 := @this: proguard.optimize.peephole.ReachableCodeMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.ExceptionInfo;

        $i0 = $r4.<proguard.classfile.attribute.ExceptionInfo: int u2handlerPC>;

        $z0 = virtualinvoke r0.<proguard.optimize.peephole.ReachableCodeMarker: boolean isReachable(int)>($i0);

        if $z0 != 0 goto label1;

        $i1 = $r4.<proguard.classfile.attribute.ExceptionInfo: int u2startPC>;

        $i0 = $r4.<proguard.classfile.attribute.ExceptionInfo: int u2endPC>;

        $z0 = virtualinvoke r0.<proguard.optimize.peephole.ReachableCodeMarker: boolean isReachable(int,int)>($i1, $i0);

        if $z0 == 0 goto label1;

        $i0 = $r4.<proguard.classfile.attribute.ExceptionInfo: int u2handlerPC>;

        specialinvoke r0.<proguard.optimize.peephole.ReachableCodeMarker: void markCode(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int)>($r1, $r2, $r3, $i0);

        r0.<proguard.optimize.peephole.ReachableCodeMarker: boolean evaluateExceptions> = 1;

     label1:
        return;
    }

    public void visitSimpleInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.SimpleInstruction)
    {
        byte $b1;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.optimize.peephole.ReachableCodeMarker r0;
        proguard.classfile.Method $r2;
        proguard.classfile.instruction.SimpleInstruction $r4;

        r0 := @this: proguard.optimize.peephole.ReachableCodeMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.SimpleInstruction;

        $b1 = $r4.<proguard.classfile.instruction.SimpleInstruction: byte opcode>;

        $i0 = (int) $b1;

        if $i0 == -84 goto label1;

        $i0 = (int) $b1;

        if $i0 == -83 goto label1;

        $i0 = (int) $b1;

        if $i0 == -82 goto label1;

        $i0 = (int) $b1;

        if $i0 == -81 goto label1;

        $i0 = (int) $b1;

        if $i0 == -80 goto label1;

        $i0 = (int) $b1;

        if $i0 == -79 goto label1;

        $i0 = (int) $b1;

        if $i0 != -65 goto label2;

     label1:
        r0.<proguard.optimize.peephole.ReachableCodeMarker: boolean next> = 0;

     label2:
        return;
    }

    public void visitVariableInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.VariableInstruction)
    {
        byte $b1;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.optimize.peephole.ReachableCodeMarker r0;
        proguard.classfile.Method $r2;
        proguard.classfile.instruction.VariableInstruction $r4;

        r0 := @this: proguard.optimize.peephole.ReachableCodeMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.VariableInstruction;

        $b1 = $r4.<proguard.classfile.instruction.VariableInstruction: byte opcode>;

        $i0 = (int) $b1;

        if $i0 != -87 goto label1;

        r0.<proguard.optimize.peephole.ReachableCodeMarker: boolean next> = 0;

     label1:
        return;
    }
}
