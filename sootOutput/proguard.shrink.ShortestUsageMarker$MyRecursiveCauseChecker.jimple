class proguard.shrink.ShortestUsageMarker$MyRecursiveCauseChecker extends java.lang.Object implements proguard.classfile.visitor.ClassVisitor, proguard.classfile.visitor.MemberVisitor
{
    private proguard.classfile.Clazz checkClass;
    private boolean isRecursing;
    private final proguard.shrink.ShortestUsageMarker this$0;

    private void <init>(proguard.shrink.ShortestUsageMarker)
    {
        proguard.shrink.ShortestUsageMarker$MyRecursiveCauseChecker r0;
        proguard.shrink.ShortestUsageMarker $r1;

        r0 := @this: proguard.shrink.ShortestUsageMarker$MyRecursiveCauseChecker;

        $r1 := @parameter0: proguard.shrink.ShortestUsageMarker;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<proguard.shrink.ShortestUsageMarker$MyRecursiveCauseChecker: proguard.shrink.ShortestUsageMarker this$0> = $r1;

        return;
    }

    void <init>(proguard.shrink.ShortestUsageMarker, proguard.shrink.ShortestUsageMarker$1)
    {
        proguard.shrink.ShortestUsageMarker$MyRecursiveCauseChecker r0;
        proguard.shrink.ShortestUsageMarker $r1;
        proguard.shrink.ShortestUsageMarker$1 $r2;

        r0 := @this: proguard.shrink.ShortestUsageMarker$MyRecursiveCauseChecker;

        $r1 := @parameter0: proguard.shrink.ShortestUsageMarker;

        $r2 := @parameter1: proguard.shrink.ShortestUsageMarker$1;

        specialinvoke r0.<proguard.shrink.ShortestUsageMarker$MyRecursiveCauseChecker: void <init>(proguard.shrink.ShortestUsageMarker)>($r1);

        return;
    }

    private void checkCause(proguard.classfile.VisitorAccepter)
    {
        proguard.classfile.VisitorAccepter $r1;
        proguard.classfile.Clazz $r4;
        proguard.shrink.ShortestUsageMark $r3;
        proguard.shrink.ShortestUsageMarker$MyRecursiveCauseChecker r0;
        proguard.shrink.ShortestUsageMarker $r2;
        boolean $z0;

        r0 := @this: proguard.shrink.ShortestUsageMarker$MyRecursiveCauseChecker;

        $r1 := @parameter0: proguard.classfile.VisitorAccepter;

        $r2 = r0.<proguard.shrink.ShortestUsageMarker$MyRecursiveCauseChecker: proguard.shrink.ShortestUsageMarker this$0>;

        $z0 = virtualinvoke $r2.<proguard.shrink.ShortestUsageMarker: boolean isUsed(proguard.classfile.VisitorAccepter)>($r1);

        if $z0 == 0 goto label1;

        $r2 = r0.<proguard.shrink.ShortestUsageMarker$MyRecursiveCauseChecker: proguard.shrink.ShortestUsageMarker this$0>;

        $r3 = virtualinvoke $r2.<proguard.shrink.ShortestUsageMarker: proguard.shrink.ShortestUsageMark getShortestUsageMark(proguard.classfile.VisitorAccepter)>($r1);

        $r4 = r0.<proguard.shrink.ShortestUsageMarker$MyRecursiveCauseChecker: proguard.classfile.Clazz checkClass>;

        $z0 = virtualinvoke $r3.<proguard.shrink.ShortestUsageMark: boolean isCausedBy(proguard.classfile.Clazz)>($r4);

        r0.<proguard.shrink.ShortestUsageMarker$MyRecursiveCauseChecker: boolean isRecursing> = $z0;

        $z0 = r0.<proguard.shrink.ShortestUsageMarker$MyRecursiveCauseChecker: boolean isRecursing>;

        if $z0 != 0 goto label1;

        virtualinvoke $r3.<proguard.shrink.ShortestUsageMark: void acceptClassVisitor(proguard.classfile.visitor.ClassVisitor)>(r0);

        virtualinvoke $r3.<proguard.shrink.ShortestUsageMark: void acceptMemberVisitor(proguard.classfile.visitor.MemberVisitor)>(r0);

     label1:
        return;
    }

    public boolean check(proguard.shrink.ShortestUsageMark, proguard.classfile.Clazz)
    {
        proguard.classfile.Clazz $r2;
        proguard.shrink.ShortestUsageMark $r1;
        proguard.shrink.ShortestUsageMarker$MyRecursiveCauseChecker r0;
        boolean z0;

        r0 := @this: proguard.shrink.ShortestUsageMarker$MyRecursiveCauseChecker;

        $r1 := @parameter0: proguard.shrink.ShortestUsageMark;

        $r2 := @parameter1: proguard.classfile.Clazz;

        r0.<proguard.shrink.ShortestUsageMarker$MyRecursiveCauseChecker: proguard.classfile.Clazz checkClass> = $r2;

        r0.<proguard.shrink.ShortestUsageMarker$MyRecursiveCauseChecker: boolean isRecursing> = 0;

        virtualinvoke $r1.<proguard.shrink.ShortestUsageMark: void acceptClassVisitor(proguard.classfile.visitor.ClassVisitor)>(r0);

        virtualinvoke $r1.<proguard.shrink.ShortestUsageMark: void acceptMemberVisitor(proguard.classfile.visitor.MemberVisitor)>(r0);

        z0 = r0.<proguard.shrink.ShortestUsageMarker$MyRecursiveCauseChecker: boolean isRecursing>;

        return z0;
    }

    public void visitLibraryClass(proguard.classfile.LibraryClass)
    {
        proguard.shrink.ShortestUsageMarker$MyRecursiveCauseChecker r0;
        proguard.classfile.LibraryClass $r1;

        r0 := @this: proguard.shrink.ShortestUsageMarker$MyRecursiveCauseChecker;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        specialinvoke r0.<proguard.shrink.ShortestUsageMarker$MyRecursiveCauseChecker: void checkCause(proguard.classfile.VisitorAccepter)>($r1);

        return;
    }

    public void visitLibraryField(proguard.classfile.LibraryClass, proguard.classfile.LibraryField)
    {
        proguard.shrink.ShortestUsageMarker$MyRecursiveCauseChecker r0;
        proguard.classfile.LibraryClass $r1;
        proguard.classfile.LibraryField $r2;

        r0 := @this: proguard.shrink.ShortestUsageMarker$MyRecursiveCauseChecker;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        $r2 := @parameter1: proguard.classfile.LibraryField;

        specialinvoke r0.<proguard.shrink.ShortestUsageMarker$MyRecursiveCauseChecker: void checkCause(proguard.classfile.VisitorAccepter)>($r2);

        return;
    }

    public void visitLibraryMethod(proguard.classfile.LibraryClass, proguard.classfile.LibraryMethod)
    {
        proguard.classfile.LibraryMethod $r2;
        proguard.shrink.ShortestUsageMarker$MyRecursiveCauseChecker r0;
        proguard.classfile.LibraryClass $r1;

        r0 := @this: proguard.shrink.ShortestUsageMarker$MyRecursiveCauseChecker;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        $r2 := @parameter1: proguard.classfile.LibraryMethod;

        specialinvoke r0.<proguard.shrink.ShortestUsageMarker$MyRecursiveCauseChecker: void checkCause(proguard.classfile.VisitorAccepter)>($r2);

        return;
    }

    public void visitProgramClass(proguard.classfile.ProgramClass)
    {
        proguard.shrink.ShortestUsageMarker$MyRecursiveCauseChecker r0;
        proguard.classfile.ProgramClass $r1;

        r0 := @this: proguard.shrink.ShortestUsageMarker$MyRecursiveCauseChecker;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        specialinvoke r0.<proguard.shrink.ShortestUsageMarker$MyRecursiveCauseChecker: void checkCause(proguard.classfile.VisitorAccepter)>($r1);

        return;
    }

    public void visitProgramField(proguard.classfile.ProgramClass, proguard.classfile.ProgramField)
    {
        proguard.shrink.ShortestUsageMarker$MyRecursiveCauseChecker r0;
        proguard.classfile.ProgramField $r2;
        proguard.classfile.ProgramClass $r1;

        r0 := @this: proguard.shrink.ShortestUsageMarker$MyRecursiveCauseChecker;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.ProgramField;

        specialinvoke r0.<proguard.shrink.ShortestUsageMarker$MyRecursiveCauseChecker: void checkCause(proguard.classfile.VisitorAccepter)>($r2);

        return;
    }

    public void visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod)
    {
        proguard.shrink.ShortestUsageMarker$MyRecursiveCauseChecker r0;
        proguard.classfile.ProgramClass $r1;
        proguard.classfile.ProgramMethod $r2;

        r0 := @this: proguard.shrink.ShortestUsageMarker$MyRecursiveCauseChecker;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.ProgramMethod;

        specialinvoke r0.<proguard.shrink.ShortestUsageMarker$MyRecursiveCauseChecker: void checkCause(proguard.classfile.VisitorAccepter)>($r2);

        return;
    }
}
