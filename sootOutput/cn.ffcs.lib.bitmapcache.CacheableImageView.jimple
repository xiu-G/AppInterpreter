public class cn.ffcs.lib.bitmapcache.CacheableImageView extends android.widget.ImageView
{

    public void <init>(android.content.Context)
    {
        android.content.Context $r1;
        cn.ffcs.lib.bitmapcache.CacheableImageView r0;

        r0 := @this: cn.ffcs.lib.bitmapcache.CacheableImageView;

        $r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.widget.ImageView: void <init>(android.content.Context)>($r1);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        android.content.Context $r1;
        android.util.AttributeSet $r2;
        cn.ffcs.lib.bitmapcache.CacheableImageView r0;

        r0 := @this: cn.ffcs.lib.bitmapcache.CacheableImageView;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: android.util.AttributeSet;

        specialinvoke r0.<android.widget.ImageView: void <init>(android.content.Context,android.util.AttributeSet)>($r1, $r2);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int)
    {
        android.content.Context $r1;
        android.util.AttributeSet $r2;
        int $i0;
        cn.ffcs.lib.bitmapcache.CacheableImageView r0;

        r0 := @this: cn.ffcs.lib.bitmapcache.CacheableImageView;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: android.util.AttributeSet;

        $i0 := @parameter2: int;

        specialinvoke r0.<android.widget.ImageView: void <init>(android.content.Context,android.util.AttributeSet,int)>($r1, $r2, $i0);

        return;
    }

    private static void onDrawableSet(android.graphics.drawable.Drawable)
    {
        cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable $r1;
        android.graphics.drawable.Drawable $r0;
        boolean $z0;

        $r0 := @parameter0: android.graphics.drawable.Drawable;

        $z0 = $r0 instanceof cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable;

        if $z0 == 0 goto label1;

        $r1 = (cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable) $r0;

        virtualinvoke $r1.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: void setBeingUsed(boolean)>(1);

     label1:
        return;
    }

    private static void onDrawableUnset(android.graphics.drawable.Drawable)
    {
        cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable $r1;
        android.graphics.drawable.Drawable $r0;
        boolean $z0;

        $r0 := @parameter0: android.graphics.drawable.Drawable;

        $z0 = $r0 instanceof cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable;

        if $z0 == 0 goto label1;

        $r1 = (cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable) $r0;

        virtualinvoke $r1.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: void setBeingUsed(boolean)>(0);

     label1:
        return;
    }

    protected void onDetachedFromWindow()
    {
        cn.ffcs.lib.bitmapcache.CacheableImageView r0;

        r0 := @this: cn.ffcs.lib.bitmapcache.CacheableImageView;

        specialinvoke r0.<android.widget.ImageView: void onDetachedFromWindow()>();

        virtualinvoke r0.<cn.ffcs.lib.bitmapcache.CacheableImageView: void setImageDrawable(android.graphics.drawable.Drawable)>(null);

        return;
    }

    public void setImageDrawable(android.graphics.drawable.Drawable)
    {
        android.graphics.drawable.Drawable $r1, $r2;
        cn.ffcs.lib.bitmapcache.CacheableImageView r0;

        r0 := @this: cn.ffcs.lib.bitmapcache.CacheableImageView;

        $r1 := @parameter0: android.graphics.drawable.Drawable;

        $r2 = virtualinvoke r0.<cn.ffcs.lib.bitmapcache.CacheableImageView: android.graphics.drawable.Drawable getDrawable()>();

        specialinvoke r0.<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>($r1);

        if $r1 == $r2 goto label1;

        staticinvoke <cn.ffcs.lib.bitmapcache.CacheableImageView: void onDrawableSet(android.graphics.drawable.Drawable)>($r1);

        staticinvoke <cn.ffcs.lib.bitmapcache.CacheableImageView: void onDrawableUnset(android.graphics.drawable.Drawable)>($r2);

     label1:
        return;
    }

    public void setImageResource(int)
    {
        int $i0;
        android.graphics.drawable.Drawable $r1;
        cn.ffcs.lib.bitmapcache.CacheableImageView r0;

        r0 := @this: cn.ffcs.lib.bitmapcache.CacheableImageView;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<cn.ffcs.lib.bitmapcache.CacheableImageView: android.graphics.drawable.Drawable getDrawable()>();

        specialinvoke r0.<android.widget.ImageView: void setImageResource(int)>($i0);

        staticinvoke <cn.ffcs.lib.bitmapcache.CacheableImageView: void onDrawableUnset(android.graphics.drawable.Drawable)>($r1);

        return;
    }

    public void setImageURI(android.net.Uri)
    {
        android.net.Uri $r1;
        android.graphics.drawable.Drawable $r2;
        cn.ffcs.lib.bitmapcache.CacheableImageView r0;

        r0 := @this: cn.ffcs.lib.bitmapcache.CacheableImageView;

        $r1 := @parameter0: android.net.Uri;

        $r2 = virtualinvoke r0.<cn.ffcs.lib.bitmapcache.CacheableImageView: android.graphics.drawable.Drawable getDrawable()>();

        specialinvoke r0.<android.widget.ImageView: void setImageURI(android.net.Uri)>($r1);

        staticinvoke <cn.ffcs.lib.bitmapcache.CacheableImageView: void onDrawableUnset(android.graphics.drawable.Drawable)>($r2);

        return;
    }
}
