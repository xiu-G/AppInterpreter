public class com.yang.longrubblishclear.util.SystemUninstallerApp extends android.app.Application
{
    public static final java.lang.String APK_CACHE_DIR;
    public static final java.lang.String BACKUP_DIR;
    public static java.lang.String DATA_DIR;
    private static com.yang.longrubblishclear.util.SystemUninstallerApp app;
    private com.yang.longrubblishclear.database.DbHelper dbHelper;
    private com.yang.longrubblishclear.util.ApkCacheHelper mApkCacheHelper;
    private com.yang.longrubblishclear.util.ShellCommand mShellCommand;
    public java.lang.String otherSdPath;

    static void <clinit>()
    {
        <com.yang.longrubblishclear.util.SystemUninstallerApp: java.lang.String BACKUP_DIR> = "/sdcard/.systemuninstaller/backup";

        <com.yang.longrubblishclear.util.SystemUninstallerApp: java.lang.String APK_CACHE_DIR> = "/sdcard/.systemuninstaller/.apkcache";

        <com.yang.longrubblishclear.util.SystemUninstallerApp: java.lang.String DATA_DIR> = "/data/data";

        return;
    }

    public void <init>()
    {
        com.yang.longrubblishclear.util.SystemUninstallerApp r0;

        r0 := @this: com.yang.longrubblishclear.util.SystemUninstallerApp;

        specialinvoke r0.<android.app.Application: void <init>()>();

        r0.<com.yang.longrubblishclear.util.SystemUninstallerApp: java.lang.String otherSdPath> = null;

        return;
    }

    public static void cancelUpdateBroadcast(android.content.Context)
    {
        android.content.Context $r0;
        android.app.AlarmManager r3;
        android.content.Intent r1;
        java.lang.Object $r2;
        android.app.PendingIntent $r4;

        $r0 := @parameter0: android.content.Context;

        $r2 = virtualinvoke $r0.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("alarm");

        r3 = (android.app.AlarmManager) $r2;

        r1 = new android.content.Intent;

        specialinvoke r1.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>($r0, class "Lcom/yang/longrubblishclear/service/ClearReceiver;");

        $r4 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>($r0, 0, r1, 0);

        virtualinvoke r3.<android.app.AlarmManager: void cancel(android.app.PendingIntent)>($r4);

        return;
    }

    public static final com.yang.longrubblishclear.util.SystemUninstallerApp getInstance()
    {
        com.yang.longrubblishclear.util.SystemUninstallerApp r0;

        r0 = <com.yang.longrubblishclear.util.SystemUninstallerApp: com.yang.longrubblishclear.util.SystemUninstallerApp app>;

        return r0;
    }

    public static void sendUpdateBroadcastRepeat(android.content.Context, int)
    {
        android.content.Context $r0;
        android.app.AlarmManager r3;
        long l1, $l2;
        android.content.Intent $r4;
        android.app.PendingIntent $r1;
        int $i0, $i3;
        java.lang.Object $r2;

        $r0 := @parameter0: android.content.Context;

        $i0 := @parameter1: int;

        $r4 = new android.content.Intent;

        specialinvoke $r4.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>($r0, class "Lcom/yang/longrubblishclear/service/ClearReceiver;");

        $r1 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>($r0, 0, $r4, 0);

        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $i3 = $i0 * 60000;

        l1 = (long) $i3;

        l1 = $l2 + l1;

        $r2 = virtualinvoke $r0.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("alarm");

        r3 = (android.app.AlarmManager) $r2;

        $i0 = $i0 * 60000;

        $l2 = (long) $i0;

        virtualinvoke r3.<android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)>(2, l1, $l2, $r1);

        return;
    }

    public void addLog(com.yang.longrubblishclear.util.APKInfo, boolean)
    {
        com.yang.longrubblishclear.util.APKInfo $r1;
        com.yang.longrubblishclear.util.SystemUninstallerApp r0;
        com.yang.longrubblishclear.database.DbHelper $r2;
        boolean $z0;

        r0 := @this: com.yang.longrubblishclear.util.SystemUninstallerApp;

        $r1 := @parameter0: com.yang.longrubblishclear.util.APKInfo;

        $z0 := @parameter1: boolean;

        $r2 = r0.<com.yang.longrubblishclear.util.SystemUninstallerApp: com.yang.longrubblishclear.database.DbHelper dbHelper>;

        virtualinvoke $r2.<com.yang.longrubblishclear.database.DbHelper: void addLog(com.yang.longrubblishclear.util.APKInfo,boolean)>($r1, $z0);

        return;
    }

    public boolean backupApk(com.yang.longrubblishclear.util.APKInfo)
    {
        com.yang.longrubblishclear.util.APKInfo $r1;
        java.io.File r2, r3, r5, $r6;
        com.yang.longrubblishclear.util.ShellCommand $r8;
        com.yang.longrubblishclear.util.SystemUninstallerApp r0;
        java.lang.StringBuilder $r7;
        com.yang.longrubblishclear.util.ShellCommand$SH $r9;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: com.yang.longrubblishclear.util.SystemUninstallerApp;

        $r1 := @parameter0: com.yang.longrubblishclear.util.APKInfo;

        r2 = new java.io.File;

        specialinvoke r2.<java.io.File: void <init>(java.lang.String)>("/sdcard/.systemuninstaller/backup");

        $z0 = virtualinvoke r2.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke r2.<java.io.File: boolean mkdirs()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $z0 = $r1.<com.yang.longrubblishclear.util.APKInfo: boolean systemApp>;

        if $z0 == 0 goto label3;

        r3 = new java.io.File;

        $r4 = $r1.<com.yang.longrubblishclear.util.APKInfo: java.lang.String sourceDir>;

        $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("apk", "odex");

        specialinvoke r3.<java.io.File: void <init>(java.lang.String)>($r4);

        r5 = new java.io.File;

        $r4 = $r1.<com.yang.longrubblishclear.util.APKInfo: java.lang.String sourceDir>;

        specialinvoke r5.<java.io.File: void <init>(java.lang.String)>($r4);

        $r6 = new java.io.File;

        $r7 = new java.lang.StringBuilder;

        $r4 = virtualinvoke r5.<java.io.File: java.lang.String getName()>();

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4);

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".system.backup");

        $r4 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>(r2, $r4);

        virtualinvoke $r6.<java.io.File: boolean delete()>();

        $r6 = new java.io.File;

        $r7 = new java.lang.StringBuilder;

        $r4 = virtualinvoke r5.<java.io.File: java.lang.String getName()>();

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4);

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".system.backup");

        $r4 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>(r2, $r4);

        $z0 = staticinvoke <com.yang.longrubblishclear.util.Tools: boolean moveTo(java.io.File,java.io.File)>($r6, r5);

        if $z0 == 0 goto label4;

        $z0 = virtualinvoke r3.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label2;

        r5 = new java.io.File;

        $r4 = virtualinvoke r3.<java.io.File: java.lang.String getName()>();

        specialinvoke r5.<java.io.File: void <init>(java.io.File,java.lang.String)>(r2, $r4);

        virtualinvoke r5.<java.io.File: boolean delete()>();

        r5 = new java.io.File;

        $r4 = virtualinvoke r3.<java.io.File: java.lang.String getName()>();

        specialinvoke r5.<java.io.File: void <init>(java.io.File,java.lang.String)>(r2, $r4);

        $z0 = staticinvoke <com.yang.longrubblishclear.util.Tools: boolean moveTo(java.io.File,java.io.File)>(r5, r3);

        if $z0 == 0 goto label4;

     label2:
        $r8 = virtualinvoke r0.<com.yang.longrubblishclear.util.SystemUninstallerApp: com.yang.longrubblishclear.util.ShellCommand getShellCommand()>();

        $r9 = $r8.<com.yang.longrubblishclear.util.ShellCommand: com.yang.longrubblishclear.util.ShellCommand$SH su>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("tar czf /sdcard/.systemuninstaller/backup/");

        $r4 = $r1.<com.yang.longrubblishclear.util.APKInfo: java.lang.String packageName>;

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".tar.gz ");

        $r4 = $r1.<com.yang.longrubblishclear.util.APKInfo: java.lang.String dataDir>;

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<com.yang.longrubblishclear.util.ShellCommand$SH: com.yang.longrubblishclear.util.ShellCommand$CommandResult runWaitFor(java.lang.String)>($r4);

        return 1;

     label3:
        r3 = new java.io.File;

        $r4 = $r1.<com.yang.longrubblishclear.util.APKInfo: java.lang.String sourceDir>;

        specialinvoke r3.<java.io.File: void <init>(java.lang.String)>($r4);

        r5 = new java.io.File;

        $r7 = new java.lang.StringBuilder;

        $r4 = $r1.<com.yang.longrubblishclear.util.APKInfo: java.lang.String packageName>;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4);

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".apk.backup");

        $r4 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r5.<java.io.File: void <init>(java.io.File,java.lang.String)>(r2, $r4);

        virtualinvoke r5.<java.io.File: boolean delete()>();

        r5 = new java.io.File;

        $r7 = new java.lang.StringBuilder;

        $r4 = $r1.<com.yang.longrubblishclear.util.APKInfo: java.lang.String packageName>;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4);

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".apk.backup");

        $r4 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r5.<java.io.File: void <init>(java.io.File,java.lang.String)>(r2, $r4);

        $z0 = staticinvoke <com.yang.longrubblishclear.util.Tools: boolean moveTo(java.io.File,java.io.File)>(r5, r3);

        if $z0 != 0 goto label2;

     label4:
        return 0;
    }

    public com.yang.longrubblishclear.util.ApkCacheHelper getApkCacheHelper()
    {
        java.lang.Throwable $r3;
        com.yang.longrubblishclear.util.ApkCacheHelper $r2;
        com.yang.longrubblishclear.util.SystemUninstallerApp r0;
        java.io.File $r1;

        r0 := @this: com.yang.longrubblishclear.util.SystemUninstallerApp;

        entermonitor r0;

     label1:
        $r2 = r0.<com.yang.longrubblishclear.util.SystemUninstallerApp: com.yang.longrubblishclear.util.ApkCacheHelper mApkCacheHelper>;

        if $r2 != null goto label2;

        $r2 = new com.yang.longrubblishclear.util.ApkCacheHelper;

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>("/sdcard/.systemuninstaller/.apkcache");

        specialinvoke $r2.<com.yang.longrubblishclear.util.ApkCacheHelper: void <init>(android.content.Context,java.io.File)>(r0, $r1);

        r0.<com.yang.longrubblishclear.util.SystemUninstallerApp: com.yang.longrubblishclear.util.ApkCacheHelper mApkCacheHelper> = $r2;

     label2:
        $r2 = r0.<com.yang.longrubblishclear.util.SystemUninstallerApp: com.yang.longrubblishclear.util.ApkCacheHelper mApkCacheHelper>;

     label3:
        exitmonitor r0;

        return $r2;

     label4:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label3 with label4;
    }

    public com.yang.longrubblishclear.database.DbHelper getDbHelper()
    {
        com.yang.longrubblishclear.util.SystemUninstallerApp r0;
        com.yang.longrubblishclear.database.DbHelper r1;

        r0 := @this: com.yang.longrubblishclear.util.SystemUninstallerApp;

        r1 = r0.<com.yang.longrubblishclear.util.SystemUninstallerApp: com.yang.longrubblishclear.database.DbHelper dbHelper>;

        return r1;
    }

    public com.yang.longrubblishclear.util.ShellCommand getShellCommand()
    {
        java.lang.Throwable r8, r9;
        com.yang.longrubblishclear.util.SystemUninstallerApp r0;
        int $i0;
        java.lang.String r4, $r5;
        boolean $z0;
        java.io.IOException $r16;
        java.io.File $r11;
        java.io.FileNotFoundException $r15;
        com.yang.longrubblishclear.util.ShellCommand $r3, $r10;
        com.yang.longrubblishclear.util.ShellCommand$SH $r6;
        java.lang.StringBuilder $r7, $r14;
        java.io.BufferedReader r1, $r13;
        java.io.FileReader r2, $r12;

        r0 := @this: com.yang.longrubblishclear.util.SystemUninstallerApp;

        $r3 = r0.<com.yang.longrubblishclear.util.SystemUninstallerApp: com.yang.longrubblishclear.util.ShellCommand mShellCommand>;

        if $r3 != null goto label07;

        $r10 = new com.yang.longrubblishclear.util.ShellCommand;

        specialinvoke $r10.<com.yang.longrubblishclear.util.ShellCommand: void <init>()>();

        r0.<com.yang.longrubblishclear.util.SystemUninstallerApp: com.yang.longrubblishclear.util.ShellCommand mShellCommand> = $r10;

        $r3 = r0.<com.yang.longrubblishclear.util.SystemUninstallerApp: com.yang.longrubblishclear.util.ShellCommand mShellCommand>;

        $z0 = virtualinvoke $r3.<com.yang.longrubblishclear.util.ShellCommand: boolean canSU()>();

        if $z0 == 0 goto label07;

        $r11 = new java.io.File;

        specialinvoke $r11.<java.io.File: void <init>(java.lang.String)>("/system/app");

        $z0 = virtualinvoke $r11.<java.io.File: boolean canWrite()>();

        if $z0 != 0 goto label07;

        r4 = "/dev/block/mtdblock3";

        $r12 = new java.io.FileReader;

        r2 = $r12;

     label01:
        specialinvoke $r12.<java.io.FileReader: void <init>(java.lang.String)>("/proc/mounts");

     label02:
        $r13 = new java.io.BufferedReader;

        r1 = $r13;

     label03:
        specialinvoke $r13.<java.io.BufferedReader: void <init>(java.io.Reader)>(r2);

     label04:
        $r5 = virtualinvoke r1.<java.io.BufferedReader: java.lang.String readLine()>();

     label05:
        if $r5 != null goto label08;

     label06:
        $r3 = r0.<com.yang.longrubblishclear.util.SystemUninstallerApp: com.yang.longrubblishclear.util.ShellCommand mShellCommand>;

        $r6 = $r3.<com.yang.longrubblishclear.util.ShellCommand: com.yang.longrubblishclear.util.ShellCommand$SH su>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("mount -o remount,rw ");

        $r7 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" /system");

        r4 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<com.yang.longrubblishclear.util.ShellCommand$SH: com.yang.longrubblishclear.util.ShellCommand$CommandResult runWaitFor(java.lang.String)>(r4);

        $r3 = r0.<com.yang.longrubblishclear.util.SystemUninstallerApp: com.yang.longrubblishclear.util.ShellCommand mShellCommand>;

        $r6 = $r3.<com.yang.longrubblishclear.util.ShellCommand: com.yang.longrubblishclear.util.ShellCommand$SH su>;

        virtualinvoke $r6.<com.yang.longrubblishclear.util.ShellCommand$SH: com.yang.longrubblishclear.util.ShellCommand$CommandResult runWaitFor(java.lang.String)>("chmod 0777 /system/app");

     label07:
        $r3 = r0.<com.yang.longrubblishclear.util.SystemUninstallerApp: com.yang.longrubblishclear.util.ShellCommand mShellCommand>;

        return $r3;

     label08:
        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r5);

     label09:
        if $z0 != 0 goto label04;

     label10:
        $z0 = virtualinvoke $r5.<java.lang.String: boolean contains(java.lang.CharSequence)>("/system");

     label11:
        if $z0 == 0 goto label04;

     label12:
        $i0 = virtualinvoke $r5.<java.lang.String: int indexOf(java.lang.String)>(" ");

        $r5 = virtualinvoke $r5.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

     label13:
        r4 = $r5;

     label14:
        staticinvoke <com.yang.longrubblishclear.util.Debug: void d(java.lang.String)>($r5);

     label15:
        goto label06;

     label16:
        r8 := @caughtexception;

        $r15 = (java.io.FileNotFoundException) r8;

        virtualinvoke $r15.<java.io.FileNotFoundException: void printStackTrace()>();

        goto label06;

     label17:
        r9 := @caughtexception;

        $r16 = (java.io.IOException) r9;

        virtualinvoke $r16.<java.io.IOException: void printStackTrace()>();

        goto label06;

        catch java.io.FileNotFoundException from label01 to label02 with label16;
        catch java.io.FileNotFoundException from label03 to label05 with label16;
        catch java.io.IOException from label01 to label02 with label17;
        catch java.io.IOException from label03 to label05 with label17;
        catch java.io.FileNotFoundException from label08 to label09 with label16;
        catch java.io.FileNotFoundException from label10 to label11 with label16;
        catch java.io.FileNotFoundException from label12 to label13 with label16;
        catch java.io.FileNotFoundException from label14 to label15 with label16;
        catch java.io.IOException from label08 to label09 with label17;
        catch java.io.IOException from label10 to label11 with label17;
        catch java.io.IOException from label12 to label13 with label17;
        catch java.io.IOException from label14 to label15 with label17;
    }

    public boolean isBackuped(com.yang.longrubblishclear.util.APKInfo)
    {
        com.yang.longrubblishclear.util.APKInfo $r1;
        com.yang.longrubblishclear.util.SystemUninstallerApp r0;
        java.lang.StringBuilder $r5;
        java.lang.String $r3;
        java.io.File r2, $r4;
        boolean $z0;

        r0 := @this: com.yang.longrubblishclear.util.SystemUninstallerApp;

        $r1 := @parameter0: com.yang.longrubblishclear.util.APKInfo;

        $z0 = $r1.<com.yang.longrubblishclear.util.APKInfo: boolean systemApp>;

        if $z0 == 0 goto label1;

        r2 = new java.io.File;

        $r3 = $r1.<com.yang.longrubblishclear.util.APKInfo: java.lang.String sourceDir>;

        specialinvoke r2.<java.io.File: void <init>(java.lang.String)>($r3);

        $r4 = new java.io.File;

        $r5 = new java.lang.StringBuilder;

        $r3 = virtualinvoke r2.<java.io.File: java.lang.String getName()>();

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>($r3);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".system.backup");

        $r3 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String,java.lang.String)>("/sdcard/.systemuninstaller/backup", $r3);

        $z0 = virtualinvoke $r4.<java.io.File: boolean exists()>();

        return $z0;

     label1:
        r2 = new java.io.File;

        $r5 = new java.lang.StringBuilder;

        $r3 = $r1.<com.yang.longrubblishclear.util.APKInfo: java.lang.String packageName>;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>($r3);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".apk.backup");

        $r3 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r2.<java.io.File: void <init>(java.lang.String,java.lang.String)>("/sdcard/.systemuninstaller/backup", $r3);

        $z0 = virtualinvoke r2.<java.io.File: boolean exists()>();

        return $z0;
    }

    public void onCreate()
    {
        com.yang.longrubblishclear.util.SystemUninstallerApp r0;
        com.yang.longrubblishclear.database.DbHelper $r1;

        r0 := @this: com.yang.longrubblishclear.util.SystemUninstallerApp;

        specialinvoke r0.<android.app.Application: void onCreate()>();

        <com.yang.longrubblishclear.util.SystemUninstallerApp: com.yang.longrubblishclear.util.SystemUninstallerApp app> = r0;

        $r1 = new com.yang.longrubblishclear.database.DbHelper;

        specialinvoke $r1.<com.yang.longrubblishclear.database.DbHelper: void <init>(android.content.Context)>(r0);

        r0.<com.yang.longrubblishclear.util.SystemUninstallerApp: com.yang.longrubblishclear.database.DbHelper dbHelper> = $r1;

        return;
    }
}
