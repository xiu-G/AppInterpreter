final class cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache extends android.support.v4.util.LruCache
{
    private final cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy mRecyclePolicy;
    private final java.util.Set mRemovedEntries;

    void <init>(int, cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy)
    {
        java.util.HashSet $r2;
        cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache r0;
        int $i0;
        java.util.Set $r3;
        cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy $r1;
        boolean $z0;

        r0 := @this: cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache;

        $i0 := @parameter0: int;

        $r1 := @parameter1: cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy;

        specialinvoke r0.<android.support.v4.util.LruCache: void <init>(int)>($i0);

        r0.<cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache: cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy mRecyclePolicy> = $r1;

        $z0 = virtualinvoke $r1.<cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy: boolean canInBitmap()>();

        if $z0 == 0 goto label2;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        $r3 = staticinvoke <java.util.Collections: java.util.Set synchronizedSet(java.util.Set)>($r2);

     label1:
        r0.<cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache: java.util.Set mRemovedEntries> = $r3;

        return;

     label2:
        $r3 = null;

        goto label1;
    }

    protected volatile void entryRemoved(boolean, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache r0;
        cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable $r5, $r6;
        java.lang.Object $r1, $r2, $r3;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.Object;

        $r3 := @parameter3: java.lang.Object;

        $r4 = (java.lang.String) $r1;

        $r5 = (cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable) $r2;

        $r6 = (cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable) $r3;

        virtualinvoke r0.<cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache: void entryRemoved(boolean,java.lang.String,cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable,cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable)>($z0, $r4, $r5, $r6);

        return;
    }

    protected void entryRemoved(boolean, java.lang.String, cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable, cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable)
    {
        java.lang.Throwable $r7;
        cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache r0;
        java.util.Set $r4, $r6;
        cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable $r2, $r3;
        java.lang.String $r1;
        java.lang.ref.SoftReference $r5;
        boolean $z0;

        r0 := @this: cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable;

        $r3 := @parameter3: cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable;

        virtualinvoke $r2.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: void setCached(boolean)>(0);

        $r4 = r0.<cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache: java.util.Set mRemovedEntries>;

        if $r4 == null goto label5;

        $z0 = virtualinvoke $r2.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: boolean isBitmapValid()>();

        if $z0 == 0 goto label5;

        $z0 = virtualinvoke $r2.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: boolean isBitmapMutable()>();

        if $z0 == 0 goto label5;

        $r4 = r0.<cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache: java.util.Set mRemovedEntries>;

        entermonitor $r4;

     label1:
        $r6 = r0.<cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache: java.util.Set mRemovedEntries>;

        $r5 = new java.lang.ref.SoftReference;

        specialinvoke $r5.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>($r2);

        interfaceinvoke $r6.<java.util.Set: boolean add(java.lang.Object)>($r5);

        exitmonitor $r4;

     label2:
        return;

     label3:
        $r7 := @caughtexception;

        exitmonitor $r4;

     label4:
        throw $r7;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    android.graphics.Bitmap getBitmapFromRemoved(int, int)
    {
        java.lang.Throwable $r8;
        java.util.Iterator $r4;
        cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache r0;
        java.util.Set $r1, $r3;
        android.graphics.Bitmap r2;
        int $i0, $i1, $i2;
        cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable r7;
        java.lang.Object $r5;
        java.lang.ref.SoftReference $r6;
        boolean $z0;

        r0 := @this: cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = r0.<cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache: java.util.Set mRemovedEntries>;

        if $r1 != null goto label1;

        return null;

     label1:
        r2 = null;

        $r1 = r0.<cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache: java.util.Set mRemovedEntries>;

        entermonitor $r1;

     label2:
        $r3 = r0.<cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache: java.util.Set mRemovedEntries>;

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.lang.ref.SoftReference) $r5;

        $r5 = virtualinvoke $r6.<java.lang.ref.SoftReference: java.lang.Object get()>();

        r7 = (cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable) $r5;

        if r7 == null goto label8;

        $z0 = virtualinvoke r7.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: boolean isBitmapValid()>();

        if $z0 == 0 goto label8;

        $z0 = virtualinvoke r7.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: boolean isBitmapMutable()>();

        if $z0 == 0 goto label8;

        $i2 = virtualinvoke r7.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: int getIntrinsicWidth()>();

        if $i2 != $i0 goto label3;

        $i2 = virtualinvoke r7.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: int getIntrinsicHeight()>();

        if $i2 != $i1 goto label3;

        interfaceinvoke $r4.<java.util.Iterator: void remove()>();

        r2 = virtualinvoke r7.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: android.graphics.Bitmap getBitmap()>();

     label4:
        exitmonitor $r1;

     label5:
        return r2;

     label6:
        $r8 := @caughtexception;

        exitmonitor $r1;

     label7:
        throw $r8;

     label8:
        interfaceinvoke $r4.<java.util.Iterator: void remove()>();

     label9:
        goto label3;

        catch java.lang.Throwable from label2 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
        catch java.lang.Throwable from label8 to label9 with label6;
    }

    cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy getRecyclePolicy()
    {
        cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache r0;
        cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy r1;

        r0 := @this: cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache;

        r1 = r0.<cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache: cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy mRecyclePolicy>;

        return r1;
    }

    cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable put(cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable)
    {
        cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache r0;
        cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable $r1;
        java.lang.Object $r3;
        java.lang.String $r2;

        r0 := @this: cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache;

        $r1 := @parameter0: cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable;

        if $r1 == null goto label1;

        virtualinvoke $r1.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: void setCached(boolean)>(1);

        $r2 = virtualinvoke $r1.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: java.lang.String getUrl()>();

        $r3 = virtualinvoke r0.<cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r1);

        $r1 = (cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable) $r3;

        return $r1;

     label1:
        return null;
    }

    protected volatile int sizeOf(java.lang.Object, java.lang.Object)
    {
        cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache r0;
        int $i0;
        cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable $r4;
        java.lang.Object $r1, $r2;
        java.lang.String $r3;

        r0 := @this: cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = (java.lang.String) $r1;

        $r4 = (cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable) $r2;

        $i0 = virtualinvoke r0.<cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache: int sizeOf(java.lang.String,cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable)>($r3, $r4);

        return $i0;
    }

    protected int sizeOf(java.lang.String, cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable)
    {
        cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache r0;
        cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable $r2;
        int $i0;
        java.lang.String $r1;

        r0 := @this: cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable;

        $i0 = virtualinvoke $r2.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: int getMemorySize()>();

        return $i0;
    }

    void trimMemory()
    {
        java.util.Map$Entry r5;
        java.util.Iterator $r3;
        cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache r0;
        java.util.Set $r2;
        java.util.Map $r1;
        cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable r6;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache;

        $r1 = virtualinvoke r0.<cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache: java.util.Map snapshot()>();

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r4 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        r6 = (cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable) $r4;

        if r6 == null goto label2;

        $z0 = virtualinvoke r6.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: boolean isBeingDisplayed()>();

        if $z0 != 0 goto label1;

     label2:
        $r4 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        virtualinvoke r0.<cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache: java.lang.Object remove(java.lang.Object)>($r4);

        goto label1;

     label3:
        return;
    }
}
