public final class u.aly.ca extends java.lang.Object
{
    private static final java.util.Comparator a;

    static void <clinit>()
    {
        u.aly.ca$a $r0;

        $r0 = new u.aly.ca$a;

        specialinvoke $r0.<u.aly.ca$a: void <init>(u.aly.ca$1)>(null);

        <u.aly.ca: java.util.Comparator a> = $r0;

        return;
    }

    private void <init>()
    {
        u.aly.ca r0;

        r0 := @this: u.aly.ca;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int a(byte, byte)
    {
        byte $b0, $b1;
        int $i2, $i3;

        $b0 := @parameter0: byte;

        $b1 := @parameter1: byte;

        $i2 = (int) $b0;

        $i3 = (int) $b1;

        if $i2 >= $i3 goto label1;

        $i2 = -1;

        return $i2;

     label1:
        $i2 = (int) $b1;

        $i3 = (int) $b0;

        if $i2 >= $i3 goto label2;

        return 1;

     label2:
        return 0;
    }

    public static int a(double, double)
    {
        byte $b0;
        int $i1;
        double $d0, $d1;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $b0 = $d0 cmpg $d1;

        $i1 = (int) $b0;

        if $i1 >= 0 goto label1;

        $i1 = -1;

        return $i1;

     label1:
        $b0 = $d1 cmpg $d0;

        $i1 = (int) $b0;

        if $i1 >= 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    public static int a(int, int)
    {
        int $i0, $i1;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        if $i0 >= $i1 goto label1;

        $i0 = -1;

        return $i0;

     label1:
        if $i1 >= $i0 goto label2;

        return 1;

     label2:
        return 0;
    }

    public static int a(long, long)
    {
        byte $b2;
        int $i3;
        long $l0, $l1;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $b2 = $l0 cmp $l1;

        $i3 = (int) $b2;

        if $i3 >= 0 goto label1;

        $i3 = -1;

        return $i3;

     label1:
        $b2 = $l1 cmp $l0;

        $i3 = (int) $b2;

        if $i3 >= 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    public static int a(java.lang.Comparable, java.lang.Comparable)
    {
        int $i0;
        java.lang.Comparable $r0, $r1;

        $r0 := @parameter0: java.lang.Comparable;

        $r1 := @parameter1: java.lang.Comparable;

        $i0 = interfaceinvoke $r0.<java.lang.Comparable: int compareTo(java.lang.Object)>($r1);

        return $i0;
    }

    public static int a(java.lang.Object, java.lang.Object)
    {
        byte[] $r10, $r11;
        java.util.Map $r8, $r9;
        int $i0;
        java.lang.String $r15;
        boolean $z0;
        java.util.Set $r6, $r7;
        java.lang.IllegalArgumentException $r12;
        java.util.List $r4, $r5;
        java.lang.Object $r0, $r1;
        java.lang.Comparable $r2, $r3;
        java.lang.StringBuilder $r13;
        java.lang.Class $r14;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $z0 = $r0 instanceof java.lang.Comparable;

        if $z0 == 0 goto label1;

        $r2 = (java.lang.Comparable) $r0;

        $r3 = (java.lang.Comparable) $r1;

        $i0 = staticinvoke <u.aly.ca: int a(java.lang.Comparable,java.lang.Comparable)>($r2, $r3);

        return $i0;

     label1:
        $z0 = $r0 instanceof java.util.List;

        if $z0 == 0 goto label2;

        $r4 = (java.util.List) $r0;

        $r5 = (java.util.List) $r1;

        $i0 = staticinvoke <u.aly.ca: int a(java.util.List,java.util.List)>($r4, $r5);

        return $i0;

     label2:
        $z0 = $r0 instanceof java.util.Set;

        if $z0 == 0 goto label3;

        $r6 = (java.util.Set) $r0;

        $r7 = (java.util.Set) $r1;

        $i0 = staticinvoke <u.aly.ca: int a(java.util.Set,java.util.Set)>($r6, $r7);

        return $i0;

     label3:
        $z0 = $r0 instanceof java.util.Map;

        if $z0 == 0 goto label4;

        $r8 = (java.util.Map) $r0;

        $r9 = (java.util.Map) $r1;

        $i0 = staticinvoke <u.aly.ca: int a(java.util.Map,java.util.Map)>($r8, $r9);

        return $i0;

     label4:
        $z0 = $r0 instanceof byte[];

        if $z0 == 0 goto label5;

        $r10 = (byte[]) $r0;

        $r11 = (byte[]) $r1;

        $i0 = staticinvoke <u.aly.ca: int a(byte[],byte[])>($r10, $r11);

        return $i0;

     label5:
        $r12 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot compare objects of type ");

        $r14 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r12;
    }

    public static int a(java.lang.String, java.lang.String)
    {
        int $i0;
        java.lang.String $r0, $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $i0 = virtualinvoke $r0.<java.lang.String: int compareTo(java.lang.String)>($r1);

        return $i0;
    }

    public static int a(java.nio.ByteBuffer, byte[], int)
    {
        byte[] $r1, $r2;
        int $i0, $i1, $i2, $i3;
        java.nio.ByteBuffer $r0;

        $r0 := @parameter0: java.nio.ByteBuffer;

        $r1 := @parameter1: byte[];

        $i0 := @parameter2: int;

        $i1 = virtualinvoke $r0.<java.nio.ByteBuffer: int remaining()>();

        $r2 = virtualinvoke $r0.<java.nio.ByteBuffer: byte[] array()>();

        $i2 = virtualinvoke $r0.<java.nio.ByteBuffer: int arrayOffset()>();

        $i3 = virtualinvoke $r0.<java.nio.ByteBuffer: int position()>();

        $i2 = $i2 + $i3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i2, $r1, $i0, $i1);

        return $i1;
    }

    public static int a(java.util.List, java.util.List)
    {
        java.util.List $r0, $r1;
        int $i0, $i1;
        java.lang.Object $r3, $r4;
        java.util.Comparator $r2;

        $r0 := @parameter0: java.util.List;

        $r1 := @parameter1: java.util.List;

        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i0 = staticinvoke <u.aly.ca: int a(int,int)>($i0, $i1);

        if $i0 == 0 goto label1;

        return $i0;

     label1:
        $i0 = 0;

     label2:
        $i1 = interfaceinvoke $r0.<java.util.List: int size()>();

        if $i0 >= $i1 goto label4;

        $r2 = <u.aly.ca: java.util.Comparator a>;

        $r3 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>($i0);

        $r4 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        $i1 = interfaceinvoke $r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r3, $r4);

        if $i1 == 0 goto label3;

        return $i1;

     label3:
        $i0 = $i0 + 1;

        goto label2;

     label4:
        return 0;
    }

    public static int a(java.util.Map, java.util.Map)
    {
        java.util.Map$Entry $r8, $r9;
        java.util.Iterator $r5, $r6;
        java.util.Set $r4;
        java.util.TreeMap $r2;
        java.util.Map $r0, $r1;
        int $i0, $i1;
        java.lang.Object $r7, $r10;
        java.util.Comparator $r3;
        boolean $z0;

        $r0 := @parameter0: java.util.Map;

        $r1 := @parameter1: java.util.Map;

        $i0 = interfaceinvoke $r0.<java.util.Map: int size()>();

        $i1 = interfaceinvoke $r1.<java.util.Map: int size()>();

        $i0 = staticinvoke <u.aly.ca: int a(int,int)>($i0, $i1);

        if $i0 == 0 goto label1;

        return $i0;

     label1:
        $r2 = new java.util.TreeMap;

        $r3 = <u.aly.ca: java.util.Comparator a>;

        specialinvoke $r2.<java.util.TreeMap: void <init>(java.util.Comparator)>($r3);

        interfaceinvoke $r2.<java.util.SortedMap: void putAll(java.util.Map)>($r0);

        $r4 = interfaceinvoke $r2.<java.util.SortedMap: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

        $r2 = new java.util.TreeMap;

        $r3 = <u.aly.ca: java.util.Comparator a>;

        specialinvoke $r2.<java.util.TreeMap: void <init>(java.util.Comparator)>($r3);

        interfaceinvoke $r2.<java.util.SortedMap: void putAll(java.util.Map)>($r1);

        $r4 = interfaceinvoke $r2.<java.util.SortedMap: java.util.Set entrySet()>();

        $r6 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r7 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (java.util.Map$Entry) $r7;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (java.util.Map$Entry) $r7;

        $r3 = <u.aly.ca: java.util.Comparator a>;

        $r7 = interfaceinvoke $r8.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r10 = interfaceinvoke $r9.<java.util.Map$Entry: java.lang.Object getKey()>();

        $i0 = interfaceinvoke $r3.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r7, $r10);

        if $i0 == 0 goto label3;

        return $i0;

     label3:
        $r3 = <u.aly.ca: java.util.Comparator a>;

        $r7 = interfaceinvoke $r8.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r10 = interfaceinvoke $r9.<java.util.Map$Entry: java.lang.Object getValue()>();

        $i0 = interfaceinvoke $r3.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r7, $r10);

        if $i0 == 0 goto label2;

        return $i0;

     label4:
        return 0;
    }

    public static int a(java.util.Set, java.util.Set)
    {
        java.util.Iterator $r5, $r6;
        java.util.Set $r0, $r1;
        java.util.TreeSet $r2, $r4;
        int $i0, $i1;
        java.lang.Object $r7, $r8;
        java.util.Comparator $r3;
        boolean $z0;

        $r0 := @parameter0: java.util.Set;

        $r1 := @parameter1: java.util.Set;

        $i0 = interfaceinvoke $r0.<java.util.Set: int size()>();

        $i1 = interfaceinvoke $r1.<java.util.Set: int size()>();

        $i0 = staticinvoke <u.aly.ca: int a(int,int)>($i0, $i1);

        if $i0 == 0 goto label1;

        return $i0;

     label1:
        $r2 = new java.util.TreeSet;

        $r3 = <u.aly.ca: java.util.Comparator a>;

        specialinvoke $r2.<java.util.TreeSet: void <init>(java.util.Comparator)>($r3);

        interfaceinvoke $r2.<java.util.SortedSet: boolean addAll(java.util.Collection)>($r0);

        $r4 = new java.util.TreeSet;

        $r3 = <u.aly.ca: java.util.Comparator a>;

        specialinvoke $r4.<java.util.TreeSet: void <init>(java.util.Comparator)>($r3);

        interfaceinvoke $r4.<java.util.SortedSet: boolean addAll(java.util.Collection)>($r1);

        $r5 = interfaceinvoke $r2.<java.util.SortedSet: java.util.Iterator iterator()>();

        $r6 = interfaceinvoke $r4.<java.util.SortedSet: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = <u.aly.ca: java.util.Comparator a>;

        $r7 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $i0 = interfaceinvoke $r3.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r7, $r8);

        if $i0 == 0 goto label2;

        return $i0;

     label3:
        return 0;
    }

    public static int a(short, short)
    {
        short $s0, $s1;
        int $i2, $i3;

        $s0 := @parameter0: short;

        $s1 := @parameter1: short;

        $i2 = (int) $s0;

        $i3 = (int) $s1;

        if $i2 >= $i3 goto label1;

        $i2 = -1;

        return $i2;

     label1:
        $i2 = (int) $s1;

        $i3 = (int) $s0;

        if $i2 >= $i3 goto label2;

        return 1;

     label2:
        return 0;
    }

    public static int a(boolean, boolean)
    {
        int $i0;
        java.lang.Boolean $r0, $r1;
        boolean $z0, $z1;

        $z0 := @parameter0: boolean;

        $z1 := @parameter1: boolean;

        $r0 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        $i0 = virtualinvoke $r0.<java.lang.Boolean: int compareTo(java.lang.Boolean)>($r1);

        return $i0;
    }

    public static int a(byte[], byte[])
    {
        byte[] $r0, $r1;
        byte $b0, $b3;
        int $i1, $i2;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $i1 = lengthof $r0;

        $i2 = lengthof $r1;

        $i1 = staticinvoke <u.aly.ca: int a(int,int)>($i1, $i2);

        if $i1 == 0 goto label1;

        return $i1;

     label1:
        $i1 = 0;

     label2:
        $i2 = lengthof $r0;

        if $i1 >= $i2 goto label4;

        $b3 = $r0[$i1];

        $b0 = $r1[$i1];

        $i2 = staticinvoke <u.aly.ca: int a(byte,byte)>($b3, $b0);

        if $i2 == 0 goto label3;

        return $i2;

     label3:
        $i1 = $i1 + 1;

        goto label2;

     label4:
        return 0;
    }

    public static java.lang.String a(byte)
    {
        short $s1;
        byte $b0;
        int $i2;
        java.lang.String $r0;

        $b0 := @parameter0: byte;

        $s1 = (short) $b0;

        $s1 = $s1 | 256;

        $s1 = $s1 & 511;

        $i2 = (int) $s1;

        $r0 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i2);

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String toUpperCase()>();

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int)>(1);

        return $r0;
    }

    public static void a(java.nio.ByteBuffer, java.lang.StringBuilder)
    {
        byte[] $r2;
        java.nio.ByteBuffer $r0;
        byte $b4;
        int $i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r1;
        java.lang.String $r3;

        $r0 := @parameter0: java.nio.ByteBuffer;

        $r1 := @parameter1: java.lang.StringBuilder;

        $r2 = virtualinvoke $r0.<java.nio.ByteBuffer: byte[] array()>();

        $i1 = virtualinvoke $r0.<java.nio.ByteBuffer: int arrayOffset()>();

        $i0 = virtualinvoke $r0.<java.nio.ByteBuffer: int position()>();

        $i0 = $i1 + $i0;

        $i2 = virtualinvoke $r0.<java.nio.ByteBuffer: int limit()>();

        $i1 = $i2 + $i1;

        $i2 = $i1 - $i0;

        if $i2 <= 128 goto label4;

        $i2 = $i0 + 128;

     label1:
        $i3 = $i0;

     label2:
        if $i3 >= $i2 goto label5;

        if $i3 <= $i0 goto label3;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

     label3:
        $b4 = $r2[$i3];

        $r3 = staticinvoke <u.aly.ca: java.lang.String a(byte)>($b4);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $i3 = $i3 + 1;

        goto label2;

     label4:
        $i2 = $i1;

        goto label1;

     label5:
        if $i1 == $i2 goto label6;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("...");

     label6:
        return;
    }

    public static byte[] a(java.nio.ByteBuffer)
    {
        byte[] $r1;
        int $i0;
        java.nio.ByteBuffer $r0;
        boolean $z0;

        $r0 := @parameter0: java.nio.ByteBuffer;

        $z0 = staticinvoke <u.aly.ca: boolean b(java.nio.ByteBuffer)>($r0);

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke $r0.<java.nio.ByteBuffer: byte[] array()>();

        return $r1;

     label1:
        $i0 = virtualinvoke $r0.<java.nio.ByteBuffer: int remaining()>();

        $r1 = newarray (byte)[$i0];

        staticinvoke <u.aly.ca: int a(java.nio.ByteBuffer,byte[],int)>($r0, $r1, 0);

        return $r1;
    }

    public static byte[] a(byte[])
    {
        int $i0;
        byte[] $r0, $r1;

        $r0 := @parameter0: byte[];

        if $r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof $r0;

        $r1 = newarray (byte)[$i0];

        $i0 = lengthof $r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, $r1, 0, $i0);

        return $r1;
    }

    public static boolean b(java.nio.ByteBuffer)
    {
        int $i0, $i1;
        java.nio.ByteBuffer $r0;
        boolean $z0;

        $r0 := @parameter0: java.nio.ByteBuffer;

        $z0 = virtualinvoke $r0.<java.nio.ByteBuffer: boolean hasArray()>();

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke $r0.<java.nio.ByteBuffer: int position()>();

        if $i0 != 0 goto label1;

        $i0 = virtualinvoke $r0.<java.nio.ByteBuffer: int arrayOffset()>();

        if $i0 != 0 goto label1;

        $i0 = virtualinvoke $r0.<java.nio.ByteBuffer: int remaining()>();

        $i1 = virtualinvoke $r0.<java.nio.ByteBuffer: int capacity()>();

        if $i0 != $i1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static java.nio.ByteBuffer c(java.nio.ByteBuffer)
    {
        byte[] $r1;
        java.nio.ByteBuffer $r0;
        boolean $z0;

        $r0 := @parameter0: java.nio.ByteBuffer;

        if $r0 != null goto label1;

        return null;

     label1:
        $z0 = staticinvoke <u.aly.ca: boolean b(java.nio.ByteBuffer)>($r0);

        if $z0 != 0 goto label2;

        $r1 = staticinvoke <u.aly.ca: byte[] a(java.nio.ByteBuffer)>($r0);

        $r0 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r1);

     label2:
        return $r0;
    }

    public static java.nio.ByteBuffer d(java.nio.ByteBuffer)
    {
        byte[] $r1, $r3;
        int $i0, $i1;
        java.nio.ByteBuffer $r0, $r2;
        boolean $z0;

        $r0 := @parameter0: java.nio.ByteBuffer;

        if $r0 != null goto label1;

        return null;

     label1:
        $i0 = virtualinvoke $r0.<java.nio.ByteBuffer: int remaining()>();

        $r1 = newarray (byte)[$i0];

        $r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r1);

        $z0 = virtualinvoke $r0.<java.nio.ByteBuffer: boolean hasArray()>();

        if $z0 == 0 goto label2;

        $r1 = virtualinvoke $r0.<java.nio.ByteBuffer: byte[] array()>();

        $i0 = virtualinvoke $r0.<java.nio.ByteBuffer: int arrayOffset()>();

        $i1 = virtualinvoke $r0.<java.nio.ByteBuffer: int position()>();

        $i0 = $i0 + $i1;

        $r3 = virtualinvoke $r2.<java.nio.ByteBuffer: byte[] array()>();

        $i1 = virtualinvoke $r0.<java.nio.ByteBuffer: int remaining()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i0, $r3, 0, $i1);

        return $r2;

     label2:
        $r0 = virtualinvoke $r0.<java.nio.ByteBuffer: java.nio.ByteBuffer slice()>();

        $r1 = virtualinvoke $r2.<java.nio.ByteBuffer: byte[] array()>();

        virtualinvoke $r0.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>($r1);

        return $r2;
    }
}
