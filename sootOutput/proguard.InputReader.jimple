public class proguard.InputReader extends java.lang.Object
{
    private final proguard.Configuration configuration;

    public void <init>(proguard.Configuration)
    {
        proguard.InputReader r0;
        proguard.Configuration $r1;

        r0 := @this: proguard.InputReader;

        $r1 := @parameter0: proguard.Configuration;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<proguard.InputReader: proguard.Configuration configuration> = $r1;

        return;
    }

    private void checkInputOutput(proguard.ClassPath, proguard.ClassPath) throws java.io.IOException
    {
        proguard.ClassPath $r1, $r2;
        java.io.IOException $r7;
        proguard.ClassPathEntry $r3, $r4;
        java.lang.StringBuffer $r8;
        proguard.InputReader r0;
        int $i0, $i1, $i2;
        java.lang.String $r5, $r6;
        boolean $z0;

        r0 := @this: proguard.InputReader;

        $r1 := @parameter0: proguard.ClassPath;

        $r2 := @parameter1: proguard.ClassPath;

        if $r1 == null goto label6;

        if $r2 != null goto label1;

        return;

     label1:
        $i0 = 0;

     label2:
        $i1 = virtualinvoke $r1.<proguard.ClassPath: int size()>();

        if $i0 >= $i1 goto label6;

        $r3 = virtualinvoke $r1.<proguard.ClassPath: proguard.ClassPathEntry get(int)>($i0);

        $z0 = virtualinvoke $r3.<proguard.ClassPathEntry: boolean isOutput()>();

        if $z0 != 0 goto label5;

        $i1 = 0;

     label3:
        $i2 = virtualinvoke $r2.<proguard.ClassPath: int size()>();

        if $i1 >= $i2 goto label5;

        $r4 = virtualinvoke $r2.<proguard.ClassPath: proguard.ClassPathEntry get(int)>($i1);

        $z0 = virtualinvoke $r4.<proguard.ClassPathEntry: boolean isOutput()>();

        if $z0 == 0 goto label4;

        $r5 = virtualinvoke $r4.<proguard.ClassPathEntry: java.lang.String getName()>();

        $r6 = virtualinvoke $r3.<proguard.ClassPathEntry: java.lang.String getName()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label4;

        $r7 = new java.io.IOException;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Input jars and output jars must be different [");

        $r5 = virtualinvoke $r3.<proguard.ClassPathEntry: java.lang.String getName()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r5 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>($r5);

        throw $r7;

     label4:
        $i1 = $i1 + 1;

        goto label3;

     label5:
        $i0 = $i0 + 1;

        goto label2;

     label6:
        return;
    }

    private void readInput(java.lang.String, proguard.ClassPath, proguard.io.DataEntryReader) throws java.io.IOException
    {
        proguard.ClassPath $r2;
        proguard.InputReader r0;
        int $i0;
        java.lang.String $r1;
        proguard.io.DataEntryReader $r3;

        r0 := @this: proguard.InputReader;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: proguard.ClassPath;

        $r3 := @parameter2: proguard.io.DataEntryReader;

        $i0 = virtualinvoke $r2.<proguard.ClassPath: int size()>();

        virtualinvoke r0.<proguard.InputReader: void readInput(java.lang.String,proguard.ClassPath,int,int,proguard.io.DataEntryReader)>($r1, $r2, 0, $i0, $r3);

        return;
    }

    private void readInput(java.lang.String, proguard.ClassPathEntry, proguard.io.DataEntryReader) throws java.io.IOException
    {
        java.lang.Throwable $r6;
        java.io.IOException $r10, $r11;
        java.io.File $r5;
        proguard.io.DirectoryPump $r4, $r8;
        proguard.ClassPathEntry $r2;
        java.lang.StringBuffer $r7, $r9;
        proguard.InputReader r0;
        java.lang.String $r1;
        proguard.io.DataEntryReader $r3;

        r0 := @this: proguard.InputReader;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: proguard.ClassPathEntry;

        $r3 := @parameter2: proguard.io.DataEntryReader;

     label1:
        $r3 = staticinvoke <proguard.DataEntryReaderFactory: proguard.io.DataEntryReader createDataEntryReader(java.lang.String,proguard.ClassPathEntry,proguard.io.DataEntryReader)>($r1, $r2, $r3);

     label2:
        $r8 = new proguard.io.DirectoryPump;

        $r4 = $r8;

     label3:
        $r5 = virtualinvoke $r2.<proguard.ClassPathEntry: java.io.File getFile()>();

        specialinvoke $r8.<proguard.io.DirectoryPump: void <init>(java.io.File)>($r5);

        virtualinvoke $r4.<proguard.io.DirectoryPump: void pumpDataEntries(proguard.io.DataEntryReader)>($r3);

     label4:
        return;

     label5:
        $r6 := @caughtexception;

        $r10 = new java.io.IOException;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Can\'t read [");

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r2);

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] (");

        $r11 = (java.io.IOException) $r6;

        $r1 = virtualinvoke $r11.<java.io.IOException: java.lang.String getMessage()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r1 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>($r1);

        throw $r10;

        catch java.io.IOException from label1 to label2 with label5;
        catch java.io.IOException from label3 to label4 with label5;
    }

    public void execute(proguard.classfile.ClassPool, proguard.classfile.ClassPool) throws java.io.IOException
    {
        proguard.ClassPath $r8, $r10;
        proguard.classfile.ClassPool $r1, $r2;
        java.lang.StringBuffer $r17;
        int $i0;
        java.lang.String $r18;
        proguard.io.ClassReader $r14;
        boolean $z0, $z1;
        java.io.PrintStream $r11;
        proguard.classfile.util.WarningPrinter $r3, $r4;
        proguard.io.ClassFilter $r13;
        proguard.classfile.visitor.ClassPoolFiller $r6;
        java.io.IOException $r9;
        proguard.DuplicateClassPrinter $r5;
        java.util.List $r12;
        proguard.InputReader r0;
        proguard.Configuration $r7;
        proguard.classfile.visitor.ClassPresenceFilter $r15, $r16;

        r0 := @this: proguard.InputReader;

        $r1 := @parameter0: proguard.classfile.ClassPool;

        $r2 := @parameter1: proguard.classfile.ClassPool;

        $r7 = r0.<proguard.InputReader: proguard.Configuration configuration>;

        $r8 = $r7.<proguard.Configuration: proguard.ClassPath programJars>;

        if $r8 != null goto label1;

        $r9 = new java.io.IOException;

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>("The input is empty. You have to specify one or more \'-injars\' options");

        throw $r9;

     label1:
        $r7 = r0.<proguard.InputReader: proguard.Configuration configuration>;

        $r8 = $r7.<proguard.Configuration: proguard.ClassPath libraryJars>;

        $r7 = r0.<proguard.InputReader: proguard.Configuration configuration>;

        $r10 = $r7.<proguard.Configuration: proguard.ClassPath programJars>;

        specialinvoke r0.<proguard.InputReader: void checkInputOutput(proguard.ClassPath,proguard.ClassPath)>($r8, $r10);

        $r7 = r0.<proguard.InputReader: proguard.Configuration configuration>;

        $r8 = $r7.<proguard.Configuration: proguard.ClassPath programJars>;

        $r7 = r0.<proguard.InputReader: proguard.Configuration configuration>;

        $r10 = $r7.<proguard.Configuration: proguard.ClassPath programJars>;

        specialinvoke r0.<proguard.InputReader: void checkInputOutput(proguard.ClassPath,proguard.ClassPath)>($r8, $r10);

        $r3 = new proguard.classfile.util.WarningPrinter;

        $r11 = <java.lang.System: java.io.PrintStream err>;

        $r7 = r0.<proguard.InputReader: proguard.Configuration configuration>;

        $r12 = $r7.<proguard.Configuration: java.util.List warn>;

        specialinvoke $r3.<proguard.classfile.util.WarningPrinter: void <init>(java.io.PrintStream,java.util.List)>($r11, $r12);

        $r4 = new proguard.classfile.util.WarningPrinter;

        $r11 = <java.lang.System: java.io.PrintStream out>;

        $r7 = r0.<proguard.InputReader: proguard.Configuration configuration>;

        $r12 = $r7.<proguard.Configuration: java.util.List note>;

        specialinvoke $r4.<proguard.classfile.util.WarningPrinter: void <init>(java.io.PrintStream,java.util.List)>($r11, $r12);

        $r5 = new proguard.DuplicateClassPrinter;

        specialinvoke $r5.<proguard.DuplicateClassPrinter: void <init>(proguard.classfile.util.WarningPrinter)>($r4);

        $r7 = r0.<proguard.InputReader: proguard.Configuration configuration>;

        $r8 = $r7.<proguard.Configuration: proguard.ClassPath programJars>;

        $r13 = new proguard.io.ClassFilter;

        $r14 = new proguard.io.ClassReader;

        $r7 = r0.<proguard.InputReader: proguard.Configuration configuration>;

        $z0 = $r7.<proguard.Configuration: boolean skipNonPublicLibraryClasses>;

        $r7 = r0.<proguard.InputReader: proguard.Configuration configuration>;

        $z1 = $r7.<proguard.Configuration: boolean skipNonPublicLibraryClassMembers>;

        $r15 = new proguard.classfile.visitor.ClassPresenceFilter;

        $r6 = new proguard.classfile.visitor.ClassPoolFiller;

        specialinvoke $r6.<proguard.classfile.visitor.ClassPoolFiller: void <init>(proguard.classfile.ClassPool)>($r1);

        specialinvoke $r15.<proguard.classfile.visitor.ClassPresenceFilter: void <init>(proguard.classfile.ClassPool,proguard.classfile.visitor.ClassVisitor,proguard.classfile.visitor.ClassVisitor)>($r1, $r5, $r6);

        specialinvoke $r14.<proguard.io.ClassReader: void <init>(boolean,boolean,boolean,proguard.classfile.util.WarningPrinter,proguard.classfile.visitor.ClassVisitor)>(0, $z0, $z1, $r3, $r15);

        specialinvoke $r13.<proguard.io.ClassFilter: void <init>(proguard.io.DataEntryReader)>($r14);

        specialinvoke r0.<proguard.InputReader: void readInput(java.lang.String,proguard.ClassPath,proguard.io.DataEntryReader)>("Reading program ", $r8, $r13);

        $i0 = virtualinvoke $r1.<proguard.classfile.ClassPool: int size()>();

        if $i0 != 0 goto label2;

        $r9 = new java.io.IOException;

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>("The input doesn\'t contain any classes. Did you specify the proper \'-injars\' options?");

        throw $r9;

     label2:
        $r7 = r0.<proguard.InputReader: proguard.Configuration configuration>;

        $r8 = $r7.<proguard.Configuration: proguard.ClassPath libraryJars>;

        if $r8 == null goto label3;

        $r7 = r0.<proguard.InputReader: proguard.Configuration configuration>;

        $r8 = $r7.<proguard.Configuration: proguard.ClassPath libraryJars>;

        $r13 = new proguard.io.ClassFilter;

        $r14 = new proguard.io.ClassReader;

        $r7 = r0.<proguard.InputReader: proguard.Configuration configuration>;

        $z0 = $r7.<proguard.Configuration: boolean skipNonPublicLibraryClasses>;

        $r7 = r0.<proguard.InputReader: proguard.Configuration configuration>;

        $z1 = $r7.<proguard.Configuration: boolean skipNonPublicLibraryClassMembers>;

        $r15 = new proguard.classfile.visitor.ClassPresenceFilter;

        $r16 = new proguard.classfile.visitor.ClassPresenceFilter;

        $r6 = new proguard.classfile.visitor.ClassPoolFiller;

        specialinvoke $r6.<proguard.classfile.visitor.ClassPoolFiller: void <init>(proguard.classfile.ClassPool)>($r2);

        specialinvoke $r16.<proguard.classfile.visitor.ClassPresenceFilter: void <init>(proguard.classfile.ClassPool,proguard.classfile.visitor.ClassVisitor,proguard.classfile.visitor.ClassVisitor)>($r2, $r5, $r6);

        specialinvoke $r15.<proguard.classfile.visitor.ClassPresenceFilter: void <init>(proguard.classfile.ClassPool,proguard.classfile.visitor.ClassVisitor,proguard.classfile.visitor.ClassVisitor)>($r1, $r5, $r16);

        specialinvoke $r14.<proguard.io.ClassReader: void <init>(boolean,boolean,boolean,proguard.classfile.util.WarningPrinter,proguard.classfile.visitor.ClassVisitor)>(1, $z0, $z1, $r3, $r15);

        specialinvoke $r13.<proguard.io.ClassFilter: void <init>(proguard.io.DataEntryReader)>($r14);

        specialinvoke r0.<proguard.InputReader: void readInput(java.lang.String,proguard.ClassPath,proguard.io.DataEntryReader)>("Reading library ", $r8, $r13);

     label3:
        $i0 = virtualinvoke $r4.<proguard.classfile.util.WarningPrinter: int getWarningCount()>();

        if $i0 <= 0 goto label4;

        $r11 = <java.lang.System: java.io.PrintStream err>;

        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Note: there were ");

        $r17 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r17 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" duplicate class definitions.");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r18);

     label4:
        $i0 = virtualinvoke $r3.<proguard.classfile.util.WarningPrinter: int getWarningCount()>();

        if $i0 <= 0 goto label5;

        $r11 = <java.lang.System: java.io.PrintStream err>;

        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Warning: there were ");

        $r17 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r17 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" classes in incorrectly named files.");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r18);

        $r11 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>("         You should make sure all file names correspond to their class names.");

        $r11 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>("         The directory hierarchies must correspond to the package hierarchies.");

        $r7 = r0.<proguard.InputReader: proguard.Configuration configuration>;

        $z0 = $r7.<proguard.Configuration: boolean ignoreWarnings>;

        if $z0 != 0 goto label5;

        $r11 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>("         If you don\'t mind the mentioned classes not being written out,");

        $r11 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>("         you could try your luck using the \'-ignorewarnings\' option.");

        $r9 = new java.io.IOException;

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>("Please correct the above warnings first.");

        throw $r9;

     label5:
        return;
    }

    public void readInput(java.lang.String, proguard.ClassPath, int, int, proguard.io.DataEntryReader) throws java.io.IOException
    {
        proguard.ClassPath $r2;
        proguard.ClassPathEntry $r4;
        proguard.InputReader r0;
        int $i0, $i1;
        java.lang.String $r1;
        proguard.io.DataEntryReader $r3;
        boolean $z0;

        r0 := @this: proguard.InputReader;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: proguard.ClassPath;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $r3 := @parameter4: proguard.io.DataEntryReader;

     label1:
        if $i0 >= $i1 goto label3;

        $r4 = virtualinvoke $r2.<proguard.ClassPath: proguard.ClassPathEntry get(int)>($i0);

        $z0 = virtualinvoke $r4.<proguard.ClassPathEntry: boolean isOutput()>();

        if $z0 != 0 goto label2;

        specialinvoke r0.<proguard.InputReader: void readInput(java.lang.String,proguard.ClassPathEntry,proguard.io.DataEntryReader)>($r1, $r4, $r3);

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        return;
    }
}
