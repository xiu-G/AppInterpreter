public class u.aly.dk extends u.aly.dm
{
    protected java.io.InputStream a;
    protected java.io.OutputStream b;

    protected void <init>()
    {
        u.aly.dk r0;

        r0 := @this: u.aly.dk;

        specialinvoke r0.<u.aly.dm: void <init>()>();

        r0.<u.aly.dk: java.io.InputStream a> = null;

        r0.<u.aly.dk: java.io.OutputStream b> = null;

        return;
    }

    public void <init>(java.io.InputStream)
    {
        u.aly.dk r0;
        java.io.InputStream $r1;

        r0 := @this: u.aly.dk;

        $r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<u.aly.dm: void <init>()>();

        r0.<u.aly.dk: java.io.InputStream a> = null;

        r0.<u.aly.dk: java.io.OutputStream b> = null;

        r0.<u.aly.dk: java.io.InputStream a> = $r1;

        return;
    }

    public void <init>(java.io.InputStream, java.io.OutputStream)
    {
        java.io.OutputStream $r2;
        u.aly.dk r0;
        java.io.InputStream $r1;

        r0 := @this: u.aly.dk;

        $r1 := @parameter0: java.io.InputStream;

        $r2 := @parameter1: java.io.OutputStream;

        specialinvoke r0.<u.aly.dm: void <init>()>();

        r0.<u.aly.dk: java.io.InputStream a> = null;

        r0.<u.aly.dk: java.io.OutputStream b> = null;

        r0.<u.aly.dk: java.io.InputStream a> = $r1;

        r0.<u.aly.dk: java.io.OutputStream b> = $r2;

        return;
    }

    public void <init>(java.io.OutputStream)
    {
        java.io.OutputStream $r1;
        u.aly.dk r0;

        r0 := @this: u.aly.dk;

        $r1 := @parameter0: java.io.OutputStream;

        specialinvoke r0.<u.aly.dm: void <init>()>();

        r0.<u.aly.dk: java.io.InputStream a> = null;

        r0.<u.aly.dk: java.io.OutputStream b> = null;

        r0.<u.aly.dk: java.io.OutputStream b> = $r1;

        return;
    }

    public int a(byte[], int, int) throws u.aly.dn
    {
        java.lang.Throwable $r4;
        byte[] $r1;
        u.aly.dn $r3;
        u.aly.dk r0;
        int $i0, $i1;
        java.io.InputStream $r2;

        r0 := @this: u.aly.dk;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = r0.<u.aly.dk: java.io.InputStream a>;

        if $r2 != null goto label1;

        $r3 = new u.aly.dn;

        specialinvoke $r3.<u.aly.dn: void <init>(int,java.lang.String)>(1, "Cannot read from null inputStream");

        throw $r3;

     label1:
        $r2 = r0.<u.aly.dk: java.io.InputStream a>;

     label2:
        $i0 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>($r1, $i0, $i1);

     label3:
        if $i0 >= 0 goto label5;

        $r3 = new u.aly.dn;

        specialinvoke $r3.<u.aly.dn: void <init>(int)>(4);

        throw $r3;

     label4:
        $r4 := @caughtexception;

        $r3 = new u.aly.dn;

        specialinvoke $r3.<u.aly.dn: void <init>(int,java.lang.Throwable)>(0, $r4);

        throw $r3;

     label5:
        return $i0;

        catch java.io.IOException from label2 to label3 with label4;
    }

    public boolean a()
    {
        u.aly.dk r0;

        r0 := @this: u.aly.dk;

        return 1;
    }

    public void b() throws u.aly.dn
    {
        u.aly.dk r0;

        r0 := @this: u.aly.dk;

        return;
    }

    public void b(byte[], int, int) throws u.aly.dn
    {
        java.io.OutputStream $r2;
        java.lang.Throwable $r4;
        byte[] $r1;
        u.aly.dn $r3;
        u.aly.dk r0;
        int $i0, $i1;

        r0 := @this: u.aly.dk;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = r0.<u.aly.dk: java.io.OutputStream b>;

        if $r2 != null goto label1;

        $r3 = new u.aly.dn;

        specialinvoke $r3.<u.aly.dn: void <init>(int,java.lang.String)>(1, "Cannot write to null outputStream");

        throw $r3;

     label1:
        $r2 = r0.<u.aly.dk: java.io.OutputStream b>;

     label2:
        virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>($r1, $i0, $i1);

     label3:
        return;

     label4:
        $r4 := @caughtexception;

        $r3 = new u.aly.dn;

        specialinvoke $r3.<u.aly.dn: void <init>(int,java.lang.Throwable)>(0, $r4);

        throw $r3;

        catch java.io.IOException from label2 to label3 with label4;
    }

    public void c()
    {
        java.io.OutputStream $r2;
        java.lang.Throwable $r3, $r4;
        u.aly.dk r0;
        java.io.IOException $r5;
        java.io.InputStream $r1;

        r0 := @this: u.aly.dk;

        $r1 = r0.<u.aly.dk: java.io.InputStream a>;

        if $r1 == null goto label3;

        $r1 = r0.<u.aly.dk: java.io.InputStream a>;

     label1:
        virtualinvoke $r1.<java.io.InputStream: void close()>();

     label2:
        r0.<u.aly.dk: java.io.InputStream a> = null;

     label3:
        $r2 = r0.<u.aly.dk: java.io.OutputStream b>;

        if $r2 == null goto label8;

        $r2 = r0.<u.aly.dk: java.io.OutputStream b>;

     label4:
        virtualinvoke $r2.<java.io.OutputStream: void close()>();

     label5:
        r0.<u.aly.dk: java.io.OutputStream b> = null;

        return;

     label6:
        $r3 := @caughtexception;

        $r5 = (java.io.IOException) $r3;

        virtualinvoke $r5.<java.io.IOException: void printStackTrace()>();

        goto label2;

     label7:
        $r4 := @caughtexception;

        $r5 = (java.io.IOException) $r4;

        virtualinvoke $r5.<java.io.IOException: void printStackTrace()>();

        goto label5;

     label8:
        return;

        catch java.io.IOException from label1 to label2 with label6;
        catch java.io.IOException from label4 to label5 with label7;
    }

    public void d() throws u.aly.dn
    {
        java.io.OutputStream $r1;
        java.lang.Throwable $r3;
        u.aly.dn $r2;
        u.aly.dk r0;

        r0 := @this: u.aly.dk;

        $r1 = r0.<u.aly.dk: java.io.OutputStream b>;

        if $r1 != null goto label1;

        $r2 = new u.aly.dn;

        specialinvoke $r2.<u.aly.dn: void <init>(int,java.lang.String)>(1, "Cannot flush null outputStream");

        throw $r2;

     label1:
        $r1 = r0.<u.aly.dk: java.io.OutputStream b>;

     label2:
        virtualinvoke $r1.<java.io.OutputStream: void flush()>();

     label3:
        return;

     label4:
        $r3 := @caughtexception;

        $r2 = new u.aly.dn;

        specialinvoke $r2.<u.aly.dn: void <init>(int,java.lang.Throwable)>(0, $r3);

        throw $r2;

        catch java.io.IOException from label2 to label3 with label4;
    }
}
