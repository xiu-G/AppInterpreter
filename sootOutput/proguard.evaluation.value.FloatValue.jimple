public abstract class proguard.evaluation.value.FloatValue extends proguard.evaluation.value.Category1Value
{

    public void <init>()
    {
        proguard.evaluation.value.FloatValue r0;

        r0 := @this: proguard.evaluation.value.FloatValue;

        specialinvoke r0.<proguard.evaluation.value.Category1Value: void <init>()>();

        return;
    }

    public abstract proguard.evaluation.value.FloatValue add(proguard.evaluation.value.FloatValue);

    public proguard.evaluation.value.FloatValue add(proguard.evaluation.value.ParticularFloatValue)
    {
        proguard.evaluation.value.FloatValue r0;
        proguard.evaluation.value.ParticularFloatValue $r1;

        r0 := @this: proguard.evaluation.value.FloatValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularFloatValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.FloatValue: proguard.evaluation.value.FloatValue add(proguard.evaluation.value.SpecificFloatValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.FloatValue add(proguard.evaluation.value.SpecificFloatValue)
    {
        proguard.evaluation.value.FloatValue r0;
        proguard.evaluation.value.SpecificFloatValue $r1;

        r0 := @this: proguard.evaluation.value.FloatValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificFloatValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.FloatValue: proguard.evaluation.value.FloatValue add(proguard.evaluation.value.FloatValue)>($r1);

        return r0;
    }

    public abstract proguard.evaluation.value.IntegerValue compare(proguard.evaluation.value.FloatValue);

    public proguard.evaluation.value.IntegerValue compare(proguard.evaluation.value.ParticularFloatValue)
    {
        proguard.evaluation.value.IntegerValue $r2;
        proguard.evaluation.value.FloatValue r0;
        proguard.evaluation.value.ParticularFloatValue $r1;

        r0 := @this: proguard.evaluation.value.FloatValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularFloatValue;

        $r2 = virtualinvoke r0.<proguard.evaluation.value.FloatValue: proguard.evaluation.value.IntegerValue compare(proguard.evaluation.value.SpecificFloatValue)>($r1);

        return $r2;
    }

    public proguard.evaluation.value.IntegerValue compare(proguard.evaluation.value.SpecificFloatValue)
    {
        proguard.evaluation.value.IntegerValue $r2;
        proguard.evaluation.value.FloatValue r0;
        proguard.evaluation.value.SpecificFloatValue $r1;

        r0 := @this: proguard.evaluation.value.FloatValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificFloatValue;

        $r2 = virtualinvoke r0.<proguard.evaluation.value.FloatValue: proguard.evaluation.value.IntegerValue compare(proguard.evaluation.value.FloatValue)>($r1);

        return $r2;
    }

    public final proguard.evaluation.value.IntegerValue compareReverse(proguard.evaluation.value.FloatValue)
    {
        proguard.evaluation.value.IntegerValue $r2;
        proguard.evaluation.value.FloatValue r0, $r1;

        r0 := @this: proguard.evaluation.value.FloatValue;

        $r1 := @parameter0: proguard.evaluation.value.FloatValue;

        $r2 = virtualinvoke r0.<proguard.evaluation.value.FloatValue: proguard.evaluation.value.IntegerValue compare(proguard.evaluation.value.FloatValue)>($r1);

        $r2 = virtualinvoke $r2.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue negate()>();

        return $r2;
    }

    public final proguard.evaluation.value.IntegerValue compareReverse(proguard.evaluation.value.ParticularFloatValue)
    {
        proguard.evaluation.value.IntegerValue $r2;
        proguard.evaluation.value.FloatValue r0;
        proguard.evaluation.value.ParticularFloatValue $r1;

        r0 := @this: proguard.evaluation.value.FloatValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularFloatValue;

        $r2 = virtualinvoke r0.<proguard.evaluation.value.FloatValue: proguard.evaluation.value.IntegerValue compare(proguard.evaluation.value.ParticularFloatValue)>($r1);

        $r2 = virtualinvoke $r2.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue negate()>();

        return $r2;
    }

    public final proguard.evaluation.value.IntegerValue compareReverse(proguard.evaluation.value.SpecificFloatValue)
    {
        proguard.evaluation.value.IntegerValue $r2;
        proguard.evaluation.value.FloatValue r0;
        proguard.evaluation.value.SpecificFloatValue $r1;

        r0 := @this: proguard.evaluation.value.FloatValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificFloatValue;

        $r2 = virtualinvoke r0.<proguard.evaluation.value.FloatValue: proguard.evaluation.value.IntegerValue compare(proguard.evaluation.value.SpecificFloatValue)>($r1);

        $r2 = virtualinvoke $r2.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue negate()>();

        return $r2;
    }

    public final int computationalType()
    {
        proguard.evaluation.value.FloatValue r0;

        r0 := @this: proguard.evaluation.value.FloatValue;

        return 3;
    }

    public abstract proguard.evaluation.value.DoubleValue convertToDouble();

    public abstract proguard.evaluation.value.IntegerValue convertToInteger();

    public abstract proguard.evaluation.value.LongValue convertToLong();

    public abstract proguard.evaluation.value.FloatValue divide(proguard.evaluation.value.FloatValue);

    public proguard.evaluation.value.FloatValue divide(proguard.evaluation.value.ParticularFloatValue)
    {
        proguard.evaluation.value.FloatValue r0;
        proguard.evaluation.value.ParticularFloatValue $r1;

        r0 := @this: proguard.evaluation.value.FloatValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularFloatValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.FloatValue: proguard.evaluation.value.FloatValue divide(proguard.evaluation.value.SpecificFloatValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.FloatValue divide(proguard.evaluation.value.SpecificFloatValue)
    {
        proguard.evaluation.value.FloatValue r0;
        proguard.evaluation.value.SpecificFloatValue $r1;

        r0 := @this: proguard.evaluation.value.FloatValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificFloatValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.FloatValue: proguard.evaluation.value.FloatValue divide(proguard.evaluation.value.FloatValue)>($r1);

        return r0;
    }

    public abstract proguard.evaluation.value.FloatValue divideOf(proguard.evaluation.value.FloatValue);

    public proguard.evaluation.value.FloatValue divideOf(proguard.evaluation.value.ParticularFloatValue)
    {
        proguard.evaluation.value.FloatValue r0;
        proguard.evaluation.value.ParticularFloatValue $r1;

        r0 := @this: proguard.evaluation.value.FloatValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularFloatValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.FloatValue: proguard.evaluation.value.FloatValue divideOf(proguard.evaluation.value.SpecificFloatValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.FloatValue divideOf(proguard.evaluation.value.SpecificFloatValue)
    {
        proguard.evaluation.value.FloatValue r0;
        proguard.evaluation.value.SpecificFloatValue $r1;

        r0 := @this: proguard.evaluation.value.FloatValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificFloatValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.FloatValue: proguard.evaluation.value.FloatValue divideOf(proguard.evaluation.value.FloatValue)>($r1);

        return r0;
    }

    public final proguard.evaluation.value.FloatValue floatValue()
    {
        proguard.evaluation.value.FloatValue r0;

        r0 := @this: proguard.evaluation.value.FloatValue;

        return r0;
    }

    public abstract proguard.evaluation.value.FloatValue generalize(proguard.evaluation.value.FloatValue);

    public proguard.evaluation.value.FloatValue generalize(proguard.evaluation.value.ParticularFloatValue)
    {
        proguard.evaluation.value.FloatValue r0;
        proguard.evaluation.value.ParticularFloatValue $r1;

        r0 := @this: proguard.evaluation.value.FloatValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularFloatValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.FloatValue: proguard.evaluation.value.FloatValue generalize(proguard.evaluation.value.SpecificFloatValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.FloatValue generalize(proguard.evaluation.value.SpecificFloatValue)
    {
        proguard.evaluation.value.FloatValue r0;
        proguard.evaluation.value.SpecificFloatValue $r1;

        r0 := @this: proguard.evaluation.value.FloatValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificFloatValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.FloatValue: proguard.evaluation.value.FloatValue generalize(proguard.evaluation.value.FloatValue)>($r1);

        return r0;
    }

    public final proguard.evaluation.value.Value generalize(proguard.evaluation.value.Value)
    {
        proguard.evaluation.value.FloatValue r0, $r2;
        proguard.evaluation.value.Value $r1;

        r0 := @this: proguard.evaluation.value.FloatValue;

        $r1 := @parameter0: proguard.evaluation.value.Value;

        $r2 = virtualinvoke $r1.<proguard.evaluation.value.Value: proguard.evaluation.value.FloatValue floatValue()>();

        r0 = virtualinvoke r0.<proguard.evaluation.value.FloatValue: proguard.evaluation.value.FloatValue generalize(proguard.evaluation.value.FloatValue)>($r2);

        return r0;
    }

    public final java.lang.String internalType()
    {
        java.lang.String $r1;
        proguard.evaluation.value.FloatValue r0;

        r0 := @this: proguard.evaluation.value.FloatValue;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(70);

        return $r1;
    }

    public abstract proguard.evaluation.value.FloatValue multiply(proguard.evaluation.value.FloatValue);

    public proguard.evaluation.value.FloatValue multiply(proguard.evaluation.value.ParticularFloatValue)
    {
        proguard.evaluation.value.FloatValue r0;
        proguard.evaluation.value.ParticularFloatValue $r1;

        r0 := @this: proguard.evaluation.value.FloatValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularFloatValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.FloatValue: proguard.evaluation.value.FloatValue multiply(proguard.evaluation.value.SpecificFloatValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.FloatValue multiply(proguard.evaluation.value.SpecificFloatValue)
    {
        proguard.evaluation.value.FloatValue r0;
        proguard.evaluation.value.SpecificFloatValue $r1;

        r0 := @this: proguard.evaluation.value.FloatValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificFloatValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.FloatValue: proguard.evaluation.value.FloatValue multiply(proguard.evaluation.value.FloatValue)>($r1);

        return r0;
    }

    public abstract proguard.evaluation.value.FloatValue negate();

    public abstract proguard.evaluation.value.FloatValue remainder(proguard.evaluation.value.FloatValue);

    public proguard.evaluation.value.FloatValue remainder(proguard.evaluation.value.ParticularFloatValue)
    {
        proguard.evaluation.value.FloatValue r0;
        proguard.evaluation.value.ParticularFloatValue $r1;

        r0 := @this: proguard.evaluation.value.FloatValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularFloatValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.FloatValue: proguard.evaluation.value.FloatValue remainder(proguard.evaluation.value.SpecificFloatValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.FloatValue remainder(proguard.evaluation.value.SpecificFloatValue)
    {
        proguard.evaluation.value.FloatValue r0;
        proguard.evaluation.value.SpecificFloatValue $r1;

        r0 := @this: proguard.evaluation.value.FloatValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificFloatValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.FloatValue: proguard.evaluation.value.FloatValue remainder(proguard.evaluation.value.FloatValue)>($r1);

        return r0;
    }

    public abstract proguard.evaluation.value.FloatValue remainderOf(proguard.evaluation.value.FloatValue);

    public proguard.evaluation.value.FloatValue remainderOf(proguard.evaluation.value.ParticularFloatValue)
    {
        proguard.evaluation.value.FloatValue r0;
        proguard.evaluation.value.ParticularFloatValue $r1;

        r0 := @this: proguard.evaluation.value.FloatValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularFloatValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.FloatValue: proguard.evaluation.value.FloatValue remainderOf(proguard.evaluation.value.SpecificFloatValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.FloatValue remainderOf(proguard.evaluation.value.SpecificFloatValue)
    {
        proguard.evaluation.value.FloatValue r0;
        proguard.evaluation.value.SpecificFloatValue $r1;

        r0 := @this: proguard.evaluation.value.FloatValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificFloatValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.FloatValue: proguard.evaluation.value.FloatValue remainderOf(proguard.evaluation.value.FloatValue)>($r1);

        return r0;
    }

    public abstract proguard.evaluation.value.FloatValue subtract(proguard.evaluation.value.FloatValue);

    public proguard.evaluation.value.FloatValue subtract(proguard.evaluation.value.ParticularFloatValue)
    {
        proguard.evaluation.value.FloatValue r0;
        proguard.evaluation.value.ParticularFloatValue $r1;

        r0 := @this: proguard.evaluation.value.FloatValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularFloatValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.FloatValue: proguard.evaluation.value.FloatValue subtract(proguard.evaluation.value.SpecificFloatValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.FloatValue subtract(proguard.evaluation.value.SpecificFloatValue)
    {
        proguard.evaluation.value.FloatValue r0;
        proguard.evaluation.value.SpecificFloatValue $r1;

        r0 := @this: proguard.evaluation.value.FloatValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificFloatValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.FloatValue: proguard.evaluation.value.FloatValue subtract(proguard.evaluation.value.FloatValue)>($r1);

        return r0;
    }

    public abstract proguard.evaluation.value.FloatValue subtractFrom(proguard.evaluation.value.FloatValue);

    public proguard.evaluation.value.FloatValue subtractFrom(proguard.evaluation.value.ParticularFloatValue)
    {
        proguard.evaluation.value.FloatValue r0;
        proguard.evaluation.value.ParticularFloatValue $r1;

        r0 := @this: proguard.evaluation.value.FloatValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularFloatValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.FloatValue: proguard.evaluation.value.FloatValue subtractFrom(proguard.evaluation.value.SpecificFloatValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.FloatValue subtractFrom(proguard.evaluation.value.SpecificFloatValue)
    {
        proguard.evaluation.value.FloatValue r0;
        proguard.evaluation.value.SpecificFloatValue $r1;

        r0 := @this: proguard.evaluation.value.FloatValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificFloatValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.FloatValue: proguard.evaluation.value.FloatValue subtractFrom(proguard.evaluation.value.FloatValue)>($r1);

        return r0;
    }

    public float value()
    {
        proguard.evaluation.value.FloatValue r0;

        r0 := @this: proguard.evaluation.value.FloatValue;

        return 0.0F;
    }
}
