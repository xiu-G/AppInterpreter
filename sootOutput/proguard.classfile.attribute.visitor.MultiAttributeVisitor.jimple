public class proguard.classfile.attribute.visitor.MultiAttributeVisitor extends java.lang.Object implements proguard.classfile.attribute.visitor.AttributeVisitor
{
    private proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors;

    public void <init>()
    {
        proguard.classfile.attribute.visitor.MultiAttributeVisitor r0;

        r0 := @this: proguard.classfile.attribute.visitor.MultiAttributeVisitor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(proguard.classfile.attribute.visitor.AttributeVisitor[])
    {
        proguard.classfile.attribute.visitor.AttributeVisitor[] $r1;
        proguard.classfile.attribute.visitor.MultiAttributeVisitor r0;

        r0 := @this: proguard.classfile.attribute.visitor.MultiAttributeVisitor;

        $r1 := @parameter0: proguard.classfile.attribute.visitor.AttributeVisitor[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors> = $r1;

        return;
    }

    private void incrementArraySize()
    {
        int $i0;
        proguard.classfile.attribute.visitor.AttributeVisitor[] $r1, $r2, $r3;
        proguard.classfile.attribute.visitor.MultiAttributeVisitor r0;

        r0 := @this: proguard.classfile.attribute.visitor.MultiAttributeVisitor;

        $r1 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        if $r1 != null goto label1;

        $r1 = newarray (proguard.classfile.attribute.visitor.AttributeVisitor)[1];

        r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors> = $r1;

        return;

     label1:
        $r1 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $i0 = lengthof $r1;

        $i0 = $i0 + 1;

        $r2 = newarray (proguard.classfile.attribute.visitor.AttributeVisitor)[$i0];

        $r1 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $r3 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $i0 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, 0, $i0);

        r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors> = $r2;

        return;
    }

    public void addAttributeVisitor(proguard.classfile.attribute.visitor.AttributeVisitor)
    {
        int $i0;
        proguard.classfile.attribute.visitor.AttributeVisitor $r1;
        proguard.classfile.attribute.visitor.AttributeVisitor[] $r2, $r3;
        proguard.classfile.attribute.visitor.MultiAttributeVisitor r0;

        r0 := @this: proguard.classfile.attribute.visitor.MultiAttributeVisitor;

        $r1 := @parameter0: proguard.classfile.attribute.visitor.AttributeVisitor;

        specialinvoke r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: void incrementArraySize()>();

        $r2 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $r3 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $i0 = lengthof $r3;

        $i0 = $i0 - 1;

        $r2[$i0] = $r1;

        return;
    }

    public void visitAnnotationDefaultAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.'annotation'.AnnotationDefaultAttribute)
    {
        proguard.classfile.attribute.visitor.AttributeVisitor $r5;
        proguard.classfile.attribute.'annotation'.AnnotationDefaultAttribute $r3;
        proguard.classfile.attribute.visitor.MultiAttributeVisitor r0;
        proguard.classfile.Clazz $r1;
        int $i0, $i1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.visitor.AttributeVisitor[] $r4;

        r0 := @this: proguard.classfile.attribute.visitor.MultiAttributeVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.AnnotationDefaultAttribute;

        $i0 = 0;

     label1:
        $r4 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $i1 = lengthof $r4;

        if $i0 >= $i1 goto label2;

        $r4 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $r5 = $r4[$i0];

        interfaceinvoke $r5.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitAnnotationDefaultAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.'annotation'.AnnotationDefaultAttribute)>($r1, $r2, $r3);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void visitCodeAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute)
    {
        proguard.classfile.attribute.visitor.AttributeVisitor $r5;
        proguard.classfile.attribute.visitor.MultiAttributeVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0, $i1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.visitor.AttributeVisitor[] $r4;

        r0 := @this: proguard.classfile.attribute.visitor.MultiAttributeVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 = 0;

     label1:
        $r4 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $i1 = lengthof $r4;

        if $i0 >= $i1 goto label2;

        $r4 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $r5 = $r4[$i0];

        interfaceinvoke $r5.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute)>($r1, $r2, $r3);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void visitConstantValueAttribute(proguard.classfile.Clazz, proguard.classfile.Field, proguard.classfile.attribute.ConstantValueAttribute)
    {
        proguard.classfile.attribute.visitor.AttributeVisitor $r5;
        proguard.classfile.Field $r2;
        proguard.classfile.attribute.visitor.MultiAttributeVisitor r0;
        proguard.classfile.Clazz $r1;
        int $i0, $i1;
        proguard.classfile.attribute.ConstantValueAttribute $r3;
        proguard.classfile.attribute.visitor.AttributeVisitor[] $r4;

        r0 := @this: proguard.classfile.attribute.visitor.MultiAttributeVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Field;

        $r3 := @parameter2: proguard.classfile.attribute.ConstantValueAttribute;

        $i0 = 0;

     label1:
        $r4 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $i1 = lengthof $r4;

        if $i0 >= $i1 goto label2;

        $r4 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $r5 = $r4[$i0];

        interfaceinvoke $r5.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitConstantValueAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.ConstantValueAttribute)>($r1, $r2, $r3);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void visitDeprecatedAttribute(proguard.classfile.Clazz, proguard.classfile.Field, proguard.classfile.attribute.DeprecatedAttribute)
    {
        proguard.classfile.attribute.visitor.AttributeVisitor $r5;
        proguard.classfile.Field $r2;
        proguard.classfile.attribute.DeprecatedAttribute $r3;
        proguard.classfile.attribute.visitor.MultiAttributeVisitor r0;
        proguard.classfile.Clazz $r1;
        int $i0, $i1;
        proguard.classfile.attribute.visitor.AttributeVisitor[] $r4;

        r0 := @this: proguard.classfile.attribute.visitor.MultiAttributeVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Field;

        $r3 := @parameter2: proguard.classfile.attribute.DeprecatedAttribute;

        $i0 = 0;

     label1:
        $r4 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $i1 = lengthof $r4;

        if $i0 >= $i1 goto label2;

        $r4 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $r5 = $r4[$i0];

        interfaceinvoke $r5.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitDeprecatedAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.DeprecatedAttribute)>($r1, $r2, $r3);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void visitDeprecatedAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.DeprecatedAttribute)
    {
        proguard.classfile.attribute.visitor.AttributeVisitor $r5;
        proguard.classfile.attribute.DeprecatedAttribute $r3;
        proguard.classfile.attribute.visitor.MultiAttributeVisitor r0;
        proguard.classfile.Clazz $r1;
        int $i0, $i1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.visitor.AttributeVisitor[] $r4;

        r0 := @this: proguard.classfile.attribute.visitor.MultiAttributeVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.DeprecatedAttribute;

        $i0 = 0;

     label1:
        $r4 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $i1 = lengthof $r4;

        if $i0 >= $i1 goto label2;

        $r4 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $r5 = $r4[$i0];

        interfaceinvoke $r5.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitDeprecatedAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.DeprecatedAttribute)>($r1, $r2, $r3);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void visitDeprecatedAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.DeprecatedAttribute)
    {
        proguard.classfile.Clazz $r1;
        int $i0, $i1;
        proguard.classfile.attribute.visitor.AttributeVisitor $r4;
        proguard.classfile.attribute.DeprecatedAttribute $r2;
        proguard.classfile.attribute.visitor.AttributeVisitor[] $r3;
        proguard.classfile.attribute.visitor.MultiAttributeVisitor r0;

        r0 := @this: proguard.classfile.attribute.visitor.MultiAttributeVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.DeprecatedAttribute;

        $i0 = 0;

     label1:
        $r3 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $i1 = lengthof $r3;

        if $i0 >= $i1 goto label2;

        $r3 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $r4 = $r3[$i0];

        interfaceinvoke $r4.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitDeprecatedAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.DeprecatedAttribute)>($r1, $r2);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void visitEnclosingMethodAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.EnclosingMethodAttribute)
    {
        proguard.classfile.attribute.EnclosingMethodAttribute $r2;
        proguard.classfile.Clazz $r1;
        int $i0, $i1;
        proguard.classfile.attribute.visitor.AttributeVisitor $r4;
        proguard.classfile.attribute.visitor.AttributeVisitor[] $r3;
        proguard.classfile.attribute.visitor.MultiAttributeVisitor r0;

        r0 := @this: proguard.classfile.attribute.visitor.MultiAttributeVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.EnclosingMethodAttribute;

        $i0 = 0;

     label1:
        $r3 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $i1 = lengthof $r3;

        if $i0 >= $i1 goto label2;

        $r3 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $r4 = $r3[$i0];

        interfaceinvoke $r4.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitEnclosingMethodAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.EnclosingMethodAttribute)>($r1, $r2);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void visitExceptionsAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.ExceptionsAttribute)
    {
        proguard.classfile.attribute.visitor.AttributeVisitor $r5;
        proguard.classfile.attribute.visitor.MultiAttributeVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.ExceptionsAttribute $r3;
        int $i0, $i1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.visitor.AttributeVisitor[] $r4;

        r0 := @this: proguard.classfile.attribute.visitor.MultiAttributeVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.ExceptionsAttribute;

        $i0 = 0;

     label1:
        $r4 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $i1 = lengthof $r4;

        if $i0 >= $i1 goto label2;

        $r4 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $r5 = $r4[$i0];

        interfaceinvoke $r5.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitExceptionsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.ExceptionsAttribute)>($r1, $r2, $r3);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void visitInnerClassesAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.InnerClassesAttribute)
    {
        proguard.classfile.attribute.InnerClassesAttribute $r2;
        proguard.classfile.Clazz $r1;
        int $i0, $i1;
        proguard.classfile.attribute.visitor.AttributeVisitor $r4;
        proguard.classfile.attribute.visitor.AttributeVisitor[] $r3;
        proguard.classfile.attribute.visitor.MultiAttributeVisitor r0;

        r0 := @this: proguard.classfile.attribute.visitor.MultiAttributeVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.InnerClassesAttribute;

        $i0 = 0;

     label1:
        $r3 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $i1 = lengthof $r3;

        if $i0 >= $i1 goto label2;

        $r3 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $r4 = $r3[$i0];

        interfaceinvoke $r4.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitInnerClassesAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.InnerClassesAttribute)>($r1, $r2);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void visitLineNumberTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LineNumberTableAttribute)
    {
        proguard.classfile.attribute.LineNumberTableAttribute $r4;
        proguard.classfile.attribute.visitor.AttributeVisitor $r6;
        proguard.classfile.attribute.visitor.MultiAttributeVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0, $i1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.visitor.AttributeVisitor[] $r5;

        r0 := @this: proguard.classfile.attribute.visitor.MultiAttributeVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.LineNumberTableAttribute;

        $i0 = 0;

     label1:
        $r5 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $i1 = lengthof $r5;

        if $i0 >= $i1 goto label2;

        $r5 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $r6 = $r5[$i0];

        interfaceinvoke $r6.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitLineNumberTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LineNumberTableAttribute)>($r1, $r2, $r3, $r4);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void visitLocalVariableTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LocalVariableTableAttribute)
    {
        proguard.classfile.attribute.visitor.AttributeVisitor $r6;
        proguard.classfile.attribute.visitor.MultiAttributeVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0, $i1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.LocalVariableTableAttribute $r4;
        proguard.classfile.attribute.visitor.AttributeVisitor[] $r5;

        r0 := @this: proguard.classfile.attribute.visitor.MultiAttributeVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.LocalVariableTableAttribute;

        $i0 = 0;

     label1:
        $r5 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $i1 = lengthof $r5;

        if $i0 >= $i1 goto label2;

        $r5 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $r6 = $r5[$i0];

        interfaceinvoke $r6.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitLocalVariableTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTableAttribute)>($r1, $r2, $r3, $r4);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void visitLocalVariableTypeTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LocalVariableTypeTableAttribute)
    {
        proguard.classfile.attribute.visitor.AttributeVisitor $r6;
        proguard.classfile.attribute.visitor.MultiAttributeVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0, $i1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.LocalVariableTypeTableAttribute $r4;
        proguard.classfile.attribute.visitor.AttributeVisitor[] $r5;

        r0 := @this: proguard.classfile.attribute.visitor.MultiAttributeVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.LocalVariableTypeTableAttribute;

        $i0 = 0;

     label1:
        $r5 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $i1 = lengthof $r5;

        if $i0 >= $i1 goto label2;

        $r5 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $r6 = $r5[$i0];

        interfaceinvoke $r6.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitLocalVariableTypeTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTypeTableAttribute)>($r1, $r2, $r3, $r4);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void visitRuntimeInvisibleAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.Field, proguard.classfile.attribute.'annotation'.RuntimeInvisibleAnnotationsAttribute)
    {
        proguard.classfile.attribute.visitor.AttributeVisitor $r5;
        proguard.classfile.Field $r2;
        proguard.classfile.attribute.'annotation'.RuntimeInvisibleAnnotationsAttribute $r3;
        proguard.classfile.attribute.visitor.MultiAttributeVisitor r0;
        proguard.classfile.Clazz $r1;
        int $i0, $i1;
        proguard.classfile.attribute.visitor.AttributeVisitor[] $r4;

        r0 := @this: proguard.classfile.attribute.visitor.MultiAttributeVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Field;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.RuntimeInvisibleAnnotationsAttribute;

        $i0 = 0;

     label1:
        $r4 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $i1 = lengthof $r4;

        if $i0 >= $i1 goto label2;

        $r4 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $r5 = $r4[$i0];

        interfaceinvoke $r5.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitRuntimeInvisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.'annotation'.RuntimeInvisibleAnnotationsAttribute)>($r1, $r2, $r3);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void visitRuntimeInvisibleAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.'annotation'.RuntimeInvisibleAnnotationsAttribute)
    {
        proguard.classfile.attribute.visitor.AttributeVisitor $r5;
        proguard.classfile.attribute.'annotation'.RuntimeInvisibleAnnotationsAttribute $r3;
        proguard.classfile.attribute.visitor.MultiAttributeVisitor r0;
        proguard.classfile.Clazz $r1;
        int $i0, $i1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.visitor.AttributeVisitor[] $r4;

        r0 := @this: proguard.classfile.attribute.visitor.MultiAttributeVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.RuntimeInvisibleAnnotationsAttribute;

        $i0 = 0;

     label1:
        $r4 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $i1 = lengthof $r4;

        if $i0 >= $i1 goto label2;

        $r4 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $r5 = $r4[$i0];

        interfaceinvoke $r5.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitRuntimeInvisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.'annotation'.RuntimeInvisibleAnnotationsAttribute)>($r1, $r2, $r3);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void visitRuntimeInvisibleAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.'annotation'.RuntimeInvisibleAnnotationsAttribute)
    {
        proguard.classfile.Clazz $r1;
        int $i0, $i1;
        proguard.classfile.attribute.visitor.AttributeVisitor $r4;
        proguard.classfile.attribute.'annotation'.RuntimeInvisibleAnnotationsAttribute $r2;
        proguard.classfile.attribute.visitor.AttributeVisitor[] $r3;
        proguard.classfile.attribute.visitor.MultiAttributeVisitor r0;

        r0 := @this: proguard.classfile.attribute.visitor.MultiAttributeVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.RuntimeInvisibleAnnotationsAttribute;

        $i0 = 0;

     label1:
        $r3 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $i1 = lengthof $r3;

        if $i0 >= $i1 goto label2;

        $r3 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $r4 = $r3[$i0];

        interfaceinvoke $r4.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitRuntimeInvisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.'annotation'.RuntimeInvisibleAnnotationsAttribute)>($r1, $r2);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void visitRuntimeInvisibleParameterAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.'annotation'.RuntimeInvisibleParameterAnnotationsAttribute)
    {
        proguard.classfile.attribute.visitor.AttributeVisitor $r5;
        proguard.classfile.attribute.'annotation'.RuntimeInvisibleParameterAnnotationsAttribute $r3;
        proguard.classfile.attribute.visitor.MultiAttributeVisitor r0;
        proguard.classfile.Clazz $r1;
        int $i0, $i1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.visitor.AttributeVisitor[] $r4;

        r0 := @this: proguard.classfile.attribute.visitor.MultiAttributeVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.RuntimeInvisibleParameterAnnotationsAttribute;

        $i0 = 0;

     label1:
        $r4 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $i1 = lengthof $r4;

        if $i0 >= $i1 goto label2;

        $r4 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $r5 = $r4[$i0];

        interfaceinvoke $r5.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitRuntimeInvisibleParameterAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.'annotation'.RuntimeInvisibleParameterAnnotationsAttribute)>($r1, $r2, $r3);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void visitRuntimeVisibleAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.Field, proguard.classfile.attribute.'annotation'.RuntimeVisibleAnnotationsAttribute)
    {
        proguard.classfile.attribute.visitor.AttributeVisitor $r5;
        proguard.classfile.Field $r2;
        proguard.classfile.attribute.visitor.MultiAttributeVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.'annotation'.RuntimeVisibleAnnotationsAttribute $r3;
        int $i0, $i1;
        proguard.classfile.attribute.visitor.AttributeVisitor[] $r4;

        r0 := @this: proguard.classfile.attribute.visitor.MultiAttributeVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Field;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.RuntimeVisibleAnnotationsAttribute;

        $i0 = 0;

     label1:
        $r4 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $i1 = lengthof $r4;

        if $i0 >= $i1 goto label2;

        $r4 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $r5 = $r4[$i0];

        interfaceinvoke $r5.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitRuntimeVisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.'annotation'.RuntimeVisibleAnnotationsAttribute)>($r1, $r2, $r3);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void visitRuntimeVisibleAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.'annotation'.RuntimeVisibleAnnotationsAttribute)
    {
        proguard.classfile.attribute.visitor.AttributeVisitor $r5;
        proguard.classfile.attribute.visitor.MultiAttributeVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.'annotation'.RuntimeVisibleAnnotationsAttribute $r3;
        int $i0, $i1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.visitor.AttributeVisitor[] $r4;

        r0 := @this: proguard.classfile.attribute.visitor.MultiAttributeVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.RuntimeVisibleAnnotationsAttribute;

        $i0 = 0;

     label1:
        $r4 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $i1 = lengthof $r4;

        if $i0 >= $i1 goto label2;

        $r4 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $r5 = $r4[$i0];

        interfaceinvoke $r5.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitRuntimeVisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.'annotation'.RuntimeVisibleAnnotationsAttribute)>($r1, $r2, $r3);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void visitRuntimeVisibleAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.'annotation'.RuntimeVisibleAnnotationsAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.'annotation'.RuntimeVisibleAnnotationsAttribute $r2;
        int $i0, $i1;
        proguard.classfile.attribute.visitor.AttributeVisitor $r4;
        proguard.classfile.attribute.visitor.AttributeVisitor[] $r3;
        proguard.classfile.attribute.visitor.MultiAttributeVisitor r0;

        r0 := @this: proguard.classfile.attribute.visitor.MultiAttributeVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.RuntimeVisibleAnnotationsAttribute;

        $i0 = 0;

     label1:
        $r3 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $i1 = lengthof $r3;

        if $i0 >= $i1 goto label2;

        $r3 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $r4 = $r3[$i0];

        interfaceinvoke $r4.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitRuntimeVisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.'annotation'.RuntimeVisibleAnnotationsAttribute)>($r1, $r2);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void visitRuntimeVisibleParameterAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.'annotation'.RuntimeVisibleParameterAnnotationsAttribute)
    {
        proguard.classfile.attribute.'annotation'.RuntimeVisibleParameterAnnotationsAttribute $r3;
        proguard.classfile.attribute.visitor.AttributeVisitor $r5;
        proguard.classfile.attribute.visitor.MultiAttributeVisitor r0;
        proguard.classfile.Clazz $r1;
        int $i0, $i1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.visitor.AttributeVisitor[] $r4;

        r0 := @this: proguard.classfile.attribute.visitor.MultiAttributeVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.RuntimeVisibleParameterAnnotationsAttribute;

        $i0 = 0;

     label1:
        $r4 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $i1 = lengthof $r4;

        if $i0 >= $i1 goto label2;

        $r4 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $r5 = $r4[$i0];

        interfaceinvoke $r5.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitRuntimeVisibleParameterAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.'annotation'.RuntimeVisibleParameterAnnotationsAttribute)>($r1, $r2, $r3);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void visitSignatureAttribute(proguard.classfile.Clazz, proguard.classfile.Field, proguard.classfile.attribute.SignatureAttribute)
    {
        proguard.classfile.attribute.visitor.AttributeVisitor $r5;
        proguard.classfile.Field $r2;
        proguard.classfile.attribute.visitor.MultiAttributeVisitor r0;
        proguard.classfile.Clazz $r1;
        int $i0, $i1;
        proguard.classfile.attribute.SignatureAttribute $r3;
        proguard.classfile.attribute.visitor.AttributeVisitor[] $r4;

        r0 := @this: proguard.classfile.attribute.visitor.MultiAttributeVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Field;

        $r3 := @parameter2: proguard.classfile.attribute.SignatureAttribute;

        $i0 = 0;

     label1:
        $r4 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $i1 = lengthof $r4;

        if $i0 >= $i1 goto label2;

        $r4 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $r5 = $r4[$i0];

        interfaceinvoke $r5.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitSignatureAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.SignatureAttribute)>($r1, $r2, $r3);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void visitSignatureAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.SignatureAttribute)
    {
        proguard.classfile.attribute.visitor.AttributeVisitor $r5;
        proguard.classfile.attribute.visitor.MultiAttributeVisitor r0;
        proguard.classfile.Clazz $r1;
        int $i0, $i1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.SignatureAttribute $r3;
        proguard.classfile.attribute.visitor.AttributeVisitor[] $r4;

        r0 := @this: proguard.classfile.attribute.visitor.MultiAttributeVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.SignatureAttribute;

        $i0 = 0;

     label1:
        $r4 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $i1 = lengthof $r4;

        if $i0 >= $i1 goto label2;

        $r4 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $r5 = $r4[$i0];

        interfaceinvoke $r5.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitSignatureAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.SignatureAttribute)>($r1, $r2, $r3);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void visitSignatureAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.SignatureAttribute)
    {
        proguard.classfile.Clazz $r1;
        int $i0, $i1;
        proguard.classfile.attribute.visitor.AttributeVisitor $r4;
        proguard.classfile.attribute.SignatureAttribute $r2;
        proguard.classfile.attribute.visitor.AttributeVisitor[] $r3;
        proguard.classfile.attribute.visitor.MultiAttributeVisitor r0;

        r0 := @this: proguard.classfile.attribute.visitor.MultiAttributeVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.SignatureAttribute;

        $i0 = 0;

     label1:
        $r3 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $i1 = lengthof $r3;

        if $i0 >= $i1 goto label2;

        $r3 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $r4 = $r3[$i0];

        interfaceinvoke $r4.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitSignatureAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SignatureAttribute)>($r1, $r2);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void visitSourceDirAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.SourceDirAttribute)
    {
        proguard.classfile.attribute.SourceDirAttribute $r2;
        proguard.classfile.Clazz $r1;
        int $i0, $i1;
        proguard.classfile.attribute.visitor.AttributeVisitor $r4;
        proguard.classfile.attribute.visitor.AttributeVisitor[] $r3;
        proguard.classfile.attribute.visitor.MultiAttributeVisitor r0;

        r0 := @this: proguard.classfile.attribute.visitor.MultiAttributeVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.SourceDirAttribute;

        $i0 = 0;

     label1:
        $r3 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $i1 = lengthof $r3;

        if $i0 >= $i1 goto label2;

        $r3 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $r4 = $r3[$i0];

        interfaceinvoke $r4.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitSourceDirAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SourceDirAttribute)>($r1, $r2);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void visitSourceFileAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.SourceFileAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.SourceFileAttribute $r2;
        int $i0, $i1;
        proguard.classfile.attribute.visitor.AttributeVisitor $r4;
        proguard.classfile.attribute.visitor.AttributeVisitor[] $r3;
        proguard.classfile.attribute.visitor.MultiAttributeVisitor r0;

        r0 := @this: proguard.classfile.attribute.visitor.MultiAttributeVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.SourceFileAttribute;

        $i0 = 0;

     label1:
        $r3 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $i1 = lengthof $r3;

        if $i0 >= $i1 goto label2;

        $r3 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $r4 = $r3[$i0];

        interfaceinvoke $r4.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitSourceFileAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SourceFileAttribute)>($r1, $r2);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void visitStackMapAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.preverification.StackMapAttribute)
    {
        proguard.classfile.attribute.preverification.StackMapAttribute $r4;
        proguard.classfile.attribute.visitor.AttributeVisitor $r6;
        proguard.classfile.attribute.visitor.MultiAttributeVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0, $i1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.visitor.AttributeVisitor[] $r5;

        r0 := @this: proguard.classfile.attribute.visitor.MultiAttributeVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.preverification.StackMapAttribute;

        $i0 = 0;

     label1:
        $r5 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $i1 = lengthof $r5;

        if $i0 >= $i1 goto label2;

        $r5 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $r6 = $r5[$i0];

        interfaceinvoke $r6.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitStackMapAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.preverification.StackMapAttribute)>($r1, $r2, $r3, $r4);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void visitStackMapTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.preverification.StackMapTableAttribute)
    {
        proguard.classfile.attribute.visitor.AttributeVisitor $r6;
        proguard.classfile.attribute.visitor.MultiAttributeVisitor r0;
        proguard.classfile.attribute.preverification.StackMapTableAttribute $r4;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0, $i1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.visitor.AttributeVisitor[] $r5;

        r0 := @this: proguard.classfile.attribute.visitor.MultiAttributeVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.preverification.StackMapTableAttribute;

        $i0 = 0;

     label1:
        $r5 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $i1 = lengthof $r5;

        if $i0 >= $i1 goto label2;

        $r5 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $r6 = $r5[$i0];

        interfaceinvoke $r6.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitStackMapTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.preverification.StackMapTableAttribute)>($r1, $r2, $r3, $r4);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void visitSyntheticAttribute(proguard.classfile.Clazz, proguard.classfile.Field, proguard.classfile.attribute.SyntheticAttribute)
    {
        proguard.classfile.attribute.SyntheticAttribute $r3;
        proguard.classfile.attribute.visitor.AttributeVisitor $r5;
        proguard.classfile.Field $r2;
        proguard.classfile.attribute.visitor.MultiAttributeVisitor r0;
        proguard.classfile.Clazz $r1;
        int $i0, $i1;
        proguard.classfile.attribute.visitor.AttributeVisitor[] $r4;

        r0 := @this: proguard.classfile.attribute.visitor.MultiAttributeVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Field;

        $r3 := @parameter2: proguard.classfile.attribute.SyntheticAttribute;

        $i0 = 0;

     label1:
        $r4 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $i1 = lengthof $r4;

        if $i0 >= $i1 goto label2;

        $r4 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $r5 = $r4[$i0];

        interfaceinvoke $r5.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitSyntheticAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.SyntheticAttribute)>($r1, $r2, $r3);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void visitSyntheticAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.SyntheticAttribute)
    {
        proguard.classfile.attribute.SyntheticAttribute $r3;
        proguard.classfile.attribute.visitor.AttributeVisitor $r5;
        proguard.classfile.attribute.visitor.MultiAttributeVisitor r0;
        proguard.classfile.Clazz $r1;
        int $i0, $i1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.visitor.AttributeVisitor[] $r4;

        r0 := @this: proguard.classfile.attribute.visitor.MultiAttributeVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.SyntheticAttribute;

        $i0 = 0;

     label1:
        $r4 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $i1 = lengthof $r4;

        if $i0 >= $i1 goto label2;

        $r4 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $r5 = $r4[$i0];

        interfaceinvoke $r5.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitSyntheticAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.SyntheticAttribute)>($r1, $r2, $r3);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void visitSyntheticAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.SyntheticAttribute)
    {
        proguard.classfile.Clazz $r1;
        int $i0, $i1;
        proguard.classfile.attribute.SyntheticAttribute $r2;
        proguard.classfile.attribute.visitor.AttributeVisitor $r4;
        proguard.classfile.attribute.visitor.AttributeVisitor[] $r3;
        proguard.classfile.attribute.visitor.MultiAttributeVisitor r0;

        r0 := @this: proguard.classfile.attribute.visitor.MultiAttributeVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.SyntheticAttribute;

        $i0 = 0;

     label1:
        $r3 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $i1 = lengthof $r3;

        if $i0 >= $i1 goto label2;

        $r3 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $r4 = $r3[$i0];

        interfaceinvoke $r4.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitSyntheticAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SyntheticAttribute)>($r1, $r2);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void visitUnknownAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.UnknownAttribute)
    {
        proguard.classfile.Clazz $r1;
        int $i0, $i1;
        proguard.classfile.attribute.visitor.AttributeVisitor $r4;
        proguard.classfile.attribute.UnknownAttribute $r2;
        proguard.classfile.attribute.visitor.AttributeVisitor[] $r3;
        proguard.classfile.attribute.visitor.MultiAttributeVisitor r0;

        r0 := @this: proguard.classfile.attribute.visitor.MultiAttributeVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.UnknownAttribute;

        $i0 = 0;

     label1:
        $r3 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $i1 = lengthof $r3;

        if $i0 >= $i1 goto label2;

        $r3 = r0.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors>;

        $r4 = $r3[$i0];

        interfaceinvoke $r4.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitUnknownAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.UnknownAttribute)>($r1, $r2);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }
}
