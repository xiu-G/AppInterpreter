public class com.yang.longrubblishclear.util.ImageManager extends java.lang.Object
{
    private static int HARD_CACHE_CAPACITY;
    public static final int LOAD_END;
    public static final int LOAD_THREAD_OK;
    private static final java.util.concurrent.ConcurrentHashMap mSoftBitmapCache;
    private static final java.lang.String outOfMemory;
    private android.content.Context appContext;
    private java.lang.String cacheFileDirs;
    private java.lang.String cachePath;
    private java.util.HashMap mCallbackMap;
    private final java.util.HashMap mHardBitmapCache;
    private final android.os.Handler mMainHandler;
    private java.io.File tempFile;

    static void <clinit>()
    {
        java.util.concurrent.ConcurrentHashMap $r0;
        int $i0;

        <com.yang.longrubblishclear.util.ImageManager: java.lang.String outOfMemory> = "OutOfMemoryError";

        <com.yang.longrubblishclear.util.ImageManager: int LOAD_THREAD_OK> = 0;

        <com.yang.longrubblishclear.util.ImageManager: int LOAD_END> = 1;

        <com.yang.longrubblishclear.util.ImageManager: int HARD_CACHE_CAPACITY> = 0;

        <com.yang.longrubblishclear.util.ImageManager: int HARD_CACHE_CAPACITY> = 30;

        $r0 = new java.util.concurrent.ConcurrentHashMap;

        $i0 = <com.yang.longrubblishclear.util.ImageManager: int HARD_CACHE_CAPACITY>;

        $i0 = $i0 / 2;

        specialinvoke $r0.<java.util.concurrent.ConcurrentHashMap: void <init>(int)>($i0);

        <com.yang.longrubblishclear.util.ImageManager: java.util.concurrent.ConcurrentHashMap mSoftBitmapCache> = $r0;

        return;
    }

    public void <init>(android.content.Context, java.lang.String, int)
    {
        android.content.Context $r1;
        com.yang.longrubblishclear.util.ImageManager r0;
        java.util.HashMap $r7;
        java.io.File $r6;
        int $i0;
        com.yang.longrubblishclear.util.ImageManager$1 $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r2, $r5;
        com.yang.longrubblishclear.util.ImageManager$2 $r8;

        r0 := @this: com.yang.longrubblishclear.util.ImageManager;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new com.yang.longrubblishclear.util.ImageManager$1;

        specialinvoke $r3.<com.yang.longrubblishclear.util.ImageManager$1: void <init>(com.yang.longrubblishclear.util.ImageManager)>(r0);

        r0.<com.yang.longrubblishclear.util.ImageManager: android.os.Handler mMainHandler> = $r3;

        $r4 = new java.lang.StringBuilder;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>($r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<com.yang.longrubblishclear.util.ImageManager: java.lang.String cacheFileDirs> = $r5;

        r0.<com.yang.longrubblishclear.util.ImageManager: java.lang.String cachePath> = $r2;

        $r6 = virtualinvoke $r1.<android.content.Context: java.io.File getCacheDir()>();

        r0.<com.yang.longrubblishclear.util.ImageManager: java.io.File tempFile> = $r6;

        $r1 = virtualinvoke $r1.<android.content.Context: android.content.Context getApplicationContext()>();

        r0.<com.yang.longrubblishclear.util.ImageManager: android.content.Context appContext> = $r1;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        r0.<com.yang.longrubblishclear.util.ImageManager: java.util.HashMap mCallbackMap> = $r7;

        <com.yang.longrubblishclear.util.ImageManager: int HARD_CACHE_CAPACITY> = $i0;

        $r8 = new com.yang.longrubblishclear.util.ImageManager$2;

        $i0 = <com.yang.longrubblishclear.util.ImageManager: int HARD_CACHE_CAPACITY>;

        $i0 = $i0 / 2;

        specialinvoke $r8.<com.yang.longrubblishclear.util.ImageManager$2: void <init>(com.yang.longrubblishclear.util.ImageManager,int,float,boolean)>(r0, $i0, 0.75F, 1);

        r0.<com.yang.longrubblishclear.util.ImageManager: java.util.HashMap mHardBitmapCache> = $r8;

        return;
    }

    static void access$0(com.yang.longrubblishclear.util.ImageManager, java.lang.String, android.graphics.Bitmap)
    {
        java.lang.String $r1;
        com.yang.longrubblishclear.util.ImageManager $r0;
        android.graphics.Bitmap $r2;

        $r0 := @parameter0: com.yang.longrubblishclear.util.ImageManager;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: android.graphics.Bitmap;

        specialinvoke $r0.<com.yang.longrubblishclear.util.ImageManager: void addBitmapToCache(java.lang.String,android.graphics.Bitmap)>($r1, $r2);

        return;
    }

    static java.util.HashMap access$1(com.yang.longrubblishclear.util.ImageManager)
    {
        java.util.HashMap r1;
        com.yang.longrubblishclear.util.ImageManager $r0;

        $r0 := @parameter0: com.yang.longrubblishclear.util.ImageManager;

        r1 = $r0.<com.yang.longrubblishclear.util.ImageManager: java.util.HashMap mCallbackMap>;

        return r1;
    }

    static android.content.Context access$2(com.yang.longrubblishclear.util.ImageManager)
    {
        android.content.Context r1;
        com.yang.longrubblishclear.util.ImageManager $r0;

        $r0 := @parameter0: com.yang.longrubblishclear.util.ImageManager;

        r1 = $r0.<com.yang.longrubblishclear.util.ImageManager: android.content.Context appContext>;

        return r1;
    }

    static java.util.HashMap access$3(com.yang.longrubblishclear.util.ImageManager)
    {
        java.util.HashMap r1;
        com.yang.longrubblishclear.util.ImageManager $r0;

        $r0 := @parameter0: com.yang.longrubblishclear.util.ImageManager;

        r1 = $r0.<com.yang.longrubblishclear.util.ImageManager: java.util.HashMap mHardBitmapCache>;

        return r1;
    }

    static java.util.concurrent.ConcurrentHashMap access$4()
    {
        java.util.concurrent.ConcurrentHashMap r0;

        r0 = <com.yang.longrubblishclear.util.ImageManager: java.util.concurrent.ConcurrentHashMap mSoftBitmapCache>;

        return r0;
    }

    static boolean access$5(com.yang.longrubblishclear.util.ImageManager)
    {
        com.yang.longrubblishclear.util.ImageManager $r0;
        boolean $z0;

        $r0 := @parameter0: com.yang.longrubblishclear.util.ImageManager;

        $z0 = specialinvoke $r0.<com.yang.longrubblishclear.util.ImageManager: boolean chackCacheDirs()>();

        return $z0;
    }

    static java.lang.String access$6(com.yang.longrubblishclear.util.ImageManager)
    {
        java.lang.String r1;
        com.yang.longrubblishclear.util.ImageManager $r0;

        $r0 := @parameter0: com.yang.longrubblishclear.util.ImageManager;

        r1 = $r0.<com.yang.longrubblishclear.util.ImageManager: java.lang.String cacheFileDirs>;

        return r1;
    }

    static int access$7()
    {
        int i0;

        i0 = <com.yang.longrubblishclear.util.ImageManager: int HARD_CACHE_CAPACITY>;

        return i0;
    }

    private void addBitmapToCache(java.lang.String, android.graphics.Bitmap)
    {
        java.lang.Throwable $r5;
        com.yang.longrubblishclear.util.ImageManager r0;
        android.graphics.Bitmap $r2;
        java.util.HashMap $r3, $r4;
        java.lang.String $r1;

        r0 := @this: com.yang.longrubblishclear.util.ImageManager;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: android.graphics.Bitmap;

        $r3 = r0.<com.yang.longrubblishclear.util.ImageManager: java.util.HashMap mHardBitmapCache>;

        entermonitor $r3;

     label1:
        $r4 = r0.<com.yang.longrubblishclear.util.ImageManager: java.util.HashMap mHardBitmapCache>;

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r1);

        $r4 = r0.<com.yang.longrubblishclear.util.ImageManager: java.util.HashMap mHardBitmapCache>;

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        exitmonitor $r3;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        exitmonitor $r3;

     label4:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private boolean chackCacheDirs()
    {
        com.yang.longrubblishclear.util.ImageManager r0;
        java.lang.String $r2;
        java.io.File r1;
        boolean $z0;

        r0 := @this: com.yang.longrubblishclear.util.ImageManager;

        r1 = new java.io.File;

        $r2 = r0.<com.yang.longrubblishclear.util.ImageManager: java.lang.String cachePath>;

        specialinvoke r1.<java.io.File: void <init>(java.lang.String)>($r2);

        $z0 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke r1.<java.io.File: boolean mkdirs()>();

        return $z0;

     label1:
        return 1;
    }

    private boolean clearAllCache()
    {
        android.content.Context $r2;
        com.yang.longrubblishclear.util.ImageManager r0;
        java.io.File r1, $r3;
        int $i0, $i1;
        java.io.File[] $r4;
        boolean $z0;

        r0 := @this: com.yang.longrubblishclear.util.ImageManager;

        $i1 = 0;

        $r2 = r0.<com.yang.longrubblishclear.util.ImageManager: android.content.Context appContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.io.File getCacheDir()>();

        if $r3 == null goto label3;

        $z0 = virtualinvoke $r3.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label3;

        $z0 = virtualinvoke $r3.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label3;

        $r4 = virtualinvoke $r3.<java.io.File: java.io.File[] listFiles()>();

        $i0 = lengthof $r4;

     label1:
        if $i1 < $i0 goto label2;

        $z0 = virtualinvoke $r3.<java.io.File: boolean delete()>();

        return $z0;

     label2:
        r1 = $r4[$i1];

        virtualinvoke r1.<java.io.File: boolean delete()>();

        $i1 = $i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    private boolean haveCacheFile(java.lang.String)
    {
        com.yang.longrubblishclear.util.ImageManager r0;
        java.lang.StringBuilder $r3;
        java.lang.String $r1;
        java.io.File r2;
        boolean $z0;

        r0 := @this: com.yang.longrubblishclear.util.ImageManager;

        $r1 := @parameter0: java.lang.String;

        r2 = new java.io.File;

        specialinvoke r2.<java.io.File: void <init>(java.lang.String)>($r1);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("path");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("kkk");

        $z0 = virtualinvoke r2.<java.io.File: boolean exists()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("path", $r1);

        $z0 = virtualinvoke r2.<java.io.File: boolean exists()>();

        return $z0;
    }

    private android.graphics.Bitmap tryLoadFromCache(java.lang.String)
    {
        java.lang.Throwable r7;
        com.yang.longrubblishclear.util.ImageManager r0;
        java.util.HashMap $r9;
        java.lang.String $r1;
        boolean $z0;
        java.util.concurrent.ConcurrentHashMap $r10;
        java.io.FileInputStream r2, $r12;
        java.io.File $r4, $r13;
        java.io.FileNotFoundException $r15;
        android.graphics.Bitmap r3, $r5;
        java.lang.StringBuilder $r6, $r14;
        java.lang.OutOfMemoryError r8, r11;

        r0 := @this: com.yang.longrubblishclear.util.ImageManager;

        $r1 := @parameter0: java.lang.String;

        r3 = null;

        $z0 = specialinvoke r0.<com.yang.longrubblishclear.util.ImageManager: boolean haveCacheFile(java.lang.String)>($r1);

        if $z0 == 0 goto label18;

     label01:
        $r12 = new java.io.FileInputStream;

     label02:
        r2 = $r12;

     label03:
        specialinvoke $r12.<java.io.FileInputStream: void <init>(java.lang.String)>($r1);

     label04:
        $r13 = new java.io.File;

     label05:
        $r4 = $r13;

     label06:
        specialinvoke $r13.<java.io.File: void <init>(java.lang.String)>($r1);

        $r5 = staticinvoke <com.yang.longrubblishclear.util.ImageTools: android.graphics.Bitmap formBitmapOptions(java.io.InputStream,java.io.File)>(r2, $r4);

     label07:
        r3 = $r5;

     label08:
        $r14 = new java.lang.StringBuilder;

     label09:
        $r6 = $r14;

     label10:
        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("bitmap");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("bitmap", $r1);

     label11:
        return $r5;

     label12:
        r7 := @caughtexception;

     label13:
        $r15 = (java.io.FileNotFoundException) r7;

        virtualinvoke $r15.<java.io.FileNotFoundException: void printStackTrace()>();

        return r3;

     label14:
        r8 := @caughtexception;

     label15:
        $r9 = r0.<com.yang.longrubblishclear.util.ImageManager: java.util.HashMap mHardBitmapCache>;

        virtualinvoke $r9.<java.util.HashMap: void clear()>();

        $r10 = <com.yang.longrubblishclear.util.ImageManager: java.util.concurrent.ConcurrentHashMap mSoftBitmapCache>;

        virtualinvoke $r10.<java.util.concurrent.ConcurrentHashMap: void clear()>();

        staticinvoke <java.lang.System: void gc()>();

        return r3;

     label16:
        r11 := @caughtexception;

        goto label15;

     label17:
        r7 := @caughtexception;

        goto label13;

     label18:
        return null;

        catch java.io.FileNotFoundException from label03 to label04 with label12;
        catch java.lang.OutOfMemoryError from label01 to label02 with label14;
        catch java.lang.OutOfMemoryError from label03 to label04 with label14;
        catch java.io.FileNotFoundException from label06 to label07 with label17;
        catch java.io.FileNotFoundException from label10 to label11 with label17;
        catch java.lang.OutOfMemoryError from label04 to label05 with label16;
        catch java.lang.OutOfMemoryError from label06 to label07 with label16;
        catch java.lang.OutOfMemoryError from label08 to label09 with label16;
        catch java.lang.OutOfMemoryError from label10 to label11 with label16;
    }

    private android.graphics.Bitmap tryLoadFromCacheAsync(java.lang.String, int)
    {
        java.lang.Throwable r8;
        com.yang.longrubblishclear.util.ImageManager r0;
        java.util.HashMap $r10;
        int $i0;
        java.lang.String $r1, $r7;
        boolean $z0;
        com.yang.longrubblishclear.util.ImageManager$ImageDownloaderCallback r13;
        java.util.concurrent.ConcurrentHashMap $r11;
        java.io.FileInputStream r2, $r15;
        java.io.File $r4, $r16;
        java.io.FileNotFoundException $r18;
        android.graphics.Bitmap r3, $r5;
        java.lang.StringBuilder $r6, $r17;
        java.lang.Object $r12;
        java.lang.OutOfMemoryError r9, r14;

        r0 := @this: com.yang.longrubblishclear.util.ImageManager;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        r3 = null;

        $z0 = specialinvoke r0.<com.yang.longrubblishclear.util.ImageManager: boolean haveCacheFile(java.lang.String)>($r1);

        if $z0 == 0 goto label18;

     label01:
        $r15 = new java.io.FileInputStream;

     label02:
        r2 = $r15;

     label03:
        specialinvoke $r15.<java.io.FileInputStream: void <init>(java.lang.String)>($r1);

     label04:
        $r16 = new java.io.File;

     label05:
        $r4 = $r16;

     label06:
        specialinvoke $r16.<java.io.File: void <init>(java.lang.String)>($r1);

        $r5 = staticinvoke <com.yang.longrubblishclear.util.ImageTools: android.graphics.Bitmap formBitmapOptions(java.io.InputStream,java.io.File)>(r2, $r4);

     label07:
        r3 = $r5;

     label08:
        $r17 = new java.lang.StringBuilder;

     label09:
        $r6 = $r17;

     label10:
        specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>("bitmap");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("bitmap", $r7);

     label11:
        return $r5;

     label12:
        r8 := @caughtexception;

     label13:
        $r18 = (java.io.FileNotFoundException) r8;

        virtualinvoke $r18.<java.io.FileNotFoundException: void printStackTrace()>();

        return r3;

     label14:
        r9 := @caughtexception;

     label15:
        $r10 = r0.<com.yang.longrubblishclear.util.ImageManager: java.util.HashMap mHardBitmapCache>;

        virtualinvoke $r10.<java.util.HashMap: void clear()>();

        $r11 = <com.yang.longrubblishclear.util.ImageManager: java.util.concurrent.ConcurrentHashMap mSoftBitmapCache>;

        virtualinvoke $r11.<java.util.concurrent.ConcurrentHashMap: void clear()>();

        staticinvoke <java.lang.System: void gc()>();

        $r10 = r0.<com.yang.longrubblishclear.util.ImageManager: java.util.HashMap mCallbackMap>;

        $r12 = virtualinvoke $r10.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r1);

        r13 = (com.yang.longrubblishclear.util.ImageManager$ImageDownloaderCallback) $r12;

        if r13 == null goto label19;

        interfaceinvoke r13.<com.yang.longrubblishclear.util.ImageManager$ImageDownloaderCallback: void imageUpdateProgress(java.lang.String,int)>("OutOfMemoryError", $i0);

        return r3;

     label16:
        r14 := @caughtexception;

        goto label15;

     label17:
        r8 := @caughtexception;

        goto label13;

     label18:
        return null;

     label19:
        return r3;

        catch java.io.FileNotFoundException from label03 to label04 with label12;
        catch java.lang.OutOfMemoryError from label01 to label02 with label14;
        catch java.lang.OutOfMemoryError from label03 to label04 with label14;
        catch java.io.FileNotFoundException from label06 to label07 with label17;
        catch java.io.FileNotFoundException from label10 to label11 with label17;
        catch java.lang.OutOfMemoryError from label04 to label05 with label16;
        catch java.lang.OutOfMemoryError from label06 to label07 with label16;
        catch java.lang.OutOfMemoryError from label08 to label09 with label16;
        catch java.lang.OutOfMemoryError from label10 to label11 with label16;
    }

    public android.graphics.Bitmap getBitmapFromCache(java.lang.String)
    {
        java.lang.Throwable $r8;
        com.yang.longrubblishclear.util.ImageManager r0;
        java.util.concurrent.ConcurrentHashMap $r6;
        java.util.HashMap $r2, $r3;
        android.graphics.Bitmap r5;
        java.lang.Object $r4;
        java.lang.String $r1;
        java.lang.ref.SoftReference r7;

        r0 := @this: com.yang.longrubblishclear.util.ImageManager;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.yang.longrubblishclear.util.ImageManager: java.util.HashMap mHardBitmapCache>;

        entermonitor $r2;

     label1:
        $r3 = r0.<com.yang.longrubblishclear.util.ImageManager: java.util.HashMap mHardBitmapCache>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r1);

        r5 = (android.graphics.Bitmap) $r4;

        if r5 == null goto label3;

        $r3 = r0.<com.yang.longrubblishclear.util.ImageManager: java.util.HashMap mHardBitmapCache>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r1);

        $r3 = r0.<com.yang.longrubblishclear.util.ImageManager: java.util.HashMap mHardBitmapCache>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, r5);

        exitmonitor $r2;

     label2:
        return r5;

     label3:
        exitmonitor $r2;

     label4:
        $r6 = <com.yang.longrubblishclear.util.ImageManager: java.util.concurrent.ConcurrentHashMap mSoftBitmapCache>;

        $r4 = virtualinvoke $r6.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r1);

        r7 = (java.lang.ref.SoftReference) $r4;

        if r7 == null goto label9;

        $r4 = virtualinvoke r7.<java.lang.ref.SoftReference: java.lang.Object get()>();

        r5 = (android.graphics.Bitmap) $r4;

        if r5 == null goto label5;

        $r2 = r0.<com.yang.longrubblishclear.util.ImageManager: java.util.HashMap mHardBitmapCache>;

        virtualinvoke $r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, r5);

     label5:
        $r6 = <com.yang.longrubblishclear.util.ImageManager: java.util.concurrent.ConcurrentHashMap mSoftBitmapCache>;

        virtualinvoke $r6.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>($r1);

        return r5;

     label6:
        $r8 := @caughtexception;

     label7:
        exitmonitor $r2;

     label8:
        throw $r8;

     label9:
        return null;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public android.graphics.Bitmap getBitmapFromDatabase(java.lang.String, int, com.yang.longrubblishclear.util.ImageManager$ImageDownloaderCallback)
    {
        java.lang.Throwable r3;
        android.content.Context $r5;
        com.yang.longrubblishclear.util.ImageManager r0;
        android.net.Uri $r7;
        java.lang.String[] $r8, $r9;
        long $l1;
        byte $b2;
        android.content.ContentResolver $r6;
        java.lang.Long $r11;
        int $i0;
        java.lang.String $r1;
        android.database.Cursor $r10;
        boolean $z0;
        com.yang.longrubblishclear.util.ImageManager$ImageDownloaderCallback $r2;
        java.io.IOException $r13;
        android.graphics.Bitmap r4;
        java.io.InputStream $r12;

        r0 := @this: com.yang.longrubblishclear.util.ImageManager;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 := @parameter2: com.yang.longrubblishclear.util.ImageManager$ImageDownloaderCallback;

        r4 = null;

        $r5 = r0.<com.yang.longrubblishclear.util.ImageManager: android.content.Context appContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r7 = <android.provider.ContactsContract$CommonDataKinds$Phone: android.net.Uri CONTENT_URI>;

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "contact_id";

        $r8[1] = "photo_id";

        $r9 = newarray (java.lang.String)[1];

        $r9[0] = $r1;

        $r10 = virtualinvoke $r6.<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>($r7, $r8, "data1=?", $r9, null);

        if $r10 == null goto label2;

     label1:
        $z0 = interfaceinvoke $r10.<android.database.Cursor: boolean moveToNext()>();

        if $z0 != 0 goto label3;

     label2:
        interfaceinvoke $r10.<android.database.Cursor: void close()>();

        return r4;

     label3:
        $l1 = interfaceinvoke $r10.<android.database.Cursor: long getLong(int)>(0);

        $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $l1 = interfaceinvoke $r10.<android.database.Cursor: long getLong(int)>(1);

        $b2 = $l1 cmp 0L;

        $i0 = (int) $b2;

        if $i0 <= 0 goto label1;

        $r7 = <android.provider.ContactsContract$Contacts: android.net.Uri CONTENT_URI>;

        $l1 = virtualinvoke $r11.<java.lang.Long: long longValue()>();

        $r7 = staticinvoke <android.content.ContentUris: android.net.Uri withAppendedId(android.net.Uri,long)>($r7, $l1);

        $r5 = r0.<com.yang.longrubblishclear.util.ImageManager: android.content.Context appContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r12 = staticinvoke <android.provider.ContactsContract$Contacts: java.io.InputStream openContactPhotoInputStream(android.content.ContentResolver,android.net.Uri)>($r6, $r7);

        r4 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream)>($r12);

     label4:
        virtualinvoke $r12.<java.io.InputStream: void close()>();

     label5:
        goto label1;

     label6:
        r3 := @caughtexception;

        $r13 = (java.io.IOException) r3;

        virtualinvoke $r13.<java.io.IOException: void printStackTrace()>();

        goto label1;

        catch java.io.IOException from label4 to label5 with label6;
    }

    public boolean getBitmapFromDownload(java.lang.String, int, com.yang.longrubblishclear.util.ImageManager$ImageDownloaderCallback)
    {
        com.yang.longrubblishclear.util.ImageManager$ImageDownloaderCallback $r2;
        com.yang.longrubblishclear.util.ImageManager r0;
        java.util.HashMap $r3;
        java.lang.Thread $r4;
        int $i0;
        com.yang.longrubblishclear.util.ImageManager$3 $r5;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: com.yang.longrubblishclear.util.ImageManager;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 := @parameter2: com.yang.longrubblishclear.util.ImageManager$ImageDownloaderCallback;

        $r3 = r0.<com.yang.longrubblishclear.util.ImageManager: java.util.HashMap mCallbackMap>;

        $z0 = virtualinvoke $r3.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r3 = r0.<com.yang.longrubblishclear.util.ImageManager: java.util.HashMap mCallbackMap>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        return 0;

     label1:
        $r3 = r0.<com.yang.longrubblishclear.util.ImageManager: java.util.HashMap mCallbackMap>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(null, $r2);

        $r4 = new java.lang.Thread;

        $r5 = new com.yang.longrubblishclear.util.ImageManager$3;

        specialinvoke $r5.<com.yang.longrubblishclear.util.ImageManager$3: void <init>(com.yang.longrubblishclear.util.ImageManager,java.lang.String,int,com.yang.longrubblishclear.util.ImageManager$ImageDownloaderCallback)>(r0, $r1, $i0, $r2);

        specialinvoke $r4.<java.lang.Thread: void <init>(java.lang.Runnable)>($r5);

        virtualinvoke $r4.<java.lang.Thread: void start()>();

        return 0;
    }

    public boolean loadImage(java.lang.String, int, com.yang.longrubblishclear.util.ImageManager$ImageDownloaderCallback)
    {
        android.os.Bundle r4;
        com.yang.longrubblishclear.util.ImageManager r0;
        java.util.HashMap $r8;
        com.yang.longrubblishclear.util.ImageManager$DownloadBitmapTask r3;
        android.os.Handler $r10;
        java.lang.Thread $r13;
        int $i0;
        java.lang.String $r1, $r7, $r9;
        boolean $z0;
        com.yang.longrubblishclear.util.ImageManager$ImageDownloaderCallback $r2;
        java.io.File $r12;
        android.os.Message $r11;
        android.graphics.Bitmap $r5;
        java.lang.StringBuilder $r6;

        r0 := @this: com.yang.longrubblishclear.util.ImageManager;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 := @parameter2: com.yang.longrubblishclear.util.ImageManager$ImageDownloaderCallback;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("test", "test1");

        $r5 = virtualinvoke r0.<com.yang.longrubblishclear.util.ImageManager: android.graphics.Bitmap getBitmapFromCache(java.lang.String)>($r1);

        if $r5 == null goto label1;

        interfaceinvoke $r2.<com.yang.longrubblishclear.util.ImageManager$ImageDownloaderCallback: void imageLoaded(android.graphics.Bitmap,java.lang.String,int)>($r5, $r1, $i0);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("test", "test2");

        return 1;

     label1:
        $r6 = new java.lang.StringBuilder;

        $r7 = r0.<com.yang.longrubblishclear.util.ImageManager: java.lang.String cacheFileDirs>;

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r7);

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>($r7);

        $r7 = staticinvoke <com.yang.longrubblishclear.util.ImageTools: java.lang.String getMD5Str(java.lang.String)>($r1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".jpg");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("test", "test3");

        $r8 = r0.<com.yang.longrubblishclear.util.ImageManager: java.util.HashMap mCallbackMap>;

        $z0 = virtualinvoke $r8.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        $r8 = r0.<com.yang.longrubblishclear.util.ImageManager: java.util.HashMap mCallbackMap>;

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("test", "test4");

        return 0;

     label2:
        $r8 = r0.<com.yang.longrubblishclear.util.ImageManager: java.util.HashMap mCallbackMap>;

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("sajdfkljaksldf:");

        $z0 = specialinvoke r0.<com.yang.longrubblishclear.util.ImageManager: boolean chackCacheDirs()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("test", $r9);

        $z0 = specialinvoke r0.<com.yang.longrubblishclear.util.ImageManager: boolean chackCacheDirs()>();

        if $z0 == 0 goto label4;

        $r5 = specialinvoke r0.<com.yang.longrubblishclear.util.ImageManager: android.graphics.Bitmap tryLoadFromCache(java.lang.String)>($r7);

        if $r5 == null goto label3;

        $r10 = r0.<com.yang.longrubblishclear.util.ImageManager: android.os.Handler mMainHandler>;

        $r11 = virtualinvoke $r10.<android.os.Handler: android.os.Message obtainMessage(int)>(1);

        $r11.<android.os.Message: java.lang.Object obj> = $r5;

        r4 = new android.os.Bundle;

        specialinvoke r4.<android.os.Bundle: void <init>()>();

        virtualinvoke r4.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("imageUrl", $r1);

        virtualinvoke r4.<android.os.Bundle: void putInt(java.lang.String,int)>("itemId", $i0);

        virtualinvoke $r11.<android.os.Message: void setData(android.os.Bundle)>(r4);

        $r10 = r0.<com.yang.longrubblishclear.util.ImageManager: android.os.Handler mMainHandler>;

        virtualinvoke $r10.<android.os.Handler: boolean sendMessage(android.os.Message)>($r11);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("test", "test5");

        return 1;

     label3:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("test", "test55");

     label4:
        r3 = new com.yang.longrubblishclear.util.ImageManager$DownloadBitmapTask;

        specialinvoke r3.<com.yang.longrubblishclear.util.ImageManager$DownloadBitmapTask: void <init>(com.yang.longrubblishclear.util.ImageManager)>(r0);

        $r10 = r0.<com.yang.longrubblishclear.util.ImageManager: android.os.Handler mMainHandler>;

        $r12 = r0.<com.yang.longrubblishclear.util.ImageManager: java.io.File tempFile>;

        $r6 = new java.lang.StringBuilder;

        $r7 = staticinvoke <com.yang.longrubblishclear.util.ImageTools: java.lang.String getMD5Str(java.lang.String)>($r1);

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r7);

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".jpg");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r3.<com.yang.longrubblishclear.util.ImageManager$DownloadBitmapTask: void init(android.os.Handler,java.io.File,java.lang.String,java.lang.String,int)>($r10, $r12, $r7, $r1, $i0);

        $r13 = new java.lang.Thread;

        specialinvoke $r13.<java.lang.Thread: void <init>(java.lang.Runnable)>(r3);

        virtualinvoke $r13.<java.lang.Thread: void start()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("test", "test6");

        return 0;
    }

    public boolean loadImageAsync(java.lang.String, int, com.yang.longrubblishclear.util.ImageManager$ImageDownloaderCallback)
    {
        android.content.Context $r12;
        android.os.Bundle r6;
        com.yang.longrubblishclear.util.ImageManager r0;
        java.util.HashMap $r10;
        java.lang.String[] $r13;
        android.os.Handler $r4;
        int $i0;
        java.lang.String $r1, $r9;
        com.yang.longrubblishclear.util.ImageManager$ImageDownloadAsync r3;
        boolean $z0;
        com.yang.longrubblishclear.util.ImageManager$ImageDownloaderCallback $r2;
        java.io.File $r5;
        android.os.Message $r11;
        android.graphics.Bitmap $r7;
        java.lang.StringBuilder $r8;

        r0 := @this: com.yang.longrubblishclear.util.ImageManager;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 := @parameter2: com.yang.longrubblishclear.util.ImageManager$ImageDownloaderCallback;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("test", "test1");

        $r7 = virtualinvoke r0.<com.yang.longrubblishclear.util.ImageManager: android.graphics.Bitmap getBitmapFromCache(java.lang.String)>($r1);

        if $r7 == null goto label1;

        interfaceinvoke $r2.<com.yang.longrubblishclear.util.ImageManager$ImageDownloaderCallback: void imageLoaded(android.graphics.Bitmap,java.lang.String,int)>($r7, $r1, $i0);

        interfaceinvoke $r2.<com.yang.longrubblishclear.util.ImageManager$ImageDownloaderCallback: void imageUpdateProgress(java.lang.String,int)>("100", $i0);

        return 1;

     label1:
        $r8 = new java.lang.StringBuilder;

        $r9 = r0.<com.yang.longrubblishclear.util.ImageManager: java.lang.String cacheFileDirs>;

        $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r9);

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>($r9);

        $r9 = staticinvoke <com.yang.longrubblishclear.util.ImageTools: java.lang.String getMD5Str(java.lang.String)>($r1);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".jpg");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = r0.<com.yang.longrubblishclear.util.ImageManager: java.util.HashMap mCallbackMap>;

        $z0 = virtualinvoke $r10.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        $r10 = r0.<com.yang.longrubblishclear.util.ImageManager: java.util.HashMap mCallbackMap>;

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        return 0;

     label2:
        $r10 = r0.<com.yang.longrubblishclear.util.ImageManager: java.util.HashMap mCallbackMap>;

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        $z0 = specialinvoke r0.<com.yang.longrubblishclear.util.ImageManager: boolean chackCacheDirs()>();

        if $z0 == 0 goto label3;

        $r7 = specialinvoke r0.<com.yang.longrubblishclear.util.ImageManager: android.graphics.Bitmap tryLoadFromCacheAsync(java.lang.String,int)>($r9, $i0);

        if $r7 == null goto label3;

        $r4 = r0.<com.yang.longrubblishclear.util.ImageManager: android.os.Handler mMainHandler>;

        $r11 = virtualinvoke $r4.<android.os.Handler: android.os.Message obtainMessage(int)>(1);

        $r11.<android.os.Message: java.lang.Object obj> = $r7;

        r6 = new android.os.Bundle;

        specialinvoke r6.<android.os.Bundle: void <init>()>();

        virtualinvoke r6.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("imageUrl", $r1);

        virtualinvoke r6.<android.os.Bundle: void putInt(java.lang.String,int)>("itemId", $i0);

        virtualinvoke $r11.<android.os.Message: void setData(android.os.Bundle)>(r6);

        $r4 = r0.<com.yang.longrubblishclear.util.ImageManager: android.os.Handler mMainHandler>;

        virtualinvoke $r4.<android.os.Handler: boolean sendMessage(android.os.Message)>($r11);

        return 1;

     label3:
        r3 = new com.yang.longrubblishclear.util.ImageManager$ImageDownloadAsync;

        $r12 = r0.<com.yang.longrubblishclear.util.ImageManager: android.content.Context appContext>;

        $r4 = r0.<com.yang.longrubblishclear.util.ImageManager: android.os.Handler mMainHandler>;

        $r5 = r0.<com.yang.longrubblishclear.util.ImageManager: java.io.File tempFile>;

        $r8 = new java.lang.StringBuilder;

        $r9 = staticinvoke <com.yang.longrubblishclear.util.ImageTools: java.lang.String getMD5Str(java.lang.String)>($r1);

        $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r9);

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>($r9);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".jpg");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r3.<com.yang.longrubblishclear.util.ImageManager$ImageDownloadAsync: void <init>(com.yang.longrubblishclear.util.ImageManager,android.content.Context,android.os.Handler,java.io.File,java.lang.String,java.lang.String,int)>(r0, $r12, $r4, $r5, $r9, $r1, $i0);

        virtualinvoke r3.<com.yang.longrubblishclear.util.ImageManager$ImageDownloadAsync: void setImageDownloaderCallback(com.yang.longrubblishclear.util.ImageManager$ImageDownloaderCallback)>($r2);

        $r13 = newarray (java.lang.String)[1];

        $r13[0] = $r1;

        virtualinvoke r3.<com.yang.longrubblishclear.util.ImageManager$ImageDownloadAsync: android.os.AsyncTask execute(java.lang.Object[])>($r13);

        return 0;
    }

    public void release()
    {
        java.util.HashMap $r1;
        com.yang.longrubblishclear.util.ImageManager r0;

        r0 := @this: com.yang.longrubblishclear.util.ImageManager;

        $r1 = r0.<com.yang.longrubblishclear.util.ImageManager: java.util.HashMap mCallbackMap>;

        virtualinvoke $r1.<java.util.HashMap: void clear()>();

        return;
    }
}
