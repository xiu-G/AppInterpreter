public class proguard.classfile.visitor.MemberClassAccessFilter extends java.lang.Object implements proguard.classfile.visitor.MemberVisitor
{
    private final proguard.classfile.visitor.MemberVisitor memberVisitor;
    private final proguard.classfile.Clazz referencingClass;

    public void <init>(proguard.classfile.Clazz, proguard.classfile.visitor.MemberVisitor)
    {
        proguard.classfile.visitor.MemberVisitor $r2;
        proguard.classfile.visitor.MemberClassAccessFilter r0;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.classfile.visitor.MemberClassAccessFilter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.visitor.MemberVisitor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<proguard.classfile.visitor.MemberClassAccessFilter: proguard.classfile.Clazz referencingClass> = $r1;

        r0.<proguard.classfile.visitor.MemberClassAccessFilter: proguard.classfile.visitor.MemberVisitor memberVisitor> = $r2;

        return;
    }

    private boolean accepted(proguard.classfile.Clazz, int)
    {
        proguard.classfile.visitor.MemberClassAccessFilter r0;
        proguard.classfile.Clazz $r1, $r2;
        int $i0;
        java.lang.String $r3, $r4;
        boolean $z0;

        r0 := @this: proguard.classfile.visitor.MemberClassAccessFilter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $i0 := @parameter1: int;

        $i0 = staticinvoke <proguard.classfile.util.AccessUtil: int accessLevel(int)>($i0);

        if $i0 >= 3 goto label3;

        if $i0 < 0 goto label1;

        $r2 = r0.<proguard.classfile.visitor.MemberClassAccessFilter: proguard.classfile.Clazz referencingClass>;

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label3;

     label1:
        if $i0 < 1 goto label2;

        $r2 = r0.<proguard.classfile.visitor.MemberClassAccessFilter: proguard.classfile.Clazz referencingClass>;

        $r3 = interfaceinvoke $r2.<proguard.classfile.Clazz: java.lang.String getName()>();

        $r3 = staticinvoke <proguard.classfile.util.ClassUtil: java.lang.String internalPackageName(java.lang.String)>($r3);

        $r4 = interfaceinvoke $r1.<proguard.classfile.Clazz: java.lang.String getName()>();

        $r4 = staticinvoke <proguard.classfile.util.ClassUtil: java.lang.String internalPackageName(java.lang.String)>($r4);

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label3;

     label2:
        if $i0 < 2 goto label4;

        $r2 = r0.<proguard.classfile.visitor.MemberClassAccessFilter: proguard.classfile.Clazz referencingClass>;

        $z0 = interfaceinvoke $r2.<proguard.classfile.Clazz: boolean extends_(proguard.classfile.Clazz)>($r1);

        if $z0 != 0 goto label3;

        $r2 = r0.<proguard.classfile.visitor.MemberClassAccessFilter: proguard.classfile.Clazz referencingClass>;

        $z0 = interfaceinvoke $r2.<proguard.classfile.Clazz: boolean extendsOrImplements(proguard.classfile.Clazz)>($r1);

        if $z0 == 0 goto label4;

     label3:
        return 1;

     label4:
        return 0;
    }

    public void visitLibraryField(proguard.classfile.LibraryClass, proguard.classfile.LibraryField)
    {
        proguard.classfile.LibraryClass $r1;
        proguard.classfile.visitor.MemberClassAccessFilter r0;
        proguard.classfile.LibraryField $r2;
        int $i0;
        proguard.classfile.visitor.MemberVisitor $r3;
        boolean $z0;

        r0 := @this: proguard.classfile.visitor.MemberClassAccessFilter;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        $r2 := @parameter1: proguard.classfile.LibraryField;

        $i0 = virtualinvoke $r2.<proguard.classfile.LibraryField: int getAccessFlags()>();

        $z0 = specialinvoke r0.<proguard.classfile.visitor.MemberClassAccessFilter: boolean accepted(proguard.classfile.Clazz,int)>($r1, $i0);

        if $z0 == 0 goto label1;

        $r3 = r0.<proguard.classfile.visitor.MemberClassAccessFilter: proguard.classfile.visitor.MemberVisitor memberVisitor>;

        interfaceinvoke $r3.<proguard.classfile.visitor.MemberVisitor: void visitLibraryField(proguard.classfile.LibraryClass,proguard.classfile.LibraryField)>($r1, $r2);

     label1:
        return;
    }

    public void visitLibraryMethod(proguard.classfile.LibraryClass, proguard.classfile.LibraryMethod)
    {
        proguard.classfile.LibraryClass $r1;
        proguard.classfile.visitor.MemberClassAccessFilter r0;
        int $i0;
        proguard.classfile.LibraryMethod $r2;
        proguard.classfile.visitor.MemberVisitor $r3;
        boolean $z0;

        r0 := @this: proguard.classfile.visitor.MemberClassAccessFilter;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        $r2 := @parameter1: proguard.classfile.LibraryMethod;

        $i0 = virtualinvoke $r2.<proguard.classfile.LibraryMethod: int getAccessFlags()>();

        $z0 = specialinvoke r0.<proguard.classfile.visitor.MemberClassAccessFilter: boolean accepted(proguard.classfile.Clazz,int)>($r1, $i0);

        if $z0 == 0 goto label1;

        $r3 = r0.<proguard.classfile.visitor.MemberClassAccessFilter: proguard.classfile.visitor.MemberVisitor memberVisitor>;

        interfaceinvoke $r3.<proguard.classfile.visitor.MemberVisitor: void visitLibraryMethod(proguard.classfile.LibraryClass,proguard.classfile.LibraryMethod)>($r1, $r2);

     label1:
        return;
    }

    public void visitProgramField(proguard.classfile.ProgramClass, proguard.classfile.ProgramField)
    {
        proguard.classfile.visitor.MemberClassAccessFilter r0;
        proguard.classfile.ProgramField $r2;
        int $i0;
        proguard.classfile.visitor.MemberVisitor $r3;
        proguard.classfile.ProgramClass $r1;
        boolean $z0;

        r0 := @this: proguard.classfile.visitor.MemberClassAccessFilter;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.ProgramField;

        $i0 = virtualinvoke $r2.<proguard.classfile.ProgramField: int getAccessFlags()>();

        $z0 = specialinvoke r0.<proguard.classfile.visitor.MemberClassAccessFilter: boolean accepted(proguard.classfile.Clazz,int)>($r1, $i0);

        if $z0 == 0 goto label1;

        $r3 = r0.<proguard.classfile.visitor.MemberClassAccessFilter: proguard.classfile.visitor.MemberVisitor memberVisitor>;

        interfaceinvoke $r3.<proguard.classfile.visitor.MemberVisitor: void visitProgramField(proguard.classfile.ProgramClass,proguard.classfile.ProgramField)>($r1, $r2);

     label1:
        return;
    }

    public void visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod)
    {
        proguard.classfile.visitor.MemberClassAccessFilter r0;
        proguard.classfile.ProgramMethod $r2;
        int $i0;
        proguard.classfile.visitor.MemberVisitor $r3;
        proguard.classfile.ProgramClass $r1;
        boolean $z0;

        r0 := @this: proguard.classfile.visitor.MemberClassAccessFilter;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.ProgramMethod;

        $i0 = virtualinvoke $r2.<proguard.classfile.ProgramMethod: int getAccessFlags()>();

        $z0 = specialinvoke r0.<proguard.classfile.visitor.MemberClassAccessFilter: boolean accepted(proguard.classfile.Clazz,int)>($r1, $i0);

        if $z0 == 0 goto label1;

        $r3 = r0.<proguard.classfile.visitor.MemberClassAccessFilter: proguard.classfile.visitor.MemberVisitor memberVisitor>;

        interfaceinvoke $r3.<proguard.classfile.visitor.MemberVisitor: void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod)>($r1, $r2);

     label1:
        return;
    }
}
