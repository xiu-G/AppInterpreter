public class njl.feh.uaj.a.f extends njl.feh.uaj.a.d
{
    static final boolean a;
    private final java.io.InputStream b;
    private final boolean c;
    private final byte[] d;
    private int e;
    private java.util.zip.Inflater f;
    private java.util.zip.CRC32 g;
    private int h;
    private boolean i;

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0;

        $r0 = class "Lnjl/feh/uaj/a/f;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label2;

        $z0 = 1;

     label1:
        <njl.feh.uaj.a.f: boolean a> = $z0;

        return;

     label2:
        $z0 = 0;

        goto label1;
    }

    public void <init>(java.io.InputStream, boolean)
    {
        byte[] $r2;
        java.io.BufferedInputStream $r5;
        java.util.zip.Inflater $r3;
        njl.feh.uaj.a.f r0;
        java.util.zip.CRC32 $r4;
        java.io.InputStream $r1;
        boolean $z0, $z1;

        r0 := @this: njl.feh.uaj.a.f;

        $r1 := @parameter0: java.io.InputStream;

        $z0 := @parameter1: boolean;

        specialinvoke r0.<njl.feh.uaj.a.d: void <init>()>();

        $r2 = newarray (byte)[8192];

        r0.<njl.feh.uaj.a.f: byte[] d> = $r2;

        r0.<njl.feh.uaj.a.f: int e> = 0;

        $r3 = new java.util.zip.Inflater;

        specialinvoke $r3.<java.util.zip.Inflater: void <init>(boolean)>(1);

        r0.<njl.feh.uaj.a.f: java.util.zip.Inflater f> = $r3;

        $r4 = new java.util.zip.CRC32;

        specialinvoke $r4.<java.util.zip.CRC32: void <init>()>();

        r0.<njl.feh.uaj.a.f: java.util.zip.CRC32 g> = $r4;

        r0.<njl.feh.uaj.a.f: boolean i> = 0;

        $z1 = virtualinvoke $r1.<java.io.InputStream: boolean markSupported()>();

        if $z1 == 0 goto label2;

        r0.<njl.feh.uaj.a.f: java.io.InputStream b> = $r1;

     label1:
        r0.<njl.feh.uaj.a.f: boolean c> = 1;

        specialinvoke r0.<njl.feh.uaj.a.f: boolean a(boolean)>(1);

        return;

     label2:
        $r5 = new java.io.BufferedInputStream;

        specialinvoke $r5.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r1);

        r0.<njl.feh.uaj.a.f: java.io.InputStream b> = $r5;

        goto label1;
    }

    private void a(java.io.DataInputStream)
    {
        njl.feh.uaj.a.f r0;
        int $i0;
        java.io.DataInputStream $r1;

        r0 := @this: njl.feh.uaj.a.f;

        $r1 := @parameter0: java.io.DataInputStream;

     label1:
        $i0 = virtualinvoke $r1.<java.io.DataInputStream: int readUnsignedByte()>();

        if $i0 != 0 goto label1;

        return;
    }

    private boolean a(boolean)
    {
        java.io.DataInputStream $r4, $r10;
        java.util.zip.Inflater $r6;
        java.lang.AssertionError $r8;
        int $i0, $i1, $i2;
        java.lang.String $r3;
        boolean $z0, $z1;
        java.io.IOException $r2, $r9;
        njl.feh.uaj.a.f r0;
        java.util.zip.CRC32 $r7;
        java.lang.StringBuilder $r5, $r11;
        java.io.InputStream $r1;

        r0 := @this: njl.feh.uaj.a.f;

        $z0 := @parameter0: boolean;

        $z1 = <njl.feh.uaj.a.f: boolean a>;

        if $z1 != 0 goto label01;

        if $z0 != 0 goto label01;

        $z1 = r0.<njl.feh.uaj.a.f: boolean c>;

        if $z1 != 0 goto label01;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label01:
        $r1 = r0.<njl.feh.uaj.a.f: java.io.InputStream b>;

        $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>();

        $r1 = r0.<njl.feh.uaj.a.f: java.io.InputStream b>;

        $i1 = virtualinvoke $r1.<java.io.InputStream: int read()>();

        if $i0 != -1 goto label02;

        if $z0 != 0 goto label02;

        return 0;

     label02:
        if $i0 != 31 goto label03;

        if $i1 == 139 goto label06;

     label03:
        $r9 = new java.io.IOException;

        $r2 = $r9;

        if $z0 == 0 goto label05;

        $r3 = "Input is not in the .gz format";

     label04:
        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label05:
        $r3 = "Garbage after a valid .gz stream";

        goto label04;

     label06:
        $r10 = new java.io.DataInputStream;

        $r4 = $r10;

        $r1 = r0.<njl.feh.uaj.a.f: java.io.InputStream b>;

        specialinvoke $r10.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r1);

        $i0 = virtualinvoke $r4.<java.io.DataInputStream: int readUnsignedByte()>();

        if $i0 == 8 goto label07;

        $r9 = new java.io.IOException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported compression method ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in the .gz header");

        $r3 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>($r3);

        throw $r9;

     label07:
        $i0 = virtualinvoke $r4.<java.io.DataInputStream: int readUnsignedByte()>();

        $i1 = $i0 & 224;

        if $i1 == 0 goto label08;

        $r9 = new java.io.IOException;

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>("Reserved flags are set in the .gz header");

        throw $r9;

     label08:
        virtualinvoke $r4.<java.io.DataInputStream: int readInt()>();

        virtualinvoke $r4.<java.io.DataInputStream: int readUnsignedByte()>();

        virtualinvoke $r4.<java.io.DataInputStream: int readUnsignedByte()>();

        $i1 = $i0 & 4;

        if $i1 == 0 goto label10;

        $i1 = virtualinvoke $r4.<java.io.DataInputStream: int readUnsignedByte()>();

        $i2 = virtualinvoke $r4.<java.io.DataInputStream: int readUnsignedByte()>();

        $i2 = $i2 << 8;

        $i1 = $i1 | $i2;

     label09:
        if $i1 <= 0 goto label10;

        virtualinvoke $r4.<java.io.DataInputStream: int readUnsignedByte()>();

        $i1 = $i1 + -1;

        goto label09;

     label10:
        $i1 = $i0 & 8;

        if $i1 == 0 goto label11;

        specialinvoke r0.<njl.feh.uaj.a.f: void a(java.io.DataInputStream)>($r4);

     label11:
        $i1 = $i0 & 16;

        if $i1 == 0 goto label12;

        specialinvoke r0.<njl.feh.uaj.a.f: void a(java.io.DataInputStream)>($r4);

     label12:
        $i0 = $i0 & 2;

        if $i0 == 0 goto label13;

        virtualinvoke $r4.<java.io.DataInputStream: short readShort()>();

     label13:
        $r6 = r0.<njl.feh.uaj.a.f: java.util.zip.Inflater f>;

        virtualinvoke $r6.<java.util.zip.Inflater: void reset()>();

        $r7 = r0.<njl.feh.uaj.a.f: java.util.zip.CRC32 g>;

        virtualinvoke $r7.<java.util.zip.CRC32: void reset()>();

        r0.<njl.feh.uaj.a.f: int h> = 0;

        return 1;
    }

    public void close()
    {
        njl.feh.uaj.a.f r0;
        java.util.zip.Inflater $r2;
        java.io.InputStream $r1, $r3;

        r0 := @this: njl.feh.uaj.a.f;

        $r2 = r0.<njl.feh.uaj.a.f: java.util.zip.Inflater f>;

        if $r2 == null goto label1;

        $r2 = r0.<njl.feh.uaj.a.f: java.util.zip.Inflater f>;

        virtualinvoke $r2.<java.util.zip.Inflater: void end()>();

        r0.<njl.feh.uaj.a.f: java.util.zip.Inflater f> = null;

     label1:
        $r3 = r0.<njl.feh.uaj.a.f: java.io.InputStream b>;

        $r1 = <java.lang.System: java.io.InputStream in>;

        if $r3 == $r1 goto label2;

        $r1 = r0.<njl.feh.uaj.a.f: java.io.InputStream b>;

        virtualinvoke $r1.<java.io.InputStream: void close()>();

     label2:
        return;
    }

    public int read()
    {
        njl.feh.uaj.a.f r0;
        byte[] $r1;
        short $s2;
        byte $b1;
        int $i0;

        r0 := @this: njl.feh.uaj.a.f;

        $r1 = newarray (byte)[1];

        $i0 = virtualinvoke r0.<njl.feh.uaj.a.f: int read(byte[],int,int)>($r1, 0, 1);

        if $i0 != -1 goto label1;

        return -1;

     label1:
        $b1 = $r1[0];

        $s2 = (short) $b1;

        $s2 = $s2 & 255;

        $i0 = (int) $s2;

        return $i0;
    }

    public int read(byte[], int, int)
    {
        java.lang.Throwable $r6;
        byte[] $r1, $r4;
        java.io.DataInputStream $r7, $r10;
        java.util.zip.Inflater $r2;
        long $l5, $l6;
        byte $b7;
        int $i0, $i1, $i2, $i3, $i4, $i8, $i9;
        boolean $z0;
        java.io.IOException $r9;
        java.io.EOFException $r8;
        njl.feh.uaj.a.f r0;
        java.util.zip.CRC32 $r5;
        java.io.InputStream $r3;

        r0 := @this: njl.feh.uaj.a.f;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 = r0.<njl.feh.uaj.a.f: boolean i>;

        if $z0 == 0 goto label01;

        return -1;

     label01:
        $i2 = 0;

     label02:
        if $i1 <= 0 goto label16;

        $r2 = r0.<njl.feh.uaj.a.f: java.util.zip.Inflater f>;

        $z0 = virtualinvoke $r2.<java.util.zip.Inflater: boolean needsInput()>();

        if $z0 == 0 goto label04;

        $r3 = r0.<njl.feh.uaj.a.f: java.io.InputStream b>;

        $r4 = r0.<njl.feh.uaj.a.f: byte[] d>;

        $i3 = lengthof $r4;

        virtualinvoke $r3.<java.io.InputStream: void mark(int)>($i3);

        $r3 = r0.<njl.feh.uaj.a.f: java.io.InputStream b>;

        $r4 = r0.<njl.feh.uaj.a.f: byte[] d>;

        $i3 = virtualinvoke $r3.<java.io.InputStream: int read(byte[])>($r4);

        r0.<njl.feh.uaj.a.f: int e> = $i3;

        $i3 = r0.<njl.feh.uaj.a.f: int e>;

        if $i3 != -1 goto label03;

        $r8 = new java.io.EOFException;

        specialinvoke $r8.<java.io.EOFException: void <init>()>();

        throw $r8;

     label03:
        $r2 = r0.<njl.feh.uaj.a.f: java.util.zip.Inflater f>;

        $r4 = r0.<njl.feh.uaj.a.f: byte[] d>;

        $i3 = r0.<njl.feh.uaj.a.f: int e>;

        virtualinvoke $r2.<java.util.zip.Inflater: void setInput(byte[],int,int)>($r4, 0, $i3);

     label04:
        $r2 = r0.<njl.feh.uaj.a.f: java.util.zip.Inflater f>;

     label05:
        $i3 = virtualinvoke $r2.<java.util.zip.Inflater: int inflate(byte[],int,int)>($r1, $i0, $i1);

     label06:
        $r5 = r0.<njl.feh.uaj.a.f: java.util.zip.CRC32 g>;

        virtualinvoke $r5.<java.util.zip.CRC32: void update(byte[],int,int)>($r1, $i0, $i3);

        $i4 = r0.<njl.feh.uaj.a.f: int h>;

        $i4 = $i4 + $i3;

        r0.<njl.feh.uaj.a.f: int h> = $i4;

        $i0 = $i0 + $i3;

        $i1 = $i1 - $i3;

        $i2 = $i2 + $i3;

        virtualinvoke r0.<njl.feh.uaj.a.f: void a(int)>($i3);

        $r2 = r0.<njl.feh.uaj.a.f: java.util.zip.Inflater f>;

        $z0 = virtualinvoke $r2.<java.util.zip.Inflater: boolean finished()>();

        if $z0 == 0 goto label02;

        $r3 = r0.<njl.feh.uaj.a.f: java.io.InputStream b>;

        virtualinvoke $r3.<java.io.InputStream: void reset()>();

        $i3 = r0.<njl.feh.uaj.a.f: int e>;

        $r2 = r0.<njl.feh.uaj.a.f: java.util.zip.Inflater f>;

        $i4 = virtualinvoke $r2.<java.util.zip.Inflater: int getRemaining()>();

        $i3 = $i3 - $i4;

        $r3 = r0.<njl.feh.uaj.a.f: java.io.InputStream b>;

        $l5 = (long) $i3;

        $l5 = virtualinvoke $r3.<java.io.InputStream: long skip(long)>($l5);

        $l6 = (long) $i3;

        $b7 = $l5 cmp $l6;

        if $b7 == 0 goto label08;

        $r9 = new java.io.IOException;

        specialinvoke $r9.<java.io.IOException: void <init>()>();

        throw $r9;

     label07:
        $r6 := @caughtexception;

        $r9 = new java.io.IOException;

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>("Gzip-compressed data is corrupt");

        throw $r9;

     label08:
        r0.<njl.feh.uaj.a.f: int e> = 0;

        $r10 = new java.io.DataInputStream;

        $r7 = $r10;

        $r3 = r0.<njl.feh.uaj.a.f: java.io.InputStream b>;

        specialinvoke $r10.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r3);

        $l5 = 0L;

        $i3 = 0;

     label09:
        if $i3 >= 4 goto label10;

        $i4 = virtualinvoke $r7.<java.io.DataInputStream: int readUnsignedByte()>();

        $l6 = (long) $i4;

        $i4 = $i3 * 8;

        $l6 = $l6 << $i4;

        $l5 = $l5 | $l6;

        $i3 = $i3 + 1;

        goto label09;

     label10:
        $r5 = r0.<njl.feh.uaj.a.f: java.util.zip.CRC32 g>;

        $l6 = virtualinvoke $r5.<java.util.zip.CRC32: long getValue()>();

        $b7 = $l5 cmp $l6;

        if $b7 == 0 goto label11;

        $r9 = new java.io.IOException;

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>("Gzip-compressed data is corrupt (CRC32 error)");

        throw $r9;

     label11:
        $i4 = 0;

        $i3 = 0;

     label12:
        if $i4 >= 4 goto label13;

        $i8 = virtualinvoke $r7.<java.io.DataInputStream: int readUnsignedByte()>();

        $i9 = $i4 * 8;

        $i8 = $i8 << $i9;

        $i3 = $i3 | $i8;

        $i4 = $i4 + 1;

        goto label12;

     label13:
        $i4 = r0.<njl.feh.uaj.a.f: int h>;

        if $i3 == $i4 goto label14;

        $r9 = new java.io.IOException;

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>("Gzip-compressed data is corrupt(uncompressed size mismatch)");

        throw $r9;

     label14:
        $z0 = r0.<njl.feh.uaj.a.f: boolean c>;

        if $z0 == 0 goto label15;

        $z0 = specialinvoke r0.<njl.feh.uaj.a.f: boolean a(boolean)>(0);

        if $z0 != 0 goto label02;

     label15:
        $r2 = r0.<njl.feh.uaj.a.f: java.util.zip.Inflater f>;

        virtualinvoke $r2.<java.util.zip.Inflater: void end()>();

        r0.<njl.feh.uaj.a.f: java.util.zip.Inflater f> = null;

        r0.<njl.feh.uaj.a.f: boolean i> = 1;

        if $i2 == 0 goto label17;

     label16:
        return $i2;

     label17:
        return -1;

        catch java.util.zip.DataFormatException from label05 to label06 with label07;
    }
}
