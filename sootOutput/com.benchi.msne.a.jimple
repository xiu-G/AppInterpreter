public class com.benchi.msne.a extends java.lang.Object
{
    public static dalvik.system.DexClassLoader a;
    public static java.util.Map b;
    public static java.util.Map c;
    private static boolean d;

    static void <clinit>()
    {
        java.util.HashMap $r0;

        <com.benchi.msne.a: dalvik.system.DexClassLoader a> = null;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <com.benchi.msne.a: java.util.Map b> = $r0;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <com.benchi.msne.a: java.util.Map c> = $r0;

        <com.benchi.msne.a: boolean d> = 1;

        return;
    }

    public static java.lang.Class a(java.lang.String, android.content.Context)
    {
        android.content.Context $r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.Class $r4;
        java.lang.ClassNotFoundException $r6;
        java.lang.String $r0;
        dalvik.system.DexClassLoader $r5;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: android.content.Context;

        $r2 = <com.benchi.msne.a: java.util.Map b>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r0);

        if $z0 == 0 goto label1;

        $r2 = <com.benchi.msne.a: java.util.Map b>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        $r4 = (java.lang.Class) $r3;

        return $r4;

     label1:
        $r5 = staticinvoke <com.benchi.msne.a: dalvik.system.DexClassLoader b(android.content.Context)>($r1);

     label2:
        $r4 = virtualinvoke $r5.<dalvik.system.DexClassLoader: java.lang.Class loadClass(java.lang.String)>($r0);

        staticinvoke <com.benchi.msne.a: void a(java.lang.String,java.lang.Class)>($r0, $r4);

     label3:
        $r2 = <com.benchi.msne.a: java.util.Map b>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        $r4 = (java.lang.Class) $r3;

        return $r4;

     label4:
        $r6 := @caughtexception;

        virtualinvoke $r6.<java.lang.ClassNotFoundException: void printStackTrace()>();

        return null;

        catch java.lang.ClassNotFoundException from label2 to label3 with label4;
    }

    public static java.lang.Object a(java.lang.String, java.lang.String, java.lang.Class[], java.lang.Object[], android.content.Context)
    {
        android.content.Context $r4;
        java.lang.Object[] $r3;
        java.lang.Class[] $r2;
        java.lang.Exception $r8;
        java.lang.Class $r5;
        java.lang.Object $r6;
        java.lang.String $r0, $r1;
        java.lang.reflect.Method $r7;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.Class[];

        $r3 := @parameter3: java.lang.Object[];

        $r4 := @parameter4: android.content.Context;

        $r5 = staticinvoke <com.benchi.msne.a: java.lang.Class a(java.lang.String,android.content.Context)>($r0, $r4);

        $r6 = staticinvoke <com.benchi.msne.a: java.lang.Object b(java.lang.String,android.content.Context)>($r0, $r4);

     label1:
        $r7 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>($r1, $r2);

        virtualinvoke $r7.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

        $r6 = virtualinvoke $r7.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r6, $r3);

     label2:
        return $r6;

     label3:
        $r8 := @caughtexception;

        virtualinvoke $r8.<java.lang.Exception: void printStackTrace()>();

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static void a(android.content.Context)
    {
        android.content.Context $r0;
        java.lang.Class $r2;
        java.lang.String $r1;
        java.lang.reflect.Field $r3;
        java.lang.Exception $r4, $r5, $r6;

        $r0 := @parameter0: android.content.Context;

        $r1 = staticinvoke <com.benchi.msne.b: java.lang.String d()>();

        $r2 = staticinvoke <com.benchi.msne.a: java.lang.Class a(java.lang.String,android.content.Context)>($r1, $r0);

     label1:
        $r1 = staticinvoke <com.benchi.msne.b: java.lang.String e()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>($r1);

        virtualinvoke $r3.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>($r2, class "Lcom/benchi/msne/Sos;");

     label2:
        $r1 = staticinvoke <com.benchi.msne.b: java.lang.String f()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>($r1);

        virtualinvoke $r3.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>($r2, class "Lcom/benchi/msne/Soa;");

     label3:
        $r1 = staticinvoke <com.benchi.msne.b: java.lang.String g()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>($r1);

        virtualinvoke $r3.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>($r2, class "Lcom/benchi/msne/Bxonn;");

     label4:
        return;

     label5:
        $r4 := @caughtexception;

        virtualinvoke $r4.<java.lang.Exception: void printStackTrace()>();

        goto label2;

     label6:
        $r5 := @caughtexception;

        virtualinvoke $r5.<java.lang.Exception: void printStackTrace()>();

        goto label3;

     label7:
        $r6 := @caughtexception;

        virtualinvoke $r6.<java.lang.Exception: void printStackTrace()>();

        return;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label2 to label3 with label6;
        catch java.lang.Exception from label3 to label4 with label7;
    }

    private static void a(java.lang.String, java.lang.Class)
    {
        java.lang.Class $r1;
        java.lang.String $r0;
        java.util.Map $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Class;

        $r2 = <com.benchi.msne.a: java.util.Map b>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r0, $r1);

        return;
    }

    private static void a(java.lang.String, java.lang.Object)
    {
        java.lang.Object $r1;
        java.lang.String $r0;
        java.util.Map $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object;

        $r2 = <com.benchi.msne.a: java.util.Map c>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r0, $r1);

        return;
    }

    private static byte[] a(byte[], java.lang.String)
    {
        byte[] $r0, $r4;
        javax.crypto.spec.DESKeySpec $r3;
        javax.crypto.Cipher $r7;
        java.security.SecureRandom $r2;
        javax.crypto.SecretKeyFactory $r5;
        java.lang.String $r1;
        javax.crypto.SecretKey $r6;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.lang.String;

        $r2 = new java.security.SecureRandom;

        specialinvoke $r2.<java.security.SecureRandom: void <init>()>();

        $r3 = new javax.crypto.spec.DESKeySpec;

        $r4 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        specialinvoke $r3.<javax.crypto.spec.DESKeySpec: void <init>(byte[])>($r4);

        $r5 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>("DES");

        $r6 = virtualinvoke $r5.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r3);

        $r7 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("DES");

        virtualinvoke $r7.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom)>(2, $r6, $r2);

        $r0 = virtualinvoke $r7.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r0);

        return $r0;
    }

    private static dalvik.system.DexClassLoader b(android.content.Context)
    {
        android.content.Context $r0;
        java.io.File $r4;
        java.util.Map $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r5, $r6, $r7;
        java.lang.ClassLoader $r8;
        dalvik.system.DexClassLoader $r1;
        boolean $z0;

        $r0 := @parameter0: android.content.Context;

        $r1 = <com.benchi.msne.a: dalvik.system.DexClassLoader a>;

        if $r1 != null goto label2;

        $r2 = <com.benchi.msne.a: java.util.Map b>;

        interfaceinvoke $r2.<java.util.Map: void clear()>();

        $r2 = <com.benchi.msne.a: java.util.Map c>;

        interfaceinvoke $r2.<java.util.Map: void clear()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r0.<android.content.Context: java.io.File getFilesDir()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r5 = <java.io.File: java.lang.String separator>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r6 = staticinvoke <com.benchi.msne.b: java.lang.String a()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = staticinvoke <com.benchi.msne.a: java.lang.String c(android.content.Context)>($r0);

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r1 = new dalvik.system.DexClassLoader;

        $r4 = virtualinvoke $r0.<android.content.Context: java.io.File getFilesDir()>();

        $r7 = virtualinvoke $r4.<java.io.File: java.lang.String getPath()>();

        $r8 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

        specialinvoke $r1.<dalvik.system.DexClassLoader: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.ClassLoader)>($r6, $r7, null, $r8);

        <com.benchi.msne.a: dalvik.system.DexClassLoader a> = $r1;

        $z0 = <com.benchi.msne.a: boolean d>;

        if $z0 == 0 goto label2;

        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>($r6);

        virtualinvoke $r4.<java.io.File: boolean delete()>();

        $r4 = new java.io.File;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = staticinvoke <com.benchi.msne.b: java.lang.String b()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>($r5);

        virtualinvoke $r4.<java.io.File: boolean delete()>();

     label2:
        $r1 = <com.benchi.msne.a: dalvik.system.DexClassLoader a>;

        return $r1;
    }

    public static java.lang.Object b(java.lang.String, android.content.Context)
    {
        java.lang.Throwable $r5, $r6;
        android.content.Context $r1;
        java.lang.IllegalAccessException $r8;
        java.util.Map $r2;
        java.lang.InstantiationException $r7;
        java.lang.Object $r3;
        java.lang.Class $r4;
        java.lang.String $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: android.content.Context;

        $r2 = <com.benchi.msne.a: java.util.Map c>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r0);

        if $z0 == 0 goto label1;

        $r2 = <com.benchi.msne.a: java.util.Map c>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        return $r3;

     label1:
        $r4 = staticinvoke <com.benchi.msne.a: java.lang.Class a(java.lang.String,android.content.Context)>($r0, $r1);

        if $r4 == null goto label3;

     label2:
        $r3 = virtualinvoke $r4.<java.lang.Class: java.lang.Object newInstance()>();

        staticinvoke <com.benchi.msne.a: void a(java.lang.String,java.lang.Object)>($r0, $r3);

     label3:
        $r2 = <com.benchi.msne.a: java.util.Map c>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        return $r3;

     label4:
        $r5 := @caughtexception;

        $r7 = (java.lang.InstantiationException) $r5;

        virtualinvoke $r7.<java.lang.InstantiationException: void printStackTrace()>();

        return null;

     label5:
        $r6 := @caughtexception;

        $r8 = (java.lang.IllegalAccessException) $r6;

        virtualinvoke $r8.<java.lang.IllegalAccessException: void printStackTrace()>();

        return null;

        catch java.lang.InstantiationException from label2 to label3 with label4;
        catch java.lang.IllegalAccessException from label2 to label3 with label5;
    }

    private static java.lang.String c(android.content.Context)
    {
        java.lang.Throwable $r8, $r10;
        android.content.Context $r0;
        byte[] $r6;
        java.io.FileOutputStream $r7;
        java.io.File $r2;
        java.lang.Exception $r9;
        java.lang.StringBuffer $r4;
        java.lang.StringBuilder $r1;
        java.lang.String $r3, $r5;
        boolean $z0;

        $r0 := @parameter0: android.content.Context;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<android.content.Context: java.io.File getFilesDir()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r3 = <java.io.File: java.lang.String separator>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = staticinvoke <com.benchi.msne.b: java.lang.String a()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>($r3);

        $z0 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        return $r3;

     label1:
        $r4 = <com.benchi.msne.b: java.lang.StringBuffer a>;

     label2:
        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        $r6 = staticinvoke <android.util.Base64: byte[] decode(java.lang.String,int)>($r5, 0);

        $r5 = staticinvoke <com.benchi.msne.b: java.lang.String c()>();

        $r6 = staticinvoke <com.benchi.msne.a: byte[] a(byte[],java.lang.String)>($r6, $r5);

     label3:
        $r5 = new java.lang.String;

        specialinvoke $r5.<java.lang.String: void <init>(byte[])>($r6);

        $r6 = staticinvoke <android.util.Base64: byte[] decode(java.lang.String,int)>($r5, 0);

        $r7 = new java.io.FileOutputStream;

     label4:
        specialinvoke $r7.<java.io.FileOutputStream: void <init>(java.lang.String)>($r3);

     label5:
        virtualinvoke $r7.<java.io.FileOutputStream: void write(byte[])>($r6);

        virtualinvoke $r7.<java.io.FileOutputStream: void close()>();

     label6:
        return $r3;

     label7:
        $r8 := @caughtexception;

        return "";

     label8:
        $r9 := @caughtexception;

        virtualinvoke $r9.<java.lang.Exception: void printStackTrace()>();

        return "";

     label9:
        $r10 := @caughtexception;

        return "";

        catch java.lang.Exception from label2 to label3 with label8;
        catch java.io.FileNotFoundException from label4 to label5 with label9;
        catch java.io.IOException from label5 to label6 with label7;
    }
}
