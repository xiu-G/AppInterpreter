public class proguard.classfile.instruction.BranchInstruction extends proguard.classfile.instruction.Instruction
{
    public int branchOffset;

    public void <init>()
    {
        proguard.classfile.instruction.BranchInstruction r0;

        r0 := @this: proguard.classfile.instruction.BranchInstruction;

        specialinvoke r0.<proguard.classfile.instruction.Instruction: void <init>()>();

        return;
    }

    public void <init>(byte, int)
    {
        int $i1;
        proguard.classfile.instruction.BranchInstruction r0;
        byte $b0;

        r0 := @this: proguard.classfile.instruction.BranchInstruction;

        $b0 := @parameter0: byte;

        $i1 := @parameter1: int;

        specialinvoke r0.<proguard.classfile.instruction.Instruction: void <init>()>();

        r0.<proguard.classfile.instruction.BranchInstruction: byte opcode> = $b0;

        r0.<proguard.classfile.instruction.BranchInstruction: int branchOffset> = $i1;

        return;
    }

    private int branchOffsetSize()
    {
        int $i1;
        proguard.classfile.instruction.BranchInstruction r0;
        byte $b0;

        r0 := @this: proguard.classfile.instruction.BranchInstruction;

        $b0 = r0.<proguard.classfile.instruction.BranchInstruction: byte opcode>;

        $i1 = (int) $b0;

        if $i1 == -56 goto label1;

        $b0 = r0.<proguard.classfile.instruction.BranchInstruction: byte opcode>;

        $i1 = (int) $b0;

        if $i1 != -55 goto label2;

     label1:
        return 4;

     label2:
        return 2;
    }

    private int requiredBranchOffsetSize()
    {
        int $i0, $i1;
        proguard.classfile.instruction.BranchInstruction r0;

        r0 := @this: proguard.classfile.instruction.BranchInstruction;

        $i0 = r0.<proguard.classfile.instruction.BranchInstruction: int branchOffset>;

        $i0 = $i0 << 16;

        $i1 = $i0 >> 16;

        $i0 = r0.<proguard.classfile.instruction.BranchInstruction: int branchOffset>;

        if $i1 != $i0 goto label1;

        return 2;

     label1:
        return 4;
    }

    public void accept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.visitor.InstructionVisitor)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.instruction.BranchInstruction r0;
        proguard.classfile.Method $r2;
        proguard.classfile.instruction.visitor.InstructionVisitor $r4;

        r0 := @this: proguard.classfile.instruction.BranchInstruction;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.visitor.InstructionVisitor;

        interfaceinvoke $r4.<proguard.classfile.instruction.visitor.InstructionVisitor: void visitBranchInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.BranchInstruction)>($r1, $r2, $r3, $i0, r0);

        return;
    }

    public byte canonicalOpcode()
    {
        int $i1;
        proguard.classfile.instruction.BranchInstruction r0;
        byte $b0;

        r0 := @this: proguard.classfile.instruction.BranchInstruction;

        $b0 = r0.<proguard.classfile.instruction.BranchInstruction: byte opcode>;

        $i1 = (int) $b0;

        lookupswitch($i1)
        {
            case -56: goto label2;
            case -55: goto label3;
            default: goto label1;
        };

     label1:
        $b0 = r0.<proguard.classfile.instruction.BranchInstruction: byte opcode>;

        return $b0;

     label2:
        return -89;

     label3:
        return -88;
    }

    public proguard.classfile.instruction.BranchInstruction copy(proguard.classfile.instruction.BranchInstruction)
    {
        byte $b0;
        int $i1;
        proguard.classfile.instruction.BranchInstruction r0, $r1;

        r0 := @this: proguard.classfile.instruction.BranchInstruction;

        $r1 := @parameter0: proguard.classfile.instruction.BranchInstruction;

        $b0 = $r1.<proguard.classfile.instruction.BranchInstruction: byte opcode>;

        r0.<proguard.classfile.instruction.BranchInstruction: byte opcode> = $b0;

        $i1 = $r1.<proguard.classfile.instruction.BranchInstruction: int branchOffset>;

        r0.<proguard.classfile.instruction.BranchInstruction: int branchOffset> = $i1;

        return r0;
    }

    public int length(int)
    {
        int $i0;
        proguard.classfile.instruction.BranchInstruction r0;

        r0 := @this: proguard.classfile.instruction.BranchInstruction;

        $i0 := @parameter0: int;

        $i0 = specialinvoke r0.<proguard.classfile.instruction.BranchInstruction: int branchOffsetSize()>();

        $i0 = $i0 + 1;

        return $i0;
    }

    protected void readInfo(byte[], int)
    {
        byte[] $r1;
        int $i0, $i1;
        proguard.classfile.instruction.BranchInstruction r0;

        r0 := @this: proguard.classfile.instruction.BranchInstruction;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 = specialinvoke r0.<proguard.classfile.instruction.BranchInstruction: int branchOffsetSize()>();

        $i0 = staticinvoke <proguard.classfile.instruction.BranchInstruction: int readSignedValue(byte[],int,int)>($r1, $i0, $i1);

        r0.<proguard.classfile.instruction.BranchInstruction: int branchOffset> = $i0;

        return;
    }

    public proguard.classfile.instruction.Instruction shrink()
    {
        byte $b1;
        java.lang.StringBuffer $r1, $r3;
        int $i0;
        proguard.classfile.instruction.BranchInstruction r0;
        java.lang.String $r2;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: proguard.classfile.instruction.BranchInstruction;

        $i0 = specialinvoke r0.<proguard.classfile.instruction.BranchInstruction: int requiredBranchOffsetSize()>();

        if $i0 != 2 goto label2;

        $b1 = r0.<proguard.classfile.instruction.BranchInstruction: byte opcode>;

        $i0 = (int) $b1;

        if $i0 != -56 goto label1;

        r0.<proguard.classfile.instruction.BranchInstruction: byte opcode> = -89;

        return r0;

     label1:
        $b1 = r0.<proguard.classfile.instruction.BranchInstruction: byte opcode>;

        $i0 = (int) $b1;

        if $i0 != -55 goto label5;

        r0.<proguard.classfile.instruction.BranchInstruction: byte opcode> = -88;

        return r0;

     label2:
        $b1 = r0.<proguard.classfile.instruction.BranchInstruction: byte opcode>;

        $i0 = (int) $b1;

        if $i0 != -89 goto label3;

        r0.<proguard.classfile.instruction.BranchInstruction: byte opcode> = -56;

        return r0;

     label3:
        $b1 = r0.<proguard.classfile.instruction.BranchInstruction: byte opcode>;

        $i0 = (int) $b1;

        if $i0 != -88 goto label4;

        r0.<proguard.classfile.instruction.BranchInstruction: byte opcode> = -55;

        return r0;

     label4:
        $r4 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Branch instruction can\'t be widened (");

        $r2 = virtualinvoke r0.<proguard.classfile.instruction.BranchInstruction: java.lang.String toString()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r4;

     label5:
        return r0;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuffer $r1;
        int $i0;
        proguard.classfile.instruction.BranchInstruction r0;
        java.lang.String $r2;

        r0 := @this: proguard.classfile.instruction.BranchInstruction;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke r0.<proguard.classfile.instruction.BranchInstruction: java.lang.String getName()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $i0 = r0.<proguard.classfile.instruction.BranchInstruction: int branchOffset>;

        if $i0 < 0 goto label2;

        $r2 = "+";

     label1:
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $i0 = r0.<proguard.classfile.instruction.BranchInstruction: int branchOffset>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;

     label2:
        $r2 = "";

        goto label1;
    }

    public java.lang.String toString(int)
    {
        java.lang.StringBuffer $r1;
        int $i0, $i1;
        proguard.classfile.instruction.BranchInstruction r0;
        java.lang.String $r2;

        r0 := @this: proguard.classfile.instruction.BranchInstruction;

        $i0 := @parameter0: int;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[");

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] ");

        $r2 = virtualinvoke r0.<proguard.classfile.instruction.BranchInstruction: java.lang.String toString()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" (target=");

        $i1 = r0.<proguard.classfile.instruction.BranchInstruction: int branchOffset>;

        $i0 = $i1 + $i0;

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    protected void writeInfo(byte[], int)
    {
        byte[] $r1;
        proguard.classfile.instruction.BranchInstruction r0;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuffer $r3;
        int $i0, $i1, $i2;
        java.lang.String $r4;

        r0 := @this: proguard.classfile.instruction.BranchInstruction;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 = specialinvoke r0.<proguard.classfile.instruction.BranchInstruction: int requiredBranchOffsetSize()>();

        $i2 = specialinvoke r0.<proguard.classfile.instruction.BranchInstruction: int branchOffsetSize()>();

        if $i1 <= $i2 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Instruction has invalid branch offset size (");

        $r4 = virtualinvoke r0.<proguard.classfile.instruction.BranchInstruction: java.lang.String toString(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label1:
        $i1 = r0.<proguard.classfile.instruction.BranchInstruction: int branchOffset>;

        $i2 = specialinvoke r0.<proguard.classfile.instruction.BranchInstruction: int branchOffsetSize()>();

        staticinvoke <proguard.classfile.instruction.BranchInstruction: void writeSignedValue(byte[],int,int,int)>($r1, $i0, $i1, $i2);

        return;
    }
}
