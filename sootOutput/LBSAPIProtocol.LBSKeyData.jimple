public final class LBSAPIProtocol.LBSKeyData extends com.qq.taf.jce.JceStruct
{
    static final boolean $assertionsDisabled;
    static byte[] cache_vAuthName;
    static byte[] cache_vEncryptData;
    public byte[] vAuthName;
    public byte[] vEncryptData;

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0;

        $r0 = class "LLBSAPIProtocol/LBSKeyData;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label2;

        $z0 = 1;

     label1:
        <LBSAPIProtocol.LBSKeyData: boolean $assertionsDisabled> = $z0;

        return;

     label2:
        $z0 = 0;

        goto label1;
    }

    public void <init>()
    {
        byte[] $r1;
        LBSAPIProtocol.LBSKeyData r0;

        r0 := @this: LBSAPIProtocol.LBSKeyData;

        specialinvoke r0.<com.qq.taf.jce.JceStruct: void <init>()>();

        r0.<LBSAPIProtocol.LBSKeyData: byte[] vAuthName> = null;

        r0.<LBSAPIProtocol.LBSKeyData: byte[] vEncryptData> = null;

        $r1 = r0.<LBSAPIProtocol.LBSKeyData: byte[] vAuthName>;

        virtualinvoke r0.<LBSAPIProtocol.LBSKeyData: void setVAuthName(byte[])>($r1);

        $r1 = r0.<LBSAPIProtocol.LBSKeyData: byte[] vEncryptData>;

        virtualinvoke r0.<LBSAPIProtocol.LBSKeyData: void setVEncryptData(byte[])>($r1);

        return;
    }

    public void <init>(byte[], byte[])
    {
        byte[] $r1, $r2;
        LBSAPIProtocol.LBSKeyData r0;

        r0 := @this: LBSAPIProtocol.LBSKeyData;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: byte[];

        specialinvoke r0.<com.qq.taf.jce.JceStruct: void <init>()>();

        r0.<LBSAPIProtocol.LBSKeyData: byte[] vAuthName> = null;

        r0.<LBSAPIProtocol.LBSKeyData: byte[] vEncryptData> = null;

        virtualinvoke r0.<LBSAPIProtocol.LBSKeyData: void setVAuthName(byte[])>($r1);

        virtualinvoke r0.<LBSAPIProtocol.LBSKeyData: void setVEncryptData(byte[])>($r2);

        return;
    }

    public java.lang.String className()
    {
        LBSAPIProtocol.LBSKeyData r0;

        r0 := @this: LBSAPIProtocol.LBSKeyData;

        return "LBSAPIProtocol.LBSKeyData";
    }

    public java.lang.Object clone()
    {
        java.lang.Throwable $r2;
        java.lang.Object $r1;
        java.lang.AssertionError $r3;
        LBSAPIProtocol.LBSKeyData r0;
        boolean $z0;

        r0 := @this: LBSAPIProtocol.LBSKeyData;

     label1:
        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $z0 = <LBSAPIProtocol.LBSKeyData: boolean $assertionsDisabled>;

        if $z0 != 0 goto label4;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label4:
        return null;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    public void display(java.lang.StringBuilder, int)
    {
        byte[] $r3;
        int $i0;
        com.qq.taf.jce.JceDisplayer $r2;
        java.lang.StringBuilder $r1;
        LBSAPIProtocol.LBSKeyData r0;

        r0 := @this: LBSAPIProtocol.LBSKeyData;

        $r1 := @parameter0: java.lang.StringBuilder;

        $i0 := @parameter1: int;

        $r2 = new com.qq.taf.jce.JceDisplayer;

        specialinvoke $r2.<com.qq.taf.jce.JceDisplayer: void <init>(java.lang.StringBuilder,int)>($r1, $i0);

        $r3 = r0.<LBSAPIProtocol.LBSKeyData: byte[] vAuthName>;

        virtualinvoke $r2.<com.qq.taf.jce.JceDisplayer: com.qq.taf.jce.JceDisplayer display(byte[],java.lang.String)>($r3, "vAuthName");

        $r3 = r0.<LBSAPIProtocol.LBSKeyData: byte[] vEncryptData>;

        virtualinvoke $r2.<com.qq.taf.jce.JceDisplayer: com.qq.taf.jce.JceDisplayer display(byte[],java.lang.String)>($r3, "vEncryptData");

        return;
    }

    public boolean equals(java.lang.Object)
    {
        byte[] $r3, $r4;
        java.lang.Object $r1;
        LBSAPIProtocol.LBSKeyData r0, $r2;
        boolean $z0;

        r0 := @this: LBSAPIProtocol.LBSKeyData;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (LBSAPIProtocol.LBSKeyData) $r1;

        $r3 = r0.<LBSAPIProtocol.LBSKeyData: byte[] vAuthName>;

        $r4 = $r2.<LBSAPIProtocol.LBSKeyData: byte[] vAuthName>;

        $z0 = staticinvoke <com.qq.taf.jce.JceUtil: boolean equals(java.lang.Object,java.lang.Object)>($r3, $r4);

        if $z0 == 0 goto label1;

        $r3 = r0.<LBSAPIProtocol.LBSKeyData: byte[] vEncryptData>;

        $r4 = $r2.<LBSAPIProtocol.LBSKeyData: byte[] vEncryptData>;

        $z0 = staticinvoke <com.qq.taf.jce.JceUtil: boolean equals(java.lang.Object,java.lang.Object)>($r3, $r4);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public byte[] getVAuthName()
    {
        byte[] r1;
        LBSAPIProtocol.LBSKeyData r0;

        r0 := @this: LBSAPIProtocol.LBSKeyData;

        r1 = r0.<LBSAPIProtocol.LBSKeyData: byte[] vAuthName>;

        return r1;
    }

    public byte[] getVEncryptData()
    {
        byte[] r1;
        LBSAPIProtocol.LBSKeyData r0;

        r0 := @this: LBSAPIProtocol.LBSKeyData;

        r1 = r0.<LBSAPIProtocol.LBSKeyData: byte[] vEncryptData>;

        return r1;
    }

    public void readFrom(com.qq.taf.jce.JceInputStream)
    {
        com.qq.taf.jce.JceInputStream $r1;
        byte[] $r2;
        LBSAPIProtocol.LBSKeyData r0;

        r0 := @this: LBSAPIProtocol.LBSKeyData;

        $r1 := @parameter0: com.qq.taf.jce.JceInputStream;

        $r2 = <LBSAPIProtocol.LBSKeyData: byte[] cache_vAuthName>;

        if $r2 != null goto label1;

        $r2 = newarray (byte)[1];

        <LBSAPIProtocol.LBSKeyData: byte[] cache_vAuthName> = $r2;

        $r2 = <LBSAPIProtocol.LBSKeyData: byte[] cache_vAuthName>;

        $r2[0] = 0;

     label1:
        $r2 = <LBSAPIProtocol.LBSKeyData: byte[] cache_vAuthName>;

        $r2 = virtualinvoke $r1.<com.qq.taf.jce.JceInputStream: byte[] read(byte[],int,boolean)>($r2, 0, 1);

        virtualinvoke r0.<LBSAPIProtocol.LBSKeyData: void setVAuthName(byte[])>($r2);

        $r2 = <LBSAPIProtocol.LBSKeyData: byte[] cache_vEncryptData>;

        if $r2 != null goto label2;

        $r2 = newarray (byte)[1];

        <LBSAPIProtocol.LBSKeyData: byte[] cache_vEncryptData> = $r2;

        $r2 = <LBSAPIProtocol.LBSKeyData: byte[] cache_vEncryptData>;

        $r2[0] = 0;

     label2:
        $r2 = <LBSAPIProtocol.LBSKeyData: byte[] cache_vEncryptData>;

        $r2 = virtualinvoke $r1.<com.qq.taf.jce.JceInputStream: byte[] read(byte[],int,boolean)>($r2, 1, 1);

        virtualinvoke r0.<LBSAPIProtocol.LBSKeyData: void setVEncryptData(byte[])>($r2);

        return;
    }

    public void setVAuthName(byte[])
    {
        byte[] $r1;
        LBSAPIProtocol.LBSKeyData r0;

        r0 := @this: LBSAPIProtocol.LBSKeyData;

        $r1 := @parameter0: byte[];

        r0.<LBSAPIProtocol.LBSKeyData: byte[] vAuthName> = $r1;

        return;
    }

    public void setVEncryptData(byte[])
    {
        byte[] $r1;
        LBSAPIProtocol.LBSKeyData r0;

        r0 := @this: LBSAPIProtocol.LBSKeyData;

        $r1 := @parameter0: byte[];

        r0.<LBSAPIProtocol.LBSKeyData: byte[] vEncryptData> = $r1;

        return;
    }

    public void writeTo(com.qq.taf.jce.JceOutputStream)
    {
        byte[] $r2;
        com.qq.taf.jce.JceOutputStream $r1;
        LBSAPIProtocol.LBSKeyData r0;

        r0 := @this: LBSAPIProtocol.LBSKeyData;

        $r1 := @parameter0: com.qq.taf.jce.JceOutputStream;

        $r2 = r0.<LBSAPIProtocol.LBSKeyData: byte[] vAuthName>;

        virtualinvoke $r1.<com.qq.taf.jce.JceOutputStream: void write(byte[],int)>($r2, 0);

        $r2 = r0.<LBSAPIProtocol.LBSKeyData: byte[] vEncryptData>;

        virtualinvoke $r1.<com.qq.taf.jce.JceOutputStream: void write(byte[],int)>($r2, 1);

        return;
    }
}
