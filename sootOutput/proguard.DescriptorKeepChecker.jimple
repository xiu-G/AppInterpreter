public class proguard.DescriptorKeepChecker extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.visitor.MemberVisitor, proguard.classfile.visitor.ClassVisitor
{
    private boolean isField;
    private final proguard.classfile.ClassPool libraryClassPool;
    private final proguard.classfile.util.WarningPrinter notePrinter;
    private final proguard.classfile.ClassPool programClassPool;
    private proguard.classfile.Clazz referencingClass;
    private proguard.classfile.Member referencingMember;

    public void <init>(proguard.classfile.ClassPool, proguard.classfile.ClassPool, proguard.classfile.util.WarningPrinter)
    {
        proguard.classfile.ClassPool $r1, $r2;
        proguard.classfile.util.WarningPrinter $r3;
        proguard.DescriptorKeepChecker r0;

        r0 := @this: proguard.DescriptorKeepChecker;

        $r1 := @parameter0: proguard.classfile.ClassPool;

        $r2 := @parameter1: proguard.classfile.ClassPool;

        $r3 := @parameter2: proguard.classfile.util.WarningPrinter;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        r0.<proguard.DescriptorKeepChecker: proguard.classfile.ClassPool programClassPool> = $r1;

        r0.<proguard.DescriptorKeepChecker: proguard.classfile.ClassPool libraryClassPool> = $r2;

        r0.<proguard.DescriptorKeepChecker: proguard.classfile.util.WarningPrinter notePrinter> = $r3;

        return;
    }

    public void checkClassSpecifications(java.util.List)
    {
        proguard.classfile.ClassPool $r3;
        proguard.classfile.visitor.ClassCleaner $r4;
        java.util.List $r1;
        proguard.classfile.visitor.AllMemberVisitor $r6;
        proguard.classfile.visitor.ClassPoolVisitor $r2;
        proguard.DescriptorKeepChecker r0;
        proguard.optimize.KeepMarker $r5;

        r0 := @this: proguard.DescriptorKeepChecker;

        $r1 := @parameter0: java.util.List;

        $r3 = r0.<proguard.DescriptorKeepChecker: proguard.classfile.ClassPool programClassPool>;

        $r4 = new proguard.classfile.visitor.ClassCleaner;

        specialinvoke $r4.<proguard.classfile.visitor.ClassCleaner: void <init>()>();

        virtualinvoke $r3.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r4);

        $r3 = r0.<proguard.DescriptorKeepChecker: proguard.classfile.ClassPool libraryClassPool>;

        $r4 = new proguard.classfile.visitor.ClassCleaner;

        specialinvoke $r4.<proguard.classfile.visitor.ClassCleaner: void <init>()>();

        virtualinvoke $r3.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r4);

        $r5 = new proguard.optimize.KeepMarker;

        specialinvoke $r5.<proguard.optimize.KeepMarker: void <init>()>();

        $r2 = staticinvoke <proguard.ClassSpecificationVisitorFactory: proguard.classfile.visitor.ClassPoolVisitor createClassPoolVisitor(java.util.List,proguard.classfile.visitor.ClassVisitor,proguard.classfile.visitor.MemberVisitor,boolean,boolean,boolean)>($r1, $r5, $r5, 0, 1, 1);

        $r3 = r0.<proguard.DescriptorKeepChecker: proguard.classfile.ClassPool programClassPool>;

        virtualinvoke $r3.<proguard.classfile.ClassPool: void accept(proguard.classfile.visitor.ClassPoolVisitor)>($r2);

        $r3 = r0.<proguard.DescriptorKeepChecker: proguard.classfile.ClassPool libraryClassPool>;

        virtualinvoke $r3.<proguard.classfile.ClassPool: void accept(proguard.classfile.visitor.ClassPoolVisitor)>($r2);

        $r3 = r0.<proguard.DescriptorKeepChecker: proguard.classfile.ClassPool programClassPool>;

        $r6 = new proguard.classfile.visitor.AllMemberVisitor;

        specialinvoke $r6.<proguard.classfile.visitor.AllMemberVisitor: void <init>(proguard.classfile.visitor.MemberVisitor)>(r0);

        virtualinvoke $r3.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r6);

        return;
    }

    public void visitLibraryClass(proguard.classfile.LibraryClass)
    {
        proguard.classfile.LibraryClass $r1;
        proguard.DescriptorKeepChecker r0;

        r0 := @this: proguard.DescriptorKeepChecker;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        return;
    }

    public void visitProgramClass(proguard.classfile.ProgramClass)
    {
        proguard.classfile.util.WarningPrinter $r3;
        proguard.classfile.ProgramClass $r1;
        proguard.classfile.Member $r8;
        proguard.DescriptorKeepChecker r0;
        proguard.classfile.Clazz $r2;
        java.lang.StringBuffer $r6;
        java.lang.String $r4, $r5, $r7, $r9, $r10;
        boolean $z0;

        r0 := @this: proguard.DescriptorKeepChecker;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $z0 = staticinvoke <proguard.optimize.KeepMarker: boolean isKept(proguard.classfile.VisitorAccepter)>($r1);

        if $z0 != 0 goto label3;

        $r3 = r0.<proguard.DescriptorKeepChecker: proguard.classfile.util.WarningPrinter notePrinter>;

        $r2 = r0.<proguard.DescriptorKeepChecker: proguard.classfile.Clazz referencingClass>;

        $r4 = interfaceinvoke $r2.<proguard.classfile.Clazz: java.lang.String getName()>();

        $r5 = virtualinvoke $r1.<proguard.classfile.ProgramClass: java.lang.String getName()>();

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Note: the configuration keeps the entry point \'");

        $r2 = r0.<proguard.DescriptorKeepChecker: proguard.classfile.Clazz referencingClass>;

        $r7 = interfaceinvoke $r2.<proguard.classfile.Clazz: java.lang.String getName()>();

        $r7 = staticinvoke <proguard.classfile.util.ClassUtil: java.lang.String externalClassName(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" { ");

        $z0 = r0.<proguard.DescriptorKeepChecker: boolean isField>;

        if $z0 == 0 goto label2;

        $r8 = r0.<proguard.DescriptorKeepChecker: proguard.classfile.Member referencingMember>;

        $r2 = r0.<proguard.DescriptorKeepChecker: proguard.classfile.Clazz referencingClass>;

        $r7 = interfaceinvoke $r8.<proguard.classfile.Member: java.lang.String getName(proguard.classfile.Clazz)>($r2);

        $r8 = r0.<proguard.DescriptorKeepChecker: proguard.classfile.Member referencingMember>;

        $r2 = r0.<proguard.DescriptorKeepChecker: proguard.classfile.Clazz referencingClass>;

        $r9 = interfaceinvoke $r8.<proguard.classfile.Member: java.lang.String getDescriptor(proguard.classfile.Clazz)>($r2);

        $r7 = staticinvoke <proguard.classfile.util.ClassUtil: java.lang.String externalFullFieldDescription(int,java.lang.String,java.lang.String)>(0, $r7, $r9);

     label1:
        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("; }\', but not the descriptor class \'");

        $r7 = virtualinvoke $r1.<proguard.classfile.ProgramClass: java.lang.String getName()>();

        $r7 = staticinvoke <proguard.classfile.util.ClassUtil: java.lang.String externalClassName(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r3.<proguard.classfile.util.WarningPrinter: void print(java.lang.String,java.lang.String,java.lang.String)>($r4, $r5, $r7);

        return;

     label2:
        $r2 = r0.<proguard.DescriptorKeepChecker: proguard.classfile.Clazz referencingClass>;

        $r7 = interfaceinvoke $r2.<proguard.classfile.Clazz: java.lang.String getName()>();

        $r8 = r0.<proguard.DescriptorKeepChecker: proguard.classfile.Member referencingMember>;

        $r2 = r0.<proguard.DescriptorKeepChecker: proguard.classfile.Clazz referencingClass>;

        $r9 = interfaceinvoke $r8.<proguard.classfile.Member: java.lang.String getName(proguard.classfile.Clazz)>($r2);

        $r8 = r0.<proguard.DescriptorKeepChecker: proguard.classfile.Member referencingMember>;

        $r2 = r0.<proguard.DescriptorKeepChecker: proguard.classfile.Clazz referencingClass>;

        $r10 = interfaceinvoke $r8.<proguard.classfile.Member: java.lang.String getDescriptor(proguard.classfile.Clazz)>($r2);

        $r7 = staticinvoke <proguard.classfile.util.ClassUtil: java.lang.String externalFullMethodDescription(java.lang.String,int,java.lang.String,java.lang.String)>($r7, 0, $r9, $r10);

        goto label1;

     label3:
        return;
    }

    public void visitProgramField(proguard.classfile.ProgramClass, proguard.classfile.ProgramField)
    {
        proguard.DescriptorKeepChecker r0;
        proguard.classfile.ProgramField $r2;
        proguard.classfile.ProgramClass $r1;
        boolean $z0;

        r0 := @this: proguard.DescriptorKeepChecker;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.ProgramField;

        $z0 = staticinvoke <proguard.optimize.KeepMarker: boolean isKept(proguard.classfile.VisitorAccepter)>($r2);

        if $z0 == 0 goto label1;

        r0.<proguard.DescriptorKeepChecker: proguard.classfile.Clazz referencingClass> = $r1;

        r0.<proguard.DescriptorKeepChecker: proguard.classfile.Member referencingMember> = $r2;

        r0.<proguard.DescriptorKeepChecker: boolean isField> = 1;

     label1:
        return;
    }

    public void visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod)
    {
        proguard.classfile.Clazz[] $r3;
        proguard.classfile.ProgramClass $r1;
        proguard.DescriptorKeepChecker r0;
        proguard.classfile.Clazz $r4;
        proguard.classfile.ProgramMethod $r2;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: proguard.DescriptorKeepChecker;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.ProgramMethod;

        $i0 = 0;

        $z0 = staticinvoke <proguard.optimize.KeepMarker: boolean isKept(proguard.classfile.VisitorAccepter)>($r2);

        if $z0 == 0 goto label3;

        r0.<proguard.DescriptorKeepChecker: proguard.classfile.Clazz referencingClass> = $r1;

        r0.<proguard.DescriptorKeepChecker: proguard.classfile.Member referencingMember> = $r2;

        r0.<proguard.DescriptorKeepChecker: boolean isField> = 0;

        $r3 = $r2.<proguard.classfile.ProgramMethod: proguard.classfile.Clazz[] referencedClasses>;

        if $r3 == null goto label3;

     label1:
        $i1 = lengthof $r3;

        $i1 = $i1 - 1;

        if $i0 >= $i1 goto label3;

        $r4 = $r3[$i0];

        if $r4 == null goto label2;

        $r4 = $r3[$i0];

        interfaceinvoke $r4.<proguard.classfile.Clazz: void accept(proguard.classfile.visitor.ClassVisitor)>(r0);

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        return;
    }
}
