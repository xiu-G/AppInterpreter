public class proguard.classfile.visitor.SimilarMemberVisitor extends java.lang.Object implements proguard.classfile.visitor.MemberVisitor
{
    private final proguard.classfile.visitor.MemberVisitor memberVisitor;
    private final proguard.classfile.Clazz targetClass;
    private final boolean visitInterfaceMembers;
    private final boolean visitOverridingMembers;
    private final boolean visitSuperMembers;
    private final boolean visitThisMember;

    public void <init>(proguard.classfile.Clazz, boolean, boolean, boolean, boolean, proguard.classfile.visitor.MemberVisitor)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.visitor.MemberVisitor $r2;
        proguard.classfile.visitor.SimilarMemberVisitor r0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: proguard.classfile.visitor.SimilarMemberVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $z0 := @parameter1: boolean;

        $z1 := @parameter2: boolean;

        $z2 := @parameter3: boolean;

        $z3 := @parameter4: boolean;

        $r2 := @parameter5: proguard.classfile.visitor.MemberVisitor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<proguard.classfile.visitor.SimilarMemberVisitor: proguard.classfile.Clazz targetClass> = $r1;

        r0.<proguard.classfile.visitor.SimilarMemberVisitor: boolean visitThisMember> = 1;

        r0.<proguard.classfile.visitor.SimilarMemberVisitor: boolean visitSuperMembers> = $z1;

        r0.<proguard.classfile.visitor.SimilarMemberVisitor: boolean visitInterfaceMembers> = $z2;

        r0.<proguard.classfile.visitor.SimilarMemberVisitor: boolean visitOverridingMembers> = 0;

        r0.<proguard.classfile.visitor.SimilarMemberVisitor: proguard.classfile.visitor.MemberVisitor memberVisitor> = $r2;

        return;
    }

    public void visitLibraryField(proguard.classfile.LibraryClass, proguard.classfile.LibraryField)
    {
        proguard.classfile.visitor.NamedFieldVisitor $r4;
        proguard.classfile.LibraryField $r2;
        proguard.classfile.visitor.MemberVisitor $r5;
        proguard.classfile.LibraryClass $r1;
        proguard.classfile.Clazz $r3;
        proguard.classfile.visitor.SimilarMemberVisitor r0;
        java.lang.String $r6, $r7;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: proguard.classfile.visitor.SimilarMemberVisitor;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        $r2 := @parameter1: proguard.classfile.LibraryField;

        $r3 = r0.<proguard.classfile.visitor.SimilarMemberVisitor: proguard.classfile.Clazz targetClass>;

        $z0 = r0.<proguard.classfile.visitor.SimilarMemberVisitor: boolean visitThisMember>;

        $z1 = r0.<proguard.classfile.visitor.SimilarMemberVisitor: boolean visitSuperMembers>;

        $z2 = r0.<proguard.classfile.visitor.SimilarMemberVisitor: boolean visitInterfaceMembers>;

        $z3 = r0.<proguard.classfile.visitor.SimilarMemberVisitor: boolean visitOverridingMembers>;

        $r4 = new proguard.classfile.visitor.NamedFieldVisitor;

        $r6 = virtualinvoke $r2.<proguard.classfile.LibraryField: java.lang.String getName(proguard.classfile.Clazz)>($r1);

        $r7 = virtualinvoke $r2.<proguard.classfile.LibraryField: java.lang.String getDescriptor(proguard.classfile.Clazz)>($r1);

        $r5 = r0.<proguard.classfile.visitor.SimilarMemberVisitor: proguard.classfile.visitor.MemberVisitor memberVisitor>;

        specialinvoke $r4.<proguard.classfile.visitor.NamedFieldVisitor: void <init>(java.lang.String,java.lang.String,proguard.classfile.visitor.MemberVisitor)>($r6, $r7, $r5);

        interfaceinvoke $r3.<proguard.classfile.Clazz: void hierarchyAccept(boolean,boolean,boolean,boolean,proguard.classfile.visitor.ClassVisitor)>($z0, $z1, $z2, $z3, $r4);

        return;
    }

    public void visitLibraryMethod(proguard.classfile.LibraryClass, proguard.classfile.LibraryMethod)
    {
        proguard.classfile.visitor.MemberVisitor $r5;
        proguard.classfile.LibraryClass $r1;
        proguard.classfile.visitor.NamedMethodVisitor $r4;
        proguard.classfile.Clazz $r3;
        proguard.classfile.LibraryMethod $r2;
        proguard.classfile.visitor.SimilarMemberVisitor r0;
        java.lang.String $r6, $r7;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: proguard.classfile.visitor.SimilarMemberVisitor;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        $r2 := @parameter1: proguard.classfile.LibraryMethod;

        $r3 = r0.<proguard.classfile.visitor.SimilarMemberVisitor: proguard.classfile.Clazz targetClass>;

        $z0 = r0.<proguard.classfile.visitor.SimilarMemberVisitor: boolean visitThisMember>;

        $z1 = r0.<proguard.classfile.visitor.SimilarMemberVisitor: boolean visitSuperMembers>;

        $z2 = r0.<proguard.classfile.visitor.SimilarMemberVisitor: boolean visitInterfaceMembers>;

        $z3 = r0.<proguard.classfile.visitor.SimilarMemberVisitor: boolean visitOverridingMembers>;

        $r4 = new proguard.classfile.visitor.NamedMethodVisitor;

        $r6 = virtualinvoke $r2.<proguard.classfile.LibraryMethod: java.lang.String getName(proguard.classfile.Clazz)>($r1);

        $r7 = virtualinvoke $r2.<proguard.classfile.LibraryMethod: java.lang.String getDescriptor(proguard.classfile.Clazz)>($r1);

        $r5 = r0.<proguard.classfile.visitor.SimilarMemberVisitor: proguard.classfile.visitor.MemberVisitor memberVisitor>;

        specialinvoke $r4.<proguard.classfile.visitor.NamedMethodVisitor: void <init>(java.lang.String,java.lang.String,proguard.classfile.visitor.MemberVisitor)>($r6, $r7, $r5);

        interfaceinvoke $r3.<proguard.classfile.Clazz: void hierarchyAccept(boolean,boolean,boolean,boolean,proguard.classfile.visitor.ClassVisitor)>($z0, $z1, $z2, $z3, $r4);

        return;
    }

    public void visitProgramField(proguard.classfile.ProgramClass, proguard.classfile.ProgramField)
    {
        proguard.classfile.visitor.NamedFieldVisitor $r4;
        proguard.classfile.visitor.MemberVisitor $r5;
        proguard.classfile.ProgramClass $r1;
        proguard.classfile.ProgramField $r2;
        proguard.classfile.Clazz $r3;
        proguard.classfile.visitor.SimilarMemberVisitor r0;
        java.lang.String $r6, $r7;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: proguard.classfile.visitor.SimilarMemberVisitor;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.ProgramField;

        $r3 = r0.<proguard.classfile.visitor.SimilarMemberVisitor: proguard.classfile.Clazz targetClass>;

        $z0 = r0.<proguard.classfile.visitor.SimilarMemberVisitor: boolean visitThisMember>;

        $z1 = r0.<proguard.classfile.visitor.SimilarMemberVisitor: boolean visitSuperMembers>;

        $z2 = r0.<proguard.classfile.visitor.SimilarMemberVisitor: boolean visitInterfaceMembers>;

        $z3 = r0.<proguard.classfile.visitor.SimilarMemberVisitor: boolean visitOverridingMembers>;

        $r4 = new proguard.classfile.visitor.NamedFieldVisitor;

        $r6 = virtualinvoke $r2.<proguard.classfile.ProgramField: java.lang.String getName(proguard.classfile.Clazz)>($r1);

        $r7 = virtualinvoke $r2.<proguard.classfile.ProgramField: java.lang.String getDescriptor(proguard.classfile.Clazz)>($r1);

        $r5 = r0.<proguard.classfile.visitor.SimilarMemberVisitor: proguard.classfile.visitor.MemberVisitor memberVisitor>;

        specialinvoke $r4.<proguard.classfile.visitor.NamedFieldVisitor: void <init>(java.lang.String,java.lang.String,proguard.classfile.visitor.MemberVisitor)>($r6, $r7, $r5);

        interfaceinvoke $r3.<proguard.classfile.Clazz: void hierarchyAccept(boolean,boolean,boolean,boolean,proguard.classfile.visitor.ClassVisitor)>($z0, $z1, $z2, $z3, $r4);

        return;
    }

    public void visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod)
    {
        proguard.classfile.visitor.MemberVisitor $r5;
        proguard.classfile.ProgramClass $r1;
        proguard.classfile.visitor.NamedMethodVisitor $r4;
        proguard.classfile.Clazz $r3;
        proguard.classfile.ProgramMethod $r2;
        proguard.classfile.visitor.SimilarMemberVisitor r0;
        java.lang.String $r6, $r7;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: proguard.classfile.visitor.SimilarMemberVisitor;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.ProgramMethod;

        $r3 = r0.<proguard.classfile.visitor.SimilarMemberVisitor: proguard.classfile.Clazz targetClass>;

        $z0 = r0.<proguard.classfile.visitor.SimilarMemberVisitor: boolean visitThisMember>;

        $z1 = r0.<proguard.classfile.visitor.SimilarMemberVisitor: boolean visitSuperMembers>;

        $z2 = r0.<proguard.classfile.visitor.SimilarMemberVisitor: boolean visitInterfaceMembers>;

        $z3 = r0.<proguard.classfile.visitor.SimilarMemberVisitor: boolean visitOverridingMembers>;

        $r4 = new proguard.classfile.visitor.NamedMethodVisitor;

        $r6 = virtualinvoke $r2.<proguard.classfile.ProgramMethod: java.lang.String getName(proguard.classfile.Clazz)>($r1);

        $r7 = virtualinvoke $r2.<proguard.classfile.ProgramMethod: java.lang.String getDescriptor(proguard.classfile.Clazz)>($r1);

        $r5 = r0.<proguard.classfile.visitor.SimilarMemberVisitor: proguard.classfile.visitor.MemberVisitor memberVisitor>;

        specialinvoke $r4.<proguard.classfile.visitor.NamedMethodVisitor: void <init>(java.lang.String,java.lang.String,proguard.classfile.visitor.MemberVisitor)>($r6, $r7, $r5);

        interfaceinvoke $r3.<proguard.classfile.Clazz: void hierarchyAccept(boolean,boolean,boolean,boolean,proguard.classfile.visitor.ClassVisitor)>($z0, $z1, $z2, $z3, $r4);

        return;
    }
}
