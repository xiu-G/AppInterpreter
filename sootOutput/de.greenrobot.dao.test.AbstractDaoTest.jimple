public abstract class de.greenrobot.dao.test.AbstractDaoTest extends de.greenrobot.dao.test.DbTest
{
    protected de.greenrobot.dao.AbstractDao dao;
    protected de.greenrobot.dao.InternalUnitTestDaoAccess daoAccess;
    protected final java.lang.Class daoClass;
    protected de.greenrobot.dao.identityscope.IdentityScope identityScopeForDao;
    protected de.greenrobot.dao.Property pkColumn;

    public void <init>(java.lang.Class)
    {
        java.lang.Class $r1;
        de.greenrobot.dao.test.AbstractDaoTest r0;

        r0 := @this: de.greenrobot.dao.test.AbstractDaoTest;

        $r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<de.greenrobot.dao.test.AbstractDaoTest: void <init>(java.lang.Class,boolean)>($r1, 1);

        return;
    }

    public void <init>(java.lang.Class, boolean)
    {
        java.lang.Class $r1;
        de.greenrobot.dao.test.AbstractDaoTest r0;
        boolean $z0;

        r0 := @this: de.greenrobot.dao.test.AbstractDaoTest;

        $r1 := @parameter0: java.lang.Class;

        $z0 := @parameter1: boolean;

        specialinvoke r0.<de.greenrobot.dao.test.DbTest: void <init>(boolean)>($z0);

        r0.<de.greenrobot.dao.test.AbstractDaoTest: java.lang.Class daoClass> = $r1;

        return;
    }

    protected void clearIdentityScopeIfAny()
    {
        de.greenrobot.dao.identityscope.IdentityScope $r1;
        de.greenrobot.dao.test.AbstractDaoTest r0;

        r0 := @this: de.greenrobot.dao.test.AbstractDaoTest;

        $r1 = r0.<de.greenrobot.dao.test.AbstractDaoTest: de.greenrobot.dao.identityscope.IdentityScope identityScopeForDao>;

        if $r1 == null goto label1;

        $r1 = r0.<de.greenrobot.dao.test.AbstractDaoTest: de.greenrobot.dao.identityscope.IdentityScope identityScopeForDao>;

        interfaceinvoke $r1.<de.greenrobot.dao.identityscope.IdentityScope: void clear()>();

        staticinvoke <de.greenrobot.dao.DaoLog: int d(java.lang.String)>("Identity scope cleared");

        return;

     label1:
        staticinvoke <de.greenrobot.dao.DaoLog: int d(java.lang.String)>("No identity scope to clear");

        return;
    }

    protected void logTableDump()
    {
        java.lang.String $r1;
        de.greenrobot.dao.test.AbstractDaoTest r0;
        de.greenrobot.dao.AbstractDao $r2;

        r0 := @this: de.greenrobot.dao.test.AbstractDaoTest;

        $r2 = r0.<de.greenrobot.dao.test.AbstractDaoTest: de.greenrobot.dao.AbstractDao dao>;

        $r1 = virtualinvoke $r2.<de.greenrobot.dao.AbstractDao: java.lang.String getTablename()>();

        virtualinvoke r0.<de.greenrobot.dao.test.AbstractDaoTest: void logTableDump(java.lang.String)>($r1);

        return;
    }

    public void setIdentityScopeBeforeSetUp(de.greenrobot.dao.identityscope.IdentityScope)
    {
        de.greenrobot.dao.identityscope.IdentityScope $r1;
        de.greenrobot.dao.test.AbstractDaoTest r0;

        r0 := @this: de.greenrobot.dao.test.AbstractDaoTest;

        $r1 := @parameter0: de.greenrobot.dao.identityscope.IdentityScope;

        r0.<de.greenrobot.dao.test.AbstractDaoTest: de.greenrobot.dao.identityscope.IdentityScope identityScopeForDao> = $r1;

        return;
    }

    protected void setUp()
    {
        java.lang.RuntimeException $r7;
        de.greenrobot.dao.test.AbstractDaoTest r0;
        java.lang.Exception $r6;
        android.database.sqlite.SQLiteDatabase $r4;
        de.greenrobot.dao.identityscope.IdentityScope $r1;
        de.greenrobot.dao.AbstractDao $r2;
        de.greenrobot.dao.InternalUnitTestDaoAccess $r3;
        java.lang.Class $r5;

        r0 := @this: de.greenrobot.dao.test.AbstractDaoTest;

        specialinvoke r0.<de.greenrobot.dao.test.DbTest: void setUp()>();

     label1:
        virtualinvoke r0.<de.greenrobot.dao.test.AbstractDaoTest: void setUpTableForDao()>();

     label2:
        $r3 = new de.greenrobot.dao.InternalUnitTestDaoAccess;

     label3:
        $r4 = r0.<de.greenrobot.dao.test.AbstractDaoTest: android.database.sqlite.SQLiteDatabase db>;

        $r5 = r0.<de.greenrobot.dao.test.AbstractDaoTest: java.lang.Class daoClass>;

        $r1 = r0.<de.greenrobot.dao.test.AbstractDaoTest: de.greenrobot.dao.identityscope.IdentityScope identityScopeForDao>;

        specialinvoke $r3.<de.greenrobot.dao.InternalUnitTestDaoAccess: void <init>(android.database.sqlite.SQLiteDatabase,java.lang.Class,de.greenrobot.dao.identityscope.IdentityScope)>($r4, $r5, $r1);

        r0.<de.greenrobot.dao.test.AbstractDaoTest: de.greenrobot.dao.InternalUnitTestDaoAccess daoAccess> = $r3;

        $r3 = r0.<de.greenrobot.dao.test.AbstractDaoTest: de.greenrobot.dao.InternalUnitTestDaoAccess daoAccess>;

        $r2 = virtualinvoke $r3.<de.greenrobot.dao.InternalUnitTestDaoAccess: de.greenrobot.dao.AbstractDao getDao()>();

        r0.<de.greenrobot.dao.test.AbstractDaoTest: de.greenrobot.dao.AbstractDao dao> = $r2;

     label4:
        return;

     label5:
        $r6 := @caughtexception;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Could not prepare DAO Test", $r6);

        throw $r7;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }

    protected void setUpTableForDao()
    {
        java.lang.Throwable $r8;
        java.lang.Object[] $r5;
        java.lang.Class[] $r2;
        de.greenrobot.dao.test.AbstractDaoTest r0;
        android.database.sqlite.SQLiteDatabase $r6;
        java.lang.Boolean $r7;
        java.lang.Class $r1, $r3;
        java.lang.reflect.Method $r4;

        r0 := @this: de.greenrobot.dao.test.AbstractDaoTest;

        $r1 = r0.<de.greenrobot.dao.test.AbstractDaoTest: java.lang.Class daoClass>;

        $r2 = newarray (java.lang.Class)[2];

        $r2[0] = class "Landroid/database/sqlite/SQLiteDatabase;";

        $r3 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r2[1] = $r3;

     label1:
        $r4 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("createTable", $r2);

     label2:
        $r5 = newarray (java.lang.Object)[2];

        $r6 = r0.<de.greenrobot.dao.test.AbstractDaoTest: android.database.sqlite.SQLiteDatabase db>;

        $r5[0] = $r6;

     label3:
        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

     label4:
        $r5[1] = $r7;

     label5:
        virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r5);

     label6:
        return;

     label7:
        $r8 := @caughtexception;

        staticinvoke <de.greenrobot.dao.DaoLog: int i(java.lang.String)>("No createTable method");

        return;

        catch java.lang.NoSuchMethodException from label1 to label2 with label7;
        catch java.lang.NoSuchMethodException from label3 to label4 with label7;
        catch java.lang.NoSuchMethodException from label5 to label6 with label7;
    }
}
