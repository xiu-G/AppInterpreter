public abstract class com.apperhand.common.dto.protocol.BaseResponse extends com.apperhand.common.dto.BaseDTO
{
    private static final long serialVersionUID;
    protected java.lang.String abTest;
    protected java.util.Map parameters;
    protected boolean validResponse;

    public void <init>()
    {
        java.util.HashMap $r1;
        com.apperhand.common.dto.protocol.BaseResponse r0;

        r0 := @this: com.apperhand.common.dto.protocol.BaseResponse;

        specialinvoke r0.<com.apperhand.common.dto.BaseDTO: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<com.apperhand.common.dto.protocol.BaseResponse: java.util.Map parameters> = $r1;

        r0.<com.apperhand.common.dto.protocol.BaseResponse: boolean validResponse> = 1;

        return;
    }

    public java.lang.String getAbTest()
    {
        java.lang.String r1;
        com.apperhand.common.dto.protocol.BaseResponse r0;

        r0 := @this: com.apperhand.common.dto.protocol.BaseResponse;

        r1 = r0.<com.apperhand.common.dto.protocol.BaseResponse: java.lang.String abTest>;

        return r1;
    }

    public java.util.Map getParameters()
    {
        com.apperhand.common.dto.protocol.BaseResponse r0;
        java.util.Map r1;

        r0 := @this: com.apperhand.common.dto.protocol.BaseResponse;

        r1 = r0.<com.apperhand.common.dto.protocol.BaseResponse: java.util.Map parameters>;

        return r1;
    }

    public boolean isValidResponse()
    {
        com.apperhand.common.dto.protocol.BaseResponse r0;
        boolean z0;

        r0 := @this: com.apperhand.common.dto.protocol.BaseResponse;

        z0 = r0.<com.apperhand.common.dto.protocol.BaseResponse: boolean validResponse>;

        return z0;
    }

    public void setAbTest(java.lang.String)
    {
        java.lang.String $r1;
        com.apperhand.common.dto.protocol.BaseResponse r0;

        r0 := @this: com.apperhand.common.dto.protocol.BaseResponse;

        $r1 := @parameter0: java.lang.String;

        r0.<com.apperhand.common.dto.protocol.BaseResponse: java.lang.String abTest> = $r1;

        return;
    }

    public void setParameters(java.util.Map)
    {
        com.apperhand.common.dto.protocol.BaseResponse r0;
        java.util.Map $r1;

        r0 := @this: com.apperhand.common.dto.protocol.BaseResponse;

        $r1 := @parameter0: java.util.Map;

        r0.<com.apperhand.common.dto.protocol.BaseResponse: java.util.Map parameters> = $r1;

        return;
    }

    public void setValidResponse(boolean)
    {
        com.apperhand.common.dto.protocol.BaseResponse r0;
        boolean $z0;

        r0 := @this: com.apperhand.common.dto.protocol.BaseResponse;

        $z0 := @parameter0: boolean;

        r0.<com.apperhand.common.dto.protocol.BaseResponse: boolean validResponse> = $z0;

        return;
    }

    public java.lang.String toString()
    {
        java.util.Map $r2;
        java.lang.StringBuilder $r1;
        java.lang.String $r3;
        com.apperhand.common.dto.protocol.BaseResponse r0;
        boolean $z0;

        r0 := @this: com.apperhand.common.dto.protocol.BaseResponse;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("BaseResponse [parameters=");

        $r2 = r0.<com.apperhand.common.dto.protocol.BaseResponse: java.util.Map parameters>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", abTests=");

        $r3 = r0.<com.apperhand.common.dto.protocol.BaseResponse: java.lang.String abTest>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", validResponse=");

        $z0 = r0.<com.apperhand.common.dto.protocol.BaseResponse: boolean validResponse>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static void <clinit>()
    {
        <com.apperhand.common.dto.protocol.BaseResponse: long serialVersionUID> = -1535279639837531044L;

        return;
    }
}
