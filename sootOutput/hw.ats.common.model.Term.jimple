public class hw.ats.common.model.Term extends hw.ats.common.model.BaseModel implements java.lang.Cloneable
{
    private static final java.lang.String TAG;
    public int id;
    public java.lang.String keyword;
    public java.lang.String keyword_name;

    public void <init>()
    {
        hw.ats.common.model.Term r0;

        r0 := @this: hw.ats.common.model.Term;

        specialinvoke r0.<hw.ats.common.model.BaseModel: void <init>()>();

        r0.<hw.ats.common.model.Term: java.lang.String keyword> = null;

        r0.<hw.ats.common.model.Term: java.lang.String keyword_name> = null;

        return;
    }

    private void bind(android.database.Cursor)
    {
        hw.ats.common.model.Term r0;
        int $i0;
        java.lang.String $r2;
        android.database.Cursor $r1;

        r0 := @this: hw.ats.common.model.Term;

        $r1 := @parameter0: android.database.Cursor;

        $i0 = interfaceinvoke $r1.<android.database.Cursor: int getColumnIndex(java.lang.String)>("id");

        $i0 = interfaceinvoke $r1.<android.database.Cursor: int getInt(int)>($i0);

        r0.<hw.ats.common.model.Term: int id> = $i0;

        $i0 = interfaceinvoke $r1.<android.database.Cursor: int getColumnIndex(java.lang.String)>("keyword");

        $r2 = interfaceinvoke $r1.<android.database.Cursor: java.lang.String getString(int)>($i0);

        r0.<hw.ats.common.model.Term: java.lang.String keyword> = $r2;

        $i0 = interfaceinvoke $r1.<android.database.Cursor: int getColumnIndex(java.lang.String)>("keyword_name");

        $r2 = interfaceinvoke $r1.<android.database.Cursor: java.lang.String getString(int)>($i0);

        r0.<hw.ats.common.model.Term: java.lang.String keyword_name> = $r2;

        return;
    }

    public static void deleteAll(android.database.sqlite.SQLiteDatabase)
    {
        java.lang.Throwable $r3;
        android.database.sqlite.SQLiteDatabase $r0;
        java.lang.String $r1;
        java.lang.Exception $r2;

        $r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

     label1:
        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>("terms", null, null);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

     label4:
        $r1 = virtualinvoke $r2.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("Term", $r1, $r2);

     label5:
        return;

     label6:
        $r3 := @caughtexception;

        throw $r3;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    public static java.util.List list(android.database.sqlite.SQLiteDatabase)
    {
        java.lang.Throwable $r6;
        hw.ats.common.model.Term r2;
        java.lang.Exception $r5, $r7, $r8;
        java.util.ArrayList r1;
        android.database.sqlite.SQLiteDatabase $r0;
        android.database.Cursor r3, $r4;
        boolean $z0;

        $r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        r3 = null;

     label01:
        $r4 = virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])>("SELECT * FROM terms ORDER BY id", null);

     label02:
        r3 = $r4;

     label03:
        $z0 = interfaceinvoke $r4.<android.database.Cursor: boolean moveToFirst()>();

     label04:
        if $z0 != 0 goto label07;

     label05:
        interfaceinvoke $r4.<android.database.Cursor: void close()>();

     label06:
        return r1;

     label07:
        r2 = new hw.ats.common.model.Term;

        specialinvoke r2.<hw.ats.common.model.Term: void <init>()>();

        specialinvoke r2.<hw.ats.common.model.Term: void bind(android.database.Cursor)>($r4);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r2);

        $z0 = interfaceinvoke $r4.<android.database.Cursor: boolean moveToNext()>();

     label08:
        if $z0 != 0 goto label07;

     label09:
        interfaceinvoke $r4.<android.database.Cursor: void close()>();

     label10:
        return r1;

     label11:
        $r5 := @caughtexception;

        return r1;

     label12:
        $r6 := @caughtexception;

     label13:
        interfaceinvoke r3.<android.database.Cursor: void close()>();

     label14:
        throw $r6;

     label15:
        $r7 := @caughtexception;

        return r1;

     label16:
        $r8 := @caughtexception;

        goto label14;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Exception from label05 to label06 with label15;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Exception from label09 to label10 with label11;
        catch java.lang.Exception from label13 to label14 with label16;
    }

    public static hw.ats.common.model.Term load(android.database.sqlite.SQLiteDatabase, int)
    {
        java.lang.Throwable $r6;
        hw.ats.common.model.Term r1;
        java.lang.Exception $r7, $r8, $r9;
        android.database.sqlite.SQLiteDatabase $r0;
        int $i0;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        android.database.Cursor r2, $r5;
        boolean $z0;

        $r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        $i0 := @parameter1: int;

        r2 = null;

     label01:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT * FROM terms WHERE id = ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])>($r4, null);

     label02:
        r2 = $r5;

     label03:
        $z0 = interfaceinvoke $r5.<android.database.Cursor: boolean moveToFirst()>();

     label04:
        if $z0 != 0 goto label07;

     label05:
        interfaceinvoke $r5.<android.database.Cursor: void close()>();

     label06:
        return null;

     label07:
        r1 = new hw.ats.common.model.Term;

        specialinvoke r1.<hw.ats.common.model.Term: void <init>()>();

     label08:
        specialinvoke r1.<hw.ats.common.model.Term: void bind(android.database.Cursor)>($r5);

     label09:
        interfaceinvoke $r5.<android.database.Cursor: void close()>();

     label10:
        return r1;

     label11:
        $r6 := @caughtexception;

     label12:
        interfaceinvoke r2.<android.database.Cursor: void close()>();

     label13:
        throw $r6;

     label14:
        $r7 := @caughtexception;

        goto label06;

     label15:
        $r8 := @caughtexception;

        goto label10;

     label16:
        $r9 := @caughtexception;

        goto label13;

     label17:
        $r6 := @caughtexception;

        goto label12;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Exception from label05 to label06 with label14;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label08 to label09 with label17;
        catch java.lang.Exception from label09 to label10 with label15;
        catch java.lang.Exception from label12 to label13 with label16;
    }

    public hw.ats.common.model.Term clone() throws java.lang.CloneNotSupportedException
    {
        java.lang.Object $r0;
        hw.ats.common.model.Term r1;

        r1 := @this: hw.ats.common.model.Term;

        $r0 = specialinvoke r1.<java.lang.Object: java.lang.Object clone()>();

        r1 = (hw.ats.common.model.Term) $r0;

        return r1;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        hw.ats.common.model.Term r0;

        r0 := @this: hw.ats.common.model.Term;

        r0 = virtualinvoke r0.<hw.ats.common.model.Term: hw.ats.common.model.Term clone()>();

        return r0;
    }

    public void insert(android.database.sqlite.SQLiteDatabase)
    {
        java.lang.Throwable $r6;
        hw.ats.common.model.Term r0;
        java.lang.Integer $r3;
        java.lang.Exception $r5;
        android.database.sqlite.SQLiteDatabase $r1;
        int $i0;
        android.content.ContentValues r2;
        java.lang.String $r4;

        r0 := @this: hw.ats.common.model.Term;

        $r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

     label1:
        r2 = new android.content.ContentValues;

     label2:
        specialinvoke r2.<android.content.ContentValues: void <init>()>();

        $i0 = r0.<hw.ats.common.model.Term: int id>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        virtualinvoke r2.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("id", $r3);

        $r4 = r0.<hw.ats.common.model.Term: java.lang.String keyword>;

        virtualinvoke r2.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("keyword", $r4);

        $r4 = r0.<hw.ats.common.model.Term: java.lang.String keyword_name>;

        virtualinvoke r2.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("keyword_name", $r4);

        virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>("terms", null, r2);

     label3:
        return;

     label4:
        $r5 := @caughtexception;

     label5:
        virtualinvoke $r5.<java.lang.Exception: void printStackTrace()>();

     label6:
        return;

     label7:
        $r6 := @caughtexception;

        throw $r6;

        catch java.lang.Exception from label2 to label3 with label4;
        catch java.lang.Throwable from label1 to label3 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    public java.lang.String toString()
    {
        hw.ats.common.model.Term r0;
        int $i0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        r0 := @this: hw.ats.common.model.Term;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Term [id=");

        $i0 = r0.<hw.ats.common.model.Term: int id>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", keyword=");

        $r2 = r0.<hw.ats.common.model.Term: java.lang.String keyword>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", keyword_name=");

        $r2 = r0.<hw.ats.common.model.Term: java.lang.String keyword_name>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public void update(android.database.sqlite.SQLiteDatabase)
    {
        java.lang.Throwable $r6;
        hw.ats.common.model.Term r0;
        java.lang.Exception $r5;
        android.database.sqlite.SQLiteDatabase $r1;
        int $i0;
        java.lang.StringBuilder $r4;
        android.content.ContentValues r2;
        java.lang.String $r3;

        r0 := @this: hw.ats.common.model.Term;

        $r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

     label1:
        r2 = new android.content.ContentValues;

     label2:
        specialinvoke r2.<android.content.ContentValues: void <init>()>();

        $r3 = r0.<hw.ats.common.model.Term: java.lang.String keyword>;

        virtualinvoke r2.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("keyword", $r3);

        $r3 = r0.<hw.ats.common.model.Term: java.lang.String keyword_name>;

        virtualinvoke r2.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("keyword_name", $r3);

     label3:
        $r4 = new java.lang.StringBuilder;

     label4:
        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("id=");

        $i0 = r0.<hw.ats.common.model.Term: int id>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>("terms", r2, $r3, null);

     label5:
        return;

     label6:
        $r5 := @caughtexception;

     label7:
        virtualinvoke $r5.<java.lang.Exception: void printStackTrace()>();

     label8:
        return;

     label9:
        $r6 := @caughtexception;

        throw $r6;

        catch java.lang.Exception from label2 to label3 with label6;
        catch java.lang.Exception from label4 to label5 with label6;
        catch java.lang.Throwable from label1 to label5 with label9;
        catch java.lang.Throwable from label7 to label8 with label9;
    }

    public static void <clinit>()
    {
        <hw.ats.common.model.Term: java.lang.String TAG> = "Term";

        return;
    }
}
