public class proguard.classfile.editor.InstructionWriter extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.instruction.visitor.InstructionVisitor, proguard.classfile.attribute.visitor.AttributeVisitor
{
    private proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor;
    private int codeLength;

    public void <init>()
    {
        proguard.classfile.editor.InstructionWriter r0;

        r0 := @this: proguard.classfile.editor.InstructionWriter;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        return;
    }

    private void ensureCodeAttributeEditor()
    {
        int $i0;
        proguard.classfile.editor.CodeAttributeEditor $r1;
        proguard.classfile.editor.InstructionWriter r0;

        r0 := @this: proguard.classfile.editor.InstructionWriter;

        $r1 = r0.<proguard.classfile.editor.InstructionWriter: proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor>;

        if $r1 != null goto label1;

        $r1 = new proguard.classfile.editor.CodeAttributeEditor;

        specialinvoke $r1.<proguard.classfile.editor.CodeAttributeEditor: void <init>()>();

        r0.<proguard.classfile.editor.InstructionWriter: proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor> = $r1;

        $r1 = r0.<proguard.classfile.editor.InstructionWriter: proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor>;

        $i0 = r0.<proguard.classfile.editor.InstructionWriter: int codeLength>;

        virtualinvoke $r1.<proguard.classfile.editor.CodeAttributeEditor: void reset(int)>($i0);

     label1:
        return;
    }

    private void insertAfterInstruction(int, proguard.classfile.instruction.Instruction)
    {
        proguard.classfile.instruction.Instruction $r1;
        int $i0;
        proguard.classfile.editor.CodeAttributeEditor $r2;
        proguard.classfile.editor.InstructionWriter r0;

        r0 := @this: proguard.classfile.editor.InstructionWriter;

        $i0 := @parameter0: int;

        $r1 := @parameter1: proguard.classfile.instruction.Instruction;

        specialinvoke r0.<proguard.classfile.editor.InstructionWriter: void ensureCodeAttributeEditor()>();

        $r2 = r0.<proguard.classfile.editor.InstructionWriter: proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor>;

        virtualinvoke $r2.<proguard.classfile.editor.CodeAttributeEditor: void insertAfterInstruction(int,proguard.classfile.instruction.Instruction)>($i0, $r1);

        return;
    }

    private void insertBeforeInstruction(int, proguard.classfile.instruction.Instruction)
    {
        proguard.classfile.instruction.Instruction $r1;
        int $i0;
        proguard.classfile.editor.CodeAttributeEditor $r2;
        proguard.classfile.editor.InstructionWriter r0;

        r0 := @this: proguard.classfile.editor.InstructionWriter;

        $i0 := @parameter0: int;

        $r1 := @parameter1: proguard.classfile.instruction.Instruction;

        specialinvoke r0.<proguard.classfile.editor.InstructionWriter: void ensureCodeAttributeEditor()>();

        $r2 = r0.<proguard.classfile.editor.InstructionWriter: proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor>;

        virtualinvoke $r2.<proguard.classfile.editor.CodeAttributeEditor: void insertBeforeInstruction(int,proguard.classfile.instruction.Instruction)>($i0, $r1);

        return;
    }

    private void replaceInstruction(int, proguard.classfile.instruction.Instruction)
    {
        proguard.classfile.instruction.Instruction $r1;
        int $i0;
        proguard.classfile.editor.CodeAttributeEditor $r2;
        proguard.classfile.editor.InstructionWriter r0;

        r0 := @this: proguard.classfile.editor.InstructionWriter;

        $i0 := @parameter0: int;

        $r1 := @parameter1: proguard.classfile.instruction.Instruction;

        specialinvoke r0.<proguard.classfile.editor.InstructionWriter: void ensureCodeAttributeEditor()>();

        $r2 = r0.<proguard.classfile.editor.InstructionWriter: proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor>;

        virtualinvoke $r2.<proguard.classfile.editor.CodeAttributeEditor: void replaceInstruction(int,proguard.classfile.instruction.Instruction)>($i0, $r1);

        return;
    }

    public void reset(int)
    {
        int $i0;
        proguard.classfile.editor.CodeAttributeEditor $r1;
        proguard.classfile.editor.InstructionWriter r0;

        r0 := @this: proguard.classfile.editor.InstructionWriter;

        $i0 := @parameter0: int;

        r0.<proguard.classfile.editor.InstructionWriter: int codeLength> = $i0;

        $r1 = r0.<proguard.classfile.editor.InstructionWriter: proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor>;

        if $r1 == null goto label1;

        $r1 = r0.<proguard.classfile.editor.InstructionWriter: proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor>;

        virtualinvoke $r1.<proguard.classfile.editor.CodeAttributeEditor: void reset(int)>($i0);

     label1:
        return;
    }

    public void visitAnySwitchInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.SwitchInstruction)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.Method $r2;
        proguard.classfile.editor.InstructionWriter r0;
        proguard.classfile.instruction.SwitchInstruction $r4;

        r0 := @this: proguard.classfile.editor.InstructionWriter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.SwitchInstruction;

        virtualinvoke $r4.<proguard.classfile.instruction.SwitchInstruction: void write(proguard.classfile.attribute.CodeAttribute,int)>($r3, $i0);

        return;
    }

    public void visitBranchInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.BranchInstruction)
    {
        java.lang.Throwable $r6;
        proguard.classfile.instruction.BranchInstruction $r4, $r7, $r8;
        proguard.classfile.editor.InstructionWriter r0;
        byte $b2;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.instruction.Instruction $r5;
        int $i0, $i1;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.classfile.editor.InstructionWriter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.BranchInstruction;

     label1:
        virtualinvoke $r4.<proguard.classfile.instruction.BranchInstruction: void write(proguard.classfile.attribute.CodeAttribute,int)>($r3, $i0);

     label2:
        return;

     label3:
        $r6 := @caughtexception;

        $r7 = new proguard.classfile.instruction.BranchInstruction;

        $r5 = $r7;

        $i1 = $r4.<proguard.classfile.instruction.BranchInstruction: int branchOffset>;

        specialinvoke $r7.<proguard.classfile.instruction.BranchInstruction: void <init>(byte,int)>(-56, $i1);

        $b2 = $r4.<proguard.classfile.instruction.BranchInstruction: byte opcode>;

        $i1 = (int) $b2;

        lookupswitch($i1)
        {
            case -103: goto label6;
            case -102: goto label6;
            case -101: goto label6;
            case -100: goto label6;
            case -99: goto label6;
            case -98: goto label6;
            case -97: goto label6;
            case -96: goto label6;
            case -95: goto label6;
            case -94: goto label6;
            case -93: goto label6;
            case -92: goto label6;
            case -91: goto label6;
            case -90: goto label6;
            case -58: goto label7;
            case -57: goto label7;
            default: goto label4;
        };

     label4:
        $r8 = new proguard.classfile.instruction.BranchInstruction;

        $b2 = $r4.<proguard.classfile.instruction.BranchInstruction: byte opcode>;

        $i1 = $r4.<proguard.classfile.instruction.BranchInstruction: int branchOffset>;

        specialinvoke $r8.<proguard.classfile.instruction.BranchInstruction: void <init>(byte,int)>($b2, $i1);

        $r5 = virtualinvoke $r8.<proguard.classfile.instruction.BranchInstruction: proguard.classfile.instruction.Instruction shrink()>();

     label5:
        specialinvoke r0.<proguard.classfile.editor.InstructionWriter: void replaceInstruction(int,proguard.classfile.instruction.Instruction)>($i0, $r5);

        $r4.<proguard.classfile.instruction.BranchInstruction: int branchOffset> = 0;

        virtualinvoke $r4.<proguard.classfile.instruction.BranchInstruction: void write(proguard.classfile.attribute.CodeAttribute,int)>($r3, $i0);

        return;

     label6:
        $r8 = new proguard.classfile.instruction.BranchInstruction;

        $b2 = $r4.<proguard.classfile.instruction.BranchInstruction: byte opcode>;

        $i1 = (int) $b2;

        $i1 = $i1 + 1;

        $i1 = $i1 ^ 1;

        $i1 = $i1 - 1;

        $b2 = (byte) $i1;

        specialinvoke $r8.<proguard.classfile.instruction.BranchInstruction: void <init>(byte,int)>($b2, 8);

        specialinvoke r0.<proguard.classfile.editor.InstructionWriter: void insertBeforeInstruction(int,proguard.classfile.instruction.Instruction)>($i0, $r8);

        goto label5;

     label7:
        $r8 = new proguard.classfile.instruction.BranchInstruction;

        $b2 = $r4.<proguard.classfile.instruction.BranchInstruction: byte opcode>;

        $b2 = $b2 ^ 1;

        specialinvoke $r8.<proguard.classfile.instruction.BranchInstruction: void <init>(byte,int)>($b2, 8);

        specialinvoke r0.<proguard.classfile.editor.InstructionWriter: void insertBeforeInstruction(int,proguard.classfile.instruction.Instruction)>($i0, $r8);

        goto label5;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public void visitCodeAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.editor.CodeAttributeEditor $r4;
        proguard.classfile.Method $r2;
        proguard.classfile.editor.InstructionWriter r0;

        r0 := @this: proguard.classfile.editor.InstructionWriter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 = r0.<proguard.classfile.editor.InstructionWriter: proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor>;

        if $r4 == null goto label1;

        $r4 = r0.<proguard.classfile.editor.InstructionWriter: proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor>;

        virtualinvoke $r4.<proguard.classfile.editor.CodeAttributeEditor: void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute)>($r1, $r2, $r3);

        r0.<proguard.classfile.editor.InstructionWriter: proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor> = null;

     label1:
        return;
    }

    public void visitConstantInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.ConstantInstruction)
    {
        java.lang.Throwable $r6;
        proguard.classfile.editor.InstructionWriter r0;
        byte $b1;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.instruction.Instruction $r5;
        int $i0, $i2, $i3;
        proguard.classfile.instruction.ConstantInstruction $r4, $r7;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.classfile.editor.InstructionWriter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.ConstantInstruction;

     label1:
        virtualinvoke $r4.<proguard.classfile.instruction.ConstantInstruction: void write(proguard.classfile.attribute.CodeAttribute,int)>($r3, $i0);

     label2:
        return;

     label3:
        $r6 := @caughtexception;

        $r7 = new proguard.classfile.instruction.ConstantInstruction;

        $b1 = $r4.<proguard.classfile.instruction.ConstantInstruction: byte opcode>;

        $i2 = $r4.<proguard.classfile.instruction.ConstantInstruction: int constantIndex>;

        $i3 = $r4.<proguard.classfile.instruction.ConstantInstruction: int constant>;

        specialinvoke $r7.<proguard.classfile.instruction.ConstantInstruction: void <init>(byte,int,int)>($b1, $i2, $i3);

        $r5 = virtualinvoke $r7.<proguard.classfile.instruction.ConstantInstruction: proguard.classfile.instruction.Instruction shrink()>();

        specialinvoke r0.<proguard.classfile.editor.InstructionWriter: void replaceInstruction(int,proguard.classfile.instruction.Instruction)>($i0, $r5);

        $r4.<proguard.classfile.instruction.ConstantInstruction: int constantIndex> = 0;

        $r4.<proguard.classfile.instruction.ConstantInstruction: int constant> = 0;

        virtualinvoke $r4.<proguard.classfile.instruction.ConstantInstruction: void write(proguard.classfile.attribute.CodeAttribute,int)>($r3, $i0);

        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public void visitSimpleInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.SimpleInstruction)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.Method $r2;
        proguard.classfile.instruction.SimpleInstruction $r4;
        proguard.classfile.editor.InstructionWriter r0;

        r0 := @this: proguard.classfile.editor.InstructionWriter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.SimpleInstruction;

        virtualinvoke $r4.<proguard.classfile.instruction.SimpleInstruction: void write(proguard.classfile.attribute.CodeAttribute,int)>($r3, $i0);

        return;
    }

    public void visitVariableInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.VariableInstruction)
    {
        java.lang.Throwable $r6;
        proguard.classfile.instruction.VariableInstruction $r4, $r7;
        proguard.classfile.editor.InstructionWriter r0;
        byte $b1;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.instruction.Instruction $r5;
        int $i0, $i2, $i3;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.classfile.editor.InstructionWriter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.VariableInstruction;

     label1:
        virtualinvoke $r4.<proguard.classfile.instruction.VariableInstruction: void write(proguard.classfile.attribute.CodeAttribute,int)>($r3, $i0);

     label2:
        return;

     label3:
        $r6 := @caughtexception;

        $r7 = new proguard.classfile.instruction.VariableInstruction;

        $b1 = $r4.<proguard.classfile.instruction.VariableInstruction: byte opcode>;

        $i2 = $r4.<proguard.classfile.instruction.VariableInstruction: int variableIndex>;

        $i3 = $r4.<proguard.classfile.instruction.VariableInstruction: int constant>;

        specialinvoke $r7.<proguard.classfile.instruction.VariableInstruction: void <init>(byte,int,int)>($b1, $i2, $i3);

        $r5 = virtualinvoke $r7.<proguard.classfile.instruction.VariableInstruction: proguard.classfile.instruction.Instruction shrink()>();

        specialinvoke r0.<proguard.classfile.editor.InstructionWriter: void replaceInstruction(int,proguard.classfile.instruction.Instruction)>($i0, $r5);

        $r4.<proguard.classfile.instruction.VariableInstruction: int variableIndex> = 0;

        $r4.<proguard.classfile.instruction.VariableInstruction: int constant> = 0;

        virtualinvoke $r4.<proguard.classfile.instruction.VariableInstruction: void write(proguard.classfile.attribute.CodeAttribute,int)>($r3, $i0);

        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }
}
