public class cn.trinea.android.common.service.impl.PreloadDataCache extends cn.trinea.android.common.service.impl.SimpleCache
{
    public static final int DEFAULT_BACKWARD_CACHE_NUMBER;
    public static final int DEFAULT_FORWARD_CACHE_NUMBER;
    public static final int DEFAULT_THREAD_POOL_SIZE;
    public static final int NETWORK_MOBILE;
    public static final int NETWORK_WIFI;
    private static final long serialVersionUID;
    private int allowedNetworkTypes;
    private int backwardCacheNumber;
    private transient android.net.ConnectivityManager connectivityManager;
    private android.content.Context context;
    private int forwardCacheNumber;
    private transient java.util.Map gettingDataThreadMap;
    private boolean isCheckNetwork;
    protected cn.trinea.android.common.service.impl.PreloadDataCache$OnGetDataListener onGetDataListener;
    private java.util.concurrent.ExecutorService threadPool;

    static void <clinit>()
    {
        int $i0;

        <cn.trinea.android.common.service.impl.PreloadDataCache: long serialVersionUID> = 1L;

        <cn.trinea.android.common.service.impl.PreloadDataCache: int NETWORK_WIFI> = 2;

        <cn.trinea.android.common.service.impl.PreloadDataCache: int NETWORK_MOBILE> = 1;

        <cn.trinea.android.common.service.impl.PreloadDataCache: int DEFAULT_FORWARD_CACHE_NUMBER> = 3;

        <cn.trinea.android.common.service.impl.PreloadDataCache: int DEFAULT_BACKWARD_CACHE_NUMBER> = 1;

        $i0 = staticinvoke <cn.trinea.android.common.util.SystemUtils: int getDefaultThreadPoolSize(int)>(8);

        <cn.trinea.android.common.service.impl.PreloadDataCache: int DEFAULT_THREAD_POOL_SIZE> = $i0;

        return;
    }

    public void <init>()
    {
        int $i0;
        cn.trinea.android.common.service.impl.PreloadDataCache r0;

        r0 := @this: cn.trinea.android.common.service.impl.PreloadDataCache;

        $i0 = <cn.trinea.android.common.service.impl.PreloadDataCache: int DEFAULT_THREAD_POOL_SIZE>;

        specialinvoke r0.<cn.trinea.android.common.service.impl.PreloadDataCache: void <init>(int,int)>(64, $i0);

        return;
    }

    public void <init>(int)
    {
        int $i0, $i1;
        cn.trinea.android.common.service.impl.PreloadDataCache r0;

        r0 := @this: cn.trinea.android.common.service.impl.PreloadDataCache;

        $i0 := @parameter0: int;

        $i1 = <cn.trinea.android.common.service.impl.PreloadDataCache: int DEFAULT_THREAD_POOL_SIZE>;

        specialinvoke r0.<cn.trinea.android.common.service.impl.PreloadDataCache: void <init>(int,int)>($i0, $i1);

        return;
    }

    public void <init>(int, int)
    {
        cn.trinea.android.common.service.impl.PreloadDataCache r0;
        int $i0, $i1;
        java.util.HashMap $r2;
        java.lang.IllegalArgumentException $r3;
        java.util.concurrent.ExecutorService $r1;

        r0 := @this: cn.trinea.android.common.service.impl.PreloadDataCache;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        specialinvoke r0.<cn.trinea.android.common.service.impl.SimpleCache: void <init>(int)>($i0);

        r0.<cn.trinea.android.common.service.impl.PreloadDataCache: int forwardCacheNumber> = 3;

        r0.<cn.trinea.android.common.service.impl.PreloadDataCache: int backwardCacheNumber> = 1;

        r0.<cn.trinea.android.common.service.impl.PreloadDataCache: boolean isCheckNetwork> = 1;

        $i0 = -1;

        r0.<cn.trinea.android.common.service.impl.PreloadDataCache: int allowedNetworkTypes> = $i0;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<cn.trinea.android.common.service.impl.PreloadDataCache: java.util.Map gettingDataThreadMap> = $r2;

        if $i1 > 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The threadPoolSize of cache must be greater than 0.");

        throw $r3;

     label1:
        $r1 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int)>($i1);

        r0.<cn.trinea.android.common.service.impl.PreloadDataCache: java.util.concurrent.ExecutorService threadPool> = $r1;

        return;
    }

    static java.util.Map access$1(cn.trinea.android.common.service.impl.PreloadDataCache)
    {
        cn.trinea.android.common.service.impl.PreloadDataCache $r0;
        java.util.Map r1;

        $r0 := @parameter0: cn.trinea.android.common.service.impl.PreloadDataCache;

        r1 = $r0.<cn.trinea.android.common.service.impl.PreloadDataCache: java.util.Map gettingDataThreadMap>;

        return r1;
    }

    private cn.trinea.android.common.service.impl.PreloadDataCache$GetDataThread gettingData(java.lang.Object)
    {
        java.lang.Throwable $r6;
        cn.trinea.android.common.service.impl.PreloadDataCache r0;
        cn.trinea.android.common.service.impl.PreloadDataCache$OnGetDataListener $r4;
        java.util.Map $r3;
        java.lang.Object $r1;
        cn.trinea.android.common.service.impl.PreloadDataCache$GetDataThread $r2;
        java.util.concurrent.ExecutorService $r5;
        boolean $z0;

        r0 := @this: cn.trinea.android.common.service.impl.PreloadDataCache;

        $r1 := @parameter0: java.lang.Object;

        entermonitor r0;

     label1:
        $z0 = virtualinvoke r0.<cn.trinea.android.common.service.impl.PreloadDataCache: boolean containsKey(java.lang.Object)>($r1);

        if $z0 != 0 goto label3;

        $z0 = r0.<cn.trinea.android.common.service.impl.PreloadDataCache: boolean isCheckNetwork>;

        if $z0 == 0 goto label5;

        $z0 = virtualinvoke r0.<cn.trinea.android.common.service.impl.PreloadDataCache: boolean checkIsNetworkTypeAllowed()>();

     label2:
        if $z0 != 0 goto label5;

     label3:
        $r2 = null;

     label4:
        exitmonitor r0;

        return $r2;

     label5:
        $z0 = virtualinvoke r0.<cn.trinea.android.common.service.impl.PreloadDataCache: boolean isExistGettingDataThread(java.lang.Object)>($r1);

        if $z0 == 0 goto label6;

        $r3 = r0.<cn.trinea.android.common.service.impl.PreloadDataCache: java.util.Map gettingDataThreadMap>;

        $r1 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r2 = (cn.trinea.android.common.service.impl.PreloadDataCache$GetDataThread) $r1;

        goto label4;

     label6:
        $r2 = new cn.trinea.android.common.service.impl.PreloadDataCache$GetDataThread;

        $r4 = r0.<cn.trinea.android.common.service.impl.PreloadDataCache: cn.trinea.android.common.service.impl.PreloadDataCache$OnGetDataListener onGetDataListener>;

        specialinvoke $r2.<cn.trinea.android.common.service.impl.PreloadDataCache$GetDataThread: void <init>(cn.trinea.android.common.service.impl.PreloadDataCache,java.lang.Object,cn.trinea.android.common.service.impl.PreloadDataCache$OnGetDataListener)>(r0, $r1, $r4);

        $r3 = r0.<cn.trinea.android.common.service.impl.PreloadDataCache: java.util.Map gettingDataThreadMap>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        $r5 = r0.<cn.trinea.android.common.service.impl.PreloadDataCache: java.util.concurrent.ExecutorService threadPool>;

        interfaceinvoke $r5.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>($r2);

     label7:
        goto label4;

     label8:
        $r6 := @caughtexception;

        exitmonitor r0;

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label5 to label7 with label8;
    }

    public static cn.trinea.android.common.service.impl.PreloadDataCache loadCache(java.lang.String)
    {
        cn.trinea.android.common.service.impl.PreloadDataCache $r2;
        java.lang.Object $r1;
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <cn.trinea.android.common.util.SerializeUtils: java.lang.Object deserialization(java.lang.String)>($r0);

        $r2 = (cn.trinea.android.common.service.impl.PreloadDataCache) $r1;

        return $r2;
    }

    public static volatile cn.trinea.android.common.service.impl.SimpleCache loadCache(java.lang.String)
    {
        cn.trinea.android.common.service.impl.PreloadDataCache $r1;
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <cn.trinea.android.common.service.impl.PreloadDataCache: cn.trinea.android.common.service.impl.PreloadDataCache loadCache(java.lang.String)>($r0);

        return $r1;
    }

    private int translateNetworkTypeToApiFlag(int)
    {
        int $i0;
        cn.trinea.android.common.service.impl.PreloadDataCache r0;

        r0 := @this: cn.trinea.android.common.service.impl.PreloadDataCache;

        $i0 := @parameter0: int;

        lookupswitch($i0)
        {
            case 0: goto label2;
            case 1: goto label3;
            default: goto label1;
        };

     label1:
        return 0;

     label2:
        return 1;

     label3:
        return 2;
    }

    public boolean checkIsNetworkTypeAllowed()
    {
        android.net.ConnectivityManager $r1;
        cn.trinea.android.common.service.impl.PreloadDataCache r0;
        android.content.Context $r2;
        int $i0, $i1;
        android.net.NetworkInfo $r4;
        java.lang.Object $r3;

        r0 := @this: cn.trinea.android.common.service.impl.PreloadDataCache;

        $r1 = r0.<cn.trinea.android.common.service.impl.PreloadDataCache: android.net.ConnectivityManager connectivityManager>;

        if $r1 != null goto label1;

        $r2 = r0.<cn.trinea.android.common.service.impl.PreloadDataCache: android.content.Context context>;

        if $r2 == null goto label1;

        $r2 = r0.<cn.trinea.android.common.service.impl.PreloadDataCache: android.content.Context context>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("connectivity");

        $r1 = (android.net.ConnectivityManager) $r3;

        r0.<cn.trinea.android.common.service.impl.PreloadDataCache: android.net.ConnectivityManager connectivityManager> = $r1;

     label1:
        $r1 = r0.<cn.trinea.android.common.service.impl.PreloadDataCache: android.net.ConnectivityManager connectivityManager>;

        if $r1 != null goto label2;

        return 1;

     label2:
        $r1 = r0.<cn.trinea.android.common.service.impl.PreloadDataCache: android.net.ConnectivityManager connectivityManager>;

        $r4 = virtualinvoke $r1.<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>();

        if $r4 == null goto label4;

        $i0 = r0.<cn.trinea.android.common.service.impl.PreloadDataCache: int allowedNetworkTypes>;

        if $i0 == -1 goto label3;

        $i0 = virtualinvoke $r4.<android.net.NetworkInfo: int getType()>();

        $i0 = specialinvoke r0.<cn.trinea.android.common.service.impl.PreloadDataCache: int translateNetworkTypeToApiFlag(int)>($i0);

        $i1 = r0.<cn.trinea.android.common.service.impl.PreloadDataCache: int allowedNetworkTypes>;

        $i0 = $i0 & $i1;

        if $i0 == 0 goto label4;

     label3:
        return 1;

     label4:
        return 0;
    }

    public cn.trinea.android.common.entity.CacheObject get(java.lang.Object)
    {
        java.lang.Throwable $r7;
        cn.trinea.android.common.service.impl.PreloadDataCache r0;
        cn.trinea.android.common.service.impl.PreloadDataCache$OnGetDataListener $r3;
        java.util.concurrent.CountDownLatch $r5;
        java.util.concurrent.atomic.AtomicLong $r6;
        java.lang.InterruptedException $r8;
        java.lang.Object $r1;
        cn.trinea.android.common.entity.CacheObject $r2;
        cn.trinea.android.common.service.impl.PreloadDataCache$GetDataThread $r4;

        r0 := @this: cn.trinea.android.common.service.impl.PreloadDataCache;

        $r1 := @parameter0: java.lang.Object;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = specialinvoke r0.<cn.trinea.android.common.service.impl.SimpleCache: cn.trinea.android.common.entity.CacheObject get(java.lang.Object)>($r1);

        if $r2 != null goto label6;

        $r3 = r0.<cn.trinea.android.common.service.impl.PreloadDataCache: cn.trinea.android.common.service.impl.PreloadDataCache$OnGetDataListener onGetDataListener>;

        if $r3 == null goto label6;

        $r4 = specialinvoke r0.<cn.trinea.android.common.service.impl.PreloadDataCache: cn.trinea.android.common.service.impl.PreloadDataCache$GetDataThread gettingData(java.lang.Object)>($r1);

        if $r4 == null goto label3;

        $r5 = $r4.<cn.trinea.android.common.service.impl.PreloadDataCache$GetDataThread: java.util.concurrent.CountDownLatch finishGetDataLock>;

     label2:
        virtualinvoke $r5.<java.util.concurrent.CountDownLatch: void await()>();

     label3:
        $r2 = specialinvoke r0.<cn.trinea.android.common.service.impl.SimpleCache: cn.trinea.android.common.entity.CacheObject get(java.lang.Object)>($r1);

        if $r2 == null goto label5;

        $r6 = r0.<cn.trinea.android.common.service.impl.PreloadDataCache: java.util.concurrent.atomic.AtomicLong hitCount>;

        virtualinvoke $r6.<java.util.concurrent.atomic.AtomicLong: long decrementAndGet()>();

        return $r2;

     label4:
        $r7 := @caughtexception;

        $r8 = (java.lang.InterruptedException) $r7;

        virtualinvoke $r8.<java.lang.InterruptedException: void printStackTrace()>();

        goto label3;

     label5:
        $r6 = r0.<cn.trinea.android.common.service.impl.PreloadDataCache: java.util.concurrent.atomic.AtomicLong missCount>;

        virtualinvoke $r6.<java.util.concurrent.atomic.AtomicLong: long decrementAndGet()>();

     label6:
        return $r2;

        catch java.lang.InterruptedException from label2 to label3 with label4;
    }

    public cn.trinea.android.common.entity.CacheObject get(java.lang.Object, java.util.List)
    {
        cn.trinea.android.common.service.impl.PreloadDataCache r0;
        java.util.List $r2;
        int $i0;
        java.lang.Object $r1;
        cn.trinea.android.common.entity.CacheObject $r3;
        boolean $z0;

        r0 := @this: cn.trinea.android.common.service.impl.PreloadDataCache;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.util.List;

        if $r1 != null goto label1;

        return null;

     label1:
        $z0 = staticinvoke <cn.trinea.android.common.util.ListUtils: boolean isEmpty(java.util.List)>($r2);

        if $z0 != 0 goto label2;

        $i0 = r0.<cn.trinea.android.common.service.impl.PreloadDataCache: int forwardCacheNumber>;

        virtualinvoke r0.<cn.trinea.android.common.service.impl.PreloadDataCache: int preloadDataForward(java.lang.Object,java.util.List,int)>($r1, $r2, $i0);

        $i0 = r0.<cn.trinea.android.common.service.impl.PreloadDataCache: int backwardCacheNumber>;

        virtualinvoke r0.<cn.trinea.android.common.service.impl.PreloadDataCache: int preloadDataBackward(java.lang.Object,java.util.List,int)>($r1, $r2, $i0);

     label2:
        $r3 = virtualinvoke r0.<cn.trinea.android.common.service.impl.PreloadDataCache: cn.trinea.android.common.entity.CacheObject get(java.lang.Object)>($r1);

        return $r3;
    }

    public int getAllowedNetworkTypes()
    {
        int i0;
        cn.trinea.android.common.service.impl.PreloadDataCache r0;

        r0 := @this: cn.trinea.android.common.service.impl.PreloadDataCache;

        i0 = r0.<cn.trinea.android.common.service.impl.PreloadDataCache: int allowedNetworkTypes>;

        return i0;
    }

    public int getBackwardCacheNumber()
    {
        int i0;
        cn.trinea.android.common.service.impl.PreloadDataCache r0;

        r0 := @this: cn.trinea.android.common.service.impl.PreloadDataCache;

        i0 = r0.<cn.trinea.android.common.service.impl.PreloadDataCache: int backwardCacheNumber>;

        return i0;
    }

    public android.content.Context getContext()
    {
        cn.trinea.android.common.service.impl.PreloadDataCache r0;
        android.content.Context r1;

        r0 := @this: cn.trinea.android.common.service.impl.PreloadDataCache;

        r1 = r0.<cn.trinea.android.common.service.impl.PreloadDataCache: android.content.Context context>;

        return r1;
    }

    public int getForwardCacheNumber()
    {
        int i0;
        cn.trinea.android.common.service.impl.PreloadDataCache r0;

        r0 := @this: cn.trinea.android.common.service.impl.PreloadDataCache;

        i0 = r0.<cn.trinea.android.common.service.impl.PreloadDataCache: int forwardCacheNumber>;

        return i0;
    }

    cn.trinea.android.common.entity.CacheObject getFromCache(java.lang.Object)
    {
        cn.trinea.android.common.service.impl.PreloadDataCache r0;
        java.lang.Object $r1;
        cn.trinea.android.common.entity.CacheObject $r2;

        r0 := @this: cn.trinea.android.common.service.impl.PreloadDataCache;

        $r1 := @parameter0: java.lang.Object;

        $r2 = specialinvoke r0.<cn.trinea.android.common.service.impl.SimpleCache: cn.trinea.android.common.entity.CacheObject get(java.lang.Object)>($r1);

        return $r2;
    }

    cn.trinea.android.common.entity.CacheObject getFromCache(java.lang.Object, java.util.List)
    {
        cn.trinea.android.common.service.impl.PreloadDataCache r0;
        java.util.List $r2;
        int $i0;
        java.lang.Object $r1;
        cn.trinea.android.common.entity.CacheObject $r3;
        boolean $z0;

        r0 := @this: cn.trinea.android.common.service.impl.PreloadDataCache;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.util.List;

        if $r1 != null goto label1;

        return null;

     label1:
        $z0 = staticinvoke <cn.trinea.android.common.util.ListUtils: boolean isEmpty(java.util.List)>($r2);

        if $z0 != 0 goto label2;

        $i0 = r0.<cn.trinea.android.common.service.impl.PreloadDataCache: int forwardCacheNumber>;

        virtualinvoke r0.<cn.trinea.android.common.service.impl.PreloadDataCache: int preloadDataForward(java.lang.Object,java.util.List,int)>($r1, $r2, $i0);

        $i0 = r0.<cn.trinea.android.common.service.impl.PreloadDataCache: int backwardCacheNumber>;

        virtualinvoke r0.<cn.trinea.android.common.service.impl.PreloadDataCache: int preloadDataBackward(java.lang.Object,java.util.List,int)>($r1, $r2, $i0);

     label2:
        $r3 = virtualinvoke r0.<cn.trinea.android.common.service.impl.PreloadDataCache: cn.trinea.android.common.entity.CacheObject getFromCache(java.lang.Object)>($r1);

        return $r3;
    }

    public cn.trinea.android.common.service.impl.PreloadDataCache$OnGetDataListener getOnGetDataListener()
    {
        cn.trinea.android.common.service.impl.PreloadDataCache r0;
        cn.trinea.android.common.service.impl.PreloadDataCache$OnGetDataListener r1;

        r0 := @this: cn.trinea.android.common.service.impl.PreloadDataCache;

        r1 = r0.<cn.trinea.android.common.service.impl.PreloadDataCache: cn.trinea.android.common.service.impl.PreloadDataCache$OnGetDataListener onGetDataListener>;

        return r1;
    }

    public boolean isCheckNetwork()
    {
        cn.trinea.android.common.service.impl.PreloadDataCache r0;
        boolean z0;

        r0 := @this: cn.trinea.android.common.service.impl.PreloadDataCache;

        z0 = r0.<cn.trinea.android.common.service.impl.PreloadDataCache: boolean isCheckNetwork>;

        return z0;
    }

    public boolean isExistGettingDataThread(java.lang.Object)
    {
        java.lang.Throwable $r3;
        cn.trinea.android.common.service.impl.PreloadDataCache r0;
        java.util.Map $r2;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: cn.trinea.android.common.service.impl.PreloadDataCache;

        $r1 := @parameter0: java.lang.Object;

        entermonitor r0;

     label1:
        $r2 = r0.<cn.trinea.android.common.service.impl.PreloadDataCache: java.util.Map gettingDataThreadMap>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

     label2:
        exitmonitor r0;

        return $z0;

     label3:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    protected int preloadDataBackward(java.lang.Object, java.util.List, int)
    {
        cn.trinea.android.common.service.impl.PreloadDataCache r0;
        cn.trinea.android.common.service.impl.PreloadDataCache$OnGetDataListener $r3;
        java.util.List $r2;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r1, $r4;
        cn.trinea.android.common.service.impl.PreloadDataCache$GetDataThread $r5;
        boolean $z0, $z1;

        r0 := @this: cn.trinea.android.common.service.impl.PreloadDataCache;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.util.List;

        $i0 := @parameter2: int;

        $i1 = 0;

        if $r1 == null goto label5;

        $z0 = staticinvoke <cn.trinea.android.common.util.ListUtils: boolean isEmpty(java.util.List)>($r2);

        if $z0 != 0 goto label5;

        $r3 = r0.<cn.trinea.android.common.service.impl.PreloadDataCache: cn.trinea.android.common.service.impl.PreloadDataCache$OnGetDataListener onGetDataListener>;

        if $r3 == null goto label5;

        $i2 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i2 = $i2 + -1;

        $i3 = 0;

        $z0 = 0;

     label1:
        if $i2 < 0 goto label6;

        if $i3 <= $i0 goto label2;

        return $i1;

     label2:
        $r4 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i2);

        $z1 = staticinvoke <cn.trinea.android.common.util.ObjectUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($r4, $r1);

        if $z1 == 0 goto label4;

        $z0 = 1;

     label3:
        $i2 = $i2 + -1;

        goto label1;

     label4:
        if $r4 == null goto label3;

        if $z0 == 0 goto label3;

        $i3 = $i3 + 1;

        $r5 = specialinvoke r0.<cn.trinea.android.common.service.impl.PreloadDataCache: cn.trinea.android.common.service.impl.PreloadDataCache$GetDataThread gettingData(java.lang.Object)>($r4);

        if $r5 == null goto label3;

        $i1 = $i1 + 1;

        goto label3;

     label5:
        return 0;

     label6:
        return $i1;
    }

    protected int preloadDataForward(java.lang.Object, java.util.List, int)
    {
        cn.trinea.android.common.service.impl.PreloadDataCache r0;
        cn.trinea.android.common.service.impl.PreloadDataCache$OnGetDataListener $r3;
        java.util.List $r2;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Object $r1, $r4;
        cn.trinea.android.common.service.impl.PreloadDataCache$GetDataThread $r5;
        boolean $z0, $z1;

        r0 := @this: cn.trinea.android.common.service.impl.PreloadDataCache;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.util.List;

        $i0 := @parameter2: int;

        $i1 = 0;

        if $r1 == null goto label6;

        $z0 = staticinvoke <cn.trinea.android.common.util.ListUtils: boolean isEmpty(java.util.List)>($r2);

        if $z0 != 0 goto label6;

        $r3 = r0.<cn.trinea.android.common.service.impl.PreloadDataCache: cn.trinea.android.common.service.impl.PreloadDataCache$OnGetDataListener onGetDataListener>;

        if $r3 == null goto label6;

        $z0 = 0;

        $i2 = 0;

        $i3 = 0;

     label1:
        $i4 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i1 >= $i4 goto label2;

        if $i2 <= $i0 goto label3;

     label2:
        return $i3;

     label3:
        $r4 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i1);

        $z1 = staticinvoke <cn.trinea.android.common.util.ObjectUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($r4, $r1);

        if $z1 == 0 goto label5;

        $z0 = 1;

     label4:
        $i1 = $i1 + 1;

        goto label1;

     label5:
        if $r4 == null goto label4;

        if $z0 == 0 goto label4;

        $i2 = $i2 + 1;

        $r5 = specialinvoke r0.<cn.trinea.android.common.service.impl.PreloadDataCache: cn.trinea.android.common.service.impl.PreloadDataCache$GetDataThread gettingData(java.lang.Object)>($r4);

        if $r5 == null goto label4;

        $i3 = $i3 + 1;

        goto label4;

     label6:
        return 0;
    }

    public void setAllowedNetworkTypes(int)
    {
        int $i0;
        cn.trinea.android.common.service.impl.PreloadDataCache r0;

        r0 := @this: cn.trinea.android.common.service.impl.PreloadDataCache;

        $i0 := @parameter0: int;

        r0.<cn.trinea.android.common.service.impl.PreloadDataCache: int allowedNetworkTypes> = $i0;

        return;
    }

    public void setBackwardCacheNumber(int)
    {
        int $i0;
        cn.trinea.android.common.service.impl.PreloadDataCache r0;

        r0 := @this: cn.trinea.android.common.service.impl.PreloadDataCache;

        $i0 := @parameter0: int;

        r0.<cn.trinea.android.common.service.impl.PreloadDataCache: int backwardCacheNumber> = $i0;

        return;
    }

    public void setCheckNetwork(boolean)
    {
        cn.trinea.android.common.service.impl.PreloadDataCache r0;
        boolean $z0;

        r0 := @this: cn.trinea.android.common.service.impl.PreloadDataCache;

        $z0 := @parameter0: boolean;

        r0.<cn.trinea.android.common.service.impl.PreloadDataCache: boolean isCheckNetwork> = $z0;

        return;
    }

    public void setContext(android.content.Context)
    {
        cn.trinea.android.common.service.impl.PreloadDataCache r0;
        android.content.Context $r1;

        r0 := @this: cn.trinea.android.common.service.impl.PreloadDataCache;

        $r1 := @parameter0: android.content.Context;

        r0.<cn.trinea.android.common.service.impl.PreloadDataCache: android.content.Context context> = $r1;

        return;
    }

    public void setForwardCacheNumber(int)
    {
        int $i0;
        cn.trinea.android.common.service.impl.PreloadDataCache r0;

        r0 := @this: cn.trinea.android.common.service.impl.PreloadDataCache;

        $i0 := @parameter0: int;

        r0.<cn.trinea.android.common.service.impl.PreloadDataCache: int forwardCacheNumber> = $i0;

        return;
    }

    public void setOnGetDataListener(cn.trinea.android.common.service.impl.PreloadDataCache$OnGetDataListener)
    {
        cn.trinea.android.common.service.impl.PreloadDataCache r0;
        cn.trinea.android.common.service.impl.PreloadDataCache$OnGetDataListener $r1;

        r0 := @this: cn.trinea.android.common.service.impl.PreloadDataCache;

        $r1 := @parameter0: cn.trinea.android.common.service.impl.PreloadDataCache$OnGetDataListener;

        r0.<cn.trinea.android.common.service.impl.PreloadDataCache: cn.trinea.android.common.service.impl.PreloadDataCache$OnGetDataListener onGetDataListener> = $r1;

        return;
    }

    protected void shutdown()
    {
        cn.trinea.android.common.service.impl.PreloadDataCache r0;
        java.util.concurrent.ExecutorService $r1;

        r0 := @this: cn.trinea.android.common.service.impl.PreloadDataCache;

        $r1 = r0.<cn.trinea.android.common.service.impl.PreloadDataCache: java.util.concurrent.ExecutorService threadPool>;

        interfaceinvoke $r1.<java.util.concurrent.ExecutorService: void shutdown()>();

        return;
    }

    public java.util.List shutdownNow()
    {
        cn.trinea.android.common.service.impl.PreloadDataCache r0;
        java.util.List $r1;
        java.util.concurrent.ExecutorService $r2;

        r0 := @this: cn.trinea.android.common.service.impl.PreloadDataCache;

        $r2 = r0.<cn.trinea.android.common.service.impl.PreloadDataCache: java.util.concurrent.ExecutorService threadPool>;

        $r1 = interfaceinvoke $r2.<java.util.concurrent.ExecutorService: java.util.List shutdownNow()>();

        return $r1;
    }
}
