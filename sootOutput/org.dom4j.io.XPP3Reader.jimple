public class org.dom4j.io.XPP3Reader extends java.lang.Object
{
    private org.dom4j.io.DispatchHandler dispatchHandler;
    private org.dom4j.DocumentFactory factory;
    private org.xmlpull.v1.XmlPullParserFactory xppFactory;
    private org.xmlpull.v1.XmlPullParser xppParser;

    public void <init>()
    {
        org.dom4j.io.XPP3Reader r0;

        r0 := @this: org.dom4j.io.XPP3Reader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(org.dom4j.DocumentFactory)
    {
        org.dom4j.io.XPP3Reader r0;
        org.dom4j.DocumentFactory $r1;

        r0 := @this: org.dom4j.io.XPP3Reader;

        $r1 := @parameter0: org.dom4j.DocumentFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.dom4j.io.XPP3Reader: org.dom4j.DocumentFactory factory> = $r1;

        return;
    }

    public void addHandler(java.lang.String, org.dom4j.ElementHandler)
    {
        org.dom4j.ElementHandler $r2;
        java.lang.String $r1;
        org.dom4j.io.XPP3Reader r0;
        org.dom4j.io.DispatchHandler $r3;

        r0 := @this: org.dom4j.io.XPP3Reader;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.dom4j.ElementHandler;

        $r3 = virtualinvoke r0.<org.dom4j.io.XPP3Reader: org.dom4j.io.DispatchHandler getDispatchHandler()>();

        virtualinvoke $r3.<org.dom4j.io.DispatchHandler: void addHandler(java.lang.String,org.dom4j.ElementHandler)>($r1, $r2);

        return;
    }

    protected java.io.Reader createReader(java.io.InputStream) throws java.io.IOException
    {
        java.io.BufferedReader $r2;
        org.dom4j.io.XPP3Reader r0;
        java.io.InputStreamReader $r3;
        java.io.InputStream $r1;

        r0 := @this: org.dom4j.io.XPP3Reader;

        $r1 := @parameter0: java.io.InputStream;

        $r2 = new java.io.BufferedReader;

        $r3 = new java.io.InputStreamReader;

        specialinvoke $r3.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r1);

        specialinvoke $r2.<java.io.BufferedReader: void <init>(java.io.Reader)>($r3);

        return $r2;
    }

    protected org.dom4j.io.DispatchHandler getDispatchHandler()
    {
        org.dom4j.io.XPP3Reader r0;
        org.dom4j.io.DispatchHandler $r1;

        r0 := @this: org.dom4j.io.XPP3Reader;

        $r1 = r0.<org.dom4j.io.XPP3Reader: org.dom4j.io.DispatchHandler dispatchHandler>;

        if $r1 != null goto label1;

        $r1 = new org.dom4j.io.DispatchHandler;

        specialinvoke $r1.<org.dom4j.io.DispatchHandler: void <init>()>();

        r0.<org.dom4j.io.XPP3Reader: org.dom4j.io.DispatchHandler dispatchHandler> = $r1;

     label1:
        $r1 = r0.<org.dom4j.io.XPP3Reader: org.dom4j.io.DispatchHandler dispatchHandler>;

        return $r1;
    }

    public org.dom4j.DocumentFactory getDocumentFactory()
    {
        org.dom4j.io.XPP3Reader r0;
        org.dom4j.DocumentFactory $r1;

        r0 := @this: org.dom4j.io.XPP3Reader;

        $r1 = r0.<org.dom4j.io.XPP3Reader: org.dom4j.DocumentFactory factory>;

        if $r1 != null goto label1;

        $r1 = staticinvoke <org.dom4j.DocumentFactory: org.dom4j.DocumentFactory getInstance()>();

        r0.<org.dom4j.io.XPP3Reader: org.dom4j.DocumentFactory factory> = $r1;

     label1:
        $r1 = r0.<org.dom4j.io.XPP3Reader: org.dom4j.DocumentFactory factory>;

        return $r1;
    }

    public org.xmlpull.v1.XmlPullParserFactory getXPPFactory() throws org.xmlpull.v1.XmlPullParserException
    {
        org.dom4j.io.XPP3Reader r0;
        org.xmlpull.v1.XmlPullParserFactory $r1;

        r0 := @this: org.dom4j.io.XPP3Reader;

        $r1 = r0.<org.dom4j.io.XPP3Reader: org.xmlpull.v1.XmlPullParserFactory xppFactory>;

        if $r1 != null goto label1;

        $r1 = staticinvoke <org.xmlpull.v1.XmlPullParserFactory: org.xmlpull.v1.XmlPullParserFactory newInstance()>();

        r0.<org.dom4j.io.XPP3Reader: org.xmlpull.v1.XmlPullParserFactory xppFactory> = $r1;

     label1:
        $r1 = r0.<org.dom4j.io.XPP3Reader: org.xmlpull.v1.XmlPullParserFactory xppFactory>;

        virtualinvoke $r1.<org.xmlpull.v1.XmlPullParserFactory: void setNamespaceAware(boolean)>(1);

        $r1 = r0.<org.dom4j.io.XPP3Reader: org.xmlpull.v1.XmlPullParserFactory xppFactory>;

        return $r1;
    }

    public org.xmlpull.v1.XmlPullParser getXPPParser() throws org.xmlpull.v1.XmlPullParserException
    {
        org.dom4j.io.XPP3Reader r0;
        org.xmlpull.v1.XmlPullParserFactory $r2;
        org.xmlpull.v1.XmlPullParser $r1;

        r0 := @this: org.dom4j.io.XPP3Reader;

        $r1 = r0.<org.dom4j.io.XPP3Reader: org.xmlpull.v1.XmlPullParser xppParser>;

        if $r1 != null goto label1;

        $r2 = virtualinvoke r0.<org.dom4j.io.XPP3Reader: org.xmlpull.v1.XmlPullParserFactory getXPPFactory()>();

        $r1 = virtualinvoke $r2.<org.xmlpull.v1.XmlPullParserFactory: org.xmlpull.v1.XmlPullParser newPullParser()>();

        r0.<org.dom4j.io.XPP3Reader: org.xmlpull.v1.XmlPullParser xppParser> = $r1;

     label1:
        $r1 = r0.<org.dom4j.io.XPP3Reader: org.xmlpull.v1.XmlPullParser xppParser>;

        return $r1;
    }

    protected org.dom4j.Document parseDocument() throws org.dom4j.DocumentException, java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.dom4j.Document $r2;
        org.dom4j.io.XPP3Reader r0;
        org.dom4j.DocumentFactory $r1;
        org.dom4j.DocumentException $r10;
        int $i0, $i1;
        org.dom4j.Element r3, $r8;
        org.dom4j.QName $r7;
        java.lang.String $r5, $r6, $r9;
        org.xmlpull.v1.XmlPullParser $r4;

        r0 := @this: org.dom4j.io.XPP3Reader;

        $r1 = virtualinvoke r0.<org.dom4j.io.XPP3Reader: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r2 = virtualinvoke $r1.<org.dom4j.DocumentFactory: org.dom4j.Document createDocument()>();

        r3 = null;

        $r4 = virtualinvoke r0.<org.dom4j.io.XPP3Reader: org.xmlpull.v1.XmlPullParser getXPPParser()>();

        interfaceinvoke $r4.<org.xmlpull.v1.XmlPullParser: void setFeature(java.lang.String,boolean)>("http://xmlpull.org/v1/doc/features.html#process-namespaces", 1);

     label01:
        $i0 = interfaceinvoke $r4.<org.xmlpull.v1.XmlPullParser: int nextToken()>();

        lookupswitch($i0)
        {
            case 1: goto label03;
            case 2: goto label10;
            case 3: goto label22;
            case 4: goto label23;
            case 5: goto label08;
            case 6: goto label01;
            case 7: goto label02;
            case 8: goto label04;
            case 9: goto label06;
            default: goto label02;
        };

     label02:
        goto label01;

     label03:
        return $r2;

     label04:
        $r5 = interfaceinvoke $r4.<org.xmlpull.v1.XmlPullParser: java.lang.String getText()>();

        $i0 = virtualinvoke $r5.<java.lang.String: int indexOf(java.lang.String)>(" ");

        if $i0 < 0 goto label05;

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $i0 = $i0 + 1;

        $r5 = virtualinvoke $r5.<java.lang.String: java.lang.String substring(int)>($i0);

        interfaceinvoke $r2.<org.dom4j.Document: org.dom4j.Document addProcessingInstruction(java.lang.String,java.lang.String)>($r6, $r5);

        goto label01;

     label05:
        interfaceinvoke $r2.<org.dom4j.Document: org.dom4j.Document addProcessingInstruction(java.lang.String,java.lang.String)>($r5, "");

        goto label01;

     label06:
        if r3 == null goto label07;

        $r6 = interfaceinvoke $r4.<org.xmlpull.v1.XmlPullParser: java.lang.String getText()>();

        interfaceinvoke r3.<org.dom4j.Element: org.dom4j.Element addComment(java.lang.String)>($r6);

        goto label01;

     label07:
        $r6 = interfaceinvoke $r4.<org.xmlpull.v1.XmlPullParser: java.lang.String getText()>();

        interfaceinvoke $r2.<org.dom4j.Document: org.dom4j.Document addComment(java.lang.String)>($r6);

        goto label01;

     label08:
        if r3 == null goto label09;

        $r6 = interfaceinvoke $r4.<org.xmlpull.v1.XmlPullParser: java.lang.String getText()>();

        interfaceinvoke r3.<org.dom4j.Element: org.dom4j.Element addCDATA(java.lang.String)>($r6);

        goto label01;

     label09:
        $r10 = new org.dom4j.DocumentException;

        specialinvoke $r10.<org.dom4j.DocumentException: void <init>(java.lang.String)>("Cannot have text content outside of the root document");

        throw $r10;

     label10:
        $r6 = interfaceinvoke $r4.<org.xmlpull.v1.XmlPullParser: java.lang.String getPrefix()>();

        if $r6 != null goto label14;

        $r6 = interfaceinvoke $r4.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $r5 = interfaceinvoke $r4.<org.xmlpull.v1.XmlPullParser: java.lang.String getNamespace()>();

        $r7 = virtualinvoke $r1.<org.dom4j.DocumentFactory: org.dom4j.QName createQName(java.lang.String,java.lang.String)>($r6, $r5);

     label11:
        $r8 = virtualinvoke $r1.<org.dom4j.DocumentFactory: org.dom4j.Element createElement(org.dom4j.QName)>($r7);

        $i0 = interfaceinvoke $r4.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        $i1 = -1;

        $i0 = $i0 + $i1;

        $i0 = interfaceinvoke $r4.<org.xmlpull.v1.XmlPullParser: int getNamespaceCount(int)>($i0);

        $i1 = interfaceinvoke $r4.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        $i1 = interfaceinvoke $r4.<org.xmlpull.v1.XmlPullParser: int getNamespaceCount(int)>($i1);

     label12:
        if $i0 >= $i1 goto label15;

        $r6 = interfaceinvoke $r4.<org.xmlpull.v1.XmlPullParser: java.lang.String getNamespacePrefix(int)>($i0);

        if $r6 == null goto label13;

        $r6 = interfaceinvoke $r4.<org.xmlpull.v1.XmlPullParser: java.lang.String getNamespacePrefix(int)>($i0);

        $r5 = interfaceinvoke $r4.<org.xmlpull.v1.XmlPullParser: java.lang.String getNamespaceUri(int)>($i0);

        interfaceinvoke $r8.<org.dom4j.Element: org.dom4j.Element addNamespace(java.lang.String,java.lang.String)>($r6, $r5);

     label13:
        $i0 = $i0 + 1;

        goto label12;

     label14:
        $r6 = interfaceinvoke $r4.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $r5 = interfaceinvoke $r4.<org.xmlpull.v1.XmlPullParser: java.lang.String getPrefix()>();

        $r9 = interfaceinvoke $r4.<org.xmlpull.v1.XmlPullParser: java.lang.String getNamespace()>();

        $r7 = virtualinvoke $r1.<org.dom4j.DocumentFactory: org.dom4j.QName createQName(java.lang.String,java.lang.String,java.lang.String)>($r6, $r5, $r9);

        goto label11;

     label15:
        $i0 = 0;

     label16:
        $i1 = interfaceinvoke $r4.<org.xmlpull.v1.XmlPullParser: int getAttributeCount()>();

        if $i0 >= $i1 goto label19;

        $r6 = interfaceinvoke $r4.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributePrefix(int)>($i0);

        if $r6 != null goto label18;

        $r6 = interfaceinvoke $r4.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeName(int)>($i0);

        $r7 = virtualinvoke $r1.<org.dom4j.DocumentFactory: org.dom4j.QName createQName(java.lang.String)>($r6);

     label17:
        $r6 = interfaceinvoke $r4.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(int)>($i0);

        interfaceinvoke $r8.<org.dom4j.Element: org.dom4j.Element addAttribute(org.dom4j.QName,java.lang.String)>($r7, $r6);

        $i0 = $i0 + 1;

        goto label16;

     label18:
        $r6 = interfaceinvoke $r4.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeName(int)>($i0);

        $r5 = interfaceinvoke $r4.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributePrefix(int)>($i0);

        $r9 = interfaceinvoke $r4.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeNamespace(int)>($i0);

        $r7 = virtualinvoke $r1.<org.dom4j.DocumentFactory: org.dom4j.QName createQName(java.lang.String,java.lang.String,java.lang.String)>($r6, $r5, $r9);

        goto label17;

     label19:
        if r3 == null goto label21;

        interfaceinvoke r3.<org.dom4j.Element: void add(org.dom4j.Element)>($r8);

     label20:
        r3 = $r8;

        goto label01;

     label21:
        interfaceinvoke $r2.<org.dom4j.Document: void add(org.dom4j.Element)>($r8);

        goto label20;

     label22:
        if r3 == null goto label01;

        r3 = interfaceinvoke r3.<org.dom4j.Element: org.dom4j.Element getParent()>();

        goto label01;

     label23:
        $r6 = interfaceinvoke $r4.<org.xmlpull.v1.XmlPullParser: java.lang.String getText()>();

        if r3 == null goto label24;

        interfaceinvoke r3.<org.dom4j.Element: org.dom4j.Element addText(java.lang.String)>($r6);

        goto label01;

     label24:
        $r10 = new org.dom4j.DocumentException;

        specialinvoke $r10.<org.dom4j.DocumentException: void <init>(java.lang.String)>("Cannot have text content outside of the root document");

        throw $r10;
    }

    public org.dom4j.Document read(java.io.File) throws org.dom4j.DocumentException, java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.dom4j.Document $r5;
        java.io.FileReader $r2;
        java.lang.String $r3;
        java.io.BufferedReader $r4;
        org.dom4j.io.XPP3Reader r0;
        java.io.File $r1;

        r0 := @this: org.dom4j.io.XPP3Reader;

        $r1 := @parameter0: java.io.File;

        $r3 = virtualinvoke $r1.<java.io.File: java.lang.String getAbsolutePath()>();

        $r4 = new java.io.BufferedReader;

        $r2 = new java.io.FileReader;

        specialinvoke $r2.<java.io.FileReader: void <init>(java.io.File)>($r1);

        specialinvoke $r4.<java.io.BufferedReader: void <init>(java.io.Reader)>($r2);

        $r5 = virtualinvoke r0.<org.dom4j.io.XPP3Reader: org.dom4j.Document read(java.io.Reader,java.lang.String)>($r4, $r3);

        return $r5;
    }

    public org.dom4j.Document read(java.io.InputStream) throws org.dom4j.DocumentException, java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.dom4j.Document $r3;
        java.io.Reader $r2;
        org.dom4j.io.XPP3Reader r0;
        java.io.InputStream $r1;

        r0 := @this: org.dom4j.io.XPP3Reader;

        $r1 := @parameter0: java.io.InputStream;

        $r2 = virtualinvoke r0.<org.dom4j.io.XPP3Reader: java.io.Reader createReader(java.io.InputStream)>($r1);

        $r3 = virtualinvoke r0.<org.dom4j.io.XPP3Reader: org.dom4j.Document read(java.io.Reader)>($r2);

        return $r3;
    }

    public org.dom4j.Document read(java.io.InputStream, java.lang.String) throws org.dom4j.DocumentException, java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.dom4j.Document $r4;
        java.lang.String $r2;
        java.io.Reader $r3;
        org.dom4j.io.XPP3Reader r0;
        java.io.InputStream $r1;

        r0 := @this: org.dom4j.io.XPP3Reader;

        $r1 := @parameter0: java.io.InputStream;

        $r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.dom4j.io.XPP3Reader: java.io.Reader createReader(java.io.InputStream)>($r1);

        $r4 = virtualinvoke r0.<org.dom4j.io.XPP3Reader: org.dom4j.Document read(java.io.Reader,java.lang.String)>($r3, $r2);

        return $r4;
    }

    public org.dom4j.Document read(java.io.Reader) throws org.dom4j.DocumentException, java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.dom4j.Document $r3;
        java.io.Reader $r1;
        org.dom4j.io.XPP3Reader r0;
        org.xmlpull.v1.XmlPullParser $r2;

        r0 := @this: org.dom4j.io.XPP3Reader;

        $r1 := @parameter0: java.io.Reader;

        $r2 = virtualinvoke r0.<org.dom4j.io.XPP3Reader: org.xmlpull.v1.XmlPullParser getXPPParser()>();

        interfaceinvoke $r2.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.Reader)>($r1);

        $r3 = virtualinvoke r0.<org.dom4j.io.XPP3Reader: org.dom4j.Document parseDocument()>();

        return $r3;
    }

    public org.dom4j.Document read(java.io.Reader, java.lang.String) throws org.dom4j.DocumentException, java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.dom4j.Document $r3;
        java.io.Reader $r1;
        java.lang.String $r2;
        org.dom4j.io.XPP3Reader r0;

        r0 := @this: org.dom4j.io.XPP3Reader;

        $r1 := @parameter0: java.io.Reader;

        $r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.dom4j.io.XPP3Reader: org.dom4j.Document read(java.io.Reader)>($r1);

        interfaceinvoke $r3.<org.dom4j.Document: void setName(java.lang.String)>($r2);

        return $r3;
    }

    public org.dom4j.Document read(java.lang.String) throws org.dom4j.DocumentException, java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.dom4j.Document $r3;
        java.net.URL $r2;
        int $i0;
        java.lang.String $r1;
        org.dom4j.io.XPP3Reader r0;
        java.io.File $r4;

        r0 := @this: org.dom4j.io.XPP3Reader;

        $r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(int)>(58);

        if $i0 < 0 goto label1;

        $r2 = new java.net.URL;

        specialinvoke $r2.<java.net.URL: void <init>(java.lang.String)>($r1);

        $r3 = virtualinvoke r0.<org.dom4j.io.XPP3Reader: org.dom4j.Document read(java.net.URL)>($r2);

        return $r3;

     label1:
        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>($r1);

        $r3 = virtualinvoke r0.<org.dom4j.io.XPP3Reader: org.dom4j.Document read(java.io.File)>($r4);

        return $r3;
    }

    public org.dom4j.Document read(java.net.URL) throws org.dom4j.DocumentException, java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.dom4j.Document $r5;
        java.net.URL $r1;
        java.lang.String $r2;
        java.io.Reader $r4;
        org.dom4j.io.XPP3Reader r0;
        java.io.InputStream $r3;

        r0 := @this: org.dom4j.io.XPP3Reader;

        $r1 := @parameter0: java.net.URL;

        $r2 = virtualinvoke $r1.<java.net.URL: java.lang.String toExternalForm()>();

        $r3 = virtualinvoke $r1.<java.net.URL: java.io.InputStream openStream()>();

        $r4 = virtualinvoke r0.<org.dom4j.io.XPP3Reader: java.io.Reader createReader(java.io.InputStream)>($r3);

        $r5 = virtualinvoke r0.<org.dom4j.io.XPP3Reader: org.dom4j.Document read(java.io.Reader,java.lang.String)>($r4, $r2);

        return $r5;
    }

    public org.dom4j.Document read(char[]) throws org.dom4j.DocumentException, java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.dom4j.Document $r4;
        java.io.CharArrayReader $r2;
        char[] $r1;
        org.dom4j.io.XPP3Reader r0;
        org.xmlpull.v1.XmlPullParser $r3;

        r0 := @this: org.dom4j.io.XPP3Reader;

        $r1 := @parameter0: char[];

        $r3 = virtualinvoke r0.<org.dom4j.io.XPP3Reader: org.xmlpull.v1.XmlPullParser getXPPParser()>();

        $r2 = new java.io.CharArrayReader;

        specialinvoke $r2.<java.io.CharArrayReader: void <init>(char[])>($r1);

        interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.Reader)>($r2);

        $r4 = virtualinvoke r0.<org.dom4j.io.XPP3Reader: org.dom4j.Document parseDocument()>();

        return $r4;
    }

    public void removeHandler(java.lang.String)
    {
        java.lang.String $r1;
        org.dom4j.io.XPP3Reader r0;
        org.dom4j.io.DispatchHandler $r2;

        r0 := @this: org.dom4j.io.XPP3Reader;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.dom4j.io.XPP3Reader: org.dom4j.io.DispatchHandler getDispatchHandler()>();

        virtualinvoke $r2.<org.dom4j.io.DispatchHandler: org.dom4j.ElementHandler removeHandler(java.lang.String)>($r1);

        return;
    }

    public void setDefaultHandler(org.dom4j.ElementHandler)
    {
        org.dom4j.io.XPP3Reader r0;
        org.dom4j.io.DispatchHandler $r2;
        org.dom4j.ElementHandler $r1;

        r0 := @this: org.dom4j.io.XPP3Reader;

        $r1 := @parameter0: org.dom4j.ElementHandler;

        $r2 = virtualinvoke r0.<org.dom4j.io.XPP3Reader: org.dom4j.io.DispatchHandler getDispatchHandler()>();

        virtualinvoke $r2.<org.dom4j.io.DispatchHandler: void setDefaultHandler(org.dom4j.ElementHandler)>($r1);

        return;
    }

    protected void setDispatchHandler(org.dom4j.io.DispatchHandler)
    {
        org.dom4j.io.XPP3Reader r0;
        org.dom4j.io.DispatchHandler $r1;

        r0 := @this: org.dom4j.io.XPP3Reader;

        $r1 := @parameter0: org.dom4j.io.DispatchHandler;

        r0.<org.dom4j.io.XPP3Reader: org.dom4j.io.DispatchHandler dispatchHandler> = $r1;

        return;
    }

    public void setDocumentFactory(org.dom4j.DocumentFactory)
    {
        org.dom4j.io.XPP3Reader r0;
        org.dom4j.DocumentFactory $r1;

        r0 := @this: org.dom4j.io.XPP3Reader;

        $r1 := @parameter0: org.dom4j.DocumentFactory;

        r0.<org.dom4j.io.XPP3Reader: org.dom4j.DocumentFactory factory> = $r1;

        return;
    }

    public void setXPPFactory(org.xmlpull.v1.XmlPullParserFactory)
    {
        org.dom4j.io.XPP3Reader r0;
        org.xmlpull.v1.XmlPullParserFactory $r1;

        r0 := @this: org.dom4j.io.XPP3Reader;

        $r1 := @parameter0: org.xmlpull.v1.XmlPullParserFactory;

        r0.<org.dom4j.io.XPP3Reader: org.xmlpull.v1.XmlPullParserFactory xppFactory> = $r1;

        return;
    }
}
