public abstract class org.achartengine.chart.AbstractChart extends java.lang.Object implements java.io.Serializable
{

    public void <init>()
    {
        org.achartengine.chart.AbstractChart r0;

        r0 := @this: org.achartengine.chart.AbstractChart;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private boolean getExceed(float, org.achartengine.renderer.DefaultRenderer, int, int)
    {
        byte $b2;
        org.achartengine.chart.AbstractChart r0;
        int $i0, $i1;
        float $f0, $f1;
        org.achartengine.renderer.DefaultRenderer $r1;
        boolean $z0, $z1;

        r0 := @this: org.achartengine.chart.AbstractChart;

        $f0 := @parameter0: float;

        $r1 := @parameter1: org.achartengine.renderer.DefaultRenderer;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $f1 = (float) $i0;

        $b2 = $f0 cmpl $f1;

        $i0 = (int) $b2;

        if $i0 <= 0 goto label2;

        $z1 = 1;

     label1:
        $z0 = specialinvoke r0.<org.achartengine.chart.AbstractChart: boolean isVertical(org.achartengine.renderer.DefaultRenderer)>($r1);

        if $z0 == 0 goto label4;

        $f1 = (float) $i1;

        $b2 = $f0 cmpl $f1;

        $i0 = (int) $b2;

        if $i0 <= 0 goto label3;

        return 1;

     label2:
        $z1 = 0;

        goto label1;

     label3:
        return 0;

     label4:
        return $z1;
    }

    private boolean isVertical(org.achartengine.renderer.DefaultRenderer)
    {
        org.achartengine.chart.AbstractChart r0;
        org.achartengine.renderer.XYMultipleSeriesRenderer$Orientation $r1, $r2;
        org.achartengine.renderer.DefaultRenderer $r3;
        org.achartengine.renderer.XYMultipleSeriesRenderer $r4;
        boolean $z0;

        r0 := @this: org.achartengine.chart.AbstractChart;

        $r3 := @parameter0: org.achartengine.renderer.DefaultRenderer;

        $z0 = $r3 instanceof org.achartengine.renderer.XYMultipleSeriesRenderer;

        if $z0 == 0 goto label1;

        $r4 = (org.achartengine.renderer.XYMultipleSeriesRenderer) $r3;

        $r2 = virtualinvoke $r4.<org.achartengine.renderer.XYMultipleSeriesRenderer: org.achartengine.renderer.XYMultipleSeriesRenderer$Orientation getOrientation()>();

        $r1 = <org.achartengine.renderer.XYMultipleSeriesRenderer$Orientation: org.achartengine.renderer.XYMultipleSeriesRenderer$Orientation VERTICAL>;

        if $r2 != $r1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public abstract void draw(android.graphics.Canvas, int, int, int, int);

    protected void drawBackground(org.achartengine.renderer.DefaultRenderer, android.graphics.Canvas, int, int, int, int, android.graphics.Paint)
    {
        android.graphics.Paint$Style $r4;
        org.achartengine.chart.AbstractChart r0;
        int $i0, $i1, $i2, $i3, $i4;
        float $f0, $f1, $f2, $f3;
        android.graphics.Canvas $r2;
        android.graphics.Paint $r3;
        org.achartengine.renderer.DefaultRenderer $r1;
        boolean $z0;

        r0 := @this: org.achartengine.chart.AbstractChart;

        $r1 := @parameter0: org.achartengine.renderer.DefaultRenderer;

        $r2 := @parameter1: android.graphics.Canvas;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        $i3 := @parameter5: int;

        $r3 := @parameter6: android.graphics.Paint;

        $z0 = virtualinvoke $r1.<org.achartengine.renderer.DefaultRenderer: boolean isApplyBackgroundColor()>();

        if $z0 == 0 goto label1;

        $i4 = virtualinvoke $r1.<org.achartengine.renderer.DefaultRenderer: int getBackgroundColor()>();

        virtualinvoke $r3.<android.graphics.Paint: void setColor(int)>($i4);

        $r4 = <android.graphics.Paint$Style: android.graphics.Paint$Style FILL>;

        virtualinvoke $r3.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r4);

        $f0 = (float) $i0;

        $f1 = (float) $i1;

        $i0 = $i0 + $i2;

        $f2 = (float) $i0;

        $i0 = $i1 + $i3;

        $f3 = (float) $i0;

        virtualinvoke $r2.<android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>($f0, $f1, $f2, $f3, $r3);

     label1:
        return;
    }

    protected void drawLegend(android.graphics.Canvas, org.achartengine.renderer.DefaultRenderer, java.lang.String[], int, int, int, int, int, int, android.graphics.Paint)
    {
        java.lang.String[] $r3;
        float[] $r8;
        android.graphics.Paint$Align $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        android.graphics.Canvas $r1;
        java.lang.String $r6;
        boolean $z0;
        org.achartengine.renderer.SimpleSeriesRenderer $r7;
        org.achartengine.chart.AbstractChart r0;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        android.graphics.Paint $r4;
        java.lang.StringBuilder $r9;
        org.achartengine.renderer.DefaultRenderer $r2;

        r0 := @this: org.achartengine.chart.AbstractChart;

        $r1 := @parameter0: android.graphics.Canvas;

        $r2 := @parameter1: org.achartengine.renderer.DefaultRenderer;

        $r3 := @parameter2: java.lang.String[];

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $i2 := @parameter5: int;

        $i3 := @parameter6: int;

        $i4 := @parameter7: int;

        $i5 := @parameter8: int;

        $r4 := @parameter9: android.graphics.Paint;

        $z0 = virtualinvoke $r2.<org.achartengine.renderer.DefaultRenderer: boolean isShowLegend()>();

        if $z0 == 0 goto label09;

        $i2 = $i2 + $i4;

        $i2 = $i2 - $i5;

        $i2 = $i2 + 32;

        $f2 = (float) $i2;

        $i2 = virtualinvoke r0.<org.achartengine.chart.AbstractChart: int getLegendShapeWidth()>();

        $f0 = (float) $i2;

        $r5 = <android.graphics.Paint$Align: android.graphics.Paint$Align LEFT>;

        virtualinvoke $r4.<android.graphics.Paint: void setTextAlign(android.graphics.Paint$Align)>($r5);

        $f3 = virtualinvoke $r2.<org.achartengine.renderer.DefaultRenderer: float getLegendTextSize()>();

        virtualinvoke $r4.<android.graphics.Paint: void setTextSize(float)>($f3);

        $i2 = lengthof $r3;

        $i4 = virtualinvoke $r2.<org.achartengine.renderer.DefaultRenderer: int getSeriesRendererCount()>();

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i4);

        $i4 = 0;

        $f3 = (float) $i0;

        $f1 = $f2;

     label01:
        if $i4 >= $i2 goto label12;

        $r6 = $r3[$i4];

        $i5 = lengthof $r3;

        $i6 = virtualinvoke $r2.<org.achartengine.renderer.DefaultRenderer: int getSeriesRendererCount()>();

        if $i5 != $i6 goto label04;

        $r7 = virtualinvoke $r2.<org.achartengine.renderer.DefaultRenderer: org.achartengine.renderer.SimpleSeriesRenderer getSeriesRendererAt(int)>($i4);

        $i5 = virtualinvoke $r7.<org.achartengine.renderer.SimpleSeriesRenderer: int getColor()>();

        virtualinvoke $r4.<android.graphics.Paint: void setColor(int)>($i5);

     label02:
        $i5 = virtualinvoke $r6.<java.lang.String: int length()>();

        $r8 = newarray (float)[$i5];

        virtualinvoke $r4.<android.graphics.Paint: int getTextWidths(java.lang.String,float[])>($r6, $r8);

        $i5 = lengthof $r8;

        $f2 = 0.0F;

        $i6 = 0;

     label03:
        if $i6 >= $i5 goto label05;

        $f4 = $r8[$i6];

        $f2 = $f2 + $f4;

        $i6 = $i6 + 1;

        goto label03;

     label04:
        virtualinvoke $r4.<android.graphics.Paint: void setColor(int)>(-3355444);

        goto label02;

     label05:
        $f4 = 10.0F + $f0;

        $f2 = $f2 + $f4;

        $f4 = $f3 + $f2;

        if $i4 <= 0 goto label11;

        $z0 = specialinvoke r0.<org.achartengine.chart.AbstractChart: boolean getExceed(float,org.achartengine.renderer.DefaultRenderer,int,int)>($f4, $r2, $i1, $i3);

        if $z0 == 0 goto label11;

        $f3 = (float) $i0;

        $f1 = $f1 + 15.0F;

        $f4 = $f3 + $f2;

     label06:
        $z0 = specialinvoke r0.<org.achartengine.chart.AbstractChart: boolean getExceed(float,org.achartengine.renderer.DefaultRenderer,int,int)>($f4, $r2, $i1, $i3);

        if $z0 == 0 goto label10;

        $f4 = (float) $i1;

        $f4 = $f4 - $f3;

        $f4 = $f4 - $f0;

        $f4 = $f4 - 10.0F;

        $z0 = specialinvoke r0.<org.achartengine.chart.AbstractChart: boolean isVertical(org.achartengine.renderer.DefaultRenderer)>($r2);

        if $z0 == 0 goto label07;

        $f4 = (float) $i3;

        $f4 = $f4 - $f3;

        $f4 = $f4 - $f0;

        $f4 = $f4 - 10.0F;

     label07:
        $i5 = virtualinvoke $r4.<android.graphics.Paint: int breakText(java.lang.String,boolean,float,float[])>($r6, 1, $f4, $r8);

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.String: java.lang.String substring(int,int)>(0, $i5);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("...");

        $r6 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

     label08:
        $r7 = virtualinvoke $r2.<org.achartengine.renderer.DefaultRenderer: org.achartengine.renderer.SimpleSeriesRenderer getSeriesRendererAt(int)>($i4);

        virtualinvoke r0.<org.achartengine.chart.AbstractChart: void drawLegendShape(android.graphics.Canvas,org.achartengine.renderer.SimpleSeriesRenderer,float,float,android.graphics.Paint)>($r1, $r7, $f3, $f1, $r4);

        $f4 = $f3 + $f0;

        $f4 = $f4 + 5.0F;

        $f5 = 5.0F + $f1;

        virtualinvoke $r1.<android.graphics.Canvas: void drawText(java.lang.String,float,float,android.graphics.Paint)>($r6, $f4, $f5, $r4);

        $i4 = $i4 + 1;

        $f3 = $f3 + $f2;

        goto label01;

     label09:
        return;

     label10:
        goto label08;

     label11:
        goto label06;

     label12:
        return;
    }

    public abstract void drawLegendShape(android.graphics.Canvas, org.achartengine.renderer.SimpleSeriesRenderer, float, float, android.graphics.Paint);

    protected void drawPath(android.graphics.Canvas, float[], android.graphics.Paint, boolean)
    {
        android.graphics.Path $r4;
        float[] $r2;
        org.achartengine.chart.AbstractChart r0;
        int $i0, $i1;
        float $f0, $f1;
        android.graphics.Canvas $r1;
        android.graphics.Paint $r3;
        boolean $z0;

        r0 := @this: org.achartengine.chart.AbstractChart;

        $r1 := @parameter0: android.graphics.Canvas;

        $r2 := @parameter1: float[];

        $r3 := @parameter2: android.graphics.Paint;

        $z0 := @parameter3: boolean;

        $r4 = new android.graphics.Path;

        specialinvoke $r4.<android.graphics.Path: void <init>()>();

        $f0 = $r2[0];

        $f1 = $r2[1];

        virtualinvoke $r4.<android.graphics.Path: void moveTo(float,float)>($f0, $f1);

        $i0 = 2;

     label1:
        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label2;

        $f0 = $r2[$i0];

        $i1 = $i0 + 1;

        $f1 = $r2[$i1];

        virtualinvoke $r4.<android.graphics.Path: void lineTo(float,float)>($f0, $f1);

        $i0 = $i0 + 2;

        goto label1;

     label2:
        if $z0 == 0 goto label3;

        $f0 = $r2[0];

        $f1 = $r2[1];

        virtualinvoke $r4.<android.graphics.Path: void lineTo(float,float)>($f0, $f1);

     label3:
        virtualinvoke $r1.<android.graphics.Canvas: void drawPath(android.graphics.Path,android.graphics.Paint)>($r4, $r3);

        return;
    }

    public abstract int getLegendShapeWidth();
}
