class com.hp.hpl.sparta.ParseCharStream extends java.lang.Object implements com.hp.hpl.sparta.ParseSource
{
    private static final char[] BEGIN_CDATA;
    private static final char[] BEGIN_ETAG;
    private static final char[] CHARREF_BEGIN;
    private static final char[] COMMENT_BEGIN;
    private static final char[] COMMENT_END;
    private static final boolean DEBUG;
    private static final char[] DOCTYPE_BEGIN;
    private static final char[] ENCODING;
    private static final char[] END_CDATA;
    private static final char[] END_EMPTYTAG;
    private static final char[] ENTITY_BEGIN;
    public static final int HISTORY_LENGTH;
    private static final boolean H_DEBUG;
    private static final boolean[] IS_NAME_CHAR;
    private static final char[] MARKUPDECL_BEGIN;
    private static final int MAX_COMMON_CHAR;
    private static final char[] NAME_PUNCT_CHARS;
    private static final char[] NDATA;
    private static final char[] PI_BEGIN;
    private static final char[] PUBLIC;
    private static final char[] QU_END;
    private static final char[] SYSTEM;
    private static final int TMP_BUF_SIZE;
    private static final char[] VERSION;
    private static final char[] VERSIONNUM_PUNC_CHARS;
    private static final char[] XML_BEGIN;
    private final int CBUF_SIZE;
    private final char[] cbuf_;
    private int ch_;
    private int curPos_;
    private java.lang.String docTypeName_;
    private final java.lang.String encoding_;
    private int endPos_;
    private final java.util.Hashtable entities_;
    private boolean eos_;
    private final com.hp.hpl.sparta.ParseHandler handler_;
    private final com.hp.hpl.sparta.CharCircBuffer history_;
    private boolean isExternalDtd_;
    private int lineNumber_;
    private final com.hp.hpl.sparta.ParseLog log_;
    private final java.util.Hashtable pes_;
    private final java.io.Reader reader_;
    private java.lang.String systemId_;
    private final char[] tmpBuf_;

    static void <clinit>()
    {
        boolean[] $r0;
        int $i1;
        char[] $r1;
        char $c0;
        java.lang.String $r2;
        boolean $z0;

        <com.hp.hpl.sparta.ParseCharStream: int TMP_BUF_SIZE> = 255;

        <com.hp.hpl.sparta.ParseCharStream: int MAX_COMMON_CHAR> = 128;

        <com.hp.hpl.sparta.ParseCharStream: boolean H_DEBUG> = 0;

        <com.hp.hpl.sparta.ParseCharStream: int HISTORY_LENGTH> = 100;

        <com.hp.hpl.sparta.ParseCharStream: boolean DEBUG> = 1;

        $r1 = newarray (char)[4];

        $r1[0] = 46;

        $r1[1] = 45;

        $r1[2] = 95;

        $r1[3] = 58;

        <com.hp.hpl.sparta.ParseCharStream: char[] NAME_PUNCT_CHARS> = $r1;

        $r0 = newarray (boolean)[128];

        <com.hp.hpl.sparta.ParseCharStream: boolean[] IS_NAME_CHAR> = $r0;

        $c0 = 0;

     label1:
        if $c0 < 128 goto label2;

        $r2 = "<!--";

        $r1 = virtualinvoke $r2.<java.lang.String: char[] toCharArray()>();

        <com.hp.hpl.sparta.ParseCharStream: char[] COMMENT_BEGIN> = $r1;

        $r2 = "-->";

        $r1 = virtualinvoke $r2.<java.lang.String: char[] toCharArray()>();

        <com.hp.hpl.sparta.ParseCharStream: char[] COMMENT_END> = $r1;

        $r2 = "<?";

        $r1 = virtualinvoke $r2.<java.lang.String: char[] toCharArray()>();

        <com.hp.hpl.sparta.ParseCharStream: char[] PI_BEGIN> = $r1;

        $r2 = "?>";

        $r1 = virtualinvoke $r2.<java.lang.String: char[] toCharArray()>();

        <com.hp.hpl.sparta.ParseCharStream: char[] QU_END> = $r1;

        $r2 = "<!DOCTYPE";

        $r1 = virtualinvoke $r2.<java.lang.String: char[] toCharArray()>();

        <com.hp.hpl.sparta.ParseCharStream: char[] DOCTYPE_BEGIN> = $r1;

        $r2 = "<?xml";

        $r1 = virtualinvoke $r2.<java.lang.String: char[] toCharArray()>();

        <com.hp.hpl.sparta.ParseCharStream: char[] XML_BEGIN> = $r1;

        $r2 = "encoding";

        $r1 = virtualinvoke $r2.<java.lang.String: char[] toCharArray()>();

        <com.hp.hpl.sparta.ParseCharStream: char[] ENCODING> = $r1;

        $r2 = "version";

        $r1 = virtualinvoke $r2.<java.lang.String: char[] toCharArray()>();

        <com.hp.hpl.sparta.ParseCharStream: char[] VERSION> = $r1;

        $r1 = newarray (char)[4];

        $r1[0] = 95;

        $r1[1] = 46;

        $r1[2] = 58;

        $r1[3] = 45;

        <com.hp.hpl.sparta.ParseCharStream: char[] VERSIONNUM_PUNC_CHARS> = $r1;

        $r2 = "<!";

        $r1 = virtualinvoke $r2.<java.lang.String: char[] toCharArray()>();

        <com.hp.hpl.sparta.ParseCharStream: char[] MARKUPDECL_BEGIN> = $r1;

        $r2 = "&#";

        $r1 = virtualinvoke $r2.<java.lang.String: char[] toCharArray()>();

        <com.hp.hpl.sparta.ParseCharStream: char[] CHARREF_BEGIN> = $r1;

        $r2 = "<!ENTITY";

        $r1 = virtualinvoke $r2.<java.lang.String: char[] toCharArray()>();

        <com.hp.hpl.sparta.ParseCharStream: char[] ENTITY_BEGIN> = $r1;

        $r2 = "NDATA";

        $r1 = virtualinvoke $r2.<java.lang.String: char[] toCharArray()>();

        <com.hp.hpl.sparta.ParseCharStream: char[] NDATA> = $r1;

        $r2 = "SYSTEM";

        $r1 = virtualinvoke $r2.<java.lang.String: char[] toCharArray()>();

        <com.hp.hpl.sparta.ParseCharStream: char[] SYSTEM> = $r1;

        $r2 = "PUBLIC";

        $r1 = virtualinvoke $r2.<java.lang.String: char[] toCharArray()>();

        <com.hp.hpl.sparta.ParseCharStream: char[] PUBLIC> = $r1;

        $r2 = "<![CDATA[";

        $r1 = virtualinvoke $r2.<java.lang.String: char[] toCharArray()>();

        <com.hp.hpl.sparta.ParseCharStream: char[] BEGIN_CDATA> = $r1;

        $r2 = "]]>";

        $r1 = virtualinvoke $r2.<java.lang.String: char[] toCharArray()>();

        <com.hp.hpl.sparta.ParseCharStream: char[] END_CDATA> = $r1;

        $r2 = "/>";

        $r1 = virtualinvoke $r2.<java.lang.String: char[] toCharArray()>();

        <com.hp.hpl.sparta.ParseCharStream: char[] END_EMPTYTAG> = $r1;

        $r2 = "</";

        $r1 = virtualinvoke $r2.<java.lang.String: char[] toCharArray()>();

        <com.hp.hpl.sparta.ParseCharStream: char[] BEGIN_ETAG> = $r1;

        return;

     label2:
        $r0 = <com.hp.hpl.sparta.ParseCharStream: boolean[] IS_NAME_CHAR>;

        $z0 = staticinvoke <com.hp.hpl.sparta.ParseCharStream: boolean isNameChar(char)>($c0);

        $r0[$c0] = $z0;

        $i1 = $c0 + 1;

        $c0 = (char) $i1;

        goto label1;

        return;
    }

    public void <init>(java.lang.String, java.io.Reader, com.hp.hpl.sparta.ParseLog, java.lang.String, com.hp.hpl.sparta.ParseHandler) throws com.hp.hpl.sparta.ParseException, com.hp.hpl.sparta.EncodingMismatchException, java.io.IOException
    {
        java.lang.String $r1, $r4;
        java.io.Reader $r2;
        com.hp.hpl.sparta.ParseCharStream r0;
        com.hp.hpl.sparta.ParseHandler $r5;
        com.hp.hpl.sparta.ParseLog $r3;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.io.Reader;

        $r3 := @parameter2: com.hp.hpl.sparta.ParseLog;

        $r4 := @parameter3: java.lang.String;

        $r5 := @parameter4: com.hp.hpl.sparta.ParseHandler;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void <init>(java.lang.String,java.io.Reader,char[],com.hp.hpl.sparta.ParseLog,java.lang.String,com.hp.hpl.sparta.ParseHandler)>($r1, $r2, null, $r3, $r4, $r5);

        return;
    }

    public void <init>(java.lang.String, java.io.Reader, char[], com.hp.hpl.sparta.ParseLog, java.lang.String, com.hp.hpl.sparta.ParseHandler) throws com.hp.hpl.sparta.ParseException, com.hp.hpl.sparta.EncodingMismatchException, java.io.IOException
    {
        java.io.Reader $r2;
        com.hp.hpl.sparta.ParseLog $r6;
        com.hp.hpl.sparta.Element $r9;
        java.lang.StringBuffer $r10, $r12;
        int $i0;
        char[] $r3, $r8;
        java.lang.String $r1, $r4;
        com.hp.hpl.sparta.ParseCharStream r0;
        com.hp.hpl.sparta.ParseHandler $r5;
        java.util.Hashtable $r7, $r11;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.io.Reader;

        $r3 := @parameter2: char[];

        $r6 := @parameter3: com.hp.hpl.sparta.ParseLog;

        $r4 := @parameter4: java.lang.String;

        $r5 := @parameter5: com.hp.hpl.sparta.ParseHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String docTypeName_> = null;

        $r11 = new java.util.Hashtable;

        specialinvoke $r11.<java.util.Hashtable: void <init>()>();

        r0.<com.hp.hpl.sparta.ParseCharStream: java.util.Hashtable entities_> = $r11;

        $r11 = new java.util.Hashtable;

        specialinvoke $r11.<java.util.Hashtable: void <init>()>();

        r0.<com.hp.hpl.sparta.ParseCharStream: java.util.Hashtable pes_> = $r11;

        $i0 = -2;

        r0.<com.hp.hpl.sparta.ParseCharStream: int ch_> = $i0;

        r0.<com.hp.hpl.sparta.ParseCharStream: boolean isExternalDtd_> = 0;

        r0.<com.hp.hpl.sparta.ParseCharStream: int CBUF_SIZE> = 1024;

        r0.<com.hp.hpl.sparta.ParseCharStream: int curPos_> = 0;

        r0.<com.hp.hpl.sparta.ParseCharStream: int endPos_> = 0;

        r0.<com.hp.hpl.sparta.ParseCharStream: boolean eos_> = 0;

        $r8 = newarray (char)[255];

        r0.<com.hp.hpl.sparta.ParseCharStream: char[] tmpBuf_> = $r8;

        $i0 = -1;

        r0.<com.hp.hpl.sparta.ParseCharStream: int lineNumber_> = $i0;

        r0.<com.hp.hpl.sparta.ParseCharStream: int lineNumber_> = 1;

        r0.<com.hp.hpl.sparta.ParseCharStream: com.hp.hpl.sparta.CharCircBuffer history_> = null;

        if $r6 != null goto label1;

        $r6 = <com.hp.hpl.sparta.ParseSource: com.hp.hpl.sparta.ParseLog DEFAULT_LOG>;

     label1:
        r0.<com.hp.hpl.sparta.ParseCharStream: com.hp.hpl.sparta.ParseLog log_> = $r6;

        if $r4 != null goto label6;

        $r4 = null;

     label2:
        r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String encoding_> = $r4;

        $r7 = r0.<com.hp.hpl.sparta.ParseCharStream: java.util.Hashtable entities_>;

        virtualinvoke $r7.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("lt", "<");

        $r7 = r0.<com.hp.hpl.sparta.ParseCharStream: java.util.Hashtable entities_>;

        virtualinvoke $r7.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("gt", ">");

        $r7 = r0.<com.hp.hpl.sparta.ParseCharStream: java.util.Hashtable entities_>;

        virtualinvoke $r7.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("amp", "&");

        $r7 = r0.<com.hp.hpl.sparta.ParseCharStream: java.util.Hashtable entities_>;

        virtualinvoke $r7.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("apos", "\'");

        $r7 = r0.<com.hp.hpl.sparta.ParseCharStream: java.util.Hashtable entities_>;

        virtualinvoke $r7.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("quot", "\"");

        if $r3 == null goto label7;

        r0.<com.hp.hpl.sparta.ParseCharStream: char[] cbuf_> = $r3;

        r0.<com.hp.hpl.sparta.ParseCharStream: int curPos_> = 0;

        $r3 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] cbuf_>;

        $i0 = lengthof $r3;

        r0.<com.hp.hpl.sparta.ParseCharStream: int endPos_> = $i0;

        r0.<com.hp.hpl.sparta.ParseCharStream: boolean eos_> = 1;

        r0.<com.hp.hpl.sparta.ParseCharStream: java.io.Reader reader_> = null;

     label3:
        r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String systemId_> = $r1;

        r0.<com.hp.hpl.sparta.ParseCharStream: com.hp.hpl.sparta.ParseHandler handler_> = $r5;

        $r5 = r0.<com.hp.hpl.sparta.ParseCharStream: com.hp.hpl.sparta.ParseHandler handler_>;

        interfaceinvoke $r5.<com.hp.hpl.sparta.ParseHandler: void setParseSource(com.hp.hpl.sparta.ParseSource)>(r0);

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readProlog()>();

        $r5 = r0.<com.hp.hpl.sparta.ParseCharStream: com.hp.hpl.sparta.ParseHandler handler_>;

        interfaceinvoke $r5.<com.hp.hpl.sparta.ParseHandler: void startDocument()>();

        $r9 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: com.hp.hpl.sparta.Element readElement()>();

        $r1 = r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String docTypeName_>;

        if $r1 == null goto label4;

        $r1 = r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String docTypeName_>;

        $r4 = virtualinvoke $r9.<com.hp.hpl.sparta.Element: java.lang.String getTagName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label4;

        $r6 = r0.<com.hp.hpl.sparta.ParseCharStream: com.hp.hpl.sparta.ParseLog log_>;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("DOCTYPE name \"");

        $r1 = r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String docTypeName_>;

        $r10 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r10 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\" not same as tag name, \"");

        $r1 = virtualinvoke $r9.<com.hp.hpl.sparta.Element: java.lang.String getTagName()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r10 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\" of root element");

        $r1 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        $r4 = r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String systemId_>;

        $i0 = virtualinvoke r0.<com.hp.hpl.sparta.ParseCharStream: int getLineNumber()>();

        interfaceinvoke $r6.<com.hp.hpl.sparta.ParseLog: void warning(java.lang.String,java.lang.String,int)>($r1, $r4, $i0);

     label4:
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isMisc()>();

        if $z0 != 0 goto label8;

        $r2 = r0.<com.hp.hpl.sparta.ParseCharStream: java.io.Reader reader_>;

        if $r2 == null goto label5;

        $r2 = r0.<com.hp.hpl.sparta.ParseCharStream: java.io.Reader reader_>;

        virtualinvoke $r2.<java.io.Reader: void close()>();

     label5:
        $r5 = r0.<com.hp.hpl.sparta.ParseCharStream: com.hp.hpl.sparta.ParseHandler handler_>;

        interfaceinvoke $r5.<com.hp.hpl.sparta.ParseHandler: void endDocument()>();

        return;

     label6:
        $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String toLowerCase()>();

        goto label2;

     label7:
        r0.<com.hp.hpl.sparta.ParseCharStream: java.io.Reader reader_> = $r2;

        $r3 = newarray (char)[1024];

        r0.<com.hp.hpl.sparta.ParseCharStream: char[] cbuf_> = $r3;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: int fillBuf()>();

        goto label3;

     label8:
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readMisc()>();

        goto label4;
    }

    public void <init>(java.lang.String, char[], com.hp.hpl.sparta.ParseLog, java.lang.String, com.hp.hpl.sparta.ParseHandler) throws com.hp.hpl.sparta.ParseException, com.hp.hpl.sparta.EncodingMismatchException, java.io.IOException
    {
        char[] $r2;
        java.lang.String $r1, $r4;
        com.hp.hpl.sparta.ParseCharStream r0;
        com.hp.hpl.sparta.ParseHandler $r5;
        com.hp.hpl.sparta.ParseLog $r3;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: char[];

        $r3 := @parameter2: com.hp.hpl.sparta.ParseLog;

        $r4 := @parameter3: java.lang.String;

        $r5 := @parameter4: com.hp.hpl.sparta.ParseHandler;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void <init>(java.lang.String,java.io.Reader,char[],com.hp.hpl.sparta.ParseLog,java.lang.String,com.hp.hpl.sparta.ParseHandler)>($r1, null, $r2, $r3, $r4, $r5);

        return;
    }

    private int fillBuf() throws java.io.IOException
    {
        java.io.Reader $r2;
        int $i0, $i1, $i2;
        char[] $r1, $r3;
        com.hp.hpl.sparta.ParseCharStream r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        $z0 = r0.<com.hp.hpl.sparta.ParseCharStream: boolean eos_>;

        if $z0 == 0 goto label1;

        $i0 = -1;

        return $i0;

     label1:
        $i0 = r0.<com.hp.hpl.sparta.ParseCharStream: int endPos_>;

        $r1 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] cbuf_>;

        $i1 = lengthof $r1;

        if $i0 != $i1 goto label2;

        r0.<com.hp.hpl.sparta.ParseCharStream: int endPos_> = 0;

        r0.<com.hp.hpl.sparta.ParseCharStream: int curPos_> = 0;

     label2:
        $r2 = r0.<com.hp.hpl.sparta.ParseCharStream: java.io.Reader reader_>;

        $r1 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] cbuf_>;

        $i0 = r0.<com.hp.hpl.sparta.ParseCharStream: int endPos_>;

        $r3 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] cbuf_>;

        $i2 = lengthof $r3;

        $i1 = r0.<com.hp.hpl.sparta.ParseCharStream: int endPos_>;

        $i1 = $i2 - $i1;

        $i0 = virtualinvoke $r2.<java.io.Reader: int read(char[],int,int)>($r1, $i0, $i1);

        if $i0 > 0 goto label3;

        r0.<com.hp.hpl.sparta.ParseCharStream: boolean eos_> = 1;

        $i0 = -1;

        return $i0;

     label3:
        $i1 = r0.<com.hp.hpl.sparta.ParseCharStream: int endPos_>;

        $i1 = $i1 + $i0;

        r0.<com.hp.hpl.sparta.ParseCharStream: int endPos_> = $i1;

        return $i0;
    }

    private int fillBuf(int) throws java.io.IOException
    {
        char $c4;
        int $i0, $i1, $i2, $i3;
        char[] $r1, $r2;
        com.hp.hpl.sparta.ParseCharStream r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        $i0 := @parameter0: int;

        $i1 = 0;

        $z0 = r0.<com.hp.hpl.sparta.ParseCharStream: boolean eos_>;

        if $z0 == 0 goto label1;

        $i0 = -1;

        return $i0;

     label1:
        $r1 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] cbuf_>;

        $i2 = lengthof $r1;

        $i3 = r0.<com.hp.hpl.sparta.ParseCharStream: int curPos_>;

        $i2 = $i2 - $i3;

        if $i2 >= $i0 goto label3;

        $i0 = 0;

     label2:
        $i1 = r0.<com.hp.hpl.sparta.ParseCharStream: int curPos_>;

        $i1 = $i1 + $i0;

        $i2 = r0.<com.hp.hpl.sparta.ParseCharStream: int endPos_>;

        if $i1 < $i2 goto label4;

        $i0 = r0.<com.hp.hpl.sparta.ParseCharStream: int endPos_>;

        $i1 = r0.<com.hp.hpl.sparta.ParseCharStream: int curPos_>;

        $i0 = $i0 - $i1;

        r0.<com.hp.hpl.sparta.ParseCharStream: int endPos_> = $i0;

        r0.<com.hp.hpl.sparta.ParseCharStream: int curPos_> = 0;

        $i1 = $i0;

     label3:
        $i0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: int fillBuf()>();

        $i2 = -1;

        if $i0 != $i2 goto label5;

        if $i1 != 0 goto label6;

        $i0 = -1;

        return $i0;

     label4:
        $r1 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] cbuf_>;

        $r2 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] cbuf_>;

        $i1 = r0.<com.hp.hpl.sparta.ParseCharStream: int curPos_>;

        $i1 = $i1 + $i0;

        $c4 = $r2[$i1];

        $r1[$i0] = $c4;

        $i0 = $i0 + 1;

        goto label2;

     label5:
        $i0 = $i1 + $i0;

        return $i0;

     label6:
        return $i1;
    }

    private boolean isCdSect() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        char[] $r1;
        com.hp.hpl.sparta.ParseCharStream r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        $r1 = <com.hp.hpl.sparta.ParseCharStream: char[] BEGIN_CDATA>;

        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isSymbol(char[])>($r1);

        return $z0;
    }

    private final boolean isChar(char) throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        int $i1, $i2;
        char[] $r1;
        com.hp.hpl.sparta.ParseException $r2;
        char $c0, $c3;
        com.hp.hpl.sparta.ParseCharStream r0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        $c0 := @parameter0: char;

        $i1 = r0.<com.hp.hpl.sparta.ParseCharStream: int curPos_>;

        $i2 = r0.<com.hp.hpl.sparta.ParseCharStream: int endPos_>;

        if $i1 < $i2 goto label1;

        $i1 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: int fillBuf()>();

        $i2 = -1;

        if $i1 != $i2 goto label1;

        $r2 = new com.hp.hpl.sparta.ParseException;

        specialinvoke $r2.<com.hp.hpl.sparta.ParseException: void <init>(com.hp.hpl.sparta.ParseCharStream,java.lang.String)>(r0, "unexpected end of expression.");

        throw $r2;

     label1:
        $r1 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] cbuf_>;

        $i1 = r0.<com.hp.hpl.sparta.ParseCharStream: int curPos_>;

        $c3 = $r1[$i1];

        $i1 = (int) $c3;

        $i2 = (int) $c0;

        if $i1 != $i2 goto label2;

        return 1;

     label2:
        return 0;
    }

    private final boolean isChar(char, char) throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        int $i2, $i3;
        char[] $r1;
        char $c0, $c1, $c4;
        com.hp.hpl.sparta.ParseCharStream r0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        $c0 := @parameter0: char;

        $c1 := @parameter1: char;

        $i2 = r0.<com.hp.hpl.sparta.ParseCharStream: int curPos_>;

        $i3 = r0.<com.hp.hpl.sparta.ParseCharStream: int endPos_>;

        if $i2 < $i3 goto label1;

        $i2 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: int fillBuf()>();

        $i3 = -1;

        if $i2 != $i3 goto label1;

        return 0;

     label1:
        $r1 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] cbuf_>;

        $i2 = r0.<com.hp.hpl.sparta.ParseCharStream: int curPos_>;

        $c4 = $r1[$i2];

        $i2 = (int) $c4;

        $i3 = (int) $c0;

        if $i2 == $i3 goto label2;

        $i2 = (int) $c4;

        $i3 = (int) $c1;

        if $i2 != $i3 goto label3;

     label2:
        return 1;

     label3:
        return 0;
    }

    private final boolean isChar(char, char, char, char) throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        char $c0, $c1, $c2, $c3, $c6;
        int $i4, $i5;
        char[] $r1;
        com.hp.hpl.sparta.ParseCharStream r0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        $c0 := @parameter0: char;

        $c1 := @parameter1: char;

        $c2 := @parameter2: char;

        $c3 := @parameter3: char;

        $i4 = r0.<com.hp.hpl.sparta.ParseCharStream: int curPos_>;

        $i5 = r0.<com.hp.hpl.sparta.ParseCharStream: int endPos_>;

        if $i4 < $i5 goto label1;

        $i4 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: int fillBuf()>();

        $i5 = -1;

        if $i4 != $i5 goto label1;

        return 0;

     label1:
        $r1 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] cbuf_>;

        $i4 = r0.<com.hp.hpl.sparta.ParseCharStream: int curPos_>;

        $c6 = $r1[$i4];

        $i4 = (int) $c6;

        $i5 = (int) $c0;

        if $i4 == $i5 goto label2;

        $i4 = (int) $c6;

        $i5 = (int) $c1;

        if $i4 == $i5 goto label2;

        $i4 = (int) $c6;

        $i5 = (int) $c2;

        if $i4 == $i5 goto label2;

        $i4 = (int) $c6;

        $i5 = (int) $c3;

        if $i4 != $i5 goto label3;

     label2:
        return 1;

     label3:
        return 0;
    }

    private final boolean isComment() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        char[] $r1;
        com.hp.hpl.sparta.ParseCharStream r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        $r1 = <com.hp.hpl.sparta.ParseCharStream: char[] COMMENT_BEGIN>;

        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isSymbol(char[])>($r1);

        return $z0;
    }

    private boolean isDeclSep() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isPeReference()>();

        if $z0 != 0 goto label1;

        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isS()>();

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    private boolean isDocTypeDecl() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        char[] $r1;
        com.hp.hpl.sparta.ParseCharStream r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        $r1 = <com.hp.hpl.sparta.ParseCharStream: char[] DOCTYPE_BEGIN>;

        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isSymbol(char[])>($r1);

        return $z0;
    }

    private boolean isETag() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        char[] $r1;
        com.hp.hpl.sparta.ParseCharStream r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        $r1 = <com.hp.hpl.sparta.ParseCharStream: char[] BEGIN_ETAG>;

        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isSymbol(char[])>($r1);

        return $z0;
    }

    private boolean isEncodingDecl() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        char[] $r1;
        com.hp.hpl.sparta.ParseCharStream r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        $r1 = <com.hp.hpl.sparta.ParseCharStream: char[] ENCODING>;

        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isSymbol(char[])>($r1);

        return $z0;
    }

    private boolean isEntityDecl() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        char[] $r1;
        com.hp.hpl.sparta.ParseCharStream r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        $r1 = <com.hp.hpl.sparta.ParseCharStream: char[] ENTITY_BEGIN>;

        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isSymbol(char[])>($r1);

        return $z0;
    }

    private final boolean isEntityValue() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isChar(char,char)>(39, 34);

        return $z0;
    }

    private static boolean isExtender(char)
    {
        int $i1;
        char $c0;

        $c0 := @parameter0: char;

        $i1 = (int) $c0;

        lookupswitch($i1)
        {
            case 183: goto label2;
            case 720: goto label2;
            case 721: goto label2;
            case 903: goto label2;
            case 1600: goto label2;
            case 3654: goto label2;
            case 3782: goto label2;
            case 12293: goto label2;
            case 12337: goto label2;
            case 12338: goto label2;
            case 12339: goto label2;
            case 12340: goto label2;
            case 12341: goto label2;
            case 12445: goto label2;
            case 12446: goto label2;
            case 12540: goto label2;
            case 12541: goto label2;
            case 12542: goto label2;
            default: goto label1;
        };

     label1:
        return 0;

     label2:
        return 1;
    }

    private boolean isExternalId() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        char[] $r1;
        com.hp.hpl.sparta.ParseCharStream r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        $r1 = <com.hp.hpl.sparta.ParseCharStream: char[] SYSTEM>;

        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isSymbol(char[])>($r1);

        if $z0 != 0 goto label1;

        $r1 = <com.hp.hpl.sparta.ParseCharStream: char[] PUBLIC>;

        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isSymbol(char[])>($r1);

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    private static final boolean isIn(char, char[])
    {
        int $i1, $i2, $i4;
        char[] $r0;
        char $c0, $c3;

        $c0 := @parameter0: char;

        $r0 := @parameter1: char[];

        $i1 = 0;

     label1:
        $i2 = lengthof $r0;

        if $i1 < $i2 goto label2;

        return 0;

     label2:
        $c3 = $r0[$i1];

        $i2 = (int) $c0;

        $i4 = (int) $c3;

        if $i2 != $i4 goto label3;

        return 1;

     label3:
        $i1 = $i1 + 1;

        goto label1;
    }

    private static boolean isLetter(char)
    {
        int $i1, $i2;
        char $c0;
        java.lang.String $r0;

        $c0 := @parameter0: char;

        $r0 = "abcdefghijklmnopqrstuvwxyz";

        $c0 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c0);

        $i1 = (int) $c0;

        $i1 = virtualinvoke $r0.<java.lang.String: int indexOf(int)>($i1);

        $i2 = -1;

        if $i1 == $i2 goto label1;

        return 1;

     label1:
        return 0;
    }

    private boolean isMisc() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isComment()>();

        if $z0 != 0 goto label1;

        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isPi()>();

        if $z0 != 0 goto label1;

        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isS()>();

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    private boolean isNameChar() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        boolean[] $r1;
        int $i1;
        char $c0;
        com.hp.hpl.sparta.ParseCharStream r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        $c0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char peekChar()>();

        $i1 = (int) $c0;

        if $i1 >= 128 goto label1;

        $r1 = <com.hp.hpl.sparta.ParseCharStream: boolean[] IS_NAME_CHAR>;

        $i1 = (int) $c0;

        $z0 = $r1[$i1];

        return $z0;

     label1:
        $z0 = staticinvoke <com.hp.hpl.sparta.ParseCharStream: boolean isNameChar(char)>($c0);

        return $z0;
    }

    private static boolean isNameChar(char)
    {
        char[] $r0;
        char $c0;
        boolean $z0;

        $c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c0);

        if $z0 != 0 goto label1;

        $z0 = staticinvoke <com.hp.hpl.sparta.ParseCharStream: boolean isLetter(char)>($c0);

        if $z0 != 0 goto label1;

        $r0 = <com.hp.hpl.sparta.ParseCharStream: char[] NAME_PUNCT_CHARS>;

        $z0 = staticinvoke <com.hp.hpl.sparta.ParseCharStream: boolean isIn(char,char[])>($c0, $r0);

        if $z0 != 0 goto label1;

        $z0 = staticinvoke <com.hp.hpl.sparta.ParseCharStream: boolean isExtender(char)>($c0);

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    private boolean isPeReference() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isChar(char)>(37);

        return $z0;
    }

    private final boolean isPi() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        char[] $r1;
        com.hp.hpl.sparta.ParseCharStream r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        $r1 = <com.hp.hpl.sparta.ParseCharStream: char[] PI_BEGIN>;

        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isSymbol(char[])>($r1);

        return $z0;
    }

    private final boolean isReference() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isChar(char)>(38);

        return $z0;
    }

    private final boolean isS() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isChar(char,char,char,char)>(32, 9, 13, 10);

        return $z0;
    }

    private final boolean isSymbol(char[]) throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        char $c3, $c4;
        int $i0, $i1, $i2, $i5;
        char[] $r1, $r2;
        com.hp.hpl.sparta.ParseCharStream r0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        $r1 := @parameter0: char[];

        $i0 = lengthof $r1;

        $i1 = r0.<com.hp.hpl.sparta.ParseCharStream: int endPos_>;

        $i2 = r0.<com.hp.hpl.sparta.ParseCharStream: int curPos_>;

        $i1 = $i1 - $i2;

        if $i1 >= $i0 goto label1;

        $i1 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: int fillBuf(int)>($i0);

        if $i1 > 0 goto label1;

        $i0 = -1;

        r0.<com.hp.hpl.sparta.ParseCharStream: int ch_> = $i0;

        return 0;

     label1:
        $r2 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] cbuf_>;

        $i1 = r0.<com.hp.hpl.sparta.ParseCharStream: int endPos_>;

        $i2 = -1;

        $i1 = $i1 + $i2;

        $c3 = $r2[$i1];

        $i1 = (int) $c3;

        r0.<com.hp.hpl.sparta.ParseCharStream: int ch_> = $i1;

        $i1 = r0.<com.hp.hpl.sparta.ParseCharStream: int endPos_>;

        $i2 = r0.<com.hp.hpl.sparta.ParseCharStream: int curPos_>;

        $i1 = $i1 - $i2;

        if $i1 < $i0 goto label4;

        $i1 = 0;

     label2:
        if $i1 < $i0 goto label3;

        return 1;

     label3:
        $r2 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] cbuf_>;

        $i2 = r0.<com.hp.hpl.sparta.ParseCharStream: int curPos_>;

        $i2 = $i2 + $i1;

        $c3 = $r2[$i2];

        $c4 = $r1[$i1];

        $i2 = (int) $c3;

        $i5 = (int) $c4;

        if $i2 != $i5 goto label4;

        $i1 = $i1 + 1;

        goto label2;

     label4:
        return 0;
    }

    private boolean isVersionNumChar() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        int $i1;
        char[] $r1;
        char $c0;
        com.hp.hpl.sparta.ParseCharStream r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        $c0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char peekChar()>();

        $z0 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c0);

        if $z0 != 0 goto label3;

        $i1 = (int) $c0;

        if 97 > $i1 goto label1;

        $i1 = (int) $c0;

        if $i1 <= 122 goto label3;

     label1:
        $i1 = (int) $c0;

        if 90 > $i1 goto label2;

        $i1 = (int) $c0;

        if $i1 <= 90 goto label3;

     label2:
        $r1 = <com.hp.hpl.sparta.ParseCharStream: char[] VERSIONNUM_PUNC_CHARS>;

        $z0 = staticinvoke <com.hp.hpl.sparta.ParseCharStream: boolean isIn(char,char[])>($c0, $r1);

        if $z0 == 0 goto label4;

     label3:
        return 1;

     label4:
        return 0;
    }

    private boolean isXmlDecl() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        char[] $r1;
        com.hp.hpl.sparta.ParseCharStream r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        $r1 = <com.hp.hpl.sparta.ParseCharStream: char[] XML_BEGIN>;

        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isSymbol(char[])>($r1);

        return $z0;
    }

    private final char peekChar() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        int $i0, $i1;
        char[] $r1;
        com.hp.hpl.sparta.ParseException $r2;
        char $c2;
        com.hp.hpl.sparta.ParseCharStream r0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        $i0 = r0.<com.hp.hpl.sparta.ParseCharStream: int curPos_>;

        $i1 = r0.<com.hp.hpl.sparta.ParseCharStream: int endPos_>;

        if $i0 < $i1 goto label1;

        $i0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: int fillBuf()>();

        $i1 = -1;

        if $i0 != $i1 goto label1;

        $r2 = new com.hp.hpl.sparta.ParseException;

        specialinvoke $r2.<com.hp.hpl.sparta.ParseException: void <init>(com.hp.hpl.sparta.ParseCharStream,java.lang.String)>(r0, "unexpected end of expression.");

        throw $r2;

     label1:
        $r1 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] cbuf_>;

        $i0 = r0.<com.hp.hpl.sparta.ParseCharStream: int curPos_>;

        $c2 = $r1[$i0];

        return $c2;
    }

    private java.lang.String readAttValue() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        java.lang.StringBuffer $r1;
        char[] $r3;
        char $c0, $c1;
        java.lang.String $r2;
        com.hp.hpl.sparta.ParseCharStream r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        $c0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readChar(char,char)>(39, 34);

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

     label1:
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isChar(char)>($c0);

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readChar(char)>($c0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;

     label2:
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isReference()>();

        if $z0 == 0 goto label3;

        $r3 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char[] readReference()>();

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r3);

        goto label1;

     label3:
        $c1 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readChar()>();

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);

        goto label1;
    }

    private void readAttribute(com.hp.hpl.sparta.Element) throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseLog $r5;
        com.hp.hpl.sparta.Element $r1;
        java.lang.StringBuffer $r6;
        int $i0;
        java.lang.String $r2, $r3, $r4, $r7;
        com.hp.hpl.sparta.ParseCharStream r0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        $r1 := @parameter0: com.hp.hpl.sparta.Element;

        $r2 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String readName()>();

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readEq()>();

        $r3 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String readAttValue()>();

        $r4 = virtualinvoke $r1.<com.hp.hpl.sparta.Element: java.lang.String getAttribute(java.lang.String)>($r2);

        if $r4 == null goto label1;

        $r5 = r0.<com.hp.hpl.sparta.ParseCharStream: com.hp.hpl.sparta.ParseLog log_>;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Element ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" contains attribute ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("more than once");

        $r4 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        $r7 = r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String systemId_>;

        $i0 = virtualinvoke r0.<com.hp.hpl.sparta.ParseCharStream: int getLineNumber()>();

        interfaceinvoke $r5.<com.hp.hpl.sparta.ParseLog: void warning(java.lang.String,java.lang.String,int)>($r4, $r7, $i0);

     label1:
        virtualinvoke $r1.<com.hp.hpl.sparta.Element: void setAttribute(java.lang.String,java.lang.String)>($r2, $r3);

        return;
    }

    private void readCdSect() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        char $c1;
        java.lang.StringBuffer $r2;
        int $i0;
        char[] $r1;
        java.lang.String $r3;
        com.hp.hpl.sparta.ParseCharStream r0;
        com.hp.hpl.sparta.ParseHandler $r4;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        $r2 = null;

        $r1 = <com.hp.hpl.sparta.ParseCharStream: char[] BEGIN_CDATA>;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readSymbol(char[])>($r1);

        $i0 = 0;

     label1:
        $r1 = <com.hp.hpl.sparta.ParseCharStream: char[] END_CDATA>;

        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isSymbol(char[])>($r1);

        if $z0 == 0 goto label2;

        $r1 = <com.hp.hpl.sparta.ParseCharStream: char[] END_CDATA>;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readSymbol(char[])>($r1);

        if $r2 == null goto label6;

        $r1 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] tmpBuf_>;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>($r1, 0, $i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        $r1 = virtualinvoke $r3.<java.lang.String: char[] toCharArray()>();

        $r4 = r0.<com.hp.hpl.sparta.ParseCharStream: com.hp.hpl.sparta.ParseHandler handler_>;

        $i0 = lengthof $r1;

        interfaceinvoke $r4.<com.hp.hpl.sparta.ParseHandler: void characters(char[],int,int)>($r1, 0, $i0);

        return;

     label2:
        if $i0 < 255 goto label7;

        if $r2 != null goto label5;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>(int)>($i0);

        $r1 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] tmpBuf_>;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>($r1, 0, $i0);

     label3:
        $i0 = 0;

     label4:
        $r1 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] tmpBuf_>;

        $c1 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readChar()>();

        $r1[$i0] = $c1;

        $i0 = $i0 + 1;

        goto label1;

     label5:
        $r1 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] tmpBuf_>;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>($r1, 0, $i0);

        goto label3;

     label6:
        $r4 = r0.<com.hp.hpl.sparta.ParseCharStream: com.hp.hpl.sparta.ParseHandler handler_>;

        $r1 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] tmpBuf_>;

        interfaceinvoke $r4.<com.hp.hpl.sparta.ParseHandler: void characters(char[],int,int)>($r1, 0, $i0);

        return;

     label7:
        goto label4;
    }

    private final char readChar() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        int $i0, $i1;
        char[] $r1;
        com.hp.hpl.sparta.ParseException $r2;
        char $c2;
        com.hp.hpl.sparta.ParseCharStream r0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        $i0 = r0.<com.hp.hpl.sparta.ParseCharStream: int curPos_>;

        $i1 = r0.<com.hp.hpl.sparta.ParseCharStream: int endPos_>;

        if $i0 < $i1 goto label1;

        $i0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: int fillBuf()>();

        $i1 = -1;

        if $i0 != $i1 goto label1;

        $r2 = new com.hp.hpl.sparta.ParseException;

        specialinvoke $r2.<com.hp.hpl.sparta.ParseException: void <init>(com.hp.hpl.sparta.ParseCharStream,java.lang.String)>(r0, "unexpected end of expression.");

        throw $r2;

     label1:
        $r1 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] cbuf_>;

        $i0 = r0.<com.hp.hpl.sparta.ParseCharStream: int curPos_>;

        $c2 = $r1[$i0];

        $i0 = (int) $c2;

        if $i0 != 10 goto label2;

        $i0 = r0.<com.hp.hpl.sparta.ParseCharStream: int lineNumber_>;

        $i0 = $i0 + 1;

        r0.<com.hp.hpl.sparta.ParseCharStream: int lineNumber_> = $i0;

     label2:
        $r1 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] cbuf_>;

        $i1 = r0.<com.hp.hpl.sparta.ParseCharStream: int curPos_>;

        $i0 = $i1 + 1;

        r0.<com.hp.hpl.sparta.ParseCharStream: int curPos_> = $i0;

        $c2 = $r1[$i1];

        return $c2;
    }

    private final char readChar(char, char) throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseException $r2;
        char $c0, $c1, $c2;
        int $i3, $i4;
        char[] $r1;
        com.hp.hpl.sparta.ParseCharStream r0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        $c0 := @parameter0: char;

        $c1 := @parameter1: char;

        $c2 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readChar()>();

        $i3 = (int) $c2;

        $i4 = (int) $c0;

        if $i3 == $i4 goto label1;

        $i3 = (int) $c2;

        $i4 = (int) $c1;

        if $i3 == $i4 goto label1;

        $r2 = new com.hp.hpl.sparta.ParseException;

        $r1 = newarray (char)[2];

        $r1[0] = $c0;

        $r1[1] = $c1;

        specialinvoke $r2.<com.hp.hpl.sparta.ParseException: void <init>(com.hp.hpl.sparta.ParseCharStream,char,char[])>(r0, $c2, $r1);

        throw $r2;

     label1:
        return $c2;
    }

    private final char readChar(char, char, char, char) throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseException $r2;
        char $c0, $c1, $c2, $c3, $c4;
        int $i5, $i6;
        char[] $r1;
        com.hp.hpl.sparta.ParseCharStream r0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        $c0 := @parameter0: char;

        $c1 := @parameter1: char;

        $c2 := @parameter2: char;

        $c3 := @parameter3: char;

        $c4 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readChar()>();

        $i5 = (int) $c4;

        $i6 = (int) $c0;

        if $i5 == $i6 goto label1;

        $i5 = (int) $c4;

        $i6 = (int) $c1;

        if $i5 == $i6 goto label1;

        $i5 = (int) $c4;

        $i6 = (int) $c2;

        if $i5 == $i6 goto label1;

        $i5 = (int) $c4;

        $i6 = (int) $c3;

        if $i5 == $i6 goto label1;

        $r2 = new com.hp.hpl.sparta.ParseException;

        $r1 = newarray (char)[4];

        $r1[0] = $c0;

        $r1[1] = $c1;

        $r1[2] = $c2;

        $r1[3] = $c3;

        specialinvoke $r2.<com.hp.hpl.sparta.ParseException: void <init>(com.hp.hpl.sparta.ParseCharStream,char,char[])>(r0, $c4, $r1);

        throw $r2;

     label1:
        return $c4;
    }

    private final void readChar(char) throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        int $i2, $i3;
        com.hp.hpl.sparta.ParseException $r1;
        char $c0, $c1;
        com.hp.hpl.sparta.ParseCharStream r0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        $c0 := @parameter0: char;

        $c1 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readChar()>();

        $i2 = (int) $c1;

        $i3 = (int) $c0;

        if $i2 == $i3 goto label1;

        $r1 = new com.hp.hpl.sparta.ParseException;

        specialinvoke $r1.<com.hp.hpl.sparta.ParseException: void <init>(com.hp.hpl.sparta.ParseCharStream,char,char)>(r0, $c1, $c0);

        throw $r1;

     label1:
        return;
    }

    private char readCharRef() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        java.lang.Throwable $r4;
        char $c2;
        com.hp.hpl.sparta.ParseLog $r3;
        byte $b0;
        java.lang.StringBuffer $r5;
        int $i1, $i3;
        char[] $r1;
        java.lang.String $r2, $r6;
        com.hp.hpl.sparta.ParseCharStream r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        $r1 = <com.hp.hpl.sparta.ParseCharStream: char[] CHARREF_BEGIN>;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readSymbol(char[])>($r1);

        $b0 = 10;

        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isChar(char)>(120);

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readChar()>();

        $b0 = 16;

     label1:
        $i1 = 0;

     label2:
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isChar(char)>(59);

        if $z0 == 0 goto label5;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readChar(char)>(59);

        $r2 = new java.lang.String;

        $r1 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] tmpBuf_>;

        specialinvoke $r2.<java.lang.String: void <init>(char[],int,int)>($r1, 0, $i1);

     label3:
        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r2, $b0);

     label4:
        $c2 = (char) $i1;

        return $c2;

     label5:
        $r1 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] tmpBuf_>;

        $i3 = $i1 + 1;

        $c2 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readChar()>();

        $r1[$i1] = $c2;

        if $i3 < 255 goto label9;

        $r3 = r0.<com.hp.hpl.sparta.ParseCharStream: com.hp.hpl.sparta.ParseLog log_>;

        $r2 = r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String systemId_>;

        $i1 = virtualinvoke r0.<com.hp.hpl.sparta.ParseCharStream: int getLineNumber()>();

        interfaceinvoke $r3.<com.hp.hpl.sparta.ParseLog: void warning(java.lang.String,java.lang.String,int)>("Tmp buffer overflow on readCharRef", $r2, $i1);

        return 32;

     label6:
        $r4 := @caughtexception;

        $r3 = r0.<com.hp.hpl.sparta.ParseCharStream: com.hp.hpl.sparta.ParseLog log_>;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\" is not a valid ");

        if $b0 != 16 goto label8;

        $r2 = "hexadecimal";

     label7:
        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" number");

        $r2 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        $r6 = r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String systemId_>;

        $i1 = virtualinvoke r0.<com.hp.hpl.sparta.ParseCharStream: int getLineNumber()>();

        interfaceinvoke $r3.<com.hp.hpl.sparta.ParseLog: void warning(java.lang.String,java.lang.String,int)>($r2, $r6, $i1);

        return 32;

     label8:
        $r2 = "decimal";

        goto label7;

     label9:
        $i1 = $i3;

        goto label2;

        catch java.lang.NumberFormatException from label3 to label4 with label6;
    }

    private final void readComment() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        char[] $r1;
        com.hp.hpl.sparta.ParseCharStream r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        $r1 = <com.hp.hpl.sparta.ParseCharStream: char[] COMMENT_BEGIN>;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readSymbol(char[])>($r1);

     label1:
        $r1 = <com.hp.hpl.sparta.ParseCharStream: char[] COMMENT_END>;

        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isSymbol(char[])>($r1);

        if $z0 == 0 goto label2;

        $r1 = <com.hp.hpl.sparta.ParseCharStream: char[] COMMENT_END>;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readSymbol(char[])>($r1);

        return;

     label2:
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readChar()>();

        goto label1;
    }

    private void readContent() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        int $i0;
        char[] $r2;
        com.hp.hpl.sparta.ParseCharStream r0;
        com.hp.hpl.sparta.ParseHandler $r1;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readPossibleCharData()>();

        $z0 = 1;

     label1:
        if $z0 != 0 goto label2;

        return;

     label2:
        $z1 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isETag()>();

        if $z1 == 0 goto label4;

        $z0 = 0;

     label3:
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readPossibleCharData()>();

        goto label1;

     label4:
        $z1 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isReference()>();

        if $z1 == 0 goto label5;

        $r2 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char[] readReference()>();

        $r1 = r0.<com.hp.hpl.sparta.ParseCharStream: com.hp.hpl.sparta.ParseHandler handler_>;

        $i0 = lengthof $r2;

        interfaceinvoke $r1.<com.hp.hpl.sparta.ParseHandler: void characters(char[],int,int)>($r2, 0, $i0);

        goto label3;

     label5:
        $z1 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isCdSect()>();

        if $z1 == 0 goto label6;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readCdSect()>();

        goto label3;

     label6:
        $z1 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isPi()>();

        if $z1 == 0 goto label7;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readPi()>();

        goto label3;

     label7:
        $z1 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isComment()>();

        if $z1 == 0 goto label8;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readComment()>();

        goto label3;

     label8:
        $z1 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isChar(char)>(60);

        if $z1 == 0 goto label9;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: com.hp.hpl.sparta.Element readElement()>();

        goto label3;

     label9:
        $z0 = 0;

        goto label3;
    }

    private void readDeclSep() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isPeReference()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String readPeReference()>();

        return;

     label1:
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readS()>();

        return;
    }

    private void readDocTypeDecl() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        char[] $r1;
        java.lang.String $r2;
        com.hp.hpl.sparta.ParseCharStream r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        $r1 = <com.hp.hpl.sparta.ParseCharStream: char[] DOCTYPE_BEGIN>;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readSymbol(char[])>($r1);

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readS()>();

        $r2 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String readName()>();

        r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String docTypeName_> = $r2;

        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isS()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readS()>();

        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isChar(char)>(62);

        if $z0 != 0 goto label1;

        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isChar(char)>(91);

        if $z0 != 0 goto label1;

        r0.<com.hp.hpl.sparta.ParseCharStream: boolean isExternalDtd_> = 1;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String readExternalId()>();

        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isS()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readS()>();

     label1:
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isChar(char)>(91);

        if $z0 == 0 goto label3;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readChar()>();

     label2:
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isChar(char)>(93);

        if $z0 == 0 goto label4;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readChar(char)>(93);

        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isS()>();

        if $z0 == 0 goto label3;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readS()>();

     label3:
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readChar(char)>(62);

        return;

     label4:
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isDeclSep()>();

        if $z0 == 0 goto label5;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readDeclSep()>();

        goto label2;

     label5:
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readMarkupDecl()>();

        goto label2;
    }

    private void readETag(com.hp.hpl.sparta.Element) throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseLog $r5;
        com.hp.hpl.sparta.Element $r1;
        java.lang.StringBuffer $r6;
        int $i0;
        char[] $r2;
        java.lang.String $r3, $r4;
        com.hp.hpl.sparta.ParseCharStream r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        $r1 := @parameter0: com.hp.hpl.sparta.Element;

        $r2 = <com.hp.hpl.sparta.ParseCharStream: char[] BEGIN_ETAG>;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readSymbol(char[])>($r2);

        $r3 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String readName()>();

        $r4 = virtualinvoke $r1.<com.hp.hpl.sparta.Element: java.lang.String getTagName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label1;

        $r5 = r0.<com.hp.hpl.sparta.ParseCharStream: com.hp.hpl.sparta.ParseLog log_>;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("end tag (");

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") does not match begin tag (");

        $r3 = virtualinvoke $r1.<com.hp.hpl.sparta.Element: java.lang.String getTagName()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r3 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        $r4 = r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String systemId_>;

        $i0 = virtualinvoke r0.<com.hp.hpl.sparta.ParseCharStream: int getLineNumber()>();

        interfaceinvoke $r5.<com.hp.hpl.sparta.ParseLog: void warning(java.lang.String,java.lang.String,int)>($r3, $r4, $i0);

     label1:
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isS()>();

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readS()>();

     label2:
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readChar(char)>(62);

        return;
    }

    private final com.hp.hpl.sparta.Element readElement() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.Element $r1;
        com.hp.hpl.sparta.ParseCharStream r0;
        com.hp.hpl.sparta.ParseHandler $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        $r1 = new com.hp.hpl.sparta.Element;

        specialinvoke $r1.<com.hp.hpl.sparta.Element: void <init>()>();

        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean readEmptyElementTagOrSTag(com.hp.hpl.sparta.Element)>($r1);

        $r2 = r0.<com.hp.hpl.sparta.ParseCharStream: com.hp.hpl.sparta.ParseHandler handler_>;

        interfaceinvoke $r2.<com.hp.hpl.sparta.ParseHandler: void startElement(com.hp.hpl.sparta.Element)>($r1);

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readContent()>();

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readETag(com.hp.hpl.sparta.Element)>($r1);

     label1:
        $r2 = r0.<com.hp.hpl.sparta.ParseCharStream: com.hp.hpl.sparta.ParseHandler handler_>;

        interfaceinvoke $r2.<com.hp.hpl.sparta.ParseHandler: void endElement(com.hp.hpl.sparta.Element)>($r1);

        return $r1;
    }

    private boolean readEmptyElementTagOrSTag(com.hp.hpl.sparta.Element) throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.Element $r1;
        char[] $r3;
        java.lang.String $r2;
        com.hp.hpl.sparta.ParseCharStream r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        $r1 := @parameter0: com.hp.hpl.sparta.Element;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readChar(char)>(60);

        $r2 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String readName()>();

        virtualinvoke $r1.<com.hp.hpl.sparta.Element: void setTagName(java.lang.String)>($r2);

     label1:
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isS()>();

        if $z0 != 0 goto label3;

        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isS()>();

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readS()>();

     label2:
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isChar(char)>(62);

        if $z0 == 0 goto label4;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readChar(char)>(62);

        return $z0;

     label3:
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readS()>();

        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isChar(char,char)>(47, 62);

        if $z0 != 0 goto label1;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readAttribute(com.hp.hpl.sparta.Element)>($r1);

        goto label1;

     label4:
        $r3 = <com.hp.hpl.sparta.ParseCharStream: char[] END_EMPTYTAG>;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readSymbol(char[])>($r3);

        return $z0;
    }

    private java.lang.String readEncodingDecl() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        java.lang.StringBuffer $r2;
        char[] $r1;
        char $c0, $c1;
        java.lang.String $r3;
        com.hp.hpl.sparta.ParseCharStream r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        $r1 = <com.hp.hpl.sparta.ParseCharStream: char[] ENCODING>;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readSymbol(char[])>($r1);

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readEq()>();

        $c0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readChar(char,char)>(39, 34);

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

     label1:
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isChar(char)>($c0);

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readChar(char)>($c0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;

     label2:
        $c1 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readChar()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);

        goto label1;
    }

    private void readEntityDecl() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        char[] $r1;
        com.hp.hpl.sparta.ParseException $r5;
        java.lang.String $r2, $r3;
        com.hp.hpl.sparta.ParseCharStream r0;
        java.util.Hashtable $r4;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        $r1 = <com.hp.hpl.sparta.ParseCharStream: char[] ENTITY_BEGIN>;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readSymbol(char[])>($r1);

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readS()>();

        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isChar(char)>(37);

        if $z0 == 0 goto label5;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readChar(char)>(37);

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readS()>();

        $r2 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String readName()>();

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readS()>();

        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isEntityValue()>();

        if $z0 == 0 goto label4;

        $r3 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String readEntityValue()>();

     label1:
        $r4 = r0.<com.hp.hpl.sparta.ParseCharStream: java.util.Hashtable pes_>;

        virtualinvoke $r4.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r3);

     label2:
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isS()>();

        if $z0 == 0 goto label3;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readS()>();

     label3:
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readChar(char)>(62);

        return;

     label4:
        $r3 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String readExternalId()>();

        goto label1;

     label5:
        $r2 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String readName()>();

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readS()>();

        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isEntityValue()>();

        if $z0 == 0 goto label7;

        $r3 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String readEntityValue()>();

     label6:
        $r4 = r0.<com.hp.hpl.sparta.ParseCharStream: java.util.Hashtable entities_>;

        virtualinvoke $r4.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r3);

        goto label2;

     label7:
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isExternalId()>();

        if $z0 == 0 goto label9;

        $r3 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String readExternalId()>();

        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isS()>();

        if $z0 == 0 goto label8;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readS()>();

     label8:
        $r1 = <com.hp.hpl.sparta.ParseCharStream: char[] NDATA>;

        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isSymbol(char[])>($r1);

        if $z0 == 0 goto label6;

        $r1 = <com.hp.hpl.sparta.ParseCharStream: char[] NDATA>;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readSymbol(char[])>($r1);

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readS()>();

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String readName()>();

        goto label6;

     label9:
        $r5 = new com.hp.hpl.sparta.ParseException;

        specialinvoke $r5.<com.hp.hpl.sparta.ParseException: void <init>(com.hp.hpl.sparta.ParseCharStream,java.lang.String)>(r0, "expecting double-quote, \"PUBLIC\" or \"SYSTEM\" while reading entity declaration");

        throw $r5;
    }

    private java.lang.String readEntityRef() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseLog $r5;
        java.lang.StringBuffer $r6;
        int $i0;
        java.lang.Object $r3;
        java.lang.String $r1, $r4, $r7;
        com.hp.hpl.sparta.ParseCharStream r0;
        java.util.Hashtable $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readChar(char)>(38);

        $r1 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String readName()>();

        $r2 = r0.<com.hp.hpl.sparta.ParseCharStream: java.util.Hashtable entities_>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (java.lang.String) $r3;

        if $r4 != null goto label1;

        $r4 = "";

        $z0 = r0.<com.hp.hpl.sparta.ParseCharStream: boolean isExternalDtd_>;

        if $z0 == 0 goto label2;

        $r5 = r0.<com.hp.hpl.sparta.ParseCharStream: com.hp.hpl.sparta.ParseLog log_>;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&");

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("; not found -- possibly defined in external DTD)");

        $r1 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        $r7 = r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String systemId_>;

        $i0 = virtualinvoke r0.<com.hp.hpl.sparta.ParseCharStream: int getLineNumber()>();

        interfaceinvoke $r5.<com.hp.hpl.sparta.ParseLog: void warning(java.lang.String,java.lang.String,int)>($r1, $r7, $i0);

     label1:
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readChar(char)>(59);

        return $r4;

     label2:
        $r5 = r0.<com.hp.hpl.sparta.ParseCharStream: com.hp.hpl.sparta.ParseLog log_>;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No declaration of &");

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r1 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        $r7 = r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String systemId_>;

        $i0 = virtualinvoke r0.<com.hp.hpl.sparta.ParseCharStream: int getLineNumber()>();

        interfaceinvoke $r5.<com.hp.hpl.sparta.ParseLog: void warning(java.lang.String,java.lang.String,int)>($r1, $r7, $i0);

        goto label1;
    }

    private final java.lang.String readEntityValue() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        java.lang.StringBuffer $r1;
        char[] $r3;
        char $c0, $c1;
        java.lang.String $r2;
        com.hp.hpl.sparta.ParseCharStream r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        $c0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readChar(char,char)>(39, 34);

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

     label1:
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isChar(char)>($c0);

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readChar(char)>($c0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;

     label2:
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isPeReference()>();

        if $z0 == 0 goto label3;

        $r2 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String readPeReference()>();

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        goto label1;

     label3:
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isReference()>();

        if $z0 == 0 goto label4;

        $r3 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char[] readReference()>();

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r3);

        goto label1;

     label4:
        $c1 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readChar()>();

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);

        goto label1;
    }

    private final void readEq() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isS()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readS()>();

     label1:
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readChar(char)>(61);

        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isS()>();

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readS()>();

     label2:
        return;
    }

    private java.lang.String readExternalId() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        char[] $r1;
        com.hp.hpl.sparta.ParseException $r2;
        com.hp.hpl.sparta.ParseCharStream r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        $r1 = <com.hp.hpl.sparta.ParseCharStream: char[] SYSTEM>;

        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isSymbol(char[])>($r1);

        if $z0 == 0 goto label2;

        $r1 = <com.hp.hpl.sparta.ParseCharStream: char[] SYSTEM>;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readSymbol(char[])>($r1);

     label1:
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readS()>();

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readSystemLiteral()>();

        return "(WARNING: external ID not read)";

     label2:
        $r1 = <com.hp.hpl.sparta.ParseCharStream: char[] PUBLIC>;

        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isSymbol(char[])>($r1);

        if $z0 == 0 goto label3;

        $r1 = <com.hp.hpl.sparta.ParseCharStream: char[] PUBLIC>;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readSymbol(char[])>($r1);

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readS()>();

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readPubidLiteral()>();

        goto label1;

     label3:
        $r2 = new com.hp.hpl.sparta.ParseException;

        specialinvoke $r2.<com.hp.hpl.sparta.ParseException: void <init>(com.hp.hpl.sparta.ParseCharStream,java.lang.String)>(r0, "expecting \"SYSTEM\" or \"PUBLIC\" while reading external ID");

        throw $r2;
    }

    private void readMarkupDecl() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        char[] $r1;
        com.hp.hpl.sparta.ParseException $r2;
        char $c0;
        com.hp.hpl.sparta.ParseCharStream r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isPi()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readPi()>();

        return;

     label1:
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isComment()>();

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readComment()>();

        return;

     label2:
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isEntityDecl()>();

        if $z0 == 0 goto label3;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readEntityDecl()>();

        return;

     label3:
        $r1 = <com.hp.hpl.sparta.ParseCharStream: char[] MARKUPDECL_BEGIN>;

        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isSymbol(char[])>($r1);

        if $z0 == 0 goto label9;

     label4:
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isChar(char)>(62);

        if $z0 == 0 goto label5;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readChar(char)>(62);

        return;

     label5:
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isChar(char,char)>(39, 34);

        if $z0 == 0 goto label8;

        $c0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readChar()>();

     label6:
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isChar(char)>($c0);

        if $z0 == 0 goto label7;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readChar(char)>($c0);

        goto label4;

     label7:
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readChar()>();

        goto label6;

     label8:
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readChar()>();

        goto label4;

     label9:
        $r2 = new com.hp.hpl.sparta.ParseException;

        specialinvoke $r2.<com.hp.hpl.sparta.ParseException: void <init>(com.hp.hpl.sparta.ParseCharStream,java.lang.String)>(r0, "expecting processing instruction, comment, or \"<!\"");

        throw $r2;
    }

    private void readMisc() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseException $r1;
        com.hp.hpl.sparta.ParseCharStream r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isComment()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readComment()>();

        return;

     label1:
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isPi()>();

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readPi()>();

        return;

     label2:
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isS()>();

        if $z0 == 0 goto label3;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readS()>();

        return;

     label3:
        $r1 = new com.hp.hpl.sparta.ParseException;

        specialinvoke $r1.<com.hp.hpl.sparta.ParseException: void <init>(com.hp.hpl.sparta.ParseCharStream,java.lang.String)>(r0, "expecting comment or processing instruction or space");

        throw $r1;
    }

    private final java.lang.String readName() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        java.lang.StringBuffer $r1;
        int $i0;
        char[] $r2;
        char $c1;
        java.lang.String $r3;
        com.hp.hpl.sparta.ParseCharStream r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        $r1 = null;

        $r2 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] tmpBuf_>;

        $i0 = 1;

        $c1 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readNameStartChar()>();

        $r2[0] = $c1;

     label1:
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isNameChar()>();

        if $z0 != 0 goto label2;

        if $r1 != null goto label6;

        $r3 = new java.lang.String;

        $r2 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] tmpBuf_>;

        specialinvoke $r3.<java.lang.String: void <init>(char[],int,int)>($r2, 0, $i0);

        $r3 = staticinvoke <com.hp.hpl.sparta.Sparta: java.lang.String intern(java.lang.String)>($r3);

        return $r3;

     label2:
        if $i0 < 255 goto label7;

        if $r1 != null goto label5;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>(int)>($i0);

        $r2 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] tmpBuf_>;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>($r2, 0, $i0);

     label3:
        $i0 = 0;

     label4:
        $r2 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] tmpBuf_>;

        $c1 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readChar()>();

        $r2[$i0] = $c1;

        $i0 = $i0 + 1;

        goto label1;

     label5:
        $r2 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] tmpBuf_>;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>($r2, 0, $i0);

        goto label3;

     label6:
        $r2 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] tmpBuf_>;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>($r2, 0, $i0);

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;

     label7:
        goto label4;
    }

    private char readNameStartChar() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        int $i1;
        com.hp.hpl.sparta.ParseException $r1;
        char $c0;
        com.hp.hpl.sparta.ParseCharStream r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        $c0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readChar()>();

        $z0 = staticinvoke <com.hp.hpl.sparta.ParseCharStream: boolean isLetter(char)>($c0);

        if $z0 != 0 goto label1;

        $i1 = (int) $c0;

        if $i1 == 95 goto label1;

        $i1 = (int) $c0;

        if $i1 == 58 goto label1;

        $r1 = new com.hp.hpl.sparta.ParseException;

        specialinvoke $r1.<com.hp.hpl.sparta.ParseException: void <init>(com.hp.hpl.sparta.ParseCharStream,char,java.lang.String)>(r0, $c0, "letter, underscore, colon");

        throw $r1;

     label1:
        return $c0;
    }

    private java.lang.String readPeReference() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseLog $r1;
        java.lang.StringBuffer $r6;
        int $i0;
        java.lang.Object $r4;
        java.lang.String $r2, $r5, $r7;
        com.hp.hpl.sparta.ParseCharStream r0;
        java.util.Hashtable $r3;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readChar(char)>(37);

        $r2 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String readName()>();

        $r3 = r0.<com.hp.hpl.sparta.ParseCharStream: java.util.Hashtable pes_>;

        $r4 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r2);

        $r5 = (java.lang.String) $r4;

        if $r5 != null goto label1;

        $r5 = "";

        $r1 = r0.<com.hp.hpl.sparta.ParseCharStream: com.hp.hpl.sparta.ParseLog log_>;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No declaration of %");

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r2 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        $r7 = r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String systemId_>;

        $i0 = virtualinvoke r0.<com.hp.hpl.sparta.ParseCharStream: int getLineNumber()>();

        interfaceinvoke $r1.<com.hp.hpl.sparta.ParseLog: void warning(java.lang.String,java.lang.String,int)>($r2, $r7, $i0);

     label1:
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readChar(char)>(59);

        return $r5;
    }

    private final void readPi() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        char[] $r1;
        com.hp.hpl.sparta.ParseCharStream r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        $r1 = <com.hp.hpl.sparta.ParseCharStream: char[] PI_BEGIN>;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readSymbol(char[])>($r1);

     label1:
        $r1 = <com.hp.hpl.sparta.ParseCharStream: char[] QU_END>;

        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isSymbol(char[])>($r1);

        if $z0 == 0 goto label2;

        $r1 = <com.hp.hpl.sparta.ParseCharStream: char[] QU_END>;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readSymbol(char[])>($r1);

        return;

     label2:
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readChar()>();

        goto label1;
    }

    private void readPossibleCharData() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        int $i0, $i2;
        char[] $r1;
        char $c1;
        com.hp.hpl.sparta.ParseCharStream r0;
        com.hp.hpl.sparta.ParseHandler $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        $i0 = 0;

     label1:
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isChar(char)>(60);

        if $z0 != 0 goto label2;

        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isChar(char)>(38);

        if $z0 != 0 goto label2;

        $r1 = <com.hp.hpl.sparta.ParseCharStream: char[] END_CDATA>;

        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isSymbol(char[])>($r1);

        if $z0 == 0 goto label3;

     label2:
        if $i0 <= 0 goto label5;

        $r2 = r0.<com.hp.hpl.sparta.ParseCharStream: com.hp.hpl.sparta.ParseHandler handler_>;

        $r1 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] tmpBuf_>;

        interfaceinvoke $r2.<com.hp.hpl.sparta.ParseHandler: void characters(char[],int,int)>($r1, 0, $i0);

        return;

     label3:
        $r1 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] tmpBuf_>;

        $c1 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readChar()>();

        $r1[$i0] = $c1;

        $r1 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] tmpBuf_>;

        $c1 = $r1[$i0];

        $i2 = (int) $c1;

        if $i2 != 13 goto label4;

        $c1 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char peekChar()>();

        $i2 = (int) $c1;

        if $i2 != 10 goto label4;

        $r1 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] tmpBuf_>;

        $c1 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readChar()>();

        $r1[$i0] = $c1;

     label4:
        $i0 = $i0 + 1;

        if $i0 != 255 goto label1;

        $r2 = r0.<com.hp.hpl.sparta.ParseCharStream: com.hp.hpl.sparta.ParseHandler handler_>;

        $r1 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] tmpBuf_>;

        interfaceinvoke $r2.<com.hp.hpl.sparta.ParseHandler: void characters(char[],int,int)>($r1, 0, 255);

        $i0 = 0;

        goto label1;

     label5:
        return;
    }

    private void readProlog() throws com.hp.hpl.sparta.ParseException, com.hp.hpl.sparta.EncodingMismatchException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isXmlDecl()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readXmlDecl()>();

     label1:
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isMisc()>();

        if $z0 != 0 goto label3;

        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isDocTypeDecl()>();

        if $z0 == 0 goto label5;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readDocTypeDecl()>();

     label2:
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isMisc()>();

        if $z0 != 0 goto label4;

        return;

     label3:
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readMisc()>();

        goto label1;

     label4:
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readMisc()>();

        goto label2;

     label5:
        return;
    }

    private final void readPubidLiteral() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readSystemLiteral()>();

        return;
    }

    private final char[] readReference() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        char[] $r1;
        char $c0;
        java.lang.String $r2;
        com.hp.hpl.sparta.ParseCharStream r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        $r1 = <com.hp.hpl.sparta.ParseCharStream: char[] CHARREF_BEGIN>;

        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isSymbol(char[])>($r1);

        if $z0 == 0 goto label1;

        $r1 = newarray (char)[1];

        $c0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readCharRef()>();

        $r1[0] = $c0;

        return $r1;

     label1:
        $r2 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String readEntityRef()>();

        $r1 = virtualinvoke $r2.<java.lang.String: char[] toCharArray()>();

        return $r1;
    }

    private final void readS() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readChar(char,char,char,char)>(32, 9, 13, 10);

     label1:
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isChar(char,char,char,char)>(32, 9, 13, 10);

        if $z0 != 0 goto label2;

        return;

     label2:
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readChar()>();

        goto label1;
    }

    private final void readSymbol(char[]) throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseException $r3;
        char $c3, $c4;
        int $i0, $i1, $i2, $i5;
        char[] $r1, $r2;
        java.lang.String $r4;
        com.hp.hpl.sparta.ParseCharStream r0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        $r1 := @parameter0: char[];

        $i1 = lengthof $r1;

        $i0 = r0.<com.hp.hpl.sparta.ParseCharStream: int endPos_>;

        $i2 = r0.<com.hp.hpl.sparta.ParseCharStream: int curPos_>;

        $i0 = $i0 - $i2;

        if $i0 >= $i1 goto label1;

        $i0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: int fillBuf(int)>($i1);

        if $i0 > 0 goto label1;

        $i1 = -1;

        r0.<com.hp.hpl.sparta.ParseCharStream: int ch_> = $i1;

        $r3 = new com.hp.hpl.sparta.ParseException;

        specialinvoke $r3.<com.hp.hpl.sparta.ParseException: void <init>(com.hp.hpl.sparta.ParseCharStream,java.lang.String,char[])>(r0, "end of XML file", $r1);

        throw $r3;

     label1:
        $r2 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] cbuf_>;

        $i0 = r0.<com.hp.hpl.sparta.ParseCharStream: int endPos_>;

        $i2 = -1;

        $i0 = $i0 + $i2;

        $c3 = $r2[$i0];

        $i0 = (int) $c3;

        r0.<com.hp.hpl.sparta.ParseCharStream: int ch_> = $i0;

        $i0 = r0.<com.hp.hpl.sparta.ParseCharStream: int endPos_>;

        $i2 = r0.<com.hp.hpl.sparta.ParseCharStream: int curPos_>;

        $i0 = $i0 - $i2;

        if $i0 >= $i1 goto label2;

        $r3 = new com.hp.hpl.sparta.ParseException;

        specialinvoke $r3.<com.hp.hpl.sparta.ParseException: void <init>(com.hp.hpl.sparta.ParseCharStream,java.lang.String,char[])>(r0, "end of XML file", $r1);

        throw $r3;

     label2:
        $i0 = 0;

     label3:
        if $i0 < $i1 goto label4;

        $i0 = r0.<com.hp.hpl.sparta.ParseCharStream: int curPos_>;

        $i1 = $i0 + $i1;

        r0.<com.hp.hpl.sparta.ParseCharStream: int curPos_> = $i1;

        return;

     label4:
        $r2 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] cbuf_>;

        $i2 = r0.<com.hp.hpl.sparta.ParseCharStream: int curPos_>;

        $i2 = $i2 + $i0;

        $c3 = $r2[$i2];

        $c4 = $r1[$i0];

        $i2 = (int) $c3;

        $i5 = (int) $c4;

        if $i2 == $i5 goto label5;

        $r3 = new com.hp.hpl.sparta.ParseException;

        $r4 = new java.lang.String;

        $r2 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] cbuf_>;

        $i0 = r0.<com.hp.hpl.sparta.ParseCharStream: int curPos_>;

        specialinvoke $r4.<java.lang.String: void <init>(char[],int,int)>($r2, $i0, $i1);

        specialinvoke $r3.<com.hp.hpl.sparta.ParseException: void <init>(com.hp.hpl.sparta.ParseCharStream,java.lang.String,char[])>(r0, $r4, $r1);

        throw $r3;

     label5:
        $i0 = $i0 + 1;

        goto label3;
    }

    private final void readSystemLiteral() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        int $i2, $i3;
        char $c0, $c1;
        com.hp.hpl.sparta.ParseCharStream r0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        $c0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readChar()>();

     label1:
        $c1 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char peekChar()>();

        $i2 = (int) $c1;

        $i3 = (int) $c0;

        if $i2 != $i3 goto label2;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readChar(char)>($c0);

        return;

     label2:
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readChar()>();

        goto label1;
    }

    private void readVersionInfo() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        char[] $r1;
        char $c0;
        com.hp.hpl.sparta.ParseCharStream r0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readS()>();

        $r1 = <com.hp.hpl.sparta.ParseCharStream: char[] VERSION>;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readSymbol(char[])>($r1);

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readEq()>();

        $c0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readChar(char,char)>(39, 34);

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readVersionNum()>();

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readChar(char)>($c0);

        return;
    }

    private void readVersionNum() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readChar()>();

     label1:
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isVersionNumChar()>();

        if $z0 != 0 goto label2;

        return;

     label2:
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readChar()>();

        goto label1;
    }

    private void readXmlDecl() throws com.hp.hpl.sparta.ParseException, com.hp.hpl.sparta.EncodingMismatchException, java.io.IOException
    {
        com.hp.hpl.sparta.EncodingMismatchException $r5;
        char[] $r2;
        java.lang.String $r1, $r3, $r4;
        com.hp.hpl.sparta.ParseCharStream r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        $r2 = <com.hp.hpl.sparta.ParseCharStream: char[] XML_BEGIN>;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readSymbol(char[])>($r2);

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readVersionInfo()>();

        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isS()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readS()>();

     label1:
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isEncodingDecl()>();

        if $z0 == 0 goto label3;

        $r3 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String readEncodingDecl()>();

        $r1 = r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String encoding_>;

        if $r1 == null goto label3;

        $r1 = virtualinvoke $r3.<java.lang.String: java.lang.String toLowerCase()>();

        $r4 = r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String encoding_>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label3;

        $r5 = new com.hp.hpl.sparta.EncodingMismatchException;

        $r4 = r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String systemId_>;

        $r1 = r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String encoding_>;

        specialinvoke $r5.<com.hp.hpl.sparta.EncodingMismatchException: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r4, $r3, $r1);

        throw $r5;

     label2:
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readChar()>();

     label3:
        $r2 = <com.hp.hpl.sparta.ParseCharStream: char[] QU_END>;

        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isSymbol(char[])>($r2);

        if $z0 == 0 goto label2;

        $r2 = <com.hp.hpl.sparta.ParseCharStream: char[] QU_END>;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readSymbol(char[])>($r2);

        return;
    }

    final java.lang.String getHistory()
    {
        com.hp.hpl.sparta.ParseCharStream r0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        return "";
    }

    int getLastCharRead()
    {
        int i0;
        com.hp.hpl.sparta.ParseCharStream r0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        i0 = r0.<com.hp.hpl.sparta.ParseCharStream: int ch_>;

        return i0;
    }

    public int getLineNumber()
    {
        int i0;
        com.hp.hpl.sparta.ParseCharStream r0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        i0 = r0.<com.hp.hpl.sparta.ParseCharStream: int lineNumber_>;

        return i0;
    }

    com.hp.hpl.sparta.ParseLog getLog()
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        com.hp.hpl.sparta.ParseLog r1;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        r1 = r0.<com.hp.hpl.sparta.ParseCharStream: com.hp.hpl.sparta.ParseLog log_>;

        return r1;
    }

    public java.lang.String getSystemId()
    {
        java.lang.String r1;
        com.hp.hpl.sparta.ParseCharStream r0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        r1 = r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String systemId_>;

        return r1;
    }

    public java.lang.String toString()
    {
        java.lang.String r1;
        com.hp.hpl.sparta.ParseCharStream r0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;

        r1 = r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String systemId_>;

        return r1;
    }
}
