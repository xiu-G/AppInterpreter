public class com.hp.hpl.sparta.ParseException extends java.lang.Exception
{
    private java.lang.Throwable cause_;
    private int lineNumber_;

    public void <init>(com.hp.hpl.sparta.ParseCharStream, char, char)
    {
        java.lang.StringBuffer $r2;
        com.hp.hpl.sparta.ParseException r0;
        char $c0, $c1;
        java.lang.String $r3;
        com.hp.hpl.sparta.ParseCharStream $r1;

        r0 := @this: com.hp.hpl.sparta.ParseException;

        $r1 := @parameter0: com.hp.hpl.sparta.ParseCharStream;

        $c0 := @parameter1: char;

        $c1 := @parameter2: char;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("got \'");

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' instead of expected \'");

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke r0.<com.hp.hpl.sparta.ParseException: void <init>(com.hp.hpl.sparta.ParseCharStream,java.lang.String)>($r1, $r3);

        return;
    }

    public void <init>(com.hp.hpl.sparta.ParseCharStream, char, java.lang.String)
    {
        java.lang.StringBuffer $r3;
        com.hp.hpl.sparta.ParseException r0;
        char $c0;
        java.lang.String $r2;
        com.hp.hpl.sparta.ParseCharStream $r1;

        r0 := @this: com.hp.hpl.sparta.ParseException;

        $r1 := @parameter0: com.hp.hpl.sparta.ParseCharStream;

        $c0 := @parameter1: char;

        $r2 := @parameter2: java.lang.String;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("got \'");

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' instead of ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" as expected");

        $r2 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke r0.<com.hp.hpl.sparta.ParseException: void <init>(com.hp.hpl.sparta.ParseCharStream,java.lang.String)>($r1, $r2);

        return;
    }

    public void <init>(com.hp.hpl.sparta.ParseCharStream, char, char[])
    {
        java.lang.StringBuffer $r3;
        com.hp.hpl.sparta.ParseException r0;
        char[] $r2;
        char $c0;
        java.lang.String $r4;
        com.hp.hpl.sparta.ParseCharStream $r1;

        r0 := @this: com.hp.hpl.sparta.ParseException;

        $r1 := @parameter0: com.hp.hpl.sparta.ParseCharStream;

        $c0 := @parameter1: char;

        $r2 := @parameter2: char[];

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("got \'");

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' instead of ");

        $r4 = staticinvoke <com.hp.hpl.sparta.ParseException: java.lang.String toString(char[])>($r2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke r0.<com.hp.hpl.sparta.ParseException: void <init>(com.hp.hpl.sparta.ParseCharStream,java.lang.String)>($r1, $r4);

        return;
    }

    public void <init>(com.hp.hpl.sparta.ParseCharStream, java.lang.String)
    {
        com.hp.hpl.sparta.ParseException r0;
        com.hp.hpl.sparta.ParseLog $r3;
        int $i0, $i1;
        java.lang.String $r2, $r4, $r5;
        com.hp.hpl.sparta.ParseCharStream $r1;

        r0 := @this: com.hp.hpl.sparta.ParseException;

        $r1 := @parameter0: com.hp.hpl.sparta.ParseCharStream;

        $r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke $r1.<com.hp.hpl.sparta.ParseCharStream: com.hp.hpl.sparta.ParseLog getLog()>();

        $r4 = virtualinvoke $r1.<com.hp.hpl.sparta.ParseCharStream: java.lang.String getSystemId()>();

        $i0 = virtualinvoke $r1.<com.hp.hpl.sparta.ParseCharStream: int getLineNumber()>();

        $i1 = virtualinvoke $r1.<com.hp.hpl.sparta.ParseCharStream: int getLastCharRead()>();

        $r5 = virtualinvoke $r1.<com.hp.hpl.sparta.ParseCharStream: java.lang.String getHistory()>();

        specialinvoke r0.<com.hp.hpl.sparta.ParseException: void <init>(com.hp.hpl.sparta.ParseLog,java.lang.String,int,int,java.lang.String,java.lang.String)>($r3, $r4, $i0, $i1, $r5, $r2);

        return;
    }

    public void <init>(com.hp.hpl.sparta.ParseCharStream, java.lang.String, java.lang.String)
    {
        java.lang.StringBuffer $r4;
        com.hp.hpl.sparta.ParseException r0;
        java.lang.String $r2, $r3;
        com.hp.hpl.sparta.ParseCharStream $r1;

        r0 := @this: com.hp.hpl.sparta.ParseException;

        $r1 := @parameter0: com.hp.hpl.sparta.ParseCharStream;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("got \"");

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\" instead of \"");

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\" as expected");

        $r2 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke r0.<com.hp.hpl.sparta.ParseException: void <init>(com.hp.hpl.sparta.ParseCharStream,java.lang.String)>($r1, $r2);

        return;
    }

    public void <init>(com.hp.hpl.sparta.ParseCharStream, java.lang.String, char[])
    {
        com.hp.hpl.sparta.ParseException r0;
        char[] $r3;
        java.lang.String $r2, $r4;
        com.hp.hpl.sparta.ParseCharStream $r1;

        r0 := @this: com.hp.hpl.sparta.ParseException;

        $r1 := @parameter0: com.hp.hpl.sparta.ParseCharStream;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: char[];

        $r4 = new java.lang.String;

        specialinvoke $r4.<java.lang.String: void <init>(char[])>($r3);

        specialinvoke r0.<com.hp.hpl.sparta.ParseException: void <init>(com.hp.hpl.sparta.ParseCharStream,java.lang.String,java.lang.String)>($r1, $r2, $r4);

        return;
    }

    public void <init>(com.hp.hpl.sparta.ParseLog, java.lang.String, int, int, java.lang.String, java.lang.String)
    {
        int $i0, $i1;
        com.hp.hpl.sparta.ParseException r0;
        java.lang.String $r2, $r3, $r4;
        com.hp.hpl.sparta.ParseLog $r1;

        r0 := @this: com.hp.hpl.sparta.ParseException;

        $r1 := @parameter0: com.hp.hpl.sparta.ParseLog;

        $r2 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $r3 := @parameter4: java.lang.String;

        $r4 := @parameter5: java.lang.String;

        specialinvoke r0.<com.hp.hpl.sparta.ParseException: void <init>(java.lang.String,int,int,java.lang.String,java.lang.String)>($r2, $i0, $i1, $r3, $r4);

        interfaceinvoke $r1.<com.hp.hpl.sparta.ParseLog: void error(java.lang.String,java.lang.String,int)>($r4, $r2, $i0);

        return;
    }

    public void <init>(java.lang.String)
    {
        int $i0;
        com.hp.hpl.sparta.ParseException r0;
        java.lang.String $r1;

        r0 := @this: com.hp.hpl.sparta.ParseException;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Exception: void <init>(java.lang.String)>($r1);

        $i0 = -1;

        r0.<com.hp.hpl.sparta.ParseException: int lineNumber_> = $i0;

        r0.<com.hp.hpl.sparta.ParseException: java.lang.Throwable cause_> = null;

        return;
    }

    public void <init>(java.lang.String, int, int, java.lang.String, java.lang.String)
    {
        int $i0, $i1;
        com.hp.hpl.sparta.ParseException r0;
        java.lang.String $r1, $r2, $r3;

        r0 := @this: com.hp.hpl.sparta.ParseException;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: java.lang.String;

        $r3 := @parameter4: java.lang.String;

        $r1 = staticinvoke <com.hp.hpl.sparta.ParseException: java.lang.String toMessage(java.lang.String,int,int,java.lang.String,java.lang.String)>($r1, $i0, $i1, $r2, $r3);

        specialinvoke r0.<java.lang.Exception: void <init>(java.lang.String)>($r1);

        $i1 = -1;

        r0.<com.hp.hpl.sparta.ParseException: int lineNumber_> = $i1;

        r0.<com.hp.hpl.sparta.ParseException: java.lang.Throwable cause_> = null;

        r0.<com.hp.hpl.sparta.ParseException: int lineNumber_> = $i0;

        return;
    }

    public void <init>(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable $r2;
        java.lang.StringBuffer $r3, $r4;
        int $i0;
        com.hp.hpl.sparta.ParseException r0;
        java.lang.String $r1;

        r0 := @this: com.hp.hpl.sparta.ParseException;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Throwable;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r2);

        $r1 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke r0.<java.lang.Exception: void <init>(java.lang.String)>($r1);

        $i0 = -1;

        r0.<com.hp.hpl.sparta.ParseException: int lineNumber_> = $i0;

        r0.<com.hp.hpl.sparta.ParseException: java.lang.Throwable cause_> = null;

        r0.<com.hp.hpl.sparta.ParseException: java.lang.Throwable cause_> = $r2;

        return;
    }

    static java.lang.String charRepr(int)
    {
        java.lang.StringBuffer $r0, $r2;
        int $i0, $i2;
        char $c1;
        java.lang.String $r1;

        $i0 := @parameter0: int;

        $i2 = -1;

        if $i0 != $i2 goto label1;

        return "EOF";

     label1:
        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r0 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $c1 = (char) $i0;

        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r1;
    }

    private static java.lang.String toMessage(java.lang.String, int, int, java.lang.String, java.lang.String)
    {
        java.lang.StringBuffer $r3;
        int $i0, $i1;
        java.lang.String $r0, $r1, $r2;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r1 := @parameter3: java.lang.String;

        $r2 := @parameter4: java.lang.String;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("): \n");

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\nLast character read was \'");

        $r0 = staticinvoke <com.hp.hpl.sparta.ParseException: java.lang.String charRepr(int)>($i1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'\n");

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r0 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r0;
    }

    private static java.lang.String toString(char[])
    {
        java.lang.StringBuffer $r1, $r3;
        int $i1, $i2;
        char[] $r0;
        char $c0;
        java.lang.String $r2;

        $r0 := @parameter0: char[];

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $c0 = $r0[0];

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c0);

        $i1 = 1;

     label1:
        $i2 = lengthof $r0;

        if $i1 < $i2 goto label2;

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;

     label2:
        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("or ");

        $c0 = $r0[$i1];

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c0);

        $r2 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $i1 = $i1 + 1;

        goto label1;
    }

    public java.lang.Throwable getCause()
    {
        java.lang.Throwable r1;
        com.hp.hpl.sparta.ParseException r0;

        r0 := @this: com.hp.hpl.sparta.ParseException;

        r1 = r0.<com.hp.hpl.sparta.ParseException: java.lang.Throwable cause_>;

        return r1;
    }

    public int getLineNumber()
    {
        int i0;
        com.hp.hpl.sparta.ParseException r0;

        r0 := @this: com.hp.hpl.sparta.ParseException;

        i0 = r0.<com.hp.hpl.sparta.ParseException: int lineNumber_>;

        return i0;
    }
}
