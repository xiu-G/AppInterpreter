public class proguard.classfile.instruction.ConstantInstruction extends proguard.classfile.instruction.Instruction implements proguard.classfile.constant.visitor.ConstantVisitor
{
    public int constant;
    public int constantIndex;
    private int parameterStackDelta;
    private int typeStackDelta;

    public void <init>()
    {
        proguard.classfile.instruction.ConstantInstruction r0;

        r0 := @this: proguard.classfile.instruction.ConstantInstruction;

        specialinvoke r0.<proguard.classfile.instruction.Instruction: void <init>()>();

        return;
    }

    public void <init>(byte, int)
    {
        proguard.classfile.instruction.ConstantInstruction r0;
        int $i1;
        byte $b0;

        r0 := @this: proguard.classfile.instruction.ConstantInstruction;

        $b0 := @parameter0: byte;

        $i1 := @parameter1: int;

        specialinvoke r0.<proguard.classfile.instruction.ConstantInstruction: void <init>(byte,int,int)>($b0, $i1, 0);

        return;
    }

    public void <init>(byte, int, int)
    {
        byte $b0;
        proguard.classfile.instruction.ConstantInstruction r0;
        int $i1, $i2;

        r0 := @this: proguard.classfile.instruction.ConstantInstruction;

        $b0 := @parameter0: byte;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        specialinvoke r0.<proguard.classfile.instruction.Instruction: void <init>()>();

        r0.<proguard.classfile.instruction.ConstantInstruction: byte opcode> = $b0;

        r0.<proguard.classfile.instruction.ConstantInstruction: int constantIndex> = $i1;

        r0.<proguard.classfile.instruction.ConstantInstruction: int constant> = $i2;

        return;
    }

    private int constantIndexSize()
    {
        proguard.classfile.instruction.ConstantInstruction r0;
        int $i1;
        byte $b0;

        r0 := @this: proguard.classfile.instruction.ConstantInstruction;

        $b0 = r0.<proguard.classfile.instruction.ConstantInstruction: byte opcode>;

        $i1 = (int) $b0;

        if $i1 != 18 goto label1;

        return 1;

     label1:
        return 2;
    }

    private int constantSize()
    {
        proguard.classfile.instruction.ConstantInstruction r0;
        int $i1;
        byte $b0;

        r0 := @this: proguard.classfile.instruction.ConstantInstruction;

        $b0 = r0.<proguard.classfile.instruction.ConstantInstruction: byte opcode>;

        $i1 = (int) $b0;

        if $i1 != -59 goto label1;

        return 1;

     label1:
        $b0 = r0.<proguard.classfile.instruction.ConstantInstruction: byte opcode>;

        $i1 = (int) $b0;

        if $i1 != -71 goto label2;

        return 2;

     label2:
        return 0;
    }

    private int requiredConstantIndexSize()
    {
        proguard.classfile.instruction.ConstantInstruction r0;
        int $i0, $i1;

        r0 := @this: proguard.classfile.instruction.ConstantInstruction;

        $i0 = r0.<proguard.classfile.instruction.ConstantInstruction: int constantIndex>;

        $i0 = $i0 & 255;

        $i1 = r0.<proguard.classfile.instruction.ConstantInstruction: int constantIndex>;

        if $i0 != $i1 goto label1;

        return 1;

     label1:
        $i0 = r0.<proguard.classfile.instruction.ConstantInstruction: int constantIndex>;

        $i0 = $i0 & 65535;

        $i1 = r0.<proguard.classfile.instruction.ConstantInstruction: int constantIndex>;

        if $i0 != $i1 goto label2;

        return 2;

     label2:
        return 4;
    }

    private void visitRefConstant(proguard.classfile.Clazz, proguard.classfile.constant.RefConstant)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.instruction.ConstantInstruction r0;
        int $i0;
        java.lang.String $r3;
        proguard.classfile.constant.RefConstant $r2;

        r0 := @this: proguard.classfile.instruction.ConstantInstruction;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.RefConstant;

        $r3 = virtualinvoke $r2.<proguard.classfile.constant.RefConstant: java.lang.String getType(proguard.classfile.Clazz)>($r1);

        $i0 = staticinvoke <proguard.classfile.util.ClassUtil: int internalMethodParameterSize(java.lang.String)>($r3);

        r0.<proguard.classfile.instruction.ConstantInstruction: int parameterStackDelta> = $i0;

        $r3 = staticinvoke <proguard.classfile.util.ClassUtil: java.lang.String internalMethodReturnType(java.lang.String)>($r3);

        $i0 = staticinvoke <proguard.classfile.util.ClassUtil: int internalTypeSize(java.lang.String)>($r3);

        r0.<proguard.classfile.instruction.ConstantInstruction: int typeStackDelta> = $i0;

        return;
    }

    public void accept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.visitor.InstructionVisitor)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.instruction.ConstantInstruction r0;
        int $i0;
        proguard.classfile.Method $r2;
        proguard.classfile.instruction.visitor.InstructionVisitor $r4;

        r0 := @this: proguard.classfile.instruction.ConstantInstruction;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.visitor.InstructionVisitor;

        interfaceinvoke $r4.<proguard.classfile.instruction.visitor.InstructionVisitor: void visitConstantInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.ConstantInstruction)>($r1, $r2, $r3, $i0, r0);

        return;
    }

    public byte canonicalOpcode()
    {
        proguard.classfile.instruction.ConstantInstruction r0;
        int $i1;
        byte $b0;

        r0 := @this: proguard.classfile.instruction.ConstantInstruction;

        $b0 = r0.<proguard.classfile.instruction.ConstantInstruction: byte opcode>;

        $i1 = (int) $b0;

        lookupswitch($i1)
        {
            case 19: goto label2;
            case 20: goto label2;
            default: goto label1;
        };

     label1:
        $b0 = r0.<proguard.classfile.instruction.ConstantInstruction: byte opcode>;

        return $b0;

     label2:
        return 18;
    }

    public proguard.classfile.instruction.ConstantInstruction copy(proguard.classfile.instruction.ConstantInstruction)
    {
        byte $b0;
        proguard.classfile.instruction.ConstantInstruction r0, $r1;
        int $i1;

        r0 := @this: proguard.classfile.instruction.ConstantInstruction;

        $r1 := @parameter0: proguard.classfile.instruction.ConstantInstruction;

        $b0 = $r1.<proguard.classfile.instruction.ConstantInstruction: byte opcode>;

        r0.<proguard.classfile.instruction.ConstantInstruction: byte opcode> = $b0;

        $i1 = $r1.<proguard.classfile.instruction.ConstantInstruction: int constantIndex>;

        r0.<proguard.classfile.instruction.ConstantInstruction: int constantIndex> = $i1;

        $i1 = $r1.<proguard.classfile.instruction.ConstantInstruction: int constant>;

        r0.<proguard.classfile.instruction.ConstantInstruction: int constant> = $i1;

        return r0;
    }

    public int length(int)
    {
        proguard.classfile.instruction.ConstantInstruction r0;
        int $i0, $i1;

        r0 := @this: proguard.classfile.instruction.ConstantInstruction;

        $i0 := @parameter0: int;

        $i0 = specialinvoke r0.<proguard.classfile.instruction.ConstantInstruction: int constantIndexSize()>();

        $i0 = $i0 + 1;

        $i1 = specialinvoke r0.<proguard.classfile.instruction.ConstantInstruction: int constantSize()>();

        $i0 = $i0 + $i1;

        return $i0;
    }

    protected void readInfo(byte[], int)
    {
        byte[] $r1;
        proguard.classfile.instruction.ConstantInstruction r0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: proguard.classfile.instruction.ConstantInstruction;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 = specialinvoke r0.<proguard.classfile.instruction.ConstantInstruction: int constantIndexSize()>();

        $i2 = specialinvoke r0.<proguard.classfile.instruction.ConstantInstruction: int constantSize()>();

        $i3 = staticinvoke <proguard.classfile.instruction.ConstantInstruction: int readValue(byte[],int,int)>($r1, $i0, $i1);

        r0.<proguard.classfile.instruction.ConstantInstruction: int constantIndex> = $i3;

        $i0 = $i1 + $i0;

        $i0 = staticinvoke <proguard.classfile.instruction.ConstantInstruction: int readValue(byte[],int,int)>($r1, $i0, $i2);

        r0.<proguard.classfile.instruction.ConstantInstruction: int constant> = $i0;

        return;
    }

    public proguard.classfile.instruction.Instruction shrink()
    {
        proguard.classfile.instruction.ConstantInstruction r0;
        int $i0;
        byte $b1;

        r0 := @this: proguard.classfile.instruction.ConstantInstruction;

        $i0 = specialinvoke r0.<proguard.classfile.instruction.ConstantInstruction: int requiredConstantIndexSize()>();

        if $i0 != 1 goto label1;

        $b1 = r0.<proguard.classfile.instruction.ConstantInstruction: byte opcode>;

        $i0 = (int) $b1;

        if $i0 != 19 goto label2;

        r0.<proguard.classfile.instruction.ConstantInstruction: byte opcode> = 18;

        return r0;

     label1:
        $b1 = r0.<proguard.classfile.instruction.ConstantInstruction: byte opcode>;

        $i0 = (int) $b1;

        if $i0 != 18 goto label2;

        r0.<proguard.classfile.instruction.ConstantInstruction: byte opcode> = 19;

     label2:
        return r0;
    }

    public int stackPopCount(proguard.classfile.Clazz)
    {
        byte $b1;
        proguard.classfile.Clazz $r1;
        proguard.classfile.instruction.ConstantInstruction r0;
        int $i0, $i2;

        r0 := @this: proguard.classfile.instruction.ConstantInstruction;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $i0 = specialinvoke r0.<proguard.classfile.instruction.Instruction: int stackPopCount(proguard.classfile.Clazz)>($r1);

        $b1 = r0.<proguard.classfile.instruction.ConstantInstruction: byte opcode>;

        $i2 = (int) $b1;

        lookupswitch($i2)
        {
            case -77: goto label3;
            case -75: goto label3;
            case -74: goto label4;
            case -73: goto label4;
            case -72: goto label4;
            case -71: goto label4;
            case -59: goto label2;
            default: goto label1;
        };

     label1:
        return $i0;

     label2:
        $i2 = r0.<proguard.classfile.instruction.ConstantInstruction: int constant>;

        $i0 = $i0 + $i2;

        return $i0;

     label3:
        $i2 = r0.<proguard.classfile.instruction.ConstantInstruction: int constantIndex>;

        interfaceinvoke $r1.<proguard.classfile.Clazz: void constantPoolEntryAccept(int,proguard.classfile.constant.visitor.ConstantVisitor)>($i2, r0);

        $i2 = r0.<proguard.classfile.instruction.ConstantInstruction: int typeStackDelta>;

        $i0 = $i0 + $i2;

        return $i0;

     label4:
        $i2 = r0.<proguard.classfile.instruction.ConstantInstruction: int constantIndex>;

        interfaceinvoke $r1.<proguard.classfile.Clazz: void constantPoolEntryAccept(int,proguard.classfile.constant.visitor.ConstantVisitor)>($i2, r0);

        $i2 = r0.<proguard.classfile.instruction.ConstantInstruction: int parameterStackDelta>;

        $i0 = $i0 + $i2;

        return $i0;
    }

    public int stackPushCount(proguard.classfile.Clazz)
    {
        byte $b1;
        proguard.classfile.Clazz $r1;
        proguard.classfile.instruction.ConstantInstruction r0;
        int $i0, $i2;

        r0 := @this: proguard.classfile.instruction.ConstantInstruction;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $i0 = specialinvoke r0.<proguard.classfile.instruction.Instruction: int stackPushCount(proguard.classfile.Clazz)>($r1);

        $b1 = r0.<proguard.classfile.instruction.ConstantInstruction: byte opcode>;

        $i2 = (int) $b1;

        lookupswitch($i2)
        {
            case -78: goto label2;
            case -77: goto label1;
            case -76: goto label2;
            case -75: goto label1;
            case -74: goto label2;
            case -73: goto label2;
            case -72: goto label2;
            case -71: goto label2;
            default: goto label1;
        };

     label1:
        return $i0;

     label2:
        $i2 = r0.<proguard.classfile.instruction.ConstantInstruction: int constantIndex>;

        interfaceinvoke $r1.<proguard.classfile.Clazz: void constantPoolEntryAccept(int,proguard.classfile.constant.visitor.ConstantVisitor)>($i2, r0);

        $i2 = r0.<proguard.classfile.instruction.ConstantInstruction: int typeStackDelta>;

        $i0 = $i0 + $i2;

        return $i0;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuffer $r1;
        proguard.classfile.instruction.ConstantInstruction r0;
        int $i0;
        java.lang.String $r2;

        r0 := @this: proguard.classfile.instruction.ConstantInstruction;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke r0.<proguard.classfile.instruction.ConstantInstruction: java.lang.String getName()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" #");

        $i0 = r0.<proguard.classfile.instruction.ConstantInstruction: int constantIndex>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    public void visitClassConstant(proguard.classfile.Clazz, proguard.classfile.constant.ClassConstant)
    {
        proguard.classfile.instruction.ConstantInstruction r0;
        proguard.classfile.constant.ClassConstant $r2;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.classfile.instruction.ConstantInstruction;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.ClassConstant;

        return;
    }

    public void visitDoubleConstant(proguard.classfile.Clazz, proguard.classfile.constant.DoubleConstant)
    {
        proguard.classfile.instruction.ConstantInstruction r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.constant.DoubleConstant $r2;

        r0 := @this: proguard.classfile.instruction.ConstantInstruction;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.DoubleConstant;

        return;
    }

    public void visitFieldrefConstant(proguard.classfile.Clazz, proguard.classfile.constant.FieldrefConstant)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.instruction.ConstantInstruction r0;
        int $i0;
        proguard.classfile.constant.FieldrefConstant $r2;
        java.lang.String $r3;

        r0 := @this: proguard.classfile.instruction.ConstantInstruction;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.FieldrefConstant;

        $r3 = virtualinvoke $r2.<proguard.classfile.constant.FieldrefConstant: java.lang.String getType(proguard.classfile.Clazz)>($r1);

        $r3 = staticinvoke <proguard.classfile.util.ClassUtil: java.lang.String internalMethodReturnType(java.lang.String)>($r3);

        $i0 = staticinvoke <proguard.classfile.util.ClassUtil: int internalTypeSize(java.lang.String)>($r3);

        r0.<proguard.classfile.instruction.ConstantInstruction: int typeStackDelta> = $i0;

        return;
    }

    public void visitFloatConstant(proguard.classfile.Clazz, proguard.classfile.constant.FloatConstant)
    {
        proguard.classfile.instruction.ConstantInstruction r0;
        proguard.classfile.constant.FloatConstant $r2;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.classfile.instruction.ConstantInstruction;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.FloatConstant;

        return;
    }

    public void visitIntegerConstant(proguard.classfile.Clazz, proguard.classfile.constant.IntegerConstant)
    {
        proguard.classfile.instruction.ConstantInstruction r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.constant.IntegerConstant $r2;

        r0 := @this: proguard.classfile.instruction.ConstantInstruction;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.IntegerConstant;

        return;
    }

    public void visitInterfaceMethodrefConstant(proguard.classfile.Clazz, proguard.classfile.constant.InterfaceMethodrefConstant)
    {
        proguard.classfile.instruction.ConstantInstruction r0;
        proguard.classfile.constant.InterfaceMethodrefConstant $r2;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.classfile.instruction.ConstantInstruction;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.InterfaceMethodrefConstant;

        specialinvoke r0.<proguard.classfile.instruction.ConstantInstruction: void visitRefConstant(proguard.classfile.Clazz,proguard.classfile.constant.RefConstant)>($r1, $r2);

        return;
    }

    public void visitLongConstant(proguard.classfile.Clazz, proguard.classfile.constant.LongConstant)
    {
        proguard.classfile.instruction.ConstantInstruction r0;
        proguard.classfile.constant.LongConstant $r2;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.classfile.instruction.ConstantInstruction;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.LongConstant;

        return;
    }

    public void visitMethodrefConstant(proguard.classfile.Clazz, proguard.classfile.constant.MethodrefConstant)
    {
        proguard.classfile.instruction.ConstantInstruction r0;
        proguard.classfile.constant.MethodrefConstant $r2;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.classfile.instruction.ConstantInstruction;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.MethodrefConstant;

        specialinvoke r0.<proguard.classfile.instruction.ConstantInstruction: void visitRefConstant(proguard.classfile.Clazz,proguard.classfile.constant.RefConstant)>($r1, $r2);

        return;
    }

    public void visitNameAndTypeConstant(proguard.classfile.Clazz, proguard.classfile.constant.NameAndTypeConstant)
    {
        proguard.classfile.instruction.ConstantInstruction r0;
        proguard.classfile.constant.NameAndTypeConstant $r2;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.classfile.instruction.ConstantInstruction;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.NameAndTypeConstant;

        return;
    }

    public void visitStringConstant(proguard.classfile.Clazz, proguard.classfile.constant.StringConstant)
    {
        proguard.classfile.instruction.ConstantInstruction r0;
        proguard.classfile.constant.StringConstant $r2;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.classfile.instruction.ConstantInstruction;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.StringConstant;

        return;
    }

    public void visitUtf8Constant(proguard.classfile.Clazz, proguard.classfile.constant.Utf8Constant)
    {
        proguard.classfile.instruction.ConstantInstruction r0;
        proguard.classfile.constant.Utf8Constant $r2;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.classfile.instruction.ConstantInstruction;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.Utf8Constant;

        return;
    }

    protected void writeInfo(byte[], int)
    {
        byte[] $r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuffer $r3;
        proguard.classfile.instruction.ConstantInstruction r0;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r4;

        r0 := @this: proguard.classfile.instruction.ConstantInstruction;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 = specialinvoke r0.<proguard.classfile.instruction.ConstantInstruction: int constantIndexSize()>();

        $i2 = specialinvoke r0.<proguard.classfile.instruction.ConstantInstruction: int constantSize()>();

        $i3 = specialinvoke r0.<proguard.classfile.instruction.ConstantInstruction: int requiredConstantIndexSize()>();

        if $i3 <= $i1 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Instruction has invalid constant index size (");

        $r4 = virtualinvoke r0.<proguard.classfile.instruction.ConstantInstruction: java.lang.String toString(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label1:
        $i3 = r0.<proguard.classfile.instruction.ConstantInstruction: int constantIndex>;

        staticinvoke <proguard.classfile.instruction.ConstantInstruction: void writeValue(byte[],int,int,int)>($r1, $i0, $i3, $i1);

        $i0 = $i1 + $i0;

        $i1 = r0.<proguard.classfile.instruction.ConstantInstruction: int constant>;

        staticinvoke <proguard.classfile.instruction.ConstantInstruction: void writeValue(byte[],int,int,int)>($r1, $i0, $i1, $i2);

        return;
    }
}
