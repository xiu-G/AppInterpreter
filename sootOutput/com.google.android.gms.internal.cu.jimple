public final class com.google.android.gms.internal.cu extends java.lang.Object
{
    private static final java.util.concurrent.ThreadFactory pK;
    private static final java.util.concurrent.ThreadPoolExecutor pL;

    static void <clinit>()
    {
        java.util.concurrent.TimeUnit $r0;
        java.util.concurrent.SynchronousQueue $r1;
        java.util.concurrent.ThreadPoolExecutor $r3;
        com.google.android.gms.internal.cu$2 $r2;
        java.util.concurrent.ThreadFactory $r4;

        $r2 = new com.google.android.gms.internal.cu$2;

        specialinvoke $r2.<com.google.android.gms.internal.cu$2: void <init>()>();

        <com.google.android.gms.internal.cu: java.util.concurrent.ThreadFactory pK> = $r2;

        $r3 = new java.util.concurrent.ThreadPoolExecutor;

        $r0 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $r1 = new java.util.concurrent.SynchronousQueue;

        specialinvoke $r1.<java.util.concurrent.SynchronousQueue: void <init>(boolean)>(1);

        $r4 = <com.google.android.gms.internal.cu: java.util.concurrent.ThreadFactory pK>;

        specialinvoke $r3.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)>(0, 10, 65L, $r0, $r1, $r4);

        <com.google.android.gms.internal.cu: java.util.concurrent.ThreadPoolExecutor pL> = $r3;

        return;
    }

    public static void execute(java.lang.Runnable)
    {
        java.lang.Throwable $r3;
        java.util.concurrent.ThreadPoolExecutor $r1;
        com.google.android.gms.internal.cu$1 $r2;
        java.lang.Runnable $r0;

        $r0 := @parameter0: java.lang.Runnable;

        $r1 = <com.google.android.gms.internal.cu: java.util.concurrent.ThreadPoolExecutor pL>;

        $r2 = new com.google.android.gms.internal.cu$1;

     label1:
        specialinvoke $r2.<com.google.android.gms.internal.cu$1: void <init>(java.lang.Runnable)>($r0);

        virtualinvoke $r1.<java.util.concurrent.ThreadPoolExecutor: void execute(java.lang.Runnable)>($r2);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        staticinvoke <com.google.android.gms.internal.da: void b(java.lang.String,java.lang.Throwable)>("Too many background threads already running. Aborting task.", $r3);

        return;

        catch java.util.concurrent.RejectedExecutionException from label1 to label2 with label3;
    }
}
