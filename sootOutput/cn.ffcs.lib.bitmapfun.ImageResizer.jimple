public class cn.ffcs.lib.bitmapfun.ImageResizer extends cn.ffcs.lib.bitmapfun.ImageWorker
{
    private static final java.lang.String TAG;
    protected int mImageHeight;
    protected int mImageWidth;

    public void <init>(android.content.Context, int)
    {
        int $i0;
        android.content.Context $r1;
        cn.ffcs.lib.bitmapfun.ImageResizer r0;

        r0 := @this: cn.ffcs.lib.bitmapfun.ImageResizer;

        $r1 := @parameter0: android.content.Context;

        $i0 := @parameter1: int;

        specialinvoke r0.<cn.ffcs.lib.bitmapfun.ImageWorker: void <init>(android.content.Context)>($r1);

        virtualinvoke r0.<cn.ffcs.lib.bitmapfun.ImageResizer: void setImageSize(int)>($i0);

        return;
    }

    public void <init>(android.content.Context, int, int)
    {
        android.content.Context $r1;
        int $i0, $i1;
        cn.ffcs.lib.bitmapfun.ImageResizer r0;

        r0 := @this: cn.ffcs.lib.bitmapfun.ImageResizer;

        $r1 := @parameter0: android.content.Context;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        specialinvoke r0.<cn.ffcs.lib.bitmapfun.ImageWorker: void <init>(android.content.Context)>($r1);

        virtualinvoke r0.<cn.ffcs.lib.bitmapfun.ImageResizer: void setImageSize(int,int)>($i0, $i1);

        return;
    }

    public static int calculateInSampleSize(android.graphics.BitmapFactory$Options, int, int)
    {
        byte $b5;
        int $i0, $i1, i2, i3, $i4;
        float f0, f1, $f2;
        android.graphics.BitmapFactory$Options $r0;

        $r0 := @parameter0: android.graphics.BitmapFactory$Options;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        i2 = $r0.<android.graphics.BitmapFactory$Options: int outHeight>;

        i3 = $r0.<android.graphics.BitmapFactory$Options: int outWidth>;

        if i2 > $i1 goto label1;

        if i3 <= $i0 goto label5;

     label1:
        if i3 <= i2 goto label4;

        f0 = (float) i2;

        f1 = (float) $i1;

        f0 = f0 / f1;

        $i4 = staticinvoke <java.lang.Math: int round(float)>(f0);

     label2:
        i2 = i3 * i2;

        f0 = (float) i2;

        $i0 = $i0 * $i1;

        $i0 = $i0 * 2;

        f1 = (float) $i0;

     label3:
        $i0 = $i4 * $i4;

        $f2 = (float) $i0;

        $f2 = f0 / $f2;

        $b5 = $f2 cmpl f1;

        $i0 = (int) $b5;

        if $i0 <= 0 goto label6;

        $i4 = $i4 + 1;

        goto label3;

     label4:
        f0 = (float) i3;

        f1 = (float) $i0;

        f0 = f0 / f1;

        $i4 = staticinvoke <java.lang.Math: int round(float)>(f0);

        goto label2;

     label5:
        return 1;

     label6:
        return $i4;
    }

    public static android.graphics.Bitmap decodeSampledBitmapFromFile(java.lang.String, int, int)
    {
        java.lang.Throwable $r3;
        android.graphics.Bitmap $r2;
        int $i0, $i1;
        java.lang.String $r0;
        android.graphics.BitmapFactory$Options r1;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        entermonitor class "Lcn/ffcs/lib/bitmapfun/ImageResizer;";

     label1:
        r1 = new android.graphics.BitmapFactory$Options;

        specialinvoke r1.<android.graphics.BitmapFactory$Options: void <init>()>();

        r1.<android.graphics.BitmapFactory$Options: boolean inJustDecodeBounds> = 1;

        staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>($r0, r1);

        $i0 = staticinvoke <cn.ffcs.lib.bitmapfun.ImageResizer: int calculateInSampleSize(android.graphics.BitmapFactory$Options,int,int)>(r1, $i0, $i1);

        r1.<android.graphics.BitmapFactory$Options: int inSampleSize> = $i0;

        r1.<android.graphics.BitmapFactory$Options: boolean inJustDecodeBounds> = 0;

        $r2 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>($r0, r1);

     label2:
        exitmonitor class "Lcn/ffcs/lib/bitmapfun/ImageResizer;";

        return $r2;

     label3:
        $r3 := @caughtexception;

        exitmonitor class "Lcn/ffcs/lib/bitmapfun/ImageResizer;";

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static android.graphics.Bitmap decodeSampledBitmapFromResource(android.content.res.Resources, int, int, int)
    {
        android.graphics.Bitmap $r2;
        int $i0, $i1, $i2;
        android.content.res.Resources $r0;
        android.graphics.BitmapFactory$Options r1;

        $r0 := @parameter0: android.content.res.Resources;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        r1 = new android.graphics.BitmapFactory$Options;

        specialinvoke r1.<android.graphics.BitmapFactory$Options: void <init>()>();

        r1.<android.graphics.BitmapFactory$Options: boolean inJustDecodeBounds> = 1;

        staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeResource(android.content.res.Resources,int,android.graphics.BitmapFactory$Options)>($r0, $i0, r1);

        $i1 = staticinvoke <cn.ffcs.lib.bitmapfun.ImageResizer: int calculateInSampleSize(android.graphics.BitmapFactory$Options,int,int)>(r1, $i1, $i2);

        r1.<android.graphics.BitmapFactory$Options: int inSampleSize> = $i1;

        r1.<android.graphics.BitmapFactory$Options: boolean inJustDecodeBounds> = 0;

        $r2 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeResource(android.content.res.Resources,int,android.graphics.BitmapFactory$Options)>($r0, $i0, r1);

        return $r2;
    }

    private android.graphics.Bitmap processBitmap(int)
    {
        android.content.Context $r1;
        android.graphics.Bitmap $r3;
        int $i0, $i1, $i2;
        cn.ffcs.lib.bitmapfun.ImageResizer r0;
        android.content.res.Resources $r2;

        r0 := @this: cn.ffcs.lib.bitmapfun.ImageResizer;

        $i0 := @parameter0: int;

        $r1 = r0.<cn.ffcs.lib.bitmapfun.ImageResizer: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $i1 = r0.<cn.ffcs.lib.bitmapfun.ImageResizer: int mImageWidth>;

        $i2 = r0.<cn.ffcs.lib.bitmapfun.ImageResizer: int mImageHeight>;

        $r3 = staticinvoke <cn.ffcs.lib.bitmapfun.ImageResizer: android.graphics.Bitmap decodeSampledBitmapFromResource(android.content.res.Resources,int,int,int)>($r2, $i0, $i1, $i2);

        return $r3;
    }

    protected android.graphics.Bitmap processBitmap(java.lang.Object)
    {
        android.graphics.Bitmap $r3;
        int $i0;
        cn.ffcs.lib.bitmapfun.ImageResizer r0;
        java.lang.Object $r1;
        java.lang.String $r2;

        r0 := @this: cn.ffcs.lib.bitmapfun.ImageResizer;

        $r1 := @parameter0: java.lang.Object;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

        $r3 = specialinvoke r0.<cn.ffcs.lib.bitmapfun.ImageResizer: android.graphics.Bitmap processBitmap(int)>($i0);

        return $r3;
    }

    public void setImageSize(int)
    {
        int $i0;
        cn.ffcs.lib.bitmapfun.ImageResizer r0;

        r0 := @this: cn.ffcs.lib.bitmapfun.ImageResizer;

        $i0 := @parameter0: int;

        virtualinvoke r0.<cn.ffcs.lib.bitmapfun.ImageResizer: void setImageSize(int,int)>($i0, $i0);

        return;
    }

    public void setImageSize(int, int)
    {
        int $i0, $i1;
        cn.ffcs.lib.bitmapfun.ImageResizer r0;

        r0 := @this: cn.ffcs.lib.bitmapfun.ImageResizer;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        r0.<cn.ffcs.lib.bitmapfun.ImageResizer: int mImageWidth> = $i0;

        r0.<cn.ffcs.lib.bitmapfun.ImageResizer: int mImageHeight> = $i1;

        return;
    }

    public static void <clinit>()
    {
        <cn.ffcs.lib.bitmapfun.ImageResizer: java.lang.String TAG> = "ImageWorker";

        return;
    }
}
