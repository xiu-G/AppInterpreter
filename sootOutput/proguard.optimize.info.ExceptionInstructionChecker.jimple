public class proguard.optimize.info.ExceptionInstructionChecker extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.instruction.visitor.InstructionVisitor
{
    private boolean mayThrowExceptions;

    public void <init>()
    {
        proguard.optimize.info.ExceptionInstructionChecker r0;

        r0 := @this: proguard.optimize.info.ExceptionInstructionChecker;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        return;
    }

    public boolean mayThrowExceptions(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.Instruction)
    {
        proguard.optimize.info.ExceptionInstructionChecker r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.instruction.Instruction $r4;
        int $i0;
        proguard.classfile.Method $r2;
        boolean z0;

        r0 := @this: proguard.optimize.info.ExceptionInstructionChecker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.Instruction;

        r0.<proguard.optimize.info.ExceptionInstructionChecker: boolean mayThrowExceptions> = 0;

        virtualinvoke $r4.<proguard.classfile.instruction.Instruction: void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.visitor.InstructionVisitor)>($r1, $r2, $r3, $i0, r0);

        z0 = r0.<proguard.optimize.info.ExceptionInstructionChecker: boolean mayThrowExceptions>;

        return z0;
    }

    public void visitAnyInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.Instruction)
    {
        proguard.optimize.info.ExceptionInstructionChecker r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.instruction.Instruction $r4;
        int $i0;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.optimize.info.ExceptionInstructionChecker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.Instruction;

        return;
    }

    public void visitConstantInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.ConstantInstruction)
    {
        proguard.optimize.info.ExceptionInstructionChecker r0;
        byte $b1;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.instruction.ConstantInstruction $r4;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.optimize.info.ExceptionInstructionChecker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.ConstantInstruction;

        $b1 = $r4.<proguard.classfile.instruction.ConstantInstruction: byte opcode>;

        $i0 = (int) $b1;

        lookupswitch($i0)
        {
            case -78: goto label2;
            case -77: goto label2;
            case -76: goto label2;
            case -75: goto label2;
            case -74: goto label2;
            case -73: goto label2;
            case -72: goto label2;
            case -71: goto label2;
            case -70: goto label1;
            case -69: goto label2;
            case -68: goto label1;
            case -67: goto label2;
            case -66: goto label1;
            case -65: goto label1;
            case -64: goto label2;
            case -63: goto label1;
            case -62: goto label1;
            case -61: goto label1;
            case -60: goto label1;
            case -59: goto label2;
            default: goto label1;
        };

     label1:
        return;

     label2:
        r0.<proguard.optimize.info.ExceptionInstructionChecker: boolean mayThrowExceptions> = 1;

        return;
    }

    public void visitSimpleInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.SimpleInstruction)
    {
        proguard.optimize.info.ExceptionInstructionChecker r0;
        byte $b1;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.Method $r2;
        proguard.classfile.instruction.SimpleInstruction $r4;

        r0 := @this: proguard.optimize.info.ExceptionInstructionChecker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.SimpleInstruction;

        $b1 = $r4.<proguard.classfile.instruction.SimpleInstruction: byte opcode>;

        $i0 = (int) $b1;

        lookupswitch($i0)
        {
            case -68: goto label2;
            case -66: goto label2;
            case -65: goto label2;
            case -62: goto label2;
            case 46: goto label2;
            case 47: goto label2;
            case 48: goto label2;
            case 49: goto label2;
            case 50: goto label2;
            case 51: goto label2;
            case 52: goto label2;
            case 53: goto label2;
            case 79: goto label2;
            case 80: goto label2;
            case 81: goto label2;
            case 82: goto label2;
            case 83: goto label2;
            case 84: goto label2;
            case 85: goto label2;
            case 86: goto label2;
            case 108: goto label2;
            case 109: goto label2;
            case 112: goto label2;
            case 113: goto label2;
            default: goto label1;
        };

     label1:
        return;

     label2:
        r0.<proguard.optimize.info.ExceptionInstructionChecker: boolean mayThrowExceptions> = 1;

        return;
    }
}
