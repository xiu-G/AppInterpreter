class com.kingroot.sdk.go extends java.lang.Object
{
    protected java.util.HashMap jK;
    protected java.util.HashMap jL;
    private java.util.HashMap jM;
    protected java.lang.String jN;
    com.kingroot.sdk.gw jO;

    void <init>()
    {
        com.kingroot.sdk.go r0;
        com.kingroot.sdk.gw $r2;
        java.util.HashMap $r1;

        r0 := @this: com.kingroot.sdk.go;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<com.kingroot.sdk.go: java.util.HashMap jK> = $r1;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<com.kingroot.sdk.go: java.util.HashMap jL> = $r1;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<com.kingroot.sdk.go: java.util.HashMap jM> = $r1;

        r0.<com.kingroot.sdk.go: java.lang.String jN> = "GBK";

        $r2 = new com.kingroot.sdk.gw;

        specialinvoke $r2.<com.kingroot.sdk.gw: void <init>()>();

        r0.<com.kingroot.sdk.go: com.kingroot.sdk.gw jO> = $r2;

        return;
    }

    private void a(java.util.ArrayList, java.lang.Object)
    {
        java.util.Iterator $r10;
        java.util.Set $r9;
        java.lang.IllegalArgumentException $r6;
        java.util.ArrayList $r1;
        com.kingroot.sdk.go r0;
        java.util.List $r7;
        java.util.Map $r8;
        int $i0;
        java.lang.Object $r2, $r3;
        java.lang.Class $r4;
        java.lang.String $r5;
        boolean $z0;

        r0 := @this: com.kingroot.sdk.go;

        $r1 := @parameter0: java.util.ArrayList;

        $r2 := @parameter1: java.lang.Object;

        $r3 = $r2;

     label1:
        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r4.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label4;

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r4.<java.lang.Class: java.lang.Class getComponentType()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String toString()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("byte");

        if $z0 != 0 goto label2;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("only byte[] is supported");

        throw $r6;

     label2:
        $i0 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>($r3);

        if $i0 <= 0 goto label3;

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>("java.util.List");

        $r3 = staticinvoke <java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>($r3, 0);

        goto label1;

     label3:
        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>("Array");

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>("?");

        return;

     label4:
        $z0 = $r3 instanceof java.lang.reflect.Array;

        if $z0 == 0 goto label5;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("can not support Array, please use List");

        throw $r6;

     label5:
        $z0 = $r3 instanceof java.util.List;

        if $z0 == 0 goto label7;

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>("java.util.List");

        $r7 = (java.util.List) $r3;

        $i0 = interfaceinvoke $r7.<java.util.List: int size()>();

        if $i0 <= 0 goto label6;

        $r3 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(0);

        goto label1;

     label6:
        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>("?");

        return;

     label7:
        $z0 = $r3 instanceof java.util.Map;

        if $z0 == 0 goto label9;

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>("java.util.Map");

        $r8 = (java.util.Map) $r3;

        $i0 = interfaceinvoke $r8.<java.util.Map: int size()>();

        if $i0 <= 0 goto label8;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Set keySet()>();

        $r10 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

        $r2 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        $r3 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        $r4 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

        goto label1;

     label8:
        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>("?");

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>("?");

        return;

     label9:
        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

        return;
    }

    public void aq(java.lang.String)
    {
        com.kingroot.sdk.go r0;
        java.lang.String $r1;

        r0 := @this: com.kingroot.sdk.go;

        $r1 := @parameter0: java.lang.String;

        r0.<com.kingroot.sdk.go: java.lang.String jN> = "UTF-8";

        return;
    }

    public byte[] ck()
    {
        com.kingroot.sdk.go r0;
        byte[] $r5;
        com.kingroot.sdk.gx $r1;
        java.util.HashMap $r3;
        java.lang.String $r2;
        java.nio.ByteBuffer $r4;

        r0 := @this: com.kingroot.sdk.go;

        $r1 = new com.kingroot.sdk.gx;

        specialinvoke $r1.<com.kingroot.sdk.gx: void <init>(int)>(0);

        $r2 = r0.<com.kingroot.sdk.go: java.lang.String jN>;

        virtualinvoke $r1.<com.kingroot.sdk.gx: int au(java.lang.String)>($r2);

        $r3 = r0.<com.kingroot.sdk.go: java.util.HashMap jK>;

        virtualinvoke $r1.<com.kingroot.sdk.gx: void a(java.util.Map,int)>($r3, 0);

        $r4 = virtualinvoke $r1.<com.kingroot.sdk.gx: java.nio.ByteBuffer cq()>();

        $r5 = staticinvoke <com.kingroot.sdk.gz: byte[] a(java.nio.ByteBuffer)>($r4);

        return $r5;
    }

    public void m(byte[])
    {
        com.kingroot.sdk.go r0;
        byte[] $r1;
        com.kingroot.sdk.gw $r3;
        java.util.HashMap $r2, $r5;
        java.lang.String $r4;

        r0 := @this: com.kingroot.sdk.go;

        $r1 := @parameter0: byte[];

        $r3 = r0.<com.kingroot.sdk.go: com.kingroot.sdk.gw jO>;

        virtualinvoke $r3.<com.kingroot.sdk.gw: void o(byte[])>($r1);

        $r3 = r0.<com.kingroot.sdk.go: com.kingroot.sdk.gw jO>;

        $r4 = r0.<com.kingroot.sdk.go: java.lang.String jN>;

        virtualinvoke $r3.<com.kingroot.sdk.gw: int au(java.lang.String)>($r4);

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>(int)>(1);

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>(int)>(1);

        $r1 = newarray (byte)[0];

        virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("", $r1);

        virtualinvoke $r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("", $r5);

        $r3 = r0.<com.kingroot.sdk.go: com.kingroot.sdk.gw jO>;

        $r2 = virtualinvoke $r3.<com.kingroot.sdk.gw: java.util.HashMap a(java.util.Map,int,boolean)>($r2, 0, 0);

        r0.<com.kingroot.sdk.go: java.util.HashMap jK> = $r2;

        return;
    }

    public void put(java.lang.String, java.lang.Object)
    {
        byte[] $r7;
        java.util.HashMap $r8, $r10;
        java.lang.IllegalArgumentException $r3;
        java.nio.ByteBuffer $r6;
        java.util.ArrayList $r9;
        com.kingroot.sdk.go r0;
        com.kingroot.sdk.gx $r4;
        java.lang.Object $r2;
        java.lang.String $r1, $r5;
        boolean $z0;

        r0 := @this: com.kingroot.sdk.go;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object;

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("put key can not is null");

        throw $r3;

     label1:
        if $r2 != null goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("put value can not is null");

        throw $r3;

     label2:
        $z0 = $r2 instanceof java.util.Set;

        if $z0 == 0 goto label3;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("can not support Set");

        throw $r3;

     label3:
        $r4 = new com.kingroot.sdk.gx;

        specialinvoke $r4.<com.kingroot.sdk.gx: void <init>()>();

        $r5 = r0.<com.kingroot.sdk.go: java.lang.String jN>;

        virtualinvoke $r4.<com.kingroot.sdk.gx: int au(java.lang.String)>($r5);

        virtualinvoke $r4.<com.kingroot.sdk.gx: void a(java.lang.Object,int)>($r2, 0);

        $r6 = virtualinvoke $r4.<com.kingroot.sdk.gx: java.nio.ByteBuffer cq()>();

        $r7 = staticinvoke <com.kingroot.sdk.gz: byte[] a(java.nio.ByteBuffer)>($r6);

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>(int)>(1);

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>(int)>(1);

        specialinvoke r0.<com.kingroot.sdk.go: void a(java.util.ArrayList,java.lang.Object)>($r9, $r2);

        $r5 = staticinvoke <com.kingroot.sdk.gm: java.lang.String f(java.util.ArrayList)>($r9);

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r7);

        $r10 = r0.<com.kingroot.sdk.go: java.util.HashMap jM>;

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r1);

        $r10 = r0.<com.kingroot.sdk.go: java.util.HashMap jK>;

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r8);

        return;
    }
}
