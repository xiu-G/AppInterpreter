public class proguard.classfile.editor.AccessFixer extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.constant.visitor.ConstantVisitor, proguard.classfile.visitor.ClassVisitor, proguard.classfile.visitor.MemberVisitor
{
    private proguard.classfile.Clazz referencedClass;
    private proguard.classfile.editor.AccessFixer$MyReferencedClassFinder referencedClassFinder;
    private proguard.classfile.Clazz referencingClass;

    public void <init>()
    {
        proguard.classfile.editor.AccessFixer r0;
        proguard.classfile.editor.AccessFixer$MyReferencedClassFinder $r1;

        r0 := @this: proguard.classfile.editor.AccessFixer;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        $r1 = new proguard.classfile.editor.AccessFixer$MyReferencedClassFinder;

        specialinvoke $r1.<proguard.classfile.editor.AccessFixer$MyReferencedClassFinder: void <init>(proguard.classfile.editor.AccessFixer,proguard.classfile.editor.AccessFixer$1)>(r0, null);

        r0.<proguard.classfile.editor.AccessFixer: proguard.classfile.editor.AccessFixer$MyReferencedClassFinder referencedClassFinder> = $r1;

        return;
    }

    static proguard.classfile.Clazz access$102(proguard.classfile.editor.AccessFixer, proguard.classfile.Clazz)
    {
        proguard.classfile.editor.AccessFixer $r0;
        proguard.classfile.Clazz $r1;

        $r0 := @parameter0: proguard.classfile.editor.AccessFixer;

        $r1 := @parameter1: proguard.classfile.Clazz;

        $r0.<proguard.classfile.editor.AccessFixer: proguard.classfile.Clazz referencedClass> = $r1;

        return $r1;
    }

    private boolean inSamePackage(proguard.classfile.ProgramClass, proguard.classfile.Clazz)
    {
        proguard.classfile.Clazz $r2;
        proguard.classfile.editor.AccessFixer r0;
        java.lang.String $r3, $r4;
        proguard.classfile.ProgramClass $r1;
        boolean $z0;

        r0 := @this: proguard.classfile.editor.AccessFixer;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.Clazz;

        $r3 = virtualinvoke $r1.<proguard.classfile.ProgramClass: java.lang.String getName()>();

        $r3 = staticinvoke <proguard.classfile.util.ClassUtil: java.lang.String internalPackageName(java.lang.String)>($r3);

        $r4 = interfaceinvoke $r2.<proguard.classfile.Clazz: java.lang.String getName()>();

        $r4 = staticinvoke <proguard.classfile.util.ClassUtil: java.lang.String internalPackageName(java.lang.String)>($r4);

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        return $z0;
    }

    public void visitAnyConstant(proguard.classfile.Clazz, proguard.classfile.constant.Constant)
    {
        proguard.classfile.editor.AccessFixer r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.constant.Constant $r2;

        r0 := @this: proguard.classfile.editor.AccessFixer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.Constant;

        return;
    }

    public void visitAnyRefConstant(proguard.classfile.Clazz, proguard.classfile.constant.RefConstant)
    {
        proguard.classfile.editor.AccessFixer$MyReferencedClassFinder $r3;
        proguard.classfile.Clazz $r1;
        proguard.classfile.editor.AccessFixer r0;
        int $i0;
        proguard.classfile.constant.RefConstant $r2;

        r0 := @this: proguard.classfile.editor.AccessFixer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.RefConstant;

        r0.<proguard.classfile.editor.AccessFixer: proguard.classfile.Clazz referencingClass> = $r1;

        $i0 = $r2.<proguard.classfile.constant.RefConstant: int u2classIndex>;

        $r3 = r0.<proguard.classfile.editor.AccessFixer: proguard.classfile.editor.AccessFixer$MyReferencedClassFinder referencedClassFinder>;

        interfaceinvoke $r1.<proguard.classfile.Clazz: void constantPoolEntryAccept(int,proguard.classfile.constant.visitor.ConstantVisitor)>($i0, $r3);

        virtualinvoke $r2.<proguard.classfile.constant.RefConstant: void referencedMemberAccept(proguard.classfile.visitor.MemberVisitor)>(r0);

        return;
    }

    public void visitClassConstant(proguard.classfile.Clazz, proguard.classfile.constant.ClassConstant)
    {
        proguard.classfile.editor.AccessFixer r0;
        proguard.classfile.constant.ClassConstant $r2;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.classfile.editor.AccessFixer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.ClassConstant;

        r0.<proguard.classfile.editor.AccessFixer: proguard.classfile.Clazz referencingClass> = $r1;

        virtualinvoke $r2.<proguard.classfile.constant.ClassConstant: void referencedClassAccept(proguard.classfile.visitor.ClassVisitor)>(r0);

        return;
    }

    public void visitLibraryClass(proguard.classfile.LibraryClass)
    {
        proguard.classfile.editor.AccessFixer r0;
        proguard.classfile.LibraryClass $r1;

        r0 := @this: proguard.classfile.editor.AccessFixer;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        return;
    }

    public void visitLibraryMember(proguard.classfile.LibraryClass, proguard.classfile.LibraryMember)
    {
        proguard.classfile.editor.AccessFixer r0;
        proguard.classfile.LibraryClass $r1;
        proguard.classfile.LibraryMember $r2;

        r0 := @this: proguard.classfile.editor.AccessFixer;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        $r2 := @parameter1: proguard.classfile.LibraryMember;

        return;
    }

    public void visitProgramClass(proguard.classfile.ProgramClass)
    {
        byte $b2;
        proguard.classfile.Clazz $r2;
        proguard.classfile.editor.AccessFixer r0;
        int $i0, $i1;
        proguard.classfile.ProgramClass $r1;
        boolean $z0;

        r0 := @this: proguard.classfile.editor.AccessFixer;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $i0 = virtualinvoke $r1.<proguard.classfile.ProgramClass: int getAccessFlags()>();

        $i1 = staticinvoke <proguard.classfile.util.AccessUtil: int accessLevel(int)>($i0);

        $r2 = r0.<proguard.classfile.editor.AccessFixer: proguard.classfile.Clazz referencingClass>;

        $z0 = specialinvoke r0.<proguard.classfile.editor.AccessFixer: boolean inSamePackage(proguard.classfile.ProgramClass,proguard.classfile.Clazz)>($r1, $r2);

        if $z0 == 0 goto label2;

        $b2 = 1;

     label1:
        if $i1 >= $b2 goto label3;

        $i1 = staticinvoke <proguard.classfile.util.AccessUtil: int accessFlags(int)>($b2);

        $i0 = staticinvoke <proguard.classfile.util.AccessUtil: int replaceAccessFlags(int,int)>($i0, $i1);

        $r1.<proguard.classfile.ProgramClass: int u2accessFlags> = $i0;

        return;

     label2:
        $b2 = 3;

        goto label1;

     label3:
        return;
    }

    public void visitProgramMember(proguard.classfile.ProgramClass, proguard.classfile.ProgramMember)
    {
        proguard.classfile.editor.AccessFixer r0;
        proguard.classfile.ProgramClass $r1;
        proguard.classfile.ProgramMember $r2;
        byte $b2;
        proguard.classfile.Clazz $r3, $r4;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: proguard.classfile.editor.AccessFixer;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.ProgramMember;

        $i0 = virtualinvoke $r2.<proguard.classfile.ProgramMember: int getAccessFlags()>();

        $i1 = staticinvoke <proguard.classfile.util.AccessUtil: int accessLevel(int)>($i0);

        $r3 = r0.<proguard.classfile.editor.AccessFixer: proguard.classfile.Clazz referencingClass>;

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

        $b2 = 0;

     label1:
        if $i1 >= $b2 goto label5;

        $i1 = staticinvoke <proguard.classfile.util.AccessUtil: int accessFlags(int)>($b2);

        $i0 = staticinvoke <proguard.classfile.util.AccessUtil: int replaceAccessFlags(int,int)>($i0, $i1);

        $r2.<proguard.classfile.ProgramMember: int u2accessFlags> = $i0;

        return;

     label2:
        $r3 = r0.<proguard.classfile.editor.AccessFixer: proguard.classfile.Clazz referencingClass>;

        $z0 = specialinvoke r0.<proguard.classfile.editor.AccessFixer: boolean inSamePackage(proguard.classfile.ProgramClass,proguard.classfile.Clazz)>($r1, $r3);

        if $z0 == 0 goto label3;

        $b2 = 1;

        goto label1;

     label3:
        $r4 = r0.<proguard.classfile.editor.AccessFixer: proguard.classfile.Clazz referencedClass>;

        $r3 = r0.<proguard.classfile.editor.AccessFixer: proguard.classfile.Clazz referencingClass>;

        $z0 = interfaceinvoke $r4.<proguard.classfile.Clazz: boolean extends_(proguard.classfile.Clazz)>($r3);

        if $z0 == 0 goto label4;

        $r3 = r0.<proguard.classfile.editor.AccessFixer: proguard.classfile.Clazz referencingClass>;

        $z0 = interfaceinvoke $r3.<proguard.classfile.Clazz: boolean extends_(proguard.classfile.Clazz)>($r1);

        if $z0 == 0 goto label4;

        $b2 = 2;

        goto label1;

     label4:
        $b2 = 3;

        goto label1;

     label5:
        return;
    }

    public void visitStringConstant(proguard.classfile.Clazz, proguard.classfile.constant.StringConstant)
    {
        proguard.classfile.editor.AccessFixer r0;
        proguard.classfile.constant.StringConstant $r2;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.classfile.editor.AccessFixer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.StringConstant;

        r0.<proguard.classfile.editor.AccessFixer: proguard.classfile.Clazz referencingClass> = $r1;

        $r1 = $r2.<proguard.classfile.constant.StringConstant: proguard.classfile.Clazz referencedClass>;

        r0.<proguard.classfile.editor.AccessFixer: proguard.classfile.Clazz referencedClass> = $r1;

        virtualinvoke $r2.<proguard.classfile.constant.StringConstant: void referencedClassAccept(proguard.classfile.visitor.ClassVisitor)>(r0);

        virtualinvoke $r2.<proguard.classfile.constant.StringConstant: void referencedMemberAccept(proguard.classfile.visitor.MemberVisitor)>(r0);

        return;
    }
}
