final class cn.hi321.browser.decoding.InactivityTimer$DaemonThreadFactory extends java.lang.Object implements java.util.concurrent.ThreadFactory
{

    private void <init>()
    {
        cn.hi321.browser.decoding.InactivityTimer$DaemonThreadFactory r0;

        r0 := @this: cn.hi321.browser.decoding.InactivityTimer$DaemonThreadFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    void <init>(cn.hi321.browser.decoding.InactivityTimer$DaemonThreadFactory)
    {
        cn.hi321.browser.decoding.InactivityTimer$DaemonThreadFactory r0, $r1;

        r0 := @this: cn.hi321.browser.decoding.InactivityTimer$DaemonThreadFactory;

        $r1 := @parameter0: cn.hi321.browser.decoding.InactivityTimer$DaemonThreadFactory;

        specialinvoke r0.<cn.hi321.browser.decoding.InactivityTimer$DaemonThreadFactory: void <init>()>();

        return;
    }

    public java.lang.Thread newThread(java.lang.Runnable)
    {
        cn.hi321.browser.decoding.InactivityTimer$DaemonThreadFactory r0;
        java.lang.Runnable $r1;
        java.lang.Thread r2;

        r0 := @this: cn.hi321.browser.decoding.InactivityTimer$DaemonThreadFactory;

        $r1 := @parameter0: java.lang.Runnable;

        r2 = new java.lang.Thread;

        specialinvoke r2.<java.lang.Thread: void <init>(java.lang.Runnable)>($r1);

        virtualinvoke r2.<java.lang.Thread: void setDaemon(boolean)>(1);

        return r2;
    }
}
