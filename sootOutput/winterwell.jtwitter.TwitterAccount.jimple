public class winterwell.jtwitter.TwitterAccount extends java.lang.Object
{
    static final boolean $assertionsDisabled;
    public static java.lang.String COLOR_BG;
    public static java.lang.String COLOR_LINK;
    public static java.lang.String COLOR_SIDEBAR_BORDER;
    public static java.lang.String COLOR_SIDEBAR_FILL;
    public static java.lang.String COLOR_TEXT;
    final winterwell.jtwitter.Twitter jtwit;

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0;

        $r0 = class "Lwinterwell/jtwitter/TwitterAccount;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label2;

        $z0 = 1;

     label1:
        <winterwell.jtwitter.TwitterAccount: boolean $assertionsDisabled> = $z0;

        <winterwell.jtwitter.TwitterAccount: java.lang.String COLOR_BG> = "profile_background_color";

        <winterwell.jtwitter.TwitterAccount: java.lang.String COLOR_TEXT> = "profile_text_color";

        <winterwell.jtwitter.TwitterAccount: java.lang.String COLOR_LINK> = "profile_link_color";

        <winterwell.jtwitter.TwitterAccount: java.lang.String COLOR_SIDEBAR_FILL> = "profile_sidebar_fill_color";

        <winterwell.jtwitter.TwitterAccount: java.lang.String COLOR_SIDEBAR_BORDER> = "profile_sidebar_border_color";

        return;

     label2:
        $z0 = 0;

        goto label1;
    }

    public void <init>(winterwell.jtwitter.Twitter)
    {
        winterwell.jtwitter.Twitter $r1;
        winterwell.jtwitter.Twitter$IHttpClient $r2;
        winterwell.jtwitter.TwitterAccount r0;
        java.lang.AssertionError $r3;
        boolean $z0;

        r0 := @this: winterwell.jtwitter.TwitterAccount;

        $r1 := @parameter0: winterwell.jtwitter.Twitter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = <winterwell.jtwitter.TwitterAccount: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r2 = virtualinvoke $r1.<winterwell.jtwitter.Twitter: winterwell.jtwitter.Twitter$IHttpClient getHttpClient()>();

        $z0 = interfaceinvoke $r2.<winterwell.jtwitter.Twitter$IHttpClient: boolean canAuthenticate()>();

        if $z0 != 0 goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        r0.<winterwell.jtwitter.TwitterAccount: winterwell.jtwitter.Twitter jtwit> = $r1;

        return;
    }

    private winterwell.jtwitter.Twitter$User user(java.lang.String)
    {
        org.json.JSONException $r4;
        org.json.JSONObject $r2;
        winterwell.jtwitter.TwitterException $r5;
        winterwell.jtwitter.TwitterAccount r0;
        java.lang.String $r1;
        winterwell.jtwitter.Twitter$User $r3;

        r0 := @this: winterwell.jtwitter.TwitterAccount;

        $r1 := @parameter0: java.lang.String;

        $r2 = new org.json.JSONObject;

     label1:
        specialinvoke $r2.<org.json.JSONObject: void <init>(java.lang.String)>($r1);

     label2:
        $r3 = new winterwell.jtwitter.Twitter$User;

     label3:
        specialinvoke $r3.<winterwell.jtwitter.Twitter$User: void <init>(org.json.JSONObject,winterwell.jtwitter.Twitter$Status)>($r2, null);

     label4:
        return $r3;

     label5:
        $r4 := @caughtexception;

        $r5 = new winterwell.jtwitter.TwitterException;

        specialinvoke $r5.<winterwell.jtwitter.TwitterException: void <init>(java.lang.Exception)>($r4);

        throw $r5;

        catch org.json.JSONException from label1 to label2 with label5;
        catch org.json.JSONException from label3 to label4 with label5;
    }

    public winterwell.jtwitter.Twitter$User setProfileColors(java.util.Map)
    {
        java.lang.AssertionError $r2;
        winterwell.jtwitter.Twitter $r4;
        winterwell.jtwitter.Twitter$IHttpClient $r6;
        java.util.Map $r1;
        winterwell.jtwitter.TwitterAccount r0;
        java.lang.StringBuilder $r3;
        java.lang.String $r5;
        winterwell.jtwitter.Twitter$User $r7;
        boolean $z0;

        r0 := @this: winterwell.jtwitter.TwitterAccount;

        $r1 := @parameter0: java.util.Map;

        $z0 = <winterwell.jtwitter.TwitterAccount: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = r0.<winterwell.jtwitter.TwitterAccount: winterwell.jtwitter.Twitter jtwit>;

        $r5 = $r4.<winterwell.jtwitter.Twitter: java.lang.String TWITTER_URL>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/account/update_profile_colors.json");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = r0.<winterwell.jtwitter.TwitterAccount: winterwell.jtwitter.Twitter jtwit>;

        $r6 = virtualinvoke $r4.<winterwell.jtwitter.Twitter: winterwell.jtwitter.Twitter$IHttpClient getHttpClient()>();

        $r5 = interfaceinvoke $r6.<winterwell.jtwitter.Twitter$IHttpClient: java.lang.String post(java.lang.String,java.util.Map,boolean)>($r5, $r1, 1);

        $r7 = specialinvoke r0.<winterwell.jtwitter.TwitterAccount: winterwell.jtwitter.Twitter$User user(java.lang.String)>($r5);

        return $r7;
    }

    public winterwell.jtwitter.Twitter$User verifyCredentials() throws winterwell.jtwitter.TwitterException$E401
    {
        winterwell.jtwitter.Twitter $r2;
        winterwell.jtwitter.Twitter$IHttpClient $r4;
        winterwell.jtwitter.TwitterAccount r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r3;
        winterwell.jtwitter.Twitter$User $r5;

        r0 := @this: winterwell.jtwitter.TwitterAccount;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<winterwell.jtwitter.TwitterAccount: winterwell.jtwitter.Twitter jtwit>;

        $r3 = $r2.<winterwell.jtwitter.Twitter: java.lang.String TWITTER_URL>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/account/verify_credentials.json");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r2 = r0.<winterwell.jtwitter.TwitterAccount: winterwell.jtwitter.Twitter jtwit>;

        $r4 = virtualinvoke $r2.<winterwell.jtwitter.Twitter: winterwell.jtwitter.Twitter$IHttpClient getHttpClient()>();

        $r3 = interfaceinvoke $r4.<winterwell.jtwitter.Twitter$IHttpClient: java.lang.String getPage(java.lang.String,java.util.Map,boolean)>($r3, null, 1);

        $r5 = specialinvoke r0.<winterwell.jtwitter.TwitterAccount: winterwell.jtwitter.Twitter$User user(java.lang.String)>($r3);

        return $r5;
    }
}
