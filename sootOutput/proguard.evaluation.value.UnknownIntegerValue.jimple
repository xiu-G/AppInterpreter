public class proguard.evaluation.value.UnknownIntegerValue extends proguard.evaluation.value.IntegerValue
{

    public void <init>()
    {
        proguard.evaluation.value.UnknownIntegerValue r0;

        r0 := @this: proguard.evaluation.value.UnknownIntegerValue;

        specialinvoke r0.<proguard.evaluation.value.IntegerValue: void <init>()>();

        return;
    }

    public proguard.evaluation.value.IntegerValue add(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.UnknownIntegerValue r0;

        r0 := @this: proguard.evaluation.value.UnknownIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        return r0;
    }

    public proguard.evaluation.value.IntegerValue and(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.UnknownIntegerValue r0;

        r0 := @this: proguard.evaluation.value.UnknownIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        return r0;
    }

    public proguard.evaluation.value.IntegerValue convertToByte()
    {
        proguard.evaluation.value.UnknownIntegerValue r0;

        r0 := @this: proguard.evaluation.value.UnknownIntegerValue;

        return r0;
    }

    public proguard.evaluation.value.IntegerValue convertToCharacter()
    {
        proguard.evaluation.value.UnknownIntegerValue r0;

        r0 := @this: proguard.evaluation.value.UnknownIntegerValue;

        return r0;
    }

    public proguard.evaluation.value.DoubleValue convertToDouble()
    {
        proguard.evaluation.value.DoubleValue r1;
        proguard.evaluation.value.UnknownIntegerValue r0;

        r0 := @this: proguard.evaluation.value.UnknownIntegerValue;

        r1 = <proguard.evaluation.value.ValueFactory: proguard.evaluation.value.DoubleValue DOUBLE_VALUE>;

        return r1;
    }

    public proguard.evaluation.value.FloatValue convertToFloat()
    {
        proguard.evaluation.value.UnknownIntegerValue r0;
        proguard.evaluation.value.FloatValue r1;

        r0 := @this: proguard.evaluation.value.UnknownIntegerValue;

        r1 = <proguard.evaluation.value.ValueFactory: proguard.evaluation.value.FloatValue FLOAT_VALUE>;

        return r1;
    }

    public proguard.evaluation.value.LongValue convertToLong()
    {
        proguard.evaluation.value.UnknownIntegerValue r0;
        proguard.evaluation.value.LongValue r1;

        r0 := @this: proguard.evaluation.value.UnknownIntegerValue;

        r1 = <proguard.evaluation.value.ValueFactory: proguard.evaluation.value.LongValue LONG_VALUE>;

        return r1;
    }

    public proguard.evaluation.value.IntegerValue convertToShort()
    {
        proguard.evaluation.value.UnknownIntegerValue r0;

        r0 := @this: proguard.evaluation.value.UnknownIntegerValue;

        return r0;
    }

    public proguard.evaluation.value.IntegerValue divide(proguard.evaluation.value.IntegerValue) throws java.lang.ArithmeticException
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.UnknownIntegerValue r0;

        r0 := @this: proguard.evaluation.value.UnknownIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        return r0;
    }

    public proguard.evaluation.value.IntegerValue divideOf(proguard.evaluation.value.IntegerValue) throws java.lang.ArithmeticException
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.UnknownIntegerValue r0;

        r0 := @this: proguard.evaluation.value.UnknownIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        return r0;
    }

    public int equal(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.UnknownIntegerValue r0;

        r0 := @this: proguard.evaluation.value.UnknownIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        return 0;
    }

    public boolean equals(java.lang.Object)
    {
        proguard.evaluation.value.UnknownIntegerValue r0;
        java.lang.Object $r1;
        java.lang.Class $r2, $r3;

        r0 := @this: proguard.evaluation.value.UnknownIntegerValue;

        $r1 := @parameter0: java.lang.Object;

        if $r1 == null goto label1;

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 != $r3 goto label1;

        return 1;

     label1:
        return 0;
    }

    public proguard.evaluation.value.IntegerValue generalize(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.UnknownIntegerValue r0;

        r0 := @this: proguard.evaluation.value.UnknownIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        return r0;
    }

    public int hashCode()
    {
        int $i0;
        java.lang.Class $r1;
        proguard.evaluation.value.UnknownIntegerValue r0;

        r0 := @this: proguard.evaluation.value.UnknownIntegerValue;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    public int lessThan(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.UnknownIntegerValue r0;

        r0 := @this: proguard.evaluation.value.UnknownIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        return 0;
    }

    public int lessThanOrEqual(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.UnknownIntegerValue r0;

        r0 := @this: proguard.evaluation.value.UnknownIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        return 0;
    }

    public proguard.evaluation.value.IntegerValue multiply(proguard.evaluation.value.IntegerValue) throws java.lang.ArithmeticException
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.UnknownIntegerValue r0;

        r0 := @this: proguard.evaluation.value.UnknownIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        return r0;
    }

    public proguard.evaluation.value.IntegerValue negate()
    {
        proguard.evaluation.value.UnknownIntegerValue r0;

        r0 := @this: proguard.evaluation.value.UnknownIntegerValue;

        return r0;
    }

    public proguard.evaluation.value.IntegerValue or(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.UnknownIntegerValue r0;

        r0 := @this: proguard.evaluation.value.UnknownIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        return r0;
    }

    public proguard.evaluation.value.IntegerValue remainder(proguard.evaluation.value.IntegerValue) throws java.lang.ArithmeticException
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.UnknownIntegerValue r0;

        r0 := @this: proguard.evaluation.value.UnknownIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        return r0;
    }

    public proguard.evaluation.value.IntegerValue remainderOf(proguard.evaluation.value.IntegerValue) throws java.lang.ArithmeticException
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.UnknownIntegerValue r0;

        r0 := @this: proguard.evaluation.value.UnknownIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        return r0;
    }

    public proguard.evaluation.value.IntegerValue shiftLeft(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.UnknownIntegerValue r0;

        r0 := @this: proguard.evaluation.value.UnknownIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        return r0;
    }

    public proguard.evaluation.value.IntegerValue shiftLeftOf(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.UnknownIntegerValue r0;

        r0 := @this: proguard.evaluation.value.UnknownIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        return r0;
    }

    public proguard.evaluation.value.LongValue shiftLeftOf(proguard.evaluation.value.LongValue)
    {
        proguard.evaluation.value.UnknownIntegerValue r0;
        proguard.evaluation.value.LongValue $r1;

        r0 := @this: proguard.evaluation.value.UnknownIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.LongValue;

        $r1 = <proguard.evaluation.value.ValueFactory: proguard.evaluation.value.LongValue LONG_VALUE>;

        return $r1;
    }

    public proguard.evaluation.value.IntegerValue shiftRight(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.UnknownIntegerValue r0;

        r0 := @this: proguard.evaluation.value.UnknownIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        return r0;
    }

    public proguard.evaluation.value.IntegerValue shiftRightOf(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.UnknownIntegerValue r0;

        r0 := @this: proguard.evaluation.value.UnknownIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        return r0;
    }

    public proguard.evaluation.value.LongValue shiftRightOf(proguard.evaluation.value.LongValue)
    {
        proguard.evaluation.value.UnknownIntegerValue r0;
        proguard.evaluation.value.LongValue $r1;

        r0 := @this: proguard.evaluation.value.UnknownIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.LongValue;

        $r1 = <proguard.evaluation.value.ValueFactory: proguard.evaluation.value.LongValue LONG_VALUE>;

        return $r1;
    }

    public proguard.evaluation.value.IntegerValue subtract(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.UnknownIntegerValue r0;

        r0 := @this: proguard.evaluation.value.UnknownIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        return r0;
    }

    public proguard.evaluation.value.IntegerValue subtractFrom(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.UnknownIntegerValue r0;

        r0 := @this: proguard.evaluation.value.UnknownIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        return r0;
    }

    public java.lang.String toString()
    {
        proguard.evaluation.value.UnknownIntegerValue r0;

        r0 := @this: proguard.evaluation.value.UnknownIntegerValue;

        return "i";
    }

    public proguard.evaluation.value.IntegerValue unsignedShiftRight(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.UnknownIntegerValue r0;

        r0 := @this: proguard.evaluation.value.UnknownIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        return r0;
    }

    public proguard.evaluation.value.IntegerValue unsignedShiftRightOf(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.UnknownIntegerValue r0;

        r0 := @this: proguard.evaluation.value.UnknownIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        return r0;
    }

    public proguard.evaluation.value.LongValue unsignedShiftRightOf(proguard.evaluation.value.LongValue)
    {
        proguard.evaluation.value.UnknownIntegerValue r0;
        proguard.evaluation.value.LongValue $r1;

        r0 := @this: proguard.evaluation.value.UnknownIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.LongValue;

        $r1 = <proguard.evaluation.value.ValueFactory: proguard.evaluation.value.LongValue LONG_VALUE>;

        return $r1;
    }

    public proguard.evaluation.value.IntegerValue xor(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.UnknownIntegerValue r0;

        r0 := @this: proguard.evaluation.value.UnknownIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        return r0;
    }
}
