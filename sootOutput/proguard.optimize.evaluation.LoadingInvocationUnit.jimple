public class proguard.optimize.evaluation.LoadingInvocationUnit extends proguard.evaluation.BasicInvocationUnit
{
    private final boolean loadFieldValues;
    private final boolean loadMethodParameterValues;
    private final boolean loadMethodReturnValues;

    public void <init>(proguard.evaluation.value.ValueFactory)
    {
        proguard.evaluation.value.ValueFactory $r1;
        proguard.optimize.evaluation.LoadingInvocationUnit r0;

        r0 := @this: proguard.optimize.evaluation.LoadingInvocationUnit;

        $r1 := @parameter0: proguard.evaluation.value.ValueFactory;

        specialinvoke r0.<proguard.optimize.evaluation.LoadingInvocationUnit: void <init>(proguard.evaluation.value.ValueFactory,boolean,boolean,boolean)>($r1, 0, 0, 0);

        return;
    }

    public void <init>(proguard.evaluation.value.ValueFactory, boolean, boolean, boolean)
    {
        proguard.evaluation.value.ValueFactory $r1;
        proguard.optimize.evaluation.LoadingInvocationUnit r0;
        boolean $z0, $z1, $z2;

        r0 := @this: proguard.optimize.evaluation.LoadingInvocationUnit;

        $r1 := @parameter0: proguard.evaluation.value.ValueFactory;

        $z0 := @parameter1: boolean;

        $z1 := @parameter2: boolean;

        $z2 := @parameter3: boolean;

        specialinvoke r0.<proguard.evaluation.BasicInvocationUnit: void <init>(proguard.evaluation.value.ValueFactory)>($r1);

        r0.<proguard.optimize.evaluation.LoadingInvocationUnit: boolean loadFieldValues> = $z0;

        r0.<proguard.optimize.evaluation.LoadingInvocationUnit: boolean loadMethodParameterValues> = $z1;

        r0.<proguard.optimize.evaluation.LoadingInvocationUnit: boolean loadMethodReturnValues> = $z2;

        return;
    }

    protected proguard.evaluation.value.Value getFieldClassValue(proguard.classfile.Clazz, proguard.classfile.constant.RefConstant, java.lang.String)
    {
        proguard.optimize.evaluation.LoadingInvocationUnit r0;
        proguard.classfile.constant.RefConstant $r2;
        proguard.classfile.Field $r5;
        proguard.classfile.Member $r4;
        proguard.evaluation.value.ReferenceValue $r6;
        proguard.classfile.Clazz $r1;
        java.lang.String $r3;
        proguard.evaluation.value.Value $r7;
        boolean $z0;

        r0 := @this: proguard.optimize.evaluation.LoadingInvocationUnit;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.RefConstant;

        $r3 := @parameter2: java.lang.String;

        $z0 = r0.<proguard.optimize.evaluation.LoadingInvocationUnit: boolean loadFieldValues>;

        if $z0 == 0 goto label1;

        $r4 = $r2.<proguard.classfile.constant.RefConstant: proguard.classfile.Member referencedMember>;

        if $r4 == null goto label1;

        $r5 = (proguard.classfile.Field) $r4;

        $r6 = staticinvoke <proguard.optimize.evaluation.StoringInvocationUnit: proguard.evaluation.value.ReferenceValue getFieldClassValue(proguard.classfile.Field)>($r5);

        if $r6 == null goto label1;

        $z0 = virtualinvoke $r6.<proguard.evaluation.value.ReferenceValue: boolean isParticular()>();

        if $z0 == 0 goto label1;

        return $r6;

     label1:
        $r7 = specialinvoke r0.<proguard.evaluation.BasicInvocationUnit: proguard.evaluation.value.Value getFieldClassValue(proguard.classfile.Clazz,proguard.classfile.constant.RefConstant,java.lang.String)>($r1, $r2, $r3);

        return $r7;
    }

    protected proguard.evaluation.value.Value getFieldValue(proguard.classfile.Clazz, proguard.classfile.constant.RefConstant, java.lang.String)
    {
        proguard.optimize.evaluation.LoadingInvocationUnit r0;
        proguard.classfile.constant.RefConstant $r2;
        proguard.classfile.Field $r5;
        proguard.classfile.Member $r4;
        proguard.classfile.Clazz $r1;
        java.lang.String $r3;
        proguard.evaluation.value.Value $r6;
        boolean $z0;

        r0 := @this: proguard.optimize.evaluation.LoadingInvocationUnit;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.RefConstant;

        $r3 := @parameter2: java.lang.String;

        $z0 = r0.<proguard.optimize.evaluation.LoadingInvocationUnit: boolean loadFieldValues>;

        if $z0 == 0 goto label1;

        $r4 = $r2.<proguard.classfile.constant.RefConstant: proguard.classfile.Member referencedMember>;

        if $r4 == null goto label1;

        $r5 = (proguard.classfile.Field) $r4;

        $r6 = staticinvoke <proguard.optimize.evaluation.StoringInvocationUnit: proguard.evaluation.value.Value getFieldValue(proguard.classfile.Field)>($r5);

        if $r6 == null goto label1;

        $z0 = virtualinvoke $r6.<proguard.evaluation.value.Value: boolean isParticular()>();

        if $z0 == 0 goto label1;

        return $r6;

     label1:
        $r6 = specialinvoke r0.<proguard.evaluation.BasicInvocationUnit: proguard.evaluation.value.Value getFieldValue(proguard.classfile.Clazz,proguard.classfile.constant.RefConstant,java.lang.String)>($r1, $r2, $r3);

        return $r6;
    }

    protected proguard.evaluation.value.Value getMethodParameterValue(proguard.classfile.Clazz, proguard.classfile.Method, int, java.lang.String, proguard.classfile.Clazz)
    {
        proguard.optimize.evaluation.LoadingInvocationUnit r0;
        proguard.classfile.Clazz $r1, $r4;
        int $i0;
        proguard.classfile.Method $r2;
        java.lang.String $r3;
        proguard.evaluation.value.Value $r5;
        boolean $z0;

        r0 := @this: proguard.optimize.evaluation.LoadingInvocationUnit;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $i0 := @parameter2: int;

        $r3 := @parameter3: java.lang.String;

        $r4 := @parameter4: proguard.classfile.Clazz;

        $z0 = r0.<proguard.optimize.evaluation.LoadingInvocationUnit: boolean loadMethodParameterValues>;

        if $z0 == 0 goto label1;

        $r5 = staticinvoke <proguard.optimize.evaluation.StoringInvocationUnit: proguard.evaluation.value.Value getMethodParameterValue(proguard.classfile.Method,int)>($r2, $i0);

        if $r5 == null goto label1;

        $z0 = virtualinvoke $r5.<proguard.evaluation.value.Value: boolean isParticular()>();

        if $z0 == 0 goto label1;

        return $r5;

     label1:
        $r5 = specialinvoke r0.<proguard.evaluation.BasicInvocationUnit: proguard.evaluation.value.Value getMethodParameterValue(proguard.classfile.Clazz,proguard.classfile.Method,int,java.lang.String,proguard.classfile.Clazz)>($r1, $r2, $i0, $r3, $r4);

        return $r5;
    }

    protected proguard.evaluation.value.Value getMethodReturnValue(proguard.classfile.Clazz, proguard.classfile.constant.RefConstant, java.lang.String)
    {
        proguard.optimize.evaluation.LoadingInvocationUnit r0;
        proguard.classfile.constant.RefConstant $r2;
        proguard.classfile.Member $r4;
        proguard.classfile.Clazz $r1;
        proguard.classfile.Method $r5;
        java.lang.String $r3;
        proguard.evaluation.value.Value $r6;
        boolean $z0;

        r0 := @this: proguard.optimize.evaluation.LoadingInvocationUnit;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.RefConstant;

        $r3 := @parameter2: java.lang.String;

        $z0 = r0.<proguard.optimize.evaluation.LoadingInvocationUnit: boolean loadMethodReturnValues>;

        if $z0 == 0 goto label1;

        $r4 = $r2.<proguard.classfile.constant.RefConstant: proguard.classfile.Member referencedMember>;

        if $r4 == null goto label1;

        $r5 = (proguard.classfile.Method) $r4;

        $r6 = staticinvoke <proguard.optimize.evaluation.StoringInvocationUnit: proguard.evaluation.value.Value getMethodReturnValue(proguard.classfile.Method)>($r5);

        if $r6 == null goto label1;

        $z0 = virtualinvoke $r6.<proguard.evaluation.value.Value: boolean isParticular()>();

        if $z0 == 0 goto label1;

        return $r6;

     label1:
        $r6 = specialinvoke r0.<proguard.evaluation.BasicInvocationUnit: proguard.evaluation.value.Value getMethodReturnValue(proguard.classfile.Clazz,proguard.classfile.constant.RefConstant,java.lang.String)>($r1, $r2, $r3);

        return $r6;
    }
}
