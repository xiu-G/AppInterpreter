public class com.android.vending.licensing.AESObfuscator extends java.lang.Object implements com.android.vending.licensing.Obfuscator
{
    private static final byte[] a;
    private javax.crypto.Cipher b;
    private javax.crypto.Cipher c;

    static void <clinit>()
    {
        byte[] $r0;

        $r0 = newarray (byte)[16];

        $r0[0] = 16;

        $r0[1] = 74;

        $r0[2] = 71;

        $r0[3] = -80;

        $r0[4] = 32;

        $r0[5] = 101;

        $r0[6] = -47;

        $r0[7] = 72;

        $r0[8] = 117;

        $r0[9] = -14;

        $r0[10] = 0;

        $r0[11] = -29;

        $r0[12] = 70;

        $r0[13] = 65;

        $r0[14] = -12;

        $r0[15] = 74;

        <com.android.vending.licensing.AESObfuscator: byte[] a> = $r0;

        return;
    }

    public void <init>(byte[], java.lang.String, java.lang.String)
    {
        java.lang.Throwable $r12;
        byte[] $r1;
        javax.crypto.spec.SecretKeySpec $r9;
        com.android.vending.licensing.AESObfuscator r0;
        java.lang.RuntimeException $r13;
        javax.crypto.Cipher $r10;
        javax.crypto.SecretKeyFactory $r4;
        javax.crypto.spec.IvParameterSpec $r11;
        javax.crypto.spec.PBEKeySpec $r5;
        char[] $r7;
        java.lang.StringBuilder $r6;
        java.lang.String $r2, $r3;
        javax.crypto.SecretKey $r8;

        r0 := @this: com.android.vending.licensing.AESObfuscator;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

     label01:
        $r4 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>("PBEWITHSHAAND256BITAES-CBC-BC");

     label02:
        $r5 = new javax.crypto.spec.PBEKeySpec;

        $r6 = new java.lang.StringBuilder;

     label03:
        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = virtualinvoke $r2.<java.lang.String: char[] toCharArray()>();

        specialinvoke $r5.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r7, $r1, 1024, 256);

        $r8 = virtualinvoke $r4.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r5);

     label04:
        $r9 = new javax.crypto.spec.SecretKeySpec;

     label05:
        $r1 = interfaceinvoke $r8.<javax.crypto.SecretKey: byte[] getEncoded()>();

        specialinvoke $r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, "AES");

        $r10 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES/CBC/PKCS5Padding");

     label06:
        r0.<com.android.vending.licensing.AESObfuscator: javax.crypto.Cipher b> = $r10;

        $r10 = r0.<com.android.vending.licensing.AESObfuscator: javax.crypto.Cipher b>;

        $r11 = new javax.crypto.spec.IvParameterSpec;

        $r1 = <com.android.vending.licensing.AESObfuscator: byte[] a>;

     label07:
        specialinvoke $r11.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r1);

        virtualinvoke $r10.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(1, $r9, $r11);

        $r10 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES/CBC/PKCS5Padding");

     label08:
        r0.<com.android.vending.licensing.AESObfuscator: javax.crypto.Cipher c> = $r10;

        $r10 = r0.<com.android.vending.licensing.AESObfuscator: javax.crypto.Cipher c>;

        $r11 = new javax.crypto.spec.IvParameterSpec;

        $r1 = <com.android.vending.licensing.AESObfuscator: byte[] a>;

     label09:
        specialinvoke $r11.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r1);

        virtualinvoke $r10.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(2, $r9, $r11);

     label10:
        return;

     label11:
        $r12 := @caughtexception;

        $r13 = new java.lang.RuntimeException;

        specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Invalid environment", $r12);

        throw $r13;

        catch java.security.GeneralSecurityException from label01 to label02 with label11;
        catch java.security.GeneralSecurityException from label03 to label04 with label11;
        catch java.security.GeneralSecurityException from label05 to label06 with label11;
        catch java.security.GeneralSecurityException from label07 to label08 with label11;
        catch java.security.GeneralSecurityException from label09 to label10 with label11;
    }

    public final java.lang.String a(java.lang.String)
    {
        java.lang.Throwable $r5, $r7;
        byte[] $r4;
        com.android.vending.licensing.AESObfuscator r0;
        java.lang.RuntimeException $r6;
        javax.crypto.Cipher $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r1;

        r0 := @this: com.android.vending.licensing.AESObfuscator;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<com.android.vending.licensing.AESObfuscator: javax.crypto.Cipher b>;

        $r3 = new java.lang.StringBuilder;

     label2:
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("com.android.vending.licensing.AESObfuscator-1|");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = virtualinvoke $r1.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        $r4 = virtualinvoke $r2.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r4);

        $r1 = staticinvoke <com.android.vending.licensing.a.a: java.lang.String a(byte[])>($r4);

     label3:
        return $r1;

     label4:
        $r5 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Invalid environment", $r5);

        throw $r6;

     label5:
        $r7 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Invalid environment", $r7);

        throw $r6;

        catch java.io.UnsupportedEncodingException from label2 to label3 with label4;
        catch java.security.GeneralSecurityException from label2 to label3 with label5;
    }

    public final java.lang.String b(java.lang.String)
    {
        java.lang.Throwable $r8, $r9, $r10;
        byte[] $r4;
        com.android.vending.licensing.ValidationException $r12;
        javax.crypto.Cipher $r3;
        int $i0, $i1;
        java.lang.String $r1, $r2, $r7;
        com.android.vending.licensing.a.b $r6;
        javax.crypto.IllegalBlockSizeException $r14;
        com.android.vending.licensing.AESObfuscator r0;
        java.lang.RuntimeException $r13;
        javax.crypto.BadPaddingException $r15;
        java.lang.StringBuilder $r5, $r11;

        r0 := @this: com.android.vending.licensing.AESObfuscator;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label01;

        return null;

     label01:
        $r7 = new java.lang.String;

        $r2 = $r7;

        $r3 = r0.<com.android.vending.licensing.AESObfuscator: javax.crypto.Cipher c>;

     label02:
        $r4 = staticinvoke <com.android.vending.licensing.a.a: byte[] a(java.lang.String)>($r1);

        $r4 = virtualinvoke $r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r4);

        specialinvoke $r7.<java.lang.String: void <init>(byte[],java.lang.String)>($r4, "UTF-8");

        $i0 = virtualinvoke $r2.<java.lang.String: int indexOf(java.lang.String)>("com.android.vending.licensing.AESObfuscator-1|");

     label03:
        if $i0 == 0 goto label07;

        $r12 = new com.android.vending.licensing.ValidationException;

        $r11 = new java.lang.StringBuilder;

        $r5 = $r11;

     label04:
        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Header not found (invalid data or key):");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<com.android.vending.licensing.ValidationException: void <init>(java.lang.String)>($r2);

     label05:
        throw $r12;

     label06:
        $r6 := @caughtexception;

        $r12 = new com.android.vending.licensing.ValidationException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r6.<com.android.vending.licensing.a.b: java.lang.String getMessage()>();

        $r5 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<com.android.vending.licensing.ValidationException: void <init>(java.lang.String)>($r1);

        throw $r12;

     label07:
        $r7 = "com.android.vending.licensing.AESObfuscator-1|";

     label08:
        $i0 = virtualinvoke $r7.<java.lang.String: int length()>();

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>($i0, $i1);

     label09:
        return $r2;

     label10:
        $r8 := @caughtexception;

        $r12 = new com.android.vending.licensing.ValidationException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r14 = (javax.crypto.IllegalBlockSizeException) $r8;

        $r2 = virtualinvoke $r14.<javax.crypto.IllegalBlockSizeException: java.lang.String getMessage()>();

        $r5 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<com.android.vending.licensing.ValidationException: void <init>(java.lang.String)>($r1);

        throw $r12;

     label11:
        $r9 := @caughtexception;

        $r12 = new com.android.vending.licensing.ValidationException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r15 = (javax.crypto.BadPaddingException) $r9;

        $r2 = virtualinvoke $r15.<javax.crypto.BadPaddingException: java.lang.String getMessage()>();

        $r5 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<com.android.vending.licensing.ValidationException: void <init>(java.lang.String)>($r1);

        throw $r12;

     label12:
        $r10 := @caughtexception;

        $r13 = new java.lang.RuntimeException;

        specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Invalid environment", $r10);

        throw $r13;

        catch com.android.vending.licensing.a.b from label02 to label03 with label06;
        catch com.android.vending.licensing.a.b from label04 to label05 with label06;
        catch javax.crypto.IllegalBlockSizeException from label02 to label03 with label10;
        catch javax.crypto.IllegalBlockSizeException from label04 to label05 with label10;
        catch javax.crypto.BadPaddingException from label02 to label03 with label11;
        catch javax.crypto.BadPaddingException from label04 to label05 with label11;
        catch java.io.UnsupportedEncodingException from label02 to label03 with label12;
        catch java.io.UnsupportedEncodingException from label04 to label05 with label12;
        catch com.android.vending.licensing.a.b from label08 to label09 with label06;
        catch javax.crypto.IllegalBlockSizeException from label08 to label09 with label10;
        catch javax.crypto.BadPaddingException from label08 to label09 with label11;
        catch java.io.UnsupportedEncodingException from label08 to label09 with label12;
    }
}
