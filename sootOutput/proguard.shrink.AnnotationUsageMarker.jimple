public class proguard.shrink.AnnotationUsageMarker extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.attribute.visitor.AttributeVisitor, proguard.classfile.attribute.'annotation'.visitor.AnnotationVisitor, proguard.classfile.attribute.'annotation'.visitor.ElementValueVisitor, proguard.classfile.constant.visitor.ConstantVisitor, proguard.classfile.visitor.ClassVisitor, proguard.classfile.visitor.MemberVisitor
{
    private boolean annotationUsed;
    private boolean attributeUsed;
    private boolean classUsed;
    private boolean methodUsed;
    private final proguard.shrink.UsageMarker usageMarker;

    public void <init>(proguard.shrink.UsageMarker)
    {
        proguard.shrink.UsageMarker $r1;
        proguard.shrink.AnnotationUsageMarker r0;

        r0 := @this: proguard.shrink.AnnotationUsageMarker;

        $r1 := @parameter0: proguard.shrink.UsageMarker;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        r0.<proguard.shrink.AnnotationUsageMarker: proguard.shrink.UsageMarker usageMarker> = $r1;

        return;
    }

    private boolean isReferencedClassUsed(proguard.classfile.attribute.'annotation'.Annotation)
    {
        proguard.classfile.attribute.'annotation'.Annotation $r1;
        proguard.shrink.AnnotationUsageMarker r0;
        boolean z0;

        r0 := @this: proguard.shrink.AnnotationUsageMarker;

        $r1 := @parameter0: proguard.classfile.attribute.'annotation'.Annotation;

        r0.<proguard.shrink.AnnotationUsageMarker: boolean classUsed> = 1;

        virtualinvoke $r1.<proguard.classfile.attribute.'annotation'.Annotation: void referencedClassAccept(proguard.classfile.visitor.ClassVisitor)>(r0);

        z0 = r0.<proguard.shrink.AnnotationUsageMarker: boolean classUsed>;

        return z0;
    }

    private boolean isReferencedMethodUsed(proguard.classfile.attribute.'annotation'.ElementValue)
    {
        proguard.shrink.AnnotationUsageMarker r0;
        proguard.classfile.attribute.'annotation'.ElementValue $r1;
        boolean z0;

        r0 := @this: proguard.shrink.AnnotationUsageMarker;

        $r1 := @parameter0: proguard.classfile.attribute.'annotation'.ElementValue;

        r0.<proguard.shrink.AnnotationUsageMarker: boolean methodUsed> = 1;

        virtualinvoke $r1.<proguard.classfile.attribute.'annotation'.ElementValue: void referencedMethodAccept(proguard.classfile.visitor.MemberVisitor)>(r0);

        z0 = r0.<proguard.shrink.AnnotationUsageMarker: boolean methodUsed>;

        return z0;
    }

    private void markConstant(proguard.classfile.Clazz, int)
    {
        int $i0;
        proguard.shrink.AnnotationUsageMarker r0;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.shrink.AnnotationUsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $i0 := @parameter1: int;

        if $i0 <= 0 goto label1;

        interfaceinvoke $r1.<proguard.classfile.Clazz: void constantPoolEntryAccept(int,proguard.classfile.constant.visitor.ConstantVisitor)>($i0, r0);

     label1:
        return;
    }

    public void visitAnnotation(proguard.classfile.Clazz, proguard.classfile.attribute.'annotation'.Annotation)
    {
        proguard.classfile.attribute.'annotation'.Annotation $r2;
        proguard.shrink.UsageMarker $r3;
        proguard.classfile.Clazz $r1;
        int $i0;
        proguard.shrink.AnnotationUsageMarker r0;
        boolean $z0;

        r0 := @this: proguard.shrink.AnnotationUsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.Annotation;

        $z0 = specialinvoke r0.<proguard.shrink.AnnotationUsageMarker: boolean isReferencedClassUsed(proguard.classfile.attribute.'annotation'.Annotation)>($r2);

        if $z0 == 0 goto label1;

        $r3 = r0.<proguard.shrink.AnnotationUsageMarker: proguard.shrink.UsageMarker usageMarker>;

        virtualinvoke $r3.<proguard.shrink.UsageMarker: void markAsUsed(proguard.classfile.VisitorAccepter)>($r2);

        $i0 = $r2.<proguard.classfile.attribute.'annotation'.Annotation: int u2typeIndex>;

        specialinvoke r0.<proguard.shrink.AnnotationUsageMarker: void markConstant(proguard.classfile.Clazz,int)>($r1, $i0);

        virtualinvoke $r2.<proguard.classfile.attribute.'annotation'.Annotation: void elementValuesAccept(proguard.classfile.Clazz,proguard.classfile.attribute.'annotation'.visitor.ElementValueVisitor)>($r1, r0);

        r0.<proguard.shrink.AnnotationUsageMarker: boolean annotationUsed> = 1;

        r0.<proguard.shrink.AnnotationUsageMarker: boolean attributeUsed> = 1;

     label1:
        return;
    }

    public void visitAnnotationDefaultAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.'annotation'.AnnotationDefaultAttribute)
    {
        proguard.shrink.UsageMarker $r4;
        proguard.classfile.Clazz $r1;
        int $i0;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.'annotation'.AnnotationDefaultAttribute $r3;
        proguard.shrink.AnnotationUsageMarker r0;

        r0 := @this: proguard.shrink.AnnotationUsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.AnnotationDefaultAttribute;

        virtualinvoke $r3.<proguard.classfile.attribute.'annotation'.AnnotationDefaultAttribute: void defaultValueAccept(proguard.classfile.Clazz,proguard.classfile.attribute.'annotation'.visitor.ElementValueVisitor)>($r1, r0);

        $r4 = r0.<proguard.shrink.AnnotationUsageMarker: proguard.shrink.UsageMarker usageMarker>;

        virtualinvoke $r4.<proguard.shrink.UsageMarker: void markAsUsed(proguard.classfile.VisitorAccepter)>($r3);

        $i0 = $r3.<proguard.classfile.attribute.'annotation'.AnnotationDefaultAttribute: int u2attributeNameIndex>;

        specialinvoke r0.<proguard.shrink.AnnotationUsageMarker: void markConstant(proguard.classfile.Clazz,int)>($r1, $i0);

        return;
    }

    public void visitAnnotationElementValue(proguard.classfile.Clazz, proguard.classfile.attribute.'annotation'.Annotation, proguard.classfile.attribute.'annotation'.AnnotationElementValue)
    {
        proguard.classfile.attribute.'annotation'.Annotation $r2;
        proguard.shrink.UsageMarker $r4;
        proguard.classfile.attribute.'annotation'.AnnotationElementValue $r3;
        proguard.classfile.Clazz $r1;
        int $i0;
        proguard.shrink.AnnotationUsageMarker r0;
        boolean $z0, $z1;

        r0 := @this: proguard.shrink.AnnotationUsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.Annotation;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.AnnotationElementValue;

        $z0 = specialinvoke r0.<proguard.shrink.AnnotationUsageMarker: boolean isReferencedMethodUsed(proguard.classfile.attribute.'annotation'.ElementValue)>($r3);

        if $z0 == 0 goto label2;

        $z0 = r0.<proguard.shrink.AnnotationUsageMarker: boolean annotationUsed>;

        r0.<proguard.shrink.AnnotationUsageMarker: boolean annotationUsed> = 0;

        virtualinvoke $r3.<proguard.classfile.attribute.'annotation'.AnnotationElementValue: void annotationAccept(proguard.classfile.Clazz,proguard.classfile.attribute.'annotation'.visitor.AnnotationVisitor)>($r1, r0);

        $z1 = r0.<proguard.shrink.AnnotationUsageMarker: boolean annotationUsed>;

        if $z1 == 0 goto label1;

        $r4 = r0.<proguard.shrink.AnnotationUsageMarker: proguard.shrink.UsageMarker usageMarker>;

        virtualinvoke $r4.<proguard.shrink.UsageMarker: void markAsUsed(proguard.classfile.VisitorAccepter)>($r3);

        $i0 = $r3.<proguard.classfile.attribute.'annotation'.AnnotationElementValue: int u2elementNameIndex>;

        specialinvoke r0.<proguard.shrink.AnnotationUsageMarker: void markConstant(proguard.classfile.Clazz,int)>($r1, $i0);

     label1:
        r0.<proguard.shrink.AnnotationUsageMarker: boolean annotationUsed> = $z0;

     label2:
        return;
    }

    public void visitAnyAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.'annotation'.AnnotationsAttribute)
    {
        proguard.shrink.UsageMarker $r3;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.'annotation'.AnnotationsAttribute $r2;
        int $i0;
        proguard.shrink.AnnotationUsageMarker r0;
        boolean $z0;

        r0 := @this: proguard.shrink.AnnotationUsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.AnnotationsAttribute;

        r0.<proguard.shrink.AnnotationUsageMarker: boolean attributeUsed> = 0;

        virtualinvoke $r2.<proguard.classfile.attribute.'annotation'.AnnotationsAttribute: void annotationsAccept(proguard.classfile.Clazz,proguard.classfile.attribute.'annotation'.visitor.AnnotationVisitor)>($r1, r0);

        $z0 = r0.<proguard.shrink.AnnotationUsageMarker: boolean attributeUsed>;

        if $z0 == 0 goto label1;

        $r3 = r0.<proguard.shrink.AnnotationUsageMarker: proguard.shrink.UsageMarker usageMarker>;

        virtualinvoke $r3.<proguard.shrink.UsageMarker: void markAsUsed(proguard.classfile.VisitorAccepter)>($r2);

        $i0 = $r2.<proguard.classfile.attribute.'annotation'.AnnotationsAttribute: int u2attributeNameIndex>;

        specialinvoke r0.<proguard.shrink.AnnotationUsageMarker: void markConstant(proguard.classfile.Clazz,int)>($r1, $i0);

     label1:
        return;
    }

    public void visitAnyAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.Attribute)
    {
        proguard.shrink.AnnotationUsageMarker r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.Attribute $r2;

        r0 := @this: proguard.shrink.AnnotationUsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.Attribute;

        return;
    }

    public void visitAnyConstant(proguard.classfile.Clazz, proguard.classfile.constant.Constant)
    {
        proguard.shrink.UsageMarker $r3;
        proguard.classfile.Clazz $r1;
        proguard.classfile.constant.Constant $r2;
        proguard.shrink.AnnotationUsageMarker r0;

        r0 := @this: proguard.shrink.AnnotationUsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.Constant;

        $r3 = r0.<proguard.shrink.AnnotationUsageMarker: proguard.shrink.UsageMarker usageMarker>;

        virtualinvoke $r3.<proguard.shrink.UsageMarker: void markAsUsed(proguard.classfile.VisitorAccepter)>($r2);

        return;
    }

    public void visitAnyParameterAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute)
    {
        proguard.shrink.UsageMarker $r4;
        proguard.classfile.Clazz $r1;
        int $i0;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute $r3;
        proguard.shrink.AnnotationUsageMarker r0;
        boolean $z0;

        r0 := @this: proguard.shrink.AnnotationUsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute;

        r0.<proguard.shrink.AnnotationUsageMarker: boolean attributeUsed> = 0;

        virtualinvoke $r3.<proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute: void annotationsAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.'annotation'.visitor.AnnotationVisitor)>($r1, $r2, r0);

        $z0 = r0.<proguard.shrink.AnnotationUsageMarker: boolean attributeUsed>;

        if $z0 == 0 goto label1;

        $r4 = r0.<proguard.shrink.AnnotationUsageMarker: proguard.shrink.UsageMarker usageMarker>;

        virtualinvoke $r4.<proguard.shrink.UsageMarker: void markAsUsed(proguard.classfile.VisitorAccepter)>($r3);

        $i0 = $r3.<proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute: int u2attributeNameIndex>;

        specialinvoke r0.<proguard.shrink.AnnotationUsageMarker: void markConstant(proguard.classfile.Clazz,int)>($r1, $i0);

     label1:
        return;
    }

    public void visitArrayElementValue(proguard.classfile.Clazz, proguard.classfile.attribute.'annotation'.Annotation, proguard.classfile.attribute.'annotation'.ArrayElementValue)
    {
        proguard.classfile.attribute.'annotation'.Annotation $r2;
        proguard.shrink.UsageMarker $r4;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.'annotation'.ArrayElementValue $r3;
        int $i0;
        proguard.shrink.AnnotationUsageMarker r0;
        boolean $z0;

        r0 := @this: proguard.shrink.AnnotationUsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.Annotation;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.ArrayElementValue;

        $z0 = specialinvoke r0.<proguard.shrink.AnnotationUsageMarker: boolean isReferencedMethodUsed(proguard.classfile.attribute.'annotation'.ElementValue)>($r3);

        if $z0 == 0 goto label1;

        virtualinvoke $r3.<proguard.classfile.attribute.'annotation'.ArrayElementValue: void elementValuesAccept(proguard.classfile.Clazz,proguard.classfile.attribute.'annotation'.Annotation,proguard.classfile.attribute.'annotation'.visitor.ElementValueVisitor)>($r1, $r2, r0);

        $r4 = r0.<proguard.shrink.AnnotationUsageMarker: proguard.shrink.UsageMarker usageMarker>;

        virtualinvoke $r4.<proguard.shrink.UsageMarker: void markAsUsed(proguard.classfile.VisitorAccepter)>($r3);

        $i0 = $r3.<proguard.classfile.attribute.'annotation'.ArrayElementValue: int u2elementNameIndex>;

        specialinvoke r0.<proguard.shrink.AnnotationUsageMarker: void markConstant(proguard.classfile.Clazz,int)>($r1, $i0);

     label1:
        return;
    }

    public void visitClassConstant(proguard.classfile.Clazz, proguard.classfile.constant.ClassConstant)
    {
        proguard.classfile.constant.ClassConstant $r2;
        proguard.shrink.UsageMarker $r3;
        proguard.classfile.Clazz $r1;
        int $i0;
        proguard.shrink.AnnotationUsageMarker r0;
        boolean $z0;

        r0 := @this: proguard.shrink.AnnotationUsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.ClassConstant;

        $r3 = r0.<proguard.shrink.AnnotationUsageMarker: proguard.shrink.UsageMarker usageMarker>;

        $z0 = virtualinvoke $r3.<proguard.shrink.UsageMarker: boolean isUsed(proguard.classfile.VisitorAccepter)>($r2);

        r0.<proguard.shrink.AnnotationUsageMarker: boolean classUsed> = $z0;

        $z0 = r0.<proguard.shrink.AnnotationUsageMarker: boolean classUsed>;

        if $z0 != 0 goto label1;

        r0.<proguard.shrink.AnnotationUsageMarker: boolean classUsed> = 1;

        virtualinvoke $r2.<proguard.classfile.constant.ClassConstant: void referencedClassAccept(proguard.classfile.visitor.ClassVisitor)>(r0);

        $z0 = r0.<proguard.shrink.AnnotationUsageMarker: boolean classUsed>;

        if $z0 == 0 goto label1;

        $r3 = r0.<proguard.shrink.AnnotationUsageMarker: proguard.shrink.UsageMarker usageMarker>;

        virtualinvoke $r3.<proguard.shrink.UsageMarker: void markAsUsed(proguard.classfile.VisitorAccepter)>($r2);

        $i0 = $r2.<proguard.classfile.constant.ClassConstant: int u2nameIndex>;

        specialinvoke r0.<proguard.shrink.AnnotationUsageMarker: void markConstant(proguard.classfile.Clazz,int)>($r1, $i0);

     label1:
        return;
    }

    public void visitClassElementValue(proguard.classfile.Clazz, proguard.classfile.attribute.'annotation'.Annotation, proguard.classfile.attribute.'annotation'.ClassElementValue)
    {
        proguard.classfile.attribute.'annotation'.Annotation $r2;
        proguard.shrink.UsageMarker $r4;
        proguard.classfile.attribute.'annotation'.ClassElementValue $r3;
        proguard.classfile.Clazz $r1;
        int $i0;
        proguard.shrink.AnnotationUsageMarker r0;
        boolean $z0;

        r0 := @this: proguard.shrink.AnnotationUsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.Annotation;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.ClassElementValue;

        $z0 = specialinvoke r0.<proguard.shrink.AnnotationUsageMarker: boolean isReferencedMethodUsed(proguard.classfile.attribute.'annotation'.ElementValue)>($r3);

        if $z0 == 0 goto label1;

        r0.<proguard.shrink.AnnotationUsageMarker: boolean classUsed> = 1;

        $r4 = r0.<proguard.shrink.AnnotationUsageMarker: proguard.shrink.UsageMarker usageMarker>;

        virtualinvoke $r3.<proguard.classfile.attribute.'annotation'.ClassElementValue: void referencedClassesAccept(proguard.classfile.visitor.ClassVisitor)>($r4);

        $z0 = r0.<proguard.shrink.AnnotationUsageMarker: boolean classUsed>;

        if $z0 == 0 goto label1;

        $r4 = r0.<proguard.shrink.AnnotationUsageMarker: proguard.shrink.UsageMarker usageMarker>;

        virtualinvoke $r4.<proguard.shrink.UsageMarker: void markAsUsed(proguard.classfile.VisitorAccepter)>($r3);

        $i0 = $r3.<proguard.classfile.attribute.'annotation'.ClassElementValue: int u2elementNameIndex>;

        specialinvoke r0.<proguard.shrink.AnnotationUsageMarker: void markConstant(proguard.classfile.Clazz,int)>($r1, $i0);

        $i0 = $r3.<proguard.classfile.attribute.'annotation'.ClassElementValue: int u2classInfoIndex>;

        specialinvoke r0.<proguard.shrink.AnnotationUsageMarker: void markConstant(proguard.classfile.Clazz,int)>($r1, $i0);

     label1:
        return;
    }

    public void visitConstantElementValue(proguard.classfile.Clazz, proguard.classfile.attribute.'annotation'.Annotation, proguard.classfile.attribute.'annotation'.ConstantElementValue)
    {
        proguard.classfile.attribute.'annotation'.ConstantElementValue $r3;
        proguard.classfile.attribute.'annotation'.Annotation $r2;
        proguard.shrink.UsageMarker $r4;
        proguard.classfile.Clazz $r1;
        int $i0;
        proguard.shrink.AnnotationUsageMarker r0;
        boolean $z0;

        r0 := @this: proguard.shrink.AnnotationUsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.Annotation;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.ConstantElementValue;

        $z0 = specialinvoke r0.<proguard.shrink.AnnotationUsageMarker: boolean isReferencedMethodUsed(proguard.classfile.attribute.'annotation'.ElementValue)>($r3);

        if $z0 == 0 goto label1;

        $r4 = r0.<proguard.shrink.AnnotationUsageMarker: proguard.shrink.UsageMarker usageMarker>;

        virtualinvoke $r4.<proguard.shrink.UsageMarker: void markAsUsed(proguard.classfile.VisitorAccepter)>($r3);

        $i0 = $r3.<proguard.classfile.attribute.'annotation'.ConstantElementValue: int u2elementNameIndex>;

        specialinvoke r0.<proguard.shrink.AnnotationUsageMarker: void markConstant(proguard.classfile.Clazz,int)>($r1, $i0);

        $i0 = $r3.<proguard.classfile.attribute.'annotation'.ConstantElementValue: int u2constantValueIndex>;

        specialinvoke r0.<proguard.shrink.AnnotationUsageMarker: void markConstant(proguard.classfile.Clazz,int)>($r1, $i0);

     label1:
        return;
    }

    public void visitEnumConstantElementValue(proguard.classfile.Clazz, proguard.classfile.attribute.'annotation'.Annotation, proguard.classfile.attribute.'annotation'.EnumConstantElementValue)
    {
        proguard.classfile.attribute.'annotation'.Annotation $r2;
        proguard.shrink.UsageMarker $r4;
        proguard.classfile.Clazz $r1;
        int $i0;
        proguard.classfile.attribute.'annotation'.EnumConstantElementValue $r3;
        proguard.shrink.AnnotationUsageMarker r0;
        boolean $z0;

        r0 := @this: proguard.shrink.AnnotationUsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.Annotation;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.EnumConstantElementValue;

        $z0 = specialinvoke r0.<proguard.shrink.AnnotationUsageMarker: boolean isReferencedMethodUsed(proguard.classfile.attribute.'annotation'.ElementValue)>($r3);

        if $z0 == 0 goto label1;

        r0.<proguard.shrink.AnnotationUsageMarker: boolean classUsed> = 1;

        $r4 = r0.<proguard.shrink.AnnotationUsageMarker: proguard.shrink.UsageMarker usageMarker>;

        virtualinvoke $r3.<proguard.classfile.attribute.'annotation'.EnumConstantElementValue: void referencedClassesAccept(proguard.classfile.visitor.ClassVisitor)>($r4);

        $z0 = r0.<proguard.shrink.AnnotationUsageMarker: boolean classUsed>;

        if $z0 == 0 goto label1;

        $r4 = r0.<proguard.shrink.AnnotationUsageMarker: proguard.shrink.UsageMarker usageMarker>;

        virtualinvoke $r4.<proguard.shrink.UsageMarker: void markAsUsed(proguard.classfile.VisitorAccepter)>($r3);

        $i0 = $r3.<proguard.classfile.attribute.'annotation'.EnumConstantElementValue: int u2elementNameIndex>;

        specialinvoke r0.<proguard.shrink.AnnotationUsageMarker: void markConstant(proguard.classfile.Clazz,int)>($r1, $i0);

        $i0 = $r3.<proguard.classfile.attribute.'annotation'.EnumConstantElementValue: int u2typeNameIndex>;

        specialinvoke r0.<proguard.shrink.AnnotationUsageMarker: void markConstant(proguard.classfile.Clazz,int)>($r1, $i0);

        $i0 = $r3.<proguard.classfile.attribute.'annotation'.EnumConstantElementValue: int u2constantNameIndex>;

        specialinvoke r0.<proguard.shrink.AnnotationUsageMarker: void markConstant(proguard.classfile.Clazz,int)>($r1, $i0);

     label1:
        return;
    }

    public void visitLibraryClass(proguard.classfile.LibraryClass)
    {
        proguard.classfile.LibraryClass $r1;
        proguard.shrink.AnnotationUsageMarker r0;

        r0 := @this: proguard.shrink.AnnotationUsageMarker;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        r0.<proguard.shrink.AnnotationUsageMarker: boolean classUsed> = 1;

        return;
    }

    public void visitLibraryMethod(proguard.classfile.LibraryClass, proguard.classfile.LibraryMethod)
    {
        proguard.classfile.LibraryMethod $r2;
        proguard.classfile.LibraryClass $r1;
        proguard.shrink.AnnotationUsageMarker r0;

        r0 := @this: proguard.shrink.AnnotationUsageMarker;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        $r2 := @parameter1: proguard.classfile.LibraryMethod;

        r0.<proguard.shrink.AnnotationUsageMarker: boolean classUsed> = 1;

        return;
    }

    public void visitProgramClass(proguard.classfile.ProgramClass)
    {
        proguard.shrink.UsageMarker $r2;
        proguard.shrink.AnnotationUsageMarker r0;
        proguard.classfile.ProgramClass $r1;
        boolean $z0;

        r0 := @this: proguard.shrink.AnnotationUsageMarker;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 = r0.<proguard.shrink.AnnotationUsageMarker: proguard.shrink.UsageMarker usageMarker>;

        $z0 = virtualinvoke $r2.<proguard.shrink.UsageMarker: boolean isUsed(proguard.classfile.VisitorAccepter)>($r1);

        r0.<proguard.shrink.AnnotationUsageMarker: boolean classUsed> = $z0;

        return;
    }

    public void visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod)
    {
        proguard.shrink.UsageMarker $r3;
        proguard.classfile.ProgramMethod $r2;
        proguard.shrink.AnnotationUsageMarker r0;
        proguard.classfile.ProgramClass $r1;
        boolean $z0;

        r0 := @this: proguard.shrink.AnnotationUsageMarker;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.ProgramMethod;

        $r3 = r0.<proguard.shrink.AnnotationUsageMarker: proguard.shrink.UsageMarker usageMarker>;

        $z0 = virtualinvoke $r3.<proguard.shrink.UsageMarker: boolean isUsed(proguard.classfile.VisitorAccepter)>($r2);

        r0.<proguard.shrink.AnnotationUsageMarker: boolean methodUsed> = $z0;

        return;
    }
}
