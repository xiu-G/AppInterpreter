public class com.parse.CountingMultipartEntity$CountingOutputStream extends java.io.FilterOutputStream
{
    private boolean hasReportedDone;
    private final com.parse.ProgressCallback progressCallback;
    private long totalSize;
    private long uploadedSize;

    public void <init>(java.io.OutputStream, com.parse.ProgressCallback, long)
    {
        java.io.OutputStream $r1;
        com.parse.ProgressCallback $r2;
        com.parse.CountingMultipartEntity$CountingOutputStream r0;
        long $l0;

        r0 := @this: com.parse.CountingMultipartEntity$CountingOutputStream;

        $r1 := @parameter0: java.io.OutputStream;

        $r2 := @parameter1: com.parse.ProgressCallback;

        $l0 := @parameter2: long;

        specialinvoke r0.<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>($r1);

        r0.<com.parse.CountingMultipartEntity$CountingOutputStream: boolean hasReportedDone> = 0;

        r0.<com.parse.CountingMultipartEntity$CountingOutputStream: com.parse.ProgressCallback progressCallback> = $r2;

        r0.<com.parse.CountingMultipartEntity$CountingOutputStream: long totalSize> = $l0;

        r0.<com.parse.CountingMultipartEntity$CountingOutputStream: long uploadedSize> = 0L;

        return;
    }

    private void notifyCallback()
    {
        com.parse.b $r2;
        long $l1;
        com.parse.ProgressCallback $r1;
        com.parse.CountingMultipartEntity$CountingOutputStream r0;
        int $i0;
        float $f0, $f1;
        boolean $z0;

        r0 := @this: com.parse.CountingMultipartEntity$CountingOutputStream;

        $z0 = r0.<com.parse.CountingMultipartEntity$CountingOutputStream: boolean hasReportedDone>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $l1 = r0.<com.parse.CountingMultipartEntity$CountingOutputStream: long uploadedSize>;

        $f0 = (float) $l1;

        $l1 = r0.<com.parse.CountingMultipartEntity$CountingOutputStream: long totalSize>;

        $f1 = (float) $l1;

        $f0 = $f0 / $f1;

        $f0 = $f0 * 100.0F;

        $i0 = staticinvoke <java.lang.Math: int round(float)>($f0);

        $r2 = new com.parse.b;

        $r1 = r0.<com.parse.CountingMultipartEntity$CountingOutputStream: com.parse.ProgressCallback progressCallback>;

        specialinvoke $r2.<com.parse.b: void <init>(com.parse.CountingMultipartEntity$CountingOutputStream,com.parse.k,int)>(r0, $r1, $i0);

        staticinvoke <com.parse.a: int a(com.parse.a)>($r2);

        if $i0 != 100 goto label2;

        r0.<com.parse.CountingMultipartEntity$CountingOutputStream: boolean hasReportedDone> = 1;

     label2:
        return;
    }

    public void write(int)
    {
        java.io.OutputStream $r1;
        com.parse.CountingMultipartEntity$CountingOutputStream r0;
        int $i0;
        long $l1;

        r0 := @this: com.parse.CountingMultipartEntity$CountingOutputStream;

        $i0 := @parameter0: int;

        $r1 = r0.<com.parse.CountingMultipartEntity$CountingOutputStream: java.io.OutputStream out>;

        virtualinvoke $r1.<java.io.OutputStream: void write(int)>($i0);

        $l1 = r0.<com.parse.CountingMultipartEntity$CountingOutputStream: long uploadedSize>;

        $l1 = $l1 + 1L;

        r0.<com.parse.CountingMultipartEntity$CountingOutputStream: long uploadedSize> = $l1;

        specialinvoke r0.<com.parse.CountingMultipartEntity$CountingOutputStream: void notifyCallback()>();

        return;
    }

    public void write(byte[], int, int)
    {
        java.io.OutputStream $r2;
        byte[] $r1;
        com.parse.CountingMultipartEntity$CountingOutputStream r0;
        int $i0, $i1;
        long $l2, $l3;

        r0 := @this: com.parse.CountingMultipartEntity$CountingOutputStream;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = r0.<com.parse.CountingMultipartEntity$CountingOutputStream: java.io.OutputStream out>;

        virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>($r1, $i0, $i1);

        $l3 = r0.<com.parse.CountingMultipartEntity$CountingOutputStream: long uploadedSize>;

        $l2 = (long) $i1;

        $l2 = $l3 + $l2;

        r0.<com.parse.CountingMultipartEntity$CountingOutputStream: long uploadedSize> = $l2;

        specialinvoke r0.<com.parse.CountingMultipartEntity$CountingOutputStream: void notifyCallback()>();

        return;
    }
}
