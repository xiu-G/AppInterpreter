public class it.intelisoft.mobile.crypto.business.datamanagers.backend.db.upgrades.DBCreate extends java.lang.Object implements it.intelisoft.mobile.crypto.business.datamanagers.backend.interfaces.DBUpgradeInterface
{
    private android.content.Context context_;
    private android.database.sqlite.SQLiteDatabase db_;
    private int newVersion_;
    private int oldVersion_;

    public void <init>(android.content.Context, android.database.sqlite.SQLiteDatabase, int, int)
    {
        android.content.Context $r1;
        android.database.sqlite.SQLiteDatabase $r2;
        it.intelisoft.mobile.crypto.business.datamanagers.backend.db.upgrades.DBCreate r0;
        int $i0, $i1, $i2;

        r0 := @this: it.intelisoft.mobile.crypto.business.datamanagers.backend.db.upgrades.DBCreate;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: android.database.sqlite.SQLiteDatabase;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<it.intelisoft.mobile.crypto.business.datamanagers.backend.db.upgrades.DBCreate: android.database.sqlite.SQLiteDatabase db_> = null;

        r0.<it.intelisoft.mobile.crypto.business.datamanagers.backend.db.upgrades.DBCreate: android.content.Context context_> = null;

        $i2 = -1;

        r0.<it.intelisoft.mobile.crypto.business.datamanagers.backend.db.upgrades.DBCreate: int oldVersion_> = $i2;

        $i2 = -1;

        r0.<it.intelisoft.mobile.crypto.business.datamanagers.backend.db.upgrades.DBCreate: int newVersion_> = $i2;

        r0.<it.intelisoft.mobile.crypto.business.datamanagers.backend.db.upgrades.DBCreate: android.database.sqlite.SQLiteDatabase db_> = $r2;

        r0.<it.intelisoft.mobile.crypto.business.datamanagers.backend.db.upgrades.DBCreate: int oldVersion_> = $i0;

        r0.<it.intelisoft.mobile.crypto.business.datamanagers.backend.db.upgrades.DBCreate: int newVersion_> = $i1;

        r0.<it.intelisoft.mobile.crypto.business.datamanagers.backend.db.upgrades.DBCreate: android.content.Context context_> = $r1;

        return;
    }

    public boolean create()
    {
        java.lang.Throwable $r8;
        it.intelisoft.mobile.crypto.business.datamanagers.backend.db.upgrades.DBCreate r0;
        java.lang.Exception $r7;
        android.database.sqlite.SQLiteDatabase $r3;
        int $i0;
        java.lang.StringBuilder $r4;
        java.lang.String r2, $r5;
        android.database.Cursor r1, $r6;

        r0 := @this: it.intelisoft.mobile.crypto.business.datamanagers.backend.db.upgrades.DBCreate;

        r1 = null;

        r2 = "preferences";

     label01:
        $r3 = r0.<it.intelisoft.mobile.crypto.business.datamanagers.backend.db.upgrades.DBCreate: android.database.sqlite.SQLiteDatabase db_>;

     label02:
        $r4 = new java.lang.StringBuilder;

     label03:
        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("SELECT name FROM sqlite_master WHERE type=\'table\' AND name=\'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("preferences");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])>($r5, null);

     label04:
        r1 = $r6;

     label05:
        $i0 = interfaceinvoke $r6.<android.database.Cursor: int getCount()>();

     label06:
        if $i0 != 0 goto label10;

     label07:
        $r3 = r0.<it.intelisoft.mobile.crypto.business.datamanagers.backend.db.upgrades.DBCreate: android.database.sqlite.SQLiteDatabase db_>;

     label08:
        $r4 = new java.lang.StringBuilder;

     label09:
        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("CREATE TABLE ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("preferences");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (id INTEGER NOT NULL, ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" description TEXT, ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" value TEXT, ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" startdateval DATETIME NOT NULL , ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" enddateval DATETIME ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r5);

     label10:
        r2 = "logerrors";

     label11:
        $r3 = r0.<it.intelisoft.mobile.crypto.business.datamanagers.backend.db.upgrades.DBCreate: android.database.sqlite.SQLiteDatabase db_>;

     label12:
        $r4 = new java.lang.StringBuilder;

     label13:
        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("SELECT name FROM sqlite_master WHERE type=\'table\' AND name=\'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("logerrors");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])>($r5, null);

     label14:
        r1 = $r6;

     label15:
        $i0 = interfaceinvoke $r6.<android.database.Cursor: int getCount()>();

     label16:
        if $i0 != 0 goto label20;

     label17:
        $r3 = r0.<it.intelisoft.mobile.crypto.business.datamanagers.backend.db.upgrades.DBCreate: android.database.sqlite.SQLiteDatabase db_>;

     label18:
        $r4 = new java.lang.StringBuilder;

     label19:
        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("CREATE TABLE ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("logerrors");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" key TEXT NOT NULL, ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" errortypeid INTEGER NOT NULL, ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" data TEXT, ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" method TEXT, ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" exception TEXT, ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" insdateval DATETIME NOT NULL  ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r5);

     label20:
        r2 = "userdata";

     label21:
        $r3 = r0.<it.intelisoft.mobile.crypto.business.datamanagers.backend.db.upgrades.DBCreate: android.database.sqlite.SQLiteDatabase db_>;

     label22:
        $r4 = new java.lang.StringBuilder;

     label23:
        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("SELECT name FROM sqlite_master WHERE type=\'table\' AND name=\'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("userdata");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])>($r5, null);

     label24:
        r1 = $r6;

     label25:
        $i0 = interfaceinvoke $r6.<android.database.Cursor: int getCount()>();

     label26:
        if $i0 != 0 goto label30;

     label27:
        $r3 = r0.<it.intelisoft.mobile.crypto.business.datamanagers.backend.db.upgrades.DBCreate: android.database.sqlite.SQLiteDatabase db_>;

     label28:
        $r4 = new java.lang.StringBuilder;

     label29:
        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("CREATE TABLE ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("userdata");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" typeid INTEGER  NOT NULL, ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" key TEXT  NOT NULL, ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" data TEXT  NOT NULL, ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" description TEXT, ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" occurs INTEGER, ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" startdateval DATETIME NOT NULL, ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" enddateval DATETIME ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r5);

     label30:
        r2 = "log";

     label31:
        $r3 = r0.<it.intelisoft.mobile.crypto.business.datamanagers.backend.db.upgrades.DBCreate: android.database.sqlite.SQLiteDatabase db_>;

     label32:
        $r4 = new java.lang.StringBuilder;

     label33:
        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("SELECT name FROM sqlite_master WHERE type=\'table\' AND name=\'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("log");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])>($r5, null);

     label34:
        r1 = $r6;

     label35:
        $i0 = interfaceinvoke $r6.<android.database.Cursor: int getCount()>();

     label36:
        if $i0 != 0 goto label40;

     label37:
        $r3 = r0.<it.intelisoft.mobile.crypto.business.datamanagers.backend.db.upgrades.DBCreate: android.database.sqlite.SQLiteDatabase db_>;

     label38:
        $r4 = new java.lang.StringBuilder;

     label39:
        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("CREATE TABLE ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("log");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" logtypeid INTEGER  NOT NULL , ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" key TEXT, ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" insdateval DATETIME NOT NULL  ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r5);

     label40:
        if $r6 == null goto label41;

        interfaceinvoke $r6.<android.database.Cursor: void close()>();

     label41:
        return 1;

     label42:
        $r7 := @caughtexception;

     label43:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Error creating table ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Descr: ");

        r2 = virtualinvoke $r7.<java.lang.Exception: java.lang.String getMessage()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        r2 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Database upgrade", r2);

     label44:
        if r1 == null goto label45;

        interfaceinvoke r1.<android.database.Cursor: void close()>();

     label45:
        return 0;

     label46:
        $r8 := @caughtexception;

        if r1 == null goto label47;

        interfaceinvoke r1.<android.database.Cursor: void close()>();

     label47:
        throw $r8;

        catch java.lang.Exception from label01 to label02 with label42;
        catch java.lang.Exception from label03 to label04 with label42;
        catch java.lang.Exception from label05 to label06 with label42;
        catch java.lang.Exception from label07 to label08 with label42;
        catch java.lang.Exception from label09 to label10 with label42;
        catch java.lang.Exception from label11 to label12 with label42;
        catch java.lang.Exception from label13 to label14 with label42;
        catch java.lang.Exception from label15 to label16 with label42;
        catch java.lang.Exception from label17 to label18 with label42;
        catch java.lang.Exception from label19 to label20 with label42;
        catch java.lang.Exception from label21 to label22 with label42;
        catch java.lang.Exception from label23 to label24 with label42;
        catch java.lang.Exception from label25 to label26 with label42;
        catch java.lang.Exception from label27 to label28 with label42;
        catch java.lang.Exception from label29 to label30 with label42;
        catch java.lang.Exception from label31 to label32 with label42;
        catch java.lang.Exception from label33 to label34 with label42;
        catch java.lang.Exception from label35 to label36 with label42;
        catch java.lang.Exception from label37 to label38 with label42;
        catch java.lang.Exception from label39 to label40 with label42;
        catch java.lang.Throwable from label01 to label04 with label46;
        catch java.lang.Throwable from label05 to label06 with label46;
        catch java.lang.Throwable from label07 to label10 with label46;
        catch java.lang.Throwable from label11 to label14 with label46;
        catch java.lang.Throwable from label15 to label16 with label46;
        catch java.lang.Throwable from label17 to label20 with label46;
        catch java.lang.Throwable from label21 to label24 with label46;
        catch java.lang.Throwable from label25 to label26 with label46;
        catch java.lang.Throwable from label27 to label30 with label46;
        catch java.lang.Throwable from label31 to label34 with label46;
        catch java.lang.Throwable from label35 to label36 with label46;
        catch java.lang.Throwable from label37 to label40 with label46;
        catch java.lang.Throwable from label43 to label44 with label46;
    }

    public boolean drop()
    {
        it.intelisoft.mobile.crypto.business.datamanagers.backend.db.upgrades.DBCreate r0;
        java.lang.Exception $r6, $r7;
        android.database.sqlite.SQLiteDatabase $r2;
        java.lang.StringBuilder $r3;
        java.lang.String r1, $r4, r5;

        r0 := @this: it.intelisoft.mobile.crypto.business.datamanagers.backend.db.upgrades.DBCreate;

        r1 = "preferences";

     label01:
        $r2 = r0.<it.intelisoft.mobile.crypto.business.datamanagers.backend.db.upgrades.DBCreate: android.database.sqlite.SQLiteDatabase db_>;

     label02:
        $r3 = new java.lang.StringBuilder;

     label03:
        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("DROP TABLE IF EXISTS ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("preferences");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r4);

     label04:
        r1 = "logerrors";

     label05:
        $r2 = r0.<it.intelisoft.mobile.crypto.business.datamanagers.backend.db.upgrades.DBCreate: android.database.sqlite.SQLiteDatabase db_>;

     label06:
        $r3 = new java.lang.StringBuilder;

     label07:
        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("DROP TABLE IF EXISTS ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("logerrors");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r4);

     label08:
        r5 = "userdata";

     label09:
        $r2 = r0.<it.intelisoft.mobile.crypto.business.datamanagers.backend.db.upgrades.DBCreate: android.database.sqlite.SQLiteDatabase db_>;

     label10:
        $r3 = new java.lang.StringBuilder;

     label11:
        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("DROP TABLE IF EXISTS ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("userdata");

        r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>(r1);

     label12:
        r5 = "log";

     label13:
        $r2 = r0.<it.intelisoft.mobile.crypto.business.datamanagers.backend.db.upgrades.DBCreate: android.database.sqlite.SQLiteDatabase db_>;

     label14:
        $r3 = new java.lang.StringBuilder;

     label15:
        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("DROP TABLE IF EXISTS ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("log");

        r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>(r1);

     label16:
        return 1;

     label17:
        $r6 := @caughtexception;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Error dropping table ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" MSG: ");

        r5 = virtualinvoke $r6.<java.lang.Exception: java.lang.String getMessage()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Database drop", r5);

        return 0;

     label18:
        $r7 := @caughtexception;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Error dropping table ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" MSG: ");

        r5 = virtualinvoke $r7.<java.lang.Exception: java.lang.String getMessage()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Database drop", r5);

        return 0;

        catch java.lang.Exception from label01 to label02 with label17;
        catch java.lang.Exception from label03 to label04 with label17;
        catch java.lang.Exception from label05 to label06 with label17;
        catch java.lang.Exception from label07 to label08 with label17;
        catch java.lang.Exception from label09 to label10 with label18;
        catch java.lang.Exception from label11 to label12 with label18;
        catch java.lang.Exception from label13 to label14 with label18;
        catch java.lang.Exception from label15 to label16 with label18;
    }

    public boolean populate()
    {
        java.lang.Throwable $r11;
        it.intelisoft.mobile.crypto.business.datamanagers.backend.submanagers.prefsandlogs.PrefsLogsStorageManagerBE $r2;
        it.intelisoft.mobile.crypto.business.datamanagers.backend.db.upgrades.DBCreate r0;
        java.lang.Integer $r3, $r4;
        java.lang.Exception $r9;
        it.intelisoft.mobile.crypto.business.datamanagers.backend.submanagers.login.LoginManagerBE $r8;
        android.database.sqlite.SQLiteDatabase $r1;
        it.intelisoft.mobile.crypto.business.utils.UtilitiesLite $r5;
        java.lang.StringBuilder $r10;
        java.lang.String $r7;
        it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_ $r6;

        r0 := @this: it.intelisoft.mobile.crypto.business.datamanagers.backend.db.upgrades.DBCreate;

     label1:
        $r2 = staticinvoke <it.intelisoft.mobile.crypto.business.datamanagers.backend.submanagers.prefsandlogs.PrefsLogsStorageManagerBE: it.intelisoft.mobile.crypto.business.datamanagers.backend.submanagers.prefsandlogs.PrefsLogsStorageManagerBE getInstance()>();

        $r1 = r0.<it.intelisoft.mobile.crypto.business.datamanagers.backend.db.upgrades.DBCreate: android.database.sqlite.SQLiteDatabase db_>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke $r2.<it.intelisoft.mobile.crypto.business.datamanagers.backend.submanagers.prefsandlogs.PrefsLogsStorageManagerBE: boolean savePref(android.database.sqlite.SQLiteDatabase,java.lang.Integer,java.lang.Integer,java.lang.String)>($r1, $r3, $r4, "");

        $r2 = staticinvoke <it.intelisoft.mobile.crypto.business.datamanagers.backend.submanagers.prefsandlogs.PrefsLogsStorageManagerBE: it.intelisoft.mobile.crypto.business.datamanagers.backend.submanagers.prefsandlogs.PrefsLogsStorageManagerBE getInstance()>();

        $r1 = r0.<it.intelisoft.mobile.crypto.business.datamanagers.backend.db.upgrades.DBCreate: android.database.sqlite.SQLiteDatabase db_>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke $r2.<it.intelisoft.mobile.crypto.business.datamanagers.backend.submanagers.prefsandlogs.PrefsLogsStorageManagerBE: boolean savePref(android.database.sqlite.SQLiteDatabase,java.lang.Integer,java.lang.Integer,java.lang.String)>($r1, $r3, $r4, "");

        $r2 = staticinvoke <it.intelisoft.mobile.crypto.business.datamanagers.backend.submanagers.prefsandlogs.PrefsLogsStorageManagerBE: it.intelisoft.mobile.crypto.business.datamanagers.backend.submanagers.prefsandlogs.PrefsLogsStorageManagerBE getInstance()>();

        $r1 = r0.<it.intelisoft.mobile.crypto.business.datamanagers.backend.db.upgrades.DBCreate: android.database.sqlite.SQLiteDatabase db_>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke $r2.<it.intelisoft.mobile.crypto.business.datamanagers.backend.submanagers.prefsandlogs.PrefsLogsStorageManagerBE: boolean savePref(android.database.sqlite.SQLiteDatabase,java.lang.Integer,java.lang.Integer,java.lang.String)>($r1, $r3, $r4, "");

        $r5 = staticinvoke <it.intelisoft.mobile.crypto.business.utils.UtilitiesLite: it.intelisoft.mobile.crypto.business.utils.UtilitiesLite getInstance()>();

        $r6 = $r5.<it.intelisoft.mobile.crypto.business.utils.UtilitiesLite: it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_ DATE>;

        $r7 = virtualinvoke $r6.<it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_: java.lang.String getStringSysdate(java.lang.String)>("yyyyMMddHHmmss");

        $r8 = staticinvoke <it.intelisoft.mobile.crypto.business.datamanagers.backend.submanagers.login.LoginManagerBE: it.intelisoft.mobile.crypto.business.datamanagers.backend.submanagers.login.LoginManagerBE getInstance()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r1 = r0.<it.intelisoft.mobile.crypto.business.datamanagers.backend.db.upgrades.DBCreate: android.database.sqlite.SQLiteDatabase db_>;

        virtualinvoke $r8.<it.intelisoft.mobile.crypto.business.datamanagers.backend.submanagers.login.LoginManagerBE: boolean putNewSystemData(java.lang.String,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.database.sqlite.SQLiteDatabase)>("123", $r3, "abc", "0", $r7, "WAITING", $r1);

     label2:
        goto label3;

     label3:
        return 1;

     label4:
        $r9 := @caughtexception;

     label5:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("Error creating table ");

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(null);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Descr: ");

        $r7 = virtualinvoke $r9.<java.lang.Exception: java.lang.String getMessage()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r7 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Database populate", $r7);

     label6:
        goto label7;

     label7:
        return 0;

     label8:
        $r11 := @caughtexception;

        goto label9;

     label9:
        throw $r11;

        catch java.lang.Exception from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label5 to label6 with label8;
    }

    public boolean storeFromTMP()
    {
        it.intelisoft.mobile.crypto.business.datamanagers.backend.db.upgrades.DBCreate r0;

        r0 := @this: it.intelisoft.mobile.crypto.business.datamanagers.backend.db.upgrades.DBCreate;

        return 1;
    }

    public boolean storeToTMP()
    {
        it.intelisoft.mobile.crypto.business.datamanagers.backend.db.upgrades.DBCreate r0;

        r0 := @this: it.intelisoft.mobile.crypto.business.datamanagers.backend.db.upgrades.DBCreate;

        return 1;
    }
}
