public class proguard.classfile.instruction.visitor.MultiInstructionVisitor extends java.lang.Object implements proguard.classfile.instruction.visitor.InstructionVisitor
{
    private static final int ARRAY_SIZE_INCREMENT;
    private int instructionVisitorCount;
    private proguard.classfile.instruction.visitor.InstructionVisitor[] instructionVisitors;

    public void <init>()
    {
        proguard.classfile.instruction.visitor.MultiInstructionVisitor r0;

        r0 := @this: proguard.classfile.instruction.visitor.MultiInstructionVisitor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(proguard.classfile.instruction.visitor.InstructionVisitor[])
    {
        proguard.classfile.instruction.visitor.MultiInstructionVisitor r0;
        int $i0;
        proguard.classfile.instruction.visitor.InstructionVisitor[] $r1;

        r0 := @this: proguard.classfile.instruction.visitor.MultiInstructionVisitor;

        $r1 := @parameter0: proguard.classfile.instruction.visitor.InstructionVisitor[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<proguard.classfile.instruction.visitor.MultiInstructionVisitor: proguard.classfile.instruction.visitor.InstructionVisitor[] instructionVisitors> = $r1;

        $i0 = lengthof $r1;

        r0.<proguard.classfile.instruction.visitor.MultiInstructionVisitor: int instructionVisitorCount> = $i0;

        return;
    }

    private void ensureArraySize()
    {
        proguard.classfile.instruction.visitor.MultiInstructionVisitor r0;
        int $i0, $i1;
        proguard.classfile.instruction.visitor.InstructionVisitor[] $r1, $r2;

        r0 := @this: proguard.classfile.instruction.visitor.MultiInstructionVisitor;

        $r1 = r0.<proguard.classfile.instruction.visitor.MultiInstructionVisitor: proguard.classfile.instruction.visitor.InstructionVisitor[] instructionVisitors>;

        if $r1 != null goto label1;

        $r1 = newarray (proguard.classfile.instruction.visitor.InstructionVisitor)[5];

        r0.<proguard.classfile.instruction.visitor.MultiInstructionVisitor: proguard.classfile.instruction.visitor.InstructionVisitor[] instructionVisitors> = $r1;

        return;

     label1:
        $r1 = r0.<proguard.classfile.instruction.visitor.MultiInstructionVisitor: proguard.classfile.instruction.visitor.InstructionVisitor[] instructionVisitors>;

        $i0 = lengthof $r1;

        $i1 = r0.<proguard.classfile.instruction.visitor.MultiInstructionVisitor: int instructionVisitorCount>;

        if $i0 != $i1 goto label2;

        $i0 = r0.<proguard.classfile.instruction.visitor.MultiInstructionVisitor: int instructionVisitorCount>;

        $i0 = $i0 + 5;

        $r1 = newarray (proguard.classfile.instruction.visitor.InstructionVisitor)[$i0];

        $r2 = r0.<proguard.classfile.instruction.visitor.MultiInstructionVisitor: proguard.classfile.instruction.visitor.InstructionVisitor[] instructionVisitors>;

        $i0 = r0.<proguard.classfile.instruction.visitor.MultiInstructionVisitor: int instructionVisitorCount>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r1, 0, $i0);

        r0.<proguard.classfile.instruction.visitor.MultiInstructionVisitor: proguard.classfile.instruction.visitor.InstructionVisitor[] instructionVisitors> = $r1;

     label2:
        return;
    }

    public void addInstructionVisitor(proguard.classfile.instruction.visitor.InstructionVisitor)
    {
        proguard.classfile.instruction.visitor.MultiInstructionVisitor r0;
        int $i0, $i1;
        proguard.classfile.instruction.visitor.InstructionVisitor[] $r2;
        proguard.classfile.instruction.visitor.InstructionVisitor $r1;

        r0 := @this: proguard.classfile.instruction.visitor.MultiInstructionVisitor;

        $r1 := @parameter0: proguard.classfile.instruction.visitor.InstructionVisitor;

        specialinvoke r0.<proguard.classfile.instruction.visitor.MultiInstructionVisitor: void ensureArraySize()>();

        $r2 = r0.<proguard.classfile.instruction.visitor.MultiInstructionVisitor: proguard.classfile.instruction.visitor.InstructionVisitor[] instructionVisitors>;

        $i0 = r0.<proguard.classfile.instruction.visitor.MultiInstructionVisitor: int instructionVisitorCount>;

        $i1 = $i0 + 1;

        r0.<proguard.classfile.instruction.visitor.MultiInstructionVisitor: int instructionVisitorCount> = $i1;

        $r2[$i0] = $r1;

        return;
    }

    public void visitBranchInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.BranchInstruction)
    {
        proguard.classfile.instruction.visitor.MultiInstructionVisitor r0;
        proguard.classfile.instruction.BranchInstruction $r4;
        proguard.classfile.instruction.visitor.InstructionVisitor $r6;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0, $i1, $i2;
        proguard.classfile.Method $r2;
        proguard.classfile.instruction.visitor.InstructionVisitor[] $r5;

        r0 := @this: proguard.classfile.instruction.visitor.MultiInstructionVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.BranchInstruction;

        $i1 = 0;

     label1:
        $i2 = r0.<proguard.classfile.instruction.visitor.MultiInstructionVisitor: int instructionVisitorCount>;

        if $i1 >= $i2 goto label2;

        $r5 = r0.<proguard.classfile.instruction.visitor.MultiInstructionVisitor: proguard.classfile.instruction.visitor.InstructionVisitor[] instructionVisitors>;

        $r6 = $r5[$i1];

        interfaceinvoke $r6.<proguard.classfile.instruction.visitor.InstructionVisitor: void visitBranchInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.BranchInstruction)>($r1, $r2, $r3, $i0, $r4);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void visitConstantInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.ConstantInstruction)
    {
        proguard.classfile.instruction.visitor.MultiInstructionVisitor r0;
        proguard.classfile.instruction.visitor.InstructionVisitor $r6;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0, $i1, $i2;
        proguard.classfile.instruction.ConstantInstruction $r4;
        proguard.classfile.Method $r2;
        proguard.classfile.instruction.visitor.InstructionVisitor[] $r5;

        r0 := @this: proguard.classfile.instruction.visitor.MultiInstructionVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.ConstantInstruction;

        $i1 = 0;

     label1:
        $i2 = r0.<proguard.classfile.instruction.visitor.MultiInstructionVisitor: int instructionVisitorCount>;

        if $i1 >= $i2 goto label2;

        $r5 = r0.<proguard.classfile.instruction.visitor.MultiInstructionVisitor: proguard.classfile.instruction.visitor.InstructionVisitor[] instructionVisitors>;

        $r6 = $r5[$i1];

        interfaceinvoke $r6.<proguard.classfile.instruction.visitor.InstructionVisitor: void visitConstantInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.ConstantInstruction)>($r1, $r2, $r3, $i0, $r4);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void visitLookUpSwitchInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.LookUpSwitchInstruction)
    {
        proguard.classfile.instruction.LookUpSwitchInstruction $r4;
        proguard.classfile.instruction.visitor.MultiInstructionVisitor r0;
        proguard.classfile.instruction.visitor.InstructionVisitor $r6;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0, $i1, $i2;
        proguard.classfile.Method $r2;
        proguard.classfile.instruction.visitor.InstructionVisitor[] $r5;

        r0 := @this: proguard.classfile.instruction.visitor.MultiInstructionVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.LookUpSwitchInstruction;

        $i1 = 0;

     label1:
        $i2 = r0.<proguard.classfile.instruction.visitor.MultiInstructionVisitor: int instructionVisitorCount>;

        if $i1 >= $i2 goto label2;

        $r5 = r0.<proguard.classfile.instruction.visitor.MultiInstructionVisitor: proguard.classfile.instruction.visitor.InstructionVisitor[] instructionVisitors>;

        $r6 = $r5[$i1];

        interfaceinvoke $r6.<proguard.classfile.instruction.visitor.InstructionVisitor: void visitLookUpSwitchInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.LookUpSwitchInstruction)>($r1, $r2, $r3, $i0, $r4);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void visitSimpleInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.SimpleInstruction)
    {
        proguard.classfile.instruction.visitor.MultiInstructionVisitor r0;
        proguard.classfile.instruction.SimpleInstruction $r4;
        proguard.classfile.instruction.visitor.InstructionVisitor $r6;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0, $i1, $i2;
        proguard.classfile.Method $r2;
        proguard.classfile.instruction.visitor.InstructionVisitor[] $r5;

        r0 := @this: proguard.classfile.instruction.visitor.MultiInstructionVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.SimpleInstruction;

        $i1 = 0;

     label1:
        $i2 = r0.<proguard.classfile.instruction.visitor.MultiInstructionVisitor: int instructionVisitorCount>;

        if $i1 >= $i2 goto label2;

        $r5 = r0.<proguard.classfile.instruction.visitor.MultiInstructionVisitor: proguard.classfile.instruction.visitor.InstructionVisitor[] instructionVisitors>;

        $r6 = $r5[$i1];

        interfaceinvoke $r6.<proguard.classfile.instruction.visitor.InstructionVisitor: void visitSimpleInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.SimpleInstruction)>($r1, $r2, $r3, $i0, $r4);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void visitTableSwitchInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.TableSwitchInstruction)
    {
        proguard.classfile.instruction.visitor.MultiInstructionVisitor r0;
        proguard.classfile.instruction.visitor.InstructionVisitor $r6;
        proguard.classfile.instruction.TableSwitchInstruction $r4;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0, $i1, $i2;
        proguard.classfile.Method $r2;
        proguard.classfile.instruction.visitor.InstructionVisitor[] $r5;

        r0 := @this: proguard.classfile.instruction.visitor.MultiInstructionVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.TableSwitchInstruction;

        $i1 = 0;

     label1:
        $i2 = r0.<proguard.classfile.instruction.visitor.MultiInstructionVisitor: int instructionVisitorCount>;

        if $i1 >= $i2 goto label2;

        $r5 = r0.<proguard.classfile.instruction.visitor.MultiInstructionVisitor: proguard.classfile.instruction.visitor.InstructionVisitor[] instructionVisitors>;

        $r6 = $r5[$i1];

        interfaceinvoke $r6.<proguard.classfile.instruction.visitor.InstructionVisitor: void visitTableSwitchInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.TableSwitchInstruction)>($r1, $r2, $r3, $i0, $r4);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void visitVariableInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.VariableInstruction)
    {
        proguard.classfile.instruction.visitor.MultiInstructionVisitor r0;
        proguard.classfile.instruction.VariableInstruction $r4;
        proguard.classfile.instruction.visitor.InstructionVisitor $r6;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0, $i1, $i2;
        proguard.classfile.Method $r2;
        proguard.classfile.instruction.visitor.InstructionVisitor[] $r5;

        r0 := @this: proguard.classfile.instruction.visitor.MultiInstructionVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.VariableInstruction;

        $i1 = 0;

     label1:
        $i2 = r0.<proguard.classfile.instruction.visitor.MultiInstructionVisitor: int instructionVisitorCount>;

        if $i1 >= $i2 goto label2;

        $r5 = r0.<proguard.classfile.instruction.visitor.MultiInstructionVisitor: proguard.classfile.instruction.visitor.InstructionVisitor[] instructionVisitors>;

        $r6 = $r5[$i1];

        interfaceinvoke $r6.<proguard.classfile.instruction.visitor.InstructionVisitor: void visitVariableInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.VariableInstruction)>($r1, $r2, $r3, $i0, $r4);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static void <clinit>()
    {
        <proguard.classfile.instruction.visitor.MultiInstructionVisitor: int ARRAY_SIZE_INCREMENT> = 5;

        return;
    }
}
