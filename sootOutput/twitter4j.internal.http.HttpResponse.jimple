public abstract class twitter4j.internal.http.HttpResponse extends java.lang.Object
{
    private static final twitter4j.internal.logging.Logger logger;
    protected final twitter4j.internal.http.HttpClientConfiguration CONF;
    protected java.io.InputStream is;
    private twitter4j.internal.org.json.JSONObject json;
    private twitter4j.internal.org.json.JSONArray jsonArray;
    protected java.lang.String responseAsString;
    protected int statusCode;
    private boolean streamConsumed;

    static void <clinit>()
    {
        twitter4j.internal.logging.Logger $r0;

        $r0 = staticinvoke <twitter4j.internal.logging.Logger: twitter4j.internal.logging.Logger getLogger(java.lang.Class)>(class "Ltwitter4j/internal/http/HttpResponseImpl;");

        <twitter4j.internal.http.HttpResponse: twitter4j.internal.logging.Logger logger> = $r0;

        return;
    }

    void <init>()
    {
        twitter4j.conf.Configuration $r1;
        twitter4j.internal.http.HttpResponse r0;

        r0 := @this: twitter4j.internal.http.HttpResponse;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<twitter4j.internal.http.HttpResponse: java.lang.String responseAsString> = null;

        r0.<twitter4j.internal.http.HttpResponse: boolean streamConsumed> = 0;

        r0.<twitter4j.internal.http.HttpResponse: twitter4j.internal.org.json.JSONObject json> = null;

        r0.<twitter4j.internal.http.HttpResponse: twitter4j.internal.org.json.JSONArray jsonArray> = null;

        $r1 = staticinvoke <twitter4j.conf.ConfigurationContext: twitter4j.conf.Configuration getInstance()>();

        r0.<twitter4j.internal.http.HttpResponse: twitter4j.internal.http.HttpClientConfiguration CONF> = $r1;

        return;
    }

    public void <init>(twitter4j.internal.http.HttpClientConfiguration)
    {
        twitter4j.internal.http.HttpClientConfiguration $r1;
        twitter4j.internal.http.HttpResponse r0;

        r0 := @this: twitter4j.internal.http.HttpResponse;

        $r1 := @parameter0: twitter4j.internal.http.HttpClientConfiguration;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<twitter4j.internal.http.HttpResponse: java.lang.String responseAsString> = null;

        r0.<twitter4j.internal.http.HttpResponse: boolean streamConsumed> = 0;

        r0.<twitter4j.internal.http.HttpResponse: twitter4j.internal.org.json.JSONObject json> = null;

        r0.<twitter4j.internal.http.HttpResponse: twitter4j.internal.org.json.JSONArray jsonArray> = null;

        r0.<twitter4j.internal.http.HttpResponse: twitter4j.internal.http.HttpClientConfiguration CONF> = $r1;

        return;
    }

    private void disconnectForcibly()
    {
        twitter4j.internal.http.HttpResponse r0;
        java.lang.Exception $r1;

        r0 := @this: twitter4j.internal.http.HttpResponse;

     label1:
        virtualinvoke r0.<twitter4j.internal.http.HttpResponse: void disconnect()>();

     label2:
        return;

     label3:
        $r1 := @caughtexception;

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public twitter4j.internal.org.json.JSONArray asJSONArray()
    {
        twitter4j.internal.logging.Logger $r7;
        java.lang.Throwable $r11, $r12, $r13;
        twitter4j.internal.org.json.JSONException $r8;
        java.io.Reader $r2, $r4;
        twitter4j.internal.http.HttpResponse r0;
        twitter4j.internal.http.HttpClientConfiguration $r6;
        twitter4j.internal.org.json.JSONArray $r1;
        twitter4j.TwitterException $r9;
        java.lang.StringBuilder $r10;
        java.lang.String $r3;
        twitter4j.internal.org.json.JSONTokener $r5;
        boolean $z0;

        r0 := @this: twitter4j.internal.http.HttpResponse;

        $r1 = r0.<twitter4j.internal.http.HttpResponse: twitter4j.internal.org.json.JSONArray jsonArray>;

        if $r1 != null goto label16;

        $r2 = null;

     label01:
        $r3 = r0.<twitter4j.internal.http.HttpResponse: java.lang.String responseAsString>;

     label02:
        if $r3 != null goto label17;

     label03:
        $r4 = virtualinvoke r0.<twitter4j.internal.http.HttpResponse: java.io.Reader asReader()>();

     label04:
        $r2 = $r4;

     label05:
        $r1 = new twitter4j.internal.org.json.JSONArray;

        $r5 = new twitter4j.internal.org.json.JSONTokener;

     label06:
        specialinvoke $r5.<twitter4j.internal.org.json.JSONTokener: void <init>(java.io.Reader)>($r4);

        specialinvoke $r1.<twitter4j.internal.org.json.JSONArray: void <init>(twitter4j.internal.org.json.JSONTokener)>($r5);

     label07:
        r0.<twitter4j.internal.http.HttpResponse: twitter4j.internal.org.json.JSONArray jsonArray> = $r1;

     label08:
        $r6 = r0.<twitter4j.internal.http.HttpResponse: twitter4j.internal.http.HttpClientConfiguration CONF>;

     label09:
        $z0 = interfaceinvoke $r6.<twitter4j.internal.http.HttpClientConfiguration: boolean isPrettyDebugEnabled()>();

     label10:
        if $z0 == 0 goto label28;

     label11:
        $r7 = <twitter4j.internal.http.HttpResponse: twitter4j.internal.logging.Logger logger>;

        $r1 = r0.<twitter4j.internal.http.HttpResponse: twitter4j.internal.org.json.JSONArray jsonArray>;

     label12:
        $r3 = virtualinvoke $r1.<twitter4j.internal.org.json.JSONArray: java.lang.String toString(int)>(1);

        virtualinvoke $r7.<twitter4j.internal.logging.Logger: void debug(java.lang.String)>($r3);

     label13:
        if $r2 == null goto label15;

     label14:
        virtualinvoke $r2.<java.io.Reader: void close()>();

     label15:
        specialinvoke r0.<twitter4j.internal.http.HttpResponse: void disconnectForcibly()>();

     label16:
        $r1 = r0.<twitter4j.internal.http.HttpResponse: twitter4j.internal.org.json.JSONArray jsonArray>;

        return $r1;

     label17:
        $r1 = new twitter4j.internal.org.json.JSONArray;

        $r3 = r0.<twitter4j.internal.http.HttpResponse: java.lang.String responseAsString>;

     label18:
        specialinvoke $r1.<twitter4j.internal.org.json.JSONArray: void <init>(java.lang.String)>($r3);

     label19:
        r0.<twitter4j.internal.http.HttpResponse: twitter4j.internal.org.json.JSONArray jsonArray> = $r1;

     label20:
        goto label08;

     label21:
        $r8 := @caughtexception;

     label22:
        $r7 = <twitter4j.internal.http.HttpResponse: twitter4j.internal.logging.Logger logger>;

        $z0 = virtualinvoke $r7.<twitter4j.internal.logging.Logger: boolean isDebugEnabled()>();

     label23:
        if $z0 == 0 goto label36;

     label24:
        $r9 = new twitter4j.TwitterException;

        $r10 = new java.lang.StringBuilder;

        $r3 = virtualinvoke $r8.<twitter4j.internal.org.json.JSONException: java.lang.String getMessage()>();

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>($r3);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r3 = r0.<twitter4j.internal.http.HttpResponse: java.lang.String responseAsString>;

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<twitter4j.TwitterException: void <init>(java.lang.String,java.lang.Throwable)>($r3, $r8);

        throw $r9;

     label25:
        $r11 := @caughtexception;

        if $r2 == null goto label27;

     label26:
        virtualinvoke $r2.<java.io.Reader: void close()>();

     label27:
        specialinvoke r0.<twitter4j.internal.http.HttpResponse: void disconnectForcibly()>();

        throw $r11;

     label28:
        $r7 = <twitter4j.internal.http.HttpResponse: twitter4j.internal.logging.Logger logger>;

        $r3 = r0.<twitter4j.internal.http.HttpResponse: java.lang.String responseAsString>;

     label29:
        if $r3 == null goto label33;

     label30:
        $r3 = r0.<twitter4j.internal.http.HttpResponse: java.lang.String responseAsString>;

     label31:
        virtualinvoke $r7.<twitter4j.internal.logging.Logger: void debug(java.lang.String)>($r3);

     label32:
        goto label13;

     label33:
        $r1 = r0.<twitter4j.internal.http.HttpResponse: twitter4j.internal.org.json.JSONArray jsonArray>;

     label34:
        $r3 = virtualinvoke $r1.<twitter4j.internal.org.json.JSONArray: java.lang.String toString()>();

     label35:
        goto label31;

     label36:
        $r9 = new twitter4j.TwitterException;

        $r3 = virtualinvoke $r8.<twitter4j.internal.org.json.JSONException: java.lang.String getMessage()>();

        specialinvoke $r9.<twitter4j.TwitterException: void <init>(java.lang.String,java.lang.Throwable)>($r3, $r8);

        throw $r9;

     label37:
        $r12 := @caughtexception;

        goto label27;

     label38:
        $r13 := @caughtexception;

        goto label15;

        catch twitter4j.internal.org.json.JSONException from label03 to label04 with label21;
        catch twitter4j.internal.org.json.JSONException from label06 to label07 with label21;
        catch twitter4j.internal.org.json.JSONException from label09 to label10 with label21;
        catch twitter4j.internal.org.json.JSONException from label12 to label13 with label21;
        catch java.lang.Throwable from label01 to label02 with label25;
        catch java.lang.Throwable from label03 to label04 with label25;
        catch java.lang.Throwable from label05 to label10 with label25;
        catch java.lang.Throwable from label11 to label13 with label25;
        catch java.io.IOException from label14 to label15 with label38;
        catch twitter4j.internal.org.json.JSONException from label18 to label19 with label21;
        catch java.lang.Throwable from label17 to label20 with label25;
        catch java.lang.Throwable from label22 to label23 with label25;
        catch java.lang.Throwable from label24 to label25 with label25;
        catch java.io.IOException from label26 to label27 with label37;
        catch twitter4j.internal.org.json.JSONException from label31 to label32 with label21;
        catch twitter4j.internal.org.json.JSONException from label34 to label35 with label21;
        catch java.lang.Throwable from label28 to label29 with label25;
        catch java.lang.Throwable from label30 to label32 with label25;
        catch java.lang.Throwable from label33 to label35 with label25;
        catch java.lang.Throwable from label36 to label37 with label25;
    }

    public twitter4j.internal.org.json.JSONObject asJSONObject()
    {
        twitter4j.internal.logging.Logger $r7;
        java.lang.Throwable $r10, $r12, $r13;
        twitter4j.internal.org.json.JSONException $r8;
        java.io.Reader $r2, $r4;
        twitter4j.internal.http.HttpResponse r0;
        twitter4j.internal.http.HttpClientConfiguration $r6;
        twitter4j.TwitterException $r9;
        java.lang.StringBuilder $r11;
        twitter4j.internal.org.json.JSONObject $r1;
        java.lang.String $r3;
        twitter4j.internal.org.json.JSONTokener $r5;
        boolean $z0;

        r0 := @this: twitter4j.internal.http.HttpResponse;

        $r1 = r0.<twitter4j.internal.http.HttpResponse: twitter4j.internal.org.json.JSONObject json>;

        if $r1 != null goto label16;

        $r2 = null;

     label01:
        $r3 = r0.<twitter4j.internal.http.HttpResponse: java.lang.String responseAsString>;

     label02:
        if $r3 != null goto label17;

     label03:
        $r4 = virtualinvoke r0.<twitter4j.internal.http.HttpResponse: java.io.Reader asReader()>();

     label04:
        $r2 = $r4;

     label05:
        $r1 = new twitter4j.internal.org.json.JSONObject;

        $r5 = new twitter4j.internal.org.json.JSONTokener;

     label06:
        specialinvoke $r5.<twitter4j.internal.org.json.JSONTokener: void <init>(java.io.Reader)>($r4);

        specialinvoke $r1.<twitter4j.internal.org.json.JSONObject: void <init>(twitter4j.internal.org.json.JSONTokener)>($r5);

     label07:
        r0.<twitter4j.internal.http.HttpResponse: twitter4j.internal.org.json.JSONObject json> = $r1;

     label08:
        $r6 = r0.<twitter4j.internal.http.HttpResponse: twitter4j.internal.http.HttpClientConfiguration CONF>;

     label09:
        $z0 = interfaceinvoke $r6.<twitter4j.internal.http.HttpClientConfiguration: boolean isPrettyDebugEnabled()>();

     label10:
        if $z0 == 0 goto label28;

     label11:
        $r7 = <twitter4j.internal.http.HttpResponse: twitter4j.internal.logging.Logger logger>;

        $r1 = r0.<twitter4j.internal.http.HttpResponse: twitter4j.internal.org.json.JSONObject json>;

     label12:
        $r3 = virtualinvoke $r1.<twitter4j.internal.org.json.JSONObject: java.lang.String toString(int)>(1);

        virtualinvoke $r7.<twitter4j.internal.logging.Logger: void debug(java.lang.String)>($r3);

     label13:
        if $r2 == null goto label15;

     label14:
        virtualinvoke $r2.<java.io.Reader: void close()>();

     label15:
        specialinvoke r0.<twitter4j.internal.http.HttpResponse: void disconnectForcibly()>();

     label16:
        $r1 = r0.<twitter4j.internal.http.HttpResponse: twitter4j.internal.org.json.JSONObject json>;

        return $r1;

     label17:
        $r1 = new twitter4j.internal.org.json.JSONObject;

        $r3 = r0.<twitter4j.internal.http.HttpResponse: java.lang.String responseAsString>;

     label18:
        specialinvoke $r1.<twitter4j.internal.org.json.JSONObject: void <init>(java.lang.String)>($r3);

     label19:
        r0.<twitter4j.internal.http.HttpResponse: twitter4j.internal.org.json.JSONObject json> = $r1;

     label20:
        goto label08;

     label21:
        $r8 := @caughtexception;

     label22:
        $r3 = r0.<twitter4j.internal.http.HttpResponse: java.lang.String responseAsString>;

     label23:
        if $r3 != null goto label36;

     label24:
        $r9 = new twitter4j.TwitterException;

        $r3 = virtualinvoke $r8.<twitter4j.internal.org.json.JSONException: java.lang.String getMessage()>();

        specialinvoke $r9.<twitter4j.TwitterException: void <init>(java.lang.String,java.lang.Throwable)>($r3, $r8);

        throw $r9;

     label25:
        $r10 := @caughtexception;

        if $r2 == null goto label27;

     label26:
        virtualinvoke $r2.<java.io.Reader: void close()>();

     label27:
        specialinvoke r0.<twitter4j.internal.http.HttpResponse: void disconnectForcibly()>();

        throw $r10;

     label28:
        $r7 = <twitter4j.internal.http.HttpResponse: twitter4j.internal.logging.Logger logger>;

        $r3 = r0.<twitter4j.internal.http.HttpResponse: java.lang.String responseAsString>;

     label29:
        if $r3 == null goto label33;

     label30:
        $r3 = r0.<twitter4j.internal.http.HttpResponse: java.lang.String responseAsString>;

     label31:
        virtualinvoke $r7.<twitter4j.internal.logging.Logger: void debug(java.lang.String)>($r3);

     label32:
        goto label13;

     label33:
        $r1 = r0.<twitter4j.internal.http.HttpResponse: twitter4j.internal.org.json.JSONObject json>;

     label34:
        $r3 = virtualinvoke $r1.<twitter4j.internal.org.json.JSONObject: java.lang.String toString()>();

     label35:
        goto label31;

     label36:
        $r9 = new twitter4j.TwitterException;

        $r11 = new java.lang.StringBuilder;

        $r3 = virtualinvoke $r8.<twitter4j.internal.org.json.JSONException: java.lang.String getMessage()>();

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>($r3);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r3 = r0.<twitter4j.internal.http.HttpResponse: java.lang.String responseAsString>;

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<twitter4j.TwitterException: void <init>(java.lang.String,java.lang.Throwable)>($r3, $r8);

        throw $r9;

     label37:
        $r12 := @caughtexception;

        goto label27;

     label38:
        $r13 := @caughtexception;

        goto label15;

        catch twitter4j.internal.org.json.JSONException from label03 to label04 with label21;
        catch twitter4j.internal.org.json.JSONException from label06 to label07 with label21;
        catch twitter4j.internal.org.json.JSONException from label09 to label10 with label21;
        catch twitter4j.internal.org.json.JSONException from label12 to label13 with label21;
        catch java.lang.Throwable from label01 to label02 with label25;
        catch java.lang.Throwable from label03 to label04 with label25;
        catch java.lang.Throwable from label05 to label10 with label25;
        catch java.lang.Throwable from label11 to label13 with label25;
        catch java.io.IOException from label14 to label15 with label38;
        catch twitter4j.internal.org.json.JSONException from label18 to label19 with label21;
        catch java.lang.Throwable from label17 to label20 with label25;
        catch java.lang.Throwable from label22 to label23 with label25;
        catch java.lang.Throwable from label24 to label25 with label25;
        catch java.io.IOException from label26 to label27 with label37;
        catch twitter4j.internal.org.json.JSONException from label31 to label32 with label21;
        catch twitter4j.internal.org.json.JSONException from label34 to label35 with label21;
        catch java.lang.Throwable from label28 to label29 with label25;
        catch java.lang.Throwable from label30 to label32 with label25;
        catch java.lang.Throwable from label33 to label35 with label25;
        catch java.lang.Throwable from label36 to label37 with label25;
    }

    public java.io.Reader asReader()
    {
        java.lang.Throwable $r4;
        twitter4j.internal.http.HttpResponse r0;
        java.io.BufferedReader $r2;
        java.io.InputStreamReader $r3;
        java.io.InputStream $r1;

        r0 := @this: twitter4j.internal.http.HttpResponse;

        $r2 = new java.io.BufferedReader;

        $r3 = new java.io.InputStreamReader;

        $r1 = r0.<twitter4j.internal.http.HttpResponse: java.io.InputStream is>;

     label1:
        specialinvoke $r3.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r1, "UTF-8");

        specialinvoke $r2.<java.io.BufferedReader: void <init>(java.io.Reader)>($r3);

     label2:
        return $r2;

     label3:
        $r4 := @caughtexception;

        $r3 = new java.io.InputStreamReader;

        $r1 = r0.<twitter4j.internal.http.HttpResponse: java.io.InputStream is>;

        specialinvoke $r3.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r1);

        return $r3;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public java.io.InputStream asStream()
    {
        java.lang.IllegalStateException $r1;
        twitter4j.internal.http.HttpResponse r0;
        boolean $z0;
        java.io.InputStream r2;

        r0 := @this: twitter4j.internal.http.HttpResponse;

        $z0 = r0.<twitter4j.internal.http.HttpResponse: boolean streamConsumed>;

        if $z0 == 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Stream has already been consumed.");

        throw $r1;

     label1:
        r2 = r0.<twitter4j.internal.http.HttpResponse: java.io.InputStream is>;

        return r2;
    }

    public java.lang.String asString()
    {
        java.lang.Throwable $r9, $r11, $r12, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21;
        twitter4j.internal.http.HttpResponse r0;
        twitter4j.TwitterException $r10, $r24;
        java.lang.String $r1;
        twitter4j.internal.logging.Logger $r7;
        java.io.IOException $r25;
        java.io.InputStreamReader $r5, $r22;
        java.lang.Exception $r13;
        java.lang.StringBuilder $r6, $r8;
        java.io.BufferedReader $r4, $r23;
        java.io.InputStream $r2, $r3;

        r0 := @this: twitter4j.internal.http.HttpResponse;

        $r1 = r0.<twitter4j.internal.http.HttpResponse: java.lang.String responseAsString>;

        if $r1 != null goto label24;

     label01:
        $r2 = virtualinvoke r0.<twitter4j.internal.http.HttpResponse: java.io.InputStream asStream()>();

     label02:
        $r3 = $r2;

        if $r2 != null goto label06;

        if $r2 == null goto label04;

     label03:
        virtualinvoke $r2.<java.io.InputStream: void close()>();

     label04:
        virtualinvoke r0.<twitter4j.internal.http.HttpResponse: void disconnect()>();

     label05:
        return null;

     label06:
        $r23 = new java.io.BufferedReader;

     label07:
        $r4 = $r23;

     label08:
        $r22 = new java.io.InputStreamReader;

     label09:
        $r5 = $r22;

     label10:
        specialinvoke $r22.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r2, "UTF-8");

        specialinvoke $r23.<java.io.BufferedReader: void <init>(java.io.Reader)>($r5);

     label11:
        $r8 = new java.lang.StringBuilder;

     label12:
        $r6 = $r8;

     label13:
        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

     label14:
        $r1 = virtualinvoke $r4.<java.io.BufferedReader: java.lang.String readLine()>();

     label15:
        if $r1 != null goto label25;

     label16:
        $r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

     label17:
        r0.<twitter4j.internal.http.HttpResponse: java.lang.String responseAsString> = $r1;

        $r7 = <twitter4j.internal.http.HttpResponse: twitter4j.internal.logging.Logger logger>;

        $r1 = r0.<twitter4j.internal.http.HttpResponse: java.lang.String responseAsString>;

     label18:
        virtualinvoke $r7.<twitter4j.internal.logging.Logger: void debug(java.lang.String)>($r1);

        virtualinvoke $r2.<java.io.InputStream: void close()>();

     label19:
        r0.<twitter4j.internal.http.HttpResponse: boolean streamConsumed> = 1;

     label20:
        if $r2 == null goto label22;

     label21:
        virtualinvoke $r2.<java.io.InputStream: void close()>();

     label22:
        virtualinvoke $r4.<java.io.BufferedReader: void close()>();

     label23:
        specialinvoke r0.<twitter4j.internal.http.HttpResponse: void disconnectForcibly()>();

     label24:
        $r1 = r0.<twitter4j.internal.http.HttpResponse: java.lang.String responseAsString>;

        return $r1;

     label25:
        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

     label26:
        goto label14;

     label27:
        $r9 := @caughtexception;

     label28:
        $r24 = new twitter4j.TwitterException;

     label29:
        $r10 = $r24;

     label30:
        $r25 = (java.io.IOException) $r9;

        $r1 = virtualinvoke $r25.<java.io.IOException: java.lang.String getMessage()>();

        specialinvoke $r24.<twitter4j.TwitterException: void <init>(java.lang.String,java.lang.Throwable)>($r1, $r9);

        throw $r10;

     label31:
        $r11 := @caughtexception;

        $r3 = $r2;

     label32:
        if $r3 == null goto label34;

     label33:
        virtualinvoke $r3.<java.io.InputStream: void close()>();

     label34:
        if $r4 == null goto label36;

     label35:
        virtualinvoke $r4.<java.io.BufferedReader: void close()>();

     label36:
        specialinvoke r0.<twitter4j.internal.http.HttpResponse: void disconnectForcibly()>();

        throw $r11;

     label37:
        $r12 := @caughtexception;

        goto label04;

     label38:
        $r13 := @caughtexception;

        return null;

     label39:
        $r14 := @caughtexception;

        goto label34;

     label40:
        $r15 := @caughtexception;

        goto label36;

     label41:
        $r16 := @caughtexception;

        goto label22;

     label42:
        $r17 := @caughtexception;

        goto label23;

     label43:
        $r18 := @caughtexception;

        $r3 = null;

        $r4 = null;

        $r11 = $r18;

        goto label32;

     label44:
        $r19 := @caughtexception;

        $r4 = null;

        $r11 = $r19;

        goto label32;

     label45:
        $r11 := @caughtexception;

        goto label32;

     label46:
        $r20 := @caughtexception;

        $r4 = null;

        $r9 = $r20;

        $r2 = null;

        goto label28;

     label47:
        $r21 := @caughtexception;

        $r4 = null;

        $r9 = $r21;

        goto label28;

        catch java.io.IOException from label01 to label02 with label46;
        catch java.lang.Throwable from label01 to label02 with label43;
        catch java.io.IOException from label03 to label04 with label37;
        catch java.lang.Exception from label04 to label05 with label38;
        catch java.io.IOException from label10 to label11 with label47;
        catch java.lang.Throwable from label06 to label07 with label44;
        catch java.lang.Throwable from label08 to label09 with label44;
        catch java.lang.Throwable from label10 to label11 with label44;
        catch java.io.IOException from label13 to label15 with label27;
        catch java.io.IOException from label16 to label17 with label27;
        catch java.io.IOException from label18 to label19 with label27;
        catch java.lang.Throwable from label11 to label12 with label45;
        catch java.lang.Throwable from label13 to label15 with label45;
        catch java.lang.Throwable from label16 to label20 with label45;
        catch java.io.IOException from label21 to label22 with label41;
        catch java.io.IOException from label22 to label23 with label42;
        catch java.io.IOException from label25 to label26 with label27;
        catch java.lang.Throwable from label25 to label26 with label45;
        catch java.lang.Throwable from label28 to label29 with label31;
        catch java.lang.Throwable from label30 to label31 with label31;
        catch java.io.IOException from label33 to label34 with label39;
        catch java.io.IOException from label35 to label36 with label40;
    }

    public abstract void disconnect();

    public abstract java.lang.String getResponseHeader(java.lang.String);

    public abstract java.util.Map getResponseHeaderFields();

    public int getStatusCode()
    {
        int i0;
        twitter4j.internal.http.HttpResponse r0;

        r0 := @this: twitter4j.internal.http.HttpResponse;

        i0 = r0.<twitter4j.internal.http.HttpResponse: int statusCode>;

        return i0;
    }

    public java.lang.String toString()
    {
        twitter4j.internal.http.HttpResponse r0;
        int $i0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        java.io.InputStream $r3;
        boolean $z0;

        r0 := @this: twitter4j.internal.http.HttpResponse;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("HttpResponse{statusCode=");

        $i0 = r0.<twitter4j.internal.http.HttpResponse: int statusCode>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", responseAsString=\'");

        $r2 = r0.<twitter4j.internal.http.HttpResponse: java.lang.String responseAsString>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", is=");

        $r3 = r0.<twitter4j.internal.http.HttpResponse: java.io.InputStream is>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", streamConsumed=");

        $z0 = r0.<twitter4j.internal.http.HttpResponse: boolean streamConsumed>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
}
