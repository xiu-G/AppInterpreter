public class proguard.classfile.attribute.visitor.StackSizeComputer extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.attribute.visitor.AttributeVisitor, proguard.classfile.instruction.visitor.InstructionVisitor, proguard.classfile.attribute.visitor.ExceptionInfoVisitor
{
    private static final boolean DEBUG;
    private boolean[] evaluated;
    private boolean exitInstructionBlock;
    private int maxStackSize;
    private int stackSize;
    private int[] stackSizes;

    public void <init>()
    {
        boolean[] $r1;
        proguard.classfile.attribute.visitor.StackSizeComputer r0;
        int[] $r2;

        r0 := @this: proguard.classfile.attribute.visitor.StackSizeComputer;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        $r1 = newarray (boolean)[1024];

        r0.<proguard.classfile.attribute.visitor.StackSizeComputer: boolean[] evaluated> = $r1;

        $r2 = newarray (int)[1024];

        r0.<proguard.classfile.attribute.visitor.StackSizeComputer: int[] stackSizes> = $r2;

        return;
    }

    private void evaluateInstructionBlock(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int)
    {
        byte[] $r5;
        proguard.classfile.Clazz $r1;
        int[] $r10;
        java.lang.StringBuffer $r8;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r9;
        boolean $z0;
        boolean[] $r4;
        java.lang.IllegalArgumentException $r7;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.instruction.Instruction $r6;
        proguard.classfile.attribute.visitor.StackSizeComputer r0;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.classfile.attribute.visitor.StackSizeComputer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $i1 = r0.<proguard.classfile.attribute.visitor.StackSizeComputer: int stackSize>;

        $i2 = r0.<proguard.classfile.attribute.visitor.StackSizeComputer: int maxStackSize>;

        $i3 = r0.<proguard.classfile.attribute.visitor.StackSizeComputer: int stackSize>;

        if $i2 >= $i3 goto label1;

        $i2 = r0.<proguard.classfile.attribute.visitor.StackSizeComputer: int stackSize>;

        r0.<proguard.classfile.attribute.visitor.StackSizeComputer: int maxStackSize> = $i2;

     label1:
        $r4 = r0.<proguard.classfile.attribute.visitor.StackSizeComputer: boolean[] evaluated>;

        $z0 = $r4[$i0];

        if $z0 != 0 goto label4;

        $r4 = r0.<proguard.classfile.attribute.visitor.StackSizeComputer: boolean[] evaluated>;

        $r4[$i0] = 1;

        $r5 = $r3.<proguard.classfile.attribute.CodeAttribute: byte[] code>;

        $r6 = staticinvoke <proguard.classfile.instruction.InstructionFactory: proguard.classfile.instruction.Instruction create(byte[],int)>($r5, $i0);

        $i2 = r0.<proguard.classfile.attribute.visitor.StackSizeComputer: int stackSize>;

        $i3 = virtualinvoke $r6.<proguard.classfile.instruction.Instruction: int stackPopCount(proguard.classfile.Clazz)>($r1);

        $i2 = $i2 - $i3;

        r0.<proguard.classfile.attribute.visitor.StackSizeComputer: int stackSize> = $i2;

        $i2 = r0.<proguard.classfile.attribute.visitor.StackSizeComputer: int stackSize>;

        if $i2 >= 0 goto label2;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Stack size becomes negative after instruction ");

        $r9 = virtualinvoke $r6.<proguard.classfile.instruction.Instruction: java.lang.String toString(int)>($i0);

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" in [");

        $r9 = interfaceinvoke $r1.<proguard.classfile.Clazz: java.lang.String getName()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        $r9 = interfaceinvoke $r2.<proguard.classfile.Method: java.lang.String getName(proguard.classfile.Clazz)>($r1);

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r9 = interfaceinvoke $r2.<proguard.classfile.Method: java.lang.String getDescriptor(proguard.classfile.Clazz)>($r1);

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r7;

     label2:
        $r10 = r0.<proguard.classfile.attribute.visitor.StackSizeComputer: int[] stackSizes>;

        $i2 = r0.<proguard.classfile.attribute.visitor.StackSizeComputer: int stackSize>;

        $i3 = virtualinvoke $r6.<proguard.classfile.instruction.Instruction: int stackPushCount(proguard.classfile.Clazz)>($r1);

        $i2 = $i2 + $i3;

        r0.<proguard.classfile.attribute.visitor.StackSizeComputer: int stackSize> = $i2;

        $r10[$i0] = $i2;

        $i2 = r0.<proguard.classfile.attribute.visitor.StackSizeComputer: int maxStackSize>;

        $i3 = r0.<proguard.classfile.attribute.visitor.StackSizeComputer: int stackSize>;

        if $i2 >= $i3 goto label3;

        $i2 = r0.<proguard.classfile.attribute.visitor.StackSizeComputer: int stackSize>;

        r0.<proguard.classfile.attribute.visitor.StackSizeComputer: int maxStackSize> = $i2;

     label3:
        $i2 = virtualinvoke $r6.<proguard.classfile.instruction.Instruction: int length(int)>($i0);

        virtualinvoke $r6.<proguard.classfile.instruction.Instruction: void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.visitor.InstructionVisitor)>($r1, $r2, $r3, $i0, r0);

        $z0 = r0.<proguard.classfile.attribute.visitor.StackSizeComputer: boolean exitInstructionBlock>;

        if $z0 == 0 goto label5;

     label4:
        r0.<proguard.classfile.attribute.visitor.StackSizeComputer: int stackSize> = $i1;

        return;

     label5:
        $i0 = $i0 + $i2;

        goto label1;
    }

    public int getMaxStackSize()
    {
        int i0;
        proguard.classfile.attribute.visitor.StackSizeComputer r0;

        r0 := @this: proguard.classfile.attribute.visitor.StackSizeComputer;

        i0 = r0.<proguard.classfile.attribute.visitor.StackSizeComputer: int maxStackSize>;

        return i0;
    }

    public int getStackSize(int)
    {
        boolean[] $r1;
        java.lang.IllegalArgumentException $r2;
        int[] $r5;
        java.lang.StringBuffer $r3;
        int $i0;
        proguard.classfile.attribute.visitor.StackSizeComputer r0;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: proguard.classfile.attribute.visitor.StackSizeComputer;

        $i0 := @parameter0: int;

        $r1 = r0.<proguard.classfile.attribute.visitor.StackSizeComputer: boolean[] evaluated>;

        $z0 = $r1[$i0];

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unknown stack size at unreachable instruction offset [");

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label1:
        $r5 = r0.<proguard.classfile.attribute.visitor.StackSizeComputer: int[] stackSizes>;

        $i0 = $r5[$i0];

        return $i0;
    }

    public boolean isReachable(int)
    {
        int $i0;
        boolean[] $r1;
        proguard.classfile.attribute.visitor.StackSizeComputer r0;
        boolean $z0;

        r0 := @this: proguard.classfile.attribute.visitor.StackSizeComputer;

        $i0 := @parameter0: int;

        $r1 = r0.<proguard.classfile.attribute.visitor.StackSizeComputer: boolean[] evaluated>;

        $z0 = $r1[$i0];

        return $z0;
    }

    public void visitAnyAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.Attribute)
    {
        proguard.classfile.attribute.visitor.StackSizeComputer r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.Attribute $r2;

        r0 := @this: proguard.classfile.attribute.visitor.StackSizeComputer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.Attribute;

        return;
    }

    public void visitAnySwitchInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.SwitchInstruction)
    {
        proguard.classfile.instruction.SwitchInstruction $r4;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int[] $r5;
        int $i0, $i1, $i2;
        proguard.classfile.attribute.visitor.StackSizeComputer r0;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.classfile.attribute.visitor.StackSizeComputer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.SwitchInstruction;

        $r5 = $r4.<proguard.classfile.instruction.SwitchInstruction: int[] jumpOffsets>;

        $i1 = 0;

     label1:
        $i2 = lengthof $r5;

        if $i1 >= $i2 goto label2;

        $i2 = $r5[$i1];

        $i2 = $i2 + $i0;

        specialinvoke r0.<proguard.classfile.attribute.visitor.StackSizeComputer: void evaluateInstructionBlock(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int)>($r1, $r2, $r3, $i2);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        $i1 = $r4.<proguard.classfile.instruction.SwitchInstruction: int defaultOffset>;

        $i0 = $i1 + $i0;

        specialinvoke r0.<proguard.classfile.attribute.visitor.StackSizeComputer: void evaluateInstructionBlock(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int)>($r1, $r2, $r3, $i0);

        r0.<proguard.classfile.attribute.visitor.StackSizeComputer: boolean exitInstructionBlock> = 1;

        return;
    }

    public void visitBranchInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.BranchInstruction)
    {
        proguard.classfile.instruction.BranchInstruction $r4;
        byte $b2;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0, $i1;
        proguard.classfile.attribute.visitor.StackSizeComputer r0;
        proguard.classfile.Method $r2;
        boolean $z0;

        r0 := @this: proguard.classfile.attribute.visitor.StackSizeComputer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.BranchInstruction;

        $b2 = $r4.<proguard.classfile.instruction.BranchInstruction: byte opcode>;

        $i1 = $r4.<proguard.classfile.instruction.BranchInstruction: int branchOffset>;

        $i1 = $i1 + $i0;

        specialinvoke r0.<proguard.classfile.attribute.visitor.StackSizeComputer: void evaluateInstructionBlock(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int)>($r1, $r2, $r3, $i1);

        $i1 = (int) $b2;

        if $i1 == -88 goto label1;

        $i1 = (int) $b2;

        if $i1 != -55 goto label2;

     label1:
        $i1 = r0.<proguard.classfile.attribute.visitor.StackSizeComputer: int stackSize>;

        $i1 = $i1 - 1;

        r0.<proguard.classfile.attribute.visitor.StackSizeComputer: int stackSize> = $i1;

        $i1 = virtualinvoke $r4.<proguard.classfile.instruction.BranchInstruction: int length(int)>($i0);

        $i0 = $i1 + $i0;

        specialinvoke r0.<proguard.classfile.attribute.visitor.StackSizeComputer: void evaluateInstructionBlock(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int)>($r1, $r2, $r3, $i0);

     label2:
        $i0 = (int) $b2;

        if $i0 == -89 goto label3;

        $i0 = (int) $b2;

        if $i0 == -56 goto label3;

        $i0 = (int) $b2;

        if $i0 == -88 goto label3;

        $i0 = (int) $b2;

        if $i0 != -55 goto label5;

     label3:
        $z0 = 1;

     label4:
        r0.<proguard.classfile.attribute.visitor.StackSizeComputer: boolean exitInstructionBlock> = $z0;

        return;

     label5:
        $z0 = 0;

        goto label4;
    }

    public void visitCodeAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute)
    {
        java.io.PrintStream $r5;
        java.lang.RuntimeException $r4;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        java.lang.StringBuffer $r6;
        proguard.classfile.attribute.visitor.StackSizeComputer r0;
        proguard.classfile.Method $r2;
        java.lang.Class $r8;
        java.lang.String $r7;

        r0 := @this: proguard.classfile.attribute.visitor.StackSizeComputer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

     label1:
        virtualinvoke r0.<proguard.classfile.attribute.visitor.StackSizeComputer: void visitCodeAttribute0(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute)>($r1, $r2, $r3);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>("Unexpected error while computing stack sizes:");

        $r5 = <java.lang.System: java.io.PrintStream err>;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Class       = [");

        $r7 = interfaceinvoke $r1.<proguard.classfile.Clazz: java.lang.String getName()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r7);

        $r5 = <java.lang.System: java.io.PrintStream err>;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Method      = [");

        $r7 = interfaceinvoke $r2.<proguard.classfile.Method: java.lang.String getName(proguard.classfile.Clazz)>($r1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r7 = interfaceinvoke $r2.<proguard.classfile.Method: java.lang.String getDescriptor(proguard.classfile.Clazz)>($r1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r7);

        $r5 = <java.lang.System: java.io.PrintStream err>;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Exception   = [");

        $r8 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] (");

        $r7 = virtualinvoke $r4.<java.lang.RuntimeException: java.lang.String getMessage()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r7);

        throw $r4;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    public void visitCodeAttribute0(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute)
    {
        boolean[] $r4;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int[] $r5;
        int $i0, $i1;
        proguard.classfile.attribute.visitor.StackSizeComputer r0;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.classfile.attribute.visitor.StackSizeComputer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 = $r3.<proguard.classfile.attribute.CodeAttribute: int u4codeLength>;

        $r4 = r0.<proguard.classfile.attribute.visitor.StackSizeComputer: boolean[] evaluated>;

        $i1 = lengthof $r4;

        if $i1 >= $i0 goto label2;

        $r4 = newarray (boolean)[$i0];

        r0.<proguard.classfile.attribute.visitor.StackSizeComputer: boolean[] evaluated> = $r4;

        $r5 = newarray (int)[$i0];

        r0.<proguard.classfile.attribute.visitor.StackSizeComputer: int[] stackSizes> = $r5;

     label1:
        r0.<proguard.classfile.attribute.visitor.StackSizeComputer: int stackSize> = 0;

        r0.<proguard.classfile.attribute.visitor.StackSizeComputer: int maxStackSize> = 0;

        specialinvoke r0.<proguard.classfile.attribute.visitor.StackSizeComputer: void evaluateInstructionBlock(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int)>($r1, $r2, $r3, 0);

        virtualinvoke $r3.<proguard.classfile.attribute.CodeAttribute: void exceptionsAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.visitor.ExceptionInfoVisitor)>($r1, $r2, r0);

        return;

     label2:
        $i1 = 0;

     label3:
        if $i1 >= $i0 goto label1;

        $r4 = r0.<proguard.classfile.attribute.visitor.StackSizeComputer: boolean[] evaluated>;

        $r4[$i1] = 0;

        $i1 = $i1 + 1;

        goto label3;
    }

    public void visitConstantInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.ConstantInstruction)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.instruction.ConstantInstruction $r4;
        proguard.classfile.attribute.visitor.StackSizeComputer r0;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.classfile.attribute.visitor.StackSizeComputer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.ConstantInstruction;

        r0.<proguard.classfile.attribute.visitor.StackSizeComputer: boolean exitInstructionBlock> = 0;

        return;
    }

    public void visitExceptionInfo(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.ExceptionInfo)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.attribute.visitor.StackSizeComputer r0;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.ExceptionInfo $r4;

        r0 := @this: proguard.classfile.attribute.visitor.StackSizeComputer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.ExceptionInfo;

        r0.<proguard.classfile.attribute.visitor.StackSizeComputer: int stackSize> = 1;

        $i0 = $r4.<proguard.classfile.attribute.ExceptionInfo: int u2handlerPC>;

        specialinvoke r0.<proguard.classfile.attribute.visitor.StackSizeComputer: void evaluateInstructionBlock(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int)>($r1, $r2, $r3, $i0);

        return;
    }

    public void visitSimpleInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.SimpleInstruction)
    {
        proguard.classfile.instruction.SimpleInstruction $r4;
        byte $b1;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.attribute.visitor.StackSizeComputer r0;
        proguard.classfile.Method $r2;
        boolean $z0;

        r0 := @this: proguard.classfile.attribute.visitor.StackSizeComputer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.SimpleInstruction;

        $b1 = $r4.<proguard.classfile.instruction.SimpleInstruction: byte opcode>;

        $i0 = (int) $b1;

        if $i0 == -84 goto label1;

        $i0 = (int) $b1;

        if $i0 == -83 goto label1;

        $i0 = (int) $b1;

        if $i0 == -82 goto label1;

        $i0 = (int) $b1;

        if $i0 == -81 goto label1;

        $i0 = (int) $b1;

        if $i0 == -80 goto label1;

        $i0 = (int) $b1;

        if $i0 == -79 goto label1;

        $i0 = (int) $b1;

        if $i0 != -65 goto label3;

     label1:
        $z0 = 1;

     label2:
        r0.<proguard.classfile.attribute.visitor.StackSizeComputer: boolean exitInstructionBlock> = $z0;

        return;

     label3:
        $z0 = 0;

        goto label2;
    }

    public void visitVariableInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.VariableInstruction)
    {
        proguard.classfile.instruction.VariableInstruction $r4;
        byte $b1;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.attribute.visitor.StackSizeComputer r0;
        proguard.classfile.Method $r2;
        boolean $z0;

        r0 := @this: proguard.classfile.attribute.visitor.StackSizeComputer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.VariableInstruction;

        $b1 = $r4.<proguard.classfile.instruction.VariableInstruction: byte opcode>;

        $i0 = (int) $b1;

        if $i0 != -87 goto label2;

        $z0 = 1;

     label1:
        r0.<proguard.classfile.attribute.visitor.StackSizeComputer: boolean exitInstructionBlock> = $z0;

        return;

     label2:
        $z0 = 0;

        goto label1;
    }
}
