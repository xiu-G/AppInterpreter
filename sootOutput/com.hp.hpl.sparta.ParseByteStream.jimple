class com.hp.hpl.sparta.ParseByteStream extends java.lang.Object implements com.hp.hpl.sparta.ParseSource
{
    private com.hp.hpl.sparta.ParseCharStream parseSource_;

    public void <init>(java.lang.String, java.io.InputStream, com.hp.hpl.sparta.ParseLog, java.lang.String, com.hp.hpl.sparta.ParseHandler) throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        java.lang.Throwable $r11, $r14, $r16;
        byte[] $r7;
        com.hp.hpl.sparta.ParseByteStream r0;
        java.lang.Error $r6;
        com.hp.hpl.sparta.ParseException $r15;
        java.lang.StringBuffer $r12;
        int $i0;
        java.lang.String $r1, $r4, $r9;
        com.hp.hpl.sparta.ParseCharStream $r10;
        boolean $z0;
        com.hp.hpl.sparta.EncodingMismatchException $r13;
        java.io.InputStreamReader $r8;
        com.hp.hpl.sparta.ParseLog $r3;
        com.hp.hpl.sparta.ParseHandler $r5;
        java.io.InputStream $r2;

        r0 := @this: com.hp.hpl.sparta.ParseByteStream;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.io.InputStream;

        $r3 := @parameter2: com.hp.hpl.sparta.ParseLog;

        $r4 := @parameter3: java.lang.String;

        $r5 := @parameter4: com.hp.hpl.sparta.ParseHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $r3 != null goto label23;

        $r3 = <com.hp.hpl.sparta.ParseSource: com.hp.hpl.sparta.ParseLog DEFAULT_LOG>;

     label01:
        $z0 = virtualinvoke $r2.<java.io.InputStream: boolean markSupported()>();

        if $z0 != 0 goto label02;

        $r6 = new java.lang.Error;

        specialinvoke $r6.<java.lang.Error: void <init>(java.lang.String)>("Precondition violation: the InputStream passed to ParseByteStream must support mark");

        throw $r6;

     label02:
        $i0 = <com.hp.hpl.sparta.ParseSource: int MAXLOOKAHEAD>;

        virtualinvoke $r2.<java.io.InputStream: void mark(int)>($i0);

        $r7 = newarray (byte)[4];

        $i0 = virtualinvoke $r2.<java.io.InputStream: int read(byte[])>($r7);

        if $r4 != null goto label22;

        $r4 = staticinvoke <com.hp.hpl.sparta.ParseByteStream: java.lang.String guessEncoding(java.lang.String,byte[],int,com.hp.hpl.sparta.ParseLog)>($r1, $r7, $i0, $r3);

     label03:
        virtualinvoke $r2.<java.io.InputStream: void reset()>();

     label04:
        $r8 = new java.io.InputStreamReader;

     label05:
        $r9 = staticinvoke <com.hp.hpl.sparta.ParseByteStream: java.lang.String fixEncoding(java.lang.String)>($r4);

        specialinvoke $r8.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r2, $r9);

     label06:
        $r10 = new com.hp.hpl.sparta.ParseCharStream;

     label07:
        specialinvoke $r10.<com.hp.hpl.sparta.ParseCharStream: void <init>(java.lang.String,java.io.Reader,com.hp.hpl.sparta.ParseLog,java.lang.String,com.hp.hpl.sparta.ParseHandler)>($r1, $r8, $r3, $r4, $r5);

     label08:
        r0.<com.hp.hpl.sparta.ParseByteStream: com.hp.hpl.sparta.ParseCharStream parseSource_> = $r10;

        return;

     label09:
        $r11 := @caughtexception;

        $r12 = new java.lang.StringBuffer;

     label10:
        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Problem reading with assumed encoding of ");

        $r12 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r12 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" so restarting with ");

        $r12 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("euc-jp");

        $r9 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r3.<com.hp.hpl.sparta.ParseLog: void note(java.lang.String,java.lang.String,int)>($r9, $r1, 1);

        virtualinvoke $r2.<java.io.InputStream: void reset()>();

     label11:
        $r8 = new java.io.InputStreamReader;

     label12:
        $r9 = staticinvoke <com.hp.hpl.sparta.ParseByteStream: java.lang.String fixEncoding(java.lang.String)>("euc-jp");

        specialinvoke $r8.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r2, $r9);

     label13:
        $r10 = new com.hp.hpl.sparta.ParseCharStream;

     label14:
        specialinvoke $r10.<com.hp.hpl.sparta.ParseCharStream: void <init>(java.lang.String,java.io.Reader,com.hp.hpl.sparta.ParseLog,java.lang.String,com.hp.hpl.sparta.ParseHandler)>($r1, $r8, $r3, null, $r5);

     label15:
        r0.<com.hp.hpl.sparta.ParseByteStream: com.hp.hpl.sparta.ParseCharStream parseSource_> = $r10;

        return;

     label16:
        $r13 := @caughtexception;

        $r9 = virtualinvoke $r13.<com.hp.hpl.sparta.EncodingMismatchException: java.lang.String getDeclaredEncoding()>();

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Encoding declaration of ");

        $r12 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r12 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is different that assumed ");

        $r12 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r12 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" so restarting the parsing with the new encoding");

        $r4 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r3.<com.hp.hpl.sparta.ParseLog: void note(java.lang.String,java.lang.String,int)>($r4, $r1, 1);

        virtualinvoke $r2.<java.io.InputStream: void reset()>();

        $r8 = new java.io.InputStreamReader;

     label17:
        $r4 = staticinvoke <com.hp.hpl.sparta.ParseByteStream: java.lang.String fixEncoding(java.lang.String)>($r9);

        specialinvoke $r8.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r2, $r4);

     label18:
        $r10 = new com.hp.hpl.sparta.ParseCharStream;

        specialinvoke $r10.<com.hp.hpl.sparta.ParseCharStream: void <init>(java.lang.String,java.io.Reader,com.hp.hpl.sparta.ParseLog,java.lang.String,com.hp.hpl.sparta.ParseHandler)>($r1, $r8, $r3, null, $r5);

        r0.<com.hp.hpl.sparta.ParseByteStream: com.hp.hpl.sparta.ParseCharStream parseSource_> = $r10;

        return;

     label19:
        $r14 := @caughtexception;

        $r15 = new com.hp.hpl.sparta.ParseException;

        $r12 = new java.lang.StringBuffer;

     label20:
        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

        $r12 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("euc-jp");

        $r12 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\" is not a supported encoding");

        $r9 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r15.<com.hp.hpl.sparta.ParseException: void <init>(com.hp.hpl.sparta.ParseLog,java.lang.String,int,int,java.lang.String,java.lang.String)>($r3, $r1, 1, 0, "euc-jp", $r9);

        throw $r15;

     label21:
        $r16 := @caughtexception;

        $r15 = new com.hp.hpl.sparta.ParseException;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

        $r12 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r12 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\" is not a supported encoding");

        $r4 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r15.<com.hp.hpl.sparta.ParseException: void <init>(com.hp.hpl.sparta.ParseLog,java.lang.String,int,int,java.lang.String,java.lang.String)>($r3, $r1, 1, 0, $r9, $r4);

        throw $r15;

     label22:
        goto label03;

     label23:
        goto label01;

        catch com.hp.hpl.sparta.EncodingMismatchException from label03 to label04 with label16;
        catch com.hp.hpl.sparta.EncodingMismatchException from label05 to label06 with label16;
        catch java.io.IOException from label07 to label08 with label09;
        catch com.hp.hpl.sparta.EncodingMismatchException from label07 to label08 with label16;
        catch com.hp.hpl.sparta.EncodingMismatchException from label10 to label11 with label16;
        catch java.io.UnsupportedEncodingException from label12 to label13 with label19;
        catch com.hp.hpl.sparta.EncodingMismatchException from label12 to label13 with label16;
        catch com.hp.hpl.sparta.EncodingMismatchException from label14 to label15 with label16;
        catch java.io.UnsupportedEncodingException from label17 to label18 with label21;
        catch com.hp.hpl.sparta.EncodingMismatchException from label20 to label21 with label16;
    }

    private static boolean equals(byte[], int)
    {
        byte[] $r0;
        byte $b1, $b3;
        int $i0, $i2, $i4;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $b1 = $r0[0];

        $i2 = $i0 >>> 24;

        $b3 = (byte) $i2;

        $i2 = (int) $b1;

        $i4 = (int) $b3;

        if $i2 != $i4 goto label1;

        $b1 = $r0[1];

        $i2 = $i0 >>> 16;

        $i2 = $i2 & 255;

        $b3 = (byte) $i2;

        $i2 = (int) $b1;

        $i4 = (int) $b3;

        if $i2 != $i4 goto label1;

        $b1 = $r0[2];

        $i2 = $i0 >>> 8;

        $i2 = $i2 & 255;

        $b3 = (byte) $i2;

        $i2 = (int) $b1;

        $i4 = (int) $b3;

        if $i2 != $i4 goto label1;

        $b1 = $r0[3];

        $i0 = $i0 & 255;

        $b3 = (byte) $i0;

        $i0 = (int) $b1;

        $i2 = (int) $b3;

        if $i0 != $i2 goto label1;

        return 1;

     label1:
        return 0;
    }

    private static boolean equals(byte[], short)
    {
        byte[] $r0;
        short $s0;
        byte $b1, $b3;
        int $i2, $i4;

        $r0 := @parameter0: byte[];

        $s0 := @parameter1: short;

        $b1 = $r0[0];

        $i2 = (int) $s0;

        $i2 = $i2 >>> 8;

        $b3 = (byte) $i2;

        $i2 = (int) $b1;

        $i4 = (int) $b3;

        if $i2 != $i4 goto label1;

        $b1 = $r0[1];

        $s0 = $s0 & 255;

        $b3 = (byte) $s0;

        $i2 = (int) $b1;

        $i4 = (int) $b3;

        if $i2 != $i4 goto label1;

        return 1;

     label1:
        return 0;
    }

    private static java.lang.String fixEncoding(java.lang.String)
    {
        java.lang.String $r0, $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke $r0.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("utf8");

        if $z0 == 0 goto label1;

        return "UTF-8";

     label1:
        return $r0;
    }

    private static java.lang.String guessEncoding(java.lang.String, byte[], int, com.hp.hpl.sparta.ParseLog) throws java.io.IOException
    {
        byte[] $r1;
        com.hp.hpl.sparta.ParseLog $r2;
        short $s2;
        byte $b1;
        java.lang.StringBuffer $r4, $r6;
        int $i0;
        java.lang.String $r0, $r3, $r5;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: byte[];

        $i0 := @parameter2: int;

        $r2 := @parameter3: com.hp.hpl.sparta.ParseLog;

        if $i0 == 4 goto label04;

        if $i0 > 0 goto label03;

        $r3 = "no characters in input";

     label01:
        interfaceinvoke $r2.<com.hp.hpl.sparta.ParseLog: void error(java.lang.String,java.lang.String,int)>($r3, $r0, 1);

        $r3 = "UTF-8";

     label02:
        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("UTF-8");

        if $z0 != 0 goto label13;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("From start ");

        $b1 = $r1[0];

        $r5 = staticinvoke <com.hp.hpl.sparta.ParseByteStream: java.lang.String hex(byte)>($b1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $b1 = $r1[1];

        $r5 = staticinvoke <com.hp.hpl.sparta.ParseByteStream: java.lang.String hex(byte)>($b1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $b1 = $r1[2];

        $r5 = staticinvoke <com.hp.hpl.sparta.ParseByteStream: java.lang.String hex(byte)>($b1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $b1 = $r1[3];

        $r5 = staticinvoke <com.hp.hpl.sparta.ParseByteStream: java.lang.String hex(byte)>($b1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" deduced encoding = ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r2.<com.hp.hpl.sparta.ParseLog: void note(java.lang.String,java.lang.String,int)>($r5, $r0, 1);

        return $r3;

     label03:
        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("less than 4 characters in input: \"");

        $r5 = new java.lang.String;

        specialinvoke $r5.<java.lang.String: void <init>(byte[],int,int)>($r1, 0, $i0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

        $r3 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label01;

     label04:
        $i0 = 65279;

        $z0 = staticinvoke <com.hp.hpl.sparta.ParseByteStream: boolean equals(byte[],int)>($r1, $i0);

        if $z0 != 0 goto label05;

        $z0 = staticinvoke <com.hp.hpl.sparta.ParseByteStream: boolean equals(byte[],int)>($r1, -131072);

        if $z0 != 0 goto label05;

        $i0 = 65534;

        $z0 = staticinvoke <com.hp.hpl.sparta.ParseByteStream: boolean equals(byte[],int)>($r1, $i0);

        if $z0 != 0 goto label05;

        $z0 = staticinvoke <com.hp.hpl.sparta.ParseByteStream: boolean equals(byte[],int)>($r1, -16842752);

        if $z0 != 0 goto label05;

        $z0 = staticinvoke <com.hp.hpl.sparta.ParseByteStream: boolean equals(byte[],int)>($r1, 60);

        if $z0 != 0 goto label05;

        $z0 = staticinvoke <com.hp.hpl.sparta.ParseByteStream: boolean equals(byte[],int)>($r1, 1006632960);

        if $z0 != 0 goto label05;

        $z0 = staticinvoke <com.hp.hpl.sparta.ParseByteStream: boolean equals(byte[],int)>($r1, 15360);

        if $z0 != 0 goto label05;

        $z0 = staticinvoke <com.hp.hpl.sparta.ParseByteStream: boolean equals(byte[],int)>($r1, 3932160);

        if $z0 == 0 goto label06;

     label05:
        $r3 = "UCS-4";

        goto label02;

     label06:
        $z0 = staticinvoke <com.hp.hpl.sparta.ParseByteStream: boolean equals(byte[],int)>($r1, 3932223);

        if $z0 == 0 goto label07;

        $r3 = "UTF-16BE";

        goto label02;

     label07:
        $z0 = staticinvoke <com.hp.hpl.sparta.ParseByteStream: boolean equals(byte[],int)>($r1, 1006649088);

        if $z0 == 0 goto label08;

        $r3 = "UTF-16LE";

        goto label02;

     label08:
        $z0 = staticinvoke <com.hp.hpl.sparta.ParseByteStream: boolean equals(byte[],int)>($r1, 1010792557);

        if $z0 == 0 goto label09;

        $r3 = "UTF-8";

        goto label02;

     label09:
        $z0 = staticinvoke <com.hp.hpl.sparta.ParseByteStream: boolean equals(byte[],int)>($r1, 1282385812);

        if $z0 == 0 goto label10;

        $r3 = "EBCDIC";

        goto label02;

     label10:
        $s2 = (short) -2;

        $z0 = staticinvoke <com.hp.hpl.sparta.ParseByteStream: boolean equals(byte[],short)>($r1, $s2);

        if $z0 != 0 goto label11;

        $z0 = staticinvoke <com.hp.hpl.sparta.ParseByteStream: boolean equals(byte[],short)>($r1, -257);

        if $z0 == 0 goto label12;

     label11:
        $r3 = "UTF-16";

        goto label02;

     label12:
        $r3 = "UTF-8";

        goto label02;

     label13:
        return $r3;
    }

    private static java.lang.String hex(byte)
    {
        byte $b0;
        java.lang.StringBuffer $r2, $r3;
        int $i1, $i2;
        java.lang.String $r0, $r1;

        $b0 := @parameter0: byte;

        $i1 = (int) $b0;

        $r0 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i1);

        $r1 = $r0;

        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        lookupswitch($i1)
        {
            case 1: goto label3;
            case 2: goto label2;
            default: goto label1;
        };

     label1:
        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i2 = -2;

        $i1 = $i1 + $i2;

        $r1 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int)>($i1);

     label2:
        return $r1;

     label3:
        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("0");

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r0;
    }

    public int getLineNumber()
    {
        int $i0;
        com.hp.hpl.sparta.ParseCharStream $r1;
        com.hp.hpl.sparta.ParseByteStream r0;

        r0 := @this: com.hp.hpl.sparta.ParseByteStream;

        $r1 = r0.<com.hp.hpl.sparta.ParseByteStream: com.hp.hpl.sparta.ParseCharStream parseSource_>;

        $i0 = virtualinvoke $r1.<com.hp.hpl.sparta.ParseCharStream: int getLineNumber()>();

        return $i0;
    }

    public java.lang.String getSystemId()
    {
        java.lang.String $r1;
        com.hp.hpl.sparta.ParseCharStream $r2;
        com.hp.hpl.sparta.ParseByteStream r0;

        r0 := @this: com.hp.hpl.sparta.ParseByteStream;

        $r2 = r0.<com.hp.hpl.sparta.ParseByteStream: com.hp.hpl.sparta.ParseCharStream parseSource_>;

        $r1 = virtualinvoke $r2.<com.hp.hpl.sparta.ParseCharStream: java.lang.String getSystemId()>();

        return $r1;
    }

    public java.lang.String toString()
    {
        java.lang.String $r1;
        com.hp.hpl.sparta.ParseCharStream $r2;
        com.hp.hpl.sparta.ParseByteStream r0;

        r0 := @this: com.hp.hpl.sparta.ParseByteStream;

        $r2 = r0.<com.hp.hpl.sparta.ParseByteStream: com.hp.hpl.sparta.ParseCharStream parseSource_>;

        $r1 = virtualinvoke $r2.<com.hp.hpl.sparta.ParseCharStream: java.lang.String toString()>();

        return $r1;
    }
}
