abstract class com.google.zxing.oned.rss.expanded.decoders.AI01decoder extends com.google.zxing.oned.rss.expanded.decoders.AbstractExpandedDecoder
{
    protected static final int gtinSize;

    void <init>(com.google.zxing.common.BitArray)
    {
        com.google.zxing.oned.rss.expanded.decoders.AI01decoder r0;
        com.google.zxing.common.BitArray $r1;

        r0 := @this: com.google.zxing.oned.rss.expanded.decoders.AI01decoder;

        $r1 := @parameter0: com.google.zxing.common.BitArray;

        specialinvoke r0.<com.google.zxing.oned.rss.expanded.decoders.AbstractExpandedDecoder: void <init>(com.google.zxing.common.BitArray)>($r1);

        return;
    }

    private static void appendCheckDigit(java.lang.StringBuffer, int)
    {
        java.lang.StringBuffer $r0;
        int $i0, $i1, $i3, $i4, $i5;
        char $c2;

        $r0 := @parameter0: java.lang.StringBuffer;

        $i0 := @parameter1: int;

        $i3 = 0;

        $i4 = 0;

     label1:
        if $i3 >= 13 goto label3;

        $i1 = $i3 + $i0;

        $c2 = virtualinvoke $r0.<java.lang.StringBuffer: char charAt(int)>($i1);

        $i1 = (int) $c2;

        $i5 = $i1 + -48;

        $i1 = $i3 & 1;

        if $i1 != 0 goto label2;

        $i5 = $i5 * 3;

     label2:
        $i4 = $i4 + $i5;

        $i3 = $i3 + 1;

        goto label1;

     label3:
        $i0 = $i4 % 10;

        $i0 = 10 - $i0;

        if $i0 != 10 goto label4;

        $i0 = 0;

     label4:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        return;
    }

    protected void encodeCompressedGtin(java.lang.StringBuffer, int)
    {
        java.lang.StringBuffer $r1;
        int $i0, $i1;
        com.google.zxing.oned.rss.expanded.decoders.AI01decoder r0;

        r0 := @this: com.google.zxing.oned.rss.expanded.decoders.AI01decoder;

        $r1 := @parameter0: java.lang.StringBuffer;

        $i0 := @parameter1: int;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(01)");

        $i1 = virtualinvoke $r1.<java.lang.StringBuffer: int length()>();

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(57);

        virtualinvoke r0.<com.google.zxing.oned.rss.expanded.decoders.AI01decoder: void encodeCompressedGtinWithoutAI(java.lang.StringBuffer,int,int)>($r1, $i0, $i1);

        return;
    }

    protected void encodeCompressedGtinWithoutAI(java.lang.StringBuffer, int, int)
    {
        com.google.zxing.oned.rss.expanded.decoders.GeneralAppIdDecoder $r2;
        java.lang.StringBuffer $r1;
        int $i0, $i1, $i2, $i3, $i4;
        com.google.zxing.oned.rss.expanded.decoders.AI01decoder r0;

        r0 := @this: com.google.zxing.oned.rss.expanded.decoders.AI01decoder;

        $r1 := @parameter0: java.lang.StringBuffer;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i3 = 0;

     label1:
        if $i3 >= 4 goto label4;

        $r2 = r0.<com.google.zxing.oned.rss.expanded.decoders.AI01decoder: com.google.zxing.oned.rss.expanded.decoders.GeneralAppIdDecoder generalDecoder>;

        $i2 = $i3 * 10;

        $i2 = $i2 + $i0;

        $i2 = virtualinvoke $r2.<com.google.zxing.oned.rss.expanded.decoders.GeneralAppIdDecoder: int extractNumericValueFromBitArray(int,int)>($i2, 10);

        $i4 = $i2 / 100;

        if $i4 != 0 goto label2;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48);

     label2:
        $i4 = $i2 / 10;

        if $i4 != 0 goto label3;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48);

     label3:
        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        $i3 = $i3 + 1;

        goto label1;

     label4:
        staticinvoke <com.google.zxing.oned.rss.expanded.decoders.AI01decoder: void appendCheckDigit(java.lang.StringBuffer,int)>($r1, $i1);

        return;
    }

    public static void <clinit>()
    {
        <com.google.zxing.oned.rss.expanded.decoders.AI01decoder: int gtinSize> = 40;

        return;
    }
}
