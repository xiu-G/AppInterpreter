public class proguard.evaluation.Processor extends java.lang.Object implements proguard.classfile.instruction.visitor.InstructionVisitor
{
    private final proguard.evaluation.BranchUnit branchUnit;
    private final proguard.evaluation.ClassConstantValueFactory classConstantValueFactory;
    private final proguard.evaluation.ConstantValueFactory constantValueFactory;
    private final proguard.evaluation.InvocationUnit invocationUnit;
    private final proguard.evaluation.Stack stack;
    private final proguard.evaluation.value.ValueFactory valueFactory;
    private final proguard.evaluation.Variables variables;

    public void <init>(proguard.evaluation.Variables, proguard.evaluation.Stack, proguard.evaluation.value.ValueFactory, proguard.evaluation.BranchUnit, proguard.evaluation.InvocationUnit)
    {
        proguard.evaluation.BranchUnit $r4;
        proguard.evaluation.ClassConstantValueFactory $r7;
        proguard.evaluation.Variables $r1;
        proguard.evaluation.value.ValueFactory $r3;
        proguard.evaluation.ConstantValueFactory $r6;
        proguard.evaluation.Stack $r2;
        proguard.evaluation.Processor r0;
        proguard.evaluation.InvocationUnit $r5;

        r0 := @this: proguard.evaluation.Processor;

        $r1 := @parameter0: proguard.evaluation.Variables;

        $r2 := @parameter1: proguard.evaluation.Stack;

        $r3 := @parameter2: proguard.evaluation.value.ValueFactory;

        $r4 := @parameter3: proguard.evaluation.BranchUnit;

        $r5 := @parameter4: proguard.evaluation.InvocationUnit;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<proguard.evaluation.Processor: proguard.evaluation.Variables variables> = $r1;

        r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack> = $r2;

        r0.<proguard.evaluation.Processor: proguard.evaluation.value.ValueFactory valueFactory> = $r3;

        r0.<proguard.evaluation.Processor: proguard.evaluation.BranchUnit branchUnit> = $r4;

        r0.<proguard.evaluation.Processor: proguard.evaluation.InvocationUnit invocationUnit> = $r5;

        $r6 = new proguard.evaluation.ConstantValueFactory;

        specialinvoke $r6.<proguard.evaluation.ConstantValueFactory: void <init>(proguard.evaluation.value.ValueFactory)>($r3);

        r0.<proguard.evaluation.Processor: proguard.evaluation.ConstantValueFactory constantValueFactory> = $r6;

        $r7 = new proguard.evaluation.ClassConstantValueFactory;

        specialinvoke $r7.<proguard.evaluation.ClassConstantValueFactory: void <init>(proguard.evaluation.value.ValueFactory)>($r3);

        r0.<proguard.evaluation.Processor: proguard.evaluation.ClassConstantValueFactory classConstantValueFactory> = $r7;

        return;
    }

    public void visitBranchInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.BranchInstruction)
    {
        proguard.evaluation.value.ValueFactory $r10;
        proguard.evaluation.Stack $r8;
        proguard.evaluation.value.IntegerValue $r9, $r11;
        byte $b2;
        proguard.classfile.Clazz $r1;
        java.lang.StringBuffer $r5, $r14;
        proguard.evaluation.value.InstructionOffsetValue $r16;
        int $i0, $i1, $i3;
        java.lang.String $r6;
        proguard.evaluation.BranchUnit $r7;
        proguard.classfile.instruction.BranchInstruction $r4;
        java.lang.IllegalArgumentException $r15;
        proguard.evaluation.Processor r0;
        proguard.evaluation.value.ReferenceValue $r12, $r13;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.evaluation.Processor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.BranchInstruction;

        $i1 = $r4.<proguard.classfile.instruction.BranchInstruction: int branchOffset>;

        $i1 = $i0 + $i1;

        $b2 = $r4.<proguard.classfile.instruction.BranchInstruction: byte opcode>;

        $i3 = (int) $b2;

        lookupswitch($i3)
        {
            case -103: goto label02;
            case -102: goto label03;
            case -101: goto label04;
            case -100: goto label05;
            case -99: goto label06;
            case -98: goto label07;
            case -97: goto label08;
            case -96: goto label09;
            case -95: goto label10;
            case -94: goto label11;
            case -93: goto label12;
            case -92: goto label13;
            case -91: goto label14;
            case -90: goto label15;
            case -89: goto label16;
            case -88: goto label17;
            case -87: goto label01;
            case -86: goto label01;
            case -85: goto label01;
            case -84: goto label01;
            case -83: goto label01;
            case -82: goto label01;
            case -81: goto label01;
            case -80: goto label01;
            case -79: goto label01;
            case -78: goto label01;
            case -77: goto label01;
            case -76: goto label01;
            case -75: goto label01;
            case -74: goto label01;
            case -73: goto label01;
            case -72: goto label01;
            case -71: goto label01;
            case -70: goto label01;
            case -69: goto label01;
            case -68: goto label01;
            case -67: goto label01;
            case -66: goto label01;
            case -65: goto label01;
            case -64: goto label01;
            case -63: goto label01;
            case -62: goto label01;
            case -61: goto label01;
            case -60: goto label01;
            case -59: goto label01;
            case -58: goto label18;
            case -57: goto label19;
            case -56: goto label16;
            case -55: goto label17;
            default: goto label01;
        };

     label01:
        $r15 = new java.lang.IllegalArgumentException;

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unknown branch instruction [");

        $b2 = $r4.<proguard.classfile.instruction.BranchInstruction: byte opcode>;

        $i0 = (int) $b2;

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r15;

     label02:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.BranchUnit branchUnit>;

        $r8 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r9 = virtualinvoke $r8.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $r10 = r0.<proguard.evaluation.Processor: proguard.evaluation.value.ValueFactory valueFactory>;

        $r11 = virtualinvoke $r10.<proguard.evaluation.value.ValueFactory: proguard.evaluation.value.IntegerValue createIntegerValue(int)>(0);

        $i3 = virtualinvoke $r9.<proguard.evaluation.value.IntegerValue: int equal(proguard.evaluation.value.IntegerValue)>($r11);

        interfaceinvoke $r7.<proguard.evaluation.BranchUnit: void branchConditionally(proguard.classfile.Clazz,proguard.classfile.attribute.CodeAttribute,int,int,int)>($r1, $r3, $i0, $i1, $i3);

        return;

     label03:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.BranchUnit branchUnit>;

        $r8 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r9 = virtualinvoke $r8.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $r10 = r0.<proguard.evaluation.Processor: proguard.evaluation.value.ValueFactory valueFactory>;

        $r11 = virtualinvoke $r10.<proguard.evaluation.value.ValueFactory: proguard.evaluation.value.IntegerValue createIntegerValue(int)>(0);

        $i3 = virtualinvoke $r9.<proguard.evaluation.value.IntegerValue: int notEqual(proguard.evaluation.value.IntegerValue)>($r11);

        interfaceinvoke $r7.<proguard.evaluation.BranchUnit: void branchConditionally(proguard.classfile.Clazz,proguard.classfile.attribute.CodeAttribute,int,int,int)>($r1, $r3, $i0, $i1, $i3);

        return;

     label04:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.BranchUnit branchUnit>;

        $r8 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r9 = virtualinvoke $r8.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $r10 = r0.<proguard.evaluation.Processor: proguard.evaluation.value.ValueFactory valueFactory>;

        $r11 = virtualinvoke $r10.<proguard.evaluation.value.ValueFactory: proguard.evaluation.value.IntegerValue createIntegerValue(int)>(0);

        $i3 = virtualinvoke $r9.<proguard.evaluation.value.IntegerValue: int lessThan(proguard.evaluation.value.IntegerValue)>($r11);

        interfaceinvoke $r7.<proguard.evaluation.BranchUnit: void branchConditionally(proguard.classfile.Clazz,proguard.classfile.attribute.CodeAttribute,int,int,int)>($r1, $r3, $i0, $i1, $i3);

        return;

     label05:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.BranchUnit branchUnit>;

        $r8 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r9 = virtualinvoke $r8.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $r10 = r0.<proguard.evaluation.Processor: proguard.evaluation.value.ValueFactory valueFactory>;

        $r11 = virtualinvoke $r10.<proguard.evaluation.value.ValueFactory: proguard.evaluation.value.IntegerValue createIntegerValue(int)>(0);

        $i3 = virtualinvoke $r9.<proguard.evaluation.value.IntegerValue: int greaterThanOrEqual(proguard.evaluation.value.IntegerValue)>($r11);

        interfaceinvoke $r7.<proguard.evaluation.BranchUnit: void branchConditionally(proguard.classfile.Clazz,proguard.classfile.attribute.CodeAttribute,int,int,int)>($r1, $r3, $i0, $i1, $i3);

        return;

     label06:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.BranchUnit branchUnit>;

        $r8 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r9 = virtualinvoke $r8.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $r10 = r0.<proguard.evaluation.Processor: proguard.evaluation.value.ValueFactory valueFactory>;

        $r11 = virtualinvoke $r10.<proguard.evaluation.value.ValueFactory: proguard.evaluation.value.IntegerValue createIntegerValue(int)>(0);

        $i3 = virtualinvoke $r9.<proguard.evaluation.value.IntegerValue: int greaterThan(proguard.evaluation.value.IntegerValue)>($r11);

        interfaceinvoke $r7.<proguard.evaluation.BranchUnit: void branchConditionally(proguard.classfile.Clazz,proguard.classfile.attribute.CodeAttribute,int,int,int)>($r1, $r3, $i0, $i1, $i3);

        return;

     label07:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.BranchUnit branchUnit>;

        $r8 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r9 = virtualinvoke $r8.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $r10 = r0.<proguard.evaluation.Processor: proguard.evaluation.value.ValueFactory valueFactory>;

        $r11 = virtualinvoke $r10.<proguard.evaluation.value.ValueFactory: proguard.evaluation.value.IntegerValue createIntegerValue(int)>(0);

        $i3 = virtualinvoke $r9.<proguard.evaluation.value.IntegerValue: int lessThanOrEqual(proguard.evaluation.value.IntegerValue)>($r11);

        interfaceinvoke $r7.<proguard.evaluation.BranchUnit: void branchConditionally(proguard.classfile.Clazz,proguard.classfile.attribute.CodeAttribute,int,int,int)>($r1, $r3, $i0, $i1, $i3);

        return;

     label08:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.BranchUnit branchUnit>;

        $r8 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r9 = virtualinvoke $r8.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $r8 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r11 = virtualinvoke $r8.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $i3 = virtualinvoke $r9.<proguard.evaluation.value.IntegerValue: int equal(proguard.evaluation.value.IntegerValue)>($r11);

        interfaceinvoke $r7.<proguard.evaluation.BranchUnit: void branchConditionally(proguard.classfile.Clazz,proguard.classfile.attribute.CodeAttribute,int,int,int)>($r1, $r3, $i0, $i1, $i3);

        return;

     label09:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.BranchUnit branchUnit>;

        $r8 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r9 = virtualinvoke $r8.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $r8 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r11 = virtualinvoke $r8.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $i3 = virtualinvoke $r9.<proguard.evaluation.value.IntegerValue: int notEqual(proguard.evaluation.value.IntegerValue)>($r11);

        interfaceinvoke $r7.<proguard.evaluation.BranchUnit: void branchConditionally(proguard.classfile.Clazz,proguard.classfile.attribute.CodeAttribute,int,int,int)>($r1, $r3, $i0, $i1, $i3);

        return;

     label10:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.BranchUnit branchUnit>;

        $r8 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r9 = virtualinvoke $r8.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $r8 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r11 = virtualinvoke $r8.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $i3 = virtualinvoke $r9.<proguard.evaluation.value.IntegerValue: int greaterThan(proguard.evaluation.value.IntegerValue)>($r11);

        interfaceinvoke $r7.<proguard.evaluation.BranchUnit: void branchConditionally(proguard.classfile.Clazz,proguard.classfile.attribute.CodeAttribute,int,int,int)>($r1, $r3, $i0, $i1, $i3);

        return;

     label11:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.BranchUnit branchUnit>;

        $r8 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r9 = virtualinvoke $r8.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $r8 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r11 = virtualinvoke $r8.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $i3 = virtualinvoke $r9.<proguard.evaluation.value.IntegerValue: int lessThanOrEqual(proguard.evaluation.value.IntegerValue)>($r11);

        interfaceinvoke $r7.<proguard.evaluation.BranchUnit: void branchConditionally(proguard.classfile.Clazz,proguard.classfile.attribute.CodeAttribute,int,int,int)>($r1, $r3, $i0, $i1, $i3);

        return;

     label12:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.BranchUnit branchUnit>;

        $r8 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r9 = virtualinvoke $r8.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $r8 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r11 = virtualinvoke $r8.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $i3 = virtualinvoke $r9.<proguard.evaluation.value.IntegerValue: int lessThan(proguard.evaluation.value.IntegerValue)>($r11);

        interfaceinvoke $r7.<proguard.evaluation.BranchUnit: void branchConditionally(proguard.classfile.Clazz,proguard.classfile.attribute.CodeAttribute,int,int,int)>($r1, $r3, $i0, $i1, $i3);

        return;

     label13:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.BranchUnit branchUnit>;

        $r8 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r9 = virtualinvoke $r8.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $r8 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r11 = virtualinvoke $r8.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $i3 = virtualinvoke $r9.<proguard.evaluation.value.IntegerValue: int greaterThanOrEqual(proguard.evaluation.value.IntegerValue)>($r11);

        interfaceinvoke $r7.<proguard.evaluation.BranchUnit: void branchConditionally(proguard.classfile.Clazz,proguard.classfile.attribute.CodeAttribute,int,int,int)>($r1, $r3, $i0, $i1, $i3);

        return;

     label14:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.BranchUnit branchUnit>;

        $r8 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r12 = virtualinvoke $r8.<proguard.evaluation.Stack: proguard.evaluation.value.ReferenceValue apop()>();

        $r8 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r13 = virtualinvoke $r8.<proguard.evaluation.Stack: proguard.evaluation.value.ReferenceValue apop()>();

        $i3 = virtualinvoke $r12.<proguard.evaluation.value.ReferenceValue: int equal(proguard.evaluation.value.ReferenceValue)>($r13);

        interfaceinvoke $r7.<proguard.evaluation.BranchUnit: void branchConditionally(proguard.classfile.Clazz,proguard.classfile.attribute.CodeAttribute,int,int,int)>($r1, $r3, $i0, $i1, $i3);

        return;

     label15:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.BranchUnit branchUnit>;

        $r8 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r12 = virtualinvoke $r8.<proguard.evaluation.Stack: proguard.evaluation.value.ReferenceValue apop()>();

        $r8 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r13 = virtualinvoke $r8.<proguard.evaluation.Stack: proguard.evaluation.value.ReferenceValue apop()>();

        $i3 = virtualinvoke $r12.<proguard.evaluation.value.ReferenceValue: int notEqual(proguard.evaluation.value.ReferenceValue)>($r13);

        interfaceinvoke $r7.<proguard.evaluation.BranchUnit: void branchConditionally(proguard.classfile.Clazz,proguard.classfile.attribute.CodeAttribute,int,int,int)>($r1, $r3, $i0, $i1, $i3);

        return;

     label16:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.BranchUnit branchUnit>;

        interfaceinvoke $r7.<proguard.evaluation.BranchUnit: void branch(proguard.classfile.Clazz,proguard.classfile.attribute.CodeAttribute,int,int)>($r1, $r3, $i0, $i1);

        return;

     label17:
        $r8 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r16 = new proguard.evaluation.value.InstructionOffsetValue;

        $i3 = virtualinvoke $r4.<proguard.classfile.instruction.BranchInstruction: int length(int)>($i0);

        $i3 = $i3 + $i0;

        specialinvoke $r16.<proguard.evaluation.value.InstructionOffsetValue: void <init>(int)>($i3);

        virtualinvoke $r8.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r16);

        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.BranchUnit branchUnit>;

        interfaceinvoke $r7.<proguard.evaluation.BranchUnit: void branch(proguard.classfile.Clazz,proguard.classfile.attribute.CodeAttribute,int,int)>($r1, $r3, $i0, $i1);

        return;

     label18:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.BranchUnit branchUnit>;

        $r8 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r12 = virtualinvoke $r8.<proguard.evaluation.Stack: proguard.evaluation.value.ReferenceValue apop()>();

        $i3 = virtualinvoke $r12.<proguard.evaluation.value.ReferenceValue: int isNull()>();

        interfaceinvoke $r7.<proguard.evaluation.BranchUnit: void branchConditionally(proguard.classfile.Clazz,proguard.classfile.attribute.CodeAttribute,int,int,int)>($r1, $r3, $i0, $i1, $i3);

        return;

     label19:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.BranchUnit branchUnit>;

        $r8 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r12 = virtualinvoke $r8.<proguard.evaluation.Stack: proguard.evaluation.value.ReferenceValue apop()>();

        $i3 = virtualinvoke $r12.<proguard.evaluation.value.ReferenceValue: int isNotNull()>();

        interfaceinvoke $r7.<proguard.evaluation.BranchUnit: void branchConditionally(proguard.classfile.Clazz,proguard.classfile.attribute.CodeAttribute,int,int,int)>($r1, $r3, $i0, $i1, $i3);

        return;
    }

    public void visitConstantInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.ConstantInstruction)
    {
        proguard.evaluation.value.ValueFactory $r13;
        proguard.evaluation.Stack $r5, $r14;
        proguard.evaluation.value.IntegerValue $r15;
        byte $b2;
        proguard.classfile.Clazz $r1;
        java.lang.StringBuffer $r6, $r17;
        int $i0, $i1, $i3;
        java.lang.String $r7;
        proguard.evaluation.value.Value $r9;
        proguard.evaluation.ClassConstantValueFactory $r8;
        proguard.evaluation.ConstantValueFactory $r11;
        java.lang.IllegalArgumentException $r18;
        proguard.evaluation.Processor r0;
        proguard.evaluation.value.ReferenceValue $r12, $r16;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.instruction.ConstantInstruction $r4;
        proguard.classfile.Method $r2;
        proguard.evaluation.InvocationUnit $r10;

        r0 := @this: proguard.evaluation.Processor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.ConstantInstruction;

        $i1 = $r4.<proguard.classfile.instruction.ConstantInstruction: int constantIndex>;

        $b2 = $r4.<proguard.classfile.instruction.ConstantInstruction: byte opcode>;

        $i3 = (int) $b2;

        lookupswitch($i3)
        {
            case -78: goto label03;
            case -77: goto label03;
            case -76: goto label03;
            case -75: goto label03;
            case -74: goto label03;
            case -73: goto label03;
            case -72: goto label03;
            case -71: goto label03;
            case -69: goto label04;
            case -67: goto label05;
            case -64: goto label06;
            case -63: goto label10;
            case -59: goto label14;
            case 18: goto label02;
            case 19: goto label02;
            case 20: goto label02;
            default: goto label01;
        };

     label01:
        $r18 = new java.lang.IllegalArgumentException;

        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unknown constant pool instruction [");

        $b2 = $r4.<proguard.classfile.instruction.ConstantInstruction: byte opcode>;

        $i0 = (int) $b2;

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r18;

     label02:
        $r5 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r8 = r0.<proguard.evaluation.Processor: proguard.evaluation.ClassConstantValueFactory classConstantValueFactory>;

        $r9 = virtualinvoke $r8.<proguard.evaluation.ClassConstantValueFactory: proguard.evaluation.value.Value constantValue(proguard.classfile.Clazz,int)>($r1, $i1);

        virtualinvoke $r5.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r9);

        return;

     label03:
        $r10 = r0.<proguard.evaluation.Processor: proguard.evaluation.InvocationUnit invocationUnit>;

        $r5 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        interfaceinvoke $r10.<proguard.evaluation.InvocationUnit: void invokeMember(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.ConstantInstruction,proguard.evaluation.Stack)>($r1, $r2, $r3, $i0, $r4, $r5);

        return;

     label04:
        $r5 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r11 = r0.<proguard.evaluation.Processor: proguard.evaluation.ConstantValueFactory constantValueFactory>;

        $r9 = virtualinvoke $r11.<proguard.evaluation.ConstantValueFactory: proguard.evaluation.value.Value constantValue(proguard.classfile.Clazz,int)>($r1, $i1);

        $r12 = virtualinvoke $r9.<proguard.evaluation.value.Value: proguard.evaluation.value.ReferenceValue referenceValue()>();

        virtualinvoke $r5.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r12);

        return;

     label05:
        $r11 = r0.<proguard.evaluation.Processor: proguard.evaluation.ConstantValueFactory constantValueFactory>;

        $r9 = virtualinvoke $r11.<proguard.evaluation.ConstantValueFactory: proguard.evaluation.value.Value constantValue(proguard.classfile.Clazz,int)>($r1, $i1);

        $r12 = virtualinvoke $r9.<proguard.evaluation.value.Value: proguard.evaluation.value.ReferenceValue referenceValue()>();

        $r5 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r13 = r0.<proguard.evaluation.Processor: proguard.evaluation.value.ValueFactory valueFactory>;

        $r7 = virtualinvoke $r12.<proguard.evaluation.value.ReferenceValue: java.lang.String internalType()>();

        $r1 = virtualinvoke $r12.<proguard.evaluation.value.ReferenceValue: proguard.classfile.Clazz getReferencedClass()>();

        $r14 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r15 = virtualinvoke $r14.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $r12 = virtualinvoke $r13.<proguard.evaluation.value.ValueFactory: proguard.evaluation.value.ReferenceValue createArrayReferenceValue(java.lang.String,proguard.classfile.Clazz,proguard.evaluation.value.IntegerValue)>($r7, $r1, $r15);

        virtualinvoke $r5.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r12);

        return;

     label06:
        $r5 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r12 = virtualinvoke $r5.<proguard.evaluation.Stack: proguard.evaluation.value.ReferenceValue apop()>();

        $i0 = virtualinvoke $r12.<proguard.evaluation.value.ReferenceValue: int isNull()>();

        if $i0 != 1 goto label08;

     label07:
        $r5 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        virtualinvoke $r5.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r12);

        return;

     label08:
        $i0 = virtualinvoke $r12.<proguard.evaluation.value.ReferenceValue: int isNull()>();

        if $i0 != -1 goto label09;

        $r11 = r0.<proguard.evaluation.Processor: proguard.evaluation.ConstantValueFactory constantValueFactory>;

        $r9 = virtualinvoke $r11.<proguard.evaluation.ConstantValueFactory: proguard.evaluation.value.Value constantValue(proguard.classfile.Clazz,int)>($r1, $i1);

        $r12 = virtualinvoke $r9.<proguard.evaluation.value.Value: proguard.evaluation.value.ReferenceValue referenceValue()>();

        goto label07;

     label09:
        $r11 = r0.<proguard.evaluation.Processor: proguard.evaluation.ConstantValueFactory constantValueFactory>;

        $r9 = virtualinvoke $r11.<proguard.evaluation.ConstantValueFactory: proguard.evaluation.value.Value constantValue(proguard.classfile.Clazz,int)>($r1, $i1);

        $r12 = virtualinvoke $r9.<proguard.evaluation.value.Value: proguard.evaluation.value.ReferenceValue referenceValue()>();

        $r13 = r0.<proguard.evaluation.Processor: proguard.evaluation.value.ValueFactory valueFactory>;

        $r16 = virtualinvoke $r13.<proguard.evaluation.value.ValueFactory: proguard.evaluation.value.ReferenceValue createReferenceValueNull()>();

        $r12 = virtualinvoke $r12.<proguard.evaluation.value.ReferenceValue: proguard.evaluation.value.ReferenceValue generalize(proguard.evaluation.value.ReferenceValue)>($r16);

        goto label07;

     label10:
        $r11 = r0.<proguard.evaluation.Processor: proguard.evaluation.ConstantValueFactory constantValueFactory>;

        $r9 = virtualinvoke $r11.<proguard.evaluation.ConstantValueFactory: proguard.evaluation.value.Value constantValue(proguard.classfile.Clazz,int)>($r1, $i1);

        $r12 = virtualinvoke $r9.<proguard.evaluation.value.Value: proguard.evaluation.value.ReferenceValue referenceValue()>();

        $r5 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r16 = virtualinvoke $r5.<proguard.evaluation.Stack: proguard.evaluation.value.ReferenceValue apop()>();

        $r7 = virtualinvoke $r12.<proguard.evaluation.value.ReferenceValue: java.lang.String getType()>();

        $r1 = virtualinvoke $r12.<proguard.evaluation.value.ReferenceValue: proguard.classfile.Clazz getReferencedClass()>();

        $i0 = virtualinvoke $r16.<proguard.evaluation.value.ReferenceValue: int instanceOf(java.lang.String,proguard.classfile.Clazz)>($r7, $r1);

        $r5 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        if $i0 != -1 goto label12;

        $r13 = r0.<proguard.evaluation.Processor: proguard.evaluation.value.ValueFactory valueFactory>;

        $r15 = virtualinvoke $r13.<proguard.evaluation.value.ValueFactory: proguard.evaluation.value.IntegerValue createIntegerValue(int)>(0);

     label11:
        virtualinvoke $r5.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r15);

        return;

     label12:
        if $i0 != 1 goto label13;

        $r13 = r0.<proguard.evaluation.Processor: proguard.evaluation.value.ValueFactory valueFactory>;

        $r15 = virtualinvoke $r13.<proguard.evaluation.value.ValueFactory: proguard.evaluation.value.IntegerValue createIntegerValue(int)>(1);

        goto label11;

     label13:
        $r13 = r0.<proguard.evaluation.Processor: proguard.evaluation.value.ValueFactory valueFactory>;

        $r15 = virtualinvoke $r13.<proguard.evaluation.value.ValueFactory: proguard.evaluation.value.IntegerValue createIntegerValue()>();

        goto label11;

     label14:
        $i0 = $r4.<proguard.classfile.instruction.ConstantInstruction: int constant>;

        $i3 = 0;

     label15:
        if $i3 >= $i0 goto label16;

        $r5 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        virtualinvoke $r5.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $i3 = $i3 + 1;

        goto label15;

     label16:
        $r5 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r11 = r0.<proguard.evaluation.Processor: proguard.evaluation.ConstantValueFactory constantValueFactory>;

        $r9 = virtualinvoke $r11.<proguard.evaluation.ConstantValueFactory: proguard.evaluation.value.Value constantValue(proguard.classfile.Clazz,int)>($r1, $i1);

        $r12 = virtualinvoke $r9.<proguard.evaluation.value.Value: proguard.evaluation.value.ReferenceValue referenceValue()>();

        virtualinvoke $r5.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r12);

        return;
    }

    public void visitLookUpSwitchInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.LookUpSwitchInstruction)
    {
        proguard.evaluation.BranchUnit $r7;
        proguard.classfile.instruction.LookUpSwitchInstruction $r4;
        proguard.evaluation.value.ValueFactory $r9;
        proguard.evaluation.Stack $r5;
        proguard.evaluation.Processor r0;
        proguard.evaluation.value.IntegerValue $r6, $r10;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int[] $r8;
        int $i0, $i1, $i2, $i3;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.evaluation.Processor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.LookUpSwitchInstruction;

        $r5 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r6 = virtualinvoke $r5.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.BranchUnit branchUnit>;

        $i2 = $r4.<proguard.classfile.instruction.LookUpSwitchInstruction: int defaultOffset>;

        $i2 = $i2 + $i0;

        interfaceinvoke $r7.<proguard.evaluation.BranchUnit: void branch(proguard.classfile.Clazz,proguard.classfile.attribute.CodeAttribute,int,int)>($r1, $r3, $i0, $i2);

        $i2 = 0;

     label1:
        $r8 = $r4.<proguard.classfile.instruction.LookUpSwitchInstruction: int[] jumpOffsets>;

        $i3 = lengthof $r8;

        if $i2 >= $i3 goto label3;

        $r9 = r0.<proguard.evaluation.Processor: proguard.evaluation.value.ValueFactory valueFactory>;

        $r8 = $r4.<proguard.classfile.instruction.LookUpSwitchInstruction: int[] cases>;

        $i3 = $r8[$i2];

        $r10 = virtualinvoke $r9.<proguard.evaluation.value.ValueFactory: proguard.evaluation.value.IntegerValue createIntegerValue(int)>($i3);

        $i3 = virtualinvoke $r6.<proguard.evaluation.value.IntegerValue: int equal(proguard.evaluation.value.IntegerValue)>($r10);

        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.BranchUnit branchUnit>;

        $r8 = $r4.<proguard.classfile.instruction.LookUpSwitchInstruction: int[] jumpOffsets>;

        $i1 = $r8[$i2];

        $i1 = $i0 + $i1;

        interfaceinvoke $r7.<proguard.evaluation.BranchUnit: void branchConditionally(proguard.classfile.Clazz,proguard.classfile.attribute.CodeAttribute,int,int,int)>($r1, $r3, $i0, $i1, $i3);

        if $i3 != 1 goto label2;

        return;

     label2:
        $i2 = $i2 + 1;

        goto label1;

     label3:
        return;
    }

    public void visitSimpleInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.SimpleInstruction)
    {
        proguard.evaluation.value.ValueFactory $r8;
        proguard.evaluation.Stack $r7, $r15;
        proguard.evaluation.value.IntegerValue $r10, $r16;
        byte $b1;
        proguard.classfile.Clazz $r1;
        java.lang.ArithmeticException $r20, $r21, $r22, $r23;
        proguard.evaluation.BranchUnit $r25;
        proguard.evaluation.value.ReferenceValue $r9;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.evaluation.value.LongValue $r11, $r17;
        proguard.classfile.Method $r2;
        float $f0;
        long $l2;
        java.lang.StringBuffer $r5, $r26;
        int $i0;
        proguard.evaluation.value.DoubleValue $r13, $r19;
        java.lang.String $r6;
        proguard.evaluation.value.FloatValue $r12, $r18;
        proguard.evaluation.value.Value $r14;
        double $d0;
        char $c3;
        proguard.classfile.instruction.SimpleInstruction $r4;
        java.lang.IllegalArgumentException $r27;
        proguard.evaluation.Processor r0;
        proguard.evaluation.InvocationUnit $r24;

        r0 := @this: proguard.evaluation.Processor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.SimpleInstruction;

        $b1 = $r4.<proguard.classfile.instruction.SimpleInstruction: byte opcode>;

        $i0 = (int) $b1;

        lookupswitch($i0)
        {
            case -128: goto label079;
            case -127: goto label080;
            case -126: goto label081;
            case -125: goto label082;
            case -124: goto label001;
            case -123: goto label083;
            case -122: goto label084;
            case -121: goto label085;
            case -120: goto label086;
            case -119: goto label087;
            case -118: goto label088;
            case -117: goto label089;
            case -116: goto label090;
            case -115: goto label091;
            case -114: goto label092;
            case -113: goto label093;
            case -112: goto label094;
            case -111: goto label095;
            case -110: goto label096;
            case -109: goto label097;
            case -108: goto label098;
            case -107: goto label099;
            case -106: goto label100;
            case -105: goto label101;
            case -104: goto label102;
            case -103: goto label001;
            case -102: goto label001;
            case -101: goto label001;
            case -100: goto label001;
            case -99: goto label001;
            case -98: goto label001;
            case -97: goto label001;
            case -96: goto label001;
            case -95: goto label001;
            case -94: goto label001;
            case -93: goto label001;
            case -92: goto label001;
            case -91: goto label001;
            case -90: goto label001;
            case -89: goto label001;
            case -88: goto label001;
            case -87: goto label001;
            case -86: goto label001;
            case -85: goto label001;
            case -84: goto label103;
            case -83: goto label104;
            case -82: goto label105;
            case -81: goto label106;
            case -80: goto label107;
            case -79: goto label108;
            case -78: goto label001;
            case -77: goto label001;
            case -76: goto label001;
            case -75: goto label001;
            case -74: goto label001;
            case -73: goto label001;
            case -72: goto label001;
            case -71: goto label001;
            case -70: goto label001;
            case -69: goto label001;
            case -68: goto label109;
            case -67: goto label001;
            case -66: goto label110;
            case -65: goto label111;
            case -64: goto label001;
            case -63: goto label001;
            case -62: goto label112;
            case -61: goto label112;
            case -60: goto label001;
            case -59: goto label001;
            case -58: goto label001;
            case -57: goto label001;
            case -56: goto label001;
            case -55: goto label001;
            case -54: goto label001;
            case -53: goto label001;
            case -52: goto label001;
            case -51: goto label001;
            case -50: goto label001;
            case -49: goto label001;
            case -48: goto label001;
            case -47: goto label001;
            case -46: goto label001;
            case -45: goto label001;
            case -44: goto label001;
            case -43: goto label001;
            case -42: goto label001;
            case -41: goto label001;
            case -40: goto label001;
            case -39: goto label001;
            case -38: goto label001;
            case -37: goto label001;
            case -36: goto label001;
            case -35: goto label001;
            case -34: goto label001;
            case -33: goto label001;
            case -32: goto label001;
            case -31: goto label001;
            case -30: goto label001;
            case -29: goto label001;
            case -28: goto label001;
            case -27: goto label001;
            case -26: goto label001;
            case -25: goto label001;
            case -24: goto label001;
            case -23: goto label001;
            case -22: goto label001;
            case -21: goto label001;
            case -20: goto label001;
            case -19: goto label001;
            case -18: goto label001;
            case -17: goto label001;
            case -16: goto label001;
            case -15: goto label001;
            case -14: goto label001;
            case -13: goto label001;
            case -12: goto label001;
            case -11: goto label001;
            case -10: goto label001;
            case -9: goto label001;
            case -8: goto label001;
            case -7: goto label001;
            case -6: goto label001;
            case -5: goto label001;
            case -4: goto label001;
            case -3: goto label001;
            case -2: goto label001;
            case -1: goto label001;
            case 0: goto label003;
            case 1: goto label002;
            case 2: goto label004;
            case 3: goto label004;
            case 4: goto label004;
            case 5: goto label004;
            case 6: goto label004;
            case 7: goto label004;
            case 8: goto label004;
            case 9: goto label005;
            case 10: goto label005;
            case 11: goto label006;
            case 12: goto label006;
            case 13: goto label006;
            case 14: goto label007;
            case 15: goto label007;
            case 16: goto label004;
            case 17: goto label004;
            case 18: goto label001;
            case 19: goto label001;
            case 20: goto label001;
            case 21: goto label001;
            case 22: goto label001;
            case 23: goto label001;
            case 24: goto label001;
            case 25: goto label001;
            case 26: goto label001;
            case 27: goto label001;
            case 28: goto label001;
            case 29: goto label001;
            case 30: goto label001;
            case 31: goto label001;
            case 32: goto label001;
            case 33: goto label001;
            case 34: goto label001;
            case 35: goto label001;
            case 36: goto label001;
            case 37: goto label001;
            case 38: goto label001;
            case 39: goto label001;
            case 40: goto label001;
            case 41: goto label001;
            case 42: goto label001;
            case 43: goto label001;
            case 44: goto label001;
            case 45: goto label001;
            case 46: goto label008;
            case 47: goto label009;
            case 48: goto label010;
            case 49: goto label011;
            case 50: goto label012;
            case 51: goto label008;
            case 52: goto label008;
            case 53: goto label008;
            case 54: goto label001;
            case 55: goto label001;
            case 56: goto label001;
            case 57: goto label001;
            case 58: goto label001;
            case 59: goto label001;
            case 60: goto label001;
            case 61: goto label001;
            case 62: goto label001;
            case 63: goto label001;
            case 64: goto label001;
            case 65: goto label001;
            case 66: goto label001;
            case 67: goto label001;
            case 68: goto label001;
            case 69: goto label001;
            case 70: goto label001;
            case 71: goto label001;
            case 72: goto label001;
            case 73: goto label001;
            case 74: goto label001;
            case 75: goto label001;
            case 76: goto label001;
            case 77: goto label001;
            case 78: goto label001;
            case 79: goto label013;
            case 80: goto label014;
            case 81: goto label015;
            case 82: goto label016;
            case 83: goto label017;
            case 84: goto label013;
            case 85: goto label013;
            case 86: goto label013;
            case 87: goto label018;
            case 88: goto label019;
            case 89: goto label020;
            case 90: goto label021;
            case 91: goto label022;
            case 92: goto label023;
            case 93: goto label024;
            case 94: goto label025;
            case 95: goto label026;
            case 96: goto label027;
            case 97: goto label028;
            case 98: goto label029;
            case 99: goto label030;
            case 100: goto label031;
            case 101: goto label032;
            case 102: goto label033;
            case 103: goto label034;
            case 104: goto label035;
            case 105: goto label036;
            case 106: goto label037;
            case 107: goto label038;
            case 108: goto label039;
            case 109: goto label045;
            case 110: goto label051;
            case 111: goto label052;
            case 112: goto label053;
            case 113: goto label059;
            case 114: goto label065;
            case 115: goto label066;
            case 116: goto label067;
            case 117: goto label068;
            case 118: goto label069;
            case 119: goto label070;
            case 120: goto label071;
            case 121: goto label072;
            case 122: goto label073;
            case 123: goto label074;
            case 124: goto label075;
            case 125: goto label076;
            case 126: goto label077;
            case 127: goto label078;
            default: goto label001;
        };

     label001:
        $r27 = new java.lang.IllegalArgumentException;

        $r26 = new java.lang.StringBuffer;

        specialinvoke $r26.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unknown simple instruction [");

        $b1 = $r4.<proguard.classfile.instruction.SimpleInstruction: byte opcode>;

        $i0 = (int) $b1;

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r27.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r27;

     label002:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r8 = r0.<proguard.evaluation.Processor: proguard.evaluation.value.ValueFactory valueFactory>;

        $r9 = virtualinvoke $r8.<proguard.evaluation.value.ValueFactory: proguard.evaluation.value.ReferenceValue createReferenceValueNull()>();

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r9);

     label003:
        return;

     label004:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r8 = r0.<proguard.evaluation.Processor: proguard.evaluation.value.ValueFactory valueFactory>;

        $i0 = $r4.<proguard.classfile.instruction.SimpleInstruction: int constant>;

        $r10 = virtualinvoke $r8.<proguard.evaluation.value.ValueFactory: proguard.evaluation.value.IntegerValue createIntegerValue(int)>($i0);

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r10);

        return;

     label005:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r8 = r0.<proguard.evaluation.Processor: proguard.evaluation.value.ValueFactory valueFactory>;

        $i0 = $r4.<proguard.classfile.instruction.SimpleInstruction: int constant>;

        $l2 = (long) $i0;

        $r11 = virtualinvoke $r8.<proguard.evaluation.value.ValueFactory: proguard.evaluation.value.LongValue createLongValue(long)>($l2);

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r11);

        return;

     label006:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r8 = r0.<proguard.evaluation.Processor: proguard.evaluation.value.ValueFactory valueFactory>;

        $i0 = $r4.<proguard.classfile.instruction.SimpleInstruction: int constant>;

        $f0 = (float) $i0;

        $r12 = virtualinvoke $r8.<proguard.evaluation.value.ValueFactory: proguard.evaluation.value.FloatValue createFloatValue(float)>($f0);

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r12);

        return;

     label007:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r8 = r0.<proguard.evaluation.Processor: proguard.evaluation.value.ValueFactory valueFactory>;

        $i0 = $r4.<proguard.classfile.instruction.SimpleInstruction: int constant>;

        $d0 = (double) $i0;

        $r13 = virtualinvoke $r8.<proguard.evaluation.value.ValueFactory: proguard.evaluation.value.DoubleValue createDoubleValue(double)>($d0);

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r13);

        return;

     label008:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        virtualinvoke $r7.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        virtualinvoke $r7.<proguard.evaluation.Stack: proguard.evaluation.value.ReferenceValue apop()>();

        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r8 = r0.<proguard.evaluation.Processor: proguard.evaluation.value.ValueFactory valueFactory>;

        $r10 = virtualinvoke $r8.<proguard.evaluation.value.ValueFactory: proguard.evaluation.value.IntegerValue createIntegerValue()>();

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r10);

        return;

     label009:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        virtualinvoke $r7.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        virtualinvoke $r7.<proguard.evaluation.Stack: proguard.evaluation.value.ReferenceValue apop()>();

        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r8 = r0.<proguard.evaluation.Processor: proguard.evaluation.value.ValueFactory valueFactory>;

        $r11 = virtualinvoke $r8.<proguard.evaluation.value.ValueFactory: proguard.evaluation.value.LongValue createLongValue()>();

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r11);

        return;

     label010:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        virtualinvoke $r7.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        virtualinvoke $r7.<proguard.evaluation.Stack: proguard.evaluation.value.ReferenceValue apop()>();

        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r8 = r0.<proguard.evaluation.Processor: proguard.evaluation.value.ValueFactory valueFactory>;

        $r12 = virtualinvoke $r8.<proguard.evaluation.value.ValueFactory: proguard.evaluation.value.FloatValue createFloatValue()>();

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r12);

        return;

     label011:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        virtualinvoke $r7.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        virtualinvoke $r7.<proguard.evaluation.Stack: proguard.evaluation.value.ReferenceValue apop()>();

        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r8 = r0.<proguard.evaluation.Processor: proguard.evaluation.value.ValueFactory valueFactory>;

        $r13 = virtualinvoke $r8.<proguard.evaluation.value.ValueFactory: proguard.evaluation.value.DoubleValue createDoubleValue()>();

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r13);

        return;

     label012:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r10 = virtualinvoke $r7.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r9 = virtualinvoke $r7.<proguard.evaluation.Stack: proguard.evaluation.value.ReferenceValue apop()>();

        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r8 = r0.<proguard.evaluation.Processor: proguard.evaluation.value.ValueFactory valueFactory>;

        $r14 = virtualinvoke $r9.<proguard.evaluation.value.ReferenceValue: proguard.evaluation.value.Value arrayLoad(proguard.evaluation.value.IntegerValue,proguard.evaluation.value.ValueFactory)>($r10, $r8);

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r14);

        return;

     label013:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        virtualinvoke $r7.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        virtualinvoke $r7.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        virtualinvoke $r7.<proguard.evaluation.Stack: proguard.evaluation.value.ReferenceValue apop()>();

        return;

     label014:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        virtualinvoke $r7.<proguard.evaluation.Stack: proguard.evaluation.value.LongValue lpop()>();

        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        virtualinvoke $r7.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        virtualinvoke $r7.<proguard.evaluation.Stack: proguard.evaluation.value.ReferenceValue apop()>();

        return;

     label015:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        virtualinvoke $r7.<proguard.evaluation.Stack: proguard.evaluation.value.FloatValue fpop()>();

        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        virtualinvoke $r7.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        virtualinvoke $r7.<proguard.evaluation.Stack: proguard.evaluation.value.ReferenceValue apop()>();

        return;

     label016:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        virtualinvoke $r7.<proguard.evaluation.Stack: proguard.evaluation.value.DoubleValue dpop()>();

        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        virtualinvoke $r7.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        virtualinvoke $r7.<proguard.evaluation.Stack: proguard.evaluation.value.ReferenceValue apop()>();

        return;

     label017:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        virtualinvoke $r7.<proguard.evaluation.Stack: proguard.evaluation.value.ReferenceValue apop()>();

        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        virtualinvoke $r7.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        virtualinvoke $r7.<proguard.evaluation.Stack: proguard.evaluation.value.ReferenceValue apop()>();

        return;

     label018:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        virtualinvoke $r7.<proguard.evaluation.Stack: void pop1()>();

        return;

     label019:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        virtualinvoke $r7.<proguard.evaluation.Stack: void pop2()>();

        return;

     label020:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        virtualinvoke $r7.<proguard.evaluation.Stack: void dup()>();

        return;

     label021:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        virtualinvoke $r7.<proguard.evaluation.Stack: void dup_x1()>();

        return;

     label022:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        virtualinvoke $r7.<proguard.evaluation.Stack: void dup_x2()>();

        return;

     label023:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        virtualinvoke $r7.<proguard.evaluation.Stack: void dup2()>();

        return;

     label024:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        virtualinvoke $r7.<proguard.evaluation.Stack: void dup2_x1()>();

        return;

     label025:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        virtualinvoke $r7.<proguard.evaluation.Stack: void dup2_x2()>();

        return;

     label026:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        virtualinvoke $r7.<proguard.evaluation.Stack: void swap()>();

        return;

     label027:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r10 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r16 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $r10 = virtualinvoke $r10.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue add(proguard.evaluation.value.IntegerValue)>($r16);

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r10);

        return;

     label028:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r11 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.LongValue lpop()>();

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r17 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.LongValue lpop()>();

        $r11 = virtualinvoke $r11.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue add(proguard.evaluation.value.LongValue)>($r17);

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r11);

        return;

     label029:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r12 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.FloatValue fpop()>();

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r18 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.FloatValue fpop()>();

        $r12 = virtualinvoke $r12.<proguard.evaluation.value.FloatValue: proguard.evaluation.value.FloatValue add(proguard.evaluation.value.FloatValue)>($r18);

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r12);

        return;

     label030:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r13 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.DoubleValue dpop()>();

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r19 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.DoubleValue dpop()>();

        $r13 = virtualinvoke $r13.<proguard.evaluation.value.DoubleValue: proguard.evaluation.value.DoubleValue add(proguard.evaluation.value.DoubleValue)>($r19);

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r13);

        return;

     label031:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r10 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r16 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $r10 = virtualinvoke $r10.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue subtractFrom(proguard.evaluation.value.IntegerValue)>($r16);

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r10);

        return;

     label032:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r11 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.LongValue lpop()>();

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r17 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.LongValue lpop()>();

        $r11 = virtualinvoke $r11.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue subtractFrom(proguard.evaluation.value.LongValue)>($r17);

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r11);

        return;

     label033:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r12 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.FloatValue fpop()>();

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r18 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.FloatValue fpop()>();

        $r12 = virtualinvoke $r12.<proguard.evaluation.value.FloatValue: proguard.evaluation.value.FloatValue subtractFrom(proguard.evaluation.value.FloatValue)>($r18);

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r12);

        return;

     label034:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r13 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.DoubleValue dpop()>();

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r19 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.DoubleValue dpop()>();

        $r13 = virtualinvoke $r13.<proguard.evaluation.value.DoubleValue: proguard.evaluation.value.DoubleValue subtractFrom(proguard.evaluation.value.DoubleValue)>($r19);

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r13);

        return;

     label035:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r10 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r16 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $r10 = virtualinvoke $r10.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue multiply(proguard.evaluation.value.IntegerValue)>($r16);

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r10);

        return;

     label036:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r11 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.LongValue lpop()>();

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r17 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.LongValue lpop()>();

        $r11 = virtualinvoke $r11.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue multiply(proguard.evaluation.value.LongValue)>($r17);

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r11);

        return;

     label037:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r12 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.FloatValue fpop()>();

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r18 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.FloatValue fpop()>();

        $r12 = virtualinvoke $r12.<proguard.evaluation.value.FloatValue: proguard.evaluation.value.FloatValue multiply(proguard.evaluation.value.FloatValue)>($r18);

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r12);

        return;

     label038:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r13 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.DoubleValue dpop()>();

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r19 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.DoubleValue dpop()>();

        $r13 = virtualinvoke $r13.<proguard.evaluation.value.DoubleValue: proguard.evaluation.value.DoubleValue multiply(proguard.evaluation.value.DoubleValue)>($r19);

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r13);

        return;

     label039:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

     label040:
        $r10 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

     label041:
        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

     label042:
        $r16 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $r10 = virtualinvoke $r10.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue divideOf(proguard.evaluation.value.IntegerValue)>($r16);

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r10);

     label043:
        return;

     label044:
        $r20 := @caughtexception;

        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r8 = r0.<proguard.evaluation.Processor: proguard.evaluation.value.ValueFactory valueFactory>;

        $r10 = virtualinvoke $r8.<proguard.evaluation.value.ValueFactory: proguard.evaluation.value.IntegerValue createIntegerValue()>();

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r10);

        return;

     label045:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

     label046:
        $r11 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.LongValue lpop()>();

     label047:
        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

     label048:
        $r17 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.LongValue lpop()>();

        $r11 = virtualinvoke $r11.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue divideOf(proguard.evaluation.value.LongValue)>($r17);

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r11);

     label049:
        return;

     label050:
        $r21 := @caughtexception;

        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r8 = r0.<proguard.evaluation.Processor: proguard.evaluation.value.ValueFactory valueFactory>;

        $r11 = virtualinvoke $r8.<proguard.evaluation.value.ValueFactory: proguard.evaluation.value.LongValue createLongValue()>();

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r11);

        return;

     label051:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r12 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.FloatValue fpop()>();

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r18 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.FloatValue fpop()>();

        $r12 = virtualinvoke $r12.<proguard.evaluation.value.FloatValue: proguard.evaluation.value.FloatValue divideOf(proguard.evaluation.value.FloatValue)>($r18);

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r12);

        return;

     label052:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r13 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.DoubleValue dpop()>();

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r19 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.DoubleValue dpop()>();

        $r13 = virtualinvoke $r13.<proguard.evaluation.value.DoubleValue: proguard.evaluation.value.DoubleValue divideOf(proguard.evaluation.value.DoubleValue)>($r19);

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r13);

        return;

     label053:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

     label054:
        $r10 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

     label055:
        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

     label056:
        $r16 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $r10 = virtualinvoke $r10.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue remainderOf(proguard.evaluation.value.IntegerValue)>($r16);

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r10);

     label057:
        return;

     label058:
        $r22 := @caughtexception;

        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r8 = r0.<proguard.evaluation.Processor: proguard.evaluation.value.ValueFactory valueFactory>;

        $r10 = virtualinvoke $r8.<proguard.evaluation.value.ValueFactory: proguard.evaluation.value.IntegerValue createIntegerValue()>();

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r10);

        return;

     label059:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

     label060:
        $r11 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.LongValue lpop()>();

     label061:
        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

     label062:
        $r17 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.LongValue lpop()>();

        $r11 = virtualinvoke $r11.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue remainderOf(proguard.evaluation.value.LongValue)>($r17);

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r11);

     label063:
        return;

     label064:
        $r23 := @caughtexception;

        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r8 = r0.<proguard.evaluation.Processor: proguard.evaluation.value.ValueFactory valueFactory>;

        $r11 = virtualinvoke $r8.<proguard.evaluation.value.ValueFactory: proguard.evaluation.value.LongValue createLongValue()>();

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r11);

        return;

     label065:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r12 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.FloatValue fpop()>();

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r18 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.FloatValue fpop()>();

        $r12 = virtualinvoke $r12.<proguard.evaluation.value.FloatValue: proguard.evaluation.value.FloatValue remainderOf(proguard.evaluation.value.FloatValue)>($r18);

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r12);

        return;

     label066:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r13 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.DoubleValue dpop()>();

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r19 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.DoubleValue dpop()>();

        $r13 = virtualinvoke $r13.<proguard.evaluation.value.DoubleValue: proguard.evaluation.value.DoubleValue remainderOf(proguard.evaluation.value.DoubleValue)>($r19);

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r13);

        return;

     label067:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r10 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $r10 = virtualinvoke $r10.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue negate()>();

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r10);

        return;

     label068:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r11 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.LongValue lpop()>();

        $r11 = virtualinvoke $r11.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue negate()>();

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r11);

        return;

     label069:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r12 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.FloatValue fpop()>();

        $r12 = virtualinvoke $r12.<proguard.evaluation.value.FloatValue: proguard.evaluation.value.FloatValue negate()>();

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r12);

        return;

     label070:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r13 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.DoubleValue dpop()>();

        $r13 = virtualinvoke $r13.<proguard.evaluation.value.DoubleValue: proguard.evaluation.value.DoubleValue negate()>();

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r13);

        return;

     label071:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r10 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r16 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $r10 = virtualinvoke $r10.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue shiftLeftOf(proguard.evaluation.value.IntegerValue)>($r16);

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r10);

        return;

     label072:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r10 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r11 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.LongValue lpop()>();

        $r11 = virtualinvoke $r10.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.LongValue shiftLeftOf(proguard.evaluation.value.LongValue)>($r11);

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r11);

        return;

     label073:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r10 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r16 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $r10 = virtualinvoke $r10.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue shiftRightOf(proguard.evaluation.value.IntegerValue)>($r16);

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r10);

        return;

     label074:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r10 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r11 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.LongValue lpop()>();

        $r11 = virtualinvoke $r10.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.LongValue shiftRightOf(proguard.evaluation.value.LongValue)>($r11);

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r11);

        return;

     label075:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r10 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r16 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $r10 = virtualinvoke $r10.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue unsignedShiftRightOf(proguard.evaluation.value.IntegerValue)>($r16);

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r10);

        return;

     label076:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r10 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r11 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.LongValue lpop()>();

        $r11 = virtualinvoke $r10.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.LongValue unsignedShiftRightOf(proguard.evaluation.value.LongValue)>($r11);

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r11);

        return;

     label077:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r10 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r16 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $r10 = virtualinvoke $r10.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue and(proguard.evaluation.value.IntegerValue)>($r16);

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r10);

        return;

     label078:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r11 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.LongValue lpop()>();

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r17 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.LongValue lpop()>();

        $r11 = virtualinvoke $r11.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue and(proguard.evaluation.value.LongValue)>($r17);

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r11);

        return;

     label079:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r10 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r16 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $r10 = virtualinvoke $r10.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue or(proguard.evaluation.value.IntegerValue)>($r16);

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r10);

        return;

     label080:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r11 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.LongValue lpop()>();

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r17 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.LongValue lpop()>();

        $r11 = virtualinvoke $r11.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue or(proguard.evaluation.value.LongValue)>($r17);

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r11);

        return;

     label081:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r10 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r16 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $r10 = virtualinvoke $r10.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue xor(proguard.evaluation.value.IntegerValue)>($r16);

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r10);

        return;

     label082:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r11 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.LongValue lpop()>();

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r17 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.LongValue lpop()>();

        $r11 = virtualinvoke $r11.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue xor(proguard.evaluation.value.LongValue)>($r17);

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r11);

        return;

     label083:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r10 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $r11 = virtualinvoke $r10.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.LongValue convertToLong()>();

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r11);

        return;

     label084:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r10 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $r12 = virtualinvoke $r10.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.FloatValue convertToFloat()>();

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r12);

        return;

     label085:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r10 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $r13 = virtualinvoke $r10.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.DoubleValue convertToDouble()>();

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r13);

        return;

     label086:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r11 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.LongValue lpop()>();

        $r10 = virtualinvoke $r11.<proguard.evaluation.value.LongValue: proguard.evaluation.value.IntegerValue convertToInteger()>();

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r10);

        return;

     label087:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r11 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.LongValue lpop()>();

        $r12 = virtualinvoke $r11.<proguard.evaluation.value.LongValue: proguard.evaluation.value.FloatValue convertToFloat()>();

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r12);

        return;

     label088:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r11 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.LongValue lpop()>();

        $r13 = virtualinvoke $r11.<proguard.evaluation.value.LongValue: proguard.evaluation.value.DoubleValue convertToDouble()>();

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r13);

        return;

     label089:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r12 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.FloatValue fpop()>();

        $r10 = virtualinvoke $r12.<proguard.evaluation.value.FloatValue: proguard.evaluation.value.IntegerValue convertToInteger()>();

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r10);

        return;

     label090:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r12 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.FloatValue fpop()>();

        $r11 = virtualinvoke $r12.<proguard.evaluation.value.FloatValue: proguard.evaluation.value.LongValue convertToLong()>();

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r11);

        return;

     label091:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r12 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.FloatValue fpop()>();

        $r13 = virtualinvoke $r12.<proguard.evaluation.value.FloatValue: proguard.evaluation.value.DoubleValue convertToDouble()>();

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r13);

        return;

     label092:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r13 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.DoubleValue dpop()>();

        $r10 = virtualinvoke $r13.<proguard.evaluation.value.DoubleValue: proguard.evaluation.value.IntegerValue convertToInteger()>();

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r10);

        return;

     label093:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r13 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.DoubleValue dpop()>();

        $r11 = virtualinvoke $r13.<proguard.evaluation.value.DoubleValue: proguard.evaluation.value.LongValue convertToLong()>();

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r11);

        return;

     label094:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r13 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.DoubleValue dpop()>();

        $r12 = virtualinvoke $r13.<proguard.evaluation.value.DoubleValue: proguard.evaluation.value.FloatValue convertToFloat()>();

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r12);

        return;

     label095:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r10 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $r10 = virtualinvoke $r10.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue convertToByte()>();

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r10);

        return;

     label096:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r10 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $r10 = virtualinvoke $r10.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue convertToCharacter()>();

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r10);

        return;

     label097:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r10 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $r10 = virtualinvoke $r10.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue convertToShort()>();

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r10);

        return;

     label098:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r11 = virtualinvoke $r7.<proguard.evaluation.Stack: proguard.evaluation.value.LongValue lpop()>();

        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r17 = virtualinvoke $r7.<proguard.evaluation.Stack: proguard.evaluation.value.LongValue lpop()>();

        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r10 = virtualinvoke $r17.<proguard.evaluation.value.LongValue: proguard.evaluation.value.IntegerValue compare(proguard.evaluation.value.LongValue)>($r11);

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r10);

        return;

     label099:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r12 = virtualinvoke $r7.<proguard.evaluation.Stack: proguard.evaluation.value.FloatValue fpop()>();

        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r18 = virtualinvoke $r7.<proguard.evaluation.Stack: proguard.evaluation.value.FloatValue fpop()>();

        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r10 = virtualinvoke $r18.<proguard.evaluation.value.FloatValue: proguard.evaluation.value.IntegerValue compare(proguard.evaluation.value.FloatValue)>($r12);

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r10);

        return;

     label100:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r12 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.FloatValue fpop()>();

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r18 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.FloatValue fpop()>();

        $r10 = virtualinvoke $r12.<proguard.evaluation.value.FloatValue: proguard.evaluation.value.IntegerValue compareReverse(proguard.evaluation.value.FloatValue)>($r18);

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r10);

        return;

     label101:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r13 = virtualinvoke $r7.<proguard.evaluation.Stack: proguard.evaluation.value.DoubleValue dpop()>();

        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r19 = virtualinvoke $r7.<proguard.evaluation.Stack: proguard.evaluation.value.DoubleValue dpop()>();

        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r10 = virtualinvoke $r19.<proguard.evaluation.value.DoubleValue: proguard.evaluation.value.IntegerValue compare(proguard.evaluation.value.DoubleValue)>($r13);

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r10);

        return;

     label102:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r13 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.DoubleValue dpop()>();

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r19 = virtualinvoke $r15.<proguard.evaluation.Stack: proguard.evaluation.value.DoubleValue dpop()>();

        $r10 = virtualinvoke $r13.<proguard.evaluation.value.DoubleValue: proguard.evaluation.value.IntegerValue compareReverse(proguard.evaluation.value.DoubleValue)>($r19);

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r10);

        return;

     label103:
        $r24 = r0.<proguard.evaluation.Processor: proguard.evaluation.InvocationUnit invocationUnit>;

        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r10 = virtualinvoke $r7.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        interfaceinvoke $r24.<proguard.evaluation.InvocationUnit: void exitMethod(proguard.classfile.Clazz,proguard.classfile.Method,proguard.evaluation.value.Value)>($r1, $r2, $r10);

        $r25 = r0.<proguard.evaluation.Processor: proguard.evaluation.BranchUnit branchUnit>;

        interfaceinvoke $r25.<proguard.evaluation.BranchUnit: void returnFromMethod()>();

        return;

     label104:
        $r24 = r0.<proguard.evaluation.Processor: proguard.evaluation.InvocationUnit invocationUnit>;

        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r11 = virtualinvoke $r7.<proguard.evaluation.Stack: proguard.evaluation.value.LongValue lpop()>();

        interfaceinvoke $r24.<proguard.evaluation.InvocationUnit: void exitMethod(proguard.classfile.Clazz,proguard.classfile.Method,proguard.evaluation.value.Value)>($r1, $r2, $r11);

        $r25 = r0.<proguard.evaluation.Processor: proguard.evaluation.BranchUnit branchUnit>;

        interfaceinvoke $r25.<proguard.evaluation.BranchUnit: void returnFromMethod()>();

        return;

     label105:
        $r24 = r0.<proguard.evaluation.Processor: proguard.evaluation.InvocationUnit invocationUnit>;

        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r12 = virtualinvoke $r7.<proguard.evaluation.Stack: proguard.evaluation.value.FloatValue fpop()>();

        interfaceinvoke $r24.<proguard.evaluation.InvocationUnit: void exitMethod(proguard.classfile.Clazz,proguard.classfile.Method,proguard.evaluation.value.Value)>($r1, $r2, $r12);

        $r25 = r0.<proguard.evaluation.Processor: proguard.evaluation.BranchUnit branchUnit>;

        interfaceinvoke $r25.<proguard.evaluation.BranchUnit: void returnFromMethod()>();

        return;

     label106:
        $r24 = r0.<proguard.evaluation.Processor: proguard.evaluation.InvocationUnit invocationUnit>;

        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r13 = virtualinvoke $r7.<proguard.evaluation.Stack: proguard.evaluation.value.DoubleValue dpop()>();

        interfaceinvoke $r24.<proguard.evaluation.InvocationUnit: void exitMethod(proguard.classfile.Clazz,proguard.classfile.Method,proguard.evaluation.value.Value)>($r1, $r2, $r13);

        $r25 = r0.<proguard.evaluation.Processor: proguard.evaluation.BranchUnit branchUnit>;

        interfaceinvoke $r25.<proguard.evaluation.BranchUnit: void returnFromMethod()>();

        return;

     label107:
        $r24 = r0.<proguard.evaluation.Processor: proguard.evaluation.InvocationUnit invocationUnit>;

        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r9 = virtualinvoke $r7.<proguard.evaluation.Stack: proguard.evaluation.value.ReferenceValue apop()>();

        interfaceinvoke $r24.<proguard.evaluation.InvocationUnit: void exitMethod(proguard.classfile.Clazz,proguard.classfile.Method,proguard.evaluation.value.Value)>($r1, $r2, $r9);

        $r25 = r0.<proguard.evaluation.Processor: proguard.evaluation.BranchUnit branchUnit>;

        interfaceinvoke $r25.<proguard.evaluation.BranchUnit: void returnFromMethod()>();

        return;

     label108:
        $r25 = r0.<proguard.evaluation.Processor: proguard.evaluation.BranchUnit branchUnit>;

        interfaceinvoke $r25.<proguard.evaluation.BranchUnit: void returnFromMethod()>();

        return;

     label109:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r10 = virtualinvoke $r7.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r8 = r0.<proguard.evaluation.Processor: proguard.evaluation.value.ValueFactory valueFactory>;

        $i0 = $r4.<proguard.classfile.instruction.SimpleInstruction: int constant>;

        $b1 = (byte) $i0;

        $c3 = staticinvoke <proguard.classfile.instruction.InstructionUtil: char internalTypeFromArrayType(byte)>($b1);

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($c3);

        $r9 = virtualinvoke $r8.<proguard.evaluation.value.ValueFactory: proguard.evaluation.value.ReferenceValue createArrayReferenceValue(java.lang.String,proguard.classfile.Clazz,proguard.evaluation.value.IntegerValue)>($r6, null, $r10);

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r9);

        return;

     label110:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        virtualinvoke $r7.<proguard.evaluation.Stack: proguard.evaluation.value.ReferenceValue apop()>();

        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r8 = r0.<proguard.evaluation.Processor: proguard.evaluation.value.ValueFactory valueFactory>;

        $r10 = virtualinvoke $r8.<proguard.evaluation.value.ValueFactory: proguard.evaluation.value.IntegerValue createIntegerValue()>();

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r10);

        return;

     label111:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r9 = virtualinvoke $r7.<proguard.evaluation.Stack: proguard.evaluation.value.ReferenceValue apop()>();

        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        virtualinvoke $r7.<proguard.evaluation.Stack: void clear()>();

        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r9);

        $r25 = r0.<proguard.evaluation.Processor: proguard.evaluation.BranchUnit branchUnit>;

        interfaceinvoke $r25.<proguard.evaluation.BranchUnit: void throwException()>();

        return;

     label112:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        virtualinvoke $r7.<proguard.evaluation.Stack: proguard.evaluation.value.ReferenceValue apop()>();

        return;

        catch java.lang.ArithmeticException from label040 to label041 with label044;
        catch java.lang.ArithmeticException from label042 to label043 with label044;
        catch java.lang.ArithmeticException from label046 to label047 with label050;
        catch java.lang.ArithmeticException from label048 to label049 with label050;
        catch java.lang.ArithmeticException from label054 to label055 with label058;
        catch java.lang.ArithmeticException from label056 to label057 with label058;
        catch java.lang.ArithmeticException from label060 to label061 with label064;
        catch java.lang.ArithmeticException from label062 to label063 with label064;
    }

    public void visitTableSwitchInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.TableSwitchInstruction)
    {
        proguard.evaluation.BranchUnit $r7;
        proguard.evaluation.value.ValueFactory $r9;
        proguard.evaluation.Stack $r5;
        proguard.evaluation.Processor r0;
        proguard.evaluation.value.IntegerValue $r6, $r10;
        proguard.classfile.instruction.TableSwitchInstruction $r4;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int[] $r8;
        int $i0, $i1, $i2, $i3;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.evaluation.Processor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.TableSwitchInstruction;

        $r5 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r6 = virtualinvoke $r5.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.BranchUnit branchUnit>;

        $i2 = $r4.<proguard.classfile.instruction.TableSwitchInstruction: int defaultOffset>;

        $i2 = $i2 + $i0;

        interfaceinvoke $r7.<proguard.evaluation.BranchUnit: void branch(proguard.classfile.Clazz,proguard.classfile.attribute.CodeAttribute,int,int)>($r1, $r3, $i0, $i2);

        $i2 = 0;

     label1:
        $r8 = $r4.<proguard.classfile.instruction.TableSwitchInstruction: int[] jumpOffsets>;

        $i3 = lengthof $r8;

        if $i2 >= $i3 goto label3;

        $r9 = r0.<proguard.evaluation.Processor: proguard.evaluation.value.ValueFactory valueFactory>;

        $i3 = $r4.<proguard.classfile.instruction.TableSwitchInstruction: int lowCase>;

        $i3 = $i3 + $i2;

        $r10 = virtualinvoke $r9.<proguard.evaluation.value.ValueFactory: proguard.evaluation.value.IntegerValue createIntegerValue(int)>($i3);

        $i3 = virtualinvoke $r6.<proguard.evaluation.value.IntegerValue: int equal(proguard.evaluation.value.IntegerValue)>($r10);

        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.BranchUnit branchUnit>;

        $r8 = $r4.<proguard.classfile.instruction.TableSwitchInstruction: int[] jumpOffsets>;

        $i1 = $r8[$i2];

        $i1 = $i0 + $i1;

        interfaceinvoke $r7.<proguard.evaluation.BranchUnit: void branchConditionally(proguard.classfile.Clazz,proguard.classfile.attribute.CodeAttribute,int,int,int)>($r1, $r3, $i0, $i1, $i3);

        if $i3 != 1 goto label2;

        return;

     label2:
        $i2 = $i2 + 1;

        goto label1;

     label3:
        return;
    }

    public void visitVariableInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.VariableInstruction)
    {
        proguard.evaluation.Variables $r8, $r15;
        proguard.evaluation.value.ValueFactory $r16;
        proguard.evaluation.Stack $r7;
        proguard.evaluation.value.IntegerValue $r9, $r17;
        byte $b2;
        proguard.classfile.Clazz $r1;
        java.lang.StringBuffer $r5, $r20;
        proguard.evaluation.value.InstructionOffsetValue $r18;
        int $i0, $i1, $i3;
        proguard.evaluation.value.DoubleValue $r12;
        java.lang.String $r6;
        proguard.evaluation.value.FloatValue $r11;
        proguard.evaluation.value.Value $r14;
        proguard.evaluation.BranchUnit $r19;
        proguard.classfile.instruction.VariableInstruction $r4;
        java.lang.IllegalArgumentException $r21;
        proguard.evaluation.Processor r0;
        proguard.evaluation.value.ReferenceValue $r13;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.evaluation.value.LongValue $r10;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.evaluation.Processor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.VariableInstruction;

        $i1 = $r4.<proguard.classfile.instruction.VariableInstruction: int variableIndex>;

        $b2 = $r4.<proguard.classfile.instruction.VariableInstruction: byte opcode>;

        $i3 = (int) $b2;

        lookupswitch($i3)
        {
            case -124: goto label12;
            case -87: goto label13;
            case 21: goto label02;
            case 22: goto label03;
            case 23: goto label04;
            case 24: goto label05;
            case 25: goto label06;
            case 26: goto label02;
            case 27: goto label02;
            case 28: goto label02;
            case 29: goto label02;
            case 30: goto label03;
            case 31: goto label03;
            case 32: goto label03;
            case 33: goto label03;
            case 34: goto label04;
            case 35: goto label04;
            case 36: goto label04;
            case 37: goto label04;
            case 38: goto label05;
            case 39: goto label05;
            case 40: goto label05;
            case 41: goto label05;
            case 42: goto label06;
            case 43: goto label06;
            case 44: goto label06;
            case 45: goto label06;
            case 54: goto label07;
            case 55: goto label08;
            case 56: goto label09;
            case 57: goto label10;
            case 58: goto label11;
            case 59: goto label07;
            case 60: goto label07;
            case 61: goto label07;
            case 62: goto label07;
            case 63: goto label08;
            case 64: goto label08;
            case 65: goto label08;
            case 66: goto label08;
            case 67: goto label09;
            case 68: goto label09;
            case 69: goto label09;
            case 70: goto label09;
            case 71: goto label10;
            case 72: goto label10;
            case 73: goto label10;
            case 74: goto label10;
            case 75: goto label11;
            case 76: goto label11;
            case 77: goto label11;
            case 78: goto label11;
            default: goto label01;
        };

     label01:
        $r21 = new java.lang.IllegalArgumentException;

        $r20 = new java.lang.StringBuffer;

        specialinvoke $r20.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unknown variable instruction [");

        $b2 = $r4.<proguard.classfile.instruction.VariableInstruction: byte opcode>;

        $i0 = (int) $b2;

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r21;

     label02:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r8 = r0.<proguard.evaluation.Processor: proguard.evaluation.Variables variables>;

        $r9 = virtualinvoke $r8.<proguard.evaluation.Variables: proguard.evaluation.value.IntegerValue iload(int)>($i1);

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r9);

        return;

     label03:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r8 = r0.<proguard.evaluation.Processor: proguard.evaluation.Variables variables>;

        $r10 = virtualinvoke $r8.<proguard.evaluation.Variables: proguard.evaluation.value.LongValue lload(int)>($i1);

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r10);

        return;

     label04:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r8 = r0.<proguard.evaluation.Processor: proguard.evaluation.Variables variables>;

        $r11 = virtualinvoke $r8.<proguard.evaluation.Variables: proguard.evaluation.value.FloatValue fload(int)>($i1);

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r11);

        return;

     label05:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r8 = r0.<proguard.evaluation.Processor: proguard.evaluation.Variables variables>;

        $r12 = virtualinvoke $r8.<proguard.evaluation.Variables: proguard.evaluation.value.DoubleValue dload(int)>($i1);

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r12);

        return;

     label06:
        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r8 = r0.<proguard.evaluation.Processor: proguard.evaluation.Variables variables>;

        $r13 = virtualinvoke $r8.<proguard.evaluation.Variables: proguard.evaluation.value.ReferenceValue aload(int)>($i1);

        virtualinvoke $r7.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r13);

        return;

     label07:
        $r8 = r0.<proguard.evaluation.Processor: proguard.evaluation.Variables variables>;

        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r9 = virtualinvoke $r7.<proguard.evaluation.Stack: proguard.evaluation.value.IntegerValue ipop()>();

        virtualinvoke $r8.<proguard.evaluation.Variables: void store(int,proguard.evaluation.value.Value)>($i1, $r9);

        return;

     label08:
        $r8 = r0.<proguard.evaluation.Processor: proguard.evaluation.Variables variables>;

        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r10 = virtualinvoke $r7.<proguard.evaluation.Stack: proguard.evaluation.value.LongValue lpop()>();

        virtualinvoke $r8.<proguard.evaluation.Variables: void store(int,proguard.evaluation.value.Value)>($i1, $r10);

        return;

     label09:
        $r8 = r0.<proguard.evaluation.Processor: proguard.evaluation.Variables variables>;

        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r11 = virtualinvoke $r7.<proguard.evaluation.Stack: proguard.evaluation.value.FloatValue fpop()>();

        virtualinvoke $r8.<proguard.evaluation.Variables: void store(int,proguard.evaluation.value.Value)>($i1, $r11);

        return;

     label10:
        $r8 = r0.<proguard.evaluation.Processor: proguard.evaluation.Variables variables>;

        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r12 = virtualinvoke $r7.<proguard.evaluation.Stack: proguard.evaluation.value.DoubleValue dpop()>();

        virtualinvoke $r8.<proguard.evaluation.Variables: void store(int,proguard.evaluation.value.Value)>($i1, $r12);

        return;

     label11:
        $r8 = r0.<proguard.evaluation.Processor: proguard.evaluation.Variables variables>;

        $r7 = r0.<proguard.evaluation.Processor: proguard.evaluation.Stack stack>;

        $r14 = virtualinvoke $r7.<proguard.evaluation.Stack: proguard.evaluation.value.Value pop()>();

        virtualinvoke $r8.<proguard.evaluation.Variables: void store(int,proguard.evaluation.value.Value)>($i1, $r14);

        return;

     label12:
        $r8 = r0.<proguard.evaluation.Processor: proguard.evaluation.Variables variables>;

        $r15 = r0.<proguard.evaluation.Processor: proguard.evaluation.Variables variables>;

        $r9 = virtualinvoke $r15.<proguard.evaluation.Variables: proguard.evaluation.value.IntegerValue iload(int)>($i1);

        $r16 = r0.<proguard.evaluation.Processor: proguard.evaluation.value.ValueFactory valueFactory>;

        $i0 = $r4.<proguard.classfile.instruction.VariableInstruction: int constant>;

        $r17 = virtualinvoke $r16.<proguard.evaluation.value.ValueFactory: proguard.evaluation.value.IntegerValue createIntegerValue(int)>($i0);

        $r9 = virtualinvoke $r9.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue add(proguard.evaluation.value.IntegerValue)>($r17);

        virtualinvoke $r8.<proguard.evaluation.Variables: void store(int,proguard.evaluation.value.Value)>($i1, $r9);

        return;

     label13:
        $r8 = r0.<proguard.evaluation.Processor: proguard.evaluation.Variables variables>;

        $r18 = virtualinvoke $r8.<proguard.evaluation.Variables: proguard.evaluation.value.InstructionOffsetValue oload(int)>($i1);

        $r19 = r0.<proguard.evaluation.Processor: proguard.evaluation.BranchUnit branchUnit>;

        $i1 = virtualinvoke $r18.<proguard.evaluation.value.InstructionOffsetValue: int instructionOffsetCount()>();

        $i1 = $i1 - 1;

        $i1 = virtualinvoke $r18.<proguard.evaluation.value.InstructionOffsetValue: int instructionOffset(int)>($i1);

        interfaceinvoke $r19.<proguard.evaluation.BranchUnit: void branch(proguard.classfile.Clazz,proguard.classfile.attribute.CodeAttribute,int,int)>($r1, $r3, $i0, $i1);

        return;
    }
}
