public class com.parse.codec.binary.Hex extends java.lang.Object implements com.parse.codec.BinaryDecoder, com.parse.codec.BinaryEncoder
{
    public static final java.lang.String DEFAULT_CHARSET_NAME;
    private static final char[] DIGITS_LOWER;
    private static final char[] DIGITS_UPPER;
    private final java.lang.String charsetName;

    static void <clinit>()
    {
        char[] $r0;

        <com.parse.codec.binary.Hex: java.lang.String DEFAULT_CHARSET_NAME> = "UTF-8";

        $r0 = newarray (char)[16];

        $r0[0] = 48;

        $r0[1] = 49;

        $r0[2] = 50;

        $r0[3] = 51;

        $r0[4] = 52;

        $r0[5] = 53;

        $r0[6] = 54;

        $r0[7] = 55;

        $r0[8] = 56;

        $r0[9] = 57;

        $r0[10] = 97;

        $r0[11] = 98;

        $r0[12] = 99;

        $r0[13] = 100;

        $r0[14] = 101;

        $r0[15] = 102;

        <com.parse.codec.binary.Hex: char[] DIGITS_LOWER> = $r0;

        $r0 = newarray (char)[16];

        $r0[0] = 48;

        $r0[1] = 49;

        $r0[2] = 50;

        $r0[3] = 51;

        $r0[4] = 52;

        $r0[5] = 53;

        $r0[6] = 54;

        $r0[7] = 55;

        $r0[8] = 56;

        $r0[9] = 57;

        $r0[10] = 65;

        $r0[11] = 66;

        $r0[12] = 67;

        $r0[13] = 68;

        $r0[14] = 69;

        $r0[15] = 70;

        <com.parse.codec.binary.Hex: char[] DIGITS_UPPER> = $r0;

        return;
    }

    public void <init>()
    {
        com.parse.codec.binary.Hex r0;

        r0 := @this: com.parse.codec.binary.Hex;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.parse.codec.binary.Hex: java.lang.String charsetName> = "UTF-8";

        return;
    }

    public void <init>(java.lang.String)
    {
        com.parse.codec.binary.Hex r0;
        java.lang.String $r1;

        r0 := @this: com.parse.codec.binary.Hex;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.parse.codec.binary.Hex: java.lang.String charsetName> = $r1;

        return;
    }

    public static byte[] decodeHex(char[])
    {
        byte[] $r1;
        char $c3;
        com.parse.codec.DecoderException $r2;
        byte $b6;
        int $i0, $i1, $i2, $i4, $i5;
        char[] $r0;

        $r0 := @parameter0: char[];

        $i1 = 0;

        $i0 = lengthof $r0;

        $i2 = $i0 & 1;

        if $i2 == 0 goto label1;

        $r2 = new com.parse.codec.DecoderException;

        specialinvoke $r2.<com.parse.codec.DecoderException: void <init>(java.lang.String)>("Odd number of characters.");

        throw $r2;

     label1:
        $i2 = $i0 >> 1;

        $r1 = newarray (byte)[$i2];

        $i2 = 0;

     label2:
        if $i1 >= $i0 goto label3;

        $c3 = $r0[$i1];

        $i4 = staticinvoke <com.parse.codec.binary.Hex: int toDigit(char,int)>($c3, $i1);

        $i4 = $i4 << 4;

        $i1 = $i1 + 1;

        $c3 = $r0[$i1];

        $i5 = staticinvoke <com.parse.codec.binary.Hex: int toDigit(char,int)>($c3, $i1);

        $i4 = $i4 | $i5;

        $i1 = $i1 + 1;

        $i4 = $i4 & 255;

        $b6 = (byte) $i4;

        $r1[$i2] = $b6;

        $i2 = $i2 + 1;

        goto label2;

     label3:
        return $r1;
    }

    public static char[] encodeHex(byte[])
    {
        byte[] $r0;
        char[] $r1;

        $r0 := @parameter0: byte[];

        $r1 = staticinvoke <com.parse.codec.binary.Hex: char[] encodeHex(byte[],boolean)>($r0, 1);

        return $r1;
    }

    public static char[] encodeHex(byte[], boolean)
    {
        byte[] $r0;
        char[] $r1;
        boolean $z0;

        $r0 := @parameter0: byte[];

        $z0 := @parameter1: boolean;

        $r1 = <com.parse.codec.binary.Hex: char[] DIGITS_LOWER>;

        $r1 = staticinvoke <com.parse.codec.binary.Hex: char[] encodeHex(byte[],char[])>($r0, $r1);

        return $r1;
    }

    protected static char[] encodeHex(byte[], char[])
    {
        byte[] $r0;
        char $c7;
        short $s5;
        byte $b4;
        int $i0, $i1, $i2, $i3, $i6;
        char[] $r1, $r2;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: char[];

        $i2 = 0;

        $i0 = lengthof $r0;

        $i1 = $i0 << 1;

        $r2 = newarray (char)[$i1];

        $i3 = 0;

     label1:
        if $i3 >= $i0 goto label2;

        $i1 = $i2 + 1;

        $b4 = $r0[$i3];

        $s5 = (short) $b4;

        $s5 = $s5 & 240;

        $i6 = (int) $s5;

        $i6 = $i6 >>> 4;

        $c7 = $r1[$i6];

        $r2[$i2] = $c7;

        $i2 = $i1 + 1;

        $b4 = $r0[$i3];

        $b4 = $b4 & 15;

        $i6 = (int) $b4;

        $c7 = $r1[$i6];

        $r2[$i1] = $c7;

        $i3 = $i3 + 1;

        goto label1;

     label2:
        return $r2;
    }

    public static java.lang.String encodeHexString(byte[])
    {
        byte[] $r0;
        char[] $r2;
        java.lang.String $r1;

        $r0 := @parameter0: byte[];

        $r1 = new java.lang.String;

        $r2 = staticinvoke <com.parse.codec.binary.Hex: char[] encodeHex(byte[])>($r0);

        specialinvoke $r1.<java.lang.String: void <init>(char[])>($r2);

        return $r1;
    }

    protected static int toDigit(char, int)
    {
        char $c0;
        com.parse.codec.DecoderException $r3;
        int $i1, $i2, $i3;
        java.lang.StringBuilder $r0, $r2;
        java.lang.String $r1;

        $c0 := @parameter0: char;

        $i1 := @parameter1: int;

        $i2 = staticinvoke <java.lang.Character: int digit(char,int)>($c0, 16);

        $i3 = -1;

        if $i2 != $i3 goto label1;

        $r3 = new com.parse.codec.DecoderException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("Illegal hexadecimal character ");

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at index ");

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<com.parse.codec.DecoderException: void <init>(java.lang.String)>($r1);

        throw $r3;

     label1:
        return $i2;
    }

    public java.lang.Object decode(java.lang.Object)
    {
        byte[] $r5;
        com.parse.codec.DecoderException $r1;
        java.lang.ClassCastException $r6;
        char[] $r4;
        java.lang.Object $r2;
        com.parse.codec.binary.Hex r0;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: com.parse.codec.binary.Hex;

        $r2 := @parameter0: java.lang.Object;

        $z0 = $r2 instanceof java.lang.String;

        if $z0 == 0 goto label4;

     label1:
        $r3 = (java.lang.String) $r2;

        $r4 = virtualinvoke $r3.<java.lang.String: char[] toCharArray()>();

     label2:
        $r5 = staticinvoke <com.parse.codec.binary.Hex: byte[] decodeHex(char[])>($r4);

     label3:
        return $r5;

     label4:
        $r4 = (char[]) $r2;

     label5:
        goto label2;

     label6:
        $r6 := @caughtexception;

        $r1 = new com.parse.codec.DecoderException;

        $r3 = virtualinvoke $r6.<java.lang.ClassCastException: java.lang.String getMessage()>();

        specialinvoke $r1.<com.parse.codec.DecoderException: void <init>(java.lang.String,java.lang.Throwable)>($r3, $r6);

        throw $r1;

        catch java.lang.ClassCastException from label1 to label2 with label6;
        catch java.lang.ClassCastException from label2 to label3 with label6;
        catch java.lang.ClassCastException from label4 to label5 with label6;
    }

    public byte[] decode(byte[])
    {
        java.lang.Throwable $r5;
        byte[] $r1;
        com.parse.codec.DecoderException $r7;
        char[] $r4;
        com.parse.codec.binary.Hex r0;
        java.lang.String $r2, $r3, $r6;
        java.io.UnsupportedEncodingException $r8;

        r0 := @this: com.parse.codec.binary.Hex;

        $r1 := @parameter0: byte[];

        $r6 = new java.lang.String;

        $r2 = $r6;

     label1:
        $r3 = virtualinvoke r0.<com.parse.codec.binary.Hex: java.lang.String getCharsetName()>();

        specialinvoke $r6.<java.lang.String: void <init>(byte[],java.lang.String)>($r1, $r3);

        $r4 = virtualinvoke $r2.<java.lang.String: char[] toCharArray()>();

        $r1 = staticinvoke <com.parse.codec.binary.Hex: byte[] decodeHex(char[])>($r4);

     label2:
        return $r1;

     label3:
        $r5 := @caughtexception;

        $r7 = new com.parse.codec.DecoderException;

        $r8 = (java.io.UnsupportedEncodingException) $r5;

        $r2 = virtualinvoke $r8.<java.io.UnsupportedEncodingException: java.lang.String getMessage()>();

        specialinvoke $r7.<com.parse.codec.DecoderException: void <init>(java.lang.String,java.lang.Throwable)>($r2, $r5);

        throw $r7;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public java.lang.Object encode(java.lang.Object)
    {
        java.lang.Throwable $r7;
        byte[] $r4;
        java.lang.ClassCastException $r6;
        char[] $r5;
        java.lang.Object $r1;
        com.parse.codec.binary.Hex r0;
        java.lang.String $r2, $r3;
        com.parse.codec.EncoderException $r8;
        java.io.UnsupportedEncodingException $r9;
        boolean $z0;

        r0 := @this: com.parse.codec.binary.Hex;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof java.lang.String;

        if $z0 == 0 goto label5;

     label1:
        $r2 = (java.lang.String) $r1;

     label2:
        $r3 = virtualinvoke r0.<com.parse.codec.binary.Hex: java.lang.String getCharsetName()>();

        $r4 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.lang.String)>($r3);

     label3:
        $r5 = staticinvoke <com.parse.codec.binary.Hex: char[] encodeHex(byte[])>($r4);

     label4:
        return $r5;

     label5:
        $r4 = (byte[]) $r1;

     label6:
        goto label3;

     label7:
        $r6 := @caughtexception;

        $r8 = new com.parse.codec.EncoderException;

        $r2 = virtualinvoke $r6.<java.lang.ClassCastException: java.lang.String getMessage()>();

        specialinvoke $r8.<com.parse.codec.EncoderException: void <init>(java.lang.String,java.lang.Throwable)>($r2, $r6);

        throw $r8;

     label8:
        $r7 := @caughtexception;

        $r8 = new com.parse.codec.EncoderException;

        $r9 = (java.io.UnsupportedEncodingException) $r7;

        $r2 = virtualinvoke $r9.<java.io.UnsupportedEncodingException: java.lang.String getMessage()>();

        specialinvoke $r8.<com.parse.codec.EncoderException: void <init>(java.lang.String,java.lang.Throwable)>($r2, $r7);

        throw $r8;

        catch java.lang.ClassCastException from label1 to label3 with label7;
        catch java.lang.ClassCastException from label3 to label4 with label7;
        catch java.lang.ClassCastException from label5 to label6 with label7;
        catch java.io.UnsupportedEncodingException from label2 to label3 with label8;
        catch java.io.UnsupportedEncodingException from label3 to label4 with label8;
    }

    public byte[] encode(byte[])
    {
        byte[] $r1;
        com.parse.codec.binary.Hex r0;
        java.lang.String $r2, $r3;

        r0 := @this: com.parse.codec.binary.Hex;

        $r1 := @parameter0: byte[];

        $r2 = staticinvoke <com.parse.codec.binary.Hex: java.lang.String encodeHexString(byte[])>($r1);

        $r3 = virtualinvoke r0.<com.parse.codec.binary.Hex: java.lang.String getCharsetName()>();

        $r1 = staticinvoke <com.parse.codec.binary.StringUtils: byte[] getBytesUnchecked(java.lang.String,java.lang.String)>($r2, $r3);

        return $r1;
    }

    public java.lang.String getCharsetName()
    {
        com.parse.codec.binary.Hex r0;
        java.lang.String r1;

        r0 := @this: com.parse.codec.binary.Hex;

        r1 = r0.<com.parse.codec.binary.Hex: java.lang.String charsetName>;

        return r1;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r1;
        com.parse.codec.binary.Hex r0;
        java.lang.String $r2;

        r0 := @this: com.parse.codec.binary.Hex;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = specialinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[charsetName=");

        $r2 = r0.<com.parse.codec.binary.Hex: java.lang.String charsetName>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
}
