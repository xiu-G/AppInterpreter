public final class com.a.a.e.c.e extends java.lang.Object
{
    private static final int[][] a;
    private static final int[][] b;
    private static final int[][] c;
    private static final int[][] d;
    private static final int[][] e;
    private static final int[][] f;

    static void <clinit>()
    {
        int[][] $r0;
        int[] $r1;

        $r0 = newarray (int[])[7];

        $r1 = newarray (int)[7];

        $r1[0] = 1;

        $r1[1] = 1;

        $r1[2] = 1;

        $r1[3] = 1;

        $r1[4] = 1;

        $r1[5] = 1;

        $r1[6] = 1;

        $r0[0] = $r1;

        $r1 = newarray (int)[7];

        $r1[0] = 1;

        $r1[1] = 0;

        $r1[2] = 0;

        $r1[3] = 0;

        $r1[4] = 0;

        $r1[5] = 0;

        $r1[6] = 1;

        $r0[1] = $r1;

        $r1 = newarray (int)[7];

        $r1[0] = 1;

        $r1[1] = 0;

        $r1[2] = 1;

        $r1[3] = 1;

        $r1[4] = 1;

        $r1[5] = 0;

        $r1[6] = 1;

        $r0[2] = $r1;

        $r1 = newarray (int)[7];

        $r1[0] = 1;

        $r1[1] = 0;

        $r1[2] = 1;

        $r1[3] = 1;

        $r1[4] = 1;

        $r1[5] = 0;

        $r1[6] = 1;

        $r0[3] = $r1;

        $r1 = newarray (int)[7];

        $r1[0] = 1;

        $r1[1] = 0;

        $r1[2] = 1;

        $r1[3] = 1;

        $r1[4] = 1;

        $r1[5] = 0;

        $r1[6] = 1;

        $r0[4] = $r1;

        $r1 = newarray (int)[7];

        $r1[0] = 1;

        $r1[1] = 0;

        $r1[2] = 0;

        $r1[3] = 0;

        $r1[4] = 0;

        $r1[5] = 0;

        $r1[6] = 1;

        $r0[5] = $r1;

        $r1 = newarray (int)[7];

        $r1[0] = 1;

        $r1[1] = 1;

        $r1[2] = 1;

        $r1[3] = 1;

        $r1[4] = 1;

        $r1[5] = 1;

        $r1[6] = 1;

        $r0[6] = $r1;

        <com.a.a.e.c.e: int[][] a> = $r0;

        $r0 = newarray (int[])[1];

        $r1 = newarray (int)[8];

        $r1[0] = 0;

        $r1[1] = 0;

        $r1[2] = 0;

        $r1[3] = 0;

        $r1[4] = 0;

        $r1[5] = 0;

        $r1[6] = 0;

        $r1[7] = 0;

        $r0[0] = $r1;

        <com.a.a.e.c.e: int[][] b> = $r0;

        $r0 = newarray (int[])[7];

        $r1 = newarray (int)[1];

        $r1[0] = 0;

        $r0[0] = $r1;

        $r1 = newarray (int)[1];

        $r1[0] = 0;

        $r0[1] = $r1;

        $r1 = newarray (int)[1];

        $r1[0] = 0;

        $r0[2] = $r1;

        $r1 = newarray (int)[1];

        $r1[0] = 0;

        $r0[3] = $r1;

        $r1 = newarray (int)[1];

        $r1[0] = 0;

        $r0[4] = $r1;

        $r1 = newarray (int)[1];

        $r1[0] = 0;

        $r0[5] = $r1;

        $r1 = newarray (int)[1];

        $r1[0] = 0;

        $r0[6] = $r1;

        <com.a.a.e.c.e: int[][] c> = $r0;

        $r0 = newarray (int[])[5];

        $r1 = newarray (int)[5];

        $r1[0] = 1;

        $r1[1] = 1;

        $r1[2] = 1;

        $r1[3] = 1;

        $r1[4] = 1;

        $r0[0] = $r1;

        $r1 = newarray (int)[5];

        $r1[0] = 1;

        $r1[1] = 0;

        $r1[2] = 0;

        $r1[3] = 0;

        $r1[4] = 1;

        $r0[1] = $r1;

        $r1 = newarray (int)[5];

        $r1[0] = 1;

        $r1[1] = 0;

        $r1[2] = 1;

        $r1[3] = 0;

        $r1[4] = 1;

        $r0[2] = $r1;

        $r1 = newarray (int)[5];

        $r1[0] = 1;

        $r1[1] = 0;

        $r1[2] = 0;

        $r1[3] = 0;

        $r1[4] = 1;

        $r0[3] = $r1;

        $r1 = newarray (int)[5];

        $r1[0] = 1;

        $r1[1] = 1;

        $r1[2] = 1;

        $r1[3] = 1;

        $r1[4] = 1;

        $r0[4] = $r1;

        <com.a.a.e.c.e: int[][] d> = $r0;

        $r0 = newarray (int[])[40];

        $r1 = newarray (int)[7];

        $r1[0] = -1;

        $r1[1] = -1;

        $r1[2] = -1;

        $r1[3] = -1;

        $r1[4] = -1;

        $r1[5] = -1;

        $r1[6] = -1;

        $r0[0] = $r1;

        $r1 = newarray (int)[7];

        $r1[0] = 6;

        $r1[1] = 18;

        $r1[2] = -1;

        $r1[3] = -1;

        $r1[4] = -1;

        $r1[5] = -1;

        $r1[6] = -1;

        $r0[1] = $r1;

        $r1 = newarray (int)[7];

        $r1[0] = 6;

        $r1[1] = 22;

        $r1[2] = -1;

        $r1[3] = -1;

        $r1[4] = -1;

        $r1[5] = -1;

        $r1[6] = -1;

        $r0[2] = $r1;

        $r1 = newarray (int)[7];

        $r1[0] = 6;

        $r1[1] = 26;

        $r1[2] = -1;

        $r1[3] = -1;

        $r1[4] = -1;

        $r1[5] = -1;

        $r1[6] = -1;

        $r0[3] = $r1;

        $r1 = newarray (int)[7];

        $r1[0] = 6;

        $r1[1] = 30;

        $r1[2] = -1;

        $r1[3] = -1;

        $r1[4] = -1;

        $r1[5] = -1;

        $r1[6] = -1;

        $r0[4] = $r1;

        $r1 = newarray (int)[7];

        $r1[0] = 6;

        $r1[1] = 34;

        $r1[2] = -1;

        $r1[3] = -1;

        $r1[4] = -1;

        $r1[5] = -1;

        $r1[6] = -1;

        $r0[5] = $r1;

        $r1 = newarray (int)[7];

        $r1[0] = 6;

        $r1[1] = 22;

        $r1[2] = 38;

        $r1[3] = -1;

        $r1[4] = -1;

        $r1[5] = -1;

        $r1[6] = -1;

        $r0[6] = $r1;

        $r1 = newarray (int)[7];

        $r1[0] = 6;

        $r1[1] = 24;

        $r1[2] = 42;

        $r1[3] = -1;

        $r1[4] = -1;

        $r1[5] = -1;

        $r1[6] = -1;

        $r0[7] = $r1;

        $r1 = newarray (int)[7];

        $r1[0] = 6;

        $r1[1] = 26;

        $r1[2] = 46;

        $r1[3] = -1;

        $r1[4] = -1;

        $r1[5] = -1;

        $r1[6] = -1;

        $r0[8] = $r1;

        $r1 = newarray (int)[7];

        $r1[0] = 6;

        $r1[1] = 28;

        $r1[2] = 50;

        $r1[3] = -1;

        $r1[4] = -1;

        $r1[5] = -1;

        $r1[6] = -1;

        $r0[9] = $r1;

        $r1 = newarray (int)[7];

        $r1[0] = 6;

        $r1[1] = 30;

        $r1[2] = 54;

        $r1[3] = -1;

        $r1[4] = -1;

        $r1[5] = -1;

        $r1[6] = -1;

        $r0[10] = $r1;

        $r1 = newarray (int)[7];

        $r1[0] = 6;

        $r1[1] = 32;

        $r1[2] = 58;

        $r1[3] = -1;

        $r1[4] = -1;

        $r1[5] = -1;

        $r1[6] = -1;

        $r0[11] = $r1;

        $r1 = newarray (int)[7];

        $r1[0] = 6;

        $r1[1] = 34;

        $r1[2] = 62;

        $r1[3] = -1;

        $r1[4] = -1;

        $r1[5] = -1;

        $r1[6] = -1;

        $r0[12] = $r1;

        $r1 = newarray (int)[7];

        $r1[0] = 6;

        $r1[1] = 26;

        $r1[2] = 46;

        $r1[3] = 66;

        $r1[4] = -1;

        $r1[5] = -1;

        $r1[6] = -1;

        $r0[13] = $r1;

        $r1 = newarray (int)[7];

        $r1[0] = 6;

        $r1[1] = 26;

        $r1[2] = 48;

        $r1[3] = 70;

        $r1[4] = -1;

        $r1[5] = -1;

        $r1[6] = -1;

        $r0[14] = $r1;

        $r1 = newarray (int)[7];

        $r1[0] = 6;

        $r1[1] = 26;

        $r1[2] = 50;

        $r1[3] = 74;

        $r1[4] = -1;

        $r1[5] = -1;

        $r1[6] = -1;

        $r0[15] = $r1;

        $r1 = newarray (int)[7];

        $r1[0] = 6;

        $r1[1] = 30;

        $r1[2] = 54;

        $r1[3] = 78;

        $r1[4] = -1;

        $r1[5] = -1;

        $r1[6] = -1;

        $r0[16] = $r1;

        $r1 = newarray (int)[7];

        $r1[0] = 6;

        $r1[1] = 30;

        $r1[2] = 56;

        $r1[3] = 82;

        $r1[4] = -1;

        $r1[5] = -1;

        $r1[6] = -1;

        $r0[17] = $r1;

        $r1 = newarray (int)[7];

        $r1[0] = 6;

        $r1[1] = 30;

        $r1[2] = 58;

        $r1[3] = 86;

        $r1[4] = -1;

        $r1[5] = -1;

        $r1[6] = -1;

        $r0[18] = $r1;

        $r1 = newarray (int)[7];

        $r1[0] = 6;

        $r1[1] = 34;

        $r1[2] = 62;

        $r1[3] = 90;

        $r1[4] = -1;

        $r1[5] = -1;

        $r1[6] = -1;

        $r0[19] = $r1;

        $r1 = newarray (int)[7];

        $r1[0] = 6;

        $r1[1] = 28;

        $r1[2] = 50;

        $r1[3] = 72;

        $r1[4] = 94;

        $r1[5] = -1;

        $r1[6] = -1;

        $r0[20] = $r1;

        $r1 = newarray (int)[7];

        $r1[0] = 6;

        $r1[1] = 26;

        $r1[2] = 50;

        $r1[3] = 74;

        $r1[4] = 98;

        $r1[5] = -1;

        $r1[6] = -1;

        $r0[21] = $r1;

        $r1 = newarray (int)[7];

        $r1[0] = 6;

        $r1[1] = 30;

        $r1[2] = 54;

        $r1[3] = 78;

        $r1[4] = 102;

        $r1[5] = -1;

        $r1[6] = -1;

        $r0[22] = $r1;

        $r1 = newarray (int)[7];

        $r1[0] = 6;

        $r1[1] = 28;

        $r1[2] = 54;

        $r1[3] = 80;

        $r1[4] = 106;

        $r1[5] = -1;

        $r1[6] = -1;

        $r0[23] = $r1;

        $r1 = newarray (int)[7];

        $r1[0] = 6;

        $r1[1] = 32;

        $r1[2] = 58;

        $r1[3] = 84;

        $r1[4] = 110;

        $r1[5] = -1;

        $r1[6] = -1;

        $r0[24] = $r1;

        $r1 = newarray (int)[7];

        $r1[0] = 6;

        $r1[1] = 30;

        $r1[2] = 58;

        $r1[3] = 86;

        $r1[4] = 114;

        $r1[5] = -1;

        $r1[6] = -1;

        $r0[25] = $r1;

        $r1 = newarray (int)[7];

        $r1[0] = 6;

        $r1[1] = 34;

        $r1[2] = 62;

        $r1[3] = 90;

        $r1[4] = 118;

        $r1[5] = -1;

        $r1[6] = -1;

        $r0[26] = $r1;

        $r1 = newarray (int)[7];

        $r1[0] = 6;

        $r1[1] = 26;

        $r1[2] = 50;

        $r1[3] = 74;

        $r1[4] = 98;

        $r1[5] = 122;

        $r1[6] = -1;

        $r0[27] = $r1;

        $r1 = newarray (int)[7];

        $r1[0] = 6;

        $r1[1] = 30;

        $r1[2] = 54;

        $r1[3] = 78;

        $r1[4] = 102;

        $r1[5] = 126;

        $r1[6] = -1;

        $r0[28] = $r1;

        $r1 = newarray (int)[7];

        $r1[0] = 6;

        $r1[1] = 26;

        $r1[2] = 52;

        $r1[3] = 78;

        $r1[4] = 104;

        $r1[5] = 130;

        $r1[6] = -1;

        $r0[29] = $r1;

        $r1 = newarray (int)[7];

        $r1[0] = 6;

        $r1[1] = 30;

        $r1[2] = 56;

        $r1[3] = 82;

        $r1[4] = 108;

        $r1[5] = 134;

        $r1[6] = -1;

        $r0[30] = $r1;

        $r1 = newarray (int)[7];

        $r1[0] = 6;

        $r1[1] = 34;

        $r1[2] = 60;

        $r1[3] = 86;

        $r1[4] = 112;

        $r1[5] = 138;

        $r1[6] = -1;

        $r0[31] = $r1;

        $r1 = newarray (int)[7];

        $r1[0] = 6;

        $r1[1] = 30;

        $r1[2] = 58;

        $r1[3] = 86;

        $r1[4] = 114;

        $r1[5] = 142;

        $r1[6] = -1;

        $r0[32] = $r1;

        $r1 = newarray (int)[7];

        $r1[0] = 6;

        $r1[1] = 34;

        $r1[2] = 62;

        $r1[3] = 90;

        $r1[4] = 118;

        $r1[5] = 146;

        $r1[6] = -1;

        $r0[33] = $r1;

        $r1 = newarray (int)[7];

        $r1[0] = 6;

        $r1[1] = 30;

        $r1[2] = 54;

        $r1[3] = 78;

        $r1[4] = 102;

        $r1[5] = 126;

        $r1[6] = 150;

        $r0[34] = $r1;

        $r1 = newarray (int)[7];

        $r1[0] = 6;

        $r1[1] = 24;

        $r1[2] = 50;

        $r1[3] = 76;

        $r1[4] = 102;

        $r1[5] = 128;

        $r1[6] = 154;

        $r0[35] = $r1;

        $r1 = newarray (int)[7];

        $r1[0] = 6;

        $r1[1] = 28;

        $r1[2] = 54;

        $r1[3] = 80;

        $r1[4] = 106;

        $r1[5] = 132;

        $r1[6] = 158;

        $r0[36] = $r1;

        $r1 = newarray (int)[7];

        $r1[0] = 6;

        $r1[1] = 32;

        $r1[2] = 58;

        $r1[3] = 84;

        $r1[4] = 110;

        $r1[5] = 136;

        $r1[6] = 162;

        $r0[37] = $r1;

        $r1 = newarray (int)[7];

        $r1[0] = 6;

        $r1[1] = 26;

        $r1[2] = 54;

        $r1[3] = 82;

        $r1[4] = 110;

        $r1[5] = 138;

        $r1[6] = 166;

        $r0[38] = $r1;

        $r1 = newarray (int)[7];

        $r1[0] = 6;

        $r1[1] = 30;

        $r1[2] = 58;

        $r1[3] = 86;

        $r1[4] = 114;

        $r1[5] = 142;

        $r1[6] = 170;

        $r0[39] = $r1;

        <com.a.a.e.c.e: int[][] e> = $r0;

        $r0 = newarray (int[])[15];

        $r1 = newarray (int)[2];

        $r1[0] = 8;

        $r1[1] = 0;

        $r0[0] = $r1;

        $r1 = newarray (int)[2];

        $r1[0] = 8;

        $r1[1] = 1;

        $r0[1] = $r1;

        $r1 = newarray (int)[2];

        $r1[0] = 8;

        $r1[1] = 2;

        $r0[2] = $r1;

        $r1 = newarray (int)[2];

        $r1[0] = 8;

        $r1[1] = 3;

        $r0[3] = $r1;

        $r1 = newarray (int)[2];

        $r1[0] = 8;

        $r1[1] = 4;

        $r0[4] = $r1;

        $r1 = newarray (int)[2];

        $r1[0] = 8;

        $r1[1] = 5;

        $r0[5] = $r1;

        $r1 = newarray (int)[2];

        $r1[0] = 8;

        $r1[1] = 7;

        $r0[6] = $r1;

        $r1 = newarray (int)[2];

        $r1[0] = 8;

        $r1[1] = 8;

        $r0[7] = $r1;

        $r1 = newarray (int)[2];

        $r1[0] = 7;

        $r1[1] = 8;

        $r0[8] = $r1;

        $r1 = newarray (int)[2];

        $r1[0] = 5;

        $r1[1] = 8;

        $r0[9] = $r1;

        $r1 = newarray (int)[2];

        $r1[0] = 4;

        $r1[1] = 8;

        $r0[10] = $r1;

        $r1 = newarray (int)[2];

        $r1[0] = 3;

        $r1[1] = 8;

        $r0[11] = $r1;

        $r1 = newarray (int)[2];

        $r1[0] = 2;

        $r1[1] = 8;

        $r0[12] = $r1;

        $r1 = newarray (int)[2];

        $r1[0] = 1;

        $r1[1] = 8;

        $r0[13] = $r1;

        $r1 = newarray (int)[2];

        $r1[0] = 0;

        $r1[1] = 8;

        $r0[14] = $r1;

        <com.a.a.e.c.e: int[][] f> = $r0;

        return;
    }

    private static int a(int)
    {
        int $i0, $i1;

        $i0 := @parameter0: int;

        $i1 = 0;

     label1:
        if $i0 == 0 goto label2;

        $i0 = $i0 >>> 1;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $i1;
    }

    private static int a(int, int)
    {
        int $i0, $i1, $i2, $i3;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = staticinvoke <com.a.a.e.c.e: int a(int)>($i1);

        $i3 = $i2 + -1;

        $i0 = $i0 << $i3;

     label1:
        $i3 = staticinvoke <com.a.a.e.c.e: int a(int)>($i0);

        if $i3 < $i2 goto label2;

        $i3 = staticinvoke <com.a.a.e.c.e: int a(int)>($i0);

        $i3 = $i3 - $i2;

        $i3 = $i1 << $i3;

        $i0 = $i0 ^ $i3;

        goto label1;

     label2:
        return $i0;
    }

    private static void a(int, int, com.a.a.e.c.b)
    {
        com.a.a.s $r3;
        int[][] $r1;
        com.a.a.e.c.b $r0;
        byte $b4;
        int[] $r2;
        int $i0, $i1, $i2, $i3, $i5;
        boolean $z0;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0 := @parameter2: com.a.a.e.c.b;

        $r1 = <com.a.a.e.c.e: int[][] b>;

        $r2 = $r1[0];

        $i2 = lengthof $r2;

        if $i2 != 8 goto label1;

        $r1 = <com.a.a.e.c.e: int[][] b>;

        $i2 = lengthof $r1;

        if $i2 == 1 goto label2;

     label1:
        $r3 = new com.a.a.s;

        specialinvoke $r3.<com.a.a.s: void <init>(java.lang.String)>("Bad horizontal separation pattern");

        throw $r3;

     label2:
        $i2 = 0;

     label3:
        if $i2 >= 8 goto label5;

        $i3 = $i0 + $i2;

        $b4 = virtualinvoke $r0.<com.a.a.e.c.b: byte a(int,int)>($i3, $i1);

        $i3 = (int) $b4;

        $z0 = staticinvoke <com.a.a.e.c.e: boolean b(int)>($i3);

        if $z0 != 0 goto label4;

        $r3 = new com.a.a.s;

        specialinvoke $r3.<com.a.a.s: void <init>()>();

        throw $r3;

     label4:
        $i3 = $i0 + $i2;

        $r1 = <com.a.a.e.c.e: int[][] b>;

        $r2 = $r1[0];

        $i5 = $r2[$i2];

        virtualinvoke $r0.<com.a.a.e.c.b: void a(int,int,int)>($i3, $i1, $i5);

        $i2 = $i2 + 1;

        goto label3;

     label5:
        return;
    }

    private static void a(int, com.a.a.e.c.b)
    {
        com.a.a.s $r6;
        com.a.a.a.a $r1, $r4;
        com.a.a.e.c.b $r0;
        java.lang.StringBuffer $r2, $r5;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r3;
        boolean $z0;

        $i0 := @parameter0: int;

        $r0 := @parameter1: com.a.a.e.c.b;

        if $i0 >= 7 goto label1;

        return;

     label1:
        $r4 = new com.a.a.a.a;

        $r1 = $r4;

        specialinvoke $r4.<com.a.a.a.a: void <init>()>();

        virtualinvoke $r1.<com.a.a.a.a: void b(int,int)>($i0, 6);

        $i0 = staticinvoke <com.a.a.e.c.e: int a(int,int)>($i0, 7973);

        virtualinvoke $r1.<com.a.a.a.a: void b(int,int)>($i0, 12);

        $i0 = $r1.<com.a.a.a.a: int b>;

        if $i0 == 18 goto label2;

        $r6 = new com.a.a.s;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>(java.lang.String)>("should not happen but we got: ");

        $i0 = $r1.<com.a.a.a.a: int b>;

        $r2 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r6.<com.a.a.s: void <init>(java.lang.String)>($r3);

        throw $r6;

     label2:
        $i1 = 17;

        $i0 = 0;

     label3:
        if $i0 >= 6 goto label6;

        $i2 = 0;

     label4:
        if $i2 >= 3 goto label5;

        $z0 = virtualinvoke $r1.<com.a.a.a.a: boolean a(int)>($i1);

        $i1 = $i1 + -1;

        $i3 = virtualinvoke $r0.<com.a.a.e.c.b: int a()>();

        $i3 = $i3 + -11;

        $i3 = $i3 + $i2;

        virtualinvoke $r0.<com.a.a.e.c.b: void a(int,int,boolean)>($i0, $i3, $z0);

        $i3 = virtualinvoke $r0.<com.a.a.e.c.b: int a()>();

        $i3 = $i3 + -11;

        $i3 = $i3 + $i2;

        virtualinvoke $r0.<com.a.a.e.c.b: void a(int,int,boolean)>($i3, $i0, $z0);

        $i2 = $i2 + 1;

        goto label4;

     label5:
        $i0 = $i0 + 1;

        goto label3;

     label6:
        return;
    }

    private static void a(com.a.a.a.a, int, com.a.a.e.c.b)
    {
        com.a.a.a.a $r0;
        com.a.a.e.c.b $r1;
        byte $b7;
        java.lang.StringBuffer $r2, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i9;
        java.lang.String $r3;
        boolean $z0, $z1;
        com.a.a.s $r6;
        java.lang.IllegalArgumentException $r4;

        $r0 := @parameter0: com.a.a.a.a;

        $i0 := @parameter1: int;

        $r1 := @parameter2: com.a.a.e.c.b;

        $i2 = virtualinvoke $r1.<com.a.a.e.c.b: int b()>();

        $i3 = $i2 + -1;

        $i2 = virtualinvoke $r1.<com.a.a.e.c.b: int a()>();

        $i4 = $i2 + -1;

        $i2 = -1;

        $i1 = 0;

     label01:
        if $i3 <= 0 goto label24;

        if $i3 != 6 goto label25;

        $i3 = $i3 + -1;

        $i5 = $i1;

     label02:
        if $i4 < 0 goto label23;

        $i1 = virtualinvoke $r1.<com.a.a.e.c.b: int a()>();

        if $i4 >= $i1 goto label23;

        $i6 = 0;

     label03:
        if $i6 >= 2 goto label22;

        $i1 = $i3 - $i6;

        $b7 = virtualinvoke $r1.<com.a.a.e.c.b: byte a(int,int)>($i1, $i4);

        $i8 = (int) $b7;

        $z0 = staticinvoke <com.a.a.e.c.e: boolean b(int)>($i8);

        if $z0 == 0 goto label12;

        $i8 = $r0.<com.a.a.a.a: int b>;

        if $i5 >= $i8 goto label05;

        $z0 = virtualinvoke $r0.<com.a.a.a.a: boolean a(int)>($i5);

        $i5 = $i5 + 1;

     label04:
        if $i0 == -1 goto label11;

        $z1 = staticinvoke <com.a.a.e.c.f: boolean h(int)>($i0);

        if $z1 != 0 goto label06;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid mask pattern");

        throw $r4;

     label05:
        $z0 = 0;

        goto label04;

     label06:
        lookupswitch($i0)
        {
            case 0: goto label08;
            case 1: goto label13;
            case 2: goto label14;
            case 3: goto label15;
            case 4: goto label16;
            case 5: goto label17;
            case 6: goto label18;
            case 7: goto label19;
            default: goto label07;
        };

     label07:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>(java.lang.String)>("Invalid mask pattern: ");

        $r2 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r4;

     label08:
        $i8 = $i4 + $i1;

        $i8 = $i8 & 1;

     label09:
        if $i8 != 0 goto label20;

        $z1 = 1;

     label10:
        if $z1 == 0 goto label11;

        if $z0 != 0 goto label21;

        $z0 = 1;

     label11:
        virtualinvoke $r1.<com.a.a.e.c.b: void a(int,int,boolean)>($i1, $i4, $z0);

     label12:
        $i6 = $i6 + 1;

        goto label03;

     label13:
        $i8 = $i4 & 1;

        goto label09;

     label14:
        $i8 = $i1 % 3;

        goto label09;

     label15:
        $i8 = $i4 + $i1;

        $i8 = $i8 % 3;

        goto label09;

     label16:
        $i8 = $i4 >>> 1;

        $i9 = $i1 / 3;

        $i8 = $i8 + $i9;

        $i8 = $i8 & 1;

        goto label09;

     label17:
        $i9 = $i4 * $i1;

        $i8 = $i9 & 1;

        $i9 = $i9 % 3;

        $i8 = $i9 + $i8;

        goto label09;

     label18:
        $i9 = $i4 * $i1;

        $i8 = $i9 & 1;

        $i9 = $i9 % 3;

        $i8 = $i9 + $i8;

        $i8 = $i8 & 1;

        goto label09;

     label19:
        $i8 = $i4 * $i1;

        $i8 = $i8 % 3;

        $i9 = $i4 + $i1;

        $i9 = $i9 & 1;

        $i8 = $i8 + $i9;

        $i8 = $i8 & 1;

        goto label09;

     label20:
        $z1 = 0;

        goto label10;

     label21:
        $z0 = 0;

        goto label11;

     label22:
        $i4 = $i4 + $i2;

        goto label02;

     label23:
        $i2 = neg $i2;

        $i4 = $i4 + $i2;

        $i3 = $i3 + -2;

        $i1 = $i5;

        goto label01;

     label24:
        $i0 = $r0.<com.a.a.a.a: int b>;

        if $i1 == $i0 goto label26;

        $r6 = new com.a.a.s;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>(java.lang.String)>("Not all bits consumed: ");

        $r2 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(47);

        $i0 = $r0.<com.a.a.a.a: int b>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r6.<com.a.a.s: void <init>(java.lang.String)>($r3);

        throw $r6;

     label25:
        $i5 = $i1;

        goto label02;

     label26:
        return;
    }

    public static void a(com.a.a.a.a, com.a.a.e.a.n, int, int, com.a.a.e.c.b)
    {
        int[][] $r3;
        com.a.a.a.a $r0, $r6, $r7, $r11;
        com.a.a.e.c.b $r2;
        byte $b6;
        int[] $r4, $r5;
        java.lang.StringBuffer $r8, $r13;
        com.a.a.e.a.n $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i8, $i9, $i10, $i11, $i12;
        java.lang.String $r9;
        boolean $z0;
        com.a.a.s $r10;
        java.lang.IllegalArgumentException $r12;

        $r0 := @parameter0: com.a.a.a.a;

        $r1 := @parameter1: com.a.a.e.a.n;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $r2 := @parameter4: com.a.a.e.c.b;

        virtualinvoke $r2.<com.a.a.e.c.b: void d()>();

        $r3 = <com.a.a.e.c.e: int[][] a>;

        $r4 = $r3[0];

        $i3 = lengthof $r4;

        staticinvoke <com.a.a.e.c.e: void c(int,int,com.a.a.e.c.b)>(0, 0, $r2);

        $i4 = virtualinvoke $r2.<com.a.a.e.c.b: int b()>();

        $i4 = $i4 - $i3;

        staticinvoke <com.a.a.e.c.e: void c(int,int,com.a.a.e.c.b)>($i4, 0, $r2);

        $i4 = virtualinvoke $r2.<com.a.a.e.c.b: int b()>();

        $i3 = $i4 - $i3;

        staticinvoke <com.a.a.e.c.e: void c(int,int,com.a.a.e.c.b)>(0, $i3, $r2);

        $r3 = <com.a.a.e.c.e: int[][] b>;

        $r4 = $r3[0];

        $i3 = lengthof $r4;

        $i4 = $i3 + -1;

        staticinvoke <com.a.a.e.c.e: void a(int,int,com.a.a.e.c.b)>(0, $i4, $r2);

        $i4 = virtualinvoke $r2.<com.a.a.e.c.b: int b()>();

        $i4 = $i4 - $i3;

        $i5 = $i3 + -1;

        staticinvoke <com.a.a.e.c.e: void a(int,int,com.a.a.e.c.b)>($i4, $i5, $r2);

        $i4 = virtualinvoke $r2.<com.a.a.e.c.b: int b()>();

        $i3 = $i4 - $i3;

        staticinvoke <com.a.a.e.c.e: void a(int,int,com.a.a.e.c.b)>(0, $i3, $r2);

        $r3 = <com.a.a.e.c.e: int[][] c>;

        $i3 = lengthof $r3;

        staticinvoke <com.a.a.e.c.e: void b(int,int,com.a.a.e.c.b)>($i3, 0, $r2);

        $i4 = virtualinvoke $r2.<com.a.a.e.c.b: int a()>();

        $i4 = $i4 - $i3;

        $i4 = $i4 + -1;

        staticinvoke <com.a.a.e.c.e: void b(int,int,com.a.a.e.c.b)>($i4, 0, $r2);

        $i4 = virtualinvoke $r2.<com.a.a.e.c.b: int a()>();

        $i4 = $i4 - $i3;

        staticinvoke <com.a.a.e.c.e: void b(int,int,com.a.a.e.c.b)>($i3, $i4, $r2);

        $i3 = virtualinvoke $r2.<com.a.a.e.c.b: int a()>();

        $i3 = $i3 + -8;

        $b6 = virtualinvoke $r2.<com.a.a.e.c.b: byte a(int,int)>(8, $i3);

        if $b6 != 0 goto label01;

        $r10 = new com.a.a.s;

        specialinvoke $r10.<com.a.a.s: void <init>()>();

        throw $r10;

     label01:
        $i3 = virtualinvoke $r2.<com.a.a.e.c.b: int a()>();

        $i3 = $i3 + -8;

        virtualinvoke $r2.<com.a.a.e.c.b: void a(int,int,int)>(8, $i3, 1);

        if $i0 < 2 goto label12;

        $i3 = $i0 + -1;

        $r3 = <com.a.a.e.c.e: int[][] e>;

        $r4 = $r3[$i3];

        $r3 = <com.a.a.e.c.e: int[][] e>;

        $r5 = $r3[$i3];

        $i3 = lengthof $r5;

        $i4 = 0;

     label02:
        if $i4 >= $i3 goto label12;

        $i5 = 0;

     label03:
        if $i5 >= $i3 goto label11;

        $i2 = $r4[$i4];

        $i7 = $r4[$i5];

        if $i7 == -1 goto label10;

        if $i2 == -1 goto label10;

        $b6 = virtualinvoke $r2.<com.a.a.e.c.b: byte a(int,int)>($i7, $i2);

        $i8 = (int) $b6;

        $z0 = staticinvoke <com.a.a.e.c.e: boolean b(int)>($i8);

        if $z0 == 0 goto label10;

        $i7 = $i7 + -2;

        $i2 = $i2 + -2;

        $r3 = <com.a.a.e.c.e: int[][] d>;

        $r5 = $r3[0];

        $i8 = lengthof $r5;

        if $i8 != 5 goto label04;

        $r3 = <com.a.a.e.c.e: int[][] d>;

        $i8 = lengthof $r3;

        if $i8 == 5 goto label05;

     label04:
        $r10 = new com.a.a.s;

        specialinvoke $r10.<com.a.a.s: void <init>(java.lang.String)>("Bad position adjustment");

        throw $r10;

     label05:
        $i8 = 0;

     label06:
        if $i8 >= 5 goto label10;

        $i9 = 0;

     label07:
        if $i9 >= 5 goto label09;

        $i10 = $i7 + $i9;

        $i11 = $i2 + $i8;

        $b6 = virtualinvoke $r2.<com.a.a.e.c.b: byte a(int,int)>($i10, $i11);

        $i10 = (int) $b6;

        $z0 = staticinvoke <com.a.a.e.c.e: boolean b(int)>($i10);

        if $z0 != 0 goto label08;

        $r10 = new com.a.a.s;

        specialinvoke $r10.<com.a.a.s: void <init>()>();

        throw $r10;

     label08:
        $i10 = $i7 + $i9;

        $i11 = $i2 + $i8;

        $r3 = <com.a.a.e.c.e: int[][] d>;

        $r5 = $r3[$i8];

        $i12 = $r5[$i9];

        virtualinvoke $r2.<com.a.a.e.c.b: void a(int,int,int)>($i10, $i11, $i12);

        $i9 = $i9 + 1;

        goto label07;

     label09:
        $i8 = $i8 + 1;

        goto label06;

     label10:
        $i5 = $i5 + 1;

        goto label03;

     label11:
        $i4 = $i4 + 1;

        goto label02;

     label12:
        $i3 = 8;

     label13:
        $i4 = virtualinvoke $r2.<com.a.a.e.c.b: int b()>();

        $i4 = $i4 + -8;

        if $i3 >= $i4 goto label18;

        $i4 = $i3 + 1;

        $i4 = $i4 % 2;

        $b6 = virtualinvoke $r2.<com.a.a.e.c.b: byte a(int,int)>($i3, 6);

        $i5 = (int) $b6;

        $z0 = staticinvoke <com.a.a.e.c.e: boolean c(int)>($i5);

        if $z0 != 0 goto label14;

        $r10 = new com.a.a.s;

        specialinvoke $r10.<com.a.a.s: void <init>()>();

        throw $r10;

     label14:
        $b6 = virtualinvoke $r2.<com.a.a.e.c.b: byte a(int,int)>($i3, 6);

        $i5 = (int) $b6;

        $z0 = staticinvoke <com.a.a.e.c.e: boolean b(int)>($i5);

        if $z0 == 0 goto label15;

        virtualinvoke $r2.<com.a.a.e.c.b: void a(int,int,int)>($i3, 6, $i4);

     label15:
        $b6 = virtualinvoke $r2.<com.a.a.e.c.b: byte a(int,int)>(6, $i3);

        $i5 = (int) $b6;

        $z0 = staticinvoke <com.a.a.e.c.e: boolean c(int)>($i5);

        if $z0 != 0 goto label16;

        $r10 = new com.a.a.s;

        specialinvoke $r10.<com.a.a.s: void <init>()>();

        throw $r10;

     label16:
        $b6 = virtualinvoke $r2.<com.a.a.e.c.b: byte a(int,int)>(6, $i3);

        $i5 = (int) $b6;

        $z0 = staticinvoke <com.a.a.e.c.e: boolean b(int)>($i5);

        if $z0 == 0 goto label17;

        virtualinvoke $r2.<com.a.a.e.c.b: void a(int,int,int)>(6, $i3, $i4);

     label17:
        $i3 = $i3 + 1;

        goto label13;

     label18:
        $r7 = new com.a.a.a.a;

        $r6 = $r7;

        specialinvoke $r7.<com.a.a.a.a: void <init>()>();

        $z0 = staticinvoke <com.a.a.e.c.f: boolean h(int)>($i1);

        if $z0 != 0 goto label19;

        $r10 = new com.a.a.s;

        specialinvoke $r10.<com.a.a.s: void <init>(java.lang.String)>("Invalid mask pattern");

        throw $r10;

     label19:
        $i3 = virtualinvoke $r1.<com.a.a.e.a.n: int b()>();

        $i3 = $i3 << 3;

        $i3 = $i3 | $i1;

        virtualinvoke $r6.<com.a.a.a.a: void b(int,int)>($i3, 5);

        $i3 = staticinvoke <com.a.a.e.c.e: int a(int,int)>($i3, 1335);

        virtualinvoke $r6.<com.a.a.a.a: void b(int,int)>($i3, 10);

        $r11 = new com.a.a.a.a;

        $r7 = $r11;

        specialinvoke $r11.<com.a.a.a.a: void <init>()>();

        virtualinvoke $r7.<com.a.a.a.a: void b(int,int)>(21522, 15);

        $r4 = $r6.<com.a.a.a.a: int[] a>;

        $i3 = lengthof $r4;

        $r4 = $r7.<com.a.a.a.a: int[] a>;

        $i4 = lengthof $r4;

        if $i3 == $i4 goto label20;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Sizes don\'t match");

        throw $r12;

     label20:
        $i3 = 0;

     label21:
        $r4 = $r6.<com.a.a.a.a: int[] a>;

        $i4 = lengthof $r4;

        if $i3 >= $i4 goto label22;

        $r4 = $r6.<com.a.a.a.a: int[] a>;

        $i4 = $r4[$i3];

        $r5 = $r7.<com.a.a.a.a: int[] a>;

        $i5 = $r5[$i3];

        $i4 = $i4 ^ $i5;

        $r4[$i3] = $i4;

        $i3 = $i3 + 1;

        goto label21;

     label22:
        $i3 = $r6.<com.a.a.a.a: int b>;

        if $i3 == 15 goto label23;

        $r10 = new com.a.a.s;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>(java.lang.String)>("should not happen but we got: ");

        $i0 = $r6.<com.a.a.a.a: int b>;

        $r8 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r10.<com.a.a.s: void <init>(java.lang.String)>($r9);

        throw $r10;

     label23:
        $i3 = 0;

     label24:
        $i4 = $r6.<com.a.a.a.a: int b>;

        if $i3 >= $i4 goto label27;

        $i4 = $r6.<com.a.a.a.a: int b>;

        $i4 = $i4 + -1;

        $i4 = $i4 - $i3;

        $z0 = virtualinvoke $r6.<com.a.a.a.a: boolean a(int)>($i4);

        $r3 = <com.a.a.e.c.e: int[][] f>;

        $r4 = $r3[$i3];

        $i4 = $r4[0];

        $r3 = <com.a.a.e.c.e: int[][] f>;

        $r4 = $r3[$i3];

        $i5 = $r4[1];

        virtualinvoke $r2.<com.a.a.e.c.b: void a(int,int,boolean)>($i4, $i5, $z0);

        if $i3 >= 8 goto label26;

        $i4 = virtualinvoke $r2.<com.a.a.e.c.b: int b()>();

        $i4 = $i4 - $i3;

        $i4 = $i4 + -1;

        virtualinvoke $r2.<com.a.a.e.c.b: void a(int,int,boolean)>($i4, 8, $z0);

     label25:
        $i3 = $i3 + 1;

        goto label24;

     label26:
        $i4 = virtualinvoke $r2.<com.a.a.e.c.b: int a()>();

        $i4 = $i4 + -7;

        $i5 = $i3 + -8;

        $i4 = $i4 + $i5;

        virtualinvoke $r2.<com.a.a.e.c.b: void a(int,int,boolean)>(8, $i4, $z0);

        goto label25;

     label27:
        staticinvoke <com.a.a.e.c.e: void a(int,com.a.a.e.c.b)>($i0, $r2);

        staticinvoke <com.a.a.e.c.e: void a(com.a.a.a.a,int,com.a.a.e.c.b)>($r0, $i1, $r2);

        return;
    }

    private static void b(int, int, com.a.a.e.c.b)
    {
        com.a.a.s $r3;
        int[][] $r1;
        com.a.a.e.c.b $r0;
        byte $b4;
        int[] $r2;
        int $i0, $i1, $i2, $i3, $i5;
        boolean $z0;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0 := @parameter2: com.a.a.e.c.b;

        $r1 = <com.a.a.e.c.e: int[][] c>;

        $r2 = $r1[0];

        $i2 = lengthof $r2;

        if $i2 != 1 goto label1;

        $r1 = <com.a.a.e.c.e: int[][] c>;

        $i2 = lengthof $r1;

        if $i2 == 7 goto label2;

     label1:
        $r3 = new com.a.a.s;

        specialinvoke $r3.<com.a.a.s: void <init>(java.lang.String)>("Bad vertical separation pattern");

        throw $r3;

     label2:
        $i2 = 0;

     label3:
        if $i2 >= 7 goto label5;

        $i3 = $i1 + $i2;

        $b4 = virtualinvoke $r0.<com.a.a.e.c.b: byte a(int,int)>($i0, $i3);

        $i3 = (int) $b4;

        $z0 = staticinvoke <com.a.a.e.c.e: boolean b(int)>($i3);

        if $z0 != 0 goto label4;

        $r3 = new com.a.a.s;

        specialinvoke $r3.<com.a.a.s: void <init>()>();

        throw $r3;

     label4:
        $i3 = $i1 + $i2;

        $r1 = <com.a.a.e.c.e: int[][] c>;

        $r2 = $r1[$i2];

        $i5 = $r2[0];

        virtualinvoke $r0.<com.a.a.e.c.b: void a(int,int,int)>($i0, $i3, $i5);

        $i2 = $i2 + 1;

        goto label3;

     label5:
        return;
    }

    private static boolean b(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        if $i0 != -1 goto label1;

        return 1;

     label1:
        return 0;
    }

    private static void c(int, int, com.a.a.e.c.b)
    {
        com.a.a.s $r3;
        int[][] $r1;
        com.a.a.e.c.b $r0;
        byte $b6;
        int[] $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7;
        boolean $z0;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0 := @parameter2: com.a.a.e.c.b;

        $r1 = <com.a.a.e.c.e: int[][] a>;

        $r2 = $r1[0];

        $i2 = lengthof $r2;

        if $i2 != 7 goto label1;

        $r1 = <com.a.a.e.c.e: int[][] a>;

        $i2 = lengthof $r1;

        if $i2 == 7 goto label2;

     label1:
        $r3 = new com.a.a.s;

        specialinvoke $r3.<com.a.a.s: void <init>(java.lang.String)>("Bad position detection pattern");

        throw $r3;

     label2:
        $i2 = 0;

     label3:
        if $i2 >= 7 goto label7;

        $i3 = 0;

     label4:
        if $i3 >= 7 goto label6;

        $i4 = $i0 + $i3;

        $i5 = $i1 + $i2;

        $b6 = virtualinvoke $r0.<com.a.a.e.c.b: byte a(int,int)>($i4, $i5);

        $i4 = (int) $b6;

        $z0 = staticinvoke <com.a.a.e.c.e: boolean b(int)>($i4);

        if $z0 != 0 goto label5;

        $r3 = new com.a.a.s;

        specialinvoke $r3.<com.a.a.s: void <init>()>();

        throw $r3;

     label5:
        $i4 = $i0 + $i3;

        $i5 = $i1 + $i2;

        $r1 = <com.a.a.e.c.e: int[][] a>;

        $r2 = $r1[$i2];

        $i7 = $r2[$i3];

        virtualinvoke $r0.<com.a.a.e.c.b: void a(int,int,int)>($i4, $i5, $i7);

        $i3 = $i3 + 1;

        goto label4;

     label6:
        $i2 = $i2 + 1;

        goto label3;

     label7:
        return;
    }

    private static boolean c(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        if $i0 == -1 goto label2;

        if $i0 == 0 goto label2;

        if $i0 != 1 goto label1;

        return 1;

     label1:
        return 0;

     label2:
        return 1;
    }
}
