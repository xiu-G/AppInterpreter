public final class com.google.zxing.common.reedsolomon.ReedSolomonEncoder extends java.lang.Object
{
    private final java.util.Vector cachedGenerators;
    private final com.google.zxing.common.reedsolomon.GF256 field;

    public void <init>(com.google.zxing.common.reedsolomon.GF256)
    {
        java.lang.IllegalArgumentException $r4;
        com.google.zxing.common.reedsolomon.GF256Poly $r6;
        java.util.Vector $r5;
        int[] $r2;
        com.google.zxing.common.reedsolomon.GF256 $r1, $r3;
        com.google.zxing.common.reedsolomon.ReedSolomonEncoder r0;
        boolean $z0;

        r0 := @this: com.google.zxing.common.reedsolomon.ReedSolomonEncoder;

        $r1 := @parameter0: com.google.zxing.common.reedsolomon.GF256;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = <com.google.zxing.common.reedsolomon.GF256: com.google.zxing.common.reedsolomon.GF256 QR_CODE_FIELD>;

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Only QR Code is supported at this time");

        throw $r4;

     label1:
        r0.<com.google.zxing.common.reedsolomon.ReedSolomonEncoder: com.google.zxing.common.reedsolomon.GF256 field> = $r1;

        $r5 = new java.util.Vector;

        specialinvoke $r5.<java.util.Vector: void <init>()>();

        r0.<com.google.zxing.common.reedsolomon.ReedSolomonEncoder: java.util.Vector cachedGenerators> = $r5;

        $r5 = r0.<com.google.zxing.common.reedsolomon.ReedSolomonEncoder: java.util.Vector cachedGenerators>;

        $r6 = new com.google.zxing.common.reedsolomon.GF256Poly;

        $r2 = newarray (int)[1];

        $r2[0] = 1;

        specialinvoke $r6.<com.google.zxing.common.reedsolomon.GF256Poly: void <init>(com.google.zxing.common.reedsolomon.GF256,int[])>($r1, $r2);

        virtualinvoke $r5.<java.util.Vector: void addElement(java.lang.Object)>($r6);

        return;
    }

    private com.google.zxing.common.reedsolomon.GF256Poly buildGenerator(int)
    {
        com.google.zxing.common.reedsolomon.GF256Poly $r5, $r6, $r9;
        java.util.Vector $r2, $r3;
        int[] $r7;
        int $i0, $i1, $i2;
        com.google.zxing.common.reedsolomon.GF256 $r1, $r8;
        java.lang.Object $r4;
        com.google.zxing.common.reedsolomon.ReedSolomonEncoder r0;

        r0 := @this: com.google.zxing.common.reedsolomon.ReedSolomonEncoder;

        $i0 := @parameter0: int;

        $r2 = r0.<com.google.zxing.common.reedsolomon.ReedSolomonEncoder: java.util.Vector cachedGenerators>;

        $i2 = virtualinvoke $r2.<java.util.Vector: int size()>();

        if $i0 < $i2 goto label2;

        $r2 = r0.<com.google.zxing.common.reedsolomon.ReedSolomonEncoder: java.util.Vector cachedGenerators>;

        $r3 = r0.<com.google.zxing.common.reedsolomon.ReedSolomonEncoder: java.util.Vector cachedGenerators>;

        $i2 = virtualinvoke $r3.<java.util.Vector: int size()>();

        $i1 = -1;

        $i2 = $i2 + $i1;

        $r4 = virtualinvoke $r2.<java.util.Vector: java.lang.Object elementAt(int)>($i2);

        $r2 = r0.<com.google.zxing.common.reedsolomon.ReedSolomonEncoder: java.util.Vector cachedGenerators>;

        $r5 = (com.google.zxing.common.reedsolomon.GF256Poly) $r4;

        $i2 = virtualinvoke $r2.<java.util.Vector: int size()>();

     label1:
        if $i2 > $i0 goto label2;

        $r9 = new com.google.zxing.common.reedsolomon.GF256Poly;

        $r1 = r0.<com.google.zxing.common.reedsolomon.ReedSolomonEncoder: com.google.zxing.common.reedsolomon.GF256 field>;

        $r7 = newarray (int)[2];

        $r7[0] = 1;

        $r8 = r0.<com.google.zxing.common.reedsolomon.ReedSolomonEncoder: com.google.zxing.common.reedsolomon.GF256 field>;

        $i1 = -1;

        $i1 = $i2 + $i1;

        $i1 = virtualinvoke $r8.<com.google.zxing.common.reedsolomon.GF256: int exp(int)>($i1);

        $r7[1] = $i1;

        specialinvoke $r9.<com.google.zxing.common.reedsolomon.GF256Poly: void <init>(com.google.zxing.common.reedsolomon.GF256,int[])>($r1, $r7);

        $r6 = virtualinvoke $r5.<com.google.zxing.common.reedsolomon.GF256Poly: com.google.zxing.common.reedsolomon.GF256Poly multiply(com.google.zxing.common.reedsolomon.GF256Poly)>($r9);

        $r5 = $r6;

        $r2 = r0.<com.google.zxing.common.reedsolomon.ReedSolomonEncoder: java.util.Vector cachedGenerators>;

        virtualinvoke $r2.<java.util.Vector: void addElement(java.lang.Object)>($r6);

        $i2 = $i2 + 1;

        goto label1;

     label2:
        $r2 = r0.<com.google.zxing.common.reedsolomon.ReedSolomonEncoder: java.util.Vector cachedGenerators>;

        $r4 = virtualinvoke $r2.<java.util.Vector: java.lang.Object elementAt(int)>($i0);

        $r5 = (com.google.zxing.common.reedsolomon.GF256Poly) $r4;

        return $r5;
    }

    public void encode(int[], int)
    {
        com.google.zxing.common.reedsolomon.GF256Poly[] $r7;
        java.lang.IllegalArgumentException $r2;
        com.google.zxing.common.reedsolomon.GF256Poly $r3, $r5;
        int[] $r1, $r4;
        int $i0, $i1, $i2, $i3;
        com.google.zxing.common.reedsolomon.GF256 $r6;
        com.google.zxing.common.reedsolomon.ReedSolomonEncoder r0;

        r0 := @this: com.google.zxing.common.reedsolomon.ReedSolomonEncoder;

        $r1 := @parameter0: int[];

        $i0 := @parameter1: int;

        if $i0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No error correction bytes");

        throw $r2;

     label1:
        $i1 = lengthof $r1;

        $i1 = $i1 - $i0;

        if $i1 > 0 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No data bytes provided");

        throw $r2;

     label2:
        $r3 = specialinvoke r0.<com.google.zxing.common.reedsolomon.ReedSolomonEncoder: com.google.zxing.common.reedsolomon.GF256Poly buildGenerator(int)>($i0);

        $r4 = newarray (int)[$i1];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r4, 0, $i1);

        $r5 = new com.google.zxing.common.reedsolomon.GF256Poly;

        $r6 = r0.<com.google.zxing.common.reedsolomon.ReedSolomonEncoder: com.google.zxing.common.reedsolomon.GF256 field>;

        specialinvoke $r5.<com.google.zxing.common.reedsolomon.GF256Poly: void <init>(com.google.zxing.common.reedsolomon.GF256,int[])>($r6, $r4);

        $r5 = virtualinvoke $r5.<com.google.zxing.common.reedsolomon.GF256Poly: com.google.zxing.common.reedsolomon.GF256Poly multiplyByMonomial(int,int)>($i0, 1);

        $r7 = virtualinvoke $r5.<com.google.zxing.common.reedsolomon.GF256Poly: com.google.zxing.common.reedsolomon.GF256Poly[] divide(com.google.zxing.common.reedsolomon.GF256Poly)>($r3);

        $r3 = $r7[1];

        $r4 = virtualinvoke $r3.<com.google.zxing.common.reedsolomon.GF256Poly: int[] getCoefficients()>();

        $i2 = lengthof $r4;

        $i0 = $i0 - $i2;

        $i2 = 0;

     label3:
        if $i2 >= $i0 goto label4;

        $i3 = $i1 + $i2;

        $r1[$i3] = 0;

        $i2 = $i2 + 1;

        goto label3;

     label4:
        $i0 = $i1 + $i0;

        $i1 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r1, $i0, $i1);

        return;
    }
}
