public class proguard.classfile.visitor.ClassPresenceFilter extends java.lang.Object implements proguard.classfile.visitor.ClassVisitor
{
    private final proguard.classfile.ClassPool classPool;
    private final proguard.classfile.visitor.ClassVisitor missingClassVisitor;
    private final proguard.classfile.visitor.ClassVisitor presentClassVisitor;

    public void <init>(proguard.classfile.ClassPool, proguard.classfile.visitor.ClassVisitor, proguard.classfile.visitor.ClassVisitor)
    {
        proguard.classfile.ClassPool $r1;
        proguard.classfile.visitor.ClassVisitor $r2, $r3;
        proguard.classfile.visitor.ClassPresenceFilter r0;

        r0 := @this: proguard.classfile.visitor.ClassPresenceFilter;

        $r1 := @parameter0: proguard.classfile.ClassPool;

        $r2 := @parameter1: proguard.classfile.visitor.ClassVisitor;

        $r3 := @parameter2: proguard.classfile.visitor.ClassVisitor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<proguard.classfile.visitor.ClassPresenceFilter: proguard.classfile.ClassPool classPool> = $r1;

        r0.<proguard.classfile.visitor.ClassPresenceFilter: proguard.classfile.visitor.ClassVisitor presentClassVisitor> = $r2;

        r0.<proguard.classfile.visitor.ClassPresenceFilter: proguard.classfile.visitor.ClassVisitor missingClassVisitor> = $r3;

        return;
    }

    private proguard.classfile.visitor.ClassVisitor classFileVisitor(proguard.classfile.Clazz)
    {
        proguard.classfile.ClassPool $r2;
        proguard.classfile.Clazz $r1;
        proguard.classfile.visitor.ClassVisitor r4;
        java.lang.String $r3;
        proguard.classfile.visitor.ClassPresenceFilter r0;

        r0 := @this: proguard.classfile.visitor.ClassPresenceFilter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 = r0.<proguard.classfile.visitor.ClassPresenceFilter: proguard.classfile.ClassPool classPool>;

        $r3 = interfaceinvoke $r1.<proguard.classfile.Clazz: java.lang.String getName()>();

        $r1 = virtualinvoke $r2.<proguard.classfile.ClassPool: proguard.classfile.Clazz getClass(java.lang.String)>($r3);

        if $r1 == null goto label1;

        r4 = r0.<proguard.classfile.visitor.ClassPresenceFilter: proguard.classfile.visitor.ClassVisitor presentClassVisitor>;

        return r4;

     label1:
        r4 = r0.<proguard.classfile.visitor.ClassPresenceFilter: proguard.classfile.visitor.ClassVisitor missingClassVisitor>;

        return r4;
    }

    public void visitLibraryClass(proguard.classfile.LibraryClass)
    {
        proguard.classfile.LibraryClass $r1;
        proguard.classfile.visitor.ClassVisitor $r2;
        proguard.classfile.visitor.ClassPresenceFilter r0;

        r0 := @this: proguard.classfile.visitor.ClassPresenceFilter;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        $r2 = specialinvoke r0.<proguard.classfile.visitor.ClassPresenceFilter: proguard.classfile.visitor.ClassVisitor classFileVisitor(proguard.classfile.Clazz)>($r1);

        if $r2 == null goto label1;

        interfaceinvoke $r2.<proguard.classfile.visitor.ClassVisitor: void visitLibraryClass(proguard.classfile.LibraryClass)>($r1);

     label1:
        return;
    }

    public void visitProgramClass(proguard.classfile.ProgramClass)
    {
        proguard.classfile.ProgramClass $r1;
        proguard.classfile.visitor.ClassVisitor $r2;
        proguard.classfile.visitor.ClassPresenceFilter r0;

        r0 := @this: proguard.classfile.visitor.ClassPresenceFilter;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 = specialinvoke r0.<proguard.classfile.visitor.ClassPresenceFilter: proguard.classfile.visitor.ClassVisitor classFileVisitor(proguard.classfile.Clazz)>($r1);

        if $r2 == null goto label1;

        interfaceinvoke $r2.<proguard.classfile.visitor.ClassVisitor: void visitProgramClass(proguard.classfile.ProgramClass)>($r1);

     label1:
        return;
    }
}
