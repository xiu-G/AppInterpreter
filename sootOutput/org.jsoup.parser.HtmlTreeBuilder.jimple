class org.jsoup.parser.HtmlTreeBuilder extends org.jsoup.parser.TreeBuilder
{
    static final boolean $assertionsDisabled;
    private boolean baseUriSetFromDoc;
    private org.jsoup.nodes.Element contextElement;
    private org.jsoup.nodes.Element formElement;
    private org.jsoup.helper.DescendableLinkedList formattingElements;
    private boolean fosterInserts;
    private boolean fragmentParsing;
    private boolean framesetOk;
    private org.jsoup.nodes.Element headElement;
    private org.jsoup.parser.HtmlTreeBuilderState originalState;
    private java.util.List pendingTableCharacters;
    private org.jsoup.parser.HtmlTreeBuilderState state;

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0;

        $r0 = class "Lorg/jsoup/parser/HtmlTreeBuilder;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label2;

        $z0 = 1;

     label1:
        <org.jsoup.parser.HtmlTreeBuilder: boolean $assertionsDisabled> = $z0;

        return;

     label2:
        $z0 = 0;

        goto label1;
    }

    void <init>()
    {
        org.jsoup.helper.DescendableLinkedList $r1;
        org.jsoup.parser.HtmlTreeBuilder r0;
        java.util.ArrayList $r2;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        specialinvoke r0.<org.jsoup.parser.TreeBuilder: void <init>()>();

        r0.<org.jsoup.parser.HtmlTreeBuilder: boolean baseUriSetFromDoc> = 0;

        $r1 = new org.jsoup.helper.DescendableLinkedList;

        specialinvoke $r1.<org.jsoup.helper.DescendableLinkedList: void <init>()>();

        r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList formattingElements> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.jsoup.parser.HtmlTreeBuilder: java.util.List pendingTableCharacters> = $r2;

        r0.<org.jsoup.parser.HtmlTreeBuilder: boolean framesetOk> = 1;

        r0.<org.jsoup.parser.HtmlTreeBuilder: boolean fosterInserts> = 0;

        r0.<org.jsoup.parser.HtmlTreeBuilder: boolean fragmentParsing> = 0;

        return;
    }

    private transient void clearStackToContext(java.lang.String[])
    {
        java.util.Iterator $r3;
        org.jsoup.helper.DescendableLinkedList $r2;
        java.lang.String[] $r1;
        org.jsoup.nodes.Element r5;
        java.lang.Object $r4;
        java.lang.String $r6;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 := @parameter0: java.lang.String[];

        $r2 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList stack>;

        $r3 = virtualinvoke $r2.<org.jsoup.helper.DescendableLinkedList: java.util.Iterator descendingIterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.jsoup.nodes.Element) $r4;

        $r6 = virtualinvoke r5.<org.jsoup.nodes.Element: java.lang.String nodeName()>();

        $z0 = staticinvoke <org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>($r6, $r1);

        if $z0 != 0 goto label3;

        $r6 = virtualinvoke r5.<org.jsoup.nodes.Element: java.lang.String nodeName()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("html");

        if $z0 == 0 goto label2;

        return;

     label2:
        interfaceinvoke $r3.<java.util.Iterator: void remove()>();

        goto label1;

     label3:
        return;
    }

    private boolean inSpecificScope(java.lang.String, java.lang.String[], java.lang.String[])
    {
        java.lang.String[] $r2, $r3, $r4;
        java.lang.String $r1;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String[];

        $r3 := @parameter2: java.lang.String[];

        $r4 = newarray (java.lang.String)[1];

        $r4[0] = $r1;

        $z0 = specialinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: boolean inSpecificScope(java.lang.String[],java.lang.String[],java.lang.String[])>($r4, $r2, $r3);

        return $z0;
    }

    private boolean inSpecificScope(java.lang.String[], java.lang.String[], java.lang.String[])
    {
        java.util.Iterator $r5;
        org.jsoup.helper.DescendableLinkedList $r4;
        java.lang.String[] $r1, $r2, $r3;
        org.jsoup.nodes.Element r7;
        java.lang.Object $r6;
        java.lang.String $r8;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 := @parameter0: java.lang.String[];

        $r2 := @parameter1: java.lang.String[];

        $r3 := @parameter2: java.lang.String[];

        $r4 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList stack>;

        $r5 = virtualinvoke $r4.<org.jsoup.helper.DescendableLinkedList: java.util.Iterator descendingIterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.jsoup.nodes.Element) $r6;

        $r8 = virtualinvoke r7.<org.jsoup.nodes.Element: java.lang.String nodeName()>();

        $z0 = staticinvoke <org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>($r8, $r1);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $z0 = staticinvoke <org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>($r8, $r2);

        if $z0 != 0 goto label4;

        if $r3 == null goto label1;

        $z0 = staticinvoke <org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>($r8, $r3);

        if $z0 == 0 goto label1;

        return 0;

     label3:
        staticinvoke <org.jsoup.helper.Validate: void fail(java.lang.String)>("Should not be reachable");

     label4:
        return 0;
    }

    private void insertNode(org.jsoup.nodes.Node)
    {
        org.jsoup.nodes.Node $r1;
        org.jsoup.helper.DescendableLinkedList $r2;
        org.jsoup.nodes.Document $r3;
        org.jsoup.nodes.Element $r4;
        int $i0;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 := @parameter0: org.jsoup.nodes.Node;

        $r2 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList stack>;

        $i0 = virtualinvoke $r2.<org.jsoup.helper.DescendableLinkedList: int size()>();

        if $i0 != 0 goto label1;

        $r3 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Document doc>;

        virtualinvoke $r3.<org.jsoup.nodes.Document: org.jsoup.nodes.Element appendChild(org.jsoup.nodes.Node)>($r1);

        return;

     label1:
        $z0 = virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: boolean isFosterInserts()>();

        if $z0 == 0 goto label2;

        virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: void insertInFosterParent(org.jsoup.nodes.Node)>($r1);

        return;

     label2:
        $r4 = virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element currentElement()>();

        virtualinvoke $r4.<org.jsoup.nodes.Element: org.jsoup.nodes.Element appendChild(org.jsoup.nodes.Node)>($r1);

        return;
    }

    private boolean isElementInQueue(org.jsoup.helper.DescendableLinkedList, org.jsoup.nodes.Element)
    {
        java.util.Iterator $r3;
        org.jsoup.helper.DescendableLinkedList r1;
        org.jsoup.nodes.Element $r2, r5;
        java.lang.Object $r4;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        r1 := @parameter0: org.jsoup.helper.DescendableLinkedList;

        $r2 := @parameter1: org.jsoup.nodes.Element;

        $r3 = virtualinvoke r1.<org.jsoup.helper.DescendableLinkedList: java.util.Iterator descendingIterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.jsoup.nodes.Element) $r4;

        if r5 != $r2 goto label1;

        return 1;

     label2:
        return 0;
    }

    private boolean isSameFormattingElement(org.jsoup.nodes.Element, org.jsoup.nodes.Element)
    {
        org.jsoup.nodes.Attributes $r5, $r6;
        org.jsoup.nodes.Element $r1, $r2;
        java.lang.String $r3, $r4;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 := @parameter0: org.jsoup.nodes.Element;

        $r2 := @parameter1: org.jsoup.nodes.Element;

        $r3 = virtualinvoke $r1.<org.jsoup.nodes.Element: java.lang.String nodeName()>();

        $r4 = virtualinvoke $r2.<org.jsoup.nodes.Element: java.lang.String nodeName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke $r1.<org.jsoup.nodes.Element: org.jsoup.nodes.Attributes attributes()>();

        $r6 = virtualinvoke $r2.<org.jsoup.nodes.Element: org.jsoup.nodes.Attributes attributes()>();

        $z0 = virtualinvoke $r5.<org.jsoup.nodes.Attributes: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private void replaceInQueue(java.util.LinkedList, org.jsoup.nodes.Element, org.jsoup.nodes.Element)
    {
        org.jsoup.nodes.Element $r2, $r3;
        int $i0;
        java.util.LinkedList r1;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        r1 := @parameter0: java.util.LinkedList;

        $r2 := @parameter1: org.jsoup.nodes.Element;

        $r3 := @parameter2: org.jsoup.nodes.Element;

        $i0 = virtualinvoke r1.<java.util.LinkedList: int lastIndexOf(java.lang.Object)>($r2);

        if $i0 == -1 goto label2;

        $z0 = 1;

     label1:
        staticinvoke <org.jsoup.helper.Validate: void isTrue(boolean)>($z0);

        virtualinvoke r1.<java.util.LinkedList: java.lang.Object remove(int)>($i0);

        virtualinvoke r1.<java.util.LinkedList: void add(int,java.lang.Object)>($i0, $r3);

        return;

     label2:
        $z0 = 0;

        goto label1;
    }

    org.jsoup.nodes.Element aboveOnStack(org.jsoup.nodes.Element)
    {
        java.util.Iterator $r4;
        org.jsoup.helper.DescendableLinkedList $r3;
        java.lang.AssertionError $r2;
        org.jsoup.nodes.Element $r1, r6;
        java.lang.Object $r5;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 := @parameter0: org.jsoup.nodes.Element;

        $z0 = <org.jsoup.parser.HtmlTreeBuilder: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: boolean onStack(org.jsoup.nodes.Element)>($r1);

        if $z0 != 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        $r3 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList stack>;

        $r4 = virtualinvoke $r3.<org.jsoup.helper.DescendableLinkedList: java.util.Iterator descendingIterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.jsoup.nodes.Element) $r5;

        if r6 != $r1 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r1 = (org.jsoup.nodes.Element) $r5;

        return $r1;

     label3:
        return null;
    }

    void clearFormattingElementsToLastMarker()
    {
        org.jsoup.helper.DescendableLinkedList $r1;
        org.jsoup.nodes.Element r3;
        java.lang.Object $r2;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

     label1:
        $r1 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList formattingElements>;

        $z0 = virtualinvoke $r1.<org.jsoup.helper.DescendableLinkedList: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $r1 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList formattingElements>;

        $r2 = virtualinvoke $r1.<org.jsoup.helper.DescendableLinkedList: java.lang.Object peekLast()>();

        r3 = (org.jsoup.nodes.Element) $r2;

        $r1 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList formattingElements>;

        virtualinvoke $r1.<org.jsoup.helper.DescendableLinkedList: java.lang.Object removeLast()>();

        if r3 != null goto label1;

     label2:
        return;
    }

    void clearStackToTableBodyContext()
    {
        java.lang.String[] $r1;
        org.jsoup.parser.HtmlTreeBuilder r0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 = newarray (java.lang.String)[3];

        $r1[0] = "tbody";

        $r1[1] = "tfoot";

        $r1[2] = "thead";

        specialinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: void clearStackToContext(java.lang.String[])>($r1);

        return;
    }

    void clearStackToTableContext()
    {
        java.lang.String[] $r1;
        org.jsoup.parser.HtmlTreeBuilder r0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = "table";

        specialinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: void clearStackToContext(java.lang.String[])>($r1);

        return;
    }

    void clearStackToTableRowContext()
    {
        java.lang.String[] $r1;
        org.jsoup.parser.HtmlTreeBuilder r0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = "tr";

        specialinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: void clearStackToContext(java.lang.String[])>($r1);

        return;
    }

    void error(org.jsoup.parser.HtmlTreeBuilderState)
    {
        org.jsoup.parser.ParseError $r2;
        java.lang.Object[] $r5;
        org.jsoup.parser.Token $r6;
        org.jsoup.parser.ParseErrorList $r3;
        org.jsoup.parser.HtmlTreeBuilderState $r1;
        org.jsoup.parser.CharacterReader $r4;
        int $i0;
        java.lang.String $r7;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 := @parameter0: org.jsoup.parser.HtmlTreeBuilderState;

        $r3 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.parser.ParseErrorList errors>;

        $z0 = virtualinvoke $r3.<org.jsoup.parser.ParseErrorList: boolean canAddError()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.parser.ParseErrorList errors>;

        $r2 = new org.jsoup.parser.ParseError;

        $r4 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.parser.CharacterReader reader>;

        $i0 = virtualinvoke $r4.<org.jsoup.parser.CharacterReader: int pos()>();

        $r5 = newarray (java.lang.Object)[2];

        $r6 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.parser.Token currentToken>;

        $r7 = virtualinvoke $r6.<org.jsoup.parser.Token: java.lang.String tokenType()>();

        $r5[0] = $r7;

        $r5[1] = $r1;

        specialinvoke $r2.<org.jsoup.parser.ParseError: void <init>(int,java.lang.String,java.lang.Object[])>($i0, "Unexpected token [%s] when in state [%s]", $r5);

        virtualinvoke $r3.<org.jsoup.parser.ParseErrorList: boolean add(java.lang.Object)>($r2);

     label1:
        return;
    }

    void framesetOk(boolean)
    {
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $z0 := @parameter0: boolean;

        r0.<org.jsoup.parser.HtmlTreeBuilder: boolean framesetOk> = $z0;

        return;
    }

    boolean framesetOk()
    {
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        z0 = r0.<org.jsoup.parser.HtmlTreeBuilder: boolean framesetOk>;

        return z0;
    }

    void generateImpliedEndTags()
    {
        org.jsoup.parser.HtmlTreeBuilder r0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: void generateImpliedEndTags(java.lang.String)>(null);

        return;
    }

    void generateImpliedEndTags(java.lang.String)
    {
        org.jsoup.nodes.Element $r2;
        java.lang.String[] $r4;
        java.lang.String $r1, $r3;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 := @parameter0: java.lang.String;

     label1:
        if $r1 == null goto label2;

        $r2 = virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element currentElement()>();

        $r3 = virtualinvoke $r2.<org.jsoup.nodes.Element: java.lang.String nodeName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label2;

        $r2 = virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element currentElement()>();

        $r3 = virtualinvoke $r2.<org.jsoup.nodes.Element: java.lang.String nodeName()>();

        $r4 = newarray (java.lang.String)[8];

        $r4[0] = "dd";

        $r4[1] = "dt";

        $r4[2] = "li";

        $r4[3] = "option";

        $r4[4] = "optgroup";

        $r4[5] = "p";

        $r4[6] = "rp";

        $r4[7] = "rt";

        $z0 = staticinvoke <org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>($r3, $r4);

        if $z0 == 0 goto label2;

        virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element pop()>();

        goto label1;

     label2:
        return;
    }

    org.jsoup.nodes.Element getActiveFormattingElement(java.lang.String)
    {
        java.util.Iterator $r3;
        org.jsoup.helper.DescendableLinkedList $r2;
        org.jsoup.nodes.Element r5;
        java.lang.Object $r4;
        java.lang.String $r1, $r6;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList formattingElements>;

        $r3 = virtualinvoke $r2.<org.jsoup.helper.DescendableLinkedList: java.util.Iterator descendingIterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.jsoup.nodes.Element) $r4;

        if r5 != null goto label3;

     label2:
        return null;

     label3:
        $r6 = virtualinvoke r5.<org.jsoup.nodes.Element: java.lang.String nodeName()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        return r5;
    }

    java.lang.String getBaseUri()
    {
        java.lang.String r1;
        org.jsoup.parser.HtmlTreeBuilder r0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        r1 = r0.<org.jsoup.parser.HtmlTreeBuilder: java.lang.String baseUri>;

        return r1;
    }

    org.jsoup.nodes.Document getDocument()
    {
        org.jsoup.parser.HtmlTreeBuilder r0;
        org.jsoup.nodes.Document r1;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        r1 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Document doc>;

        return r1;
    }

    org.jsoup.nodes.Element getFormElement()
    {
        org.jsoup.parser.HtmlTreeBuilder r0;
        org.jsoup.nodes.Element r1;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        r1 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element formElement>;

        return r1;
    }

    org.jsoup.nodes.Element getFromStack(java.lang.String)
    {
        java.util.Iterator $r3;
        org.jsoup.helper.DescendableLinkedList $r2;
        org.jsoup.nodes.Element r5;
        java.lang.Object $r4;
        java.lang.String $r1, $r6;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList stack>;

        $r3 = virtualinvoke $r2.<org.jsoup.helper.DescendableLinkedList: java.util.Iterator descendingIterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.jsoup.nodes.Element) $r4;

        $r6 = virtualinvoke r5.<org.jsoup.nodes.Element: java.lang.String nodeName()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        return r5;

     label2:
        return null;
    }

    org.jsoup.nodes.Element getHeadElement()
    {
        org.jsoup.parser.HtmlTreeBuilder r0;
        org.jsoup.nodes.Element r1;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        r1 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element headElement>;

        return r1;
    }

    java.util.List getPendingTableCharacters()
    {
        java.util.List r1;
        org.jsoup.parser.HtmlTreeBuilder r0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        r1 = r0.<org.jsoup.parser.HtmlTreeBuilder: java.util.List pendingTableCharacters>;

        return r1;
    }

    org.jsoup.helper.DescendableLinkedList getStack()
    {
        org.jsoup.helper.DescendableLinkedList r1;
        org.jsoup.parser.HtmlTreeBuilder r0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        r1 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList stack>;

        return r1;
    }

    boolean inButtonScope(java.lang.String)
    {
        java.lang.String[] $r2;
        java.lang.String $r1;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 := @parameter0: java.lang.String;

        $r2 = newarray (java.lang.String)[1];

        $r2[0] = "button";

        $z0 = virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: boolean inScope(java.lang.String,java.lang.String[])>($r1, $r2);

        return $z0;
    }

    boolean inListItemScope(java.lang.String)
    {
        java.lang.String[] $r2;
        java.lang.String $r1;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 := @parameter0: java.lang.String;

        $r2 = newarray (java.lang.String)[2];

        $r2[0] = "ol";

        $r2[1] = "ul";

        $z0 = virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: boolean inScope(java.lang.String,java.lang.String[])>($r1, $r2);

        return $z0;
    }

    boolean inScope(java.lang.String)
    {
        java.lang.String $r1;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: boolean inScope(java.lang.String,java.lang.String[])>($r1, null);

        return $z0;
    }

    boolean inScope(java.lang.String, java.lang.String[])
    {
        java.lang.String[] $r2, $r3;
        java.lang.String $r1;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String[];

        $r3 = newarray (java.lang.String)[8];

        $r3[0] = "applet";

        $r3[1] = "caption";

        $r3[2] = "html";

        $r3[3] = "table";

        $r3[4] = "td";

        $r3[5] = "th";

        $r3[6] = "marquee";

        $r3[7] = "object";

        $z0 = specialinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: boolean inSpecificScope(java.lang.String,java.lang.String[],java.lang.String[])>($r1, $r3, $r2);

        return $z0;
    }

    boolean inScope(java.lang.String[])
    {
        java.lang.String[] $r1, $r2;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 := @parameter0: java.lang.String[];

        $r2 = newarray (java.lang.String)[8];

        $r2[0] = "applet";

        $r2[1] = "caption";

        $r2[2] = "html";

        $r2[3] = "table";

        $r2[4] = "td";

        $r2[5] = "th";

        $r2[6] = "marquee";

        $r2[7] = "object";

        $z0 = specialinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: boolean inSpecificScope(java.lang.String[],java.lang.String[],java.lang.String[])>($r1, $r2, null);

        return $z0;
    }

    boolean inSelectScope(java.lang.String)
    {
        java.util.Iterator $r3;
        org.jsoup.helper.DescendableLinkedList $r2;
        java.lang.String[] $r7;
        org.jsoup.nodes.Element r5;
        java.lang.Object $r4;
        java.lang.String $r1, $r6;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList stack>;

        $r3 = virtualinvoke $r2.<org.jsoup.helper.DescendableLinkedList: java.util.Iterator descendingIterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.jsoup.nodes.Element) $r4;

        $r6 = virtualinvoke r5.<org.jsoup.nodes.Element: java.lang.String nodeName()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $r7 = newarray (java.lang.String)[2];

        $r7[0] = "optgroup";

        $r7[1] = "option";

        $z0 = staticinvoke <org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>($r6, $r7);

        if $z0 != 0 goto label1;

        return 0;

     label3:
        staticinvoke <org.jsoup.helper.Validate: void fail(java.lang.String)>("Should not be reachable");

        return 0;
    }

    boolean inTableScope(java.lang.String)
    {
        java.lang.String[] $r2;
        java.lang.String $r1;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 := @parameter0: java.lang.String;

        $r2 = newarray (java.lang.String)[2];

        $r2[0] = "html";

        $r2[1] = "table";

        $z0 = specialinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: boolean inSpecificScope(java.lang.String,java.lang.String[],java.lang.String[])>($r1, $r2, null);

        return $z0;
    }

    org.jsoup.nodes.Element insert(java.lang.String)
    {
        org.jsoup.nodes.Element r2;
        java.lang.String $r1;
        org.jsoup.parser.Tag $r3;
        org.jsoup.parser.HtmlTreeBuilder r0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 := @parameter0: java.lang.String;

        r2 = new org.jsoup.nodes.Element;

        $r3 = staticinvoke <org.jsoup.parser.Tag: org.jsoup.parser.Tag valueOf(java.lang.String)>($r1);

        $r1 = r0.<org.jsoup.parser.HtmlTreeBuilder: java.lang.String baseUri>;

        specialinvoke r2.<org.jsoup.nodes.Element: void <init>(org.jsoup.parser.Tag,java.lang.String)>($r3, $r1);

        virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: void insert(org.jsoup.nodes.Element)>(r2);

        return r2;
    }

    org.jsoup.nodes.Element insert(org.jsoup.parser.Token$StartTag)
    {
        org.jsoup.nodes.Attributes $r8;
        org.jsoup.helper.DescendableLinkedList $r3;
        org.jsoup.parser.Token$StartTag $r1;
        org.jsoup.parser.Tokeniser $r4;
        org.jsoup.parser.Tag $r7;
        org.jsoup.parser.Token$EndTag $r5;
        org.jsoup.nodes.Element $r2;
        java.lang.String $r6;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 := @parameter0: org.jsoup.parser.Token$StartTag;

        $z0 = virtualinvoke $r1.<org.jsoup.parser.Token$StartTag: boolean isSelfClosing()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insertEmpty(org.jsoup.parser.Token$StartTag)>($r1);

        $r3 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList stack>;

        virtualinvoke $r3.<org.jsoup.helper.DescendableLinkedList: boolean add(java.lang.Object)>($r2);

        $r4 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.parser.Tokeniser tokeniser>;

        $r5 = new org.jsoup.parser.Token$EndTag;

        $r6 = virtualinvoke $r2.<org.jsoup.nodes.Element: java.lang.String tagName()>();

        specialinvoke $r5.<org.jsoup.parser.Token$EndTag: void <init>(java.lang.String)>($r6);

        virtualinvoke $r4.<org.jsoup.parser.Tokeniser: void emit(org.jsoup.parser.Token)>($r5);

        return $r2;

     label1:
        $r2 = new org.jsoup.nodes.Element;

        $r6 = virtualinvoke $r1.<org.jsoup.parser.Token$StartTag: java.lang.String name()>();

        $r7 = staticinvoke <org.jsoup.parser.Tag: org.jsoup.parser.Tag valueOf(java.lang.String)>($r6);

        $r6 = r0.<org.jsoup.parser.HtmlTreeBuilder: java.lang.String baseUri>;

        $r8 = $r1.<org.jsoup.parser.Token$StartTag: org.jsoup.nodes.Attributes attributes>;

        specialinvoke $r2.<org.jsoup.nodes.Element: void <init>(org.jsoup.parser.Tag,java.lang.String,org.jsoup.nodes.Attributes)>($r7, $r6, $r8);

        virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: void insert(org.jsoup.nodes.Element)>($r2);

        return $r2;
    }

    void insert(org.jsoup.nodes.Element)
    {
        org.jsoup.helper.DescendableLinkedList $r2;
        org.jsoup.parser.HtmlTreeBuilder r0;
        org.jsoup.nodes.Element $r1;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 := @parameter0: org.jsoup.nodes.Element;

        specialinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: void insertNode(org.jsoup.nodes.Node)>($r1);

        $r2 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList stack>;

        virtualinvoke $r2.<org.jsoup.helper.DescendableLinkedList: boolean add(java.lang.Object)>($r1);

        return;
    }

    void insert(org.jsoup.parser.Token$Character)
    {
        org.jsoup.nodes.TextNode $r8;
        java.lang.String[] $r4;
        org.jsoup.parser.Token$Character $r1;
        org.jsoup.nodes.Node r5;
        org.jsoup.nodes.Element $r2;
        java.lang.String $r3, $r6;
        org.jsoup.nodes.DataNode $r7;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 := @parameter0: org.jsoup.parser.Token$Character;

        $r2 = virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element currentElement()>();

        $r3 = virtualinvoke $r2.<org.jsoup.nodes.Element: java.lang.String tagName()>();

        $r4 = newarray (java.lang.String)[2];

        $r4[0] = "script";

        $r4[1] = "style";

        $z0 = staticinvoke <org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>($r3, $r4);

        if $z0 == 0 goto label2;

        $r7 = new org.jsoup.nodes.DataNode;

        r5 = $r7;

        $r3 = virtualinvoke $r1.<org.jsoup.parser.Token$Character: java.lang.String getData()>();

        $r6 = r0.<org.jsoup.parser.HtmlTreeBuilder: java.lang.String baseUri>;

        specialinvoke $r7.<org.jsoup.nodes.DataNode: void <init>(java.lang.String,java.lang.String)>($r3, $r6);

     label1:
        $r2 = virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element currentElement()>();

        virtualinvoke $r2.<org.jsoup.nodes.Element: org.jsoup.nodes.Element appendChild(org.jsoup.nodes.Node)>(r5);

        return;

     label2:
        $r8 = new org.jsoup.nodes.TextNode;

        r5 = $r8;

        $r3 = virtualinvoke $r1.<org.jsoup.parser.Token$Character: java.lang.String getData()>();

        $r6 = r0.<org.jsoup.parser.HtmlTreeBuilder: java.lang.String baseUri>;

        specialinvoke $r8.<org.jsoup.nodes.TextNode: void <init>(java.lang.String,java.lang.String)>($r3, $r6);

        goto label1;
    }

    void insert(org.jsoup.parser.Token$Comment)
    {
        org.jsoup.parser.Token$Comment $r1;
        org.jsoup.nodes.Comment r2;
        java.lang.String $r3, $r4;
        org.jsoup.parser.HtmlTreeBuilder r0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 := @parameter0: org.jsoup.parser.Token$Comment;

        r2 = new org.jsoup.nodes.Comment;

        $r4 = virtualinvoke $r1.<org.jsoup.parser.Token$Comment: java.lang.String getData()>();

        $r3 = r0.<org.jsoup.parser.HtmlTreeBuilder: java.lang.String baseUri>;

        specialinvoke r2.<org.jsoup.nodes.Comment: void <init>(java.lang.String,java.lang.String)>($r4, $r3);

        specialinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: void insertNode(org.jsoup.nodes.Node)>(r2);

        return;
    }

    org.jsoup.nodes.Element insertEmpty(org.jsoup.parser.Token$StartTag)
    {
        org.jsoup.nodes.Attributes $r3;
        org.jsoup.parser.Token$StartTag $r1;
        org.jsoup.parser.Tokeniser $r6;
        org.jsoup.parser.Tag $r5;
        org.jsoup.nodes.Element r2;
        java.lang.String $r4;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 := @parameter0: org.jsoup.parser.Token$StartTag;

        $r4 = virtualinvoke $r1.<org.jsoup.parser.Token$StartTag: java.lang.String name()>();

        $r5 = staticinvoke <org.jsoup.parser.Tag: org.jsoup.parser.Tag valueOf(java.lang.String)>($r4);

        r2 = new org.jsoup.nodes.Element;

        $r4 = r0.<org.jsoup.parser.HtmlTreeBuilder: java.lang.String baseUri>;

        $r3 = $r1.<org.jsoup.parser.Token$StartTag: org.jsoup.nodes.Attributes attributes>;

        specialinvoke r2.<org.jsoup.nodes.Element: void <init>(org.jsoup.parser.Tag,java.lang.String,org.jsoup.nodes.Attributes)>($r5, $r4, $r3);

        specialinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: void insertNode(org.jsoup.nodes.Node)>(r2);

        $z0 = virtualinvoke $r1.<org.jsoup.parser.Token$StartTag: boolean isSelfClosing()>();

        if $z0 == 0 goto label2;

        $z0 = virtualinvoke $r5.<org.jsoup.parser.Tag: boolean isKnownTag()>();

        if $z0 == 0 goto label1;

        $z0 = virtualinvoke $r5.<org.jsoup.parser.Tag: boolean isSelfClosing()>();

        if $z0 == 0 goto label2;

        $r6 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.parser.Tokeniser tokeniser>;

        virtualinvoke $r6.<org.jsoup.parser.Tokeniser: void acknowledgeSelfClosingFlag()>();

        return r2;

     label1:
        virtualinvoke $r5.<org.jsoup.parser.Tag: org.jsoup.parser.Tag setSelfClosing()>();

        $r6 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.parser.Tokeniser tokeniser>;

        virtualinvoke $r6.<org.jsoup.parser.Tokeniser: void acknowledgeSelfClosingFlag()>();

     label2:
        return r2;
    }

    void insertInFosterParent(org.jsoup.nodes.Node)
    {
        org.jsoup.nodes.Node $r1;
        org.jsoup.helper.DescendableLinkedList $r4;
        org.jsoup.nodes.Element $r2, $r3;
        java.lang.Object $r5;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 := @parameter0: org.jsoup.nodes.Node;

        $r2 = virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element getFromStack(java.lang.String)>("table");

        z0 = 0;

        if $r2 == null goto label3;

        $r3 = virtualinvoke $r2.<org.jsoup.nodes.Element: org.jsoup.nodes.Element parent()>();

        if $r3 == null goto label2;

        $r3 = virtualinvoke $r2.<org.jsoup.nodes.Element: org.jsoup.nodes.Element parent()>();

        z0 = 1;

     label1:
        if z0 == 0 goto label4;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r2);

        virtualinvoke $r2.<org.jsoup.nodes.Element: org.jsoup.nodes.Element before(org.jsoup.nodes.Node)>($r1);

        return;

     label2:
        $r3 = virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element aboveOnStack(org.jsoup.nodes.Element)>($r2);

        goto label1;

     label3:
        $r4 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList stack>;

        $r5 = virtualinvoke $r4.<org.jsoup.helper.DescendableLinkedList: java.lang.Object get(int)>(0);

        $r3 = (org.jsoup.nodes.Element) $r5;

        goto label1;

     label4:
        virtualinvoke $r3.<org.jsoup.nodes.Element: org.jsoup.nodes.Element appendChild(org.jsoup.nodes.Node)>($r1);

        return;
    }

    void insertMarkerToFormattingElements()
    {
        org.jsoup.helper.DescendableLinkedList $r1;
        org.jsoup.parser.HtmlTreeBuilder r0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList formattingElements>;

        virtualinvoke $r1.<org.jsoup.helper.DescendableLinkedList: boolean add(java.lang.Object)>(null);

        return;
    }

    void insertOnStackAfter(org.jsoup.nodes.Element, org.jsoup.nodes.Element)
    {
        org.jsoup.helper.DescendableLinkedList $r3;
        org.jsoup.nodes.Element $r1, $r2;
        int $i0;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 := @parameter0: org.jsoup.nodes.Element;

        $r2 := @parameter1: org.jsoup.nodes.Element;

        $r3 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList stack>;

        $i0 = virtualinvoke $r3.<org.jsoup.helper.DescendableLinkedList: int lastIndexOf(java.lang.Object)>($r1);

        if $i0 == -1 goto label2;

        $z0 = 1;

     label1:
        staticinvoke <org.jsoup.helper.Validate: void isTrue(boolean)>($z0);

        $r3 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList stack>;

        $i0 = $i0 + 1;

        virtualinvoke $r3.<org.jsoup.helper.DescendableLinkedList: void add(int,java.lang.Object)>($i0, $r2);

        return;

     label2:
        $z0 = 0;

        goto label1;
    }

    boolean isFosterInserts()
    {
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        z0 = r0.<org.jsoup.parser.HtmlTreeBuilder: boolean fosterInserts>;

        return z0;
    }

    boolean isFragmentParsing()
    {
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        z0 = r0.<org.jsoup.parser.HtmlTreeBuilder: boolean fragmentParsing>;

        return z0;
    }

    boolean isInActiveFormattingElements(org.jsoup.nodes.Element)
    {
        org.jsoup.helper.DescendableLinkedList $r2;
        org.jsoup.nodes.Element $r1;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 := @parameter0: org.jsoup.nodes.Element;

        $r2 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList formattingElements>;

        $z0 = specialinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: boolean isElementInQueue(org.jsoup.helper.DescendableLinkedList,org.jsoup.nodes.Element)>($r2, $r1);

        return $z0;
    }

    boolean isSpecial(org.jsoup.nodes.Element)
    {
        org.jsoup.nodes.Element $r1;
        java.lang.String[] $r3;
        java.lang.String $r2;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 := @parameter0: org.jsoup.nodes.Element;

        $r2 = virtualinvoke $r1.<org.jsoup.nodes.Element: java.lang.String nodeName()>();

        $r3 = newarray (java.lang.String)[79];

        $r3[0] = "address";

        $r3[1] = "applet";

        $r3[2] = "area";

        $r3[3] = "article";

        $r3[4] = "aside";

        $r3[5] = "base";

        $r3[6] = "basefont";

        $r3[7] = "bgsound";

        $r3[8] = "blockquote";

        $r3[9] = "body";

        $r3[10] = "br";

        $r3[11] = "button";

        $r3[12] = "caption";

        $r3[13] = "center";

        $r3[14] = "col";

        $r3[15] = "colgroup";

        $r3[16] = "command";

        $r3[17] = "dd";

        $r3[18] = "details";

        $r3[19] = "dir";

        $r3[20] = "div";

        $r3[21] = "dl";

        $r3[22] = "dt";

        $r3[23] = "embed";

        $r3[24] = "fieldset";

        $r3[25] = "figcaption";

        $r3[26] = "figure";

        $r3[27] = "footer";

        $r3[28] = "form";

        $r3[29] = "frame";

        $r3[30] = "frameset";

        $r3[31] = "h1";

        $r3[32] = "h2";

        $r3[33] = "h3";

        $r3[34] = "h4";

        $r3[35] = "h5";

        $r3[36] = "h6";

        $r3[37] = "head";

        $r3[38] = "header";

        $r3[39] = "hgroup";

        $r3[40] = "hr";

        $r3[41] = "html";

        $r3[42] = "iframe";

        $r3[43] = "img";

        $r3[44] = "input";

        $r3[45] = "isindex";

        $r3[46] = "li";

        $r3[47] = "link";

        $r3[48] = "listing";

        $r3[49] = "marquee";

        $r3[50] = "menu";

        $r3[51] = "meta";

        $r3[52] = "nav";

        $r3[53] = "noembed";

        $r3[54] = "noframes";

        $r3[55] = "noscript";

        $r3[56] = "object";

        $r3[57] = "ol";

        $r3[58] = "p";

        $r3[59] = "param";

        $r3[60] = "plaintext";

        $r3[61] = "pre";

        $r3[62] = "script";

        $r3[63] = "section";

        $r3[64] = "select";

        $r3[65] = "style";

        $r3[66] = "summary";

        $r3[67] = "table";

        $r3[68] = "tbody";

        $r3[69] = "td";

        $r3[70] = "textarea";

        $r3[71] = "tfoot";

        $r3[72] = "th";

        $r3[73] = "thead";

        $r3[74] = "title";

        $r3[75] = "tr";

        $r3[76] = "ul";

        $r3[77] = "wbr";

        $r3[78] = "xmp";

        $z0 = staticinvoke <org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>($r2, $r3);

        return $z0;
    }

    void markInsertionMode()
    {
        org.jsoup.parser.HtmlTreeBuilderState $r1;
        org.jsoup.parser.HtmlTreeBuilder r0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.parser.HtmlTreeBuilderState state>;

        r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.parser.HtmlTreeBuilderState originalState> = $r1;

        return;
    }

    void maybeSetBaseUri(org.jsoup.nodes.Element)
    {
        org.jsoup.nodes.Element $r1;
        org.jsoup.nodes.Document $r3;
        int $i0;
        java.lang.String $r2;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 := @parameter0: org.jsoup.nodes.Element;

        $z0 = r0.<org.jsoup.parser.HtmlTreeBuilder: boolean baseUriSetFromDoc>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = virtualinvoke $r1.<org.jsoup.nodes.Element: java.lang.String absUrl(java.lang.String)>("href");

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 == 0 goto label2;

        r0.<org.jsoup.parser.HtmlTreeBuilder: java.lang.String baseUri> = $r2;

        r0.<org.jsoup.parser.HtmlTreeBuilder: boolean baseUriSetFromDoc> = 1;

        $r3 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Document doc>;

        virtualinvoke $r3.<org.jsoup.nodes.Document: void setBaseUri(java.lang.String)>($r2);

     label2:
        return;
    }

    void newPendingTableCharacters()
    {
        org.jsoup.parser.HtmlTreeBuilder r0;
        java.util.ArrayList $r1;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.jsoup.parser.HtmlTreeBuilder: java.util.List pendingTableCharacters> = $r1;

        return;
    }

    boolean onStack(org.jsoup.nodes.Element)
    {
        org.jsoup.helper.DescendableLinkedList $r2;
        org.jsoup.nodes.Element $r1;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 := @parameter0: org.jsoup.nodes.Element;

        $r2 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList stack>;

        $z0 = specialinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: boolean isElementInQueue(org.jsoup.helper.DescendableLinkedList,org.jsoup.nodes.Element)>($r2, $r1);

        return $z0;
    }

    org.jsoup.parser.HtmlTreeBuilderState originalState()
    {
        org.jsoup.parser.HtmlTreeBuilderState r1;
        org.jsoup.parser.HtmlTreeBuilder r0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        r1 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.parser.HtmlTreeBuilderState originalState>;

        return r1;
    }

    org.jsoup.nodes.Document parse(java.lang.String, java.lang.String, org.jsoup.parser.ParseErrorList)
    {
        org.jsoup.parser.HtmlTreeBuilderState $r5;
        org.jsoup.nodes.Document $r4;
        java.lang.String $r1, $r2;
        org.jsoup.parser.ParseErrorList $r3;
        org.jsoup.parser.HtmlTreeBuilder r0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: org.jsoup.parser.ParseErrorList;

        $r5 = <org.jsoup.parser.HtmlTreeBuilderState: org.jsoup.parser.HtmlTreeBuilderState Initial>;

        r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.parser.HtmlTreeBuilderState state> = $r5;

        $r4 = specialinvoke r0.<org.jsoup.parser.TreeBuilder: org.jsoup.nodes.Document parse(java.lang.String,java.lang.String,org.jsoup.parser.ParseErrorList)>($r1, $r2, $r3);

        return $r4;
    }

    java.util.List parseFragment(java.lang.String, org.jsoup.nodes.Element, java.lang.String, org.jsoup.parser.ParseErrorList)
    {
        org.jsoup.nodes.Document$QuirksMode $r9;
        org.jsoup.parser.Tokeniser $r11;
        java.lang.String[] $r10;
        org.jsoup.parser.ParseErrorList $r4;
        org.jsoup.nodes.Element $r2, r6;
        java.lang.String $r1, $r3;
        boolean $z0;
        org.jsoup.helper.DescendableLinkedList $r14;
        org.jsoup.parser.Tag $r13;
        java.util.List $r15;
        org.jsoup.parser.HtmlTreeBuilderState $r5;
        org.jsoup.nodes.Document $r7, $r8;
        org.jsoup.parser.TokeniserState $r12;
        org.jsoup.parser.HtmlTreeBuilder r0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.jsoup.nodes.Element;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: org.jsoup.parser.ParseErrorList;

        $r5 = <org.jsoup.parser.HtmlTreeBuilderState: org.jsoup.parser.HtmlTreeBuilderState Initial>;

        r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.parser.HtmlTreeBuilderState state> = $r5;

        virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: void initialiseParse(java.lang.String,java.lang.String,org.jsoup.parser.ParseErrorList)>($r1, $r3, $r4);

        r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element contextElement> = $r2;

        r0.<org.jsoup.parser.HtmlTreeBuilder: boolean fragmentParsing> = 1;

        r6 = null;

        if $r2 == null goto label3;

        $r7 = virtualinvoke $r2.<org.jsoup.nodes.Element: org.jsoup.nodes.Document ownerDocument()>();

        if $r7 == null goto label1;

        $r7 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Document doc>;

        $r8 = virtualinvoke $r2.<org.jsoup.nodes.Element: org.jsoup.nodes.Document ownerDocument()>();

        $r9 = virtualinvoke $r8.<org.jsoup.nodes.Document: org.jsoup.nodes.Document$QuirksMode quirksMode()>();

        virtualinvoke $r7.<org.jsoup.nodes.Document: org.jsoup.nodes.Document quirksMode(org.jsoup.nodes.Document$QuirksMode)>($r9);

     label1:
        $r1 = virtualinvoke $r2.<org.jsoup.nodes.Element: java.lang.String tagName()>();

        $r10 = newarray (java.lang.String)[2];

        $r10[0] = "title";

        $r10[1] = "textarea";

        $z0 = staticinvoke <org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>($r1, $r10);

        if $z0 == 0 goto label4;

        $r11 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.parser.Tokeniser tokeniser>;

        $r12 = <org.jsoup.parser.TokeniserState: org.jsoup.parser.TokeniserState Rcdata>;

        virtualinvoke $r11.<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>($r12);

     label2:
        r6 = new org.jsoup.nodes.Element;

        $r13 = staticinvoke <org.jsoup.parser.Tag: org.jsoup.parser.Tag valueOf(java.lang.String)>("html");

        specialinvoke r6.<org.jsoup.nodes.Element: void <init>(org.jsoup.parser.Tag,java.lang.String)>($r13, $r3);

        $r7 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Document doc>;

        virtualinvoke $r7.<org.jsoup.nodes.Document: org.jsoup.nodes.Element appendChild(org.jsoup.nodes.Node)>(r6);

        $r14 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList stack>;

        virtualinvoke $r14.<org.jsoup.helper.DescendableLinkedList: void push(java.lang.Object)>(r6);

        virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: void resetInsertionMode()>();

     label3:
        virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: void runParser()>();

        if $r2 == null goto label9;

        $r15 = virtualinvoke r6.<org.jsoup.nodes.Element: java.util.List childNodes()>();

        return $r15;

     label4:
        $r10 = newarray (java.lang.String)[5];

        $r10[0] = "iframe";

        $r10[1] = "noembed";

        $r10[2] = "noframes";

        $r10[3] = "style";

        $r10[4] = "xmp";

        $z0 = staticinvoke <org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>($r1, $r10);

        if $z0 == 0 goto label5;

        $r11 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.parser.Tokeniser tokeniser>;

        $r12 = <org.jsoup.parser.TokeniserState: org.jsoup.parser.TokeniserState Rawtext>;

        virtualinvoke $r11.<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>($r12);

        goto label2;

     label5:
        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("script");

        if $z0 == 0 goto label6;

        $r11 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.parser.Tokeniser tokeniser>;

        $r12 = <org.jsoup.parser.TokeniserState: org.jsoup.parser.TokeniserState ScriptData>;

        virtualinvoke $r11.<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>($r12);

        goto label2;

     label6:
        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("noscript");

        if $z0 == 0 goto label7;

        $r11 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.parser.Tokeniser tokeniser>;

        $r12 = <org.jsoup.parser.TokeniserState: org.jsoup.parser.TokeniserState Data>;

        virtualinvoke $r11.<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>($r12);

        goto label2;

     label7:
        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("plaintext");

        if $z0 == 0 goto label8;

        $r11 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.parser.Tokeniser tokeniser>;

        $r12 = <org.jsoup.parser.TokeniserState: org.jsoup.parser.TokeniserState Data>;

        virtualinvoke $r11.<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>($r12);

        goto label2;

     label8:
        $r11 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.parser.Tokeniser tokeniser>;

        $r12 = <org.jsoup.parser.TokeniserState: org.jsoup.parser.TokeniserState Data>;

        virtualinvoke $r11.<org.jsoup.parser.Tokeniser: void transition(org.jsoup.parser.TokeniserState)>($r12);

        goto label2;

     label9:
        $r7 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Document doc>;

        $r15 = virtualinvoke $r7.<org.jsoup.nodes.Document: java.util.List childNodes()>();

        return $r15;
    }

    org.jsoup.nodes.Element pop()
    {
        org.jsoup.helper.DescendableLinkedList $r1;
        org.jsoup.parser.HtmlTreeBuilderState $r5;
        org.jsoup.nodes.Element $r3;
        java.lang.Object $r2;
        java.lang.String $r4;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList stack>;

        $r2 = virtualinvoke $r1.<org.jsoup.helper.DescendableLinkedList: java.lang.Object peekLast()>();

        $r3 = (org.jsoup.nodes.Element) $r2;

        $r4 = virtualinvoke $r3.<org.jsoup.nodes.Element: java.lang.String nodeName()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("td");

        if $z0 == 0 goto label1;

        $r5 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.parser.HtmlTreeBuilderState state>;

        $r4 = virtualinvoke $r5.<org.jsoup.parser.HtmlTreeBuilderState: java.lang.String name()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("InCell");

        if $z0 != 0 goto label1;

        staticinvoke <org.jsoup.helper.Validate: void isFalse(boolean,java.lang.String)>(1, "pop td not in cell");

     label1:
        $r1 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList stack>;

        $r2 = virtualinvoke $r1.<org.jsoup.helper.DescendableLinkedList: java.lang.Object peekLast()>();

        $r3 = (org.jsoup.nodes.Element) $r2;

        $r4 = virtualinvoke $r3.<org.jsoup.nodes.Element: java.lang.String nodeName()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("html");

        if $z0 == 0 goto label2;

        staticinvoke <org.jsoup.helper.Validate: void isFalse(boolean,java.lang.String)>(1, "popping html!");

     label2:
        $r1 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList stack>;

        $r2 = virtualinvoke $r1.<org.jsoup.helper.DescendableLinkedList: java.lang.Object pollLast()>();

        $r3 = (org.jsoup.nodes.Element) $r2;

        return $r3;
    }

    void popStackToBefore(java.lang.String)
    {
        java.util.Iterator $r3;
        org.jsoup.helper.DescendableLinkedList $r2;
        org.jsoup.nodes.Element r5;
        java.lang.Object $r4;
        java.lang.String $r1, $r6;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList stack>;

        $r3 = virtualinvoke $r2.<org.jsoup.helper.DescendableLinkedList: java.util.Iterator descendingIterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.jsoup.nodes.Element) $r4;

        $r6 = virtualinvoke r5.<org.jsoup.nodes.Element: java.lang.String nodeName()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("ruby");

        if $z0 == 0 goto label2;

        return;

     label2:
        interfaceinvoke $r3.<java.util.Iterator: void remove()>();

        goto label1;

     label3:
        return;
    }

    void popStackToClose(java.lang.String)
    {
        java.util.Iterator $r3;
        org.jsoup.helper.DescendableLinkedList $r2;
        org.jsoup.nodes.Element r5;
        java.lang.Object $r4;
        java.lang.String $r1, $r6;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList stack>;

        $r3 = virtualinvoke $r2.<org.jsoup.helper.DescendableLinkedList: java.util.Iterator descendingIterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.jsoup.nodes.Element) $r4;

        $r6 = virtualinvoke r5.<org.jsoup.nodes.Element: java.lang.String nodeName()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        interfaceinvoke $r3.<java.util.Iterator: void remove()>();

        return;

     label2:
        interfaceinvoke $r3.<java.util.Iterator: void remove()>();

        goto label1;

     label3:
        return;
    }

    transient void popStackToClose(java.lang.String[])
    {
        java.util.Iterator $r3;
        org.jsoup.helper.DescendableLinkedList $r2;
        java.lang.String[] $r1;
        org.jsoup.nodes.Element r5;
        java.lang.Object $r4;
        java.lang.String $r6;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 := @parameter0: java.lang.String[];

        $r2 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList stack>;

        $r3 = virtualinvoke $r2.<org.jsoup.helper.DescendableLinkedList: java.util.Iterator descendingIterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.jsoup.nodes.Element) $r4;

        $r6 = virtualinvoke r5.<org.jsoup.nodes.Element: java.lang.String nodeName()>();

        $z0 = staticinvoke <org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>($r6, $r1);

        if $z0 == 0 goto label2;

        interfaceinvoke $r3.<java.util.Iterator: void remove()>();

        return;

     label2:
        interfaceinvoke $r3.<java.util.Iterator: void remove()>();

        goto label1;

     label3:
        return;
    }

    protected boolean process(org.jsoup.parser.Token)
    {
        org.jsoup.parser.HtmlTreeBuilderState $r2;
        org.jsoup.parser.Token $r1;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 := @parameter0: org.jsoup.parser.Token;

        r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.parser.Token currentToken> = $r1;

        $r2 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.parser.HtmlTreeBuilderState state>;

        $z0 = virtualinvoke $r2.<org.jsoup.parser.HtmlTreeBuilderState: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>($r1, r0);

        return $z0;
    }

    boolean process(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilderState)
    {
        org.jsoup.parser.HtmlTreeBuilderState $r2;
        org.jsoup.parser.Token $r1;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 := @parameter0: org.jsoup.parser.Token;

        $r2 := @parameter1: org.jsoup.parser.HtmlTreeBuilderState;

        r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.parser.Token currentToken> = $r1;

        $z0 = virtualinvoke $r2.<org.jsoup.parser.HtmlTreeBuilderState: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilder)>($r1, r0);

        return $z0;
    }

    void push(org.jsoup.nodes.Element)
    {
        org.jsoup.helper.DescendableLinkedList $r2;
        org.jsoup.parser.HtmlTreeBuilder r0;
        org.jsoup.nodes.Element $r1;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 := @parameter0: org.jsoup.nodes.Element;

        $r2 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList stack>;

        virtualinvoke $r2.<org.jsoup.helper.DescendableLinkedList: boolean add(java.lang.Object)>($r1);

        return;
    }

    void pushActiveFormattingElements(org.jsoup.nodes.Element)
    {
        java.util.Iterator $r3;
        org.jsoup.helper.DescendableLinkedList $r2;
        org.jsoup.nodes.Element $r1, r5;
        int i0;
        java.lang.Object $r4;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 := @parameter0: org.jsoup.nodes.Element;

        i0 = 0;

        $r2 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList formattingElements>;

        $r3 = virtualinvoke $r2.<org.jsoup.helper.DescendableLinkedList: java.util.Iterator descendingIterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.jsoup.nodes.Element) $r4;

        if r5 != null goto label3;

     label2:
        $r2 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList formattingElements>;

        virtualinvoke $r2.<org.jsoup.helper.DescendableLinkedList: boolean add(java.lang.Object)>($r1);

        return;

     label3:
        $z0 = specialinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: boolean isSameFormattingElement(org.jsoup.nodes.Element,org.jsoup.nodes.Element)>($r1, r5);

        if $z0 == 0 goto label4;

        i0 = i0 + 1;

     label4:
        if i0 != 3 goto label1;

        interfaceinvoke $r3.<java.util.Iterator: void remove()>();

        goto label2;
    }

    void reconstructFormattingElements()
    {
        org.jsoup.nodes.Attributes $r6, $r7;
        org.jsoup.helper.DescendableLinkedList $r1;
        org.jsoup.nodes.Element $r3, $r5;
        int $i0, i1, $i2;
        java.lang.Object $r2;
        java.lang.String $r4;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0, $z1;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList formattingElements>;

        $i0 = virtualinvoke $r1.<org.jsoup.helper.DescendableLinkedList: int size()>();

        if $i0 == 0 goto label6;

        $r1 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList formattingElements>;

        $r2 = virtualinvoke $r1.<org.jsoup.helper.DescendableLinkedList: java.lang.Object getLast()>();

        if $r2 == null goto label6;

        $r1 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList formattingElements>;

        $r2 = virtualinvoke $r1.<org.jsoup.helper.DescendableLinkedList: java.lang.Object getLast()>();

        $r3 = (org.jsoup.nodes.Element) $r2;

        $z0 = virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: boolean onStack(org.jsoup.nodes.Element)>($r3);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList formattingElements>;

        $r2 = virtualinvoke $r1.<org.jsoup.helper.DescendableLinkedList: java.lang.Object getLast()>();

        $r3 = (org.jsoup.nodes.Element) $r2;

        i1 = $i0 + -1;

        $z0 = 0;

     label2:
        if i1 != 0 goto label5;

        $z0 = 1;

     label3:
        if $z0 != 0 goto label4;

        $r1 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList formattingElements>;

        i1 = i1 + 1;

        $r2 = virtualinvoke $r1.<org.jsoup.helper.DescendableLinkedList: java.lang.Object get(int)>(i1);

        $r3 = (org.jsoup.nodes.Element) $r2;

     label4:
        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r3);

        $z0 = 0;

        $r4 = virtualinvoke $r3.<org.jsoup.nodes.Element: java.lang.String nodeName()>();

        $r5 = virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element insert(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<org.jsoup.nodes.Element: org.jsoup.nodes.Attributes attributes()>();

        $r7 = virtualinvoke $r3.<org.jsoup.nodes.Element: org.jsoup.nodes.Attributes attributes()>();

        virtualinvoke $r6.<org.jsoup.nodes.Attributes: void addAll(org.jsoup.nodes.Attributes)>($r7);

        $r1 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList formattingElements>;

        virtualinvoke $r1.<org.jsoup.helper.DescendableLinkedList: void add(int,java.lang.Object)>(i1, $r5);

        $r1 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList formattingElements>;

        $i2 = i1 + 1;

        virtualinvoke $r1.<org.jsoup.helper.DescendableLinkedList: java.lang.Object remove(int)>($i2);

        $i2 = $i0 + -1;

        if i1 != $i2 goto label3;

        return;

     label5:
        $r1 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList formattingElements>;

        i1 = i1 + -1;

        $r2 = virtualinvoke $r1.<org.jsoup.helper.DescendableLinkedList: java.lang.Object get(int)>(i1);

        $r3 = (org.jsoup.nodes.Element) $r2;

        if $r3 == null goto label3;

        $z1 = virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: boolean onStack(org.jsoup.nodes.Element)>($r3);

        if $z1 == 0 goto label2;

        goto label3;

     label6:
        return;
    }

    void removeFromActiveFormattingElements(org.jsoup.nodes.Element)
    {
        java.util.Iterator $r3;
        org.jsoup.helper.DescendableLinkedList $r2;
        org.jsoup.nodes.Element $r1, r5;
        java.lang.Object $r4;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 := @parameter0: org.jsoup.nodes.Element;

        $r2 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList formattingElements>;

        $r3 = virtualinvoke $r2.<org.jsoup.helper.DescendableLinkedList: java.util.Iterator descendingIterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.jsoup.nodes.Element) $r4;

        if r5 != $r1 goto label1;

        interfaceinvoke $r3.<java.util.Iterator: void remove()>();

     label2:
        return;
    }

    boolean removeFromStack(org.jsoup.nodes.Element)
    {
        java.util.Iterator $r3;
        org.jsoup.helper.DescendableLinkedList $r2;
        org.jsoup.nodes.Element $r1, r5;
        java.lang.Object $r4;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 := @parameter0: org.jsoup.nodes.Element;

        $r2 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList stack>;

        $r3 = virtualinvoke $r2.<org.jsoup.helper.DescendableLinkedList: java.util.Iterator descendingIterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.jsoup.nodes.Element) $r4;

        if r5 != $r1 goto label1;

        interfaceinvoke $r3.<java.util.Iterator: void remove()>();

        return 1;

     label2:
        return 0;
    }

    void replaceActiveFormattingElement(org.jsoup.nodes.Element, org.jsoup.nodes.Element)
    {
        org.jsoup.helper.DescendableLinkedList $r3;
        org.jsoup.nodes.Element $r1, $r2;
        org.jsoup.parser.HtmlTreeBuilder r0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 := @parameter0: org.jsoup.nodes.Element;

        $r2 := @parameter1: org.jsoup.nodes.Element;

        $r3 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList formattingElements>;

        specialinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: void replaceInQueue(java.util.LinkedList,org.jsoup.nodes.Element,org.jsoup.nodes.Element)>($r3, $r1, $r2);

        return;
    }

    void replaceOnStack(org.jsoup.nodes.Element, org.jsoup.nodes.Element)
    {
        org.jsoup.helper.DescendableLinkedList $r3;
        org.jsoup.nodes.Element $r1, $r2;
        org.jsoup.parser.HtmlTreeBuilder r0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 := @parameter0: org.jsoup.nodes.Element;

        $r2 := @parameter1: org.jsoup.nodes.Element;

        $r3 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList stack>;

        specialinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: void replaceInQueue(java.util.LinkedList,org.jsoup.nodes.Element,org.jsoup.nodes.Element)>($r3, $r1, $r2);

        return;
    }

    void resetInsertionMode()
    {
        java.util.Iterator $r2;
        org.jsoup.helper.DescendableLinkedList $r1;
        org.jsoup.parser.HtmlTreeBuilderState $r7;
        org.jsoup.nodes.Element r4;
        java.lang.Object $r3;
        java.lang.String $r5, $r6;
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean z0, $z1;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        z0 = 0;

        $r1 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.helper.DescendableLinkedList stack>;

        $r2 = virtualinvoke $r1.<org.jsoup.helper.DescendableLinkedList: java.util.Iterator descendingIterator()>();

     label01:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label16;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.jsoup.nodes.Element) $r3;

        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label02;

        z0 = 1;

        r4 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element contextElement>;

     label02:
        $r5 = virtualinvoke r4.<org.jsoup.nodes.Element: java.lang.String nodeName()>();

        $r6 = "select";

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label03;

        $r7 = <org.jsoup.parser.HtmlTreeBuilderState: org.jsoup.parser.HtmlTreeBuilderState InSelect>;

        virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>($r7);

        return;

     label03:
        $r6 = "td";

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z1 != 0 goto label04;

        $r6 = "td";

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label05;

        if z0 != 0 goto label05;

     label04:
        $r7 = <org.jsoup.parser.HtmlTreeBuilderState: org.jsoup.parser.HtmlTreeBuilderState InCell>;

        virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>($r7);

        return;

     label05:
        $r6 = "tr";

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label06;

        $r7 = <org.jsoup.parser.HtmlTreeBuilderState: org.jsoup.parser.HtmlTreeBuilderState InRow>;

        virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>($r7);

        return;

     label06:
        $r6 = "tbody";

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z1 != 0 goto label07;

        $r6 = "thead";

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z1 != 0 goto label07;

        $r6 = "tfoot";

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label08;

     label07:
        $r7 = <org.jsoup.parser.HtmlTreeBuilderState: org.jsoup.parser.HtmlTreeBuilderState InTableBody>;

        virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>($r7);

        return;

     label08:
        $r6 = "caption";

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label09;

        $r7 = <org.jsoup.parser.HtmlTreeBuilderState: org.jsoup.parser.HtmlTreeBuilderState InCaption>;

        virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>($r7);

        return;

     label09:
        $r6 = "colgroup";

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label10;

        $r7 = <org.jsoup.parser.HtmlTreeBuilderState: org.jsoup.parser.HtmlTreeBuilderState InColumnGroup>;

        virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>($r7);

        return;

     label10:
        $r6 = "table";

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label11;

        $r7 = <org.jsoup.parser.HtmlTreeBuilderState: org.jsoup.parser.HtmlTreeBuilderState InTable>;

        virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>($r7);

        return;

     label11:
        $r6 = "head";

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label12;

        $r7 = <org.jsoup.parser.HtmlTreeBuilderState: org.jsoup.parser.HtmlTreeBuilderState InBody>;

        virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>($r7);

        return;

     label12:
        $r6 = "body";

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label13;

        $r7 = <org.jsoup.parser.HtmlTreeBuilderState: org.jsoup.parser.HtmlTreeBuilderState InBody>;

        virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>($r7);

        return;

     label13:
        $r6 = "frameset";

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label14;

        $r7 = <org.jsoup.parser.HtmlTreeBuilderState: org.jsoup.parser.HtmlTreeBuilderState InFrameset>;

        virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>($r7);

        return;

     label14:
        $r6 = "html";

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label15;

        $r7 = <org.jsoup.parser.HtmlTreeBuilderState: org.jsoup.parser.HtmlTreeBuilderState BeforeHead>;

        virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>($r7);

        return;

     label15:
        if z0 == 0 goto label01;

        $r7 = <org.jsoup.parser.HtmlTreeBuilderState: org.jsoup.parser.HtmlTreeBuilderState InBody>;

        virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>($r7);

     label16:
        return;
    }

    void setFormElement(org.jsoup.nodes.Element)
    {
        org.jsoup.parser.HtmlTreeBuilder r0;
        org.jsoup.nodes.Element $r1;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 := @parameter0: org.jsoup.nodes.Element;

        r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element formElement> = $r1;

        return;
    }

    void setFosterInserts(boolean)
    {
        org.jsoup.parser.HtmlTreeBuilder r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $z0 := @parameter0: boolean;

        r0.<org.jsoup.parser.HtmlTreeBuilder: boolean fosterInserts> = $z0;

        return;
    }

    void setHeadElement(org.jsoup.nodes.Element)
    {
        org.jsoup.parser.HtmlTreeBuilder r0;
        org.jsoup.nodes.Element $r1;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 := @parameter0: org.jsoup.nodes.Element;

        r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element headElement> = $r1;

        return;
    }

    void setPendingTableCharacters(java.util.List)
    {
        java.util.List r1;
        org.jsoup.parser.HtmlTreeBuilder r0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        r1 := @parameter0: java.util.List;

        r0.<org.jsoup.parser.HtmlTreeBuilder: java.util.List pendingTableCharacters> = r1;

        return;
    }

    org.jsoup.parser.HtmlTreeBuilderState state()
    {
        org.jsoup.parser.HtmlTreeBuilderState r1;
        org.jsoup.parser.HtmlTreeBuilder r0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        r1 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.parser.HtmlTreeBuilderState state>;

        return r1;
    }

    public java.lang.String toString()
    {
        org.jsoup.parser.HtmlTreeBuilderState $r3;
        org.jsoup.parser.Token $r2;
        org.jsoup.nodes.Element $r4;
        java.lang.StringBuilder $r1;
        java.lang.String $r5;
        org.jsoup.parser.HtmlTreeBuilder r0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("TreeBuilder{currentToken=");

        $r2 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.parser.Token currentToken>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", state=");

        $r3 = r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.parser.HtmlTreeBuilderState state>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", currentElement=");

        $r4 = virtualinvoke r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element currentElement()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    void transition(org.jsoup.parser.HtmlTreeBuilderState)
    {
        org.jsoup.parser.HtmlTreeBuilderState $r1;
        org.jsoup.parser.HtmlTreeBuilder r0;

        r0 := @this: org.jsoup.parser.HtmlTreeBuilder;

        $r1 := @parameter0: org.jsoup.parser.HtmlTreeBuilderState;

        r0.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.parser.HtmlTreeBuilderState state> = $r1;

        return;
    }
}
