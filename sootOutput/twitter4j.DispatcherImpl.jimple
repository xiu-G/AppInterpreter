final class twitter4j.DispatcherImpl extends java.lang.Object implements twitter4j.Dispatcher
{
    private final java.util.concurrent.ExecutorService executorService;

    public void <init>(twitter4j.conf.Configuration)
    {
        twitter4j.DispatcherImpl r0;
        java.lang.Runtime $r4;
        twitter4j.conf.Configuration $r1;
        int $i0;
        twitter4j.DispatcherImpl$1 $r2;
        twitter4j.DispatcherImpl$2 $r5;
        java.util.concurrent.ExecutorService $r3;

        r0 := @this: twitter4j.DispatcherImpl;

        $r1 := @parameter0: twitter4j.conf.Configuration;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = interfaceinvoke $r1.<twitter4j.conf.Configuration: int getAsyncNumThreads()>();

        $r2 = new twitter4j.DispatcherImpl$1;

        specialinvoke $r2.<twitter4j.DispatcherImpl$1: void <init>(twitter4j.DispatcherImpl,twitter4j.conf.Configuration)>(r0, $r1);

        $r3 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int,java.util.concurrent.ThreadFactory)>($i0, $r2);

        r0.<twitter4j.DispatcherImpl: java.util.concurrent.ExecutorService executorService> = $r3;

        $r4 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $r5 = new twitter4j.DispatcherImpl$2;

        specialinvoke $r5.<twitter4j.DispatcherImpl$2: void <init>(twitter4j.DispatcherImpl)>(r0);

        virtualinvoke $r4.<java.lang.Runtime: void addShutdownHook(java.lang.Thread)>($r5);

        return;
    }

    static java.util.concurrent.ExecutorService access$000(twitter4j.DispatcherImpl)
    {
        twitter4j.DispatcherImpl $r0;
        java.util.concurrent.ExecutorService r1;

        $r0 := @parameter0: twitter4j.DispatcherImpl;

        r1 = $r0.<twitter4j.DispatcherImpl: java.util.concurrent.ExecutorService executorService>;

        return r1;
    }

    public final void invokeLater(java.lang.Runnable)
    {
        twitter4j.DispatcherImpl r0;
        java.lang.Throwable $r3;
        java.lang.Runnable $r1;
        java.util.concurrent.ExecutorService $r2;

        r0 := @this: twitter4j.DispatcherImpl;

        $r1 := @parameter0: java.lang.Runnable;

        entermonitor r0;

     label1:
        $r2 = r0.<twitter4j.DispatcherImpl: java.util.concurrent.ExecutorService executorService>;

        interfaceinvoke $r2.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>($r1);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public final void shutdown()
    {
        twitter4j.DispatcherImpl r0;
        java.lang.Throwable $r2;
        java.util.concurrent.ExecutorService $r1;

        r0 := @this: twitter4j.DispatcherImpl;

        entermonitor r0;

     label1:
        $r1 = r0.<twitter4j.DispatcherImpl: java.util.concurrent.ExecutorService executorService>;

        interfaceinvoke $r1.<java.util.concurrent.ExecutorService: void shutdown()>();

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
