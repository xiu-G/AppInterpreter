public class org.mozilla.universalchardet.prober.statemachine.CodingStateMachine extends java.lang.Object
{
    protected int currentBytePos;
    protected int currentCharLen;
    protected int currentState;
    protected org.mozilla.universalchardet.prober.statemachine.SMModel model;

    public void <init>(org.mozilla.universalchardet.prober.statemachine.SMModel)
    {
        org.mozilla.universalchardet.prober.statemachine.SMModel $r1;
        org.mozilla.universalchardet.prober.statemachine.CodingStateMachine r0;

        r0 := @this: org.mozilla.universalchardet.prober.statemachine.CodingStateMachine;

        $r1 := @parameter0: org.mozilla.universalchardet.prober.statemachine.SMModel;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.mozilla.universalchardet.prober.statemachine.CodingStateMachine: org.mozilla.universalchardet.prober.statemachine.SMModel model> = $r1;

        r0.<org.mozilla.universalchardet.prober.statemachine.CodingStateMachine: int currentState> = 0;

        return;
    }

    public java.lang.String getCodingStateMachine()
    {
        java.lang.String $r1;
        org.mozilla.universalchardet.prober.statemachine.SMModel $r2;
        org.mozilla.universalchardet.prober.statemachine.CodingStateMachine r0;

        r0 := @this: org.mozilla.universalchardet.prober.statemachine.CodingStateMachine;

        $r2 = r0.<org.mozilla.universalchardet.prober.statemachine.CodingStateMachine: org.mozilla.universalchardet.prober.statemachine.SMModel model>;

        $r1 = virtualinvoke $r2.<org.mozilla.universalchardet.prober.statemachine.SMModel: java.lang.String getName()>();

        return $r1;
    }

    public int getCurrentCharLen()
    {
        int i0;
        org.mozilla.universalchardet.prober.statemachine.CodingStateMachine r0;

        r0 := @this: org.mozilla.universalchardet.prober.statemachine.CodingStateMachine;

        i0 = r0.<org.mozilla.universalchardet.prober.statemachine.CodingStateMachine: int currentCharLen>;

        return i0;
    }

    public int nextState(byte)
    {
        byte $b0;
        org.mozilla.universalchardet.prober.statemachine.CodingStateMachine r0;
        int $i1, $i2;
        org.mozilla.universalchardet.prober.statemachine.SMModel $r1;

        r0 := @this: org.mozilla.universalchardet.prober.statemachine.CodingStateMachine;

        $b0 := @parameter0: byte;

        $r1 = r0.<org.mozilla.universalchardet.prober.statemachine.CodingStateMachine: org.mozilla.universalchardet.prober.statemachine.SMModel model>;

        $i2 = virtualinvoke $r1.<org.mozilla.universalchardet.prober.statemachine.SMModel: int getClass(byte)>($b0);

        $i1 = r0.<org.mozilla.universalchardet.prober.statemachine.CodingStateMachine: int currentState>;

        if $i1 != 0 goto label1;

        r0.<org.mozilla.universalchardet.prober.statemachine.CodingStateMachine: int currentBytePos> = 0;

        $r1 = r0.<org.mozilla.universalchardet.prober.statemachine.CodingStateMachine: org.mozilla.universalchardet.prober.statemachine.SMModel model>;

        $i1 = virtualinvoke $r1.<org.mozilla.universalchardet.prober.statemachine.SMModel: int getCharLen(int)>($i2);

        r0.<org.mozilla.universalchardet.prober.statemachine.CodingStateMachine: int currentCharLen> = $i1;

     label1:
        $r1 = r0.<org.mozilla.universalchardet.prober.statemachine.CodingStateMachine: org.mozilla.universalchardet.prober.statemachine.SMModel model>;

        $i1 = r0.<org.mozilla.universalchardet.prober.statemachine.CodingStateMachine: int currentState>;

        $i2 = virtualinvoke $r1.<org.mozilla.universalchardet.prober.statemachine.SMModel: int getNextState(int,int)>($i2, $i1);

        r0.<org.mozilla.universalchardet.prober.statemachine.CodingStateMachine: int currentState> = $i2;

        $i2 = r0.<org.mozilla.universalchardet.prober.statemachine.CodingStateMachine: int currentBytePos>;

        $i2 = $i2 + 1;

        r0.<org.mozilla.universalchardet.prober.statemachine.CodingStateMachine: int currentBytePos> = $i2;

        $i2 = r0.<org.mozilla.universalchardet.prober.statemachine.CodingStateMachine: int currentState>;

        return $i2;
    }

    public void reset()
    {
        org.mozilla.universalchardet.prober.statemachine.CodingStateMachine r0;

        r0 := @this: org.mozilla.universalchardet.prober.statemachine.CodingStateMachine;

        r0.<org.mozilla.universalchardet.prober.statemachine.CodingStateMachine: int currentState> = 0;

        return;
    }
}
