public final class twitter4j.internal.http.HttpClientFactory extends java.lang.Object
{
    private static final java.lang.reflect.Constructor HTTP_CLIENT_CONSTRUCTOR;
    private static final java.lang.String HTTP_CLIENT_IMPLEMENTATION;

    static void <clinit>()
    {
        java.lang.Throwable $r7;
        java.lang.Class[] $r3;
        java.lang.AssertionError $r6;
        java.lang.reflect.Constructor $r4;
        java.lang.Class $r0, $r2;
        java.lang.ClassNotFoundException $r5, $r8, $r9;
        java.lang.String $r1;

        <twitter4j.internal.http.HttpClientFactory: java.lang.String HTTP_CLIENT_IMPLEMENTATION> = "twitter4j.http.httpClient";

        $r0 = null;

        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("twitter4j.http.httpClient");

        if $r1 == null goto label03;

     label01:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r1);

     label02:
        $r0 = $r2;

     label03:
        if $r0 != null goto label08;

     label04:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("twitter4j.internal.http.alternative.HttpClientImpl");

     label05:
        $r0 = $r2;

     label06:
        if $r0 != null goto label08;

     label07:
        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("twitter4j.internal.http.HttpClientImpl");

     label08:
        $r3 = newarray (java.lang.Class)[1];

        $r3[0] = class "Ltwitter4j/internal/http/HttpClientConfiguration;";

     label09:
        $r4 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r3);

     label10:
        <twitter4j.internal.http.HttpClientFactory: java.lang.reflect.Constructor HTTP_CLIENT_CONSTRUCTOR> = $r4;

        return;

     label11:
        $r5 := @caughtexception;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>($r5);

        throw $r6;

     label12:
        $r7 := @caughtexception;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>($r7);

        throw $r6;

     label13:
        $r8 := @caughtexception;

        goto label03;

     label14:
        $r9 := @caughtexception;

        goto label06;

        return;

        catch java.lang.ClassNotFoundException from label01 to label02 with label13;
        catch java.lang.ClassNotFoundException from label04 to label05 with label14;
        catch java.lang.ClassNotFoundException from label07 to label08 with label11;
        catch java.lang.NoSuchMethodException from label09 to label10 with label12;
    }

    public void <init>()
    {
        twitter4j.internal.http.HttpClientFactory r0;

        r0 := @this: twitter4j.internal.http.HttpClientFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static twitter4j.internal.http.HttpClient getInstance(twitter4j.internal.http.HttpClientConfiguration)
    {
        java.lang.Throwable $r5, $r7, $r8;
        java.lang.Object[] $r3;
        java.lang.AssertionError $r6;
        java.lang.reflect.Constructor $r2;
        twitter4j.internal.http.HttpClientConfiguration $r0;
        twitter4j.internal.http.HttpClient $r4;
        java.lang.Object $r1;

        $r0 := @parameter0: twitter4j.internal.http.HttpClientConfiguration;

        $r2 = <twitter4j.internal.http.HttpClientFactory: java.lang.reflect.Constructor HTTP_CLIENT_CONSTRUCTOR>;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = $r0;

     label1:
        $r1 = virtualinvoke $r2.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r3);

     label2:
        $r4 = (twitter4j.internal.http.HttpClient) $r1;

        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>($r5);

        throw $r6;

     label4:
        $r7 := @caughtexception;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>($r7);

        throw $r6;

     label5:
        $r8 := @caughtexception;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>($r8);

        throw $r6;

        catch java.lang.InstantiationException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label1 to label2 with label4;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label5;
    }
}
