class proguard.optimize.evaluation.EvaluationShrinker$MyVariableInitializationMarker extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.instruction.visitor.InstructionVisitor
{
    private final proguard.optimize.evaluation.EvaluationShrinker this$0;

    private void <init>(proguard.optimize.evaluation.EvaluationShrinker)
    {
        proguard.optimize.evaluation.EvaluationShrinker $r1;
        proguard.optimize.evaluation.EvaluationShrinker$MyVariableInitializationMarker r0;

        r0 := @this: proguard.optimize.evaluation.EvaluationShrinker$MyVariableInitializationMarker;

        $r1 := @parameter0: proguard.optimize.evaluation.EvaluationShrinker;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        r0.<proguard.optimize.evaluation.EvaluationShrinker$MyVariableInitializationMarker: proguard.optimize.evaluation.EvaluationShrinker this$0> = $r1;

        return;
    }

    void <init>(proguard.optimize.evaluation.EvaluationShrinker, proguard.optimize.evaluation.EvaluationShrinker$1)
    {
        proguard.optimize.evaluation.EvaluationShrinker $r1;
        proguard.optimize.evaluation.EvaluationShrinker$1 $r2;
        proguard.optimize.evaluation.EvaluationShrinker$MyVariableInitializationMarker r0;

        r0 := @this: proguard.optimize.evaluation.EvaluationShrinker$MyVariableInitializationMarker;

        $r1 := @parameter0: proguard.optimize.evaluation.EvaluationShrinker;

        $r2 := @parameter1: proguard.optimize.evaluation.EvaluationShrinker$1;

        specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker$MyVariableInitializationMarker: void <init>(proguard.optimize.evaluation.EvaluationShrinker)>($r1);

        return;
    }

    public void visitAnyInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.Instruction)
    {
        proguard.optimize.evaluation.EvaluationShrinker$MyVariableInitializationMarker r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.instruction.Instruction $r4;
        int $i0;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.optimize.evaluation.EvaluationShrinker$MyVariableInitializationMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.Instruction;

        return;
    }

    public void visitVariableInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.VariableInstruction)
    {
        proguard.optimize.evaluation.EvaluationShrinker $r5;
        proguard.optimize.evaluation.EvaluationShrinker$MyVariableInitializationMarker r0;
        proguard.classfile.instruction.VariableInstruction $r4;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0, $i1;
        proguard.classfile.Method $r2;
        boolean $z0;

        r0 := @this: proguard.optimize.evaluation.EvaluationShrinker$MyVariableInitializationMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.VariableInstruction;

        $z0 = virtualinvoke $r4.<proguard.classfile.instruction.VariableInstruction: boolean isLoad()>();

        if $z0 != 0 goto label1;

        $i1 = $r4.<proguard.classfile.instruction.VariableInstruction: int variableIndex>;

        $r5 = r0.<proguard.optimize.evaluation.EvaluationShrinker$MyVariableInitializationMarker: proguard.optimize.evaluation.EvaluationShrinker this$0>;

        $z0 = staticinvoke <proguard.optimize.evaluation.EvaluationShrinker: boolean access$1200(proguard.optimize.evaluation.EvaluationShrinker,int,int)>($r5, $i0, $i1);

        if $z0 == 0 goto label1;

        $r5 = r0.<proguard.optimize.evaluation.EvaluationShrinker$MyVariableInitializationMarker: proguard.optimize.evaluation.EvaluationShrinker this$0>;

        $z0 = staticinvoke <proguard.optimize.evaluation.EvaluationShrinker: boolean access$1300(proguard.optimize.evaluation.EvaluationShrinker,proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,int)>($r5, $r1, $r2, $r3, $i0, $i1);

        if $z0 == 0 goto label1;

        $r5 = r0.<proguard.optimize.evaluation.EvaluationShrinker$MyVariableInitializationMarker: proguard.optimize.evaluation.EvaluationShrinker this$0>;

        staticinvoke <proguard.optimize.evaluation.EvaluationShrinker: void access$1400(proguard.optimize.evaluation.EvaluationShrinker,int)>($r5, $i0);

     label1:
        return;
    }
}
