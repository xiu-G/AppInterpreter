public class proguard.shrink.InnerUsageMarker extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.attribute.visitor.AttributeVisitor, proguard.classfile.attribute.visitor.InnerClassesInfoVisitor, proguard.classfile.constant.visitor.ConstantVisitor, proguard.classfile.visitor.ClassVisitor
{
    private boolean attributeUsed;
    private boolean classUsed;
    private final proguard.shrink.UsageMarker usageMarker;

    public void <init>(proguard.shrink.UsageMarker)
    {
        proguard.shrink.UsageMarker $r1;
        proguard.shrink.InnerUsageMarker r0;

        r0 := @this: proguard.shrink.InnerUsageMarker;

        $r1 := @parameter0: proguard.shrink.UsageMarker;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        r0.<proguard.shrink.InnerUsageMarker: proguard.shrink.UsageMarker usageMarker> = $r1;

        return;
    }

    private void markConstant(proguard.classfile.Clazz, int)
    {
        int $i0;
        proguard.shrink.InnerUsageMarker r0;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.shrink.InnerUsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $i0 := @parameter1: int;

        interfaceinvoke $r1.<proguard.classfile.Clazz: void constantPoolEntryAccept(int,proguard.classfile.constant.visitor.ConstantVisitor)>($i0, r0);

        return;
    }

    public void visitAnyAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.Attribute)
    {
        proguard.shrink.InnerUsageMarker r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.Attribute $r2;

        r0 := @this: proguard.shrink.InnerUsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.Attribute;

        return;
    }

    public void visitClassConstant(proguard.classfile.Clazz, proguard.classfile.constant.ClassConstant)
    {
        proguard.classfile.constant.ClassConstant $r2;
        proguard.shrink.UsageMarker $r3;
        proguard.classfile.Clazz $r1;
        int $i0;
        proguard.shrink.InnerUsageMarker r0;
        boolean $z0;

        r0 := @this: proguard.shrink.InnerUsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.ClassConstant;

        $r3 = r0.<proguard.shrink.InnerUsageMarker: proguard.shrink.UsageMarker usageMarker>;

        $z0 = virtualinvoke $r3.<proguard.shrink.UsageMarker: boolean isUsed(proguard.classfile.VisitorAccepter)>($r2);

        r0.<proguard.shrink.InnerUsageMarker: boolean classUsed> = $z0;

        $z0 = r0.<proguard.shrink.InnerUsageMarker: boolean classUsed>;

        if $z0 != 0 goto label1;

        r0.<proguard.shrink.InnerUsageMarker: boolean classUsed> = 1;

        virtualinvoke $r2.<proguard.classfile.constant.ClassConstant: void referencedClassAccept(proguard.classfile.visitor.ClassVisitor)>(r0);

        $z0 = r0.<proguard.shrink.InnerUsageMarker: boolean classUsed>;

        if $z0 == 0 goto label1;

        $r3 = r0.<proguard.shrink.InnerUsageMarker: proguard.shrink.UsageMarker usageMarker>;

        virtualinvoke $r3.<proguard.shrink.UsageMarker: void markAsUsed(proguard.classfile.VisitorAccepter)>($r2);

        $i0 = $r2.<proguard.classfile.constant.ClassConstant: int u2nameIndex>;

        specialinvoke r0.<proguard.shrink.InnerUsageMarker: void markConstant(proguard.classfile.Clazz,int)>($r1, $i0);

     label1:
        return;
    }

    public void visitInnerClassesAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.InnerClassesAttribute)
    {
        proguard.classfile.attribute.InnerClassesAttribute $r2;
        proguard.shrink.UsageMarker $r3;
        proguard.classfile.Clazz $r1;
        int $i0;
        proguard.shrink.InnerUsageMarker r0;
        boolean $z0;

        r0 := @this: proguard.shrink.InnerUsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.InnerClassesAttribute;

        r0.<proguard.shrink.InnerUsageMarker: boolean attributeUsed> = 0;

        virtualinvoke $r2.<proguard.classfile.attribute.InnerClassesAttribute: void innerClassEntriesAccept(proguard.classfile.Clazz,proguard.classfile.attribute.visitor.InnerClassesInfoVisitor)>($r1, r0);

        $z0 = r0.<proguard.shrink.InnerUsageMarker: boolean attributeUsed>;

        if $z0 == 0 goto label1;

        $r3 = r0.<proguard.shrink.InnerUsageMarker: proguard.shrink.UsageMarker usageMarker>;

        virtualinvoke $r3.<proguard.shrink.UsageMarker: void markAsUsed(proguard.classfile.VisitorAccepter)>($r2);

        $i0 = $r2.<proguard.classfile.attribute.InnerClassesAttribute: int u2attributeNameIndex>;

        specialinvoke r0.<proguard.shrink.InnerUsageMarker: void markConstant(proguard.classfile.Clazz,int)>($r1, $i0);

     label1:
        return;
    }

    public void visitInnerClassesInfo(proguard.classfile.Clazz, proguard.classfile.attribute.InnerClassesInfo)
    {
        proguard.shrink.UsageMarker $r3;
        proguard.classfile.Clazz $r1;
        proguard.shrink.InnerUsageMarker r0;
        proguard.classfile.attribute.InnerClassesInfo $r2;
        boolean $z0, $z1;

        r0 := @this: proguard.shrink.InnerUsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.InnerClassesInfo;

        $r3 = r0.<proguard.shrink.InnerUsageMarker: proguard.shrink.UsageMarker usageMarker>;

        $z0 = virtualinvoke $r3.<proguard.shrink.UsageMarker: boolean isUsed(proguard.classfile.VisitorAccepter)>($r2);

        $z1 = $z0;

        if $z0 != 0 goto label1;

        r0.<proguard.shrink.InnerUsageMarker: boolean classUsed> = 1;

        virtualinvoke $r2.<proguard.classfile.attribute.InnerClassesInfo: void innerClassConstantAccept(proguard.classfile.Clazz,proguard.classfile.constant.visitor.ConstantVisitor)>($r1, r0);

        $z1 = r0.<proguard.shrink.InnerUsageMarker: boolean classUsed>;

        r0.<proguard.shrink.InnerUsageMarker: boolean classUsed> = 1;

        virtualinvoke $r2.<proguard.classfile.attribute.InnerClassesInfo: void outerClassConstantAccept(proguard.classfile.Clazz,proguard.classfile.constant.visitor.ConstantVisitor)>($r1, r0);

        $z0 = r0.<proguard.shrink.InnerUsageMarker: boolean classUsed>;

        $z1 = $z1 & $z0;

        if $z1 == 0 goto label1;

        $r3 = r0.<proguard.shrink.InnerUsageMarker: proguard.shrink.UsageMarker usageMarker>;

        virtualinvoke $r3.<proguard.shrink.UsageMarker: void markAsUsed(proguard.classfile.VisitorAccepter)>($r2);

        virtualinvoke $r2.<proguard.classfile.attribute.InnerClassesInfo: void innerNameConstantAccept(proguard.classfile.Clazz,proguard.classfile.constant.visitor.ConstantVisitor)>($r1, r0);

     label1:
        $z0 = r0.<proguard.shrink.InnerUsageMarker: boolean attributeUsed>;

        $z1 = $z1 | $z0;

        r0.<proguard.shrink.InnerUsageMarker: boolean attributeUsed> = $z1;

        return;
    }

    public void visitLibraryClass(proguard.classfile.LibraryClass)
    {
        proguard.classfile.LibraryClass $r1;
        proguard.shrink.InnerUsageMarker r0;

        r0 := @this: proguard.shrink.InnerUsageMarker;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        r0.<proguard.shrink.InnerUsageMarker: boolean classUsed> = 1;

        return;
    }

    public void visitProgramClass(proguard.classfile.ProgramClass)
    {
        proguard.shrink.UsageMarker $r2;
        proguard.shrink.InnerUsageMarker r0;
        proguard.classfile.ProgramClass $r1;
        boolean $z0;

        r0 := @this: proguard.shrink.InnerUsageMarker;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 = r0.<proguard.shrink.InnerUsageMarker: proguard.shrink.UsageMarker usageMarker>;

        $z0 = virtualinvoke $r2.<proguard.shrink.UsageMarker: boolean isUsed(proguard.classfile.VisitorAccepter)>($r1);

        r0.<proguard.shrink.InnerUsageMarker: boolean classUsed> = $z0;

        return;
    }

    public void visitUtf8Constant(proguard.classfile.Clazz, proguard.classfile.constant.Utf8Constant)
    {
        proguard.shrink.UsageMarker $r3;
        proguard.classfile.Clazz $r1;
        proguard.classfile.constant.Utf8Constant $r2;
        proguard.shrink.InnerUsageMarker r0;

        r0 := @this: proguard.shrink.InnerUsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.Utf8Constant;

        $r3 = r0.<proguard.shrink.InnerUsageMarker: proguard.shrink.UsageMarker usageMarker>;

        virtualinvoke $r3.<proguard.shrink.UsageMarker: void markAsUsed(proguard.classfile.VisitorAccepter)>($r2);

        return;
    }
}
