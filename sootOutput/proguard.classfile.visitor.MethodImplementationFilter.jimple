public class proguard.classfile.visitor.MethodImplementationFilter extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.visitor.MemberVisitor
{
    private final proguard.classfile.visitor.MemberVisitor memberVisitor;

    public void <init>(proguard.classfile.visitor.MemberVisitor)
    {
        proguard.classfile.visitor.MemberVisitor $r1;
        proguard.classfile.visitor.MethodImplementationFilter r0;

        r0 := @this: proguard.classfile.visitor.MethodImplementationFilter;

        $r1 := @parameter0: proguard.classfile.visitor.MemberVisitor;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        r0.<proguard.classfile.visitor.MethodImplementationFilter: proguard.classfile.visitor.MemberVisitor memberVisitor> = $r1;

        return;
    }

    public void visitLibraryMethod(proguard.classfile.LibraryClass, proguard.classfile.LibraryMethod)
    {
        proguard.classfile.LibraryClass $r1;
        proguard.classfile.visitor.MethodImplementationFilter r0;
        proguard.classfile.LibraryMethod $r2;
        proguard.classfile.visitor.MemberVisitor $r3;
        boolean $z0;

        r0 := @this: proguard.classfile.visitor.MethodImplementationFilter;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        $r2 := @parameter1: proguard.classfile.LibraryMethod;

        $z0 = virtualinvoke $r1.<proguard.classfile.LibraryClass: boolean mayHaveImplementations(proguard.classfile.Method)>($r2);

        if $z0 == 0 goto label1;

        $r3 = r0.<proguard.classfile.visitor.MethodImplementationFilter: proguard.classfile.visitor.MemberVisitor memberVisitor>;

        interfaceinvoke $r3.<proguard.classfile.visitor.MemberVisitor: void visitLibraryMethod(proguard.classfile.LibraryClass,proguard.classfile.LibraryMethod)>($r1, $r2);

     label1:
        return;
    }

    public void visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod)
    {
        proguard.classfile.visitor.MethodImplementationFilter r0;
        proguard.classfile.ProgramMethod $r2;
        proguard.classfile.visitor.MemberVisitor $r3;
        proguard.classfile.ProgramClass $r1;
        boolean $z0;

        r0 := @this: proguard.classfile.visitor.MethodImplementationFilter;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.ProgramMethod;

        $z0 = virtualinvoke $r1.<proguard.classfile.ProgramClass: boolean mayHaveImplementations(proguard.classfile.Method)>($r2);

        if $z0 == 0 goto label1;

        $r3 = r0.<proguard.classfile.visitor.MethodImplementationFilter: proguard.classfile.visitor.MemberVisitor memberVisitor>;

        interfaceinvoke $r3.<proguard.classfile.visitor.MemberVisitor: void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod)>($r1, $r2);

     label1:
        return;
    }
}
