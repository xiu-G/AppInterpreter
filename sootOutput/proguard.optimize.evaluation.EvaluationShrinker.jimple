public class proguard.optimize.evaluation.EvaluationShrinker extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.attribute.visitor.AttributeVisitor
{
    private static final boolean DEBUG;
    private static final boolean DEBUG_RESULTS;
    private final proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor;
    private final proguard.classfile.instruction.visitor.InstructionVisitor extraAddedInstructionVisitor;
    private final proguard.classfile.instruction.visitor.InstructionVisitor extraDeletedInstructionVisitor;
    private boolean[] instructionsNecessary;
    private int maxMarkedOffset;
    private final proguard.optimize.evaluation.PartialEvaluator partialEvaluator;
    private final proguard.optimize.evaluation.EvaluationShrinker$MyProducerMarker producerMarker;
    private final proguard.optimize.info.SideEffectInstructionChecker sideEffectInstructionChecker;
    private final proguard.optimize.evaluation.PartialEvaluator simplePartialEvaluator;
    private final proguard.optimize.evaluation.EvaluationShrinker$MyStackConsistencyFixer stackConsistencyFixer;
    private boolean[][] stacksNecessaryAfter;
    private boolean[][] stacksSimplifiedBefore;
    private final proguard.optimize.evaluation.EvaluationShrinker$MyUnusedParameterSimplifier unusedParameterSimplifier;
    private final proguard.optimize.evaluation.EvaluationShrinker$MyVariableInitializationMarker variableInitializationMarker;
    private boolean[][] variablesNecessaryAfter;

    public void <init>()
    {
        proguard.optimize.evaluation.EvaluationShrinker r0;
        proguard.optimize.evaluation.PartialEvaluator $r1;

        r0 := @this: proguard.optimize.evaluation.EvaluationShrinker;

        $r1 = new proguard.optimize.evaluation.PartialEvaluator;

        specialinvoke $r1.<proguard.optimize.evaluation.PartialEvaluator: void <init>()>();

        specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: void <init>(proguard.optimize.evaluation.PartialEvaluator,proguard.classfile.instruction.visitor.InstructionVisitor,proguard.classfile.instruction.visitor.InstructionVisitor)>($r1, null, null);

        return;
    }

    public void <init>(proguard.optimize.evaluation.PartialEvaluator, proguard.classfile.instruction.visitor.InstructionVisitor, proguard.classfile.instruction.visitor.InstructionVisitor)
    {
        proguard.optimize.evaluation.EvaluationShrinker r0;
        proguard.optimize.evaluation.EvaluationShrinker$MyVariableInitializationMarker $r8;
        proguard.optimize.evaluation.PartialEvaluator $r1, $r4;
        int[] $r11;
        proguard.optimize.evaluation.EvaluationShrinker$MyUnusedParameterSimplifier $r6;
        proguard.classfile.editor.CodeAttributeEditor $r10;
        boolean[] $r15;
        proguard.optimize.info.SideEffectInstructionChecker $r5;
        proguard.classfile.instruction.visitor.InstructionVisitor $r2, $r3;
        java.lang.Class $r12;
        java.lang.Object $r13;
        boolean[][] $r14;
        proguard.optimize.evaluation.EvaluationShrinker$MyProducerMarker $r7;
        proguard.optimize.evaluation.EvaluationShrinker$MyStackConsistencyFixer $r9;

        r0 := @this: proguard.optimize.evaluation.EvaluationShrinker;

        $r1 := @parameter0: proguard.optimize.evaluation.PartialEvaluator;

        $r2 := @parameter1: proguard.classfile.instruction.visitor.InstructionVisitor;

        $r3 := @parameter2: proguard.classfile.instruction.visitor.InstructionVisitor;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        $r4 = new proguard.optimize.evaluation.PartialEvaluator;

        specialinvoke $r4.<proguard.optimize.evaluation.PartialEvaluator: void <init>()>();

        r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.optimize.evaluation.PartialEvaluator simplePartialEvaluator> = $r4;

        $r5 = new proguard.optimize.info.SideEffectInstructionChecker;

        specialinvoke $r5.<proguard.optimize.info.SideEffectInstructionChecker: void <init>(boolean)>(1);

        r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.optimize.info.SideEffectInstructionChecker sideEffectInstructionChecker> = $r5;

        $r6 = new proguard.optimize.evaluation.EvaluationShrinker$MyUnusedParameterSimplifier;

        specialinvoke $r6.<proguard.optimize.evaluation.EvaluationShrinker$MyUnusedParameterSimplifier: void <init>(proguard.optimize.evaluation.EvaluationShrinker,proguard.optimize.evaluation.EvaluationShrinker$1)>(r0, null);

        r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.optimize.evaluation.EvaluationShrinker$MyUnusedParameterSimplifier unusedParameterSimplifier> = $r6;

        $r7 = new proguard.optimize.evaluation.EvaluationShrinker$MyProducerMarker;

        specialinvoke $r7.<proguard.optimize.evaluation.EvaluationShrinker$MyProducerMarker: void <init>(proguard.optimize.evaluation.EvaluationShrinker,proguard.optimize.evaluation.EvaluationShrinker$1)>(r0, null);

        r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.optimize.evaluation.EvaluationShrinker$MyProducerMarker producerMarker> = $r7;

        $r8 = new proguard.optimize.evaluation.EvaluationShrinker$MyVariableInitializationMarker;

        specialinvoke $r8.<proguard.optimize.evaluation.EvaluationShrinker$MyVariableInitializationMarker: void <init>(proguard.optimize.evaluation.EvaluationShrinker,proguard.optimize.evaluation.EvaluationShrinker$1)>(r0, null);

        r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.optimize.evaluation.EvaluationShrinker$MyVariableInitializationMarker variableInitializationMarker> = $r8;

        $r9 = new proguard.optimize.evaluation.EvaluationShrinker$MyStackConsistencyFixer;

        specialinvoke $r9.<proguard.optimize.evaluation.EvaluationShrinker$MyStackConsistencyFixer: void <init>(proguard.optimize.evaluation.EvaluationShrinker,proguard.optimize.evaluation.EvaluationShrinker$1)>(r0, null);

        r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.optimize.evaluation.EvaluationShrinker$MyStackConsistencyFixer stackConsistencyFixer> = $r9;

        $r10 = new proguard.classfile.editor.CodeAttributeEditor;

        specialinvoke $r10.<proguard.classfile.editor.CodeAttributeEditor: void <init>(boolean)>(0);

        r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor> = $r10;

        $r11 = newarray (int)[2];

        $r11[0] = 1024;

        $r11[1] = 64;

        $r12 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r13 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r12, $r11);

        $r14 = (boolean[][]) $r13;

        r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean[][] variablesNecessaryAfter> = $r14;

        $r11 = newarray (int)[2];

        $r11[0] = 1024;

        $r11[1] = 16;

        $r12 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r13 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r12, $r11);

        $r14 = (boolean[][]) $r13;

        r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean[][] stacksNecessaryAfter> = $r14;

        $r11 = newarray (int)[2];

        $r11[0] = 1024;

        $r11[1] = 16;

        $r12 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r13 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r12, $r11);

        $r14 = (boolean[][]) $r13;

        r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean[][] stacksSimplifiedBefore> = $r14;

        $r15 = newarray (boolean)[1024];

        r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean[] instructionsNecessary> = $r15;

        r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.optimize.evaluation.PartialEvaluator partialEvaluator> = $r1;

        r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.classfile.instruction.visitor.InstructionVisitor extraDeletedInstructionVisitor> = $r2;

        r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.classfile.instruction.visitor.InstructionVisitor extraAddedInstructionVisitor> = $r3;

        return;
    }

    static void access$1000(proguard.optimize.evaluation.EvaluationShrinker, int)
    {
        proguard.optimize.evaluation.EvaluationShrinker $r0;
        int $i0;

        $r0 := @parameter0: proguard.optimize.evaluation.EvaluationShrinker;

        $i0 := @parameter1: int;

        specialinvoke $r0.<proguard.optimize.evaluation.EvaluationShrinker: void markInitialization(int)>($i0);

        return;
    }

    static void access$1100(proguard.optimize.evaluation.EvaluationShrinker, int, int)
    {
        proguard.optimize.evaluation.EvaluationShrinker $r0;
        int $i0, $i1;

        $r0 := @parameter0: proguard.optimize.evaluation.EvaluationShrinker;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        specialinvoke $r0.<proguard.optimize.evaluation.EvaluationShrinker: void markStackEntryAfter(int,int)>($i0, 0);

        return;
    }

    static boolean access$1200(proguard.optimize.evaluation.EvaluationShrinker, int, int)
    {
        proguard.optimize.evaluation.EvaluationShrinker $r0;
        int $i0, $i1;
        boolean $z0;

        $r0 := @parameter0: proguard.optimize.evaluation.EvaluationShrinker;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 = specialinvoke $r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean isVariableInitialization(int,int)>($i0, $i1);

        return $z0;
    }

    static boolean access$1300(proguard.optimize.evaluation.EvaluationShrinker, proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, int)
    {
        proguard.optimize.evaluation.EvaluationShrinker $r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0, $i1;
        proguard.classfile.Method $r2;
        boolean $z0;

        $r0 := @parameter0: proguard.optimize.evaluation.EvaluationShrinker;

        $r1 := @parameter1: proguard.classfile.Clazz;

        $r2 := @parameter2: proguard.classfile.Method;

        $r3 := @parameter3: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter4: int;

        $i1 := @parameter5: int;

        $z0 = specialinvoke $r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean isVariableInitializationNecessary(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,int)>($r1, $r2, $r3, $i0, $i1);

        return $z0;
    }

    static void access$1400(proguard.optimize.evaluation.EvaluationShrinker, int)
    {
        proguard.optimize.evaluation.EvaluationShrinker $r0;
        int $i0;

        $r0 := @parameter0: proguard.optimize.evaluation.EvaluationShrinker;

        $i0 := @parameter1: int;

        specialinvoke $r0.<proguard.optimize.evaluation.EvaluationShrinker: void markInstruction(int)>($i0);

        return;
    }

    static boolean access$1500(proguard.optimize.evaluation.EvaluationShrinker, int)
    {
        proguard.optimize.evaluation.EvaluationShrinker $r0;
        int $i0;
        boolean $z0;

        $r0 := @parameter0: proguard.optimize.evaluation.EvaluationShrinker;

        $i0 := @parameter1: int;

        $z0 = specialinvoke $r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean isInstructionNecessary(int)>($i0);

        return $z0;
    }

    static boolean access$1600(proguard.optimize.evaluation.EvaluationShrinker, int, int)
    {
        proguard.optimize.evaluation.EvaluationShrinker $r0;
        int $i0, $i1;
        boolean $z0;

        $r0 := @parameter0: proguard.optimize.evaluation.EvaluationShrinker;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 = specialinvoke $r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean isStackSimplifiedBefore(int,int)>($i0, $i1);

        return $z0;
    }

    static boolean access$1700(proguard.optimize.evaluation.EvaluationShrinker, proguard.evaluation.value.InstructionOffsetValue, int)
    {
        proguard.optimize.evaluation.EvaluationShrinker $r0;
        proguard.evaluation.value.InstructionOffsetValue $r1;
        int $i0;
        boolean $z0;

        $r0 := @parameter0: proguard.optimize.evaluation.EvaluationShrinker;

        $r1 := @parameter1: proguard.evaluation.value.InstructionOffsetValue;

        $i0 := @parameter2: int;

        $z0 = specialinvoke $r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean isAnyStackEntryNecessaryAfter(proguard.evaluation.value.InstructionOffsetValue,int)>($r1, $i0);

        return $z0;
    }

    static void access$1800(proguard.optimize.evaluation.EvaluationShrinker, int, boolean, int)
    {
        proguard.optimize.evaluation.EvaluationShrinker $r0;
        int $i0, $i1;
        boolean $z0;

        $r0 := @parameter0: proguard.optimize.evaluation.EvaluationShrinker;

        $i0 := @parameter1: int;

        $z0 := @parameter2: boolean;

        $i1 := @parameter3: int;

        specialinvoke $r0.<proguard.optimize.evaluation.EvaluationShrinker: void insertPushInstructions(int,boolean,int)>($i0, $z0, $i1);

        return;
    }

    static boolean access$1900(proguard.optimize.evaluation.EvaluationShrinker, int, int)
    {
        proguard.optimize.evaluation.EvaluationShrinker $r0;
        int $i0, $i1;
        boolean $z0;

        $r0 := @parameter0: proguard.optimize.evaluation.EvaluationShrinker;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 = specialinvoke $r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean isStackEntryNecessaryAfter(int,int)>($i0, $i1);

        return $z0;
    }

    static void access$2000(proguard.optimize.evaluation.EvaluationShrinker, int, boolean, int)
    {
        proguard.optimize.evaluation.EvaluationShrinker $r0;
        int $i0, $i1;
        boolean $z0;

        $r0 := @parameter0: proguard.optimize.evaluation.EvaluationShrinker;

        $i0 := @parameter1: int;

        $z0 := @parameter2: boolean;

        $i1 := @parameter3: int;

        specialinvoke $r0.<proguard.optimize.evaluation.EvaluationShrinker: void insertPopInstructions(int,boolean,int)>($i0, $z0, $i1);

        return;
    }

    static boolean access$2100(proguard.optimize.evaluation.EvaluationShrinker, proguard.classfile.instruction.Instruction)
    {
        proguard.optimize.evaluation.EvaluationShrinker $r0;
        proguard.classfile.instruction.Instruction $r1;
        boolean $z0;

        $r0 := @parameter0: proguard.optimize.evaluation.EvaluationShrinker;

        $r1 := @parameter1: proguard.classfile.instruction.Instruction;

        $z0 = specialinvoke $r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean isDupOrSwap(proguard.classfile.instruction.Instruction)>($r1);

        return $z0;
    }

    static void access$2200(proguard.optimize.evaluation.EvaluationShrinker, proguard.classfile.Clazz, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.Instruction)
    {
        proguard.optimize.evaluation.EvaluationShrinker $r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r2;
        proguard.classfile.instruction.Instruction $r3;
        int $i0;

        $r0 := @parameter0: proguard.optimize.evaluation.EvaluationShrinker;

        $r1 := @parameter1: proguard.classfile.Clazz;

        $r2 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r3 := @parameter4: proguard.classfile.instruction.Instruction;

        specialinvoke $r0.<proguard.optimize.evaluation.EvaluationShrinker: void fixDupInstruction(proguard.classfile.Clazz,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction)>($r1, $r2, $i0, $r3);

        return;
    }

    static void access$400(proguard.optimize.evaluation.EvaluationShrinker, proguard.classfile.Clazz, int, proguard.classfile.instruction.ConstantInstruction)
    {
        proguard.optimize.evaluation.EvaluationShrinker $r0;
        proguard.classfile.Clazz $r1;
        int $i0;
        proguard.classfile.instruction.ConstantInstruction $r2;

        $r0 := @parameter0: proguard.optimize.evaluation.EvaluationShrinker;

        $r1 := @parameter1: proguard.classfile.Clazz;

        $i0 := @parameter2: int;

        $r2 := @parameter3: proguard.classfile.instruction.ConstantInstruction;

        specialinvoke $r0.<proguard.optimize.evaluation.EvaluationShrinker: void replaceByStaticInvocation(proguard.classfile.Clazz,int,proguard.classfile.instruction.ConstantInstruction)>($r1, $i0, $r2);

        return;
    }

    static proguard.optimize.evaluation.PartialEvaluator access$500(proguard.optimize.evaluation.EvaluationShrinker)
    {
        proguard.optimize.evaluation.EvaluationShrinker $r0;
        proguard.optimize.evaluation.PartialEvaluator r1;

        $r0 := @parameter0: proguard.optimize.evaluation.EvaluationShrinker;

        r1 = $r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.optimize.evaluation.PartialEvaluator partialEvaluator>;

        return r1;
    }

    static void access$600(proguard.optimize.evaluation.EvaluationShrinker, int, int)
    {
        proguard.optimize.evaluation.EvaluationShrinker $r0;
        int $i0, $i1;

        $r0 := @parameter0: proguard.optimize.evaluation.EvaluationShrinker;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        specialinvoke $r0.<proguard.optimize.evaluation.EvaluationShrinker: void markStackSimplificationBefore(int,int)>($i0, $i1);

        return;
    }

    static void access$700(proguard.optimize.evaluation.EvaluationShrinker, proguard.classfile.Clazz, int, proguard.classfile.instruction.Instruction)
    {
        proguard.optimize.evaluation.EvaluationShrinker $r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.instruction.Instruction $r2;
        int $i0;

        $r0 := @parameter0: proguard.optimize.evaluation.EvaluationShrinker;

        $r1 := @parameter1: proguard.classfile.Clazz;

        $i0 := @parameter2: int;

        $r2 := @parameter3: proguard.classfile.instruction.Instruction;

        specialinvoke $r0.<proguard.optimize.evaluation.EvaluationShrinker: void markStackProducers(proguard.classfile.Clazz,int,proguard.classfile.instruction.Instruction)>($r1, $i0, $r2);

        return;
    }

    static void access$800(proguard.optimize.evaluation.EvaluationShrinker, int, int, int)
    {
        proguard.optimize.evaluation.EvaluationShrinker $r0;
        int $i0, $i1, $i2;

        $r0 := @parameter0: proguard.optimize.evaluation.EvaluationShrinker;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        specialinvoke $r0.<proguard.optimize.evaluation.EvaluationShrinker: void conditionallyMarkStackEntryProducers(int,int,int)>($i0, $i1, $i2);

        return;
    }

    static void access$900(proguard.optimize.evaluation.EvaluationShrinker, int, int)
    {
        proguard.optimize.evaluation.EvaluationShrinker $r0;
        int $i0, $i1;

        $r0 := @parameter0: proguard.optimize.evaluation.EvaluationShrinker;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        specialinvoke $r0.<proguard.optimize.evaluation.EvaluationShrinker: void markVariableProducers(int,int)>($i0, $i1);

        return;
    }

    private void conditionallyMarkStackEntryProducers(int, int, int)
    {
        proguard.optimize.evaluation.EvaluationShrinker r0;
        proguard.evaluation.TracedStack $r2;
        proguard.optimize.evaluation.PartialEvaluator $r1;
        int $i0, $i1, $i2, $i3;
        boolean $z0;

        r0 := @this: proguard.optimize.evaluation.EvaluationShrinker;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $r1 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.optimize.evaluation.PartialEvaluator partialEvaluator>;

        $r2 = virtualinvoke $r1.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedStack getStackAfter(int)>($i0);

        $i3 = virtualinvoke $r2.<proguard.evaluation.TracedStack: int size()>();

        $i3 = $i3 - 1;

        $i1 = $i3 - $i1;

        $z0 = specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean isStackEntryNecessaryAfter(int,int)>($i0, $i1);

        if $z0 == 0 goto label1;

        specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: void markStackEntryProducers(int,int)>($i0, $i2);

     label1:
        return;
    }

    private void fixDupInstruction(proguard.classfile.Clazz, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.Instruction)
    {
        proguard.optimize.evaluation.EvaluationShrinker r0;
        proguard.optimize.evaluation.PartialEvaluator $r4;
        byte $b2, $b3;
        proguard.classfile.Clazz $r1;
        java.lang.StringBuffer $r8, $r10;
        int $i0, $i1, $i4, $i5;
        java.lang.String $r9;
        boolean $z0, $z1, $z2, $z3;
        java.lang.UnsupportedOperationException $r11;
        proguard.classfile.editor.CodeAttributeEditor $r6;
        proguard.evaluation.TracedStack $r5;
        proguard.classfile.instruction.SimpleInstruction $r12;
        proguard.classfile.instruction.visitor.InstructionVisitor $r7;
        proguard.classfile.attribute.CodeAttribute $r2;
        proguard.classfile.instruction.Instruction $r3;

        r0 := @this: proguard.optimize.evaluation.EvaluationShrinker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter2: int;

        $r3 := @parameter3: proguard.classfile.instruction.Instruction;

        $r4 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.optimize.evaluation.PartialEvaluator partialEvaluator>;

        $r5 = virtualinvoke $r4.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedStack getStackAfter(int)>($i0);

        $i1 = virtualinvoke $r5.<proguard.evaluation.TracedStack: int size()>();

        $i1 = $i1 - 1;

        $b2 = $r3.<proguard.classfile.instruction.Instruction: byte opcode>;

        $i4 = (int) $b2;

        lookupswitch($i4)
        {
            case 89: goto label03;
            case 90: goto label05;
            case 91: goto label10;
            case 92: goto label18;
            case 93: goto label20;
            case 94: goto label25;
            case 95: goto label32;
            default: goto label01;
        };

     label01:
        $b3 = 0;

     label02:
        if $b3 != 0 goto label34;

        $r6 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor>;

        virtualinvoke $r6.<proguard.classfile.editor.CodeAttributeEditor: void deleteInstruction(int)>($i0);

        $r7 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.classfile.instruction.visitor.InstructionVisitor extraDeletedInstructionVisitor>;

        if $r7 == null goto label36;

        $r7 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.classfile.instruction.visitor.InstructionVisitor extraDeletedInstructionVisitor>;

        interfaceinvoke $r7.<proguard.classfile.instruction.visitor.InstructionVisitor: void visitSimpleInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.SimpleInstruction)>(null, null, null, $i0, null);

        return;

     label03:
        $i4 = $i1;

        $z0 = specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean isStackEntryNecessaryAfter(int,int)>($i0, $i4);

        $i1 = $i1 - 1;

        $z1 = specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean isStackEntryNecessaryAfter(int,int)>($i0, $i1);

        if $z0 != 0 goto label04;

        if $z1 == 0 goto label01;

     label04:
        if $z0 == 0 goto label01;

        if $z1 == 0 goto label01;

        $b3 = 89;

        goto label02;

     label05:
        $i4 = $i1;

        $z0 = specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean isStackEntryNecessaryAfter(int,int)>($i0, $i4);

        $i4 = $i1 - 1;

        $z1 = specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean isStackEntryNecessaryAfter(int,int)>($i0, $i4);

        $i1 = $i1 - 2;

        $z2 = specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean isStackEntryNecessaryAfter(int,int)>($i0, $i1);

        if $z0 != 0 goto label06;

        if $z2 == 0 goto label01;

     label06:
        if $z2 == 0 goto label01;

        if $z1 == 0 goto label08;

        $z1 = 1;

     label07:
        if $z0 == 0 goto label09;

        $i1 = $z1 + 89;

        $b3 = (byte) $i1;

        goto label02;

     label08:
        $z1 = 0;

        goto label07;

     label09:
        if $z1 != 1 goto label01;

        $b3 = 95;

        goto label02;

     label10:
        $i4 = $i1;

        $z0 = specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean isStackEntryNecessaryAfter(int,int)>($i0, $i4);

        $i4 = $i1 - 1;

        $z2 = specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean isStackEntryNecessaryAfter(int,int)>($i0, $i4);

        $i4 = $i1 - 2;

        $z1 = specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean isStackEntryNecessaryAfter(int,int)>($i0, $i4);

        $i1 = $i1 - 3;

        $z3 = specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean isStackEntryNecessaryAfter(int,int)>($i0, $i1);

        if $z0 != 0 goto label11;

        if $z3 == 0 goto label01;

     label11:
        if $z3 == 0 goto label01;

        if $z2 == 0 goto label14;

        $z2 = 1;

     label12:
        if $z1 == 0 goto label15;

        $z1 = 1;

     label13:
        $i1 = $z2 + $z1;

        if $z0 == 0 goto label16;

        $i1 = $i1 + 89;

        $b3 = (byte) $i1;

        goto label02;

     label14:
        $z2 = 0;

        goto label12;

     label15:
        $z1 = 0;

        goto label13;

     label16:
        if $i1 != 1 goto label17;

        $b3 = 95;

        goto label02;

     label17:
        if $i1 != 2 goto label01;

        $r11 = new java.lang.UnsupportedOperationException;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Can\'t handle dup_x2 instruction moving original element across two elements at [");

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r9);

        throw $r11;

     label18:
        $i4 = $i1;

        $i5 = $i1 - 1;

        $z0 = specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean isStackEntriesNecessaryAfter(int,int,int)>($i0, $i4, $i5);

        $i4 = $i1 - 2;

        $i1 = $i1 - 3;

        $z1 = specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean isStackEntriesNecessaryAfter(int,int,int)>($i0, $i4, $i1);

        if $z0 != 0 goto label19;

        if $z1 == 0 goto label01;

     label19:
        if $z0 == 0 goto label01;

        if $z1 == 0 goto label01;

        $b3 = 92;

        goto label02;

     label20:
        $i4 = $i1;

        $i5 = $i1 - 1;

        $z0 = specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean isStackEntriesNecessaryAfter(int,int,int)>($i0, $i4, $i5);

        $i4 = $i1 - 2;

        $z1 = specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean isStackEntryNecessaryAfter(int,int)>($i0, $i4);

        $i4 = $i1 - 3;

        $i1 = $i1 - 4;

        $z2 = specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean isStackEntriesNecessaryAfter(int,int,int)>($i0, $i4, $i1);

        if $z0 != 0 goto label21;

        if $z2 == 0 goto label01;

     label21:
        if $z2 == 0 goto label01;

        if $z1 == 0 goto label23;

        $b3 = 1;

     label22:
        if $z0 == 0 goto label24;

        $i1 = $b3 + 92;

        $b3 = (byte) $i1;

        goto label02;

     label23:
        $b3 = 0;

        goto label22;

     label24:
        if $b3 <= 0 goto label01;

        $r11 = new java.lang.UnsupportedOperationException;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Can\'t handle dup2_x1 instruction moving original element across ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($b3);

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" elements at [");

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r9);

        throw $r11;

     label25:
        $i4 = $i1;

        $i5 = $i1 - 1;

        $z0 = specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean isStackEntriesNecessaryAfter(int,int,int)>($i0, $i4, $i5);

        $i4 = $i1 - 2;

        $z2 = specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean isStackEntryNecessaryAfter(int,int)>($i0, $i4);

        $i4 = $i1 - 3;

        $z1 = specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean isStackEntryNecessaryAfter(int,int)>($i0, $i4);

        $i4 = $i1 - 4;

        $i1 = $i1 - 5;

        $z3 = specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean isStackEntriesNecessaryAfter(int,int,int)>($i0, $i4, $i1);

        if $z0 != 0 goto label26;

        if $z3 == 0 goto label01;

     label26:
        if $z3 == 0 goto label01;

        if $z2 == 0 goto label29;

        $z2 = 1;

     label27:
        if $z1 == 0 goto label30;

        $z1 = 1;

     label28:
        $i1 = $z2 + $z1;

        if $z0 == 0 goto label31;

        $i1 = $i1 + 92;

        $b3 = (byte) $i1;

        goto label02;

     label29:
        $z2 = 0;

        goto label27;

     label30:
        $z1 = 0;

        goto label28;

     label31:
        if $i1 <= 0 goto label01;

        $r11 = new java.lang.UnsupportedOperationException;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Can\'t handle dup2_x2 instruction moving original element across ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" elements at [");

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r9);

        throw $r11;

     label32:
        $i4 = $i1;

        $z0 = specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean isStackEntryNecessaryAfter(int,int)>($i0, $i4);

        $i1 = $i1 - 1;

        $z1 = specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean isStackEntryNecessaryAfter(int,int)>($i0, $i1);

        if $z0 != 0 goto label33;

        if $z1 == 0 goto label01;

     label33:
        if $z0 == 0 goto label01;

        if $z1 == 0 goto label01;

        $b3 = 95;

        goto label02;

     label34:
        $i1 = (int) $b2;

        if $b3 != $i1 goto label35;

        $r6 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor>;

        virtualinvoke $r6.<proguard.classfile.editor.CodeAttributeEditor: void undeleteInstruction(int)>($i0);

        return;

     label35:
        $r12 = new proguard.classfile.instruction.SimpleInstruction;

        specialinvoke $r12.<proguard.classfile.instruction.SimpleInstruction: void <init>(byte)>($b3);

        $r6 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor>;

        virtualinvoke $r6.<proguard.classfile.editor.CodeAttributeEditor: void replaceInstruction(int,proguard.classfile.instruction.Instruction)>($i0, $r12);

     label36:
        return;
    }

    private void initializeNecessary(proguard.classfile.attribute.CodeAttribute)
    {
        proguard.optimize.evaluation.EvaluationShrinker r0;
        boolean[] $r3;
        proguard.classfile.attribute.CodeAttribute $r1;
        int[] $r4;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Class $r5;
        java.lang.Object $r6;
        boolean[][] $r2;

        r0 := @this: proguard.optimize.evaluation.EvaluationShrinker;

        $r1 := @parameter0: proguard.classfile.attribute.CodeAttribute;

        $i0 = $r1.<proguard.classfile.attribute.CodeAttribute: int u4codeLength>;

        $i1 = $r1.<proguard.classfile.attribute.CodeAttribute: int u2maxLocals>;

        $i2 = $r1.<proguard.classfile.attribute.CodeAttribute: int u2maxStack>;

        $r2 = r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean[][] variablesNecessaryAfter>;

        $i3 = lengthof $r2;

        if $i3 < $i0 goto label01;

        $r2 = r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean[][] variablesNecessaryAfter>;

        $r3 = $r2[0];

        $i3 = lengthof $r3;

        if $i3 >= $i1 goto label07;

     label01:
        $r4 = newarray (int)[2];

        $r4[0] = $i0;

        $r4[1] = $i1;

        $r5 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r6 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r5, $r4);

        $r2 = (boolean[][]) $r6;

        r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean[][] variablesNecessaryAfter> = $r2;

     label02:
        $r2 = r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean[][] stacksNecessaryAfter>;

        $i1 = lengthof $r2;

        if $i1 < $i0 goto label03;

        $r2 = r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean[][] stacksNecessaryAfter>;

        $r3 = $r2[0];

        $i1 = lengthof $r3;

        if $i1 >= $i2 goto label11;

     label03:
        $r4 = newarray (int)[2];

        $r4[0] = $i0;

        $r4[1] = $i2;

        $r5 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r6 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r5, $r4);

        $r2 = (boolean[][]) $r6;

        r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean[][] stacksNecessaryAfter> = $r2;

     label04:
        $r2 = r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean[][] stacksSimplifiedBefore>;

        $i1 = lengthof $r2;

        if $i1 < $i0 goto label05;

        $r2 = r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean[][] stacksSimplifiedBefore>;

        $r3 = $r2[0];

        $i1 = lengthof $r3;

        if $i1 >= $i2 goto label15;

     label05:
        $r4 = newarray (int)[2];

        $r4[0] = $i0;

        $r4[1] = $i2;

        $r5 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r6 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r5, $r4);

        $r2 = (boolean[][]) $r6;

        r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean[][] stacksSimplifiedBefore> = $r2;

     label06:
        $r3 = r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean[] instructionsNecessary>;

        $i2 = lengthof $r3;

        if $i2 >= $i0 goto label19;

        $r3 = newarray (boolean)[$i0];

        r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean[] instructionsNecessary> = $r3;

        return;

     label07:
        $i3 = 0;

     label08:
        if $i3 >= $i0 goto label02;

        $i4 = 0;

     label09:
        if $i4 >= $i1 goto label10;

        $r2 = r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean[][] variablesNecessaryAfter>;

        $r3 = $r2[$i3];

        $r3[$i4] = 0;

        $i4 = $i4 + 1;

        goto label09;

     label10:
        $i3 = $i3 + 1;

        goto label08;

     label11:
        $i1 = 0;

     label12:
        if $i1 >= $i0 goto label04;

        $i3 = 0;

     label13:
        if $i3 >= $i2 goto label14;

        $r2 = r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean[][] stacksNecessaryAfter>;

        $r3 = $r2[$i1];

        $r3[$i3] = 0;

        $i3 = $i3 + 1;

        goto label13;

     label14:
        $i1 = $i1 + 1;

        goto label12;

     label15:
        $i1 = 0;

     label16:
        if $i1 >= $i0 goto label06;

        $i3 = 0;

     label17:
        if $i3 >= $i2 goto label18;

        $r2 = r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean[][] stacksSimplifiedBefore>;

        $r3 = $r2[$i1];

        $r3[$i3] = 0;

        $i3 = $i3 + 1;

        goto label17;

     label18:
        $i1 = $i1 + 1;

        goto label16;

     label19:
        $i2 = 0;

     label20:
        if $i2 >= $i0 goto label21;

        $r3 = r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean[] instructionsNecessary>;

        $r3[$i2] = 0;

        $i2 = $i2 + 1;

        goto label20;

     label21:
        return;
    }

    private void insertPopInstructions(int, boolean, int)
    {
        proguard.optimize.evaluation.EvaluationShrinker r0;
        proguard.classfile.instruction.Instruction[] $r1;
        proguard.classfile.editor.CodeAttributeEditor $r3;
        proguard.classfile.instruction.SimpleInstruction $r2;
        proguard.classfile.instruction.visitor.InstructionVisitor $r4;
        proguard.classfile.instruction.Instruction $r5;
        int $i0, $i1, $i2, $i3;
        boolean $z0;

        r0 := @this: proguard.optimize.evaluation.EvaluationShrinker;

        $i0 := @parameter0: int;

        $z0 := @parameter1: boolean;

        $i1 := @parameter2: int;

        specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: void markInstruction(int)>($i0);

        lookupswitch($i1)
        {
            case 1: goto label03;
            case 2: goto label05;
            default: goto label01;
        };

     label01:
        $i2 = $i1 / 2;

        $i3 = $i1 % 2;

        $i2 = $i2 + $i3;

        $r1 = newarray (proguard.classfile.instruction.Instruction)[$i2];

        $r2 = new proguard.classfile.instruction.SimpleInstruction;

        specialinvoke $r2.<proguard.classfile.instruction.SimpleInstruction: void <init>(byte)>(88);

        $i2 = 0;

     label02:
        $i3 = $i1 / 2;

        if $i2 >= $i3 goto label07;

        $r1[$i2] = $r2;

        $i2 = $i2 + 1;

        goto label02;

     label03:
        $r2 = new proguard.classfile.instruction.SimpleInstruction;

        specialinvoke $r2.<proguard.classfile.instruction.SimpleInstruction: void <init>(byte)>(87);

        if $z0 == 0 goto label04;

        $r3 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor>;

        virtualinvoke $r3.<proguard.classfile.editor.CodeAttributeEditor: void replaceInstruction(int,proguard.classfile.instruction.Instruction)>($i0, $r2);

        return;

     label04:
        $r3 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor>;

        virtualinvoke $r3.<proguard.classfile.editor.CodeAttributeEditor: void insertAfterInstruction(int,proguard.classfile.instruction.Instruction)>($i0, $r2);

        $r4 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.classfile.instruction.visitor.InstructionVisitor extraAddedInstructionVisitor>;

        if $r4 == null goto label14;

        $r4 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.classfile.instruction.visitor.InstructionVisitor extraAddedInstructionVisitor>;

        virtualinvoke $r2.<proguard.classfile.instruction.Instruction: void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.visitor.InstructionVisitor)>(null, null, null, $i0, $r4);

        return;

     label05:
        $r2 = new proguard.classfile.instruction.SimpleInstruction;

        specialinvoke $r2.<proguard.classfile.instruction.SimpleInstruction: void <init>(byte)>(88);

        if $z0 == 0 goto label06;

        $r3 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor>;

        virtualinvoke $r3.<proguard.classfile.editor.CodeAttributeEditor: void replaceInstruction(int,proguard.classfile.instruction.Instruction)>($i0, $r2);

        return;

     label06:
        $r3 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor>;

        virtualinvoke $r3.<proguard.classfile.editor.CodeAttributeEditor: void insertAfterInstruction(int,proguard.classfile.instruction.Instruction)>($i0, $r2);

        $r4 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.classfile.instruction.visitor.InstructionVisitor extraAddedInstructionVisitor>;

        if $r4 == null goto label14;

        $r4 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.classfile.instruction.visitor.InstructionVisitor extraAddedInstructionVisitor>;

        virtualinvoke $r2.<proguard.classfile.instruction.Instruction: void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.visitor.InstructionVisitor)>(null, null, null, $i0, $r4);

        return;

     label07:
        $i2 = $i1 % 2;

        if $i2 != 1 goto label08;

        $r2 = new proguard.classfile.instruction.SimpleInstruction;

        specialinvoke $r2.<proguard.classfile.instruction.SimpleInstruction: void <init>(byte)>(87);

        $i1 = $i1 / 2;

        $r1[$i1] = $r2;

     label08:
        if $z0 == 0 goto label11;

        $r3 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor>;

        virtualinvoke $r3.<proguard.classfile.editor.CodeAttributeEditor: void replaceInstruction(int,proguard.classfile.instruction.Instruction[])>($i0, $r1);

        $i1 = 1;

     label09:
        $i2 = lengthof $r1;

        if $i1 >= $i2 goto label14;

        $r4 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.classfile.instruction.visitor.InstructionVisitor extraAddedInstructionVisitor>;

        if $r4 == null goto label10;

        $r5 = $r1[$i1];

        $r4 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.classfile.instruction.visitor.InstructionVisitor extraAddedInstructionVisitor>;

        virtualinvoke $r5.<proguard.classfile.instruction.Instruction: void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.visitor.InstructionVisitor)>(null, null, null, $i0, $r4);

     label10:
        $i1 = $i1 + 1;

        goto label09;

     label11:
        $r3 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor>;

        virtualinvoke $r3.<proguard.classfile.editor.CodeAttributeEditor: void insertAfterInstruction(int,proguard.classfile.instruction.Instruction[])>($i0, $r1);

        $i1 = 0;

     label12:
        $i2 = lengthof $r1;

        if $i1 >= $i2 goto label14;

        $r4 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.classfile.instruction.visitor.InstructionVisitor extraAddedInstructionVisitor>;

        if $r4 == null goto label13;

        $r5 = $r1[$i1];

        $r4 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.classfile.instruction.visitor.InstructionVisitor extraAddedInstructionVisitor>;

        virtualinvoke $r5.<proguard.classfile.instruction.Instruction: void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.visitor.InstructionVisitor)>(null, null, null, $i0, $r4);

     label13:
        $i1 = $i1 + 1;

        goto label12;

     label14:
        return;
    }

    private void insertPushInstructions(int, boolean, int)
    {
        proguard.optimize.evaluation.EvaluationShrinker r0;
        proguard.classfile.editor.CodeAttributeEditor $r3;
        proguard.classfile.instruction.SimpleInstruction $r1;
        proguard.classfile.instruction.visitor.InstructionVisitor $r2;
        byte $b2;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: proguard.optimize.evaluation.EvaluationShrinker;

        $i0 := @parameter0: int;

        $z0 := @parameter1: boolean;

        $i1 := @parameter2: int;

        specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: void markInstruction(int)>($i0);

        $r1 = new proguard.classfile.instruction.SimpleInstruction;

        $b2 = specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: byte pushOpcode(int)>($i1);

        specialinvoke $r1.<proguard.classfile.instruction.SimpleInstruction: void <init>(byte)>($b2);

        if $z0 == 0 goto label1;

        $r3 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor>;

        virtualinvoke $r3.<proguard.classfile.editor.CodeAttributeEditor: void replaceInstruction(int,proguard.classfile.instruction.Instruction)>($i0, $r1);

        return;

     label1:
        $r3 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor>;

        virtualinvoke $r3.<proguard.classfile.editor.CodeAttributeEditor: void insertBeforeInstruction(int,proguard.classfile.instruction.Instruction)>($i0, $r1);

        $r2 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.classfile.instruction.visitor.InstructionVisitor extraAddedInstructionVisitor>;

        if $r2 == null goto label2;

        $r2 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.classfile.instruction.visitor.InstructionVisitor extraAddedInstructionVisitor>;

        virtualinvoke $r1.<proguard.classfile.instruction.Instruction: void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.visitor.InstructionVisitor)>(null, null, null, $i0, $r2);

     label2:
        return;
    }

    private boolean isAllSmallerThanOrEqual(proguard.evaluation.value.InstructionOffsetValue, int)
    {
        proguard.optimize.evaluation.EvaluationShrinker r0;
        proguard.evaluation.value.InstructionOffsetValue $r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: proguard.optimize.evaluation.EvaluationShrinker;

        $r1 := @parameter0: proguard.evaluation.value.InstructionOffsetValue;

        $i0 := @parameter1: int;

        if $r1 == null goto label4;

        $i1 = virtualinvoke $r1.<proguard.evaluation.value.InstructionOffsetValue: int instructionOffsetCount()>();

        if $i1 <= 0 goto label4;

        $i2 = 0;

     label1:
        if $i2 >= $i1 goto label3;

        $i3 = virtualinvoke $r1.<proguard.evaluation.value.InstructionOffsetValue: int instructionOffset(int)>($i2);

        if $i3 <= $i0 goto label2;

        return 0;

     label2:
        $i2 = $i2 + 1;

        goto label1;

     label3:
        return 1;

     label4:
        return 0;
    }

    private boolean isAnyInstructionNecessary(int, int)
    {
        proguard.optimize.evaluation.EvaluationShrinker r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: proguard.optimize.evaluation.EvaluationShrinker;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

     label1:
        if $i0 >= $i1 goto label3;

        $z0 = specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean isInstructionNecessary(int)>($i0);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        return 0;
    }

    private boolean isAnyLargerThan(proguard.evaluation.value.InstructionOffsetValue, int)
    {
        proguard.optimize.evaluation.EvaluationShrinker r0;
        proguard.evaluation.value.InstructionOffsetValue $r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: proguard.optimize.evaluation.EvaluationShrinker;

        $r1 := @parameter0: proguard.evaluation.value.InstructionOffsetValue;

        $i0 := @parameter1: int;

        if $r1 == null goto label3;

        $i1 = virtualinvoke $r1.<proguard.evaluation.value.InstructionOffsetValue: int instructionOffsetCount()>();

        if $i1 <= 0 goto label3;

        $i2 = 0;

     label1:
        if $i2 >= $i1 goto label3;

        $i3 = virtualinvoke $r1.<proguard.evaluation.value.InstructionOffsetValue: int instructionOffset(int)>($i2);

        if $i3 <= $i0 goto label2;

        return 1;

     label2:
        $i2 = $i2 + 1;

        goto label1;

     label3:
        return 0;
    }

    private boolean isAnyStackEntryNecessaryAfter(proguard.evaluation.value.InstructionOffsetValue, int)
    {
        proguard.optimize.evaluation.EvaluationShrinker r0;
        proguard.evaluation.value.InstructionOffsetValue $r1;
        int $i0, $i1, $i2, $i3;
        boolean $z0;

        r0 := @this: proguard.optimize.evaluation.EvaluationShrinker;

        $r1 := @parameter0: proguard.evaluation.value.InstructionOffsetValue;

        $i0 := @parameter1: int;

        $i1 = virtualinvoke $r1.<proguard.evaluation.value.InstructionOffsetValue: int instructionOffsetCount()>();

        $i2 = 0;

     label1:
        if $i2 >= $i1 goto label3;

        $i3 = virtualinvoke $r1.<proguard.evaluation.value.InstructionOffsetValue: int instructionOffset(int)>($i2);

        $z0 = specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean isStackEntryNecessaryAfter(int,int)>($i3, $i0);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $i2 = $i2 + 1;

        goto label1;

     label3:
        return 0;
    }

    private boolean isAnyUnnecessaryInstructionBranchingOver(int, int)
    {
        proguard.optimize.evaluation.EvaluationShrinker r0;
        proguard.optimize.evaluation.PartialEvaluator $r1;
        proguard.evaluation.value.InstructionOffsetValue $r2;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: proguard.optimize.evaluation.EvaluationShrinker;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

     label1:
        if $i0 >= $i1 goto label3;

        $r1 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.optimize.evaluation.PartialEvaluator partialEvaluator>;

        $z0 = virtualinvoke $r1.<proguard.optimize.evaluation.PartialEvaluator: boolean isTraced(int)>($i0);

        if $z0 == 0 goto label2;

        $z0 = specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean isInstructionNecessary(int)>($i0);

        if $z0 != 0 goto label2;

        $r1 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.optimize.evaluation.PartialEvaluator partialEvaluator>;

        $r2 = virtualinvoke $r1.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.value.InstructionOffsetValue branchTargets(int)>($i0);

        $z0 = specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean isAnyLargerThan(proguard.evaluation.value.InstructionOffsetValue,int)>($r2, $i1);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        return 0;
    }

    private boolean isDupOrSwap(proguard.classfile.instruction.Instruction)
    {
        proguard.optimize.evaluation.EvaluationShrinker r0;
        byte $b0;
        proguard.classfile.instruction.Instruction $r1;
        int $i1;

        r0 := @this: proguard.optimize.evaluation.EvaluationShrinker;

        $r1 := @parameter0: proguard.classfile.instruction.Instruction;

        $b0 = $r1.<proguard.classfile.instruction.Instruction: byte opcode>;

        $i1 = (int) $b0;

        if $i1 < 89 goto label1;

        $b0 = $r1.<proguard.classfile.instruction.Instruction: byte opcode>;

        $i1 = (int) $b0;

        if $i1 > 95 goto label1;

        return 1;

     label1:
        return 0;
    }

    private boolean isInstructionNecessary(int)
    {
        proguard.optimize.evaluation.EvaluationShrinker r0;
        int $i0;
        boolean[] $r1;
        boolean $z0;

        r0 := @this: proguard.optimize.evaluation.EvaluationShrinker;

        $i0 := @parameter0: int;

        if $i0 == -1 goto label1;

        $r1 = r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean[] instructionsNecessary>;

        $z0 = $r1[$i0];

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    private boolean isPop(proguard.classfile.instruction.Instruction)
    {
        proguard.optimize.evaluation.EvaluationShrinker r0;
        byte $b0;
        proguard.classfile.instruction.Instruction $r1;
        int $i1;

        r0 := @this: proguard.optimize.evaluation.EvaluationShrinker;

        $r1 := @parameter0: proguard.classfile.instruction.Instruction;

        $b0 = $r1.<proguard.classfile.instruction.Instruction: byte opcode>;

        $i1 = (int) $b0;

        if $i1 == 87 goto label1;

        $b0 = $r1.<proguard.classfile.instruction.Instruction: byte opcode>;

        $i1 = (int) $b0;

        if $i1 != 88 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    private boolean isStackEntriesNecessaryAfter(int, int, int)
    {
        proguard.optimize.evaluation.EvaluationShrinker r0;
        int $i0, $i1, $i2;
        boolean $z0, $z1;

        r0 := @this: proguard.optimize.evaluation.EvaluationShrinker;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $z0 = specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean isStackEntryNecessaryAfter(int,int)>($i0, $i1);

        $z1 = specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean isStackEntryNecessaryAfter(int,int)>($i0, $i2);

        if $z0 != 0 goto label1;

        if $z1 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    private boolean isStackEntryNecessaryAfter(int, int)
    {
        proguard.optimize.evaluation.EvaluationShrinker r0;
        int $i0, $i1;
        boolean[] $r2;
        boolean[][] $r1;
        boolean $z0;

        r0 := @this: proguard.optimize.evaluation.EvaluationShrinker;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        if $i0 == -1 goto label1;

        $r1 = r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean[][] stacksNecessaryAfter>;

        $r2 = $r1[$i0];

        $z0 = $r2[$i1];

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    private boolean isStackSimplifiedBefore(int, int)
    {
        proguard.optimize.evaluation.EvaluationShrinker r0;
        int $i0, $i1;
        boolean[] $r2;
        boolean[][] $r1;
        boolean $z0;

        r0 := @this: proguard.optimize.evaluation.EvaluationShrinker;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean[][] stacksSimplifiedBefore>;

        $r2 = $r1[$i0];

        $z0 = $r2[$i1];

        return $z0;
    }

    private boolean isVariableInitialization(int, int)
    {
        proguard.optimize.evaluation.EvaluationShrinker r0;
        proguard.evaluation.TracedVariables $r2;
        proguard.optimize.evaluation.PartialEvaluator $r1;
        proguard.evaluation.value.InstructionOffsetValue $r5;
        int $i0, $i1, $i2, $i3;
        proguard.evaluation.value.Value $r3, $r4;

        r0 := @this: proguard.optimize.evaluation.EvaluationShrinker;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.optimize.evaluation.PartialEvaluator partialEvaluator>;

        $r2 = virtualinvoke $r1.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedVariables getVariablesBefore(int)>($i0);

        $r3 = virtualinvoke $r2.<proguard.evaluation.TracedVariables: proguard.evaluation.value.Value getValue(int)>($i1);

        if $r3 != null goto label1;

        return 1;

     label1:
        $r1 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.optimize.evaluation.PartialEvaluator partialEvaluator>;

        $r2 = virtualinvoke $r1.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedVariables getVariablesAfter(int)>($i0);

        $r4 = virtualinvoke $r2.<proguard.evaluation.TracedVariables: proguard.evaluation.value.Value getValue(int)>($i1);

        $i2 = virtualinvoke $r4.<proguard.evaluation.value.Value: int computationalType()>();

        $i3 = virtualinvoke $r3.<proguard.evaluation.value.Value: int computationalType()>();

        if $i2 == $i3 goto label2;

        return 1;

     label2:
        $r1 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.optimize.evaluation.PartialEvaluator partialEvaluator>;

        $r2 = virtualinvoke $r1.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedVariables getVariablesBefore(int)>($i0);

        $r3 = virtualinvoke $r2.<proguard.evaluation.TracedVariables: proguard.evaluation.value.Value getProducerValue(int)>($i1);

        $r5 = virtualinvoke $r3.<proguard.evaluation.value.Value: proguard.evaluation.value.InstructionOffsetValue instructionOffsetValue()>();

        $i0 = virtualinvoke $r5.<proguard.evaluation.value.InstructionOffsetValue: int instructionOffsetCount()>();

        if $i0 != 1 goto label3;

        $r5 = virtualinvoke $r3.<proguard.evaluation.value.Value: proguard.evaluation.value.InstructionOffsetValue instructionOffsetValue()>();

        $i0 = virtualinvoke $r5.<proguard.evaluation.value.InstructionOffsetValue: int instructionOffset(int)>(0);

        if $i0 != -1 goto label3;

        return 1;

     label3:
        return 0;
    }

    private boolean isVariableInitializationNecessary(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, int)
    {
        proguard.optimize.evaluation.EvaluationShrinker r0;
        proguard.evaluation.TracedVariables $r5;
        proguard.optimize.evaluation.PartialEvaluator $r4;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.evaluation.value.InstructionOffsetValue $r8, $r9;
        int $i0, $i1, $i2;
        proguard.classfile.Method $r2;
        proguard.evaluation.value.Value $r6, $r7;
        boolean $z0;

        r0 := @this: proguard.optimize.evaluation.EvaluationShrinker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $i0 = $r3.<proguard.classfile.attribute.CodeAttribute: int u4codeLength>;

        $z0 = specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean isVariableNecessaryAfterAny(int,int,int)>(0, $i0, $i1);

        if $z0 == 0 goto label3;

        $r4 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.optimize.evaluation.PartialEvaluator simplePartialEvaluator>;

        virtualinvoke $r4.<proguard.optimize.evaluation.PartialEvaluator: void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute)>($r1, $r2, $r3);

        $i2 = 0;

     label1:
        if $i2 >= $i0 goto label3;

        $r4 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.optimize.evaluation.PartialEvaluator partialEvaluator>;

        $z0 = virtualinvoke $r4.<proguard.optimize.evaluation.PartialEvaluator: boolean isTraced(int)>($i2);

        if $z0 == 0 goto label2;

        $r4 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.optimize.evaluation.PartialEvaluator partialEvaluator>;

        $r5 = virtualinvoke $r4.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedVariables getVariablesBefore(int)>($i2);

        $r6 = virtualinvoke $r5.<proguard.evaluation.TracedVariables: proguard.evaluation.value.Value getProducerValue(int)>($i1);

        if $r6 == null goto label2;

        $r4 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.optimize.evaluation.PartialEvaluator simplePartialEvaluator>;

        $r5 = virtualinvoke $r4.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedVariables getVariablesBefore(int)>($i2);

        $r7 = virtualinvoke $r5.<proguard.evaluation.TracedVariables: proguard.evaluation.value.Value getProducerValue(int)>($i1);

        if $r7 == null goto label2;

        $r8 = virtualinvoke $r6.<proguard.evaluation.value.Value: proguard.evaluation.value.InstructionOffsetValue instructionOffsetValue()>();

        $r9 = virtualinvoke $r7.<proguard.evaluation.value.Value: proguard.evaluation.value.InstructionOffsetValue instructionOffsetValue()>();

        $z0 = specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean isVariableNecessaryAfterAny(proguard.evaluation.value.InstructionOffsetValue,int)>($r8, $i1);

        if $z0 == 0 goto label2;

        $z0 = specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean isVariableNecessaryAfterAll(proguard.evaluation.value.InstructionOffsetValue,int)>($r9, $i1);

        if $z0 != 0 goto label2;

        return 1;

     label2:
        $i2 = $i2 + 1;

        goto label1;

     label3:
        return 0;
    }

    private boolean isVariableNecessaryAfter(int, int)
    {
        proguard.optimize.evaluation.EvaluationShrinker r0;
        int $i0, $i1;
        boolean[] $r2;
        boolean[][] $r1;
        boolean $z0;

        r0 := @this: proguard.optimize.evaluation.EvaluationShrinker;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        if $i0 == -1 goto label1;

        $r1 = r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean[][] variablesNecessaryAfter>;

        $r2 = $r1[$i0];

        $z0 = $r2[$i1];

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    private boolean isVariableNecessaryAfterAll(proguard.evaluation.value.InstructionOffsetValue, int)
    {
        proguard.optimize.evaluation.EvaluationShrinker r0;
        proguard.evaluation.value.InstructionOffsetValue $r1;
        int $i0, $i1, $i2, $i3;
        boolean $z0;

        r0 := @this: proguard.optimize.evaluation.EvaluationShrinker;

        $r1 := @parameter0: proguard.evaluation.value.InstructionOffsetValue;

        $i0 := @parameter1: int;

        $i1 = virtualinvoke $r1.<proguard.evaluation.value.InstructionOffsetValue: int instructionOffsetCount()>();

        $i2 = 0;

     label1:
        if $i2 >= $i1 goto label3;

        $i3 = virtualinvoke $r1.<proguard.evaluation.value.InstructionOffsetValue: int instructionOffset(int)>($i2);

        $z0 = specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean isVariableNecessaryAfter(int,int)>($i3, $i0);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $i2 = $i2 + 1;

        goto label1;

     label3:
        return 1;
    }

    private boolean isVariableNecessaryAfterAny(int, int, int)
    {
        proguard.optimize.evaluation.EvaluationShrinker r0;
        int $i0, $i1, $i2;
        boolean $z0;

        r0 := @this: proguard.optimize.evaluation.EvaluationShrinker;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

     label1:
        if 0 >= $i1 goto label3;

        $z0 = specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean isVariableNecessaryAfter(int,int)>(0, $i2);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    private boolean isVariableNecessaryAfterAny(proguard.evaluation.value.InstructionOffsetValue, int)
    {
        proguard.optimize.evaluation.EvaluationShrinker r0;
        proguard.evaluation.value.InstructionOffsetValue $r1;
        int $i0, $i1, $i2, $i3;
        boolean $z0;

        r0 := @this: proguard.optimize.evaluation.EvaluationShrinker;

        $r1 := @parameter0: proguard.evaluation.value.InstructionOffsetValue;

        $i0 := @parameter1: int;

        $i1 = virtualinvoke $r1.<proguard.evaluation.value.InstructionOffsetValue: int instructionOffsetCount()>();

        $i2 = 0;

     label1:
        if $i2 >= $i1 goto label3;

        $i3 = virtualinvoke $r1.<proguard.evaluation.value.InstructionOffsetValue: int instructionOffset(int)>($i2);

        $z0 = specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean isVariableNecessaryAfter(int,int)>($i3, $i0);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $i2 = $i2 + 1;

        goto label1;

     label3:
        return 0;
    }

    private int lastNecessaryInstructionOffset(int)
    {
        proguard.optimize.evaluation.EvaluationShrinker r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: proguard.optimize.evaluation.EvaluationShrinker;

        $i0 := @parameter0: int;

        $i1 = $i0 - 1;

     label1:
        if $i1 < 0 goto label3;

        $z0 = specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean isInstructionNecessary(int)>($i0);

        if $z0 == 0 goto label2;

        return $i1;

     label2:
        $i1 = $i1 + -1;

        goto label1;

     label3:
        return 0;
    }

    private void markInitialization(int)
    {
        proguard.optimize.evaluation.EvaluationShrinker r0;
        proguard.optimize.evaluation.PartialEvaluator $r1;
        int $i0, $i1;
        proguard.evaluation.TracedStack $r2;

        r0 := @this: proguard.optimize.evaluation.EvaluationShrinker;

        $i0 := @parameter0: int;

        $r1 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.optimize.evaluation.PartialEvaluator partialEvaluator>;

        $i1 = virtualinvoke $r1.<proguard.optimize.evaluation.PartialEvaluator: int initializationOffset(int)>($i0);

        $r1 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.optimize.evaluation.PartialEvaluator partialEvaluator>;

        $r2 = virtualinvoke $r1.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedStack getStackAfter(int)>($i0);

        $i0 = virtualinvoke $r2.<proguard.evaluation.TracedStack: int size()>();

        $i0 = $i0 - 1;

        specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: void markStackEntryAfter(int,int)>($i1, $i0);

        specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: void markInstruction(int)>($i1);

        return;
    }

    private void markInstruction(int)
    {
        proguard.optimize.evaluation.EvaluationShrinker r0;
        int $i0, $i1;
        boolean[] $r1;
        boolean $z0;

        r0 := @this: proguard.optimize.evaluation.EvaluationShrinker;

        $i0 := @parameter0: int;

        $z0 = specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean isInstructionNecessary(int)>($i0);

        if $z0 != 0 goto label1;

        $r1 = r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean[] instructionsNecessary>;

        $r1[$i0] = 1;

        $i1 = r0.<proguard.optimize.evaluation.EvaluationShrinker: int maxMarkedOffset>;

        if $i1 >= $i0 goto label1;

        r0.<proguard.optimize.evaluation.EvaluationShrinker: int maxMarkedOffset> = $i0;

     label1:
        return;
    }

    private void markStackEntryAfter(int, int)
    {
        proguard.optimize.evaluation.EvaluationShrinker r0;
        int $i0, $i1;
        boolean[] $r2;
        boolean[][] $r1;
        boolean $z0;

        r0 := @this: proguard.optimize.evaluation.EvaluationShrinker;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $z0 = specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean isStackEntryNecessaryAfter(int,int)>($i0, $i1);

        if $z0 != 0 goto label1;

        $r1 = r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean[][] stacksNecessaryAfter>;

        $r2 = $r1[$i0];

        $r2[$i1] = 1;

        $i1 = r0.<proguard.optimize.evaluation.EvaluationShrinker: int maxMarkedOffset>;

        if $i1 >= $i0 goto label1;

        r0.<proguard.optimize.evaluation.EvaluationShrinker: int maxMarkedOffset> = $i0;

     label1:
        return;
    }

    private void markStackEntryProducers(int, int)
    {
        proguard.optimize.evaluation.EvaluationShrinker r0;
        proguard.evaluation.TracedStack $r2;
        proguard.optimize.evaluation.PartialEvaluator $r1;
        proguard.evaluation.value.InstructionOffsetValue $r4;
        int $i0, $i1, $i2;
        proguard.evaluation.value.Value $r3;
        boolean $z0;

        r0 := @this: proguard.optimize.evaluation.EvaluationShrinker;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.optimize.evaluation.PartialEvaluator partialEvaluator>;

        $r2 = virtualinvoke $r1.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedStack getStackBefore(int)>($i0);

        $i2 = virtualinvoke $r2.<proguard.evaluation.TracedStack: int size()>();

        $i2 = $i2 - 1;

        $i2 = $i2 - $i1;

        $z0 = specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean isStackSimplifiedBefore(int,int)>($i0, $i2);

        if $z0 != 0 goto label1;

        $r3 = virtualinvoke $r2.<proguard.evaluation.TracedStack: proguard.evaluation.value.Value getTopProducerValue(int)>($i1);

        $r4 = virtualinvoke $r3.<proguard.evaluation.value.Value: proguard.evaluation.value.InstructionOffsetValue instructionOffsetValue()>();

        specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: void markStackEntryProducers(proguard.evaluation.value.InstructionOffsetValue,int)>($r4, $i2);

     label1:
        return;
    }

    private void markStackEntryProducers(proguard.evaluation.value.InstructionOffsetValue, int)
    {
        proguard.optimize.evaluation.EvaluationShrinker r0;
        proguard.evaluation.value.InstructionOffsetValue $r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: proguard.optimize.evaluation.EvaluationShrinker;

        $r1 := @parameter0: proguard.evaluation.value.InstructionOffsetValue;

        $i0 := @parameter1: int;

        if $r1 == null goto label2;

        $i1 = virtualinvoke $r1.<proguard.evaluation.value.InstructionOffsetValue: int instructionOffsetCount()>();

        $i2 = 0;

     label1:
        if $i2 >= $i1 goto label2;

        $i3 = virtualinvoke $r1.<proguard.evaluation.value.InstructionOffsetValue: int instructionOffset(int)>($i2);

        specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: void markStackEntryAfter(int,int)>($i3, $i0);

        specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: void markInstruction(int)>($i3);

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return;
    }

    private void markStackProducers(proguard.classfile.Clazz, int, proguard.classfile.instruction.Instruction)
    {
        proguard.optimize.evaluation.EvaluationShrinker r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.instruction.Instruction $r2;
        int $i0, $i1, $i2;

        r0 := @this: proguard.optimize.evaluation.EvaluationShrinker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $i0 := @parameter1: int;

        $r2 := @parameter2: proguard.classfile.instruction.Instruction;

        $i1 = virtualinvoke $r2.<proguard.classfile.instruction.Instruction: int stackPopCount(proguard.classfile.Clazz)>($r1);

        $i2 = 0;

     label1:
        if $i2 >= $i1 goto label2;

        specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: void markStackEntryProducers(int,int)>($i0, $i2);

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return;
    }

    private void markStackSimplificationBefore(int, int)
    {
        proguard.optimize.evaluation.EvaluationShrinker r0;
        int $i0, $i1;
        boolean[] $r2;
        boolean[][] $r1;

        r0 := @this: proguard.optimize.evaluation.EvaluationShrinker;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean[][] stacksSimplifiedBefore>;

        $r2 = $r1[$i0];

        $r2[$i1] = 1;

        return;
    }

    private void markStraddlingBranch(int, int, int, int)
    {
        proguard.optimize.evaluation.EvaluationShrinker r0;
        int $i0, $i1, $i2, $i3;
        boolean $z0;

        r0 := @this: proguard.optimize.evaluation.EvaluationShrinker;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $z0 = specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean isInstructionNecessary(int)>($i2);

        if $z0 != 0 goto label1;

        $z0 = specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean isAnyInstructionNecessary(int,int)>($i0, $i1);

        if $z0 == 0 goto label1;

        specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: void markInstruction(int)>($i2);

     label1:
        return;
    }

    private void markStraddlingBranches(int, proguard.evaluation.value.InstructionOffsetValue, boolean)
    {
        proguard.optimize.evaluation.EvaluationShrinker r0;
        proguard.evaluation.value.InstructionOffsetValue $r1;
        int $i0, $i1, $i2, $i3;
        boolean $z0;

        r0 := @this: proguard.optimize.evaluation.EvaluationShrinker;

        $i0 := @parameter0: int;

        $r1 := @parameter1: proguard.evaluation.value.InstructionOffsetValue;

        $z0 := @parameter2: boolean;

        if $r1 == null goto label4;

        $i1 = virtualinvoke $r1.<proguard.evaluation.value.InstructionOffsetValue: int instructionOffsetCount()>();

        $i2 = 0;

     label1:
        if $i2 >= $i1 goto label4;

        $i3 = virtualinvoke $r1.<proguard.evaluation.value.InstructionOffsetValue: int instructionOffset(int)>($i2);

        if $z0 == 0 goto label3;

        specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: void markStraddlingBranch(int,int,int,int)>($i0, $i3, $i0, $i3);

     label2:
        $i2 = $i2 + 1;

        goto label1;

     label3:
        specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: void markStraddlingBranch(int,int,int,int)>($i0, $i3, $i3, $i0);

        goto label2;

     label4:
        return;
    }

    private void markVariableAfter(int, int)
    {
        proguard.optimize.evaluation.EvaluationShrinker r0;
        int $i0, $i1;
        boolean[] $r2;
        boolean[][] $r1;
        boolean $z0;

        r0 := @this: proguard.optimize.evaluation.EvaluationShrinker;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $z0 = specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean isVariableNecessaryAfter(int,int)>($i0, $i1);

        if $z0 != 0 goto label1;

        $r1 = r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean[][] variablesNecessaryAfter>;

        $r2 = $r1[$i0];

        $r2[$i1] = 1;

        $i1 = r0.<proguard.optimize.evaluation.EvaluationShrinker: int maxMarkedOffset>;

        if $i1 >= $i0 goto label1;

        r0.<proguard.optimize.evaluation.EvaluationShrinker: int maxMarkedOffset> = $i0;

     label1:
        return;
    }

    private void markVariableProducers(int, int)
    {
        proguard.optimize.evaluation.EvaluationShrinker r0;
        proguard.optimize.evaluation.PartialEvaluator $r1;
        proguard.evaluation.TracedVariables $r2;
        proguard.evaluation.value.InstructionOffsetValue $r4;
        int $i0, $i1;
        proguard.evaluation.value.Value $r3;

        r0 := @this: proguard.optimize.evaluation.EvaluationShrinker;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.optimize.evaluation.PartialEvaluator partialEvaluator>;

        $r2 = virtualinvoke $r1.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedVariables getVariablesBefore(int)>($i0);

        $r3 = virtualinvoke $r2.<proguard.evaluation.TracedVariables: proguard.evaluation.value.Value getProducerValue(int)>($i1);

        $r4 = virtualinvoke $r3.<proguard.evaluation.value.Value: proguard.evaluation.value.InstructionOffsetValue instructionOffsetValue()>();

        specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: void markVariableProducers(proguard.evaluation.value.InstructionOffsetValue,int)>($r4, $i1);

        return;
    }

    private void markVariableProducers(proguard.evaluation.value.InstructionOffsetValue, int)
    {
        proguard.optimize.evaluation.EvaluationShrinker r0;
        proguard.evaluation.value.InstructionOffsetValue $r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: proguard.optimize.evaluation.EvaluationShrinker;

        $r1 := @parameter0: proguard.evaluation.value.InstructionOffsetValue;

        $i0 := @parameter1: int;

        if $r1 == null goto label2;

        $i1 = virtualinvoke $r1.<proguard.evaluation.value.InstructionOffsetValue: int instructionOffsetCount()>();

        $i2 = 0;

     label1:
        if $i2 >= $i1 goto label2;

        $i3 = virtualinvoke $r1.<proguard.evaluation.value.InstructionOffsetValue: int instructionOffset(int)>($i2);

        specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: void markVariableAfter(int,int)>($i3, $i0);

        specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: void markInstruction(int)>($i3);

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return;
    }

    private byte pushOpcode(int)
    {
        proguard.optimize.evaluation.EvaluationShrinker r0;
        java.lang.StringBuffer $r2;
        int $i0;
        java.lang.String $r3;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: proguard.optimize.evaluation.EvaluationShrinker;

        $i0 := @parameter0: int;

        lookupswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label5;
            case 5: goto label6;
            case 6: goto label6;
            default: goto label1;
        };

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No push opcode for computational type [");

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label2:
        return 3;

     label3:
        return 9;

     label4:
        return 11;

     label5:
        return 14;

     label6:
        return 1;
    }

    private void replaceByInfiniteLoop(proguard.classfile.Clazz, int)
    {
        proguard.optimize.evaluation.EvaluationShrinker r0;
        proguard.classfile.Clazz $r1;
        int $i0;
        proguard.classfile.editor.CodeAttributeEditor $r3;
        proguard.classfile.instruction.BranchInstruction $r2;

        r0 := @this: proguard.optimize.evaluation.EvaluationShrinker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $i0 := @parameter1: int;

        specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: void markInstruction(int)>($i0);

        $r2 = new proguard.classfile.instruction.BranchInstruction;

        specialinvoke $r2.<proguard.classfile.instruction.BranchInstruction: void <init>(byte,int)>(-89, 0);

        $r3 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor>;

        virtualinvoke $r3.<proguard.classfile.editor.CodeAttributeEditor: void replaceInstruction(int,proguard.classfile.instruction.Instruction)>($i0, $r2);

        return;
    }

    private void replaceByStaticInvocation(proguard.classfile.Clazz, int, proguard.classfile.instruction.ConstantInstruction)
    {
        proguard.optimize.evaluation.EvaluationShrinker r0;
        proguard.classfile.editor.CodeAttributeEditor $r5;
        proguard.classfile.Clazz $r1;
        proguard.classfile.instruction.Instruction $r3;
        int $i0, $i1;
        proguard.classfile.instruction.ConstantInstruction $r2, $r4;

        r0 := @this: proguard.optimize.evaluation.EvaluationShrinker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $i0 := @parameter1: int;

        $r2 := @parameter2: proguard.classfile.instruction.ConstantInstruction;

        $r4 = new proguard.classfile.instruction.ConstantInstruction;

        $i1 = $r2.<proguard.classfile.instruction.ConstantInstruction: int constantIndex>;

        specialinvoke $r4.<proguard.classfile.instruction.ConstantInstruction: void <init>(byte,int)>(-72, $i1);

        $r3 = virtualinvoke $r4.<proguard.classfile.instruction.ConstantInstruction: proguard.classfile.instruction.Instruction shrink()>();

        $r5 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor>;

        virtualinvoke $r5.<proguard.classfile.editor.CodeAttributeEditor: void replaceInstruction(int,proguard.classfile.instruction.Instruction)>($i0, $r3);

        return;
    }

    public void visitAnyAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.Attribute)
    {
        proguard.optimize.evaluation.EvaluationShrinker r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.Attribute $r2;

        r0 := @this: proguard.optimize.evaluation.EvaluationShrinker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.Attribute;

        return;
    }

    public void visitCodeAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute)
    {
        proguard.optimize.evaluation.EvaluationShrinker r0;
        java.io.PrintStream $r5;
        java.lang.RuntimeException $r4;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        java.lang.StringBuffer $r6;
        proguard.classfile.Method $r2;
        java.lang.Class $r8;
        java.lang.String $r7;

        r0 := @this: proguard.optimize.evaluation.EvaluationShrinker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

     label1:
        virtualinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: void visitCodeAttribute0(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute)>($r1, $r2, $r3);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>("Unexpected error while shrinking instructions after partial evaluation:");

        $r5 = <java.lang.System: java.io.PrintStream err>;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Class       = [");

        $r7 = interfaceinvoke $r1.<proguard.classfile.Clazz: java.lang.String getName()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r7);

        $r5 = <java.lang.System: java.io.PrintStream err>;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Method      = [");

        $r7 = interfaceinvoke $r2.<proguard.classfile.Method: java.lang.String getName(proguard.classfile.Clazz)>($r1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r7 = interfaceinvoke $r2.<proguard.classfile.Method: java.lang.String getDescriptor(proguard.classfile.Clazz)>($r1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r7);

        $r5 = <java.lang.System: java.io.PrintStream err>;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Exception   = [");

        $r8 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] (");

        $r7 = virtualinvoke $r4.<java.lang.RuntimeException: java.lang.String getMessage()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r7);

        $r5 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>("Not optimizing this method");

        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    public void visitCodeAttribute0(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute)
    {
        proguard.optimize.evaluation.EvaluationShrinker r0;
        byte[] $r6;
        proguard.optimize.evaluation.EvaluationShrinker$MyVariableInitializationMarker $r13;
        proguard.optimize.evaluation.PartialEvaluator $r4;
        byte $b2;
        proguard.classfile.Clazz $r1;
        proguard.evaluation.value.InstructionOffsetValue $r12;
        int $i0, $i1, $i3;
        proguard.optimize.evaluation.EvaluationShrinker$MyUnusedParameterSimplifier $r8;
        boolean $z0;
        proguard.classfile.editor.CodeAttributeEditor $r5;
        proguard.classfile.instruction.BranchInstruction $r9;
        proguard.optimize.info.SideEffectInstructionChecker $r10;
        proguard.classfile.instruction.visitor.InstructionVisitor $r15;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.instruction.Instruction $r7;
        proguard.classfile.Method $r2;
        proguard.optimize.evaluation.EvaluationShrinker$MyProducerMarker $r11;
        proguard.optimize.evaluation.EvaluationShrinker$MyStackConsistencyFixer $r14;

        r0 := @this: proguard.optimize.evaluation.EvaluationShrinker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: void initializeNecessary(proguard.classfile.attribute.CodeAttribute)>($r3);

        $r4 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.optimize.evaluation.PartialEvaluator partialEvaluator>;

        virtualinvoke $r4.<proguard.optimize.evaluation.PartialEvaluator: void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute)>($r1, $r2, $r3);

        $i0 = $r3.<proguard.classfile.attribute.CodeAttribute: int u4codeLength>;

        $r5 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor>;

        virtualinvoke $r5.<proguard.classfile.editor.CodeAttributeEditor: void reset(int)>($i0);

        $i1 = 0;

     label01:
        if $i1 >= $i0 goto label03;

        $r4 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.optimize.evaluation.PartialEvaluator partialEvaluator>;

        $z0 = virtualinvoke $r4.<proguard.optimize.evaluation.PartialEvaluator: boolean isTraced(int)>($i1);

        if $z0 == 0 goto label02;

        $r6 = $r3.<proguard.classfile.attribute.CodeAttribute: byte[] code>;

        $r7 = staticinvoke <proguard.classfile.instruction.InstructionFactory: proguard.classfile.instruction.Instruction create(byte[],int)>($r6, $i1);

        $r8 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.optimize.evaluation.EvaluationShrinker$MyUnusedParameterSimplifier unusedParameterSimplifier>;

        virtualinvoke $r7.<proguard.classfile.instruction.Instruction: void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.visitor.InstructionVisitor)>($r1, $r2, $r3, $i1, $r8);

     label02:
        $i1 = $i1 + 1;

        goto label01;

     label03:
        r0.<proguard.optimize.evaluation.EvaluationShrinker: int maxMarkedOffset> = -1;

        $r4 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.optimize.evaluation.PartialEvaluator partialEvaluator>;

        $i1 = virtualinvoke $r4.<proguard.optimize.evaluation.PartialEvaluator: int superInitializationOffset()>();

        if $i1 == -2 goto label04;

        specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: void markInstruction(int)>($i1);

     label04:
        $i1 = 0;

     label05:
        if $i1 >= $i0 goto label08;

        $r4 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.optimize.evaluation.PartialEvaluator partialEvaluator>;

        $z0 = virtualinvoke $r4.<proguard.optimize.evaluation.PartialEvaluator: boolean isTraced(int)>($i1);

        if $z0 == 0 goto label06;

        $r6 = $r3.<proguard.classfile.attribute.CodeAttribute: byte[] code>;

        $r7 = staticinvoke <proguard.classfile.instruction.InstructionFactory: proguard.classfile.instruction.Instruction create(byte[],int)>($r6, $i1);

        $b2 = $r7.<proguard.classfile.instruction.Instruction: byte opcode>;

        $i3 = (int) $b2;

        if $i3 != -89 goto label07;

        $r9 = (proguard.classfile.instruction.BranchInstruction) $r7;

        $i3 = $r9.<proguard.classfile.instruction.BranchInstruction: int branchOffset>;

        if $i3 != 0 goto label07;

        specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: void markInstruction(int)>($i1);

     label06:
        $i1 = $i1 + 1;

        goto label05;

     label07:
        $r10 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.optimize.info.SideEffectInstructionChecker sideEffectInstructionChecker>;

        $z0 = virtualinvoke $r10.<proguard.optimize.info.SideEffectInstructionChecker: boolean hasSideEffects(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction)>($r1, $r2, $r3, $i1, $r7);

        if $z0 == 0 goto label06;

        specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: void markInstruction(int)>($i1);

        goto label06;

     label08:
        $i1 = r0.<proguard.optimize.evaluation.EvaluationShrinker: int maxMarkedOffset>;

        if $i1 < 0 goto label10;

        $i1 = r0.<proguard.optimize.evaluation.EvaluationShrinker: int maxMarkedOffset>;

        $i3 = $i1 - 1;

        r0.<proguard.optimize.evaluation.EvaluationShrinker: int maxMarkedOffset> = $i3;

        $r4 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.optimize.evaluation.PartialEvaluator partialEvaluator>;

        $z0 = virtualinvoke $r4.<proguard.optimize.evaluation.PartialEvaluator: boolean isTraced(int)>($i1);

        if $z0 == 0 goto label08;

        $z0 = specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean isInstructionNecessary(int)>($i1);

        if $z0 == 0 goto label09;

        $r6 = $r3.<proguard.classfile.attribute.CodeAttribute: byte[] code>;

        $r7 = staticinvoke <proguard.classfile.instruction.InstructionFactory: proguard.classfile.instruction.Instruction create(byte[],int)>($r6, $i1);

        $r11 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.optimize.evaluation.EvaluationShrinker$MyProducerMarker producerMarker>;

        virtualinvoke $r7.<proguard.classfile.instruction.Instruction: void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.visitor.InstructionVisitor)>($r1, $r2, $r3, $i1, $r11);

     label09:
        $r4 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.optimize.evaluation.PartialEvaluator partialEvaluator>;

        $r12 = virtualinvoke $r4.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.value.InstructionOffsetValue branchTargets(int)>($i1);

        specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: void markStraddlingBranches(int,proguard.evaluation.value.InstructionOffsetValue,boolean)>($i1, $r12, 1);

        $r4 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.optimize.evaluation.PartialEvaluator partialEvaluator>;

        $r12 = virtualinvoke $r4.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.value.InstructionOffsetValue branchOrigins(int)>($i1);

        specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: void markStraddlingBranches(int,proguard.evaluation.value.InstructionOffsetValue,boolean)>($i1, $r12, 0);

        goto label08;

     label10:
        $i1 = 0;

     label11:
        if $i1 >= $i0 goto label13;

        $r4 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.optimize.evaluation.PartialEvaluator partialEvaluator>;

        $z0 = virtualinvoke $r4.<proguard.optimize.evaluation.PartialEvaluator: boolean isTraced(int)>($i1);

        if $z0 == 0 goto label12;

        $z0 = specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean isInstructionNecessary(int)>($i1);

        if $z0 != 0 goto label12;

        $r6 = $r3.<proguard.classfile.attribute.CodeAttribute: byte[] code>;

        $r7 = staticinvoke <proguard.classfile.instruction.InstructionFactory: proguard.classfile.instruction.Instruction create(byte[],int)>($r6, $i1);

        $r13 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.optimize.evaluation.EvaluationShrinker$MyVariableInitializationMarker variableInitializationMarker>;

        virtualinvoke $r7.<proguard.classfile.instruction.Instruction: void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.visitor.InstructionVisitor)>($r1, $r2, $r3, $i1, $r13);

     label12:
        $i1 = $i1 + 1;

        goto label11;

     label13:
        $i1 = $i0 - 1;

        r0.<proguard.optimize.evaluation.EvaluationShrinker: int maxMarkedOffset> = $i1;

     label14:
        $i1 = r0.<proguard.optimize.evaluation.EvaluationShrinker: int maxMarkedOffset>;

        if $i1 < 0 goto label15;

        $i1 = r0.<proguard.optimize.evaluation.EvaluationShrinker: int maxMarkedOffset>;

        $i3 = $i1 - 1;

        r0.<proguard.optimize.evaluation.EvaluationShrinker: int maxMarkedOffset> = $i3;

        $r4 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.optimize.evaluation.PartialEvaluator partialEvaluator>;

        $z0 = virtualinvoke $r4.<proguard.optimize.evaluation.PartialEvaluator: boolean isTraced(int)>($i1);

        if $z0 == 0 goto label14;

        $r6 = $r3.<proguard.classfile.attribute.CodeAttribute: byte[] code>;

        $r7 = staticinvoke <proguard.classfile.instruction.InstructionFactory: proguard.classfile.instruction.Instruction create(byte[],int)>($r6, $i1);

        $r14 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.optimize.evaluation.EvaluationShrinker$MyStackConsistencyFixer stackConsistencyFixer>;

        virtualinvoke $r7.<proguard.classfile.instruction.Instruction: void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.visitor.InstructionVisitor)>($r1, $r2, $r3, $i1, $r14);

        $r4 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.optimize.evaluation.PartialEvaluator partialEvaluator>;

        $r12 = virtualinvoke $r4.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.value.InstructionOffsetValue branchTargets(int)>($i1);

        specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: void markStraddlingBranches(int,proguard.evaluation.value.InstructionOffsetValue,boolean)>($i1, $r12, 1);

        $r4 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.optimize.evaluation.PartialEvaluator partialEvaluator>;

        $r12 = virtualinvoke $r4.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.value.InstructionOffsetValue branchOrigins(int)>($i1);

        specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: void markStraddlingBranches(int,proguard.evaluation.value.InstructionOffsetValue,boolean)>($i1, $r12, 0);

        goto label14;

     label15:
        $i1 = 0;

     label16:
        if $i1 >= $i0 goto label18;

        $r4 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.optimize.evaluation.PartialEvaluator partialEvaluator>;

        $z0 = virtualinvoke $r4.<proguard.optimize.evaluation.PartialEvaluator: boolean isTraced(int)>($i1);

        if $z0 == 0 goto label17;

        $z0 = specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean isInstructionNecessary(int)>($i1);

        if $z0 != 0 goto label17;

        $r4 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.optimize.evaluation.PartialEvaluator partialEvaluator>;

        $r12 = virtualinvoke $r4.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.value.InstructionOffsetValue branchTargets(int)>($i1);

        $z0 = specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean isAllSmallerThanOrEqual(proguard.evaluation.value.InstructionOffsetValue,int)>($r12, $i1);

        if $z0 == 0 goto label17;

        $i3 = specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: int lastNecessaryInstructionOffset(int)>($i1);

        $z0 = specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean isAnyUnnecessaryInstructionBranchingOver(int,int)>($i3, $i1);

        if $z0 != 0 goto label17;

        specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: void replaceByInfiniteLoop(proguard.classfile.Clazz,int)>($r1, $i1);

     label17:
        $i1 = $i1 + 1;

        goto label16;

     label18:
        $i1 = 0;

     label19:
        if $i1 >= $i0 goto label21;

        $z0 = specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean isInstructionNecessary(int)>($i1);

        if $z0 == 0 goto label20;

        $r4 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.optimize.evaluation.PartialEvaluator partialEvaluator>;

        $z0 = virtualinvoke $r4.<proguard.optimize.evaluation.PartialEvaluator: boolean isSubroutineInvocation(int)>($i1);

        if $z0 == 0 goto label20;

        $r6 = $r3.<proguard.classfile.attribute.CodeAttribute: byte[] code>;

        $r7 = staticinvoke <proguard.classfile.instruction.InstructionFactory: proguard.classfile.instruction.Instruction create(byte[],int)>($r6, $i1);

        $i3 = virtualinvoke $r7.<proguard.classfile.instruction.Instruction: int length(int)>($i1);

        $i3 = $i3 + $i1;

        $z0 = specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean isInstructionNecessary(int)>($i3);

        if $z0 != 0 goto label20;

        specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: void replaceByInfiniteLoop(proguard.classfile.Clazz,int)>($r1, $i3);

     label20:
        $i1 = $i1 + 1;

        goto label19;

     label21:
        $i1 = 0;

     label22:
        $r6 = $r3.<proguard.classfile.attribute.CodeAttribute: byte[] code>;

        $r7 = staticinvoke <proguard.classfile.instruction.InstructionFactory: proguard.classfile.instruction.Instruction create(byte[],int)>($r6, $i1);

        $z0 = specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker: boolean isInstructionNecessary(int)>($i1);

        if $z0 != 0 goto label23;

        $r5 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor>;

        virtualinvoke $r5.<proguard.classfile.editor.CodeAttributeEditor: void deleteInstruction(int)>($i1);

        $r5 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor>;

        virtualinvoke $r5.<proguard.classfile.editor.CodeAttributeEditor: void insertBeforeInstruction(int,proguard.classfile.instruction.Instruction)>($i1, null);

        $r5 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor>;

        virtualinvoke $r5.<proguard.classfile.editor.CodeAttributeEditor: void replaceInstruction(int,proguard.classfile.instruction.Instruction)>($i1, null);

        $r5 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor>;

        virtualinvoke $r5.<proguard.classfile.editor.CodeAttributeEditor: void insertAfterInstruction(int,proguard.classfile.instruction.Instruction)>($i1, null);

        $r15 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.classfile.instruction.visitor.InstructionVisitor extraDeletedInstructionVisitor>;

        if $r15 == null goto label23;

        $r15 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.classfile.instruction.visitor.InstructionVisitor extraDeletedInstructionVisitor>;

        virtualinvoke $r7.<proguard.classfile.instruction.Instruction: void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.visitor.InstructionVisitor)>($r1, $r2, $r3, $i1, $r15);

     label23:
        $i3 = virtualinvoke $r7.<proguard.classfile.instruction.Instruction: int length(int)>($i1);

        $i1 = $i3 + $i1;

        if $i1 < $i0 goto label22;

        $r5 = r0.<proguard.optimize.evaluation.EvaluationShrinker: proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor>;

        virtualinvoke $r5.<proguard.classfile.editor.CodeAttributeEditor: void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute)>($r1, $r2, $r3);

        return;
    }
}
