public final class com.google.zxing.common.HybridBinarizer extends com.google.zxing.common.GlobalHistogramBinarizer
{
    private static final int MINIMUM_DIMENSION;
    private com.google.zxing.common.BitMatrix matrix;

    public void <init>(com.google.zxing.LuminanceSource)
    {
        com.google.zxing.LuminanceSource $r1;
        com.google.zxing.common.HybridBinarizer r0;

        r0 := @this: com.google.zxing.common.HybridBinarizer;

        $r1 := @parameter0: com.google.zxing.LuminanceSource;

        specialinvoke r0.<com.google.zxing.common.GlobalHistogramBinarizer: void <init>(com.google.zxing.LuminanceSource)>($r1);

        r0.<com.google.zxing.common.HybridBinarizer: com.google.zxing.common.BitMatrix matrix> = null;

        return;
    }

    private void binarizeEntireImage() throws com.google.zxing.NotFoundException
    {
        byte[] $r3;
        int[][] $r4;
        com.google.zxing.LuminanceSource $r2;
        int $i0, $i1, $i2, $i3, $i4;
        com.google.zxing.common.BitMatrix $r1;
        com.google.zxing.common.HybridBinarizer r0;

        r0 := @this: com.google.zxing.common.HybridBinarizer;

        $r1 = r0.<com.google.zxing.common.HybridBinarizer: com.google.zxing.common.BitMatrix matrix>;

        if $r1 != null goto label4;

        $r2 = virtualinvoke r0.<com.google.zxing.common.HybridBinarizer: com.google.zxing.LuminanceSource getLuminanceSource()>();

        $i0 = virtualinvoke $r2.<com.google.zxing.LuminanceSource: int getWidth()>();

        if $i0 < 40 goto label3;

        $i0 = virtualinvoke $r2.<com.google.zxing.LuminanceSource: int getHeight()>();

        if $i0 < 40 goto label3;

        $r3 = virtualinvoke $r2.<com.google.zxing.LuminanceSource: byte[] getMatrix()>();

        $i0 = virtualinvoke $r2.<com.google.zxing.LuminanceSource: int getWidth()>();

        $i1 = virtualinvoke $r2.<com.google.zxing.LuminanceSource: int getHeight()>();

        $i2 = $i0 >> 3;

        $i3 = $i0 & 7;

        if $i3 == 0 goto label1;

        $i2 = $i2 + 1;

     label1:
        $i3 = $i1 >> 3;

        $i4 = $i1 & 7;

        if $i4 == 0 goto label2;

        $i3 = $i3 + 1;

     label2:
        $r4 = staticinvoke <com.google.zxing.common.HybridBinarizer: int[][] calculateBlackPoints(byte[],int,int,int,int)>($r3, $i2, $i3, $i0, $i1);

        $r1 = new com.google.zxing.common.BitMatrix;

        specialinvoke $r1.<com.google.zxing.common.BitMatrix: void <init>(int,int)>($i0, $i1);

        r0.<com.google.zxing.common.HybridBinarizer: com.google.zxing.common.BitMatrix matrix> = $r1;

        $r1 = r0.<com.google.zxing.common.HybridBinarizer: com.google.zxing.common.BitMatrix matrix>;

        staticinvoke <com.google.zxing.common.HybridBinarizer: void calculateThresholdForBlock(byte[],int,int,int,int,int[][],com.google.zxing.common.BitMatrix)>($r3, $i2, $i3, $i0, $i1, $r4, $r1);

        return;

     label3:
        $r1 = specialinvoke r0.<com.google.zxing.common.GlobalHistogramBinarizer: com.google.zxing.common.BitMatrix getBlackMatrix()>();

        r0.<com.google.zxing.common.HybridBinarizer: com.google.zxing.common.BitMatrix matrix> = $r1;

     label4:
        return;
    }

    private static int[][] calculateBlackPoints(byte[], int, int, int, int)
    {
        byte[] $r0;
        int[][] $r4;
        short $s11, $s12, $s16;
        byte $b15;
        int[] $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i13, $i14;
        java.lang.Class $r2;
        java.lang.Object $r3;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        $r1 = newarray (int)[2];

        $r1[0] = $i1;

        $r1[1] = $i0;

        $r2 = <java.lang.Integer: java.lang.Class TYPE>;

        $r3 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r2, $r1);

        $r4 = (int[][]) $r3;

        $i5 = 0;

     label01:
        if $i5 >= $i1 goto label15;

        $i6 = $i5 << 3;

        $i7 = $i6 + 8;

        if $i7 < $i3 goto label02;

        $i6 = $i3 + -8;

     label02:
        $i7 = 0;

     label03:
        if $i7 >= $i0 goto label14;

        $i8 = $i7 << 3;

        $i9 = $i8 + 8;

        if $i9 < $i2 goto label04;

        $i8 = $i2 + -8;

     label04:
        $i10 = 0;

        $s11 = 255;

        $s12 = 0;

        $i9 = 0;

     label05:
        if $i9 >= 8 goto label10;

        $i4 = $i6 + $i9;

        $i4 = $i4 * $i2;

        $i4 = $i4 + $i8;

        $i13 = 0;

     label06:
        if $i13 >= 8 goto label09;

        $i14 = $i4 + $i13;

        $b15 = $r0[$i14];

        $s16 = $b15 & 255;

        $i10 = $i10 + $s16;

        if $s16 >= $s11 goto label07;

        $s11 = $s16;

     label07:
        if $s16 <= $s12 goto label16;

     label08:
        $i13 = $i13 + 1;

        $s12 = $s16;

        goto label06;

     label09:
        $i9 = $i9 + 1;

        goto label05;

     label10:
        $i8 = $s12 - $s11;

        if $i8 <= 24 goto label12;

        $i8 = $i10 >> 6;

     label11:
        $r1 = $r4[$i5];

        $r1[$i7] = $i8;

        $i7 = $i7 + 1;

        goto label03;

     label12:
        if $s12 != 0 goto label13;

        $i8 = 1;

        goto label11;

     label13:
        $i8 = $s11 >> 1;

        goto label11;

     label14:
        $i5 = $i5 + 1;

        goto label01;

     label15:
        return $r4;

     label16:
        $s16 = $s12;

        goto label08;
    }

    private static void calculateThresholdForBlock(byte[], int, int, int, int, int[][], com.google.zxing.common.BitMatrix)
    {
        byte[] $r0;
        int[][] $r1;
        int[] $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        com.google.zxing.common.BitMatrix $r2;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        $r1 := @parameter5: int[][];

        $r2 := @parameter6: com.google.zxing.common.BitMatrix;

        $i4 = 0;

     label01:
        if $i4 >= $i1 goto label16;

        $i5 = $i4 << 3;

        $i6 = $i5 + 8;

        if $i6 < $i3 goto label02;

        $i5 = $i3 + -8;

     label02:
        $i6 = 0;

     label03:
        if $i6 >= $i0 goto label15;

        $i7 = $i6 << 3;

        $i8 = $i7 + 8;

        if $i8 < $i2 goto label04;

        $i7 = $i2 + -8;

     label04:
        if $i6 <= 1 goto label10;

        $i8 = $i6;

     label05:
        $i9 = $i0 + -2;

        if $i8 >= $i9 goto label11;

     label06:
        if $i4 <= 1 goto label12;

        $i9 = $i4;

     label07:
        $i10 = $i1 + -2;

        if $i9 >= $i10 goto label13;

     label08:
        $i11 = 0;

        $i10 = -2;

     label09:
        if $i10 > 2 goto label14;

        $i12 = $i9 + $i10;

        $r3 = $r1[$i12];

        $i12 = $i8 + -2;

        $i12 = $r3[$i12];

        $i11 = $i11 + $i12;

        $i12 = $i8 + -1;

        $i12 = $r3[$i12];

        $i11 = $i11 + $i12;

        $i12 = $r3[$i8];

        $i11 = $i11 + $i12;

        $i12 = $i8 + 1;

        $i12 = $r3[$i12];

        $i11 = $i11 + $i12;

        $i12 = $i8 + 2;

        $i12 = $r3[$i12];

        $i11 = $i11 + $i12;

        $i10 = $i10 + 1;

        goto label09;

     label10:
        $i8 = 2;

        goto label05;

     label11:
        $i8 = $i0 + -3;

        goto label06;

     label12:
        $i9 = 2;

        goto label07;

     label13:
        $i9 = $i1 + -3;

        goto label08;

     label14:
        $i8 = $i11 / 25;

        staticinvoke <com.google.zxing.common.HybridBinarizer: void threshold8x8Block(byte[],int,int,int,int,com.google.zxing.common.BitMatrix)>($r0, $i7, $i5, $i8, $i2, $r2);

        $i6 = $i6 + 1;

        goto label03;

     label15:
        $i4 = $i4 + 1;

        goto label01;

     label16:
        return;
    }

    private static void threshold8x8Block(byte[], int, int, int, int, com.google.zxing.common.BitMatrix)
    {
        byte[] $r0;
        short $s9;
        byte $b8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i10;
        com.google.zxing.common.BitMatrix $r1;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        $r1 := @parameter5: com.google.zxing.common.BitMatrix;

        $i6 = 0;

     label1:
        if $i6 >= 8 goto label5;

        $i4 = $i1 + $i6;

        $i4 = $i4 * $i3;

        $i4 = $i4 + $i0;

        $i7 = 0;

     label2:
        if $i7 >= 8 goto label4;

        $i5 = $i4 + $i7;

        $b8 = $r0[$i5];

        $s9 = (short) $b8;

        $s9 = $s9 & 255;

        $i5 = (int) $s9;

        if $i5 >= $i2 goto label3;

        $i10 = $i0 + $i7;

        $i5 = $i1 + $i6;

        virtualinvoke $r1.<com.google.zxing.common.BitMatrix: void set(int,int)>($i10, $i5);

     label3:
        $i7 = $i7 + 1;

        goto label2;

     label4:
        $i6 = $i6 + 1;

        goto label1;

     label5:
        return;
    }

    public com.google.zxing.Binarizer createBinarizer(com.google.zxing.LuminanceSource)
    {
        com.google.zxing.LuminanceSource $r1;
        com.google.zxing.common.HybridBinarizer r0;

        r0 := @this: com.google.zxing.common.HybridBinarizer;

        $r1 := @parameter0: com.google.zxing.LuminanceSource;

        r0 = new com.google.zxing.common.HybridBinarizer;

        specialinvoke r0.<com.google.zxing.common.HybridBinarizer: void <init>(com.google.zxing.LuminanceSource)>($r1);

        return r0;
    }

    public com.google.zxing.common.BitMatrix getBlackMatrix() throws com.google.zxing.NotFoundException
    {
        com.google.zxing.common.BitMatrix r1;
        com.google.zxing.common.HybridBinarizer r0;

        r0 := @this: com.google.zxing.common.HybridBinarizer;

        specialinvoke r0.<com.google.zxing.common.HybridBinarizer: void binarizeEntireImage()>();

        r1 = r0.<com.google.zxing.common.HybridBinarizer: com.google.zxing.common.BitMatrix matrix>;

        return r1;
    }

    public static void <clinit>()
    {
        <com.google.zxing.common.HybridBinarizer: int MINIMUM_DIMENSION> = 40;

        return;
    }
}
