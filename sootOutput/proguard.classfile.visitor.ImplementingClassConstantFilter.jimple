public class proguard.classfile.visitor.ImplementingClassConstantFilter extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.constant.visitor.ConstantVisitor
{
    private final proguard.classfile.constant.visitor.ConstantVisitor constantVisitor;
    private final proguard.classfile.Clazz implementingClass;

    public void <init>(proguard.classfile.Clazz, proguard.classfile.constant.visitor.ConstantVisitor)
    {
        proguard.classfile.visitor.ImplementingClassConstantFilter r0;
        proguard.classfile.constant.visitor.ConstantVisitor $r2;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.classfile.visitor.ImplementingClassConstantFilter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.visitor.ConstantVisitor;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        r0.<proguard.classfile.visitor.ImplementingClassConstantFilter: proguard.classfile.Clazz implementingClass> = $r1;

        r0.<proguard.classfile.visitor.ImplementingClassConstantFilter: proguard.classfile.constant.visitor.ConstantVisitor constantVisitor> = $r2;

        return;
    }

    public void visitClassConstant(proguard.classfile.Clazz, proguard.classfile.constant.ClassConstant)
    {
        proguard.classfile.constant.ClassConstant $r2;
        proguard.classfile.constant.visitor.ConstantVisitor $r5;
        proguard.classfile.Clazz $r1, $r3, $r4;
        proguard.classfile.visitor.ImplementingClassConstantFilter r0;
        boolean $z0;

        r0 := @this: proguard.classfile.visitor.ImplementingClassConstantFilter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.ClassConstant;

        $r4 = $r2.<proguard.classfile.constant.ClassConstant: proguard.classfile.Clazz referencedClass>;

        if $r4 == null goto label1;

        $r3 = r0.<proguard.classfile.visitor.ImplementingClassConstantFilter: proguard.classfile.Clazz implementingClass>;

        $z0 = interfaceinvoke $r3.<proguard.classfile.Clazz: boolean extendsOrImplements(proguard.classfile.Clazz)>($r4);

        if $z0 != 0 goto label2;

     label1:
        $r5 = r0.<proguard.classfile.visitor.ImplementingClassConstantFilter: proguard.classfile.constant.visitor.ConstantVisitor constantVisitor>;

        interfaceinvoke $r5.<proguard.classfile.constant.visitor.ConstantVisitor: void visitClassConstant(proguard.classfile.Clazz,proguard.classfile.constant.ClassConstant)>($r1, $r2);

     label2:
        return;
    }
}
