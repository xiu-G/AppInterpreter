public class proguard.optimize.peephole.VerticalClassMerger extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.visitor.ClassVisitor
{
    private final boolean allowAccessModification;
    private final proguard.classfile.visitor.ClassVisitor extraClassVisitor;
    private final boolean mergeInterfacesAggressively;

    public void <init>(boolean, boolean)
    {
        proguard.optimize.peephole.VerticalClassMerger r0;
        boolean $z0, $z1;

        r0 := @this: proguard.optimize.peephole.VerticalClassMerger;

        $z0 := @parameter0: boolean;

        $z1 := @parameter1: boolean;

        specialinvoke r0.<proguard.optimize.peephole.VerticalClassMerger: void <init>(boolean,boolean,proguard.classfile.visitor.ClassVisitor)>($z0, $z1, null);

        return;
    }

    public void <init>(boolean, boolean, proguard.classfile.visitor.ClassVisitor)
    {
        proguard.classfile.visitor.ClassVisitor $r1;
        proguard.optimize.peephole.VerticalClassMerger r0;
        boolean $z0, $z1;

        r0 := @this: proguard.optimize.peephole.VerticalClassMerger;

        $z0 := @parameter0: boolean;

        $z1 := @parameter1: boolean;

        $r1 := @parameter2: proguard.classfile.visitor.ClassVisitor;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        r0.<proguard.optimize.peephole.VerticalClassMerger: boolean allowAccessModification> = $z0;

        r0.<proguard.optimize.peephole.VerticalClassMerger: boolean mergeInterfacesAggressively> = $z1;

        r0.<proguard.optimize.peephole.VerticalClassMerger: proguard.classfile.visitor.ClassVisitor extraClassVisitor> = $r1;

        return;
    }

    public void visitProgramClass(proguard.classfile.ProgramClass)
    {
        proguard.optimize.peephole.ClassMerger $r2;
        proguard.classfile.visitor.ClassVisitor $r3;
        proguard.optimize.peephole.VerticalClassMerger r0;
        proguard.classfile.ProgramClass $r1;
        boolean $z0, $z1;

        r0 := @this: proguard.optimize.peephole.VerticalClassMerger;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 = new proguard.optimize.peephole.ClassMerger;

        $z0 = r0.<proguard.optimize.peephole.VerticalClassMerger: boolean allowAccessModification>;

        $z1 = r0.<proguard.optimize.peephole.VerticalClassMerger: boolean mergeInterfacesAggressively>;

        $r3 = r0.<proguard.optimize.peephole.VerticalClassMerger: proguard.classfile.visitor.ClassVisitor extraClassVisitor>;

        specialinvoke $r2.<proguard.optimize.peephole.ClassMerger: void <init>(proguard.classfile.ProgramClass,boolean,boolean,proguard.classfile.visitor.ClassVisitor)>($r1, $z0, $z1, $r3);

        virtualinvoke $r1.<proguard.classfile.ProgramClass: void subclassesAccept(proguard.classfile.visitor.ClassVisitor)>($r2);

        return;
    }
}
