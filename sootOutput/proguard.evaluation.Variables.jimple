public class proguard.evaluation.Variables extends java.lang.Object
{
    private static final proguard.evaluation.value.TopValue TOP_VALUE;
    protected int size;
    protected proguard.evaluation.value.Value[] values;

    static void <clinit>()
    {
        proguard.evaluation.value.TopValue $r0;

        $r0 = new proguard.evaluation.value.TopValue;

        specialinvoke $r0.<proguard.evaluation.value.TopValue: void <init>()>();

        <proguard.evaluation.Variables: proguard.evaluation.value.TopValue TOP_VALUE> = $r0;

        return;
    }

    public void <init>(int)
    {
        int $i0;
        proguard.evaluation.value.Value[] $r1;
        proguard.evaluation.Variables r0;

        r0 := @this: proguard.evaluation.Variables;

        $i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (proguard.evaluation.value.Value)[$i0];

        r0.<proguard.evaluation.Variables: proguard.evaluation.value.Value[] values> = $r1;

        r0.<proguard.evaluation.Variables: int size> = $i0;

        return;
    }

    public void <init>(proguard.evaluation.Variables)
    {
        int $i0;
        proguard.evaluation.Variables r0, $r1;

        r0 := @this: proguard.evaluation.Variables;

        $r1 := @parameter0: proguard.evaluation.Variables;

        $i0 = $r1.<proguard.evaluation.Variables: int size>;

        specialinvoke r0.<proguard.evaluation.Variables: void <init>(int)>($i0);

        virtualinvoke r0.<proguard.evaluation.Variables: void initialize(proguard.evaluation.Variables)>($r1);

        return;
    }

    public proguard.evaluation.value.ReferenceValue aload(int)
    {
        proguard.evaluation.value.ReferenceValue $r2;
        proguard.evaluation.Variables r0;
        int $i0;
        proguard.evaluation.value.Value $r1;

        r0 := @this: proguard.evaluation.Variables;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<proguard.evaluation.Variables: proguard.evaluation.value.Value load(int)>($i0);

        $r2 = virtualinvoke $r1.<proguard.evaluation.value.Value: proguard.evaluation.value.ReferenceValue referenceValue()>();

        return $r2;
    }

    public proguard.evaluation.value.DoubleValue dload(int)
    {
        proguard.evaluation.Variables r0;
        int $i0;
        proguard.evaluation.value.DoubleValue $r2;
        proguard.evaluation.value.Value $r1;

        r0 := @this: proguard.evaluation.Variables;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<proguard.evaluation.Variables: proguard.evaluation.value.Value load(int)>($i0);

        $r2 = virtualinvoke $r1.<proguard.evaluation.value.Value: proguard.evaluation.value.DoubleValue doubleValue()>();

        return $r2;
    }

    public boolean equals(java.lang.Object)
    {
        proguard.evaluation.Variables r0, $r4;
        proguard.evaluation.value.Value[] $r5;
        int $i0, $i1, $i2;
        java.lang.Object $r1;
        java.lang.Class $r2, $r3;
        proguard.evaluation.value.Value $r6, $r7;
        boolean $z0;

        r0 := @this: proguard.evaluation.Variables;

        $r1 := @parameter0: java.lang.Object;

        if $r1 == null goto label1;

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 == $r3 goto label2;

     label1:
        return 0;

     label2:
        $r4 = (proguard.evaluation.Variables) $r1;

        $i0 = r0.<proguard.evaluation.Variables: int size>;

        $i1 = $r4.<proguard.evaluation.Variables: int size>;

        if $i0 == $i1 goto label3;

        return 0;

     label3:
        $i0 = 0;

     label4:
        $i1 = r0.<proguard.evaluation.Variables: int size>;

        if $i0 >= $i1 goto label6;

        $r5 = r0.<proguard.evaluation.Variables: proguard.evaluation.value.Value[] values>;

        $r6 = $r5[$i0];

        $r5 = $r4.<proguard.evaluation.Variables: proguard.evaluation.value.Value[] values>;

        $r7 = $r5[$i0];

        if $r6 == null goto label5;

        if $r7 == null goto label5;

        $i1 = virtualinvoke $r6.<proguard.evaluation.value.Value: int computationalType()>();

        $i2 = virtualinvoke $r7.<proguard.evaluation.value.Value: int computationalType()>();

        if $i1 != $i2 goto label5;

        $z0 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r7);

        if $z0 != 0 goto label5;

        return 0;

     label5:
        $i0 = $i0 + 1;

        goto label4;

     label6:
        return 1;
    }

    public proguard.evaluation.value.FloatValue fload(int)
    {
        proguard.evaluation.Variables r0;
        int $i0;
        proguard.evaluation.value.FloatValue $r2;
        proguard.evaluation.value.Value $r1;

        r0 := @this: proguard.evaluation.Variables;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<proguard.evaluation.Variables: proguard.evaluation.value.Value load(int)>($i0);

        $r2 = virtualinvoke $r1.<proguard.evaluation.value.Value: proguard.evaluation.value.FloatValue floatValue()>();

        return $r2;
    }

    public boolean generalize(proguard.evaluation.Variables, boolean)
    {
        proguard.evaluation.Variables r0, $r1;
        java.lang.IllegalArgumentException $r2;
        proguard.evaluation.value.Value[] $r5;
        java.lang.StringBuffer $r3;
        int $i0, $i1, $i2;
        java.lang.String $r4;
        proguard.evaluation.value.Value $r6, $r7;
        boolean $z0, $z1;

        r0 := @this: proguard.evaluation.Variables;

        $r1 := @parameter0: proguard.evaluation.Variables;

        $z0 := @parameter1: boolean;

        $i0 = r0.<proguard.evaluation.Variables: int size>;

        $i1 = $r1.<proguard.evaluation.Variables: int size>;

        if $i0 == $i1 goto label01;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Variable frames have different sizes [");

        $i0 = r0.<proguard.evaluation.Variables: int size>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] and [");

        $i0 = $r1.<proguard.evaluation.Variables: int size>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label01:
        $i0 = 0;

        $z1 = 0;

     label02:
        $i1 = r0.<proguard.evaluation.Variables: int size>;

        if $i0 >= $i1 goto label11;

        $r5 = r0.<proguard.evaluation.Variables: proguard.evaluation.value.Value[] values>;

        $r6 = $r5[$i0];

        $r5 = $r1.<proguard.evaluation.Variables: proguard.evaluation.value.Value[] values>;

        $r7 = $r5[$i0];

        if $r6 == null goto label07;

        if $r7 == null goto label07;

        $i1 = virtualinvoke $r6.<proguard.evaluation.value.Value: int computationalType()>();

        $i2 = virtualinvoke $r7.<proguard.evaluation.value.Value: int computationalType()>();

        if $i1 != $i2 goto label07;

        $r7 = virtualinvoke $r6.<proguard.evaluation.value.Value: proguard.evaluation.value.Value generalize(proguard.evaluation.value.Value)>($r7);

        if $z1 != 0 goto label03;

        $z1 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r7);

        if $z1 != 0 goto label06;

     label03:
        $z1 = 1;

     label04:
        $r5 = r0.<proguard.evaluation.Variables: proguard.evaluation.value.Value[] values>;

        $r5[$i0] = $r7;

     label05:
        $i0 = $i0 + 1;

        goto label02;

     label06:
        $z1 = 0;

        goto label04;

     label07:
        if $z1 != 0 goto label08;

        if $r6 == null goto label10;

     label08:
        $z1 = 1;

     label09:
        $r5 = r0.<proguard.evaluation.Variables: proguard.evaluation.value.Value[] values>;

        $r5[$i0] = null;

        if $z0 == 0 goto label05;

        $r5 = $r1.<proguard.evaluation.Variables: proguard.evaluation.value.Value[] values>;

        $r5[$i0] = null;

        goto label05;

     label10:
        $z1 = 0;

        goto label09;

     label11:
        return $z1;
    }

    public proguard.evaluation.value.Value getValue(int)
    {
        java.lang.IndexOutOfBoundsException $r1;
        proguard.evaluation.Variables r0;
        proguard.evaluation.value.Value[] $r4;
        java.lang.StringBuffer $r2;
        int $i0, $i1;
        java.lang.String $r3;
        proguard.evaluation.value.Value $r5;

        r0 := @this: proguard.evaluation.Variables;

        $i0 := @parameter0: int;

        if $i0 < 0 goto label1;

        $i1 = r0.<proguard.evaluation.Variables: int size>;

        if $i0 < $i1 goto label2;

     label1:
        $r1 = new java.lang.IndexOutOfBoundsException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Variable index [");

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] out of bounds [");

        $i0 = r0.<proguard.evaluation.Variables: int size>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label2:
        $r4 = r0.<proguard.evaluation.Variables: proguard.evaluation.value.Value[] values>;

        $r5 = $r4[$i0];

        return $r5;
    }

    public int hashCode()
    {
        proguard.evaluation.Variables r0;
        int $i0, $i1, $i2;
        proguard.evaluation.value.Value[] $r1;
        proguard.evaluation.value.Value $r2;

        r0 := @this: proguard.evaluation.Variables;

        $i1 = r0.<proguard.evaluation.Variables: int size>;

        $i2 = 0;

     label1:
        $i0 = r0.<proguard.evaluation.Variables: int size>;

        if $i2 >= $i0 goto label3;

        $r1 = r0.<proguard.evaluation.Variables: proguard.evaluation.value.Value[] values>;

        $r2 = $r1[$i2];

        if $r2 == null goto label2;

        $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        $i1 = $i1 ^ $i0;

     label2:
        $i2 = $i2 + 1;

        goto label1;

     label3:
        return $i1;
    }

    public proguard.evaluation.value.IntegerValue iload(int)
    {
        proguard.evaluation.value.IntegerValue $r2;
        proguard.evaluation.Variables r0;
        int $i0;
        proguard.evaluation.value.Value $r1;

        r0 := @this: proguard.evaluation.Variables;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<proguard.evaluation.Variables: proguard.evaluation.value.Value load(int)>($i0);

        $r2 = virtualinvoke $r1.<proguard.evaluation.value.Value: proguard.evaluation.value.IntegerValue integerValue()>();

        return $r2;
    }

    public void initialize(proguard.evaluation.Variables)
    {
        proguard.evaluation.Variables r0, $r1;
        java.lang.IllegalArgumentException $r2;
        proguard.evaluation.value.Value[] $r5, $r6;
        java.lang.StringBuffer $r3;
        int $i0, $i1;
        java.lang.String $r4;

        r0 := @this: proguard.evaluation.Variables;

        $r1 := @parameter0: proguard.evaluation.Variables;

        $i0 = r0.<proguard.evaluation.Variables: int size>;

        $i1 = $r1.<proguard.evaluation.Variables: int size>;

        if $i0 >= $i1 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Variable frame is too small [");

        $i0 = r0.<proguard.evaluation.Variables: int size>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] compared to other frame [");

        $i0 = $r1.<proguard.evaluation.Variables: int size>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label1:
        $r5 = $r1.<proguard.evaluation.Variables: proguard.evaluation.value.Value[] values>;

        $r6 = r0.<proguard.evaluation.Variables: proguard.evaluation.value.Value[] values>;

        $i0 = $r1.<proguard.evaluation.Variables: int size>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, $r6, 0, $i0);

        return;
    }

    public proguard.evaluation.value.LongValue lload(int)
    {
        proguard.evaluation.Variables r0;
        proguard.evaluation.value.LongValue $r2;
        int $i0;
        proguard.evaluation.value.Value $r1;

        r0 := @this: proguard.evaluation.Variables;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<proguard.evaluation.Variables: proguard.evaluation.value.Value load(int)>($i0);

        $r2 = virtualinvoke $r1.<proguard.evaluation.value.Value: proguard.evaluation.value.LongValue longValue()>();

        return $r2;
    }

    public proguard.evaluation.value.Value load(int)
    {
        java.lang.IndexOutOfBoundsException $r1;
        proguard.evaluation.Variables r0;
        proguard.evaluation.value.Value[] $r4;
        java.lang.StringBuffer $r2;
        int $i0, $i1;
        java.lang.String $r3;
        proguard.evaluation.value.Value $r5;

        r0 := @this: proguard.evaluation.Variables;

        $i0 := @parameter0: int;

        if $i0 < 0 goto label1;

        $i1 = r0.<proguard.evaluation.Variables: int size>;

        if $i0 < $i1 goto label2;

     label1:
        $r1 = new java.lang.IndexOutOfBoundsException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Variable index [");

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] out of bounds [");

        $i0 = r0.<proguard.evaluation.Variables: int size>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label2:
        $r4 = r0.<proguard.evaluation.Variables: proguard.evaluation.value.Value[] values>;

        $r5 = $r4[$i0];

        return $r5;
    }

    public proguard.evaluation.value.InstructionOffsetValue oload(int)
    {
        proguard.evaluation.Variables r0;
        proguard.evaluation.value.InstructionOffsetValue $r2;
        int $i0;
        proguard.evaluation.value.Value $r1;

        r0 := @this: proguard.evaluation.Variables;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<proguard.evaluation.Variables: proguard.evaluation.value.Value load(int)>($i0);

        $r2 = virtualinvoke $r1.<proguard.evaluation.value.Value: proguard.evaluation.value.InstructionOffsetValue instructionOffsetValue()>();

        return $r2;
    }

    public void reset(int)
    {
        proguard.evaluation.Variables r0;
        int $i0, $i1, $i2;
        proguard.evaluation.value.Value[] $r1;

        r0 := @this: proguard.evaluation.Variables;

        $i0 := @parameter0: int;

        $r1 = r0.<proguard.evaluation.Variables: proguard.evaluation.value.Value[] values>;

        $i1 = lengthof $r1;

        if $i0 <= $i1 goto label2;

        $r1 = newarray (proguard.evaluation.value.Value)[$i0];

        r0.<proguard.evaluation.Variables: proguard.evaluation.value.Value[] values> = $r1;

     label1:
        r0.<proguard.evaluation.Variables: int size> = $i0;

        return;

     label2:
        $i1 = 0;

     label3:
        $r1 = r0.<proguard.evaluation.Variables: proguard.evaluation.value.Value[] values>;

        $i2 = lengthof $r1;

        if $i1 >= $i2 goto label1;

        $r1 = r0.<proguard.evaluation.Variables: proguard.evaluation.value.Value[] values>;

        $r1[$i1] = null;

        $i1 = $i1 + 1;

        goto label3;
    }

    public int size()
    {
        int i0;
        proguard.evaluation.Variables r0;

        r0 := @this: proguard.evaluation.Variables;

        i0 = r0.<proguard.evaluation.Variables: int size>;

        return i0;
    }

    public void store(int, proguard.evaluation.value.Value)
    {
        java.lang.IndexOutOfBoundsException $r2;
        proguard.evaluation.Variables r0;
        proguard.evaluation.value.Value[] $r5;
        proguard.evaluation.value.TopValue $r6;
        java.lang.StringBuffer $r3;
        int $i0, $i1;
        java.lang.String $r4;
        proguard.evaluation.value.Value $r1;
        boolean $z0;

        r0 := @this: proguard.evaluation.Variables;

        $i0 := @parameter0: int;

        $r1 := @parameter1: proguard.evaluation.value.Value;

        if $i0 < 0 goto label1;

        $i1 = r0.<proguard.evaluation.Variables: int size>;

        if $i0 < $i1 goto label2;

     label1:
        $r2 = new java.lang.IndexOutOfBoundsException;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Variable index [");

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] out of bounds [");

        $i0 = r0.<proguard.evaluation.Variables: int size>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label2:
        $r5 = r0.<proguard.evaluation.Variables: proguard.evaluation.value.Value[] values>;

        $r5[$i0] = $r1;

        $z0 = virtualinvoke $r1.<proguard.evaluation.value.Value: boolean isCategory2()>();

        if $z0 == 0 goto label3;

        $r5 = r0.<proguard.evaluation.Variables: proguard.evaluation.value.Value[] values>;

        $i0 = $i0 + 1;

        $r6 = <proguard.evaluation.Variables: proguard.evaluation.value.TopValue TOP_VALUE>;

        $r5[$i0] = $r6;

     label3:
        return;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuffer $r1;
        proguard.evaluation.Variables r0;
        int $i0, $i1;
        java.lang.String $r4;
        proguard.evaluation.value.Value[] $r2;
        proguard.evaluation.value.Value $r3;

        r0 := @this: proguard.evaluation.Variables;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $i0 = 0;

     label1:
        $i1 = r0.<proguard.evaluation.Variables: int size>;

        if $i0 >= $i1 goto label4;

        $r2 = r0.<proguard.evaluation.Variables: proguard.evaluation.value.Value[] values>;

        $r3 = $r2[$i0];

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(91);

        if $r3 != null goto label3;

        $r4 = "empty";

     label2:
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);

        $i0 = $i0 + 1;

        goto label1;

     label3:
        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        goto label2;

     label4:
        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }
}
