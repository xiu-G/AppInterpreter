abstract class de.greenrobot.dao.query.AbstractQuery extends java.lang.Object
{
    protected final de.greenrobot.dao.AbstractDao dao;
    protected final de.greenrobot.dao.InternalQueryDaoAccess daoAccess;
    protected final java.lang.Thread ownerThread;
    protected final java.lang.String[] parameters;
    protected final java.lang.String sql;

    protected void <init>(de.greenrobot.dao.AbstractDao, java.lang.String, java.lang.String[])
    {
        de.greenrobot.dao.query.AbstractQuery r0;
        de.greenrobot.dao.AbstractDao $r1;
        de.greenrobot.dao.InternalQueryDaoAccess $r5;
        java.lang.Thread $r4;
        java.lang.String[] $r3;
        java.lang.String $r2;

        r0 := @this: de.greenrobot.dao.query.AbstractQuery;

        $r1 := @parameter0: de.greenrobot.dao.AbstractDao;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<de.greenrobot.dao.query.AbstractQuery: de.greenrobot.dao.AbstractDao dao> = $r1;

        $r5 = new de.greenrobot.dao.InternalQueryDaoAccess;

        specialinvoke $r5.<de.greenrobot.dao.InternalQueryDaoAccess: void <init>(de.greenrobot.dao.AbstractDao)>($r1);

        r0.<de.greenrobot.dao.query.AbstractQuery: de.greenrobot.dao.InternalQueryDaoAccess daoAccess> = $r5;

        r0.<de.greenrobot.dao.query.AbstractQuery: java.lang.String sql> = $r2;

        r0.<de.greenrobot.dao.query.AbstractQuery: java.lang.String[] parameters> = $r3;

        $r4 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r0.<de.greenrobot.dao.query.AbstractQuery: java.lang.Thread ownerThread> = $r4;

        return;
    }

    protected static java.lang.String[] toStringArray(java.lang.Object[])
    {
        java.lang.Object[] $r0;
        int $i0, $i1;
        java.lang.String[] $r1;
        java.lang.Object $r3;
        java.lang.String $r2;

        $r0 := @parameter0: java.lang.Object[];

        $i0 = lengthof $r0;

        $r1 = newarray (java.lang.String)[$i0];

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label4;

        $r3 = $r0[$i1];

        if $r3 == null goto label3;

        $r2 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        $r1[$i1] = $r2;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        $r1[$i1] = null;

        goto label2;

     label4:
        return $r1;
    }

    protected void checkThread()
    {
        de.greenrobot.dao.query.AbstractQuery r0;
        de.greenrobot.dao.DaoException $r3;
        java.lang.Thread $r1, $r2;

        r0 := @this: de.greenrobot.dao.query.AbstractQuery;

        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r2 = r0.<de.greenrobot.dao.query.AbstractQuery: java.lang.Thread ownerThread>;

        if $r1 == $r2 goto label1;

        $r3 = new de.greenrobot.dao.DaoException;

        specialinvoke $r3.<de.greenrobot.dao.DaoException: void <init>(java.lang.String)>("Method may be called only in owner thread, use forCurrentThread to get an instance for this thread");

        throw $r3;

     label1:
        return;
    }

    public void setParameter(int, java.lang.Object)
    {
        de.greenrobot.dao.query.AbstractQuery r0;
        int $i0;
        java.lang.Object $r1;
        java.lang.String[] $r3;
        java.lang.String $r2;

        r0 := @this: de.greenrobot.dao.query.AbstractQuery;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.Object;

        virtualinvoke r0.<de.greenrobot.dao.query.AbstractQuery: void checkThread()>();

        if $r1 == null goto label1;

        $r3 = r0.<de.greenrobot.dao.query.AbstractQuery: java.lang.String[] parameters>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        $r3[$i0] = $r2;

        return;

     label1:
        $r3 = r0.<de.greenrobot.dao.query.AbstractQuery: java.lang.String[] parameters>;

        $r3[$i0] = null;

        return;
    }
}
