public class com.parse.ParseFile extends java.lang.Object
{
    private java.util.ArrayList callbacks;
    private com.parse.l currentCommand;
    private com.parse.a currentTask;
    private byte[] data;
    private org.apache.http.client.methods.HttpPost fileUploadPost;
    private java.lang.String name;
    private com.parse.v previousState;
    private com.parse.v state;
    private java.lang.String url;

    void <init>(java.lang.String, java.lang.String)
    {
        com.parse.v $r4;
        com.parse.ParseFile r0;
        java.lang.String $r1, $r2;
        java.util.ArrayList $r3;

        r0 := @this: com.parse.ParseFile;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.parse.ParseFile: java.lang.String name> = null;

        r0.<com.parse.ParseFile: java.lang.String url> = null;

        r0.<com.parse.ParseFile: com.parse.a currentTask> = null;

        r0.<com.parse.ParseFile: com.parse.l currentCommand> = null;

        r0.<com.parse.ParseFile: org.apache.http.client.methods.HttpPost fileUploadPost> = null;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<com.parse.ParseFile: java.util.ArrayList callbacks> = $r3;

        r0.<com.parse.ParseFile: java.lang.String name> = $r1;

        r0.<com.parse.ParseFile: java.lang.String url> = $r2;

        $r4 = <com.parse.v: com.parse.v c>;

        specialinvoke r0.<com.parse.ParseFile: void setState(com.parse.v)>($r4);

        return;
    }

    public void <init>(java.lang.String, byte[])
    {
        byte[] $r2;
        java.lang.Object[] $r5;
        java.lang.IllegalArgumentException $r4;
        java.lang.Integer $r6;
        java.util.ArrayList $r3;
        com.parse.v $r7;
        com.parse.ParseFile r0;
        int $i0, $i1;
        java.lang.String $r1;

        r0 := @this: com.parse.ParseFile;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.parse.ParseFile: java.lang.String name> = null;

        r0.<com.parse.ParseFile: java.lang.String url> = null;

        r0.<com.parse.ParseFile: com.parse.a currentTask> = null;

        r0.<com.parse.ParseFile: com.parse.l currentCommand> = null;

        r0.<com.parse.ParseFile: org.apache.http.client.methods.HttpPost fileUploadPost> = null;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<com.parse.ParseFile: java.util.ArrayList callbacks> = $r3;

        $i0 = lengthof $r2;

        $i1 = <com.parse.Parse: int maxParseFileSize>;

        if $i0 <= $i1 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = newarray (java.lang.Object)[1];

        $i0 = <com.parse.Parse: int maxParseFileSize>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r5[0] = $r6;

        $r1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("ParseFile must be less than %i bytes", $r5);

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r4;

     label1:
        r0.<com.parse.ParseFile: java.lang.String name> = $r1;

        r0.<com.parse.ParseFile: byte[] data> = $r2;

        $r7 = <com.parse.v: com.parse.v a>;

        specialinvoke r0.<com.parse.ParseFile: void setState(com.parse.v)>($r7);

        return;
    }

    public void <init>(byte[])
    {
        byte[] $r1;
        java.lang.Object[] $r4;
        java.lang.IllegalArgumentException $r3;
        java.lang.Integer $r5;
        java.util.ArrayList $r2;
        com.parse.v $r7;
        com.parse.ParseFile r0;
        int $i0, $i1;
        java.lang.String $r6;

        r0 := @this: com.parse.ParseFile;

        $r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.parse.ParseFile: java.lang.String name> = null;

        r0.<com.parse.ParseFile: java.lang.String url> = null;

        r0.<com.parse.ParseFile: com.parse.a currentTask> = null;

        r0.<com.parse.ParseFile: com.parse.l currentCommand> = null;

        r0.<com.parse.ParseFile: org.apache.http.client.methods.HttpPost fileUploadPost> = null;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<com.parse.ParseFile: java.util.ArrayList callbacks> = $r2;

        $i0 = lengthof $r1;

        $i1 = <com.parse.Parse: int maxParseFileSize>;

        if $i0 <= $i1 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = newarray (java.lang.Object)[1];

        $i0 = <com.parse.Parse: int maxParseFileSize>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4[0] = $r5;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("ParseFile must be less than %i bytes", $r4);

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r3;

     label1:
        $r7 = <com.parse.v: com.parse.v a>;

        specialinvoke r0.<com.parse.ParseFile: void setState(com.parse.v)>($r7);

        r0.<com.parse.ParseFile: byte[] data> = $r1;

        return;
    }

    static void access$000(com.parse.ParseFile, boolean, com.parse.ProgressCallback)
    {
        com.parse.ProgressCallback $r1;
        com.parse.ParseFile $r0;
        boolean $z0;

        $r0 := @parameter0: com.parse.ParseFile;

        $z0 := @parameter1: boolean;

        $r1 := @parameter2: com.parse.ProgressCallback;

        specialinvoke $r0.<com.parse.ParseFile: void save(boolean,com.parse.ProgressCallback)>(0, $r1);

        return;
    }

    static java.util.ArrayList access$100(com.parse.ParseFile)
    {
        com.parse.ParseFile $r0;
        java.util.ArrayList r1;

        $r0 := @parameter0: com.parse.ParseFile;

        r1 = $r0.<com.parse.ParseFile: java.util.ArrayList callbacks>;

        return r1;
    }

    private com.parse.l constructFileUploadCommand()
    {
        com.parse.l $r2;
        java.lang.String $r1;
        com.parse.ParseFile r0;

        r0 := @this: com.parse.ParseFile;

        $r2 = new com.parse.l;

        specialinvoke $r2.<com.parse.l: void <init>(java.lang.String)>("upload_file");

        r0.<com.parse.ParseFile: com.parse.l currentCommand> = $r2;

        $r2 = r0.<com.parse.ParseFile: com.parse.l currentCommand>;

        virtualinvoke $r2.<com.parse.l: void d()>();

        $r1 = r0.<com.parse.ParseFile: java.lang.String name>;

        if $r1 == null goto label1;

        $r2 = r0.<com.parse.ParseFile: com.parse.l currentCommand>;

        $r1 = r0.<com.parse.ParseFile: java.lang.String name>;

        virtualinvoke $r2.<com.parse.l: void a(java.lang.String,java.lang.String)>("name", $r1);

     label1:
        $r2 = r0.<com.parse.ParseFile: com.parse.l currentCommand>;

        return $r2;
    }

    private void handleFileUploadResult(org.json.JSONObject, com.parse.ProgressCallback)
    {
        com.parse.v $r3, $r4;
        com.parse.ProgressCallback $r2;
        org.apache.http.client.methods.HttpPost $r5;
        com.parse.bb $r6;
        org.json.JSONObject $r1;
        com.parse.ParseFile r0;

        r0 := @this: com.parse.ParseFile;

        $r1 := @parameter0: org.json.JSONObject;

        $r2 := @parameter1: com.parse.ProgressCallback;

        $r3 = r0.<com.parse.ParseFile: com.parse.v state>;

        $r4 = <com.parse.v: com.parse.v b>;

        if $r3 == $r4 goto label1;

        return;

     label1:
        $r5 = r0.<com.parse.ParseFile: org.apache.http.client.methods.HttpPost fileUploadPost>;

        if $r5 != null goto label2;

        specialinvoke r0.<com.parse.ParseFile: void prepareFileUploadPost(org.json.JSONObject,com.parse.ProgressCallback)>($r1, $r2);

     label2:
        $r6 = new com.parse.bb;

        $r5 = r0.<com.parse.ParseFile: org.apache.http.client.methods.HttpPost fileUploadPost>;

        specialinvoke $r6.<com.parse.bb: void <init>(org.apache.http.client.methods.HttpUriRequest,long)>($r5, 1000L);

        virtualinvoke $r6.<com.parse.bb: byte[] a(com.parse.ProgressCallback)>(null);

        $r3 = <com.parse.v: com.parse.v e>;

        specialinvoke r0.<com.parse.ParseFile: void setState(com.parse.v)>($r3);

        return;
    }

    private void prepareFileUploadPost(org.json.JSONObject, com.parse.ProgressCallback)
    {
        java.lang.Throwable $r13, $r15;
        byte[] $r17;
        org.apache.http.client.methods.HttpPost $r18, $r24;
        com.parse.CountingMultipartEntity $r3, $r20;
        com.parse.ProgressCallback $r2;
        org.json.JSONException $r14, $r16, $r19;
        org.json.JSONObject $r1, $r5;
        int $i0;
        java.lang.String $r4, $r7, $r12;
        boolean $z0;
        java.util.Iterator $r10;
        java.lang.RuntimeException $r22;
        com.parse.entity.mime.content.StringBody $r9, $r21;
        com.parse.ParseFile r0;
        java.lang.Object $r11;
        com.parse.entity.mime.content.ByteArrayBody $r23;
        java.io.UnsupportedEncodingException $r25;
        android.webkit.MimeTypeMap $r8;
        com.parse.entity.mime.HttpMultipartMode $r6;

        r0 := @this: com.parse.ParseFile;

        $r1 := @parameter0: org.json.JSONObject;

        $r2 := @parameter1: com.parse.ProgressCallback;

     label01:
        $r4 = virtualinvoke $r1.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("name");

     label02:
        r0.<com.parse.ParseFile: java.lang.String name> = $r4;

     label03:
        $r4 = virtualinvoke $r1.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("url");

     label04:
        r0.<com.parse.ParseFile: java.lang.String url> = $r4;

     label05:
        $r5 = virtualinvoke $r1.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>("post_params");

     label06:
        $r4 = null;

        $r20 = new com.parse.CountingMultipartEntity;

        $r3 = $r20;

        $r6 = <com.parse.entity.mime.HttpMultipartMode: com.parse.entity.mime.HttpMultipartMode BROWSER_COMPATIBLE>;

        specialinvoke $r20.<com.parse.CountingMultipartEntity: void <init>(com.parse.entity.mime.HttpMultipartMode,com.parse.ProgressCallback)>($r6, $r2);

        $r7 = r0.<com.parse.ParseFile: java.lang.String name>;

        $i0 = virtualinvoke $r7.<java.lang.String: int lastIndexOf(java.lang.String)>(".");

        if $i0 == -1 goto label07;

        $r4 = r0.<com.parse.ParseFile: java.lang.String name>;

        $r7 = r0.<com.parse.ParseFile: java.lang.String name>;

        $i0 = virtualinvoke $r7.<java.lang.String: int lastIndexOf(java.lang.String)>(".");

        $i0 = $i0 + 1;

        $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int)>($i0);

        $r8 = staticinvoke <android.webkit.MimeTypeMap: android.webkit.MimeTypeMap getSingleton()>();

        $r4 = virtualinvoke $r8.<android.webkit.MimeTypeMap: java.lang.String getMimeTypeFromExtension(java.lang.String)>($r4);

     label07:
        if $r4 != null goto label08;

        $r4 = "application/octet-stream";

     label08:
        $r21 = new com.parse.entity.mime.content.StringBody;

        $r9 = $r21;

     label09:
        specialinvoke $r21.<com.parse.entity.mime.content.StringBody: void <init>(java.lang.String)>($r4);

        virtualinvoke $r3.<com.parse.CountingMultipartEntity: void addPart(java.lang.String,com.parse.entity.mime.content.ContentBody)>("Content-Type", $r9);

     label10:
        $r10 = virtualinvoke $r5.<org.json.JSONObject: java.util.Iterator keys()>();

     label11:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label18;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (java.lang.String) $r11;

        $r21 = new com.parse.entity.mime.content.StringBody;

        $r9 = $r21;

     label12:
        $r12 = virtualinvoke $r5.<org.json.JSONObject: java.lang.String getString(java.lang.String)>($r7);

        specialinvoke $r21.<com.parse.entity.mime.content.StringBody: void <init>(java.lang.String)>($r12);

        virtualinvoke $r3.<com.parse.CountingMultipartEntity: void addPart(java.lang.String,com.parse.entity.mime.content.ContentBody)>($r7, $r9);

     label13:
        goto label11;

     label14:
        $r13 := @caughtexception;

        $r22 = new java.lang.RuntimeException;

        $r25 = (java.io.UnsupportedEncodingException) $r13;

        $r4 = virtualinvoke $r25.<java.io.UnsupportedEncodingException: java.lang.String getMessage()>();

        specialinvoke $r22.<java.lang.RuntimeException: void <init>(java.lang.String)>($r4);

        throw $r22;

     label15:
        $r14 := @caughtexception;

        $r22 = new java.lang.RuntimeException;

        $r4 = virtualinvoke $r14.<org.json.JSONException: java.lang.String getMessage()>();

        specialinvoke $r22.<java.lang.RuntimeException: void <init>(java.lang.String)>($r4);

        throw $r22;

     label16:
        $r15 := @caughtexception;

        $r22 = new java.lang.RuntimeException;

        $r25 = (java.io.UnsupportedEncodingException) $r15;

        $r4 = virtualinvoke $r25.<java.io.UnsupportedEncodingException: java.lang.String getMessage()>();

        specialinvoke $r22.<java.lang.RuntimeException: void <init>(java.lang.String)>($r4);

        throw $r22;

     label17:
        $r16 := @caughtexception;

        $r22 = new java.lang.RuntimeException;

        $r4 = virtualinvoke $r16.<org.json.JSONException: java.lang.String getMessage()>();

        specialinvoke $r22.<java.lang.RuntimeException: void <init>(java.lang.String)>($r4);

        throw $r22;

     label18:
        $r23 = new com.parse.entity.mime.content.ByteArrayBody;

        $r17 = r0.<com.parse.ParseFile: byte[] data>;

        specialinvoke $r23.<com.parse.entity.mime.content.ByteArrayBody: void <init>(byte[],java.lang.String,java.lang.String)>($r17, $r4, "file");

        virtualinvoke $r3.<com.parse.CountingMultipartEntity: void addPart(java.lang.String,com.parse.entity.mime.content.ContentBody)>("file", $r23);

        $r24 = new org.apache.http.client.methods.HttpPost;

     label19:
        $r4 = virtualinvoke $r1.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("post_url");

        specialinvoke $r24.<org.apache.http.client.methods.HttpPost: void <init>(java.lang.String)>($r4);

     label20:
        r0.<com.parse.ParseFile: org.apache.http.client.methods.HttpPost fileUploadPost> = $r24;

        $r18 = r0.<com.parse.ParseFile: org.apache.http.client.methods.HttpPost fileUploadPost>;

        virtualinvoke $r18.<org.apache.http.client.methods.HttpPost: void setEntity(org.apache.http.HttpEntity)>($r3);

        return;

     label21:
        $r19 := @caughtexception;

        $r22 = new java.lang.RuntimeException;

        $r4 = virtualinvoke $r19.<org.json.JSONException: java.lang.String getMessage()>();

        specialinvoke $r22.<java.lang.RuntimeException: void <init>(java.lang.String)>($r4);

        throw $r22;

        catch org.json.JSONException from label01 to label02 with label15;
        catch org.json.JSONException from label03 to label04 with label15;
        catch org.json.JSONException from label05 to label06 with label15;
        catch java.io.UnsupportedEncodingException from label09 to label10 with label16;
        catch java.io.UnsupportedEncodingException from label12 to label13 with label14;
        catch org.json.JSONException from label12 to label13 with label17;
        catch org.json.JSONException from label19 to label20 with label21;
    }

    private void revertState()
    {
        com.parse.v $r1;
        com.parse.ParseFile r0;

        r0 := @this: com.parse.ParseFile;

        $r1 = r0.<com.parse.ParseFile: com.parse.v previousState>;

        specialinvoke r0.<com.parse.ParseFile: void setState(com.parse.v)>($r1);

        return;
    }

    private void save(boolean, com.parse.ProgressCallback)
    {
        com.parse.ParseException $r7;
        com.parse.v $r2, $r3;
        com.parse.ProgressCallback $r1;
        org.json.JSONObject $r6;
        com.parse.ParseFile r0;
        com.parse.l $r4;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: com.parse.ParseFile;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: com.parse.ProgressCallback;

        if $z0 == 0 goto label2;

        virtualinvoke r0.<com.parse.ParseFile: void assertNotRunning()>();

        $r3 = r0.<com.parse.ParseFile: com.parse.v state>;

        $r2 = <com.parse.v: com.parse.v a>;

        if $r3 == $r2 goto label1;

        return;

     label1:
        $r2 = <com.parse.v: com.parse.v b>;

        specialinvoke r0.<com.parse.ParseFile: void setState(com.parse.v)>($r2);

     label2:
        $r4 = specialinvoke r0.<com.parse.ParseFile: com.parse.l constructFileUploadCommand()>();

        $r5 = virtualinvoke $r4.<com.parse.l: java.lang.Object c()>();

     label3:
        $r6 = (org.json.JSONObject) $r5;

     label4:
        specialinvoke r0.<com.parse.ParseFile: void handleFileUploadResult(org.json.JSONObject,com.parse.ProgressCallback)>($r6, $r1);

     label5:
        return;

     label6:
        $r7 := @caughtexception;

        specialinvoke r0.<com.parse.ParseFile: void revertState()>();

        throw $r7;

        catch com.parse.ParseException from label2 to label3 with label6;
        catch com.parse.ParseException from label4 to label5 with label6;
    }

    private void setState(com.parse.v)
    {
        com.parse.v $r1, $r2;
        java.lang.Throwable $r3;
        com.parse.ParseFile r0;

        r0 := @this: com.parse.ParseFile;

        $r1 := @parameter0: com.parse.v;

        entermonitor r0;

     label1:
        $r2 = <com.parse.v: com.parse.v b>;

        if $r1 == $r2 goto label2;

        $r2 = <com.parse.v: com.parse.v d>;

        if $r1 == $r2 goto label2;

        r0.<com.parse.ParseFile: com.parse.a currentTask> = null;

        r0.<com.parse.ParseFile: com.parse.l currentCommand> = null;

     label2:
        $r2 = r0.<com.parse.ParseFile: com.parse.v state>;

        if $r2 == $r1 goto label3;

        $r2 = r0.<com.parse.ParseFile: com.parse.v state>;

        r0.<com.parse.ParseFile: com.parse.v previousState> = $r2;

        r0.<com.parse.ParseFile: com.parse.v state> = $r1;

     label3:
        exitmonitor r0;

     label4:
        return;

     label5:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label4 with label5;
    }

    protected void assertNotRunning()
    {
        com.parse.v $r1, $r2;
        java.lang.Throwable $r4;
        com.parse.ParseFile r0;
        java.lang.RuntimeException $r3;

        r0 := @this: com.parse.ParseFile;

        entermonitor r0;

     label1:
        $r1 = r0.<com.parse.ParseFile: com.parse.v state>;

        $r2 = <com.parse.v: com.parse.v b>;

        if $r1 == $r2 goto label2;

        $r1 = r0.<com.parse.ParseFile: com.parse.v state>;

        $r2 = <com.parse.v: com.parse.v d>;

        if $r1 != $r2 goto label4;

     label2:
        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("This query has an outstanding network connection. You have to wait until it\'s done.");

        throw $r3;

     label3:
        $r4 := @caughtexception;

        exitmonitor r0;

        throw $r4;

     label4:
        exitmonitor r0;

     label5:
        return;

        catch java.lang.Throwable from label1 to label3 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void cancel()
    {
        org.apache.http.client.methods.HttpPost $r1;
        com.parse.ParseFile r0;
        com.parse.a $r3;
        com.parse.l $r2;
        java.util.ArrayList $r4;

        r0 := @this: com.parse.ParseFile;

        $r1 = r0.<com.parse.ParseFile: org.apache.http.client.methods.HttpPost fileUploadPost>;

        if $r1 == null goto label1;

        $r1 = r0.<com.parse.ParseFile: org.apache.http.client.methods.HttpPost fileUploadPost>;

        virtualinvoke $r1.<org.apache.http.client.methods.HttpPost: void abort()>();

     label1:
        $r2 = r0.<com.parse.ParseFile: com.parse.l currentCommand>;

        if $r2 == null goto label2;

        $r2 = r0.<com.parse.ParseFile: com.parse.l currentCommand>;

        virtualinvoke $r2.<com.parse.l: void e()>();

     label2:
        $r3 = r0.<com.parse.ParseFile: com.parse.a currentTask>;

        if $r3 == null goto label3;

        $r3 = r0.<com.parse.ParseFile: com.parse.a currentTask>;

        virtualinvoke $r3.<com.parse.a: boolean cancel(boolean)>(1);

     label3:
        $r4 = r0.<com.parse.ParseFile: java.util.ArrayList callbacks>;

        virtualinvoke $r4.<java.util.ArrayList: void clear()>();

        specialinvoke r0.<com.parse.ParseFile: void revertState()>();

        return;
    }

    public byte[] getData()
    {
        byte[] $r1;
        com.parse.ParseFile r0;

        r0 := @this: com.parse.ParseFile;

        $r1 = virtualinvoke r0.<com.parse.ParseFile: byte[] getData(boolean,com.parse.ProgressCallback)>(1, null);

        return $r1;
    }

    protected byte[] getData(boolean, com.parse.ProgressCallback)
    {
        java.lang.Throwable $r7;
        byte[] $r6;
        java.lang.IllegalStateException $r12;
        com.parse.ParseException $r8, $r11;
        com.parse.v $r2;
        com.parse.ProgressCallback $r1;
        com.parse.bb $r3, $r10;
        com.parse.ParseFile r0;
        org.apache.http.client.methods.HttpGet $r4, $r9;
        java.lang.String $r5;
        boolean $z0, $z1;

        r0 := @this: com.parse.ParseFile;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: com.parse.ProgressCallback;

        $z1 = virtualinvoke r0.<com.parse.ParseFile: boolean isDataAvailable()>();

        if $z1 == 0 goto label1;

        $r6 = r0.<com.parse.ParseFile: byte[] data>;

        return $r6;

     label1:
        $r10 = new com.parse.bb;

        $r3 = $r10;

        $r9 = new org.apache.http.client.methods.HttpGet;

        $r4 = $r9;

        $r5 = r0.<com.parse.ParseFile: java.lang.String url>;

     label2:
        specialinvoke $r9.<org.apache.http.client.methods.HttpGet: void <init>(java.lang.String)>($r5);

        specialinvoke $r10.<com.parse.bb: void <init>(org.apache.http.client.methods.HttpUriRequest,long)>($r4, 1000L);

        $r6 = virtualinvoke $r3.<com.parse.bb: byte[] a(com.parse.ProgressCallback)>($r1);

     label3:
        r0.<com.parse.ParseFile: byte[] data> = $r6;

        $r2 = <com.parse.v: com.parse.v e>;

        specialinvoke r0.<com.parse.ParseFile: void setState(com.parse.v)>($r2);

        $r6 = r0.<com.parse.ParseFile: byte[] data>;

        return $r6;

     label4:
        $r7 := @caughtexception;

        specialinvoke r0.<com.parse.ParseFile: void revertState()>();

        $r11 = new com.parse.ParseException;

        $r12 = (java.lang.IllegalStateException) $r7;

        $r5 = virtualinvoke $r12.<java.lang.IllegalStateException: java.lang.String getMessage()>();

        specialinvoke $r11.<com.parse.ParseException: void <init>(int,java.lang.String)>(100, $r5);

        throw $r11;

     label5:
        $r8 := @caughtexception;

        specialinvoke r0.<com.parse.ParseFile: void revertState()>();

        throw $r8;

        catch java.lang.IllegalStateException from label2 to label3 with label4;
        catch com.parse.ParseException from label2 to label3 with label5;
    }

    public void getDataInBackground(com.parse.GetDataCallback)
    {
        com.parse.GetDataCallback $r1;
        com.parse.ParseFile r0;

        r0 := @this: com.parse.ParseFile;

        $r1 := @parameter0: com.parse.GetDataCallback;

        virtualinvoke r0.<com.parse.ParseFile: void getDataInBackground(com.parse.GetDataCallback,com.parse.ProgressCallback)>($r1, null);

        return;
    }

    public void getDataInBackground(com.parse.GetDataCallback, com.parse.ProgressCallback)
    {
        java.lang.Throwable $r7;
        byte[] $r3;
        com.parse.GetDataCallback $r1;
        java.util.ArrayList $r6;
        com.parse.v $r4, $r5;
        com.parse.ProgressCallback $r2;
        com.parse.t $r8;
        com.parse.u $r9;
        com.parse.ParseFile r0;
        boolean $z0;

        r0 := @this: com.parse.ParseFile;

        $r1 := @parameter0: com.parse.GetDataCallback;

        $r2 := @parameter1: com.parse.ProgressCallback;

        entermonitor r0;

     label1:
        $z0 = virtualinvoke r0.<com.parse.ParseFile: boolean isDataAvailable()>();

        if $z0 == 0 goto label3;

        $r3 = r0.<com.parse.ParseFile: byte[] data>;

        virtualinvoke $r1.<com.parse.GetDataCallback: void done(byte[],com.parse.ParseException)>($r3, null);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r4 = r0.<com.parse.ParseFile: com.parse.v state>;

        $r5 = <com.parse.v: com.parse.v d>;

        if $r4 != $r5 goto label6;

        $r6 = r0.<com.parse.ParseFile: java.util.ArrayList callbacks>;

        virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>($r1);

     label4:
        goto label2;

     label5:
        $r7 := @caughtexception;

        exitmonitor r0;

        throw $r7;

     label6:
        virtualinvoke r0.<com.parse.ParseFile: void assertNotRunning()>();

        $r4 = <com.parse.v: com.parse.v d>;

        specialinvoke r0.<com.parse.ParseFile: void setState(com.parse.v)>($r4);

        $r6 = r0.<com.parse.ParseFile: java.util.ArrayList callbacks>;

        virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>($r1);

        $r8 = new com.parse.t;

        specialinvoke $r8.<com.parse.t: void <init>(com.parse.ParseFile)>(r0);

        $r9 = new com.parse.u;

        specialinvoke $r9.<com.parse.u: void <init>(com.parse.ParseFile,com.parse.k,com.parse.ProgressCallback)>(r0, $r8, $r2);

        staticinvoke <com.parse.a: int a(com.parse.a)>($r9);

     label7:
        goto label2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public java.lang.String getName()
    {
        java.lang.String r1;
        com.parse.ParseFile r0;

        r0 := @this: com.parse.ParseFile;

        r1 = r0.<com.parse.ParseFile: java.lang.String name>;

        return r1;
    }

    public java.lang.String getUrl()
    {
        java.lang.String r1;
        com.parse.ParseFile r0;

        r0 := @this: com.parse.ParseFile;

        r1 = r0.<com.parse.ParseFile: java.lang.String url>;

        return r1;
    }

    public boolean isDataAvailable()
    {
        com.parse.v $r1, $r2;
        com.parse.ParseFile r0;

        r0 := @this: com.parse.ParseFile;

        $r1 = r0.<com.parse.ParseFile: com.parse.v state>;

        $r2 = <com.parse.v: com.parse.v c>;

        if $r1 == $r2 goto label1;

        $r1 = r0.<com.parse.ParseFile: com.parse.v state>;

        $r2 = <com.parse.v: com.parse.v d>;

        if $r1 == $r2 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isDirty()
    {
        com.parse.v $r1, $r2;
        com.parse.ParseFile r0;

        r0 := @this: com.parse.ParseFile;

        $r2 = r0.<com.parse.ParseFile: com.parse.v state>;

        $r1 = <com.parse.v: com.parse.v a>;

        if $r2 != $r1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void save()
    {
        com.parse.ParseFile r0;

        r0 := @this: com.parse.ParseFile;

        specialinvoke r0.<com.parse.ParseFile: void save(boolean,com.parse.ProgressCallback)>(1, null);

        return;
    }

    public void saveInBackground()
    {
        com.parse.ParseFile r0;

        r0 := @this: com.parse.ParseFile;

        virtualinvoke r0.<com.parse.ParseFile: void saveInBackground(com.parse.SaveCallback)>(null);

        return;
    }

    public void saveInBackground(com.parse.SaveCallback)
    {
        com.parse.SaveCallback $r1;
        com.parse.ParseFile r0;

        r0 := @this: com.parse.ParseFile;

        $r1 := @parameter0: com.parse.SaveCallback;

        virtualinvoke r0.<com.parse.ParseFile: void saveInBackground(com.parse.SaveCallback,com.parse.ProgressCallback)>($r1, null);

        return;
    }

    public void saveInBackground(com.parse.SaveCallback, com.parse.ProgressCallback)
    {
        com.parse.v $r3, $r4;
        java.lang.Throwable $r6;
        com.parse.ProgressCallback $r2;
        com.parse.ParseFile r0;
        com.parse.s $r5;
        com.parse.SaveCallback $r1;

        r0 := @this: com.parse.ParseFile;

        $r1 := @parameter0: com.parse.SaveCallback;

        $r2 := @parameter1: com.parse.ProgressCallback;

        entermonitor r0;

     label1:
        virtualinvoke r0.<com.parse.ParseFile: void assertNotRunning()>();

        $r4 = r0.<com.parse.ParseFile: com.parse.v state>;

        $r3 = <com.parse.v: com.parse.v a>;

        if $r4 == $r3 goto label3;

        virtualinvoke $r1.<com.parse.SaveCallback: void done(com.parse.ParseException)>(null);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 = <com.parse.v: com.parse.v b>;

        specialinvoke r0.<com.parse.ParseFile: void setState(com.parse.v)>($r3);

        $r5 = new com.parse.s;

        specialinvoke $r5.<com.parse.s: void <init>(com.parse.ParseFile,com.parse.k,com.parse.ProgressCallback)>(r0, $r1, $r2);

        r0.<com.parse.ParseFile: com.parse.a currentTask> = $r5;

        staticinvoke <com.parse.a: int a(com.parse.a)>($r5);

     label4:
        goto label2;

     label5:
        $r6 := @caughtexception;

        exitmonitor r0;

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }
}
