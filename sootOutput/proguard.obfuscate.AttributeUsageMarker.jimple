public class proguard.obfuscate.AttributeUsageMarker extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.attribute.visitor.AttributeVisitor
{
    private static final java.lang.Object USED;

    static void <clinit>()
    {
        java.lang.Object $r0;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <proguard.obfuscate.AttributeUsageMarker: java.lang.Object USED> = $r0;

        return;
    }

    public void <init>()
    {
        proguard.obfuscate.AttributeUsageMarker r0;

        r0 := @this: proguard.obfuscate.AttributeUsageMarker;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        return;
    }

    static boolean isUsed(proguard.classfile.VisitorAccepter)
    {
        java.lang.Object $r1, $r2;
        proguard.classfile.VisitorAccepter $r0;

        $r0 := @parameter0: proguard.classfile.VisitorAccepter;

        $r2 = interfaceinvoke $r0.<proguard.classfile.VisitorAccepter: java.lang.Object getVisitorInfo()>();

        $r1 = <proguard.obfuscate.AttributeUsageMarker: java.lang.Object USED>;

        if $r2 != $r1 goto label1;

        return 1;

     label1:
        return 0;
    }

    private static void markAsUsed(proguard.classfile.VisitorAccepter)
    {
        java.lang.Object $r1;
        proguard.classfile.VisitorAccepter $r0;

        $r0 := @parameter0: proguard.classfile.VisitorAccepter;

        $r1 = <proguard.obfuscate.AttributeUsageMarker: java.lang.Object USED>;

        interfaceinvoke $r0.<proguard.classfile.VisitorAccepter: void setVisitorInfo(java.lang.Object)>($r1);

        return;
    }

    public void visitAnyAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.Attribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.obfuscate.AttributeUsageMarker r0;
        proguard.classfile.attribute.Attribute $r2;

        r0 := @this: proguard.obfuscate.AttributeUsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.Attribute;

        staticinvoke <proguard.obfuscate.AttributeUsageMarker: void markAsUsed(proguard.classfile.VisitorAccepter)>($r2);

        return;
    }
}
