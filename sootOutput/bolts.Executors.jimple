final class bolts.Executors extends java.lang.Object
{
    static final int CORE_POOL_SIZE;
    private static final int CPU_COUNT;
    static final long KEEP_ALIVE_TIME;
    static final int MAX_POOL_SIZE;
    static final int MAX_QUEUE_SIZE;

    static void <clinit>()
    {
        int $i0;
        java.lang.Runtime $r0;

        <bolts.Executors: int MAX_QUEUE_SIZE> = 128;

        <bolts.Executors: long KEEP_ALIVE_TIME> = 1L;

        <bolts.Executors: int CORE_POOL_SIZE> = 0;

        $r0 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $i0 = virtualinvoke $r0.<java.lang.Runtime: int availableProcessors()>();

        <bolts.Executors: int CPU_COUNT> = $i0;

        $i0 = <bolts.Executors: int CPU_COUNT>;

        $i0 = $i0 + 1;

        <bolts.Executors: int CORE_POOL_SIZE> = $i0;

        $i0 = <bolts.Executors: int CPU_COUNT>;

        $i0 = $i0 * 2;

        $i0 = $i0 + 1;

        <bolts.Executors: int MAX_POOL_SIZE> = $i0;

        return;
    }

    private void <init>()
    {
        bolts.Executors r0;

        r0 := @this: bolts.Executors;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void allowCoreThreadTimeout(java.util.concurrent.ThreadPoolExecutor, boolean)
    {
        int $i0;
        java.util.concurrent.ThreadPoolExecutor $r0;
        boolean $z0;

        $r0 := @parameter0: java.util.concurrent.ThreadPoolExecutor;

        $z0 := @parameter1: boolean;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 9 goto label1;

        virtualinvoke $r0.<java.util.concurrent.ThreadPoolExecutor: void allowCoreThreadTimeOut(boolean)>(1);

     label1:
        return;
    }

    public static java.util.concurrent.ExecutorService newCachedThreadPool()
    {
        java.util.concurrent.TimeUnit $r1;
        java.util.concurrent.ThreadPoolExecutor r0;
        int $i0, $i1;
        java.util.concurrent.LinkedBlockingQueue $r2;

        r0 = new java.util.concurrent.ThreadPoolExecutor;

        $i1 = <bolts.Executors: int CORE_POOL_SIZE>;

        $i0 = <bolts.Executors: int MAX_POOL_SIZE>;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $r2 = new java.util.concurrent.LinkedBlockingQueue;

        specialinvoke $r2.<java.util.concurrent.LinkedBlockingQueue: void <init>(int)>(128);

        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue)>($i1, $i0, 1L, $r1, $r2);

        staticinvoke <bolts.Executors: void allowCoreThreadTimeout(java.util.concurrent.ThreadPoolExecutor,boolean)>(r0, 1);

        return r0;
    }

    public static java.util.concurrent.ExecutorService newCachedThreadPool(java.util.concurrent.ThreadFactory)
    {
        java.util.concurrent.TimeUnit $r2;
        java.util.concurrent.ThreadPoolExecutor r1;
        int $i0, $i1;
        java.util.concurrent.ThreadFactory $r0;
        java.util.concurrent.LinkedBlockingQueue $r3;

        $r0 := @parameter0: java.util.concurrent.ThreadFactory;

        r1 = new java.util.concurrent.ThreadPoolExecutor;

        $i1 = <bolts.Executors: int CORE_POOL_SIZE>;

        $i0 = <bolts.Executors: int MAX_POOL_SIZE>;

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $r3 = new java.util.concurrent.LinkedBlockingQueue;

        specialinvoke $r3.<java.util.concurrent.LinkedBlockingQueue: void <init>(int)>(128);

        specialinvoke r1.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)>($i1, $i0, 1L, $r2, $r3, $r0);

        staticinvoke <bolts.Executors: void allowCoreThreadTimeout(java.util.concurrent.ThreadPoolExecutor,boolean)>(r1, 1);

        return r1;
    }
}
