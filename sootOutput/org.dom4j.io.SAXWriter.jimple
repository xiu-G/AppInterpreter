public class org.dom4j.io.SAXWriter extends java.lang.Object implements org.xml.sax.XMLReader
{
    protected static final java.lang.String FEATURE_NAMESPACES;
    protected static final java.lang.String FEATURE_NAMESPACE_PREFIXES;
    protected static final java.lang.String[] LEXICAL_HANDLER_NAMES;
    private org.xml.sax.helpers.AttributesImpl attributes;
    private org.xml.sax.ContentHandler contentHandler;
    private boolean declareNamespaceAttributes;
    private org.xml.sax.DTDHandler dtdHandler;
    private org.xml.sax.EntityResolver entityResolver;
    private org.xml.sax.ErrorHandler errorHandler;
    private java.util.Map features;
    private org.xml.sax.ext.LexicalHandler lexicalHandler;
    private java.util.Map properties;

    static void <clinit>()
    {
        java.lang.String[] $r0;

        <org.dom4j.io.SAXWriter: java.lang.String FEATURE_NAMESPACE_PREFIXES> = "http://xml.org/sax/features/namespace-prefixes";

        <org.dom4j.io.SAXWriter: java.lang.String FEATURE_NAMESPACES> = "http://xml.org/sax/features/namespaces";

        $r0 = newarray (java.lang.String)[2];

        $r0[0] = "http://xml.org/sax/properties/lexical-handler";

        $r0[1] = "http://xml.org/sax/handlers/LexicalHandler";

        <org.dom4j.io.SAXWriter: java.lang.String[] LEXICAL_HANDLER_NAMES> = $r0;

        return;
    }

    public void <init>()
    {
        org.xml.sax.helpers.AttributesImpl $r1;
        java.util.Map $r3;
        org.dom4j.io.SAXWriter r0;
        java.lang.Boolean $r4;
        java.util.HashMap $r2;

        r0 := @this: org.dom4j.io.SAXWriter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.xml.sax.helpers.AttributesImpl;

        specialinvoke $r1.<org.xml.sax.helpers.AttributesImpl: void <init>()>();

        r0.<org.dom4j.io.SAXWriter: org.xml.sax.helpers.AttributesImpl attributes> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.dom4j.io.SAXWriter: java.util.Map features> = $r2;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.dom4j.io.SAXWriter: java.util.Map properties> = $r2;

        $r3 = r0.<org.dom4j.io.SAXWriter: java.util.Map properties>;

        $r4 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("http://xml.org/sax/features/namespace-prefixes", $r4);

        $r3 = r0.<org.dom4j.io.SAXWriter: java.util.Map properties>;

        $r4 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("http://xml.org/sax/features/namespace-prefixes", $r4);

        return;
    }

    public void <init>(org.xml.sax.ContentHandler)
    {
        org.dom4j.io.SAXWriter r0;
        org.xml.sax.ContentHandler $r1;

        r0 := @this: org.dom4j.io.SAXWriter;

        $r1 := @parameter0: org.xml.sax.ContentHandler;

        specialinvoke r0.<org.dom4j.io.SAXWriter: void <init>()>();

        r0.<org.dom4j.io.SAXWriter: org.xml.sax.ContentHandler contentHandler> = $r1;

        return;
    }

    public void <init>(org.xml.sax.ContentHandler, org.xml.sax.ext.LexicalHandler)
    {
        org.xml.sax.ext.LexicalHandler $r2;
        org.dom4j.io.SAXWriter r0;
        org.xml.sax.ContentHandler $r1;

        r0 := @this: org.dom4j.io.SAXWriter;

        $r1 := @parameter0: org.xml.sax.ContentHandler;

        $r2 := @parameter1: org.xml.sax.ext.LexicalHandler;

        specialinvoke r0.<org.dom4j.io.SAXWriter: void <init>()>();

        r0.<org.dom4j.io.SAXWriter: org.xml.sax.ContentHandler contentHandler> = $r1;

        r0.<org.dom4j.io.SAXWriter: org.xml.sax.ext.LexicalHandler lexicalHandler> = $r2;

        return;
    }

    public void <init>(org.xml.sax.ContentHandler, org.xml.sax.ext.LexicalHandler, org.xml.sax.EntityResolver)
    {
        org.xml.sax.ext.LexicalHandler $r2;
        org.dom4j.io.SAXWriter r0;
        org.xml.sax.ContentHandler $r1;
        org.xml.sax.EntityResolver $r3;

        r0 := @this: org.dom4j.io.SAXWriter;

        $r1 := @parameter0: org.xml.sax.ContentHandler;

        $r2 := @parameter1: org.xml.sax.ext.LexicalHandler;

        $r3 := @parameter2: org.xml.sax.EntityResolver;

        specialinvoke r0.<org.dom4j.io.SAXWriter: void <init>()>();

        r0.<org.dom4j.io.SAXWriter: org.xml.sax.ContentHandler contentHandler> = $r1;

        r0.<org.dom4j.io.SAXWriter: org.xml.sax.ext.LexicalHandler lexicalHandler> = $r2;

        r0.<org.dom4j.io.SAXWriter: org.xml.sax.EntityResolver entityResolver> = $r3;

        return;
    }

    protected org.xml.sax.helpers.AttributesImpl addNamespaceAttribute(org.xml.sax.helpers.AttributesImpl, org.dom4j.Namespace)
    {
        org.xml.sax.helpers.AttributesImpl r2;
        org.dom4j.Namespace $r1;
        java.lang.StringBuffer $r5;
        int $i0;
        org.dom4j.io.SAXWriter r0;
        java.lang.String $r3, r4, $r6;
        boolean $z0;

        r0 := @this: org.dom4j.io.SAXWriter;

        r2 := @parameter0: org.xml.sax.helpers.AttributesImpl;

        $r1 := @parameter1: org.dom4j.Namespace;

        $z0 = r0.<org.dom4j.io.SAXWriter: boolean declareNamespaceAttributes>;

        if $z0 == 0 goto label3;

        if r2 != null goto label1;

        r2 = new org.xml.sax.helpers.AttributesImpl;

        specialinvoke r2.<org.xml.sax.helpers.AttributesImpl: void <init>()>();

     label1:
        $r3 = virtualinvoke $r1.<org.dom4j.Namespace: java.lang.String getPrefix()>();

        r4 = "xmlns";

        if $r3 == null goto label2;

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i0 <= 0 goto label2;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("xmlns:");

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        r4 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

     label2:
        $r6 = virtualinvoke $r1.<org.dom4j.Namespace: java.lang.String getURI()>();

        virtualinvoke r2.<org.xml.sax.helpers.AttributesImpl: void addAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("", $r3, r4, "CDATA", $r6);

     label3:
        return r2;
    }

    protected void checkForNullHandlers()
    {
        org.dom4j.io.SAXWriter r0;

        r0 := @this: org.dom4j.io.SAXWriter;

        return;
    }

    protected org.xml.sax.Attributes createAttributes(org.dom4j.Element, org.xml.sax.Attributes) throws org.xml.sax.SAXException
    {
        org.xml.sax.helpers.AttributesImpl $r3;
        java.util.Iterator $r4;
        org.xml.sax.Attributes $r2;
        org.dom4j.io.SAXWriter r0;
        org.dom4j.Element $r1;
        java.lang.Object $r5;
        java.lang.String $r7, $r8, $r9, $r10;
        org.dom4j.Attribute r6;
        boolean $z0;

        r0 := @this: org.dom4j.io.SAXWriter;

        $r1 := @parameter0: org.dom4j.Element;

        $r2 := @parameter1: org.xml.sax.Attributes;

        $r3 = r0.<org.dom4j.io.SAXWriter: org.xml.sax.helpers.AttributesImpl attributes>;

        virtualinvoke $r3.<org.xml.sax.helpers.AttributesImpl: void clear()>();

        if $r2 == null goto label1;

        $r3 = r0.<org.dom4j.io.SAXWriter: org.xml.sax.helpers.AttributesImpl attributes>;

        virtualinvoke $r3.<org.xml.sax.helpers.AttributesImpl: void setAttributes(org.xml.sax.Attributes)>($r2);

     label1:
        $r4 = interfaceinvoke $r1.<org.dom4j.Element: java.util.Iterator attributeIterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.dom4j.Attribute) $r5;

        $r3 = r0.<org.dom4j.io.SAXWriter: org.xml.sax.helpers.AttributesImpl attributes>;

        $r7 = interfaceinvoke r6.<org.dom4j.Attribute: java.lang.String getNamespaceURI()>();

        $r8 = interfaceinvoke r6.<org.dom4j.Attribute: java.lang.String getName()>();

        $r9 = interfaceinvoke r6.<org.dom4j.Attribute: java.lang.String getQualifiedName()>();

        $r10 = interfaceinvoke r6.<org.dom4j.Attribute: java.lang.String getValue()>();

        virtualinvoke $r3.<org.xml.sax.helpers.AttributesImpl: void addAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r7, $r8, $r9, "CDATA", $r10);

        goto label2;

     label3:
        $r3 = r0.<org.dom4j.io.SAXWriter: org.xml.sax.helpers.AttributesImpl attributes>;

        return $r3;
    }

    protected void documentLocator(org.dom4j.Document) throws org.xml.sax.SAXException
    {
        org.dom4j.Document $r1;
        org.xml.sax.helpers.LocatorImpl r2, $r7;
        org.dom4j.DocumentType $r5;
        org.dom4j.io.SAXWriter r0;
        java.lang.String r3, r4;
        org.xml.sax.ContentHandler $r6;

        r0 := @this: org.dom4j.io.SAXWriter;

        $r1 := @parameter0: org.dom4j.Document;

        $r7 = new org.xml.sax.helpers.LocatorImpl;

        r2 = $r7;

        specialinvoke $r7.<org.xml.sax.helpers.LocatorImpl: void <init>()>();

        r3 = null;

        r4 = null;

        $r5 = interfaceinvoke $r1.<org.dom4j.Document: org.dom4j.DocumentType getDocType()>();

        if $r5 == null goto label1;

        r3 = interfaceinvoke $r5.<org.dom4j.DocumentType: java.lang.String getPublicID()>();

        r4 = interfaceinvoke $r5.<org.dom4j.DocumentType: java.lang.String getSystemID()>();

     label1:
        if r3 == null goto label2;

        virtualinvoke r2.<org.xml.sax.helpers.LocatorImpl: void setPublicId(java.lang.String)>(r3);

     label2:
        if r4 == null goto label3;

        virtualinvoke r2.<org.xml.sax.helpers.LocatorImpl: void setSystemId(java.lang.String)>(r4);

     label3:
        virtualinvoke r2.<org.xml.sax.helpers.LocatorImpl: void setLineNumber(int)>(-1);

        virtualinvoke r2.<org.xml.sax.helpers.LocatorImpl: void setColumnNumber(int)>(-1);

        $r6 = r0.<org.dom4j.io.SAXWriter: org.xml.sax.ContentHandler contentHandler>;

        interfaceinvoke $r6.<org.xml.sax.ContentHandler: void setDocumentLocator(org.xml.sax.Locator)>(r2);

        return;
    }

    protected void dtdHandler(org.dom4j.Document) throws org.xml.sax.SAXException
    {
        org.dom4j.io.SAXWriter r0;
        org.dom4j.Document $r1;

        r0 := @this: org.dom4j.io.SAXWriter;

        $r1 := @parameter0: org.dom4j.Document;

        return;
    }

    protected void endDocument() throws org.xml.sax.SAXException
    {
        org.dom4j.io.SAXWriter r0;
        org.xml.sax.ContentHandler $r1;

        r0 := @this: org.dom4j.io.SAXWriter;

        $r1 = r0.<org.dom4j.io.SAXWriter: org.xml.sax.ContentHandler contentHandler>;

        interfaceinvoke $r1.<org.xml.sax.ContentHandler: void endDocument()>();

        return;
    }

    protected void endElement(org.dom4j.Element) throws org.xml.sax.SAXException
    {
        org.dom4j.io.SAXWriter r0;
        org.dom4j.Element $r1;
        org.xml.sax.ContentHandler $r2;
        java.lang.String $r3, $r4, $r5;

        r0 := @this: org.dom4j.io.SAXWriter;

        $r1 := @parameter0: org.dom4j.Element;

        $r2 = r0.<org.dom4j.io.SAXWriter: org.xml.sax.ContentHandler contentHandler>;

        $r3 = interfaceinvoke $r1.<org.dom4j.Element: java.lang.String getNamespaceURI()>();

        $r4 = interfaceinvoke $r1.<org.dom4j.Element: java.lang.String getName()>();

        $r5 = interfaceinvoke $r1.<org.dom4j.Element: java.lang.String getQualifiedName()>();

        interfaceinvoke $r2.<org.xml.sax.ContentHandler: void endElement(java.lang.String,java.lang.String,java.lang.String)>($r3, $r4, $r5);

        return;
    }

    protected void endPrefixMapping(org.dom4j.tree.NamespaceStack, int) throws org.xml.sax.SAXException
    {
        org.dom4j.tree.NamespaceStack $r1;
        org.dom4j.Namespace $r2;
        int $i0, $i1;
        org.dom4j.io.SAXWriter r0;
        org.xml.sax.ContentHandler $r3;
        java.lang.String $r4;

        r0 := @this: org.dom4j.io.SAXWriter;

        $r1 := @parameter0: org.dom4j.tree.NamespaceStack;

        $i0 := @parameter1: int;

     label1:
        $i1 = virtualinvoke $r1.<org.dom4j.tree.NamespaceStack: int size()>();

        if $i1 <= $i0 goto label2;

        $r2 = virtualinvoke $r1.<org.dom4j.tree.NamespaceStack: org.dom4j.Namespace pop()>();

        if $r2 == null goto label1;

        $r3 = r0.<org.dom4j.io.SAXWriter: org.xml.sax.ContentHandler contentHandler>;

        $r4 = virtualinvoke $r2.<org.dom4j.Namespace: java.lang.String getPrefix()>();

        interfaceinvoke $r3.<org.xml.sax.ContentHandler: void endPrefixMapping(java.lang.String)>($r4);

        goto label1;

     label2:
        return;
    }

    protected void entityResolver(org.dom4j.Document) throws org.xml.sax.SAXException
    {
        java.lang.Throwable r2;
        org.dom4j.Document $r1;
        java.lang.Exception $r10;
        org.dom4j.DocumentType $r4;
        java.lang.StringBuffer $r7, $r8;
        org.xml.sax.SAXException $r9;
        org.dom4j.io.SAXWriter r0;
        java.lang.String $r5, $r6;
        org.xml.sax.EntityResolver $r3;

        r0 := @this: org.dom4j.io.SAXWriter;

        $r1 := @parameter0: org.dom4j.Document;

        $r3 = r0.<org.dom4j.io.SAXWriter: org.xml.sax.EntityResolver entityResolver>;

        if $r3 == null goto label5;

        $r4 = interfaceinvoke $r1.<org.dom4j.Document: org.dom4j.DocumentType getDocType()>();

        if $r4 == null goto label5;

        $r5 = interfaceinvoke $r4.<org.dom4j.DocumentType: java.lang.String getPublicID()>();

        $r6 = interfaceinvoke $r4.<org.dom4j.DocumentType: java.lang.String getSystemID()>();

        if $r5 != null goto label1;

        if $r6 == null goto label5;

     label1:
        $r3 = r0.<org.dom4j.io.SAXWriter: org.xml.sax.EntityResolver entityResolver>;

     label2:
        interfaceinvoke $r3.<org.xml.sax.EntityResolver: org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String)>($r5, $r6);

     label3:
        return;

     label4:
        r2 := @caughtexception;

        $r9 = new org.xml.sax.SAXException;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not resolve publicID: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" systemID: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r5 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        $r10 = (java.lang.Exception) r2;

        specialinvoke $r9.<org.xml.sax.SAXException: void <init>(java.lang.String,java.lang.Exception)>($r5, $r10);

        throw $r9;

     label5:
        return;

        catch java.io.IOException from label2 to label3 with label4;
    }

    public org.xml.sax.ContentHandler getContentHandler()
    {
        org.dom4j.io.SAXWriter r0;
        org.xml.sax.ContentHandler r1;

        r0 := @this: org.dom4j.io.SAXWriter;

        r1 = r0.<org.dom4j.io.SAXWriter: org.xml.sax.ContentHandler contentHandler>;

        return r1;
    }

    public org.xml.sax.DTDHandler getDTDHandler()
    {
        org.dom4j.io.SAXWriter r0;
        org.xml.sax.DTDHandler r1;

        r0 := @this: org.dom4j.io.SAXWriter;

        r1 = r0.<org.dom4j.io.SAXWriter: org.xml.sax.DTDHandler dtdHandler>;

        return r1;
    }

    public org.xml.sax.EntityResolver getEntityResolver()
    {
        org.dom4j.io.SAXWriter r0;
        org.xml.sax.EntityResolver r1;

        r0 := @this: org.dom4j.io.SAXWriter;

        r1 = r0.<org.dom4j.io.SAXWriter: org.xml.sax.EntityResolver entityResolver>;

        return r1;
    }

    public org.xml.sax.ErrorHandler getErrorHandler()
    {
        org.dom4j.io.SAXWriter r0;
        org.xml.sax.ErrorHandler r1;

        r0 := @this: org.dom4j.io.SAXWriter;

        r1 = r0.<org.dom4j.io.SAXWriter: org.xml.sax.ErrorHandler errorHandler>;

        return r1;
    }

    public boolean getFeature(java.lang.String) throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
    {
        java.util.Map $r2;
        org.dom4j.io.SAXWriter r0;
        java.lang.Boolean r4;
        java.lang.Object $r3;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: org.dom4j.io.SAXWriter;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.dom4j.io.SAXWriter: java.util.Map features>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r4 = (java.lang.Boolean) $r3;

        if r4 == null goto label1;

        $z0 = virtualinvoke r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public org.xml.sax.ext.LexicalHandler getLexicalHandler()
    {
        org.xml.sax.ext.LexicalHandler r1;
        org.dom4j.io.SAXWriter r0;

        r0 := @this: org.dom4j.io.SAXWriter;

        r1 = r0.<org.dom4j.io.SAXWriter: org.xml.sax.ext.LexicalHandler lexicalHandler>;

        return r1;
    }

    public java.lang.Object getProperty(java.lang.String) throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
    {
        java.lang.String[] $r2;
        org.xml.sax.ext.LexicalHandler $r4;
        java.util.Map $r5;
        int i0, $i1;
        org.dom4j.io.SAXWriter r0;
        java.lang.Object $r6;
        java.lang.String $r1, $r3;
        boolean $z0;

        r0 := @this: org.dom4j.io.SAXWriter;

        $r1 := @parameter0: java.lang.String;

        i0 = 0;

     label1:
        $r2 = <org.dom4j.io.SAXWriter: java.lang.String[] LEXICAL_HANDLER_NAMES>;

        $i1 = lengthof $r2;

        if i0 >= $i1 goto label3;

        $r2 = <org.dom4j.io.SAXWriter: java.lang.String[] LEXICAL_HANDLER_NAMES>;

        $r3 = $r2[i0];

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        $r4 = virtualinvoke r0.<org.dom4j.io.SAXWriter: org.xml.sax.ext.LexicalHandler getLexicalHandler()>();

        return $r4;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        $r5 = r0.<org.dom4j.io.SAXWriter: java.util.Map properties>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        return $r6;
    }

    public boolean isDeclareNamespaceAttributes()
    {
        org.dom4j.io.SAXWriter r0;
        boolean z0;

        r0 := @this: org.dom4j.io.SAXWriter;

        z0 = r0.<org.dom4j.io.SAXWriter: boolean declareNamespaceAttributes>;

        return z0;
    }

    protected boolean isIgnoreableNamespace(org.dom4j.Namespace, org.dom4j.tree.NamespaceStack)
    {
        org.dom4j.tree.NamespaceStack $r2;
        org.dom4j.Namespace $r1, $r3;
        int $i0;
        org.dom4j.io.SAXWriter r0;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: org.dom4j.io.SAXWriter;

        $r1 := @parameter0: org.dom4j.Namespace;

        $r2 := @parameter1: org.dom4j.tree.NamespaceStack;

        $r3 = <org.dom4j.Namespace: org.dom4j.Namespace NO_NAMESPACE>;

        $z0 = virtualinvoke $r1.<org.dom4j.Namespace: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label2;

        $r3 = <org.dom4j.Namespace: org.dom4j.Namespace XML_NAMESPACE>;

        $z0 = virtualinvoke $r1.<org.dom4j.Namespace: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r4 = virtualinvoke $r1.<org.dom4j.Namespace: java.lang.String getURI()>();

        if $r4 == null goto label2;

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i0 <= 0 goto label2;

        $z0 = virtualinvoke $r2.<org.dom4j.tree.NamespaceStack: boolean contains(org.dom4j.Namespace)>($r1);

        return $z0;

     label2:
        return 1;
    }

    public void parse(java.lang.String) throws org.xml.sax.SAXNotSupportedException
    {
        org.dom4j.io.SAXWriter r0;
        org.xml.sax.SAXNotSupportedException $r2;
        java.lang.String $r1;

        r0 := @this: org.dom4j.io.SAXWriter;

        $r1 := @parameter0: java.lang.String;

        $r2 = new org.xml.sax.SAXNotSupportedException;

        specialinvoke $r2.<org.xml.sax.SAXNotSupportedException: void <init>(java.lang.String)>("This XMLReader can only accept <dom4j> InputSource objects");

        throw $r2;
    }

    public void parse(org.xml.sax.InputSource) throws org.xml.sax.SAXException
    {
        org.xml.sax.InputSource $r1;
        org.dom4j.Document $r2;
        org.xml.sax.SAXNotSupportedException $r4;
        org.dom4j.io.SAXWriter r0;
        org.dom4j.io.DocumentInputSource r3;
        boolean $z0;

        r0 := @this: org.dom4j.io.SAXWriter;

        $r1 := @parameter0: org.xml.sax.InputSource;

        $z0 = $r1 instanceof org.dom4j.io.DocumentInputSource;

        if $z0 == 0 goto label1;

        r3 = (org.dom4j.io.DocumentInputSource) $r1;

        $r2 = virtualinvoke r3.<org.dom4j.io.DocumentInputSource: org.dom4j.Document getDocument()>();

        virtualinvoke r0.<org.dom4j.io.SAXWriter: void write(org.dom4j.Document)>($r2);

        return;

     label1:
        $r4 = new org.xml.sax.SAXNotSupportedException;

        specialinvoke $r4.<org.xml.sax.SAXNotSupportedException: void <init>(java.lang.String)>("This XMLReader can only accept <dom4j> InputSource objects");

        throw $r4;
    }

    public void setContentHandler(org.xml.sax.ContentHandler)
    {
        org.dom4j.io.SAXWriter r0;
        org.xml.sax.ContentHandler $r1;

        r0 := @this: org.dom4j.io.SAXWriter;

        $r1 := @parameter0: org.xml.sax.ContentHandler;

        r0.<org.dom4j.io.SAXWriter: org.xml.sax.ContentHandler contentHandler> = $r1;

        return;
    }

    public void setDTDHandler(org.xml.sax.DTDHandler)
    {
        org.dom4j.io.SAXWriter r0;
        org.xml.sax.DTDHandler $r1;

        r0 := @this: org.dom4j.io.SAXWriter;

        $r1 := @parameter0: org.xml.sax.DTDHandler;

        r0.<org.dom4j.io.SAXWriter: org.xml.sax.DTDHandler dtdHandler> = $r1;

        return;
    }

    public void setDeclareNamespaceAttributes(boolean)
    {
        org.dom4j.io.SAXWriter r0;
        boolean $z0;

        r0 := @this: org.dom4j.io.SAXWriter;

        $z0 := @parameter0: boolean;

        r0.<org.dom4j.io.SAXWriter: boolean declareNamespaceAttributes> = $z0;

        return;
    }

    public void setEntityResolver(org.xml.sax.EntityResolver)
    {
        org.dom4j.io.SAXWriter r0;
        org.xml.sax.EntityResolver $r1;

        r0 := @this: org.dom4j.io.SAXWriter;

        $r1 := @parameter0: org.xml.sax.EntityResolver;

        r0.<org.dom4j.io.SAXWriter: org.xml.sax.EntityResolver entityResolver> = $r1;

        return;
    }

    public void setErrorHandler(org.xml.sax.ErrorHandler)
    {
        org.dom4j.io.SAXWriter r0;
        org.xml.sax.ErrorHandler $r1;

        r0 := @this: org.dom4j.io.SAXWriter;

        $r1 := @parameter0: org.xml.sax.ErrorHandler;

        r0.<org.dom4j.io.SAXWriter: org.xml.sax.ErrorHandler errorHandler> = $r1;

        return;
    }

    public void setFeature(java.lang.String, boolean) throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
    {
        org.xml.sax.SAXNotSupportedException $r5;
        java.util.Map $r2;
        org.dom4j.io.SAXWriter r0;
        java.lang.Boolean $r4;
        java.lang.String $r1, $r3;
        boolean $z0, $z1;

        r0 := @this: org.dom4j.io.SAXWriter;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $r3 = "http://xml.org/sax/features/namespace-prefixes";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z1 == 0 goto label3;

        virtualinvoke r0.<org.dom4j.io.SAXWriter: void setDeclareNamespaceAttributes(boolean)>($z0);

     label1:
        $r2 = r0.<org.dom4j.io.SAXWriter: java.util.Map features>;

        if $z0 == 0 goto label4;

        $r4 = <java.lang.Boolean: java.lang.Boolean TRUE>;

     label2:
        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r4);

        return;

     label3:
        $r3 = "http://xml.org/sax/features/namespace-prefixes";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z1 == 0 goto label1;

        if $z0 != 0 goto label1;

        $r5 = new org.xml.sax.SAXNotSupportedException;

        specialinvoke $r5.<org.xml.sax.SAXNotSupportedException: void <init>(java.lang.String)>("Namespace feature is always supported in dom4j");

        throw $r5;

     label4:
        $r4 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        goto label2;
    }

    public void setLexicalHandler(org.xml.sax.ext.LexicalHandler)
    {
        org.xml.sax.ext.LexicalHandler $r1;
        org.dom4j.io.SAXWriter r0;

        r0 := @this: org.dom4j.io.SAXWriter;

        $r1 := @parameter0: org.xml.sax.ext.LexicalHandler;

        r0.<org.dom4j.io.SAXWriter: org.xml.sax.ext.LexicalHandler lexicalHandler> = $r1;

        return;
    }

    public void setProperty(java.lang.String, java.lang.Object)
    {
        java.lang.String[] $r3;
        org.xml.sax.ext.LexicalHandler r5;
        java.util.Map $r6;
        int i0, $i1;
        org.dom4j.io.SAXWriter r0;
        java.lang.Object r2;
        java.lang.String $r1, $r4;
        boolean $z0;

        r0 := @this: org.dom4j.io.SAXWriter;

        $r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        i0 = 0;

     label1:
        $r3 = <org.dom4j.io.SAXWriter: java.lang.String[] LEXICAL_HANDLER_NAMES>;

        $i1 = lengthof $r3;

        if i0 >= $i1 goto label3;

        $r3 = <org.dom4j.io.SAXWriter: java.lang.String[] LEXICAL_HANDLER_NAMES>;

        $r4 = $r3[i0];

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        r5 = (org.xml.sax.ext.LexicalHandler) r2;

        virtualinvoke r0.<org.dom4j.io.SAXWriter: void setLexicalHandler(org.xml.sax.ext.LexicalHandler)>(r5);

        return;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        $r6 = r0.<org.dom4j.io.SAXWriter: java.util.Map properties>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, r2);

        return;
    }

    public void setXMLReader(org.xml.sax.XMLReader)
    {
        org.xml.sax.XMLReader $r1;
        org.xml.sax.ErrorHandler $r5;
        org.xml.sax.DTDHandler $r3;
        org.dom4j.io.SAXWriter r0;
        org.xml.sax.ContentHandler $r2;
        org.xml.sax.EntityResolver $r4;

        r0 := @this: org.dom4j.io.SAXWriter;

        $r1 := @parameter0: org.xml.sax.XMLReader;

        $r2 = interfaceinvoke $r1.<org.xml.sax.XMLReader: org.xml.sax.ContentHandler getContentHandler()>();

        virtualinvoke r0.<org.dom4j.io.SAXWriter: void setContentHandler(org.xml.sax.ContentHandler)>($r2);

        $r3 = interfaceinvoke $r1.<org.xml.sax.XMLReader: org.xml.sax.DTDHandler getDTDHandler()>();

        virtualinvoke r0.<org.dom4j.io.SAXWriter: void setDTDHandler(org.xml.sax.DTDHandler)>($r3);

        $r4 = interfaceinvoke $r1.<org.xml.sax.XMLReader: org.xml.sax.EntityResolver getEntityResolver()>();

        virtualinvoke r0.<org.dom4j.io.SAXWriter: void setEntityResolver(org.xml.sax.EntityResolver)>($r4);

        $r5 = interfaceinvoke $r1.<org.xml.sax.XMLReader: org.xml.sax.ErrorHandler getErrorHandler()>();

        virtualinvoke r0.<org.dom4j.io.SAXWriter: void setErrorHandler(org.xml.sax.ErrorHandler)>($r5);

        return;
    }

    protected void startDocument() throws org.xml.sax.SAXException
    {
        org.dom4j.io.SAXWriter r0;
        org.xml.sax.ContentHandler $r1;

        r0 := @this: org.dom4j.io.SAXWriter;

        $r1 = r0.<org.dom4j.io.SAXWriter: org.xml.sax.ContentHandler contentHandler>;

        interfaceinvoke $r1.<org.xml.sax.ContentHandler: void startDocument()>();

        return;
    }

    protected void startElement(org.dom4j.Element, org.xml.sax.helpers.AttributesImpl) throws org.xml.sax.SAXException
    {
        org.xml.sax.helpers.AttributesImpl $r2;
        org.xml.sax.Attributes $r7;
        org.dom4j.io.SAXWriter r0;
        org.dom4j.Element $r1;
        org.xml.sax.ContentHandler $r3;
        java.lang.String $r4, $r5, $r6;

        r0 := @this: org.dom4j.io.SAXWriter;

        $r1 := @parameter0: org.dom4j.Element;

        $r2 := @parameter1: org.xml.sax.helpers.AttributesImpl;

        $r3 = r0.<org.dom4j.io.SAXWriter: org.xml.sax.ContentHandler contentHandler>;

        $r4 = interfaceinvoke $r1.<org.dom4j.Element: java.lang.String getNamespaceURI()>();

        $r5 = interfaceinvoke $r1.<org.dom4j.Element: java.lang.String getName()>();

        $r6 = interfaceinvoke $r1.<org.dom4j.Element: java.lang.String getQualifiedName()>();

        $r7 = virtualinvoke r0.<org.dom4j.io.SAXWriter: org.xml.sax.Attributes createAttributes(org.dom4j.Element,org.xml.sax.Attributes)>($r1, $r2);

        interfaceinvoke $r3.<org.xml.sax.ContentHandler: void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)>($r4, $r5, $r6, $r7);

        return;
    }

    protected org.xml.sax.helpers.AttributesImpl startPrefixMapping(org.dom4j.Element, org.dom4j.tree.NamespaceStack) throws org.xml.sax.SAXException
    {
        org.xml.sax.helpers.AttributesImpl r3;
        org.dom4j.Namespace $r4;
        org.dom4j.tree.NamespaceStack $r2;
        java.util.List $r8;
        int i0, $i1;
        org.dom4j.io.SAXWriter r0;
        org.dom4j.Element $r1;
        java.lang.Object $r9;
        org.xml.sax.ContentHandler $r5;
        java.lang.String $r6, $r7;
        boolean $z0;

        r0 := @this: org.dom4j.io.SAXWriter;

        $r1 := @parameter0: org.dom4j.Element;

        $r2 := @parameter1: org.dom4j.tree.NamespaceStack;

        r3 = null;

        $r4 = interfaceinvoke $r1.<org.dom4j.Element: org.dom4j.Namespace getNamespace()>();

        if $r4 == null goto label1;

        $z0 = virtualinvoke r0.<org.dom4j.io.SAXWriter: boolean isIgnoreableNamespace(org.dom4j.Namespace,org.dom4j.tree.NamespaceStack)>($r4, $r2);

        if $z0 != 0 goto label1;

        virtualinvoke $r2.<org.dom4j.tree.NamespaceStack: void push(org.dom4j.Namespace)>($r4);

        $r5 = r0.<org.dom4j.io.SAXWriter: org.xml.sax.ContentHandler contentHandler>;

        $r6 = virtualinvoke $r4.<org.dom4j.Namespace: java.lang.String getPrefix()>();

        $r7 = virtualinvoke $r4.<org.dom4j.Namespace: java.lang.String getURI()>();

        interfaceinvoke $r5.<org.xml.sax.ContentHandler: void startPrefixMapping(java.lang.String,java.lang.String)>($r6, $r7);

        r3 = virtualinvoke r0.<org.dom4j.io.SAXWriter: org.xml.sax.helpers.AttributesImpl addNamespaceAttribute(org.xml.sax.helpers.AttributesImpl,org.dom4j.Namespace)>(null, $r4);

     label1:
        $r8 = interfaceinvoke $r1.<org.dom4j.Element: java.util.List declaredNamespaces()>();

        i0 = 0;

        $i1 = interfaceinvoke $r8.<java.util.List: int size()>();

     label2:
        if i0 >= $i1 goto label4;

        $r9 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(i0);

        $r4 = (org.dom4j.Namespace) $r9;

        $z0 = virtualinvoke r0.<org.dom4j.io.SAXWriter: boolean isIgnoreableNamespace(org.dom4j.Namespace,org.dom4j.tree.NamespaceStack)>($r4, $r2);

        if $z0 != 0 goto label3;

        virtualinvoke $r2.<org.dom4j.tree.NamespaceStack: void push(org.dom4j.Namespace)>($r4);

        $r5 = r0.<org.dom4j.io.SAXWriter: org.xml.sax.ContentHandler contentHandler>;

        $r6 = virtualinvoke $r4.<org.dom4j.Namespace: java.lang.String getPrefix()>();

        $r7 = virtualinvoke $r4.<org.dom4j.Namespace: java.lang.String getURI()>();

        interfaceinvoke $r5.<org.xml.sax.ContentHandler: void startPrefixMapping(java.lang.String,java.lang.String)>($r6, $r7);

        r3 = virtualinvoke r0.<org.dom4j.io.SAXWriter: org.xml.sax.helpers.AttributesImpl addNamespaceAttribute(org.xml.sax.helpers.AttributesImpl,org.dom4j.Namespace)>(r3, $r4);

     label3:
        i0 = i0 + 1;

        goto label2;

     label4:
        return r3;
    }

    public void write(java.lang.String) throws org.xml.sax.SAXException
    {
        int $i0;
        org.dom4j.io.SAXWriter r0;
        char[] $r3;
        java.lang.String $r1;
        org.xml.sax.ContentHandler $r2;

        r0 := @this: org.dom4j.io.SAXWriter;

        $r1 := @parameter0: java.lang.String;

        if $r1 == null goto label1;

        $r3 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>();

        $r2 = r0.<org.dom4j.io.SAXWriter: org.xml.sax.ContentHandler contentHandler>;

        $i0 = lengthof $r3;

        interfaceinvoke $r2.<org.xml.sax.ContentHandler: void characters(char[],int,int)>($r3, 0, $i0);

     label1:
        return;
    }

    public void write(org.dom4j.CDATA) throws org.xml.sax.SAXException
    {
        org.xml.sax.ext.LexicalHandler $r3;
        org.dom4j.CDATA $r1;
        org.dom4j.io.SAXWriter r0;
        java.lang.String $r2;

        r0 := @this: org.dom4j.io.SAXWriter;

        $r1 := @parameter0: org.dom4j.CDATA;

        $r2 = interfaceinvoke $r1.<org.dom4j.CDATA: java.lang.String getText()>();

        $r3 = r0.<org.dom4j.io.SAXWriter: org.xml.sax.ext.LexicalHandler lexicalHandler>;

        if $r3 == null goto label1;

        $r3 = r0.<org.dom4j.io.SAXWriter: org.xml.sax.ext.LexicalHandler lexicalHandler>;

        interfaceinvoke $r3.<org.xml.sax.ext.LexicalHandler: void startCDATA()>();

        virtualinvoke r0.<org.dom4j.io.SAXWriter: void write(java.lang.String)>($r2);

        $r3 = r0.<org.dom4j.io.SAXWriter: org.xml.sax.ext.LexicalHandler lexicalHandler>;

        interfaceinvoke $r3.<org.xml.sax.ext.LexicalHandler: void endCDATA()>();

        return;

     label1:
        virtualinvoke r0.<org.dom4j.io.SAXWriter: void write(java.lang.String)>($r2);

        return;
    }

    public void write(org.dom4j.Comment) throws org.xml.sax.SAXException
    {
        org.xml.sax.ext.LexicalHandler $r2;
        org.dom4j.Comment $r1;
        int $i0;
        org.dom4j.io.SAXWriter r0;
        char[] $r4;
        java.lang.String $r3;

        r0 := @this: org.dom4j.io.SAXWriter;

        $r1 := @parameter0: org.dom4j.Comment;

        $r2 = r0.<org.dom4j.io.SAXWriter: org.xml.sax.ext.LexicalHandler lexicalHandler>;

        if $r2 == null goto label1;

        $r3 = interfaceinvoke $r1.<org.dom4j.Comment: java.lang.String getText()>();

        $r4 = virtualinvoke $r3.<java.lang.String: char[] toCharArray()>();

        $r2 = r0.<org.dom4j.io.SAXWriter: org.xml.sax.ext.LexicalHandler lexicalHandler>;

        $i0 = lengthof $r4;

        interfaceinvoke $r2.<org.xml.sax.ext.LexicalHandler: void comment(char[],int,int)>($r4, 0, $i0);

     label1:
        return;
    }

    public void write(org.dom4j.Document) throws org.xml.sax.SAXException
    {
        org.dom4j.io.SAXWriter r0;
        org.dom4j.tree.NamespaceStack $r2;
        org.dom4j.Document $r1;

        r0 := @this: org.dom4j.io.SAXWriter;

        $r1 := @parameter0: org.dom4j.Document;

        if $r1 == null goto label1;

        virtualinvoke r0.<org.dom4j.io.SAXWriter: void checkForNullHandlers()>();

        virtualinvoke r0.<org.dom4j.io.SAXWriter: void documentLocator(org.dom4j.Document)>($r1);

        virtualinvoke r0.<org.dom4j.io.SAXWriter: void startDocument()>();

        virtualinvoke r0.<org.dom4j.io.SAXWriter: void entityResolver(org.dom4j.Document)>($r1);

        virtualinvoke r0.<org.dom4j.io.SAXWriter: void dtdHandler(org.dom4j.Document)>($r1);

        $r2 = new org.dom4j.tree.NamespaceStack;

        specialinvoke $r2.<org.dom4j.tree.NamespaceStack: void <init>()>();

        virtualinvoke r0.<org.dom4j.io.SAXWriter: void writeContent(org.dom4j.Branch,org.dom4j.tree.NamespaceStack)>($r1, $r2);

        virtualinvoke r0.<org.dom4j.io.SAXWriter: void endDocument()>();

     label1:
        return;
    }

    public void write(org.dom4j.Element) throws org.xml.sax.SAXException
    {
        org.dom4j.io.SAXWriter r0;
        org.dom4j.tree.NamespaceStack $r2;
        org.dom4j.Element $r1;

        r0 := @this: org.dom4j.io.SAXWriter;

        $r1 := @parameter0: org.dom4j.Element;

        $r2 = new org.dom4j.tree.NamespaceStack;

        specialinvoke $r2.<org.dom4j.tree.NamespaceStack: void <init>()>();

        virtualinvoke r0.<org.dom4j.io.SAXWriter: void write(org.dom4j.Element,org.dom4j.tree.NamespaceStack)>($r1, $r2);

        return;
    }

    protected void write(org.dom4j.Element, org.dom4j.tree.NamespaceStack) throws org.xml.sax.SAXException
    {
        org.xml.sax.helpers.AttributesImpl $r3;
        org.dom4j.tree.NamespaceStack $r2;
        int $i0;
        org.dom4j.io.SAXWriter r0;
        org.dom4j.Element $r1;

        r0 := @this: org.dom4j.io.SAXWriter;

        $r1 := @parameter0: org.dom4j.Element;

        $r2 := @parameter1: org.dom4j.tree.NamespaceStack;

        $i0 = virtualinvoke $r2.<org.dom4j.tree.NamespaceStack: int size()>();

        $r3 = virtualinvoke r0.<org.dom4j.io.SAXWriter: org.xml.sax.helpers.AttributesImpl startPrefixMapping(org.dom4j.Element,org.dom4j.tree.NamespaceStack)>($r1, $r2);

        virtualinvoke r0.<org.dom4j.io.SAXWriter: void startElement(org.dom4j.Element,org.xml.sax.helpers.AttributesImpl)>($r1, $r3);

        virtualinvoke r0.<org.dom4j.io.SAXWriter: void writeContent(org.dom4j.Branch,org.dom4j.tree.NamespaceStack)>($r1, $r2);

        virtualinvoke r0.<org.dom4j.io.SAXWriter: void endElement(org.dom4j.Element)>($r1);

        virtualinvoke r0.<org.dom4j.io.SAXWriter: void endPrefixMapping(org.dom4j.tree.NamespaceStack,int)>($r2, $i0);

        return;
    }

    public void write(org.dom4j.Entity) throws org.xml.sax.SAXException
    {
        org.dom4j.Entity $r1;
        org.xml.sax.ext.LexicalHandler $r3;
        org.dom4j.io.SAXWriter r0;
        java.lang.String $r2, $r4;

        r0 := @this: org.dom4j.io.SAXWriter;

        $r1 := @parameter0: org.dom4j.Entity;

        $r2 = interfaceinvoke $r1.<org.dom4j.Entity: java.lang.String getText()>();

        $r3 = r0.<org.dom4j.io.SAXWriter: org.xml.sax.ext.LexicalHandler lexicalHandler>;

        if $r3 == null goto label1;

        $r4 = interfaceinvoke $r1.<org.dom4j.Entity: java.lang.String getName()>();

        $r3 = r0.<org.dom4j.io.SAXWriter: org.xml.sax.ext.LexicalHandler lexicalHandler>;

        interfaceinvoke $r3.<org.xml.sax.ext.LexicalHandler: void startEntity(java.lang.String)>($r4);

        virtualinvoke r0.<org.dom4j.io.SAXWriter: void write(java.lang.String)>($r2);

        $r3 = r0.<org.dom4j.io.SAXWriter: org.xml.sax.ext.LexicalHandler lexicalHandler>;

        interfaceinvoke $r3.<org.xml.sax.ext.LexicalHandler: void endEntity(java.lang.String)>($r4);

        return;

     label1:
        virtualinvoke r0.<org.dom4j.io.SAXWriter: void write(java.lang.String)>($r2);

        return;
    }

    public void write(org.dom4j.Node) throws org.xml.sax.SAXException
    {
        org.dom4j.Document r10;
        org.dom4j.Node r1;
        org.dom4j.Entity r7;
        short $s0;
        org.dom4j.DocumentType r11;
        java.lang.StringBuffer $r2, $r12;
        org.dom4j.CDATA r6;
        org.dom4j.Comment r9;
        int $i1;
        java.lang.String $r3;
        org.dom4j.ProcessingInstruction r8;
        org.xml.sax.SAXException $r13;
        org.dom4j.io.SAXWriter r0;
        org.dom4j.Element r4;
        org.dom4j.Attribute r5;

        r0 := @this: org.dom4j.io.SAXWriter;

        r1 := @parameter0: org.dom4j.Node;

        $s0 = interfaceinvoke r1.<org.dom4j.Node: short getNodeType()>();

        $i1 = (int) $s0;

        lookupswitch($i1)
        {
            case 1: goto label02;
            case 2: goto label04;
            case 3: goto label05;
            case 4: goto label06;
            case 5: goto label07;
            case 6: goto label01;
            case 7: goto label08;
            case 8: goto label09;
            case 9: goto label10;
            case 10: goto label11;
            case 11: goto label01;
            case 12: goto label01;
            case 13: goto label03;
            default: goto label01;
        };

     label01:
        $r13 = new org.xml.sax.SAXException;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid node type: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r13.<org.xml.sax.SAXException: void <init>(java.lang.String)>($r3);

        throw $r13;

     label02:
        r4 = (org.dom4j.Element) r1;

        virtualinvoke r0.<org.dom4j.io.SAXWriter: void write(org.dom4j.Element)>(r4);

     label03:
        return;

     label04:
        r5 = (org.dom4j.Attribute) r1;

        virtualinvoke r0.<org.dom4j.io.SAXWriter: void write(org.dom4j.Node)>(r5);

        return;

     label05:
        $r3 = interfaceinvoke r1.<org.dom4j.Node: java.lang.String getText()>();

        virtualinvoke r0.<org.dom4j.io.SAXWriter: void write(java.lang.String)>($r3);

        return;

     label06:
        r6 = (org.dom4j.CDATA) r1;

        virtualinvoke r0.<org.dom4j.io.SAXWriter: void write(org.dom4j.CDATA)>(r6);

        return;

     label07:
        r7 = (org.dom4j.Entity) r1;

        virtualinvoke r0.<org.dom4j.io.SAXWriter: void write(org.dom4j.Entity)>(r7);

        return;

     label08:
        r8 = (org.dom4j.ProcessingInstruction) r1;

        virtualinvoke r0.<org.dom4j.io.SAXWriter: void write(org.dom4j.ProcessingInstruction)>(r8);

        return;

     label09:
        r9 = (org.dom4j.Comment) r1;

        virtualinvoke r0.<org.dom4j.io.SAXWriter: void write(org.dom4j.Comment)>(r9);

        return;

     label10:
        r10 = (org.dom4j.Document) r1;

        virtualinvoke r0.<org.dom4j.io.SAXWriter: void write(org.dom4j.Document)>(r10);

        return;

     label11:
        r11 = (org.dom4j.DocumentType) r1;

        virtualinvoke r0.<org.dom4j.io.SAXWriter: void write(org.dom4j.Node)>(r11);

        return;
    }

    public void write(org.dom4j.ProcessingInstruction) throws org.xml.sax.SAXException
    {
        org.dom4j.io.SAXWriter r0;
        org.xml.sax.ContentHandler $r2;
        java.lang.String $r3, $r4;
        org.dom4j.ProcessingInstruction $r1;

        r0 := @this: org.dom4j.io.SAXWriter;

        $r1 := @parameter0: org.dom4j.ProcessingInstruction;

        $r3 = interfaceinvoke $r1.<org.dom4j.ProcessingInstruction: java.lang.String getTarget()>();

        $r4 = interfaceinvoke $r1.<org.dom4j.ProcessingInstruction: java.lang.String getText()>();

        $r2 = r0.<org.dom4j.io.SAXWriter: org.xml.sax.ContentHandler contentHandler>;

        interfaceinvoke $r2.<org.xml.sax.ContentHandler: void processingInstruction(java.lang.String,java.lang.String)>($r3, $r4);

        return;
    }

    public void writeClose(org.dom4j.Element) throws org.xml.sax.SAXException
    {
        org.dom4j.io.SAXWriter r0;
        org.dom4j.Element $r1;

        r0 := @this: org.dom4j.io.SAXWriter;

        $r1 := @parameter0: org.dom4j.Element;

        virtualinvoke r0.<org.dom4j.io.SAXWriter: void endElement(org.dom4j.Element)>($r1);

        return;
    }

    protected void writeContent(org.dom4j.Branch, org.dom4j.tree.NamespaceStack) throws org.xml.sax.SAXException
    {
        org.dom4j.Entity r13;
        org.dom4j.tree.NamespaceStack $r2;
        org.dom4j.CDATA r8;
        java.lang.StringBuffer $r11;
        org.dom4j.Comment r9;
        java.lang.String $r7;
        org.dom4j.ProcessingInstruction r14;
        boolean $z0;
        java.util.Iterator $r3;
        org.dom4j.Namespace r15;
        org.dom4j.Branch $r1;
        org.dom4j.Text r6;
        org.xml.sax.SAXException $r10;
        org.dom4j.io.SAXWriter r0;
        java.lang.Object $r4;
        org.dom4j.Element r5;
        java.lang.Class $r12;

        r0 := @this: org.dom4j.io.SAXWriter;

        $r1 := @parameter0: org.dom4j.Branch;

        $r2 := @parameter1: org.dom4j.tree.NamespaceStack;

        $r3 = interfaceinvoke $r1.<org.dom4j.Branch: java.util.Iterator nodeIterator()>();

     label01:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label11;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $z0 = $r4 instanceof org.dom4j.Element;

        if $z0 == 0 goto label02;

        r5 = (org.dom4j.Element) $r4;

        virtualinvoke r0.<org.dom4j.io.SAXWriter: void write(org.dom4j.Element,org.dom4j.tree.NamespaceStack)>(r5, $r2);

        goto label01;

     label02:
        $z0 = $r4 instanceof org.dom4j.CharacterData;

        if $z0 == 0 goto label06;

        $z0 = $r4 instanceof org.dom4j.Text;

        if $z0 == 0 goto label03;

        r6 = (org.dom4j.Text) $r4;

        $r7 = interfaceinvoke r6.<org.dom4j.Text: java.lang.String getText()>();

        virtualinvoke r0.<org.dom4j.io.SAXWriter: void write(java.lang.String)>($r7);

        goto label01;

     label03:
        $z0 = $r4 instanceof org.dom4j.CDATA;

        if $z0 == 0 goto label04;

        r8 = (org.dom4j.CDATA) $r4;

        virtualinvoke r0.<org.dom4j.io.SAXWriter: void write(org.dom4j.CDATA)>(r8);

        goto label01;

     label04:
        $z0 = $r4 instanceof org.dom4j.Comment;

        if $z0 == 0 goto label05;

        r9 = (org.dom4j.Comment) $r4;

        virtualinvoke r0.<org.dom4j.io.SAXWriter: void write(org.dom4j.Comment)>(r9);

        goto label01;

     label05:
        $r10 = new org.xml.sax.SAXException;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid Node in DOM4J content: ");

        $r11 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r4);

        $r11 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" of type: ");

        $r12 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r12);

        $r7 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r10.<org.xml.sax.SAXException: void <init>(java.lang.String)>($r7);

        throw $r10;

     label06:
        $z0 = $r4 instanceof java.lang.String;

        if $z0 == 0 goto label07;

        $r7 = (java.lang.String) $r4;

        virtualinvoke r0.<org.dom4j.io.SAXWriter: void write(java.lang.String)>($r7);

        goto label01;

     label07:
        $z0 = $r4 instanceof org.dom4j.Entity;

        if $z0 == 0 goto label08;

        r13 = (org.dom4j.Entity) $r4;

        virtualinvoke r0.<org.dom4j.io.SAXWriter: void write(org.dom4j.Entity)>(r13);

        goto label01;

     label08:
        $z0 = $r4 instanceof org.dom4j.ProcessingInstruction;

        if $z0 == 0 goto label09;

        r14 = (org.dom4j.ProcessingInstruction) $r4;

        virtualinvoke r0.<org.dom4j.io.SAXWriter: void write(org.dom4j.ProcessingInstruction)>(r14);

        goto label01;

     label09:
        $z0 = $r4 instanceof org.dom4j.Namespace;

        if $z0 == 0 goto label10;

        r15 = (org.dom4j.Namespace) $r4;

        virtualinvoke r0.<org.dom4j.io.SAXWriter: void write(org.dom4j.Node)>(r15);

        goto label01;

     label10:
        $r10 = new org.xml.sax.SAXException;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid Node in DOM4J content: ");

        $r11 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r4);

        $r7 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r10.<org.xml.sax.SAXException: void <init>(java.lang.String)>($r7);

        throw $r10;

     label11:
        return;
    }

    public void writeOpen(org.dom4j.Element) throws org.xml.sax.SAXException
    {
        org.dom4j.io.SAXWriter r0;
        org.dom4j.Element $r1;

        r0 := @this: org.dom4j.io.SAXWriter;

        $r1 := @parameter0: org.dom4j.Element;

        virtualinvoke r0.<org.dom4j.io.SAXWriter: void startElement(org.dom4j.Element,org.xml.sax.helpers.AttributesImpl)>($r1, null);

        return;
    }
}
