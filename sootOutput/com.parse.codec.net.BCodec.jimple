public class com.parse.codec.net.BCodec extends com.parse.codec.net.a implements com.parse.codec.StringDecoder, com.parse.codec.StringEncoder
{
    private final java.lang.String charset;

    public void <init>()
    {
        com.parse.codec.net.BCodec r0;

        r0 := @this: com.parse.codec.net.BCodec;

        specialinvoke r0.<com.parse.codec.net.BCodec: void <init>(java.lang.String)>("UTF-8");

        return;
    }

    public void <init>(java.lang.String)
    {
        java.lang.String $r1;
        com.parse.codec.net.BCodec r0;

        r0 := @this: com.parse.codec.net.BCodec;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.parse.codec.net.a: void <init>()>();

        r0.<com.parse.codec.net.BCodec: java.lang.String charset> = $r1;

        return;
    }

    public java.lang.Object decode(java.lang.Object)
    {
        java.lang.Object $r1;
        java.lang.StringBuilder $r4;
        java.lang.Class $r5;
        java.lang.String $r2;
        com.parse.codec.DecoderException $r3;
        com.parse.codec.net.BCodec r0;
        boolean $z0;

        r0 := @this: com.parse.codec.net.BCodec;

        $r1 := @parameter0: java.lang.Object;

        if $r1 != null goto label1;

        return null;

     label1:
        $z0 = $r1 instanceof java.lang.String;

        if $z0 == 0 goto label2;

        $r2 = (java.lang.String) $r1;

        $r2 = virtualinvoke r0.<com.parse.codec.net.BCodec: java.lang.String decode(java.lang.String)>($r2);

        return $r2;

     label2:
        $r3 = new com.parse.codec.DecoderException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Objects of type ");

        $r5 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot be decoded using BCodec");

        $r2 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<com.parse.codec.DecoderException: void <init>(java.lang.String)>($r2);

        throw $r3;
    }

    public java.lang.String decode(java.lang.String)
    {
        java.lang.Throwable $r2;
        java.lang.String $r1;
        com.parse.codec.DecoderException $r3;
        java.io.UnsupportedEncodingException $r4;
        com.parse.codec.net.BCodec r0;

        r0 := @this: com.parse.codec.net.BCodec;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<com.parse.codec.net.BCodec: java.lang.String decodeText(java.lang.String)>($r1);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new com.parse.codec.DecoderException;

        $r4 = (java.io.UnsupportedEncodingException) $r2;

        $r1 = virtualinvoke $r4.<java.io.UnsupportedEncodingException: java.lang.String getMessage()>();

        specialinvoke $r3.<com.parse.codec.DecoderException: void <init>(java.lang.String,java.lang.Throwable)>($r1, $r2);

        throw $r3;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    protected byte[] doDecoding(byte[])
    {
        byte[] $r1;
        com.parse.codec.net.BCodec r0;

        r0 := @this: com.parse.codec.net.BCodec;

        $r1 := @parameter0: byte[];

        if $r1 != null goto label1;

        return null;

     label1:
        $r1 = staticinvoke <com.parse.codec.binary.Base64: byte[] decodeBase64(byte[])>($r1);

        return $r1;
    }

    protected byte[] doEncoding(byte[])
    {
        byte[] $r1;
        com.parse.codec.net.BCodec r0;

        r0 := @this: com.parse.codec.net.BCodec;

        $r1 := @parameter0: byte[];

        if $r1 != null goto label1;

        return null;

     label1:
        $r1 = staticinvoke <com.parse.codec.binary.Base64: byte[] encodeBase64(byte[])>($r1);

        return $r1;
    }

    public java.lang.Object encode(java.lang.Object)
    {
        java.lang.Object $r1;
        java.lang.StringBuilder $r4;
        java.lang.Class $r5;
        java.lang.String $r2;
        com.parse.codec.EncoderException $r3;
        com.parse.codec.net.BCodec r0;
        boolean $z0;

        r0 := @this: com.parse.codec.net.BCodec;

        $r1 := @parameter0: java.lang.Object;

        if $r1 != null goto label1;

        return null;

     label1:
        $z0 = $r1 instanceof java.lang.String;

        if $z0 == 0 goto label2;

        $r2 = (java.lang.String) $r1;

        $r2 = virtualinvoke r0.<com.parse.codec.net.BCodec: java.lang.String encode(java.lang.String)>($r2);

        return $r2;

     label2:
        $r3 = new com.parse.codec.EncoderException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Objects of type ");

        $r5 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot be encoded using BCodec");

        $r2 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<com.parse.codec.EncoderException: void <init>(java.lang.String)>($r2);

        throw $r3;
    }

    public java.lang.String encode(java.lang.String)
    {
        java.lang.String $r1, $r2;
        com.parse.codec.net.BCodec r0;

        r0 := @this: com.parse.codec.net.BCodec;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r0.<com.parse.codec.net.BCodec: java.lang.String getDefaultCharset()>();

        $r1 = virtualinvoke r0.<com.parse.codec.net.BCodec: java.lang.String encode(java.lang.String,java.lang.String)>($r1, $r2);

        return $r1;
    }

    public java.lang.String encode(java.lang.String, java.lang.String)
    {
        java.lang.Throwable $r3;
        java.lang.String $r1, $r2;
        com.parse.codec.EncoderException $r4;
        java.io.UnsupportedEncodingException $r5;
        com.parse.codec.net.BCodec r0;

        r0 := @this: com.parse.codec.net.BCodec;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        if $r1 != null goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<com.parse.codec.net.BCodec: java.lang.String encodeText(java.lang.String,java.lang.String)>($r1, $r2);

     label2:
        return $r1;

     label3:
        $r3 := @caughtexception;

        $r4 = new com.parse.codec.EncoderException;

        $r5 = (java.io.UnsupportedEncodingException) $r3;

        $r1 = virtualinvoke $r5.<java.io.UnsupportedEncodingException: java.lang.String getMessage()>();

        specialinvoke $r4.<com.parse.codec.EncoderException: void <init>(java.lang.String,java.lang.Throwable)>($r1, $r3);

        throw $r4;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public java.lang.String getDefaultCharset()
    {
        java.lang.String r1;
        com.parse.codec.net.BCodec r0;

        r0 := @this: com.parse.codec.net.BCodec;

        r1 = r0.<com.parse.codec.net.BCodec: java.lang.String charset>;

        return r1;
    }

    protected java.lang.String getEncoding()
    {
        com.parse.codec.net.BCodec r0;

        r0 := @this: com.parse.codec.net.BCodec;

        return "B";
    }
}
