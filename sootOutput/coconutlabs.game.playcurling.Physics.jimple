public class coconutlabs.game.playcurling.Physics extends java.lang.Object
{
    private android.content.Context context;
    private boolean m_bAllStopped;
    private boolean m_bCollisionBig;
    private boolean m_bCollisionMedium;
    private boolean m_bCollisionSmall;
    private java.util.ArrayList m_listStones;
    private int m_nCollisionPower;
    private int m_nFGZ;
    private int m_nTotalEnergy;
    private int m_nWidth;

    public void <init>(android.content.Context)
    {
        android.content.Context $r1;
        coconutlabs.game.playcurling.Physics r0;
        java.util.ArrayList $r2;

        r0 := @this: coconutlabs.game.playcurling.Physics;

        $r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<coconutlabs.game.playcurling.Physics: boolean m_bCollisionBig> = 0;

        r0.<coconutlabs.game.playcurling.Physics: boolean m_bCollisionMedium> = 0;

        r0.<coconutlabs.game.playcurling.Physics: boolean m_bCollisionSmall> = 0;

        r0.<coconutlabs.game.playcurling.Physics: android.content.Context context> = $r1;

        $r2 = staticinvoke <coconutlabs.game.playcurling.MainView: java.util.ArrayList getStoneList()>();

        r0.<coconutlabs.game.playcurling.Physics: java.util.ArrayList m_listStones> = $r2;

        r0.<coconutlabs.game.playcurling.Physics: int m_nCollisionPower> = 0;

        return;
    }

    private boolean CheckStoneVisible(coconutlabs.game.playcurling.CCLStone)
    {
        coconutlabs.game.playcurling.Physics r0;
        coconutlabs.game.playcurling.CCLStone $r1;
        int $i0, $i1;

        r0 := @this: coconutlabs.game.playcurling.Physics;

        $r1 := @parameter0: coconutlabs.game.playcurling.CCLStone;

        $i0 = virtualinvoke $r1.<coconutlabs.game.playcurling.CCLStone: int GetBottom()>();

        if $i0 < 0 goto label1;

        $i1 = virtualinvoke $r1.<coconutlabs.game.playcurling.CCLStone: int GetLeft()>();

        $i0 = r0.<coconutlabs.game.playcurling.Physics: int m_nWidth>;

        if $i1 > $i0 goto label1;

        $i0 = virtualinvoke $r1.<coconutlabs.game.playcurling.CCLStone: int GetRight()>();

        if $i0 >= 0 goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    private int calcCollision(coconutlabs.game.playcurling.CCLStone, coconutlabs.game.playcurling.CCLStone)
    {
        byte $b2;
        int $i0, $i1;
        java.lang.String $r4;
        double $d0, $d1;
        coconutlabs.game.playcurling.Physics r0;
        coconutlabs.game.playcurling.CCLStone $r1, $r2;
        float f0, f1, f2, f3, f4, $f5, $f6, $f7, $f8, $f9;
        java.lang.StringBuilder $r3, $r5;

        r0 := @this: coconutlabs.game.playcurling.Physics;

        $r1 := @parameter0: coconutlabs.game.playcurling.CCLStone;

        $r2 := @parameter1: coconutlabs.game.playcurling.CCLStone;

        $i0 = virtualinvoke $r1.<coconutlabs.game.playcurling.CCLStone: int GetEnergy()>();

        $d0 = (double) $i0;

        $d0 = $d0 / 1000.0;

        $f5 = (float) $d0;

        $d0 = (double) $f5;

        $f5 = virtualinvoke $r1.<coconutlabs.game.playcurling.CCLStone: float GetDirection()>();

        $d1 = (double) $f5;

        $d1 = staticinvoke <java.lang.Math: double sin(double)>($d1);

        $d0 = $d0 * $d1;

        f0 = (float) $d0;

        $i0 = virtualinvoke $r1.<coconutlabs.game.playcurling.CCLStone: int GetEnergy()>();

        $d0 = (double) $i0;

        $d0 = $d0 / 1000.0;

        $f5 = (float) $d0;

        $d0 = (double) $f5;

        $f5 = virtualinvoke $r1.<coconutlabs.game.playcurling.CCLStone: float GetDirection()>();

        $d1 = (double) $f5;

        $d1 = staticinvoke <java.lang.Math: double cos(double)>($d1);

        $d0 = $d0 * $d1;

        $d0 = neg $d0;

        f1 = (float) $d0;

        $i0 = virtualinvoke $r2.<coconutlabs.game.playcurling.CCLStone: int GetEnergy()>();

        $d0 = (double) $i0;

        $d0 = $d0 / 1000.0;

        $f5 = virtualinvoke $r2.<coconutlabs.game.playcurling.CCLStone: float GetDirection()>();

        $d1 = (double) $f5;

        $d1 = staticinvoke <java.lang.Math: double sin(double)>($d1);

        $d0 = $d0 * $d1;

        f2 = (float) $d0;

        $i0 = virtualinvoke $r2.<coconutlabs.game.playcurling.CCLStone: int GetEnergy()>();

        $d0 = (double) $i0;

        $d0 = $d0 / 1000.0;

        $f5 = virtualinvoke $r2.<coconutlabs.game.playcurling.CCLStone: float GetDirection()>();

        $d1 = (double) $f5;

        $d1 = staticinvoke <java.lang.Math: double cos(double)>($d1);

        $d0 = $d0 * $d1;

        $d0 = neg $d0;

        $f6 = (float) $d0;

        $i0 = virtualinvoke $r2.<coconutlabs.game.playcurling.CCLStone: int GetPosX()>();

        $i1 = virtualinvoke $r1.<coconutlabs.game.playcurling.CCLStone: int GetPosX()>();

        $i0 = $i0 - $i1;

        $f7 = (float) $i0;

        $i0 = virtualinvoke $r2.<coconutlabs.game.playcurling.CCLStone: int GetPosY()>();

        $i1 = virtualinvoke $r1.<coconutlabs.game.playcurling.CCLStone: int GetPosY()>();

        $i0 = $i0 - $i1;

        $i0 = neg $i0;

        $f5 = (float) $i0;

        $i0 = virtualinvoke $r2.<coconutlabs.game.playcurling.CCLStone: int GetPosX()>();

        f3 = (float) $i0;

        f2 = f3 + f2;

        $i0 = virtualinvoke $r1.<coconutlabs.game.playcurling.CCLStone: int GetPosX()>();

        f3 = (float) $i0;

        f0 = f3 + f0;

        f2 = f2 - f0;

        $i0 = virtualinvoke $r2.<coconutlabs.game.playcurling.CCLStone: int GetPosY()>();

        f0 = (float) $i0;

        f0 = f0 + $f6;

        $i0 = virtualinvoke $r1.<coconutlabs.game.playcurling.CCLStone: int GetPosY()>();

        $f6 = (float) $i0;

        f1 = $f6 + f1;

        f1 = f0 - f1;

        f1 = neg f1;

        f0 = $f7 * $f7;

        $f6 = $f5 * $f5;

        f0 = f0 + $f6;

        f2 = f2 * f2;

        f1 = f1 * f1;

        f1 = f2 + f1;

        $d0 = (double) f0;

        $b2 = $d0 cmpl 0.0;

        if $b2 != 0 goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke $r1.<coconutlabs.game.playcurling.CCLStone: int GetStoneRadius()>();

        $i1 = virtualinvoke $r1.<coconutlabs.game.playcurling.CCLStone: int GetStoneRadius()>();

        $i0 = $i0 * $i1;

        f2 = (float) $i0;

        $b2 = f1 cmpg f2;

        $i0 = (int) $b2;

        if $i0 < 0 goto label2;

        $i0 = virtualinvoke $r1.<coconutlabs.game.playcurling.CCLStone: int GetStoneRadius()>();

        $i1 = virtualinvoke $r1.<coconutlabs.game.playcurling.CCLStone: int GetStoneRadius()>();

        $i0 = $i0 * $i1;

        f1 = (float) $i0;

        $b2 = f0 cmpg f1;

        $i0 = (int) $b2;

        if $i0 >= 0 goto label5;

     label2:
        $i0 = virtualinvoke $r1.<coconutlabs.game.playcurling.CCLStone: int GetEnergy()>();

        $f6 = (float) $i0;

        $i0 = virtualinvoke $r2.<coconutlabs.game.playcurling.CCLStone: int GetEnergy()>();

        f2 = (float) $i0;

        f1 = f2 - $f6;

        f1 = staticinvoke <java.lang.Math: float abs(float)>(f1);

        $f6 = $f6 * 0.9F;

        f2 = f2 * 0.9F;

        $d0 = (double) $f6;

        f3 = virtualinvoke $r1.<coconutlabs.game.playcurling.CCLStone: float GetDirection()>();

        $d1 = (double) f3;

        $d1 = staticinvoke <java.lang.Math: double sin(double)>($d1);

        $d0 = $d0 * $d1;

        f3 = (float) $d0;

        $d0 = (double) $f6;

        $f6 = virtualinvoke $r1.<coconutlabs.game.playcurling.CCLStone: float GetDirection()>();

        $d1 = (double) $f6;

        $d1 = staticinvoke <java.lang.Math: double cos(double)>($d1);

        $d0 = $d0 * $d1;

        f4 = (float) $d0;

        $d0 = (double) f2;

        $f6 = virtualinvoke $r2.<coconutlabs.game.playcurling.CCLStone: float GetDirection()>();

        $d1 = (double) $f6;

        $d1 = staticinvoke <java.lang.Math: double sin(double)>($d1);

        $d0 = $d0 * $d1;

        $f6 = (float) $d0;

        $d0 = (double) f2;

        f2 = virtualinvoke $r2.<coconutlabs.game.playcurling.CCLStone: float GetDirection()>();

        $d1 = (double) f2;

        $d1 = staticinvoke <java.lang.Math: double cos(double)>($d1);

        $d0 = $d0 * $d1;

        $f8 = (float) $d0;

        f2 = $f7 * f3;

        $f9 = $f5 * f4;

        f2 = f2 + $f9;

        f2 = f2 / f0;

        f4 = $f7 * f4;

        f3 = $f5 * f3;

        f3 = f4 - f3;

        f3 = f3 / f0;

        f4 = $f7 * $f6;

        $f9 = $f5 * $f8;

        f4 = f4 + $f9;

        f4 = f4 / f0;

        $f8 = $f7 * $f8;

        $f6 = $f5 * $f6;

        $f6 = $f8 - $f6;

        f0 = $f6 / f0;

        $f6 = f4 * $f5;

        $f8 = f3 * $f7;

        $f8 = $f6 + $f8;

        $f6 = f4 * $f7;

        f3 = f3 * $f5;

        f3 = $f6 - f3;

        $b2 = $f8 cmpl 0.0F;

        if $b2 != 0 goto label3;

        $f8 = 1.0E-5F;

     label3:
        $f6 = f3 * f3;

        f4 = $f8 * $f8;

        $f6 = $f6 + f4;

        $d0 = (double) $f6;

        $d0 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        $f6 = (float) $d0;

        f3 = f3 / $f8;

        $d0 = (double) f3;

        $d0 = staticinvoke <java.lang.Math: double atan(double)>($d0);

        f3 = (float) $d0;

        $f8 = f2 * $f5;

        f4 = f0 * $f7;

        $f8 = $f8 + f4;

        $f7 = f2 * $f7;

        $f5 = f0 * $f5;

        $f5 = $f7 - $f5;

        $b2 = $f8 cmpl 0.0F;

        if $b2 != 0 goto label4;

        $f8 = 1.0E-5F;

     label4:
        $f7 = $f5 * $f5;

        f0 = $f8 * $f8;

        $f7 = $f7 + f0;

        $d0 = (double) $f7;

        $d0 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        $f7 = (float) $d0;

        $f5 = $f5 / $f8;

        $d0 = (double) $f5;

        $d0 = staticinvoke <java.lang.Math: double atan(double)>($d0);

        $f5 = (float) $d0;

        $i0 = (int) $f6;

        virtualinvoke $r1.<coconutlabs.game.playcurling.CCLStone: void SetEnergy(int)>($i0);

        $i0 = (int) $f7;

        virtualinvoke $r2.<coconutlabs.game.playcurling.CCLStone: void SetEnergy(int)>($i0);

        virtualinvoke $r1.<coconutlabs.game.playcurling.CCLStone: void SetDirection(float)>(f3);

        virtualinvoke $r2.<coconutlabs.game.playcurling.CCLStone: void SetDirection(float)>($f5);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("[PC] Physics : ");

        $i0 = (int) f1;

        $r3 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Play! Curling", $r4);

        $i0 = (int) f1;

        return $i0;

     label5:
        return 0;
    }

    private int calcWallCollision(coconutlabs.game.playcurling.CCLStone)
    {
        byte $b2;
        int $i0, $i1;
        java.lang.String $r4;
        double $d0, $d1;
        coconutlabs.game.playcurling.Physics r0;
        coconutlabs.game.playcurling.CCLStone $r1, r2, $r5;
        float f0, f1, f2, $f3, $f4, $f5;
        java.lang.StringBuilder $r3, $r6;

        r0 := @this: coconutlabs.game.playcurling.Physics;

        $r1 := @parameter0: coconutlabs.game.playcurling.CCLStone;

        $r5 = new coconutlabs.game.playcurling.CCLStone;

        r2 = $r5;

        specialinvoke $r5.<coconutlabs.game.playcurling.CCLStone: void <init>()>();

        virtualinvoke r2.<coconutlabs.game.playcurling.CCLStone: void SetEnergy(int)>(0);

        virtualinvoke r2.<coconutlabs.game.playcurling.CCLStone: void SetDirection(float)>(0.0F);

        $i0 = r0.<coconutlabs.game.playcurling.Physics: int m_nWidth>;

        $i0 = $i0 / 2;

        $i1 = virtualinvoke $r1.<coconutlabs.game.playcurling.CCLStone: int GetPosX()>();

        if $i0 <= $i1 goto label2;

        $i0 = virtualinvoke $r1.<coconutlabs.game.playcurling.CCLStone: int GetPosY()>();

        virtualinvoke r2.<coconutlabs.game.playcurling.CCLStone: void SetPos(int,int)>(0, $i0);

     label1:
        $i0 = virtualinvoke $r1.<coconutlabs.game.playcurling.CCLStone: int GetEnergy()>();

        $d0 = (double) $i0;

        $d0 = $d0 / 1000.0;

        f0 = (float) $d0;

        $d0 = (double) f0;

        f0 = virtualinvoke $r1.<coconutlabs.game.playcurling.CCLStone: float GetDirection()>();

        $d1 = (double) f0;

        $d1 = staticinvoke <java.lang.Math: double sin(double)>($d1);

        $d0 = $d0 * $d1;

        f2 = (float) $d0;

        $i0 = virtualinvoke $r1.<coconutlabs.game.playcurling.CCLStone: int GetEnergy()>();

        $d0 = (double) $i0;

        $d0 = $d0 / 1000.0;

        f0 = (float) $d0;

        $d0 = (double) f0;

        f0 = virtualinvoke $r1.<coconutlabs.game.playcurling.CCLStone: float GetDirection()>();

        $d1 = (double) f0;

        $d1 = staticinvoke <java.lang.Math: double cos(double)>($d1);

        $d0 = $d0 * $d1;

        $d0 = neg $d0;

        $f3 = (float) $d0;

        $i0 = virtualinvoke r2.<coconutlabs.game.playcurling.CCLStone: int GetPosX()>();

        $i1 = virtualinvoke $r1.<coconutlabs.game.playcurling.CCLStone: int GetPosX()>();

        $i0 = $i0 - $i1;

        f1 = (float) $i0;

        $i0 = virtualinvoke r2.<coconutlabs.game.playcurling.CCLStone: int GetPosY()>();

        $i1 = virtualinvoke $r1.<coconutlabs.game.playcurling.CCLStone: int GetPosY()>();

        $i0 = $i0 - $i1;

        $i0 = neg $i0;

        f0 = (float) $i0;

        $i0 = virtualinvoke r2.<coconutlabs.game.playcurling.CCLStone: int GetPosX()>();

        $f4 = (float) $i0;

        $f4 = $f4 + 0.0F;

        $i0 = virtualinvoke $r1.<coconutlabs.game.playcurling.CCLStone: int GetPosX()>();

        $f5 = (float) $i0;

        f2 = $f5 + f2;

        f2 = $f4 - f2;

        $i0 = virtualinvoke r2.<coconutlabs.game.playcurling.CCLStone: int GetPosY()>();

        $f4 = (float) $i0;

        $f4 = $f4 + 0.0F;

        $i0 = virtualinvoke $r1.<coconutlabs.game.playcurling.CCLStone: int GetPosY()>();

        $f5 = (float) $i0;

        $f3 = $f5 + $f3;

        $f3 = $f4 - $f3;

        $f3 = neg $f3;

        f1 = f1 * f1;

        f0 = f0 * f0;

        f0 = f1 + f0;

        f1 = f2 * f2;

        f2 = $f3 * $f3;

        f1 = f1 + f2;

        $d0 = (double) f0;

        $b2 = $d0 cmpl 0.0;

        if $b2 != 0 goto label3;

        return 0;

     label2:
        $i0 = r0.<coconutlabs.game.playcurling.Physics: int m_nWidth>;

        $i1 = virtualinvoke $r1.<coconutlabs.game.playcurling.CCLStone: int GetPosY()>();

        virtualinvoke r2.<coconutlabs.game.playcurling.CCLStone: void SetPos(int,int)>($i0, $i1);

        goto label1;

     label3:
        $i0 = virtualinvoke $r1.<coconutlabs.game.playcurling.CCLStone: int GetStoneRadius()>();

        $i0 = $i0 / 2;

        $i1 = virtualinvoke $r1.<coconutlabs.game.playcurling.CCLStone: int GetStoneRadius()>();

        $i1 = $i1 / 2;

        $i0 = $i0 * $i1;

        f0 = (float) $i0;

        $b2 = f1 cmpg f0;

        $i0 = (int) $b2;

        if $i0 >= 0 goto label4;

        $i0 = virtualinvoke $r1.<coconutlabs.game.playcurling.CCLStone: int GetEnergy()>();

        f0 = (float) $i0;

        f1 = f0 * 0.6F;

        $d0 = (double) f1;

        f2 = virtualinvoke $r1.<coconutlabs.game.playcurling.CCLStone: float GetDirection()>();

        $d1 = (double) f2;

        $d1 = staticinvoke <java.lang.Math: double sin(double)>($d1);

        $d0 = $d0 * $d1;

        f2 = (float) $d0;

        $d0 = (double) f1;

        $f3 = virtualinvoke $r1.<coconutlabs.game.playcurling.CCLStone: float GetDirection()>();

        $d1 = (double) $f3;

        $d1 = staticinvoke <java.lang.Math: double cos(double)>($d1);

        $d0 = $d0 * $d1;

        $f3 = (float) $d0;

        f2 = neg f2;

        f2 = f2 / $f3;

        $d0 = (double) f2;

        $d0 = staticinvoke <java.lang.Math: double atan(double)>($d0);

        f2 = (float) $d0;

        $i0 = (int) f1;

        virtualinvoke $r1.<coconutlabs.game.playcurling.CCLStone: void SetEnergy(int)>($i0);

        virtualinvoke $r1.<coconutlabs.game.playcurling.CCLStone: void SetDirection(float)>(f2);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("[PC] Physics : ");

        $i0 = (int) f0;

        $r3 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Play! Curling", $r4);

        $i0 = (int) f0;

        return $i0;

     label4:
        return 0;
    }

    private int spendStoneEnergy(coconutlabs.game.playcurling.CCLStone)
    {
        coconutlabs.game.playcurling.Physics r0;
        coconutlabs.game.playcurling.CCLStone $r1;
        int $i0, $i1;
        float $f0;
        double d0, d1, $d2;

        r0 := @this: coconutlabs.game.playcurling.Physics;

        $r1 := @parameter0: coconutlabs.game.playcurling.CCLStone;

        $i0 = virtualinvoke $r1.<coconutlabs.game.playcurling.CCLStone: int GetEnergy()>();

        if $i0 <= 0 goto label2;

        d0 = (double) $i0;

        d0 = d0 / 1000.0;

        $f0 = virtualinvoke $r1.<coconutlabs.game.playcurling.CCLStone: float GetDirection()>();

        d1 = (double) $f0;

        d1 = staticinvoke <java.lang.Math: double sin(double)>(d1);

        d0 = d0 * d1;

        d1 = (double) $i0;

        d1 = d1 / 1000.0;

        $f0 = virtualinvoke $r1.<coconutlabs.game.playcurling.CCLStone: float GetDirection()>();

        $d2 = (double) $f0;

        $d2 = staticinvoke <java.lang.Math: double cos(double)>($d2);

        d1 = d1 * $d2;

        d1 = neg d1;

        virtualinvoke $r1.<coconutlabs.game.playcurling.CCLStone: void Move(double,double)>(d0, d1);

        $i1 = virtualinvoke $r1.<coconutlabs.game.playcurling.CCLStone: int GetFriction()>();

        $i0 = $i0 - $i1;

        if $i0 > 0 goto label1;

        $i0 = 0;

     label1:
        virtualinvoke $r1.<coconutlabs.game.playcurling.CCLStone: void SetEnergy(int)>($i0);

     label2:
        return $i0;
    }

    public void CheckValidPush(float, float)
    {
        float $f0, $f1;
        coconutlabs.game.playcurling.Physics r0;

        r0 := @this: coconutlabs.game.playcurling.Physics;

        $f0 := @parameter0: float;

        $f1 := @parameter1: float;

        return;
    }

    public boolean GetAllStonesStopped()
    {
        coconutlabs.game.playcurling.Physics r0;
        boolean z0;

        r0 := @this: coconutlabs.game.playcurling.Physics;

        z0 = r0.<coconutlabs.game.playcurling.Physics: boolean m_bAllStopped>;

        return z0;
    }

    public boolean GetCollisionBig()
    {
        coconutlabs.game.playcurling.Physics r0;
        boolean z0;

        r0 := @this: coconutlabs.game.playcurling.Physics;

        z0 = r0.<coconutlabs.game.playcurling.Physics: boolean m_bCollisionBig>;

        return z0;
    }

    public boolean GetCollisionMedium()
    {
        coconutlabs.game.playcurling.Physics r0;
        boolean z0;

        r0 := @this: coconutlabs.game.playcurling.Physics;

        z0 = r0.<coconutlabs.game.playcurling.Physics: boolean m_bCollisionMedium>;

        return z0;
    }

    public int GetCollisionPower()
    {
        int i0;
        coconutlabs.game.playcurling.Physics r0;

        r0 := @this: coconutlabs.game.playcurling.Physics;

        i0 = r0.<coconutlabs.game.playcurling.Physics: int m_nCollisionPower>;

        return i0;
    }

    public boolean GetCollisionSmall()
    {
        coconutlabs.game.playcurling.Physics r0;
        boolean z0;

        r0 := @this: coconutlabs.game.playcurling.Physics;

        z0 = r0.<coconutlabs.game.playcurling.Physics: boolean m_bCollisionSmall>;

        return z0;
    }

    public int GetTotalEnergy()
    {
        int i0;
        coconutlabs.game.playcurling.Physics r0;

        r0 := @this: coconutlabs.game.playcurling.Physics;

        i0 = r0.<coconutlabs.game.playcurling.Physics: int m_nTotalEnergy>;

        return i0;
    }

    public void InitAllStonesStopped()
    {
        coconutlabs.game.playcurling.Physics r0;

        r0 := @this: coconutlabs.game.playcurling.Physics;

        r0.<coconutlabs.game.playcurling.Physics: boolean m_bAllStopped> = 0;

        return;
    }

    public void SetCollisionBig(boolean)
    {
        coconutlabs.game.playcurling.Physics r0;
        boolean $z0;

        r0 := @this: coconutlabs.game.playcurling.Physics;

        $z0 := @parameter0: boolean;

        r0.<coconutlabs.game.playcurling.Physics: boolean m_bCollisionBig> = 0;

        return;
    }

    public void SetCollisionMedium(boolean)
    {
        coconutlabs.game.playcurling.Physics r0;
        boolean $z0;

        r0 := @this: coconutlabs.game.playcurling.Physics;

        $z0 := @parameter0: boolean;

        r0.<coconutlabs.game.playcurling.Physics: boolean m_bCollisionMedium> = 0;

        return;
    }

    public void SetCollisionPower(int)
    {
        int $i0;
        coconutlabs.game.playcurling.Physics r0;

        r0 := @this: coconutlabs.game.playcurling.Physics;

        $i0 := @parameter0: int;

        r0.<coconutlabs.game.playcurling.Physics: int m_nCollisionPower> = $i0;

        return;
    }

    public void SetCollisionSmall(boolean)
    {
        coconutlabs.game.playcurling.Physics r0;
        boolean $z0;

        r0 := @this: coconutlabs.game.playcurling.Physics;

        $z0 := @parameter0: boolean;

        r0.<coconutlabs.game.playcurling.Physics: boolean m_bCollisionSmall> = 0;

        return;
    }

    public void SetLaneInfo(int, int)
    {
        int $i0, $i1;
        coconutlabs.game.playcurling.Physics r0;

        r0 := @this: coconutlabs.game.playcurling.Physics;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        r0.<coconutlabs.game.playcurling.Physics: int m_nWidth> = $i0;

        r0.<coconutlabs.game.playcurling.Physics: int m_nFGZ> = $i1;

        return;
    }

    public java.util.ArrayList getAllStoneList()
    {
        coconutlabs.game.playcurling.Physics r0;
        java.util.ArrayList r1;

        r0 := @this: coconutlabs.game.playcurling.Physics;

        r1 = r0.<coconutlabs.game.playcurling.Physics: java.util.ArrayList m_listStones>;

        return r1;
    }

    public coconutlabs.game.playcurling.CCLStone getSingleStone(int)
    {
        coconutlabs.game.playcurling.Physics r0;
        coconutlabs.game.playcurling.CCLStone r3;
        int $i0, $i1;
        java.lang.Object $r2;
        java.util.ArrayList $r1;

        r0 := @this: coconutlabs.game.playcurling.Physics;

        $i0 := @parameter0: int;

        $r1 = r0.<coconutlabs.game.playcurling.Physics: java.util.ArrayList m_listStones>;

        $i1 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        if $i1 <= $i0 goto label1;

        if $i0 >= 0 goto label2;

     label1:
        return null;

     label2:
        $r1 = r0.<coconutlabs.game.playcurling.Physics: java.util.ArrayList m_listStones>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        r3 = (coconutlabs.game.playcurling.CCLStone) $r2;

        return r3;
    }

    public int getStoneListSize()
    {
        int $i0;
        coconutlabs.game.playcurling.Physics r0;
        java.util.ArrayList $r1;

        r0 := @this: coconutlabs.game.playcurling.Physics;

        $r1 = r0.<coconutlabs.game.playcurling.Physics: java.util.ArrayList m_listStones>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        return $i0;
    }

    public void run()
    {
        coconutlabs.game.playcurling.Physics r0;
        java.lang.Integer $r3;
        java.util.ArrayList r1, $r5;
        coconutlabs.game.playcurling.CCLStone $r2, $r6;
        int $i0, i1, $i2, $i3;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: coconutlabs.game.playcurling.Physics;

        r0.<coconutlabs.game.playcurling.Physics: int m_nTotalEnergy> = 0;

        $i0 = virtualinvoke r0.<coconutlabs.game.playcurling.Physics: int getStoneListSize()>();

        $r5 = new java.util.ArrayList;

        r1 = $r5;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        i1 = 0;

     label01:
        if i1 < $i0 goto label04;

        $i0 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        i1 = 0;

     label02:
        if i1 < $i0 goto label08;

        $i0 = virtualinvoke r0.<coconutlabs.game.playcurling.Physics: int getStoneListSize()>();

        if $i0 <= 1 goto label15;

        $i0 = virtualinvoke r0.<coconutlabs.game.playcurling.Physics: int getStoneListSize()>();

        $i0 = $i0 - 1;

     label03:
        if $i0 >= 0 goto label09;

        return;

     label04:
        $r2 = virtualinvoke r0.<coconutlabs.game.playcurling.Physics: coconutlabs.game.playcurling.CCLStone getSingleStone(int)>(i1);

        $i2 = virtualinvoke $r2.<coconutlabs.game.playcurling.CCLStone: int GetEnergy()>();

        if $i2 <= 0 goto label05;

        $i2 = $i0 - 1;

        if i1 != $i2 goto label05;

        virtualinvoke $r2.<coconutlabs.game.playcurling.CCLStone: void Rotate()>();

        virtualinvoke $r2.<coconutlabs.game.playcurling.CCLStone: void ApplyCurve()>();

     label05:
        $z0 = specialinvoke r0.<coconutlabs.game.playcurling.Physics: boolean CheckStoneVisible(coconutlabs.game.playcurling.CCLStone)>($r2);

        if $z0 != 0 goto label07;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

     label06:
        i1 = i1 + 1;

        goto label01;

     label07:
        $i2 = r0.<coconutlabs.game.playcurling.Physics: int m_nTotalEnergy>;

        $i3 = specialinvoke r0.<coconutlabs.game.playcurling.Physics: int spendStoneEnergy(coconutlabs.game.playcurling.CCLStone)>($r2);

        $i2 = $i2 + $i3;

        r0.<coconutlabs.game.playcurling.Physics: int m_nTotalEnergy> = $i2;

        goto label06;

     label08:
        $r4 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r3 = (java.lang.Integer) $r4;

        $i2 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        $i2 = $i2 - i1;

        $r5 = r0.<coconutlabs.game.playcurling.Physics: java.util.ArrayList m_listStones>;

        virtualinvoke $r5.<java.util.ArrayList: java.lang.Object remove(int)>($i2);

        i1 = i1 + 1;

        goto label02;

     label09:
        $r2 = virtualinvoke r0.<coconutlabs.game.playcurling.Physics: coconutlabs.game.playcurling.CCLStone getSingleStone(int)>($i0);

        i1 = $i0 - 1;

     label10:
        if i1 >= 0 goto label11;

        $i0 = $i0 + -1;

        goto label03;

     label11:
        $r6 = virtualinvoke r0.<coconutlabs.game.playcurling.Physics: coconutlabs.game.playcurling.CCLStone getSingleStone(int)>(i1);

        $i2 = specialinvoke r0.<coconutlabs.game.playcurling.Physics: int calcCollision(coconutlabs.game.playcurling.CCLStone,coconutlabs.game.playcurling.CCLStone)>($r2, $r6);

        r0.<coconutlabs.game.playcurling.Physics: int m_nCollisionPower> = $i2;

        $i2 = r0.<coconutlabs.game.playcurling.Physics: int m_nCollisionPower>;

        if $i2 <= 5500 goto label13;

        r0.<coconutlabs.game.playcurling.Physics: boolean m_bCollisionBig> = 1;

     label12:
        i1 = i1 + -1;

        goto label10;

     label13:
        $i2 = r0.<coconutlabs.game.playcurling.Physics: int m_nCollisionPower>;

        if $i2 <= 2750 goto label14;

        r0.<coconutlabs.game.playcurling.Physics: boolean m_bCollisionMedium> = 1;

        goto label12;

     label14:
        $i2 = r0.<coconutlabs.game.playcurling.Physics: int m_nCollisionPower>;

        if $i2 <= 1100 goto label12;

        r0.<coconutlabs.game.playcurling.Physics: boolean m_bCollisionSmall> = 1;

        goto label12;

     label15:
        return;
    }
}
