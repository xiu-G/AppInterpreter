public class com.parse.Parse extends java.lang.Object
{
    public static final int LOG_LEVEL_DEBUG;
    public static final int LOG_LEVEL_ERROR;
    public static final int LOG_LEVEL_INFO;
    public static final int LOG_LEVEL_NONE;
    public static final int LOG_LEVEL_VERBOSE;
    public static final int LOG_LEVEL_WARNING;
    private static final java.lang.String TAG;
    static android.content.Context applicationContext;
    static java.lang.String applicationId;
    static java.lang.String clientKey;
    static com.parse.ParseCommandCache commandCache;
    private static final java.text.DateFormat dateFormat;
    private static int logLevel;
    static int maxKeyValueCacheBytes;
    static int maxKeyValueCacheFiles;
    static int maxParseFileSize;

    static void <clinit>()
    {
        java.text.SimpleDateFormat $r0;
        java.util.SimpleTimeZone $r1;

        <com.parse.Parse: java.lang.String TAG> = "com.parse.Parse";

        <com.parse.Parse: int LOG_LEVEL_WARNING> = 5;

        <com.parse.Parse: int LOG_LEVEL_VERBOSE> = 2;

        <com.parse.Parse: int LOG_LEVEL_NONE> = 2147483647;

        <com.parse.Parse: int LOG_LEVEL_INFO> = 4;

        <com.parse.Parse: int LOG_LEVEL_ERROR> = 6;

        <com.parse.Parse: int LOG_LEVEL_DEBUG> = 3;

        <com.parse.Parse: int logLevel> = 6;

        <com.parse.Parse: int maxParseFileSize> = 10485760;

        <com.parse.Parse: int maxKeyValueCacheBytes> = 2097152;

        <com.parse.Parse: int maxKeyValueCacheFiles> = 1000;

        <com.parse.Parse: com.parse.ParseCommandCache commandCache> = null;

        $r0 = new java.text.SimpleDateFormat;

        specialinvoke $r0.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy-MM-dd\'T\'HH:mm:ss.SSS\'Z\'");

        $r1 = new java.util.SimpleTimeZone;

        specialinvoke $r1.<java.util.SimpleTimeZone: void <init>(int,java.lang.String)>(0, "GMT");

        virtualinvoke $r0.<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>($r1);

        <com.parse.Parse: java.text.DateFormat dateFormat> = $r0;

        return;
    }

    private void <init>()
    {
        java.lang.AssertionError $r1;
        com.parse.Parse r0;

        r0 := @this: com.parse.Parse;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;
    }

    static java.lang.Number addNumbers(java.lang.Number, java.lang.Number)
    {
        java.lang.Float $r4;
        java.lang.Double $r2;
        long $l0, $l1;
        java.lang.Integer $r5;
        short $s2, $s3;
        byte $b5, $b6;
        java.lang.Long $r3;
        int $i4, $i7;
        java.lang.Number $r0, $r1;
        boolean $z0;
        double $d0, $d1;
        float $f0, $f1;

        $r0 := @parameter0: java.lang.Number;

        $r1 := @parameter1: java.lang.Number;

        $z0 = $r0 instanceof java.lang.Double;

        if $z0 == 0 goto label1;

        $d0 = virtualinvoke $r0.<java.lang.Number: double doubleValue()>();

        $d1 = virtualinvoke $r1.<java.lang.Number: double doubleValue()>();

        $d0 = $d0 + $d1;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r2;

     label1:
        $z0 = $r0 instanceof java.lang.Long;

        if $z0 == 0 goto label2;

        $l0 = virtualinvoke $r0.<java.lang.Number: long longValue()>();

        $l1 = virtualinvoke $r1.<java.lang.Number: long longValue()>();

        $l0 = $l0 + $l1;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        return $r3;

     label2:
        $z0 = $r0 instanceof java.lang.Float;

        if $z0 == 0 goto label3;

        $f0 = virtualinvoke $r0.<java.lang.Number: float floatValue()>();

        $f1 = virtualinvoke $r1.<java.lang.Number: float floatValue()>();

        $f0 = $f0 + $f1;

        $r4 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        return $r4;

     label3:
        $z0 = $r0 instanceof java.lang.Short;

        if $z0 == 0 goto label4;

        $s2 = virtualinvoke $r0.<java.lang.Number: short shortValue()>();

        $s3 = virtualinvoke $r1.<java.lang.Number: short shortValue()>();

        $i4 = (int) $s2;

        $i7 = (int) $s3;

        $i4 = $i4 + $i7;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        return $r5;

     label4:
        $z0 = $r0 instanceof java.lang.Byte;

        if $z0 == 0 goto label5;

        $b5 = virtualinvoke $r0.<java.lang.Number: byte byteValue()>();

        $b6 = virtualinvoke $r1.<java.lang.Number: byte byteValue()>();

        $i4 = (int) $b5;

        $i7 = (int) $b6;

        $i4 = $i4 + $i7;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        return $r5;

     label5:
        $i4 = virtualinvoke $r0.<java.lang.Number: int intValue()>();

        $i7 = virtualinvoke $r1.<java.lang.Number: int intValue()>();

        $i4 = $i4 + $i7;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        return $r5;
    }

    static void checkCacheApplicationId()
    {
        java.lang.Throwable $r7, $r8, $r9, $r10, $r11, $r12;
        java.io.RandomAccessFile $r3;
        byte[] $r4;
        long $l0;
        int $i1;
        java.lang.String $r0, $r5;
        boolean $z0, $z1;
        java.io.FileOutputStream $r6;
        java.io.File $r1, $r2;

        entermonitor class "Lcom/parse/Parse;";

     label01:
        $r0 = <com.parse.Parse: java.lang.String applicationId>;

        if $r0 == null goto label19;

        $r1 = new java.io.File;

        $r2 = staticinvoke <com.parse.Parse: java.io.File getParseDir()>();

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, "applicationId");

        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

     label02:
        if $z0 == 0 goto label14;

        $z0 = 0;

     label03:
        $r3 = new java.io.RandomAccessFile;

     label04:
        specialinvoke $r3.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>($r1, "r");

        $l0 = virtualinvoke $r3.<java.io.RandomAccessFile: long length()>();

     label05:
        $i1 = (int) $l0;

        $r4 = newarray (byte)[$i1];

     label06:
        virtualinvoke $r3.<java.io.RandomAccessFile: void readFully(byte[])>($r4);

        virtualinvoke $r3.<java.io.RandomAccessFile: void close()>();

     label07:
        $r0 = new java.lang.String;

     label08:
        specialinvoke $r0.<java.lang.String: void <init>(byte[],java.lang.String)>($r4, "UTF-8");

     label09:
        $r5 = <com.parse.Parse: java.lang.String applicationId>;

     label10:
        $z1 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>($r5);

     label11:
        $z0 = $z1;

     label12:
        if $z0 != 0 goto label14;

     label13:
        $r1 = staticinvoke <com.parse.Parse: java.io.File getParseDir()>();

        staticinvoke <com.parse.Parse: void recursiveDelete(java.io.File)>($r1);

     label14:
        $r1 = new java.io.File;

        $r2 = staticinvoke <com.parse.Parse: java.io.File getParseDir()>();

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, "applicationId");

     label15:
        $r6 = new java.io.FileOutputStream;

     label16:
        specialinvoke $r6.<java.io.FileOutputStream: void <init>(java.io.File)>($r1);

     label17:
        $r0 = <com.parse.Parse: java.lang.String applicationId>;

     label18:
        $r4 = virtualinvoke $r0.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        virtualinvoke $r6.<java.io.FileOutputStream: void write(byte[])>($r4);

        virtualinvoke $r6.<java.io.FileOutputStream: void close()>();

     label19:
        exitmonitor class "Lcom/parse/Parse;";

        return;

     label20:
        $r7 := @caughtexception;

        exitmonitor class "Lcom/parse/Parse;";

        throw $r7;

     label21:
        $r8 := @caughtexception;

        goto label19;

     label22:
        $r9 := @caughtexception;

        goto label19;

     label23:
        $r10 := @caughtexception;

        goto label19;

     label24:
        $r11 := @caughtexception;

        goto label12;

     label25:
        $r12 := @caughtexception;

        goto label12;

        catch java.lang.Throwable from label01 to label02 with label20;
        catch java.io.FileNotFoundException from label04 to label05 with label25;
        catch java.io.FileNotFoundException from label06 to label07 with label25;
        catch java.io.FileNotFoundException from label08 to label09 with label25;
        catch java.io.FileNotFoundException from label10 to label11 with label25;
        catch java.io.IOException from label04 to label05 with label24;
        catch java.io.IOException from label06 to label07 with label24;
        catch java.io.IOException from label08 to label09 with label24;
        catch java.io.IOException from label10 to label11 with label24;
        catch java.lang.Throwable from label03 to label11 with label20;
        catch java.lang.Throwable from label13 to label15 with label20;
        catch java.io.FileNotFoundException from label16 to label17 with label23;
        catch java.io.FileNotFoundException from label18 to label19 with label23;
        catch java.io.UnsupportedEncodingException from label16 to label17 with label22;
        catch java.io.UnsupportedEncodingException from label18 to label19 with label22;
        catch java.io.IOException from label16 to label17 with label21;
        catch java.io.IOException from label18 to label19 with label21;
        catch java.lang.Throwable from label15 to label19 with label20;
    }

    static void checkContext()
    {
        android.content.Context $r0;
        java.lang.RuntimeException $r1;

        $r0 = <com.parse.Parse: android.content.Context applicationContext>;

        if $r0 != null goto label1;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("applicationContext is null. You must call Parse.initialize(context, applicationId, clientKey) before using the Parse library.");

        throw $r1;

     label1:
        return;
    }

    static void checkInit()
    {
        java.lang.String $r0;
        java.lang.RuntimeException $r1;

        $r0 = <com.parse.Parse: java.lang.String applicationId>;

        if $r0 != null goto label1;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("applicationId is null. You must call Parse.initialize(context, applicationId, clientKey) before using the Parse library.");

        throw $r1;

     label1:
        $r0 = <com.parse.Parse: java.lang.String clientKey>;

        if $r0 != null goto label2;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("clientKey is null. You must call Parse.initialize(context, applicationId, clientKey) before using the Parse library.");

        throw $r1;

     label2:
        return;
    }

    static void clearCacheDir()
    {
        int $i0, $i1;
        java.io.File[] $r1;
        java.io.File $r0;

        $r0 = staticinvoke <com.parse.Parse: java.io.File getKeyValueCacheDir()>();

        $r1 = virtualinvoke $r0.<java.io.File: java.io.File[] listFiles()>();

        if $r1 != null goto label1;

        return;

     label1:
        $i0 = 0;

     label2:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label3;

        $r0 = $r1[$i0];

        virtualinvoke $r0.<java.io.File: boolean delete()>();

        $i0 = $i0 + 1;

        goto label2;

     label3:
        return;
    }

    static void clearFromKeyValueCache(java.lang.String)
    {
        java.lang.String $r0;
        java.io.File $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.parse.Parse: java.io.File getKeyValueCacheFile(java.lang.String)>($r0);

        if $r1 == null goto label1;

        virtualinvoke $r1.<java.io.File: boolean delete()>();

     label1:
        return;
    }

    static java.util.List convertArrayToList(org.json.JSONArray)
    {
        int $i0, $i1;
        java.lang.Object $r2, $r3;
        org.json.JSONArray $r0;
        java.util.ArrayList $r1;

        $r0 := @parameter0: org.json.JSONArray;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $i0 = 0;

     label1:
        $i1 = virtualinvoke $r0.<org.json.JSONArray: int length()>();

        if $i0 >= $i1 goto label4;

        $r2 = virtualinvoke $r0.<org.json.JSONArray: java.lang.Object opt(int)>($i0);

        $r3 = staticinvoke <com.parse.Parse: java.lang.Object decodeJSONObject(java.lang.Object)>($r2);

        if $r3 == null goto label3;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r3);

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        goto label2;

     label4:
        return $r1;
    }

    static java.util.Map convertJSONObjectToMap(org.json.JSONObject)
    {
        java.util.Iterator $r2;
        java.util.HashMap $r1;
        java.util.List $r7;
        org.json.JSONObject $r0;
        java.lang.Object $r3, $r5;
        java.lang.String $r4;
        org.json.JSONArray $r6;
        boolean $z0;

        $r0 := @parameter0: org.json.JSONObject;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        $r2 = virtualinvoke $r0.<org.json.JSONObject: java.util.Iterator keys()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.lang.String) $r3;

        $r3 = virtualinvoke $r0.<org.json.JSONObject: java.lang.Object opt(java.lang.String)>($r4);

        $r5 = staticinvoke <com.parse.Parse: java.lang.Object decodeJSONObject(java.lang.Object)>($r3);

        if $r5 == null goto label2;

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r5);

        goto label1;

     label2:
        $z0 = $r3 instanceof org.json.JSONArray;

        if $z0 == 0 goto label3;

        $r6 = (org.json.JSONArray) $r3;

        $r7 = staticinvoke <com.parse.Parse: java.util.List convertArrayToList(org.json.JSONArray)>($r6);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r7);

        goto label1;

     label3:
        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r3);

        goto label1;

     label4:
        return $r1;
    }

    static java.io.File createKeyValueCacheFile(java.lang.String)
    {
        java.util.Date $r2;
        java.lang.StringBuilder $r1;
        long $l0;
        java.lang.String $r0, $r3;
        java.io.File $r4, $r5;

        $r0 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = new java.util.Date;

        specialinvoke $r2.<java.util.Date: void <init>()>();

        $l0 = virtualinvoke $r2.<java.util.Date: long getTime()>();

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new java.io.File;

        $r5 = staticinvoke <com.parse.Parse: java.io.File getKeyValueCacheDir()>();

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, $r0);

        return $r4;
    }

    static org.json.JSONObject dateToObject(java.util.Date)
    {
        org.json.JSONException $r3;
        org.json.JSONObject $r1;
        java.util.Date $r0;
        java.lang.String $r2;
        java.lang.RuntimeException $r4;

        $r0 := @parameter0: java.util.Date;

        $r1 = new org.json.JSONObject;

        specialinvoke $r1.<org.json.JSONObject: void <init>()>();

        $r2 = staticinvoke <com.parse.Parse: java.lang.String encodeDate(java.util.Date)>($r0);

     label1:
        virtualinvoke $r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("__type", "Date");

        virtualinvoke $r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("iso", $r2);

     label2:
        return $r1;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        $r2 = virtualinvoke $r3.<org.json.JSONException: java.lang.String getMessage()>();

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>($r2);

        throw $r4;

        catch org.json.JSONException from label1 to label2 with label3;
    }

    static java.lang.Object decodeJSONObject(java.lang.Object)
    {
        byte[] $r5;
        java.util.Date $r4;
        com.parse.ParseObject $r7;
        org.json.JSONException $r10, $r13;
        org.json.JSONObject $r1, $r12;
        java.util.Map $r3;
        java.lang.String $r2, $r6;
        boolean $z0;
        double $d0, $d1;
        com.parse.ParseGeoPoint $r9;
        java.lang.RuntimeException $r11;
        com.parse.ParseFile $r8;
        java.lang.Object $r0;

        $r0 := @parameter0: java.lang.Object;

        $z0 = $r0 instanceof org.json.JSONObject;

        if $z0 == 0 goto label14;

        $r1 = (org.json.JSONObject) $r0;

        $r2 = virtualinvoke $r1.<org.json.JSONObject: java.lang.String optString(java.lang.String)>("__type");

        if $r2 == null goto label01;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label02;

     label01:
        $r3 = staticinvoke <com.parse.Parse: java.util.Map convertJSONObjectToMap(org.json.JSONObject)>($r1);

        return $r3;

     label02:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("Date");

        if $z0 == 0 goto label03;

        $r2 = virtualinvoke $r1.<org.json.JSONObject: java.lang.String optString(java.lang.String)>("iso");

        $r4 = staticinvoke <com.parse.Parse: java.util.Date parseDate(java.lang.String)>($r2);

        return $r4;

     label03:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("Bytes");

        if $z0 == 0 goto label04;

        $r2 = virtualinvoke $r1.<org.json.JSONObject: java.lang.String optString(java.lang.String)>("base64");

        $r5 = staticinvoke <com.parse.codec.binary.Base64: byte[] decodeBase64(java.lang.String)>($r2);

        return $r5;

     label04:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("Pointer");

        if $z0 == 0 goto label05;

        $r2 = virtualinvoke $r1.<org.json.JSONObject: java.lang.String optString(java.lang.String)>("className");

        $r6 = virtualinvoke $r1.<org.json.JSONObject: java.lang.String optString(java.lang.String)>("objectId");

        $r7 = staticinvoke <com.parse.ParseObject: com.parse.ParseObject createWithoutData(java.lang.String,java.lang.String)>($r2, $r6);

        return $r7;

     label05:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("File");

        if $z0 == 0 goto label06;

        $r8 = new com.parse.ParseFile;

        $r2 = virtualinvoke $r1.<org.json.JSONObject: java.lang.String optString(java.lang.String)>("name");

        $r6 = virtualinvoke $r1.<org.json.JSONObject: java.lang.String optString(java.lang.String)>("url");

        specialinvoke $r8.<com.parse.ParseFile: void <init>(java.lang.String,java.lang.String)>($r2, $r6);

        return $r8;

     label06:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("GeoPoint");

        if $z0 == 0 goto label10;

     label07:
        $d0 = virtualinvoke $r1.<org.json.JSONObject: double getDouble(java.lang.String)>("latitude");

        $d1 = virtualinvoke $r1.<org.json.JSONObject: double getDouble(java.lang.String)>("longitude");

     label08:
        $r9 = new com.parse.ParseGeoPoint;

        specialinvoke $r9.<com.parse.ParseGeoPoint: void <init>(double,double)>($d0, $d1);

        return $r9;

     label09:
        $r10 := @caughtexception;

        $r11 = new java.lang.RuntimeException;

        $r2 = virtualinvoke $r10.<org.json.JSONException: java.lang.String getMessage()>();

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String)>($r2);

        throw $r11;

     label10:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("Object");

        if $z0 == 0 goto label14;

        $r2 = virtualinvoke $r1.<org.json.JSONObject: java.lang.String optString(java.lang.String)>("className");

        $r7 = staticinvoke <com.parse.ParseObject: com.parse.ParseObject create(java.lang.String)>($r2);

        $r12 = new org.json.JSONObject;

        specialinvoke $r12.<org.json.JSONObject: void <init>()>();

     label11:
        virtualinvoke $r12.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("data", $r1);

     label12:
        virtualinvoke $r7.<com.parse.ParseObject: void clearData()>();

        virtualinvoke $r7.<com.parse.ParseObject: void mergeObject(org.json.JSONObject,boolean)>($r12, 0);

        return $r7;

     label13:
        $r13 := @caughtexception;

        $r11 = new java.lang.RuntimeException;

        $r2 = virtualinvoke $r13.<org.json.JSONException: java.lang.String getMessage()>();

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String)>($r2);

        throw $r11;

     label14:
        return null;

        catch org.json.JSONException from label07 to label08 with label09;
        catch org.json.JSONException from label11 to label12 with label13;
    }

    static org.json.JSONArray encodeAsJSONArray(java.util.List)
    {
        java.util.Iterator $r2;
        java.lang.IllegalArgumentException $r4;
        java.util.List $r0;
        java.lang.Object $r3;
        java.lang.StringBuilder $r5;
        java.lang.Class $r6;
        java.lang.String $r7;
        org.json.JSONArray $r1;
        boolean $z0;

        $r0 := @parameter0: java.util.List;

        $r1 = new org.json.JSONArray;

        specialinvoke $r1.<org.json.JSONArray: void <init>()>();

        $r2 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $z0 = staticinvoke <com.parse.Parse: boolean isValidType(java.lang.Object)>($r3);

        if $z0 != 0 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("invalid type for value in array: ");

        $r6 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String toString()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r4;

     label2:
        $r3 = staticinvoke <com.parse.Parse: java.lang.Object maybeEncodeJSONObject(java.lang.Object)>($r3);

        virtualinvoke $r1.<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>($r3);

        goto label1;

     label3:
        return $r1;
    }

    static java.lang.String encodeDate(java.util.Date)
    {
        java.lang.Throwable $r3;
        java.util.Date $r0;
        java.lang.String $r1;
        java.text.DateFormat $r2;

        $r0 := @parameter0: java.util.Date;

        entermonitor class "Lcom/parse/Parse;";

     label1:
        $r2 = <com.parse.Parse: java.text.DateFormat dateFormat>;

        $r1 = virtualinvoke $r2.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r0);

     label2:
        exitmonitor class "Lcom/parse/Parse;";

        return $r1;

     label3:
        $r3 := @caughtexception;

        exitmonitor class "Lcom/parse/Parse;";

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    static org.json.JSONObject encodeJSONObject(java.lang.Object)
    {
        byte[] $r3;
        java.util.Date $r1;
        com.parse.ParseObject $r7;
        com.parse.w $r11;
        org.json.JSONException $r5;
        org.json.JSONObject $r2;
        com.parse.ParseACL $r10;
        com.parse.p $r13;
        java.util.Map $r16;
        java.lang.String $r4;
        java.lang.Number $r12;
        com.parse.j $r14;
        boolean $z0;
        double $d0;
        java.util.Map$Entry $r19;
        java.util.Iterator $r18;
        com.parse.ParseGeoPoint $r9;
        java.util.Collection $r15;
        java.util.Set $r17;
        java.lang.RuntimeException $r6;
        com.parse.ParseRelation $r20;
        com.parse.ParseFile $r8;
        java.lang.Object $r0;

        $r0 := @parameter0: java.lang.Object;

        $z0 = $r0 instanceof java.util.Date;

        if $z0 == 0 goto label03;

        $r1 = (java.util.Date) $r0;

     label01:
        $r2 = staticinvoke <com.parse.Parse: org.json.JSONObject dateToObject(java.util.Date)>($r1);

     label02:
        return $r2;

     label03:
        $z0 = $r0 instanceof byte[];

        if $z0 == 0 goto label09;

        $r2 = new org.json.JSONObject;

     label04:
        specialinvoke $r2.<org.json.JSONObject: void <init>()>();

        virtualinvoke $r2.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("__type", "Bytes");

     label05:
        $r3 = (byte[]) $r0;

     label06:
        $r4 = staticinvoke <com.parse.codec.binary.Base64: java.lang.String encodeBase64String(byte[])>($r3);

        virtualinvoke $r2.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("base64", $r4);

     label07:
        return $r2;

     label08:
        $r5 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        $r4 = virtualinvoke $r5.<org.json.JSONException: java.lang.String getMessage()>();

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>($r4);

        throw $r6;

     label09:
        $z0 = $r0 instanceof com.parse.ParseObject;

        if $z0 == 0 goto label12;

        $r7 = (com.parse.ParseObject) $r0;

     label10:
        $r2 = staticinvoke <com.parse.Parse: org.json.JSONObject parseObjectToJSONPointer(com.parse.ParseObject)>($r7);

     label11:
        return $r2;

     label12:
        $z0 = $r0 instanceof com.parse.ParseFile;

        if $z0 == 0 goto label15;

        $r8 = (com.parse.ParseFile) $r0;

        $r2 = new org.json.JSONObject;

     label13:
        specialinvoke $r2.<org.json.JSONObject: void <init>()>();

        virtualinvoke $r2.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("__type", "File");

        $r4 = virtualinvoke $r8.<com.parse.ParseFile: java.lang.String getUrl()>();

        virtualinvoke $r2.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("url", $r4);

        $r4 = virtualinvoke $r8.<com.parse.ParseFile: java.lang.String getName()>();

        virtualinvoke $r2.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("name", $r4);

     label14:
        return $r2;

     label15:
        $z0 = $r0 instanceof com.parse.ParseGeoPoint;

        if $z0 == 0 goto label18;

        $r9 = (com.parse.ParseGeoPoint) $r0;

        $r2 = new org.json.JSONObject;

     label16:
        specialinvoke $r2.<org.json.JSONObject: void <init>()>();

        virtualinvoke $r2.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("__type", "GeoPoint");

        $d0 = virtualinvoke $r9.<com.parse.ParseGeoPoint: double getLatitude()>();

        virtualinvoke $r2.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,double)>("latitude", $d0);

        $d0 = virtualinvoke $r9.<com.parse.ParseGeoPoint: double getLongitude()>();

        virtualinvoke $r2.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,double)>("longitude", $d0);

     label17:
        return $r2;

     label18:
        $z0 = $r0 instanceof com.parse.ParseACL;

        if $z0 == 0 goto label21;

        $r10 = (com.parse.ParseACL) $r0;

     label19:
        $r2 = virtualinvoke $r10.<com.parse.ParseACL: org.json.JSONObject toJSONObject()>();

     label20:
        return $r2;

     label21:
        $z0 = $r0 instanceof com.parse.w;

        if $z0 == 0 goto label24;

        $r11 = (com.parse.w) $r0;

        $r2 = new org.json.JSONObject;

     label22:
        specialinvoke $r2.<org.json.JSONObject: void <init>()>();

        $r4 = virtualinvoke $r11.<com.parse.w: java.lang.String b()>();

        virtualinvoke $r2.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("__op", $r4);

        $r12 = virtualinvoke $r11.<com.parse.w: java.lang.Number a()>();

        virtualinvoke $r2.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("amount", $r12);

     label23:
        return $r2;

     label24:
        $z0 = $r0 instanceof com.parse.p;

        if $z0 == 0 goto label27;

        $r13 = (com.parse.p) $r0;

        $r2 = new org.json.JSONObject;

     label25:
        specialinvoke $r2.<org.json.JSONObject: void <init>()>();

        $r4 = virtualinvoke $r13.<com.parse.p: java.lang.String b()>();

        virtualinvoke $r2.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("__op", $r4);

     label26:
        return $r2;

     label27:
        $z0 = $r0 instanceof com.parse.j;

        if $z0 == 0 goto label30;

        $r14 = (com.parse.j) $r0;

        $r2 = new org.json.JSONObject;

     label28:
        specialinvoke $r2.<org.json.JSONObject: void <init>()>();

        $r4 = virtualinvoke $r14.<com.parse.j: java.lang.String b()>();

        virtualinvoke $r2.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("__op", $r4);

        $r15 = virtualinvoke $r14.<com.parse.j: java.util.Collection a()>();

        $r0 = staticinvoke <com.parse.Parse: java.lang.Object maybeEncodeJSONObject(java.lang.Object)>($r15);

        virtualinvoke $r2.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("objects", $r0);

     label29:
        return $r2;

     label30:
        $z0 = $r0 instanceof java.util.Map;

        if $z0 == 0 goto label41;

        $r16 = (java.util.Map) $r0;

        $r2 = new org.json.JSONObject;

     label31:
        specialinvoke $r2.<org.json.JSONObject: void <init>()>();

        $r17 = interfaceinvoke $r16.<java.util.Map: java.util.Set entrySet()>();

        $r18 = interfaceinvoke $r17.<java.util.Set: java.util.Iterator iterator()>();

     label32:
        $z0 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

     label33:
        if $z0 == 0 goto label40;

     label34:
        $r0 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

     label35:
        $r19 = (java.util.Map$Entry) $r0;

     label36:
        $r0 = interfaceinvoke $r19.<java.util.Map$Entry: java.lang.Object getKey()>();

     label37:
        $r4 = (java.lang.String) $r0;

     label38:
        $r0 = interfaceinvoke $r19.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r0 = staticinvoke <com.parse.Parse: java.lang.Object maybeEncodeJSONObject(java.lang.Object)>($r0);

        virtualinvoke $r2.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>($r4, $r0);

     label39:
        goto label32;

     label40:
        return $r2;

     label41:
        $z0 = $r0 instanceof com.parse.ParseRelation;

        if $z0 == 0 goto label44;

        $r20 = (com.parse.ParseRelation) $r0;

     label42:
        $r2 = virtualinvoke $r20.<com.parse.ParseRelation: org.json.JSONObject encodeToJSON()>();

     label43:
        return $r2;

     label44:
        return null;

        catch org.json.JSONException from label01 to label02 with label08;
        catch org.json.JSONException from label04 to label05 with label08;
        catch org.json.JSONException from label06 to label07 with label08;
        catch org.json.JSONException from label10 to label11 with label08;
        catch org.json.JSONException from label13 to label14 with label08;
        catch org.json.JSONException from label16 to label17 with label08;
        catch org.json.JSONException from label19 to label20 with label08;
        catch org.json.JSONException from label22 to label23 with label08;
        catch org.json.JSONException from label25 to label26 with label08;
        catch org.json.JSONException from label28 to label29 with label08;
        catch org.json.JSONException from label31 to label33 with label08;
        catch org.json.JSONException from label34 to label35 with label08;
        catch org.json.JSONException from label36 to label37 with label08;
        catch org.json.JSONException from label38 to label39 with label08;
        catch org.json.JSONException from label42 to label43 with label08;
    }

    static com.parse.ParseCommandCache getCommandCache()
    {
        java.lang.Throwable $r2;
        android.content.Context $r0;
        com.parse.ParseCommandCache $r1;

        entermonitor class "Lcom/parse/Parse;";

     label1:
        $r1 = <com.parse.Parse: com.parse.ParseCommandCache commandCache>;

        if $r1 != null goto label2;

        staticinvoke <com.parse.Parse: void checkContext()>();

        $r1 = new com.parse.ParseCommandCache;

        $r0 = <com.parse.Parse: android.content.Context applicationContext>;

        specialinvoke $r1.<com.parse.ParseCommandCache: void <init>(android.content.Context)>($r0);

        <com.parse.Parse: com.parse.ParseCommandCache commandCache> = $r1;

     label2:
        $r1 = <com.parse.Parse: com.parse.ParseCommandCache commandCache>;

     label3:
        exitmonitor class "Lcom/parse/Parse;";

        return $r1;

     label4:
        $r2 := @caughtexception;

        exitmonitor class "Lcom/parse/Parse;";

        throw $r2;

        catch java.lang.Throwable from label1 to label3 with label4;
    }

    static long getKeyValueCacheAge(java.io.File)
    {
        java.lang.Throwable $r2;
        int $i0;
        long $l1;
        java.lang.String $r1;
        java.io.File $r0;

        $r0 := @parameter0: java.io.File;

        $r1 = virtualinvoke $r0.<java.io.File: java.lang.String getName()>();

     label1:
        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(int)>(46);

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r1);

     label2:
        return $l1;

     label3:
        $r2 := @caughtexception;

        return 0L;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    static java.io.File getKeyValueCacheDir()
    {
        java.lang.Throwable $r4;
        android.content.Context $r0;
        java.lang.RuntimeException $r3;
        java.io.File $r1, $r2;
        boolean $z0;

        entermonitor class "Lcom/parse/Parse;";

     label1:
        staticinvoke <com.parse.Parse: void checkContext()>();

        $r0 = <com.parse.Parse: android.content.Context applicationContext>;

        $r1 = virtualinvoke $r0.<android.content.Context: java.io.File getCacheDir()>();

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, "ParseKeyValueCache");

        $z0 = virtualinvoke $r2.<java.io.File: boolean isDirectory()>();

        if $z0 != 0 goto label3;

        $z0 = virtualinvoke $r2.<java.io.File: boolean mkdir()>();

     label2:
        if $z0 == 0 goto label4;

     label3:
        exitmonitor class "Lcom/parse/Parse;";

        return $r2;

     label4:
        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("could not create Parse cache directory");

        throw $r3;

     label5:
        $r4 := @caughtexception;

        exitmonitor class "Lcom/parse/Parse;";

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label4 to label5 with label5;
    }

    static java.io.File getKeyValueCacheFile(java.lang.String)
    {
        com.parse.d $r1;
        int $i0;
        java.lang.StringBuilder $r2;
        java.lang.String $r0;
        java.io.File[] $r4;
        java.io.File $r3;

        $r0 := @parameter0: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>(".");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3 = staticinvoke <com.parse.Parse: java.io.File getKeyValueCacheDir()>();

        $r1 = new com.parse.d;

        specialinvoke $r1.<com.parse.d: void <init>(java.lang.String)>($r0);

        $r4 = virtualinvoke $r3.<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>($r1);

        $i0 = lengthof $r4;

        if $i0 != 0 goto label1;

        return null;

     label1:
        $r3 = $r4[0];

        return $r3;
    }

    public static int getLogLevel()
    {
        int i0;

        i0 = <com.parse.Parse: int logLevel>;

        return i0;
    }

    static java.io.File getParseDir()
    {
        java.lang.Throwable $r2;
        android.content.Context $r1;
        java.io.File $r0;

        entermonitor class "Lcom/parse/Parse;";

     label1:
        staticinvoke <com.parse.Parse: void checkContext()>();

        $r1 = <com.parse.Parse: android.content.Context applicationContext>;

        $r0 = virtualinvoke $r1.<android.content.Context: java.io.File getDir(java.lang.String,int)>("Parse", 0);

     label2:
        exitmonitor class "Lcom/parse/Parse;";

        return $r0;

     label3:
        $r2 := @caughtexception;

        exitmonitor class "Lcom/parse/Parse;";

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    static boolean hasPermission(java.lang.String)
    {
        int $i0;
        android.content.Context $r1;
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        staticinvoke <com.parse.Parse: void checkContext()>();

        $r1 = <com.parse.Parse: android.content.Context applicationContext>;

        $i0 = virtualinvoke $r1.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.ACCESS_NETWORK_STATE");

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static void initialize(android.content.Context, java.lang.String, java.lang.String)
    {
        android.content.Context $r0;
        com.parse.c $r3;
        java.lang.String $r1, $r2;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        <com.parse.Parse: java.lang.String applicationId> = $r1;

        <com.parse.Parse: java.lang.String clientKey> = $r2;

        if $r0 == null goto label1;

        $r0 = virtualinvoke $r0.<android.content.Context: android.content.Context getApplicationContext()>();

        <com.parse.Parse: android.content.Context applicationContext> = $r0;

        staticinvoke <com.parse.Parse: void checkCacheApplicationId()>();

        $r3 = new com.parse.c;

        specialinvoke $r3.<com.parse.c: void <init>(java.lang.String)>("Parse.initialize Starting Command Cache");

        virtualinvoke $r3.<com.parse.c: void start()>();

     label1:
        return;
    }

    static boolean isContainerObject(java.lang.Object)
    {
        java.lang.Object $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.Object;

        $z0 = $r0 instanceof org.json.JSONObject;

        if $z0 != 0 goto label1;

        $z0 = $r0 instanceof org.json.JSONArray;

        if $z0 != 0 goto label1;

        $z0 = $r0 instanceof com.parse.ParseACL;

        if $z0 != 0 goto label1;

        $z0 = $r0 instanceof com.parse.ParseGeoPoint;

        if $z0 != 0 goto label1;

        $z0 = $r0 instanceof java.util.List;

        if $z0 != 0 goto label1;

        $z0 = $r0 instanceof java.util.Map;

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    static boolean isValidType(java.lang.Object)
    {
        java.lang.Object $r0, $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.Object;

        $z0 = $r0 instanceof org.json.JSONObject;

        if $z0 != 0 goto label1;

        $z0 = $r0 instanceof org.json.JSONArray;

        if $z0 != 0 goto label1;

        $z0 = $r0 instanceof java.lang.String;

        if $z0 != 0 goto label1;

        $z0 = $r0 instanceof java.lang.Number;

        if $z0 != 0 goto label1;

        $z0 = $r0 instanceof java.lang.Boolean;

        if $z0 != 0 goto label1;

        $r1 = <org.json.JSONObject: java.lang.Object NULL>;

        if $r0 == $r1 goto label1;

        $z0 = $r0 instanceof com.parse.ParseObject;

        if $z0 != 0 goto label1;

        $z0 = $r0 instanceof com.parse.ParseACL;

        if $z0 != 0 goto label1;

        $z0 = $r0 instanceof com.parse.ParseFile;

        if $z0 != 0 goto label1;

        $z0 = $r0 instanceof com.parse.ParseGeoPoint;

        if $z0 != 0 goto label1;

        $z0 = $r0 instanceof java.util.Date;

        if $z0 != 0 goto label1;

        $z0 = $r0 instanceof byte[];

        if $z0 != 0 goto label1;

        $z0 = $r0 instanceof java.util.List;

        if $z0 != 0 goto label1;

        $z0 = $r0 instanceof java.util.Map;

        if $z0 != 0 goto label1;

        $z0 = $r0 instanceof com.parse.ParseRelation;

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    static java.lang.String join(java.util.Collection, java.lang.String)
    {
        java.util.Iterator $r3;
        java.lang.StringBuffer $r2;
        java.util.Collection $r0;
        java.lang.Object $r4;
        java.lang.String $r1, $r5;
        boolean $z0;

        $r0 := @parameter0: java.util.Collection;

        $r1 := @parameter1: java.lang.String;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = interfaceinvoke $r0.<java.util.Collection: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.lang.String) $r4;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.lang.String) $r4;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        goto label1;

     label2:
        $r1 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r1;
    }

    static java.lang.Object jsonFromKeyValueCache(java.lang.String, long)
    {
        org.json.JSONException $r4;
        org.json.JSONTokener $r2;
        long $l0;
        java.lang.Object $r3;
        java.lang.StringBuilder $r5;
        java.lang.String $r0, $r1;

        $r0 := @parameter0: java.lang.String;

        $l0 := @parameter1: long;

        $r1 = staticinvoke <com.parse.Parse: java.lang.String loadFromKeyValueCache(java.lang.String,long)>($r0, $l0);

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = new org.json.JSONTokener;

        specialinvoke $r2.<org.json.JSONTokener: void <init>(java.lang.String)>($r1);

     label2:
        $r3 = virtualinvoke $r2.<org.json.JSONTokener: java.lang.Object nextValue()>();

     label3:
        return $r3;

     label4:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("corrupted cache for ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.parse.Parse: void logE(java.lang.String,java.lang.String,java.lang.Throwable)>("com.parse.Parse", $r1, $r4);

        staticinvoke <com.parse.Parse: void clearFromKeyValueCache(java.lang.String)>($r0);

        return null;

        catch org.json.JSONException from label2 to label3 with label4;
    }

    static java.lang.Iterable keys(org.json.JSONObject)
    {
        com.parse.f $r1;
        org.json.JSONObject $r0;

        $r0 := @parameter0: org.json.JSONObject;

        $r1 = new com.parse.f;

        specialinvoke $r1.<com.parse.f: void <init>(org.json.JSONObject)>($r0);

        return $r1;
    }

    static java.lang.String loadFromKeyValueCache(java.lang.String, long)
    {
        java.lang.Throwable $r5;
        java.io.RandomAccessFile $r3, $r7;
        byte[] $r4;
        java.util.Date $r2, $r6;
        long $l0, $l1;
        java.io.File $r1;
        byte $b2;
        int $i3;
        java.lang.String $r0, $r8;

        $r0 := @parameter0: java.lang.String;

        $l0 := @parameter1: long;

        $r1 = staticinvoke <com.parse.Parse: java.io.File getKeyValueCacheFile(java.lang.String)>($r0);

        if $r1 != null goto label1;

        return null;

     label1:
        $r6 = new java.util.Date;

        $r2 = $r6;

        specialinvoke $r6.<java.util.Date: void <init>()>();

        $l1 = virtualinvoke $r2.<java.util.Date: long getTime()>();

        $l0 = $l1 - $l0;

        $l0 = staticinvoke <java.lang.Math: long max(long,long)>(0L, $l0);

        $l1 = staticinvoke <com.parse.Parse: long getKeyValueCacheAge(java.io.File)>($r1);

        $b2 = $l1 cmp $l0;

        $i3 = (int) $b2;

        if $i3 < 0 goto label9;

        $l0 = virtualinvoke $r2.<java.util.Date: long getTime()>();

        virtualinvoke $r1.<java.io.File: boolean setLastModified(long)>($l0);

        $r7 = new java.io.RandomAccessFile;

        $r3 = $r7;

     label2:
        specialinvoke $r7.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>($r1, "r");

        $l0 = virtualinvoke $r3.<java.io.RandomAccessFile: long length()>();

     label3:
        $i3 = (int) $l0;

        $r4 = newarray (byte)[$i3];

     label4:
        virtualinvoke $r3.<java.io.RandomAccessFile: void readFully(byte[])>($r4);

        virtualinvoke $r3.<java.io.RandomAccessFile: void close()>();

     label5:
        $r8 = new java.lang.String;

     label6:
        specialinvoke $r8.<java.lang.String: void <init>(byte[],java.lang.String)>($r4, "UTF-8");

     label7:
        return $r8;

     label8:
        $r5 := @caughtexception;

        staticinvoke <com.parse.Parse: void logE(java.lang.String,java.lang.String,java.lang.Throwable)>("com.parse.Parse", "error reading from cache", $r5);

     label9:
        return null;

        catch java.io.IOException from label2 to label3 with label8;
        catch java.io.IOException from label4 to label5 with label8;
        catch java.io.IOException from label6 to label7 with label8;
    }

    private static void log(int, java.lang.String, java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable $r2;
        int $i0, $i1;
        java.lang.StringBuilder $r3;
        java.lang.String $r0, $r1;

        $i0 := @parameter0: int;

        $r0 := @parameter1: java.lang.String;

        $r1 := @parameter2: java.lang.String;

        $r2 := @parameter3: java.lang.Throwable;

        $i1 = <com.parse.Parse: int logLevel>;

        if $i0 < $i1 goto label2;

        if $r2 != null goto label1;

        $i0 = <com.parse.Parse: int logLevel>;

        staticinvoke <android.util.Log: int println(int,java.lang.String,java.lang.String)>($i0, $r0, $r1);

        return;

     label1:
        $i0 = <com.parse.Parse: int logLevel>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $r1 = staticinvoke <android.util.Log: java.lang.String getStackTraceString(java.lang.Throwable)>($r2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int println(int,java.lang.String,java.lang.String)>($i0, $r0, $r1);

     label2:
        return;
    }

    static void logD(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        staticinvoke <com.parse.Parse: void log(int,java.lang.String,java.lang.String,java.lang.Throwable)>(3, $r0, $r1, null);

        return;
    }

    static void logD(java.lang.String, java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable $r2;
        java.lang.String $r0, $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.Throwable;

        staticinvoke <com.parse.Parse: void log(int,java.lang.String,java.lang.String,java.lang.Throwable)>(3, $r0, $r1, $r2);

        return;
    }

    static void logE(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        staticinvoke <com.parse.Parse: void logE(java.lang.String,java.lang.String,java.lang.Throwable)>("com.parse.ParsePushRouter", $r1, null);

        return;
    }

    static void logE(java.lang.String, java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable $r2;
        java.lang.String $r0, $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.Throwable;

        staticinvoke <com.parse.Parse: void log(int,java.lang.String,java.lang.String,java.lang.Throwable)>(6, $r0, $r1, $r2);

        return;
    }

    static void logI(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        staticinvoke <com.parse.Parse: void log(int,java.lang.String,java.lang.String,java.lang.Throwable)>(4, $r0, $r1, null);

        return;
    }

    static void logI(java.lang.String, java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable $r2;
        java.lang.String $r0, $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.Throwable;

        staticinvoke <com.parse.Parse: void log(int,java.lang.String,java.lang.String,java.lang.Throwable)>(4, $r0, $r1, $r2);

        return;
    }

    static void logV(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        staticinvoke <com.parse.Parse: void log(int,java.lang.String,java.lang.String,java.lang.Throwable)>(2, "com.parse.ParseInstallation", $r1, null);

        return;
    }

    static void logV(java.lang.String, java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable $r2;
        java.lang.String $r0, $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.Throwable;

        staticinvoke <com.parse.Parse: void log(int,java.lang.String,java.lang.String,java.lang.Throwable)>(2, $r0, $r1, $r2);

        return;
    }

    static void logW(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        staticinvoke <com.parse.Parse: void log(int,java.lang.String,java.lang.String,java.lang.Throwable)>(5, "com.parse.ParsePushRouter", $r1, null);

        return;
    }

    static void logW(java.lang.String, java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable $r2;
        java.lang.String $r0, $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.Throwable;

        staticinvoke <com.parse.Parse: void log(int,java.lang.String,java.lang.String,java.lang.Throwable)>(5, $r0, $r1, $r2);

        return;
    }

    static java.lang.Object maybeEncodeJSONObject(java.lang.Object)
    {
        java.util.List $r1;
        org.json.JSONObject $r3;
        java.lang.Object $r0;
        org.json.JSONArray $r2;
        boolean $z0;

        $r0 := @parameter0: java.lang.Object;

        $z0 = $r0 instanceof java.util.List;

        if $z0 == 0 goto label1;

        $r1 = (java.util.List) $r0;

        $r2 = staticinvoke <com.parse.Parse: org.json.JSONArray encodeAsJSONArray(java.util.List)>($r1);

        return $r2;

     label1:
        $r3 = staticinvoke <com.parse.Parse: org.json.JSONObject encodeJSONObject(java.lang.Object)>($r0);

        if $r3 == null goto label2;

        return $r3;

     label2:
        return $r0;
    }

    static java.lang.Object maybeReferenceAndEncode(java.lang.Object)
    {
        java.lang.IllegalStateException $r3;
        java.lang.Object $r0;
        java.lang.String $r2;
        com.parse.ParseObject $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.Object;

        $z0 = $r0 instanceof com.parse.ParseObject;

        if $z0 == 0 goto label1;

        $r1 = (com.parse.ParseObject) $r0;

        $r2 = virtualinvoke $r1.<com.parse.ParseObject: java.lang.String getObjectId()>();

        if $r2 != null goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("unable to encode an association with an unsaved ParseObject");

        throw $r3;

     label1:
        $r0 = staticinvoke <com.parse.Parse: java.lang.Object maybeEncodeJSONObject(java.lang.Object)>($r0);

        return $r0;
    }

    static java.util.Date parseDate(java.lang.String)
    {
        java.lang.Throwable $r3, $r5;
        java.util.Date $r2;
        java.lang.StringBuilder $r4;
        java.lang.String $r0;
        java.text.DateFormat $r1;

        $r0 := @parameter0: java.lang.String;

        entermonitor class "Lcom/parse/Parse;";

     label1:
        $r1 = <com.parse.Parse: java.text.DateFormat dateFormat>;

     label2:
        $r2 = virtualinvoke $r1.<java.text.DateFormat: java.util.Date parse(java.lang.String)>($r0);

     label3:
        exitmonitor class "Lcom/parse/Parse;";

        return $r2;

     label4:
        $r3 := @caughtexception;

     label5:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("could not parse date: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.parse.Parse: void logE(java.lang.String,java.lang.String,java.lang.Throwable)>("com.parse.Parse", $r0, $r3);

     label6:
        $r2 = null;

        goto label3;

     label7:
        $r5 := @caughtexception;

        exitmonitor class "Lcom/parse/Parse;";

        throw $r5;

        catch java.text.ParseException from label2 to label3 with label4;
        catch java.lang.Throwable from label1 to label3 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    static org.json.JSONObject parseObjectToJSONPointer(com.parse.ParseObject)
    {
        org.json.JSONException $r3;
        org.json.JSONObject $r1;
        java.lang.String $r2;
        java.lang.RuntimeException $r4;
        com.parse.ParseObject $r0;

        $r0 := @parameter0: com.parse.ParseObject;

        $r1 = new org.json.JSONObject;

        specialinvoke $r1.<org.json.JSONObject: void <init>()>();

     label1:
        virtualinvoke $r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("__type", "Pointer");

        $r2 = virtualinvoke $r0.<com.parse.ParseObject: java.lang.String getClassName()>();

        virtualinvoke $r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("className", $r2);

        $r2 = virtualinvoke $r0.<com.parse.ParseObject: java.lang.String getObjectId()>();

        virtualinvoke $r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("objectId", $r2);

     label2:
        return $r1;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        $r2 = virtualinvoke $r3.<org.json.JSONException: java.lang.String getMessage()>();

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>($r2);

        throw $r4;

        catch org.json.JSONException from label1 to label2 with label3;
    }

    static void recursiveDelete(java.io.File)
    {
        java.lang.Throwable $r3;
        int $i0, $i1;
        java.io.File[] $r2;
        java.io.File $r0, $r1;
        boolean $z0;

        $r0 := @parameter0: java.io.File;

        entermonitor class "Lcom/parse/Parse;";

     label1:
        $z0 = virtualinvoke $r0.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label3;

        $r2 = virtualinvoke $r0.<java.io.File: java.io.File[] listFiles()>();

        $i0 = lengthof $r2;

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label3;

        $r1 = $r2[$i1];

        staticinvoke <com.parse.Parse: void recursiveDelete(java.io.File)>($r1);

        $i1 = $i1 + 1;

        goto label2;

     label3:
        virtualinvoke $r0.<java.io.File: boolean delete()>();

     label4:
        exitmonitor class "Lcom/parse/Parse;";

        return;

     label5:
        $r3 := @caughtexception;

        exitmonitor class "Lcom/parse/Parse;";

        throw $r3;

        catch java.lang.Throwable from label1 to label4 with label5;
    }

    static void requirePermission(java.lang.String)
    {
        java.lang.IllegalStateException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <com.parse.Parse: boolean hasPermission(java.lang.String)>("android.permission.ACCESS_NETWORK_STATE");

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("To use this functionality, add this to your AndroidManifest.xml:\n<uses-permission android:name=\"");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("android.permission.ACCESS_NETWORK_STATE");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" />");

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r0);

        throw $r1;

     label1:
        return;
    }

    static void saveToKeyValueCache(java.lang.String, java.lang.String)
    {
        java.lang.Throwable $r6, $r7;
        byte[] $r4;
        long $l5, $l6;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String $r0, $r1;
        com.parse.e $r9;
        java.io.FileOutputStream $r3, $r8;
        java.io.File $r2;
        java.io.File[] $r5;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $i0 = 0;

        $r2 = staticinvoke <com.parse.Parse: java.io.File getKeyValueCacheFile(java.lang.String)>($r0);

        if $r2 == null goto label01;

        virtualinvoke $r2.<java.io.File: boolean delete()>();

     label01:
        $r2 = staticinvoke <com.parse.Parse: java.io.File createKeyValueCacheFile(java.lang.String)>($r0);

        $r8 = new java.io.FileOutputStream;

        $r3 = $r8;

     label02:
        specialinvoke $r8.<java.io.FileOutputStream: void <init>(java.io.File)>($r2);

        $r4 = virtualinvoke $r1.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        virtualinvoke $r3.<java.io.FileOutputStream: void write(byte[])>($r4);

        virtualinvoke $r3.<java.io.FileOutputStream: void close()>();

     label03:
        $r2 = staticinvoke <com.parse.Parse: java.io.File getKeyValueCacheDir()>();

        $r5 = virtualinvoke $r2.<java.io.File: java.io.File[] listFiles()>();

        $i1 = lengthof $r5;

        $i2 = lengthof $r5;

        $i3 = 0;

        $i4 = 0;

     label04:
        if $i3 >= $i2 goto label05;

        $r2 = $r5[$i3];

        $l5 = (long) $i4;

        $l6 = virtualinvoke $r2.<java.io.File: long length()>();

        $l5 = $l5 + $l6;

        $i3 = $i3 + 1;

        $i4 = (int) $l5;

        goto label04;

     label05:
        $i2 = <com.parse.Parse: int maxKeyValueCacheFiles>;

        if $i1 > $i2 goto label06;

        $i2 = <com.parse.Parse: int maxKeyValueCacheBytes>;

        if $i4 <= $i2 goto label09;

     label06:
        $r9 = new com.parse.e;

        specialinvoke $r9.<com.parse.e: void <init>()>();

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>($r5, $r9);

        $i2 = lengthof $r5;

     label07:
        if $i0 >= $i2 goto label12;

        $r2 = $r5[$i0];

        $i1 = $i1 + -1;

        $l5 = (long) $i4;

        $l6 = virtualinvoke $r2.<java.io.File: long length()>();

        $l5 = $l5 - $l6;

        $i4 = (int) $l5;

        virtualinvoke $r2.<java.io.File: boolean delete()>();

        $i3 = <com.parse.Parse: int maxKeyValueCacheFiles>;

        if $i1 > $i3 goto label08;

        $i3 = <com.parse.Parse: int maxKeyValueCacheBytes>;

        if $i4 <= $i3 goto label12;

     label08:
        $i0 = $i0 + 1;

        goto label07;

     label09:
        return;

     label10:
        $r6 := @caughtexception;

        goto label03;

     label11:
        $r7 := @caughtexception;

        goto label03;

     label12:
        return;

        catch java.io.UnsupportedEncodingException from label02 to label03 with label11;
        catch java.io.IOException from label02 to label03 with label10;
    }

    static void setContextIfNeeded(android.content.Context)
    {
        android.content.Context $r0, $r1;

        $r0 := @parameter0: android.content.Context;

        $r1 = <com.parse.Parse: android.content.Context applicationContext>;

        if $r1 != null goto label1;

        <com.parse.Parse: android.content.Context applicationContext> = $r0;

     label1:
        return;
    }

    public static void setLogLevel(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        <com.parse.Parse: int logLevel> = $i0;

        return;
    }
}
