public final class com.jakewharton.disklrucache.DiskLruCache extends java.lang.Object implements java.io.Closeable
{
    static final long ANY_SEQUENCE_NUMBER;
    private static final java.lang.String CLEAN;
    private static final java.lang.String DIRTY;
    static final java.lang.String JOURNAL_FILE;
    static final java.lang.String JOURNAL_FILE_BACKUP;
    static final java.lang.String JOURNAL_FILE_TEMP;
    static final java.util.regex.Pattern LEGAL_KEY_PATTERN;
    static final java.lang.String MAGIC;
    private static final java.io.OutputStream NULL_OUTPUT_STREAM;
    private static final java.lang.String READ;
    private static final java.lang.String REMOVE;
    static final java.lang.String VERSION_1;
    private final int appVersion;
    private final java.util.concurrent.Callable cleanupCallable;
    private final java.io.File directory;
    final java.util.concurrent.ThreadPoolExecutor executorService;
    private final java.io.File journalFile;
    private final java.io.File journalFileBackup;
    private final java.io.File journalFileTmp;
    private java.io.Writer journalWriter;
    private final java.util.LinkedHashMap lruEntries;
    private long maxSize;
    private long nextSequenceNumber;
    private int redundantOpCount;
    private long size;
    private final int valueCount;

    static void <clinit>()
    {
        com.jakewharton.disklrucache.DiskLruCache$2 $r1;
        java.util.regex.Pattern $r0;

        <com.jakewharton.disklrucache.DiskLruCache: java.lang.String VERSION_1> = "1";

        <com.jakewharton.disklrucache.DiskLruCache: java.lang.String REMOVE> = "REMOVE";

        <com.jakewharton.disklrucache.DiskLruCache: java.lang.String READ> = "READ";

        <com.jakewharton.disklrucache.DiskLruCache: java.lang.String MAGIC> = "libcore.io.DiskLruCache";

        <com.jakewharton.disklrucache.DiskLruCache: java.lang.String JOURNAL_FILE_TEMP> = "journal.tmp";

        <com.jakewharton.disklrucache.DiskLruCache: java.lang.String JOURNAL_FILE_BACKUP> = "journal.bkp";

        <com.jakewharton.disklrucache.DiskLruCache: java.lang.String JOURNAL_FILE> = "journal";

        <com.jakewharton.disklrucache.DiskLruCache: java.lang.String DIRTY> = "DIRTY";

        <com.jakewharton.disklrucache.DiskLruCache: java.lang.String CLEAN> = "CLEAN";

        <com.jakewharton.disklrucache.DiskLruCache: long ANY_SEQUENCE_NUMBER> = -1L;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[a-z0-9_-]{1,64}");

        <com.jakewharton.disklrucache.DiskLruCache: java.util.regex.Pattern LEGAL_KEY_PATTERN> = $r0;

        $r1 = new com.jakewharton.disklrucache.DiskLruCache$2;

        specialinvoke $r1.<com.jakewharton.disklrucache.DiskLruCache$2: void <init>()>();

        <com.jakewharton.disklrucache.DiskLruCache: java.io.OutputStream NULL_OUTPUT_STREAM> = $r1;

        return;
    }

    private void <init>(java.io.File, int, int, long)
    {
        com.jakewharton.disklrucache.DiskLruCache r0;
        java.util.concurrent.ThreadPoolExecutor $r5;
        com.jakewharton.disklrucache.DiskLruCache$1 $r6;
        long $l2;
        java.util.concurrent.LinkedBlockingQueue $r3;
        java.io.File $r1, $r7;
        java.util.concurrent.TimeUnit $r2;
        java.util.LinkedHashMap $r4;
        int $i0, $i1;

        r0 := @this: com.jakewharton.disklrucache.DiskLruCache;

        $r1 := @parameter0: java.io.File;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $l2 := @parameter3: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.jakewharton.disklrucache.DiskLruCache: long size> = 0L;

        $r4 = new java.util.LinkedHashMap;

        specialinvoke $r4.<java.util.LinkedHashMap: void <init>(int,float,boolean)>(0, 0.75F, 1);

        r0.<com.jakewharton.disklrucache.DiskLruCache: java.util.LinkedHashMap lruEntries> = $r4;

        r0.<com.jakewharton.disklrucache.DiskLruCache: long nextSequenceNumber> = 0L;

        $r5 = new java.util.concurrent.ThreadPoolExecutor;

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $r3 = new java.util.concurrent.LinkedBlockingQueue;

        specialinvoke $r3.<java.util.concurrent.LinkedBlockingQueue: void <init>()>();

        specialinvoke $r5.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue)>(0, 1, 60L, $r2, $r3);

        r0.<com.jakewharton.disklrucache.DiskLruCache: java.util.concurrent.ThreadPoolExecutor executorService> = $r5;

        $r6 = new com.jakewharton.disklrucache.DiskLruCache$1;

        specialinvoke $r6.<com.jakewharton.disklrucache.DiskLruCache$1: void <init>(com.jakewharton.disklrucache.DiskLruCache)>(r0);

        r0.<com.jakewharton.disklrucache.DiskLruCache: java.util.concurrent.Callable cleanupCallable> = $r6;

        r0.<com.jakewharton.disklrucache.DiskLruCache: java.io.File directory> = $r1;

        r0.<com.jakewharton.disklrucache.DiskLruCache: int appVersion> = 0;

        $r7 = new java.io.File;

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, "journal");

        r0.<com.jakewharton.disklrucache.DiskLruCache: java.io.File journalFile> = $r7;

        $r7 = new java.io.File;

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, "journal.tmp");

        r0.<com.jakewharton.disklrucache.DiskLruCache: java.io.File journalFileTmp> = $r7;

        $r7 = new java.io.File;

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, "journal.bkp");

        r0.<com.jakewharton.disklrucache.DiskLruCache: java.io.File journalFileBackup> = $r7;

        r0.<com.jakewharton.disklrucache.DiskLruCache: int valueCount> = 1;

        r0.<com.jakewharton.disklrucache.DiskLruCache: long maxSize> = $l2;

        return;
    }

    static java.io.Writer access$000(com.jakewharton.disklrucache.DiskLruCache)
    {
        java.io.Writer r1;
        com.jakewharton.disklrucache.DiskLruCache $r0;

        $r0 := @parameter0: com.jakewharton.disklrucache.DiskLruCache;

        r1 = $r0.<com.jakewharton.disklrucache.DiskLruCache: java.io.Writer journalWriter>;

        return r1;
    }

    static void access$100(com.jakewharton.disklrucache.DiskLruCache) throws java.io.IOException
    {
        com.jakewharton.disklrucache.DiskLruCache $r0;

        $r0 := @parameter0: com.jakewharton.disklrucache.DiskLruCache;

        specialinvoke $r0.<com.jakewharton.disklrucache.DiskLruCache: void trimToSize()>();

        return;
    }

    static com.jakewharton.disklrucache.DiskLruCache$Editor access$1600(com.jakewharton.disklrucache.DiskLruCache, java.lang.String, long) throws java.io.IOException
    {
        com.jakewharton.disklrucache.DiskLruCache$Editor $r2;
        com.jakewharton.disklrucache.DiskLruCache $r0;
        long $l0;
        java.lang.String $r1;

        $r0 := @parameter0: com.jakewharton.disklrucache.DiskLruCache;

        $r1 := @parameter1: java.lang.String;

        $l0 := @parameter2: long;

        $r2 = specialinvoke $r0.<com.jakewharton.disklrucache.DiskLruCache: com.jakewharton.disklrucache.DiskLruCache$Editor edit(java.lang.String,long)>($r1, $l0);

        return $r2;
    }

    static java.lang.String access$1700(java.io.InputStream) throws java.io.IOException
    {
        java.lang.String $r1;
        java.io.InputStream $r0;

        $r0 := @parameter0: java.io.InputStream;

        $r1 = staticinvoke <com.jakewharton.disklrucache.DiskLruCache: java.lang.String inputStreamToString(java.io.InputStream)>($r0);

        return $r1;
    }

    static int access$1800(com.jakewharton.disklrucache.DiskLruCache)
    {
        int i0;
        com.jakewharton.disklrucache.DiskLruCache $r0;

        $r0 := @parameter0: com.jakewharton.disklrucache.DiskLruCache;

        i0 = $r0.<com.jakewharton.disklrucache.DiskLruCache: int valueCount>;

        return i0;
    }

    static java.io.File access$1900(com.jakewharton.disklrucache.DiskLruCache)
    {
        com.jakewharton.disklrucache.DiskLruCache $r0;
        java.io.File r1;

        $r0 := @parameter0: com.jakewharton.disklrucache.DiskLruCache;

        r1 = $r0.<com.jakewharton.disklrucache.DiskLruCache: java.io.File directory>;

        return r1;
    }

    static boolean access$200(com.jakewharton.disklrucache.DiskLruCache)
    {
        com.jakewharton.disklrucache.DiskLruCache $r0;
        boolean $z0;

        $r0 := @parameter0: com.jakewharton.disklrucache.DiskLruCache;

        $z0 = specialinvoke $r0.<com.jakewharton.disklrucache.DiskLruCache: boolean journalRebuildRequired()>();

        return $z0;
    }

    static java.io.OutputStream access$2000()
    {
        java.io.OutputStream r0;

        r0 = <com.jakewharton.disklrucache.DiskLruCache: java.io.OutputStream NULL_OUTPUT_STREAM>;

        return r0;
    }

    static void access$2200(com.jakewharton.disklrucache.DiskLruCache, com.jakewharton.disklrucache.DiskLruCache$Editor, boolean) throws java.io.IOException
    {
        com.jakewharton.disklrucache.DiskLruCache$Editor $r1;
        com.jakewharton.disklrucache.DiskLruCache $r0;
        boolean $z0;

        $r0 := @parameter0: com.jakewharton.disklrucache.DiskLruCache;

        $r1 := @parameter1: com.jakewharton.disklrucache.DiskLruCache$Editor;

        $z0 := @parameter2: boolean;

        specialinvoke $r0.<com.jakewharton.disklrucache.DiskLruCache: void completeEdit(com.jakewharton.disklrucache.DiskLruCache$Editor,boolean)>($r1, $z0);

        return;
    }

    static void access$300(com.jakewharton.disklrucache.DiskLruCache) throws java.io.IOException
    {
        com.jakewharton.disklrucache.DiskLruCache $r0;

        $r0 := @parameter0: com.jakewharton.disklrucache.DiskLruCache;

        specialinvoke $r0.<com.jakewharton.disklrucache.DiskLruCache: void rebuildJournal()>();

        return;
    }

    static int access$402(com.jakewharton.disklrucache.DiskLruCache, int)
    {
        int $i0;
        com.jakewharton.disklrucache.DiskLruCache $r0;

        $r0 := @parameter0: com.jakewharton.disklrucache.DiskLruCache;

        $i0 := @parameter1: int;

        $r0.<com.jakewharton.disklrucache.DiskLruCache: int redundantOpCount> = $i0;

        return $i0;
    }

    private void checkNotClosed()
    {
        java.io.Writer $r1;
        java.lang.IllegalStateException $r2;
        com.jakewharton.disklrucache.DiskLruCache r0;

        r0 := @this: com.jakewharton.disklrucache.DiskLruCache;

        $r1 = r0.<com.jakewharton.disklrucache.DiskLruCache: java.io.Writer journalWriter>;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("cache is closed");

        throw $r2;

     label1:
        return;
    }

    private void completeEdit(com.jakewharton.disklrucache.DiskLruCache$Editor, boolean) throws java.io.IOException
    {
        java.lang.Throwable $r4;
        java.lang.IllegalStateException $r15;
        com.jakewharton.disklrucache.DiskLruCache$Entry $r2;
        java.util.concurrent.ThreadPoolExecutor $r12;
        long l0, $l3, $l4;
        java.util.concurrent.Callable $r13;
        java.util.LinkedHashMap $r14;
        com.jakewharton.disklrucache.DiskLruCache$Editor $r1, $r3;
        long[] $r10;
        byte $b5;
        int i1, $i2;
        java.lang.String $r7;
        boolean $z0, $z1;
        com.jakewharton.disklrucache.DiskLruCache r0;
        boolean[] $r5;
        java.io.File $r8, $r9;
        java.io.Writer $r11;
        java.lang.StringBuilder $r6, $r16;

        r0 := @this: com.jakewharton.disklrucache.DiskLruCache;

        $r1 := @parameter0: com.jakewharton.disklrucache.DiskLruCache$Editor;

        $z0 := @parameter1: boolean;

        entermonitor r0;

     label01:
        $r2 = staticinvoke <com.jakewharton.disklrucache.DiskLruCache$Editor: com.jakewharton.disklrucache.DiskLruCache$Entry access$1400(com.jakewharton.disklrucache.DiskLruCache$Editor)>($r1);

        $r3 = staticinvoke <com.jakewharton.disklrucache.DiskLruCache$Entry: com.jakewharton.disklrucache.DiskLruCache$Editor access$700(com.jakewharton.disklrucache.DiskLruCache$Entry)>($r2);

        if $r3 == $r1 goto label03;

        $r15 = new java.lang.IllegalStateException;

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>()>();

        throw $r15;

     label02:
        $r4 := @caughtexception;

        exitmonitor r0;

        throw $r4;

     label03:
        if $z0 == 0 goto label09;

     label04:
        $z1 = staticinvoke <com.jakewharton.disklrucache.DiskLruCache$Entry: boolean access$600(com.jakewharton.disklrucache.DiskLruCache$Entry)>($r2);

        if $z1 != 0 goto label09;

        i1 = 0;

     label05:
        $i2 = r0.<com.jakewharton.disklrucache.DiskLruCache: int valueCount>;

        if i1 >= $i2 goto label09;

        $r5 = staticinvoke <com.jakewharton.disklrucache.DiskLruCache$Editor: boolean[] access$1500(com.jakewharton.disklrucache.DiskLruCache$Editor)>($r1);

        $z1 = $r5[i1];

        if $z1 != 0 goto label06;

        virtualinvoke $r1.<com.jakewharton.disklrucache.DiskLruCache$Editor: void abort()>();

        $r15 = new java.lang.IllegalStateException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Newly created entry didn\'t create value for index ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r15;

     label06:
        $r8 = virtualinvoke $r2.<com.jakewharton.disklrucache.DiskLruCache$Entry: java.io.File getDirtyFile(int)>(i1);

        $z1 = virtualinvoke $r8.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label08;

        virtualinvoke $r1.<com.jakewharton.disklrucache.DiskLruCache$Editor: void abort()>();

     label07:
        exitmonitor r0;

        return;

     label08:
        i1 = i1 + 1;

        goto label05;

     label09:
        i1 = 0;

     label10:
        $i2 = r0.<com.jakewharton.disklrucache.DiskLruCache: int valueCount>;

        if i1 >= $i2 goto label13;

        $r8 = virtualinvoke $r2.<com.jakewharton.disklrucache.DiskLruCache$Entry: java.io.File getDirtyFile(int)>(i1);

        if $z0 == 0 goto label12;

        $z1 = virtualinvoke $r8.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label11;

        $r9 = virtualinvoke $r2.<com.jakewharton.disklrucache.DiskLruCache$Entry: java.io.File getCleanFile(int)>(i1);

        virtualinvoke $r8.<java.io.File: boolean renameTo(java.io.File)>($r9);

        $r10 = staticinvoke <com.jakewharton.disklrucache.DiskLruCache$Entry: long[] access$1000(com.jakewharton.disklrucache.DiskLruCache$Entry)>($r2);

        l0 = $r10[i1];

        $l3 = virtualinvoke $r9.<java.io.File: long length()>();

        $r10 = staticinvoke <com.jakewharton.disklrucache.DiskLruCache$Entry: long[] access$1000(com.jakewharton.disklrucache.DiskLruCache$Entry)>($r2);

        $r10[i1] = $l3;

        $l4 = r0.<com.jakewharton.disklrucache.DiskLruCache: long size>;

        l0 = $l4 - l0;

        $l3 = l0 + $l3;

        r0.<com.jakewharton.disklrucache.DiskLruCache: long size> = $l3;

     label11:
        i1 = i1 + 1;

        goto label10;

     label12:
        staticinvoke <com.jakewharton.disklrucache.DiskLruCache: void deleteIfExists(java.io.File)>($r8);

        goto label11;

     label13:
        i1 = r0.<com.jakewharton.disklrucache.DiskLruCache: int redundantOpCount>;

        i1 = i1 + 1;

        r0.<com.jakewharton.disklrucache.DiskLruCache: int redundantOpCount> = i1;

        staticinvoke <com.jakewharton.disklrucache.DiskLruCache$Entry: com.jakewharton.disklrucache.DiskLruCache$Editor access$702(com.jakewharton.disklrucache.DiskLruCache$Entry,com.jakewharton.disklrucache.DiskLruCache$Editor)>($r2, null);

        $z1 = staticinvoke <com.jakewharton.disklrucache.DiskLruCache$Entry: boolean access$600(com.jakewharton.disklrucache.DiskLruCache$Entry)>($r2);

        $z1 = $z1 | $z0;

        if $z1 == 0 goto label16;

        staticinvoke <com.jakewharton.disklrucache.DiskLruCache$Entry: boolean access$602(com.jakewharton.disklrucache.DiskLruCache$Entry,boolean)>($r2, 1);

        $r11 = r0.<com.jakewharton.disklrucache.DiskLruCache: java.io.Writer journalWriter>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CLEAN ");

        $r7 = staticinvoke <com.jakewharton.disklrucache.DiskLruCache$Entry: java.lang.String access$1100(com.jakewharton.disklrucache.DiskLruCache$Entry)>($r2);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r7 = virtualinvoke $r2.<com.jakewharton.disklrucache.DiskLruCache$Entry: java.lang.String getLengths()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<java.io.Writer: void write(java.lang.String)>($r7);

        if $z0 == 0 goto label14;

        $l3 = r0.<com.jakewharton.disklrucache.DiskLruCache: long nextSequenceNumber>;

        l0 = 1L + $l3;

        r0.<com.jakewharton.disklrucache.DiskLruCache: long nextSequenceNumber> = l0;

        staticinvoke <com.jakewharton.disklrucache.DiskLruCache$Entry: long access$1202(com.jakewharton.disklrucache.DiskLruCache$Entry,long)>($r2, $l3);

     label14:
        $r11 = r0.<com.jakewharton.disklrucache.DiskLruCache: java.io.Writer journalWriter>;

        virtualinvoke $r11.<java.io.Writer: void flush()>();

        $l3 = r0.<com.jakewharton.disklrucache.DiskLruCache: long size>;

        l0 = r0.<com.jakewharton.disklrucache.DiskLruCache: long maxSize>;

        $b5 = $l3 cmp l0;

        i1 = (int) $b5;

        if i1 > 0 goto label15;

        $z0 = specialinvoke r0.<com.jakewharton.disklrucache.DiskLruCache: boolean journalRebuildRequired()>();

        if $z0 == 0 goto label07;

     label15:
        $r12 = r0.<com.jakewharton.disklrucache.DiskLruCache: java.util.concurrent.ThreadPoolExecutor executorService>;

        $r13 = r0.<com.jakewharton.disklrucache.DiskLruCache: java.util.concurrent.Callable cleanupCallable>;

        virtualinvoke $r12.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.Future submit(java.util.concurrent.Callable)>($r13);

        goto label07;

     label16:
        $r14 = r0.<com.jakewharton.disklrucache.DiskLruCache: java.util.LinkedHashMap lruEntries>;

        $r7 = staticinvoke <com.jakewharton.disklrucache.DiskLruCache$Entry: java.lang.String access$1100(com.jakewharton.disklrucache.DiskLruCache$Entry)>($r2);

        virtualinvoke $r14.<java.util.LinkedHashMap: java.lang.Object remove(java.lang.Object)>($r7);

        $r11 = r0.<com.jakewharton.disklrucache.DiskLruCache: java.io.Writer journalWriter>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("REMOVE ");

        $r7 = staticinvoke <com.jakewharton.disklrucache.DiskLruCache$Entry: java.lang.String access$1100(com.jakewharton.disklrucache.DiskLruCache$Entry)>($r2);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<java.io.Writer: void write(java.lang.String)>($r7);

     label17:
        goto label14;

        catch java.lang.Throwable from label01 to label02 with label02;
        catch java.lang.Throwable from label04 to label07 with label02;
        catch java.lang.Throwable from label10 to label17 with label02;
    }

    private static void deleteIfExists(java.io.File) throws java.io.IOException
    {
        java.io.IOException $r1;
        java.io.File $r0;
        boolean $z0;

        $r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        $z0 = virtualinvoke $r0.<java.io.File: boolean delete()>();

        if $z0 != 0 goto label1;

        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>()>();

        throw $r1;

     label1:
        return;
    }

    private com.jakewharton.disklrucache.DiskLruCache$Editor edit(java.lang.String, long) throws java.io.IOException
    {
        java.lang.Throwable $r8;
        com.jakewharton.disklrucache.DiskLruCache r0;
        com.jakewharton.disklrucache.DiskLruCache$Entry r5;
        long $l0;
        java.util.LinkedHashMap $r3;
        com.jakewharton.disklrucache.DiskLruCache$Editor r2, $r9;
        java.io.Writer $r6;
        java.lang.Object $r4;
        java.lang.StringBuilder $r7;
        java.lang.String $r1;

        r0 := @this: com.jakewharton.disklrucache.DiskLruCache;

        $r1 := @parameter0: java.lang.String;

        $l0 := @parameter1: long;

        r2 = null;

        entermonitor r0;

     label1:
        specialinvoke r0.<com.jakewharton.disklrucache.DiskLruCache: void checkNotClosed()>();

        specialinvoke r0.<com.jakewharton.disklrucache.DiskLruCache: void validateKey(java.lang.String)>($r1);

        $r3 = r0.<com.jakewharton.disklrucache.DiskLruCache: java.util.LinkedHashMap lruEntries>;

        $r4 = virtualinvoke $r3.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>($r1);

        r5 = (com.jakewharton.disklrucache.DiskLruCache$Entry) $r4;

        goto label3;

     label2:
        exitmonitor r0;

        return r2;

     label3:
        if r5 != null goto label8;

     label4:
        r5 = new com.jakewharton.disklrucache.DiskLruCache$Entry;

        specialinvoke r5.<com.jakewharton.disklrucache.DiskLruCache$Entry: void <init>(com.jakewharton.disklrucache.DiskLruCache,java.lang.String,com.jakewharton.disklrucache.DiskLruCache$1)>(r0, $r1, null);

        $r3 = r0.<com.jakewharton.disklrucache.DiskLruCache: java.util.LinkedHashMap lruEntries>;

        virtualinvoke $r3.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, r5);

     label5:
        r2 = new com.jakewharton.disklrucache.DiskLruCache$Editor;

        specialinvoke r2.<com.jakewharton.disklrucache.DiskLruCache$Editor: void <init>(com.jakewharton.disklrucache.DiskLruCache,com.jakewharton.disklrucache.DiskLruCache$Entry,com.jakewharton.disklrucache.DiskLruCache$1)>(r0, r5, null);

        staticinvoke <com.jakewharton.disklrucache.DiskLruCache$Entry: com.jakewharton.disklrucache.DiskLruCache$Editor access$702(com.jakewharton.disklrucache.DiskLruCache$Entry,com.jakewharton.disklrucache.DiskLruCache$Editor)>(r5, r2);

        $r6 = r0.<com.jakewharton.disklrucache.DiskLruCache: java.io.Writer journalWriter>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DIRTY ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $r1 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<java.io.Writer: void write(java.lang.String)>($r1);

        $r6 = r0.<com.jakewharton.disklrucache.DiskLruCache: java.io.Writer journalWriter>;

        virtualinvoke $r6.<java.io.Writer: void flush()>();

     label6:
        goto label2;

     label7:
        $r8 := @caughtexception;

        exitmonitor r0;

        throw $r8;

     label8:
        $r9 = staticinvoke <com.jakewharton.disklrucache.DiskLruCache$Entry: com.jakewharton.disklrucache.DiskLruCache$Editor access$700(com.jakewharton.disklrucache.DiskLruCache$Entry)>(r5);

     label9:
        if $r9 == null goto label5;

        goto label2;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label4 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private static java.lang.String inputStreamToString(java.io.InputStream) throws java.io.IOException
    {
        java.nio.charset.Charset $r1;
        java.lang.String $r2;
        java.io.InputStreamReader $r3;
        java.io.InputStream $r0;

        $r0 := @parameter0: java.io.InputStream;

        $r3 = new java.io.InputStreamReader;

        $r1 = <com.jakewharton.disklrucache.Util: java.nio.charset.Charset UTF_8>;

        specialinvoke $r3.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>($r0, $r1);

        $r2 = staticinvoke <com.jakewharton.disklrucache.Util: java.lang.String readFully(java.io.Reader)>($r3);

        return $r2;
    }

    private boolean journalRebuildRequired()
    {
        java.util.LinkedHashMap $r1;
        com.jakewharton.disklrucache.DiskLruCache r0;
        int $i0, $i1;

        r0 := @this: com.jakewharton.disklrucache.DiskLruCache;

        $i0 = r0.<com.jakewharton.disklrucache.DiskLruCache: int redundantOpCount>;

        if $i0 < 2000 goto label1;

        $i1 = r0.<com.jakewharton.disklrucache.DiskLruCache: int redundantOpCount>;

        $r1 = r0.<com.jakewharton.disklrucache.DiskLruCache: java.util.LinkedHashMap lruEntries>;

        $i0 = virtualinvoke $r1.<java.util.LinkedHashMap: int size()>();

        if $i1 < $i0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static com.jakewharton.disklrucache.DiskLruCache open(java.io.File, int, int, long) throws java.io.IOException
    {
        java.lang.Throwable r3;
        long $l2;
        byte $b3;
        java.nio.charset.Charset $r7;
        int $i0, $i1, $i4;
        java.io.OutputStreamWriter $r5, $r15;
        java.lang.String $r10;
        boolean $z0;
        java.io.PrintStream $r8;
        com.jakewharton.disklrucache.DiskLruCache r4, $r13;
        java.io.BufferedWriter $r16;
        java.io.FileOutputStream $r6, $r14;
        java.io.IOException $r18;
        java.lang.IllegalArgumentException $r11;
        java.io.File $r0, r1, r2, $r12;
        java.lang.StringBuilder $r9, $r17;

        $r0 := @parameter0: java.io.File;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $l2 := @parameter3: long;

        $b3 = $l2 cmp 0L;

        $i4 = (int) $b3;

        if $i4 > 0 goto label01;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("maxSize <= 0");

        throw $r11;

     label01:
        r2 = new java.io.File;

        r1 = r2;

        specialinvoke r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r0, "journal.bkp");

        $z0 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label02;

        $r12 = new java.io.File;

        r2 = $r12;

        specialinvoke $r12.<java.io.File: void <init>(java.io.File,java.lang.String)>($r0, "journal");

        $z0 = virtualinvoke r2.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label09;

        virtualinvoke r1.<java.io.File: boolean delete()>();

     label02:
        $r13 = new com.jakewharton.disklrucache.DiskLruCache;

        r4 = $r13;

        specialinvoke $r13.<com.jakewharton.disklrucache.DiskLruCache: void <init>(java.io.File,int,int,long)>($r0, 0, 1, $l2);

        r1 = r4.<com.jakewharton.disklrucache.DiskLruCache: java.io.File journalFile>;

        $z0 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label11;

     label03:
        specialinvoke r4.<com.jakewharton.disklrucache.DiskLruCache: void readJournal()>();

        specialinvoke r4.<com.jakewharton.disklrucache.DiskLruCache: void processJournal()>();

     label04:
        $r16 = new java.io.BufferedWriter;

        $r15 = new java.io.OutputStreamWriter;

        $r5 = $r15;

        $r14 = new java.io.FileOutputStream;

        $r6 = $r14;

        r1 = r4.<com.jakewharton.disklrucache.DiskLruCache: java.io.File journalFile>;

     label05:
        specialinvoke $r14.<java.io.FileOutputStream: void <init>(java.io.File,boolean)>(r1, 1);

     label06:
        $r7 = <com.jakewharton.disklrucache.Util: java.nio.charset.Charset US_ASCII>;

     label07:
        specialinvoke $r15.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)>($r6, $r7);

        specialinvoke $r16.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r5);

     label08:
        r4.<com.jakewharton.disklrucache.DiskLruCache: java.io.Writer journalWriter> = $r16;

        return r4;

     label09:
        staticinvoke <com.jakewharton.disklrucache.DiskLruCache: void renameTo(java.io.File,java.io.File,boolean)>(r1, r2, 0);

        goto label02;

     label10:
        r3 := @caughtexception;

        $r8 = <java.lang.System: java.io.PrintStream out>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DiskLruCache ");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is corrupt: ");

        $r18 = (java.io.IOException) r3;

        $r10 = virtualinvoke $r18.<java.io.IOException: java.lang.String getMessage()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", removing");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r10);

        virtualinvoke r4.<com.jakewharton.disklrucache.DiskLruCache: void delete()>();

     label11:
        virtualinvoke $r0.<java.io.File: boolean mkdirs()>();

        $r13 = new com.jakewharton.disklrucache.DiskLruCache;

        r4 = $r13;

        specialinvoke $r13.<com.jakewharton.disklrucache.DiskLruCache: void <init>(java.io.File,int,int,long)>($r0, 0, 1, $l2);

        specialinvoke r4.<com.jakewharton.disklrucache.DiskLruCache: void rebuildJournal()>();

        return r4;

        catch java.io.IOException from label03 to label04 with label10;
        catch java.io.IOException from label05 to label06 with label10;
        catch java.io.IOException from label07 to label08 with label10;
    }

    private void processJournal() throws java.io.IOException
    {
        com.jakewharton.disklrucache.DiskLruCache r0;
        java.util.Iterator $r4;
        com.jakewharton.disklrucache.DiskLruCache$Entry r6;
        java.util.Collection $r3;
        long $l2, $l3;
        java.io.File $r1;
        java.util.LinkedHashMap $r2;
        com.jakewharton.disklrucache.DiskLruCache$Editor $r7;
        long[] $r8;
        int i0, $i1;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: com.jakewharton.disklrucache.DiskLruCache;

        $r1 = r0.<com.jakewharton.disklrucache.DiskLruCache: java.io.File journalFileTmp>;

        staticinvoke <com.jakewharton.disklrucache.DiskLruCache: void deleteIfExists(java.io.File)>($r1);

        $r2 = r0.<com.jakewharton.disklrucache.DiskLruCache: java.util.LinkedHashMap lruEntries>;

        $r3 = virtualinvoke $r2.<java.util.LinkedHashMap: java.util.Collection values()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.jakewharton.disklrucache.DiskLruCache$Entry) $r5;

        $r7 = staticinvoke <com.jakewharton.disklrucache.DiskLruCache$Entry: com.jakewharton.disklrucache.DiskLruCache$Editor access$700(com.jakewharton.disklrucache.DiskLruCache$Entry)>(r6);

        if $r7 != null goto label3;

        i0 = 0;

     label2:
        $i1 = r0.<com.jakewharton.disklrucache.DiskLruCache: int valueCount>;

        if i0 >= $i1 goto label1;

        $l2 = r0.<com.jakewharton.disklrucache.DiskLruCache: long size>;

        $r8 = staticinvoke <com.jakewharton.disklrucache.DiskLruCache$Entry: long[] access$1000(com.jakewharton.disklrucache.DiskLruCache$Entry)>(r6);

        $l3 = $r8[i0];

        $l2 = $l2 + $l3;

        r0.<com.jakewharton.disklrucache.DiskLruCache: long size> = $l2;

        i0 = i0 + 1;

        goto label2;

     label3:
        staticinvoke <com.jakewharton.disklrucache.DiskLruCache$Entry: com.jakewharton.disklrucache.DiskLruCache$Editor access$702(com.jakewharton.disklrucache.DiskLruCache$Entry,com.jakewharton.disklrucache.DiskLruCache$Editor)>(r6, null);

        i0 = 0;

     label4:
        $i1 = r0.<com.jakewharton.disklrucache.DiskLruCache: int valueCount>;

        if i0 >= $i1 goto label5;

        $r1 = virtualinvoke r6.<com.jakewharton.disklrucache.DiskLruCache$Entry: java.io.File getCleanFile(int)>(i0);

        staticinvoke <com.jakewharton.disklrucache.DiskLruCache: void deleteIfExists(java.io.File)>($r1);

        $r1 = virtualinvoke r6.<com.jakewharton.disklrucache.DiskLruCache$Entry: java.io.File getDirtyFile(int)>(i0);

        staticinvoke <com.jakewharton.disklrucache.DiskLruCache: void deleteIfExists(java.io.File)>($r1);

        i0 = i0 + 1;

        goto label4;

     label5:
        interfaceinvoke $r4.<java.util.Iterator: void remove()>();

        goto label1;

     label6:
        return;
    }

    private void readJournal() throws java.io.IOException
    {
        java.lang.Throwable r1, $r14;
        java.util.LinkedHashMap $r15;
        java.nio.charset.Charset $r5;
        int $i0, $i1;
        java.lang.String $r6, $r7, $r8, $r9, $r10, $r11;
        boolean $z0;
        com.jakewharton.disklrucache.DiskLruCache r0;
        java.io.IOException $r12;
        java.io.FileInputStream $r3;
        java.io.File $r4;
        java.lang.StringBuilder $r13;
        com.jakewharton.disklrucache.StrictLineReader r2;

        r0 := @this: com.jakewharton.disklrucache.DiskLruCache;

        r2 = new com.jakewharton.disklrucache.StrictLineReader;

        $r3 = new java.io.FileInputStream;

        $r4 = r0.<com.jakewharton.disklrucache.DiskLruCache: java.io.File journalFile>;

        specialinvoke $r3.<java.io.FileInputStream: void <init>(java.io.File)>($r4);

        $r5 = <com.jakewharton.disklrucache.Util: java.nio.charset.Charset US_ASCII>;

        specialinvoke r2.<com.jakewharton.disklrucache.StrictLineReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>($r3, $r5);

     label01:
        $r6 = virtualinvoke r2.<com.jakewharton.disklrucache.StrictLineReader: java.lang.String readLine()>();

        $r7 = virtualinvoke r2.<com.jakewharton.disklrucache.StrictLineReader: java.lang.String readLine()>();

        $r8 = virtualinvoke r2.<com.jakewharton.disklrucache.StrictLineReader: java.lang.String readLine()>();

        $r9 = virtualinvoke r2.<com.jakewharton.disklrucache.StrictLineReader: java.lang.String readLine()>();

        $r10 = virtualinvoke r2.<com.jakewharton.disklrucache.StrictLineReader: java.lang.String readLine()>();

     label02:
        $r11 = "libcore.io.DiskLruCache";

     label03:
        $z0 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r6);

     label04:
        if $z0 == 0 goto label13;

        $r11 = "1";

     label05:
        $z0 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r7);

     label06:
        if $z0 == 0 goto label13;

     label07:
        $i0 = r0.<com.jakewharton.disklrucache.DiskLruCache: int appVersion>;

        $r11 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        $z0 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r8);

     label08:
        if $z0 == 0 goto label13;

     label09:
        $i0 = r0.<com.jakewharton.disklrucache.DiskLruCache: int valueCount>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r9);

     label10:
        if $z0 == 0 goto label13;

        $r8 = "";

     label11:
        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r10);

     label12:
        if $z0 != 0 goto label15;

     label13:
        $r12 = new java.io.IOException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unexpected journal header: [");

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r6 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>($r6);

        throw $r12;

     label14:
        $r14 := @caughtexception;

        staticinvoke <com.jakewharton.disklrucache.Util: void closeQuietly(java.io.Closeable)>(r2);

        throw $r14;

     label15:
        $i0 = 0;

     label16:
        $r6 = virtualinvoke r2.<com.jakewharton.disklrucache.StrictLineReader: java.lang.String readLine()>();

        specialinvoke r0.<com.jakewharton.disklrucache.DiskLruCache: void readJournalLine(java.lang.String)>($r6);

     label17:
        $i0 = $i0 + 1;

        goto label16;

     label18:
        r1 := @caughtexception;

     label19:
        $r15 = r0.<com.jakewharton.disklrucache.DiskLruCache: java.util.LinkedHashMap lruEntries>;

        $i1 = virtualinvoke $r15.<java.util.LinkedHashMap: int size()>();

     label20:
        $i0 = $i0 - $i1;

     label21:
        r0.<com.jakewharton.disklrucache.DiskLruCache: int redundantOpCount> = $i0;

     label22:
        staticinvoke <com.jakewharton.disklrucache.Util: void closeQuietly(java.io.Closeable)>(r2);

        return;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.lang.Throwable from label09 to label10 with label14;
        catch java.lang.Throwable from label11 to label12 with label14;
        catch java.lang.Throwable from label13 to label14 with label14;
        catch java.io.EOFException from label16 to label17 with label18;
        catch java.lang.Throwable from label16 to label17 with label14;
        catch java.lang.Throwable from label19 to label20 with label14;
        catch java.lang.Throwable from label21 to label22 with label14;
    }

    private void readJournalLine(java.lang.String) throws java.io.IOException
    {
        com.jakewharton.disklrucache.DiskLruCache$Entry r8, $r12;
        java.lang.String[] $r9;
        java.util.LinkedHashMap $r6;
        com.jakewharton.disklrucache.DiskLruCache$Editor $r13;
        int i0, $i1, $i2;
        java.lang.String $r1, $r3, r4, $r5;
        boolean $z0;
        com.jakewharton.disklrucache.DiskLruCache r0;
        java.io.IOException $r11;
        java.lang.StringBuilder $r2, $r10;
        java.lang.Object $r7;

        r0 := @this: com.jakewharton.disklrucache.DiskLruCache;

        $r1 := @parameter0: java.lang.String;

        $i1 = virtualinvoke $r1.<java.lang.String: int indexOf(int)>(32);

        if $i1 != -1 goto label1;

        $r11 = new java.io.IOException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unexpected journal line: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>($r1);

        throw $r11;

     label1:
        i0 = $i1 + 1;

        $i2 = virtualinvoke $r1.<java.lang.String: int indexOf(int,int)>(32, i0);

        if $i2 != -1 goto label2;

        $r3 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>(i0);

        r4 = $r3;

        $r5 = "REMOVE";

        i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i1 != i0 goto label3;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("REMOVE");

        if $z0 == 0 goto label3;

        $r6 = r0.<com.jakewharton.disklrucache.DiskLruCache: java.util.LinkedHashMap lruEntries>;

        virtualinvoke $r6.<java.util.LinkedHashMap: java.lang.Object remove(java.lang.Object)>($r3);

        return;

     label2:
        r4 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(i0, $i2);

     label3:
        $r6 = r0.<com.jakewharton.disklrucache.DiskLruCache: java.util.LinkedHashMap lruEntries>;

        $r7 = virtualinvoke $r6.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>(r4);

        r8 = (com.jakewharton.disklrucache.DiskLruCache$Entry) $r7;

        if r8 != null goto label4;

        $r12 = new com.jakewharton.disklrucache.DiskLruCache$Entry;

        r8 = $r12;

        specialinvoke $r12.<com.jakewharton.disklrucache.DiskLruCache$Entry: void <init>(com.jakewharton.disklrucache.DiskLruCache,java.lang.String,com.jakewharton.disklrucache.DiskLruCache$1)>(r0, r4, null);

        $r6 = r0.<com.jakewharton.disklrucache.DiskLruCache: java.util.LinkedHashMap lruEntries>;

        virtualinvoke $r6.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r8);

     label4:
        if $i2 == -1 goto label5;

        $r3 = "CLEAN";

        i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i1 != i0 goto label5;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("CLEAN");

        if $z0 == 0 goto label5;

        $i1 = $i2 + 1;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i1);

        $r9 = virtualinvoke $r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ");

        staticinvoke <com.jakewharton.disklrucache.DiskLruCache$Entry: boolean access$602(com.jakewharton.disklrucache.DiskLruCache$Entry,boolean)>(r8, 1);

        staticinvoke <com.jakewharton.disklrucache.DiskLruCache$Entry: com.jakewharton.disklrucache.DiskLruCache$Editor access$702(com.jakewharton.disklrucache.DiskLruCache$Entry,com.jakewharton.disklrucache.DiskLruCache$Editor)>(r8, null);

        staticinvoke <com.jakewharton.disklrucache.DiskLruCache$Entry: void access$800(com.jakewharton.disklrucache.DiskLruCache$Entry,java.lang.String[])>(r8, $r9);

        return;

     label5:
        if $i2 != -1 goto label7;

        $r3 = "DIRTY";

        i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i1 != i0 goto label6;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("DIRTY");

        if $z0 == 0 goto label6;

        $r13 = new com.jakewharton.disklrucache.DiskLruCache$Editor;

        specialinvoke $r13.<com.jakewharton.disklrucache.DiskLruCache$Editor: void <init>(com.jakewharton.disklrucache.DiskLruCache,com.jakewharton.disklrucache.DiskLruCache$Entry,com.jakewharton.disklrucache.DiskLruCache$1)>(r0, r8, null);

        staticinvoke <com.jakewharton.disklrucache.DiskLruCache$Entry: com.jakewharton.disklrucache.DiskLruCache$Editor access$702(com.jakewharton.disklrucache.DiskLruCache$Entry,com.jakewharton.disklrucache.DiskLruCache$Editor)>(r8, $r13);

        return;

     label6:
        if $i2 != -1 goto label7;

        $r3 = "READ";

        $i2 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i1 != $i2 goto label7;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("READ");

        if $z0 != 0 goto label8;

     label7:
        $r11 = new java.io.IOException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unexpected journal line: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>($r1);

        throw $r11;

     label8:
        return;
    }

    private void rebuildJournal() throws java.io.IOException
    {
        java.lang.Throwable $r15, $r16;
        com.jakewharton.disklrucache.DiskLruCache$Entry r12;
        java.util.LinkedHashMap $r8;
        com.jakewharton.disklrucache.DiskLruCache$Editor $r13;
        java.nio.charset.Charset $r6;
        int $i0;
        java.io.OutputStreamWriter $r3;
        java.lang.String $r7;
        boolean $z0;
        com.jakewharton.disklrucache.DiskLruCache r0;
        java.util.Iterator $r10;
        java.io.BufferedWriter r1;
        java.util.Collection $r9;
        java.io.FileOutputStream $r4;
        java.io.File $r5, $r17;
        java.io.Writer $r2;
        java.lang.Object $r11;
        java.lang.StringBuilder $r14;

        r0 := @this: com.jakewharton.disklrucache.DiskLruCache;

        entermonitor r0;

     label01:
        $r2 = r0.<com.jakewharton.disklrucache.DiskLruCache: java.io.Writer journalWriter>;

        if $r2 == null goto label02;

        $r2 = r0.<com.jakewharton.disklrucache.DiskLruCache: java.io.Writer journalWriter>;

        virtualinvoke $r2.<java.io.Writer: void close()>();

     label02:
        r1 = new java.io.BufferedWriter;

        $r3 = new java.io.OutputStreamWriter;

        $r4 = new java.io.FileOutputStream;

        $r5 = r0.<com.jakewharton.disklrucache.DiskLruCache: java.io.File journalFileTmp>;

        specialinvoke $r4.<java.io.FileOutputStream: void <init>(java.io.File)>($r5);

        $r6 = <com.jakewharton.disklrucache.Util: java.nio.charset.Charset US_ASCII>;

        specialinvoke $r3.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)>($r4, $r6);

        specialinvoke r1.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r3);

     label03:
        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>("libcore.io.DiskLruCache");

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>("\n");

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>("1");

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>("\n");

        $i0 = r0.<com.jakewharton.disklrucache.DiskLruCache: int appVersion>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r7);

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>("\n");

        $i0 = r0.<com.jakewharton.disklrucache.DiskLruCache: int valueCount>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r7);

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>("\n");

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>("\n");

        $r8 = r0.<com.jakewharton.disklrucache.DiskLruCache: java.util.LinkedHashMap lruEntries>;

        $r9 = virtualinvoke $r8.<java.util.LinkedHashMap: java.util.Collection values()>();

        $r10 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();

     label04:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label11;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (com.jakewharton.disklrucache.DiskLruCache$Entry) $r11;

        $r13 = staticinvoke <com.jakewharton.disklrucache.DiskLruCache$Entry: com.jakewharton.disklrucache.DiskLruCache$Editor access$700(com.jakewharton.disklrucache.DiskLruCache$Entry)>(r12);

        if $r13 == null goto label09;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DIRTY ");

        $r7 = staticinvoke <com.jakewharton.disklrucache.DiskLruCache$Entry: java.lang.String access$1100(com.jakewharton.disklrucache.DiskLruCache$Entry)>(r12);

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $r7 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r7);

     label05:
        goto label04;

     label06:
        $r15 := @caughtexception;

     label07:
        virtualinvoke r1.<java.io.Writer: void close()>();

        throw $r15;

     label08:
        $r16 := @caughtexception;

        exitmonitor r0;

        throw $r16;

     label09:
        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CLEAN ");

        $r7 = staticinvoke <com.jakewharton.disklrucache.DiskLruCache$Entry: java.lang.String access$1100(com.jakewharton.disklrucache.DiskLruCache$Entry)>(r12);

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r7 = virtualinvoke r12.<com.jakewharton.disklrucache.DiskLruCache$Entry: java.lang.String getLengths()>();

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $r7 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r7);

     label10:
        goto label04;

     label11:
        virtualinvoke r1.<java.io.Writer: void close()>();

        $r5 = r0.<com.jakewharton.disklrucache.DiskLruCache: java.io.File journalFile>;

        $z0 = virtualinvoke $r5.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label12;

        $r5 = r0.<com.jakewharton.disklrucache.DiskLruCache: java.io.File journalFile>;

        $r17 = r0.<com.jakewharton.disklrucache.DiskLruCache: java.io.File journalFileBackup>;

        staticinvoke <com.jakewharton.disklrucache.DiskLruCache: void renameTo(java.io.File,java.io.File,boolean)>($r5, $r17, 1);

     label12:
        $r5 = r0.<com.jakewharton.disklrucache.DiskLruCache: java.io.File journalFileTmp>;

        $r17 = r0.<com.jakewharton.disklrucache.DiskLruCache: java.io.File journalFile>;

        staticinvoke <com.jakewharton.disklrucache.DiskLruCache: void renameTo(java.io.File,java.io.File,boolean)>($r5, $r17, 0);

        $r5 = r0.<com.jakewharton.disklrucache.DiskLruCache: java.io.File journalFileBackup>;

        virtualinvoke $r5.<java.io.File: boolean delete()>();

        r1 = new java.io.BufferedWriter;

        $r3 = new java.io.OutputStreamWriter;

        $r4 = new java.io.FileOutputStream;

        $r5 = r0.<com.jakewharton.disklrucache.DiskLruCache: java.io.File journalFile>;

        specialinvoke $r4.<java.io.FileOutputStream: void <init>(java.io.File,boolean)>($r5, 1);

        $r6 = <com.jakewharton.disklrucache.Util: java.nio.charset.Charset US_ASCII>;

        specialinvoke $r3.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)>($r4, $r6);

        specialinvoke r1.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r3);

        r0.<com.jakewharton.disklrucache.DiskLruCache: java.io.Writer journalWriter> = r1;

     label13:
        exitmonitor r0;

        return;

        catch java.lang.Throwable from label01 to label03 with label08;
        catch java.lang.Throwable from label03 to label05 with label06;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.lang.Throwable from label09 to label10 with label06;
        catch java.lang.Throwable from label11 to label13 with label08;
    }

    private static void renameTo(java.io.File, java.io.File, boolean) throws java.io.IOException
    {
        java.io.IOException $r2;
        java.io.File $r0, $r1;
        boolean $z0;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        $z0 := @parameter2: boolean;

        if $z0 == 0 goto label1;

        staticinvoke <com.jakewharton.disklrucache.DiskLruCache: void deleteIfExists(java.io.File)>($r1);

     label1:
        $z0 = virtualinvoke $r0.<java.io.File: boolean renameTo(java.io.File)>($r1);

        if $z0 != 0 goto label2;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>()>();

        throw $r2;

     label2:
        return;
    }

    private void trimToSize() throws java.io.IOException
    {
        com.jakewharton.disklrucache.DiskLruCache r0;
        java.util.Map$Entry r5;
        java.util.Iterator $r3;
        java.util.Set $r2;
        long $l0, $l1;
        java.util.LinkedHashMap $r1;
        byte $b2;
        int $i3;
        java.lang.Object $r4;
        java.lang.String $r6;

        r0 := @this: com.jakewharton.disklrucache.DiskLruCache;

     label1:
        $l1 = r0.<com.jakewharton.disklrucache.DiskLruCache: long size>;

        $l0 = r0.<com.jakewharton.disklrucache.DiskLruCache: long maxSize>;

        $b2 = $l1 cmp $l0;

        $i3 = (int) $b2;

        if $i3 <= 0 goto label2;

        $r1 = r0.<com.jakewharton.disklrucache.DiskLruCache: java.util.LinkedHashMap lruEntries>;

        $r2 = virtualinvoke $r1.<java.util.LinkedHashMap: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r4 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r6 = (java.lang.String) $r4;

        virtualinvoke r0.<com.jakewharton.disklrucache.DiskLruCache: boolean remove(java.lang.String)>($r6);

        goto label1;

     label2:
        return;
    }

    private void validateKey(java.lang.String)
    {
        com.jakewharton.disklrucache.DiskLruCache r0;
        java.util.regex.Matcher $r3;
        java.lang.StringBuilder $r5;
        java.lang.String $r1;
        java.util.regex.Pattern $r2;
        java.lang.IllegalArgumentException $r4;
        boolean $z0;

        r0 := @this: com.jakewharton.disklrucache.DiskLruCache;

        $r1 := @parameter0: java.lang.String;

        $r2 = <com.jakewharton.disklrucache.DiskLruCache: java.util.regex.Pattern LEGAL_KEY_PATTERN>;

        $r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r1);

        $z0 = virtualinvoke $r3.<java.util.regex.Matcher: boolean matches()>();

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("keys must match regex [a-z0-9_-]{1,64}: \"");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r4;

     label1:
        return;
    }

    public void close() throws java.io.IOException
    {
        java.lang.Throwable $r9;
        com.jakewharton.disklrucache.DiskLruCache r0;
        java.util.Iterator $r5;
        com.jakewharton.disklrucache.DiskLruCache$Entry r7;
        java.util.Collection $r4;
        java.util.ArrayList $r2;
        java.util.LinkedHashMap $r3;
        com.jakewharton.disklrucache.DiskLruCache$Editor $r8;
        java.io.Writer $r1;
        java.lang.Object $r6;
        boolean $z0;

        r0 := @this: com.jakewharton.disklrucache.DiskLruCache;

        entermonitor r0;

     label1:
        $r1 = r0.<com.jakewharton.disklrucache.DiskLruCache: java.io.Writer journalWriter>;

     label2:
        if $r1 != null goto label4;

     label3:
        exitmonitor r0;

        return;

     label4:
        $r2 = new java.util.ArrayList;

        $r3 = r0.<com.jakewharton.disklrucache.DiskLruCache: java.util.LinkedHashMap lruEntries>;

        $r4 = virtualinvoke $r3.<java.util.LinkedHashMap: java.util.Collection values()>();

        specialinvoke $r2.<java.util.ArrayList: void <init>(java.util.Collection)>($r4);

        $r5 = virtualinvoke $r2.<java.util.ArrayList: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.jakewharton.disklrucache.DiskLruCache$Entry) $r6;

        $r8 = staticinvoke <com.jakewharton.disklrucache.DiskLruCache$Entry: com.jakewharton.disklrucache.DiskLruCache$Editor access$700(com.jakewharton.disklrucache.DiskLruCache$Entry)>(r7);

        if $r8 == null goto label5;

        $r8 = staticinvoke <com.jakewharton.disklrucache.DiskLruCache$Entry: com.jakewharton.disklrucache.DiskLruCache$Editor access$700(com.jakewharton.disklrucache.DiskLruCache$Entry)>(r7);

        virtualinvoke $r8.<com.jakewharton.disklrucache.DiskLruCache$Editor: void abort()>();

     label6:
        goto label5;

     label7:
        $r9 := @caughtexception;

        exitmonitor r0;

        throw $r9;

     label8:
        specialinvoke r0.<com.jakewharton.disklrucache.DiskLruCache: void trimToSize()>();

        $r1 = r0.<com.jakewharton.disklrucache.DiskLruCache: java.io.Writer journalWriter>;

        virtualinvoke $r1.<java.io.Writer: void close()>();

        r0.<com.jakewharton.disklrucache.DiskLruCache: java.io.Writer journalWriter> = null;

     label9:
        goto label3;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label4 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void delete() throws java.io.IOException
    {
        com.jakewharton.disklrucache.DiskLruCache r0;
        java.io.File $r1;

        r0 := @this: com.jakewharton.disklrucache.DiskLruCache;

        virtualinvoke r0.<com.jakewharton.disklrucache.DiskLruCache: void close()>();

        $r1 = r0.<com.jakewharton.disklrucache.DiskLruCache: java.io.File directory>;

        staticinvoke <com.jakewharton.disklrucache.Util: void deleteContents(java.io.File)>($r1);

        return;
    }

    public com.jakewharton.disklrucache.DiskLruCache$Editor edit(java.lang.String) throws java.io.IOException
    {
        com.jakewharton.disklrucache.DiskLruCache$Editor $r2;
        com.jakewharton.disklrucache.DiskLruCache r0;
        java.lang.String $r1;

        r0 := @this: com.jakewharton.disklrucache.DiskLruCache;

        $r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<com.jakewharton.disklrucache.DiskLruCache: com.jakewharton.disklrucache.DiskLruCache$Editor edit(java.lang.String,long)>($r1, -1L);

        return $r2;
    }

    public void flush() throws java.io.IOException
    {
        java.io.Writer $r1;
        java.lang.Throwable $r2;
        com.jakewharton.disklrucache.DiskLruCache r0;

        r0 := @this: com.jakewharton.disklrucache.DiskLruCache;

        entermonitor r0;

     label1:
        specialinvoke r0.<com.jakewharton.disklrucache.DiskLruCache: void checkNotClosed()>();

        specialinvoke r0.<com.jakewharton.disklrucache.DiskLruCache: void trimToSize()>();

        $r1 = r0.<com.jakewharton.disklrucache.DiskLruCache: java.io.Writer journalWriter>;

        virtualinvoke $r1.<java.io.Writer: void flush()>();

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public com.jakewharton.disklrucache.DiskLruCache$Snapshot get(java.lang.String) throws java.io.IOException
    {
        java.lang.Throwable r3, $r15;
        com.jakewharton.disklrucache.DiskLruCache$Snapshot $r4, $r18;
        java.lang.Object[] r2;
        com.jakewharton.disklrucache.DiskLruCache$Entry r7;
        java.util.concurrent.ThreadPoolExecutor $r12;
        java.util.concurrent.Callable $r13;
        long $l2;
        java.util.LinkedHashMap $r5;
        java.io.InputStream[] $r20;
        long[] $r14;
        int $i0, $i1;
        java.lang.String $r1, $r11;
        boolean $z0;
        com.jakewharton.disklrucache.DiskLruCache r0;
        java.io.FileInputStream $r16;
        java.io.File $r8;
        java.io.Closeable $r19;
        java.io.Writer $r9;
        java.lang.Object $r6;
        java.lang.StringBuilder $r10, $r17;

        r0 := @this: com.jakewharton.disklrucache.DiskLruCache;

        $r1 := @parameter0: java.lang.String;

        $r4 = null;

        entermonitor r0;

     label01:
        specialinvoke r0.<com.jakewharton.disklrucache.DiskLruCache: void checkNotClosed()>();

        specialinvoke r0.<com.jakewharton.disklrucache.DiskLruCache: void validateKey(java.lang.String)>($r1);

        $r5 = r0.<com.jakewharton.disklrucache.DiskLruCache: java.util.LinkedHashMap lruEntries>;

        $r6 = virtualinvoke $r5.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>($r1);

        r7 = (com.jakewharton.disklrucache.DiskLruCache$Entry) $r6;

     label02:
        if r7 != null goto label04;

     label03:
        exitmonitor r0;

        return $r4;

     label04:
        $z0 = staticinvoke <com.jakewharton.disklrucache.DiskLruCache$Entry: boolean access$600(com.jakewharton.disklrucache.DiskLruCache$Entry)>(r7);

        if $z0 == 0 goto label03;

        $i0 = r0.<com.jakewharton.disklrucache.DiskLruCache: int valueCount>;

        r2 = newarray (java.io.InputStream)[$i0];

     label05:
        $i0 = 0;

     label06:
        $i1 = r0.<com.jakewharton.disklrucache.DiskLruCache: int valueCount>;

        if $i0 >= $i1 goto label12;

        $r16 = new java.io.FileInputStream;

     label07:
        $r8 = virtualinvoke r7.<com.jakewharton.disklrucache.DiskLruCache$Entry: java.io.File getCleanFile(int)>($i0);

        specialinvoke $r16.<java.io.FileInputStream: void <init>(java.io.File)>($r8);

     label08:
        r2[$i0] = $r16;

     label09:
        $i0 = $i0 + 1;

        goto label06;

     label10:
        r3 := @caughtexception;

        $i0 = 0;

     label11:
        $i1 = r0.<com.jakewharton.disklrucache.DiskLruCache: int valueCount>;

        if $i0 >= $i1 goto label03;

        $r6 = r2[$i0];

        if $r6 == null goto label03;

        $r6 = r2[$i0];

        $r19 = (java.io.Closeable) $r6;

        staticinvoke <com.jakewharton.disklrucache.Util: void closeQuietly(java.io.Closeable)>($r19);

        $i0 = $i0 + 1;

        goto label11;

     label12:
        $i0 = r0.<com.jakewharton.disklrucache.DiskLruCache: int redundantOpCount>;

        $i0 = $i0 + 1;

        r0.<com.jakewharton.disklrucache.DiskLruCache: int redundantOpCount> = $i0;

        $r9 = r0.<com.jakewharton.disklrucache.DiskLruCache: java.io.Writer journalWriter>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("READ ");

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>($r11);

        $z0 = specialinvoke r0.<com.jakewharton.disklrucache.DiskLruCache: boolean journalRebuildRequired()>();

        if $z0 == 0 goto label13;

        $r12 = r0.<com.jakewharton.disklrucache.DiskLruCache: java.util.concurrent.ThreadPoolExecutor executorService>;

        $r13 = r0.<com.jakewharton.disklrucache.DiskLruCache: java.util.concurrent.Callable cleanupCallable>;

        virtualinvoke $r12.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.Future submit(java.util.concurrent.Callable)>($r13);

     label13:
        $r18 = new com.jakewharton.disklrucache.DiskLruCache$Snapshot;

        $r4 = $r18;

        $l2 = staticinvoke <com.jakewharton.disklrucache.DiskLruCache$Entry: long access$1200(com.jakewharton.disklrucache.DiskLruCache$Entry)>(r7);

        $r14 = staticinvoke <com.jakewharton.disklrucache.DiskLruCache$Entry: long[] access$1000(com.jakewharton.disklrucache.DiskLruCache$Entry)>(r7);

        $r20 = (java.io.InputStream[]) r2;

        specialinvoke $r18.<com.jakewharton.disklrucache.DiskLruCache$Snapshot: void <init>(com.jakewharton.disklrucache.DiskLruCache,java.lang.String,long,java.io.InputStream[],long[],com.jakewharton.disklrucache.DiskLruCache$1)>(r0, $r1, $l2, $r20, $r14, null);

     label14:
        goto label03;

     label15:
        $r15 := @caughtexception;

        exitmonitor r0;

        throw $r15;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label04 to label05 with label15;
        catch java.io.FileNotFoundException from label07 to label08 with label10;
        catch java.lang.Throwable from label06 to label09 with label15;
        catch java.lang.Throwable from label11 to label14 with label15;
    }

    public java.io.File getDirectory()
    {
        com.jakewharton.disklrucache.DiskLruCache r0;
        java.io.File r1;

        r0 := @this: com.jakewharton.disklrucache.DiskLruCache;

        r1 = r0.<com.jakewharton.disklrucache.DiskLruCache: java.io.File directory>;

        return r1;
    }

    public long getMaxSize()
    {
        com.jakewharton.disklrucache.DiskLruCache r0;
        long l0;

        r0 := @this: com.jakewharton.disklrucache.DiskLruCache;

        l0 = r0.<com.jakewharton.disklrucache.DiskLruCache: long maxSize>;

        return l0;
    }

    public boolean isClosed()
    {
        java.lang.Throwable $r2;
        com.jakewharton.disklrucache.DiskLruCache r0;
        java.io.Writer $r1;
        boolean $z0;

        r0 := @this: com.jakewharton.disklrucache.DiskLruCache;

        entermonitor r0;

     label1:
        $r1 = r0.<com.jakewharton.disklrucache.DiskLruCache: java.io.Writer journalWriter>;

     label2:
        if $r1 != null goto label4;

        $z0 = 1;

     label3:
        exitmonitor r0;

        return $z0;

     label4:
        $z0 = 0;

        goto label3;

     label5:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label5;
    }

    public boolean remove(java.lang.String) throws java.io.IOException
    {
        java.lang.Throwable $r9;
        com.jakewharton.disklrucache.DiskLruCache$Entry r4;
        java.util.concurrent.ThreadPoolExecutor $r13;
        long $l2, $l3;
        java.util.concurrent.Callable $r14;
        java.util.LinkedHashMap $r2;
        com.jakewharton.disklrucache.DiskLruCache$Editor $r5;
        long[] $r10;
        int i0, $i1;
        java.lang.String $r1, $r12;
        boolean $z0;
        com.jakewharton.disklrucache.DiskLruCache r0;
        java.io.IOException $r7;
        java.io.File $r6;
        java.io.Writer $r11;
        java.lang.Object $r3;
        java.lang.StringBuilder $r8;

        r0 := @this: com.jakewharton.disklrucache.DiskLruCache;

        $r1 := @parameter0: java.lang.String;

        entermonitor r0;

     label01:
        specialinvoke r0.<com.jakewharton.disklrucache.DiskLruCache: void checkNotClosed()>();

        specialinvoke r0.<com.jakewharton.disklrucache.DiskLruCache: void validateKey(java.lang.String)>($r1);

        $r2 = r0.<com.jakewharton.disklrucache.DiskLruCache: java.util.LinkedHashMap lruEntries>;

        $r3 = virtualinvoke $r2.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>($r1);

        r4 = (com.jakewharton.disklrucache.DiskLruCache$Entry) $r3;

        if r4 == null goto label03;

        $r5 = staticinvoke <com.jakewharton.disklrucache.DiskLruCache$Entry: com.jakewharton.disklrucache.DiskLruCache$Editor access$700(com.jakewharton.disklrucache.DiskLruCache$Entry)>(r4);

     label02:
        if $r5 == null goto label05;

     label03:
        $z0 = 0;

     label04:
        exitmonitor r0;

        return $z0;

     label05:
        i0 = 0;

     label06:
        $i1 = r0.<com.jakewharton.disklrucache.DiskLruCache: int valueCount>;

        if i0 >= $i1 goto label09;

        $r6 = virtualinvoke r4.<com.jakewharton.disklrucache.DiskLruCache$Entry: java.io.File getCleanFile(int)>(i0);

        $z0 = virtualinvoke $r6.<java.io.File: boolean delete()>();

        if $z0 != 0 goto label08;

        $r7 = new java.io.IOException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failed to delete ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r1 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>($r1);

        throw $r7;

     label07:
        $r9 := @caughtexception;

        exitmonitor r0;

        throw $r9;

     label08:
        $l2 = r0.<com.jakewharton.disklrucache.DiskLruCache: long size>;

        $r10 = staticinvoke <com.jakewharton.disklrucache.DiskLruCache$Entry: long[] access$1000(com.jakewharton.disklrucache.DiskLruCache$Entry)>(r4);

        $l3 = $r10[i0];

        $l2 = $l2 - $l3;

        r0.<com.jakewharton.disklrucache.DiskLruCache: long size> = $l2;

        $r10 = staticinvoke <com.jakewharton.disklrucache.DiskLruCache$Entry: long[] access$1000(com.jakewharton.disklrucache.DiskLruCache$Entry)>(r4);

        $r10[i0] = 0L;

        i0 = i0 + 1;

        goto label06;

     label09:
        i0 = r0.<com.jakewharton.disklrucache.DiskLruCache: int redundantOpCount>;

        i0 = i0 + 1;

        r0.<com.jakewharton.disklrucache.DiskLruCache: int redundantOpCount> = i0;

        $r11 = r0.<com.jakewharton.disklrucache.DiskLruCache: java.io.Writer journalWriter>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("REMOVE ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>($r12);

        $r2 = r0.<com.jakewharton.disklrucache.DiskLruCache: java.util.LinkedHashMap lruEntries>;

        virtualinvoke $r2.<java.util.LinkedHashMap: java.lang.Object remove(java.lang.Object)>($r1);

        $z0 = specialinvoke r0.<com.jakewharton.disklrucache.DiskLruCache: boolean journalRebuildRequired()>();

        if $z0 == 0 goto label10;

        $r13 = r0.<com.jakewharton.disklrucache.DiskLruCache: java.util.concurrent.ThreadPoolExecutor executorService>;

        $r14 = r0.<com.jakewharton.disklrucache.DiskLruCache: java.util.concurrent.Callable cleanupCallable>;

        virtualinvoke $r13.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.Future submit(java.util.concurrent.Callable)>($r14);

     label10:
        $z0 = 1;

        goto label04;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label06 to label07 with label07;
        catch java.lang.Throwable from label08 to label10 with label07;
    }

    public void setMaxSize(long)
    {
        java.lang.Throwable $r3;
        com.jakewharton.disklrucache.DiskLruCache r0;
        java.util.concurrent.ThreadPoolExecutor $r2;
        long $l0;
        java.util.concurrent.Callable $r1;

        r0 := @this: com.jakewharton.disklrucache.DiskLruCache;

        $l0 := @parameter0: long;

        entermonitor r0;

     label1:
        r0.<com.jakewharton.disklrucache.DiskLruCache: long maxSize> = $l0;

        $r2 = r0.<com.jakewharton.disklrucache.DiskLruCache: java.util.concurrent.ThreadPoolExecutor executorService>;

        $r1 = r0.<com.jakewharton.disklrucache.DiskLruCache: java.util.concurrent.Callable cleanupCallable>;

        virtualinvoke $r2.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.Future submit(java.util.concurrent.Callable)>($r1);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public long size()
    {
        java.lang.Throwable $r1;
        com.jakewharton.disklrucache.DiskLruCache r0;
        long l0;

        r0 := @this: com.jakewharton.disklrucache.DiskLruCache;

        entermonitor r0;

     label1:
        l0 = r0.<com.jakewharton.disklrucache.DiskLruCache: long size>;

     label2:
        exitmonitor r0;

        return l0;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
