public class tw.com.soyong.mebook.BMPGenerator extends java.lang.Object
{

    private void <init>()
    {
        tw.com.soyong.mebook.BMPGenerator r0;

        r0 := @this: tw.com.soyong.mebook.BMPGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static byte[] encodeBMP(byte[])
    {
        byte[] $r0;
        java.io.ByteArrayOutputStream $r1;
        java.lang.RuntimeException $r4;
        java.io.DataOutputStream $r2;
        java.io.ByteArrayInputStream $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        $r0 := @parameter0: byte[];

        $i0 = lengthof $r0;

        $i0 = $i0 + 14;

        $r1 = new java.io.ByteArrayOutputStream;

        specialinvoke $r1.<java.io.ByteArrayOutputStream: void <init>(int)>($i0);

        $r2 = new java.io.DataOutputStream;

        specialinvoke $r2.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r1);

        virtualinvoke $r2.<java.io.DataOutputStream: void writeByte(int)>(66);

        virtualinvoke $r2.<java.io.DataOutputStream: void writeByte(int)>(77);

        $i1 = staticinvoke <tw.com.soyong.mebook.BMPGenerator: int swapEndian(int)>($i0);

        virtualinvoke $r2.<java.io.DataOutputStream: void writeInt(int)>($i1);

        virtualinvoke $r2.<java.io.DataOutputStream: void writeInt(int)>(0);

        $r3 = new java.io.ByteArrayInputStream;

        specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[])>($r0);

        virtualinvoke $r3.<java.io.ByteArrayInputStream: long skip(long)>(14L);

        $i1 = virtualinvoke $r3.<java.io.ByteArrayInputStream: int read()>();

        $i1 = $i1 & 255;

        $i2 = virtualinvoke $r3.<java.io.ByteArrayInputStream: int read()>();

        $i2 = $i2 & 255;

        $i2 = $i2 << 8;

        $i1 = $i1 | $i2;

        virtualinvoke $r3.<java.io.ByteArrayInputStream: long skip(long)>(16L);

        $i2 = virtualinvoke $r3.<java.io.ByteArrayInputStream: int read()>();

        $i2 = $i2 & 255;

        $i3 = virtualinvoke $r3.<java.io.ByteArrayInputStream: int read()>();

        $i3 = $i3 & 255;

        $i4 = virtualinvoke $r3.<java.io.ByteArrayInputStream: int read()>();

        $i4 = $i4 & 255;

        $i5 = virtualinvoke $r3.<java.io.ByteArrayInputStream: int read()>();

        $i5 = $i5 & 255;

        virtualinvoke $r3.<java.io.ByteArrayInputStream: void close()>();

        $i5 = $i5 << 24;

        $i4 = $i4 << 16;

        $i4 = $i5 | $i4;

        $i3 = $i3 << 8;

        $i3 = $i4 | $i3;

        $i2 = $i3 | $i2;

        if $i2 <= 0 goto label2;

     label1:
        $i1 = $i2 << 2;

        $i1 = $i1 + 54;

        $i1 = staticinvoke <tw.com.soyong.mebook.BMPGenerator: int swapEndian(int)>($i1);

        virtualinvoke $r2.<java.io.DataOutputStream: void writeInt(int)>($i1);

        $i1 = lengthof $r0;

        virtualinvoke $r2.<java.io.DataOutputStream: void write(byte[],int,int)>($r0, 0, $i1);

        $r0 = virtualinvoke $r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        virtualinvoke $r1.<java.io.ByteArrayOutputStream: void close()>();

        $i1 = lengthof $r0;

        if $i1 == $i0 goto label4;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("bad math");

        throw $r4;

     label2:
        if $i1 <= 8 goto label3;

        $i2 = 0;

        goto label1;

     label3:
        $i2 = 1 << $i1;

        goto label1;

     label4:
        return $r0;
    }

    private static int swapEndian(int)
    {
        int $i0, $i1, $i2, $i3;

        $i0 := @parameter0: int;

        $i1 = $i0 & 255;

        $i2 = $i0 >> 8;

        $i3 = $i2 & 255;

        $i2 = $i0 >> 16;

        $i2 = $i2 & 255;

        $i0 = $i0 >>> 24;

        $i1 = $i1 << 24;

        $i3 = $i3 << 16;

        $i1 = $i1 | $i3;

        $i2 = $i2 << 8;

        $i2 = $i1 | $i2;

        $i0 = $i2 | $i0;

        return $i0;
    }
}
