class com.hp.hpl.sparta.NodeListWithPosition extends java.lang.Object
{
    private static final java.lang.Integer EIGHT;
    private static final java.lang.Integer FIVE;
    private static final java.lang.Integer FOUR;
    private static final java.lang.Integer NINE;
    private static final java.lang.Integer ONE;
    private static final java.lang.Integer SEVEN;
    private static final java.lang.Integer SIX;
    private static final java.lang.Integer TEN;
    private static final java.lang.Integer THREE;
    private static final java.lang.Integer TWO;
    private java.util.Hashtable positions_;
    private final java.util.Vector vector_;

    static void <clinit>()
    {
        java.lang.Integer $r0;

        $r0 = new java.lang.Integer;

        specialinvoke $r0.<java.lang.Integer: void <init>(int)>(1);

        <com.hp.hpl.sparta.NodeListWithPosition: java.lang.Integer ONE> = $r0;

        $r0 = new java.lang.Integer;

        specialinvoke $r0.<java.lang.Integer: void <init>(int)>(2);

        <com.hp.hpl.sparta.NodeListWithPosition: java.lang.Integer TWO> = $r0;

        $r0 = new java.lang.Integer;

        specialinvoke $r0.<java.lang.Integer: void <init>(int)>(3);

        <com.hp.hpl.sparta.NodeListWithPosition: java.lang.Integer THREE> = $r0;

        $r0 = new java.lang.Integer;

        specialinvoke $r0.<java.lang.Integer: void <init>(int)>(4);

        <com.hp.hpl.sparta.NodeListWithPosition: java.lang.Integer FOUR> = $r0;

        $r0 = new java.lang.Integer;

        specialinvoke $r0.<java.lang.Integer: void <init>(int)>(5);

        <com.hp.hpl.sparta.NodeListWithPosition: java.lang.Integer FIVE> = $r0;

        $r0 = new java.lang.Integer;

        specialinvoke $r0.<java.lang.Integer: void <init>(int)>(6);

        <com.hp.hpl.sparta.NodeListWithPosition: java.lang.Integer SIX> = $r0;

        $r0 = new java.lang.Integer;

        specialinvoke $r0.<java.lang.Integer: void <init>(int)>(7);

        <com.hp.hpl.sparta.NodeListWithPosition: java.lang.Integer SEVEN> = $r0;

        $r0 = new java.lang.Integer;

        specialinvoke $r0.<java.lang.Integer: void <init>(int)>(8);

        <com.hp.hpl.sparta.NodeListWithPosition: java.lang.Integer EIGHT> = $r0;

        $r0 = new java.lang.Integer;

        specialinvoke $r0.<java.lang.Integer: void <init>(int)>(9);

        <com.hp.hpl.sparta.NodeListWithPosition: java.lang.Integer NINE> = $r0;

        $r0 = new java.lang.Integer;

        specialinvoke $r0.<java.lang.Integer: void <init>(int)>(10);

        <com.hp.hpl.sparta.NodeListWithPosition: java.lang.Integer TEN> = $r0;

        return;
    }

    void <init>()
    {
        com.hp.hpl.sparta.NodeListWithPosition r0;
        java.util.Vector $r1;
        java.util.Hashtable $r2;

        r0 := @this: com.hp.hpl.sparta.NodeListWithPosition;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.Vector;

        specialinvoke $r1.<java.util.Vector: void <init>()>();

        r0.<com.hp.hpl.sparta.NodeListWithPosition: java.util.Vector vector_> = $r1;

        $r2 = new java.util.Hashtable;

        specialinvoke $r2.<java.util.Hashtable: void <init>()>();

        r0.<com.hp.hpl.sparta.NodeListWithPosition: java.util.Hashtable positions_> = $r2;

        return;
    }

    private static java.lang.Integer identity(com.hp.hpl.sparta.Node)
    {
        int $i0;
        com.hp.hpl.sparta.Node $r0;
        java.lang.Integer $r1;

        $r0 := @parameter0: com.hp.hpl.sparta.Node;

        $r1 = new java.lang.Integer;

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>($r0);

        specialinvoke $r1.<java.lang.Integer: void <init>(int)>($i0);

        return $r1;
    }

    void add(com.hp.hpl.sparta.Node, int)
    {
        com.hp.hpl.sparta.Node $r1;
        java.util.Vector $r4;
        int $i0;
        com.hp.hpl.sparta.NodeListWithPosition r0;
        java.lang.Integer $r3, $r5;
        java.util.Hashtable $r2;

        r0 := @this: com.hp.hpl.sparta.NodeListWithPosition;

        $r1 := @parameter0: com.hp.hpl.sparta.Node;

        $i0 := @parameter1: int;

        $r4 = r0.<com.hp.hpl.sparta.NodeListWithPosition: java.util.Vector vector_>;

        virtualinvoke $r4.<java.util.Vector: void addElement(java.lang.Object)>($r1);

        lookupswitch($i0)
        {
            case 1: goto label03;
            case 2: goto label04;
            case 3: goto label05;
            case 4: goto label06;
            case 5: goto label07;
            case 6: goto label08;
            case 7: goto label09;
            case 8: goto label10;
            case 9: goto label11;
            case 10: goto label12;
            default: goto label01;
        };

     label01:
        $r5 = new java.lang.Integer;

        specialinvoke $r5.<java.lang.Integer: void <init>(int)>($i0);

     label02:
        $r2 = r0.<com.hp.hpl.sparta.NodeListWithPosition: java.util.Hashtable positions_>;

        $r3 = staticinvoke <com.hp.hpl.sparta.NodeListWithPosition: java.lang.Integer identity(com.hp.hpl.sparta.Node)>($r1);

        virtualinvoke $r2.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r5);

        return;

     label03:
        $r5 = <com.hp.hpl.sparta.NodeListWithPosition: java.lang.Integer ONE>;

        goto label02;

     label04:
        $r5 = <com.hp.hpl.sparta.NodeListWithPosition: java.lang.Integer TWO>;

        goto label02;

     label05:
        $r5 = <com.hp.hpl.sparta.NodeListWithPosition: java.lang.Integer THREE>;

        goto label02;

     label06:
        $r5 = <com.hp.hpl.sparta.NodeListWithPosition: java.lang.Integer FOUR>;

        goto label02;

     label07:
        $r5 = <com.hp.hpl.sparta.NodeListWithPosition: java.lang.Integer FIVE>;

        goto label02;

     label08:
        $r5 = <com.hp.hpl.sparta.NodeListWithPosition: java.lang.Integer SIX>;

        goto label02;

     label09:
        $r5 = <com.hp.hpl.sparta.NodeListWithPosition: java.lang.Integer SEVEN>;

        goto label02;

     label10:
        $r5 = <com.hp.hpl.sparta.NodeListWithPosition: java.lang.Integer EIGHT>;

        goto label02;

     label11:
        $r5 = <com.hp.hpl.sparta.NodeListWithPosition: java.lang.Integer NINE>;

        goto label02;

     label12:
        $r5 = <com.hp.hpl.sparta.NodeListWithPosition: java.lang.Integer TEN>;

        goto label02;
    }

    void add(java.lang.String)
    {
        com.hp.hpl.sparta.NodeListWithPosition r0;
        java.lang.String $r1;
        java.util.Vector $r2;

        r0 := @this: com.hp.hpl.sparta.NodeListWithPosition;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.hp.hpl.sparta.NodeListWithPosition: java.util.Vector vector_>;

        virtualinvoke $r2.<java.util.Vector: void addElement(java.lang.Object)>($r1);

        return;
    }

    java.util.Enumeration iterator()
    {
        com.hp.hpl.sparta.NodeListWithPosition r0;
        java.util.Vector $r2;
        java.util.Enumeration $r1;

        r0 := @this: com.hp.hpl.sparta.NodeListWithPosition;

        $r2 = r0.<com.hp.hpl.sparta.NodeListWithPosition: java.util.Vector vector_>;

        $r1 = virtualinvoke $r2.<java.util.Vector: java.util.Enumeration elements()>();

        return $r1;
    }

    int position(com.hp.hpl.sparta.Node)
    {
        com.hp.hpl.sparta.Node $r1;
        int $i0;
        java.lang.Object $r4;
        com.hp.hpl.sparta.NodeListWithPosition r0;
        java.lang.Integer $r3;
        java.util.Hashtable $r2;

        r0 := @this: com.hp.hpl.sparta.NodeListWithPosition;

        $r1 := @parameter0: com.hp.hpl.sparta.Node;

        $r2 = r0.<com.hp.hpl.sparta.NodeListWithPosition: java.util.Hashtable positions_>;

        $r3 = staticinvoke <com.hp.hpl.sparta.NodeListWithPosition: java.lang.Integer identity(com.hp.hpl.sparta.Node)>($r1);

        $r4 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r3);

        $r3 = (java.lang.Integer) $r4;

        $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        return $i0;
    }

    void removeAllElements()
    {
        com.hp.hpl.sparta.NodeListWithPosition r0;
        java.util.Vector $r1;
        java.util.Hashtable $r2;

        r0 := @this: com.hp.hpl.sparta.NodeListWithPosition;

        $r1 = r0.<com.hp.hpl.sparta.NodeListWithPosition: java.util.Vector vector_>;

        virtualinvoke $r1.<java.util.Vector: void removeAllElements()>();

        $r2 = r0.<com.hp.hpl.sparta.NodeListWithPosition: java.util.Hashtable positions_>;

        virtualinvoke $r2.<java.util.Hashtable: void clear()>();

        return;
    }

    public java.lang.String toString()
    {
        java.lang.Throwable $r7;
        com.hp.hpl.sparta.Node $r8;
        java.util.Enumeration $r3;
        com.hp.hpl.sparta.NodeListWithPosition r0;
        java.lang.Integer $r10;
        java.util.Vector $r2;
        java.lang.StringBuffer $r1, $r6;
        java.lang.Object $r5;
        java.lang.String $r4;
        java.util.Hashtable $r9;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.NodeListWithPosition;

        $r1 = new java.lang.StringBuffer;

     label01:
        specialinvoke $r1.<java.lang.StringBuffer: void <init>(java.lang.String)>("{ ");

     label02:
        $r2 = r0.<com.hp.hpl.sparta.NodeListWithPosition: java.util.Vector vector_>;

     label03:
        $r3 = virtualinvoke $r2.<java.util.Vector: java.util.Enumeration elements()>();

     label04:
        $z0 = interfaceinvoke $r3.<java.util.Enumeration: boolean hasMoreElements()>();

     label05:
        if $z0 != 0 goto label08;

     label06:
        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("}");

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

     label07:
        return $r4;

     label08:
        $r5 = interfaceinvoke $r3.<java.util.Enumeration: java.lang.Object nextElement()>();

     label09:
        $z0 = $r5 instanceof java.lang.String;

        if $z0 == 0 goto label13;

        $r6 = new java.lang.StringBuffer;

     label10:
        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("String(");

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r5);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") ");

        $r4 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

     label11:
        goto label04;

     label12:
        $r7 := @caughtexception;

        $r4 = virtualinvoke $r7.<java.lang.Throwable: java.lang.String toString()>();

        return $r4;

     label13:
        $r8 = (com.hp.hpl.sparta.Node) $r5;

        $r6 = new java.lang.StringBuffer;

     label14:
        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Node(");

        $r4 = virtualinvoke $r8.<com.hp.hpl.sparta.Node: java.lang.String toXml()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")[");

     label15:
        $r9 = r0.<com.hp.hpl.sparta.NodeListWithPosition: java.util.Hashtable positions_>;

     label16:
        $r10 = staticinvoke <com.hp.hpl.sparta.NodeListWithPosition: java.lang.Integer identity(com.hp.hpl.sparta.Node)>($r8);

        $r5 = virtualinvoke $r9.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r10);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r5);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] ");

        $r4 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

     label17:
        goto label04;

        catch java.io.IOException from label01 to label02 with label12;
        catch java.io.IOException from label03 to label05 with label12;
        catch java.io.IOException from label06 to label07 with label12;
        catch java.io.IOException from label08 to label09 with label12;
        catch java.io.IOException from label10 to label11 with label12;
        catch java.io.IOException from label14 to label15 with label12;
        catch java.io.IOException from label16 to label17 with label12;
    }
}
