public class jp.Adlantis.Android.ADLDebugUtils extends java.lang.Object
{
    static java.lang.String DEBUG_CONTEXT;

    static void <clinit>()
    {
        <jp.Adlantis.Android.ADLDebugUtils: java.lang.String DEBUG_CONTEXT> = "ADLDebugUtils";

        return;
    }

    public void <init>()
    {
        jp.Adlantis.Android.ADLDebugUtils r0;

        r0 := @this: jp.Adlantis.Android.ADLDebugUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void dumpMemoryInfo(android.content.Context)
    {
        android.content.Context $r0;
        android.app.ActivityManager $r2;
        long $l0;
        java.lang.Object $r1;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        android.app.ActivityManager$MemoryInfo $r3;
        boolean $z0;

        $r0 := @parameter0: android.content.Context;

        $r1 = virtualinvoke $r0.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("activity");

        $r2 = (android.app.ActivityManager) $r1;

        $r3 = new android.app.ActivityManager$MemoryInfo;

        specialinvoke $r3.<android.app.ActivityManager$MemoryInfo: void <init>()>();

        virtualinvoke $r2.<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>($r3);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" memoryInfo.availMem ");

        $l0 = $r3.<android.app.ActivityManager$MemoryInfo: long availMem>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <jp.Adlantis.Android.ADLDebugUtils: void logd(java.lang.String)>($r5);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" memoryInfo.lowMemory ");

        $z0 = $r3.<android.app.ActivityManager$MemoryInfo: boolean lowMemory>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <jp.Adlantis.Android.ADLDebugUtils: void logd(java.lang.String)>($r5);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" memoryInfo.threshold ");

        $l0 = $r3.<android.app.ActivityManager$MemoryInfo: long threshold>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <jp.Adlantis.Android.ADLDebugUtils: void logd(java.lang.String)>($r5);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Debug.getNativeHeapAllocatedSize ");

        $l0 = staticinvoke <android.os.Debug: long getNativeHeapAllocatedSize()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <jp.Adlantis.Android.ADLDebugUtils: void logd(java.lang.String)>($r5);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Debug.getNativeHeapFreeSize ");

        $l0 = staticinvoke <android.os.Debug: long getNativeHeapFreeSize()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <jp.Adlantis.Android.ADLDebugUtils: void logd(java.lang.String)>($r5);

        return;
    }

    public static void dumpSubviewLayout(android.view.View, int)
    {
        int $i0, $i1, $i2;
        android.view.View $r0;
        android.view.ViewGroup $r1;
        boolean $z0;

        $r0 := @parameter0: android.view.View;

        $i0 := @parameter1: int;

        staticinvoke <jp.Adlantis.Android.ADLDebugUtils: void dumpViewGeometry(android.view.View,int)>($r0, $i0);

        $z0 = $r0 instanceof android.view.ViewGroup;

        if $z0 == 0 goto label2;

        $r1 = (android.view.ViewGroup) $r0;

        $i2 = 0;

     label1:
        $i1 = virtualinvoke $r1.<android.view.ViewGroup: int getChildCount()>();

        if $i2 >= $i1 goto label2;

        $r0 = virtualinvoke $r1.<android.view.ViewGroup: android.view.View getChildAt(int)>($i2);

        $i1 = $i0 + 2;

        staticinvoke <jp.Adlantis.Android.ADLDebugUtils: void dumpSubviewLayout(android.view.View,int)>($r0, $i1);

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return;
    }

    public static void dumpViewGeometry(android.view.View, int)
    {
        int $i0;
        android.view.View $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $r0 := @parameter0: android.view.View;

        $i0 := @parameter1: int;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = staticinvoke <jp.Adlantis.Android.ADLDebugUtils: java.lang.String spaces(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("view = ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" l = ");

        $i0 = virtualinvoke $r0.<android.view.View: int getLeft()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" t = ");

        $i0 = virtualinvoke $r0.<android.view.View: int getTop()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" r = ");

        $i0 = virtualinvoke $r0.<android.view.View: int getRight()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" b = ");

        $i0 = virtualinvoke $r0.<android.view.View: int getBottom()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <jp.Adlantis.Android.ADLDebugUtils: void logd(java.lang.String)>($r2);

        return;
    }

    static void dumpViewGroupInfo(android.view.ViewGroup)
    {
        android.graphics.Rect $r4;
        android.graphics.Point $r5;
        android.view.ViewGroup $r0;
        int $i0, $i1;
        android.view.View $r3;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        boolean $z0;

        $r0 := @parameter0: android.view.ViewGroup;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" childCount=");

        $i0 = virtualinvoke $r0.<android.view.ViewGroup: int getChildCount()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <jp.Adlantis.Android.ADLDebugUtils: void logd(java.lang.String)>($r2);

        $i0 = 0;

     label1:
        $i1 = virtualinvoke $r0.<android.view.ViewGroup: int getChildCount()>();

        if $i0 >= $i1 goto label2;

        $r3 = virtualinvoke $r0.<android.view.ViewGroup: android.view.View getChildAt(int)>($i0);

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("view[");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]=");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <jp.Adlantis.Android.ADLDebugUtils: void logd(java.lang.String)>($r2);

        $r4 = new android.graphics.Rect;

        specialinvoke $r4.<android.graphics.Rect: void <init>()>();

        $r5 = new android.graphics.Point;

        specialinvoke $r5.<android.graphics.Point: void <init>()>();

        $z0 = virtualinvoke $r0.<android.view.ViewGroup: boolean getChildVisibleRect(android.view.View,android.graphics.Rect,android.graphics.Point)>($r3, $r4, $r5);

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("result=");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" childRect=");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" childPoint=");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <jp.Adlantis.Android.ADLDebugUtils: void logd(java.lang.String)>($r2);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    static void logd(java.lang.String)
    {
        java.lang.String $r0, $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = <jp.Adlantis.Android.ADLDebugUtils: java.lang.String DEBUG_CONTEXT>;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r1, $r0);

        return;
    }

    public static java.lang.String spaces(int)
    {
        java.lang.Object[] $r2;
        int $i0;
        java.lang.StringBuilder $r0;
        java.lang.String $r1;

        $i0 := @parameter0: int;

        if $i0 <= 0 goto label1;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%");

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s");

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = "";

        $r1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>($r1, $r2);

        return $r1;

     label1:
        return "";
    }
}
