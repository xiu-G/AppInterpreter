public class com.kingroot.sdk.am extends java.lang.Object
{
    private static java.lang.String[] bv;

    static void <clinit>()
    {
        java.lang.String[] $r0;

        $r0 = newarray (java.lang.String)[12];

        $r0[0] = "Jan";

        $r0[1] = "Feb";

        $r0[2] = "Mar";

        $r0[3] = "Apr";

        $r0[4] = "May";

        $r0[5] = "Jun";

        $r0[6] = "Jul";

        $r0[7] = "Aug";

        $r0[8] = "Sep";

        $r0[9] = "Oct";

        $r0[10] = "Nov";

        $r0[11] = "Dec";

        <com.kingroot.sdk.am: java.lang.String[] bv> = $r0;

        return;
    }

    private static long a(java.lang.String, long)
    {
        long $l0, $l1;
        java.lang.String $r0;
        java.lang.Exception $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $l0 := @parameter1: long;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r0);

        if $z0 != 0 goto label4;

     label1:
        $l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r0);

     label2:
        return $l1;

     label3:
        $r1 := @caughtexception;

        virtualinvoke $r1.<java.lang.Exception: void printStackTrace()>();

     label4:
        return 0L;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private static com.kingroot.sdk.ap a(org.xmlpull.v1.XmlPullParser)
    {
        int $i0;
        java.lang.String $r1;
        org.xmlpull.v1.XmlPullParser $r0;
        boolean $z0;
        com.kingroot.sdk.ap $r2;

        $r0 := @parameter0: org.xmlpull.v1.XmlPullParser;

     label1:
        $i0 = interfaceinvoke $r0.<org.xmlpull.v1.XmlPullParser: int next()>();

        if $i0 == 1 goto label2;

        $r1 = interfaceinvoke $r0.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("root_zip");

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <com.kingroot.sdk.am: com.kingroot.sdk.ap b(org.xmlpull.v1.XmlPullParser)>($r0);

        return $r2;

     label2:
        return null;
    }

    private static com.kingroot.sdk.ap b(org.xmlpull.v1.XmlPullParser)
    {
        long $l1;
        int $i0;
        java.lang.String $r2;
        org.xmlpull.v1.XmlPullParser $r0;
        com.kingroot.sdk.ap $r1;
        java.lang.Exception $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;

        $r0 := @parameter0: org.xmlpull.v1.XmlPullParser;

        $r1 = new com.kingroot.sdk.ap;

        specialinvoke $r1.<com.kingroot.sdk.ap: void <init>()>();

     label01:
        interfaceinvoke $r0.<org.xmlpull.v1.XmlPullParser: int nextTag()>();

        interfaceinvoke $r0.<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>(2, "", "name");

        $r2 = interfaceinvoke $r0.<org.xmlpull.v1.XmlPullParser: java.lang.String nextText()>();

        $r1.<com.kingroot.sdk.ap: java.lang.String name> = $r2;

        interfaceinvoke $r0.<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>(3, "", "name");

     label02:
        interfaceinvoke $r0.<org.xmlpull.v1.XmlPullParser: int nextTag()>();

        interfaceinvoke $r0.<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>(2, "", "sid");

        $r2 = interfaceinvoke $r0.<org.xmlpull.v1.XmlPullParser: java.lang.String nextText()>();

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        $r1.<com.kingroot.sdk.ap: java.lang.String bK> = $r2;

        interfaceinvoke $r0.<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>(3, "", "sid");

     label03:
        interfaceinvoke $r0.<org.xmlpull.v1.XmlPullParser: int nextTag()>();

        interfaceinvoke $r0.<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>(2, "", "version");

        $r2 = interfaceinvoke $r0.<org.xmlpull.v1.XmlPullParser: java.lang.String nextText()>();

        $r1.<com.kingroot.sdk.ap: java.lang.String az> = $r2;

        interfaceinvoke $r0.<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>(3, "", "version");

     label04:
        interfaceinvoke $r0.<org.xmlpull.v1.XmlPullParser: int nextTag()>();

        interfaceinvoke $r0.<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>(2, "", "type");

        $r2 = interfaceinvoke $r0.<org.xmlpull.v1.XmlPullParser: java.lang.String nextText()>();

        $i0 = staticinvoke <com.kingroot.sdk.am: int parseInt(java.lang.String,int)>($r2, 1);

        $r1.<com.kingroot.sdk.ap: int type> = $i0;

        interfaceinvoke $r0.<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>(3, "", "type");

     label05:
        interfaceinvoke $r0.<org.xmlpull.v1.XmlPullParser: int nextTag()>();

        interfaceinvoke $r0.<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>(2, "", "size");

        $r2 = interfaceinvoke $r0.<org.xmlpull.v1.XmlPullParser: java.lang.String nextText()>();

        $l1 = staticinvoke <com.kingroot.sdk.am: long a(java.lang.String,long)>($r2, 0L);

        $r1.<com.kingroot.sdk.ap: long size> = $l1;

        interfaceinvoke $r0.<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>(3, "", "size");

     label06:
        interfaceinvoke $r0.<org.xmlpull.v1.XmlPullParser: int nextTag()>();

        interfaceinvoke $r0.<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>(2, "", "verified");

        $r2 = interfaceinvoke $r0.<org.xmlpull.v1.XmlPullParser: java.lang.String nextText()>();

        $i0 = staticinvoke <com.kingroot.sdk.am: int parseInt(java.lang.String,int)>($r2, 1);

        $r1.<com.kingroot.sdk.ap: int bL> = $i0;

        interfaceinvoke $r0.<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>(3, "", "verified");

     label07:
        interfaceinvoke $r0.<org.xmlpull.v1.XmlPullParser: int nextTag()>();

        interfaceinvoke $r0.<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>(2, "", "md5");

        $r2 = interfaceinvoke $r0.<org.xmlpull.v1.XmlPullParser: java.lang.String nextText()>();

        $r1.<com.kingroot.sdk.ap: java.lang.String O> = $r2;

        interfaceinvoke $r0.<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>(3, "", "md5");

     label08:
        interfaceinvoke $r0.<org.xmlpull.v1.XmlPullParser: int nextTag()>();

        interfaceinvoke $r0.<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>(2, "", "encrypt");

        $r2 = interfaceinvoke $r0.<org.xmlpull.v1.XmlPullParser: java.lang.String nextText()>();

        $r1.<com.kingroot.sdk.ap: java.lang.String bM> = $r2;

        interfaceinvoke $r0.<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>(3, "", "encrypt");

     label09:
        interfaceinvoke $r0.<org.xmlpull.v1.XmlPullParser: int nextTag()>();

        interfaceinvoke $r0.<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>(2, "", "url");

        $r2 = interfaceinvoke $r0.<org.xmlpull.v1.XmlPullParser: java.lang.String nextText()>();

        $r1.<com.kingroot.sdk.ap: java.lang.String M> = $r2;

        interfaceinvoke $r0.<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>(3, "", "url");

     label10:
        interfaceinvoke $r0.<org.xmlpull.v1.XmlPullParser: int nextTag()>();

        interfaceinvoke $r0.<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>(2, "", "backup_url");

        $r2 = interfaceinvoke $r0.<org.xmlpull.v1.XmlPullParser: java.lang.String nextText()>();

        $r1.<com.kingroot.sdk.ap: java.lang.String bN> = $r2;

        interfaceinvoke $r0.<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>(3, "", "backup_url");

     label11:
        interfaceinvoke $r0.<org.xmlpull.v1.XmlPullParser: int nextTag()>();

        interfaceinvoke $r0.<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>(2, "", "exploit_type");

        $r2 = interfaceinvoke $r0.<org.xmlpull.v1.XmlPullParser: java.lang.String nextText()>();

        $i0 = staticinvoke <com.kingroot.sdk.am: int parseInt(java.lang.String,int)>($r2, 0);

        $r1.<com.kingroot.sdk.ap: int bO> = $i0;

        interfaceinvoke $r0.<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>(3, "", "exploit_type");

     label12:
        interfaceinvoke $r0.<org.xmlpull.v1.XmlPullParser: int nextTag()>();

        interfaceinvoke $r0.<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>(2, "", "interface_type");

        $r2 = interfaceinvoke $r0.<org.xmlpull.v1.XmlPullParser: java.lang.String nextText()>();

        $i0 = staticinvoke <com.kingroot.sdk.am: int parseInt(java.lang.String,int)>($r2, 0);

        $r1.<com.kingroot.sdk.ap: int bP> = $i0;

        interfaceinvoke $r0.<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>(3, "", "interface_type");

     label13:
        return $r1;

     label14:
        $r3 := @caughtexception;

        virtualinvoke $r3.<java.lang.Exception: void printStackTrace()>();

        goto label02;

     label15:
        $r4 := @caughtexception;

        virtualinvoke $r4.<java.lang.Exception: void printStackTrace()>();

        goto label03;

     label16:
        $r5 := @caughtexception;

        virtualinvoke $r5.<java.lang.Exception: void printStackTrace()>();

        goto label04;

     label17:
        $r6 := @caughtexception;

        virtualinvoke $r6.<java.lang.Exception: void printStackTrace()>();

        goto label05;

     label18:
        $r7 := @caughtexception;

        virtualinvoke $r7.<java.lang.Exception: void printStackTrace()>();

        goto label06;

     label19:
        $r8 := @caughtexception;

        virtualinvoke $r8.<java.lang.Exception: void printStackTrace()>();

        goto label07;

     label20:
        $r9 := @caughtexception;

        virtualinvoke $r9.<java.lang.Exception: void printStackTrace()>();

        goto label08;

     label21:
        $r10 := @caughtexception;

        virtualinvoke $r10.<java.lang.Exception: void printStackTrace()>();

        goto label09;

     label22:
        $r11 := @caughtexception;

        virtualinvoke $r11.<java.lang.Exception: void printStackTrace()>();

        goto label10;

     label23:
        $r12 := @caughtexception;

        virtualinvoke $r12.<java.lang.Exception: void printStackTrace()>();

        goto label11;

     label24:
        $r13 := @caughtexception;

        virtualinvoke $r13.<java.lang.Exception: void printStackTrace()>();

        $r1.<com.kingroot.sdk.ap: int bO> = 0;

        goto label12;

     label25:
        $r14 := @caughtexception;

        virtualinvoke $r14.<java.lang.Exception: void printStackTrace()>();

        $r1.<com.kingroot.sdk.ap: int bP> = 0;

        return $r1;

        catch java.lang.Exception from label01 to label02 with label14;
        catch java.lang.Exception from label02 to label03 with label15;
        catch java.lang.Exception from label03 to label04 with label16;
        catch java.lang.Exception from label04 to label05 with label17;
        catch java.lang.Exception from label05 to label06 with label18;
        catch java.lang.Exception from label06 to label07 with label19;
        catch java.lang.Exception from label07 to label08 with label20;
        catch java.lang.Exception from label08 to label09 with label21;
        catch java.lang.Exception from label09 to label10 with label22;
        catch java.lang.Exception from label10 to label11 with label23;
        catch java.lang.Exception from label11 to label12 with label24;
        catch java.lang.Exception from label12 to label13 with label25;
    }

    public static com.kingroot.sdk.ap[] e(java.util.ArrayList)
    {
        java.lang.Object[] $r11;
        java.lang.Exception $r9;
        com.kingroot.sdk.ap[] $r10;
        java.util.ArrayList $r0, $r1;
        java.io.StringReader $r6;
        org.xmlpull.v1.XmlPullParserFactory $r2;
        int $i0, $i1;
        java.lang.Object $r4;
        java.lang.String $r5, $r7;
        org.xmlpull.v1.XmlPullParser $r3;
        boolean $z0;
        com.kingroot.sdk.ap $r8;

        $r0 := @parameter0: java.util.ArrayList;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r2 = staticinvoke <org.xmlpull.v1.XmlPullParserFactory: org.xmlpull.v1.XmlPullParserFactory newInstance()>();

        $r3 = virtualinvoke $r2.<org.xmlpull.v1.XmlPullParserFactory: org.xmlpull.v1.XmlPullParser newPullParser()>();

        $i0 = 0;

     label01:
        $i1 = virtualinvoke $r0.<java.util.ArrayList: int size()>();

        if $i0 >= $i1 goto label16;

     label02:
        $r4 = virtualinvoke $r0.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r5 = (java.lang.String) $r4;

     label03:
        $r6 = new java.io.StringReader;

     label04:
        specialinvoke $r6.<java.io.StringReader: void <init>(java.lang.String)>($r5);

        interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.Reader)>($r6);

     label05:
        $i1 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: int next()>();

     label06:
        if $i1 == 1 goto label14;

     label07:
        $r7 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

     label08:
        if $r7 == null goto label05;

     label09:
        $i1 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: int getEventType()>();

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("root");

     label10:
        if $z0 == 0 goto label05;

        if $i1 != 2 goto label05;

     label11:
        $r8 = staticinvoke <com.kingroot.sdk.am: com.kingroot.sdk.ap a(org.xmlpull.v1.XmlPullParser)>($r3);

     label12:
        if $r8 == null goto label14;

     label13:
        $r8.<com.kingroot.sdk.ap: java.lang.String bQ> = $r5;

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r8);

     label14:
        $i0 = $i0 + 1;

        goto label01;

     label15:
        $r9 := @caughtexception;

        virtualinvoke $r9.<java.lang.Exception: void printStackTrace()>();

        staticinvoke <com.kingroot.sdk.at: void a(java.lang.String,java.lang.Throwable)>("\u89e3\u6790\u65b9\u6848\u914d\u7f6e\u6587\u4ef6\u5f02\u5e38", $r9);

        goto label14;

     label16:
        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        $r10 = newarray (com.kingroot.sdk.ap)[$i0];

        $r11 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r10);

        $r10 = (com.kingroot.sdk.ap[]) $r11;

        return $r10;

        catch java.lang.Exception from label02 to label03 with label15;
        catch java.lang.Exception from label04 to label06 with label15;
        catch java.lang.Exception from label07 to label08 with label15;
        catch java.lang.Exception from label09 to label10 with label15;
        catch java.lang.Exception from label11 to label12 with label15;
        catch java.lang.Exception from label13 to label14 with label15;
    }

    public static java.lang.String m(java.lang.String)
    {
        java.lang.String[] $r4;
        java.lang.StringBuffer $r1;
        java.util.StringTokenizer $r2;
        int $i0, $i1;
        java.lang.StringBuilder $r6;
        java.lang.String $r0, $r3, $r5;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        if $r0 == null goto label8;

        $r3 = "";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z0 != 0 goto label8;

        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("#");

        $i0 = $i0 + 1;

        $r3 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int)>($i0);

        $r2 = new java.util.StringTokenizer;

        specialinvoke $r2.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r3, " ");

     label1:
        $z0 = virtualinvoke $r2.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label8;

        $r3 = virtualinvoke $r2.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $i0 = 0;

     label2:
        $r4 = <com.kingroot.sdk.am: java.lang.String[] bv>;

        $i1 = lengthof $r4;

        if $i0 >= $i1 goto label1;

        $r4 = <com.kingroot.sdk.am: java.lang.String[] bv>;

        $r5 = $r4[$i0];

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r3);

        if $z0 == 0 goto label7;

        $i0 = $i0 + 1;

        if $i0 >= 10 goto label3;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("0");

     label3:
        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $z0 = virtualinvoke $r2.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke $r2.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i0 != 1 goto label4;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("0");

     label4:
        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r3 = null;

     label5:
        $z0 = virtualinvoke $r2.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label6;

        $r3 = virtualinvoke $r2.<java.util.StringTokenizer: java.lang.String nextToken()>();

        goto label5;

     label6:
        if $r3 == null goto label1;

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i0 != 4 goto label1;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)>(0, $r3);

        goto label1;

     label7:
        $i0 = $i0 + 1;

        goto label2;

     label8:
        $i0 = virtualinvoke $r1.<java.lang.StringBuffer: int length()>();

        if $i0 == 8 goto label9;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Get Fingerprint Date wrong, fingerprint = ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", date = ");

        $r0 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.kingroot.sdk.at: void i(java.lang.String)>($r0);

     label9:
        $r0 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r0;
    }

    private static int parseInt(java.lang.String, int)
    {
        int $i0, $i1;
        java.lang.String $r0;
        java.lang.Exception $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r0);

        if $z0 != 0 goto label4;

     label1:
        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r0);

     label2:
        return $i1;

     label3:
        $r1 := @caughtexception;

        virtualinvoke $r1.<java.lang.Exception: void printStackTrace()>();

     label4:
        return $i0;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static java.lang.String t()
    {
        java.lang.StringBuilder $r0, $r2;
        java.lang.String $r1, $r3, $r4, $r5;
        boolean $z0;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<?xml version=\"1.0\" encoding=\"utf-8\"?>");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<root>");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<prop>");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<ro.build.id>");

        $r1 = <android.os.Build: java.lang.String ID>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</ro.build.id>");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<ro.build.display.id>");

        $r1 = <android.os.Build: java.lang.String DISPLAY>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</ro.build.display.id>");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<ro.product.model>");

        $r1 = <android.os.Build: java.lang.String MODEL>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</ro.product.model>");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<ro.build.version.release>");

        $r1 = <android.os.Build$VERSION: java.lang.String RELEASE>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</ro.build.version.release>");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<ro.build.version.sdk>");

        $r1 = <android.os.Build$VERSION: java.lang.String SDK>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</ro.build.version.sdk>");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<ro.product.manufacturer>");

        $r1 = <android.os.Build: java.lang.String MANUFACTURER>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</ro.product.manufacturer>");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<ro.product.brand>");

        $r1 = <android.os.Build: java.lang.String BRAND>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</ro.product.brand>");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<ro.product.name>");

        $r1 = <android.os.Build: java.lang.String PRODUCT>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</ro.product.name>");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<ro.product.cpu.abi>");

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("Build.CPU_ABI = ");

        $r1 = <android.os.Build: java.lang.String CPU_ABI>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.kingroot.sdk.at: void h(java.lang.String)>($r1);

        $r1 = staticinvoke <com.kingroot.sdk.ar: java.lang.String q(java.lang.String)>("ro.product.cpu.abi");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</ro.product.cpu.abi>");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<ro.product.cpu.abi2>");

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("Build.CPU_ABI2 = ");

        $r1 = <android.os.Build: java.lang.String CPU_ABI2>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.kingroot.sdk.at: void h(java.lang.String)>($r1);

        $r1 = staticinvoke <com.kingroot.sdk.ar: java.lang.String q(java.lang.String)>("ro.product.cpu.abi2");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</ro.product.cpu.abi2>");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<ro.product.device>");

        $r1 = <android.os.Build: java.lang.String DEVICE>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</ro.product.device>");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<ro.product.board>");

        $r1 = <android.os.Build: java.lang.String BOARD>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</ro.product.board>");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<ro.build.version.codename>");

        $r1 = <android.os.Build$VERSION: java.lang.String CODENAME>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</ro.build.version.codename>");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<ro.build.fingerprint>");

        $r1 = staticinvoke <com.kingroot.sdk.ar: java.lang.String E()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</ro.build.fingerprint>");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<linux.version>");

        $r1 = staticinvoke <com.kingroot.sdk.ar: java.lang.String F()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</linux.version>");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<ro.build.hidden_ver>");

        $r3 = staticinvoke <com.kingroot.sdk.as: java.lang.String get(java.lang.String)>("ro.build.hidden_ver");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</ro.build.hidden_ver>");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<gsm.version.baseband>");

        $r3 = staticinvoke <com.kingroot.sdk.as: java.lang.String get(java.lang.String)>("gsm.version.baseband");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</gsm.version.baseband>");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<ro.serialno>");

        $r3 = staticinvoke <com.kingroot.sdk.as: java.lang.String get(java.lang.String)>("ro.serialno");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</ro.serialno>");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<ro.mediatek.platform>");

        $r3 = staticinvoke <com.kingroot.sdk.as: java.lang.String get(java.lang.String)>("ro.mediatek.platform");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</ro.mediatek.platform>");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<ro.product.real_model>");

        $r4 = staticinvoke <com.kingroot.sdk.as: java.lang.String get(java.lang.String)>("ro.product.real_model");

        $r3 = $r4;

        if $r4 == null goto label1;

        $r5 = "";

        $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String trim()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

     label1:
        $r5 = staticinvoke <com.kingroot.sdk.as: java.lang.String get(java.lang.String)>("ro.product.model");

        $r3 = $r5;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("read_model is null, model = ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.kingroot.sdk.at: void s(java.lang.String)>($r5);

     label2:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</ro.product.real_model>");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<ro.board.platform>");

        $r3 = staticinvoke <com.kingroot.sdk.as: java.lang.String get(java.lang.String)>("ro.board.platform");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</ro.board.platform>");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<ro.hardware>");

        $r3 = staticinvoke <com.kingroot.sdk.as: java.lang.String get(java.lang.String)>("ro.hardware");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</ro.hardware>");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<ro.product.brand.replace>");

        $r3 = staticinvoke <com.kingroot.sdk.as: java.lang.String get(java.lang.String)>("ro.product.brand.replace");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</ro.product.brand.replace>");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<ro.product.model.replace>");

        $r3 = staticinvoke <com.kingroot.sdk.as: java.lang.String get(java.lang.String)>("ro.product.model.replace");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</ro.product.model.replace>");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<linux.version.date>");

        $r1 = staticinvoke <com.kingroot.sdk.am: java.lang.String m(java.lang.String)>($r1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</linux.version.date>");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</prop>");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<device>");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</device>");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</root>\r\n");

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }
}
