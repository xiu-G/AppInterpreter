public class cn.trinea.android.common.util.ObjectUtils extends java.lang.Object
{

    public void <init>()
    {
        cn.trinea.android.common.util.ObjectUtils r0;

        r0 := @this: cn.trinea.android.common.util.ObjectUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int compare(java.lang.Object, java.lang.Object)
    {
        int $i0;
        java.lang.Object $r0, $r1;
        java.lang.Comparable $r2;

        $r1 := @parameter0: java.lang.Object;

        $r0 := @parameter1: java.lang.Object;

        if $r1 != null goto label2;

        if $r0 != null goto label1;

        return 0;

     label1:
        return -1;

     label2:
        if $r0 != null goto label3;

        return 1;

     label3:
        $r2 = (java.lang.Comparable) $r1;

        $i0 = interfaceinvoke $r2.<java.lang.Comparable: int compareTo(java.lang.Object)>($r0);

        return $i0;
    }

    public static boolean isEquals(java.lang.Object, java.lang.Object)
    {
        java.lang.Object $r0, $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        if $r0 == $r1 goto label3;

        if $r0 != null goto label2;

        if $r1 == null goto label3;

     label1:
        return 0;

     label2:
        $z0 = virtualinvoke $r0.<java.lang.Object: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

     label3:
        return 1;
    }

    public static int[] transformIntArray(java.lang.Integer[])
    {
        int[] $r1;
        int $i0, $i1;
        java.lang.Integer $r2;
        java.lang.Integer[] $r0;

        $r0 := @parameter0: java.lang.Integer[];

        $i1 = lengthof $r0;

        $r1 = newarray (int)[$i1];

        $i1 = 0;

     label1:
        $i0 = lengthof $r0;

        if $i1 < $i0 goto label2;

        return $r1;

     label2:
        $r2 = $r0[$i1];

        $i0 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();

        $r1[$i1] = $i0;

        $i1 = $i1 + 1;

        goto label1;
    }

    public static java.lang.Integer[] transformIntArray(int[])
    {
        int[] $r0;
        int $i0, $i1;
        java.lang.Integer $r2;
        java.lang.Integer[] $r1;

        $r0 := @parameter0: int[];

        $i0 = lengthof $r0;

        $r1 = newarray (java.lang.Integer)[$i0];

        $i0 = 0;

     label1:
        $i1 = lengthof $r0;

        if $i0 < $i1 goto label2;

        return $r1;

     label2:
        $i1 = $r0[$i0];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r1[$i0] = $r2;

        $i0 = $i0 + 1;

        goto label1;
    }

    public static long[] transformLongArray(java.lang.Long[])
    {
        java.lang.Long[] $r0;
        long[] $r1;
        java.lang.Long $r2;
        int $i1, $i2;
        long $l0;

        $r0 := @parameter0: java.lang.Long[];

        $i1 = lengthof $r0;

        $r1 = newarray (long)[$i1];

        $i1 = 0;

     label1:
        $i2 = lengthof $r0;

        if $i1 < $i2 goto label2;

        return $r1;

     label2:
        $r2 = $r0[$i1];

        $l0 = virtualinvoke $r2.<java.lang.Long: long longValue()>();

        $r1[$i1] = $l0;

        $i1 = $i1 + 1;

        goto label1;
    }

    public static java.lang.Long[] transformLongArray(long[])
    {
        java.lang.Long[] $r1;
        long[] $r0;
        java.lang.Long $r2;
        int $i0, $i1;
        long $l2;

        $r0 := @parameter0: long[];

        $i0 = lengthof $r0;

        $r1 = newarray (java.lang.Long)[$i0];

        $i0 = 0;

     label1:
        $i1 = lengthof $r0;

        if $i0 < $i1 goto label2;

        return $r1;

     label2:
        $l2 = $r0[$i0];

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $r1[$i0] = $r2;

        $i0 = $i0 + 1;

        goto label1;
    }
}
