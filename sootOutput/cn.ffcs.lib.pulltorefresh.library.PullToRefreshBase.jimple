public abstract class cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase extends android.widget.LinearLayout implements cn.ffcs.lib.pulltorefresh.library.IPullToRefresh
{
    static final boolean DEBUG;
    static final int DEMO_SCROLL_INTERVAL;
    static final float FRICTION;
    static final java.lang.String LOG_TAG;
    public static final int SMOOTH_SCROLL_DURATION_MS;
    public static final int SMOOTH_SCROLL_LONG_DURATION_MS;
    static final java.lang.String STATE_CURRENT_MODE;
    static final java.lang.String STATE_MODE;
    static final java.lang.String STATE_SCROLLING_REFRESHING_ENABLED;
    static final java.lang.String STATE_SHOW_REFRESHING_VIEW;
    static final java.lang.String STATE_STATE;
    static final java.lang.String STATE_SUPER;
    static final boolean USE_HW_LAYERS;
    private cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode mCurrentMode;
    private cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$SmoothScrollRunnable mCurrentSmoothScrollRunnable;
    private boolean mFilterTouchEvents;
    private cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout mFooterLayout;
    private cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout mHeaderLayout;
    private float mInitialMotionX;
    private float mInitialMotionY;
    private boolean mIsBeingDragged;
    private float mLastMotionX;
    private float mLastMotionY;
    private boolean mLayoutVisibilityChangesEnabled;
    private cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$AnimationStyle mLoadingAnimationStyle;
    private cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode mMode;
    private cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$OnPullEventListener mOnPullEventListener;
    private cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$OnRefreshListener mOnRefreshListener;
    private cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$OnRefreshListener2 mOnRefreshListener2;
    private boolean mOverScrollEnabled;
    android.view.View mRefreshableView;
    private android.widget.FrameLayout mRefreshableViewWrapper;
    private android.view.animation.Interpolator mScrollAnimationInterpolator;
    private boolean mScrollingWhileRefreshingEnabled;
    private boolean mShowViewWhileRefreshing;
    private cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State mState;
    private int mTouchSlop;

    public void <init>(android.content.Context)
    {
        android.content.Context $r1;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode $r3;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State $r2;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$AnimationStyle $r4;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.widget.LinearLayout: void <init>(android.content.Context)>($r1);

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean mIsBeingDragged> = 0;

        $r2 = <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State RESET>;

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State mState> = $r2;

        $r3 = staticinvoke <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode getDefault()>();

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode mMode> = $r3;

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean mShowViewWhileRefreshing> = 1;

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean mScrollingWhileRefreshingEnabled> = 0;

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean mFilterTouchEvents> = 1;

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean mOverScrollEnabled> = 1;

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean mLayoutVisibilityChangesEnabled> = 1;

        $r4 = staticinvoke <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$AnimationStyle: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$AnimationStyle getDefault()>();

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$AnimationStyle mLoadingAnimationStyle> = $r4;

        specialinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: void init(android.content.Context,android.util.AttributeSet)>($r1, null);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        android.content.Context $r1;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode $r4;
        android.util.AttributeSet $r2;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State $r3;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$AnimationStyle $r5;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: android.util.AttributeSet;

        specialinvoke r0.<android.widget.LinearLayout: void <init>(android.content.Context,android.util.AttributeSet)>($r1, $r2);

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean mIsBeingDragged> = 0;

        $r3 = <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State RESET>;

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State mState> = $r3;

        $r4 = staticinvoke <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode getDefault()>();

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode mMode> = $r4;

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean mShowViewWhileRefreshing> = 1;

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean mScrollingWhileRefreshingEnabled> = 0;

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean mFilterTouchEvents> = 1;

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean mOverScrollEnabled> = 1;

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean mLayoutVisibilityChangesEnabled> = 1;

        $r5 = staticinvoke <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$AnimationStyle: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$AnimationStyle getDefault()>();

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$AnimationStyle mLoadingAnimationStyle> = $r5;

        specialinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: void init(android.content.Context,android.util.AttributeSet)>($r1, $r2);

        return;
    }

    public void <init>(android.content.Context, cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode)
    {
        android.content.Context $r1;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode $r2, $r4;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State $r3;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$AnimationStyle $r5;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode;

        specialinvoke r0.<android.widget.LinearLayout: void <init>(android.content.Context)>($r1);

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean mIsBeingDragged> = 0;

        $r3 = <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State RESET>;

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State mState> = $r3;

        $r4 = staticinvoke <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode getDefault()>();

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode mMode> = $r4;

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean mShowViewWhileRefreshing> = 1;

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean mScrollingWhileRefreshingEnabled> = 0;

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean mFilterTouchEvents> = 1;

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean mOverScrollEnabled> = 1;

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean mLayoutVisibilityChangesEnabled> = 1;

        $r5 = staticinvoke <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$AnimationStyle: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$AnimationStyle getDefault()>();

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$AnimationStyle mLoadingAnimationStyle> = $r5;

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode mMode> = $r2;

        specialinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: void init(android.content.Context,android.util.AttributeSet)>($r1, null);

        return;
    }

    public void <init>(android.content.Context, cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode, cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$AnimationStyle)
    {
        android.content.Context $r1;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode $r2, $r5;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State $r4;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$AnimationStyle $r3, $r6;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode;

        $r3 := @parameter2: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$AnimationStyle;

        specialinvoke r0.<android.widget.LinearLayout: void <init>(android.content.Context)>($r1);

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean mIsBeingDragged> = 0;

        $r4 = <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State RESET>;

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State mState> = $r4;

        $r5 = staticinvoke <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode getDefault()>();

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode mMode> = $r5;

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean mShowViewWhileRefreshing> = 1;

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean mScrollingWhileRefreshingEnabled> = 0;

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean mFilterTouchEvents> = 1;

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean mOverScrollEnabled> = 1;

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean mLayoutVisibilityChangesEnabled> = 1;

        $r6 = staticinvoke <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$AnimationStyle: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$AnimationStyle getDefault()>();

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$AnimationStyle mLoadingAnimationStyle> = $r6;

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode mMode> = $r2;

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$AnimationStyle mLoadingAnimationStyle> = $r3;

        specialinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: void init(android.content.Context,android.util.AttributeSet)>($r1, null);

        return;
    }

    static void access$000(cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase)
    {
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase $r0;

        $r0 := @parameter0: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        specialinvoke $r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: void callRefreshListener()>();

        return;
    }

    static void access$100(cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase, int, long, long, cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$OnSmoothScrollFinishedListener)
    {
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase $r0;
        int $i0;
        long $l1, $l2;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$OnSmoothScrollFinishedListener $r1;

        $r0 := @parameter0: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $i0 := @parameter1: int;

        $l1 := @parameter2: long;

        $l2 := @parameter3: long;

        $r1 := @parameter4: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$OnSmoothScrollFinishedListener;

        specialinvoke $r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: void smoothScrollTo(int,long,long,cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$OnSmoothScrollFinishedListener)>(0, 200L, 225L, null);

        return;
    }

    static android.view.animation.Interpolator access$200(cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase)
    {
        android.view.animation.Interpolator r1;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase $r0;

        $r0 := @parameter0: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        r1 = $r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: android.view.animation.Interpolator mScrollAnimationInterpolator>;

        return r1;
    }

    private void addRefreshableView(android.content.Context, android.view.View)
    {
        android.content.Context $r1;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;
        android.widget.FrameLayout $r3, $r4;
        int $i0, $i1;
        android.view.View r2;
        android.widget.LinearLayout$LayoutParams $r5;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.view.View;

        $r4 = new android.widget.FrameLayout;

        specialinvoke $r4.<android.widget.FrameLayout: void <init>(android.content.Context)>($r1);

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: android.widget.FrameLayout mRefreshableViewWrapper> = $r4;

        $r3 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: android.widget.FrameLayout mRefreshableViewWrapper>;

        $i0 = -1;

        $i1 = -1;

        virtualinvoke $r3.<android.widget.FrameLayout: void addView(android.view.View,int,int)>(r2, $i0, $i1);

        $r3 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: android.widget.FrameLayout mRefreshableViewWrapper>;

        $r5 = new android.widget.LinearLayout$LayoutParams;

        $i0 = -1;

        $i1 = -1;

        specialinvoke $r5.<android.widget.LinearLayout$LayoutParams: void <init>(int,int)>($i0, $i1);

        virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: void addViewInternal(android.view.View,android.view.ViewGroup$LayoutParams)>($r3, $r5);

        return;
    }

    private void callRefreshListener()
    {
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode $r3, $r4;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$OnRefreshListener $r1;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$OnRefreshListener2 $r2;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $r1 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$OnRefreshListener mOnRefreshListener>;

        if $r1 == null goto label1;

        $r1 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$OnRefreshListener mOnRefreshListener>;

        interfaceinvoke $r1.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$OnRefreshListener: void onRefresh(cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase)>(r0);

        return;

     label1:
        $r2 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$OnRefreshListener2 mOnRefreshListener2>;

        if $r2 == null goto label3;

        $r3 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode mCurrentMode>;

        $r4 = <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode PULL_FROM_START>;

        if $r3 != $r4 goto label2;

        $r2 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$OnRefreshListener2 mOnRefreshListener2>;

        interfaceinvoke $r2.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$OnRefreshListener2: void onPullDownToRefresh(cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase)>(r0);

        return;

     label2:
        $r3 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode mCurrentMode>;

        $r4 = <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode PULL_FROM_END>;

        if $r3 != $r4 goto label3;

        $r2 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$OnRefreshListener2 mOnRefreshListener2>;

        interfaceinvoke $r2.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$OnRefreshListener2: void onPullUpToRefresh(cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase)>(r0);

     label3:
        return;
    }

    private android.widget.LinearLayout$LayoutParams getLoadingLayoutLayoutParams()
    {
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Orientation $r2;
        int[] $r1;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;
        int $i0;
        android.widget.LinearLayout$LayoutParams $r3;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $r1 = <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$4: int[] $SwitchMap$cn$ffcs$lib$pulltorefresh$library$PullToRefreshBase$Orientation>;

        $r2 = virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Orientation getPullToRefreshScrollDirection()>();

        $i0 = virtualinvoke $r2.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Orientation: int ordinal()>();

        $i0 = $r1[$i0];

        lookupswitch($i0)
        {
            case 1: goto label2;
            default: goto label1;
        };

     label1:
        $r3 = new android.widget.LinearLayout$LayoutParams;

        specialinvoke $r3.<android.widget.LinearLayout$LayoutParams: void <init>(int,int)>(-1, -2);

        return $r3;

     label2:
        $r3 = new android.widget.LinearLayout$LayoutParams;

        specialinvoke $r3.<android.widget.LinearLayout$LayoutParams: void <init>(int,int)>(-2, -1);

        return $r3;
    }

    private int getMaximumPullScroll()
    {
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Orientation $r2;
        int[] $r1;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;
        int $i0;
        float $f0;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $r1 = <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$4: int[] $SwitchMap$cn$ffcs$lib$pulltorefresh$library$PullToRefreshBase$Orientation>;

        $r2 = virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Orientation getPullToRefreshScrollDirection()>();

        $i0 = virtualinvoke $r2.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Orientation: int ordinal()>();

        $i0 = $r1[$i0];

        lookupswitch($i0)
        {
            case 1: goto label2;
            default: goto label1;
        };

     label1:
        $i0 = virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: int getHeight()>();

        $f0 = (float) $i0;

        $f0 = $f0 / 2.0F;

        $i0 = staticinvoke <java.lang.Math: int round(float)>($f0);

        return $i0;

     label2:
        $i0 = virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: int getWidth()>();

        $f0 = (float) $i0;

        $f0 = $f0 / 2.0F;

        $i0 = staticinvoke <java.lang.Math: int round(float)>($f0);

        return $i0;
    }

    private void init(android.content.Context, android.util.AttributeSet)
    {
        cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout $r10;
        android.content.Context $r1;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode $r7;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;
        android.graphics.drawable.Drawable $r11;
        android.content.res.TypedArray $r6;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$AnimationStyle $r8;
        android.view.ViewConfiguration $r5;
        android.util.AttributeSet $r2;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Orientation $r4;
        int[] $r3;
        int $i0;
        android.view.View $r9;
        boolean $z0;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: android.util.AttributeSet;

        $r3 = <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$4: int[] $SwitchMap$cn$ffcs$lib$pulltorefresh$library$PullToRefreshBase$Orientation>;

        $r4 = virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Orientation getPullToRefreshScrollDirection()>();

        $i0 = virtualinvoke $r4.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Orientation: int ordinal()>();

        $i0 = $r3[$i0];

        lookupswitch($i0)
        {
            case 1: goto label8;
            default: goto label1;
        };

     label1:
        virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: void setOrientation(int)>(1);

     label2:
        virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: void setGravity(int)>(17);

        $r5 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>($r1);

        $i0 = virtualinvoke $r5.<android.view.ViewConfiguration: int getScaledTouchSlop()>();

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: int mTouchSlop> = $i0;

        $r3 = <cn.ffcs.dh201211062200085386xxx001052.cartoonplayer.R$styleable: int[] PullToRefresh>;

        $r6 = virtualinvoke $r1.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[])>($r2, $r3);

        $z0 = virtualinvoke $r6.<android.content.res.TypedArray: boolean hasValue(int)>(4);

        if $z0 == 0 goto label3;

        $i0 = virtualinvoke $r6.<android.content.res.TypedArray: int getInteger(int,int)>(4, 0);

        $r7 = staticinvoke <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode mapIntToValue(int)>($i0);

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode mMode> = $r7;

     label3:
        $z0 = virtualinvoke $r6.<android.content.res.TypedArray: boolean hasValue(int)>(12);

        if $z0 == 0 goto label4;

        $i0 = virtualinvoke $r6.<android.content.res.TypedArray: int getInteger(int,int)>(12, 0);

        $r8 = staticinvoke <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$AnimationStyle: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$AnimationStyle mapIntToValue(int)>($i0);

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$AnimationStyle mLoadingAnimationStyle> = $r8;

     label4:
        $r9 = virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: android.view.View createRefreshableView(android.content.Context,android.util.AttributeSet)>($r1, $r2);

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: android.view.View mRefreshableView> = $r9;

        $r9 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: android.view.View mRefreshableView>;

        specialinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: void addRefreshableView(android.content.Context,android.view.View)>($r1, $r9);

        $r7 = <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode PULL_FROM_START>;

        $r10 = virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout createLoadingLayout(android.content.Context,cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode,android.content.res.TypedArray)>($r1, $r7, $r6);

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout mHeaderLayout> = $r10;

        $r7 = <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode PULL_FROM_END>;

        $r10 = virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout createLoadingLayout(android.content.Context,cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode,android.content.res.TypedArray)>($r1, $r7, $r6);

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout mFooterLayout> = $r10;

        $z0 = virtualinvoke $r6.<android.content.res.TypedArray: boolean hasValue(int)>(0);

        if $z0 == 0 goto label9;

        $r11 = virtualinvoke $r6.<android.content.res.TypedArray: android.graphics.drawable.Drawable getDrawable(int)>(0);

        if $r11 == null goto label5;

        $r9 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: android.view.View mRefreshableView>;

        virtualinvoke $r9.<android.view.View: void setBackgroundDrawable(android.graphics.drawable.Drawable)>($r11);

     label5:
        $z0 = virtualinvoke $r6.<android.content.res.TypedArray: boolean hasValue(int)>(9);

        if $z0 == 0 goto label6;

        $z0 = virtualinvoke $r6.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(9, 1);

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean mOverScrollEnabled> = $z0;

     label6:
        $z0 = virtualinvoke $r6.<android.content.res.TypedArray: boolean hasValue(int)>(13);

        if $z0 == 0 goto label7;

        $z0 = virtualinvoke $r6.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(13, 0);

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean mScrollingWhileRefreshingEnabled> = $z0;

     label7:
        virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: void handleStyledAttributes(android.content.res.TypedArray)>($r6);

        virtualinvoke $r6.<android.content.res.TypedArray: void recycle()>();

        virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: void updateUIForMode()>();

        return;

     label8:
        virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: void setOrientation(int)>(0);

        goto label2;

     label9:
        $z0 = virtualinvoke $r6.<android.content.res.TypedArray: boolean hasValue(int)>(16);

        if $z0 == 0 goto label5;

        staticinvoke <cn.ffcs.lib.pulltorefresh.library.internal.Utils: void warnDeprecation(java.lang.String,java.lang.String)>("ptrAdapterViewBackground", "ptrRefreshableViewBackground");

        $r11 = virtualinvoke $r6.<android.content.res.TypedArray: android.graphics.drawable.Drawable getDrawable(int)>(16);

        if $r11 == null goto label5;

        $r9 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: android.view.View mRefreshableView>;

        virtualinvoke $r9.<android.view.View: void setBackgroundDrawable(android.graphics.drawable.Drawable)>($r11);

        goto label5;
    }

    private boolean isReadyForPull()
    {
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode $r2;
        int[] $r1;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;
        int $i0;
        boolean $z0;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $r1 = <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$4: int[] $SwitchMap$cn$ffcs$lib$pulltorefresh$library$PullToRefreshBase$Mode>;

        $r2 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode mMode>;

        $i0 = virtualinvoke $r2.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode: int ordinal()>();

        $i0 = $r1[$i0];

        lookupswitch($i0)
        {
            case 1: goto label3;
            case 2: goto label2;
            case 3: goto label1;
            case 4: goto label4;
            default: goto label1;
        };

     label1:
        return 0;

     label2:
        $z0 = virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean isReadyForPullStart()>();

        return $z0;

     label3:
        $z0 = virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean isReadyForPullEnd()>();

        return $z0;

     label4:
        $z0 = virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean isReadyForPullEnd()>();

        if $z0 != 0 goto label5;

        $z0 = virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean isReadyForPullStart()>();

        if $z0 == 0 goto label6;

     label5:
        return 1;

     label6:
        return 0;
    }

    private void pullEvent()
    {
        cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout $r4;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode $r3;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;
        boolean[] $r7;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Orientation $r2;
        int[] $r1;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State $r5, $r6;
        int $i0, $i1, $i2;
        float f0, f1;
        boolean $z0;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $r1 = <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$4: int[] $SwitchMap$cn$ffcs$lib$pulltorefresh$library$PullToRefreshBase$Orientation>;

        $r2 = virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Orientation getPullToRefreshScrollDirection()>();

        $i0 = virtualinvoke $r2.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Orientation: int ordinal()>();

        $i0 = $r1[$i0];

        lookupswitch($i0)
        {
            case 1: goto label07;
            default: goto label01;
        };

     label01:
        f0 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: float mInitialMotionY>;

        f1 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: float mLastMotionY>;

     label02:
        $r1 = <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$4: int[] $SwitchMap$cn$ffcs$lib$pulltorefresh$library$PullToRefreshBase$Mode>;

        $r3 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode mCurrentMode>;

        $i0 = virtualinvoke $r3.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode: int ordinal()>();

        $i0 = $r1[$i0];

        lookupswitch($i0)
        {
            case 1: goto label08;
            default: goto label03;
        };

     label03:
        f0 = f0 - f1;

        f0 = staticinvoke <java.lang.Math: float min(float,float)>(f0, 0.0F);

        f0 = f0 / 2.0F;

        $i0 = staticinvoke <java.lang.Math: int round(float)>(f0);

        $i1 = virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: int getHeaderSize()>();

     label04:
        virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: void setHeaderScroll(int)>($i0);

        if $i0 == 0 goto label11;

        $z0 = virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean isRefreshing()>();

        if $z0 != 0 goto label11;

        $i2 = staticinvoke <java.lang.Math: int abs(int)>($i0);

        f0 = (float) $i2;

        f1 = (float) $i1;

        f0 = f0 / f1;

        $r1 = <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$4: int[] $SwitchMap$cn$ffcs$lib$pulltorefresh$library$PullToRefreshBase$Mode>;

        $r3 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode mCurrentMode>;

        $i2 = virtualinvoke $r3.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode: int ordinal()>();

        $i2 = $r1[$i2];

        lookupswitch($i2)
        {
            case 1: goto label09;
            default: goto label05;
        };

     label05:
        $r4 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout mHeaderLayout>;

        virtualinvoke $r4.<cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout: void onPull(float)>(f0);

     label06:
        $r5 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State mState>;

        $r6 = <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State PULL_TO_REFRESH>;

        if $r5 == $r6 goto label10;

        $i2 = staticinvoke <java.lang.Math: int abs(int)>($i0);

        if $i1 < $i2 goto label10;

        $r5 = <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State PULL_TO_REFRESH>;

        $r7 = newarray (boolean)[0];

        virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: void setState(cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State,boolean[])>($r5, $r7);

        return;

     label07:
        f0 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: float mInitialMotionX>;

        f1 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: float mLastMotionX>;

        goto label02;

     label08:
        f0 = f0 - f1;

        f0 = staticinvoke <java.lang.Math: float max(float,float)>(f0, 0.0F);

        f0 = f0 / 2.0F;

        $i0 = staticinvoke <java.lang.Math: int round(float)>(f0);

        $i1 = virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: int getFooterSize()>();

        goto label04;

     label09:
        $r4 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout mFooterLayout>;

        virtualinvoke $r4.<cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout: void onPull(float)>(f0);

        goto label06;

     label10:
        $r5 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State mState>;

        $r6 = <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State PULL_TO_REFRESH>;

        if $r5 != $r6 goto label11;

        $i0 = staticinvoke <java.lang.Math: int abs(int)>($i0);

        if $i1 >= $i0 goto label11;

        $r5 = <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State RELEASE_TO_REFRESH>;

        $r7 = newarray (boolean)[0];

        virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: void setState(cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State,boolean[])>($r5, $r7);

     label11:
        return;
    }

    private final void smoothScrollTo(int, long)
    {
        int $i0;
        long $l1;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $i0 := @parameter0: int;

        $l1 := @parameter1: long;

        specialinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: void smoothScrollTo(int,long,long,cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$OnSmoothScrollFinishedListener)>(0, $l1, 0L, null);

        return;
    }

    private final void smoothScrollTo(int, long, long, cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$OnSmoothScrollFinishedListener)
    {
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$SmoothScrollRunnable $r2, $r7;
        android.view.animation.Interpolator $r5;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;
        long $l1, $l2;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Orientation $r4;
        byte $b4;
        int[] $r3;
        int $i0, $i3;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$OnSmoothScrollFinishedListener $r1;
        android.view.animation.DecelerateInterpolator $r6;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $i0 := @parameter0: int;

        $l1 := @parameter1: long;

        $l2 := @parameter2: long;

        $r1 := @parameter3: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$OnSmoothScrollFinishedListener;

        $r2 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$SmoothScrollRunnable mCurrentSmoothScrollRunnable>;

        if $r2 == null goto label1;

        $r2 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$SmoothScrollRunnable mCurrentSmoothScrollRunnable>;

        virtualinvoke $r2.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$SmoothScrollRunnable: void stop()>();

     label1:
        $r3 = <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$4: int[] $SwitchMap$cn$ffcs$lib$pulltorefresh$library$PullToRefreshBase$Orientation>;

        $r4 = virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Orientation getPullToRefreshScrollDirection()>();

        $i3 = virtualinvoke $r4.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Orientation: int ordinal()>();

        $i3 = $r3[$i3];

        lookupswitch($i3)
        {
            case 1: goto label5;
            default: goto label2;
        };

     label2:
        $i3 = virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: int getScrollY()>();

     label3:
        if $i3 == $i0 goto label7;

        $r5 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: android.view.animation.Interpolator mScrollAnimationInterpolator>;

        if $r5 != null goto label4;

        $r6 = new android.view.animation.DecelerateInterpolator;

        specialinvoke $r6.<android.view.animation.DecelerateInterpolator: void <init>()>();

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: android.view.animation.Interpolator mScrollAnimationInterpolator> = $r6;

     label4:
        $r7 = new cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$SmoothScrollRunnable;

        specialinvoke $r7.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$SmoothScrollRunnable: void <init>(cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase,int,int,long,cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$OnSmoothScrollFinishedListener)>(r0, $i3, $i0, $l1, $r1);

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$SmoothScrollRunnable mCurrentSmoothScrollRunnable> = $r7;

        $b4 = $l2 cmp 0L;

        $i0 = (int) $b4;

        if $i0 <= 0 goto label6;

        $r2 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$SmoothScrollRunnable mCurrentSmoothScrollRunnable>;

        virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean postDelayed(java.lang.Runnable,long)>($r2, $l2);

        return;

     label5:
        $i3 = virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: int getScrollX()>();

        goto label3;

     label6:
        $r2 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$SmoothScrollRunnable mCurrentSmoothScrollRunnable>;

        virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean post(java.lang.Runnable)>($r2);

     label7:
        return;
    }

    private final void smoothScrollToAndBack(int)
    {
        int $i0;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$3 $r1;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $i0 := @parameter0: int;

        $r1 = new cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$3;

        specialinvoke $r1.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$3: void <init>(cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase)>(r0);

        specialinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: void smoothScrollTo(int,long,long,cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$OnSmoothScrollFinishedListener)>($i0, 200L, 0L, $r1);

        return;
    }

    public void addView(android.view.View, int, android.view.ViewGroup$LayoutParams)
    {
        java.lang.UnsupportedOperationException $r8;
        android.view.ViewGroup$LayoutParams $r2;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;
        android.view.ViewGroup r7;
        int $i0;
        android.view.View $r1, $r6;
        java.lang.StringBuilder $r3;
        java.lang.Class $r4;
        java.lang.String $r5;
        boolean $z0;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $r1 := @parameter0: android.view.View;

        $i0 := @parameter1: int;

        $r2 := @parameter2: android.view.ViewGroup$LayoutParams;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("addView: ");

        $r4 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getSimpleName()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("PullToRefresh", $r5);

        $r6 = virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: android.view.View getRefreshableView()>();

        $z0 = $r6 instanceof android.view.ViewGroup;

        if $z0 == 0 goto label1;

        r7 = (android.view.ViewGroup) $r6;

        virtualinvoke r7.<android.view.ViewGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>($r1, $i0, $r2);

        return;

     label1:
        $r8 = new java.lang.UnsupportedOperationException;

        specialinvoke $r8.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Refreshable View is not a ViewGroup so can\'t addView");

        throw $r8;
    }

    protected final void addViewInternal(android.view.View, int, android.view.ViewGroup$LayoutParams)
    {
        android.view.ViewGroup$LayoutParams $r2;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;
        int $i0;
        android.view.View $r1;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $r1 := @parameter0: android.view.View;

        $i0 := @parameter1: int;

        $r2 := @parameter2: android.view.ViewGroup$LayoutParams;

        specialinvoke r0.<android.widget.LinearLayout: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>($r1, 0, $r2);

        return;
    }

    protected final void addViewInternal(android.view.View, android.view.ViewGroup$LayoutParams)
    {
        android.view.View $r1;
        android.view.ViewGroup$LayoutParams $r2;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $r1 := @parameter0: android.view.View;

        $r2 := @parameter1: android.view.ViewGroup$LayoutParams;

        specialinvoke r0.<android.widget.LinearLayout: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>($r1, -1, $r2);

        return;
    }

    protected cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout createLoadingLayout(android.content.Context, cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode, android.content.res.TypedArray)
    {
        cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout $r6;
        android.content.Context $r1;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode $r2;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Orientation $r5;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;
        android.content.res.TypedArray $r3;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$AnimationStyle $r4;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode;

        $r3 := @parameter2: android.content.res.TypedArray;

        $r4 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$AnimationStyle mLoadingAnimationStyle>;

        $r5 = virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Orientation getPullToRefreshScrollDirection()>();

        $r6 = virtualinvoke $r4.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$AnimationStyle: cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout createLoadingLayout(android.content.Context,cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode,cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Orientation,android.content.res.TypedArray)>($r1, $r2, $r5, $r3);

        virtualinvoke $r6.<cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout: void setVisibility(int)>(4);

        return $r6;
    }

    protected cn.ffcs.lib.pulltorefresh.library.LoadingLayoutProxy createLoadingLayoutProxy(boolean, boolean)
    {
        cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout $r3;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode $r2;
        cn.ffcs.lib.pulltorefresh.library.LoadingLayoutProxy r1;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;
        boolean $z0, $z1;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $z0 := @parameter0: boolean;

        $z1 := @parameter1: boolean;

        r1 = new cn.ffcs.lib.pulltorefresh.library.LoadingLayoutProxy;

        specialinvoke r1.<cn.ffcs.lib.pulltorefresh.library.LoadingLayoutProxy: void <init>()>();

        $r2 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode mMode>;

        $z0 = virtualinvoke $r2.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode: boolean showHeaderLoadingLayout()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout mHeaderLayout>;

        virtualinvoke r1.<cn.ffcs.lib.pulltorefresh.library.LoadingLayoutProxy: void addLayout(cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout)>($r3);

     label1:
        $r2 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode mMode>;

        $z0 = virtualinvoke $r2.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode: boolean showFooterLoadingLayout()>();

        if $z0 == 0 goto label2;

        $r3 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout mFooterLayout>;

        virtualinvoke r1.<cn.ffcs.lib.pulltorefresh.library.LoadingLayoutProxy: void addLayout(cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout)>($r3);

     label2:
        return r1;
    }

    protected abstract android.view.View createRefreshableView(android.content.Context, android.util.AttributeSet);

    public final boolean demo()
    {
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode $r1;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;
        int $i0;
        boolean $z0;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $r1 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode mMode>;

        $z0 = virtualinvoke $r1.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode: boolean showHeaderLoadingLayout()>();

        if $z0 == 0 goto label1;

        $z0 = virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean isReadyForPullStart()>();

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: int getHeaderSize()>();

        $i0 = neg $i0;

        $i0 = $i0 * 2;

        specialinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: void smoothScrollToAndBack(int)>($i0);

        return 1;

     label1:
        $r1 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode mMode>;

        $z0 = virtualinvoke $r1.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode: boolean showFooterLoadingLayout()>();

        if $z0 == 0 goto label2;

        $z0 = virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean isReadyForPullEnd()>();

        if $z0 == 0 goto label2;

        $i0 = virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: int getFooterSize()>();

        $i0 = $i0 * 2;

        specialinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: void smoothScrollToAndBack(int)>($i0);

        return 1;

     label2:
        return 0;
    }

    protected final void disableLoadingLayoutVisibilityChanges()
    {
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean mLayoutVisibilityChangesEnabled> = 0;

        return;
    }

    public final cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode getCurrentMode()
    {
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode r1;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        r1 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode mCurrentMode>;

        return r1;
    }

    public final boolean getFilterTouchEvents()
    {
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;
        boolean z0;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        z0 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean mFilterTouchEvents>;

        return z0;
    }

    protected final cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout getFooterLayout()
    {
        cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout r1;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        r1 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout mFooterLayout>;

        return r1;
    }

    protected final int getFooterSize()
    {
        int $i0;
        cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout $r1;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $r1 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout mFooterLayout>;

        $i0 = virtualinvoke $r1.<cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout: int getContentSize()>();

        return $i0;
    }

    protected final cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout getHeaderLayout()
    {
        cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout r1;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        r1 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout mHeaderLayout>;

        return r1;
    }

    protected final int getHeaderSize()
    {
        int $i0;
        cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout $r1;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $r1 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout mHeaderLayout>;

        $i0 = virtualinvoke $r1.<cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout: int getContentSize()>();

        return $i0;
    }

    public final cn.ffcs.lib.pulltorefresh.library.ILoadingLayout getLoadingLayoutProxy()
    {
        cn.ffcs.lib.pulltorefresh.library.ILoadingLayout $r1;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $r1 = virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.ILoadingLayout getLoadingLayoutProxy(boolean,boolean)>(1, 1);

        return $r1;
    }

    public final cn.ffcs.lib.pulltorefresh.library.ILoadingLayout getLoadingLayoutProxy(boolean, boolean)
    {
        cn.ffcs.lib.pulltorefresh.library.LoadingLayoutProxy $r1;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;
        boolean $z0, $z1;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $z0 := @parameter0: boolean;

        $z1 := @parameter1: boolean;

        $r1 = virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.LoadingLayoutProxy createLoadingLayoutProxy(boolean,boolean)>(1, 1);

        return $r1;
    }

    public final cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode getMode()
    {
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode r1;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        r1 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode mMode>;

        return r1;
    }

    public abstract cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Orientation getPullToRefreshScrollDirection();

    protected int getPullToRefreshScrollDuration()
    {
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        return 200;
    }

    protected int getPullToRefreshScrollDurationLonger()
    {
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        return 325;
    }

    public final android.view.View getRefreshableView()
    {
        android.view.View r1;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        r1 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: android.view.View mRefreshableView>;

        return r1;
    }

    protected android.widget.FrameLayout getRefreshableViewWrapper()
    {
        android.widget.FrameLayout r1;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        r1 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: android.widget.FrameLayout mRefreshableViewWrapper>;

        return r1;
    }

    public final boolean getShowViewWhileRefreshing()
    {
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;
        boolean z0;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        z0 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean mShowViewWhileRefreshing>;

        return z0;
    }

    public final cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State getState()
    {
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State r1;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        r1 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State mState>;

        return r1;
    }

    protected void handleStyledAttributes(android.content.res.TypedArray)
    {
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;
        android.content.res.TypedArray $r1;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $r1 := @parameter0: android.content.res.TypedArray;

        return;
    }

    public final boolean isDisableScrollingWhileRefreshing()
    {
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;
        boolean $z0;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $z0 = virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean isScrollingWhileRefreshingEnabled()>();

        if $z0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public final boolean isPullToRefreshEnabled()
    {
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode $r1;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;
        boolean $z0;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $r1 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode mMode>;

        $z0 = virtualinvoke $r1.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode: boolean permitsPullToRefresh()>();

        return $z0;
    }

    public final boolean isPullToRefreshOverScrollEnabled()
    {
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;
        int $i0;
        android.view.View $r1;
        boolean $z0;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 9 goto label1;

        $z0 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean mOverScrollEnabled>;

        if $z0 == 0 goto label1;

        $r1 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: android.view.View mRefreshableView>;

        $z0 = staticinvoke <cn.ffcs.lib.pulltorefresh.library.OverscrollHelper: boolean isAndroidOverScrollEnabled(android.view.View)>($r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    protected abstract boolean isReadyForPullEnd();

    protected abstract boolean isReadyForPullStart();

    public final boolean isRefreshing()
    {
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State $r1, $r2;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $r1 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State mState>;

        $r2 = <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State REFRESHING>;

        if $r1 == $r2 goto label1;

        $r1 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State mState>;

        $r2 = <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State MANUAL_REFRESHING>;

        if $r1 != $r2 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public final boolean isScrollingWhileRefreshingEnabled()
    {
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;
        boolean z0;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        z0 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean mScrollingWhileRefreshingEnabled>;

        return z0;
    }

    public final boolean onInterceptTouchEvent(android.view.MotionEvent)
    {
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode $r4, $r5;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Orientation $r3;
        byte $b1;
        int[] $r2;
        android.view.MotionEvent $r1;
        int $i0;
        float $f0, $f1, $f2, $f3, f4, $f5;
        boolean $z0;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $r1 := @parameter0: android.view.MotionEvent;

        $z0 = virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean isPullToRefreshEnabled()>();

        if $z0 != 0 goto label01;

        return 0;

     label01:
        $i0 = virtualinvoke $r1.<android.view.MotionEvent: int getAction()>();

        if $i0 == 3 goto label02;

        if $i0 != 1 goto label03;

     label02:
        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean mIsBeingDragged> = 0;

        return 0;

     label03:
        if $i0 == 0 goto label04;

        $z0 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean mIsBeingDragged>;

        if $z0 == 0 goto label04;

        return 1;

     label04:
        lookupswitch($i0)
        {
            case 0: goto label13;
            case 1: goto label05;
            case 2: goto label06;
            default: goto label05;
        };

     label05:
        $z0 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean mIsBeingDragged>;

        return $z0;

     label06:
        $z0 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean mScrollingWhileRefreshingEnabled>;

        if $z0 != 0 goto label07;

        $z0 = virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean isRefreshing()>();

        if $z0 == 0 goto label07;

        return 1;

     label07:
        $z0 = specialinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean isReadyForPull()>();

        if $z0 == 0 goto label05;

        $f0 = virtualinvoke $r1.<android.view.MotionEvent: float getY()>();

        $f1 = virtualinvoke $r1.<android.view.MotionEvent: float getX()>();

        $r2 = <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$4: int[] $SwitchMap$cn$ffcs$lib$pulltorefresh$library$PullToRefreshBase$Orientation>;

        $r3 = virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Orientation getPullToRefreshScrollDirection()>();

        $i0 = virtualinvoke $r3.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Orientation: int ordinal()>();

        $i0 = $r2[$i0];

        lookupswitch($i0)
        {
            case 1: goto label11;
            default: goto label08;
        };

     label08:
        $f2 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: float mLastMotionY>;

        $f2 = $f0 - $f2;

        $f3 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: float mLastMotionX>;

        f4 = $f1 - $f3;

     label09:
        $f3 = staticinvoke <java.lang.Math: float abs(float)>($f2);

        $i0 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: int mTouchSlop>;

        $f5 = (float) $i0;

        $b1 = $f3 cmpl $f5;

        $i0 = (int) $b1;

        if $i0 <= 0 goto label05;

        $z0 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean mFilterTouchEvents>;

        if $z0 == 0 goto label10;

        f4 = staticinvoke <java.lang.Math: float abs(float)>(f4);

        $b1 = $f3 cmpl f4;

        $i0 = (int) $b1;

        if $i0 <= 0 goto label05;

     label10:
        $r4 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode mMode>;

        $z0 = virtualinvoke $r4.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode: boolean showHeaderLoadingLayout()>();

        if $z0 == 0 goto label12;

        $b1 = $f2 cmpl 1.0F;

        $i0 = (int) $b1;

        if $i0 < 0 goto label12;

        $z0 = virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean isReadyForPullStart()>();

        if $z0 == 0 goto label12;

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: float mLastMotionY> = $f0;

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: float mLastMotionX> = $f1;

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean mIsBeingDragged> = 1;

        $r4 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode mMode>;

        $r5 = <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode BOTH>;

        if $r4 != $r5 goto label05;

        $r4 = <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode PULL_FROM_START>;

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode mCurrentMode> = $r4;

        goto label05;

     label11:
        $f2 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: float mLastMotionX>;

        $f2 = $f1 - $f2;

        $f3 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: float mLastMotionY>;

        f4 = $f0 - $f3;

        goto label09;

     label12:
        $r4 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode mMode>;

        $z0 = virtualinvoke $r4.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode: boolean showFooterLoadingLayout()>();

        if $z0 == 0 goto label05;

        $b1 = $f2 cmpg -1.0F;

        $i0 = (int) $b1;

        if $i0 > 0 goto label05;

        $z0 = virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean isReadyForPullEnd()>();

        if $z0 == 0 goto label05;

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: float mLastMotionY> = $f0;

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: float mLastMotionX> = $f1;

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean mIsBeingDragged> = 1;

        $r4 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode mMode>;

        $r5 = <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode BOTH>;

        if $r4 != $r5 goto label05;

        $r4 = <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode PULL_FROM_END>;

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode mCurrentMode> = $r4;

        goto label05;

     label13:
        $z0 = specialinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean isReadyForPull()>();

        if $z0 == 0 goto label05;

        $f0 = virtualinvoke $r1.<android.view.MotionEvent: float getY()>();

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: float mInitialMotionY> = $f0;

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: float mLastMotionY> = $f0;

        $f0 = virtualinvoke $r1.<android.view.MotionEvent: float getX()>();

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: float mInitialMotionX> = $f0;

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: float mLastMotionX> = $f0;

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean mIsBeingDragged> = 0;

        goto label05;
    }

    protected void onPtrRestoreInstanceState(android.os.Bundle)
    {
        android.os.Bundle $r1;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $r1 := @parameter0: android.os.Bundle;

        return;
    }

    protected void onPtrSaveInstanceState(android.os.Bundle)
    {
        android.os.Bundle $r1;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $r1 := @parameter0: android.os.Bundle;

        return;
    }

    protected void onPullToRefresh()
    {
        cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout $r3;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode $r2;
        int[] $r1;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;
        int $i0;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $r1 = <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$4: int[] $SwitchMap$cn$ffcs$lib$pulltorefresh$library$PullToRefreshBase$Mode>;

        $r2 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode mCurrentMode>;

        $i0 = virtualinvoke $r2.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode: int ordinal()>();

        $i0 = $r1[$i0];

        lookupswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label3;
            default: goto label1;
        };

     label1:
        return;

     label2:
        $r3 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout mFooterLayout>;

        virtualinvoke $r3.<cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout: void pullToRefresh()>();

        return;

     label3:
        $r3 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout mHeaderLayout>;

        virtualinvoke $r3.<cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout: void pullToRefresh()>();

        return;
    }

    public final void onRefreshComplete()
    {
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State $r1;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;
        boolean[] $r2;
        boolean $z0;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $z0 = virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean isRefreshing()>();

        if $z0 == 0 goto label1;

        $r1 = <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State RESET>;

        $r2 = newarray (boolean)[0];

        virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: void setState(cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State,boolean[])>($r1, $r2);

     label1:
        return;
    }

    protected void onRefreshing(boolean)
    {
        cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout $r3;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode $r2;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;
        int[] $r4;
        int $i0;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$1 r1;
        boolean $z0, $z1;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $z0 := @parameter0: boolean;

        $r2 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode mMode>;

        $z1 = virtualinvoke $r2.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode: boolean showHeaderLoadingLayout()>();

        if $z1 == 0 goto label1;

        $r3 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout mHeaderLayout>;

        virtualinvoke $r3.<cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout: void refreshing()>();

     label1:
        $r2 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode mMode>;

        $z1 = virtualinvoke $r2.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode: boolean showFooterLoadingLayout()>();

        if $z1 == 0 goto label2;

        $r3 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout mFooterLayout>;

        virtualinvoke $r3.<cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout: void refreshing()>();

     label2:
        if $z0 == 0 goto label6;

        $z0 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean mShowViewWhileRefreshing>;

        if $z0 == 0 goto label5;

        r1 = new cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$1;

        specialinvoke r1.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$1: void <init>(cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase)>(r0);

        $r4 = <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$4: int[] $SwitchMap$cn$ffcs$lib$pulltorefresh$library$PullToRefreshBase$Mode>;

        $r2 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode mCurrentMode>;

        $i0 = virtualinvoke $r2.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode: int ordinal()>();

        $i0 = $r4[$i0];

        lookupswitch($i0)
        {
            case 1: goto label4;
            case 2: goto label3;
            case 3: goto label4;
            default: goto label3;
        };

     label3:
        $i0 = virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: int getHeaderSize()>();

        $i0 = neg $i0;

        virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: void smoothScrollTo(int,cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$OnSmoothScrollFinishedListener)>($i0, r1);

        return;

     label4:
        $i0 = virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: int getFooterSize()>();

        virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: void smoothScrollTo(int,cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$OnSmoothScrollFinishedListener)>($i0, r1);

        return;

     label5:
        virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: void smoothScrollTo(int)>(0);

        return;

     label6:
        specialinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: void callRefreshListener()>();

        return;
    }

    protected void onReleaseToRefresh()
    {
        cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout $r3;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode $r2;
        int[] $r1;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;
        int $i0;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $r1 = <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$4: int[] $SwitchMap$cn$ffcs$lib$pulltorefresh$library$PullToRefreshBase$Mode>;

        $r2 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode mCurrentMode>;

        $i0 = virtualinvoke $r2.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode: int ordinal()>();

        $i0 = $r1[$i0];

        lookupswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label3;
            default: goto label1;
        };

     label1:
        return;

     label2:
        $r3 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout mFooterLayout>;

        virtualinvoke $r3.<cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout: void releaseToRefresh()>();

        return;

     label3:
        $r3 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout mHeaderLayout>;

        virtualinvoke $r3.<cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout: void releaseToRefresh()>();

        return;
    }

    protected void onReset()
    {
        cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout $r1;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean mIsBeingDragged> = 0;

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean mLayoutVisibilityChangesEnabled> = 1;

        $r1 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout mHeaderLayout>;

        virtualinvoke $r1.<cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout: void reset()>();

        $r1 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout mFooterLayout>;

        virtualinvoke $r1.<cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout: void reset()>();

        virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: void smoothScrollTo(int)>(0);

        return;
    }

    protected final void onRestoreInstanceState(android.os.Parcelable)
    {
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode $r3;
        android.os.Parcelable $r1;
        android.os.Bundle r2;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;
        boolean[] $r6;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State $r4, $r5;
        int $i0;
        boolean $z0;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $r1 := @parameter0: android.os.Parcelable;

        $z0 = $r1 instanceof android.os.Bundle;

        if $z0 == 0 goto label3;

        r2 = (android.os.Bundle) $r1;

        $i0 = virtualinvoke r2.<android.os.Bundle: int getInt(java.lang.String,int)>("ptr_mode", 0);

        $r3 = staticinvoke <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode mapIntToValue(int)>($i0);

        virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: void setMode(cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode)>($r3);

        $i0 = virtualinvoke r2.<android.os.Bundle: int getInt(java.lang.String,int)>("ptr_current_mode", 0);

        $r3 = staticinvoke <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode mapIntToValue(int)>($i0);

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode mCurrentMode> = $r3;

        $z0 = virtualinvoke r2.<android.os.Bundle: boolean getBoolean(java.lang.String,boolean)>("ptr_disable_scrolling", 0);

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean mScrollingWhileRefreshingEnabled> = $z0;

        $z0 = virtualinvoke r2.<android.os.Bundle: boolean getBoolean(java.lang.String,boolean)>("ptr_show_refreshing_view", 1);

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean mShowViewWhileRefreshing> = $z0;

        $r1 = virtualinvoke r2.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("ptr_super");

        specialinvoke r0.<android.widget.LinearLayout: void onRestoreInstanceState(android.os.Parcelable)>($r1);

        $i0 = virtualinvoke r2.<android.os.Bundle: int getInt(java.lang.String,int)>("ptr_state", 0);

        $r4 = staticinvoke <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State mapIntToValue(int)>($i0);

        $r5 = <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State REFRESHING>;

        if $r4 == $r5 goto label1;

        $r5 = <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State MANUAL_REFRESHING>;

        if $r4 != $r5 goto label2;

     label1:
        $r6 = newarray (boolean)[1];

        $r6[0] = 1;

        virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: void setState(cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State,boolean[])>($r4, $r6);

     label2:
        virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: void onPtrRestoreInstanceState(android.os.Bundle)>(r2);

        return;

     label3:
        specialinvoke r0.<android.widget.LinearLayout: void onRestoreInstanceState(android.os.Parcelable)>($r1);

        return;
    }

    protected final android.os.Parcelable onSaveInstanceState()
    {
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode $r3;
        android.os.Bundle r1;
        android.os.Parcelable $r4;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State $r2;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;
        int $i0;
        boolean $z0;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        r1 = new android.os.Bundle;

        specialinvoke r1.<android.os.Bundle: void <init>()>();

        virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: void onPtrSaveInstanceState(android.os.Bundle)>(r1);

        $r2 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State mState>;

        $i0 = virtualinvoke $r2.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State: int getIntValue()>();

        virtualinvoke r1.<android.os.Bundle: void putInt(java.lang.String,int)>("ptr_state", $i0);

        $r3 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode mMode>;

        $i0 = virtualinvoke $r3.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode: int getIntValue()>();

        virtualinvoke r1.<android.os.Bundle: void putInt(java.lang.String,int)>("ptr_mode", $i0);

        $r3 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode mCurrentMode>;

        $i0 = virtualinvoke $r3.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode: int getIntValue()>();

        virtualinvoke r1.<android.os.Bundle: void putInt(java.lang.String,int)>("ptr_current_mode", $i0);

        $z0 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean mScrollingWhileRefreshingEnabled>;

        virtualinvoke r1.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>("ptr_disable_scrolling", $z0);

        $z0 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean mShowViewWhileRefreshing>;

        virtualinvoke r1.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>("ptr_show_refreshing_view", $z0);

        $r4 = specialinvoke r0.<android.widget.LinearLayout: android.os.Parcelable onSaveInstanceState()>();

        virtualinvoke r1.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("ptr_super", $r4);

        return r1;
    }

    protected final void onSizeChanged(int, int, int, int)
    {
        java.lang.Object[] $r1;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$2 $r4;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;
        java.lang.Integer $r2;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r3;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $r1 = newarray (java.lang.Object)[2];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r1[0] = $r2;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r1[1] = $r2;

        $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("onSizeChanged. W: %d, H: %d", $r1);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("PullToRefresh", $r3);

        specialinvoke r0.<android.widget.LinearLayout: void onSizeChanged(int,int,int,int)>($i0, $i1, $i2, $i3);

        virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: void refreshLoadingViewsSize()>();

        virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: void refreshRefreshableViewSize(int,int)>($i0, $i1);

        $r4 = new cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$2;

        specialinvoke $r4.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$2: void <init>(cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase)>(r0);

        virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean post(java.lang.Runnable)>($r4);

        return;
    }

    public final boolean onTouchEvent(android.view.MotionEvent)
    {
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;
        boolean[] $r6;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$OnRefreshListener $r4;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State $r2, $r3;
        android.view.MotionEvent $r1;
        int $i0;
        float $f0;
        boolean $z0;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$OnRefreshListener2 $r5;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $r1 := @parameter0: android.view.MotionEvent;

        $z0 = virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean isPullToRefreshEnabled()>();

        if $z0 != 0 goto label01;

        return 0;

     label01:
        $z0 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean mScrollingWhileRefreshingEnabled>;

        if $z0 != 0 goto label02;

        $z0 = virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean isRefreshing()>();

        if $z0 == 0 goto label02;

        return 1;

     label02:
        $i0 = virtualinvoke $r1.<android.view.MotionEvent: int getAction()>();

        if $i0 != 0 goto label03;

        $i0 = virtualinvoke $r1.<android.view.MotionEvent: int getEdgeFlags()>();

        if $i0 != 0 goto label11;

     label03:
        $i0 = virtualinvoke $r1.<android.view.MotionEvent: int getAction()>();

        lookupswitch($i0)
        {
            case 0: goto label05;
            case 1: goto label07;
            case 2: goto label06;
            case 3: goto label07;
            default: goto label04;
        };

     label04:
        return 0;

     label05:
        $z0 = specialinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean isReadyForPull()>();

        if $z0 == 0 goto label11;

        $f0 = virtualinvoke $r1.<android.view.MotionEvent: float getY()>();

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: float mInitialMotionY> = $f0;

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: float mLastMotionY> = $f0;

        $f0 = virtualinvoke $r1.<android.view.MotionEvent: float getX()>();

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: float mInitialMotionX> = $f0;

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: float mLastMotionX> = $f0;

        return 1;

     label06:
        $z0 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean mIsBeingDragged>;

        if $z0 == 0 goto label11;

        $f0 = virtualinvoke $r1.<android.view.MotionEvent: float getY()>();

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: float mLastMotionY> = $f0;

        $f0 = virtualinvoke $r1.<android.view.MotionEvent: float getX()>();

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: float mLastMotionX> = $f0;

        specialinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: void pullEvent()>();

        return 1;

     label07:
        $z0 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean mIsBeingDragged>;

        if $z0 == 0 goto label11;

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean mIsBeingDragged> = 0;

        $r2 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State mState>;

        $r3 = <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State RELEASE_TO_REFRESH>;

        if $r2 != $r3 goto label09;

        $r4 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$OnRefreshListener mOnRefreshListener>;

        if $r4 != null goto label08;

        $r5 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$OnRefreshListener2 mOnRefreshListener2>;

        if $r5 == null goto label09;

     label08:
        $r2 = <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State REFRESHING>;

        $r6 = newarray (boolean)[1];

        $r6[0] = 1;

        virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: void setState(cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State,boolean[])>($r2, $r6);

        return 1;

     label09:
        $z0 = virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean isRefreshing()>();

        if $z0 == 0 goto label10;

        virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: void smoothScrollTo(int)>(0);

        return 1;

     label10:
        $r2 = <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State RESET>;

        $r6 = newarray (boolean)[0];

        virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: void setState(cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State,boolean[])>($r2, $r6);

        return 1;

     label11:
        return 0;
    }

    protected final void refreshLoadingViewsSize()
    {
        cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout $r7;
        java.lang.Object[] $r3;
        java.lang.Integer $r4;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Orientation $r2;
        int[] $r1;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String $r5;
        boolean $z0;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode $r6;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;
        float $f0;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        i0 = specialinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: int getMaximumPullScroll()>();

        $f0 = (float) i0;

        $f0 = $f0 * 1.2F;

        i0 = (int) $f0;

        $i1 = virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: int getPaddingLeft()>();

        $i2 = virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: int getPaddingTop()>();

        $i3 = virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: int getPaddingRight()>();

        $i4 = virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: int getPaddingBottom()>();

        $r1 = <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$4: int[] $SwitchMap$cn$ffcs$lib$pulltorefresh$library$PullToRefreshBase$Orientation>;

        $r2 = virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Orientation getPullToRefreshScrollDirection()>();

        $i5 = virtualinvoke $r2.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Orientation: int ordinal()>();

        $i5 = $r1[$i5];

        lookupswitch($i5)
        {
            case 1: goto label2;
            case 2: goto label6;
            default: goto label1;
        };

     label1:
        $r3 = newarray (java.lang.Object)[4];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r3[0] = $r4;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r3[1] = $r4;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r3[2] = $r4;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r3[3] = $r4;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Setting Padding. L: %d, T: %d, R: %d, B: %d", $r3);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("PullToRefresh", $r5);

        virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: void setPadding(int,int,int,int)>($i1, $i2, $i3, $i4);

        return;

     label2:
        $r6 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode mMode>;

        $z0 = virtualinvoke $r6.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode: boolean showHeaderLoadingLayout()>();

        if $z0 == 0 goto label4;

        $r7 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout mHeaderLayout>;

        virtualinvoke $r7.<cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout: void setWidth(int)>(i0);

        $i1 = neg i0;

     label3:
        $r6 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode mMode>;

        $z0 = virtualinvoke $r6.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode: boolean showFooterLoadingLayout()>();

        if $z0 == 0 goto label5;

        $r7 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout mFooterLayout>;

        virtualinvoke $r7.<cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout: void setWidth(int)>(i0);

        $i3 = neg i0;

        goto label1;

     label4:
        $i1 = 0;

        goto label3;

     label5:
        $i3 = 0;

        goto label1;

     label6:
        $r6 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode mMode>;

        $z0 = virtualinvoke $r6.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode: boolean showHeaderLoadingLayout()>();

        if $z0 == 0 goto label8;

        $r7 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout mHeaderLayout>;

        virtualinvoke $r7.<cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout: void setHeight(int)>(i0);

        $i2 = neg i0;

     label7:
        $r6 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode mMode>;

        $z0 = virtualinvoke $r6.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode: boolean showFooterLoadingLayout()>();

        if $z0 == 0 goto label9;

        $r7 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout mFooterLayout>;

        virtualinvoke $r7.<cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout: void setHeight(int)>(i0);

        $i4 = neg i0;

        goto label1;

     label8:
        $i2 = 0;

        goto label7;

     label9:
        $i4 = 0;

        goto label1;
    }

    protected final void refreshRefreshableViewSize(int, int)
    {
        android.view.ViewGroup$LayoutParams $r2;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;
        android.widget.FrameLayout $r1;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Orientation $r5;
        int[] $r4;
        int $i0, $i1, $i2;
        android.widget.LinearLayout$LayoutParams r3;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: android.widget.FrameLayout mRefreshableViewWrapper>;

        $r2 = virtualinvoke $r1.<android.widget.FrameLayout: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        r3 = (android.widget.LinearLayout$LayoutParams) $r2;

        $r4 = <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$4: int[] $SwitchMap$cn$ffcs$lib$pulltorefresh$library$PullToRefreshBase$Orientation>;

        $r5 = virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Orientation getPullToRefreshScrollDirection()>();

        $i2 = virtualinvoke $r5.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Orientation: int ordinal()>();

        $i2 = $r4[$i2];

        lookupswitch($i2)
        {
            case 1: goto label2;
            case 2: goto label3;
            default: goto label1;
        };

     label1:
        return;

     label2:
        $i1 = r3.<android.widget.LinearLayout$LayoutParams: int width>;

        if $i1 == $i0 goto label4;

        r3.<android.widget.LinearLayout$LayoutParams: int width> = $i0;

        $r1 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: android.widget.FrameLayout mRefreshableViewWrapper>;

        virtualinvoke $r1.<android.widget.FrameLayout: void requestLayout()>();

        return;

     label3:
        $i0 = r3.<android.widget.LinearLayout$LayoutParams: int height>;

        if $i0 == $i1 goto label4;

        r3.<android.widget.LinearLayout$LayoutParams: int height> = $i1;

        $r1 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: android.widget.FrameLayout mRefreshableViewWrapper>;

        virtualinvoke $r1.<android.widget.FrameLayout: void requestLayout()>();

     label4:
        return;
    }

    public void setDisableScrollingWhileRefreshing(boolean)
    {
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;
        boolean $z0;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $z0 := @parameter0: boolean;

        if $z0 != 0 goto label2;

        $z0 = 1;

     label1:
        virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: void setScrollingWhileRefreshingEnabled(boolean)>($z0);

        return;

     label2:
        $z0 = 0;

        goto label1;
    }

    public final void setFilterTouchEvents(boolean)
    {
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;
        boolean $z0;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $z0 := @parameter0: boolean;

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean mFilterTouchEvents> = $z0;

        return;
    }

    protected final void setHeaderScroll(int)
    {
        cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout $r3;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Orientation $r5;
        int[] $r4;
        int $i0, $i1, $i2;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $i0 := @parameter0: int;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setHeaderScroll: ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("PullToRefresh", $r2);

        $i1 = specialinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: int getMaximumPullScroll()>();

        $i2 = neg $i1;

        $i0 = staticinvoke <java.lang.Math: int max(int,int)>($i2, $i0);

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i0);

        $z0 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean mLayoutVisibilityChangesEnabled>;

        if $z0 == 0 goto label1;

        if $i0 >= 0 goto label3;

        $r3 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout mHeaderLayout>;

        virtualinvoke $r3.<cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout: void setVisibility(int)>(0);

     label1:
        $r4 = <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$4: int[] $SwitchMap$cn$ffcs$lib$pulltorefresh$library$PullToRefreshBase$Orientation>;

        $r5 = virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Orientation getPullToRefreshScrollDirection()>();

        $i1 = virtualinvoke $r5.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Orientation: int ordinal()>();

        $i1 = $r4[$i1];

        lookupswitch($i1)
        {
            case 1: goto label6;
            case 2: goto label5;
            default: goto label2;
        };

     label2:
        return;

     label3:
        if $i0 <= 0 goto label4;

        $r3 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout mFooterLayout>;

        virtualinvoke $r3.<cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout: void setVisibility(int)>(0);

        goto label1;

     label4:
        $r3 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout mHeaderLayout>;

        virtualinvoke $r3.<cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout: void setVisibility(int)>(4);

        $r3 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout mFooterLayout>;

        virtualinvoke $r3.<cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout: void setVisibility(int)>(4);

        goto label1;

     label5:
        virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: void scrollTo(int,int)>(0, $i0);

        return;

     label6:
        virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: void scrollTo(int,int)>($i0, 0);

        return;
    }

    public void setLastUpdatedLabel(java.lang.CharSequence)
    {
        java.lang.CharSequence $r1;
        cn.ffcs.lib.pulltorefresh.library.ILoadingLayout $r2;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $r1 := @parameter0: java.lang.CharSequence;

        $r2 = virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.ILoadingLayout getLoadingLayoutProxy()>();

        interfaceinvoke $r2.<cn.ffcs.lib.pulltorefresh.library.ILoadingLayout: void setLastUpdatedLabel(java.lang.CharSequence)>($r1);

        return;
    }

    public void setLoadingDrawable(android.graphics.drawable.Drawable)
    {
        android.graphics.drawable.Drawable $r1;
        cn.ffcs.lib.pulltorefresh.library.ILoadingLayout $r2;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $r1 := @parameter0: android.graphics.drawable.Drawable;

        $r2 = virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.ILoadingLayout getLoadingLayoutProxy()>();

        interfaceinvoke $r2.<cn.ffcs.lib.pulltorefresh.library.ILoadingLayout: void setLoadingDrawable(android.graphics.drawable.Drawable)>($r1);

        return;
    }

    public void setLoadingDrawable(android.graphics.drawable.Drawable, cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode)
    {
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode $r2;
        cn.ffcs.lib.pulltorefresh.library.ILoadingLayout $r3;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;
        android.graphics.drawable.Drawable $r1;
        boolean $z0, $z1;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $r1 := @parameter0: android.graphics.drawable.Drawable;

        $r2 := @parameter1: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode;

        $z0 = virtualinvoke $r2.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode: boolean showHeaderLoadingLayout()>();

        $z1 = virtualinvoke $r2.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode: boolean showFooterLoadingLayout()>();

        $r3 = virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.ILoadingLayout getLoadingLayoutProxy(boolean,boolean)>($z0, $z1);

        interfaceinvoke $r3.<cn.ffcs.lib.pulltorefresh.library.ILoadingLayout: void setLoadingDrawable(android.graphics.drawable.Drawable)>($r1);

        return;
    }

    public void setLongClickable(boolean)
    {
        android.view.View $r1;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;
        boolean $z0;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: android.view.View getRefreshableView()>();

        virtualinvoke $r1.<android.view.View: void setLongClickable(boolean)>($z0);

        return;
    }

    public final void setMode(cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode)
    {
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode $r1, $r2;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $r1 := @parameter0: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode;

        $r2 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode mMode>;

        if $r1 == $r2 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Setting mode to: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("PullToRefresh", $r4);

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode mMode> = $r1;

        virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: void updateUIForMode()>();

     label1:
        return;
    }

    public void setOnPullEventListener(cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$OnPullEventListener)
    {
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$OnPullEventListener r1;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        r1 := @parameter0: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$OnPullEventListener;

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$OnPullEventListener mOnPullEventListener> = r1;

        return;
    }

    public final void setOnRefreshListener(cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$OnRefreshListener2)
    {
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$OnRefreshListener2 r1;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        r1 := @parameter0: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$OnRefreshListener2;

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$OnRefreshListener2 mOnRefreshListener2> = r1;

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$OnRefreshListener mOnRefreshListener> = null;

        return;
    }

    public final void setOnRefreshListener(cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$OnRefreshListener)
    {
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$OnRefreshListener r1;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        r1 := @parameter0: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$OnRefreshListener;

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$OnRefreshListener mOnRefreshListener> = r1;

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$OnRefreshListener2 mOnRefreshListener2> = null;

        return;
    }

    public void setPullLabel(java.lang.CharSequence)
    {
        java.lang.CharSequence $r1;
        cn.ffcs.lib.pulltorefresh.library.ILoadingLayout $r2;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $r1 := @parameter0: java.lang.CharSequence;

        $r2 = virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.ILoadingLayout getLoadingLayoutProxy()>();

        interfaceinvoke $r2.<cn.ffcs.lib.pulltorefresh.library.ILoadingLayout: void setPullLabel(java.lang.CharSequence)>($r1);

        return;
    }

    public void setPullLabel(java.lang.CharSequence, cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode)
    {
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode $r2;
        java.lang.CharSequence $r1;
        cn.ffcs.lib.pulltorefresh.library.ILoadingLayout $r3;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;
        boolean $z0, $z1;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $r1 := @parameter0: java.lang.CharSequence;

        $r2 := @parameter1: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode;

        $z0 = virtualinvoke $r2.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode: boolean showHeaderLoadingLayout()>();

        $z1 = virtualinvoke $r2.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode: boolean showFooterLoadingLayout()>();

        $r3 = virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.ILoadingLayout getLoadingLayoutProxy(boolean,boolean)>($z0, $z1);

        interfaceinvoke $r3.<cn.ffcs.lib.pulltorefresh.library.ILoadingLayout: void setPullLabel(java.lang.CharSequence)>($r1);

        return;
    }

    public final void setPullToRefreshEnabled(boolean)
    {
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode $r1;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;
        boolean $z0;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label2;

        $r1 = staticinvoke <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode getDefault()>();

     label1:
        virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: void setMode(cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode)>($r1);

        return;

     label2:
        $r1 = <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode DISABLED>;

        goto label1;
    }

    public final void setPullToRefreshOverScrollEnabled(boolean)
    {
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;
        boolean $z0;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $z0 := @parameter0: boolean;

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean mOverScrollEnabled> = $z0;

        return;
    }

    public final void setRefreshing()
    {
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: void setRefreshing(boolean)>(1);

        return;
    }

    public final void setRefreshing(boolean)
    {
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State $r1;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;
        boolean[] $r2;
        boolean $z0, $z1;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $z0 := @parameter0: boolean;

        $z1 = virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean isRefreshing()>();

        if $z1 != 0 goto label1;

        $r1 = <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State MANUAL_REFRESHING>;

        $r2 = newarray (boolean)[1];

        $r2[0] = $z0;

        virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: void setState(cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State,boolean[])>($r1, $r2);

     label1:
        return;
    }

    public void setRefreshingLabel(java.lang.CharSequence)
    {
        java.lang.CharSequence $r1;
        cn.ffcs.lib.pulltorefresh.library.ILoadingLayout $r2;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $r1 := @parameter0: java.lang.CharSequence;

        $r2 = virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.ILoadingLayout getLoadingLayoutProxy()>();

        interfaceinvoke $r2.<cn.ffcs.lib.pulltorefresh.library.ILoadingLayout: void setRefreshingLabel(java.lang.CharSequence)>($r1);

        return;
    }

    public void setRefreshingLabel(java.lang.CharSequence, cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode)
    {
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode $r2;
        java.lang.CharSequence $r1;
        cn.ffcs.lib.pulltorefresh.library.ILoadingLayout $r3;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;
        boolean $z0, $z1;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $r1 := @parameter0: java.lang.CharSequence;

        $r2 := @parameter1: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode;

        $z0 = virtualinvoke $r2.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode: boolean showHeaderLoadingLayout()>();

        $z1 = virtualinvoke $r2.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode: boolean showFooterLoadingLayout()>();

        $r3 = virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.ILoadingLayout getLoadingLayoutProxy(boolean,boolean)>($z0, $z1);

        interfaceinvoke $r3.<cn.ffcs.lib.pulltorefresh.library.ILoadingLayout: void setRefreshingLabel(java.lang.CharSequence)>($r1);

        return;
    }

    public void setReleaseLabel(java.lang.CharSequence)
    {
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode $r2;
        java.lang.CharSequence $r1;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $r1 := @parameter0: java.lang.CharSequence;

        $r2 = <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode BOTH>;

        virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: void setReleaseLabel(java.lang.CharSequence,cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode)>($r1, $r2);

        return;
    }

    public void setReleaseLabel(java.lang.CharSequence, cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode)
    {
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode $r2;
        java.lang.CharSequence $r1;
        cn.ffcs.lib.pulltorefresh.library.ILoadingLayout $r3;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;
        boolean $z0, $z1;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $r1 := @parameter0: java.lang.CharSequence;

        $r2 := @parameter1: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode;

        $z0 = virtualinvoke $r2.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode: boolean showHeaderLoadingLayout()>();

        $z1 = virtualinvoke $r2.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode: boolean showFooterLoadingLayout()>();

        $r3 = virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.ILoadingLayout getLoadingLayoutProxy(boolean,boolean)>($z0, $z1);

        interfaceinvoke $r3.<cn.ffcs.lib.pulltorefresh.library.ILoadingLayout: void setReleaseLabel(java.lang.CharSequence)>($r1);

        return;
    }

    public void setScrollAnimationInterpolator(android.view.animation.Interpolator)
    {
        android.view.animation.Interpolator $r1;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $r1 := @parameter0: android.view.animation.Interpolator;

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: android.view.animation.Interpolator mScrollAnimationInterpolator> = $r1;

        return;
    }

    public final void setScrollingWhileRefreshingEnabled(boolean)
    {
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;
        boolean $z0;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $z0 := @parameter0: boolean;

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean mScrollingWhileRefreshingEnabled> = $z0;

        return;
    }

    public final void setShowViewWhileRefreshing(boolean)
    {
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;
        boolean $z0;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $z0 := @parameter0: boolean;

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean mShowViewWhileRefreshing> = $z0;

        return;
    }

    final transient void setState(cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State, boolean[])
    {
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode $r7;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;
        boolean[] $r2;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$OnPullEventListener $r6;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State $r1;
        int[] $r5;
        int $i0;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $r1 := @parameter0: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State;

        $r2 := @parameter1: boolean[];

        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State mState> = $r1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("State: ");

        $r1 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State mState>;

        $r4 = virtualinvoke $r1.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State: java.lang.String name()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("PullToRefresh", $r4);

        $r5 = <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$4: int[] $SwitchMap$cn$ffcs$lib$pulltorefresh$library$PullToRefreshBase$State>;

        $r1 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State mState>;

        $i0 = virtualinvoke $r1.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State: int ordinal()>();

        $i0 = $r5[$i0];

        lookupswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label5;
            case 5: goto label5;
            default: goto label1;
        };

     label1:
        $r6 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$OnPullEventListener mOnPullEventListener>;

        if $r6 == null goto label6;

        $r6 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$OnPullEventListener mOnPullEventListener>;

        $r1 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State mState>;

        $r7 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode mCurrentMode>;

        interfaceinvoke $r6.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$OnPullEventListener: void onPullEvent(cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase,cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$State,cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode)>(r0, $r1, $r7);

        return;

     label2:
        virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: void onReset()>();

        goto label1;

     label3:
        virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: void onPullToRefresh()>();

        goto label1;

     label4:
        virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: void onReleaseToRefresh()>();

        goto label1;

     label5:
        $z0 = $r2[0];

        virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: void onRefreshing(boolean)>($z0);

        goto label1;

     label6:
        return;
    }

    protected final void smoothScrollTo(int)
    {
        int $i0;
        long $l2;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $i0 := @parameter0: int;

        $l2 = (long) 200;

        specialinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: void smoothScrollTo(int,long)>(0, $l2);

        return;
    }

    protected final void smoothScrollTo(int, cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$OnSmoothScrollFinishedListener)
    {
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;
        int $i0;
        long $l1;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$OnSmoothScrollFinishedListener $r1;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $i0 := @parameter0: int;

        $r1 := @parameter1: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$OnSmoothScrollFinishedListener;

        $l1 = (long) 200;

        specialinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: void smoothScrollTo(int,long,long,cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$OnSmoothScrollFinishedListener)>($i0, $l1, 0L, $r1);

        return;
    }

    protected final void smoothScrollToLonger(int)
    {
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;
        int $i0, $i1;
        long $l2;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: int getPullToRefreshScrollDurationLonger()>();

        $l2 = (long) $i1;

        specialinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: void smoothScrollTo(int,long)>($i0, $l2);

        return;
    }

    protected void updateUIForMode()
    {
        cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout $r2;
        android.view.ViewParent $r3;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode $r4, $r5;
        cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase r0;
        android.widget.LinearLayout$LayoutParams $r1;
        boolean $z0;

        r0 := @this: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase;

        $r1 = specialinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: android.widget.LinearLayout$LayoutParams getLoadingLayoutLayoutParams()>();

        $r2 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout mHeaderLayout>;

        $r3 = virtualinvoke $r2.<cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout: android.view.ViewParent getParent()>();

        if r0 != $r3 goto label1;

        $r2 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout mHeaderLayout>;

        virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: void removeView(android.view.View)>($r2);

     label1:
        $r4 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode mMode>;

        $z0 = virtualinvoke $r4.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode: boolean showHeaderLoadingLayout()>();

        if $z0 == 0 goto label2;

        $r2 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout mHeaderLayout>;

        virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: void addViewInternal(android.view.View,int,android.view.ViewGroup$LayoutParams)>($r2, 0, $r1);

     label2:
        $r2 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout mFooterLayout>;

        $r3 = virtualinvoke $r2.<cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout: android.view.ViewParent getParent()>();

        if r0 != $r3 goto label3;

        $r2 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout mFooterLayout>;

        virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: void removeView(android.view.View)>($r2);

     label3:
        $r4 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode mMode>;

        $z0 = virtualinvoke $r4.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode: boolean showFooterLoadingLayout()>();

        if $z0 == 0 goto label4;

        $r2 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.internal.LoadingLayout mFooterLayout>;

        virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: void addViewInternal(android.view.View,android.view.ViewGroup$LayoutParams)>($r2, $r1);

     label4:
        virtualinvoke r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: void refreshLoadingViewsSize()>();

        $r4 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode mMode>;

        $r5 = <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode BOTH>;

        if $r4 == $r5 goto label6;

        $r4 = r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode mMode>;

     label5:
        r0.<cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode mCurrentMode> = $r4;

        return;

     label6:
        $r4 = <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode: cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase$Mode PULL_FROM_START>;

        goto label5;
    }

    public static void <clinit>()
    {
        <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: java.lang.String STATE_SUPER> = "ptr_super";

        <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: java.lang.String STATE_STATE> = "ptr_state";

        <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: java.lang.String STATE_SHOW_REFRESHING_VIEW> = "ptr_show_refreshing_view";

        <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: java.lang.String STATE_SCROLLING_REFRESHING_ENABLED> = "ptr_disable_scrolling";

        <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: java.lang.String STATE_MODE> = "ptr_mode";

        <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: java.lang.String STATE_CURRENT_MODE> = "ptr_current_mode";

        <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: int SMOOTH_SCROLL_LONG_DURATION_MS> = 325;

        <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: int SMOOTH_SCROLL_DURATION_MS> = 200;

        <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: java.lang.String LOG_TAG> = "PullToRefresh";

        <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: float FRICTION> = 2.0F;

        <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: int DEMO_SCROLL_INTERVAL> = 225;

        <cn.ffcs.lib.pulltorefresh.library.PullToRefreshBase: boolean DEBUG> = 1;

        return;
    }
}
