public class proguard.classfile.util.InstructionSequenceMatcher extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.instruction.visitor.InstructionVisitor, proguard.classfile.constant.visitor.ConstantVisitor
{
    public static final int A;
    public static final int B;
    public static final int C;
    public static final int D;
    private static final boolean DEBUG;
    private static final boolean DEBUG_MORE;
    public static final int X;
    public static final int Y;
    public static final int Z;
    private int matchedArgumentFlags;
    private final int[] matchedArguments;
    private long matchedConstantFlags;
    private final int[] matchedConstantIndices;
    private final int[] matchedInstructionOffsets;
    private boolean matching;
    private boolean matchingAnyWildCards;
    private boolean matchingConstant;
    private proguard.classfile.constant.Constant patternConstant;
    private final proguard.classfile.constant.Constant[] patternConstants;
    private int patternInstructionIndex;
    private final proguard.classfile.instruction.Instruction[] patternInstructions;

    public void <init>(proguard.classfile.constant.Constant[], proguard.classfile.instruction.Instruction[])
    {
        int[] $r3;
        proguard.classfile.util.InstructionSequenceMatcher r0;
        proguard.classfile.instruction.Instruction[] $r2;
        int $i0;
        proguard.classfile.constant.Constant[] $r1;

        r0 := @this: proguard.classfile.util.InstructionSequenceMatcher;

        $r1 := @parameter0: proguard.classfile.constant.Constant[];

        $r2 := @parameter1: proguard.classfile.instruction.Instruction[];

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        $r3 = newarray (int)[7];

        r0.<proguard.classfile.util.InstructionSequenceMatcher: int[] matchedArguments> = $r3;

        r0.<proguard.classfile.util.InstructionSequenceMatcher: proguard.classfile.constant.Constant[] patternConstants> = $r1;

        r0.<proguard.classfile.util.InstructionSequenceMatcher: proguard.classfile.instruction.Instruction[] patternInstructions> = $r2;

        $i0 = lengthof $r2;

        $r3 = newarray (int)[$i0];

        r0.<proguard.classfile.util.InstructionSequenceMatcher: int[] matchedInstructionOffsets> = $r3;

        $i0 = lengthof $r1;

        $r3 = newarray (int)[$i0];

        r0.<proguard.classfile.util.InstructionSequenceMatcher: int[] matchedConstantIndices> = $r3;

        return;
    }

    private void checkMatch(boolean, proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.Instruction)
    {
        proguard.classfile.util.InstructionSequenceMatcher r0;
        proguard.classfile.instruction.Instruction[] $r6;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.instruction.Instruction $r4;
        int[] $r5;
        int $i0, $i1;
        proguard.classfile.Method $r2;
        boolean $z0;

        r0 := @this: proguard.classfile.util.InstructionSequenceMatcher;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: proguard.classfile.Clazz;

        $r2 := @parameter2: proguard.classfile.Method;

        $r3 := @parameter3: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter4: int;

        $r4 := @parameter5: proguard.classfile.instruction.Instruction;

        if $z0 == 0 goto label5;

        $r5 = r0.<proguard.classfile.util.InstructionSequenceMatcher: int[] matchedInstructionOffsets>;

        $i1 = r0.<proguard.classfile.util.InstructionSequenceMatcher: int patternInstructionIndex>;

        $r5[$i1] = $i0;

        $i0 = r0.<proguard.classfile.util.InstructionSequenceMatcher: int patternInstructionIndex>;

        $i0 = $i0 + 1;

        r0.<proguard.classfile.util.InstructionSequenceMatcher: int patternInstructionIndex> = $i0;

        $i0 = r0.<proguard.classfile.util.InstructionSequenceMatcher: int patternInstructionIndex>;

        $r6 = r0.<proguard.classfile.util.InstructionSequenceMatcher: proguard.classfile.instruction.Instruction[] patternInstructions>;

        $i1 = lengthof $r6;

        if $i0 != $i1 goto label3;

        $z0 = 1;

     label1:
        r0.<proguard.classfile.util.InstructionSequenceMatcher: boolean matching> = $z0;

        $i0 = r0.<proguard.classfile.util.InstructionSequenceMatcher: int matchedArgumentFlags>;

        if $i0 == 0 goto label4;

        $z0 = 1;

     label2:
        r0.<proguard.classfile.util.InstructionSequenceMatcher: boolean matchingAnyWildCards> = $z0;

        $z0 = r0.<proguard.classfile.util.InstructionSequenceMatcher: boolean matching>;

        if $z0 == 0 goto label8;

        virtualinvoke r0.<proguard.classfile.util.InstructionSequenceMatcher: void reset()>();

        return;

     label3:
        $z0 = 0;

        goto label1;

     label4:
        $z0 = 0;

        goto label2;

     label5:
        r0.<proguard.classfile.util.InstructionSequenceMatcher: boolean matching> = 0;

        $i1 = r0.<proguard.classfile.util.InstructionSequenceMatcher: int patternInstructionIndex>;

        if $i1 != 1 goto label7;

        $z0 = 1;

     label6:
        virtualinvoke r0.<proguard.classfile.util.InstructionSequenceMatcher: void reset()>();

        if $z0 == 0 goto label8;

        virtualinvoke $r4.<proguard.classfile.instruction.Instruction: void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.visitor.InstructionVisitor)>($r1, $r2, $r3, $i0, r0);

        return;

     label7:
        $z0 = 0;

        goto label6;

     label8:
        return;
    }

    private boolean matchingArguments(int, int)
    {
        int[] $r1;
        proguard.classfile.util.InstructionSequenceMatcher r0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: proguard.classfile.util.InstructionSequenceMatcher;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = $i1 - 1073741824;

        if $i2 >= 0 goto label2;

        if $i0 != $i1 goto label1;

        return 1;

     label1:
        return 0;

     label2:
        $i3 = r0.<proguard.classfile.util.InstructionSequenceMatcher: int matchedArgumentFlags>;

        $i1 = 1 << $i2;

        $i1 = $i3 & $i1;

        if $i1 != 0 goto label3;

        $r1 = r0.<proguard.classfile.util.InstructionSequenceMatcher: int[] matchedArguments>;

        $r1[$i2] = $i0;

        $i0 = r0.<proguard.classfile.util.InstructionSequenceMatcher: int matchedArgumentFlags>;

        $i1 = 1 << $i2;

        $i0 = $i1 | $i0;

        r0.<proguard.classfile.util.InstructionSequenceMatcher: int matchedArgumentFlags> = $i0;

        return 1;

     label3:
        $r1 = r0.<proguard.classfile.util.InstructionSequenceMatcher: int[] matchedArguments>;

        $i1 = $r1[$i2];

        if $i1 != $i0 goto label4;

        return 1;

     label4:
        return 0;
    }

    private boolean matchingArguments(int[], int[])
    {
        int[] $r1, $r2;
        proguard.classfile.util.InstructionSequenceMatcher r0;
        int $i0, $i1, $i2;
        boolean $z0;

        r0 := @this: proguard.classfile.util.InstructionSequenceMatcher;

        $r1 := @parameter0: int[];

        $r2 := @parameter1: int[];

        $i1 = lengthof $r1;

        $i0 = lengthof $r2;

        if $i1 == $i0 goto label1;

        return 0;

     label1:
        $i1 = 0;

     label2:
        $i0 = lengthof $r1;

        if $i1 >= $i0 goto label4;

        $i2 = $r1[$i1];

        $i0 = $r2[$i1];

        $z0 = specialinvoke r0.<proguard.classfile.util.InstructionSequenceMatcher: boolean matchingArguments(int,int)>($i2, $i0);

        if $z0 != 0 goto label3;

        return 0;

     label3:
        $i1 = $i1 + 1;

        goto label2;

     label4:
        return 1;
    }

    private boolean matchingBranchOffsets(int, int, int)
    {
        int[] $r1;
        proguard.classfile.util.InstructionSequenceMatcher r0;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: proguard.classfile.util.InstructionSequenceMatcher;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 = $i2 - 1073741824;

        if $i3 >= 0 goto label2;

        if $i1 != $i2 goto label1;

        return 1;

     label1:
        return 0;

     label2:
        $i2 = r0.<proguard.classfile.util.InstructionSequenceMatcher: int matchedArgumentFlags>;

        $i4 = 1 << $i3;

        $i2 = $i2 & $i4;

        if $i2 != 0 goto label3;

        $r1 = r0.<proguard.classfile.util.InstructionSequenceMatcher: int[] matchedArguments>;

        $i0 = $i0 + $i1;

        $r1[$i3] = $i0;

        $i0 = r0.<proguard.classfile.util.InstructionSequenceMatcher: int matchedArgumentFlags>;

        $i1 = 1 << $i3;

        $i0 = $i1 | $i0;

        r0.<proguard.classfile.util.InstructionSequenceMatcher: int matchedArgumentFlags> = $i0;

        return 1;

     label3:
        $r1 = r0.<proguard.classfile.util.InstructionSequenceMatcher: int[] matchedArguments>;

        $i2 = $r1[$i3];

        $i0 = $i0 + $i1;

        if $i2 != $i0 goto label4;

        return 1;

     label4:
        return 0;
    }

    private boolean matchingConstantIndices(proguard.classfile.Clazz, int, int)
    {
        proguard.classfile.util.InstructionSequenceMatcher r0;
        proguard.classfile.constant.Constant $r3;
        long $l2, $l3;
        byte $b4;
        proguard.classfile.Clazz $r1;
        int[] $r4;
        int $i0, $i1, $i5, $i6;
        proguard.classfile.constant.Constant[] $r2;
        boolean $z0;

        r0 := @this: proguard.classfile.util.InstructionSequenceMatcher;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $i1 < 1073741824 goto label1;

        $z0 = specialinvoke r0.<proguard.classfile.util.InstructionSequenceMatcher: boolean matchingArguments(int,int)>($i0, $i1);

        return $z0;

     label1:
        $l2 = r0.<proguard.classfile.util.InstructionSequenceMatcher: long matchedConstantFlags>;

        $l3 = 1L << $i1;

        $l2 = $l2 & $l3;

        $b4 = $l2 cmp 0L;

        if $b4 != 0 goto label3;

        r0.<proguard.classfile.util.InstructionSequenceMatcher: boolean matchingConstant> = 0;

        $r2 = r0.<proguard.classfile.util.InstructionSequenceMatcher: proguard.classfile.constant.Constant[] patternConstants>;

        $r3 = $r2[$i1];

        r0.<proguard.classfile.util.InstructionSequenceMatcher: proguard.classfile.constant.Constant patternConstant> = $r3;

        $i5 = interfaceinvoke $r1.<proguard.classfile.Clazz: int getTag(int)>($i0);

        $r3 = r0.<proguard.classfile.util.InstructionSequenceMatcher: proguard.classfile.constant.Constant patternConstant>;

        $i6 = virtualinvoke $r3.<proguard.classfile.constant.Constant: int getTag()>();

        if $i5 != $i6 goto label2;

        interfaceinvoke $r1.<proguard.classfile.Clazz: void constantPoolEntryAccept(int,proguard.classfile.constant.visitor.ConstantVisitor)>($i0, r0);

        $z0 = r0.<proguard.classfile.util.InstructionSequenceMatcher: boolean matchingConstant>;

        if $z0 == 0 goto label2;

        $r4 = r0.<proguard.classfile.util.InstructionSequenceMatcher: int[] matchedConstantIndices>;

        $r4[$i1] = $i0;

        $l2 = r0.<proguard.classfile.util.InstructionSequenceMatcher: long matchedConstantFlags>;

        $l3 = 1L << $i1;

        $l2 = $l2 | $l3;

        r0.<proguard.classfile.util.InstructionSequenceMatcher: long matchedConstantFlags> = $l2;

     label2:
        $z0 = r0.<proguard.classfile.util.InstructionSequenceMatcher: boolean matchingConstant>;

        return $z0;

     label3:
        $r4 = r0.<proguard.classfile.util.InstructionSequenceMatcher: int[] matchedConstantIndices>;

        $i1 = $r4[$i1];

        if $i1 != $i0 goto label4;

        return 1;

     label4:
        return 0;
    }

    private boolean matchingJumpOffsets(int, int[], int[])
    {
        proguard.classfile.util.InstructionSequenceMatcher r0;
        int[] $r1, $r2;
        int $i0, $i1, $i2, $i3;
        boolean $z0;

        r0 := @this: proguard.classfile.util.InstructionSequenceMatcher;

        $i0 := @parameter0: int;

        $r1 := @parameter1: int[];

        $r2 := @parameter2: int[];

        $i2 = lengthof $r1;

        $i1 = lengthof $r2;

        if $i2 == $i1 goto label1;

        return 0;

     label1:
        $i2 = 0;

     label2:
        $i1 = lengthof $r1;

        if $i2 >= $i1 goto label4;

        $i3 = $r1[$i2];

        $i1 = $r2[$i2];

        $z0 = specialinvoke r0.<proguard.classfile.util.InstructionSequenceMatcher: boolean matchingBranchOffsets(int,int,int)>($i0, $i3, $i1);

        if $z0 != 0 goto label3;

        return 0;

     label3:
        $i2 = $i2 + 1;

        goto label2;

     label4:
        return 1;
    }

    private boolean matchingOpcodes(proguard.classfile.instruction.Instruction, proguard.classfile.instruction.Instruction)
    {
        byte $b0, $b1;
        proguard.classfile.instruction.Instruction $r1, $r2;
        proguard.classfile.util.InstructionSequenceMatcher r0;
        int $i2, $i3;

        r0 := @this: proguard.classfile.util.InstructionSequenceMatcher;

        $r1 := @parameter0: proguard.classfile.instruction.Instruction;

        $r2 := @parameter1: proguard.classfile.instruction.Instruction;

        $b0 = $r1.<proguard.classfile.instruction.Instruction: byte opcode>;

        $b1 = $r2.<proguard.classfile.instruction.Instruction: byte opcode>;

        $i2 = (int) $b0;

        $i3 = (int) $b1;

        if $i2 == $i3 goto label1;

        $b0 = virtualinvoke $r1.<proguard.classfile.instruction.Instruction: byte canonicalOpcode()>();

        $b1 = $r2.<proguard.classfile.instruction.Instruction: byte opcode>;

        $i2 = (int) $b0;

        $i3 = (int) $b1;

        if $i2 != $i3 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public int instructionCount()
    {
        int $i0;
        proguard.classfile.util.InstructionSequenceMatcher r0;
        proguard.classfile.instruction.Instruction[] $r1;

        r0 := @this: proguard.classfile.util.InstructionSequenceMatcher;

        $r1 = r0.<proguard.classfile.util.InstructionSequenceMatcher: proguard.classfile.instruction.Instruction[] patternInstructions>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public boolean isMatching()
    {
        proguard.classfile.util.InstructionSequenceMatcher r0;
        boolean z0;

        r0 := @this: proguard.classfile.util.InstructionSequenceMatcher;

        z0 = r0.<proguard.classfile.util.InstructionSequenceMatcher: boolean matching>;

        return z0;
    }

    public boolean isMatchingAnyWildcards()
    {
        proguard.classfile.util.InstructionSequenceMatcher r0;
        boolean z0;

        r0 := @this: proguard.classfile.util.InstructionSequenceMatcher;

        z0 = r0.<proguard.classfile.util.InstructionSequenceMatcher: boolean matchingAnyWildCards>;

        return z0;
    }

    public int matchedArgument(int)
    {
        int[] $r1;
        proguard.classfile.util.InstructionSequenceMatcher r0;
        int $i0, $i1;

        r0 := @this: proguard.classfile.util.InstructionSequenceMatcher;

        $i0 := @parameter0: int;

        $i1 = $i0 - 1073741824;

        if $i1 >= 0 goto label1;

        return $i0;

     label1:
        $r1 = r0.<proguard.classfile.util.InstructionSequenceMatcher: int[] matchedArguments>;

        $i0 = $r1[$i1];

        return $i0;
    }

    public int[] matchedArguments(int[])
    {
        int[] $r1, $r2;
        proguard.classfile.util.InstructionSequenceMatcher r0;
        int $i0, $i1;

        r0 := @this: proguard.classfile.util.InstructionSequenceMatcher;

        $r1 := @parameter0: int[];

        $i1 = lengthof $r1;

        $r2 = newarray (int)[$i1];

        $i1 = 0;

     label1:
        $i0 = lengthof $r1;

        if $i1 >= $i0 goto label2;

        $i0 = $r1[$i1];

        $i0 = virtualinvoke r0.<proguard.classfile.util.InstructionSequenceMatcher: int matchedArgument(int)>($i0);

        $r2[$i1] = $i0;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $r2;
    }

    public int matchedBranchOffset(int, int)
    {
        int[] $r1;
        proguard.classfile.util.InstructionSequenceMatcher r0;
        int $i0, $i1, $i2;

        r0 := @this: proguard.classfile.util.InstructionSequenceMatcher;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = $i1 - 1073741824;

        if $i2 >= 0 goto label1;

        return $i1;

     label1:
        $r1 = r0.<proguard.classfile.util.InstructionSequenceMatcher: int[] matchedArguments>;

        $i1 = $r1[$i2];

        $i0 = $i1 - $i0;

        return $i0;
    }

    public int matchedConstantIndex(int)
    {
        int[] $r1;
        proguard.classfile.util.InstructionSequenceMatcher r0;
        int $i0, $i1;

        r0 := @this: proguard.classfile.util.InstructionSequenceMatcher;

        $i0 := @parameter0: int;

        $i1 = $i0 - 1073741824;

        if $i1 >= 0 goto label1;

        $r1 = r0.<proguard.classfile.util.InstructionSequenceMatcher: int[] matchedConstantIndices>;

        $i0 = $r1[$i0];

        return $i0;

     label1:
        $r1 = r0.<proguard.classfile.util.InstructionSequenceMatcher: int[] matchedArguments>;

        $i0 = $r1[$i1];

        return $i0;
    }

    public int matchedInstructionOffset(int)
    {
        int $i0;
        int[] $r1;
        proguard.classfile.util.InstructionSequenceMatcher r0;

        r0 := @this: proguard.classfile.util.InstructionSequenceMatcher;

        $i0 := @parameter0: int;

        $r1 = r0.<proguard.classfile.util.InstructionSequenceMatcher: int[] matchedInstructionOffsets>;

        $i0 = $r1[$i0];

        return $i0;
    }

    public int[] matchedJumpOffsets(int, int[])
    {
        int[] $r1, $r2;
        proguard.classfile.util.InstructionSequenceMatcher r0;
        int $i0, $i1, $i2;

        r0 := @this: proguard.classfile.util.InstructionSequenceMatcher;

        $i0 := @parameter0: int;

        $r1 := @parameter1: int[];

        $i2 = lengthof $r1;

        $r2 = newarray (int)[$i2];

        $i2 = 0;

     label1:
        $i1 = lengthof $r1;

        if $i2 >= $i1 goto label2;

        $i1 = $r1[$i2];

        $i1 = virtualinvoke r0.<proguard.classfile.util.InstructionSequenceMatcher: int matchedBranchOffset(int,int)>($i0, $i1);

        $r2[$i2] = $i1;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return $r2;
    }

    public void reset()
    {
        proguard.classfile.util.InstructionSequenceMatcher r0;

        r0 := @this: proguard.classfile.util.InstructionSequenceMatcher;

        r0.<proguard.classfile.util.InstructionSequenceMatcher: int patternInstructionIndex> = 0;

        r0.<proguard.classfile.util.InstructionSequenceMatcher: int matchedArgumentFlags> = 0;

        r0.<proguard.classfile.util.InstructionSequenceMatcher: long matchedConstantFlags> = 0L;

        return;
    }

    public void visitAnyRefConstant(proguard.classfile.Clazz, proguard.classfile.constant.RefConstant)
    {
        proguard.classfile.util.InstructionSequenceMatcher r0;
        proguard.classfile.constant.Constant $r3;
        proguard.classfile.constant.RefConstant $r2, $r4;
        proguard.classfile.Clazz $r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: proguard.classfile.util.InstructionSequenceMatcher;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.RefConstant;

        $r3 = r0.<proguard.classfile.util.InstructionSequenceMatcher: proguard.classfile.constant.Constant patternConstant>;

        $r4 = (proguard.classfile.constant.RefConstant) $r3;

        $i0 = virtualinvoke $r2.<proguard.classfile.constant.RefConstant: int getClassIndex()>();

        $i1 = virtualinvoke $r4.<proguard.classfile.constant.RefConstant: int getClassIndex()>();

        $z0 = specialinvoke r0.<proguard.classfile.util.InstructionSequenceMatcher: boolean matchingConstantIndices(proguard.classfile.Clazz,int,int)>($r1, $i0, $i1);

        if $z0 == 0 goto label2;

        $i0 = virtualinvoke $r2.<proguard.classfile.constant.RefConstant: int getNameAndTypeIndex()>();

        $i1 = virtualinvoke $r4.<proguard.classfile.constant.RefConstant: int getNameAndTypeIndex()>();

        $z0 = specialinvoke r0.<proguard.classfile.util.InstructionSequenceMatcher: boolean matchingConstantIndices(proguard.classfile.Clazz,int,int)>($r1, $i0, $i1);

        if $z0 == 0 goto label2;

        $z0 = 1;

     label1:
        r0.<proguard.classfile.util.InstructionSequenceMatcher: boolean matchingConstant> = $z0;

        return;

     label2:
        $z0 = 0;

        goto label1;
    }

    public void visitBranchInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.BranchInstruction)
    {
        proguard.classfile.util.InstructionSequenceMatcher r0;
        proguard.classfile.instruction.Instruction[] $r5;
        proguard.classfile.instruction.BranchInstruction $r4, $r7;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.instruction.Instruction $r6;
        int $i0, $i1, $i2;
        proguard.classfile.Method $r2;
        boolean $z0;

        r0 := @this: proguard.classfile.util.InstructionSequenceMatcher;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.BranchInstruction;

        $r5 = r0.<proguard.classfile.util.InstructionSequenceMatcher: proguard.classfile.instruction.Instruction[] patternInstructions>;

        $i1 = r0.<proguard.classfile.util.InstructionSequenceMatcher: int patternInstructionIndex>;

        $r6 = $r5[$i1];

        $z0 = specialinvoke r0.<proguard.classfile.util.InstructionSequenceMatcher: boolean matchingOpcodes(proguard.classfile.instruction.Instruction,proguard.classfile.instruction.Instruction)>($r4, $r6);

        if $z0 == 0 goto label2;

        $i1 = $r4.<proguard.classfile.instruction.BranchInstruction: int branchOffset>;

        $r7 = (proguard.classfile.instruction.BranchInstruction) $r6;

        $i2 = $r7.<proguard.classfile.instruction.BranchInstruction: int branchOffset>;

        $z0 = specialinvoke r0.<proguard.classfile.util.InstructionSequenceMatcher: boolean matchingBranchOffsets(int,int,int)>($i0, $i1, $i2);

        if $z0 == 0 goto label2;

        $z0 = 1;

     label1:
        specialinvoke r0.<proguard.classfile.util.InstructionSequenceMatcher: void checkMatch(boolean,proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction)>($z0, $r1, $r2, $r3, $i0, $r4);

        return;

     label2:
        $z0 = 0;

        goto label1;
    }

    public void visitClassConstant(proguard.classfile.Clazz, proguard.classfile.constant.ClassConstant)
    {
        proguard.classfile.constant.ClassConstant $r2, $r4;
        proguard.classfile.util.InstructionSequenceMatcher r0;
        proguard.classfile.constant.Constant $r3;
        proguard.classfile.Clazz $r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: proguard.classfile.util.InstructionSequenceMatcher;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.ClassConstant;

        $r3 = r0.<proguard.classfile.util.InstructionSequenceMatcher: proguard.classfile.constant.Constant patternConstant>;

        $r4 = (proguard.classfile.constant.ClassConstant) $r3;

        $i0 = $r2.<proguard.classfile.constant.ClassConstant: int u2nameIndex>;

        $i1 = $r4.<proguard.classfile.constant.ClassConstant: int u2nameIndex>;

        $z0 = specialinvoke r0.<proguard.classfile.util.InstructionSequenceMatcher: boolean matchingConstantIndices(proguard.classfile.Clazz,int,int)>($r1, $i0, $i1);

        r0.<proguard.classfile.util.InstructionSequenceMatcher: boolean matchingConstant> = $z0;

        return;
    }

    public void visitConstantInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.ConstantInstruction)
    {
        proguard.classfile.util.InstructionSequenceMatcher r0;
        proguard.classfile.instruction.Instruction[] $r5;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.instruction.Instruction $r6;
        int $i0, $i1, $i2;
        proguard.classfile.instruction.ConstantInstruction $r4, $r7;
        proguard.classfile.Method $r2;
        boolean $z0;

        r0 := @this: proguard.classfile.util.InstructionSequenceMatcher;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.ConstantInstruction;

        $r5 = r0.<proguard.classfile.util.InstructionSequenceMatcher: proguard.classfile.instruction.Instruction[] patternInstructions>;

        $i1 = r0.<proguard.classfile.util.InstructionSequenceMatcher: int patternInstructionIndex>;

        $r6 = $r5[$i1];

        $z0 = specialinvoke r0.<proguard.classfile.util.InstructionSequenceMatcher: boolean matchingOpcodes(proguard.classfile.instruction.Instruction,proguard.classfile.instruction.Instruction)>($r4, $r6);

        if $z0 == 0 goto label2;

        $i1 = $r4.<proguard.classfile.instruction.ConstantInstruction: int constantIndex>;

        $r7 = (proguard.classfile.instruction.ConstantInstruction) $r6;

        $i2 = $r7.<proguard.classfile.instruction.ConstantInstruction: int constantIndex>;

        $z0 = specialinvoke r0.<proguard.classfile.util.InstructionSequenceMatcher: boolean matchingConstantIndices(proguard.classfile.Clazz,int,int)>($r1, $i1, $i2);

        if $z0 == 0 goto label2;

        $i1 = $r4.<proguard.classfile.instruction.ConstantInstruction: int constant>;

        $r7 = (proguard.classfile.instruction.ConstantInstruction) $r6;

        $i2 = $r7.<proguard.classfile.instruction.ConstantInstruction: int constant>;

        $z0 = specialinvoke r0.<proguard.classfile.util.InstructionSequenceMatcher: boolean matchingArguments(int,int)>($i1, $i2);

        if $z0 == 0 goto label2;

        $z0 = 1;

     label1:
        specialinvoke r0.<proguard.classfile.util.InstructionSequenceMatcher: void checkMatch(boolean,proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction)>($z0, $r1, $r2, $r3, $i0, $r4);

        return;

     label2:
        $z0 = 0;

        goto label1;
    }

    public void visitDoubleConstant(proguard.classfile.Clazz, proguard.classfile.constant.DoubleConstant)
    {
        proguard.classfile.util.InstructionSequenceMatcher r0;
        proguard.classfile.constant.Constant $r3;
        proguard.classfile.constant.DoubleConstant $r2, $r4;
        byte $b0;
        proguard.classfile.Clazz $r1;
        double $d0, $d1;
        boolean $z0;

        r0 := @this: proguard.classfile.util.InstructionSequenceMatcher;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.DoubleConstant;

        $r3 = r0.<proguard.classfile.util.InstructionSequenceMatcher: proguard.classfile.constant.Constant patternConstant>;

        $r4 = (proguard.classfile.constant.DoubleConstant) $r3;

        $d0 = virtualinvoke $r2.<proguard.classfile.constant.DoubleConstant: double getValue()>();

        $d1 = virtualinvoke $r4.<proguard.classfile.constant.DoubleConstant: double getValue()>();

        $b0 = $d0 cmpl $d1;

        if $b0 != 0 goto label2;

        $z0 = 1;

     label1:
        r0.<proguard.classfile.util.InstructionSequenceMatcher: boolean matchingConstant> = $z0;

        return;

     label2:
        $z0 = 0;

        goto label1;
    }

    public void visitFloatConstant(proguard.classfile.Clazz, proguard.classfile.constant.FloatConstant)
    {
        proguard.classfile.constant.FloatConstant $r2, $r4;
        proguard.classfile.util.InstructionSequenceMatcher r0;
        proguard.classfile.constant.Constant $r3;
        byte $b0;
        proguard.classfile.Clazz $r1;
        float $f0, $f1;
        boolean $z0;

        r0 := @this: proguard.classfile.util.InstructionSequenceMatcher;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.FloatConstant;

        $r3 = r0.<proguard.classfile.util.InstructionSequenceMatcher: proguard.classfile.constant.Constant patternConstant>;

        $r4 = (proguard.classfile.constant.FloatConstant) $r3;

        $f0 = virtualinvoke $r2.<proguard.classfile.constant.FloatConstant: float getValue()>();

        $f1 = virtualinvoke $r4.<proguard.classfile.constant.FloatConstant: float getValue()>();

        $b0 = $f0 cmpl $f1;

        if $b0 != 0 goto label2;

        $z0 = 1;

     label1:
        r0.<proguard.classfile.util.InstructionSequenceMatcher: boolean matchingConstant> = $z0;

        return;

     label2:
        $z0 = 0;

        goto label1;
    }

    public void visitIntegerConstant(proguard.classfile.Clazz, proguard.classfile.constant.IntegerConstant)
    {
        proguard.classfile.constant.IntegerConstant $r2, $r4;
        proguard.classfile.util.InstructionSequenceMatcher r0;
        proguard.classfile.constant.Constant $r3;
        proguard.classfile.Clazz $r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: proguard.classfile.util.InstructionSequenceMatcher;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.IntegerConstant;

        $r3 = r0.<proguard.classfile.util.InstructionSequenceMatcher: proguard.classfile.constant.Constant patternConstant>;

        $r4 = (proguard.classfile.constant.IntegerConstant) $r3;

        $i0 = virtualinvoke $r2.<proguard.classfile.constant.IntegerConstant: int getValue()>();

        $i1 = virtualinvoke $r4.<proguard.classfile.constant.IntegerConstant: int getValue()>();

        if $i0 != $i1 goto label2;

        $z0 = 1;

     label1:
        r0.<proguard.classfile.util.InstructionSequenceMatcher: boolean matchingConstant> = $z0;

        return;

     label2:
        $z0 = 0;

        goto label1;
    }

    public void visitLongConstant(proguard.classfile.Clazz, proguard.classfile.constant.LongConstant)
    {
        proguard.classfile.constant.LongConstant $r2, $r4;
        proguard.classfile.util.InstructionSequenceMatcher r0;
        proguard.classfile.constant.Constant $r3;
        long $l0, $l1;
        byte $b2;
        proguard.classfile.Clazz $r1;
        boolean $z0;

        r0 := @this: proguard.classfile.util.InstructionSequenceMatcher;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.LongConstant;

        $r3 = r0.<proguard.classfile.util.InstructionSequenceMatcher: proguard.classfile.constant.Constant patternConstant>;

        $r4 = (proguard.classfile.constant.LongConstant) $r3;

        $l0 = virtualinvoke $r2.<proguard.classfile.constant.LongConstant: long getValue()>();

        $l1 = virtualinvoke $r4.<proguard.classfile.constant.LongConstant: long getValue()>();

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label2;

        $z0 = 1;

     label1:
        r0.<proguard.classfile.util.InstructionSequenceMatcher: boolean matchingConstant> = $z0;

        return;

     label2:
        $z0 = 0;

        goto label1;
    }

    public void visitLookUpSwitchInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.LookUpSwitchInstruction)
    {
        proguard.classfile.util.InstructionSequenceMatcher r0;
        proguard.classfile.instruction.Instruction[] $r5;
        proguard.classfile.instruction.LookUpSwitchInstruction $r4, $r7;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.instruction.Instruction $r6;
        int[] $r8, $r9;
        int $i0, $i1, $i2;
        proguard.classfile.Method $r2;
        boolean $z0;

        r0 := @this: proguard.classfile.util.InstructionSequenceMatcher;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.LookUpSwitchInstruction;

        $r5 = r0.<proguard.classfile.util.InstructionSequenceMatcher: proguard.classfile.instruction.Instruction[] patternInstructions>;

        $i1 = r0.<proguard.classfile.util.InstructionSequenceMatcher: int patternInstructionIndex>;

        $r6 = $r5[$i1];

        $z0 = specialinvoke r0.<proguard.classfile.util.InstructionSequenceMatcher: boolean matchingOpcodes(proguard.classfile.instruction.Instruction,proguard.classfile.instruction.Instruction)>($r4, $r6);

        if $z0 == 0 goto label2;

        $i1 = $r4.<proguard.classfile.instruction.LookUpSwitchInstruction: int defaultOffset>;

        $r7 = (proguard.classfile.instruction.LookUpSwitchInstruction) $r6;

        $i2 = $r7.<proguard.classfile.instruction.LookUpSwitchInstruction: int defaultOffset>;

        $z0 = specialinvoke r0.<proguard.classfile.util.InstructionSequenceMatcher: boolean matchingBranchOffsets(int,int,int)>($i0, $i1, $i2);

        if $z0 == 0 goto label2;

        $r8 = $r4.<proguard.classfile.instruction.LookUpSwitchInstruction: int[] cases>;

        $r7 = (proguard.classfile.instruction.LookUpSwitchInstruction) $r6;

        $r9 = $r7.<proguard.classfile.instruction.LookUpSwitchInstruction: int[] cases>;

        $z0 = specialinvoke r0.<proguard.classfile.util.InstructionSequenceMatcher: boolean matchingArguments(int[],int[])>($r8, $r9);

        if $z0 == 0 goto label2;

        $r8 = $r4.<proguard.classfile.instruction.LookUpSwitchInstruction: int[] jumpOffsets>;

        $r7 = (proguard.classfile.instruction.LookUpSwitchInstruction) $r6;

        $r9 = $r7.<proguard.classfile.instruction.LookUpSwitchInstruction: int[] jumpOffsets>;

        $z0 = specialinvoke r0.<proguard.classfile.util.InstructionSequenceMatcher: boolean matchingJumpOffsets(int,int[],int[])>($i0, $r8, $r9);

        if $z0 == 0 goto label2;

        $z0 = 1;

     label1:
        specialinvoke r0.<proguard.classfile.util.InstructionSequenceMatcher: void checkMatch(boolean,proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction)>($z0, $r1, $r2, $r3, $i0, $r4);

        return;

     label2:
        $z0 = 0;

        goto label1;
    }

    public void visitNameAndTypeConstant(proguard.classfile.Clazz, proguard.classfile.constant.NameAndTypeConstant)
    {
        proguard.classfile.util.InstructionSequenceMatcher r0;
        proguard.classfile.constant.Constant $r3;
        proguard.classfile.Clazz $r1;
        int $i0, $i1;
        proguard.classfile.constant.NameAndTypeConstant $r2, $r4;
        boolean $z0;

        r0 := @this: proguard.classfile.util.InstructionSequenceMatcher;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.NameAndTypeConstant;

        $r3 = r0.<proguard.classfile.util.InstructionSequenceMatcher: proguard.classfile.constant.Constant patternConstant>;

        $r4 = (proguard.classfile.constant.NameAndTypeConstant) $r3;

        $i1 = $r2.<proguard.classfile.constant.NameAndTypeConstant: int u2nameIndex>;

        $i0 = $r4.<proguard.classfile.constant.NameAndTypeConstant: int u2nameIndex>;

        $z0 = specialinvoke r0.<proguard.classfile.util.InstructionSequenceMatcher: boolean matchingConstantIndices(proguard.classfile.Clazz,int,int)>($r1, $i1, $i0);

        if $z0 == 0 goto label2;

        $i0 = $r2.<proguard.classfile.constant.NameAndTypeConstant: int u2descriptorIndex>;

        $i1 = $r4.<proguard.classfile.constant.NameAndTypeConstant: int u2descriptorIndex>;

        $z0 = specialinvoke r0.<proguard.classfile.util.InstructionSequenceMatcher: boolean matchingConstantIndices(proguard.classfile.Clazz,int,int)>($r1, $i0, $i1);

        if $z0 == 0 goto label2;

        $z0 = 1;

     label1:
        r0.<proguard.classfile.util.InstructionSequenceMatcher: boolean matchingConstant> = $z0;

        return;

     label2:
        $z0 = 0;

        goto label1;
    }

    public void visitSimpleInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.SimpleInstruction)
    {
        proguard.classfile.util.InstructionSequenceMatcher r0;
        proguard.classfile.instruction.Instruction[] $r5;
        proguard.classfile.instruction.SimpleInstruction $r4, $r7;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.instruction.Instruction $r6;
        int $i0, $i1, $i2;
        proguard.classfile.Method $r2;
        boolean $z0;

        r0 := @this: proguard.classfile.util.InstructionSequenceMatcher;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.SimpleInstruction;

        $r5 = r0.<proguard.classfile.util.InstructionSequenceMatcher: proguard.classfile.instruction.Instruction[] patternInstructions>;

        $i1 = r0.<proguard.classfile.util.InstructionSequenceMatcher: int patternInstructionIndex>;

        $r6 = $r5[$i1];

        $z0 = specialinvoke r0.<proguard.classfile.util.InstructionSequenceMatcher: boolean matchingOpcodes(proguard.classfile.instruction.Instruction,proguard.classfile.instruction.Instruction)>($r4, $r6);

        if $z0 == 0 goto label2;

        $i1 = $r4.<proguard.classfile.instruction.SimpleInstruction: int constant>;

        $r7 = (proguard.classfile.instruction.SimpleInstruction) $r6;

        $i2 = $r7.<proguard.classfile.instruction.SimpleInstruction: int constant>;

        $z0 = specialinvoke r0.<proguard.classfile.util.InstructionSequenceMatcher: boolean matchingArguments(int,int)>($i1, $i2);

        if $z0 == 0 goto label2;

        $z0 = 1;

     label1:
        specialinvoke r0.<proguard.classfile.util.InstructionSequenceMatcher: void checkMatch(boolean,proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction)>($z0, $r1, $r2, $r3, $i0, $r4);

        return;

     label2:
        $z0 = 0;

        goto label1;
    }

    public void visitStringConstant(proguard.classfile.Clazz, proguard.classfile.constant.StringConstant)
    {
        proguard.classfile.util.InstructionSequenceMatcher r0;
        proguard.classfile.constant.Constant $r3;
        proguard.classfile.Clazz $r1;
        proguard.classfile.constant.StringConstant $r2, $r4;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: proguard.classfile.util.InstructionSequenceMatcher;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.StringConstant;

        $r3 = r0.<proguard.classfile.util.InstructionSequenceMatcher: proguard.classfile.constant.Constant patternConstant>;

        $r4 = (proguard.classfile.constant.StringConstant) $r3;

        $i0 = $r2.<proguard.classfile.constant.StringConstant: int u2stringIndex>;

        $i1 = $r4.<proguard.classfile.constant.StringConstant: int u2stringIndex>;

        $z0 = specialinvoke r0.<proguard.classfile.util.InstructionSequenceMatcher: boolean matchingConstantIndices(proguard.classfile.Clazz,int,int)>($r1, $i0, $i1);

        r0.<proguard.classfile.util.InstructionSequenceMatcher: boolean matchingConstant> = $z0;

        return;
    }

    public void visitTableSwitchInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.TableSwitchInstruction)
    {
        proguard.classfile.util.InstructionSequenceMatcher r0;
        proguard.classfile.instruction.Instruction[] $r5;
        proguard.classfile.instruction.TableSwitchInstruction $r4, $r7;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.instruction.Instruction $r6;
        int[] $r8, $r9;
        int $i0, $i1, $i2;
        proguard.classfile.Method $r2;
        boolean $z0;

        r0 := @this: proguard.classfile.util.InstructionSequenceMatcher;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.TableSwitchInstruction;

        $r5 = r0.<proguard.classfile.util.InstructionSequenceMatcher: proguard.classfile.instruction.Instruction[] patternInstructions>;

        $i1 = r0.<proguard.classfile.util.InstructionSequenceMatcher: int patternInstructionIndex>;

        $r6 = $r5[$i1];

        $z0 = specialinvoke r0.<proguard.classfile.util.InstructionSequenceMatcher: boolean matchingOpcodes(proguard.classfile.instruction.Instruction,proguard.classfile.instruction.Instruction)>($r4, $r6);

        if $z0 == 0 goto label2;

        $i1 = $r4.<proguard.classfile.instruction.TableSwitchInstruction: int defaultOffset>;

        $r7 = (proguard.classfile.instruction.TableSwitchInstruction) $r6;

        $i2 = $r7.<proguard.classfile.instruction.TableSwitchInstruction: int defaultOffset>;

        $z0 = specialinvoke r0.<proguard.classfile.util.InstructionSequenceMatcher: boolean matchingBranchOffsets(int,int,int)>($i0, $i1, $i2);

        if $z0 == 0 goto label2;

        $i1 = $r4.<proguard.classfile.instruction.TableSwitchInstruction: int lowCase>;

        $r7 = (proguard.classfile.instruction.TableSwitchInstruction) $r6;

        $i2 = $r7.<proguard.classfile.instruction.TableSwitchInstruction: int lowCase>;

        $z0 = specialinvoke r0.<proguard.classfile.util.InstructionSequenceMatcher: boolean matchingArguments(int,int)>($i1, $i2);

        if $z0 == 0 goto label2;

        $i1 = $r4.<proguard.classfile.instruction.TableSwitchInstruction: int highCase>;

        $r7 = (proguard.classfile.instruction.TableSwitchInstruction) $r6;

        $i2 = $r7.<proguard.classfile.instruction.TableSwitchInstruction: int highCase>;

        $z0 = specialinvoke r0.<proguard.classfile.util.InstructionSequenceMatcher: boolean matchingArguments(int,int)>($i1, $i2);

        if $z0 == 0 goto label2;

        $r8 = $r4.<proguard.classfile.instruction.TableSwitchInstruction: int[] jumpOffsets>;

        $r7 = (proguard.classfile.instruction.TableSwitchInstruction) $r6;

        $r9 = $r7.<proguard.classfile.instruction.TableSwitchInstruction: int[] jumpOffsets>;

        $z0 = specialinvoke r0.<proguard.classfile.util.InstructionSequenceMatcher: boolean matchingJumpOffsets(int,int[],int[])>($i0, $r8, $r9);

        if $z0 == 0 goto label2;

        $z0 = 1;

     label1:
        specialinvoke r0.<proguard.classfile.util.InstructionSequenceMatcher: void checkMatch(boolean,proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction)>($z0, $r1, $r2, $r3, $i0, $r4);

        return;

     label2:
        $z0 = 0;

        goto label1;
    }

    public void visitUtf8Constant(proguard.classfile.Clazz, proguard.classfile.constant.Utf8Constant)
    {
        proguard.classfile.util.InstructionSequenceMatcher r0;
        proguard.classfile.constant.Constant $r3;
        proguard.classfile.Clazz $r1;
        java.lang.String $r5, $r6;
        proguard.classfile.constant.Utf8Constant $r2, $r4;
        boolean $z0;

        r0 := @this: proguard.classfile.util.InstructionSequenceMatcher;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.Utf8Constant;

        $r3 = r0.<proguard.classfile.util.InstructionSequenceMatcher: proguard.classfile.constant.Constant patternConstant>;

        $r4 = (proguard.classfile.constant.Utf8Constant) $r3;

        $r5 = virtualinvoke $r2.<proguard.classfile.constant.Utf8Constant: java.lang.String getString()>();

        $r6 = virtualinvoke $r4.<proguard.classfile.constant.Utf8Constant: java.lang.String getString()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        r0.<proguard.classfile.util.InstructionSequenceMatcher: boolean matchingConstant> = $z0;

        return;
    }

    public void visitVariableInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.VariableInstruction)
    {
        proguard.classfile.util.InstructionSequenceMatcher r0;
        proguard.classfile.instruction.Instruction[] $r5;
        proguard.classfile.instruction.VariableInstruction $r4, $r7;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.instruction.Instruction $r6;
        int $i0, $i1, $i2;
        proguard.classfile.Method $r2;
        boolean $z0;

        r0 := @this: proguard.classfile.util.InstructionSequenceMatcher;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.VariableInstruction;

        $r5 = r0.<proguard.classfile.util.InstructionSequenceMatcher: proguard.classfile.instruction.Instruction[] patternInstructions>;

        $i1 = r0.<proguard.classfile.util.InstructionSequenceMatcher: int patternInstructionIndex>;

        $r6 = $r5[$i1];

        $z0 = specialinvoke r0.<proguard.classfile.util.InstructionSequenceMatcher: boolean matchingOpcodes(proguard.classfile.instruction.Instruction,proguard.classfile.instruction.Instruction)>($r4, $r6);

        if $z0 == 0 goto label2;

        $i1 = $r4.<proguard.classfile.instruction.VariableInstruction: int variableIndex>;

        $r7 = (proguard.classfile.instruction.VariableInstruction) $r6;

        $i2 = $r7.<proguard.classfile.instruction.VariableInstruction: int variableIndex>;

        $z0 = specialinvoke r0.<proguard.classfile.util.InstructionSequenceMatcher: boolean matchingArguments(int,int)>($i1, $i2);

        if $z0 == 0 goto label2;

        $i1 = $r4.<proguard.classfile.instruction.VariableInstruction: int constant>;

        $r7 = (proguard.classfile.instruction.VariableInstruction) $r6;

        $i2 = $r7.<proguard.classfile.instruction.VariableInstruction: int constant>;

        $z0 = specialinvoke r0.<proguard.classfile.util.InstructionSequenceMatcher: boolean matchingArguments(int,int)>($i1, $i2);

        if $z0 == 0 goto label2;

        $z0 = 1;

     label1:
        specialinvoke r0.<proguard.classfile.util.InstructionSequenceMatcher: void checkMatch(boolean,proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction)>($z0, $r1, $r2, $r3, $i0, $r4);

        return;

     label2:
        $z0 = 0;

        goto label1;
    }

    public static void <clinit>()
    {
        <proguard.classfile.util.InstructionSequenceMatcher: int Z> = 1073741826;

        <proguard.classfile.util.InstructionSequenceMatcher: int Y> = 1073741825;

        <proguard.classfile.util.InstructionSequenceMatcher: int X> = 1073741824;

        <proguard.classfile.util.InstructionSequenceMatcher: boolean DEBUG_MORE> = 0;

        <proguard.classfile.util.InstructionSequenceMatcher: boolean DEBUG> = 0;

        <proguard.classfile.util.InstructionSequenceMatcher: int D> = 1073741830;

        <proguard.classfile.util.InstructionSequenceMatcher: int C> = 1073741829;

        <proguard.classfile.util.InstructionSequenceMatcher: int B> = 1073741828;

        <proguard.classfile.util.InstructionSequenceMatcher: int A> = 1073741827;

        return;
    }
}
