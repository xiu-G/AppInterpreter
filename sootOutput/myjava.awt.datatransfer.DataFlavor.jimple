public class myjava.awt.datatransfer.DataFlavor extends java.lang.Object implements java.io.Externalizable, java.lang.Cloneable
{
    public static final myjava.awt.datatransfer.DataFlavor javaFileListFlavor;
    public static final java.lang.String javaJVMLocalObjectMimeType;
    public static final java.lang.String javaRemoteObjectMimeType;
    public static final java.lang.String javaSerializedObjectMimeType;
    public static final myjava.awt.datatransfer.DataFlavor plainTextFlavor;
    private static myjava.awt.datatransfer.DataFlavor plainUnicodeFlavor;
    private static final long serialVersionUID;
    private static final java.lang.String[] sortedTextFlavors;
    public static final myjava.awt.datatransfer.DataFlavor stringFlavor;
    private java.lang.String humanPresentableName;
    private myjava.awt.datatransfer.MimeTypeProcessor$MimeType mimeInfo;
    private java.lang.Class representationClass;

    static void <clinit>()
    {
        java.lang.String[] $r1;
        myjava.awt.datatransfer.DataFlavor $r0;

        <myjava.awt.datatransfer.DataFlavor: long serialVersionUID> = 8367026044764648243L;

        <myjava.awt.datatransfer.DataFlavor: java.lang.String javaSerializedObjectMimeType> = "application/x-java-serialized-object";

        <myjava.awt.datatransfer.DataFlavor: java.lang.String javaRemoteObjectMimeType> = "application/x-java-remote-object";

        <myjava.awt.datatransfer.DataFlavor: java.lang.String javaJVMLocalObjectMimeType> = "application/x-java-jvm-local-objectref";

        $r0 = new myjava.awt.datatransfer.DataFlavor;

        specialinvoke $r0.<myjava.awt.datatransfer.DataFlavor: void <init>(java.lang.String,java.lang.String)>("text/plain; charset=unicode; class=java.io.InputStream", "Plain Text");

        <myjava.awt.datatransfer.DataFlavor: myjava.awt.datatransfer.DataFlavor plainTextFlavor> = $r0;

        $r0 = new myjava.awt.datatransfer.DataFlavor;

        specialinvoke $r0.<myjava.awt.datatransfer.DataFlavor: void <init>(java.lang.String,java.lang.String)>("application/x-java-serialized-object; class=java.lang.String", "Unicode String");

        <myjava.awt.datatransfer.DataFlavor: myjava.awt.datatransfer.DataFlavor stringFlavor> = $r0;

        $r0 = new myjava.awt.datatransfer.DataFlavor;

        specialinvoke $r0.<myjava.awt.datatransfer.DataFlavor: void <init>(java.lang.String,java.lang.String)>("application/x-java-file-list; class=java.util.List", "application/x-java-file-list");

        <myjava.awt.datatransfer.DataFlavor: myjava.awt.datatransfer.DataFlavor javaFileListFlavor> = $r0;

        $r1 = newarray (java.lang.String)[16];

        $r1[0] = "text/sgml";

        $r1[1] = "text/xml";

        $r1[2] = "text/html";

        $r1[3] = "text/rtf";

        $r1[4] = "text/enriched";

        $r1[5] = "text/richtext";

        $r1[6] = "text/uri-list";

        $r1[7] = "text/tab-separated-values";

        $r1[8] = "text/t140";

        $r1[9] = "text/rfc822-headers";

        $r1[10] = "text/parityfec";

        $r1[11] = "text/directory";

        $r1[12] = "text/css";

        $r1[13] = "text/calendar";

        $r1[14] = "application/x-java-serialized-object";

        $r1[15] = "text/plain";

        <myjava.awt.datatransfer.DataFlavor: java.lang.String[] sortedTextFlavors> = $r1;

        <myjava.awt.datatransfer.DataFlavor: myjava.awt.datatransfer.DataFlavor plainUnicodeFlavor> = null;

        return;
    }

    public void <init>()
    {
        myjava.awt.datatransfer.DataFlavor r0;

        r0 := @this: myjava.awt.datatransfer.DataFlavor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<myjava.awt.datatransfer.DataFlavor: myjava.awt.datatransfer.MimeTypeProcessor$MimeType mimeInfo> = null;

        r0.<myjava.awt.datatransfer.DataFlavor: java.lang.String humanPresentableName> = null;

        r0.<myjava.awt.datatransfer.DataFlavor: java.lang.Class representationClass> = null;

        return;
    }

    public void <init>(java.lang.Class, java.lang.String)
    {
        myjava.awt.datatransfer.MimeTypeProcessor$MimeType $r3;
        java.lang.Class r1;
        java.lang.String $r2;
        myjava.awt.datatransfer.DataFlavor r0;

        r0 := @this: myjava.awt.datatransfer.DataFlavor;

        r1 := @parameter0: java.lang.Class;

        $r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new myjava.awt.datatransfer.MimeTypeProcessor$MimeType;

        specialinvoke $r3.<myjava.awt.datatransfer.MimeTypeProcessor$MimeType: void <init>(java.lang.String,java.lang.String)>("application", "x-java-serialized-object");

        r0.<myjava.awt.datatransfer.DataFlavor: myjava.awt.datatransfer.MimeTypeProcessor$MimeType mimeInfo> = $r3;

        if $r2 == null goto label2;

        r0.<myjava.awt.datatransfer.DataFlavor: java.lang.String humanPresentableName> = $r2;

     label1:
        $r3 = r0.<myjava.awt.datatransfer.DataFlavor: myjava.awt.datatransfer.MimeTypeProcessor$MimeType mimeInfo>;

        $r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r3.<myjava.awt.datatransfer.MimeTypeProcessor$MimeType: void addParameter(java.lang.String,java.lang.String)>("class", $r2);

        r0.<myjava.awt.datatransfer.DataFlavor: java.lang.Class representationClass> = r1;

        return;

     label2:
        r0.<myjava.awt.datatransfer.DataFlavor: java.lang.String humanPresentableName> = "application/x-java-serialized-object";

        goto label1;
    }

    public void <init>(java.lang.String) throws java.lang.ClassNotFoundException
    {
        java.lang.String $r1;
        myjava.awt.datatransfer.DataFlavor r0;

        r0 := @this: myjava.awt.datatransfer.DataFlavor;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        specialinvoke r0.<myjava.awt.datatransfer.DataFlavor: void init(java.lang.String,java.lang.String,java.lang.ClassLoader)>($r1, null, null);

        return;
    }

    public void <init>(java.lang.String, java.lang.String)
    {
        myjava.awt.datatransfer.MimeTypeProcessor$MimeType $r5;
        java.lang.ClassNotFoundException r3;
        java.lang.String $r1, $r2;
        java.lang.IllegalArgumentException $r4;
        myjava.awt.datatransfer.DataFlavor r0;

        r0 := @this: myjava.awt.datatransfer.DataFlavor;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

     label1:
        specialinvoke r0.<myjava.awt.datatransfer.DataFlavor: void init(java.lang.String,java.lang.String,java.lang.ClassLoader)>($r1, $r2, null);

     label2:
        return;

     label3:
        r3 := @caughtexception;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = r0.<myjava.awt.datatransfer.DataFlavor: myjava.awt.datatransfer.MimeTypeProcessor$MimeType mimeInfo>;

        $r1 = virtualinvoke $r5.<myjava.awt.datatransfer.MimeTypeProcessor$MimeType: java.lang.String getParameter(java.lang.String)>("class");

        $r1 = staticinvoke <org.apache.harmony.awt.internal.nls.Messages: java.lang.String getString(java.lang.String,java.lang.Object)>("awt.16C", $r1);

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r1, r3);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    public void <init>(java.lang.String, java.lang.String, java.lang.ClassLoader) throws java.lang.ClassNotFoundException
    {
        java.lang.String $r1, $r2;
        java.lang.ClassLoader $r3;
        myjava.awt.datatransfer.DataFlavor r0;

        r0 := @this: myjava.awt.datatransfer.DataFlavor;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.ClassLoader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        specialinvoke r0.<myjava.awt.datatransfer.DataFlavor: void init(java.lang.String,java.lang.String,java.lang.ClassLoader)>($r1, $r2, $r3);

        return;
    }

    private static java.util.List fetchTextFlavors(java.util.List, java.lang.String)
    {
        java.util.Iterator $r3;
        myjava.awt.datatransfer.DataFlavor r5;
        myjava.awt.datatransfer.MimeTypeProcessor$MimeType $r6;
        java.util.List r0;
        java.lang.Object $r4;
        java.lang.String $r1, $r7;
        java.util.LinkedList r2;
        boolean $z0;

        r0 := @parameter0: java.util.List;

        $r1 := @parameter1: java.lang.String;

        r2 = new java.util.LinkedList;

        specialinvoke r2.<java.util.LinkedList: void <init>()>();

        $r3 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        $z0 = virtualinvoke r2.<java.util.LinkedList: boolean isEmpty()>();

        if $z0 == 0 goto label5;

        return null;

     label2:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (myjava.awt.datatransfer.DataFlavor) $r4;

        $z0 = virtualinvoke r5.<myjava.awt.datatransfer.DataFlavor: boolean isFlavorTextType()>();

        if $z0 == 0 goto label4;

        $r6 = r5.<myjava.awt.datatransfer.DataFlavor: myjava.awt.datatransfer.MimeTypeProcessor$MimeType mimeInfo>;

        $r7 = virtualinvoke $r6.<myjava.awt.datatransfer.MimeTypeProcessor$MimeType: java.lang.String getFullType()>();

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $z0 = virtualinvoke r2.<java.util.LinkedList: boolean contains(java.lang.Object)>(r5);

        if $z0 != 0 goto label3;

        virtualinvoke r2.<java.util.LinkedList: boolean add(java.lang.Object)>(r5);

     label3:
        interfaceinvoke $r3.<java.util.Iterator: void remove()>();

        goto label1;

     label4:
        interfaceinvoke $r3.<java.util.Iterator: void remove()>();

        goto label1;

     label5:
        return r2;
    }

    private java.lang.String getCharset()
    {
        myjava.awt.datatransfer.MimeTypeProcessor$MimeType $r1;
        int $i0;
        java.lang.String $r2;
        org.apache.harmony.awt.datatransfer.DTK $r3;
        myjava.awt.datatransfer.DataFlavor r0;
        boolean $z0;

        r0 := @this: myjava.awt.datatransfer.DataFlavor;

        $r1 = r0.<myjava.awt.datatransfer.DataFlavor: myjava.awt.datatransfer.MimeTypeProcessor$MimeType mimeInfo>;

        if $r1 == null goto label1;

        $z0 = specialinvoke r0.<myjava.awt.datatransfer.DataFlavor: boolean isCharsetRedundant()>();

        if $z0 == 0 goto label2;

     label1:
        return "";

     label2:
        $r1 = r0.<myjava.awt.datatransfer.DataFlavor: myjava.awt.datatransfer.MimeTypeProcessor$MimeType mimeInfo>;

        $r2 = virtualinvoke $r1.<myjava.awt.datatransfer.MimeTypeProcessor$MimeType: java.lang.String getParameter(java.lang.String)>("charset");

        $z0 = specialinvoke r0.<myjava.awt.datatransfer.DataFlavor: boolean isCharsetRequired()>();

        if $z0 == 0 goto label4;

        if $r2 == null goto label3;

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 != 0 goto label4;

     label3:
        $r3 = staticinvoke <org.apache.harmony.awt.datatransfer.DTK: org.apache.harmony.awt.datatransfer.DTK getDTK()>();

        $r2 = virtualinvoke $r3.<org.apache.harmony.awt.datatransfer.DTK: java.lang.String getDefaultCharset()>();

        return $r2;

     label4:
        if $r2 != null goto label5;

        return "";

     label5:
        return $r2;
    }

    private static java.util.List getFlavors(java.util.List, java.lang.Class)
    {
        java.util.Iterator $r3;
        myjava.awt.datatransfer.DataFlavor r5;
        java.util.List r0;
        java.lang.Class r1, $r6;
        java.lang.Object $r4;
        java.util.LinkedList r2;
        boolean $z0;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.lang.Class;

        r2 = new java.util.LinkedList;

        specialinvoke r2.<java.util.LinkedList: void <init>()>();

        $r3 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        $z0 = virtualinvoke r2.<java.util.LinkedList: boolean isEmpty()>();

        if $z0 == 0 goto label3;

        return null;

     label2:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (myjava.awt.datatransfer.DataFlavor) $r4;

        $r6 = r5.<myjava.awt.datatransfer.DataFlavor: java.lang.Class representationClass>;

        $z0 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        virtualinvoke r2.<java.util.LinkedList: boolean add(java.lang.Object)>(r5);

        goto label1;

     label3:
        return r0;
    }

    private static java.util.List getFlavors(java.util.List, java.lang.String[])
    {
        java.util.Iterator $r4;
        java.lang.String[] $r1;
        myjava.awt.datatransfer.DataFlavor r6;
        java.util.List r0;
        java.nio.charset.Charset $r7, $r8;
        int $i0, $i1;
        java.lang.Object $r5;
        java.lang.String r2;
        java.util.LinkedList r3;
        boolean $z0;

        r0 := @parameter0: java.util.List;

        $r1 := @parameter1: java.lang.String[];

        r3 = new java.util.LinkedList;

        specialinvoke r3.<java.util.LinkedList: void <init>()>();

        $r4 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        $z0 = virtualinvoke r3.<java.util.LinkedList: boolean isEmpty()>();

        if $z0 == 0 goto label6;

        return null;

     label2:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (myjava.awt.datatransfer.DataFlavor) $r5;

        r2 = specialinvoke r6.<myjava.awt.datatransfer.DataFlavor: java.lang.String getCharset()>();

        $z0 = staticinvoke <myjava.awt.datatransfer.DataFlavor: boolean isCharsetSupported(java.lang.String)>(r2);

        if $z0 == 0 goto label5;

        $i0 = lengthof $r1;

        $i1 = 0;

     label3:
        if $i1 >= $i0 goto label1;

        r2 = $r1[$i1];

        $r7 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>(r2);

        r2 = specialinvoke r6.<myjava.awt.datatransfer.DataFlavor: java.lang.String getCharset()>();

        $r8 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>(r2);

        $z0 = virtualinvoke $r7.<java.nio.charset.Charset: boolean equals(java.lang.Object)>($r8);

        if $z0 == 0 goto label4;

        virtualinvoke r3.<java.util.LinkedList: boolean add(java.lang.Object)>(r6);

     label4:
        $i1 = $i1 + 1;

        goto label3;

     label5:
        interfaceinvoke $r4.<java.util.Iterator: void remove()>();

        goto label1;

     label6:
        return r0;
    }

    private java.lang.String getKeyInfo()
    {
        myjava.awt.datatransfer.MimeTypeProcessor$MimeType $r2;
        java.lang.StringBuilder $r1;
        java.lang.Class $r4;
        java.lang.String $r3, $r5;
        myjava.awt.datatransfer.DataFlavor r0;
        boolean $z0;

        r0 := @this: myjava.awt.datatransfer.DataFlavor;

        $r1 = new java.lang.StringBuilder;

        $r2 = r0.<myjava.awt.datatransfer.DataFlavor: myjava.awt.datatransfer.MimeTypeProcessor$MimeType mimeInfo>;

        $r3 = virtualinvoke $r2.<myjava.awt.datatransfer.MimeTypeProcessor$MimeType: java.lang.String getFullType()>();

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";class=");

        $r4 = r0.<myjava.awt.datatransfer.DataFlavor: java.lang.Class representationClass>;

        $r3 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r2 = r0.<myjava.awt.datatransfer.DataFlavor: myjava.awt.datatransfer.MimeTypeProcessor$MimeType mimeInfo>;

        $r5 = virtualinvoke $r2.<myjava.awt.datatransfer.MimeTypeProcessor$MimeType: java.lang.String getPrimaryType()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("text");

        if $z0 == 0 goto label1;

        $z0 = specialinvoke r0.<myjava.awt.datatransfer.DataFlavor: boolean isUnicodeFlavor()>();

        if $z0 == 0 goto label2;

     label1:
        return $r3;

     label2:
        $r1 = new java.lang.StringBuilder;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";charset=");

        $r3 = specialinvoke r0.<myjava.awt.datatransfer.DataFlavor: java.lang.String getCharset()>();

        $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String toLowerCase()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static final myjava.awt.datatransfer.DataFlavor getTextPlainUnicodeFlavor()
    {
        java.lang.StringBuilder $r1;
        java.lang.String $r3;
        org.apache.harmony.awt.datatransfer.DTK $r2;
        myjava.awt.datatransfer.DataFlavor $r0;

        $r0 = <myjava.awt.datatransfer.DataFlavor: myjava.awt.datatransfer.DataFlavor plainUnicodeFlavor>;

        if $r0 != null goto label1;

        $r0 = new myjava.awt.datatransfer.DataFlavor;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("text/plain; charset=");

        $r2 = staticinvoke <org.apache.harmony.awt.datatransfer.DTK: org.apache.harmony.awt.datatransfer.DTK getDTK()>();

        $r3 = virtualinvoke $r2.<org.apache.harmony.awt.datatransfer.DTK: java.lang.String getDefaultCharset()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; class=java.io.InputStream");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<myjava.awt.datatransfer.DataFlavor: void <init>(java.lang.String,java.lang.String)>($r3, "Plain Text");

        <myjava.awt.datatransfer.DataFlavor: myjava.awt.datatransfer.DataFlavor plainUnicodeFlavor> = $r0;

     label1:
        $r0 = <myjava.awt.datatransfer.DataFlavor: myjava.awt.datatransfer.DataFlavor plainUnicodeFlavor>;

        return $r0;
    }

    private void init(java.lang.String, java.lang.String, java.lang.ClassLoader) throws java.lang.ClassNotFoundException
    {
        java.lang.Throwable $r6;
        java.lang.IllegalArgumentException $r7;
        myjava.awt.datatransfer.DataFlavor r0;
        myjava.awt.datatransfer.MimeTypeProcessor$MimeType $r4;
        java.lang.Class $r5;
        java.lang.StringBuilder $r8;
        java.lang.String $r1, $r2;
        java.lang.ClassLoader $r3;

        r0 := @this: myjava.awt.datatransfer.DataFlavor;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.ClassLoader;

     label1:
        $r4 = staticinvoke <myjava.awt.datatransfer.MimeTypeProcessor: myjava.awt.datatransfer.MimeTypeProcessor$MimeType parse(java.lang.String)>($r1);

     label2:
        r0.<myjava.awt.datatransfer.DataFlavor: myjava.awt.datatransfer.MimeTypeProcessor$MimeType mimeInfo> = $r4;

        if $r2 == null goto label7;

        r0.<myjava.awt.datatransfer.DataFlavor: java.lang.String humanPresentableName> = $r2;

     label3:
        $r4 = r0.<myjava.awt.datatransfer.DataFlavor: myjava.awt.datatransfer.MimeTypeProcessor$MimeType mimeInfo>;

        $r1 = virtualinvoke $r4.<myjava.awt.datatransfer.MimeTypeProcessor$MimeType: java.lang.String getParameter(java.lang.String)>("class");

        $r2 = $r1;

        if $r1 != null goto label4;

        $r2 = "java.io.InputStream";

        $r4 = r0.<myjava.awt.datatransfer.DataFlavor: myjava.awt.datatransfer.MimeTypeProcessor$MimeType mimeInfo>;

        virtualinvoke $r4.<myjava.awt.datatransfer.MimeTypeProcessor$MimeType: void addParameter(java.lang.String,java.lang.String)>("class", "java.io.InputStream");

     label4:
        if $r3 != null goto label8;

        $r5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r2);

     label5:
        r0.<myjava.awt.datatransfer.DataFlavor: java.lang.Class representationClass> = $r5;

        return;

     label6:
        $r6 := @caughtexception;

        $r7 = new java.lang.IllegalArgumentException;

        $r1 = staticinvoke <org.apache.harmony.awt.internal.nls.Messages: java.lang.String getString(java.lang.String,java.lang.Object)>("awt.16D", $r1);

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r7;

     label7:
        $r8 = new java.lang.StringBuilder;

        $r4 = r0.<myjava.awt.datatransfer.DataFlavor: myjava.awt.datatransfer.MimeTypeProcessor$MimeType mimeInfo>;

        $r1 = virtualinvoke $r4.<myjava.awt.datatransfer.MimeTypeProcessor$MimeType: java.lang.String getPrimaryType()>();

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>($r1);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

        $r4 = r0.<myjava.awt.datatransfer.DataFlavor: myjava.awt.datatransfer.MimeTypeProcessor$MimeType mimeInfo>;

        $r1 = virtualinvoke $r4.<myjava.awt.datatransfer.MimeTypeProcessor$MimeType: java.lang.String getSubType()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<myjava.awt.datatransfer.DataFlavor: java.lang.String humanPresentableName> = $r1;

        goto label3;

     label8:
        $r5 = virtualinvoke $r3.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>($r2);

        goto label5;

        catch java.lang.IllegalArgumentException from label1 to label2 with label6;
    }

    private boolean isByteCodeFlavor()
    {
        java.lang.Class $r1;
        myjava.awt.datatransfer.DataFlavor r0;
        boolean $z0;

        r0 := @this: myjava.awt.datatransfer.DataFlavor;

        $r1 = r0.<myjava.awt.datatransfer.DataFlavor: java.lang.Class representationClass>;

        if $r1 == null goto label2;

        $r1 = r0.<myjava.awt.datatransfer.DataFlavor: java.lang.Class representationClass>;

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/io/InputStream;");

        if $z0 != 0 goto label1;

        $r1 = r0.<myjava.awt.datatransfer.DataFlavor: java.lang.Class representationClass>;

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/nio/ByteBuffer;");

        if $z0 != 0 goto label1;

        $r1 = r0.<myjava.awt.datatransfer.DataFlavor: java.lang.Class representationClass>;

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "[B");

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    private boolean isCharsetRedundant()
    {
        myjava.awt.datatransfer.MimeTypeProcessor$MimeType $r1;
        java.lang.String $r2;
        myjava.awt.datatransfer.DataFlavor r0;
        boolean $z0;

        r0 := @this: myjava.awt.datatransfer.DataFlavor;

        $r1 = r0.<myjava.awt.datatransfer.DataFlavor: myjava.awt.datatransfer.MimeTypeProcessor$MimeType mimeInfo>;

        $r2 = virtualinvoke $r1.<myjava.awt.datatransfer.MimeTypeProcessor$MimeType: java.lang.String getFullType()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("text/rtf");

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("text/tab-separated-values");

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("text/t140");

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("text/rfc822-headers");

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("text/parityfec");

        if $z0 != 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    private boolean isCharsetRequired()
    {
        myjava.awt.datatransfer.MimeTypeProcessor$MimeType $r1;
        java.lang.String $r2;
        myjava.awt.datatransfer.DataFlavor r0;
        boolean $z0;

        r0 := @this: myjava.awt.datatransfer.DataFlavor;

        $r1 = r0.<myjava.awt.datatransfer.DataFlavor: myjava.awt.datatransfer.MimeTypeProcessor$MimeType mimeInfo>;

        $r2 = virtualinvoke $r1.<myjava.awt.datatransfer.MimeTypeProcessor$MimeType: java.lang.String getFullType()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("text/sgml");

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("text/xml");

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("text/html");

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("text/enriched");

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("text/richtext");

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("text/uri-list");

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("text/directory");

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("text/css");

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("text/calendar");

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("application/x-java-serialized-object");

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("text/plain");

        if $z0 != 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    private static boolean isCharsetSupported(java.lang.String)
    {
        java.lang.Throwable r1;
        java.lang.String $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

     label1:
        $z0 = staticinvoke <java.nio.charset.Charset: boolean isSupported(java.lang.String)>($r0);

     label2:
        return $z0;

     label3:
        r1 := @caughtexception;

        return 0;

        catch java.nio.charset.IllegalCharsetNameException from label1 to label2 with label3;
    }

    private boolean isUnicodeFlavor()
    {
        java.lang.Class $r1;
        myjava.awt.datatransfer.DataFlavor r0;
        boolean $z0;

        r0 := @this: myjava.awt.datatransfer.DataFlavor;

        $r1 = r0.<myjava.awt.datatransfer.DataFlavor: java.lang.Class representationClass>;

        if $r1 == null goto label2;

        $r1 = r0.<myjava.awt.datatransfer.DataFlavor: java.lang.Class representationClass>;

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/io/Reader;");

        if $z0 != 0 goto label1;

        $r1 = r0.<myjava.awt.datatransfer.DataFlavor: java.lang.Class representationClass>;

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/String;");

        if $z0 != 0 goto label1;

        $r1 = r0.<myjava.awt.datatransfer.DataFlavor: java.lang.Class representationClass>;

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/nio/CharBuffer;");

        if $z0 != 0 goto label1;

        $r1 = r0.<myjava.awt.datatransfer.DataFlavor: java.lang.Class representationClass>;

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "[C");

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    private static java.util.List selectBestByAlphabet(java.util.List)
    {
        java.util.Iterator $r4;
        java.lang.String[] r2;
        myjava.awt.datatransfer.DataFlavor $r6;
        java.util.List r0;
        int $i0, $i1;
        java.lang.Object $r5;
        java.lang.String $r7, $r8;
        java.util.LinkedList r1;
        java.util.Comparator $r3;
        boolean $z0;

        r0 := @parameter0: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        r2 = newarray (java.lang.String)[$i0];

        r1 = new java.util.LinkedList;

        specialinvoke r1.<java.util.LinkedList: void <init>()>();

        $i0 = 0;

     label1:
        $i1 = lengthof r2;

        if $i0 < $i1 goto label3;

        $r3 = <java.lang.String: java.util.Comparator CASE_INSENSITIVE_ORDER>;

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>(r2, $r3);

        $r4 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label4;

        $z0 = virtualinvoke r1.<java.util.LinkedList: boolean isEmpty()>();

        if $z0 == 0 goto label5;

        return null;

     label3:
        $r5 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>($i0);

        $r6 = (myjava.awt.datatransfer.DataFlavor) $r5;

        $r7 = specialinvoke $r6.<myjava.awt.datatransfer.DataFlavor: java.lang.String getCharset()>();

        r2[$i0] = $r7;

        $i0 = $i0 + 1;

        goto label1;

     label4:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (myjava.awt.datatransfer.DataFlavor) $r5;

        $r7 = r2[0];

        $r8 = specialinvoke $r6.<myjava.awt.datatransfer.DataFlavor: java.lang.String getCharset()>();

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r8);

        if $z0 == 0 goto label2;

        virtualinvoke r1.<java.util.LinkedList: boolean add(java.lang.Object)>($r6);

        goto label2;

     label5:
        return r1;
    }

    private static myjava.awt.datatransfer.DataFlavor selectBestByCharset(java.util.List)
    {
        java.lang.String[] $r1;
        myjava.awt.datatransfer.DataFlavor r7;
        java.util.List r0, $r2, r3;
        int $i0;
        java.lang.Object $r6;
        java.lang.String $r5;
        org.apache.harmony.awt.datatransfer.DTK $r4;

        r0 := @parameter0: java.util.List;

        $r1 = newarray (java.lang.String)[4];

        $r1[0] = "UTF-16";

        $r1[1] = "UTF-8";

        $r1[2] = "UTF-16BE";

        $r1[3] = "UTF-16LE";

        $r2 = staticinvoke <myjava.awt.datatransfer.DataFlavor: java.util.List getFlavors(java.util.List,java.lang.String[])>(r0, $r1);

        r3 = $r2;

        if $r2 != null goto label1;

        $r1 = newarray (java.lang.String)[1];

        $r4 = staticinvoke <org.apache.harmony.awt.datatransfer.DTK: org.apache.harmony.awt.datatransfer.DTK getDTK()>();

        $r5 = virtualinvoke $r4.<org.apache.harmony.awt.datatransfer.DTK: java.lang.String getDefaultCharset()>();

        $r1[0] = $r5;

        $r2 = staticinvoke <myjava.awt.datatransfer.DataFlavor: java.util.List getFlavors(java.util.List,java.lang.String[])>(r0, $r1);

        r3 = $r2;

        if $r2 != null goto label1;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = "US-ASCII";

        $r2 = staticinvoke <myjava.awt.datatransfer.DataFlavor: java.util.List getFlavors(java.util.List,java.lang.String[])>(r0, $r1);

        r3 = $r2;

        if $r2 != null goto label1;

        r3 = staticinvoke <myjava.awt.datatransfer.DataFlavor: java.util.List selectBestByAlphabet(java.util.List)>(r0);

     label1:
        if r3 == null goto label3;

        $i0 = interfaceinvoke r3.<java.util.List: int size()>();

        if $i0 != 1 goto label2;

        $r6 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(0);

        r7 = (myjava.awt.datatransfer.DataFlavor) $r6;

        return r7;

     label2:
        r7 = staticinvoke <myjava.awt.datatransfer.DataFlavor: myjava.awt.datatransfer.DataFlavor selectBestFlavorWOCharset(java.util.List)>(r3);

        return r7;

     label3:
        return null;
    }

    private static myjava.awt.datatransfer.DataFlavor selectBestFlavorWCharset(java.util.List)
    {
        java.util.List r0, $r1;
        java.lang.Object $r2;
        myjava.awt.datatransfer.DataFlavor r3;

        r0 := @parameter0: java.util.List;

        $r1 = staticinvoke <myjava.awt.datatransfer.DataFlavor: java.util.List getFlavors(java.util.List,java.lang.Class)>(r0, class "Ljava/io/Reader;");

        if $r1 == null goto label1;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        r3 = (myjava.awt.datatransfer.DataFlavor) $r2;

        return r3;

     label1:
        $r1 = staticinvoke <myjava.awt.datatransfer.DataFlavor: java.util.List getFlavors(java.util.List,java.lang.Class)>(r0, class "Ljava/lang/String;");

        if $r1 == null goto label2;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        r3 = (myjava.awt.datatransfer.DataFlavor) $r2;

        return r3;

     label2:
        $r1 = staticinvoke <myjava.awt.datatransfer.DataFlavor: java.util.List getFlavors(java.util.List,java.lang.Class)>(r0, class "Ljava/nio/CharBuffer;");

        if $r1 == null goto label3;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        r3 = (myjava.awt.datatransfer.DataFlavor) $r2;

        return r3;

     label3:
        $r1 = staticinvoke <myjava.awt.datatransfer.DataFlavor: java.util.List getFlavors(java.util.List,java.lang.Class)>(r0, class "[C");

        if $r1 == null goto label4;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        r3 = (myjava.awt.datatransfer.DataFlavor) $r2;

        return r3;

     label4:
        r3 = staticinvoke <myjava.awt.datatransfer.DataFlavor: myjava.awt.datatransfer.DataFlavor selectBestByCharset(java.util.List)>(r0);

        return r3;
    }

    private static myjava.awt.datatransfer.DataFlavor selectBestFlavorWOCharset(java.util.List)
    {
        java.util.List r0, $r1;
        java.lang.Object $r2;
        myjava.awt.datatransfer.DataFlavor r3;

        r0 := @parameter0: java.util.List;

        $r1 = staticinvoke <myjava.awt.datatransfer.DataFlavor: java.util.List getFlavors(java.util.List,java.lang.Class)>(r0, class "Ljava/io/InputStream;");

        if $r1 == null goto label1;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        r3 = (myjava.awt.datatransfer.DataFlavor) $r2;

        return r3;

     label1:
        $r1 = staticinvoke <myjava.awt.datatransfer.DataFlavor: java.util.List getFlavors(java.util.List,java.lang.Class)>(r0, class "Ljava/nio/ByteBuffer;");

        if $r1 == null goto label2;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        r3 = (myjava.awt.datatransfer.DataFlavor) $r2;

        return r3;

     label2:
        $r1 = staticinvoke <myjava.awt.datatransfer.DataFlavor: java.util.List getFlavors(java.util.List,java.lang.Class)>(r0, class "[B");

        if $r1 == null goto label3;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        r3 = (myjava.awt.datatransfer.DataFlavor) $r2;

        return r3;

     label3:
        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        r3 = (myjava.awt.datatransfer.DataFlavor) $r2;

        return r3;
    }

    public static final myjava.awt.datatransfer.DataFlavor selectBestTextFlavor(myjava.awt.datatransfer.DataFlavor[])
    {
        myjava.awt.datatransfer.DataFlavor r4;
        java.util.List $r2;
        int $i0;
        java.lang.Object $r3;
        java.lang.String $r5;
        java.util.LinkedList $r1;
        myjava.awt.datatransfer.DataFlavor[] r0;
        boolean $z0;

        r0 := @parameter0: myjava.awt.datatransfer.DataFlavor[];

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new java.util.LinkedList;

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r0);

        specialinvoke $r1.<java.util.LinkedList: void <init>(java.util.Collection)>($r2);

        $r2 = staticinvoke <myjava.awt.datatransfer.DataFlavor: java.util.List sortTextFlavorsByType(java.util.List)>($r1);

        $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        return null;

     label2:
        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(0);

        $r2 = (java.util.List) $r3;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 != 1 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(0);

        r4 = (myjava.awt.datatransfer.DataFlavor) $r3;

        return r4;

     label3:
        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(0);

        r4 = (myjava.awt.datatransfer.DataFlavor) $r3;

        $r5 = specialinvoke r4.<myjava.awt.datatransfer.DataFlavor: java.lang.String getCharset()>();

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i0 != 0 goto label4;

        r4 = staticinvoke <myjava.awt.datatransfer.DataFlavor: myjava.awt.datatransfer.DataFlavor selectBestFlavorWOCharset(java.util.List)>($r2);

        return r4;

     label4:
        r4 = staticinvoke <myjava.awt.datatransfer.DataFlavor: myjava.awt.datatransfer.DataFlavor selectBestFlavorWCharset(java.util.List)>($r2);

        return r4;
    }

    private static java.util.List sortTextFlavorsByType(java.util.List)
    {
        java.lang.String[] $r3;
        java.util.List r0, $r4;
        int $i0, $i1;
        java.lang.String r1;
        java.util.LinkedList r2;
        boolean $z0;

        r0 := @parameter0: java.util.List;

        r2 = new java.util.LinkedList;

        specialinvoke r2.<java.util.LinkedList: void <init>()>();

        $r3 = <myjava.awt.datatransfer.DataFlavor: java.lang.String[] sortedTextFlavors>;

        $i0 = lengthof $r3;

        $i1 = 0;

     label1:
        if $i1 < $i0 goto label2;

        $z0 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label4;

        virtualinvoke r2.<java.util.LinkedList: void addLast(java.lang.Object)>(r0);

        return r2;

     label2:
        r1 = $r3[$i1];

        $r4 = staticinvoke <myjava.awt.datatransfer.DataFlavor: java.util.List fetchTextFlavors(java.util.List,java.lang.String)>(r0, r1);

        if $r4 == null goto label3;

        virtualinvoke r2.<java.util.LinkedList: void addLast(java.lang.Object)>($r4);

     label3:
        $i1 = $i1 + 1;

        goto label1;

     label4:
        return r2;
    }

    protected static final java.lang.Class tryToLoadClass(java.lang.String, java.lang.ClassLoader) throws java.lang.ClassNotFoundException
    {
        java.lang.Thread $r6;
        java.lang.ClassNotFoundException r2, $r5, $r7;
        java.lang.Class $r3;
        java.lang.String $r0;
        java.lang.ClassLoader $r1, $r4;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.ClassLoader;

     label01:
        $r3 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r0);

     label02:
        return $r3;

     label03:
        r2 := @caughtexception;

     label04:
        $r4 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

        $r3 = virtualinvoke $r4.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>($r0);

     label05:
        return $r3;

     label06:
        $r5 := @caughtexception;

        $r6 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r4 = virtualinvoke $r6.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        if $r4 == null goto label10;

     label07:
        $r3 = virtualinvoke $r4.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>($r0);

     label08:
        return $r3;

     label09:
        $r7 := @caughtexception;

     label10:
        $r3 = virtualinvoke $r1.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>($r0);

        return $r3;

        catch java.lang.ClassNotFoundException from label01 to label02 with label03;
        catch java.lang.ClassNotFoundException from label04 to label05 with label06;
        catch java.lang.ClassNotFoundException from label07 to label08 with label09;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        myjava.awt.datatransfer.MimeTypeProcessor$MimeType $r5;
        java.lang.Object $r1;
        java.lang.Class $r4;
        java.lang.String $r3;
        myjava.awt.datatransfer.DataFlavor r0, r2;

        r2 := @this: myjava.awt.datatransfer.DataFlavor;

        r0 = new myjava.awt.datatransfer.DataFlavor;

        specialinvoke r0.<myjava.awt.datatransfer.DataFlavor: void <init>()>();

        $r3 = r2.<myjava.awt.datatransfer.DataFlavor: java.lang.String humanPresentableName>;

        r0.<myjava.awt.datatransfer.DataFlavor: java.lang.String humanPresentableName> = $r3;

        $r4 = r2.<myjava.awt.datatransfer.DataFlavor: java.lang.Class representationClass>;

        r0.<myjava.awt.datatransfer.DataFlavor: java.lang.Class representationClass> = $r4;

        $r5 = r2.<myjava.awt.datatransfer.DataFlavor: myjava.awt.datatransfer.MimeTypeProcessor$MimeType mimeInfo>;

        if $r5 == null goto label2;

        $r5 = r2.<myjava.awt.datatransfer.DataFlavor: myjava.awt.datatransfer.MimeTypeProcessor$MimeType mimeInfo>;

        $r1 = virtualinvoke $r5.<myjava.awt.datatransfer.MimeTypeProcessor$MimeType: java.lang.Object clone()>();

        $r5 = (myjava.awt.datatransfer.MimeTypeProcessor$MimeType) $r1;

     label1:
        r0.<myjava.awt.datatransfer.DataFlavor: myjava.awt.datatransfer.MimeTypeProcessor$MimeType mimeInfo> = $r5;

        return r0;

     label2:
        $r5 = null;

        goto label1;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object r1;
        myjava.awt.datatransfer.DataFlavor r0, r2;
        boolean $z0;

        r0 := @this: myjava.awt.datatransfer.DataFlavor;

        r1 := @parameter0: java.lang.Object;

        if r1 == null goto label1;

        $z0 = r1 instanceof myjava.awt.datatransfer.DataFlavor;

        if $z0 != 0 goto label2;

     label1:
        return 0;

     label2:
        r2 = (myjava.awt.datatransfer.DataFlavor) r1;

        $z0 = virtualinvoke r0.<myjava.awt.datatransfer.DataFlavor: boolean equals(myjava.awt.datatransfer.DataFlavor)>(r2);

        return $z0;
    }

    public boolean equals(java.lang.String)
    {
        java.lang.String $r1;
        myjava.awt.datatransfer.DataFlavor r0;
        boolean $z0;

        r0 := @this: myjava.awt.datatransfer.DataFlavor;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke r0.<myjava.awt.datatransfer.DataFlavor: boolean isMimeTypeEqual(java.lang.String)>($r1);

        return $z0;
    }

    public boolean equals(myjava.awt.datatransfer.DataFlavor)
    {
        myjava.awt.datatransfer.DataFlavor r0, $r1;
        myjava.awt.datatransfer.MimeTypeProcessor$MimeType $r2, $r3;
        java.nio.charset.Charset $r8, $r9;
        java.lang.Class $r4, $r5;
        java.lang.String $r6, $r7;
        boolean $z0;

        r0 := @this: myjava.awt.datatransfer.DataFlavor;

        $r1 := @parameter0: myjava.awt.datatransfer.DataFlavor;

        if $r1 != r0 goto label01;

        return 1;

     label01:
        if $r1 != null goto label02;

        return 0;

     label02:
        $r2 = r0.<myjava.awt.datatransfer.DataFlavor: myjava.awt.datatransfer.MimeTypeProcessor$MimeType mimeInfo>;

        if $r2 != null goto label04;

        $r2 = $r1.<myjava.awt.datatransfer.DataFlavor: myjava.awt.datatransfer.MimeTypeProcessor$MimeType mimeInfo>;

        if $r2 != null goto label03;

        return 1;

     label03:
        return 0;

     label04:
        $r2 = r0.<myjava.awt.datatransfer.DataFlavor: myjava.awt.datatransfer.MimeTypeProcessor$MimeType mimeInfo>;

        $r3 = $r1.<myjava.awt.datatransfer.DataFlavor: myjava.awt.datatransfer.MimeTypeProcessor$MimeType mimeInfo>;

        $z0 = virtualinvoke $r2.<myjava.awt.datatransfer.MimeTypeProcessor$MimeType: boolean equals(myjava.awt.datatransfer.MimeTypeProcessor$MimeType)>($r3);

        if $z0 == 0 goto label05;

        $r4 = r0.<myjava.awt.datatransfer.DataFlavor: java.lang.Class representationClass>;

        $r5 = $r1.<myjava.awt.datatransfer.DataFlavor: java.lang.Class representationClass>;

        $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label06;

     label05:
        return 0;

     label06:
        $r2 = r0.<myjava.awt.datatransfer.DataFlavor: myjava.awt.datatransfer.MimeTypeProcessor$MimeType mimeInfo>;

        $r6 = virtualinvoke $r2.<myjava.awt.datatransfer.MimeTypeProcessor$MimeType: java.lang.String getPrimaryType()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("text");

        if $z0 == 0 goto label07;

        $z0 = specialinvoke r0.<myjava.awt.datatransfer.DataFlavor: boolean isUnicodeFlavor()>();

        if $z0 == 0 goto label08;

     label07:
        return 1;

     label08:
        $r6 = specialinvoke r0.<myjava.awt.datatransfer.DataFlavor: java.lang.String getCharset()>();

        $r7 = specialinvoke $r1.<myjava.awt.datatransfer.DataFlavor: java.lang.String getCharset()>();

        $z0 = staticinvoke <myjava.awt.datatransfer.DataFlavor: boolean isCharsetSupported(java.lang.String)>($r6);

        if $z0 == 0 goto label09;

        $z0 = staticinvoke <myjava.awt.datatransfer.DataFlavor: boolean isCharsetSupported(java.lang.String)>($r7);

        if $z0 != 0 goto label10;

     label09:
        $z0 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r7);

        return $z0;

     label10:
        $r8 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>($r6);

        $r9 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>($r7);

        $z0 = virtualinvoke $r8.<java.nio.charset.Charset: boolean equals(java.lang.Object)>($r9);

        return $z0;
    }

    public final java.lang.Class getDefaultRepresentationClass()
    {
        myjava.awt.datatransfer.DataFlavor r0;

        r0 := @this: myjava.awt.datatransfer.DataFlavor;

        return class "Ljava/io/InputStream;";
    }

    public final java.lang.String getDefaultRepresentationClassAsString()
    {
        java.lang.Class $r1;
        java.lang.String $r2;
        myjava.awt.datatransfer.DataFlavor r0;

        r0 := @this: myjava.awt.datatransfer.DataFlavor;

        $r1 = virtualinvoke r0.<myjava.awt.datatransfer.DataFlavor: java.lang.Class getDefaultRepresentationClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        return $r2;
    }

    public java.lang.String getHumanPresentableName()
    {
        java.lang.String r1;
        myjava.awt.datatransfer.DataFlavor r0;

        r0 := @this: myjava.awt.datatransfer.DataFlavor;

        r1 = r0.<myjava.awt.datatransfer.DataFlavor: java.lang.String humanPresentableName>;

        return r1;
    }

    myjava.awt.datatransfer.MimeTypeProcessor$MimeType getMimeInfo()
    {
        myjava.awt.datatransfer.MimeTypeProcessor$MimeType r1;
        myjava.awt.datatransfer.DataFlavor r0;

        r0 := @this: myjava.awt.datatransfer.DataFlavor;

        r1 = r0.<myjava.awt.datatransfer.DataFlavor: myjava.awt.datatransfer.MimeTypeProcessor$MimeType mimeInfo>;

        return r1;
    }

    public java.lang.String getMimeType()
    {
        myjava.awt.datatransfer.MimeTypeProcessor$MimeType $r2;
        java.lang.String $r1;
        myjava.awt.datatransfer.DataFlavor r0;

        r0 := @this: myjava.awt.datatransfer.DataFlavor;

        $r2 = r0.<myjava.awt.datatransfer.DataFlavor: myjava.awt.datatransfer.MimeTypeProcessor$MimeType mimeInfo>;

        if $r2 == null goto label1;

        $r2 = r0.<myjava.awt.datatransfer.DataFlavor: myjava.awt.datatransfer.MimeTypeProcessor$MimeType mimeInfo>;

        $r1 = staticinvoke <myjava.awt.datatransfer.MimeTypeProcessor: java.lang.String assemble(myjava.awt.datatransfer.MimeTypeProcessor$MimeType)>($r2);

        return $r1;

     label1:
        return null;
    }

    public java.lang.String getParameter(java.lang.String)
    {
        myjava.awt.datatransfer.MimeTypeProcessor$MimeType $r2;
        java.lang.String $r1;
        myjava.awt.datatransfer.DataFlavor r0;
        boolean $z0;

        r0 := @this: myjava.awt.datatransfer.DataFlavor;

        $r1 := @parameter0: java.lang.String;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("humanpresentablename");

        if $z0 == 0 goto label1;

        $r1 = r0.<myjava.awt.datatransfer.DataFlavor: java.lang.String humanPresentableName>;

        return $r1;

     label1:
        $r2 = r0.<myjava.awt.datatransfer.DataFlavor: myjava.awt.datatransfer.MimeTypeProcessor$MimeType mimeInfo>;

        if $r2 == null goto label2;

        $r2 = r0.<myjava.awt.datatransfer.DataFlavor: myjava.awt.datatransfer.MimeTypeProcessor$MimeType mimeInfo>;

        $r1 = virtualinvoke $r2.<myjava.awt.datatransfer.MimeTypeProcessor$MimeType: java.lang.String getParameter(java.lang.String)>($r1);

        return $r1;

     label2:
        return null;
    }

    public java.lang.String getPrimaryType()
    {
        myjava.awt.datatransfer.MimeTypeProcessor$MimeType $r2;
        java.lang.String $r1;
        myjava.awt.datatransfer.DataFlavor r0;

        r0 := @this: myjava.awt.datatransfer.DataFlavor;

        $r2 = r0.<myjava.awt.datatransfer.DataFlavor: myjava.awt.datatransfer.MimeTypeProcessor$MimeType mimeInfo>;

        if $r2 == null goto label1;

        $r2 = r0.<myjava.awt.datatransfer.DataFlavor: myjava.awt.datatransfer.MimeTypeProcessor$MimeType mimeInfo>;

        $r1 = virtualinvoke $r2.<myjava.awt.datatransfer.MimeTypeProcessor$MimeType: java.lang.String getPrimaryType()>();

        return $r1;

     label1:
        return null;
    }

    public java.io.Reader getReaderForText(myjava.awt.datatransfer.Transferable) throws myjava.awt.datatransfer.UnsupportedFlavorException, java.io.IOException
    {
        byte[] $r10;
        java.io.CharArrayReader $r13;
        myjava.awt.datatransfer.Transferable $r1;
        myjava.awt.datatransfer.DataFlavor r0;
        java.nio.ByteBuffer r9;
        java.io.ByteArrayInputStream $r15;
        int $i0;
        java.lang.String $r3;
        boolean $z0;
        java.nio.CharBuffer r5;
        java.io.Reader $r4;
        java.lang.IllegalArgumentException $r11;
        java.io.InputStreamReader $r14;
        java.io.StringReader $r12;
        char[] $r6;
        java.lang.Object $r2, r8;
        java.io.InputStream $r7;

        r0 := @this: myjava.awt.datatransfer.DataFlavor;

        $r1 := @parameter0: myjava.awt.datatransfer.Transferable;

        $r2 = interfaceinvoke $r1.<myjava.awt.datatransfer.Transferable: java.lang.Object getTransferData(myjava.awt.datatransfer.DataFlavor)>(r0);

        if $r2 != null goto label01;

        $r11 = new java.lang.IllegalArgumentException;

        $r3 = staticinvoke <org.apache.harmony.awt.internal.nls.Messages: java.lang.String getString(java.lang.String)>("awt.16E");

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r11;

     label01:
        $z0 = $r2 instanceof java.io.Reader;

        if $z0 == 0 goto label02;

        $r4 = (java.io.Reader) $r2;

        virtualinvoke $r4.<java.io.Reader: void reset()>();

        return $r4;

     label02:
        $z0 = $r2 instanceof java.lang.String;

        if $z0 == 0 goto label03;

        $r12 = new java.io.StringReader;

        $r3 = (java.lang.String) $r2;

        specialinvoke $r12.<java.io.StringReader: void <init>(java.lang.String)>($r3);

        return $r12;

     label03:
        $z0 = $r2 instanceof java.nio.CharBuffer;

        if $z0 == 0 goto label04;

        $r13 = new java.io.CharArrayReader;

        r5 = (java.nio.CharBuffer) $r2;

        $r6 = virtualinvoke r5.<java.nio.CharBuffer: char[] array()>();

        specialinvoke $r13.<java.io.CharArrayReader: void <init>(char[])>($r6);

        return $r13;

     label04:
        $z0 = $r2 instanceof char[];

        if $z0 == 0 goto label05;

        $r13 = new java.io.CharArrayReader;

        $r6 = (char[]) $r2;

        specialinvoke $r13.<java.io.CharArrayReader: void <init>(char[])>($r6);

        return $r13;

     label05:
        $r3 = specialinvoke r0.<myjava.awt.datatransfer.DataFlavor: java.lang.String getCharset()>();

        $z0 = $r2 instanceof java.io.InputStream;

        if $z0 == 0 goto label07;

        $r7 = (java.io.InputStream) $r2;

        r8 = $r7;

        virtualinvoke $r7.<java.io.InputStream: void reset()>();

     label06:
        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i0 != 0 goto label10;

        $r14 = new java.io.InputStreamReader;

        $r7 = (java.io.InputStream) r8;

        specialinvoke $r14.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r7);

        return $r14;

     label07:
        $z0 = $r2 instanceof java.nio.ByteBuffer;

        if $z0 == 0 goto label08;

        $r15 = new java.io.ByteArrayInputStream;

        r8 = $r15;

        r9 = (java.nio.ByteBuffer) $r2;

        $r10 = virtualinvoke r9.<java.nio.ByteBuffer: byte[] array()>();

        specialinvoke $r15.<java.io.ByteArrayInputStream: void <init>(byte[])>($r10);

        goto label06;

     label08:
        $z0 = $r2 instanceof byte[];

        if $z0 == 0 goto label09;

        $r15 = new java.io.ByteArrayInputStream;

        r8 = $r15;

        $r10 = (byte[]) $r2;

        specialinvoke $r15.<java.io.ByteArrayInputStream: void <init>(byte[])>($r10);

        goto label06;

     label09:
        $r11 = new java.lang.IllegalArgumentException;

        $r3 = staticinvoke <org.apache.harmony.awt.internal.nls.Messages: java.lang.String getString(java.lang.String)>("awt.16F");

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r11;

     label10:
        $r14 = new java.io.InputStreamReader;

        $r7 = (java.io.InputStream) r8;

        specialinvoke $r14.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r7, $r3);

        return $r14;
    }

    public java.lang.Class getRepresentationClass()
    {
        java.lang.Class r1;
        myjava.awt.datatransfer.DataFlavor r0;

        r0 := @this: myjava.awt.datatransfer.DataFlavor;

        r1 = r0.<myjava.awt.datatransfer.DataFlavor: java.lang.Class representationClass>;

        return r1;
    }

    public java.lang.String getSubType()
    {
        myjava.awt.datatransfer.MimeTypeProcessor$MimeType $r2;
        java.lang.String $r1;
        myjava.awt.datatransfer.DataFlavor r0;

        r0 := @this: myjava.awt.datatransfer.DataFlavor;

        $r2 = r0.<myjava.awt.datatransfer.DataFlavor: myjava.awt.datatransfer.MimeTypeProcessor$MimeType mimeInfo>;

        if $r2 == null goto label1;

        $r2 = r0.<myjava.awt.datatransfer.DataFlavor: myjava.awt.datatransfer.MimeTypeProcessor$MimeType mimeInfo>;

        $r1 = virtualinvoke $r2.<myjava.awt.datatransfer.MimeTypeProcessor$MimeType: java.lang.String getSubType()>();

        return $r1;

     label1:
        return null;
    }

    public int hashCode()
    {
        int $i0;
        java.lang.String $r1;
        myjava.awt.datatransfer.DataFlavor r0;

        r0 := @this: myjava.awt.datatransfer.DataFlavor;

        $r1 = specialinvoke r0.<myjava.awt.datatransfer.DataFlavor: java.lang.String getKeyInfo()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        return $i0;
    }

    public boolean isFlavorJavaFileListType()
    {
        java.lang.Class $r1, $r2;
        myjava.awt.datatransfer.DataFlavor r0, $r3;
        boolean $z0;

        r0 := @this: myjava.awt.datatransfer.DataFlavor;

        $r2 = class "Ljava/util/List;";

        $r1 = r0.<myjava.awt.datatransfer.DataFlavor: java.lang.Class representationClass>;

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r1);

        if $z0 == 0 goto label1;

        $r3 = <myjava.awt.datatransfer.DataFlavor: myjava.awt.datatransfer.DataFlavor javaFileListFlavor>;

        $z0 = virtualinvoke r0.<myjava.awt.datatransfer.DataFlavor: boolean isMimeTypeEqual(myjava.awt.datatransfer.DataFlavor)>($r3);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isFlavorRemoteObjectType()
    {
        myjava.awt.datatransfer.DataFlavor r0;
        boolean $z0;

        r0 := @this: myjava.awt.datatransfer.DataFlavor;

        $z0 = virtualinvoke r0.<myjava.awt.datatransfer.DataFlavor: boolean isMimeTypeEqual(java.lang.String)>("application/x-java-remote-object");

        if $z0 == 0 goto label1;

        $z0 = virtualinvoke r0.<myjava.awt.datatransfer.DataFlavor: boolean isRepresentationClassRemote()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isFlavorSerializedObjectType()
    {
        myjava.awt.datatransfer.DataFlavor r0;
        boolean $z0;

        r0 := @this: myjava.awt.datatransfer.DataFlavor;

        $z0 = virtualinvoke r0.<myjava.awt.datatransfer.DataFlavor: boolean isMimeTypeSerializedObject()>();

        if $z0 == 0 goto label1;

        $z0 = virtualinvoke r0.<myjava.awt.datatransfer.DataFlavor: boolean isRepresentationClassSerializable()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isFlavorTextType()
    {
        myjava.awt.datatransfer.MimeTypeProcessor$MimeType $r2;
        int $i0;
        java.lang.String $r3;
        myjava.awt.datatransfer.DataFlavor r0, $r1;
        boolean $z0;

        r0 := @this: myjava.awt.datatransfer.DataFlavor;

        $r1 = <myjava.awt.datatransfer.DataFlavor: myjava.awt.datatransfer.DataFlavor stringFlavor>;

        $z0 = virtualinvoke r0.<myjava.awt.datatransfer.DataFlavor: boolean equals(myjava.awt.datatransfer.DataFlavor)>($r1);

        if $z0 != 0 goto label1;

        $r1 = <myjava.awt.datatransfer.DataFlavor: myjava.awt.datatransfer.DataFlavor plainTextFlavor>;

        $z0 = virtualinvoke r0.<myjava.awt.datatransfer.DataFlavor: boolean equals(myjava.awt.datatransfer.DataFlavor)>($r1);

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        $r2 = r0.<myjava.awt.datatransfer.DataFlavor: myjava.awt.datatransfer.MimeTypeProcessor$MimeType mimeInfo>;

        if $r2 == null goto label3;

        $r2 = r0.<myjava.awt.datatransfer.DataFlavor: myjava.awt.datatransfer.MimeTypeProcessor$MimeType mimeInfo>;

        $r3 = virtualinvoke $r2.<myjava.awt.datatransfer.MimeTypeProcessor$MimeType: java.lang.String getPrimaryType()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("text");

        if $z0 != 0 goto label3;

        return 0;

     label3:
        $r3 = specialinvoke r0.<myjava.awt.datatransfer.DataFlavor: java.lang.String getCharset()>();

        $z0 = specialinvoke r0.<myjava.awt.datatransfer.DataFlavor: boolean isByteCodeFlavor()>();

        if $z0 == 0 goto label5;

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i0 == 0 goto label4;

        $z0 = staticinvoke <myjava.awt.datatransfer.DataFlavor: boolean isCharsetSupported(java.lang.String)>($r3);

        return $z0;

     label4:
        return 1;

     label5:
        $z0 = specialinvoke r0.<myjava.awt.datatransfer.DataFlavor: boolean isUnicodeFlavor()>();

        return $z0;
    }

    public boolean isMimeTypeEqual(java.lang.String)
    {
        myjava.awt.datatransfer.MimeTypeProcessor$MimeType $r2, $r3;
        java.lang.Throwable $r4;
        java.lang.String $r1;
        myjava.awt.datatransfer.DataFlavor r0;
        boolean $z0;

        r0 := @this: myjava.awt.datatransfer.DataFlavor;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<myjava.awt.datatransfer.DataFlavor: myjava.awt.datatransfer.MimeTypeProcessor$MimeType mimeInfo>;

     label1:
        $r3 = staticinvoke <myjava.awt.datatransfer.MimeTypeProcessor: myjava.awt.datatransfer.MimeTypeProcessor$MimeType parse(java.lang.String)>($r1);

        $z0 = virtualinvoke $r2.<myjava.awt.datatransfer.MimeTypeProcessor$MimeType: boolean equals(myjava.awt.datatransfer.MimeTypeProcessor$MimeType)>($r3);

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        return 0;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public final boolean isMimeTypeEqual(myjava.awt.datatransfer.DataFlavor)
    {
        myjava.awt.datatransfer.MimeTypeProcessor$MimeType $r2, $r3;
        myjava.awt.datatransfer.DataFlavor r0, $r1;
        boolean $z0;

        r0 := @this: myjava.awt.datatransfer.DataFlavor;

        $r1 := @parameter0: myjava.awt.datatransfer.DataFlavor;

        $r2 = r0.<myjava.awt.datatransfer.DataFlavor: myjava.awt.datatransfer.MimeTypeProcessor$MimeType mimeInfo>;

        if $r2 == null goto label1;

        $r3 = r0.<myjava.awt.datatransfer.DataFlavor: myjava.awt.datatransfer.MimeTypeProcessor$MimeType mimeInfo>;

        $r2 = $r1.<myjava.awt.datatransfer.DataFlavor: myjava.awt.datatransfer.MimeTypeProcessor$MimeType mimeInfo>;

        $z0 = virtualinvoke $r3.<myjava.awt.datatransfer.MimeTypeProcessor$MimeType: boolean equals(myjava.awt.datatransfer.MimeTypeProcessor$MimeType)>($r2);

        return $z0;

     label1:
        $r2 = $r1.<myjava.awt.datatransfer.DataFlavor: myjava.awt.datatransfer.MimeTypeProcessor$MimeType mimeInfo>;

        if $r2 != null goto label2;

        return 1;

     label2:
        return 0;
    }

    public boolean isMimeTypeSerializedObject()
    {
        myjava.awt.datatransfer.DataFlavor r0;
        boolean $z0;

        r0 := @this: myjava.awt.datatransfer.DataFlavor;

        $z0 = virtualinvoke r0.<myjava.awt.datatransfer.DataFlavor: boolean isMimeTypeEqual(java.lang.String)>("application/x-java-serialized-object");

        return $z0;
    }

    public boolean isRepresentationClassByteBuffer()
    {
        java.lang.Class $r1, $r2;
        myjava.awt.datatransfer.DataFlavor r0;
        boolean $z0;

        r0 := @this: myjava.awt.datatransfer.DataFlavor;

        $r2 = class "Ljava/nio/ByteBuffer;";

        $r1 = r0.<myjava.awt.datatransfer.DataFlavor: java.lang.Class representationClass>;

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r1);

        return $z0;
    }

    public boolean isRepresentationClassCharBuffer()
    {
        java.lang.Class $r1, $r2;
        myjava.awt.datatransfer.DataFlavor r0;
        boolean $z0;

        r0 := @this: myjava.awt.datatransfer.DataFlavor;

        $r2 = class "Ljava/nio/CharBuffer;";

        $r1 = r0.<myjava.awt.datatransfer.DataFlavor: java.lang.Class representationClass>;

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r1);

        return $z0;
    }

    public boolean isRepresentationClassInputStream()
    {
        java.lang.Class $r1, $r2;
        myjava.awt.datatransfer.DataFlavor r0;
        boolean $z0;

        r0 := @this: myjava.awt.datatransfer.DataFlavor;

        $r2 = class "Ljava/io/InputStream;";

        $r1 = r0.<myjava.awt.datatransfer.DataFlavor: java.lang.Class representationClass>;

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r1);

        return $z0;
    }

    public boolean isRepresentationClassReader()
    {
        java.lang.Class $r1, $r2;
        myjava.awt.datatransfer.DataFlavor r0;
        boolean $z0;

        r0 := @this: myjava.awt.datatransfer.DataFlavor;

        $r2 = class "Ljava/io/Reader;";

        $r1 = r0.<myjava.awt.datatransfer.DataFlavor: java.lang.Class representationClass>;

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r1);

        return $z0;
    }

    public boolean isRepresentationClassRemote()
    {
        myjava.awt.datatransfer.DataFlavor r0;

        r0 := @this: myjava.awt.datatransfer.DataFlavor;

        return 0;
    }

    public boolean isRepresentationClassSerializable()
    {
        java.lang.Class $r1, $r2;
        myjava.awt.datatransfer.DataFlavor r0;
        boolean $z0;

        r0 := @this: myjava.awt.datatransfer.DataFlavor;

        $r2 = class "Ljava/io/Serializable;";

        $r1 = r0.<myjava.awt.datatransfer.DataFlavor: java.lang.Class representationClass>;

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r1);

        return $z0;
    }

    public boolean match(myjava.awt.datatransfer.DataFlavor)
    {
        myjava.awt.datatransfer.DataFlavor r0, $r1;
        boolean $z0;

        r0 := @this: myjava.awt.datatransfer.DataFlavor;

        $r1 := @parameter0: myjava.awt.datatransfer.DataFlavor;

        $z0 = virtualinvoke r0.<myjava.awt.datatransfer.DataFlavor: boolean equals(myjava.awt.datatransfer.DataFlavor)>($r1);

        return $z0;
    }

    protected java.lang.String normalizeMimeType(java.lang.String)
    {
        java.lang.String $r1;
        myjava.awt.datatransfer.DataFlavor r0;

        r0 := @this: myjava.awt.datatransfer.DataFlavor;

        $r1 := @parameter0: java.lang.String;

        return $r1;
    }

    protected java.lang.String normalizeMimeTypeParameter(java.lang.String, java.lang.String)
    {
        java.lang.String $r1, $r2;
        myjava.awt.datatransfer.DataFlavor r0;

        r0 := @this: myjava.awt.datatransfer.DataFlavor;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        return $r2;
    }

    public void readExternal(java.io.ObjectInput) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        myjava.awt.datatransfer.MimeTypeProcessor$MimeType $r4;
        java.lang.Throwable $r6;
        java.io.ObjectInput $r1;
        java.lang.Object $r2;
        java.lang.Class $r5;
        java.lang.String $r3;
        myjava.awt.datatransfer.DataFlavor r0;

        r0 := @this: myjava.awt.datatransfer.DataFlavor;

        $r1 := @parameter0: java.io.ObjectInput;

        entermonitor r0;

     label1:
        $r2 = interfaceinvoke $r1.<java.io.ObjectInput: java.lang.Object readObject()>();

        $r3 = (java.lang.String) $r2;

        r0.<myjava.awt.datatransfer.DataFlavor: java.lang.String humanPresentableName> = $r3;

        $r2 = interfaceinvoke $r1.<java.io.ObjectInput: java.lang.Object readObject()>();

        $r4 = (myjava.awt.datatransfer.MimeTypeProcessor$MimeType) $r2;

        r0.<myjava.awt.datatransfer.DataFlavor: myjava.awt.datatransfer.MimeTypeProcessor$MimeType mimeInfo> = $r4;

        $r4 = r0.<myjava.awt.datatransfer.DataFlavor: myjava.awt.datatransfer.MimeTypeProcessor$MimeType mimeInfo>;

        if $r4 == null goto label4;

        $r4 = r0.<myjava.awt.datatransfer.DataFlavor: myjava.awt.datatransfer.MimeTypeProcessor$MimeType mimeInfo>;

        $r3 = virtualinvoke $r4.<myjava.awt.datatransfer.MimeTypeProcessor$MimeType: java.lang.String getParameter(java.lang.String)>("class");

        $r5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r3);

     label2:
        r0.<myjava.awt.datatransfer.DataFlavor: java.lang.Class representationClass> = $r5;

     label3:
        exitmonitor r0;

        return;

     label4:
        $r5 = null;

        goto label2;

     label5:
        $r6 := @caughtexception;

        exitmonitor r0;

        throw $r6;

        catch java.lang.Throwable from label1 to label3 with label5;
    }

    public void setHumanPresentableName(java.lang.String)
    {
        java.lang.String $r1;
        myjava.awt.datatransfer.DataFlavor r0;

        r0 := @this: myjava.awt.datatransfer.DataFlavor;

        $r1 := @parameter0: java.lang.String;

        r0.<myjava.awt.datatransfer.DataFlavor: java.lang.String humanPresentableName> = $r1;

        return;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r1;
        java.lang.Class $r2;
        java.lang.String $r3;
        myjava.awt.datatransfer.DataFlavor r0;

        r0 := @this: myjava.awt.datatransfer.DataFlavor;

        $r1 = new java.lang.StringBuilder;

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[MimeType=(");

        $r3 = virtualinvoke r0.<myjava.awt.datatransfer.DataFlavor: java.lang.String getMimeType()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(");humanPresentableName=");

        $r3 = r0.<myjava.awt.datatransfer.DataFlavor: java.lang.String humanPresentableName>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public void writeExternal(java.io.ObjectOutput) throws java.io.IOException
    {
        myjava.awt.datatransfer.MimeTypeProcessor$MimeType $r3;
        java.lang.Throwable $r4;
        java.io.ObjectOutput $r1;
        java.lang.String $r2;
        myjava.awt.datatransfer.DataFlavor r0;

        r0 := @this: myjava.awt.datatransfer.DataFlavor;

        $r1 := @parameter0: java.io.ObjectOutput;

        entermonitor r0;

     label1:
        $r2 = r0.<myjava.awt.datatransfer.DataFlavor: java.lang.String humanPresentableName>;

        interfaceinvoke $r1.<java.io.ObjectOutput: void writeObject(java.lang.Object)>($r2);

        $r3 = r0.<myjava.awt.datatransfer.DataFlavor: myjava.awt.datatransfer.MimeTypeProcessor$MimeType mimeInfo>;

        interfaceinvoke $r1.<java.io.ObjectOutput: void writeObject(java.lang.Object)>($r3);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r4 := @caughtexception;

        exitmonitor r0;

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
