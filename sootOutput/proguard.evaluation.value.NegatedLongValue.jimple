final class proguard.evaluation.value.NegatedLongValue extends proguard.evaluation.value.SpecificLongValue
{
    private final proguard.evaluation.value.LongValue longValue;

    public void <init>(proguard.evaluation.value.LongValue)
    {
        proguard.evaluation.value.NegatedLongValue r0;
        proguard.evaluation.value.LongValue $r1;

        r0 := @this: proguard.evaluation.value.NegatedLongValue;

        $r1 := @parameter0: proguard.evaluation.value.LongValue;

        specialinvoke r0.<proguard.evaluation.value.SpecificLongValue: void <init>()>();

        r0.<proguard.evaluation.value.NegatedLongValue: proguard.evaluation.value.LongValue longValue> = $r1;

        return;
    }

    public boolean equals(java.lang.Object)
    {
        proguard.evaluation.value.NegatedLongValue r0;
        proguard.evaluation.value.LongValue $r1, $r3;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: proguard.evaluation.value.NegatedLongValue;

        $r2 := @parameter0: java.lang.Object;

        if r0 == $r2 goto label1;

        $z0 = specialinvoke r0.<proguard.evaluation.value.SpecificLongValue: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label2;

        $r3 = r0.<proguard.evaluation.value.NegatedLongValue: proguard.evaluation.value.LongValue longValue>;

        r0 = (proguard.evaluation.value.NegatedLongValue) $r2;

        $r1 = r0.<proguard.evaluation.value.NegatedLongValue: proguard.evaluation.value.LongValue longValue>;

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public int hashCode()
    {
        proguard.evaluation.value.NegatedLongValue r0;
        proguard.evaluation.value.LongValue $r1;
        int $i0, $i1;

        r0 := @this: proguard.evaluation.value.NegatedLongValue;

        $i0 = specialinvoke r0.<proguard.evaluation.value.SpecificLongValue: int hashCode()>();

        $r1 = r0.<proguard.evaluation.value.NegatedLongValue: proguard.evaluation.value.LongValue longValue>;

        $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i0 = $i0 ^ $i1;

        return $i0;
    }

    public proguard.evaluation.value.LongValue negate()
    {
        proguard.evaluation.value.NegatedLongValue r0;
        proguard.evaluation.value.LongValue r1;

        r0 := @this: proguard.evaluation.value.NegatedLongValue;

        r1 = r0.<proguard.evaluation.value.NegatedLongValue: proguard.evaluation.value.LongValue longValue>;

        return r1;
    }

    public java.lang.String toString()
    {
        proguard.evaluation.value.NegatedLongValue r0;
        java.lang.StringBuffer $r1;
        proguard.evaluation.value.LongValue $r2;
        java.lang.String $r3;

        r0 := @this: proguard.evaluation.value.NegatedLongValue;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-");

        $r2 = r0.<proguard.evaluation.value.NegatedLongValue: proguard.evaluation.value.LongValue longValue>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r2);

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }
}
