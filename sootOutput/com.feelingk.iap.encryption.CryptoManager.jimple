public class com.feelingk.iap.encryption.CryptoManager extends java.lang.Object
{
    private static final java.lang.String HEX;
    private static final java.lang.String innerKey;

    public void <init>()
    {
        com.feelingk.iap.encryption.CryptoManager r0;

        r0 := @this: com.feelingk.iap.encryption.CryptoManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static void appendHex(java.lang.StringBuffer, byte)
    {
        byte $b0;
        java.lang.StringBuffer $r0;
        int $i1;
        char $c2;
        java.lang.String $r1;

        $r0 := @parameter0: java.lang.StringBuffer;

        $b0 := @parameter1: byte;

        $r1 = "0123456789ABCDEF";

        $i1 = (int) $b0;

        $i1 = $i1 >> 4;

        $i1 = $i1 & 15;

        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i1);

        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2);

        $r1 = "0123456789ABCDEF";

        $b0 = $b0 & 15;

        $i1 = (int) $b0;

        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i1);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2);

        return;
    }

    public static byte[] decript(byte[], byte[], byte[])
    {
        byte[] $r0, $r1, $r2;
        javax.crypto.spec.IvParameterSpec r3;
        javax.crypto.spec.SecretKeySpec r4;
        javax.crypto.Cipher $r5;
        java.lang.Exception $r6;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $r2 := @parameter2: byte[];

     label1:
        $r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES/CBC/PKCS5Padding");

     label2:
        r4 = new javax.crypto.spec.SecretKeySpec;

     label3:
        specialinvoke r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, "AES");

     label4:
        r3 = new javax.crypto.spec.IvParameterSpec;

     label5:
        specialinvoke r3.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r2);

        virtualinvoke $r5.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(2, r4, r3);

        $r0 = virtualinvoke $r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r0);

     label6:
        return $r0;

     label7:
        $r6 := @caughtexception;

        virtualinvoke $r6.<java.lang.Exception: void printStackTrace()>();

        return null;

        catch java.lang.Exception from label1 to label2 with label7;
        catch java.lang.Exception from label3 to label4 with label7;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    public static java.lang.String decrypt(java.lang.String) throws java.lang.Exception
    {
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        $r0 = staticinvoke <com.feelingk.iap.encryption.CryptoManager: java.lang.String decrypt(java.lang.String,java.lang.String)>("ahqkdlfdhvltm000", $r0);

        return $r0;
    }

    public static java.lang.String decrypt(java.lang.String, java.lang.String) throws java.lang.Exception
    {
        byte[] $r2, $r3;
        java.lang.String $r0, $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        $r3 = staticinvoke <com.feelingk.iap.encryption.CryptoManager: byte[] toByte(java.lang.String)>($r1);

        $r2 = staticinvoke <com.feelingk.iap.encryption.CryptoManager: byte[] decrypt(byte[],byte[])>($r2, $r3);

        $r0 = new java.lang.String;

        specialinvoke $r0.<java.lang.String: void <init>(byte[])>($r2);

        return $r0;
    }

    private static byte[] decrypt(byte[], byte[]) throws java.lang.Exception
    {
        byte[] $r0, $r1;
        javax.crypto.spec.SecretKeySpec r2;
        javax.crypto.Cipher $r3;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        r2 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, "AES");

        $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES");

        virtualinvoke $r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(2, r2);

        $r0 = virtualinvoke $r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1);

        return $r0;
    }

    public static byte[] encript(byte[], byte[], byte[])
    {
        byte[] $r0, $r1, $r2;
        javax.crypto.spec.IvParameterSpec r3;
        javax.crypto.spec.SecretKeySpec r4;
        javax.crypto.Cipher $r5;
        java.lang.Exception $r6;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $r2 := @parameter2: byte[];

     label1:
        $r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES/CBC/PKCS5Padding");

     label2:
        r4 = new javax.crypto.spec.SecretKeySpec;

     label3:
        specialinvoke r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, "AES");

     label4:
        r3 = new javax.crypto.spec.IvParameterSpec;

     label5:
        specialinvoke r3.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r2);

        virtualinvoke $r5.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(1, r4, r3);

        $r0 = virtualinvoke $r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r0);

     label6:
        return $r0;

     label7:
        $r6 := @caughtexception;

        virtualinvoke $r6.<java.lang.Exception: void printStackTrace()>();

        return null;

        catch java.lang.Exception from label1 to label2 with label7;
        catch java.lang.Exception from label3 to label4 with label7;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    public static java.lang.String encrypt(java.lang.String) throws java.lang.Exception
    {
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        $r0 = staticinvoke <com.feelingk.iap.encryption.CryptoManager: java.lang.String encrypt(java.lang.String,java.lang.String)>("ahqkdlfdhvltm000", $r0);

        return $r0;
    }

    public static java.lang.String encrypt(java.lang.String, java.lang.String) throws java.lang.Exception
    {
        byte[] $r2, $r3;
        java.lang.String $r0, $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        $r3 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        $r2 = staticinvoke <com.feelingk.iap.encryption.CryptoManager: byte[] encrypt(byte[],byte[])>($r2, $r3);

        $r0 = staticinvoke <com.feelingk.iap.encryption.CryptoManager: java.lang.String toHex(byte[])>($r2);

        return $r0;
    }

    private static byte[] encrypt(byte[], byte[]) throws java.lang.Exception
    {
        byte[] $r0, $r1;
        javax.crypto.spec.SecretKeySpec r2;
        javax.crypto.Cipher $r3;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        r2 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, "AES");

        $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES");

        virtualinvoke $r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(1, r2);

        $r0 = virtualinvoke $r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1);

        return $r0;
    }

    public static java.lang.String fromHex(java.lang.String)
    {
        byte[] $r2;
        java.lang.String $r0, $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = new java.lang.String;

        $r2 = staticinvoke <com.feelingk.iap.encryption.CryptoManager: byte[] toByte(java.lang.String)>($r0);

        specialinvoke $r1.<java.lang.String: void <init>(byte[])>($r2);

        return $r1;
    }

    public static byte[] getInitialVector(byte[]) throws java.security.NoSuchAlgorithmException
    {
        byte[] $r0;
        java.security.MessageDigest $r1;

        $r0 := @parameter0: byte[];

        $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("MD5");

        virtualinvoke $r1.<java.security.MessageDigest: void reset()>();

        virtualinvoke $r1.<java.security.MessageDigest: void update(byte[])>($r0);

        $r0 = virtualinvoke $r1.<java.security.MessageDigest: byte[] digest()>();

        return $r0;
    }

    public static byte[] getKey(byte[]) throws java.security.NoSuchAlgorithmException
    {
        byte[] $r0;
        java.security.MessageDigest $r1;

        $r0 := @parameter0: byte[];

        $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("MD5");

        virtualinvoke $r1.<java.security.MessageDigest: void reset()>();

        virtualinvoke $r1.<java.security.MessageDigest: void update(byte[])>($r0);

        $r0 = virtualinvoke $r1.<java.security.MessageDigest: byte[] digest()>();

        return $r0;
    }

    public static byte[] toByte(java.lang.String)
    {
        byte[] r1;
        java.lang.Integer $r3;
        byte $b4;
        int i0, i1, $i2, $i3;
        java.lang.String $r0, $r2;

        $r0 := @parameter0: java.lang.String;

        i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        i0 = i0 / 2;

        r1 = newarray (byte)[i0];

        i1 = 0;

     label1:
        if i1 < i0 goto label2;

        return r1;

     label2:
        $i2 = i1 * 2;

        $i3 = i1 * 2;

        $i3 = $i3 + 2;

        $r2 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>($i2, $i3);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>($r2, 16);

        $b4 = virtualinvoke $r3.<java.lang.Integer: byte byteValue()>();

        r1[i1] = $b4;

        i1 = i1 + 1;

        goto label1;
    }

    public static java.lang.String toHex(java.lang.String)
    {
        byte[] $r1;
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        $r0 = staticinvoke <com.feelingk.iap.encryption.CryptoManager: java.lang.String toHex(byte[])>($r1);

        return $r0;
    }

    public static java.lang.String toHex(byte[])
    {
        byte[] $r0;
        byte $b2;
        java.lang.StringBuffer r1;
        int $i0, $i1;
        java.lang.String $r2;

        $r0 := @parameter0: byte[];

        if $r0 != null goto label1;

        return "";

     label1:
        r1 = new java.lang.StringBuffer;

        $i0 = lengthof $r0;

        $i0 = $i0 * 2;

        specialinvoke r1.<java.lang.StringBuffer: void <init>(int)>($i0);

        $i0 = 0;

     label2:
        $i1 = lengthof $r0;

        if $i0 < $i1 goto label3;

        $r2 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;

     label3:
        $b2 = $r0[$i0];

        staticinvoke <com.feelingk.iap.encryption.CryptoManager: void appendHex(java.lang.StringBuffer,byte)>(r1, $b2);

        $i0 = $i0 + 1;

        goto label2;
    }

    public java.lang.String md5(java.lang.String)
    {
        byte[] $r4;
        java.security.MessageDigest $r3;
        java.lang.Exception $r5;
        short $s3;
        com.feelingk.iap.encryption.CryptoManager r0;
        byte $b2;
        java.lang.StringBuffer r2, $r6;
        int i0, $i1;
        java.lang.String $r1;

        r0 := @this: com.feelingk.iap.encryption.CryptoManager;

        $r1 := @parameter0: java.lang.String;

     label01:
        $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("MD5");

        $r4 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        virtualinvoke $r3.<java.security.MessageDigest: void update(byte[])>($r4);

        $r4 = virtualinvoke $r3.<java.security.MessageDigest: byte[] digest()>();

     label02:
        $r6 = new java.lang.StringBuffer;

        r2 = $r6;

     label03:
        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

     label04:
        i0 = 0;

     label05:
        $i1 = lengthof $r4;

     label06:
        if i0 < $i1 goto label09;

     label07:
        $r1 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.String toString()>();

     label08:
        return $r1;

     label09:
        $b2 = $r4[i0];

     label10:
        $s3 = (short) $b2;

        $s3 = $s3 & 255;

        $i1 = (int) $s3;

     label11:
        $r1 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i1);

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

     label12:
        i0 = i0 + 1;

        goto label05;

     label13:
        $r5 := @caughtexception;

        virtualinvoke $r5.<java.lang.Exception: void printStackTrace()>();

        return "";

        catch java.lang.Exception from label01 to label02 with label13;
        catch java.lang.Exception from label03 to label04 with label13;
        catch java.lang.Exception from label05 to label06 with label13;
        catch java.lang.Exception from label07 to label08 with label13;
        catch java.lang.Exception from label09 to label10 with label13;
        catch java.lang.Exception from label11 to label12 with label13;
    }

    public static void <clinit>()
    {
        <com.feelingk.iap.encryption.CryptoManager: java.lang.String innerKey> = "ahqkdlfdhvltm000";

        <com.feelingk.iap.encryption.CryptoManager: java.lang.String HEX> = "0123456789ABCDEF";

        return;
    }
}
