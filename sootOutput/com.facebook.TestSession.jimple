public class com.facebook.TestSession extends com.facebook.Session
{
    static final boolean $assertionsDisabled;
    private static final java.lang.String LOG_TAG;
    private static java.util.Map appTestAccounts;
    private static final long serialVersionUID;
    private static java.lang.String testApplicationId;
    private static java.lang.String testApplicationSecret;
    private final com.facebook.TestSession$Mode mode;
    private final java.util.List requestedPermissions;
    private final java.lang.String sessionUniqueUserTag;
    private java.lang.String testAccountId;
    private boolean wasAskedToExtendAccessToken;

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0;

        <com.facebook.TestSession: long serialVersionUID> = 1L;

        <com.facebook.TestSession: java.lang.String LOG_TAG> = "FacebookSDK.TestSession";

        <com.facebook.TestSession: boolean $assertionsDisabled> = 0;

        $r0 = class "Lcom/facebook/TestSession;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label2;

        $z0 = 1;

     label1:
        <com.facebook.TestSession: boolean $assertionsDisabled> = $z0;

        return;

     label2:
        $z0 = 0;

        goto label1;

        return;
    }

    void <init>(android.app.Activity, java.util.List, com.facebook.TokenCachingStrategy, java.lang.String, com.facebook.TestSession$Mode)
    {
        com.facebook.TestSession r0;
        java.util.List $r2;
        com.facebook.TestSession$Mode $r5;
        com.facebook.TokenCachingStrategy $r3;
        java.lang.String $r4, $r6;
        android.app.Activity $r1;

        r0 := @this: com.facebook.TestSession;

        $r1 := @parameter0: android.app.Activity;

        $r2 := @parameter1: java.util.List;

        $r3 := @parameter2: com.facebook.TokenCachingStrategy;

        $r4 := @parameter3: java.lang.String;

        $r5 := @parameter4: com.facebook.TestSession$Mode;

        $r6 = <com.facebook.TestSession: java.lang.String testApplicationId>;

        specialinvoke r0.<com.facebook.Session: void <init>(android.content.Context,java.lang.String,com.facebook.TokenCachingStrategy)>($r1, $r6, $r3);

        staticinvoke <com.facebook.internal.Validate: void notNull(java.lang.Object,java.lang.String)>($r2, "permissions");

        $r6 = <com.facebook.TestSession: java.lang.String testApplicationId>;

        staticinvoke <com.facebook.internal.Validate: void notNullOrEmpty(java.lang.String,java.lang.String)>($r6, "testApplicationId");

        $r6 = <com.facebook.TestSession: java.lang.String testApplicationSecret>;

        staticinvoke <com.facebook.internal.Validate: void notNullOrEmpty(java.lang.String,java.lang.String)>($r6, "testApplicationSecret");

        r0.<com.facebook.TestSession: java.lang.String sessionUniqueUserTag> = $r4;

        r0.<com.facebook.TestSession: com.facebook.TestSession$Mode mode> = $r5;

        r0.<com.facebook.TestSession: java.util.List requestedPermissions> = $r2;

        return;
    }

    public static com.facebook.TestSession createSessionWithPrivateUser(android.app.Activity, java.util.List)
    {
        com.facebook.TestSession $r2;
        java.util.List $r1;
        com.facebook.TestSession$Mode $r3;
        android.app.Activity $r0;

        $r0 := @parameter0: android.app.Activity;

        $r1 := @parameter1: java.util.List;

        $r3 = <com.facebook.TestSession$Mode: com.facebook.TestSession$Mode PRIVATE>;

        $r2 = staticinvoke <com.facebook.TestSession: com.facebook.TestSession createTestSession(android.app.Activity,java.util.List,com.facebook.TestSession$Mode,java.lang.String)>($r0, $r1, $r3, null);

        return $r2;
    }

    public static com.facebook.TestSession createSessionWithSharedUser(android.app.Activity, java.util.List)
    {
        com.facebook.TestSession $r2;
        java.util.List $r1;
        android.app.Activity $r0;

        $r0 := @parameter0: android.app.Activity;

        $r1 := @parameter1: java.util.List;

        $r2 = staticinvoke <com.facebook.TestSession: com.facebook.TestSession createSessionWithSharedUser(android.app.Activity,java.util.List,java.lang.String)>($r0, $r1, null);

        return $r2;
    }

    public static com.facebook.TestSession createSessionWithSharedUser(android.app.Activity, java.util.List, java.lang.String)
    {
        com.facebook.TestSession $r3;
        java.util.List $r1;
        com.facebook.TestSession$Mode $r4;
        java.lang.String $r2;
        android.app.Activity $r0;

        $r0 := @parameter0: android.app.Activity;

        $r1 := @parameter1: java.util.List;

        $r2 := @parameter2: java.lang.String;

        $r4 = <com.facebook.TestSession$Mode: com.facebook.TestSession$Mode SHARED>;

        $r3 = staticinvoke <com.facebook.TestSession: com.facebook.TestSession createTestSession(android.app.Activity,java.util.List,com.facebook.TestSession$Mode,java.lang.String)>($r0, $r1, $r4, $r2);

        return $r3;
    }

    private com.facebook.TestSession$TestAccount createTestAccountAndFinishAuth()
    {
        com.facebook.TestSession r0;
        com.facebook.FacebookRequestError $r9;
        android.os.Bundle $r1;
        java.lang.Object[] $r5;
        com.facebook.TestSession$Mode $r3, $r4;
        com.facebook.FacebookException $r12;
        com.facebook.model.GraphObject $r10;
        com.facebook.HttpMethod $r7;
        java.lang.AssertionError $r13;
        com.facebook.TestSession$TestAccount $r11;
        com.facebook.Response $r8;
        com.facebook.Request $r6;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: com.facebook.TestSession;

        $r1 = new android.os.Bundle;

        specialinvoke $r1.<android.os.Bundle: void <init>()>();

        virtualinvoke $r1.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("installed", "true");

        $r2 = specialinvoke r0.<com.facebook.TestSession: java.lang.String getPermissionsString()>();

        virtualinvoke $r1.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("permissions", $r2);

        $r2 = staticinvoke <com.facebook.TestSession: java.lang.String getAppAccessToken()>();

        virtualinvoke $r1.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("access_token", $r2);

        $r3 = r0.<com.facebook.TestSession: com.facebook.TestSession$Mode mode>;

        $r4 = <com.facebook.TestSession$Mode: com.facebook.TestSession$Mode SHARED>;

        if $r3 != $r4 goto label1;

        $r5 = newarray (java.lang.Object)[1];

        $r2 = specialinvoke r0.<com.facebook.TestSession: java.lang.String getSharedTestAccountIdentifier()>();

        $r5[0] = $r2;

        $r2 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Shared %s Testuser", $r5);

        virtualinvoke $r1.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("name", $r2);

     label1:
        $r5 = newarray (java.lang.Object)[1];

        $r2 = <com.facebook.TestSession: java.lang.String testApplicationId>;

        $r5[0] = $r2;

        $r2 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s/accounts/test-users", $r5);

        $r6 = new com.facebook.Request;

        $r7 = <com.facebook.HttpMethod: com.facebook.HttpMethod POST>;

        specialinvoke $r6.<com.facebook.Request: void <init>(com.facebook.Session,java.lang.String,android.os.Bundle,com.facebook.HttpMethod)>(null, $r2, $r1, $r7);

        $r8 = virtualinvoke $r6.<com.facebook.Request: com.facebook.Response executeAndWait()>();

        $r9 = virtualinvoke $r8.<com.facebook.Response: com.facebook.FacebookRequestError getError()>();

        $r10 = virtualinvoke $r8.<com.facebook.Response: com.facebook.model.GraphObject getGraphObjectAs(java.lang.Class)>(class "Lcom/facebook/TestSession$TestAccount;");

        $r11 = (com.facebook.TestSession$TestAccount) $r10;

        if $r9 == null goto label2;

        $r12 = virtualinvoke $r9.<com.facebook.FacebookRequestError: com.facebook.FacebookException getException()>();

        virtualinvoke r0.<com.facebook.TestSession: void finishAuthOrReauth(com.facebook.AccessToken,java.lang.Exception)>(null, $r12);

        return null;

     label2:
        $z0 = <com.facebook.TestSession: boolean $assertionsDisabled>;

        if $z0 != 0 goto label3;

        if $r11 != null goto label3;

        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>()>();

        throw $r13;

     label3:
        $r3 = r0.<com.facebook.TestSession: com.facebook.TestSession$Mode mode>;

        $r4 = <com.facebook.TestSession$Mode: com.facebook.TestSession$Mode SHARED>;

        if $r3 != $r4 goto label4;

        $r2 = virtualinvoke $r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("name");

        interfaceinvoke $r11.<com.facebook.TestSession$TestAccount: void setName(java.lang.String)>($r2);

        staticinvoke <com.facebook.TestSession: void storeTestAccount(com.facebook.TestSession$TestAccount)>($r11);

     label4:
        specialinvoke r0.<com.facebook.TestSession: void finishAuthWithTestAccount(com.facebook.TestSession$TestAccount)>($r11);

        return $r11;
    }

    private static com.facebook.TestSession createTestSession(android.app.Activity, java.util.List, com.facebook.TestSession$Mode, java.lang.String)
    {
        java.lang.Throwable $r7;
        com.facebook.TestSession $r9;
        com.facebook.TestSession$Mode $r2;
        com.facebook.FacebookException $r6;
        java.lang.String[] $r8;
        java.util.List $r1;
        com.facebook.TestSession$TestTokenCachingStrategy $r4;
        java.lang.String $r3, $r5;
        android.app.Activity $r0;
        boolean $z0;

        $r0 := @parameter0: android.app.Activity;

        $r1 := @parameter1: java.util.List;

        $r2 := @parameter2: com.facebook.TestSession$Mode;

        $r3 := @parameter3: java.lang.String;

        entermonitor class "Lcom/facebook/TestSession;";

     label1:
        $r5 = <com.facebook.TestSession: java.lang.String testApplicationId>;

        $z0 = staticinvoke <com.facebook.internal.Utility: boolean isNullOrEmpty(java.lang.String)>($r5);

        if $z0 != 0 goto label2;

        $r5 = <com.facebook.TestSession: java.lang.String testApplicationSecret>;

        $z0 = staticinvoke <com.facebook.internal.Utility: boolean isNullOrEmpty(java.lang.String)>($r5);

        if $z0 == 0 goto label4;

     label2:
        $r6 = new com.facebook.FacebookException;

        specialinvoke $r6.<com.facebook.FacebookException: void <init>(java.lang.String)>("Must provide app ID and secret");

        throw $r6;

     label3:
        $r7 := @caughtexception;

        exitmonitor class "Lcom/facebook/TestSession;";

        throw $r7;

     label4:
        $z0 = staticinvoke <com.facebook.internal.Utility: boolean isNullOrEmpty(java.util.Collection)>($r1);

        if $z0 == 0 goto label7;

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "email";

        $r8[1] = "publish_actions";

        $r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r8);

     label5:
        $r9 = new com.facebook.TestSession;

        $r4 = new com.facebook.TestSession$TestTokenCachingStrategy;

        specialinvoke $r4.<com.facebook.TestSession$TestTokenCachingStrategy: void <init>(com.facebook.TestSession$TestTokenCachingStrategy)>(null);

        specialinvoke $r9.<com.facebook.TestSession: void <init>(android.app.Activity,java.util.List,com.facebook.TokenCachingStrategy,java.lang.String,com.facebook.TestSession$Mode)>($r0, $r1, $r4, $r3, $r2);

     label6:
        exitmonitor class "Lcom/facebook/TestSession;";

        return $r9;

     label7:
        goto label5;

        catch java.lang.Throwable from label1 to label3 with label3;
        catch java.lang.Throwable from label4 to label6 with label3;
    }

    private void deleteTestAccount(java.lang.String, java.lang.String)
    {
        com.facebook.TestSession r0;
        com.facebook.FacebookRequestError $r7;
        android.os.Bundle $r3;
        java.lang.Object[] $r9;
        com.facebook.FacebookException $r10;
        com.facebook.model.GraphObject $r8;
        com.facebook.HttpMethod $r5;
        com.facebook.Response $r6;
        com.facebook.Request $r4;
        java.lang.Boolean $r12;
        java.lang.Object $r11;
        java.lang.String $r1, $r2;

        r0 := @this: com.facebook.TestSession;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = new android.os.Bundle;

        specialinvoke $r3.<android.os.Bundle: void <init>()>();

        virtualinvoke $r3.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("access_token", $r2);

        $r4 = new com.facebook.Request;

        $r5 = <com.facebook.HttpMethod: com.facebook.HttpMethod DELETE>;

        specialinvoke $r4.<com.facebook.Request: void <init>(com.facebook.Session,java.lang.String,android.os.Bundle,com.facebook.HttpMethod)>(null, $r1, $r3, $r5);

        $r6 = virtualinvoke $r4.<com.facebook.Request: com.facebook.Response executeAndWait()>();

        $r7 = virtualinvoke $r6.<com.facebook.Response: com.facebook.FacebookRequestError getError()>();

        $r8 = virtualinvoke $r6.<com.facebook.Response: com.facebook.model.GraphObject getGraphObject()>();

        if $r7 == null goto label1;

        $r9 = newarray (java.lang.Object)[2];

        $r9[0] = $r1;

        $r10 = virtualinvoke $r7.<com.facebook.FacebookRequestError: com.facebook.FacebookException getException()>();

        $r1 = virtualinvoke $r10.<com.facebook.FacebookException: java.lang.String toString()>();

        $r9[1] = $r1;

        $r1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Could not delete test account %s: %s", $r9);

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("FacebookSDK.TestSession", $r1);

        return;

     label1:
        $r11 = interfaceinvoke $r8.<com.facebook.model.GraphObject: java.lang.Object getProperty(java.lang.String)>("FACEBOOK_NON_JSON_RESULT");

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        if $r11 != $r12 goto label2;

        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = $r1;

        $r1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Could not delete test account %s: unknown reason", $r9);

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("FacebookSDK.TestSession", $r1);

     label2:
        return;
    }

    private void findOrCreateSharedTestAccount()
    {
        com.facebook.TestSession r0;
        java.lang.String $r1;
        com.facebook.TestSession$TestAccount $r2;

        r0 := @this: com.facebook.TestSession;

        $r1 = specialinvoke r0.<com.facebook.TestSession: java.lang.String getSharedTestAccountIdentifier()>();

        $r2 = staticinvoke <com.facebook.TestSession: com.facebook.TestSession$TestAccount findTestAccountMatchingIdentifier(java.lang.String)>($r1);

        if $r2 == null goto label1;

        specialinvoke r0.<com.facebook.TestSession: void finishAuthWithTestAccount(com.facebook.TestSession$TestAccount)>($r2);

        return;

     label1:
        specialinvoke r0.<com.facebook.TestSession: com.facebook.TestSession$TestAccount createTestAccountAndFinishAuth()>();

        return;
    }

    private static com.facebook.TestSession$TestAccount findTestAccountMatchingIdentifier(java.lang.String)
    {
        java.lang.Throwable $r7;
        java.util.Iterator $r3;
        java.util.Collection $r2;
        com.facebook.TestSession$TestAccount $r4;
        java.util.Map $r1;
        java.lang.Object $r5;
        java.lang.String $r0, $r6;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        entermonitor class "Lcom/facebook/TestSession;";

     label1:
        staticinvoke <com.facebook.TestSession: void retrieveTestAccountsForAppIfNeeded()>();

        $r1 = <com.facebook.TestSession: java.util.Map appTestAccounts>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

     label3:
        if $z0 != 0 goto label5;

        $r4 = null;

     label4:
        exitmonitor class "Lcom/facebook/TestSession;";

        return $r4;

     label5:
        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (com.facebook.TestSession$TestAccount) $r5;

        $r6 = interfaceinvoke $r4.<com.facebook.TestSession$TestAccount: java.lang.String getName()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean contains(java.lang.CharSequence)>($r0);

     label6:
        if $z0 == 0 goto label2;

        goto label4;

     label7:
        $r7 := @caughtexception;

        exitmonitor class "Lcom/facebook/TestSession;";

        throw $r7;

        catch java.lang.Throwable from label1 to label3 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    private void finishAuthWithTestAccount(com.facebook.TestSession$TestAccount)
    {
        com.facebook.TestSession r0;
        java.util.List $r4;
        com.facebook.AccessToken $r5;
        com.facebook.AccessTokenSource $r2;
        java.lang.String $r3;
        com.facebook.TestSession$TestAccount $r1;

        r0 := @this: com.facebook.TestSession;

        $r1 := @parameter0: com.facebook.TestSession$TestAccount;

        $r3 = interfaceinvoke $r1.<com.facebook.TestSession$TestAccount: java.lang.String getId()>();

        r0.<com.facebook.TestSession: java.lang.String testAccountId> = $r3;

        $r3 = interfaceinvoke $r1.<com.facebook.TestSession$TestAccount: java.lang.String getAccessToken()>();

        $r4 = r0.<com.facebook.TestSession: java.util.List requestedPermissions>;

        $r2 = <com.facebook.AccessTokenSource: com.facebook.AccessTokenSource TEST_USER>;

        $r5 = staticinvoke <com.facebook.AccessToken: com.facebook.AccessToken createFromString(java.lang.String,java.util.List,com.facebook.AccessTokenSource)>($r3, $r4, $r2);

        virtualinvoke r0.<com.facebook.TestSession: void finishAuthOrReauth(com.facebook.AccessToken,java.lang.Exception)>($r5, null);

        return;
    }

    static final java.lang.String getAppAccessToken()
    {
        java.lang.StringBuilder $r0;
        java.lang.String $r1;

        $r0 = new java.lang.StringBuilder;

        $r1 = <com.facebook.TestSession: java.lang.String testApplicationId>;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>($r1);

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("|");

        $r1 = <com.facebook.TestSession: java.lang.String testApplicationSecret>;

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }

    private java.lang.String getPermissionsString()
    {
        com.facebook.TestSession r0;
        java.util.List $r1;
        java.lang.String $r2;

        r0 := @this: com.facebook.TestSession;

        $r1 = r0.<com.facebook.TestSession: java.util.List requestedPermissions>;

        $r2 = staticinvoke <android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>(",", $r1);

        return $r2;
    }

    private java.lang.String getSharedTestAccountIdentifier()
    {
        com.facebook.TestSession r0;
        int $i1;
        long $l0, $l2;
        java.lang.String $r1;

        r0 := @this: com.facebook.TestSession;

        $r1 = specialinvoke r0.<com.facebook.TestSession: java.lang.String getPermissionsString()>();

        $i1 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        $l0 = (long) $i1;

        $l0 = $l0 & 4294967295L;

        $r1 = r0.<com.facebook.TestSession: java.lang.String sessionUniqueUserTag>;

        if $r1 == null goto label2;

        $r1 = r0.<com.facebook.TestSession: java.lang.String sessionUniqueUserTag>;

        $i1 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        $l2 = (long) $i1;

        $l2 = $l2 & 4294967295L;

     label1:
        $l0 = $l2 ^ $l0;

        $r1 = specialinvoke r0.<com.facebook.TestSession: java.lang.String validNameStringFromInteger(long)>($l0);

        return $r1;

     label2:
        $l2 = 0L;

        goto label1;
    }

    public static java.lang.String getTestApplicationId()
    {
        java.lang.Throwable $r0;
        java.lang.String r1;

        entermonitor class "Lcom/facebook/TestSession;";

     label1:
        r1 = <com.facebook.TestSession: java.lang.String testApplicationId>;

     label2:
        exitmonitor class "Lcom/facebook/TestSession;";

        return r1;

     label3:
        $r0 := @caughtexception;

        exitmonitor class "Lcom/facebook/TestSession;";

        throw $r0;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static java.lang.String getTestApplicationSecret()
    {
        java.lang.Throwable $r0;
        java.lang.String r1;

        entermonitor class "Lcom/facebook/TestSession;";

     label1:
        r1 = <com.facebook.TestSession: java.lang.String testApplicationSecret>;

     label2:
        exitmonitor class "Lcom/facebook/TestSession;";

        return r1;

     label3:
        $r0 := @caughtexception;

        exitmonitor class "Lcom/facebook/TestSession;";

        throw $r0;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private static void populateTestAccounts(java.util.Collection, java.util.Collection)
    {
        java.lang.Throwable $r5;
        java.util.Iterator $r2;
        java.util.Collection $r0, $r1;
        com.facebook.TestSession$TestAccount $r4;
        com.facebook.TestSession$UserAccount $r6;
        java.util.Map $r7;
        java.lang.Object $r3;
        java.lang.String $r8;
        boolean $z0;

        $r0 := @parameter0: java.util.Collection;

        $r1 := @parameter1: java.util.Collection;

        entermonitor class "Lcom/facebook/TestSession;";

     label1:
        $r2 = interfaceinvoke $r0.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label5;

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

     label4:
        if $z0 != 0 goto label8;

        exitmonitor class "Lcom/facebook/TestSession;";

        return;

     label5:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (com.facebook.TestSession$TestAccount) $r3;

        staticinvoke <com.facebook.TestSession: void storeTestAccount(com.facebook.TestSession$TestAccount)>($r4);

     label6:
        goto label2;

     label7:
        $r5 := @caughtexception;

        exitmonitor class "Lcom/facebook/TestSession;";

        throw $r5;

     label8:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (com.facebook.TestSession$UserAccount) $r3;

        $r7 = <com.facebook.TestSession: java.util.Map appTestAccounts>;

        $r8 = interfaceinvoke $r6.<com.facebook.TestSession$UserAccount: java.lang.String getUid()>();

        $r3 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8);

        $r4 = (com.facebook.TestSession$TestAccount) $r3;

        if $r4 == null goto label3;

        $r8 = interfaceinvoke $r6.<com.facebook.TestSession$UserAccount: java.lang.String getName()>();

        interfaceinvoke $r4.<com.facebook.TestSession$TestAccount: void setName(java.lang.String)>($r8);

     label9:
        goto label3;

        catch java.lang.Throwable from label1 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private static void retrieveTestAccountsForAppIfNeeded()
    {
        java.lang.Throwable $r10;
        java.lang.Object[] $r2;
        android.os.Bundle $r4;
        com.facebook.model.GraphObject $r12;
        java.util.HashMap $r1;
        com.facebook.model.GraphObjectList $r14, $r17;
        org.json.JSONException $r11;
        org.json.JSONObject $r5;
        java.util.Map $r0;
        com.facebook.Response $r7;
        com.facebook.TestSession$FqlResult $r16;
        int $i0;
        java.lang.String $r3;
        com.facebook.TestSession$FqlResponse $r13;
        com.facebook.FacebookRequestError $r8;
        com.facebook.FacebookException $r9;
        com.facebook.Request $r6;
        java.lang.Object $r15;

        entermonitor class "Lcom/facebook/TestSession;";

     label01:
        $r0 = <com.facebook.TestSession: java.util.Map appTestAccounts>;

     label02:
        if $r0 == null goto label04;

     label03:
        exitmonitor class "Lcom/facebook/TestSession;";

        return;

     label04:
        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        <com.facebook.TestSession: java.util.Map appTestAccounts> = $r1;

        $r2 = newarray (java.lang.Object)[1];

        $r3 = <com.facebook.TestSession: java.lang.String testApplicationId>;

        $r2[0] = $r3;

        $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("SELECT id,access_token FROM test_account WHERE app_id = %s", $r2);

        $r4 = new android.os.Bundle;

        specialinvoke $r4.<android.os.Bundle: void <init>()>();

     label05:
        $r5 = new org.json.JSONObject;

     label06:
        specialinvoke $r5.<org.json.JSONObject: void <init>()>();

        virtualinvoke $r5.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("test_accounts", $r3);

        virtualinvoke $r5.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("users", "SELECT uid,name FROM user WHERE uid IN (SELECT id FROM #test_accounts)");

     label07:
        $r3 = virtualinvoke $r5.<org.json.JSONObject: java.lang.String toString()>();

        virtualinvoke $r4.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("q", $r3);

        $r3 = staticinvoke <com.facebook.TestSession: java.lang.String getAppAccessToken()>();

        virtualinvoke $r4.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("access_token", $r3);

        $r6 = new com.facebook.Request;

        specialinvoke $r6.<com.facebook.Request: void <init>(com.facebook.Session,java.lang.String,android.os.Bundle,com.facebook.HttpMethod)>(null, "fql", $r4, null);

        $r7 = virtualinvoke $r6.<com.facebook.Request: com.facebook.Response executeAndWait()>();

        $r8 = virtualinvoke $r7.<com.facebook.Response: com.facebook.FacebookRequestError getError()>();

        if $r8 == null goto label11;

        $r8 = virtualinvoke $r7.<com.facebook.Response: com.facebook.FacebookRequestError getError()>();

        $r9 = virtualinvoke $r8.<com.facebook.FacebookRequestError: com.facebook.FacebookException getException()>();

        throw $r9;

     label08:
        $r10 := @caughtexception;

        exitmonitor class "Lcom/facebook/TestSession;";

        throw $r10;

     label09:
        $r11 := @caughtexception;

     label10:
        $r9 = new com.facebook.FacebookException;

        specialinvoke $r9.<com.facebook.FacebookException: void <init>(java.lang.Throwable)>($r11);

        throw $r9;

     label11:
        $r12 = virtualinvoke $r7.<com.facebook.Response: com.facebook.model.GraphObject getGraphObjectAs(java.lang.Class)>(class "Lcom/facebook/TestSession$FqlResponse;");

        $r13 = (com.facebook.TestSession$FqlResponse) $r12;

        $r14 = interfaceinvoke $r13.<com.facebook.TestSession$FqlResponse: com.facebook.model.GraphObjectList getData()>();

        if $r14 == null goto label12;

        $i0 = interfaceinvoke $r14.<com.facebook.model.GraphObjectList: int size()>();

        if $i0 == 2 goto label13;

     label12:
        $r9 = new com.facebook.FacebookException;

        specialinvoke $r9.<com.facebook.FacebookException: void <init>(java.lang.String)>("Unexpected number of results from FQL query");

        throw $r9;

     label13:
        $r15 = interfaceinvoke $r14.<com.facebook.model.GraphObjectList: java.lang.Object get(int)>(0);

        $r16 = (com.facebook.TestSession$FqlResult) $r15;

        $r17 = interfaceinvoke $r16.<com.facebook.TestSession$FqlResult: com.facebook.model.GraphObjectList getFqlResultSet()>();

        $r17 = interfaceinvoke $r17.<com.facebook.model.GraphObjectList: com.facebook.model.GraphObjectList castToListOf(java.lang.Class)>(class "Lcom/facebook/TestSession$TestAccount;");

        $r15 = interfaceinvoke $r14.<com.facebook.model.GraphObjectList: java.lang.Object get(int)>(1);

        $r16 = (com.facebook.TestSession$FqlResult) $r15;

        $r14 = interfaceinvoke $r16.<com.facebook.TestSession$FqlResult: com.facebook.model.GraphObjectList getFqlResultSet()>();

        $r14 = interfaceinvoke $r14.<com.facebook.model.GraphObjectList: com.facebook.model.GraphObjectList castToListOf(java.lang.Class)>(class "Lcom/facebook/TestSession$UserAccount;");

        staticinvoke <com.facebook.TestSession: void populateTestAccounts(java.util.Collection,java.util.Collection)>($r17, $r14);

     label14:
        goto label03;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch org.json.JSONException from label06 to label07 with label09;
        catch java.lang.Throwable from label05 to label07 with label08;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.lang.Throwable from label10 to label14 with label08;
    }

    public static void setTestApplicationId(java.lang.String)
    {
        java.lang.Throwable $r3;
        com.facebook.FacebookException $r2;
        java.lang.String $r0, $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        entermonitor class "Lcom/facebook/TestSession;";

     label1:
        $r1 = <com.facebook.TestSession: java.lang.String testApplicationId>;

        if $r1 == null goto label3;

        $r1 = <com.facebook.TestSession: java.lang.String testApplicationId>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z0 != 0 goto label3;

        $r2 = new com.facebook.FacebookException;

        specialinvoke $r2.<com.facebook.FacebookException: void <init>(java.lang.String)>("Can\'t have more than one test application ID");

        throw $r2;

     label2:
        $r3 := @caughtexception;

        exitmonitor class "Lcom/facebook/TestSession;";

        throw $r3;

     label3:
        <com.facebook.TestSession: java.lang.String testApplicationId> = $r0;

     label4:
        exitmonitor class "Lcom/facebook/TestSession;";

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public static void setTestApplicationSecret(java.lang.String)
    {
        java.lang.Throwable $r3;
        com.facebook.FacebookException $r2;
        java.lang.String $r0, $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        entermonitor class "Lcom/facebook/TestSession;";

     label1:
        $r1 = <com.facebook.TestSession: java.lang.String testApplicationSecret>;

        if $r1 == null goto label3;

        $r1 = <com.facebook.TestSession: java.lang.String testApplicationSecret>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z0 != 0 goto label3;

        $r2 = new com.facebook.FacebookException;

        specialinvoke $r2.<com.facebook.FacebookException: void <init>(java.lang.String)>("Can\'t have more than one test application secret");

        throw $r2;

     label2:
        $r3 := @caughtexception;

        exitmonitor class "Lcom/facebook/TestSession;";

        throw $r3;

     label3:
        <com.facebook.TestSession: java.lang.String testApplicationSecret> = $r0;

     label4:
        exitmonitor class "Lcom/facebook/TestSession;";

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    private static void storeTestAccount(com.facebook.TestSession$TestAccount)
    {
        java.lang.Throwable $r3;
        java.util.Map $r2;
        java.lang.String $r1;
        com.facebook.TestSession$TestAccount $r0;

        $r0 := @parameter0: com.facebook.TestSession$TestAccount;

        entermonitor class "Lcom/facebook/TestSession;";

     label1:
        $r2 = <com.facebook.TestSession: java.util.Map appTestAccounts>;

        $r1 = interfaceinvoke $r0.<com.facebook.TestSession$TestAccount: java.lang.String getId()>();

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r0);

     label2:
        exitmonitor class "Lcom/facebook/TestSession;";

        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor class "Lcom/facebook/TestSession;";

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private java.lang.String validNameStringFromInteger(long)
    {
        com.facebook.TestSession r0;
        long $l0;
        char $c4, $c5;
        int $i1, $i2, $i3, $i6;
        char[] $r3;
        java.lang.StringBuilder $r1, $r4;
        java.lang.String $r2;

        r0 := @this: com.facebook.TestSession;

        $l0 := @parameter0: long;

        $r2 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l0);

        $r4 = new java.lang.StringBuilder;

        $r1 = $r4;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Perm");

        $r3 = virtualinvoke $r2.<java.lang.String: char[] toCharArray()>();

        $i1 = lengthof $r3;

        $i2 = 0;

        $i3 = 0;

     label1:
        if $i2 < $i1 goto label2;

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;

     label2:
        $c4 = $r3[$i2];

        $i6 = (int) $c4;

        if $i6 != $i3 goto label3;

        $i3 = (int) $c4;

        $i3 = $i3 + 10;

        $c4 = (char) $i3;

     label3:
        $i3 = (int) $c4;

        $i3 = $i3 + 97;

        $i3 = $i3 + -48;

        $c5 = (char) $i3;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5);

        $i2 = $i2 + 1;

        $i3 = $c4;

        goto label1;
    }

    void authorize(com.facebook.Session$AuthorizationRequest)
    {
        com.facebook.TestSession r0;
        com.facebook.TestSession$Mode $r2, $r3;
        com.facebook.Session$AuthorizationRequest $r1;

        r0 := @this: com.facebook.TestSession;

        $r1 := @parameter0: com.facebook.Session$AuthorizationRequest;

        $r2 = r0.<com.facebook.TestSession: com.facebook.TestSession$Mode mode>;

        $r3 = <com.facebook.TestSession$Mode: com.facebook.TestSession$Mode PRIVATE>;

        if $r2 != $r3 goto label1;

        specialinvoke r0.<com.facebook.TestSession: com.facebook.TestSession$TestAccount createTestAccountAndFinishAuth()>();

        return;

     label1:
        specialinvoke r0.<com.facebook.TestSession: void findOrCreateSharedTestAccount()>();

        return;
    }

    void extendAccessToken()
    {
        com.facebook.TestSession r0;

        r0 := @this: com.facebook.TestSession;

        r0.<com.facebook.TestSession: boolean wasAskedToExtendAccessToken> = 1;

        specialinvoke r0.<com.facebook.Session: void extendAccessToken()>();

        return;
    }

    void fakeTokenRefreshAttempt()
    {
        com.facebook.TestSession r0;
        com.facebook.Session$TokenRefreshRequest $r1;

        r0 := @this: com.facebook.TestSession;

        $r1 = new com.facebook.Session$TokenRefreshRequest;

        specialinvoke $r1.<com.facebook.Session$TokenRefreshRequest: void <init>(com.facebook.Session)>(r0);

        virtualinvoke r0.<com.facebook.TestSession: void setCurrentTokenRefreshRequest(com.facebook.Session$TokenRefreshRequest)>($r1);

        return;
    }

    void forceExtendAccessToken(boolean)
    {
        com.facebook.TestSession r0;
        com.facebook.AccessToken $r4, $r5;
        java.util.Date $r1, $r3;
        java.util.List $r7;
        com.facebook.AccessTokenSource $r2;
        java.lang.String $r6;
        boolean $z0;

        r0 := @this: com.facebook.TestSession;

        $z0 := @parameter0: boolean;

        $r4 = virtualinvoke r0.<com.facebook.TestSession: com.facebook.AccessToken getTokenInfo()>();

        $r5 = new com.facebook.AccessToken;

        $r6 = virtualinvoke $r4.<com.facebook.AccessToken: java.lang.String getToken()>();

        $r1 = new java.util.Date;

        specialinvoke $r1.<java.util.Date: void <init>()>();

        $r7 = virtualinvoke $r4.<com.facebook.AccessToken: java.util.List getPermissions()>();

        $r2 = <com.facebook.AccessTokenSource: com.facebook.AccessTokenSource TEST_USER>;

        $r3 = new java.util.Date;

        specialinvoke $r3.<java.util.Date: void <init>(long)>(0L);

        specialinvoke $r5.<com.facebook.AccessToken: void <init>(java.lang.String,java.util.Date,java.util.List,com.facebook.AccessTokenSource,java.util.Date)>($r6, $r1, $r7, $r2, $r3);

        virtualinvoke r0.<com.facebook.TestSession: void setTokenInfo(com.facebook.AccessToken)>($r5);

        $r1 = new java.util.Date;

        specialinvoke $r1.<java.util.Date: void <init>(long)>(0L);

        virtualinvoke r0.<com.facebook.TestSession: void setLastAttemptedTokenExtendDate(java.util.Date)>($r1);

        return;
    }

    public final java.lang.String getTestUserId()
    {
        com.facebook.TestSession r0;
        java.lang.String r1;

        r0 := @this: com.facebook.TestSession;

        r1 = r0.<com.facebook.TestSession: java.lang.String testAccountId>;

        return r1;
    }

    boolean getWasAskedToExtendAccessToken()
    {
        com.facebook.TestSession r0;
        boolean z0;

        r0 := @this: com.facebook.TestSession;

        z0 = r0.<com.facebook.TestSession: boolean wasAskedToExtendAccessToken>;

        return z0;
    }

    void postStateChange(com.facebook.SessionState, com.facebook.SessionState, java.lang.Exception)
    {
        com.facebook.TestSession r0;
        com.facebook.TestSession$Mode $r5, $r6;
        java.lang.Exception $r3;
        com.facebook.SessionState $r1, $r2;
        java.lang.String $r4, $r7;
        boolean $z0;

        r0 := @this: com.facebook.TestSession;

        $r1 := @parameter0: com.facebook.SessionState;

        $r2 := @parameter1: com.facebook.SessionState;

        $r3 := @parameter2: java.lang.Exception;

        $r4 = r0.<com.facebook.TestSession: java.lang.String testAccountId>;

        specialinvoke r0.<com.facebook.Session: void postStateChange(com.facebook.SessionState,com.facebook.SessionState,java.lang.Exception)>($r1, $r2, $r3);

        $z0 = virtualinvoke $r2.<com.facebook.SessionState: boolean isClosed()>();

        if $z0 == 0 goto label1;

        if $r4 == null goto label1;

        $r6 = r0.<com.facebook.TestSession: com.facebook.TestSession$Mode mode>;

        $r5 = <com.facebook.TestSession$Mode: com.facebook.TestSession$Mode PRIVATE>;

        if $r6 != $r5 goto label1;

        $r7 = staticinvoke <com.facebook.TestSession: java.lang.String getAppAccessToken()>();

        specialinvoke r0.<com.facebook.TestSession: void deleteTestAccount(java.lang.String,java.lang.String)>($r4, $r7);

     label1:
        return;
    }

    boolean shouldExtendAccessToken()
    {
        com.facebook.TestSession r0;
        boolean $z0;

        r0 := @this: com.facebook.TestSession;

        $z0 = specialinvoke r0.<com.facebook.Session: boolean shouldExtendAccessToken()>();

        r0.<com.facebook.TestSession: boolean wasAskedToExtendAccessToken> = 0;

        return $z0;
    }

    public final java.lang.String toString()
    {
        com.facebook.TestSession r0;
        java.lang.StringBuilder $r2;
        java.lang.String $r1, $r3;

        r0 := @this: com.facebook.TestSession;

        $r1 = specialinvoke r0.<com.facebook.Session: java.lang.String toString()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("{TestSession testUserId:");

        $r3 = r0.<com.facebook.TestSession: java.lang.String testAccountId>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }
}
