class cn.hi321.browser.weave.client.Base64Encoder extends java.lang.Object
{
    protected final byte[] decodingTable;
    protected final byte[] encodingTable;
    protected byte padding;

    public void <init>()
    {
        byte[] $r1;
        cn.hi321.browser.weave.client.Base64Encoder r0;

        r0 := @this: cn.hi321.browser.weave.client.Base64Encoder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (byte)[64];

        $r1[0] = 65;

        $r1[1] = 66;

        $r1[2] = 67;

        $r1[3] = 68;

        $r1[4] = 69;

        $r1[5] = 70;

        $r1[6] = 71;

        $r1[7] = 72;

        $r1[8] = 73;

        $r1[9] = 74;

        $r1[10] = 75;

        $r1[11] = 76;

        $r1[12] = 77;

        $r1[13] = 78;

        $r1[14] = 79;

        $r1[15] = 80;

        $r1[16] = 81;

        $r1[17] = 82;

        $r1[18] = 83;

        $r1[19] = 84;

        $r1[20] = 85;

        $r1[21] = 86;

        $r1[22] = 87;

        $r1[23] = 88;

        $r1[24] = 89;

        $r1[25] = 90;

        $r1[26] = 97;

        $r1[27] = 98;

        $r1[28] = 99;

        $r1[29] = 100;

        $r1[30] = 101;

        $r1[31] = 102;

        $r1[32] = 103;

        $r1[33] = 104;

        $r1[34] = 105;

        $r1[35] = 106;

        $r1[36] = 107;

        $r1[37] = 108;

        $r1[38] = 109;

        $r1[39] = 110;

        $r1[40] = 111;

        $r1[41] = 112;

        $r1[42] = 113;

        $r1[43] = 114;

        $r1[44] = 115;

        $r1[45] = 116;

        $r1[46] = 117;

        $r1[47] = 118;

        $r1[48] = 119;

        $r1[49] = 120;

        $r1[50] = 121;

        $r1[51] = 122;

        $r1[52] = 48;

        $r1[53] = 49;

        $r1[54] = 50;

        $r1[55] = 51;

        $r1[56] = 52;

        $r1[57] = 53;

        $r1[58] = 54;

        $r1[59] = 55;

        $r1[60] = 56;

        $r1[61] = 57;

        $r1[62] = 43;

        $r1[63] = 47;

        r0.<cn.hi321.browser.weave.client.Base64Encoder: byte[] encodingTable> = $r1;

        r0.<cn.hi321.browser.weave.client.Base64Encoder: byte padding> = 61;

        $r1 = newarray (byte)[128];

        r0.<cn.hi321.browser.weave.client.Base64Encoder: byte[] decodingTable> = $r1;

        virtualinvoke r0.<cn.hi321.browser.weave.client.Base64Encoder: void initialiseDecodingTable()>();

        return;
    }

    private int decodeLastBlock(java.io.OutputStream, char, char, char, char) throws java.io.IOException
    {
        java.io.OutputStream $r1;
        byte[] $r2;
        char $c0, $c1, $c2, $c3;
        cn.hi321.browser.weave.client.Base64Encoder r0;
        byte b4, b5, b8, b9;
        int $i6, $i7;

        r0 := @this: cn.hi321.browser.weave.client.Base64Encoder;

        $r1 := @parameter0: java.io.OutputStream;

        $c0 := @parameter1: char;

        $c1 := @parameter2: char;

        $c2 := @parameter3: char;

        $c3 := @parameter4: char;

        b4 = r0.<cn.hi321.browser.weave.client.Base64Encoder: byte padding>;

        $i6 = (int) $c2;

        $i7 = (int) b4;

        if $i6 != $i7 goto label1;

        $r2 = r0.<cn.hi321.browser.weave.client.Base64Encoder: byte[] decodingTable>;

        $i6 = (int) $c0;

        b4 = $r2[$i6];

        $r2 = r0.<cn.hi321.browser.weave.client.Base64Encoder: byte[] decodingTable>;

        $i6 = (int) $c1;

        b5 = $r2[$i6];

        $i6 = (int) b4;

        $i6 = $i6 << 2;

        $i7 = (int) b5;

        $i7 = $i7 >> 4;

        $i6 = $i6 | $i7;

        virtualinvoke $r1.<java.io.OutputStream: void write(int)>($i6);

        return 1;

     label1:
        b4 = r0.<cn.hi321.browser.weave.client.Base64Encoder: byte padding>;

        $i6 = (int) $c3;

        $i7 = (int) b4;

        if $i6 != $i7 goto label2;

        $r2 = r0.<cn.hi321.browser.weave.client.Base64Encoder: byte[] decodingTable>;

        $i6 = (int) $c0;

        b4 = $r2[$i6];

        $r2 = r0.<cn.hi321.browser.weave.client.Base64Encoder: byte[] decodingTable>;

        $i6 = (int) $c1;

        b5 = $r2[$i6];

        $r2 = r0.<cn.hi321.browser.weave.client.Base64Encoder: byte[] decodingTable>;

        $i6 = (int) $c2;

        b8 = $r2[$i6];

        $i6 = (int) b4;

        $i6 = $i6 << 2;

        $i7 = (int) b5;

        $i7 = $i7 >> 4;

        $i6 = $i6 | $i7;

        virtualinvoke $r1.<java.io.OutputStream: void write(int)>($i6);

        $i6 = (int) b5;

        $i6 = $i6 << 4;

        $i7 = (int) b8;

        $i7 = $i7 >> 2;

        $i6 = $i6 | $i7;

        virtualinvoke $r1.<java.io.OutputStream: void write(int)>($i6);

        return 2;

     label2:
        $r2 = r0.<cn.hi321.browser.weave.client.Base64Encoder: byte[] decodingTable>;

        $i6 = (int) $c0;

        b5 = $r2[$i6];

        $r2 = r0.<cn.hi321.browser.weave.client.Base64Encoder: byte[] decodingTable>;

        $i6 = (int) $c1;

        b8 = $r2[$i6];

        $r2 = r0.<cn.hi321.browser.weave.client.Base64Encoder: byte[] decodingTable>;

        $i6 = (int) $c2;

        b9 = $r2[$i6];

        $r2 = r0.<cn.hi321.browser.weave.client.Base64Encoder: byte[] decodingTable>;

        $i6 = (int) $c3;

        b4 = $r2[$i6];

        $i6 = (int) b5;

        $i6 = $i6 << 2;

        $i7 = (int) b8;

        $i7 = $i7 >> 4;

        $i6 = $i6 | $i7;

        virtualinvoke $r1.<java.io.OutputStream: void write(int)>($i6);

        $i6 = (int) b8;

        $i6 = $i6 << 4;

        $i7 = (int) b9;

        $i7 = $i7 >> 2;

        $i6 = $i6 | $i7;

        virtualinvoke $r1.<java.io.OutputStream: void write(int)>($i6);

        $i6 = (int) b9;

        $i6 = $i6 << 6;

        $i7 = (int) b4;

        $i6 = $i6 | $i7;

        virtualinvoke $r1.<java.io.OutputStream: void write(int)>($i6);

        return 3;
    }

    private boolean ignore(char)
    {
        int $i1;
        char $c0;
        cn.hi321.browser.weave.client.Base64Encoder r0;

        r0 := @this: cn.hi321.browser.weave.client.Base64Encoder;

        $c0 := @parameter0: char;

        $i1 = (int) $c0;

        if $i1 == 10 goto label1;

        $i1 = (int) $c0;

        if $i1 == 13 goto label1;

        $i1 = (int) $c0;

        if $i1 == 9 goto label1;

        $i1 = (int) $c0;

        if $i1 == 32 goto label1;

        return 0;

     label1:
        return 1;
    }

    private int nextI(java.lang.String, int, int)
    {
        int $i0, $i1;
        char $c2;
        java.lang.String $r1;
        cn.hi321.browser.weave.client.Base64Encoder r0;
        boolean $z0;

        r0 := @this: cn.hi321.browser.weave.client.Base64Encoder;

        $r1 := @parameter0: java.lang.String;

        $i1 := @parameter1: int;

        $i0 := @parameter2: int;

     label1:
        if $i1 >= $i0 goto label3;

        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i1);

        $z0 = specialinvoke r0.<cn.hi321.browser.weave.client.Base64Encoder: boolean ignore(char)>($c2);

        if $z0 != 0 goto label2;

        return $i1;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return $i1;
    }

    private int nextI(byte[], int, int)
    {
        byte[] $r1;
        byte $b2;
        int $i0, $i1;
        char $c3;
        cn.hi321.browser.weave.client.Base64Encoder r0;
        boolean $z0;

        r0 := @this: cn.hi321.browser.weave.client.Base64Encoder;

        $r1 := @parameter0: byte[];

        $i1 := @parameter1: int;

        $i0 := @parameter2: int;

     label1:
        if $i1 >= $i0 goto label3;

        $b2 = $r1[$i1];

        $c3 = (char) $b2;

        $z0 = specialinvoke r0.<cn.hi321.browser.weave.client.Base64Encoder: boolean ignore(char)>($c3);

        if $z0 != 0 goto label2;

        return $i1;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return $i1;
    }

    public int decode(java.lang.String, java.io.OutputStream) throws java.io.IOException
    {
        byte[] $r3;
        byte b0, b1, b2, b3;
        int i4, i5, $i6, $i7, i8, $i13;
        java.lang.String $r1;
        boolean $z0;
        java.io.OutputStream $r2;
        char $c9, $c10, $c11, $c12;
        cn.hi321.browser.weave.client.Base64Encoder r0;

        r0 := @this: cn.hi321.browser.weave.client.Base64Encoder;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.io.OutputStream;

        i5 = 0;

        $i6 = virtualinvoke $r1.<java.lang.String: int length()>();

     label1:
        if $i6 > 0 goto label4;

     label2:
        i4 = $i6 + -4;

        i8 = specialinvoke r0.<cn.hi321.browser.weave.client.Base64Encoder: int nextI(java.lang.String,int,int)>($r1, 0, i4);

     label3:
        if i8 < i4 goto label5;

        i4 = $i6 + -4;

        $c9 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i4);

        i4 = $i6 + -3;

        $c10 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i4);

        i4 = $i6 + -2;

        $c11 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i4);

        $i6 = $i6 + -1;

        $c12 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i6);

        $i6 = specialinvoke r0.<cn.hi321.browser.weave.client.Base64Encoder: int decodeLastBlock(java.io.OutputStream,char,char,char,char)>($r2, $c9, $c10, $c11, $c12);

        i5 = i5 + $i6;

        return i5;

     label4:
        i4 = $i6 + -1;

        $c9 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i4);

        $z0 = specialinvoke r0.<cn.hi321.browser.weave.client.Base64Encoder: boolean ignore(char)>($c9);

        if $z0 == 0 goto label2;

        $i6 = $i6 + -1;

        goto label1;

     label5:
        $r3 = r0.<cn.hi321.browser.weave.client.Base64Encoder: byte[] decodingTable>;

        $i7 = i8 + 1;

        $c9 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i8);

        i8 = (int) $c9;

        b0 = $r3[i8];

        i8 = specialinvoke r0.<cn.hi321.browser.weave.client.Base64Encoder: int nextI(java.lang.String,int,int)>($r1, $i7, i4);

        $r3 = r0.<cn.hi321.browser.weave.client.Base64Encoder: byte[] decodingTable>;

        $i7 = i8 + 1;

        $c9 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i8);

        i8 = (int) $c9;

        b1 = $r3[i8];

        i8 = specialinvoke r0.<cn.hi321.browser.weave.client.Base64Encoder: int nextI(java.lang.String,int,int)>($r1, $i7, i4);

        $r3 = r0.<cn.hi321.browser.weave.client.Base64Encoder: byte[] decodingTable>;

        $i7 = i8 + 1;

        $c9 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i8);

        i8 = (int) $c9;

        b2 = $r3[i8];

        i8 = specialinvoke r0.<cn.hi321.browser.weave.client.Base64Encoder: int nextI(java.lang.String,int,int)>($r1, $i7, i4);

        $r3 = r0.<cn.hi321.browser.weave.client.Base64Encoder: byte[] decodingTable>;

        $i7 = i8 + 1;

        $c9 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i8);

        i8 = (int) $c9;

        b3 = $r3[i8];

        i8 = (int) b0;

        i8 = i8 << 2;

        $i13 = (int) b1;

        $i13 = $i13 >> 4;

        i8 = i8 | $i13;

        virtualinvoke $r2.<java.io.OutputStream: void write(int)>(i8);

        i8 = (int) b1;

        i8 = i8 << 4;

        $i13 = (int) b2;

        $i13 = $i13 >> 2;

        i8 = i8 | $i13;

        virtualinvoke $r2.<java.io.OutputStream: void write(int)>(i8);

        i8 = (int) b2;

        i8 = i8 << 6;

        $i13 = (int) b3;

        i8 = i8 | $i13;

        virtualinvoke $r2.<java.io.OutputStream: void write(int)>(i8);

        i5 = i5 + 3;

        i8 = specialinvoke r0.<cn.hi321.browser.weave.client.Base64Encoder: int nextI(java.lang.String,int,int)>($r1, $i7, i4);

        goto label3;
    }

    public int decode(byte[], int, int, java.io.OutputStream) throws java.io.IOException
    {
        byte[] $r1, $r3;
        byte b6, b7, b8, b9;
        int $i0, $i1, i10, i11, i12, $i13;
        boolean $z0;
        java.io.OutputStream $r2;
        char $c2, $c3, $c4, $c5;
        cn.hi321.browser.weave.client.Base64Encoder r0;

        r0 := @this: cn.hi321.browser.weave.client.Base64Encoder;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: java.io.OutputStream;

        i11 = 0;

        $i1 = $i0 + $i1;

     label1:
        if $i1 > $i0 goto label4;

     label2:
        i10 = -4;

        i10 = $i1 + i10;

        i12 = specialinvoke r0.<cn.hi321.browser.weave.client.Base64Encoder: int nextI(byte[],int,int)>($r1, $i0, i10);

     label3:
        if i12 < i10 goto label5;

        $i0 = -4;

        $i0 = $i1 + $i0;

        b6 = $r1[$i0];

        $c2 = (char) b6;

        $i0 = -3;

        $i0 = $i1 + $i0;

        b6 = $r1[$i0];

        $c3 = (char) b6;

        $i0 = -2;

        $i0 = $i1 + $i0;

        b6 = $r1[$i0];

        $c4 = (char) b6;

        $i0 = -1;

        $i0 = $i1 + $i0;

        b6 = $r1[$i0];

        $c5 = (char) b6;

        $i0 = specialinvoke r0.<cn.hi321.browser.weave.client.Base64Encoder: int decodeLastBlock(java.io.OutputStream,char,char,char,char)>($r2, $c2, $c3, $c4, $c5);

        $i0 = i11 + $i0;

        return $i0;

     label4:
        i10 = -1;

        i10 = $i1 + i10;

        b6 = $r1[i10];

        $c2 = (char) b6;

        $z0 = specialinvoke r0.<cn.hi321.browser.weave.client.Base64Encoder: boolean ignore(char)>($c2);

        if $z0 == 0 goto label2;

        i10 = -1;

        $i1 = $i1 + i10;

        goto label1;

     label5:
        $r3 = r0.<cn.hi321.browser.weave.client.Base64Encoder: byte[] decodingTable>;

        $i0 = i12 + 1;

        b6 = $r1[i12];

        i12 = (int) b6;

        b6 = $r3[i12];

        i12 = specialinvoke r0.<cn.hi321.browser.weave.client.Base64Encoder: int nextI(byte[],int,int)>($r1, $i0, i10);

        $r3 = r0.<cn.hi321.browser.weave.client.Base64Encoder: byte[] decodingTable>;

        $i0 = i12 + 1;

        b7 = $r1[i12];

        i12 = (int) b7;

        b7 = $r3[i12];

        i12 = specialinvoke r0.<cn.hi321.browser.weave.client.Base64Encoder: int nextI(byte[],int,int)>($r1, $i0, i10);

        $r3 = r0.<cn.hi321.browser.weave.client.Base64Encoder: byte[] decodingTable>;

        $i0 = i12 + 1;

        b8 = $r1[i12];

        i12 = (int) b8;

        b8 = $r3[i12];

        i12 = specialinvoke r0.<cn.hi321.browser.weave.client.Base64Encoder: int nextI(byte[],int,int)>($r1, $i0, i10);

        $r3 = r0.<cn.hi321.browser.weave.client.Base64Encoder: byte[] decodingTable>;

        $i0 = i12 + 1;

        b9 = $r1[i12];

        i12 = (int) b9;

        b9 = $r3[i12];

        i12 = (int) b6;

        i12 = i12 << 2;

        $i13 = (int) b7;

        $i13 = $i13 >> 4;

        i12 = i12 | $i13;

        virtualinvoke $r2.<java.io.OutputStream: void write(int)>(i12);

        i12 = (int) b7;

        i12 = i12 << 4;

        $i13 = (int) b8;

        $i13 = $i13 >> 2;

        i12 = i12 | $i13;

        virtualinvoke $r2.<java.io.OutputStream: void write(int)>(i12);

        i12 = (int) b8;

        i12 = i12 << 6;

        $i13 = (int) b9;

        i12 = i12 | $i13;

        virtualinvoke $r2.<java.io.OutputStream: void write(int)>(i12);

        i11 = i11 + 3;

        i12 = specialinvoke r0.<cn.hi321.browser.weave.client.Base64Encoder: int nextI(byte[],int,int)>($r1, $i0, i10);

        goto label3;
    }

    public int encode(byte[], int, int, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream $r2;
        byte[] $r1, $r3;
        cn.hi321.browser.weave.client.Base64Encoder r0;
        short s2, s3, s4;
        byte $b8;
        int $i0, $i1, i5, i6, i7, $i9;

        r0 := @this: cn.hi321.browser.weave.client.Base64Encoder;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: java.io.OutputStream;

        i6 = $i1 % 3;

        $i1 = $i1 - i6;

        i7 = $i0;

     label1:
        i5 = $i0 + $i1;

        if i7 < i5 goto label4;

        lookupswitch(i6)
        {
            case 0: goto label2;
            case 1: goto label5;
            case 2: goto label6;
            default: goto label2;
        };

     label2:
        $i0 = $i1 / 3;

        $i0 = $i0 * 4;

        if i6 != 0 goto label7;

        $b8 = 0;

     label3:
        $i0 = $b8 + $i0;

        return $i0;

     label4:
        $b8 = $r1[i7];

        s2 = (short) $b8;

        s2 = s2 & 255;

        i5 = i7 + 1;

        $b8 = $r1[i5];

        s3 = (short) $b8;

        s3 = s3 & 255;

        i5 = i7 + 2;

        $b8 = $r1[i5];

        s4 = (short) $b8;

        s4 = s4 & 255;

        $r3 = r0.<cn.hi321.browser.weave.client.Base64Encoder: byte[] encodingTable>;

        i5 = (int) s2;

        i5 = i5 >>> 2;

        i5 = i5 & 63;

        $b8 = $r3[i5];

        i5 = (int) $b8;

        virtualinvoke $r2.<java.io.OutputStream: void write(int)>(i5);

        $r3 = r0.<cn.hi321.browser.weave.client.Base64Encoder: byte[] encodingTable>;

        i5 = (int) s2;

        i5 = i5 << 4;

        $i9 = (int) s3;

        $i9 = $i9 >>> 4;

        i5 = i5 | $i9;

        i5 = i5 & 63;

        $b8 = $r3[i5];

        i5 = (int) $b8;

        virtualinvoke $r2.<java.io.OutputStream: void write(int)>(i5);

        $r3 = r0.<cn.hi321.browser.weave.client.Base64Encoder: byte[] encodingTable>;

        i5 = (int) s3;

        i5 = i5 << 2;

        $i9 = (int) s4;

        $i9 = $i9 >>> 6;

        i5 = i5 | $i9;

        i5 = i5 & 63;

        $b8 = $r3[i5];

        i5 = (int) $b8;

        virtualinvoke $r2.<java.io.OutputStream: void write(int)>(i5);

        $r3 = r0.<cn.hi321.browser.weave.client.Base64Encoder: byte[] encodingTable>;

        s2 = s4 & 63;

        i5 = (int) s2;

        $b8 = $r3[i5];

        i5 = (int) $b8;

        virtualinvoke $r2.<java.io.OutputStream: void write(int)>(i5);

        i7 = i7 + 3;

        goto label1;

     label5:
        $i0 = $i0 + $i1;

        $b8 = $r1[$i0];

        s2 = (short) $b8;

        s2 = s2 & 255;

        $i0 = (int) s2;

        $i0 = $i0 >>> 2;

        $i0 = $i0 & 63;

        i7 = (int) s2;

        i7 = i7 << 4;

        i7 = i7 & 63;

        $r1 = r0.<cn.hi321.browser.weave.client.Base64Encoder: byte[] encodingTable>;

        $b8 = $r1[$i0];

        $i0 = (int) $b8;

        virtualinvoke $r2.<java.io.OutputStream: void write(int)>($i0);

        $r1 = r0.<cn.hi321.browser.weave.client.Base64Encoder: byte[] encodingTable>;

        $b8 = $r1[i7];

        $i0 = (int) $b8;

        virtualinvoke $r2.<java.io.OutputStream: void write(int)>($i0);

        $b8 = r0.<cn.hi321.browser.weave.client.Base64Encoder: byte padding>;

        $i0 = (int) $b8;

        virtualinvoke $r2.<java.io.OutputStream: void write(int)>($i0);

        $b8 = r0.<cn.hi321.browser.weave.client.Base64Encoder: byte padding>;

        $i0 = (int) $b8;

        virtualinvoke $r2.<java.io.OutputStream: void write(int)>($i0);

        goto label2;

     label6:
        i7 = $i0 + $i1;

        $b8 = $r1[i7];

        s2 = (short) $b8;

        s2 = s2 & 255;

        $i0 = $i0 + $i1;

        $i0 = $i0 + 1;

        $b8 = $r1[$i0];

        s3 = (short) $b8;

        s3 = s3 & 255;

        $i0 = (int) s2;

        $i0 = $i0 >>> 2;

        $i0 = $i0 & 63;

        i7 = (int) s2;

        i7 = i7 << 4;

        i5 = (int) s3;

        i5 = i5 >>> 4;

        i7 = i7 | i5;

        i7 = i7 & 63;

        i5 = (int) s3;

        i5 = i5 << 2;

        i5 = i5 & 63;

        $r1 = r0.<cn.hi321.browser.weave.client.Base64Encoder: byte[] encodingTable>;

        $b8 = $r1[$i0];

        $i0 = (int) $b8;

        virtualinvoke $r2.<java.io.OutputStream: void write(int)>($i0);

        $r1 = r0.<cn.hi321.browser.weave.client.Base64Encoder: byte[] encodingTable>;

        $b8 = $r1[i7];

        $i0 = (int) $b8;

        virtualinvoke $r2.<java.io.OutputStream: void write(int)>($i0);

        $r1 = r0.<cn.hi321.browser.weave.client.Base64Encoder: byte[] encodingTable>;

        $b8 = $r1[i5];

        $i0 = (int) $b8;

        virtualinvoke $r2.<java.io.OutputStream: void write(int)>($i0);

        $b8 = r0.<cn.hi321.browser.weave.client.Base64Encoder: byte padding>;

        $i0 = (int) $b8;

        virtualinvoke $r2.<java.io.OutputStream: void write(int)>($i0);

        goto label2;

     label7:
        $b8 = 4;

        goto label3;
    }

    protected void initialiseDecodingTable()
    {
        byte[] $r1, $r2;
        byte $b0, $b3;
        int i1, $i2;
        cn.hi321.browser.weave.client.Base64Encoder r0;

        r0 := @this: cn.hi321.browser.weave.client.Base64Encoder;

        i1 = 0;

     label1:
        $r1 = r0.<cn.hi321.browser.weave.client.Base64Encoder: byte[] encodingTable>;

        $i2 = lengthof $r1;

        if i1 < $i2 goto label2;

        return;

     label2:
        $r1 = r0.<cn.hi321.browser.weave.client.Base64Encoder: byte[] decodingTable>;

        $r2 = r0.<cn.hi321.browser.weave.client.Base64Encoder: byte[] encodingTable>;

        $b3 = $r2[i1];

        $b0 = (byte) i1;

        $i2 = (int) $b3;

        $r1[$i2] = $b0;

        i1 = i1 + 1;

        goto label1;
    }
}
