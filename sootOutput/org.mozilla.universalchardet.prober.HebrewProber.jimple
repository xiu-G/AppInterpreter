public class org.mozilla.universalchardet.prober.HebrewProber extends org.mozilla.universalchardet.prober.CharsetProber
{
    public static final int FINAL_KAF;
    public static final int FINAL_MEM;
    public static final int FINAL_NUN;
    public static final int FINAL_PE;
    public static final int FINAL_TSADI;
    public static final int MIN_FINAL_CHAR_DISTANCE;
    public static final float MIN_MODEL_DISTANCE;
    public static final int NORMAL_KAF;
    public static final int NORMAL_MEM;
    public static final int NORMAL_NUN;
    public static final int NORMAL_PE;
    public static final int NORMAL_TSADI;
    public static final byte SPACE;
    private byte beforePrev;
    private int finalCharLogicalScore;
    private int finalCharVisualScore;
    private org.mozilla.universalchardet.prober.CharsetProber logicalProber;
    private byte prev;
    private org.mozilla.universalchardet.prober.CharsetProber visualProber;

    public void <init>()
    {
        org.mozilla.universalchardet.prober.HebrewProber r0;

        r0 := @this: org.mozilla.universalchardet.prober.HebrewProber;

        specialinvoke r0.<org.mozilla.universalchardet.prober.CharsetProber: void <init>()>();

        r0.<org.mozilla.universalchardet.prober.HebrewProber: org.mozilla.universalchardet.prober.CharsetProber logicalProber> = null;

        r0.<org.mozilla.universalchardet.prober.HebrewProber: org.mozilla.universalchardet.prober.CharsetProber visualProber> = null;

        virtualinvoke r0.<org.mozilla.universalchardet.prober.HebrewProber: void reset()>();

        return;
    }

    protected static boolean isFinal(byte)
    {
        int $i2;
        short $s1;
        byte $b0;

        $b0 := @parameter0: byte;

        $s1 = (short) $b0;

        $s1 = $s1 & 255;

        $i2 = (int) $s1;

        if $i2 == 234 goto label1;

        $i2 = (int) $s1;

        if $i2 == 237 goto label1;

        $i2 = (int) $s1;

        if $i2 == 239 goto label1;

        $i2 = (int) $s1;

        if $i2 == 243 goto label1;

        $i2 = (int) $s1;

        if $i2 != 245 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    protected static boolean isNonFinal(byte)
    {
        int $i2;
        short $s1;
        byte $b0;

        $b0 := @parameter0: byte;

        $s1 = (short) $b0;

        $s1 = $s1 & 255;

        $i2 = (int) $s1;

        if $i2 == 235 goto label1;

        $i2 = (int) $s1;

        if $i2 == 238 goto label1;

        $i2 = (int) $s1;

        if $i2 == 240 goto label1;

        $i2 = (int) $s1;

        if $i2 != 244 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public java.lang.String getCharSetName()
    {
        org.mozilla.universalchardet.prober.CharsetProber $r1;
        org.mozilla.universalchardet.prober.HebrewProber r0;
        byte $b2;
        int $i0, $i1;
        float $f0, $f1;
        java.lang.String r2;

        r0 := @this: org.mozilla.universalchardet.prober.HebrewProber;

        $i0 = r0.<org.mozilla.universalchardet.prober.HebrewProber: int finalCharLogicalScore>;

        $i1 = r0.<org.mozilla.universalchardet.prober.HebrewProber: int finalCharVisualScore>;

        $i0 = $i0 - $i1;

        if $i0 < 5 goto label1;

        r2 = <org.mozilla.universalchardet.Constants: java.lang.String CHARSET_WINDOWS_1255>;

        return r2;

     label1:
        if $i0 > -5 goto label2;

        r2 = <org.mozilla.universalchardet.Constants: java.lang.String CHARSET_ISO_8859_8>;

        return r2;

     label2:
        $r1 = r0.<org.mozilla.universalchardet.prober.HebrewProber: org.mozilla.universalchardet.prober.CharsetProber logicalProber>;

        $f0 = virtualinvoke $r1.<org.mozilla.universalchardet.prober.CharsetProber: float getConfidence()>();

        $r1 = r0.<org.mozilla.universalchardet.prober.HebrewProber: org.mozilla.universalchardet.prober.CharsetProber visualProber>;

        $f1 = virtualinvoke $r1.<org.mozilla.universalchardet.prober.CharsetProber: float getConfidence()>();

        $f0 = $f0 - $f1;

        $b2 = $f0 cmpl 0.01F;

        $i1 = (int) $b2;

        if $i1 <= 0 goto label3;

        r2 = <org.mozilla.universalchardet.Constants: java.lang.String CHARSET_WINDOWS_1255>;

        return r2;

     label3:
        $b2 = $f0 cmpg -0.01F;

        $i1 = (int) $b2;

        if $i1 >= 0 goto label4;

        r2 = <org.mozilla.universalchardet.Constants: java.lang.String CHARSET_ISO_8859_8>;

        return r2;

     label4:
        if $i0 >= 0 goto label5;

        r2 = <org.mozilla.universalchardet.Constants: java.lang.String CHARSET_ISO_8859_8>;

        return r2;

     label5:
        r2 = <org.mozilla.universalchardet.Constants: java.lang.String CHARSET_WINDOWS_1255>;

        return r2;
    }

    public float getConfidence()
    {
        org.mozilla.universalchardet.prober.HebrewProber r0;

        r0 := @this: org.mozilla.universalchardet.prober.HebrewProber;

        return 0.0F;
    }

    public org.mozilla.universalchardet.prober.CharsetProber$ProbingState getState()
    {
        org.mozilla.universalchardet.prober.CharsetProber $r1;
        org.mozilla.universalchardet.prober.CharsetProber$ProbingState $r2, $r3;
        org.mozilla.universalchardet.prober.HebrewProber r0;

        r0 := @this: org.mozilla.universalchardet.prober.HebrewProber;

        $r1 = r0.<org.mozilla.universalchardet.prober.HebrewProber: org.mozilla.universalchardet.prober.CharsetProber logicalProber>;

        $r2 = virtualinvoke $r1.<org.mozilla.universalchardet.prober.CharsetProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState getState()>();

        $r3 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState NOT_ME>;

        if $r2 != $r3 goto label1;

        $r1 = r0.<org.mozilla.universalchardet.prober.HebrewProber: org.mozilla.universalchardet.prober.CharsetProber visualProber>;

        $r2 = virtualinvoke $r1.<org.mozilla.universalchardet.prober.CharsetProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState getState()>();

        $r3 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState NOT_ME>;

        if $r2 != $r3 goto label1;

        $r2 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState NOT_ME>;

        return $r2;

     label1:
        $r2 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState DETECTING>;

        return $r2;
    }

    public org.mozilla.universalchardet.prober.CharsetProber$ProbingState handleData(byte[], int, int)
    {
        byte[] $r1;
        org.mozilla.universalchardet.prober.CharsetProber$ProbingState $r2, $r3;
        org.mozilla.universalchardet.prober.HebrewProber r0;
        byte $b2, $b3;
        int $i0, $i1, $i4;
        boolean $z0;

        r0 := @this: org.mozilla.universalchardet.prober.HebrewProber;

        $r1 := @parameter0: byte[];

        $i1 := @parameter1: int;

        $i0 := @parameter2: int;

        $r2 = virtualinvoke r0.<org.mozilla.universalchardet.prober.HebrewProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState getState()>();

        $r3 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState NOT_ME>;

        if $r2 != $r3 goto label1;

        $r2 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState NOT_ME>;

        return $r2;

     label1:
        $i0 = 0 + $i0;

     label2:
        if $i1 >= $i0 goto label6;

        $b2 = $r1[$i1];

        $i4 = (int) $b2;

        if $i4 != 32 goto label5;

        $b3 = r0.<org.mozilla.universalchardet.prober.HebrewProber: byte beforePrev>;

        $i4 = (int) $b3;

        if $i4 == 32 goto label3;

        $b3 = r0.<org.mozilla.universalchardet.prober.HebrewProber: byte prev>;

        $z0 = staticinvoke <org.mozilla.universalchardet.prober.HebrewProber: boolean isFinal(byte)>($b3);

        if $z0 == 0 goto label4;

        $i4 = r0.<org.mozilla.universalchardet.prober.HebrewProber: int finalCharLogicalScore>;

        $i4 = $i4 + 1;

        r0.<org.mozilla.universalchardet.prober.HebrewProber: int finalCharLogicalScore> = $i4;

     label3:
        $b3 = r0.<org.mozilla.universalchardet.prober.HebrewProber: byte prev>;

        r0.<org.mozilla.universalchardet.prober.HebrewProber: byte beforePrev> = $b3;

        r0.<org.mozilla.universalchardet.prober.HebrewProber: byte prev> = $b2;

        $i1 = $i1 + 1;

        goto label2;

     label4:
        $b3 = r0.<org.mozilla.universalchardet.prober.HebrewProber: byte prev>;

        $z0 = staticinvoke <org.mozilla.universalchardet.prober.HebrewProber: boolean isNonFinal(byte)>($b3);

        if $z0 == 0 goto label3;

        $i4 = r0.<org.mozilla.universalchardet.prober.HebrewProber: int finalCharVisualScore>;

        $i4 = $i4 + 1;

        r0.<org.mozilla.universalchardet.prober.HebrewProber: int finalCharVisualScore> = $i4;

        goto label3;

     label5:
        $b3 = r0.<org.mozilla.universalchardet.prober.HebrewProber: byte beforePrev>;

        $i4 = (int) $b3;

        if $i4 != 32 goto label3;

        $b3 = r0.<org.mozilla.universalchardet.prober.HebrewProber: byte prev>;

        $z0 = staticinvoke <org.mozilla.universalchardet.prober.HebrewProber: boolean isFinal(byte)>($b3);

        if $z0 == 0 goto label3;

        $i4 = (int) $b2;

        if $i4 == 32 goto label3;

        $i4 = r0.<org.mozilla.universalchardet.prober.HebrewProber: int finalCharVisualScore>;

        $i4 = $i4 + 1;

        r0.<org.mozilla.universalchardet.prober.HebrewProber: int finalCharVisualScore> = $i4;

        goto label3;

     label6:
        $r2 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState DETECTING>;

        return $r2;
    }

    public void reset()
    {
        org.mozilla.universalchardet.prober.HebrewProber r0;

        r0 := @this: org.mozilla.universalchardet.prober.HebrewProber;

        r0.<org.mozilla.universalchardet.prober.HebrewProber: int finalCharLogicalScore> = 0;

        r0.<org.mozilla.universalchardet.prober.HebrewProber: int finalCharVisualScore> = 0;

        r0.<org.mozilla.universalchardet.prober.HebrewProber: byte prev> = 32;

        r0.<org.mozilla.universalchardet.prober.HebrewProber: byte beforePrev> = 32;

        return;
    }

    public void setModalProbers(org.mozilla.universalchardet.prober.CharsetProber, org.mozilla.universalchardet.prober.CharsetProber)
    {
        org.mozilla.universalchardet.prober.CharsetProber $r1, $r2;
        org.mozilla.universalchardet.prober.HebrewProber r0;

        r0 := @this: org.mozilla.universalchardet.prober.HebrewProber;

        $r1 := @parameter0: org.mozilla.universalchardet.prober.CharsetProber;

        $r2 := @parameter1: org.mozilla.universalchardet.prober.CharsetProber;

        r0.<org.mozilla.universalchardet.prober.HebrewProber: org.mozilla.universalchardet.prober.CharsetProber logicalProber> = $r1;

        r0.<org.mozilla.universalchardet.prober.HebrewProber: org.mozilla.universalchardet.prober.CharsetProber visualProber> = $r2;

        return;
    }

    public void setOption()
    {
        org.mozilla.universalchardet.prober.HebrewProber r0;

        r0 := @this: org.mozilla.universalchardet.prober.HebrewProber;

        return;
    }

    public static void <clinit>()
    {
        <org.mozilla.universalchardet.prober.HebrewProber: byte SPACE> = 32;

        <org.mozilla.universalchardet.prober.HebrewProber: int NORMAL_TSADI> = 246;

        <org.mozilla.universalchardet.prober.HebrewProber: int NORMAL_PE> = 244;

        <org.mozilla.universalchardet.prober.HebrewProber: int NORMAL_NUN> = 240;

        <org.mozilla.universalchardet.prober.HebrewProber: int NORMAL_MEM> = 238;

        <org.mozilla.universalchardet.prober.HebrewProber: int NORMAL_KAF> = 235;

        <org.mozilla.universalchardet.prober.HebrewProber: float MIN_MODEL_DISTANCE> = 0.01F;

        <org.mozilla.universalchardet.prober.HebrewProber: int MIN_FINAL_CHAR_DISTANCE> = 5;

        <org.mozilla.universalchardet.prober.HebrewProber: int FINAL_TSADI> = 245;

        <org.mozilla.universalchardet.prober.HebrewProber: int FINAL_PE> = 243;

        <org.mozilla.universalchardet.prober.HebrewProber: int FINAL_NUN> = 239;

        <org.mozilla.universalchardet.prober.HebrewProber: int FINAL_MEM> = 237;

        <org.mozilla.universalchardet.prober.HebrewProber: int FINAL_KAF> = 234;

        return;
    }
}
