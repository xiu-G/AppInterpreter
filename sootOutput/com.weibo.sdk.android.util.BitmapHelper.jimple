public final class com.weibo.sdk.android.util.BitmapHelper extends java.lang.Object
{

    public void <init>()
    {
        com.weibo.sdk.android.util.BitmapHelper r0;

        r0 := @this: com.weibo.sdk.android.util.BitmapHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int getSampleSizeAutoFitToScreen(int, int, int, int)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        if $i1 == 0 goto label1;

        if $i0 != 0 goto label2;

     label1:
        return 1;

     label2:
        $i4 = $i2 / $i0;

        $i5 = $i3 / $i1;

        $i4 = staticinvoke <java.lang.Math: int max(int,int)>($i4, $i5);

        $i0 = $i3 / $i0;

        $i1 = $i2 / $i1;

        $i0 = staticinvoke <java.lang.Math: int max(int,int)>($i0, $i1);

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i4, $i0);

        return $i0;
    }

    public static int getSampleSizeOfNotTooLarge(android.graphics.Rect)
    {
        android.graphics.Rect $r0;
        byte $b1;
        int $i0;
        double d0, $d1;

        $r0 := @parameter0: android.graphics.Rect;

        $i0 = virtualinvoke $r0.<android.graphics.Rect: int width()>();

        d0 = (double) $i0;

        $i0 = virtualinvoke $r0.<android.graphics.Rect: int height()>();

        $d1 = (double) $i0;

        d0 = d0 * $d1;

        d0 = d0 * 2.0;

        d0 = d0 / 5242880.0;

        $b1 = d0 cmpl 1.0;

        $i0 = (int) $b1;

        if $i0 < 0 goto label1;

        $i0 = (int) d0;

        return $i0;

     label1:
        return 1;
    }

    public static boolean makesureSizeNotTooLarge(android.graphics.Rect)
    {
        int $i0, $i1;
        android.graphics.Rect $r0;

        $r0 := @parameter0: android.graphics.Rect;

        $i0 = virtualinvoke $r0.<android.graphics.Rect: int width()>();

        $i1 = virtualinvoke $r0.<android.graphics.Rect: int height()>();

        $i0 = $i0 * $i1;

        $i0 = $i0 * 2;

        if $i0 <= 5242880 goto label1;

        return 0;

     label1:
        return 1;
    }

    public static boolean verifyBitmap(java.io.InputStream)
    {
        java.lang.Throwable r0;
        java.io.BufferedInputStream $r4;
        java.io.IOException $r6;
        int $i0;
        java.lang.Object $r2;
        android.graphics.BitmapFactory$Options r1, $r3;
        boolean $z0;
        java.io.InputStream $r5;

        $r2 := @parameter0: java.io.InputStream;

        if $r2 != null goto label1;

        return 0;

     label1:
        $r3 = new android.graphics.BitmapFactory$Options;

        r1 = $r3;

        specialinvoke $r3.<android.graphics.BitmapFactory$Options: void <init>()>();

        r1.<android.graphics.BitmapFactory$Options: boolean inJustDecodeBounds> = 1;

        $z0 = $r2 instanceof java.io.BufferedInputStream;

        if $z0 == 0 goto label5;

     label2:
        $r5 = (java.io.InputStream) $r2;

        staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>($r5, null, r1);

        $r5 = (java.io.InputStream) $r2;

     label3:
        virtualinvoke $r5.<java.io.InputStream: void close()>();

     label4:
        $i0 = r1.<android.graphics.BitmapFactory$Options: int outHeight>;

        if $i0 <= 0 goto label7;

        $i0 = r1.<android.graphics.BitmapFactory$Options: int outWidth>;

        if $i0 <= 0 goto label7;

        return 1;

     label5:
        $r4 = new java.io.BufferedInputStream;

        $r5 = (java.io.InputStream) $r2;

        specialinvoke $r4.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r5);

        $r2 = $r4;

        goto label2;

     label6:
        r0 := @caughtexception;

        $r6 = (java.io.IOException) r0;

        virtualinvoke $r6.<java.io.IOException: void printStackTrace()>();

        goto label4;

     label7:
        return 0;

        catch java.io.IOException from label3 to label4 with label6;
    }

    public static boolean verifyBitmap(java.lang.String)
    {
        java.lang.Throwable r1;
        java.lang.String $r0;
        java.io.FileInputStream $r2, $r3;
        java.io.FileNotFoundException $r4;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r3 = new java.io.FileInputStream;

        $r2 = $r3;

     label1:
        specialinvoke $r3.<java.io.FileInputStream: void <init>(java.lang.String)>($r0);

        $z0 = staticinvoke <com.weibo.sdk.android.util.BitmapHelper: boolean verifyBitmap(java.io.InputStream)>($r2);

     label2:
        return $z0;

     label3:
        r1 := @caughtexception;

        $r4 = (java.io.FileNotFoundException) r1;

        virtualinvoke $r4.<java.io.FileNotFoundException: void printStackTrace()>();

        return 0;

        catch java.io.FileNotFoundException from label1 to label2 with label3;
    }

    public static boolean verifyBitmap(byte[])
    {
        byte[] $r0;
        java.io.ByteArrayInputStream $r1;
        boolean $z0;

        $r0 := @parameter0: byte[];

        $r1 = new java.io.ByteArrayInputStream;

        specialinvoke $r1.<java.io.ByteArrayInputStream: void <init>(byte[])>($r0);

        $z0 = staticinvoke <com.weibo.sdk.android.util.BitmapHelper: boolean verifyBitmap(java.io.InputStream)>($r1);

        return $z0;
    }
}
