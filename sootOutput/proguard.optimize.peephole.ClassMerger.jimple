public class proguard.optimize.peephole.ClassMerger extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.visitor.ClassVisitor, proguard.classfile.constant.visitor.ConstantVisitor
{
    private static final boolean DEBUG;
    private final boolean allowAccessModification;
    private final proguard.classfile.visitor.ClassVisitor extraClassVisitor;
    private final boolean mergeInterfacesAggressively;
    private final proguard.classfile.ProgramClass targetClass;

    public void <init>(proguard.classfile.ProgramClass, boolean, boolean)
    {
        proguard.optimize.peephole.ClassMerger r0;
        proguard.classfile.ProgramClass $r1;
        boolean $z0, $z1;

        r0 := @this: proguard.optimize.peephole.ClassMerger;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $z0 := @parameter1: boolean;

        $z1 := @parameter2: boolean;

        specialinvoke r0.<proguard.optimize.peephole.ClassMerger: void <init>(proguard.classfile.ProgramClass,boolean,boolean,proguard.classfile.visitor.ClassVisitor)>($r1, $z0, $z1, null);

        return;
    }

    public void <init>(proguard.classfile.ProgramClass, boolean, boolean, proguard.classfile.visitor.ClassVisitor)
    {
        proguard.optimize.peephole.ClassMerger r0;
        proguard.classfile.visitor.ClassVisitor $r2;
        proguard.classfile.ProgramClass $r1;
        boolean $z0, $z1;

        r0 := @this: proguard.optimize.peephole.ClassMerger;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $z0 := @parameter1: boolean;

        $z1 := @parameter2: boolean;

        $r2 := @parameter3: proguard.classfile.visitor.ClassVisitor;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        r0.<proguard.optimize.peephole.ClassMerger: proguard.classfile.ProgramClass targetClass> = $r1;

        r0.<proguard.optimize.peephole.ClassMerger: boolean allowAccessModification> = $z0;

        r0.<proguard.optimize.peephole.ClassMerger: boolean mergeInterfacesAggressively> = $z1;

        r0.<proguard.optimize.peephole.ClassMerger: proguard.classfile.visitor.ClassVisitor extraClassVisitor> = $r2;

        return;
    }

    private java.util.Set caughtSuperClasses(proguard.classfile.Clazz)
    {
        java.util.HashSet $r3;
        proguard.optimize.peephole.ClassMerger r0;
        proguard.classfile.visitor.ClassCollector $r4;
        proguard.classfile.Clazz $r1;
        proguard.optimize.info.CaughtClassFilter $r2;

        r0 := @this: proguard.optimize.peephole.ClassMerger;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        $r2 = new proguard.optimize.info.CaughtClassFilter;

        $r4 = new proguard.classfile.visitor.ClassCollector;

        specialinvoke $r4.<proguard.classfile.visitor.ClassCollector: void <init>(java.util.Set)>($r3);

        specialinvoke $r2.<proguard.optimize.info.CaughtClassFilter: void <init>(proguard.classfile.visitor.ClassVisitor)>($r4);

        interfaceinvoke $r1.<proguard.classfile.Clazz: void hierarchyAccept(boolean,boolean,boolean,boolean,proguard.classfile.visitor.ClassVisitor)>(1, 1, 0, 0, $r2);

        return $r3;
    }

    public static proguard.classfile.Clazz getTargetClass(proguard.classfile.Clazz)
    {
        proguard.optimize.info.ClassOptimizationInfo $r2;
        proguard.classfile.Clazz $r0, $r1, $r3;

        $r0 := @parameter0: proguard.classfile.Clazz;

        $r1 = null;

     label1:
        $r2 = staticinvoke <proguard.optimize.info.ClassOptimizationInfo: proguard.optimize.info.ClassOptimizationInfo getClassOptimizationInfo(proguard.classfile.Clazz)>($r0);

        if $r2 != null goto label2;

        return $r1;

     label2:
        $r3 = virtualinvoke $r2.<proguard.optimize.info.ClassOptimizationInfo: proguard.classfile.Clazz getTargetClass()>();

        $r0 = $r3;

        if $r3 == null goto label3;

        $r1 = $r3;

        goto label1;

     label3:
        return $r1;
    }

    private boolean haveAnyIdenticalInitializers(proguard.classfile.Clazz, proguard.classfile.Clazz)
    {
        proguard.classfile.visitor.MemberCounter $r4;
        proguard.optimize.peephole.ClassMerger r0;
        proguard.classfile.Clazz $r1, $r2;
        int $i0;
        proguard.classfile.visitor.SimilarMemberVisitor $r5;
        proguard.classfile.visitor.MemberAccessFilter $r3;

        r0 := @this: proguard.optimize.peephole.ClassMerger;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Clazz;

        $r4 = new proguard.classfile.visitor.MemberCounter;

        specialinvoke $r4.<proguard.classfile.visitor.MemberCounter: void <init>()>();

        $r5 = new proguard.classfile.visitor.SimilarMemberVisitor;

        $r3 = new proguard.classfile.visitor.MemberAccessFilter;

        specialinvoke $r3.<proguard.classfile.visitor.MemberAccessFilter: void <init>(int,int,proguard.classfile.visitor.MemberVisitor)>(0, 1024, $r4);

        specialinvoke $r5.<proguard.classfile.visitor.SimilarMemberVisitor: void <init>(proguard.classfile.Clazz,boolean,boolean,boolean,boolean,proguard.classfile.visitor.MemberVisitor)>($r2, 1, 0, 0, 0, $r3);

        interfaceinvoke $r1.<proguard.classfile.Clazz: void methodsAccept(proguard.classfile.visitor.MemberVisitor)>($r5);

        $i0 = virtualinvoke $r4.<proguard.classfile.visitor.MemberCounter: int getCount()>();

        if $i0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private java.util.Set indirectlyImplementedInterfaces(proguard.classfile.Clazz)
    {
        java.util.HashSet $r4;
        proguard.optimize.peephole.ClassMerger r0;
        proguard.classfile.visitor.ClassCollector $r3;
        proguard.classfile.Clazz $r1;
        proguard.classfile.visitor.ReferencedClassVisitor $r5;
        proguard.classfile.visitor.ClassHierarchyTraveler $r2;

        r0 := @this: proguard.optimize.peephole.ClassMerger;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        $r5 = new proguard.classfile.visitor.ReferencedClassVisitor;

        $r2 = new proguard.classfile.visitor.ClassHierarchyTraveler;

        $r3 = new proguard.classfile.visitor.ClassCollector;

        specialinvoke $r3.<proguard.classfile.visitor.ClassCollector: void <init>(java.util.Set)>($r4);

        specialinvoke $r2.<proguard.classfile.visitor.ClassHierarchyTraveler: void <init>(boolean,boolean,boolean,boolean,proguard.classfile.visitor.ClassVisitor)>(0, 0, 1, 0, $r3);

        specialinvoke $r5.<proguard.classfile.visitor.ReferencedClassVisitor: void <init>(proguard.classfile.visitor.ClassVisitor)>($r2);

        interfaceinvoke $r1.<proguard.classfile.Clazz: void superClassConstantAccept(proguard.classfile.constant.visitor.ConstantVisitor)>($r5);

        interfaceinvoke $r1.<proguard.classfile.Clazz: void interfaceConstantsAccept(proguard.classfile.constant.visitor.ConstantVisitor)>($r5);

        return $r4;
    }

    private java.util.Set initializedSuperClasses(proguard.classfile.Clazz)
    {
        java.util.HashSet $r3;
        proguard.optimize.peephole.ClassMerger r0;
        proguard.classfile.visitor.NamedMethodVisitor $r2;
        proguard.classfile.visitor.ClassCollector $r4;
        proguard.classfile.Clazz $r1;
        proguard.classfile.visitor.MemberToClassVisitor $r5;

        r0 := @this: proguard.optimize.peephole.ClassMerger;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        $r2 = new proguard.classfile.visitor.NamedMethodVisitor;

        $r5 = new proguard.classfile.visitor.MemberToClassVisitor;

        $r4 = new proguard.classfile.visitor.ClassCollector;

        specialinvoke $r4.<proguard.classfile.visitor.ClassCollector: void <init>(java.util.Set)>($r3);

        specialinvoke $r5.<proguard.classfile.visitor.MemberToClassVisitor: void <init>(proguard.classfile.visitor.ClassVisitor)>($r4);

        specialinvoke $r2.<proguard.classfile.visitor.NamedMethodVisitor: void <init>(java.lang.String,java.lang.String,proguard.classfile.visitor.MemberVisitor)>("<clinit>", "()V", $r5);

        interfaceinvoke $r1.<proguard.classfile.Clazz: void hierarchyAccept(boolean,boolean,boolean,boolean,proguard.classfile.visitor.ClassVisitor)>(1, 1, 1, 0, $r2);

        return $r3;
    }

    private java.util.Set instanceofedSuperClasses(proguard.classfile.Clazz)
    {
        java.util.HashSet $r3;
        proguard.optimize.peephole.ClassMerger r0;
        proguard.classfile.visitor.ClassCollector $r4;
        proguard.classfile.Clazz $r1;
        proguard.optimize.info.InstanceofClassFilter $r2;

        r0 := @this: proguard.optimize.peephole.ClassMerger;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        $r2 = new proguard.optimize.info.InstanceofClassFilter;

        $r4 = new proguard.classfile.visitor.ClassCollector;

        specialinvoke $r4.<proguard.classfile.visitor.ClassCollector: void <init>(java.util.Set)>($r3);

        specialinvoke $r2.<proguard.optimize.info.InstanceofClassFilter: void <init>(proguard.classfile.visitor.ClassVisitor)>($r4);

        interfaceinvoke $r1.<proguard.classfile.Clazz: void hierarchyAccept(boolean,boolean,boolean,boolean,proguard.classfile.visitor.ClassVisitor)>(1, 1, 1, 0, $r2);

        return $r3;
    }

    private boolean introducesUnwantedAbstractMethods(proguard.classfile.Clazz, proguard.classfile.ProgramClass)
    {
        proguard.classfile.visitor.MemberCounter $r4;
        proguard.classfile.Clazz[] $r9;
        proguard.optimize.peephole.ClassMerger r0;
        proguard.classfile.visitor.MemberCollector $r11;
        proguard.classfile.visitor.MultiMemberVisitor $r7;
        proguard.classfile.ProgramClass $r2;
        java.util.HashSet $r5;
        proguard.classfile.Clazz $r1;
        int $i0, $i1;
        proguard.classfile.visitor.SimilarMemberVisitor $r10;
        proguard.classfile.visitor.MemberAccessFilter $r3, $r6;
        proguard.classfile.visitor.MemberVisitor[] $r8;
        boolean $z0;

        r0 := @this: proguard.optimize.peephole.ClassMerger;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.ProgramClass;

        $i0 = virtualinvoke $r2.<proguard.classfile.ProgramClass: int getAccessFlags()>();

        $i0 = $i0 & 1536;

        if $i0 == 0 goto label2;

        $r9 = $r2.<proguard.classfile.ProgramClass: proguard.classfile.Clazz[] subClasses>;

        if $r9 == null goto label1;

        $z0 = specialinvoke r0.<proguard.optimize.peephole.ClassMerger: boolean isOnlySubClass(proguard.classfile.Clazz,proguard.classfile.ProgramClass)>($r1, $r2);

        if $z0 == 0 goto label2;

     label1:
        return 0;

     label2:
        $r4 = new proguard.classfile.visitor.MemberCounter;

        specialinvoke $r4.<proguard.classfile.visitor.MemberCounter: void <init>()>();

        $r5 = new java.util.HashSet;

        specialinvoke $r5.<java.util.HashSet: void <init>()>();

        $r6 = new proguard.classfile.visitor.MemberAccessFilter;

        $r7 = new proguard.classfile.visitor.MultiMemberVisitor;

        $r8 = newarray (proguard.classfile.visitor.MemberVisitor)[2];

        $r8[0] = $r4;

        $r10 = new proguard.classfile.visitor.SimilarMemberVisitor;

        $r3 = new proguard.classfile.visitor.MemberAccessFilter;

        $r11 = new proguard.classfile.visitor.MemberCollector;

        specialinvoke $r11.<proguard.classfile.visitor.MemberCollector: void <init>(java.util.Set)>($r5);

        specialinvoke $r3.<proguard.classfile.visitor.MemberAccessFilter: void <init>(int,int,proguard.classfile.visitor.MemberVisitor)>(1024, 0, $r11);

        specialinvoke $r10.<proguard.classfile.visitor.SimilarMemberVisitor: void <init>(proguard.classfile.Clazz,boolean,boolean,boolean,boolean,proguard.classfile.visitor.MemberVisitor)>($r2, 1, 1, 1, 0, $r3);

        $r8[1] = $r10;

        specialinvoke $r7.<proguard.classfile.visitor.MultiMemberVisitor: void <init>(proguard.classfile.visitor.MemberVisitor[])>($r8);

        specialinvoke $r6.<proguard.classfile.visitor.MemberAccessFilter: void <init>(int,int,proguard.classfile.visitor.MemberVisitor)>(1024, 0, $r7);

        interfaceinvoke $r1.<proguard.classfile.Clazz: void methodsAccept(proguard.classfile.visitor.MemberVisitor)>($r6);

        $i0 = interfaceinvoke $r5.<java.util.Set: int size()>();

        $i1 = virtualinvoke $r4.<proguard.classfile.visitor.MemberCounter: int getCount()>();

        if $i0 >= $i1 goto label3;

        return 1;

     label3:
        return 0;
    }

    private boolean introducesUnwantedFields(proguard.classfile.ProgramClass, proguard.classfile.ProgramClass)
    {
        proguard.classfile.Clazz[] $r3;
        proguard.optimize.peephole.ClassMerger r0;
        int $i0;
        proguard.classfile.ProgramClass $r1, $r2;
        boolean $z0;

        r0 := @this: proguard.optimize.peephole.ClassMerger;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.ProgramClass;

        $i0 = $r1.<proguard.classfile.ProgramClass: int u2fieldsCount>;

        if $i0 == 0 goto label2;

        $z0 = staticinvoke <proguard.optimize.info.InstantiationClassMarker: boolean isInstantiated(proguard.classfile.Clazz)>($r2);

        if $z0 != 0 goto label1;

        $r3 = $r2.<proguard.classfile.ProgramClass: proguard.classfile.Clazz[] subClasses>;

        if $r3 == null goto label2;

        $z0 = specialinvoke r0.<proguard.optimize.peephole.ClassMerger: boolean isOnlySubClass(proguard.classfile.Clazz,proguard.classfile.ProgramClass)>($r1, $r2);

        if $z0 != 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    private boolean isOnlySubClass(proguard.classfile.Clazz, proguard.classfile.ProgramClass)
    {
        proguard.classfile.Clazz[] $r3;
        proguard.optimize.peephole.ClassMerger r0;
        proguard.classfile.Clazz $r1, $r4;
        int $i0;
        proguard.classfile.ProgramClass $r2;
        boolean $z0;

        r0 := @this: proguard.optimize.peephole.ClassMerger;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.ProgramClass;

        $r3 = $r2.<proguard.classfile.ProgramClass: proguard.classfile.Clazz[] subClasses>;

        if $r3 == null goto label1;

        $r3 = $r2.<proguard.classfile.ProgramClass: proguard.classfile.Clazz[] subClasses>;

        $i0 = lengthof $r3;

        if $i0 != 1 goto label1;

        $r3 = $r2.<proguard.classfile.ProgramClass: proguard.classfile.Clazz[] subClasses>;

        $r4 = $r3[0];

        $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private boolean overridesAnyMethods(proguard.classfile.Clazz, proguard.classfile.Clazz)
    {
        proguard.classfile.visitor.MemberCounter $r4;
        proguard.classfile.visitor.MemberNameFilter $r6, $r8;
        proguard.optimize.peephole.ClassMerger r0;
        proguard.util.NotMatcher $r7, $r9;
        proguard.util.FixedStringMatcher $r10;
        proguard.classfile.Clazz $r1, $r2;
        int $i0;
        proguard.classfile.visitor.SimilarMemberVisitor $r11;
        proguard.classfile.visitor.MemberAccessFilter $r3, $r5;

        r0 := @this: proguard.optimize.peephole.ClassMerger;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Clazz;

        $r4 = new proguard.classfile.visitor.MemberCounter;

        specialinvoke $r4.<proguard.classfile.visitor.MemberCounter: void <init>()>();

        $r5 = new proguard.classfile.visitor.MemberAccessFilter;

        $r6 = new proguard.classfile.visitor.MemberNameFilter;

        $r7 = new proguard.util.NotMatcher;

        $r10 = new proguard.util.FixedStringMatcher;

        specialinvoke $r10.<proguard.util.FixedStringMatcher: void <init>(java.lang.String)>("<clinit>");

        specialinvoke $r7.<proguard.util.NotMatcher: void <init>(proguard.util.StringMatcher)>($r10);

        $r8 = new proguard.classfile.visitor.MemberNameFilter;

        $r9 = new proguard.util.NotMatcher;

        $r10 = new proguard.util.FixedStringMatcher;

        specialinvoke $r10.<proguard.util.FixedStringMatcher: void <init>(java.lang.String)>("<init>");

        specialinvoke $r9.<proguard.util.NotMatcher: void <init>(proguard.util.StringMatcher)>($r10);

        $r11 = new proguard.classfile.visitor.SimilarMemberVisitor;

        $r3 = new proguard.classfile.visitor.MemberAccessFilter;

        specialinvoke $r3.<proguard.classfile.visitor.MemberAccessFilter: void <init>(int,int,proguard.classfile.visitor.MemberVisitor)>(0, 1034, $r4);

        specialinvoke $r11.<proguard.classfile.visitor.SimilarMemberVisitor: void <init>(proguard.classfile.Clazz,boolean,boolean,boolean,boolean,proguard.classfile.visitor.MemberVisitor)>($r2, 1, 1, 0, 0, $r3);

        specialinvoke $r8.<proguard.classfile.visitor.MemberNameFilter: void <init>(proguard.util.StringMatcher,proguard.classfile.visitor.MemberVisitor)>($r9, $r11);

        specialinvoke $r6.<proguard.classfile.visitor.MemberNameFilter: void <init>(proguard.util.StringMatcher,proguard.classfile.visitor.MemberVisitor)>($r7, $r8);

        specialinvoke $r5.<proguard.classfile.visitor.MemberAccessFilter: void <init>(int,int,proguard.classfile.visitor.MemberVisitor)>(0, 1034, $r6);

        interfaceinvoke $r1.<proguard.classfile.Clazz: void methodsAccept(proguard.classfile.visitor.MemberVisitor)>($r5);

        $i0 = virtualinvoke $r4.<proguard.classfile.visitor.MemberCounter: int getCount()>();

        if $i0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static void setTargetClass(proguard.classfile.Clazz, proguard.classfile.Clazz)
    {
        proguard.optimize.info.ClassOptimizationInfo $r2;
        proguard.classfile.Clazz $r0, $r1;

        $r0 := @parameter0: proguard.classfile.Clazz;

        $r1 := @parameter1: proguard.classfile.Clazz;

        $r2 = staticinvoke <proguard.optimize.info.ClassOptimizationInfo: proguard.optimize.info.ClassOptimizationInfo getClassOptimizationInfo(proguard.classfile.Clazz)>($r0);

        if $r2 == null goto label1;

        virtualinvoke $r2.<proguard.optimize.info.ClassOptimizationInfo: void setTargetClass(proguard.classfile.Clazz)>($r1);

     label1:
        return;
    }

    private boolean shadowsAnyMethods(proguard.classfile.Clazz, proguard.classfile.Clazz)
    {
        proguard.classfile.visitor.MemberCounter $r3;
        proguard.classfile.visitor.MemberNameFilter $r6;
        proguard.optimize.peephole.ClassMerger r0;
        proguard.util.NotMatcher $r7;
        proguard.util.FixedStringMatcher $r8;
        proguard.classfile.visitor.AllMethodVisitor $r4;
        proguard.classfile.Clazz $r1, $r2;
        int $i0;
        proguard.classfile.visitor.SimilarMemberVisitor $r9;
        proguard.classfile.visitor.MemberAccessFilter $r5, $r10;

        r0 := @this: proguard.optimize.peephole.ClassMerger;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Clazz;

        $r3 = new proguard.classfile.visitor.MemberCounter;

        specialinvoke $r3.<proguard.classfile.visitor.MemberCounter: void <init>()>();

        $r4 = new proguard.classfile.visitor.AllMethodVisitor;

        $r5 = new proguard.classfile.visitor.MemberAccessFilter;

        $r6 = new proguard.classfile.visitor.MemberNameFilter;

        $r7 = new proguard.util.NotMatcher;

        $r8 = new proguard.util.FixedStringMatcher;

        specialinvoke $r8.<proguard.util.FixedStringMatcher: void <init>(java.lang.String)>("<init>");

        specialinvoke $r7.<proguard.util.NotMatcher: void <init>(proguard.util.StringMatcher)>($r8);

        $r9 = new proguard.classfile.visitor.SimilarMemberVisitor;

        $r10 = new proguard.classfile.visitor.MemberAccessFilter;

        specialinvoke $r10.<proguard.classfile.visitor.MemberAccessFilter: void <init>(int,int,proguard.classfile.visitor.MemberVisitor)>(0, 2, $r3);

        specialinvoke $r9.<proguard.classfile.visitor.SimilarMemberVisitor: void <init>(proguard.classfile.Clazz,boolean,boolean,boolean,boolean,proguard.classfile.visitor.MemberVisitor)>($r2, 1, 1, 1, 0, $r10);

        specialinvoke $r6.<proguard.classfile.visitor.MemberNameFilter: void <init>(proguard.util.StringMatcher,proguard.classfile.visitor.MemberVisitor)>($r7, $r9);

        specialinvoke $r5.<proguard.classfile.visitor.MemberAccessFilter: void <init>(int,int,proguard.classfile.visitor.MemberVisitor)>(2, 0, $r6);

        specialinvoke $r4.<proguard.classfile.visitor.AllMethodVisitor: void <init>(proguard.classfile.visitor.MemberVisitor)>($r5);

        interfaceinvoke $r1.<proguard.classfile.Clazz: void hierarchyAccept(boolean,boolean,boolean,boolean,proguard.classfile.visitor.ClassVisitor)>(1, 0, 0, 1, $r4);

        $r4 = new proguard.classfile.visitor.AllMethodVisitor;

        $r5 = new proguard.classfile.visitor.MemberAccessFilter;

        $r6 = new proguard.classfile.visitor.MemberNameFilter;

        $r7 = new proguard.util.NotMatcher;

        $r8 = new proguard.util.FixedStringMatcher;

        specialinvoke $r8.<proguard.util.FixedStringMatcher: void <init>(java.lang.String)>("<clinit>");

        specialinvoke $r7.<proguard.util.NotMatcher: void <init>(proguard.util.StringMatcher)>($r8);

        $r9 = new proguard.classfile.visitor.SimilarMemberVisitor;

        $r10 = new proguard.classfile.visitor.MemberAccessFilter;

        specialinvoke $r10.<proguard.classfile.visitor.MemberAccessFilter: void <init>(int,int,proguard.classfile.visitor.MemberVisitor)>(0, 2, $r3);

        specialinvoke $r9.<proguard.classfile.visitor.SimilarMemberVisitor: void <init>(proguard.classfile.Clazz,boolean,boolean,boolean,boolean,proguard.classfile.visitor.MemberVisitor)>($r2, 1, 1, 1, 0, $r10);

        specialinvoke $r6.<proguard.classfile.visitor.MemberNameFilter: void <init>(proguard.util.StringMatcher,proguard.classfile.visitor.MemberVisitor)>($r7, $r9);

        specialinvoke $r5.<proguard.classfile.visitor.MemberAccessFilter: void <init>(int,int,proguard.classfile.visitor.MemberVisitor)>(8, 0, $r6);

        specialinvoke $r4.<proguard.classfile.visitor.AllMethodVisitor: void <init>(proguard.classfile.visitor.MemberVisitor)>($r5);

        interfaceinvoke $r1.<proguard.classfile.Clazz: void hierarchyAccept(boolean,boolean,boolean,boolean,proguard.classfile.visitor.ClassVisitor)>(1, 0, 0, 1, $r4);

        $i0 = virtualinvoke $r3.<proguard.classfile.visitor.MemberCounter: int getCount()>();

        if $i0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void visitProgramClass(proguard.classfile.ProgramClass)
    {
        java.io.PrintStream $r3;
        proguard.optimize.peephole.ClassMerger r0;
        java.lang.StringBuffer $r4;
        java.lang.Class $r6;
        java.lang.RuntimeException $r2;
        java.lang.String $r5;
        proguard.classfile.ProgramClass $r1;

        r0 := @this: proguard.optimize.peephole.ClassMerger;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

     label1:
        virtualinvoke r0.<proguard.optimize.peephole.ClassMerger: void visitProgramClass0(proguard.classfile.ProgramClass)>($r1);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("Unexpected error while merging classes:");

        $r3 = <java.lang.System: java.io.PrintStream err>;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Class        = [");

        $r5 = virtualinvoke $r1.<proguard.classfile.ProgramClass: java.lang.String getName()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r5);

        $r3 = <java.lang.System: java.io.PrintStream err>;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Target class = [");

        $r1 = r0.<proguard.optimize.peephole.ClassMerger: proguard.classfile.ProgramClass targetClass>;

        $r5 = virtualinvoke $r1.<proguard.classfile.ProgramClass: java.lang.String getName()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r5);

        $r3 = <java.lang.System: java.io.PrintStream err>;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Exception    = [");

        $r6 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] (");

        $r5 = virtualinvoke $r2.<java.lang.RuntimeException: java.lang.String getMessage()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r5);

        throw $r2;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    public void visitProgramClass0(proguard.classfile.ProgramClass)
    {
        proguard.optimize.info.ClassOptimizationInfo $r17, $r18;
        proguard.optimize.peephole.ClassMerger r0;
        proguard.classfile.visitor.ClassVisitor $r19;
        proguard.classfile.visitor.ImplementedClassConstantFilter $r13;
        proguard.classfile.ProgramClass $r1, $r3, $r5, $r14;
        proguard.classfile.Clazz $r6, $r9;
        int $i0, $i1, $i2;
        java.lang.String $r7, $r8;
        proguard.classfile.editor.AttributeAdder $r16;
        boolean $z0;
        proguard.classfile.editor.InterfaceAdder $r4;
        proguard.classfile.editor.MemberAdder $r15;
        java.util.Set $r10, $r11;
        proguard.classfile.constant.visitor.ExceptClassConstantFilter $r12;
        proguard.classfile.visitor.ImplementingClassConstantFilter $r2;

        r0 := @this: proguard.optimize.peephole.ClassMerger;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r3 = r0.<proguard.optimize.peephole.ClassMerger: proguard.classfile.ProgramClass targetClass>;

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label7;

        $z0 = staticinvoke <proguard.optimize.KeepMarker: boolean isKept(proguard.classfile.VisitorAccepter)>($r1);

        if $z0 != 0 goto label7;

        $r3 = r0.<proguard.optimize.peephole.ClassMerger: proguard.classfile.ProgramClass targetClass>;

        $z0 = staticinvoke <proguard.optimize.KeepMarker: boolean isKept(proguard.classfile.VisitorAccepter)>($r3);

        if $z0 != 0 goto label7;

        $r6 = staticinvoke <proguard.optimize.peephole.ClassMerger: proguard.classfile.Clazz getTargetClass(proguard.classfile.Clazz)>($r1);

        if $r6 != null goto label7;

        $r3 = r0.<proguard.optimize.peephole.ClassMerger: proguard.classfile.ProgramClass targetClass>;

        $r6 = staticinvoke <proguard.optimize.peephole.ClassMerger: proguard.classfile.Clazz getTargetClass(proguard.classfile.Clazz)>($r3);

        if $r6 != null goto label7;

        $i0 = virtualinvoke $r1.<proguard.classfile.ProgramClass: int getAccessFlags()>();

        $i0 = $i0 & 8192;

        if $i0 != 0 goto label7;

        $z0 = r0.<proguard.optimize.peephole.ClassMerger: boolean allowAccessModification>;

        if $z0 != 0 goto label2;

        $i0 = virtualinvoke $r1.<proguard.classfile.ProgramClass: int getAccessFlags()>();

        $r3 = r0.<proguard.optimize.peephole.ClassMerger: proguard.classfile.ProgramClass targetClass>;

        $i1 = virtualinvoke $r3.<proguard.classfile.ProgramClass: int getAccessFlags()>();

        $i0 = $i0 & $i1;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label1;

        $z0 = staticinvoke <proguard.optimize.info.PackageVisibleMemberContainingClassMarker: boolean containsPackageVisibleMembers(proguard.classfile.Clazz)>($r1);

        if $z0 != 0 goto label1;

        $z0 = staticinvoke <proguard.optimize.info.PackageVisibleMemberInvokingClassMarker: boolean invokesPackageVisibleMembers(proguard.classfile.Clazz)>($r1);

        if $z0 == 0 goto label2;

     label1:
        $r7 = virtualinvoke $r1.<proguard.classfile.ProgramClass: java.lang.String getName()>();

        $r7 = staticinvoke <proguard.classfile.util.ClassUtil: java.lang.String internalPackageName(java.lang.String)>($r7);

        $r3 = r0.<proguard.optimize.peephole.ClassMerger: proguard.classfile.ProgramClass targetClass>;

        $r8 = virtualinvoke $r3.<proguard.classfile.ProgramClass: java.lang.String getName()>();

        $r8 = staticinvoke <proguard.classfile.util.ClassUtil: java.lang.String internalPackageName(java.lang.String)>($r8);

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z0 == 0 goto label7;

     label2:
        $i0 = virtualinvoke $r1.<proguard.classfile.ProgramClass: int getAccessFlags()>();

        $i0 = $i0 & 1536;

        $r3 = r0.<proguard.optimize.peephole.ClassMerger: proguard.classfile.ProgramClass targetClass>;

        $i1 = virtualinvoke $r3.<proguard.classfile.ProgramClass: int getAccessFlags()>();

        $i1 = $i1 & 1536;

        if $i0 == $i1 goto label3;

        $r3 = r0.<proguard.optimize.peephole.ClassMerger: proguard.classfile.ProgramClass targetClass>;

        $z0 = specialinvoke r0.<proguard.optimize.peephole.ClassMerger: boolean isOnlySubClass(proguard.classfile.Clazz,proguard.classfile.ProgramClass)>($r1, $r3);

        if $z0 == 0 goto label7;

        $r6 = virtualinvoke $r1.<proguard.classfile.ProgramClass: proguard.classfile.Clazz getSuperClass()>();

        $r3 = r0.<proguard.optimize.peephole.ClassMerger: proguard.classfile.ProgramClass targetClass>;

        $z0 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label3;

        $r6 = virtualinvoke $r1.<proguard.classfile.ProgramClass: proguard.classfile.Clazz getSuperClass()>();

        $r3 = r0.<proguard.optimize.peephole.ClassMerger: proguard.classfile.ProgramClass targetClass>;

        $r9 = virtualinvoke $r3.<proguard.classfile.ProgramClass: proguard.classfile.Clazz getSuperClass()>();

        $z0 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r9);

        if $z0 == 0 goto label7;

     label3:
        $r10 = specialinvoke r0.<proguard.optimize.peephole.ClassMerger: java.util.Set indirectlyImplementedInterfaces(proguard.classfile.Clazz)>($r1);

        $r3 = r0.<proguard.optimize.peephole.ClassMerger: proguard.classfile.ProgramClass targetClass>;

        $z0 = interfaceinvoke $r10.<java.util.Set: boolean contains(java.lang.Object)>($r3);

        if $z0 != 0 goto label7;

        $r3 = r0.<proguard.optimize.peephole.ClassMerger: proguard.classfile.ProgramClass targetClass>;

        $z0 = virtualinvoke $r3.<proguard.classfile.ProgramClass: boolean extendsOrImplements(proguard.classfile.Clazz)>($r1);

        if $z0 != 0 goto label7;

        $r10 = specialinvoke r0.<proguard.optimize.peephole.ClassMerger: java.util.Set initializedSuperClasses(proguard.classfile.Clazz)>($r1);

        $r3 = r0.<proguard.optimize.peephole.ClassMerger: proguard.classfile.ProgramClass targetClass>;

        $r11 = specialinvoke r0.<proguard.optimize.peephole.ClassMerger: java.util.Set initializedSuperClasses(proguard.classfile.Clazz)>($r3);

        $z0 = virtualinvoke $r10.<java.lang.Object: boolean equals(java.lang.Object)>($r11);

        if $z0 == 0 goto label7;

        $r10 = specialinvoke r0.<proguard.optimize.peephole.ClassMerger: java.util.Set instanceofedSuperClasses(proguard.classfile.Clazz)>($r1);

        $r3 = r0.<proguard.optimize.peephole.ClassMerger: proguard.classfile.ProgramClass targetClass>;

        $r11 = specialinvoke r0.<proguard.optimize.peephole.ClassMerger: java.util.Set instanceofedSuperClasses(proguard.classfile.Clazz)>($r3);

        $z0 = virtualinvoke $r10.<java.lang.Object: boolean equals(java.lang.Object)>($r11);

        if $z0 == 0 goto label7;

        $r10 = specialinvoke r0.<proguard.optimize.peephole.ClassMerger: java.util.Set caughtSuperClasses(proguard.classfile.Clazz)>($r1);

        $r3 = r0.<proguard.optimize.peephole.ClassMerger: proguard.classfile.ProgramClass targetClass>;

        $r11 = specialinvoke r0.<proguard.optimize.peephole.ClassMerger: java.util.Set caughtSuperClasses(proguard.classfile.Clazz)>($r3);

        $z0 = virtualinvoke $r10.<java.lang.Object: boolean equals(java.lang.Object)>($r11);

        if $z0 == 0 goto label7;

        $z0 = staticinvoke <proguard.optimize.info.DotClassMarker: boolean isDotClassed(proguard.classfile.Clazz)>($r1);

        if $z0 == 0 goto label4;

        $r3 = r0.<proguard.optimize.peephole.ClassMerger: proguard.classfile.ProgramClass targetClass>;

        $z0 = staticinvoke <proguard.optimize.info.DotClassMarker: boolean isDotClassed(proguard.classfile.Clazz)>($r3);

        if $z0 != 0 goto label7;

     label4:
        $r3 = r0.<proguard.optimize.peephole.ClassMerger: proguard.classfile.ProgramClass targetClass>;

        $z0 = specialinvoke r0.<proguard.optimize.peephole.ClassMerger: boolean introducesUnwantedFields(proguard.classfile.ProgramClass,proguard.classfile.ProgramClass)>($r1, $r3);

        if $z0 != 0 goto label7;

        $r3 = r0.<proguard.optimize.peephole.ClassMerger: proguard.classfile.ProgramClass targetClass>;

        $z0 = specialinvoke r0.<proguard.optimize.peephole.ClassMerger: boolean introducesUnwantedFields(proguard.classfile.ProgramClass,proguard.classfile.ProgramClass)>($r3, $r1);

        if $z0 != 0 goto label7;

        $r3 = r0.<proguard.optimize.peephole.ClassMerger: proguard.classfile.ProgramClass targetClass>;

        $z0 = specialinvoke r0.<proguard.optimize.peephole.ClassMerger: boolean haveAnyIdenticalInitializers(proguard.classfile.Clazz,proguard.classfile.Clazz)>($r1, $r3);

        if $z0 != 0 goto label7;

        $z0 = r0.<proguard.optimize.peephole.ClassMerger: boolean mergeInterfacesAggressively>;

        if $z0 != 0 goto label5;

        $r3 = r0.<proguard.optimize.peephole.ClassMerger: proguard.classfile.ProgramClass targetClass>;

        $z0 = specialinvoke r0.<proguard.optimize.peephole.ClassMerger: boolean introducesUnwantedAbstractMethods(proguard.classfile.Clazz,proguard.classfile.ProgramClass)>($r1, $r3);

        if $z0 != 0 goto label7;

        $r3 = r0.<proguard.optimize.peephole.ClassMerger: proguard.classfile.ProgramClass targetClass>;

        $z0 = specialinvoke r0.<proguard.optimize.peephole.ClassMerger: boolean introducesUnwantedAbstractMethods(proguard.classfile.Clazz,proguard.classfile.ProgramClass)>($r3, $r1);

        if $z0 != 0 goto label7;

     label5:
        $r3 = r0.<proguard.optimize.peephole.ClassMerger: proguard.classfile.ProgramClass targetClass>;

        $z0 = specialinvoke r0.<proguard.optimize.peephole.ClassMerger: boolean overridesAnyMethods(proguard.classfile.Clazz,proguard.classfile.Clazz)>($r1, $r3);

        if $z0 != 0 goto label7;

        $r3 = r0.<proguard.optimize.peephole.ClassMerger: proguard.classfile.ProgramClass targetClass>;

        $z0 = specialinvoke r0.<proguard.optimize.peephole.ClassMerger: boolean overridesAnyMethods(proguard.classfile.Clazz,proguard.classfile.Clazz)>($r3, $r1);

        if $z0 != 0 goto label7;

        $r3 = r0.<proguard.optimize.peephole.ClassMerger: proguard.classfile.ProgramClass targetClass>;

        $z0 = specialinvoke r0.<proguard.optimize.peephole.ClassMerger: boolean shadowsAnyMethods(proguard.classfile.Clazz,proguard.classfile.Clazz)>($r1, $r3);

        if $z0 != 0 goto label7;

        $r3 = r0.<proguard.optimize.peephole.ClassMerger: proguard.classfile.ProgramClass targetClass>;

        $z0 = specialinvoke r0.<proguard.optimize.peephole.ClassMerger: boolean shadowsAnyMethods(proguard.classfile.Clazz,proguard.classfile.Clazz)>($r3, $r1);

        if $z0 != 0 goto label7;

        $r3 = r0.<proguard.optimize.peephole.ClassMerger: proguard.classfile.ProgramClass targetClass>;

        $i1 = virtualinvoke $r3.<proguard.classfile.ProgramClass: int getAccessFlags()>();

        $i2 = virtualinvoke $r1.<proguard.classfile.ProgramClass: int getAccessFlags()>();

        $r3 = r0.<proguard.optimize.peephole.ClassMerger: proguard.classfile.ProgramClass targetClass>;

        $i0 = $i1 & $i2;

        $i0 = $i0 & 1536;

        $i1 = $i1 | $i2;

        $i1 = $i1 & 24577;

        $i0 = $i1 | $i0;

        $r3.<proguard.classfile.ProgramClass: int u2accessFlags> = $i0;

        $r12 = new proguard.classfile.constant.visitor.ExceptClassConstantFilter;

        $r3 = r0.<proguard.optimize.peephole.ClassMerger: proguard.classfile.ProgramClass targetClass>;

        $r7 = virtualinvoke $r3.<proguard.classfile.ProgramClass: java.lang.String getName()>();

        $r13 = new proguard.classfile.visitor.ImplementedClassConstantFilter;

        $r14 = r0.<proguard.optimize.peephole.ClassMerger: proguard.classfile.ProgramClass targetClass>;

        $r2 = new proguard.classfile.visitor.ImplementingClassConstantFilter;

        $r3 = r0.<proguard.optimize.peephole.ClassMerger: proguard.classfile.ProgramClass targetClass>;

        $r4 = new proguard.classfile.editor.InterfaceAdder;

        $r5 = r0.<proguard.optimize.peephole.ClassMerger: proguard.classfile.ProgramClass targetClass>;

        specialinvoke $r4.<proguard.classfile.editor.InterfaceAdder: void <init>(proguard.classfile.ProgramClass)>($r5);

        specialinvoke $r2.<proguard.classfile.visitor.ImplementingClassConstantFilter: void <init>(proguard.classfile.Clazz,proguard.classfile.constant.visitor.ConstantVisitor)>($r3, $r4);

        specialinvoke $r13.<proguard.classfile.visitor.ImplementedClassConstantFilter: void <init>(proguard.classfile.Clazz,proguard.classfile.constant.visitor.ConstantVisitor)>($r14, $r2);

        specialinvoke $r12.<proguard.classfile.constant.visitor.ExceptClassConstantFilter: void <init>(java.lang.String,proguard.classfile.constant.visitor.ConstantVisitor)>($r7, $r13);

        virtualinvoke $r1.<proguard.classfile.ProgramClass: void interfaceConstantsAccept(proguard.classfile.constant.visitor.ConstantVisitor)>($r12);

        $r15 = new proguard.classfile.editor.MemberAdder;

        $r3 = r0.<proguard.optimize.peephole.ClassMerger: proguard.classfile.ProgramClass targetClass>;

        specialinvoke $r15.<proguard.classfile.editor.MemberAdder: void <init>(proguard.classfile.ProgramClass)>($r3);

        virtualinvoke $r1.<proguard.classfile.ProgramClass: void fieldsAccept(proguard.classfile.visitor.MemberVisitor)>($r15);

        virtualinvoke $r1.<proguard.classfile.ProgramClass: void methodsAccept(proguard.classfile.visitor.MemberVisitor)>($r15);

        $r16 = new proguard.classfile.editor.AttributeAdder;

        $r3 = r0.<proguard.optimize.peephole.ClassMerger: proguard.classfile.ProgramClass targetClass>;

        specialinvoke $r16.<proguard.classfile.editor.AttributeAdder: void <init>(proguard.classfile.ProgramClass,boolean)>($r3, 1);

        virtualinvoke $r1.<proguard.classfile.ProgramClass: void attributesAccept(proguard.classfile.attribute.visitor.AttributeVisitor)>($r16);

        $r3 = r0.<proguard.optimize.peephole.ClassMerger: proguard.classfile.ProgramClass targetClass>;

        $r17 = staticinvoke <proguard.optimize.info.ClassOptimizationInfo: proguard.optimize.info.ClassOptimizationInfo getClassOptimizationInfo(proguard.classfile.Clazz)>($r3);

        if $r17 == null goto label6;

        $r18 = staticinvoke <proguard.optimize.info.ClassOptimizationInfo: proguard.optimize.info.ClassOptimizationInfo getClassOptimizationInfo(proguard.classfile.Clazz)>($r1);

        virtualinvoke $r17.<proguard.optimize.info.ClassOptimizationInfo: void merge(proguard.optimize.info.ClassOptimizationInfo)>($r18);

     label6:
        $r3 = r0.<proguard.optimize.peephole.ClassMerger: proguard.classfile.ProgramClass targetClass>;

        staticinvoke <proguard.optimize.peephole.ClassMerger: void setTargetClass(proguard.classfile.Clazz,proguard.classfile.Clazz)>($r1, $r3);

        $r19 = r0.<proguard.optimize.peephole.ClassMerger: proguard.classfile.visitor.ClassVisitor extraClassVisitor>;

        if $r19 == null goto label7;

        $r19 = r0.<proguard.optimize.peephole.ClassMerger: proguard.classfile.visitor.ClassVisitor extraClassVisitor>;

        interfaceinvoke $r19.<proguard.classfile.visitor.ClassVisitor: void visitProgramClass(proguard.classfile.ProgramClass)>($r1);

     label7:
        return;
    }
}
