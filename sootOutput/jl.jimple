public final class jl extends java.lang.Object
{
    private static java.util.Hashtable a;

    static void <clinit>()
    {
        java.util.Hashtable $r0;

        $r0 = new java.util.Hashtable;

        specialinvoke $r0.<java.util.Hashtable: void <init>()>();

        <jl: java.util.Hashtable a> = $r0;

        staticinvoke <jl: void a(java.lang.Class)>(class "Lorg/apache/tools/zip/AsiExtraField;");

        staticinvoke <jl: void a(java.lang.Class)>(class "Ljm;");

        return;
    }

    public void <init>()
    {
        jl r0;

        r0 := @this: jl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static void a(java.lang.Class)
    {
        java.lang.Throwable $r9, $r10;
        jo $r2;
        org.apache.tools.zip.ZipShort $r4;
        java.lang.RuntimeException $r6;
        java.lang.ClassCastException $r5;
        java.lang.Class $r0;
        java.lang.Object $r1;
        java.lang.StringBuilder $r7;
        java.lang.String $r8;
        java.util.Hashtable $r3;

        $r0 := @parameter0: java.lang.Class;

     label1:
        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.Object newInstance()>();

     label2:
        $r2 = (jo) $r1;

     label3:
        $r3 = <jl: java.util.Hashtable a>;

     label4:
        $r4 = interfaceinvoke $r2.<jo: org.apache.tools.zip.ZipShort getHeaderId()>();

        virtualinvoke $r3.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r0);

     label5:
        return;

     label6:
        $r5 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" doesn\'t implement ZipExtraField");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>($r8);

        throw $r6;

     label7:
        $r9 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a concrete class");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>($r8);

        throw $r6;

     label8:
        $r10 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'s no-arg constructor is not public");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>($r8);

        throw $r6;

        catch java.lang.ClassCastException from label1 to label3 with label6;
        catch java.lang.ClassCastException from label4 to label5 with label6;
        catch java.lang.InstantiationException from label1 to label2 with label7;
        catch java.lang.InstantiationException from label4 to label5 with label7;
        catch java.lang.IllegalAccessException from label1 to label2 with label8;
        catch java.lang.IllegalAccessException from label4 to label5 with label8;
    }

    public static byte[] a(jo[])
    {
        byte[] $r3, $r4;
        jo $r1;
        jo[] $r0;
        org.apache.tools.zip.ZipShort $r2;
        int $i0, $i1, $i2, $i3;

        $r0 := @parameter0: jo[];

        $i1 = lengthof $r0;

        $i1 = $i1 * 4;

        $i2 = 0;

     label1:
        $i0 = lengthof $r0;

        if $i2 >= $i0 goto label2;

        $r1 = $r0[$i2];

        $r2 = interfaceinvoke $r1.<jo: org.apache.tools.zip.ZipShort getLocalFileDataLength()>();

        $i0 = virtualinvoke $r2.<org.apache.tools.zip.ZipShort: int getValue()>();

        $i1 = $i1 + $i0;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        $r3 = newarray (byte)[$i1];

        $i1 = 0;

        $i2 = 0;

     label3:
        $i0 = lengthof $r0;

        if $i1 >= $i0 goto label4;

        $r1 = $r0[$i1];

        $r2 = interfaceinvoke $r1.<jo: org.apache.tools.zip.ZipShort getHeaderId()>();

        $r4 = virtualinvoke $r2.<org.apache.tools.zip.ZipShort: byte[] getBytes()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r3, $i2, 2);

        $r1 = $r0[$i1];

        $r2 = interfaceinvoke $r1.<jo: org.apache.tools.zip.ZipShort getLocalFileDataLength()>();

        $r4 = virtualinvoke $r2.<org.apache.tools.zip.ZipShort: byte[] getBytes()>();

        $i0 = $i2 + 2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r3, $i0, 2);

        $r1 = $r0[$i1];

        $r4 = interfaceinvoke $r1.<jo: byte[] getLocalFileDataData()>();

        $i3 = $i2 + 4;

        $i0 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r3, $i3, $i0);

        $i0 = lengthof $r4;

        $i0 = $i0 + 4;

        $i2 = $i2 + $i0;

        $i1 = $i1 + 1;

        goto label3;

     label4:
        return $r3;
    }

    public static jo[] a(byte[])
    {
        java.lang.Throwable $r10, $r11;
        byte[] $r0;
        jn $r17;
        jo $r9;
        java.util.Vector $r1, $r13;
        int $i0, $i1, $i2, $i3;
        java.lang.InstantiationException $r18;
        java.lang.String $r5;
        java.util.Hashtable $r6;
        java.lang.IllegalAccessException $r19;
        java.util.zip.ZipException $r16;
        jo[] $r12;
        org.apache.tools.zip.ZipShort $r2, $r3, $r14;
        java.lang.StringBuilder $r4, $r15;
        java.lang.Object $r7;
        java.lang.Class $r8;

        $r0 := @parameter0: byte[];

        $r13 = new java.util.Vector;

        $r1 = $r13;

        specialinvoke $r13.<java.util.Vector: void <init>()>();

        $i1 = 0;

     label01:
        $i2 = lengthof $r0;

        $i2 = $i2 - 4;

        if $i1 > $i2 goto label15;

        $r3 = new org.apache.tools.zip.ZipShort;

        $r2 = $r3;

        specialinvoke $r3.<org.apache.tools.zip.ZipShort: void <init>(byte[],int)>($r0, $i1);

        $r14 = new org.apache.tools.zip.ZipShort;

        $i2 = $i1 + 2;

        specialinvoke $r14.<org.apache.tools.zip.ZipShort: void <init>(byte[],int)>($r0, $i2);

        $i2 = virtualinvoke $r14.<org.apache.tools.zip.ZipShort: int getValue()>();

        $i0 = $i1 + 4;

        $i3 = $i0 + $i2;

        $i0 = lengthof $r0;

        if $i3 <= $i0 goto label02;

        $r16 = new java.util.zip.ZipException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("data starting at ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is in unknown format");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.util.zip.ZipException: void <init>(java.lang.String)>($r5);

        throw $r16;

     label02:
        $r6 = <jl: java.util.Hashtable a>;

     label03:
        $r7 = virtualinvoke $r6.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r2);

     label04:
        $r8 = (java.lang.Class) $r7;

        if $r8 == null goto label10;

     label05:
        $r7 = virtualinvoke $r8.<java.lang.Class: java.lang.Object newInstance()>();

     label06:
        $r9 = (jo) $r7;

     label07:
        $i0 = $i1 + 4;

     label08:
        interfaceinvoke $r9.<jo: void parseFromLocalFileData(byte[],int,int)>($r0, $i0, $i2);

        virtualinvoke $r1.<java.util.Vector: void addElement(java.lang.Object)>($r9);

     label09:
        $i2 = $i2 + 4;

        $i1 = $i2 + $i1;

        goto label01;

     label10:
        $r17 = new jn;

        $r9 = $r17;

     label11:
        specialinvoke $r17.<jn: void <init>()>();

     label12:
        $r17 = (jn) $r9;

        $r17.<jn: org.apache.tools.zip.ZipShort a> = $r2;

        goto label07;

     label13:
        $r10 := @caughtexception;

        $r16 = new java.util.zip.ZipException;

        $r18 = (java.lang.InstantiationException) $r10;

        $r5 = virtualinvoke $r18.<java.lang.InstantiationException: java.lang.String getMessage()>();

        specialinvoke $r16.<java.util.zip.ZipException: void <init>(java.lang.String)>($r5);

        throw $r16;

     label14:
        $r11 := @caughtexception;

        $r16 = new java.util.zip.ZipException;

        $r19 = (java.lang.IllegalAccessException) $r11;

        $r5 = virtualinvoke $r19.<java.lang.IllegalAccessException: java.lang.String getMessage()>();

        specialinvoke $r16.<java.util.zip.ZipException: void <init>(java.lang.String)>($r5);

        throw $r16;

     label15:
        $i2 = lengthof $r0;

        if $i1 == $i2 goto label16;

        $r16 = new java.util.zip.ZipException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("data starting at ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is in unknown format");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.util.zip.ZipException: void <init>(java.lang.String)>($r5);

        throw $r16;

     label16:
        $i1 = virtualinvoke $r1.<java.util.Vector: int size()>();

        $r12 = newarray (jo)[$i1];

        virtualinvoke $r1.<java.util.Vector: void copyInto(java.lang.Object[])>($r12);

        return $r12;

        catch java.lang.InstantiationException from label03 to label04 with label13;
        catch java.lang.InstantiationException from label05 to label06 with label13;
        catch java.lang.InstantiationException from label08 to label09 with label13;
        catch java.lang.InstantiationException from label11 to label12 with label13;
        catch java.lang.IllegalAccessException from label03 to label04 with label14;
        catch java.lang.IllegalAccessException from label05 to label06 with label14;
        catch java.lang.IllegalAccessException from label08 to label09 with label14;
        catch java.lang.IllegalAccessException from label11 to label12 with label14;
    }

    public static byte[] b(jo[])
    {
        byte[] $r3, $r4;
        jo $r1;
        jo[] $r0;
        org.apache.tools.zip.ZipShort $r2;
        int $i0, $i1, $i2, $i3;

        $r0 := @parameter0: jo[];

        $i1 = lengthof $r0;

        $i1 = $i1 * 4;

        $i2 = 0;

     label1:
        $i0 = lengthof $r0;

        if $i2 >= $i0 goto label2;

        $r1 = $r0[$i2];

        $r2 = interfaceinvoke $r1.<jo: org.apache.tools.zip.ZipShort getCentralDirectoryLength()>();

        $i0 = virtualinvoke $r2.<org.apache.tools.zip.ZipShort: int getValue()>();

        $i1 = $i1 + $i0;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        $r3 = newarray (byte)[$i1];

        $i1 = 0;

        $i2 = 0;

     label3:
        $i0 = lengthof $r0;

        if $i1 >= $i0 goto label4;

        $r1 = $r0[$i1];

        $r2 = interfaceinvoke $r1.<jo: org.apache.tools.zip.ZipShort getHeaderId()>();

        $r4 = virtualinvoke $r2.<org.apache.tools.zip.ZipShort: byte[] getBytes()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r3, $i2, 2);

        $r1 = $r0[$i1];

        $r2 = interfaceinvoke $r1.<jo: org.apache.tools.zip.ZipShort getCentralDirectoryLength()>();

        $r4 = virtualinvoke $r2.<org.apache.tools.zip.ZipShort: byte[] getBytes()>();

        $i0 = $i2 + 2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r3, $i0, 2);

        $r1 = $r0[$i1];

        $r4 = interfaceinvoke $r1.<jo: byte[] getCentralDirectoryData()>();

        $i3 = $i2 + 4;

        $i0 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r3, $i3, $i0);

        $i0 = lengthof $r4;

        $i0 = $i0 + 4;

        $i2 = $i2 + $i0;

        $i1 = $i1 + 1;

        goto label3;

     label4:
        return $r3;
    }
}
