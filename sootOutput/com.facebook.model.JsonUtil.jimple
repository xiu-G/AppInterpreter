class com.facebook.model.JsonUtil extends java.lang.Object
{

    void <init>()
    {
        com.facebook.model.JsonUtil r0;

        r0 := @this: com.facebook.model.JsonUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void jsonObjectClear(org.json.JSONObject)
    {
        org.json.JSONObject $r0;
        java.util.Iterator $r1;
        boolean $z0;

        $r0 := @parameter0: org.json.JSONObject;

        $r1 = virtualinvoke $r0.<org.json.JSONObject: java.util.Iterator keys()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        return;

     label2:
        interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r1.<java.util.Iterator: void remove()>();

        goto label1;
    }

    static boolean jsonObjectContainsValue(org.json.JSONObject, java.lang.Object)
    {
        org.json.JSONObject $r0;
        java.util.Iterator $r2;
        java.lang.Object $r1, $r3;
        java.lang.String $r4;
        boolean $z0;

        $r0 := @parameter0: org.json.JSONObject;

        $r1 := @parameter1: java.lang.Object;

        $r2 = virtualinvoke $r0.<org.json.JSONObject: java.util.Iterator keys()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.lang.String) $r3;

        $r3 = virtualinvoke $r0.<org.json.JSONObject: java.lang.Object opt(java.lang.String)>($r4);

        if $r3 == null goto label1;

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        return 1;
    }

    static java.util.Set jsonObjectEntrySet(org.json.JSONObject)
    {
        java.util.HashSet $r1;
        org.json.JSONObject $r0;
        java.util.Iterator $r3;
        java.lang.Object $r4;
        java.lang.String $r5;
        com.facebook.model.JsonUtil$JSONObjectEntry $r2;
        boolean $z0;

        $r0 := @parameter0: org.json.JSONObject;

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        $r3 = virtualinvoke $r0.<org.json.JSONObject: java.util.Iterator keys()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        return $r1;

     label2:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.lang.String) $r4;

        $r4 = virtualinvoke $r0.<org.json.JSONObject: java.lang.Object opt(java.lang.String)>($r5);

        $r2 = new com.facebook.model.JsonUtil$JSONObjectEntry;

        specialinvoke $r2.<com.facebook.model.JsonUtil$JSONObjectEntry: void <init>(java.lang.String,java.lang.Object)>($r5, $r4);

        virtualinvoke $r1.<java.util.HashSet: boolean add(java.lang.Object)>($r2);

        goto label1;
    }

    static java.util.Set jsonObjectKeySet(org.json.JSONObject)
    {
        java.util.HashSet $r1;
        org.json.JSONObject $r0;
        java.util.Iterator $r2;
        java.lang.Object $r3;
        java.lang.String $r4;
        boolean $z0;

        $r0 := @parameter0: org.json.JSONObject;

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        $r2 = virtualinvoke $r0.<org.json.JSONObject: java.util.Iterator keys()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        return $r1;

     label2:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.lang.String) $r3;

        virtualinvoke $r1.<java.util.HashSet: boolean add(java.lang.Object)>($r4);

        goto label1;
    }

    static void jsonObjectPutAll(org.json.JSONObject, java.util.Map)
    {
        java.util.Map$Entry $r5;
        java.util.Iterator $r3;
        java.util.Set $r2;
        java.lang.IllegalArgumentException $r8;
        org.json.JSONException $r7;
        org.json.JSONObject $r0;
        java.util.Map $r1;
        java.lang.Object $r4;
        java.lang.String $r6;
        boolean $z0;

        $r0 := @parameter0: org.json.JSONObject;

        $r1 := @parameter1: java.util.Map;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        return;

     label2:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.util.Map$Entry) $r4;

     label3:
        $r4 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getKey()>();

     label4:
        $r6 = (java.lang.String) $r4;

     label5:
        $r4 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke $r0.<org.json.JSONObject: org.json.JSONObject putOpt(java.lang.String,java.lang.Object)>($r6, $r4);

     label6:
        goto label1;

     label7:
        $r7 := @caughtexception;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r7);

        throw $r8;

        catch org.json.JSONException from label3 to label4 with label7;
        catch org.json.JSONException from label5 to label6 with label7;
    }

    static java.util.Collection jsonObjectValues(org.json.JSONObject)
    {
        org.json.JSONObject $r0;
        java.util.Iterator $r2;
        java.lang.Object $r3;
        java.lang.String $r4;
        java.util.ArrayList $r1;
        boolean $z0;

        $r0 := @parameter0: org.json.JSONObject;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r2 = virtualinvoke $r0.<org.json.JSONObject: java.util.Iterator keys()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        return $r1;

     label2:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.lang.String) $r3;

        $r3 = virtualinvoke $r0.<org.json.JSONObject: java.lang.Object opt(java.lang.String)>($r4);

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        goto label1;
    }
}
