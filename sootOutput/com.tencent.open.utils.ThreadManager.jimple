public final class com.tencent.open.utils.ThreadManager extends java.lang.Object
{
    public static final boolean DEBUG_THREAD;
    public static final java.util.concurrent.Executor NETWORK_EXECUTOR;
    private static android.os.Handler a;
    private static android.os.HandlerThread b;
    private static android.os.Handler c;
    private static android.os.HandlerThread d;

    static void <clinit>()
    {
        java.util.concurrent.Executor $r0;

        $r0 = staticinvoke <com.tencent.open.utils.ThreadManager: java.util.concurrent.Executor a()>();

        <com.tencent.open.utils.ThreadManager: java.util.concurrent.Executor NETWORK_EXECUTOR> = $r0;

        return;
    }

    public void <init>()
    {
        com.tencent.open.utils.ThreadManager r0;

        r0 := @this: com.tencent.open.utils.ThreadManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static java.util.concurrent.Executor a()
    {
        java.util.concurrent.ThreadPoolExecutor $r0, $r7;
        java.util.concurrent.Executor $r8;
        java.lang.reflect.Field $r4;
        java.util.concurrent.LinkedBlockingQueue $r6;
        java.lang.Exception $r5;
        java.util.concurrent.TimeUnit $r1;
        int $i0;
        java.lang.Object $r2;
        java.lang.Class $r3;
        boolean $z0;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 11 goto label2;

        $r7 = new java.util.concurrent.ThreadPoolExecutor;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $r6 = new java.util.concurrent.LinkedBlockingQueue;

        specialinvoke $r6.<java.util.concurrent.LinkedBlockingQueue: void <init>()>();

        specialinvoke $r7.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue)>(1, 1, 0L, $r1, $r6);

        $r2 = $r7;

     label1:
        $z0 = $r2 instanceof java.util.concurrent.ThreadPoolExecutor;

        if $z0 == 0 goto label6;

        $r0 = (java.util.concurrent.ThreadPoolExecutor) $r2;

        virtualinvoke $r0.<java.util.concurrent.ThreadPoolExecutor: void setCorePoolSize(int)>(3);

        $r8 = (java.util.concurrent.Executor) $r2;

        return $r8;

     label2:
        $r3 = class "Landroid/os/AsyncTask;";

     label3:
        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("sExecutor");

        virtualinvoke $r4.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        $r2 = virtualinvoke $r4.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(null);

        $r2 = (java.util.concurrent.Executor) $r2;

     label4:
        goto label1;

     label5:
        $r5 := @caughtexception;

        $r0 = new java.util.concurrent.ThreadPoolExecutor;

        $r2 = $r0;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $r6 = new java.util.concurrent.LinkedBlockingQueue;

        specialinvoke $r6.<java.util.concurrent.LinkedBlockingQueue: void <init>()>();

        specialinvoke $r0.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue)>(1, 1, 0L, $r1, $r6);

        goto label1;

     label6:
        $r8 = (java.util.concurrent.Executor) $r2;

        return $r8;

        catch java.lang.Exception from label3 to label4 with label5;
    }

    public static void executeOnNetWorkThread(java.lang.Runnable)
    {
        java.lang.Throwable $r2;
        java.lang.Runnable $r0;
        java.util.concurrent.Executor $r1;

        $r0 := @parameter0: java.lang.Runnable;

        $r1 = <com.tencent.open.utils.ThreadManager: java.util.concurrent.Executor NETWORK_EXECUTOR>;

     label1:
        interfaceinvoke $r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r0);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        return;

        catch java.util.concurrent.RejectedExecutionException from label1 to label2 with label3;
    }

    public static void executeOnSubThread(java.lang.Runnable)
    {
        java.lang.Runnable $r0;
        android.os.Handler $r1;

        $r0 := @parameter0: java.lang.Runnable;

        $r1 = staticinvoke <com.tencent.open.utils.ThreadManager: android.os.Handler getSubThreadHandler()>();

        virtualinvoke $r1.<android.os.Handler: boolean post(java.lang.Runnable)>($r0);

        return;
    }

    public static android.os.Handler getFileThreadHandler()
    {
        java.lang.Throwable $r3;
        android.os.HandlerThread $r2;
        android.os.Looper $r0;
        android.os.Handler $r1;

        $r1 = <com.tencent.open.utils.ThreadManager: android.os.Handler c>;

        if $r1 != null goto label2;

        entermonitor class "Lcom/tencent/open/utils/ThreadManager;";

     label1:
        $r2 = new android.os.HandlerThread;

        specialinvoke $r2.<android.os.HandlerThread: void <init>(java.lang.String)>("QQ_FILE_RW");

        <com.tencent.open.utils.ThreadManager: android.os.HandlerThread d> = $r2;

        $r2 = <com.tencent.open.utils.ThreadManager: android.os.HandlerThread d>;

        virtualinvoke $r2.<android.os.HandlerThread: void start()>();

        $r1 = new android.os.Handler;

        $r2 = <com.tencent.open.utils.ThreadManager: android.os.HandlerThread d>;

        $r0 = virtualinvoke $r2.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke $r1.<android.os.Handler: void <init>(android.os.Looper)>($r0);

        <com.tencent.open.utils.ThreadManager: android.os.Handler c> = $r1;

        exitmonitor class "Lcom/tencent/open/utils/ThreadManager;";

     label2:
        $r1 = <com.tencent.open.utils.ThreadManager: android.os.Handler c>;

        return $r1;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor class "Lcom/tencent/open/utils/ThreadManager;";

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public static android.os.Looper getFileThreadLooper()
    {
        android.os.Handler $r0;
        android.os.Looper $r1;

        $r0 = staticinvoke <com.tencent.open.utils.ThreadManager: android.os.Handler getFileThreadHandler()>();

        $r1 = virtualinvoke $r0.<android.os.Handler: android.os.Looper getLooper()>();

        return $r1;
    }

    public static java.lang.Thread getSubThread()
    {
        android.os.HandlerThread $r0;

        $r0 = <com.tencent.open.utils.ThreadManager: android.os.HandlerThread b>;

        if $r0 != null goto label1;

        staticinvoke <com.tencent.open.utils.ThreadManager: android.os.Handler getSubThreadHandler()>();

     label1:
        $r0 = <com.tencent.open.utils.ThreadManager: android.os.HandlerThread b>;

        return $r0;
    }

    public static android.os.Handler getSubThreadHandler()
    {
        java.lang.Throwable $r3;
        android.os.HandlerThread $r2;
        android.os.Looper $r0;
        android.os.Handler $r1;

        $r1 = <com.tencent.open.utils.ThreadManager: android.os.Handler a>;

        if $r1 != null goto label2;

        entermonitor class "Lcom/tencent/open/utils/ThreadManager;";

     label1:
        $r2 = new android.os.HandlerThread;

        specialinvoke $r2.<android.os.HandlerThread: void <init>(java.lang.String)>("QQ_SUB");

        <com.tencent.open.utils.ThreadManager: android.os.HandlerThread b> = $r2;

        $r2 = <com.tencent.open.utils.ThreadManager: android.os.HandlerThread b>;

        virtualinvoke $r2.<android.os.HandlerThread: void start()>();

        $r1 = new android.os.Handler;

        $r2 = <com.tencent.open.utils.ThreadManager: android.os.HandlerThread b>;

        $r0 = virtualinvoke $r2.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke $r1.<android.os.Handler: void <init>(android.os.Looper)>($r0);

        <com.tencent.open.utils.ThreadManager: android.os.Handler a> = $r1;

        exitmonitor class "Lcom/tencent/open/utils/ThreadManager;";

     label2:
        $r1 = <com.tencent.open.utils.ThreadManager: android.os.Handler a>;

        return $r1;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor class "Lcom/tencent/open/utils/ThreadManager;";

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public static android.os.Looper getSubThreadLooper()
    {
        android.os.Handler $r0;
        android.os.Looper $r1;

        $r0 = staticinvoke <com.tencent.open.utils.ThreadManager: android.os.Handler getSubThreadHandler()>();

        $r1 = virtualinvoke $r0.<android.os.Handler: android.os.Looper getLooper()>();

        return $r1;
    }

    public static void init()
    {
        return;
    }
}
