public class org.slf4j.helpers.BasicMarkerFactory extends java.lang.Object implements org.slf4j.IMarkerFactory
{
    java.util.Map markerMap;

    public void <init>()
    {
        java.util.HashMap $r1;
        org.slf4j.helpers.BasicMarkerFactory r0;

        r0 := @this: org.slf4j.helpers.BasicMarkerFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.slf4j.helpers.BasicMarkerFactory: java.util.Map markerMap> = $r1;

        return;
    }

    public boolean detachMarker(java.lang.String)
    {
        org.slf4j.helpers.BasicMarkerFactory r0;
        java.util.Map $r3;
        java.lang.Object $r2;
        java.lang.String $r1;

        r0 := @this: org.slf4j.helpers.BasicMarkerFactory;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r3 = r0.<org.slf4j.helpers.BasicMarkerFactory: java.util.Map markerMap>;

        $r2 = interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r1);

        if $r2 == null goto label2;

        return 1;

     label2:
        return 0;
    }

    public boolean exists(java.lang.String)
    {
        java.lang.Throwable $r3;
        org.slf4j.helpers.BasicMarkerFactory r0;
        java.util.Map $r2;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: org.slf4j.helpers.BasicMarkerFactory;

        $r1 := @parameter0: java.lang.String;

        entermonitor r0;

        if $r1 != null goto label2;

        $z0 = 0;

     label1:
        exitmonitor r0;

        return $z0;

     label2:
        $r2 = r0.<org.slf4j.helpers.BasicMarkerFactory: java.util.Map markerMap>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

     label3:
        goto label1;

     label4:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public org.slf4j.Marker getDetachedMarker(java.lang.String)
    {
        org.slf4j.helpers.BasicMarker $r2;
        java.lang.String $r1;
        org.slf4j.helpers.BasicMarkerFactory r0;

        r0 := @this: org.slf4j.helpers.BasicMarkerFactory;

        $r1 := @parameter0: java.lang.String;

        $r2 = new org.slf4j.helpers.BasicMarker;

        specialinvoke $r2.<org.slf4j.helpers.BasicMarker: void <init>(java.lang.String)>($r1);

        return $r2;
    }

    public org.slf4j.Marker getMarker(java.lang.String)
    {
        java.lang.Throwable $r3;
        java.lang.IllegalArgumentException $r6;
        org.slf4j.helpers.BasicMarkerFactory r0;
        org.slf4j.Marker r5;
        java.util.Map $r4;
        java.lang.Object $r2;
        org.slf4j.helpers.BasicMarker $r7;
        java.lang.String $r1;

        r0 := @this: org.slf4j.helpers.BasicMarkerFactory;

        $r1 := @parameter0: java.lang.String;

        entermonitor r0;

        if $r1 != null goto label3;

     label1:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Marker name cannot be null");

        throw $r6;

     label2:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

     label3:
        $r4 = r0.<org.slf4j.helpers.BasicMarkerFactory: java.util.Map markerMap>;

        $r2 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r5 = (org.slf4j.Marker) $r2;

        if r5 != null goto label4;

        $r7 = new org.slf4j.helpers.BasicMarker;

        r5 = $r7;

        specialinvoke $r7.<org.slf4j.helpers.BasicMarker: void <init>(java.lang.String)>($r1);

        $r4 = r0.<org.slf4j.helpers.BasicMarkerFactory: java.util.Map markerMap>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, r5);

     label4:
        exitmonitor r0;

        return r5;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }
}
