public class proguard.optimize.info.AccessMethodMarker extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.instruction.visitor.InstructionVisitor, proguard.classfile.constant.visitor.ConstantVisitor, proguard.classfile.visitor.ClassVisitor, proguard.classfile.visitor.MemberVisitor
{
    private proguard.classfile.Method invokingMethod;

    public void <init>()
    {
        proguard.optimize.info.AccessMethodMarker r0;

        r0 := @this: proguard.optimize.info.AccessMethodMarker;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        return;
    }

    public static boolean accessesPackageCode(proguard.classfile.Method)
    {
        proguard.classfile.Method $r0;
        proguard.optimize.info.MethodOptimizationInfo $r1;
        boolean $z0;

        $r0 := @parameter0: proguard.classfile.Method;

        $r1 = staticinvoke <proguard.optimize.info.MethodOptimizationInfo: proguard.optimize.info.MethodOptimizationInfo getMethodOptimizationInfo(proguard.classfile.Method)>($r0);

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r1.<proguard.optimize.info.MethodOptimizationInfo: boolean accessesPackageCode()>();

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public static boolean accessesPrivateCode(proguard.classfile.Method)
    {
        proguard.classfile.Method $r0;
        proguard.optimize.info.MethodOptimizationInfo $r1;
        boolean $z0;

        $r0 := @parameter0: proguard.classfile.Method;

        $r1 = staticinvoke <proguard.optimize.info.MethodOptimizationInfo: proguard.optimize.info.MethodOptimizationInfo getMethodOptimizationInfo(proguard.classfile.Method)>($r0);

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r1.<proguard.optimize.info.MethodOptimizationInfo: boolean accessesPrivateCode()>();

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public static boolean accessesProtectedCode(proguard.classfile.Method)
    {
        proguard.classfile.Method $r0;
        proguard.optimize.info.MethodOptimizationInfo $r1;
        boolean $z0;

        $r0 := @parameter0: proguard.classfile.Method;

        $r1 = staticinvoke <proguard.optimize.info.MethodOptimizationInfo: proguard.optimize.info.MethodOptimizationInfo getMethodOptimizationInfo(proguard.classfile.Method)>($r0);

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r1.<proguard.optimize.info.MethodOptimizationInfo: boolean accessesProtectedCode()>();

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    private static void setAccessesPackageCode(proguard.classfile.Method)
    {
        proguard.classfile.Method $r0;
        proguard.optimize.info.MethodOptimizationInfo $r1;

        $r0 := @parameter0: proguard.classfile.Method;

        $r1 = staticinvoke <proguard.optimize.info.MethodOptimizationInfo: proguard.optimize.info.MethodOptimizationInfo getMethodOptimizationInfo(proguard.classfile.Method)>($r0);

        if $r1 == null goto label1;

        virtualinvoke $r1.<proguard.optimize.info.MethodOptimizationInfo: void setAccessesPackageCode()>();

     label1:
        return;
    }

    private static void setAccessesPrivateCode(proguard.classfile.Method)
    {
        proguard.classfile.Method $r0;
        proguard.optimize.info.MethodOptimizationInfo $r1;

        $r0 := @parameter0: proguard.classfile.Method;

        $r1 = staticinvoke <proguard.optimize.info.MethodOptimizationInfo: proguard.optimize.info.MethodOptimizationInfo getMethodOptimizationInfo(proguard.classfile.Method)>($r0);

        if $r1 == null goto label1;

        virtualinvoke $r1.<proguard.optimize.info.MethodOptimizationInfo: void setAccessesPrivateCode()>();

     label1:
        return;
    }

    private static void setAccessesProtectedCode(proguard.classfile.Method)
    {
        proguard.classfile.Method $r0;
        proguard.optimize.info.MethodOptimizationInfo $r1;

        $r0 := @parameter0: proguard.classfile.Method;

        $r1 = staticinvoke <proguard.optimize.info.MethodOptimizationInfo: proguard.optimize.info.MethodOptimizationInfo getMethodOptimizationInfo(proguard.classfile.Method)>($r0);

        if $r1 == null goto label1;

        virtualinvoke $r1.<proguard.optimize.info.MethodOptimizationInfo: void setAccessesProtectedCode()>();

     label1:
        return;
    }

    public void visitAnyClass(proguard.classfile.Clazz)
    {
        proguard.optimize.info.AccessMethodMarker r0;
        proguard.classfile.Clazz $r1;
        int $i0;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.optimize.info.AccessMethodMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $i0 = interfaceinvoke $r1.<proguard.classfile.Clazz: int getAccessFlags()>();

        $i0 = $i0 & 1;

        if $i0 != 0 goto label1;

        $r2 = r0.<proguard.optimize.info.AccessMethodMarker: proguard.classfile.Method invokingMethod>;

        staticinvoke <proguard.optimize.info.AccessMethodMarker: void setAccessesPackageCode(proguard.classfile.Method)>($r2);

     label1:
        return;
    }

    public void visitAnyConstant(proguard.classfile.Clazz, proguard.classfile.constant.Constant)
    {
        proguard.optimize.info.AccessMethodMarker r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.constant.Constant $r2;

        r0 := @this: proguard.optimize.info.AccessMethodMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.Constant;

        return;
    }

    public void visitAnyInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.Instruction)
    {
        proguard.optimize.info.AccessMethodMarker r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.instruction.Instruction $r4;
        int $i0;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.optimize.info.AccessMethodMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.Instruction;

        return;
    }

    public void visitAnyMember(proguard.classfile.Clazz, proguard.classfile.Member)
    {
        proguard.optimize.info.AccessMethodMarker r0;
        proguard.classfile.Clazz $r1;
        int $i0, $i1;
        proguard.classfile.Method $r3;
        proguard.classfile.Member $r2;

        r0 := @this: proguard.optimize.info.AccessMethodMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Member;

        $i0 = interfaceinvoke $r2.<proguard.classfile.Member: int getAccessFlags()>();

        $i1 = $i0 & 2;

        if $i1 == 0 goto label1;

        $r3 = r0.<proguard.optimize.info.AccessMethodMarker: proguard.classfile.Method invokingMethod>;

        staticinvoke <proguard.optimize.info.AccessMethodMarker: void setAccessesPrivateCode(proguard.classfile.Method)>($r3);

        return;

     label1:
        $i1 = $i0 & 4;

        if $i1 == 0 goto label2;

        $r3 = r0.<proguard.optimize.info.AccessMethodMarker: proguard.classfile.Method invokingMethod>;

        staticinvoke <proguard.optimize.info.AccessMethodMarker: void setAccessesProtectedCode(proguard.classfile.Method)>($r3);

        return;

     label2:
        $i0 = $i0 & 1;

        if $i0 != 0 goto label3;

        $r3 = r0.<proguard.optimize.info.AccessMethodMarker: proguard.classfile.Method invokingMethod>;

        staticinvoke <proguard.optimize.info.AccessMethodMarker: void setAccessesPackageCode(proguard.classfile.Method)>($r3);

     label3:
        return;
    }

    public void visitAnyRefConstant(proguard.classfile.Clazz, proguard.classfile.constant.RefConstant)
    {
        proguard.optimize.info.AccessMethodMarker r0;
        proguard.classfile.Clazz $r1;
        int $i0;
        proguard.classfile.constant.RefConstant $r2;

        r0 := @this: proguard.optimize.info.AccessMethodMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.RefConstant;

        $i0 = $r2.<proguard.classfile.constant.RefConstant: int u2classIndex>;

        interfaceinvoke $r1.<proguard.classfile.Clazz: void constantPoolEntryAccept(int,proguard.classfile.constant.visitor.ConstantVisitor)>($i0, r0);

        virtualinvoke $r2.<proguard.classfile.constant.RefConstant: void referencedClassAccept(proguard.classfile.visitor.ClassVisitor)>(r0);

        virtualinvoke $r2.<proguard.classfile.constant.RefConstant: void referencedMemberAccept(proguard.classfile.visitor.MemberVisitor)>(r0);

        return;
    }

    public void visitClassConstant(proguard.classfile.Clazz, proguard.classfile.constant.ClassConstant)
    {
        proguard.optimize.info.AccessMethodMarker r0;
        proguard.classfile.constant.ClassConstant $r2;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.optimize.info.AccessMethodMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.ClassConstant;

        virtualinvoke $r2.<proguard.classfile.constant.ClassConstant: void referencedClassAccept(proguard.classfile.visitor.ClassVisitor)>(r0);

        return;
    }

    public void visitConstantInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.ConstantInstruction)
    {
        proguard.optimize.info.AccessMethodMarker r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.instruction.ConstantInstruction $r4;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.optimize.info.AccessMethodMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.ConstantInstruction;

        r0.<proguard.optimize.info.AccessMethodMarker: proguard.classfile.Method invokingMethod> = $r2;

        $i0 = $r4.<proguard.classfile.instruction.ConstantInstruction: int constantIndex>;

        interfaceinvoke $r1.<proguard.classfile.Clazz: void constantPoolEntryAccept(int,proguard.classfile.constant.visitor.ConstantVisitor)>($i0, r0);

        return;
    }

    public void visitStringConstant(proguard.classfile.Clazz, proguard.classfile.constant.StringConstant)
    {
        proguard.optimize.info.AccessMethodMarker r0;
        proguard.classfile.constant.StringConstant $r2;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.optimize.info.AccessMethodMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.StringConstant;

        virtualinvoke $r2.<proguard.classfile.constant.StringConstant: void referencedClassAccept(proguard.classfile.visitor.ClassVisitor)>(r0);

        virtualinvoke $r2.<proguard.classfile.constant.StringConstant: void referencedMemberAccept(proguard.classfile.visitor.MemberVisitor)>(r0);

        return;
    }
}
