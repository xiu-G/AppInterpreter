public abstract class de.greenrobot.dao.test.DbTest extends android.test.AndroidTestCase
{
    public static final java.lang.String DB_NAME;
    private android.app.Application application;
    protected android.database.sqlite.SQLiteDatabase db;
    protected final boolean inMemory;
    protected final java.util.Random random;

    public void <init>()
    {
        de.greenrobot.dao.test.DbTest r0;

        r0 := @this: de.greenrobot.dao.test.DbTest;

        specialinvoke r0.<de.greenrobot.dao.test.DbTest: void <init>(boolean)>(1);

        return;
    }

    public void <init>(boolean)
    {
        java.util.Random $r1;
        de.greenrobot.dao.test.DbTest r0;
        boolean $z0;

        r0 := @this: de.greenrobot.dao.test.DbTest;

        $z0 := @parameter0: boolean;

        specialinvoke r0.<android.test.AndroidTestCase: void <init>()>();

        r0.<de.greenrobot.dao.test.DbTest: boolean inMemory> = $z0;

        $r1 = new java.util.Random;

        specialinvoke $r1.<java.util.Random: void <init>()>();

        r0.<de.greenrobot.dao.test.DbTest: java.util.Random random> = $r1;

        return;
    }

    public android.app.Application createApplication(java.lang.Class)
    {
        android.content.Context $r3;
        java.lang.RuntimeException $r5;
        de.greenrobot.dao.test.DbTest r0;
        java.lang.Exception $r4;
        android.app.Application $r2;
        java.lang.Class $r1;
        java.lang.StringBuilder $r6;
        java.lang.String $r7;

        r0 := @this: de.greenrobot.dao.test.DbTest;

        $r1 := @parameter0: java.lang.Class;

        $r2 = r0.<de.greenrobot.dao.test.DbTest: android.app.Application application>;

        staticinvoke <de.greenrobot.dao.test.DbTest: void assertNull(java.lang.String,java.lang.Object)>("Application already created", $r2);

     label1:
        $r3 = virtualinvoke r0.<de.greenrobot.dao.test.DbTest: android.content.Context getContext()>();

        $r2 = staticinvoke <android.app.Instrumentation: android.app.Application newApplication(java.lang.Class,android.content.Context)>($r1, $r3);

     label2:
        virtualinvoke $r2.<android.app.Application: void onCreate()>();

        r0.<de.greenrobot.dao.test.DbTest: android.app.Application application> = $r2;

        return $r2;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not create application ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r7, $r4);

        throw $r5;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected android.database.sqlite.SQLiteDatabase createDatabase()
    {
        android.database.sqlite.SQLiteDatabase $r1;
        android.content.Context $r2;
        de.greenrobot.dao.test.DbTest r0;
        boolean $z0;

        r0 := @this: de.greenrobot.dao.test.DbTest;

        $z0 = r0.<de.greenrobot.dao.test.DbTest: boolean inMemory>;

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase create(android.database.sqlite.SQLiteDatabase$CursorFactory)>(null);

        return $r1;

     label1:
        $r2 = virtualinvoke r0.<de.greenrobot.dao.test.DbTest: android.content.Context getContext()>();

        virtualinvoke $r2.<android.content.Context: boolean deleteDatabase(java.lang.String)>("greendao-unittest-db.temp");

        $r2 = virtualinvoke r0.<de.greenrobot.dao.test.DbTest: android.content.Context getContext()>();

        $r1 = virtualinvoke $r2.<android.content.Context: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory)>("greendao-unittest-db.temp", 0, null);

        return $r1;
    }

    public android.app.Application getApplication()
    {
        android.app.Application $r1;
        de.greenrobot.dao.test.DbTest r0;

        r0 := @this: de.greenrobot.dao.test.DbTest;

        $r1 = r0.<de.greenrobot.dao.test.DbTest: android.app.Application application>;

        staticinvoke <de.greenrobot.dao.test.DbTest: void assertNotNull(java.lang.String,java.lang.Object)>("Application not yet created", $r1);

        $r1 = r0.<de.greenrobot.dao.test.DbTest: android.app.Application application>;

        return $r1;
    }

    protected void logTableDump(java.lang.String)
    {
        android.database.sqlite.SQLiteDatabase $r2;
        java.lang.String $r1;
        de.greenrobot.dao.test.DbTest r0;

        r0 := @this: de.greenrobot.dao.test.DbTest;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<de.greenrobot.dao.test.DbTest: android.database.sqlite.SQLiteDatabase db>;

        staticinvoke <de.greenrobot.dao.DbUtils: void logTableDump(android.database.sqlite.SQLiteDatabase,java.lang.String)>($r2, $r1);

        return;
    }

    protected void setUp()
    {
        android.database.sqlite.SQLiteDatabase $r1;
        de.greenrobot.dao.test.DbTest r0;

        r0 := @this: de.greenrobot.dao.test.DbTest;

        specialinvoke r0.<android.test.AndroidTestCase: void setUp()>();

        $r1 = virtualinvoke r0.<de.greenrobot.dao.test.DbTest: android.database.sqlite.SQLiteDatabase createDatabase()>();

        r0.<de.greenrobot.dao.test.DbTest: android.database.sqlite.SQLiteDatabase db> = $r1;

        return;
    }

    protected void tearDown()
    {
        android.content.Context $r1;
        android.database.sqlite.SQLiteDatabase $r3;
        android.app.Application $r2;
        de.greenrobot.dao.test.DbTest r0;
        boolean $z0;

        r0 := @this: de.greenrobot.dao.test.DbTest;

        $r2 = r0.<de.greenrobot.dao.test.DbTest: android.app.Application application>;

        if $r2 == null goto label1;

        virtualinvoke r0.<de.greenrobot.dao.test.DbTest: void terminateApplication()>();

     label1:
        $r3 = r0.<de.greenrobot.dao.test.DbTest: android.database.sqlite.SQLiteDatabase db>;

        virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: void close()>();

        $z0 = r0.<de.greenrobot.dao.test.DbTest: boolean inMemory>;

        if $z0 != 0 goto label2;

        $r1 = virtualinvoke r0.<de.greenrobot.dao.test.DbTest: android.content.Context getContext()>();

        virtualinvoke $r1.<android.content.Context: boolean deleteDatabase(java.lang.String)>("greendao-unittest-db.temp");

     label2:
        specialinvoke r0.<android.test.AndroidTestCase: void tearDown()>();

        return;
    }

    public void terminateApplication()
    {
        android.app.Application $r1;
        de.greenrobot.dao.test.DbTest r0;

        r0 := @this: de.greenrobot.dao.test.DbTest;

        $r1 = r0.<de.greenrobot.dao.test.DbTest: android.app.Application application>;

        staticinvoke <de.greenrobot.dao.test.DbTest: void assertNotNull(java.lang.String,java.lang.Object)>("Application not yet created", $r1);

        $r1 = r0.<de.greenrobot.dao.test.DbTest: android.app.Application application>;

        virtualinvoke $r1.<android.app.Application: void onTerminate()>();

        r0.<de.greenrobot.dao.test.DbTest: android.app.Application application> = null;

        return;
    }

    public static void <clinit>()
    {
        <de.greenrobot.dao.test.DbTest: java.lang.String DB_NAME> = "greendao-unittest-db.temp";

        return;
    }
}
