public abstract class de.greenrobot.dao.test.AbstractDaoTestLongPk extends de.greenrobot.dao.test.AbstractDaoTestSinglePk
{

    public void <init>(java.lang.Class)
    {
        de.greenrobot.dao.test.AbstractDaoTestLongPk r0;
        java.lang.Class $r1;

        r0 := @this: de.greenrobot.dao.test.AbstractDaoTestLongPk;

        $r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: void <init>(java.lang.Class)>($r1);

        return;
    }

    protected java.lang.Long createRandomPk()
    {
        de.greenrobot.dao.test.AbstractDaoTestLongPk r0;
        java.lang.Long $r2;
        java.util.Random $r1;
        long $l0;

        r0 := @this: de.greenrobot.dao.test.AbstractDaoTestLongPk;

        $r1 = r0.<de.greenrobot.dao.test.AbstractDaoTestLongPk: java.util.Random random>;

        $l0 = virtualinvoke $r1.<java.util.Random: long nextLong()>();

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        return $r2;
    }

    protected volatile java.lang.Object createRandomPk()
    {
        de.greenrobot.dao.test.AbstractDaoTestLongPk r0;
        java.lang.Long $r1;

        r0 := @this: de.greenrobot.dao.test.AbstractDaoTestLongPk;

        $r1 = virtualinvoke r0.<de.greenrobot.dao.test.AbstractDaoTestLongPk: java.lang.Long createRandomPk()>();

        return $r1;
    }

    public void testAssignPk()
    {
        de.greenrobot.dao.test.AbstractDaoTestLongPk r0;
        java.lang.Long $r5, $r6;
        de.greenrobot.dao.InternalUnitTestDaoAccess $r1;
        de.greenrobot.dao.AbstractDao $r4;
        java.lang.Object $r2, $r3;
        java.lang.StringBuilder $r7;
        java.lang.Class $r8;
        java.lang.String $r9;
        boolean $z0;

        r0 := @this: de.greenrobot.dao.test.AbstractDaoTestLongPk;

        $r1 = r0.<de.greenrobot.dao.test.AbstractDaoTestLongPk: de.greenrobot.dao.InternalUnitTestDaoAccess daoAccess>;

        $z0 = virtualinvoke $r1.<de.greenrobot.dao.InternalUnitTestDaoAccess: boolean isEntityUpdateable()>();

        if $z0 == 0 goto label2;

        $r2 = virtualinvoke r0.<de.greenrobot.dao.test.AbstractDaoTestLongPk: java.lang.Object createEntity(java.lang.Object)>(null);

        if $r2 == null goto label1;

        $r3 = virtualinvoke r0.<de.greenrobot.dao.test.AbstractDaoTestLongPk: java.lang.Object createEntity(java.lang.Object)>(null);

        $r4 = r0.<de.greenrobot.dao.test.AbstractDaoTestLongPk: de.greenrobot.dao.AbstractDao dao>;

        virtualinvoke $r4.<de.greenrobot.dao.AbstractDao: long insert(java.lang.Object)>($r2);

        $r4 = r0.<de.greenrobot.dao.test.AbstractDaoTestLongPk: de.greenrobot.dao.AbstractDao dao>;

        virtualinvoke $r4.<de.greenrobot.dao.AbstractDao: long insert(java.lang.Object)>($r3);

        $r1 = r0.<de.greenrobot.dao.test.AbstractDaoTestLongPk: de.greenrobot.dao.InternalUnitTestDaoAccess daoAccess>;

        $r2 = virtualinvoke $r1.<de.greenrobot.dao.InternalUnitTestDaoAccess: java.lang.Object getKey(java.lang.Object)>($r2);

        $r5 = (java.lang.Long) $r2;

        staticinvoke <de.greenrobot.dao.test.AbstractDaoTestLongPk: void assertNotNull(java.lang.Object)>($r5);

        $r1 = r0.<de.greenrobot.dao.test.AbstractDaoTestLongPk: de.greenrobot.dao.InternalUnitTestDaoAccess daoAccess>;

        $r3 = virtualinvoke $r1.<de.greenrobot.dao.InternalUnitTestDaoAccess: java.lang.Object getKey(java.lang.Object)>($r3);

        $r6 = (java.lang.Long) $r3;

        staticinvoke <de.greenrobot.dao.test.AbstractDaoTestLongPk: void assertNotNull(java.lang.Object)>($r6);

        $z0 = virtualinvoke $r5.<java.lang.Long: boolean equals(java.lang.Object)>($r6);

        staticinvoke <de.greenrobot.dao.test.AbstractDaoTestLongPk: void assertFalse(boolean)>($z0);

        $r4 = r0.<de.greenrobot.dao.test.AbstractDaoTestLongPk: de.greenrobot.dao.AbstractDao dao>;

        $r3 = virtualinvoke $r4.<de.greenrobot.dao.AbstractDao: java.lang.Object load(java.lang.Object)>($r5);

        staticinvoke <de.greenrobot.dao.test.AbstractDaoTestLongPk: void assertNotNull(java.lang.Object)>($r3);

        $r4 = r0.<de.greenrobot.dao.test.AbstractDaoTestLongPk: de.greenrobot.dao.AbstractDao dao>;

        $r3 = virtualinvoke $r4.<de.greenrobot.dao.AbstractDao: java.lang.Object load(java.lang.Object)>($r6);

        staticinvoke <de.greenrobot.dao.test.AbstractDaoTestLongPk: void assertNotNull(java.lang.Object)>($r3);

        return;

     label1:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("Skipping testAssignPk for ");

        $r8 = r0.<de.greenrobot.dao.test.AbstractDaoTestLongPk: java.lang.Class daoClass>;

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (createEntity returned null for null key)");

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <de.greenrobot.dao.DaoLog: int d(java.lang.String)>($r9);

        return;

     label2:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("Skipping testAssignPk for not updateable ");

        $r8 = r0.<de.greenrobot.dao.test.AbstractDaoTestLongPk: java.lang.Class daoClass>;

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <de.greenrobot.dao.DaoLog: int d(java.lang.String)>($r9);

        return;
    }
}
