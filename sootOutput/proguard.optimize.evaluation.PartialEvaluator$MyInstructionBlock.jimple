class proguard.optimize.evaluation.PartialEvaluator$MyInstructionBlock extends java.lang.Object
{
    private proguard.evaluation.TracedStack stack;
    private int startOffset;
    private proguard.evaluation.TracedVariables variables;

    private void <init>(proguard.evaluation.TracedVariables, proguard.evaluation.TracedStack, int)
    {
        proguard.evaluation.TracedVariables $r1;
        int $i0;
        proguard.evaluation.TracedStack $r2;
        proguard.optimize.evaluation.PartialEvaluator$MyInstructionBlock r0;

        r0 := @this: proguard.optimize.evaluation.PartialEvaluator$MyInstructionBlock;

        $r1 := @parameter0: proguard.evaluation.TracedVariables;

        $r2 := @parameter1: proguard.evaluation.TracedStack;

        $i0 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<proguard.optimize.evaluation.PartialEvaluator$MyInstructionBlock: proguard.evaluation.TracedVariables variables> = $r1;

        r0.<proguard.optimize.evaluation.PartialEvaluator$MyInstructionBlock: proguard.evaluation.TracedStack stack> = $r2;

        r0.<proguard.optimize.evaluation.PartialEvaluator$MyInstructionBlock: int startOffset> = $i0;

        return;
    }

    void <init>(proguard.evaluation.TracedVariables, proguard.evaluation.TracedStack, int, proguard.optimize.evaluation.PartialEvaluator$1)
    {
        proguard.evaluation.TracedVariables $r1;
        int $i0;
        proguard.evaluation.TracedStack $r2;
        proguard.optimize.evaluation.PartialEvaluator$MyInstructionBlock r0;
        proguard.optimize.evaluation.PartialEvaluator$1 $r3;

        r0 := @this: proguard.optimize.evaluation.PartialEvaluator$MyInstructionBlock;

        $r1 := @parameter0: proguard.evaluation.TracedVariables;

        $r2 := @parameter1: proguard.evaluation.TracedStack;

        $i0 := @parameter2: int;

        $r3 := @parameter3: proguard.optimize.evaluation.PartialEvaluator$1;

        specialinvoke r0.<proguard.optimize.evaluation.PartialEvaluator$MyInstructionBlock: void <init>(proguard.evaluation.TracedVariables,proguard.evaluation.TracedStack,int)>($r1, $r2, $i0);

        return;
    }

    static proguard.evaluation.TracedVariables access$100(proguard.optimize.evaluation.PartialEvaluator$MyInstructionBlock)
    {
        proguard.optimize.evaluation.PartialEvaluator$MyInstructionBlock $r0;
        proguard.evaluation.TracedVariables r1;

        $r0 := @parameter0: proguard.optimize.evaluation.PartialEvaluator$MyInstructionBlock;

        r1 = $r0.<proguard.optimize.evaluation.PartialEvaluator$MyInstructionBlock: proguard.evaluation.TracedVariables variables>;

        return r1;
    }

    static proguard.evaluation.TracedStack access$200(proguard.optimize.evaluation.PartialEvaluator$MyInstructionBlock)
    {
        proguard.evaluation.TracedStack r1;
        proguard.optimize.evaluation.PartialEvaluator$MyInstructionBlock $r0;

        $r0 := @parameter0: proguard.optimize.evaluation.PartialEvaluator$MyInstructionBlock;

        r1 = $r0.<proguard.optimize.evaluation.PartialEvaluator$MyInstructionBlock: proguard.evaluation.TracedStack stack>;

        return r1;
    }

    static int access$300(proguard.optimize.evaluation.PartialEvaluator$MyInstructionBlock)
    {
        int i0;
        proguard.optimize.evaluation.PartialEvaluator$MyInstructionBlock $r0;

        $r0 := @parameter0: proguard.optimize.evaluation.PartialEvaluator$MyInstructionBlock;

        i0 = $r0.<proguard.optimize.evaluation.PartialEvaluator$MyInstructionBlock: int startOffset>;

        return i0;
    }
}
