public final class cs.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter extends cs.gson.TypeAdapter
{
    private final java.util.Map boundFields;
    private final cs.gson.internal.ObjectConstructor constructor;

    private void <init>(cs.gson.internal.ObjectConstructor, java.util.Map)
    {
        cs.gson.internal.ObjectConstructor r1;
        cs.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter r0;
        java.util.Map r2;

        r0 := @this: cs.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter;

        r1 := @parameter0: cs.gson.internal.ObjectConstructor;

        r2 := @parameter1: java.util.Map;

        specialinvoke r0.<cs.gson.TypeAdapter: void <init>()>();

        r0.<cs.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter: cs.gson.internal.ObjectConstructor constructor> = r1;

        r0.<cs.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter: java.util.Map boundFields> = r2;

        return;
    }

    void <init>(cs.gson.internal.ObjectConstructor, java.util.Map, cs.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter)
    {
        cs.gson.internal.ObjectConstructor $r1;
        java.util.Map $r2;
        cs.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter r0, $r3;

        r0 := @this: cs.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter;

        $r1 := @parameter0: cs.gson.internal.ObjectConstructor;

        $r2 := @parameter1: java.util.Map;

        $r3 := @parameter2: cs.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter;

        specialinvoke r0.<cs.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter: void <init>(cs.gson.internal.ObjectConstructor,java.util.Map)>($r1, $r2);

        return;
    }

    public java.lang.Object read(cs.gson.stream.JsonReader) throws java.io.IOException
    {
        java.lang.Throwable r10, r12;
        java.lang.AssertionError $r13;
        cs.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter r0;
        cs.gson.stream.JsonReader $r1;
        cs.gson.JsonSyntaxException $r11;
        cs.gson.internal.ObjectConstructor $r4;
        java.util.Map $r7;
        java.lang.Object $r5, $r8;
        cs.gson.stream.JsonToken $r2, $r3;
        java.lang.String $r6;
        cs.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField r9;
        boolean $z0;

        r0 := @this: cs.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter;

        $r1 := @parameter0: cs.gson.stream.JsonReader;

        $r3 = virtualinvoke $r1.<cs.gson.stream.JsonReader: cs.gson.stream.JsonToken peek()>();

        $r2 = <cs.gson.stream.JsonToken: cs.gson.stream.JsonToken NULL>;

        if $r3 != $r2 goto label01;

        virtualinvoke $r1.<cs.gson.stream.JsonReader: void nextNull()>();

        return null;

     label01:
        $r4 = r0.<cs.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter: cs.gson.internal.ObjectConstructor constructor>;

        $r5 = interfaceinvoke $r4.<cs.gson.internal.ObjectConstructor: java.lang.Object construct()>();

     label02:
        virtualinvoke $r1.<cs.gson.stream.JsonReader: void beginObject()>();

     label03:
        $z0 = virtualinvoke $r1.<cs.gson.stream.JsonReader: boolean hasNext()>();

     label04:
        if $z0 != 0 goto label05;

        virtualinvoke $r1.<cs.gson.stream.JsonReader: void endObject()>();

        return $r5;

     label05:
        $r6 = virtualinvoke $r1.<cs.gson.stream.JsonReader: java.lang.String nextName()>();

     label06:
        $r7 = r0.<cs.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter: java.util.Map boundFields>;

     label07:
        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

     label08:
        r9 = (cs.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField) $r8;

        if r9 == null goto label09;

        $z0 = r9.<cs.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField: boolean deserialized>;

        if $z0 != 0 goto label12;

     label09:
        virtualinvoke $r1.<cs.gson.stream.JsonReader: void skipValue()>();

     label10:
        goto label03;

     label11:
        r10 := @caughtexception;

        $r11 = new cs.gson.JsonSyntaxException;

        specialinvoke $r11.<cs.gson.JsonSyntaxException: void <init>(java.lang.Throwable)>(r10);

        throw $r11;

     label12:
        virtualinvoke r9.<cs.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField: void read(cs.gson.stream.JsonReader,java.lang.Object)>($r1, $r5);

     label13:
        goto label03;

     label14:
        r12 := @caughtexception;

        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>(java.lang.Object)>(r12);

        throw $r13;

        catch java.lang.IllegalStateException from label02 to label04 with label11;
        catch java.lang.IllegalAccessException from label02 to label04 with label14;
        catch java.lang.IllegalStateException from label05 to label06 with label11;
        catch java.lang.IllegalStateException from label07 to label08 with label11;
        catch java.lang.IllegalStateException from label09 to label10 with label11;
        catch java.lang.IllegalAccessException from label05 to label06 with label14;
        catch java.lang.IllegalAccessException from label07 to label08 with label14;
        catch java.lang.IllegalAccessException from label09 to label10 with label14;
        catch java.lang.IllegalStateException from label12 to label13 with label11;
        catch java.lang.IllegalAccessException from label12 to label13 with label14;
    }

    public void write(cs.gson.stream.JsonWriter, java.lang.Object) throws java.io.IOException
    {
        java.lang.Throwable r3;
        java.util.Iterator $r6;
        java.util.Collection $r5;
        java.lang.AssertionError $r10;
        cs.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter r0;
        java.util.Map $r4;
        java.lang.Object r2, $r7;
        cs.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField r8;
        java.lang.String $r9;
        cs.gson.stream.JsonWriter $r1;
        boolean $z0;

        r0 := @this: cs.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter;

        $r1 := @parameter0: cs.gson.stream.JsonWriter;

        r2 := @parameter1: java.lang.Object;

        if r2 != null goto label1;

        virtualinvoke $r1.<cs.gson.stream.JsonWriter: cs.gson.stream.JsonWriter nullValue()>();

        return;

     label1:
        virtualinvoke $r1.<cs.gson.stream.JsonWriter: cs.gson.stream.JsonWriter beginObject()>();

        $r4 = r0.<cs.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter: java.util.Map boundFields>;

     label2:
        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Collection values()>();

        $r6 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

     label4:
        if $z0 != 0 goto label5;

        virtualinvoke $r1.<cs.gson.stream.JsonWriter: cs.gson.stream.JsonWriter endObject()>();

        return;

     label5:
        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

     label6:
        r8 = (cs.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField) $r7;

        $z0 = r8.<cs.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField: boolean serialized>;

        if $z0 == 0 goto label3;

        $r9 = r8.<cs.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField: java.lang.String name>;

     label7:
        virtualinvoke $r1.<cs.gson.stream.JsonWriter: cs.gson.stream.JsonWriter name(java.lang.String)>($r9);

        virtualinvoke r8.<cs.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField: void write(cs.gson.stream.JsonWriter,java.lang.Object)>($r1, r2);

     label8:
        goto label3;

     label9:
        r3 := @caughtexception;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

        catch java.lang.IllegalAccessException from label2 to label4 with label9;
        catch java.lang.IllegalAccessException from label5 to label6 with label9;
        catch java.lang.IllegalAccessException from label7 to label8 with label9;
    }
}
