public class com.admogo.CryptUtils extends java.lang.Object
{

    public void <init>()
    {
        com.admogo.CryptUtils r0;

        r0 := @this: com.admogo.CryptUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String decrypt(java.lang.String, java.lang.String, boolean) throws java.io.UnsupportedEncodingException
    {
        byte[] $r3;
        java.lang.String $r0, $r1, $r2;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $z0 := @parameter2: boolean;

        $r2 = new java.lang.String;

        $r3 = staticinvoke <com.admogo.CryptUtils: byte[] decrypt(java.lang.String,java.lang.String)>($r0, $r1);

        specialinvoke $r2.<java.lang.String: void <init>(byte[])>($r3);

        return $r2;
    }

    public static byte[] decrypt(java.lang.String, java.lang.String)
    {
        java.lang.Throwable r5, r6, r7, r8, r9;
        byte[] $r3;
        javax.crypto.spec.SecretKeySpec r2, $r10;
        javax.crypto.Cipher $r4;
        javax.crypto.NoSuchPaddingException $r12;
        java.lang.String $r0, $r1;
        javax.crypto.IllegalBlockSizeException $r14;
        javax.crypto.BadPaddingException $r15;
        java.security.NoSuchAlgorithmException $r11;
        java.security.InvalidKeyException $r13;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r10 = new javax.crypto.spec.SecretKeySpec;

        r2 = $r10;

     label1:
        $r3 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        specialinvoke $r10.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, "DES");

        $r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("DES");

        $r3 = staticinvoke <com.admogo.Base64: byte[] decode(java.lang.String)>($r0);

        virtualinvoke $r4.<javax.crypto.Cipher: void init(int,java.security.Key)>(2, r2);

        $r3 = virtualinvoke $r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r3);

     label2:
        return $r3;

     label3:
        r5 := @caughtexception;

        $r11 = (java.security.NoSuchAlgorithmException) r5;

        virtualinvoke $r11.<java.security.NoSuchAlgorithmException: void printStackTrace()>();

     label4:
        return null;

     label5:
        r6 := @caughtexception;

        $r12 = (javax.crypto.NoSuchPaddingException) r6;

        virtualinvoke $r12.<javax.crypto.NoSuchPaddingException: void printStackTrace()>();

        goto label4;

     label6:
        r7 := @caughtexception;

        $r13 = (java.security.InvalidKeyException) r7;

        virtualinvoke $r13.<java.security.InvalidKeyException: void printStackTrace()>();

        goto label4;

     label7:
        r8 := @caughtexception;

        $r14 = (javax.crypto.IllegalBlockSizeException) r8;

        virtualinvoke $r14.<javax.crypto.IllegalBlockSizeException: void printStackTrace()>();

        goto label4;

     label8:
        r9 := @caughtexception;

        $r15 = (javax.crypto.BadPaddingException) r9;

        virtualinvoke $r15.<javax.crypto.BadPaddingException: void printStackTrace()>();

        goto label4;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
        catch javax.crypto.NoSuchPaddingException from label1 to label2 with label5;
        catch java.security.InvalidKeyException from label1 to label2 with label6;
        catch javax.crypto.IllegalBlockSizeException from label1 to label2 with label7;
        catch javax.crypto.BadPaddingException from label1 to label2 with label8;
    }

    public static java.lang.String encrypt(java.lang.String, java.lang.String, boolean)
    {
        byte[] $r2;
        java.lang.String $r0, $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $z0 := @parameter2: boolean;

        $r2 = staticinvoke <com.admogo.CryptUtils: byte[] encrypt(java.lang.String,java.lang.String)>($r0, $r1);

        $r0 = staticinvoke <com.admogo.Base64: java.lang.String encodeToString(byte[],boolean)>($r2, $z0);

        return $r0;
    }

    public static byte[] encrypt(java.lang.String, java.lang.String)
    {
        java.lang.Throwable r5, r6, r7, r8, r9, r10;
        byte[] $r3;
        javax.crypto.spec.SecretKeySpec r2, $r11;
        javax.crypto.Cipher $r4;
        javax.crypto.NoSuchPaddingException $r13;
        java.lang.String $r0, $r1;
        javax.crypto.IllegalBlockSizeException $r15;
        javax.crypto.BadPaddingException $r16;
        java.security.NoSuchAlgorithmException $r12;
        java.security.InvalidKeyException $r14;
        java.io.UnsupportedEncodingException $r17;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r11 = new javax.crypto.spec.SecretKeySpec;

        r2 = $r11;

     label1:
        $r3 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        specialinvoke $r11.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, "DES");

        $r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("DES");

        $r3 = virtualinvoke $r0.<java.lang.String: byte[] getBytes(java.lang.String)>("utf-8");

        virtualinvoke $r4.<javax.crypto.Cipher: void init(int,java.security.Key)>(1, r2);

        $r3 = virtualinvoke $r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r3);

     label2:
        return $r3;

     label3:
        r5 := @caughtexception;

        $r12 = (java.security.NoSuchAlgorithmException) r5;

        virtualinvoke $r12.<java.security.NoSuchAlgorithmException: void printStackTrace()>();

     label4:
        return null;

     label5:
        r6 := @caughtexception;

        $r13 = (javax.crypto.NoSuchPaddingException) r6;

        virtualinvoke $r13.<javax.crypto.NoSuchPaddingException: void printStackTrace()>();

        goto label4;

     label6:
        r7 := @caughtexception;

        $r14 = (java.security.InvalidKeyException) r7;

        virtualinvoke $r14.<java.security.InvalidKeyException: void printStackTrace()>();

        goto label4;

     label7:
        r8 := @caughtexception;

        $r15 = (javax.crypto.IllegalBlockSizeException) r8;

        virtualinvoke $r15.<javax.crypto.IllegalBlockSizeException: void printStackTrace()>();

        goto label4;

     label8:
        r9 := @caughtexception;

        $r16 = (javax.crypto.BadPaddingException) r9;

        virtualinvoke $r16.<javax.crypto.BadPaddingException: void printStackTrace()>();

        goto label4;

     label9:
        r10 := @caughtexception;

        $r17 = (java.io.UnsupportedEncodingException) r10;

        virtualinvoke $r17.<java.io.UnsupportedEncodingException: void printStackTrace()>();

        goto label4;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
        catch javax.crypto.NoSuchPaddingException from label1 to label2 with label5;
        catch java.security.InvalidKeyException from label1 to label2 with label6;
        catch javax.crypto.IllegalBlockSizeException from label1 to label2 with label7;
        catch javax.crypto.BadPaddingException from label1 to label2 with label8;
        catch java.io.UnsupportedEncodingException from label1 to label2 with label9;
    }

    public static java.lang.String getString(java.lang.String)
    {
        int $i0, $i1;
        java.lang.StringBuilder $r2, $r3;
        java.lang.String $r0, $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(0, 4);

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i1 = -4;

        $i0 = $i0 + $i1;

        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>($i0, $i1);

        $r3 = new java.lang.StringBuilder;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>($r1);

        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;
    }
}
