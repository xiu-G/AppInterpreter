class proguard.obfuscate.NameMarker extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.visitor.ClassVisitor, proguard.classfile.visitor.MemberVisitor, proguard.classfile.attribute.visitor.AttributeVisitor, proguard.classfile.attribute.visitor.InnerClassesInfoVisitor, proguard.classfile.constant.visitor.ConstantVisitor
{

    void <init>()
    {
        proguard.obfuscate.NameMarker r0;

        r0 := @this: proguard.obfuscate.NameMarker;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        return;
    }

    private void keepFieldName(proguard.classfile.Clazz, proguard.classfile.Field)
    {
        proguard.classfile.Clazz $r1;
        proguard.obfuscate.NameMarker r0;
        java.lang.String $r3;
        proguard.classfile.Field $r2;

        r0 := @this: proguard.obfuscate.NameMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Field;

        $r3 = interfaceinvoke $r2.<proguard.classfile.Field: java.lang.String getName(proguard.classfile.Clazz)>($r1);

        staticinvoke <proguard.obfuscate.MemberObfuscator: void setFixedNewMemberName(proguard.classfile.Member,java.lang.String)>($r2, $r3);

        return;
    }

    private void keepMethodName(proguard.classfile.Clazz, proguard.classfile.Method)
    {
        proguard.classfile.Clazz $r1;
        proguard.obfuscate.NameMarker r0;
        proguard.classfile.Method $r2;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: proguard.obfuscate.NameMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 = interfaceinvoke $r2.<proguard.classfile.Method: java.lang.String getName(proguard.classfile.Clazz)>($r1);

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("<clinit>");

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("<init>");

        if $z0 != 0 goto label1;

        $r3 = interfaceinvoke $r2.<proguard.classfile.Method: java.lang.String getName(proguard.classfile.Clazz)>($r1);

        staticinvoke <proguard.obfuscate.MemberObfuscator: void setFixedNewMemberName(proguard.classfile.Member,java.lang.String)>($r2, $r3);

     label1:
        return;
    }

    public void keepClassName(proguard.classfile.Clazz)
    {
        java.lang.String $r2;
        proguard.classfile.Clazz $r1;
        proguard.obfuscate.NameMarker r0;

        r0 := @this: proguard.obfuscate.NameMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 = interfaceinvoke $r1.<proguard.classfile.Clazz: java.lang.String getName()>();

        staticinvoke <proguard.obfuscate.ClassObfuscator: void setNewClassName(proguard.classfile.Clazz,java.lang.String)>($r1, $r2);

        return;
    }

    public void visitAnyAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.Attribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.obfuscate.NameMarker r0;
        proguard.classfile.attribute.Attribute $r2;

        r0 := @this: proguard.obfuscate.NameMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.Attribute;

        return;
    }

    public void visitClassConstant(proguard.classfile.Clazz, proguard.classfile.constant.ClassConstant)
    {
        proguard.classfile.constant.ClassConstant $r2;
        proguard.classfile.Clazz $r1;
        proguard.obfuscate.NameMarker r0;

        r0 := @this: proguard.obfuscate.NameMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.ClassConstant;

        virtualinvoke $r2.<proguard.classfile.constant.ClassConstant: void referencedClassAccept(proguard.classfile.visitor.ClassVisitor)>(r0);

        return;
    }

    public void visitInnerClassesAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.InnerClassesAttribute)
    {
        proguard.classfile.attribute.InnerClassesAttribute $r2;
        proguard.classfile.Clazz $r1;
        proguard.obfuscate.NameMarker r0;

        r0 := @this: proguard.obfuscate.NameMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.InnerClassesAttribute;

        virtualinvoke $r2.<proguard.classfile.attribute.InnerClassesAttribute: void innerClassEntriesAccept(proguard.classfile.Clazz,proguard.classfile.attribute.visitor.InnerClassesInfoVisitor)>($r1, r0);

        return;
    }

    public void visitInnerClassesInfo(proguard.classfile.Clazz, proguard.classfile.attribute.InnerClassesInfo)
    {
        proguard.obfuscate.NameMarker r0;
        proguard.classfile.Clazz $r1;
        int $i0, $i1;
        java.lang.String $r3, $r4;
        proguard.classfile.attribute.InnerClassesInfo $r2;
        boolean $z0;

        r0 := @this: proguard.obfuscate.NameMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.InnerClassesInfo;

        $i1 = $r2.<proguard.classfile.attribute.InnerClassesInfo: int u2innerClassIndex>;

        $i0 = $r2.<proguard.classfile.attribute.InnerClassesInfo: int u2outerClassIndex>;

        if $i1 == 0 goto label1;

        if $i0 == 0 goto label1;

        $r3 = interfaceinvoke $r1.<proguard.classfile.Clazz: java.lang.String getClassName(int)>($i1);

        $r4 = interfaceinvoke $r1.<proguard.classfile.Clazz: java.lang.String getName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label1;

        interfaceinvoke $r1.<proguard.classfile.Clazz: void constantPoolEntryAccept(int,proguard.classfile.constant.visitor.ConstantVisitor)>($i0, r0);

     label1:
        return;
    }

    public void visitLibraryClass(proguard.classfile.LibraryClass)
    {
        proguard.classfile.LibraryClass $r1;
        proguard.obfuscate.NameMarker r0;

        r0 := @this: proguard.obfuscate.NameMarker;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        virtualinvoke r0.<proguard.obfuscate.NameMarker: void keepClassName(proguard.classfile.Clazz)>($r1);

        return;
    }

    public void visitLibraryField(proguard.classfile.LibraryClass, proguard.classfile.LibraryField)
    {
        proguard.classfile.LibraryClass $r1;
        proguard.obfuscate.NameMarker r0;
        proguard.classfile.LibraryField $r2;

        r0 := @this: proguard.obfuscate.NameMarker;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        $r2 := @parameter1: proguard.classfile.LibraryField;

        specialinvoke r0.<proguard.obfuscate.NameMarker: void keepFieldName(proguard.classfile.Clazz,proguard.classfile.Field)>($r1, $r2);

        return;
    }

    public void visitLibraryMethod(proguard.classfile.LibraryClass, proguard.classfile.LibraryMethod)
    {
        proguard.classfile.LibraryMethod $r2;
        proguard.classfile.LibraryClass $r1;
        proguard.obfuscate.NameMarker r0;

        r0 := @this: proguard.obfuscate.NameMarker;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        $r2 := @parameter1: proguard.classfile.LibraryMethod;

        specialinvoke r0.<proguard.obfuscate.NameMarker: void keepMethodName(proguard.classfile.Clazz,proguard.classfile.Method)>($r1, $r2);

        return;
    }

    public void visitProgramClass(proguard.classfile.ProgramClass)
    {
        proguard.classfile.ProgramClass $r1;
        proguard.obfuscate.NameMarker r0;

        r0 := @this: proguard.obfuscate.NameMarker;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        virtualinvoke r0.<proguard.obfuscate.NameMarker: void keepClassName(proguard.classfile.Clazz)>($r1);

        virtualinvoke $r1.<proguard.classfile.ProgramClass: void attributesAccept(proguard.classfile.attribute.visitor.AttributeVisitor)>(r0);

        return;
    }

    public void visitProgramField(proguard.classfile.ProgramClass, proguard.classfile.ProgramField)
    {
        proguard.classfile.ProgramField $r2;
        proguard.classfile.ProgramClass $r1;
        proguard.obfuscate.NameMarker r0;

        r0 := @this: proguard.obfuscate.NameMarker;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.ProgramField;

        specialinvoke r0.<proguard.obfuscate.NameMarker: void keepFieldName(proguard.classfile.Clazz,proguard.classfile.Field)>($r1, $r2);

        return;
    }

    public void visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod)
    {
        proguard.classfile.ProgramClass $r1;
        proguard.obfuscate.NameMarker r0;
        proguard.classfile.ProgramMethod $r2;

        r0 := @this: proguard.obfuscate.NameMarker;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.ProgramMethod;

        specialinvoke r0.<proguard.obfuscate.NameMarker: void keepMethodName(proguard.classfile.Clazz,proguard.classfile.Method)>($r1, $r2);

        return;
    }
}
