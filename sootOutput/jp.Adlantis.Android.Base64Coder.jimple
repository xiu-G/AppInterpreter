class jp.Adlantis.Android.Base64Coder extends java.lang.Object
{
    private static char[] map1;
    private static byte[] map2;
    private static final java.lang.String systemLineSeparator;

    static void <clinit>()
    {
        byte[] $r2;
        char $c1;
        byte $b4;
        int $i0, $i2, $i3;
        char[] $r1;
        java.lang.String $r0;

        $i0 = 0;

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        <jp.Adlantis.Android.Base64Coder: java.lang.String systemLineSeparator> = $r0;

        $r1 = newarray (char)[64];

        <jp.Adlantis.Android.Base64Coder: char[] map1> = $r1;

        $c1 = 65;

        $i2 = 0;

     label1:
        if $c1 > 90 goto label2;

        $r1 = <jp.Adlantis.Android.Base64Coder: char[] map1>;

        $i3 = $i2 + 1;

        $r1[$i2] = $c1;

        $i2 = $c1 + 1;

        $c1 = (char) $i2;

        $i2 = $i3;

        goto label1;

     label2:
        $c1 = 97;

     label3:
        if $c1 > 122 goto label4;

        $r1 = <jp.Adlantis.Android.Base64Coder: char[] map1>;

        $i3 = $i2 + 1;

        $r1[$i2] = $c1;

        $i2 = $c1 + 1;

        $c1 = (char) $i2;

        $i2 = $i3;

        goto label3;

     label4:
        $c1 = 48;

     label5:
        if $c1 > 57 goto label6;

        $r1 = <jp.Adlantis.Android.Base64Coder: char[] map1>;

        $i3 = $i2 + 1;

        $r1[$i2] = $c1;

        $i2 = $c1 + 1;

        $c1 = (char) $i2;

        $i2 = $i3;

        goto label5;

     label6:
        $r1 = <jp.Adlantis.Android.Base64Coder: char[] map1>;

        $i3 = $i2 + 1;

        $r1[$i2] = 43;

        $r1 = <jp.Adlantis.Android.Base64Coder: char[] map1>;

        $r1[$i3] = 47;

        $r2 = newarray (byte)[128];

        <jp.Adlantis.Android.Base64Coder: byte[] map2> = $r2;

        $i2 = 0;

     label7:
        $r2 = <jp.Adlantis.Android.Base64Coder: byte[] map2>;

        $i3 = lengthof $r2;

        if $i2 >= $i3 goto label8;

        $r2 = <jp.Adlantis.Android.Base64Coder: byte[] map2>;

        $r2[$i2] = -1;

        $i2 = $i2 + 1;

        goto label7;

     label8:
        if $i0 >= 64 goto label9;

        $r2 = <jp.Adlantis.Android.Base64Coder: byte[] map2>;

        $r1 = <jp.Adlantis.Android.Base64Coder: char[] map1>;

        $c1 = $r1[$i0];

        $b4 = (byte) $i0;

        $i2 = (int) $c1;

        $r2[$i2] = $b4;

        $i0 = $i0 + 1;

        goto label8;

     label9:
        return;
    }

    private void <init>()
    {
        jp.Adlantis.Android.Base64Coder r0;

        r0 := @this: jp.Adlantis.Android.Base64Coder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static byte[] decode(java.lang.String)
    {
        char[] $r1;
        byte[] $r2;
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke $r0.<java.lang.String: char[] toCharArray()>();

        $r2 = staticinvoke <jp.Adlantis.Android.Base64Coder: byte[] decode(char[])>($r1);

        return $r2;
    }

    public static byte[] decode(char[])
    {
        int $i0;
        char[] $r0;
        byte[] $r1;

        $r0 := @parameter0: char[];

        $i0 = lengthof $r0;

        $r1 = staticinvoke <jp.Adlantis.Android.Base64Coder: byte[] decode(char[],int,int)>($r0, 0, $i0);

        return $r1;
    }

    public static byte[] decode(char[], int, int)
    {
        byte[] $r1, $r2;
        byte $b9, $b10, $b11, $b12;
        int $i0, $i1, $i2, $i4, $i5, $i7, $i8, $i13;
        char $c3, $c6;
        java.lang.IllegalArgumentException $r3;
        char[] $r0;

        $r0 := @parameter0: char[];

        $i2 := @parameter1: int;

        $i1 := @parameter2: int;

        $i0 = $i1 % 4;

        if $i0 == 0 goto label01;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Length of Base64 encoded input string is not a multiple of 4.");

        throw $r3;

     label01:
        if $i1 <= 0 goto label02;

        $i0 = $i2 + $i1;

        $i4 = -1;

        $i0 = $i0 + $i4;

        $c3 = $r0[$i0];

        $i0 = (int) $c3;

        if $i0 != 61 goto label02;

        $i0 = -1;

        $i1 = $i1 + $i0;

        goto label01;

     label02:
        $i0 = $i1 * 3;

        $i0 = $i0 / 4;

        $r1 = newarray (byte)[$i0];

        $i1 = $i2 + $i1;

        $i4 = 0;

     label03:
        if $i2 >= $i1 goto label14;

        $i5 = $i2 + 1;

        $c3 = $r0[$i2];

        $i2 = $i5 + 1;

        $c6 = $r0[$i5];

        if $i2 >= $i1 goto label07;

        $i5 = $r0[$i2];

        $i2 = $i2 + 1;

     label04:
        if $i2 >= $i1 goto label08;

        $i7 = $r0[$i2];

        $i2 = $i2 + 1;

     label05:
        $i8 = (int) $c3;

        if $i8 > 127 goto label06;

        $i8 = (int) $c6;

        if $i8 > 127 goto label06;

        if $i5 > 127 goto label06;

        if $i7 <= 127 goto label09;

     label06:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal character in Base64 encoded data.");

        throw $r3;

     label07:
        $i5 = 65;

        goto label04;

     label08:
        $i7 = 65;

        goto label05;

     label09:
        $r2 = <jp.Adlantis.Android.Base64Coder: byte[] map2>;

        $i8 = (int) $c3;

        $b9 = $r2[$i8];

        $r2 = <jp.Adlantis.Android.Base64Coder: byte[] map2>;

        $i8 = (int) $c6;

        $b10 = $r2[$i8];

        $r2 = <jp.Adlantis.Android.Base64Coder: byte[] map2>;

        $b11 = $r2[$i5];

        $r2 = <jp.Adlantis.Android.Base64Coder: byte[] map2>;

        $b12 = $r2[$i7];

        $i5 = (int) $b9;

        if $i5 < 0 goto label10;

        $i5 = (int) $b10;

        if $i5 < 0 goto label10;

        $i5 = (int) $b11;

        if $i5 < 0 goto label10;

        $i5 = (int) $b12;

        if $i5 >= 0 goto label11;

     label10:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal character in Base64 encoded data.");

        throw $r3;

     label11:
        $i5 = (int) $b9;

        $i5 = $i5 << 2;

        $i7 = (int) $b10;

        $i7 = $i7 >>> 4;

        $i5 = $i5 | $i7;

        $b9 = $b10 & 15;

        $i7 = (int) $b9;

        $i7 = $i7 << 4;

        $i8 = (int) $b11;

        $i8 = $i8 >>> 2;

        $i7 = $i7 | $i8;

        $b11 = $b11 & 3;

        $i8 = (int) $b11;

        $i8 = $i8 << 6;

        $i13 = (int) $b12;

        $i8 = $i8 | $i13;

        $i13 = $i4 + 1;

        $b12 = (byte) $i5;

        $r1[$i4] = $b12;

        if $i13 >= $i0 goto label16;

        $i4 = $i13 + 1;

        $b12 = (byte) $i7;

        $r1[$i13] = $b12;

     label12:
        if $i4 >= $i0 goto label15;

        $i5 = $i4 + 1;

        $b12 = (byte) $i8;

        $r1[$i4] = $b12;

     label13:
        $i4 = $i5;

        goto label03;

     label14:
        return $r1;

     label15:
        $i5 = $i4;

        goto label13;

     label16:
        $i4 = $i13;

        goto label12;
    }

    public static byte[] decodeLines(java.lang.String)
    {
        byte[] $r2;
        int $i0, $i1, $i2;
        char[] $r1;
        char $c3;
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        $r1 = newarray (char)[$i0];

        $i0 = 0;

        $i1 = 0;

     label1:
        $i2 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 >= $i2 goto label3;

        $c3 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0);

        $i2 = (int) $c3;

        if $i2 == 32 goto label2;

        $i2 = (int) $c3;

        if $i2 == 13 goto label2;

        $i2 = (int) $c3;

        if $i2 == 10 goto label2;

        $i2 = (int) $c3;

        if $i2 == 9 goto label2;

        $r1[$i1] = $c3;

        $i1 = $i1 + 1;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        $r2 = staticinvoke <jp.Adlantis.Android.Base64Coder: byte[] decode(char[],int,int)>($r1, 0, $i1);

        return $r2;
    }

    public static java.lang.String decodeString(java.lang.String)
    {
        byte[] $r2;
        java.lang.String $r0, $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = new java.lang.String;

        $r2 = staticinvoke <jp.Adlantis.Android.Base64Coder: byte[] decode(java.lang.String)>($r0);

        specialinvoke $r1.<java.lang.String: void <init>(byte[])>($r2);

        return $r1;
    }

    public static char[] encode(byte[])
    {
        int $i0;
        byte[] $r0;
        char[] $r1;

        $r0 := @parameter0: byte[];

        $i0 = lengthof $r0;

        $r1 = staticinvoke <jp.Adlantis.Android.Base64Coder: char[] encode(byte[],int,int)>($r0, 0, $i0);

        return $r1;
    }

    public static char[] encode(byte[], int)
    {
        int $i0;
        byte[] $r0;
        char[] $r1;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r1 = staticinvoke <jp.Adlantis.Android.Base64Coder: char[] encode(byte[],int,int)>($r0, 0, $i0);

        return $r1;
    }

    public static char[] encode(byte[], int, int)
    {
        byte[] $r0;
        short $s6, $s7, $s8;
        byte $b5;
        int $i0, $i1, $i2, $i3, $i4, $i9, $i10, $i11;
        char $c12;
        char[] $r1, $r2;

        $r0 := @parameter0: byte[];

        $i2 := @parameter1: int;

        $i0 := @parameter2: int;

        $i1 = $i0 * 4;

        $i1 = $i1 + 2;

        $i1 = $i1 / 3;

        $i3 = $i0 + 2;

        $i3 = $i3 / 3;

        $i3 = $i3 * 4;

        $r1 = newarray (char)[$i3];

        $i0 = $i2 + $i0;

        $i3 = 0;

     label01:
        if $i2 >= $i0 goto label10;

        $i4 = $i2 + 1;

        $b5 = $r0[$i2];

        $s6 = (short) $b5;

        $s6 = $s6 & 255;

        if $i4 >= $i0 goto label06;

        $b5 = $r0[$i4];

        $s7 = (short) $b5;

        $s8 = $s7 & 255;

        $i4 = $i4 + 1;

     label02:
        if $i4 >= $i0 goto label07;

        $i2 = $i4 + 1;

        $b5 = $r0[$i4];

        $s7 = $b5 & 255;

     label03:
        $i4 = (int) $s6;

        $i4 = $i4 >>> 2;

        $s6 = $s6 & 3;

        $i9 = (int) $s6;

        $i9 = $i9 << 4;

        $i10 = $s8 >>> 4;

        $i9 = $i9 | $i10;

        $s6 = $s8 & 15;

        $i10 = $s6 << 2;

        $i11 = $s7 >>> 6;

        $i10 = $i10 | $i11;

        $s6 = $s7 & 63;

        $i11 = $i3 + 1;

        $r2 = <jp.Adlantis.Android.Base64Coder: char[] map1>;

        $c12 = $r2[$i4];

        $r1[$i3] = $c12;

        $i3 = $i11 + 1;

        $r2 = <jp.Adlantis.Android.Base64Coder: char[] map1>;

        $c12 = $r2[$i9];

        $r1[$i11] = $c12;

        if $i3 >= $i1 goto label08;

        $r2 = <jp.Adlantis.Android.Base64Coder: char[] map1>;

        $c12 = $r2[$i10];

     label04:
        $r1[$i3] = $c12;

        $i3 = $i3 + 1;

        if $i3 >= $i1 goto label09;

        $r2 = <jp.Adlantis.Android.Base64Coder: char[] map1>;

        $c12 = $r2[$s6];

     label05:
        $r1[$i3] = $c12;

        $i3 = $i3 + 1;

        goto label01;

     label06:
        $s8 = 0;

        goto label02;

     label07:
        $i2 = $i4;

        $s7 = 0;

        goto label03;

     label08:
        $c12 = 61;

        goto label04;

     label09:
        $c12 = 61;

        goto label05;

     label10:
        return $r1;
    }

    public static java.lang.String encodeLines(byte[])
    {
        int $i0;
        byte[] $r0;
        java.lang.String $r1;

        $r0 := @parameter0: byte[];

        $i0 = lengthof $r0;

        $r1 = <jp.Adlantis.Android.Base64Coder: java.lang.String systemLineSeparator>;

        $r1 = staticinvoke <jp.Adlantis.Android.Base64Coder: java.lang.String encodeLines(byte[],int,int,int,java.lang.String)>($r0, 0, $i0, 76, $r1);

        return $r1;
    }

    public static java.lang.String encodeLines(byte[], int, int, int, java.lang.String)
    {
        byte[] $r0;
        java.lang.IllegalArgumentException $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        char[] $r3;
        java.lang.StringBuilder $r2, $r5;
        java.lang.String $r1;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $r1 := @parameter4: java.lang.String;

        $i2 = $i2 * 3;

        $i2 = $i2 / 4;

        if $i2 > 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;

     label1:
        $i3 = $i1 + $i2;

        $i4 = -1;

        $i3 = $i3 + $i4;

        $i3 = $i3 / $i2;

        $i4 = $i1 + 2;

        $i4 = $i4 / 3;

        $i4 = $i4 * 4;

        $i5 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i3 = $i3 * $i5;

        $i3 = $i3 + $i4;

        $r5 = new java.lang.StringBuilder;

        $r2 = $r5;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(int)>($i3);

        $i3 = 0;

     label2:
        if $i3 >= $i1 goto label3;

        $i4 = $i1 - $i3;

        $i4 = staticinvoke <java.lang.Math: int min(int,int)>($i4, $i2);

        $i5 = $i0 + $i3;

        $r3 = staticinvoke <jp.Adlantis.Android.Base64Coder: char[] encode(byte[],int,int)>($r0, $i5, $i4);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>($r3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $i3 = $i3 + $i4;

        goto label2;

     label3:
        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }

    public static java.lang.String encodeString(java.lang.String)
    {
        byte[] $r2;
        char[] $r3;
        java.lang.String $r0, $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = new java.lang.String;

        $r2 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        $r3 = staticinvoke <jp.Adlantis.Android.Base64Coder: char[] encode(byte[])>($r2);

        specialinvoke $r1.<java.lang.String: void <init>(char[])>($r3);

        return $r1;
    }
}
