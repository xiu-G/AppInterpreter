public class org.bouncycastle.util.encoders.Hex extends java.lang.Object
{
    private static org.bouncycastle.util.encoders.HexTranslator encoder;

    static void <clinit>()
    {
        org.bouncycastle.util.encoders.HexTranslator $r0;

        $r0 = new org.bouncycastle.util.encoders.HexTranslator;

        specialinvoke $r0.<org.bouncycastle.util.encoders.HexTranslator: void <init>()>();

        <org.bouncycastle.util.encoders.Hex: org.bouncycastle.util.encoders.HexTranslator encoder> = $r0;

        return;
    }

    public void <init>()
    {
        org.bouncycastle.util.encoders.Hex r0;

        r0 := @this: org.bouncycastle.util.encoders.Hex;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static byte[] decode(java.lang.String)
    {
        byte[] r1;
        char $c2, $c3;
        byte $b5, $b6;
        int i0, $i1, $i4, $i7;
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i1 = $i1 / 2;

        r1 = newarray (byte)[$i1];

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String toLowerCase()>();

        $i1 = 0;

     label1:
        i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i1 < i0 goto label2;

        return r1;

     label2:
        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i1);

        i0 = $i1 + 1;

        $c3 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(i0);

        i0 = $i1 / 2;

        $i4 = (int) $c2;

        if $i4 >= 97 goto label5;

        $i4 = (int) $c2;

        $i7 = -48;

        $i4 = $i4 + $i7;

        $i4 = $i4 << 4;

        $b5 = (byte) $i4;

        r1[i0] = $b5;

     label3:
        $i4 = (int) $c3;

        if $i4 >= 97 goto label6;

        $b5 = r1[i0];

        $i4 = (int) $c3;

        $i7 = -48;

        $i4 = $i4 + $i7;

        $b6 = (byte) $i4;

        $i4 = (int) $b5;

        $i7 = (int) $b6;

        $i4 = $i4 + $i7;

        $b5 = (byte) $i4;

        r1[i0] = $b5;

     label4:
        $i1 = $i1 + 2;

        goto label1;

     label5:
        $i4 = (int) $c2;

        $i7 = -97;

        $i4 = $i4 + $i7;

        $i4 = $i4 + 10;

        $i4 = $i4 << 4;

        $b5 = (byte) $i4;

        r1[i0] = $b5;

        goto label3;

     label6:
        $b5 = r1[i0];

        $i4 = (int) $c3;

        $i7 = -97;

        $i4 = $i4 + $i7;

        $i4 = $i4 + 10;

        $b6 = (byte) $i4;

        $i4 = (int) $b5;

        $i7 = (int) $b6;

        $i4 = $i4 + $i7;

        $b5 = (byte) $i4;

        r1[i0] = $b5;

        goto label4;
    }

    public static byte[] decode(byte[])
    {
        byte[] $r0, r1;
        int $i0;
        org.bouncycastle.util.encoders.HexTranslator $r2;

        $r0 := @parameter0: byte[];

        $i0 = lengthof $r0;

        $i0 = $i0 / 2;

        r1 = newarray (byte)[$i0];

        $r2 = <org.bouncycastle.util.encoders.Hex: org.bouncycastle.util.encoders.HexTranslator encoder>;

        $i0 = lengthof $r0;

        virtualinvoke $r2.<org.bouncycastle.util.encoders.HexTranslator: int decode(byte[],int,int,byte[],int)>($r0, 0, $i0, r1, 0);

        return r1;
    }

    public static byte[] encode(byte[])
    {
        int $i0;
        byte[] $r0;

        $r0 := @parameter0: byte[];

        $i0 = lengthof $r0;

        $r0 = staticinvoke <org.bouncycastle.util.encoders.Hex: byte[] encode(byte[],int,int)>($r0, 0, $i0);

        return $r0;
    }

    public static byte[] encode(byte[], int, int)
    {
        byte[] $r0, r1;
        int $i0, $i1, $i2;
        org.bouncycastle.util.encoders.HexTranslator $r2;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 = $i1 * 2;

        r1 = newarray (byte)[$i2];

        $r2 = <org.bouncycastle.util.encoders.Hex: org.bouncycastle.util.encoders.HexTranslator encoder>;

        virtualinvoke $r2.<org.bouncycastle.util.encoders.HexTranslator: int encode(byte[],int,int,byte[],int)>($r0, $i0, $i1, r1, 0);

        return r1;
    }
}
