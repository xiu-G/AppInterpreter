final class com.google.tagmanager.protobuf.GeneratedMutableMessageLite$SerializedForm extends java.lang.Object implements java.io.Serializable
{
    private static final long serialVersionUID;
    private byte[] asBytes;
    private java.lang.String messageClassName;

    void <init>(com.google.tagmanager.protobuf.MutableMessageLite)
    {
        byte[] $r4;
        com.google.tagmanager.protobuf.MutableMessageLite $r1;
        java.lang.Class $r2;
        java.lang.String $r3;
        com.google.tagmanager.protobuf.GeneratedMutableMessageLite$SerializedForm r0;

        r0 := @this: com.google.tagmanager.protobuf.GeneratedMutableMessageLite$SerializedForm;

        $r1 := @parameter0: com.google.tagmanager.protobuf.MutableMessageLite;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        r0.<com.google.tagmanager.protobuf.GeneratedMutableMessageLite$SerializedForm: java.lang.String messageClassName> = $r3;

        $r4 = interfaceinvoke $r1.<com.google.tagmanager.protobuf.MutableMessageLite: byte[] toByteArray()>();

        r0.<com.google.tagmanager.protobuf.GeneratedMutableMessageLite$SerializedForm: byte[] asBytes> = $r4;

        return;
    }

    protected final java.lang.Object readResolve()
    {
        java.lang.Throwable $r11, $r12, $r13;
        byte[] $r8;
        java.lang.Object[] $r5;
        com.google.tagmanager.protobuf.GeneratedMutableMessageLite$SerializedForm r0;
        java.lang.String $r1;
        java.lang.reflect.Method $r4;
        boolean $z0;
        java.lang.Class[] $r3;
        java.lang.RuntimeException $r14;
        java.lang.reflect.InvocationTargetException $r15;
        com.google.tagmanager.protobuf.CodedInputStream $r9;
        com.google.tagmanager.protobuf.MutableMessageLite $r7;
        java.lang.Class $r2;
        java.lang.Object $r6;
        java.lang.ClassNotFoundException $r10;

        r0 := @this: com.google.tagmanager.protobuf.GeneratedMutableMessageLite$SerializedForm;

        $r1 = r0.<com.google.tagmanager.protobuf.GeneratedMutableMessageLite$SerializedForm: java.lang.String messageClassName>;

     label01:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r1);

     label02:
        $r3 = newarray (java.lang.Class)[0];

     label03:
        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("newMessage", $r3);

     label04:
        $r5 = newarray (java.lang.Object)[0];

     label05:
        $r6 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r5);

     label06:
        $r7 = (com.google.tagmanager.protobuf.MutableMessageLite) $r6;

        $r8 = r0.<com.google.tagmanager.protobuf.GeneratedMutableMessageLite$SerializedForm: byte[] asBytes>;

     label07:
        $r9 = staticinvoke <com.google.tagmanager.protobuf.CodedInputStream: com.google.tagmanager.protobuf.CodedInputStream newInstance(byte[])>($r8);

        $z0 = interfaceinvoke $r7.<com.google.tagmanager.protobuf.MutableMessageLite: boolean mergeFrom(com.google.tagmanager.protobuf.CodedInputStream)>($r9);

     label08:
        if $z0 != 0 goto label15;

        $r14 = new java.lang.RuntimeException;

     label09:
        specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.String)>("Unable to understand proto buffer");

     label10:
        throw $r14;

     label11:
        $r10 := @caughtexception;

        $r14 = new java.lang.RuntimeException;

        specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to find proto buffer class", $r10);

        throw $r14;

     label12:
        $r11 := @caughtexception;

        $r14 = new java.lang.RuntimeException;

        specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to find newMessage method", $r11);

        throw $r14;

     label13:
        $r12 := @caughtexception;

        $r14 = new java.lang.RuntimeException;

        specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to call newMessage method", $r12);

        throw $r14;

     label14:
        $r13 := @caughtexception;

        $r14 = new java.lang.RuntimeException;

        $r15 = (java.lang.reflect.InvocationTargetException) $r13;

        $r11 = virtualinvoke $r15.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error calling newMessage", $r11);

        throw $r14;

     label15:
        return $r7;

        catch java.lang.ClassNotFoundException from label01 to label02 with label11;
        catch java.lang.ClassNotFoundException from label03 to label04 with label11;
        catch java.lang.ClassNotFoundException from label05 to label06 with label11;
        catch java.lang.ClassNotFoundException from label07 to label08 with label11;
        catch java.lang.ClassNotFoundException from label09 to label10 with label11;
        catch java.lang.NoSuchMethodException from label01 to label02 with label12;
        catch java.lang.NoSuchMethodException from label03 to label04 with label12;
        catch java.lang.NoSuchMethodException from label05 to label06 with label12;
        catch java.lang.NoSuchMethodException from label07 to label08 with label12;
        catch java.lang.NoSuchMethodException from label09 to label10 with label12;
        catch java.lang.IllegalAccessException from label01 to label02 with label13;
        catch java.lang.IllegalAccessException from label03 to label04 with label13;
        catch java.lang.IllegalAccessException from label05 to label06 with label13;
        catch java.lang.IllegalAccessException from label07 to label08 with label13;
        catch java.lang.IllegalAccessException from label09 to label10 with label13;
        catch java.lang.reflect.InvocationTargetException from label01 to label02 with label14;
        catch java.lang.reflect.InvocationTargetException from label03 to label04 with label14;
        catch java.lang.reflect.InvocationTargetException from label05 to label06 with label14;
        catch java.lang.reflect.InvocationTargetException from label07 to label08 with label14;
        catch java.lang.reflect.InvocationTargetException from label09 to label10 with label14;
    }
}
