public final class com.google.zxing.common.BitMatrix extends java.lang.Object
{
    public final int[] bits;
    public final int height;
    public final int rowSize;
    public final int width;

    public void <init>(int)
    {
        int $i0;
        com.google.zxing.common.BitMatrix r0;

        r0 := @this: com.google.zxing.common.BitMatrix;

        $i0 := @parameter0: int;

        specialinvoke r0.<com.google.zxing.common.BitMatrix: void <init>(int,int)>($i0, $i0);

        return;
    }

    public void <init>(int, int)
    {
        int[] $r2;
        int $i0, $i1;
        com.google.zxing.common.BitMatrix r0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: com.google.zxing.common.BitMatrix;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $i0 < 1 goto label1;

        if $i1 >= 1 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Both dimensions must be greater than 0");

        throw $r1;

     label2:
        r0.<com.google.zxing.common.BitMatrix: int width> = $i0;

        r0.<com.google.zxing.common.BitMatrix: int height> = $i1;

        $i0 = $i0 + 31;

        $i0 = $i0 >> 5;

        r0.<com.google.zxing.common.BitMatrix: int rowSize> = $i0;

        $i0 = r0.<com.google.zxing.common.BitMatrix: int rowSize>;

        $i0 = $i0 * $i1;

        $r2 = newarray (int)[$i0];

        r0.<com.google.zxing.common.BitMatrix: int[] bits> = $r2;

        return;
    }

    public void clear()
    {
        int[] $r1;
        int $i0, $i1;
        com.google.zxing.common.BitMatrix r0;

        r0 := @this: com.google.zxing.common.BitMatrix;

        $r1 = r0.<com.google.zxing.common.BitMatrix: int[] bits>;

        $i0 = lengthof $r1;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r1 = r0.<com.google.zxing.common.BitMatrix: int[] bits>;

        $r1[$i1] = 0;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return;
    }

    public boolean equals(java.lang.Object)
    {
        int[] $r3;
        int $i0, $i1, $i2;
        com.google.zxing.common.BitMatrix r0, $r2;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: com.google.zxing.common.BitMatrix;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof com.google.zxing.common.BitMatrix;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = (com.google.zxing.common.BitMatrix) $r1;

        $i0 = r0.<com.google.zxing.common.BitMatrix: int width>;

        $i1 = $r2.<com.google.zxing.common.BitMatrix: int width>;

        if $i0 != $i1 goto label4;

        $i0 = r0.<com.google.zxing.common.BitMatrix: int height>;

        $i1 = $r2.<com.google.zxing.common.BitMatrix: int height>;

        if $i0 != $i1 goto label4;

        $i0 = r0.<com.google.zxing.common.BitMatrix: int rowSize>;

        $i1 = $r2.<com.google.zxing.common.BitMatrix: int rowSize>;

        if $i0 != $i1 goto label4;

        $r3 = r0.<com.google.zxing.common.BitMatrix: int[] bits>;

        $i0 = lengthof $r3;

        $r3 = $r2.<com.google.zxing.common.BitMatrix: int[] bits>;

        $i1 = lengthof $r3;

        if $i0 != $i1 goto label4;

        $i0 = 0;

     label2:
        $r3 = r0.<com.google.zxing.common.BitMatrix: int[] bits>;

        $i1 = lengthof $r3;

        if $i0 >= $i1 goto label3;

        $r3 = r0.<com.google.zxing.common.BitMatrix: int[] bits>;

        $i1 = $r3[$i0];

        $r3 = $r2.<com.google.zxing.common.BitMatrix: int[] bits>;

        $i2 = $r3[$i0];

        if $i1 != $i2 goto label4;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        return 1;

     label4:
        return 0;
    }

    public void flip(int, int)
    {
        int[] $r1;
        int $i0, $i1, $i2;
        com.google.zxing.common.BitMatrix r0;

        r0 := @this: com.google.zxing.common.BitMatrix;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = r0.<com.google.zxing.common.BitMatrix: int rowSize>;

        $i1 = $i2 * $i1;

        $i2 = $i0 >> 5;

        $i1 = $i1 + $i2;

        $r1 = r0.<com.google.zxing.common.BitMatrix: int[] bits>;

        $i2 = $r1[$i1];

        $i0 = $i0 & 31;

        $i0 = 1 << $i0;

        $i0 = $i2 ^ $i0;

        $r1[$i1] = $i0;

        return;
    }

    public boolean get(int, int)
    {
        int[] $r1;
        int $i0, $i1, $i2;
        com.google.zxing.common.BitMatrix r0;

        r0 := @this: com.google.zxing.common.BitMatrix;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = r0.<com.google.zxing.common.BitMatrix: int rowSize>;

        $i1 = $i2 * $i1;

        $i2 = $i0 >> 5;

        $i1 = $i1 + $i2;

        $r1 = r0.<com.google.zxing.common.BitMatrix: int[] bits>;

        $i1 = $r1[$i1];

        $i0 = $i0 & 31;

        $i0 = $i1 >>> $i0;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public int getHeight()
    {
        int i0;
        com.google.zxing.common.BitMatrix r0;

        r0 := @this: com.google.zxing.common.BitMatrix;

        i0 = r0.<com.google.zxing.common.BitMatrix: int height>;

        return i0;
    }

    public com.google.zxing.common.BitArray getRow(int, com.google.zxing.common.BitArray)
    {
        int[] $r2;
        int $i0, $i1, $i2, $i3;
        com.google.zxing.common.BitMatrix r0;
        com.google.zxing.common.BitArray $r1;

        r0 := @this: com.google.zxing.common.BitMatrix;

        $i0 := @parameter0: int;

        $r1 := @parameter1: com.google.zxing.common.BitArray;

        if $r1 == null goto label1;

        $i2 = virtualinvoke $r1.<com.google.zxing.common.BitArray: int getSize()>();

        $i3 = r0.<com.google.zxing.common.BitMatrix: int width>;

        if $i2 >= $i3 goto label2;

     label1:
        $r1 = new com.google.zxing.common.BitArray;

        $i2 = r0.<com.google.zxing.common.BitMatrix: int width>;

        specialinvoke $r1.<com.google.zxing.common.BitArray: void <init>(int)>($i2);

     label2:
        $i2 = r0.<com.google.zxing.common.BitMatrix: int rowSize>;

        $i0 = $i0 * $i2;

        $i2 = 0;

     label3:
        $i3 = r0.<com.google.zxing.common.BitMatrix: int rowSize>;

        if $i2 >= $i3 goto label4;

        $i3 = $i2 << 5;

        $r2 = r0.<com.google.zxing.common.BitMatrix: int[] bits>;

        $i1 = $i0 + $i2;

        $i1 = $r2[$i1];

        virtualinvoke $r1.<com.google.zxing.common.BitArray: void setBulk(int,int)>($i3, $i1);

        $i2 = $i2 + 1;

        goto label3;

     label4:
        return $r1;
    }

    public int[] getTopLeftOnBit()
    {
        int[] $r1;
        int $i0, $i1, $i2, $i3, $i4;
        com.google.zxing.common.BitMatrix r0;

        r0 := @this: com.google.zxing.common.BitMatrix;

        $i0 = 0;

     label1:
        $r1 = r0.<com.google.zxing.common.BitMatrix: int[] bits>;

        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label2;

        $r1 = r0.<com.google.zxing.common.BitMatrix: int[] bits>;

        $i1 = $r1[$i0];

        if $i1 != 0 goto label2;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r1 = r0.<com.google.zxing.common.BitMatrix: int[] bits>;

        $i1 = lengthof $r1;

        if $i0 != $i1 goto label3;

        return null;

     label3:
        $i1 = r0.<com.google.zxing.common.BitMatrix: int rowSize>;

        $i1 = $i0 / $i1;

        $i2 = r0.<com.google.zxing.common.BitMatrix: int rowSize>;

        $i2 = $i0 % $i2;

        $i2 = $i2 << 5;

        $r1 = r0.<com.google.zxing.common.BitMatrix: int[] bits>;

        $i0 = $r1[$i0];

        $i3 = 0;

     label4:
        $i4 = 31 - $i3;

        $i4 = $i0 << $i4;

        if $i4 != 0 goto label5;

        $i3 = $i3 + 1;

        goto label4;

     label5:
        $i0 = $i2 + $i3;

        $r1 = newarray (int)[2];

        $r1[0] = $i0;

        $r1[1] = $i1;

        return $r1;
    }

    public int getWidth()
    {
        int i0;
        com.google.zxing.common.BitMatrix r0;

        r0 := @this: com.google.zxing.common.BitMatrix;

        i0 = r0.<com.google.zxing.common.BitMatrix: int width>;

        return i0;
    }

    public int hashCode()
    {
        int[] $r1;
        int $i0, $i1, $i2;
        com.google.zxing.common.BitMatrix r0;

        r0 := @this: com.google.zxing.common.BitMatrix;

        $i0 = r0.<com.google.zxing.common.BitMatrix: int width>;

        $i0 = $i0 * 31;

        $i1 = r0.<com.google.zxing.common.BitMatrix: int width>;

        $i0 = $i0 + $i1;

        $i0 = $i0 * 31;

        $i1 = r0.<com.google.zxing.common.BitMatrix: int height>;

        $i0 = $i0 + $i1;

        $i0 = $i0 * 31;

        $i1 = r0.<com.google.zxing.common.BitMatrix: int rowSize>;

        $i1 = $i1 + $i0;

        $i0 = 0;

     label1:
        $r1 = r0.<com.google.zxing.common.BitMatrix: int[] bits>;

        $i2 = lengthof $r1;

        if $i0 >= $i2 goto label2;

        $i1 = $i1 * 31;

        $r1 = r0.<com.google.zxing.common.BitMatrix: int[] bits>;

        $i2 = $r1[$i0];

        $i1 = $i1 + $i2;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return $i1;
    }

    public void set(int, int)
    {
        int[] $r1;
        int $i0, $i1, $i2;
        com.google.zxing.common.BitMatrix r0;

        r0 := @this: com.google.zxing.common.BitMatrix;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = r0.<com.google.zxing.common.BitMatrix: int rowSize>;

        $i1 = $i2 * $i1;

        $i2 = $i0 >> 5;

        $i1 = $i1 + $i2;

        $r1 = r0.<com.google.zxing.common.BitMatrix: int[] bits>;

        $i2 = $r1[$i1];

        $i0 = $i0 & 31;

        $i0 = 1 << $i0;

        $i0 = $i2 | $i0;

        $r1[$i1] = $i0;

        return;
    }

    public void setRegion(int, int, int, int)
    {
        java.lang.IllegalArgumentException $r2;
        int[] $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        com.google.zxing.common.BitMatrix r0;

        r0 := @this: com.google.zxing.common.BitMatrix;

        $i0 := @parameter0: int;

        $i4 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        if $i4 < 0 goto label1;

        if $i0 >= 0 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Left and top must be nonnegative");

        throw $r2;

     label2:
        if $i2 < 1 goto label3;

        if $i1 >= 1 goto label4;

     label3:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Height and width must be at least 1");

        throw $r2;

     label4:
        $i1 = $i0 + $i1;

        $i2 = $i4 + $i2;

        $i3 = r0.<com.google.zxing.common.BitMatrix: int height>;

        if $i2 > $i3 goto label5;

        $i3 = r0.<com.google.zxing.common.BitMatrix: int width>;

        if $i1 <= $i3 goto label7;

     label5:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The region must fit inside the matrix");

        throw $r2;

     label6:
        $i4 = $i4 + 1;

     label7:
        if $i4 >= $i2 goto label9;

        $i3 = r0.<com.google.zxing.common.BitMatrix: int rowSize>;

        $i3 = $i4 * $i3;

        $i5 = $i0;

     label8:
        if $i5 >= $i1 goto label6;

        $r1 = r0.<com.google.zxing.common.BitMatrix: int[] bits>;

        $i6 = $i5 >> 5;

        $i6 = $i6 + $i3;

        $i7 = $r1[$i6];

        $i8 = $i5 & 31;

        $i8 = 1 << $i8;

        $i7 = $i7 | $i8;

        $r1[$i6] = $i7;

        $i5 = $i5 + 1;

        goto label8;

     label9:
        return;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuffer $r1;
        int $i0, $i1, $i2;
        com.google.zxing.common.BitMatrix r0;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: com.google.zxing.common.BitMatrix;

        $r1 = new java.lang.StringBuffer;

        $i0 = r0.<com.google.zxing.common.BitMatrix: int height>;

        $i1 = r0.<com.google.zxing.common.BitMatrix: int width>;

        $i1 = $i1 + 1;

        $i0 = $i0 * $i1;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>(int)>($i0);

        $i0 = 0;

     label1:
        $i1 = r0.<com.google.zxing.common.BitMatrix: int height>;

        if $i0 >= $i1 goto label6;

        $i1 = 0;

     label2:
        $i2 = r0.<com.google.zxing.common.BitMatrix: int width>;

        if $i1 >= $i2 goto label5;

        $z0 = virtualinvoke r0.<com.google.zxing.common.BitMatrix: boolean get(int,int)>($i1, $i0);

        if $z0 == 0 goto label4;

        $r2 = "X ";

     label3:
        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $i1 = $i1 + 1;

        goto label2;

     label4:
        $r2 = "  ";

        goto label3;

     label5:
        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        $i0 = $i0 + 1;

        goto label1;

     label6:
        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }
}
