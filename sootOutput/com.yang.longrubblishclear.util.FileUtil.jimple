public class com.yang.longrubblishclear.util.FileUtil extends java.lang.Object
{
    public static java.lang.String SD_ROOT;

    static void <clinit>()
    {
        java.lang.String $r0;

        $r0 = staticinvoke <com.yang.longrubblishclear.util.FileUtil: java.lang.String getExternalStoragePath()>();

        <com.yang.longrubblishclear.util.FileUtil: java.lang.String SD_ROOT> = $r0;

        return;
    }

    public void <init>()
    {
        com.yang.longrubblishclear.util.FileUtil r0;

        r0 := @this: com.yang.longrubblishclear.util.FileUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void deleteFile(java.io.File)
    {
        int i0, $i1;
        java.io.File[] $r1;
        java.io.File $r0, $r2;
        boolean $z0;

        $r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label4;

        $z0 = virtualinvoke $r0.<java.io.File: boolean isFile()>();

        if $z0 == 0 goto label2;

        virtualinvoke $r0.<java.io.File: boolean delete()>();

     label1:
        virtualinvoke $r0.<java.io.File: boolean delete()>();

        return;

     label2:
        $z0 = virtualinvoke $r0.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke $r0.<java.io.File: java.io.File[] listFiles()>();

        i0 = 0;

     label3:
        $i1 = lengthof $r1;

        if i0 >= $i1 goto label1;

        $r2 = $r1[i0];

        staticinvoke <com.yang.longrubblishclear.util.FileUtil: void deleteFile(java.io.File)>($r2);

        i0 = i0 + 1;

        goto label3;

     label4:
        return;
    }

    public static java.lang.String getExternalStoragePath()
    {
        java.lang.String $r0, $r1;
        java.io.File $r2;
        boolean $z0;

        $r0 = staticinvoke <android.os.Environment: java.lang.String getExternalStorageState()>();

        $r1 = "mounted";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <android.os.Environment: java.io.File getExternalStorageDirectory()>();

        $z0 = virtualinvoke $r2.<java.io.File: boolean canWrite()>();

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <android.os.Environment: java.io.File getExternalStorageDirectory()>();

        $r0 = virtualinvoke $r2.<java.io.File: java.lang.String getPath()>();

        <com.yang.longrubblishclear.util.FileUtil: java.lang.String SD_ROOT> = $r0;

        $r0 = <com.yang.longrubblishclear.util.FileUtil: java.lang.String SD_ROOT>;

        return $r0;

     label1:
        return null;
    }

    public static long getFileSize(java.io.File)
    {
        int $i0, $i2;
        long l1, $l3;
        java.io.File[] $r1;
        java.io.File $r0;
        boolean $z0;

        $r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label4;

        $z0 = virtualinvoke $r0.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label3;

        $r1 = virtualinvoke $r0.<java.io.File: java.io.File[] listFiles()>();

        l1 = 0L;

        $i0 = lengthof $r1;

        $i2 = 0;

     label1:
        if $i2 < $i0 goto label2;

        return l1;

     label2:
        $r0 = $r1[$i2];

        $l3 = staticinvoke <com.yang.longrubblishclear.util.FileUtil: long getFileSize(java.io.File)>($r0);

        l1 = l1 + $l3;

        $i2 = $i2 + 1;

        goto label1;

     label3:
        l1 = virtualinvoke $r0.<java.io.File: long length()>();

        return l1;

     label4:
        return 0L;
    }

    public static java.lang.String[] getOtherExternalStoragePath()
    {
        java.lang.Throwable $r11;
        java.lang.Object[] $r8;
        java.util.Scanner r3, r6;
        java.lang.String[] r1, $r13;
        java.util.ArrayList r2;
        int $i0, $i1, $i2;
        java.lang.String r4, r7;
        boolean $z0;
        java.io.File r0;
        java.lang.Exception $r9, $r10, $r12, $r14, $r15;
        java.util.List $r5;

        $r5 = staticinvoke <com.yang.longrubblishclear.util.FileUtil: java.util.List readVoldFile()>();

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        r6 = null;

     label01:
        r3 = new java.util.Scanner;

        r0 = new java.io.File;

     label02:
        specialinvoke r0.<java.io.File: void <init>(java.lang.String)>("/proc/mounts");

        specialinvoke r3.<java.util.Scanner: void <init>(java.io.File)>(r0);

     label03:
        $z0 = virtualinvoke r3.<java.util.Scanner: boolean hasNext()>();

     label04:
        if $z0 != 0 goto label10;

        if r3 == null goto label06;

     label05:
        virtualinvoke r3.<java.util.Scanner: void close()>();

     label06:
        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        if $i0 != 0 goto label09;

        r1 = newarray (java.lang.String)[4];

        r1[0] = "/storage/ext_sd";

        r1[1] = "/storage/sdcard1";

        r1[2] = "/mnt/sdcard";

        r1[3] = "/sdcard2";

        r7 = null;

        $i0 = lengthof r1;

        $i1 = 0;

     label07:
        if $i1 < $i0 goto label35;

     label08:
        if r7 == null goto label09;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r7);

     label09:
        r1 = newarray (java.lang.String)[0];

        $r8 = interfaceinvoke r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r1);

        r1 = (java.lang.String[]) $r8;

        return r1;

     label10:
        r4 = virtualinvoke r3.<java.util.Scanner: java.lang.String nextLine()>();

        $z0 = staticinvoke <com.yang.longrubblishclear.util.FileUtil: boolean isLineOK(java.lang.String)>(r4);

     label11:
        if $z0 == 0 goto label03;

     label12:
        r1 = virtualinvoke r4.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\s");

     label13:
        $i0 = lengthof r1;

     label14:
        if $i0 <= 2 goto label03;

        if $r5 == null goto label18;

     label15:
        r4 = r1[1];

     label16:
        $z0 = interfaceinvoke $r5.<java.util.List: boolean contains(java.lang.Object)>(r4);

     label17:
        if $z0 == 0 goto label03;

     label18:
        r4 = r1[1];

     label19:
        r7 = <com.yang.longrubblishclear.util.FileUtil: java.lang.String SD_ROOT>;

     label20:
        $z0 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>(r7);

     label21:
        if $z0 != 0 goto label03;

     label22:
        r4 = r1[1];

     label23:
        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r4);

     label24:
        goto label03;

     label25:
        $r9 := @caughtexception;

        r6 = r3;

     label26:
        if r6 == null goto label06;

     label27:
        virtualinvoke r6.<java.util.Scanner: void close()>();

     label28:
        goto label06;

     label29:
        $r10 := @caughtexception;

        goto label06;

     label30:
        $r11 := @caughtexception;

     label31:
        if r6 == null goto label33;

     label32:
        virtualinvoke r6.<java.util.Scanner: void close()>();

     label33:
        throw $r11;

     label34:
        $r12 := @caughtexception;

        goto label06;

     label35:
        r4 = r1[$i1];

        r0 = new java.io.File;

        specialinvoke r0.<java.io.File: void <init>(java.lang.String)>(r4);

        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label36;

        $z0 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label36;

        $r13 = virtualinvoke r0.<java.io.File: java.lang.String[] list()>();

        if $r13 == null goto label36;

        $r13 = virtualinvoke r0.<java.io.File: java.lang.String[] list()>();

        $i2 = lengthof $r13;

        if $i2 <= 0 goto label36;

        r7 = r4;

        goto label08;

     label36:
        $i1 = $i1 + 1;

        goto label07;

     label37:
        $r14 := @caughtexception;

        goto label33;

     label38:
        $r11 := @caughtexception;

        r6 = r3;

        goto label31;

     label39:
        $r15 := @caughtexception;

        goto label26;

        catch java.lang.Exception from label02 to label03 with label39;
        catch java.lang.Throwable from label01 to label03 with label30;
        catch java.lang.Exception from label03 to label04 with label25;
        catch java.lang.Throwable from label03 to label04 with label38;
        catch java.lang.Exception from label05 to label06 with label34;
        catch java.lang.Exception from label10 to label11 with label25;
        catch java.lang.Exception from label12 to label14 with label25;
        catch java.lang.Exception from label15 to label17 with label25;
        catch java.lang.Exception from label18 to label19 with label25;
        catch java.lang.Exception from label20 to label21 with label25;
        catch java.lang.Exception from label22 to label24 with label25;
        catch java.lang.Throwable from label10 to label11 with label38;
        catch java.lang.Throwable from label12 to label13 with label38;
        catch java.lang.Throwable from label16 to label17 with label38;
        catch java.lang.Throwable from label19 to label21 with label38;
        catch java.lang.Throwable from label23 to label24 with label38;
        catch java.lang.Exception from label27 to label28 with label29;
        catch java.lang.Exception from label32 to label33 with label37;
    }

    private static boolean isLineOK(java.lang.String)
    {
        int $i0;
        java.lang.String $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("/emulated");

        if $i0 <= -1 goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("/mnt/secure");

        if $i0 > -1 goto label3;

        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("/mnt/asec");

        if $i0 > -1 goto label3;

        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("/mnt/obb");

        if $i0 > -1 goto label3;

        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("/dev/mapper");

        if $i0 > -1 goto label3;

        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("/mnt/media_rw");

        if $i0 > -1 goto label3;

        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("tmpfs");

        if $i0 > -1 goto label3;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>("/dev/block/vold");

        if $z0 == 0 goto label2;

        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("vfat");

        if $i0 <= -1 goto label2;

        return 1;

     label2:
        $z0 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>("/dev/fuse");

        if $z0 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    private static java.util.List readVoldFile()
    {
        java.lang.Throwable $r8;
        java.util.Scanner r1, r3, $r14;
        java.lang.String[] $r6;
        java.util.ArrayList r2, $r12;
        int $i0, $i1;
        java.lang.String $r5;
        boolean $z0;
        java.io.File r0, $r13;
        java.lang.Exception $r4, r7, $r9, $r10, r11;

        $r12 = new java.util.ArrayList;

        r2 = $r12;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        $r13 = new java.io.File;

        r0 = $r13;

        specialinvoke $r13.<java.io.File: void <init>(java.lang.String)>("/system/etc/vold.fstab");

        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label01;

        return null;

     label01:
        r3 = null;

     label02:
        $r14 = new java.util.Scanner;

     label03:
        r1 = $r14;

     label04:
        specialinvoke $r14.<java.util.Scanner: void <init>(java.io.File)>(r0);

     label05:
        $z0 = virtualinvoke r1.<java.util.Scanner: boolean hasNext()>();

     label06:
        if $z0 != 0 goto label10;

        if r1 == null goto label37;

     label07:
        virtualinvoke r1.<java.util.Scanner: void close()>();

     label08:
        return r2;

     label09:
        $r4 := @caughtexception;

        return r2;

     label10:
        $r5 = virtualinvoke r1.<java.util.Scanner: java.lang.String nextLine()>();

        $r5 = virtualinvoke $r5.<java.lang.String: java.lang.String trim()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean startsWith(java.lang.String)>("dev_mount");

     label11:
        if $z0 == 0 goto label05;

     label12:
        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\s");

     label13:
        $i0 = lengthof $r6;

     label14:
        $i1 = 0;

     label15:
        if $i1 >= $i0 goto label05;

     label16:
        $r5 = $r6[$i1];

     label17:
        $z0 = virtualinvoke $r5.<java.lang.String: boolean startsWith(java.lang.String)>("/mnt/");

     label18:
        if $z0 == 0 goto label28;

     label19:
        $i0 = virtualinvoke $r5.<java.lang.String: int indexOf(java.lang.String)>(":");

     label20:
        if $i0 <= -1 goto label22;

     label21:
        $i0 = virtualinvoke $r5.<java.lang.String: int indexOf(java.lang.String)>(":");

        $r5 = virtualinvoke $r5.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

     label22:
        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r5);

     label23:
        goto label05;

     label24:
        r7 := @caughtexception;

        r3 = r1;

     label25:
        if r3 == null goto label27;

     label26:
        virtualinvoke r3.<java.util.Scanner: void close()>();

     label27:
        return null;

     label28:
        $i1 = $i1 + 1;

        goto label15;

     label29:
        $r8 := @caughtexception;

     label30:
        if r3 == null goto label32;

     label31:
        virtualinvoke r3.<java.util.Scanner: void close()>();

     label32:
        throw $r8;

     label33:
        $r9 := @caughtexception;

        goto label27;

     label34:
        $r10 := @caughtexception;

        goto label32;

     label35:
        $r8 := @caughtexception;

        r3 = r1;

        goto label30;

     label36:
        r11 := @caughtexception;

        goto label25;

     label37:
        return r2;

        catch java.lang.Exception from label04 to label05 with label36;
        catch java.lang.Throwable from label02 to label03 with label29;
        catch java.lang.Throwable from label04 to label05 with label29;
        catch java.lang.Exception from label05 to label06 with label24;
        catch java.lang.Throwable from label05 to label06 with label35;
        catch java.lang.Exception from label07 to label08 with label09;
        catch java.lang.Exception from label10 to label11 with label24;
        catch java.lang.Exception from label12 to label14 with label24;
        catch java.lang.Exception from label16 to label18 with label24;
        catch java.lang.Exception from label19 to label20 with label24;
        catch java.lang.Exception from label21 to label22 with label24;
        catch java.lang.Exception from label22 to label23 with label24;
        catch java.lang.Throwable from label10 to label11 with label35;
        catch java.lang.Throwable from label12 to label13 with label35;
        catch java.lang.Throwable from label17 to label18 with label35;
        catch java.lang.Throwable from label19 to label20 with label35;
        catch java.lang.Throwable from label21 to label22 with label35;
        catch java.lang.Throwable from label22 to label23 with label35;
        catch java.lang.Exception from label26 to label27 with label33;
        catch java.lang.Exception from label31 to label32 with label34;
    }
}
