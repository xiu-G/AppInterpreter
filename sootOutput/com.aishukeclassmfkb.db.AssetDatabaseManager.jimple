public class com.aishukeclassmfkb.db.AssetDatabaseManager extends java.lang.Object
{
    private static java.lang.String databasepath;
    private static com.aishukeclassmfkb.db.AssetDatabaseManager mInstance;
    private static java.lang.String tag;
    private android.content.Context context;
    private java.util.Map databases;

    static void <clinit>()
    {
        <com.aishukeclassmfkb.db.AssetDatabaseManager: java.lang.String tag> = "AssetsDatabase";

        <com.aishukeclassmfkb.db.AssetDatabaseManager: java.lang.String databasepath> = "/data/data/%s/database";

        <com.aishukeclassmfkb.db.AssetDatabaseManager: com.aishukeclassmfkb.db.AssetDatabaseManager mInstance> = null;

        return;
    }

    private void <init>(android.content.Context)
    {
        android.content.Context $r1;
        java.util.HashMap $r2;
        com.aishukeclassmfkb.db.AssetDatabaseManager r0;

        r0 := @this: com.aishukeclassmfkb.db.AssetDatabaseManager;

        $r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<com.aishukeclassmfkb.db.AssetDatabaseManager: java.util.Map databases> = $r2;

        r0.<com.aishukeclassmfkb.db.AssetDatabaseManager: android.content.Context context> = null;

        r0.<com.aishukeclassmfkb.db.AssetDatabaseManager: android.content.Context context> = $r1;

        return;
    }

    public static void closeAllDatabase()
    {
        android.database.sqlite.SQLiteDatabase $r4;
        java.util.Map $r1;
        int $i0, $i1;
        java.lang.Object $r3;
        com.aishukeclassmfkb.db.AssetDatabaseManager $r0;
        java.lang.Integer $r2;

        $r0 = <com.aishukeclassmfkb.db.AssetDatabaseManager: com.aishukeclassmfkb.db.AssetDatabaseManager mInstance>;

        if $r0 == null goto label4;

        $i0 = 0;

     label1:
        $r0 = <com.aishukeclassmfkb.db.AssetDatabaseManager: com.aishukeclassmfkb.db.AssetDatabaseManager mInstance>;

        $r1 = $r0.<com.aishukeclassmfkb.db.AssetDatabaseManager: java.util.Map databases>;

        $i1 = interfaceinvoke $r1.<java.util.Map: int size()>();

        if $i0 >= $i1 goto label3;

        $r0 = <com.aishukeclassmfkb.db.AssetDatabaseManager: com.aishukeclassmfkb.db.AssetDatabaseManager mInstance>;

        $r1 = $r0.<com.aishukeclassmfkb.db.AssetDatabaseManager: java.util.Map databases>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        if $r3 == null goto label2;

        $r0 = <com.aishukeclassmfkb.db.AssetDatabaseManager: com.aishukeclassmfkb.db.AssetDatabaseManager mInstance>;

        $r1 = $r0.<com.aishukeclassmfkb.db.AssetDatabaseManager: java.util.Map databases>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        $r4 = (android.database.sqlite.SQLiteDatabase) $r3;

        virtualinvoke $r4.<android.database.sqlite.SQLiteDatabase: void close()>();

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        $r0 = <com.aishukeclassmfkb.db.AssetDatabaseManager: com.aishukeclassmfkb.db.AssetDatabaseManager mInstance>;

        $r1 = $r0.<com.aishukeclassmfkb.db.AssetDatabaseManager: java.util.Map databases>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

     label4:
        return;
    }

    private boolean copyAssetsToFilesystem(java.lang.String, java.lang.String)
    {
        android.content.Context $r4;
        byte[] $r8;
        java.io.FileOutputStream $r7;
        java.lang.Exception $r9, $r10;
        android.content.res.AssetManager $r5;
        int $i0;
        com.aishukeclassmfkb.db.AssetDatabaseManager r0;
        java.lang.String $r1, $r2;
        java.io.InputStream $r3, $r6;

        r0 := @this: com.aishukeclassmfkb.db.AssetDatabaseManager;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = null;

     label01:
        $r4 = r0.<com.aishukeclassmfkb.db.AssetDatabaseManager: android.content.Context context>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.res.AssetManager getAssets()>();

        $r6 = virtualinvoke $r5.<android.content.res.AssetManager: java.io.InputStream open(java.lang.String)>("chapter.db");

     label02:
        $r7 = new java.io.FileOutputStream;

     label03:
        specialinvoke $r7.<java.io.FileOutputStream: void <init>(java.lang.String)>($r2);

     label04:
        $r8 = newarray (byte)[1024];

     label05:
        $i0 = virtualinvoke $r6.<java.io.InputStream: int read(byte[])>($r8);

     label06:
        if $i0 <= 0 goto label15;

     label07:
        virtualinvoke $r7.<java.io.OutputStream: void write(byte[],int,int)>($r8, 0, $i0);

     label08:
        goto label05;

     label09:
        $r9 := @caughtexception;

        $r3 = $r6;

     label10:
        virtualinvoke $r9.<java.lang.Exception: void printStackTrace()>();

        if $r3 == null goto label12;

     label11:
        virtualinvoke $r3.<java.io.InputStream: void close()>();

     label12:
        if $r7 == null goto label20;

     label13:
        virtualinvoke $r7.<java.io.OutputStream: void close()>();

     label14:
        return 0;

     label15:
        virtualinvoke $r6.<java.io.InputStream: void close()>();

        virtualinvoke $r7.<java.io.OutputStream: void close()>();

     label16:
        return 1;

     label17:
        $r10 := @caughtexception;

        virtualinvoke $r10.<java.lang.Exception: void printStackTrace()>();

        return 0;

     label18:
        $r9 := @caughtexception;

        $r7 = null;

        goto label10;

     label19:
        $r9 := @caughtexception;

        $r7 = null;

        $r3 = $r6;

        goto label10;

     label20:
        return 0;

        catch java.lang.Exception from label01 to label02 with label18;
        catch java.lang.Exception from label03 to label04 with label19;
        catch java.lang.Exception from label05 to label06 with label09;
        catch java.lang.Exception from label07 to label08 with label09;
        catch java.lang.Exception from label11 to label12 with label17;
        catch java.lang.Exception from label13 to label14 with label17;
        catch java.lang.Exception from label15 to label16 with label09;
    }

    private java.lang.String getDatabaseFile(java.lang.String)
    {
        java.lang.StringBuilder $r2;
        com.aishukeclassmfkb.db.AssetDatabaseManager r0;
        java.lang.String $r1, $r3;

        r0 := @this: com.aishukeclassmfkb.db.AssetDatabaseManager;

        $r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = specialinvoke r0.<com.aishukeclassmfkb.db.AssetDatabaseManager: java.lang.String getDatabaseFilepath()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("chapter.db");

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }

    private java.lang.String getDatabaseFilepath()
    {
        android.content.Context $r3;
        java.lang.Object[] $r2;
        com.aishukeclassmfkb.db.AssetDatabaseManager r0;
        java.lang.String $r1, $r5;
        android.content.pm.ApplicationInfo $r4;

        r0 := @this: com.aishukeclassmfkb.db.AssetDatabaseManager;

        $r1 = <com.aishukeclassmfkb.db.AssetDatabaseManager: java.lang.String databasepath>;

        $r2 = newarray (java.lang.Object)[1];

        $r3 = r0.<com.aishukeclassmfkb.db.AssetDatabaseManager: android.content.Context context>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $r5 = $r4.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $r2[0] = $r5;

        $r1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>($r1, $r2);

        return $r1;
    }

    public static com.aishukeclassmfkb.db.AssetDatabaseManager getManager()
    {
        com.aishukeclassmfkb.db.AssetDatabaseManager r0;

        r0 = <com.aishukeclassmfkb.db.AssetDatabaseManager: com.aishukeclassmfkb.db.AssetDatabaseManager mInstance>;

        return r0;
    }

    public static void initManager(android.content.Context)
    {
        android.content.Context $r0;
        com.aishukeclassmfkb.db.AssetDatabaseManager $r1;

        $r0 := @parameter0: android.content.Context;

        $r1 = <com.aishukeclassmfkb.db.AssetDatabaseManager: com.aishukeclassmfkb.db.AssetDatabaseManager mInstance>;

        if $r1 != null goto label1;

        $r1 = new com.aishukeclassmfkb.db.AssetDatabaseManager;

        specialinvoke $r1.<com.aishukeclassmfkb.db.AssetDatabaseManager: void <init>(android.content.Context)>($r0);

        <com.aishukeclassmfkb.db.AssetDatabaseManager: com.aishukeclassmfkb.db.AssetDatabaseManager mInstance> = $r1;

     label1:
        return;
    }

    public boolean closeDatabase(java.lang.String)
    {
        android.database.sqlite.SQLiteDatabase $r4;
        java.util.Map $r2;
        java.lang.Object $r3;
        com.aishukeclassmfkb.db.AssetDatabaseManager r0;
        java.lang.String $r1;

        r0 := @this: com.aishukeclassmfkb.db.AssetDatabaseManager;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.aishukeclassmfkb.db.AssetDatabaseManager: java.util.Map databases>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        if $r3 == null goto label1;

        $r2 = r0.<com.aishukeclassmfkb.db.AssetDatabaseManager: java.util.Map databases>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (android.database.sqlite.SQLiteDatabase) $r3;

        virtualinvoke $r4.<android.database.sqlite.SQLiteDatabase: void close()>();

        $r2 = r0.<com.aishukeclassmfkb.db.AssetDatabaseManager: java.util.Map databases>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r1);

        return 1;

     label1:
        return 0;
    }

    public android.database.sqlite.SQLiteDatabase getDatabase(java.lang.String)
    {
        android.content.SharedPreferences$Editor $r12;
        android.content.Context $r5;
        java.io.File $r8;
        android.database.sqlite.SQLiteDatabase $r4;
        android.content.SharedPreferences $r11;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.Class $r9;
        com.aishukeclassmfkb.db.AssetDatabaseManager r0;
        java.lang.String $r1, $r6, $r7, $r10;
        boolean $z0;

        r0 := @this: com.aishukeclassmfkb.db.AssetDatabaseManager;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.aishukeclassmfkb.db.AssetDatabaseManager: java.util.Map databases>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>("chapter.db");

        if $r3 == null goto label1;

        $r2 = r0.<com.aishukeclassmfkb.db.AssetDatabaseManager: java.util.Map databases>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>("chapter.db");

        $r4 = (android.database.sqlite.SQLiteDatabase) $r3;

        return $r4;

     label1:
        $r5 = r0.<com.aishukeclassmfkb.db.AssetDatabaseManager: android.content.Context context>;

        if $r5 == null goto label5;

        $r6 = specialinvoke r0.<com.aishukeclassmfkb.db.AssetDatabaseManager: java.lang.String getDatabaseFilepath()>();

        $r7 = specialinvoke r0.<com.aishukeclassmfkb.db.AssetDatabaseManager: java.lang.String getDatabaseFile(java.lang.String)>("chapter.db");

        $r8 = new java.io.File;

        specialinvoke $r8.<java.io.File: void <init>(java.lang.String)>($r7);

        $r5 = r0.<com.aishukeclassmfkb.db.AssetDatabaseManager: android.content.Context context>;

        $r9 = class "Lcom/aishukeclassmfkb/db/AssetDatabaseManager;";

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.String toString()>();

        $r11 = virtualinvoke $r5.<android.content.Context: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>($r10, 0);

        $z0 = interfaceinvoke $r11.<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>("chapter.db", 0);

        if $z0 == 0 goto label2;

        $z0 = virtualinvoke $r8.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label4;

     label2:
        $r8 = new java.io.File;

        specialinvoke $r8.<java.io.File: void <init>(java.lang.String)>($r6);

        $z0 = virtualinvoke $r8.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label3;

        $z0 = virtualinvoke $r8.<java.io.File: boolean mkdirs()>();

        if $z0 == 0 goto label5;

     label3:
        $z0 = specialinvoke r0.<com.aishukeclassmfkb.db.AssetDatabaseManager: boolean copyAssetsToFilesystem(java.lang.String,java.lang.String)>("chapter.db", $r7);

        if $z0 == 0 goto label5;

        $r12 = interfaceinvoke $r11.<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>();

        $r12 = interfaceinvoke $r12.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)>("chapter.db", 1);

        interfaceinvoke $r12.<android.content.SharedPreferences$Editor: boolean commit()>();

     label4:
        $r4 = staticinvoke <android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)>($r7, null, 16);

        if $r4 == null goto label6;

        $r2 = r0.<com.aishukeclassmfkb.db.AssetDatabaseManager: java.util.Map databases>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("chapter.db", $r4);

        return $r4;

     label5:
        return null;

     label6:
        return $r4;
    }
}
