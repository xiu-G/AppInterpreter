public class org.mozilla.universalchardet.prober.UTF8Prober extends org.mozilla.universalchardet.prober.CharsetProber
{
    public static final float ONE_CHAR_PROB;
    private static final org.mozilla.universalchardet.prober.statemachine.SMModel smModel;
    private org.mozilla.universalchardet.prober.statemachine.CodingStateMachine codingSM;
    private int numOfMBChar;
    private org.mozilla.universalchardet.prober.CharsetProber$ProbingState state;

    static void <clinit>()
    {
        org.mozilla.universalchardet.prober.statemachine.UTF8SMModel $r0;

        <org.mozilla.universalchardet.prober.UTF8Prober: float ONE_CHAR_PROB> = 0.5F;

        $r0 = new org.mozilla.universalchardet.prober.statemachine.UTF8SMModel;

        specialinvoke $r0.<org.mozilla.universalchardet.prober.statemachine.UTF8SMModel: void <init>()>();

        <org.mozilla.universalchardet.prober.UTF8Prober: org.mozilla.universalchardet.prober.statemachine.SMModel smModel> = $r0;

        return;
    }

    public void <init>()
    {
        org.mozilla.universalchardet.prober.statemachine.SMModel $r1;
        org.mozilla.universalchardet.prober.statemachine.CodingStateMachine $r2;
        org.mozilla.universalchardet.prober.UTF8Prober r0;

        r0 := @this: org.mozilla.universalchardet.prober.UTF8Prober;

        specialinvoke r0.<org.mozilla.universalchardet.prober.CharsetProber: void <init>()>();

        r0.<org.mozilla.universalchardet.prober.UTF8Prober: int numOfMBChar> = 0;

        $r2 = new org.mozilla.universalchardet.prober.statemachine.CodingStateMachine;

        $r1 = <org.mozilla.universalchardet.prober.UTF8Prober: org.mozilla.universalchardet.prober.statemachine.SMModel smModel>;

        specialinvoke $r2.<org.mozilla.universalchardet.prober.statemachine.CodingStateMachine: void <init>(org.mozilla.universalchardet.prober.statemachine.SMModel)>($r1);

        r0.<org.mozilla.universalchardet.prober.UTF8Prober: org.mozilla.universalchardet.prober.statemachine.CodingStateMachine codingSM> = $r2;

        virtualinvoke r0.<org.mozilla.universalchardet.prober.UTF8Prober: void reset()>();

        return;
    }

    public java.lang.String getCharSetName()
    {
        java.lang.String r1;
        org.mozilla.universalchardet.prober.UTF8Prober r0;

        r0 := @this: org.mozilla.universalchardet.prober.UTF8Prober;

        r1 = <org.mozilla.universalchardet.Constants: java.lang.String CHARSET_UTF_8>;

        return r1;
    }

    public float getConfidence()
    {
        int $i0, $i1;
        float $f0;
        org.mozilla.universalchardet.prober.UTF8Prober r0;

        r0 := @this: org.mozilla.universalchardet.prober.UTF8Prober;

        $f0 = 0.99F;

        $i0 = r0.<org.mozilla.universalchardet.prober.UTF8Prober: int numOfMBChar>;

        if $i0 >= 6 goto label3;

        $i0 = 0;

     label1:
        $i1 = r0.<org.mozilla.universalchardet.prober.UTF8Prober: int numOfMBChar>;

        if $i0 >= $i1 goto label2;

        $f0 = $f0 * 0.5F;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $f0 = 1.0F - $f0;

        return $f0;

     label3:
        return 0.99F;
    }

    public org.mozilla.universalchardet.prober.CharsetProber$ProbingState getState()
    {
        org.mozilla.universalchardet.prober.CharsetProber$ProbingState r1;
        org.mozilla.universalchardet.prober.UTF8Prober r0;

        r0 := @this: org.mozilla.universalchardet.prober.UTF8Prober;

        r1 = r0.<org.mozilla.universalchardet.prober.UTF8Prober: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state>;

        return r1;
    }

    public org.mozilla.universalchardet.prober.CharsetProber$ProbingState handleData(byte[], int, int)
    {
        byte[] $r1;
        org.mozilla.universalchardet.prober.CharsetProber$ProbingState $r3, $r4;
        org.mozilla.universalchardet.prober.statemachine.CodingStateMachine $r2;
        org.mozilla.universalchardet.prober.UTF8Prober r0;
        byte $b2;
        int $i0, $i1, $i3;
        float $f0;

        r0 := @this: org.mozilla.universalchardet.prober.UTF8Prober;

        $r1 := @parameter0: byte[];

        $i1 := @parameter1: int;

        $i0 := @parameter2: int;

        $i0 = 0 + $i0;

     label1:
        if $i1 >= $i0 goto label2;

        $r2 = r0.<org.mozilla.universalchardet.prober.UTF8Prober: org.mozilla.universalchardet.prober.statemachine.CodingStateMachine codingSM>;

        $b2 = $r1[$i1];

        $i3 = virtualinvoke $r2.<org.mozilla.universalchardet.prober.statemachine.CodingStateMachine: int nextState(byte)>($b2);

        if $i3 != 1 goto label4;

        $r3 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState NOT_ME>;

        r0.<org.mozilla.universalchardet.prober.UTF8Prober: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state> = $r3;

     label2:
        $r3 = r0.<org.mozilla.universalchardet.prober.UTF8Prober: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state>;

        $r4 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState DETECTING>;

        if $r3 != $r4 goto label3;

        $f0 = virtualinvoke r0.<org.mozilla.universalchardet.prober.UTF8Prober: float getConfidence()>();

        $b2 = $f0 cmpl 0.95F;

        $i1 = (int) $b2;

        if $i1 <= 0 goto label3;

        $r3 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState FOUND_IT>;

        r0.<org.mozilla.universalchardet.prober.UTF8Prober: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state> = $r3;

     label3:
        $r3 = r0.<org.mozilla.universalchardet.prober.UTF8Prober: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state>;

        return $r3;

     label4:
        if $i3 != 2 goto label5;

        $r3 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState FOUND_IT>;

        r0.<org.mozilla.universalchardet.prober.UTF8Prober: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state> = $r3;

        goto label2;

     label5:
        if $i3 != 0 goto label6;

        $r2 = r0.<org.mozilla.universalchardet.prober.UTF8Prober: org.mozilla.universalchardet.prober.statemachine.CodingStateMachine codingSM>;

        $i3 = virtualinvoke $r2.<org.mozilla.universalchardet.prober.statemachine.CodingStateMachine: int getCurrentCharLen()>();

        if $i3 < 2 goto label6;

        $i3 = r0.<org.mozilla.universalchardet.prober.UTF8Prober: int numOfMBChar>;

        $i3 = $i3 + 1;

        r0.<org.mozilla.universalchardet.prober.UTF8Prober: int numOfMBChar> = $i3;

     label6:
        $i1 = $i1 + 1;

        goto label1;
    }

    public void reset()
    {
        org.mozilla.universalchardet.prober.CharsetProber$ProbingState $r2;
        org.mozilla.universalchardet.prober.statemachine.CodingStateMachine $r1;
        org.mozilla.universalchardet.prober.UTF8Prober r0;

        r0 := @this: org.mozilla.universalchardet.prober.UTF8Prober;

        $r1 = r0.<org.mozilla.universalchardet.prober.UTF8Prober: org.mozilla.universalchardet.prober.statemachine.CodingStateMachine codingSM>;

        virtualinvoke $r1.<org.mozilla.universalchardet.prober.statemachine.CodingStateMachine: void reset()>();

        r0.<org.mozilla.universalchardet.prober.UTF8Prober: int numOfMBChar> = 0;

        $r2 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState DETECTING>;

        r0.<org.mozilla.universalchardet.prober.UTF8Prober: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state> = $r2;

        return;
    }

    public void setOption()
    {
        org.mozilla.universalchardet.prober.UTF8Prober r0;

        r0 := @this: org.mozilla.universalchardet.prober.UTF8Prober;

        return;
    }
}
