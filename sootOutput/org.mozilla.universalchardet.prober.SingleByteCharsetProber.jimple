public class org.mozilla.universalchardet.prober.SingleByteCharsetProber extends org.mozilla.universalchardet.prober.CharsetProber
{
    public static final int NEGATIVE_CAT;
    public static final float NEGATIVE_SHORTCUT_THRESHOLD;
    public static final int NUMBER_OF_SEQ_CAT;
    public static final int POSITIVE_CAT;
    public static final float POSITIVE_SHORTCUT_THRESHOLD;
    public static final int SAMPLE_SIZE;
    public static final int SB_ENOUGH_REL_THRESHOLD;
    public static final int SYMBOL_CAT_ORDER;
    private int freqChar;
    private short lastOrder;
    private org.mozilla.universalchardet.prober.sequence.SequenceModel model;
    private org.mozilla.universalchardet.prober.CharsetProber nameProber;
    private boolean reversed;
    private int[] seqCounters;
    private org.mozilla.universalchardet.prober.CharsetProber$ProbingState state;
    private int totalChar;
    private int totalSeqs;

    public void <init>(org.mozilla.universalchardet.prober.sequence.SequenceModel)
    {
        org.mozilla.universalchardet.prober.SingleByteCharsetProber r0;
        org.mozilla.universalchardet.prober.sequence.SequenceModel $r1;
        int[] $r2;

        r0 := @this: org.mozilla.universalchardet.prober.SingleByteCharsetProber;

        $r1 := @parameter0: org.mozilla.universalchardet.prober.sequence.SequenceModel;

        specialinvoke r0.<org.mozilla.universalchardet.prober.CharsetProber: void <init>()>();

        r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: org.mozilla.universalchardet.prober.sequence.SequenceModel model> = $r1;

        r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: boolean reversed> = 0;

        r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: org.mozilla.universalchardet.prober.CharsetProber nameProber> = null;

        $r2 = newarray (int)[4];

        r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: int[] seqCounters> = $r2;

        virtualinvoke r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: void reset()>();

        return;
    }

    public void <init>(org.mozilla.universalchardet.prober.sequence.SequenceModel, boolean, org.mozilla.universalchardet.prober.CharsetProber)
    {
        org.mozilla.universalchardet.prober.SingleByteCharsetProber r0;
        org.mozilla.universalchardet.prober.sequence.SequenceModel $r1;
        org.mozilla.universalchardet.prober.CharsetProber $r2;
        int[] $r3;
        boolean $z0;

        r0 := @this: org.mozilla.universalchardet.prober.SingleByteCharsetProber;

        $r1 := @parameter0: org.mozilla.universalchardet.prober.sequence.SequenceModel;

        $z0 := @parameter1: boolean;

        $r2 := @parameter2: org.mozilla.universalchardet.prober.CharsetProber;

        specialinvoke r0.<org.mozilla.universalchardet.prober.CharsetProber: void <init>()>();

        r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: org.mozilla.universalchardet.prober.sequence.SequenceModel model> = $r1;

        r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: boolean reversed> = $z0;

        r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: org.mozilla.universalchardet.prober.CharsetProber nameProber> = $r2;

        $r3 = newarray (int)[4];

        r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: int[] seqCounters> = $r3;

        virtualinvoke r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: void reset()>();

        return;
    }

    public java.lang.String getCharSetName()
    {
        org.mozilla.universalchardet.prober.SingleByteCharsetProber r0;
        org.mozilla.universalchardet.prober.CharsetProber $r1;
        org.mozilla.universalchardet.prober.sequence.SequenceModel $r2;
        java.lang.String $r3;

        r0 := @this: org.mozilla.universalchardet.prober.SingleByteCharsetProber;

        $r1 = r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: org.mozilla.universalchardet.prober.CharsetProber nameProber>;

        if $r1 != null goto label1;

        $r2 = r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: org.mozilla.universalchardet.prober.sequence.SequenceModel model>;

        $r3 = virtualinvoke $r2.<org.mozilla.universalchardet.prober.sequence.SequenceModel: java.lang.String getCharsetName()>();

        return $r3;

     label1:
        $r1 = r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: org.mozilla.universalchardet.prober.CharsetProber nameProber>;

        $r3 = virtualinvoke $r1.<org.mozilla.universalchardet.prober.CharsetProber: java.lang.String getCharSetName()>();

        return $r3;
    }

    public float getConfidence()
    {
        org.mozilla.universalchardet.prober.SingleByteCharsetProber r0;
        org.mozilla.universalchardet.prober.sequence.SequenceModel $r2;
        byte $b1;
        int[] $r1;
        int $i0;
        float $f0, $f1;

        r0 := @this: org.mozilla.universalchardet.prober.SingleByteCharsetProber;

        $i0 = r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: int totalSeqs>;

        if $i0 <= 0 goto label1;

        $r1 = r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: int[] seqCounters>;

        $i0 = $r1[3];

        $f0 = (float) $i0;

        $f0 = $f0 * 1.0F;

        $i0 = r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: int totalSeqs>;

        $f1 = (float) $i0;

        $f1 = $f0 / $f1;

        $r2 = r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: org.mozilla.universalchardet.prober.sequence.SequenceModel model>;

        $f0 = virtualinvoke $r2.<org.mozilla.universalchardet.prober.sequence.SequenceModel: float getTypicalPositiveRatio()>();

        $f0 = $f1 / $f0;

        $i0 = r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: int freqChar>;

        $f1 = (float) $i0;

        $f0 = $f0 * $f1;

        $i0 = r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: int totalChar>;

        $f1 = (float) $i0;

        $f0 = $f0 / $f1;

        $b1 = $f0 cmpl 1.0F;

        $i0 = (int) $b1;

        if $i0 < 0 goto label2;

        return 0.99F;

     label1:
        return 0.01F;

     label2:
        return $f0;
    }

    public org.mozilla.universalchardet.prober.CharsetProber$ProbingState getState()
    {
        org.mozilla.universalchardet.prober.SingleByteCharsetProber r0;
        org.mozilla.universalchardet.prober.CharsetProber$ProbingState r1;

        r0 := @this: org.mozilla.universalchardet.prober.SingleByteCharsetProber;

        r1 = r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state>;

        return r1;
    }

    public org.mozilla.universalchardet.prober.CharsetProber$ProbingState handleData(byte[], int, int)
    {
        byte[] $r1;
        org.mozilla.universalchardet.prober.CharsetProber$ProbingState $r4, $r5;
        org.mozilla.universalchardet.prober.SingleByteCharsetProber r0;
        org.mozilla.universalchardet.prober.sequence.SequenceModel $r2;
        short $s1, $s4;
        byte $b3;
        int[] $r3;
        int $i0, $i2, $i5, $i6;
        float $f0;
        boolean $z0;

        r0 := @this: org.mozilla.universalchardet.prober.SingleByteCharsetProber;

        $r1 := @parameter0: byte[];

        $i2 := @parameter1: int;

        $i0 := @parameter2: int;

        $i0 = 0 + $i0;

     label1:
        if $i2 >= $i0 goto label5;

        $r2 = r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: org.mozilla.universalchardet.prober.sequence.SequenceModel model>;

        $b3 = $r1[$i2];

        $s4 = virtualinvoke $r2.<org.mozilla.universalchardet.prober.sequence.SequenceModel: short getOrder(byte)>($b3);

        $i5 = (int) $s4;

        if $i5 >= 250 goto label2;

        $i5 = r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: int totalChar>;

        $i5 = $i5 + 1;

        r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: int totalChar> = $i5;

     label2:
        $i5 = (int) $s4;

        if $i5 >= 64 goto label3;

        $i5 = r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: int freqChar>;

        $i5 = $i5 + 1;

        r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: int freqChar> = $i5;

        $s1 = r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: short lastOrder>;

        $i5 = (int) $s1;

        if $i5 >= 64 goto label3;

        $i5 = r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: int totalSeqs>;

        $i5 = $i5 + 1;

        r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: int totalSeqs> = $i5;

        $z0 = r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: boolean reversed>;

        if $z0 != 0 goto label4;

        $r3 = r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: int[] seqCounters>;

        $r2 = r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: org.mozilla.universalchardet.prober.sequence.SequenceModel model>;

        $s1 = r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: short lastOrder>;

        $i5 = (int) $s1;

        $i5 = $i5 * 64;

        $i6 = (int) $s4;

        $i5 = $i5 + $i6;

        $b3 = virtualinvoke $r2.<org.mozilla.universalchardet.prober.sequence.SequenceModel: byte getPrecedence(int)>($i5);

        $i5 = (int) $b3;

        $i5 = $r3[$i5];

        $i5 = $i5 + 1;

        $i6 = (int) $b3;

        $r3[$i6] = $i5;

     label3:
        r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: short lastOrder> = $s4;

        $i2 = $i2 + 1;

        goto label1;

     label4:
        $r3 = r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: int[] seqCounters>;

        $r2 = r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: org.mozilla.universalchardet.prober.sequence.SequenceModel model>;

        $i5 = (int) $s4;

        $i5 = $i5 * 64;

        $s1 = r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: short lastOrder>;

        $i6 = (int) $s1;

        $i5 = $i5 + $i6;

        $b3 = virtualinvoke $r2.<org.mozilla.universalchardet.prober.sequence.SequenceModel: byte getPrecedence(int)>($i5);

        $i5 = (int) $b3;

        $i5 = $r3[$i5];

        $i5 = $i5 + 1;

        $i6 = (int) $b3;

        $r3[$i6] = $i5;

        goto label3;

     label5:
        $r4 = r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state>;

        $r5 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState DETECTING>;

        if $r4 != $r5 goto label6;

        $i2 = r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: int totalSeqs>;

        if $i2 <= 1024 goto label6;

        $f0 = virtualinvoke r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: float getConfidence()>();

        $b3 = $f0 cmpl 0.95F;

        $i2 = (int) $b3;

        if $i2 <= 0 goto label7;

        $r4 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState FOUND_IT>;

        r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state> = $r4;

     label6:
        $r4 = r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state>;

        return $r4;

     label7:
        $b3 = $f0 cmpg 0.05F;

        $i2 = (int) $b3;

        if $i2 >= 0 goto label6;

        $r4 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState NOT_ME>;

        r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state> = $r4;

        goto label6;
    }

    boolean keepEnglishLetters()
    {
        org.mozilla.universalchardet.prober.SingleByteCharsetProber r0;
        org.mozilla.universalchardet.prober.sequence.SequenceModel $r1;
        boolean $z0;

        r0 := @this: org.mozilla.universalchardet.prober.SingleByteCharsetProber;

        $r1 = r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: org.mozilla.universalchardet.prober.sequence.SequenceModel model>;

        $z0 = virtualinvoke $r1.<org.mozilla.universalchardet.prober.sequence.SequenceModel: boolean getKeepEnglishLetter()>();

        return $z0;
    }

    public void reset()
    {
        org.mozilla.universalchardet.prober.SingleByteCharsetProber r0;
        org.mozilla.universalchardet.prober.CharsetProber$ProbingState $r1;
        int[] $r2;
        int $i0;

        r0 := @this: org.mozilla.universalchardet.prober.SingleByteCharsetProber;

        $r1 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState DETECTING>;

        r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state> = $r1;

        r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: short lastOrder> = 255;

        $i0 = 0;

     label1:
        if $i0 >= 4 goto label2;

        $r2 = r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: int[] seqCounters>;

        $r2[$i0] = 0;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: int totalSeqs> = 0;

        r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: int totalChar> = 0;

        r0.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: int freqChar> = 0;

        return;
    }

    public void setOption()
    {
        org.mozilla.universalchardet.prober.SingleByteCharsetProber r0;

        r0 := @this: org.mozilla.universalchardet.prober.SingleByteCharsetProber;

        return;
    }

    public static void <clinit>()
    {
        <org.mozilla.universalchardet.prober.SingleByteCharsetProber: int SYMBOL_CAT_ORDER> = 250;

        <org.mozilla.universalchardet.prober.SingleByteCharsetProber: int SB_ENOUGH_REL_THRESHOLD> = 1024;

        <org.mozilla.universalchardet.prober.SingleByteCharsetProber: int SAMPLE_SIZE> = 64;

        <org.mozilla.universalchardet.prober.SingleByteCharsetProber: float POSITIVE_SHORTCUT_THRESHOLD> = 0.95F;

        <org.mozilla.universalchardet.prober.SingleByteCharsetProber: int POSITIVE_CAT> = 3;

        <org.mozilla.universalchardet.prober.SingleByteCharsetProber: int NUMBER_OF_SEQ_CAT> = 4;

        <org.mozilla.universalchardet.prober.SingleByteCharsetProber: float NEGATIVE_SHORTCUT_THRESHOLD> = 0.05F;

        <org.mozilla.universalchardet.prober.SingleByteCharsetProber: int NEGATIVE_CAT> = 0;

        return;
    }
}
