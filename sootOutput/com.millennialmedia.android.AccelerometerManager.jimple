public class com.millennialmedia.android.AccelerometerManager extends java.lang.Object
{
    private static int interval;
    private static com.millennialmedia.android.AccelerometerListener listener;
    private static boolean running;
    private static android.hardware.Sensor sensor;
    private static android.hardware.SensorEventListener sensorEventListener;
    private static android.hardware.SensorManager sensorManager;
    private static java.lang.Boolean supported;
    private static float threshold;
    protected android.app.Activity amContext;

    static void <clinit>()
    {
        com.millennialmedia.android.AccelerometerManager$1 $r0;

        <com.millennialmedia.android.AccelerometerManager: float threshold> = 0.2F;

        <com.millennialmedia.android.AccelerometerManager: int interval> = 1000;

        <com.millennialmedia.android.AccelerometerManager: boolean running> = 0;

        $r0 = new com.millennialmedia.android.AccelerometerManager$1;

        specialinvoke $r0.<com.millennialmedia.android.AccelerometerManager$1: void <init>()>();

        <com.millennialmedia.android.AccelerometerManager: android.hardware.SensorEventListener sensorEventListener> = $r0;

        return;
    }

    public void <init>()
    {
        com.millennialmedia.android.AccelerometerManager r0;

        r0 := @this: com.millennialmedia.android.AccelerometerManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static com.millennialmedia.android.AccelerometerListener access$0()
    {
        com.millennialmedia.android.AccelerometerListener r0;

        r0 = <com.millennialmedia.android.AccelerometerManager: com.millennialmedia.android.AccelerometerListener listener>;

        return r0;
    }

    static float access$1()
    {
        float f0;

        f0 = <com.millennialmedia.android.AccelerometerManager: float threshold>;

        return f0;
    }

    static int access$2()
    {
        int i0;

        i0 = <com.millennialmedia.android.AccelerometerManager: int interval>;

        return i0;
    }

    public static void configure(int, int)
    {
        int $i0, $i1;
        float $f0;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $f0 = (float) $i0;

        <com.millennialmedia.android.AccelerometerManager: float threshold> = $f0;

        <com.millennialmedia.android.AccelerometerManager: int interval> = $i1;

        return;
    }

    public static boolean isListening()
    {
        boolean z0;

        z0 = <com.millennialmedia.android.AccelerometerManager: boolean running>;

        return z0;
    }

    public static boolean isSupported()
    {
        android.content.Context $r1;
        android.hardware.SensorManager r3;
        java.util.List $r4;
        int $i0;
        java.lang.Boolean $r0;
        java.lang.Object $r2;
        boolean $z0;

        $r0 = <com.millennialmedia.android.AccelerometerManager: java.lang.Boolean supported>;

        if $r0 != null goto label2;

        $r1 = staticinvoke <com.millennialmedia.android.MMAdViewOverlayActivity: android.content.Context getContext()>();

        if $r1 == null goto label4;

        $r1 = staticinvoke <com.millennialmedia.android.MMAdViewOverlayActivity: android.content.Context getContext()>();

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("sensor");

        r3 = (android.hardware.SensorManager) $r2;

        <com.millennialmedia.android.AccelerometerManager: android.hardware.SensorManager sensorManager> = r3;

        r3 = <com.millennialmedia.android.AccelerometerManager: android.hardware.SensorManager sensorManager>;

        $r4 = virtualinvoke r3.<android.hardware.SensorManager: java.util.List getSensorList(int)>(1);

        $r0 = new java.lang.Boolean;

        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        if $i0 <= 0 goto label3;

        $z0 = 1;

     label1:
        specialinvoke $r0.<java.lang.Boolean: void <init>(boolean)>($z0);

        <com.millennialmedia.android.AccelerometerManager: java.lang.Boolean supported> = $r0;

     label2:
        $r0 = <com.millennialmedia.android.AccelerometerManager: java.lang.Boolean supported>;

        $z0 = virtualinvoke $r0.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;

     label3:
        $z0 = 0;

        goto label1;

     label4:
        $r0 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        <com.millennialmedia.android.AccelerometerManager: java.lang.Boolean supported> = $r0;

        goto label2;
    }

    public static void startListening(com.millennialmedia.android.AccelerometerListener)
    {
        android.content.Context $r2;
        android.hardware.SensorManager $r4;
        com.millennialmedia.android.AccelerometerListener $r0;
        java.util.List $r5;
        int $i0;
        java.lang.Object $r3;
        android.hardware.SensorEventListener $r6;
        android.hardware.Sensor $r1;
        boolean $z0;

        $r0 := @parameter0: com.millennialmedia.android.AccelerometerListener;

        $r2 = staticinvoke <com.millennialmedia.android.MMAdViewOverlayActivity: android.content.Context getContext()>();

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("sensor");

        $r4 = (android.hardware.SensorManager) $r3;

        <com.millennialmedia.android.AccelerometerManager: android.hardware.SensorManager sensorManager> = $r4;

        $r4 = <com.millennialmedia.android.AccelerometerManager: android.hardware.SensorManager sensorManager>;

        $r5 = virtualinvoke $r4.<android.hardware.SensorManager: java.util.List getSensorList(int)>(1);

        $i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        if $i0 <= 0 goto label1;

        $r3 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(0);

        $r1 = (android.hardware.Sensor) $r3;

        <com.millennialmedia.android.AccelerometerManager: android.hardware.Sensor sensor> = $r1;

        $r4 = <com.millennialmedia.android.AccelerometerManager: android.hardware.SensorManager sensorManager>;

        $r6 = <com.millennialmedia.android.AccelerometerManager: android.hardware.SensorEventListener sensorEventListener>;

        $r1 = <com.millennialmedia.android.AccelerometerManager: android.hardware.Sensor sensor>;

        $z0 = virtualinvoke $r4.<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>($r6, $r1, 1);

        <com.millennialmedia.android.AccelerometerManager: boolean running> = $z0;

        <com.millennialmedia.android.AccelerometerManager: com.millennialmedia.android.AccelerometerListener listener> = $r0;

     label1:
        return;
    }

    public static void startListening(com.millennialmedia.android.AccelerometerListener, int, int)
    {
        int $i0, $i1;
        com.millennialmedia.android.AccelerometerListener $r0;

        $r0 := @parameter0: com.millennialmedia.android.AccelerometerListener;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        staticinvoke <com.millennialmedia.android.AccelerometerManager: void configure(int,int)>($i0, $i1);

        staticinvoke <com.millennialmedia.android.AccelerometerManager: void startListening(com.millennialmedia.android.AccelerometerListener)>($r0);

        return;
    }

    public static void stopListening()
    {
        android.hardware.SensorEventListener $r0;
        android.hardware.SensorManager $r1;
        java.lang.Exception $r2;

        <com.millennialmedia.android.AccelerometerManager: boolean running> = 0;

        $r1 = <com.millennialmedia.android.AccelerometerManager: android.hardware.SensorManager sensorManager>;

        if $r1 == null goto label4;

        $r0 = <com.millennialmedia.android.AccelerometerManager: android.hardware.SensorEventListener sensorEventListener>;

        if $r0 == null goto label4;

        $r1 = <com.millennialmedia.android.AccelerometerManager: android.hardware.SensorManager sensorManager>;

        $r0 = <com.millennialmedia.android.AccelerometerManager: android.hardware.SensorEventListener sensorEventListener>;

     label1:
        virtualinvoke $r1.<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener)>($r0);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }
}
