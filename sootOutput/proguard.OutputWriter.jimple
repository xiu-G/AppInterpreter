public class proguard.OutputWriter extends java.lang.Object
{
    private final proguard.Configuration configuration;

    public void <init>(proguard.Configuration)
    {
        proguard.Configuration $r1;
        proguard.OutputWriter r0;

        r0 := @this: proguard.OutputWriter;

        $r1 := @parameter0: proguard.Configuration;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<proguard.OutputWriter: proguard.Configuration configuration> = $r1;

        return;
    }

    private static java.util.Map createPackagePrefixMap(proguard.classfile.ClassPool)
    {
        java.util.Iterator $r2;
        java.util.HashMap $r1;
        proguard.classfile.ClassPool $r0;
        proguard.classfile.Clazz $r7;
        java.lang.Object $r3;
        java.lang.String $r4, $r5, $r6;
        boolean $z0;

        $r0 := @parameter0: proguard.classfile.ClassPool;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        $r2 = virtualinvoke $r0.<proguard.classfile.ClassPool: java.util.Iterator classNames()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.lang.String) $r3;

        $r5 = staticinvoke <proguard.classfile.util.ClassUtil: java.lang.String internalPackagePrefix(java.lang.String)>($r4);

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        $r6 = (java.lang.String) $r3;

        if $r6 == null goto label2;

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label1;

     label2:
        $r7 = virtualinvoke $r0.<proguard.classfile.ClassPool: proguard.classfile.Clazz getClass(java.lang.String)>($r4);

        $r4 = interfaceinvoke $r7.<proguard.classfile.Clazz: java.lang.String getName()>();

        $r4 = staticinvoke <proguard.classfile.util.ClassUtil: java.lang.String internalPackagePrefix(java.lang.String)>($r4);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r4);

        goto label1;

     label3:
        return $r1;
    }

    private void writeOutput(proguard.classfile.ClassPool, proguard.ClassPath, int, int, int) throws java.io.IOException
    {
        proguard.io.ClassRewriter $r5, $r22;
        proguard.io.DataEntryRenamer $r14, $r29;
        proguard.classfile.ClassPool $r1;
        proguard.io.DirectoryFilter $r16, $r30;
        proguard.io.ManifestRewriter $r11, $r24;
        java.util.Map $r12;
        proguard.OutputWriter r0;
        proguard.io.DataEntryRewriter $r3, $r25;
        proguard.io.DataEntryObfuscator $r13, $r28;
        proguard.io.DataEntryWriter $r4;
        java.util.List $r8;
        proguard.io.DataEntryCopier $r6, $r23;
        proguard.Configuration $r7;
        proguard.InputReader $r17, $r32;
        proguard.io.DataEntryReader $r9;
        java.lang.Throwable $r18;
        proguard.io.NameFilter $r10, $r26, $r27;
        proguard.ClassPath $r2;
        java.lang.StringBuffer $r19, $r33;
        proguard.ClassPathEntry $r20;
        int $i0, $i1, $i2;
        java.lang.String $r21;
        proguard.io.ClassFilter $r15, $r31;
        java.io.IOException $r34, $r35;

        r0 := @this: proguard.OutputWriter;

        $r1 := @parameter0: proguard.classfile.ClassPool;

        $r2 := @parameter1: proguard.ClassPath;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

     label01:
        $r4 = staticinvoke <proguard.DataEntryWriterFactory: proguard.io.DataEntryWriter createDataEntryWriter(proguard.ClassPath,int,int)>($r2, $i1, $i2);

     label02:
        $r22 = new proguard.io.ClassRewriter;

        $r5 = $r22;

     label03:
        specialinvoke $r22.<proguard.io.ClassRewriter: void <init>(proguard.classfile.ClassPool,proguard.io.DataEntryWriter)>($r1, $r4);

     label04:
        $r23 = new proguard.io.DataEntryCopier;

        $r6 = $r23;

     label05:
        specialinvoke $r23.<proguard.io.DataEntryCopier: void <init>(proguard.io.DataEntryWriter)>($r4);

     label06:
        $r7 = r0.<proguard.OutputWriter: proguard.Configuration configuration>;

        $r8 = $r7.<proguard.Configuration: java.util.List adaptResourceFileContents>;

        if $r8 == null goto label27;

        $r27 = new proguard.io.NameFilter;

        $r9 = $r27;

        $r7 = r0.<proguard.OutputWriter: proguard.Configuration configuration>;

        $r8 = $r7.<proguard.Configuration: java.util.List adaptResourceFileContents>;

        $r26 = new proguard.io.NameFilter;

        $r10 = $r26;

        $r24 = new proguard.io.ManifestRewriter;

        $r11 = $r24;

     label07:
        specialinvoke $r24.<proguard.io.ManifestRewriter: void <init>(proguard.classfile.ClassPool,proguard.io.DataEntryWriter)>($r1, $r4);

     label08:
        $r25 = new proguard.io.DataEntryRewriter;

        $r3 = $r25;

     label09:
        specialinvoke $r25.<proguard.io.DataEntryRewriter: void <init>(proguard.classfile.ClassPool,proguard.io.DataEntryWriter)>($r1, $r4);

        specialinvoke $r26.<proguard.io.NameFilter: void <init>(java.lang.String,proguard.io.DataEntryReader,proguard.io.DataEntryReader)>("META-INF/*", $r11, $r3);

        specialinvoke $r27.<proguard.io.NameFilter: void <init>(java.util.List,proguard.io.DataEntryReader,proguard.io.DataEntryReader)>($r8, $r10, $r6);

     label10:
        $r7 = r0.<proguard.OutputWriter: proguard.Configuration configuration>;

        $r8 = $r7.<proguard.Configuration: java.util.List adaptResourceFileNames>;

        if $r8 == null goto label15;

     label11:
        $r12 = staticinvoke <proguard.OutputWriter: java.util.Map createPackagePrefixMap(proguard.classfile.ClassPool)>($r1);

     label12:
        $r26 = new proguard.io.NameFilter;

        $r7 = r0.<proguard.OutputWriter: proguard.Configuration configuration>;

        $r8 = $r7.<proguard.Configuration: java.util.List adaptResourceFileNames>;

        $r28 = new proguard.io.DataEntryObfuscator;

        $r13 = $r28;

     label13:
        specialinvoke $r28.<proguard.io.DataEntryObfuscator: void <init>(proguard.classfile.ClassPool,java.util.Map,proguard.io.DataEntryReader)>($r1, $r12, $r9);

        specialinvoke $r26.<proguard.io.NameFilter: void <init>(java.util.List,proguard.io.DataEntryReader,proguard.io.DataEntryReader)>($r8, $r13, $r9);

     label14:
        $r9 = $r26;

     label15:
        $r7 = r0.<proguard.OutputWriter: proguard.Configuration configuration>;

        $r8 = $r7.<proguard.Configuration: java.util.List keepDirectories>;

        if $r8 == null goto label26;

     label16:
        $r12 = staticinvoke <proguard.OutputWriter: java.util.Map createPackagePrefixMap(proguard.classfile.ClassPool)>($r1);

     label17:
        $r26 = new proguard.io.NameFilter;

        $r7 = r0.<proguard.OutputWriter: proguard.Configuration configuration>;

        $r8 = $r7.<proguard.Configuration: java.util.List keepDirectories>;

        $r29 = new proguard.io.DataEntryRenamer;

        $r14 = $r29;

     label18:
        specialinvoke $r29.<proguard.io.DataEntryRenamer: void <init>(java.util.Map,proguard.io.DataEntryReader,proguard.io.DataEntryReader)>($r12, $r6, $r6);

        specialinvoke $r26.<proguard.io.NameFilter: void <init>(java.util.List,proguard.io.DataEntryReader)>($r8, $r14);

     label19:
        $r10 = $r26;

     label20:
        $r31 = new proguard.io.ClassFilter;

        $r15 = $r31;

        $r30 = new proguard.io.DirectoryFilter;

        $r16 = $r30;

     label21:
        specialinvoke $r30.<proguard.io.DirectoryFilter: void <init>(proguard.io.DataEntryReader,proguard.io.DataEntryReader)>($r10, $r9);

        specialinvoke $r31.<proguard.io.ClassFilter: void <init>(proguard.io.DataEntryReader,proguard.io.DataEntryReader)>($r5, $r16);

     label22:
        $r32 = new proguard.InputReader;

        $r17 = $r32;

        $r7 = r0.<proguard.OutputWriter: proguard.Configuration configuration>;

     label23:
        specialinvoke $r32.<proguard.InputReader: void <init>(proguard.Configuration)>($r7);

        virtualinvoke $r17.<proguard.InputReader: void readInput(java.lang.String,proguard.ClassPath,int,int,proguard.io.DataEntryReader)>("  Copying resources from program ", $r2, $i0, $i1, $r15);

        interfaceinvoke $r4.<proguard.io.DataEntryWriter: void close()>();

     label24:
        return;

     label25:
        $r18 := @caughtexception;

        $r34 = new java.io.IOException;

        $r33 = new java.lang.StringBuffer;

        specialinvoke $r33.<java.lang.StringBuffer: void <init>()>();

        $r19 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Can\'t write [");

        $r20 = virtualinvoke $r2.<proguard.ClassPath: proguard.ClassPathEntry get(int)>($i1);

        $r21 = virtualinvoke $r20.<proguard.ClassPathEntry: java.lang.String getName()>();

        $r19 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r21);

        $r19 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] (");

        $r35 = (java.io.IOException) $r18;

        $r21 = virtualinvoke $r35.<java.io.IOException: java.lang.String getMessage()>();

        $r19 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r21);

        $r19 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r21 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r34.<java.io.IOException: void <init>(java.lang.String)>($r21);

        throw $r34;

     label26:
        $r10 = null;

        goto label20;

     label27:
        $r9 = $r6;

        goto label10;

        catch java.io.IOException from label01 to label02 with label25;
        catch java.io.IOException from label03 to label04 with label25;
        catch java.io.IOException from label05 to label06 with label25;
        catch java.io.IOException from label07 to label08 with label25;
        catch java.io.IOException from label09 to label10 with label25;
        catch java.io.IOException from label11 to label12 with label25;
        catch java.io.IOException from label13 to label14 with label25;
        catch java.io.IOException from label16 to label17 with label25;
        catch java.io.IOException from label18 to label19 with label25;
        catch java.io.IOException from label21 to label22 with label25;
        catch java.io.IOException from label23 to label24 with label25;
    }

    public void execute(proguard.classfile.ClassPool) throws java.io.IOException
    {
        proguard.ClassPath $r3;
        proguard.classfile.ClassPool $r1;
        proguard.ClassPathEntry $r4, $r9;
        java.lang.StringBuffer $r6;
        int $i0, $i1, $i2, $i3, $i4;
        proguard.OutputWriter r0;
        java.lang.String $r7;
        boolean $z0;
        java.io.IOException $r5;
        java.io.File $r10, $r11;
        java.util.List $r8;
        proguard.Configuration $r2;

        r0 := @this: proguard.OutputWriter;

        $r1 := @parameter0: proguard.classfile.ClassPool;

        $i0 = 0;

        $r2 = r0.<proguard.OutputWriter: proguard.Configuration configuration>;

        $r3 = $r2.<proguard.Configuration: proguard.ClassPath programJars>;

        $r4 = virtualinvoke $r3.<proguard.ClassPath: proguard.ClassPathEntry get(int)>(0);

        $z0 = virtualinvoke $r4.<proguard.ClassPathEntry: boolean isOutput()>();

        if $z0 == 0 goto label01;

        $r5 = new java.io.IOException;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The output jar [");

        $r7 = virtualinvoke $r4.<proguard.ClassPathEntry: java.lang.String getName()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] must be specified after an input jar, or it will be empty.");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r7);

        throw $r5;

     label01:
        $i1 = 0;

     label02:
        $i2 = virtualinvoke $r3.<proguard.ClassPath: int size()>();

        $i2 = $i2 - 1;

        if $i1 >= $i2 goto label04;

        $r4 = virtualinvoke $r3.<proguard.ClassPath: proguard.ClassPathEntry get(int)>($i1);

        $z0 = virtualinvoke $r4.<proguard.ClassPathEntry: boolean isOutput()>();

        if $z0 == 0 goto label03;

        $r8 = virtualinvoke $r4.<proguard.ClassPathEntry: java.util.List getFilter()>();

        if $r8 != null goto label03;

        $r8 = virtualinvoke $r4.<proguard.ClassPathEntry: java.util.List getJarFilter()>();

        if $r8 != null goto label03;

        $r8 = virtualinvoke $r4.<proguard.ClassPathEntry: java.util.List getWarFilter()>();

        if $r8 != null goto label03;

        $r8 = virtualinvoke $r4.<proguard.ClassPathEntry: java.util.List getEarFilter()>();

        if $r8 != null goto label03;

        $r8 = virtualinvoke $r4.<proguard.ClassPathEntry: java.util.List getZipFilter()>();

        if $r8 != null goto label03;

        $i2 = $i1 + 1;

        $r9 = virtualinvoke $r3.<proguard.ClassPath: proguard.ClassPathEntry get(int)>($i2);

        $z0 = virtualinvoke $r9.<proguard.ClassPathEntry: boolean isOutput()>();

        if $z0 == 0 goto label03;

        $r5 = new java.io.IOException;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The output jar [");

        $r7 = virtualinvoke $r4.<proguard.ClassPathEntry: java.lang.String getName()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] must have a filter, or all subsequent output jars will be empty.");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r7);

        throw $r5;

     label03:
        $i1 = $i1 + 1;

        goto label02;

     label04:
        $i1 = 0;

     label05:
        $i2 = virtualinvoke $r3.<proguard.ClassPath: int size()>();

        $i2 = $i2 - 1;

        if $i1 >= $i2 goto label09;

        $r4 = virtualinvoke $r3.<proguard.ClassPath: proguard.ClassPathEntry get(int)>($i1);

        $z0 = virtualinvoke $r4.<proguard.ClassPathEntry: boolean isOutput()>();

        if $z0 == 0 goto label08;

        $i2 = 0;

     label06:
        $i3 = virtualinvoke $r3.<proguard.ClassPath: int size()>();

        if $i2 >= $i3 goto label08;

        $r9 = virtualinvoke $r3.<proguard.ClassPath: proguard.ClassPathEntry get(int)>($i2);

        $z0 = virtualinvoke $r9.<proguard.ClassPathEntry: boolean isOutput()>();

        if $z0 != 0 goto label07;

        $r10 = virtualinvoke $r4.<proguard.ClassPathEntry: java.io.File getFile()>();

        $r11 = virtualinvoke $r9.<proguard.ClassPathEntry: java.io.File getFile()>();

        $z0 = virtualinvoke $r10.<java.io.File: boolean equals(java.lang.Object)>($r11);

        if $z0 == 0 goto label07;

        $r5 = new java.io.IOException;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The output jar [");

        $r7 = virtualinvoke $r4.<proguard.ClassPathEntry: java.lang.String getName()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] must be different from all input jars.");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r7);

        throw $r5;

     label07:
        $i2 = $i2 + 1;

        goto label06;

     label08:
        $i1 = $i1 + 1;

        goto label05;

     label09:
        $i1 = 0;

        $i2 = 0;

     label10:
        $i3 = virtualinvoke $r3.<proguard.ClassPath: int size()>();

        if $i0 >= $i3 goto label14;

        $r4 = virtualinvoke $r3.<proguard.ClassPath: proguard.ClassPathEntry get(int)>($i0);

        $z0 = virtualinvoke $r4.<proguard.ClassPathEntry: boolean isOutput()>();

        if $z0 != 0 goto label12;

        $i1 = $i0;

     label11:
        $i0 = $i0 + 1;

        goto label10;

     label12:
        $i3 = $i0 + 1;

        $i4 = virtualinvoke $r3.<proguard.ClassPath: int size()>();

        if $i3 == $i4 goto label13;

        $r4 = virtualinvoke $r3.<proguard.ClassPath: proguard.ClassPathEntry get(int)>($i3);

        $z0 = virtualinvoke $r4.<proguard.ClassPathEntry: boolean isOutput()>();

        if $z0 != 0 goto label15;

     label13:
        $i4 = $i1 + 1;

        specialinvoke r0.<proguard.OutputWriter: void writeOutput(proguard.classfile.ClassPool,proguard.ClassPath,int,int,int)>($r1, $r3, $i2, $i4, $i3);

        $i2 = $i3;

        goto label11;

     label14:
        return;

     label15:
        goto label11;
    }
}
