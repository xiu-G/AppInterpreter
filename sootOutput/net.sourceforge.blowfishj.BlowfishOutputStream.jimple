public class net.sourceforge.blowfishj.BlowfishOutputStream extends java.io.OutputStream
{
    net.sourceforge.blowfishj.BlowfishCBC m_bfc;
    byte[] m_bufIn;
    byte[] m_bufOut;
    int m_nBytesInBuf;
    java.io.OutputStream m_os;

    public void <init>(java.lang.String, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream $r2;
        byte[] r3;
        char $c2;
        net.sourceforge.blowfishj.BlowfishOutputStream r0;
        byte $b3;
        int $i0, i1;
        java.lang.String $r1;

        r0 := @this: net.sourceforge.blowfishj.BlowfishOutputStream;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.io.OutputStream;

        specialinvoke r0.<java.io.OutputStream: void <init>()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        r3 = newarray (byte)[$i0];

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i1);

        $c2 = $c2 & 255;

        $b3 = (byte) $c2;

        r3[i1] = $b3;

        i1 = i1 + 1;

        goto label1;

     label2:
        virtualinvoke r0.<net.sourceforge.blowfishj.BlowfishOutputStream: void init(byte[],int,int,java.io.OutputStream)>(r3, 0, $i0, $r2);

        return;
    }

    public void <init>(byte[], int, int, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream $r2;
        byte[] $r1;
        int $i0, $i1;
        net.sourceforge.blowfishj.BlowfishOutputStream r0;

        r0 := @this: net.sourceforge.blowfishj.BlowfishOutputStream;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: java.io.OutputStream;

        specialinvoke r0.<java.io.OutputStream: void <init>()>();

        virtualinvoke r0.<net.sourceforge.blowfishj.BlowfishOutputStream: void init(byte[],int,int,java.io.OutputStream)>($r1, $i0, $i1, $r2);

        return;
    }

    public void close() throws java.io.IOException
    {
        java.io.OutputStream $r5;
        byte[] $r1, $r3, $r4;
        net.sourceforge.blowfishj.BlowfishOutputStream r0;
        byte b1;
        net.sourceforge.blowfishj.BlowfishCBC $r2;
        int $i0, $i2;

        r0 := @this: net.sourceforge.blowfishj.BlowfishOutputStream;

        $r1 = r0.<net.sourceforge.blowfishj.BlowfishOutputStream: byte[] m_bufIn>;

        $i0 = lengthof $r1;

        $i2 = r0.<net.sourceforge.blowfishj.BlowfishOutputStream: int m_nBytesInBuf>;

        $i0 = $i0 - $i2;

        b1 = (byte) $i0;

     label1:
        $i0 = r0.<net.sourceforge.blowfishj.BlowfishOutputStream: int m_nBytesInBuf>;

        $r1 = r0.<net.sourceforge.blowfishj.BlowfishOutputStream: byte[] m_bufIn>;

        $i2 = lengthof $r1;

        if $i0 >= $i2 goto label2;

        $r1 = r0.<net.sourceforge.blowfishj.BlowfishOutputStream: byte[] m_bufIn>;

        $i0 = r0.<net.sourceforge.blowfishj.BlowfishOutputStream: int m_nBytesInBuf>;

        $r1[$i0] = b1;

        $i0 = r0.<net.sourceforge.blowfishj.BlowfishOutputStream: int m_nBytesInBuf>;

        $i0 = $i0 + 1;

        r0.<net.sourceforge.blowfishj.BlowfishOutputStream: int m_nBytesInBuf> = $i0;

        goto label1;

     label2:
        $r2 = r0.<net.sourceforge.blowfishj.BlowfishOutputStream: net.sourceforge.blowfishj.BlowfishCBC m_bfc>;

        $r1 = r0.<net.sourceforge.blowfishj.BlowfishOutputStream: byte[] m_bufIn>;

        $r3 = r0.<net.sourceforge.blowfishj.BlowfishOutputStream: byte[] m_bufOut>;

        $r4 = r0.<net.sourceforge.blowfishj.BlowfishOutputStream: byte[] m_bufIn>;

        $i0 = lengthof $r4;

        virtualinvoke $r2.<net.sourceforge.blowfishj.BlowfishCBC: int encrypt(byte[],int,byte[],int,int)>($r1, 0, $r3, 0, $i0);

        $r5 = r0.<net.sourceforge.blowfishj.BlowfishOutputStream: java.io.OutputStream m_os>;

        $r1 = r0.<net.sourceforge.blowfishj.BlowfishOutputStream: byte[] m_bufOut>;

        $r3 = r0.<net.sourceforge.blowfishj.BlowfishOutputStream: byte[] m_bufOut>;

        $i0 = lengthof $r3;

        virtualinvoke $r5.<java.io.OutputStream: void write(byte[],int,int)>($r1, 0, $i0);

        $r5 = r0.<net.sourceforge.blowfishj.BlowfishOutputStream: java.io.OutputStream m_os>;

        virtualinvoke $r5.<java.io.OutputStream: void close()>();

        $r2 = r0.<net.sourceforge.blowfishj.BlowfishOutputStream: net.sourceforge.blowfishj.BlowfishCBC m_bfc>;

        virtualinvoke $r2.<net.sourceforge.blowfishj.BlowfishCBC: void cleanUp()>();

        return;
    }

    public void flush() throws java.io.IOException
    {
        java.io.OutputStream $r1;
        net.sourceforge.blowfishj.BlowfishOutputStream r0;

        r0 := @this: net.sourceforge.blowfishj.BlowfishOutputStream;

        $r1 = r0.<net.sourceforge.blowfishj.BlowfishOutputStream: java.io.OutputStream m_os>;

        virtualinvoke $r1.<java.io.OutputStream: void flush()>();

        return;
    }

    void init(byte[], int, int, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream $r2;
        byte[] $r1, $r6;
        net.sourceforge.blowfishj.SHA1 r3;
        net.sourceforge.blowfishj.BlowfishOutputStream r0;
        java.security.SecureRandom r4;
        net.sourceforge.blowfishj.BlowfishCBC $r5;
        int $i0, $i1;

        r0 := @this: net.sourceforge.blowfishj.BlowfishOutputStream;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: java.io.OutputStream;

        r0.<net.sourceforge.blowfishj.BlowfishOutputStream: java.io.OutputStream m_os> = $r2;

        r0.<net.sourceforge.blowfishj.BlowfishOutputStream: int m_nBytesInBuf> = 0;

        r3 = new net.sourceforge.blowfishj.SHA1;

        specialinvoke r3.<net.sourceforge.blowfishj.SHA1: void <init>()>();

        virtualinvoke r3.<net.sourceforge.blowfishj.SHA1: void update(byte[],int,int)>($r1, $i0, $i1);

        virtualinvoke r3.<net.sourceforge.blowfishj.SHA1: void finalize()>();

        $r1 = virtualinvoke r3.<net.sourceforge.blowfishj.SHA1: byte[] getDigest()>();

        virtualinvoke r3.<net.sourceforge.blowfishj.SHA1: void clear()>();

        $r5 = new net.sourceforge.blowfishj.BlowfishCBC;

        $i0 = lengthof $r1;

        specialinvoke $r5.<net.sourceforge.blowfishj.BlowfishCBC: void <init>(byte[],int,int)>($r1, 0, $i0);

        r0.<net.sourceforge.blowfishj.BlowfishOutputStream: net.sourceforge.blowfishj.BlowfishCBC m_bfc> = $r5;

        $i0 = lengthof $r1;

        staticinvoke <java.util.Arrays: void fill(byte[],int,int,byte)>($r1, 0, $i0, 0);

        $r1 = newarray (byte)[8];

        r0.<net.sourceforge.blowfishj.BlowfishOutputStream: byte[] m_bufIn> = $r1;

        $r1 = newarray (byte)[8];

        r0.<net.sourceforge.blowfishj.BlowfishOutputStream: byte[] m_bufOut> = $r1;

        r4 = new java.security.SecureRandom;

        specialinvoke r4.<java.security.SecureRandom: void <init>()>();

        $r1 = r0.<net.sourceforge.blowfishj.BlowfishOutputStream: byte[] m_bufIn>;

        virtualinvoke r4.<java.security.SecureRandom: void nextBytes(byte[])>($r1);

        $r2 = r0.<net.sourceforge.blowfishj.BlowfishOutputStream: java.io.OutputStream m_os>;

        $r1 = r0.<net.sourceforge.blowfishj.BlowfishOutputStream: byte[] m_bufIn>;

        $r6 = r0.<net.sourceforge.blowfishj.BlowfishOutputStream: byte[] m_bufIn>;

        $i0 = lengthof $r6;

        virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>($r1, 0, $i0);

        $r5 = r0.<net.sourceforge.blowfishj.BlowfishOutputStream: net.sourceforge.blowfishj.BlowfishCBC m_bfc>;

        $r1 = r0.<net.sourceforge.blowfishj.BlowfishOutputStream: byte[] m_bufIn>;

        virtualinvoke $r5.<net.sourceforge.blowfishj.BlowfishCBC: void setCBCIV(byte[],int)>($r1, 0);

        return;
    }

    public void write(int) throws java.io.IOException
    {
        java.io.OutputStream $r5;
        byte[] $r1, $r3, $r4;
        net.sourceforge.blowfishj.BlowfishOutputStream r0;
        byte $b3;
        net.sourceforge.blowfishj.BlowfishCBC $r2;
        int $i0, $i1, $i2;

        r0 := @this: net.sourceforge.blowfishj.BlowfishOutputStream;

        $i0 := @parameter0: int;

        $i1 = r0.<net.sourceforge.blowfishj.BlowfishOutputStream: int m_nBytesInBuf>;

        $i1 = $i1 + 1;

        r0.<net.sourceforge.blowfishj.BlowfishOutputStream: int m_nBytesInBuf> = $i1;

        $i1 = r0.<net.sourceforge.blowfishj.BlowfishOutputStream: int m_nBytesInBuf>;

        $r1 = r0.<net.sourceforge.blowfishj.BlowfishOutputStream: byte[] m_bufIn>;

        $i2 = lengthof $r1;

        if $i1 >= $i2 goto label1;

        $r1 = r0.<net.sourceforge.blowfishj.BlowfishOutputStream: byte[] m_bufIn>;

        $i1 = r0.<net.sourceforge.blowfishj.BlowfishOutputStream: int m_nBytesInBuf>;

        $i1 = $i1 - 1;

        $b3 = (byte) $i0;

        $r1[$i1] = $b3;

        return;

     label1:
        $r1 = r0.<net.sourceforge.blowfishj.BlowfishOutputStream: byte[] m_bufIn>;

        $i1 = r0.<net.sourceforge.blowfishj.BlowfishOutputStream: int m_nBytesInBuf>;

        $i1 = $i1 - 1;

        $b3 = (byte) $i0;

        $r1[$i1] = $b3;

        r0.<net.sourceforge.blowfishj.BlowfishOutputStream: int m_nBytesInBuf> = 0;

        $r2 = r0.<net.sourceforge.blowfishj.BlowfishOutputStream: net.sourceforge.blowfishj.BlowfishCBC m_bfc>;

        $r1 = r0.<net.sourceforge.blowfishj.BlowfishOutputStream: byte[] m_bufIn>;

        $r3 = r0.<net.sourceforge.blowfishj.BlowfishOutputStream: byte[] m_bufOut>;

        $r4 = r0.<net.sourceforge.blowfishj.BlowfishOutputStream: byte[] m_bufIn>;

        $i0 = lengthof $r4;

        virtualinvoke $r2.<net.sourceforge.blowfishj.BlowfishCBC: int encrypt(byte[],int,byte[],int,int)>($r1, 0, $r3, 0, $i0);

        $r5 = r0.<net.sourceforge.blowfishj.BlowfishOutputStream: java.io.OutputStream m_os>;

        $r1 = r0.<net.sourceforge.blowfishj.BlowfishOutputStream: byte[] m_bufOut>;

        $r3 = r0.<net.sourceforge.blowfishj.BlowfishOutputStream: byte[] m_bufOut>;

        $i0 = lengthof $r3;

        virtualinvoke $r5.<java.io.OutputStream: void write(byte[],int,int)>($r1, 0, $i0);

        return;
    }
}
