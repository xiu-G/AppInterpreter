public final enum class com.exchange.interpolator.EasingType$Type extends java.lang.Enum
{
    private static final com.exchange.interpolator.EasingType$Type[] ENUM$VALUES;
    public static final enum com.exchange.interpolator.EasingType$Type IN;
    public static final enum com.exchange.interpolator.EasingType$Type INOUT;
    public static final enum com.exchange.interpolator.EasingType$Type OUT;

    static void <clinit>()
    {
        com.exchange.interpolator.EasingType$Type $r0;
        com.exchange.interpolator.EasingType$Type[] $r1;

        $r0 = new com.exchange.interpolator.EasingType$Type;

        specialinvoke $r0.<com.exchange.interpolator.EasingType$Type: void <init>(java.lang.String,int)>("IN", 0);

        <com.exchange.interpolator.EasingType$Type: com.exchange.interpolator.EasingType$Type IN> = $r0;

        $r0 = new com.exchange.interpolator.EasingType$Type;

        specialinvoke $r0.<com.exchange.interpolator.EasingType$Type: void <init>(java.lang.String,int)>("OUT", 1);

        <com.exchange.interpolator.EasingType$Type: com.exchange.interpolator.EasingType$Type OUT> = $r0;

        $r0 = new com.exchange.interpolator.EasingType$Type;

        specialinvoke $r0.<com.exchange.interpolator.EasingType$Type: void <init>(java.lang.String,int)>("INOUT", 2);

        <com.exchange.interpolator.EasingType$Type: com.exchange.interpolator.EasingType$Type INOUT> = $r0;

        $r1 = newarray (com.exchange.interpolator.EasingType$Type)[3];

        $r0 = <com.exchange.interpolator.EasingType$Type: com.exchange.interpolator.EasingType$Type IN>;

        $r1[0] = $r0;

        $r0 = <com.exchange.interpolator.EasingType$Type: com.exchange.interpolator.EasingType$Type OUT>;

        $r1[1] = $r0;

        $r0 = <com.exchange.interpolator.EasingType$Type: com.exchange.interpolator.EasingType$Type INOUT>;

        $r1[2] = $r0;

        <com.exchange.interpolator.EasingType$Type: com.exchange.interpolator.EasingType$Type[] ENUM$VALUES> = $r1;

        return;
    }

    private void <init>(java.lang.String, int)
    {
        int $i0;
        com.exchange.interpolator.EasingType$Type r0;
        java.lang.String $r1;

        r0 := @this: com.exchange.interpolator.EasingType$Type;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0);

        return;
    }

    public static com.exchange.interpolator.EasingType$Type valueOf(java.lang.String)
    {
        com.exchange.interpolator.EasingType$Type $r2;
        java.lang.String $r1;
        java.lang.Enum $r0;

        $r1 := @parameter0: java.lang.String;

        $r0 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lcom/exchange/interpolator/EasingType$Type;", $r1);

        $r2 = (com.exchange.interpolator.EasingType$Type) $r0;

        return $r2;
    }

    public static com.exchange.interpolator.EasingType$Type[] values()
    {
        int $i0;
        com.exchange.interpolator.EasingType$Type[] $r0, $r1;

        $r0 = <com.exchange.interpolator.EasingType$Type: com.exchange.interpolator.EasingType$Type[] ENUM$VALUES>;

        $i0 = lengthof $r0;

        $r1 = newarray (com.exchange.interpolator.EasingType$Type)[$i0];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, $r1, 0, $i0);

        return $r1;
    }
}
