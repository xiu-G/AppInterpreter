public class proguard.preverify.CodeSubroutineInliner extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.attribute.visitor.AttributeVisitor, proguard.classfile.instruction.visitor.InstructionVisitor, proguard.classfile.attribute.visitor.ExceptionInfoVisitor
{
    private static final boolean DEBUG;
    private final proguard.optimize.peephole.BranchTargetFinder branchTargetFinder;
    private int clipEnd;
    private int clipStart;
    private final proguard.classfile.editor.CodeAttributeComposer codeAttributeComposer;
    private proguard.classfile.attribute.visitor.ExceptionInfoVisitor subroutineExceptionInliner;

    public void <init>()
    {
        proguard.classfile.editor.CodeAttributeComposer $r2;
        proguard.preverify.CodeSubroutineInliner r0;
        proguard.optimize.peephole.BranchTargetFinder $r1;

        r0 := @this: proguard.preverify.CodeSubroutineInliner;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        $r1 = new proguard.optimize.peephole.BranchTargetFinder;

        specialinvoke $r1.<proguard.optimize.peephole.BranchTargetFinder: void <init>()>();

        r0.<proguard.preverify.CodeSubroutineInliner: proguard.optimize.peephole.BranchTargetFinder branchTargetFinder> = $r1;

        $r2 = new proguard.classfile.editor.CodeAttributeComposer;

        specialinvoke $r2.<proguard.classfile.editor.CodeAttributeComposer: void <init>(boolean)>(1);

        r0.<proguard.preverify.CodeSubroutineInliner: proguard.classfile.editor.CodeAttributeComposer codeAttributeComposer> = $r2;

        r0.<proguard.preverify.CodeSubroutineInliner: proguard.classfile.attribute.visitor.ExceptionInfoVisitor subroutineExceptionInliner> = r0;

        r0.<proguard.preverify.CodeSubroutineInliner: int clipStart> = 0;

        r0.<proguard.preverify.CodeSubroutineInliner: int clipEnd> = 2147483647;

        return;
    }

    private boolean containsSubroutines(proguard.classfile.attribute.CodeAttribute)
    {
        proguard.classfile.attribute.CodeAttribute $r1;
        int $i0, $i1;
        proguard.preverify.CodeSubroutineInliner r0;
        boolean $z0;
        proguard.optimize.peephole.BranchTargetFinder $r2;

        r0 := @this: proguard.preverify.CodeSubroutineInliner;

        $r1 := @parameter0: proguard.classfile.attribute.CodeAttribute;

        $i0 = 0;

     label1:
        $i1 = $r1.<proguard.classfile.attribute.CodeAttribute: int u4codeLength>;

        if $i0 >= $i1 goto label3;

        $r2 = r0.<proguard.preverify.CodeSubroutineInliner: proguard.optimize.peephole.BranchTargetFinder branchTargetFinder>;

        $z0 = virtualinvoke $r2.<proguard.optimize.peephole.BranchTargetFinder: boolean isSubroutineInvocation(int)>($i0);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        return 0;
    }

    private void inlineSubroutine(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, int)
    {
        proguard.classfile.attribute.visitor.ExceptionInfoVisitor $r4, $r7;
        proguard.classfile.editor.CodeAttributeComposer $r8;
        proguard.preverify.CodeSubroutineInliner r0;
        proguard.optimize.peephole.BranchTargetFinder $r5;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0, $i1, $i2, $i3, $i4;
        proguard.classfile.Method $r2;
        proguard.classfile.visitor.ExceptionExcludedOffsetFilter $r6;

        r0 := @this: proguard.preverify.CodeSubroutineInliner;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $r5 = r0.<proguard.preverify.CodeSubroutineInliner: proguard.optimize.peephole.BranchTargetFinder branchTargetFinder>;

        $i4 = virtualinvoke $r5.<proguard.optimize.peephole.BranchTargetFinder: int subroutineEnd(int)>($i1);

        $r4 = r0.<proguard.preverify.CodeSubroutineInliner: proguard.classfile.attribute.visitor.ExceptionInfoVisitor subroutineExceptionInliner>;

        $i2 = r0.<proguard.preverify.CodeSubroutineInliner: int clipStart>;

        $i3 = r0.<proguard.preverify.CodeSubroutineInliner: int clipEnd>;

        $r6 = new proguard.classfile.visitor.ExceptionExcludedOffsetFilter;

        $r7 = r0.<proguard.preverify.CodeSubroutineInliner: proguard.classfile.attribute.visitor.ExceptionInfoVisitor subroutineExceptionInliner>;

        specialinvoke $r6.<proguard.classfile.visitor.ExceptionExcludedOffsetFilter: void <init>(int,proguard.classfile.attribute.visitor.ExceptionInfoVisitor)>($i0, $r7);

        r0.<proguard.preverify.CodeSubroutineInliner: proguard.classfile.attribute.visitor.ExceptionInfoVisitor subroutineExceptionInliner> = $r6;

        r0.<proguard.preverify.CodeSubroutineInliner: int clipStart> = $i1;

        r0.<proguard.preverify.CodeSubroutineInliner: int clipEnd> = $i4;

        $r8 = r0.<proguard.preverify.CodeSubroutineInliner: proguard.classfile.editor.CodeAttributeComposer codeAttributeComposer>;

        $i0 = $r3.<proguard.classfile.attribute.CodeAttribute: int u4codeLength>;

        virtualinvoke $r8.<proguard.classfile.editor.CodeAttributeComposer: void beginCodeFragment(int)>($i0);

        virtualinvoke $r3.<proguard.classfile.attribute.CodeAttribute: void instructionsAccept(proguard.classfile.Clazz,proguard.classfile.Method,int,int,proguard.classfile.instruction.visitor.InstructionVisitor)>($r1, $r2, $i1, $i4, r0);

        $r8 = r0.<proguard.preverify.CodeSubroutineInliner: proguard.classfile.editor.CodeAttributeComposer codeAttributeComposer>;

        virtualinvoke $r8.<proguard.classfile.editor.CodeAttributeComposer: void appendLabel(int)>($i4);

        $r7 = r0.<proguard.preverify.CodeSubroutineInliner: proguard.classfile.attribute.visitor.ExceptionInfoVisitor subroutineExceptionInliner>;

        virtualinvoke $r3.<proguard.classfile.attribute.CodeAttribute: void exceptionsAccept(proguard.classfile.Clazz,proguard.classfile.Method,int,int,proguard.classfile.attribute.visitor.ExceptionInfoVisitor)>($r1, $r2, $i1, $i4, $r7);

        r0.<proguard.preverify.CodeSubroutineInliner: proguard.classfile.attribute.visitor.ExceptionInfoVisitor subroutineExceptionInliner> = $r4;

        r0.<proguard.preverify.CodeSubroutineInliner: int clipStart> = $i2;

        r0.<proguard.preverify.CodeSubroutineInliner: int clipEnd> = $i3;

        $r8 = r0.<proguard.preverify.CodeSubroutineInliner: proguard.classfile.editor.CodeAttributeComposer codeAttributeComposer>;

        virtualinvoke $r8.<proguard.classfile.editor.CodeAttributeComposer: void endCodeFragment()>();

        return;
    }

    public void visitAnyAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.Attribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.preverify.CodeSubroutineInliner r0;
        proguard.classfile.attribute.Attribute $r2;

        r0 := @this: proguard.preverify.CodeSubroutineInliner;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.Attribute;

        return;
    }

    public void visitAnyInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.Instruction)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.instruction.Instruction $r4;
        int $i0;
        proguard.classfile.Method $r2;
        proguard.classfile.editor.CodeAttributeComposer $r5;
        proguard.preverify.CodeSubroutineInliner r0;

        r0 := @this: proguard.preverify.CodeSubroutineInliner;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.Instruction;

        $r5 = r0.<proguard.preverify.CodeSubroutineInliner: proguard.classfile.editor.CodeAttributeComposer codeAttributeComposer>;

        $r4 = virtualinvoke $r4.<proguard.classfile.instruction.Instruction: proguard.classfile.instruction.Instruction shrink()>();

        virtualinvoke $r5.<proguard.classfile.editor.CodeAttributeComposer: void appendInstruction(int,proguard.classfile.instruction.Instruction)>($i0, $r4);

        return;
    }

    public void visitBranchInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.BranchInstruction)
    {
        proguard.classfile.instruction.BranchInstruction $r4, $r8;
        proguard.classfile.editor.CodeAttributeComposer $r6;
        proguard.preverify.CodeSubroutineInliner r0;
        proguard.optimize.peephole.BranchTargetFinder $r5;
        byte $b2;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.instruction.Instruction $r7;
        int $i0, $i1, $i3;
        proguard.classfile.Method $r2;
        boolean $z0;

        r0 := @this: proguard.preverify.CodeSubroutineInliner;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.BranchInstruction;

        $b2 = $r4.<proguard.classfile.instruction.BranchInstruction: byte opcode>;

        $i1 = (int) $b2;

        if $i1 == -88 goto label1;

        $i1 = (int) $b2;

        if $i1 != -55 goto label3;

     label1:
        $i3 = $r4.<proguard.classfile.instruction.BranchInstruction: int branchOffset>;

        $i1 = $i0 + $i3;

        $r5 = r0.<proguard.preverify.CodeSubroutineInliner: proguard.optimize.peephole.BranchTargetFinder branchTargetFinder>;

        $z0 = virtualinvoke $r5.<proguard.optimize.peephole.BranchTargetFinder: boolean isSubroutineReturning(int)>($i1);

        if $z0 == 0 goto label2;

        $r6 = r0.<proguard.preverify.CodeSubroutineInliner: proguard.classfile.editor.CodeAttributeComposer codeAttributeComposer>;

        virtualinvoke $r6.<proguard.classfile.editor.CodeAttributeComposer: void appendLabel(int)>($i0);

        specialinvoke r0.<proguard.preverify.CodeSubroutineInliner: void inlineSubroutine(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,int)>($r1, $r2, $r3, $i0, $i1);

        return;

     label2:
        $r8 = new proguard.classfile.instruction.BranchInstruction;

        specialinvoke $r8.<proguard.classfile.instruction.BranchInstruction: void <init>(byte,int)>(-89, $i3);

        $r7 = virtualinvoke $r8.<proguard.classfile.instruction.BranchInstruction: proguard.classfile.instruction.Instruction shrink()>();

        $r6 = r0.<proguard.preverify.CodeSubroutineInliner: proguard.classfile.editor.CodeAttributeComposer codeAttributeComposer>;

        virtualinvoke $r6.<proguard.classfile.editor.CodeAttributeComposer: void appendInstruction(int,proguard.classfile.instruction.Instruction)>($i0, $r7);

        return;

     label3:
        $r6 = r0.<proguard.preverify.CodeSubroutineInliner: proguard.classfile.editor.CodeAttributeComposer codeAttributeComposer>;

        virtualinvoke $r6.<proguard.classfile.editor.CodeAttributeComposer: void appendInstruction(int,proguard.classfile.instruction.Instruction)>($i0, $r4);

        return;
    }

    public void visitCodeAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute)
    {
        java.io.PrintStream $r5;
        java.lang.RuntimeException $r4;
        proguard.preverify.CodeSubroutineInliner r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        java.lang.StringBuffer $r6;
        proguard.classfile.Method $r2;
        java.lang.Class $r8;
        java.lang.String $r7;

        r0 := @this: proguard.preverify.CodeSubroutineInliner;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

     label1:
        virtualinvoke r0.<proguard.preverify.CodeSubroutineInliner: void visitCodeAttribute0(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute)>($r1, $r2, $r3);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>("Unexpected error while inlining subroutines:");

        $r5 = <java.lang.System: java.io.PrintStream err>;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Class       = [");

        $r7 = interfaceinvoke $r1.<proguard.classfile.Clazz: java.lang.String getName()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r7);

        $r5 = <java.lang.System: java.io.PrintStream err>;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Method      = [");

        $r7 = interfaceinvoke $r2.<proguard.classfile.Method: java.lang.String getName(proguard.classfile.Clazz)>($r1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r7 = interfaceinvoke $r2.<proguard.classfile.Method: java.lang.String getDescriptor(proguard.classfile.Clazz)>($r1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r7);

        $r5 = <java.lang.System: java.io.PrintStream err>;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Exception   = [");

        $r8 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] (");

        $r7 = virtualinvoke $r4.<java.lang.RuntimeException: java.lang.String getMessage()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r7);

        throw $r4;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    public void visitCodeAttribute0(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute)
    {
        byte[] $r6;
        proguard.classfile.attribute.visitor.ExceptionInfoVisitor $r8;
        proguard.classfile.editor.CodeAttributeComposer $r5;
        proguard.preverify.CodeSubroutineInliner r0;
        proguard.optimize.peephole.BranchTargetFinder $r4;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.instruction.Instruction $r7;
        int $i0, $i1;
        proguard.classfile.Method $r2;
        boolean $z0;

        r0 := @this: proguard.preverify.CodeSubroutineInliner;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 = r0.<proguard.preverify.CodeSubroutineInliner: proguard.optimize.peephole.BranchTargetFinder branchTargetFinder>;

        virtualinvoke $r4.<proguard.optimize.peephole.BranchTargetFinder: void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute)>($r1, $r2, $r3);

        $z0 = specialinvoke r0.<proguard.preverify.CodeSubroutineInliner: boolean containsSubroutines(proguard.classfile.attribute.CodeAttribute)>($r3);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r5 = r0.<proguard.preverify.CodeSubroutineInliner: proguard.classfile.editor.CodeAttributeComposer codeAttributeComposer>;

        virtualinvoke $r5.<proguard.classfile.editor.CodeAttributeComposer: void reset()>();

        $r5 = r0.<proguard.preverify.CodeSubroutineInliner: proguard.classfile.editor.CodeAttributeComposer codeAttributeComposer>;

        $i0 = $r3.<proguard.classfile.attribute.CodeAttribute: int u4codeLength>;

        virtualinvoke $r5.<proguard.classfile.editor.CodeAttributeComposer: void beginCodeFragment(int)>($i0);

        $i0 = 0;

     label2:
        $i1 = $r3.<proguard.classfile.attribute.CodeAttribute: int u4codeLength>;

        if $i0 >= $i1 goto label5;

        $r6 = $r3.<proguard.classfile.attribute.CodeAttribute: byte[] code>;

        $r7 = staticinvoke <proguard.classfile.instruction.InstructionFactory: proguard.classfile.instruction.Instruction create(byte[],int)>($r6, $i0);

        $i1 = virtualinvoke $r7.<proguard.classfile.instruction.Instruction: int length(int)>($i0);

        $r4 = r0.<proguard.preverify.CodeSubroutineInliner: proguard.optimize.peephole.BranchTargetFinder branchTargetFinder>;

        $z0 = virtualinvoke $r4.<proguard.optimize.peephole.BranchTargetFinder: boolean isSubroutine(int)>($i0);

        if $z0 == 0 goto label4;

        $r4 = r0.<proguard.preverify.CodeSubroutineInliner: proguard.optimize.peephole.BranchTargetFinder branchTargetFinder>;

        $z0 = virtualinvoke $r4.<proguard.optimize.peephole.BranchTargetFinder: boolean isSubroutineReturning(int)>($i0);

        if $z0 == 0 goto label4;

        $r5 = r0.<proguard.preverify.CodeSubroutineInliner: proguard.classfile.editor.CodeAttributeComposer codeAttributeComposer>;

        virtualinvoke $r5.<proguard.classfile.editor.CodeAttributeComposer: void appendLabel(int)>($i0);

     label3:
        $i0 = $i0 + $i1;

        goto label2;

     label4:
        virtualinvoke $r7.<proguard.classfile.instruction.Instruction: void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.visitor.InstructionVisitor)>($r1, $r2, $r3, $i0, r0);

        goto label3;

     label5:
        $r8 = r0.<proguard.preverify.CodeSubroutineInliner: proguard.classfile.attribute.visitor.ExceptionInfoVisitor subroutineExceptionInliner>;

        virtualinvoke $r3.<proguard.classfile.attribute.CodeAttribute: void exceptionsAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.visitor.ExceptionInfoVisitor)>($r1, $r2, $r8);

        $r5 = r0.<proguard.preverify.CodeSubroutineInliner: proguard.classfile.editor.CodeAttributeComposer codeAttributeComposer>;

        $i0 = $r3.<proguard.classfile.attribute.CodeAttribute: int u4codeLength>;

        virtualinvoke $r5.<proguard.classfile.editor.CodeAttributeComposer: void appendLabel(int)>($i0);

        $r5 = r0.<proguard.preverify.CodeSubroutineInliner: proguard.classfile.editor.CodeAttributeComposer codeAttributeComposer>;

        virtualinvoke $r5.<proguard.classfile.editor.CodeAttributeComposer: void endCodeFragment()>();

        $r5 = r0.<proguard.preverify.CodeSubroutineInliner: proguard.classfile.editor.CodeAttributeComposer codeAttributeComposer>;

        virtualinvoke $r5.<proguard.classfile.editor.CodeAttributeComposer: void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute)>($r1, $r2, $r3);

        return;
    }

    public void visitExceptionInfo(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.ExceptionInfo)
    {
        byte[] $r7;
        proguard.classfile.editor.CodeAttributeComposer $r10;
        proguard.optimize.peephole.BranchTargetFinder $r6;
        proguard.classfile.Clazz $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        proguard.classfile.attribute.ExceptionInfo $r4, $r5;
        boolean $z0;
        proguard.classfile.instruction.BranchInstruction $r9;
        proguard.preverify.CodeSubroutineInliner r0;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.instruction.Instruction $r8;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.preverify.CodeSubroutineInliner;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.ExceptionInfo;

        $i0 = $r4.<proguard.classfile.attribute.ExceptionInfo: int u2startPC>;

        $i1 = r0.<proguard.preverify.CodeSubroutineInliner: int clipStart>;

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>($i0, $i1);

        $i0 = $r4.<proguard.classfile.attribute.ExceptionInfo: int u2endPC>;

        $i1 = r0.<proguard.preverify.CodeSubroutineInliner: int clipEnd>;

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        $i3 = $r4.<proguard.classfile.attribute.ExceptionInfo: int u2handlerPC>;

        $i0 = $r4.<proguard.classfile.attribute.ExceptionInfo: int u2catchType>;

        $i4 = $i2;

     label1:
        if $i4 >= $i1 goto label3;

        $r6 = r0.<proguard.preverify.CodeSubroutineInliner: proguard.optimize.peephole.BranchTargetFinder branchTargetFinder>;

        $z0 = virtualinvoke $r6.<proguard.optimize.peephole.BranchTargetFinder: boolean isSubroutineInvocation(int)>($i4);

        if $z0 == 0 goto label2;

        $r7 = $r3.<proguard.classfile.attribute.CodeAttribute: byte[] code>;

        $r8 = staticinvoke <proguard.classfile.instruction.InstructionFactory: proguard.classfile.instruction.Instruction create(byte[],int)>($r7, $i4);

        $i5 = virtualinvoke $r8.<proguard.classfile.instruction.Instruction: int length(int)>($i4);

        $r9 = (proguard.classfile.instruction.BranchInstruction) $r8;

        $i6 = $r9.<proguard.classfile.instruction.BranchInstruction: int branchOffset>;

        $i6 = $i6 + $i4;

        $z0 = virtualinvoke $r4.<proguard.classfile.attribute.ExceptionInfo: boolean isApplicable(int)>($i6);

        if $z0 != 0 goto label2;

        $r10 = r0.<proguard.preverify.CodeSubroutineInliner: proguard.classfile.editor.CodeAttributeComposer codeAttributeComposer>;

        $r5 = new proguard.classfile.attribute.ExceptionInfo;

        specialinvoke $r5.<proguard.classfile.attribute.ExceptionInfo: void <init>(int,int,int,int)>($i2, $i4, $i3, $i0);

        virtualinvoke $r10.<proguard.classfile.editor.CodeAttributeComposer: void appendException(proguard.classfile.attribute.ExceptionInfo)>($r5);

        $i2 = $i4 + $i5;

     label2:
        $i4 = $i4 + 1;

        goto label1;

     label3:
        $r10 = r0.<proguard.preverify.CodeSubroutineInliner: proguard.classfile.editor.CodeAttributeComposer codeAttributeComposer>;

        $r4 = new proguard.classfile.attribute.ExceptionInfo;

        specialinvoke $r4.<proguard.classfile.attribute.ExceptionInfo: void <init>(int,int,int,int)>($i2, $i1, $i3, $i0);

        virtualinvoke $r10.<proguard.classfile.editor.CodeAttributeComposer: void appendException(proguard.classfile.attribute.ExceptionInfo)>($r4);

        return;
    }

    public void visitVariableInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.VariableInstruction)
    {
        proguard.classfile.instruction.BranchInstruction $r8;
        proguard.classfile.instruction.VariableInstruction $r4;
        proguard.classfile.editor.CodeAttributeComposer $r6;
        proguard.preverify.CodeSubroutineInliner r0;
        proguard.optimize.peephole.BranchTargetFinder $r5;
        byte $b1;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.instruction.Instruction $r7;
        int $i0, $i2, $i3;
        proguard.classfile.Method $r2;
        boolean $z0;

        r0 := @this: proguard.preverify.CodeSubroutineInliner;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.VariableInstruction;

        $b1 = $r4.<proguard.classfile.instruction.VariableInstruction: byte opcode>;

        $i2 = (int) $b1;

        if $i2 != -87 goto label2;

        $r5 = r0.<proguard.preverify.CodeSubroutineInliner: proguard.optimize.peephole.BranchTargetFinder branchTargetFinder>;

        $i2 = virtualinvoke $r5.<proguard.optimize.peephole.BranchTargetFinder: int subroutineEnd(int)>($i0);

        $i3 = virtualinvoke $r4.<proguard.classfile.instruction.VariableInstruction: int length(int)>($i0);

        $i3 = $i3 + $i0;

        if $i2 != $i3 goto label1;

        $r6 = r0.<proguard.preverify.CodeSubroutineInliner: proguard.classfile.editor.CodeAttributeComposer codeAttributeComposer>;

        virtualinvoke $r6.<proguard.classfile.editor.CodeAttributeComposer: void appendLabel(int)>($i0);

        return;

     label1:
        $r8 = new proguard.classfile.instruction.BranchInstruction;

        $r5 = r0.<proguard.preverify.CodeSubroutineInliner: proguard.optimize.peephole.BranchTargetFinder branchTargetFinder>;

        $i2 = virtualinvoke $r5.<proguard.optimize.peephole.BranchTargetFinder: int subroutineEnd(int)>($i0);

        $i2 = $i2 - $i0;

        specialinvoke $r8.<proguard.classfile.instruction.BranchInstruction: void <init>(byte,int)>(-89, $i2);

        $r7 = virtualinvoke $r8.<proguard.classfile.instruction.BranchInstruction: proguard.classfile.instruction.Instruction shrink()>();

        $r6 = r0.<proguard.preverify.CodeSubroutineInliner: proguard.classfile.editor.CodeAttributeComposer codeAttributeComposer>;

        virtualinvoke $r6.<proguard.classfile.editor.CodeAttributeComposer: void appendInstruction(int,proguard.classfile.instruction.Instruction)>($i0, $r7);

        return;

     label2:
        $r5 = r0.<proguard.preverify.CodeSubroutineInliner: proguard.optimize.peephole.BranchTargetFinder branchTargetFinder>;

        $z0 = virtualinvoke $r5.<proguard.optimize.peephole.BranchTargetFinder: boolean isSubroutineStart(int)>($i0);

        if $z0 == 0 goto label3;

        $r6 = r0.<proguard.preverify.CodeSubroutineInliner: proguard.classfile.editor.CodeAttributeComposer codeAttributeComposer>;

        virtualinvoke $r6.<proguard.classfile.editor.CodeAttributeComposer: void appendLabel(int)>($i0);

        return;

     label3:
        $r6 = r0.<proguard.preverify.CodeSubroutineInliner: proguard.classfile.editor.CodeAttributeComposer codeAttributeComposer>;

        virtualinvoke $r6.<proguard.classfile.editor.CodeAttributeComposer: void appendInstruction(int,proguard.classfile.instruction.Instruction)>($i0, $r4);

        return;
    }
}
