public class net.sourceforge.blowfishj.BlowfishEasy extends java.lang.Object
{
    static java.security.SecureRandom _srnd;
    net.sourceforge.blowfishj.BlowfishCBC m_bfc;

    static void <clinit>()
    {
        java.security.SecureRandom $r0;

        $r0 = new java.security.SecureRandom;

        specialinvoke $r0.<java.security.SecureRandom: void <init>()>();

        <net.sourceforge.blowfishj.BlowfishEasy: java.security.SecureRandom _srnd> = $r0;

        return;
    }

    public void <init>(java.lang.String)
    {
        byte[] r2;
        net.sourceforge.blowfishj.BlowfishEasy r0;
        char $c2;
        net.sourceforge.blowfishj.SHA1 r3;
        byte $b3;
        net.sourceforge.blowfishj.BlowfishCBC $r4;
        int $i0, $i1;
        java.lang.String $r1;

        r0 := @this: net.sourceforge.blowfishj.BlowfishEasy;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r3 = new net.sourceforge.blowfishj.SHA1;

        specialinvoke r3.<net.sourceforge.blowfishj.SHA1: void <init>()>();

        $i0 = 0;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

     label1:
        if $i0 >= $i1 goto label2;

        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i0);

        $c2 = $c2 & 255;

        $b3 = (byte) $c2;

        virtualinvoke r3.<net.sourceforge.blowfishj.SHA1: void update(byte)>($b3);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        virtualinvoke r3.<net.sourceforge.blowfishj.SHA1: void finalize()>();

        r2 = newarray (byte)[20];

        virtualinvoke r3.<net.sourceforge.blowfishj.SHA1: int getDigest(byte[],int)>(r2, 0);

        $r4 = new net.sourceforge.blowfishj.BlowfishCBC;

        $i0 = lengthof r2;

        specialinvoke $r4.<net.sourceforge.blowfishj.BlowfishCBC: void <init>(byte[],int,int,long)>(r2, 0, $i0, 0L);

        r0.<net.sourceforge.blowfishj.BlowfishEasy: net.sourceforge.blowfishj.BlowfishCBC m_bfc> = $r4;

        return;
    }

    public void <init>(char[])
    {
        byte[] r2;
        net.sourceforge.blowfishj.BlowfishEasy r0;
        char $c2;
        net.sourceforge.blowfishj.SHA1 r3, $r4;
        byte $b4;
        net.sourceforge.blowfishj.BlowfishCBC $r5;
        int $i0, i1, $i3;
        char[] $r1;

        r0 := @this: net.sourceforge.blowfishj.BlowfishEasy;

        $r1 := @parameter0: char[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new net.sourceforge.blowfishj.SHA1;

        r3 = $r4;

        specialinvoke $r4.<net.sourceforge.blowfishj.SHA1: void <init>()>();

        i1 = 0;

        $i0 = lengthof $r1;

     label1:
        if i1 >= $i0 goto label2;

        $c2 = $r1[i1];

        $i3 = (int) $c2;

        $i3 = $i3 >> 8;

        $i3 = $i3 & 255;

        $b4 = (byte) $i3;

        virtualinvoke r3.<net.sourceforge.blowfishj.SHA1: void update(byte)>($b4);

        $c2 = $r1[i1];

        $c2 = $c2 & 255;

        $b4 = (byte) $c2;

        virtualinvoke r3.<net.sourceforge.blowfishj.SHA1: void update(byte)>($b4);

        i1 = i1 + 1;

        goto label1;

     label2:
        virtualinvoke r3.<net.sourceforge.blowfishj.SHA1: void finalize()>();

        r2 = newarray (byte)[20];

        virtualinvoke r3.<net.sourceforge.blowfishj.SHA1: int getDigest(byte[],int)>(r2, 0);

        $r5 = new net.sourceforge.blowfishj.BlowfishCBC;

        $i0 = lengthof r2;

        specialinvoke $r5.<net.sourceforge.blowfishj.BlowfishCBC: void <init>(byte[],int,int,long)>(r2, 0, $i0, 0L);

        r0.<net.sourceforge.blowfishj.BlowfishEasy: net.sourceforge.blowfishj.BlowfishCBC m_bfc> = $r5;

        return;
    }

    private java.lang.String encStr(java.lang.String, long)
    {
        byte[] r2, $r4;
        net.sourceforge.blowfishj.BlowfishEasy r0;
        long $l0;
        char $c5;
        byte b2;
        net.sourceforge.blowfishj.BlowfishCBC $r3;
        java.lang.StringBuffer $r5, $r6;
        int $i1, $i3, i4, i6, $i7;
        java.lang.String $r1;

        r0 := @this: net.sourceforge.blowfishj.BlowfishEasy;

        $r1 := @parameter0: java.lang.String;

        $l0 := @parameter1: long;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i3 = $i1 << 1;

        i4 = -8;

        $i3 = $i3 & i4;

        $i3 = $i3 + 8;

        r2 = newarray (byte)[$i3];

        i4 = 0;

        $i3 = 0;

     label1:
        if i4 >= $i1 goto label2;

        $c5 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i4);

        i6 = $i3 + 1;

        $i7 = (int) $c5;

        $i7 = $i7 >> 8;

        $i7 = $i7 & 255;

        b2 = (byte) $i7;

        r2[$i3] = b2;

        $i3 = i6 + 1;

        $c5 = $c5 & 255;

        b2 = (byte) $c5;

        r2[i6] = b2;

        i4 = i4 + 1;

        goto label1;

     label2:
        i4 = lengthof r2;

        $i1 = $i1 << 1;

        $i1 = i4 - $i1;

        b2 = (byte) $i1;

        $i1 = $i3;

     label3:
        $i3 = lengthof r2;

        if $i1 >= $i3 goto label4;

        r2[$i1] = b2;

        $i1 = $i1 + 1;

        goto label3;

     label4:
        $r3 = r0.<net.sourceforge.blowfishj.BlowfishEasy: net.sourceforge.blowfishj.BlowfishCBC m_bfc>;

        virtualinvoke $r3.<net.sourceforge.blowfishj.BlowfishCBC: void setCBCIV(long)>($l0);

        $r3 = r0.<net.sourceforge.blowfishj.BlowfishEasy: net.sourceforge.blowfishj.BlowfishCBC m_bfc>;

        $i1 = lengthof r2;

        virtualinvoke $r3.<net.sourceforge.blowfishj.BlowfishCBC: int encrypt(byte[],int,byte[],int,int)>(r2, 0, r2, 0, $i1);

        $r4 = newarray (byte)[8];

        staticinvoke <net.sourceforge.blowfishj.BinConverter: void longToByteArray(long,byte[],int)>($l0, $r4, 0);

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r1 = staticinvoke <net.sourceforge.blowfishj.BinConverter: java.lang.String bytesToHexStr(byte[],int,int)>($r4, 0, 8);

        $r5 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $i1 = lengthof r2;

        $r1 = staticinvoke <net.sourceforge.blowfishj.BinConverter: java.lang.String bytesToHexStr(byte[],int,int)>(r2, 0, $i1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r1;
    }

    public java.lang.String decryptString(java.lang.String)
    {
        byte[] r2;
        net.sourceforge.blowfishj.BlowfishEasy r0;
        short s3;
        net.sourceforge.blowfishj.BlowfishCBC $r3;
        byte $b2;
        int $i0, $i1;
        java.lang.String $r1;

        r0 := @this: net.sourceforge.blowfishj.BlowfishEasy;

        $r1 := @parameter0: java.lang.String;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i1 = $i1 >> 1;

        $i0 = -8;

        $i1 = $i1 & $i0;

        if 8 <= $i1 goto label1;

        return null;

     label1:
        r2 = newarray (byte)[8];

        $i0 = staticinvoke <net.sourceforge.blowfishj.BinConverter: int hexStrToBytes(java.lang.String,byte[],int,int,int)>($r1, r2, 0, 0, 8);

        if $i0 >= 8 goto label2;

        return null;

     label2:
        $r3 = r0.<net.sourceforge.blowfishj.BlowfishEasy: net.sourceforge.blowfishj.BlowfishCBC m_bfc>;

        virtualinvoke $r3.<net.sourceforge.blowfishj.BlowfishCBC: void setCBCIV(byte[],int)>(r2, 0);

        $i0 = -8;

        $i0 = $i1 + $i0;

        if $i0 != 0 goto label3;

        return "";

     label3:
        r2 = newarray (byte)[$i0];

        $i1 = staticinvoke <net.sourceforge.blowfishj.BinConverter: int hexStrToBytes(java.lang.String,byte[],int,int,int)>($r1, r2, 16, 0, $i0);

        if $i1 >= $i0 goto label4;

        return null;

     label4:
        $r3 = r0.<net.sourceforge.blowfishj.BlowfishEasy: net.sourceforge.blowfishj.BlowfishCBC m_bfc>;

        $i0 = lengthof r2;

        virtualinvoke $r3.<net.sourceforge.blowfishj.BlowfishCBC: int decrypt(byte[],int,byte[],int,int)>(r2, 0, r2, 0, $i0);

        $i0 = lengthof r2;

        $i0 = $i0 - 1;

        $b2 = r2[$i0];

        s3 = $b2 & 255;

        if 8 >= s3 goto label5;

        s3 = 0;

     label5:
        $i1 = $i1 - s3;

        if $i1 >= 0 goto label6;

        return "";

     label6:
        $r1 = staticinvoke <net.sourceforge.blowfishj.BinConverter: java.lang.String byteArrayToStr(byte[],int,int)>(r2, 0, $i1);

        return $r1;
    }

    public void destroy()
    {
        net.sourceforge.blowfishj.BlowfishEasy r0;
        net.sourceforge.blowfishj.BlowfishCBC $r1;

        r0 := @this: net.sourceforge.blowfishj.BlowfishEasy;

        $r1 = r0.<net.sourceforge.blowfishj.BlowfishEasy: net.sourceforge.blowfishj.BlowfishCBC m_bfc>;

        virtualinvoke $r1.<net.sourceforge.blowfishj.BlowfishCBC: void cleanUp()>();

        return;
    }

    public java.lang.String encryptString(java.lang.String)
    {
        java.security.SecureRandom $r2, $r3;
        java.lang.Throwable $r4;
        net.sourceforge.blowfishj.BlowfishEasy r0;
        long $l0;
        java.lang.String $r1;

        r0 := @this: net.sourceforge.blowfishj.BlowfishEasy;

        $r1 := @parameter0: java.lang.String;

        $r2 = <net.sourceforge.blowfishj.BlowfishEasy: java.security.SecureRandom _srnd>;

        entermonitor $r2;

     label1:
        $r3 = <net.sourceforge.blowfishj.BlowfishEasy: java.security.SecureRandom _srnd>;

        $l0 = virtualinvoke $r3.<java.util.Random: long nextLong()>();

        exitmonitor $r2;

     label2:
        $r1 = specialinvoke r0.<net.sourceforge.blowfishj.BlowfishEasy: java.lang.String encStr(java.lang.String,long)>($r1, $l0);

        return $r1;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor $r2;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.lang.String encryptString(java.lang.String, java.util.Random)
    {
        net.sourceforge.blowfishj.BlowfishEasy r0;
        java.util.Random $r2;
        long $l0;
        java.lang.String $r1;

        r0 := @this: net.sourceforge.blowfishj.BlowfishEasy;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.util.Random;

        $l0 = virtualinvoke $r2.<java.util.Random: long nextLong()>();

        $r1 = specialinvoke r0.<net.sourceforge.blowfishj.BlowfishEasy: java.lang.String encStr(java.lang.String,long)>($r1, $l0);

        return $r1;
    }
}
