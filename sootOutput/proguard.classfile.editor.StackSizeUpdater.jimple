public class proguard.classfile.editor.StackSizeUpdater extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.attribute.visitor.AttributeVisitor
{
    private final proguard.classfile.attribute.visitor.StackSizeComputer stackSizeComputer;

    public void <init>()
    {
        proguard.classfile.attribute.visitor.StackSizeComputer $r1;
        proguard.classfile.editor.StackSizeUpdater r0;

        r0 := @this: proguard.classfile.editor.StackSizeUpdater;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        $r1 = new proguard.classfile.attribute.visitor.StackSizeComputer;

        specialinvoke $r1.<proguard.classfile.attribute.visitor.StackSizeComputer: void <init>()>();

        r0.<proguard.classfile.editor.StackSizeUpdater: proguard.classfile.attribute.visitor.StackSizeComputer stackSizeComputer> = $r1;

        return;
    }

    public void visitAnyAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.Attribute)
    {
        proguard.classfile.editor.StackSizeUpdater r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.Attribute $r2;

        r0 := @this: proguard.classfile.editor.StackSizeUpdater;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.Attribute;

        return;
    }

    public void visitCodeAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.visitor.StackSizeComputer $r4;
        proguard.classfile.editor.StackSizeUpdater r0;

        r0 := @this: proguard.classfile.editor.StackSizeUpdater;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 = r0.<proguard.classfile.editor.StackSizeUpdater: proguard.classfile.attribute.visitor.StackSizeComputer stackSizeComputer>;

        virtualinvoke $r4.<proguard.classfile.attribute.visitor.StackSizeComputer: void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute)>($r1, $r2, $r3);

        $r4 = r0.<proguard.classfile.editor.StackSizeUpdater: proguard.classfile.attribute.visitor.StackSizeComputer stackSizeComputer>;

        $i0 = virtualinvoke $r4.<proguard.classfile.attribute.visitor.StackSizeComputer: int getMaxStackSize()>();

        $r3.<proguard.classfile.attribute.CodeAttribute: int u2maxStack> = $i0;

        return;
    }
}
