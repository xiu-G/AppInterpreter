public class cn.hi321.browser.weave.client.Dbg$DebugLogRecord extends java.util.logging.LogRecord
{
    private transient boolean needToInferCaller;
    private java.lang.String sourceClassName;
    private java.lang.String sourceMethodName;

    void <init>(java.util.logging.Level, java.lang.String)
    {
        java.lang.String $r2;
        cn.hi321.browser.weave.client.Dbg$DebugLogRecord r0;
        java.util.logging.Level $r1;

        r0 := @this: cn.hi321.browser.weave.client.Dbg$DebugLogRecord;

        $r1 := @parameter0: java.util.logging.Level;

        $r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>($r1, $r2);

        r0.<cn.hi321.browser.weave.client.Dbg$DebugLogRecord: boolean needToInferCaller> = 1;

        return;
    }

    private void inferCaller()
    {
        java.lang.Throwable $r1;
        cn.hi321.browser.weave.client.Dbg$DebugLogRecord r0;
        java.lang.StackTraceElement[] $r2;
        int i0, $i1;
        java.lang.StackTraceElement r3;
        java.lang.Class $r5;
        java.lang.String $r4, $r6;
        boolean $z0;

        r0 := @this: cn.hi321.browser.weave.client.Dbg$DebugLogRecord;

        $r1 = new java.lang.Throwable;

        specialinvoke $r1.<java.lang.Throwable: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>();

        i0 = 0;

     label1:
        $i1 = lengthof $r2;

        if i0 < $i1 goto label3;

     label2:
        $i1 = lengthof $r2;

        if i0 < $i1 goto label4;

        return;

     label3:
        r3 = $r2[i0];

        $r4 = virtualinvoke r3.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $r5 = class "Lcn/hi321/browser/weave/client/Dbg;";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label2;

        i0 = i0 + 1;

        goto label1;

     label4:
        r3 = $r2[i0];

        $r4 = virtualinvoke r3.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $r5 = class "Lcn/hi321/browser/weave/client/Dbg;";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label5;

        virtualinvoke r0.<cn.hi321.browser.weave.client.Dbg$DebugLogRecord: void setSourceClassName(java.lang.String)>($r4);

        $r4 = virtualinvoke r3.<java.lang.StackTraceElement: java.lang.String getMethodName()>();

        virtualinvoke r0.<cn.hi321.browser.weave.client.Dbg$DebugLogRecord: void setSourceMethodName(java.lang.String)>($r4);

        return;

     label5:
        i0 = i0 + 1;

        goto label2;
    }

    public java.lang.String getSourceClassName()
    {
        java.lang.String $r1;
        cn.hi321.browser.weave.client.Dbg$DebugLogRecord r0;

        r0 := @this: cn.hi321.browser.weave.client.Dbg$DebugLogRecord;

        $r1 = r0.<cn.hi321.browser.weave.client.Dbg$DebugLogRecord: java.lang.String sourceClassName>;

        if $r1 != null goto label1;

        specialinvoke r0.<cn.hi321.browser.weave.client.Dbg$DebugLogRecord: void inferCaller()>();

     label1:
        $r1 = r0.<cn.hi321.browser.weave.client.Dbg$DebugLogRecord: java.lang.String sourceClassName>;

        return $r1;
    }

    public java.lang.String getSourceMethodName()
    {
        java.lang.String r1;
        cn.hi321.browser.weave.client.Dbg$DebugLogRecord r0;
        boolean $z0;

        r0 := @this: cn.hi321.browser.weave.client.Dbg$DebugLogRecord;

        $z0 = r0.<cn.hi321.browser.weave.client.Dbg$DebugLogRecord: boolean needToInferCaller>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<cn.hi321.browser.weave.client.Dbg$DebugLogRecord: void inferCaller()>();

     label1:
        r1 = r0.<cn.hi321.browser.weave.client.Dbg$DebugLogRecord: java.lang.String sourceMethodName>;

        return r1;
    }

    public void setSourceClassName(java.lang.String)
    {
        java.lang.String $r1;
        cn.hi321.browser.weave.client.Dbg$DebugLogRecord r0;

        r0 := @this: cn.hi321.browser.weave.client.Dbg$DebugLogRecord;

        $r1 := @parameter0: java.lang.String;

        r0.<cn.hi321.browser.weave.client.Dbg$DebugLogRecord: java.lang.String sourceClassName> = $r1;

        r0.<cn.hi321.browser.weave.client.Dbg$DebugLogRecord: boolean needToInferCaller> = 0;

        return;
    }

    public void setSourceMethodName(java.lang.String)
    {
        java.lang.String $r1;
        cn.hi321.browser.weave.client.Dbg$DebugLogRecord r0;

        r0 := @this: cn.hi321.browser.weave.client.Dbg$DebugLogRecord;

        $r1 := @parameter0: java.lang.String;

        r0.<cn.hi321.browser.weave.client.Dbg$DebugLogRecord: java.lang.String sourceMethodName> = $r1;

        r0.<cn.hi321.browser.weave.client.Dbg$DebugLogRecord: boolean needToInferCaller> = 0;

        return;
    }
}
