public final class com.android.vending.licensing.u extends java.lang.Object implements android.content.ServiceConnection
{
    private static final java.security.SecureRandom a;
    private com.android.vending.licensing.ILicensingService b;
    private java.security.PublicKey c;
    private final android.content.Context d;
    private final com.android.vending.licensing.s e;
    private android.os.Handler f;
    private final java.lang.String g;
    private final java.lang.String h;
    private final java.util.Set i;
    private final java.util.Queue j;

    static void <clinit>()
    {
        java.security.SecureRandom $r0;

        $r0 = new java.security.SecureRandom;

        specialinvoke $r0.<java.security.SecureRandom: void <init>()>();

        <com.android.vending.licensing.u: java.security.SecureRandom a> = $r0;

        return;
    }

    public void <init>(android.content.Context, com.android.vending.licensing.s, java.lang.String)
    {
        android.content.Context $r1, $r7;
        java.security.PublicKey $r6;
        java.util.HashSet $r4;
        com.android.vending.licensing.u r0;
        android.os.HandlerThread $r8;
        android.os.Handler $r9;
        android.os.Looper $r10;
        java.lang.String $r3;
        java.util.LinkedList $r5;
        com.android.vending.licensing.s $r2;

        r0 := @this: com.android.vending.licensing.u;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: com.android.vending.licensing.s;

        $r3 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        r0.<com.android.vending.licensing.u: java.util.Set i> = $r4;

        $r5 = new java.util.LinkedList;

        specialinvoke $r5.<java.util.LinkedList: void <init>()>();

        r0.<com.android.vending.licensing.u: java.util.Queue j> = $r5;

        r0.<com.android.vending.licensing.u: android.content.Context d> = $r1;

        r0.<com.android.vending.licensing.u: com.android.vending.licensing.s e> = $r2;

        $r6 = staticinvoke <com.android.vending.licensing.u: java.security.PublicKey a(java.lang.String)>($r3);

        r0.<com.android.vending.licensing.u: java.security.PublicKey c> = $r6;

        $r7 = r0.<com.android.vending.licensing.u: android.content.Context d>;

        $r3 = virtualinvoke $r7.<android.content.Context: java.lang.String getPackageName()>();

        r0.<com.android.vending.licensing.u: java.lang.String g> = $r3;

        $r3 = r0.<com.android.vending.licensing.u: java.lang.String g>;

        $r3 = staticinvoke <com.android.vending.licensing.u: java.lang.String a(android.content.Context,java.lang.String)>($r1, $r3);

        r0.<com.android.vending.licensing.u: java.lang.String h> = $r3;

        $r8 = new android.os.HandlerThread;

        specialinvoke $r8.<android.os.HandlerThread: void <init>(java.lang.String)>("background thread");

        virtualinvoke $r8.<android.os.HandlerThread: void start()>();

        $r9 = new android.os.Handler;

        $r10 = virtualinvoke $r8.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke $r9.<android.os.Handler: void <init>(android.os.Looper)>($r10);

        r0.<com.android.vending.licensing.u: android.os.Handler f> = $r9;

        return;
    }

    private static java.lang.String a(android.content.Context, java.lang.String)
    {
        java.lang.Throwable $r4;
        android.content.Context $r0;
        android.content.pm.PackageManager $r2;
        int $i0;
        java.lang.String $r1;
        android.content.pm.PackageInfo $r3;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: java.lang.String;

     label1:
        $r2 = virtualinvoke $r0.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r3 = virtualinvoke $r2.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>($r1, 0);

     label2:
        $i0 = $r3.<android.content.pm.PackageInfo: int versionCode>;

     label3:
        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

     label4:
        return $r1;

     label5:
        $r4 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LicenseChecker", "Package not found. could not get version code.");

        return "";

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label5;
        catch android.content.pm.PackageManager$NameNotFoundException from label3 to label4 with label5;
    }

    private static java.security.PublicKey a(java.lang.String)
    {
        java.lang.Throwable $r5, $r9;
        byte[] $r1;
        java.security.PublicKey $r4;
        com.android.vending.licensing.a.a $r7;
        java.lang.RuntimeException $r6;
        java.lang.IllegalArgumentException $r8;
        java.security.spec.X509EncodedKeySpec $r3;
        java.security.KeyFactory $r2;
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <com.android.vending.licensing.a.b: byte[] a(java.lang.String)>($r0);

        $r2 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>("RSA");

     label2:
        $r3 = new java.security.spec.X509EncodedKeySpec;

     label3:
        specialinvoke $r3.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>($r1);

        $r4 = virtualinvoke $r2.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r3);

     label4:
        return $r4;

     label5:
        $r5 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r5);

        throw $r6;

     label6:
        $r7 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LicenseChecker", "Could not decode from Base64.");

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r7);

        throw $r8;

     label7:
        $r9 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LicenseChecker", "Invalid key specification.");

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r9);

        throw $r8;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label5;
        catch java.security.NoSuchAlgorithmException from label3 to label4 with label5;
        catch com.android.vending.licensing.a.a from label1 to label2 with label6;
        catch com.android.vending.licensing.a.a from label3 to label4 with label6;
        catch java.security.spec.InvalidKeySpecException from label1 to label2 with label7;
        catch java.security.spec.InvalidKeySpecException from label3 to label4 with label7;
    }

    static java.util.Set a(com.android.vending.licensing.u)
    {
        java.util.Set r1;
        com.android.vending.licensing.u $r0;

        $r0 := @parameter0: com.android.vending.licensing.u;

        r1 = $r0.<com.android.vending.licensing.u: java.util.Set i>;

        return r1;
    }

    private void a(com.android.vending.licensing.h)
    {
        com.android.vending.licensing.h $r1;
        java.lang.Throwable $r3;
        com.android.vending.licensing.u r0;
        java.util.Set $r2;
        boolean $z0;

        r0 := @this: com.android.vending.licensing.u;

        $r1 := @parameter0: com.android.vending.licensing.h;

        entermonitor r0;

     label1:
        $r2 = r0.<com.android.vending.licensing.u: java.util.Set i>;

        interfaceinvoke $r2.<java.util.Set: boolean remove(java.lang.Object)>($r1);

        $r2 = r0.<com.android.vending.licensing.u: java.util.Set i>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.android.vending.licensing.u: void c()>();

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    static void a(com.android.vending.licensing.u, com.android.vending.licensing.h)
    {
        com.android.vending.licensing.h $r1;
        com.android.vending.licensing.u $r0;

        $r0 := @parameter0: com.android.vending.licensing.u;

        $r1 := @parameter1: com.android.vending.licensing.h;

        specialinvoke $r0.<com.android.vending.licensing.u: void b(com.android.vending.licensing.h)>($r1);

        return;
    }

    static java.security.PublicKey b(com.android.vending.licensing.u)
    {
        java.security.PublicKey r1;
        com.android.vending.licensing.u $r0;

        $r0 := @parameter0: com.android.vending.licensing.u;

        r1 = $r0.<com.android.vending.licensing.u: java.security.PublicKey c>;

        return r1;
    }

    private void b()
    {
        com.android.vending.licensing.h $r4;
        com.android.vending.licensing.ILicensingService $r7;
        java.lang.Throwable $r9;
        com.android.vending.licensing.l $r1;
        java.util.Set $r8;
        long $l1;
        com.android.vending.licensing.u r0;
        int $i0;
        java.lang.Object $r3;
        java.lang.StringBuilder $r5;
        java.util.Queue $r2;
        java.lang.String $r6;

        r0 := @this: com.android.vending.licensing.u;

     label01:
        $r2 = r0.<com.android.vending.licensing.u: java.util.Queue j>;

        $r3 = interfaceinvoke $r2.<java.util.Queue: java.lang.Object poll()>();

        $r4 = (com.android.vending.licensing.h) $r3;

        if $r4 == null goto label13;

        $r5 = new java.lang.StringBuilder;

     label02:
        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Calling checkLicense on service for ");

        $r6 = virtualinvoke $r4.<com.android.vending.licensing.h: java.lang.String c()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("LicenseChecker", $r6);

     label03:
        $r7 = r0.<com.android.vending.licensing.u: com.android.vending.licensing.ILicensingService b>;

     label04:
        $i0 = virtualinvoke $r4.<com.android.vending.licensing.h: int b()>();

     label05:
        $l1 = (long) $i0;

     label06:
        $r6 = virtualinvoke $r4.<com.android.vending.licensing.h: java.lang.String c()>();

     label07:
        $r1 = new com.android.vending.licensing.l;

     label08:
        specialinvoke $r1.<com.android.vending.licensing.l: void <init>(com.android.vending.licensing.u,com.android.vending.licensing.h)>(r0, $r4);

        interfaceinvoke $r7.<com.android.vending.licensing.ILicensingService: void a(long,java.lang.String,com.android.vending.licensing.k)>($l1, $r6, $r1);

     label09:
        $r8 = r0.<com.android.vending.licensing.u: java.util.Set i>;

     label10:
        interfaceinvoke $r8.<java.util.Set: boolean add(java.lang.Object)>($r4);

     label11:
        goto label01;

     label12:
        $r9 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("LicenseChecker", "RemoteException in checkLicense call.", $r9);

        specialinvoke r0.<com.android.vending.licensing.u: void b(com.android.vending.licensing.h)>($r4);

        goto label01;

     label13:
        return;

        catch android.os.RemoteException from label02 to label03 with label12;
        catch android.os.RemoteException from label04 to label05 with label12;
        catch android.os.RemoteException from label06 to label07 with label12;
        catch android.os.RemoteException from label08 to label09 with label12;
        catch android.os.RemoteException from label10 to label11 with label12;
    }

    private void b(com.android.vending.licensing.h)
    {
        com.android.vending.licensing.h $r1;
        java.lang.Throwable $r5;
        com.android.vending.licensing.v $r2;
        com.android.vending.licensing.u r0;
        com.android.vending.licensing.s $r3;
        boolean $z0;
        com.android.vending.licensing.q $r4;

        r0 := @this: com.android.vending.licensing.u;

        $r1 := @parameter0: com.android.vending.licensing.h;

        entermonitor r0;

     label1:
        $r3 = r0.<com.android.vending.licensing.u: com.android.vending.licensing.s e>;

        $r2 = <com.android.vending.licensing.v: com.android.vending.licensing.v c>;

        interfaceinvoke $r3.<com.android.vending.licensing.s: void a(com.android.vending.licensing.v,com.android.vending.licensing.g)>($r2, null);

        $r3 = r0.<com.android.vending.licensing.u: com.android.vending.licensing.s e>;

        $z0 = interfaceinvoke $r3.<com.android.vending.licensing.s: boolean a()>();

        if $z0 == 0 goto label3;

        $r4 = virtualinvoke $r1.<com.android.vending.licensing.h: com.android.vending.licensing.q a()>();

        interfaceinvoke $r4.<com.android.vending.licensing.q: void a()>();

     label2:
        exitmonitor r0;

        return;

     label3:
        $r4 = virtualinvoke $r1.<com.android.vending.licensing.h: com.android.vending.licensing.q a()>();

        interfaceinvoke $r4.<com.android.vending.licensing.q: void b()>();

     label4:
        goto label2;

     label5:
        $r5 := @caughtexception;

        exitmonitor r0;

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    static void b(com.android.vending.licensing.u, com.android.vending.licensing.h)
    {
        com.android.vending.licensing.h $r1;
        com.android.vending.licensing.u $r0;

        $r0 := @parameter0: com.android.vending.licensing.u;

        $r1 := @parameter1: com.android.vending.licensing.h;

        specialinvoke $r0.<com.android.vending.licensing.u: void a(com.android.vending.licensing.h)>($r1);

        return;
    }

    static android.os.Handler c(com.android.vending.licensing.u)
    {
        com.android.vending.licensing.u $r0;
        android.os.Handler r1;

        $r0 := @parameter0: com.android.vending.licensing.u;

        r1 = $r0.<com.android.vending.licensing.u: android.os.Handler f>;

        return r1;
    }

    private void c()
    {
        com.android.vending.licensing.ILicensingService $r1;
        java.lang.Throwable $r3;
        android.content.Context $r2;
        com.android.vending.licensing.u r0;

        r0 := @this: com.android.vending.licensing.u;

        $r1 = r0.<com.android.vending.licensing.u: com.android.vending.licensing.ILicensingService b>;

        if $r1 == null goto label4;

        $r2 = r0.<com.android.vending.licensing.u: android.content.Context d>;

     label1:
        virtualinvoke $r2.<android.content.Context: void unbindService(android.content.ServiceConnection)>(r0);

     label2:
        r0.<com.android.vending.licensing.u: com.android.vending.licensing.ILicensingService b> = null;

        return;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LicenseChecker", "Unable to unbind from licensing service (already unbound)");

        goto label2;

     label4:
        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public final void a()
    {
        java.lang.Throwable $r3;
        com.android.vending.licensing.u r0;
        android.os.Looper $r1;
        android.os.Handler $r2;

        r0 := @this: com.android.vending.licensing.u;

        entermonitor r0;

     label1:
        specialinvoke r0.<com.android.vending.licensing.u: void c()>();

        $r2 = r0.<com.android.vending.licensing.u: android.os.Handler f>;

        $r1 = virtualinvoke $r2.<android.os.Handler: android.os.Looper getLooper()>();

        virtualinvoke $r1.<android.os.Looper: void quit()>();

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public final void a(com.android.vending.licensing.q)
    {
        java.lang.Throwable $r13, $r15;
        android.content.Context $r9;
        android.content.Intent $r10;
        java.security.SecureRandom $r7;
        com.android.vending.licensing.w $r14;
        com.android.vending.licensing.u r0;
        com.android.vending.licensing.p $r6;
        int $i0;
        java.lang.String $r2, $r3;
        com.android.vending.licensing.s $r4;
        com.android.vending.licensing.q $r1;
        boolean $z0;
        com.android.vending.licensing.h $r5;
        com.android.vending.licensing.ILicensingService $r8;
        java.lang.Class $r11;
        java.util.Queue $r12;

        r0 := @this: com.android.vending.licensing.u;

        $r1 := @parameter0: com.android.vending.licensing.q;

        entermonitor r0;

     label01:
        $r4 = r0.<com.android.vending.licensing.u: com.android.vending.licensing.s e>;

        $z0 = interfaceinvoke $r4.<com.android.vending.licensing.s: boolean a()>();

        if $z0 == 0 goto label03;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("LicenseChecker", "Using cached license response");

        interfaceinvoke $r1.<com.android.vending.licensing.q: void a()>();

     label02:
        exitmonitor r0;

        return;

     label03:
        $r5 = new com.android.vending.licensing.h;

        $r4 = r0.<com.android.vending.licensing.u: com.android.vending.licensing.s e>;

        $r6 = new com.android.vending.licensing.p;

        specialinvoke $r6.<com.android.vending.licensing.p: void <init>()>();

        $r7 = <com.android.vending.licensing.u: java.security.SecureRandom a>;

        $i0 = virtualinvoke $r7.<java.security.SecureRandom: int nextInt()>();

        $r2 = r0.<com.android.vending.licensing.u: java.lang.String g>;

        $r3 = r0.<com.android.vending.licensing.u: java.lang.String h>;

        specialinvoke $r5.<com.android.vending.licensing.h: void <init>(com.android.vending.licensing.s,com.android.vending.licensing.b,com.android.vending.licensing.q,int,java.lang.String,java.lang.String)>($r4, $r6, $r1, $i0, $r2, $r3);

        $r8 = r0.<com.android.vending.licensing.u: com.android.vending.licensing.ILicensingService b>;

        if $r8 != null goto label15;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("LicenseChecker", "Binding to licensing service.");

     label04:
        $r9 = r0.<com.android.vending.licensing.u: android.content.Context d>;

        $r10 = new android.content.Intent;

        $r11 = class "Lcom/android/vending/licensing/ILicensingService;";

     label05:
        $r2 = virtualinvoke $r11.<java.lang.Class: java.lang.String getName()>();

        specialinvoke $r10.<android.content.Intent: void <init>(java.lang.String)>($r2);

        $z0 = virtualinvoke $r9.<android.content.Context: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)>($r10, r0, 1);

     label06:
        if $z0 == 0 goto label13;

        $r12 = r0.<com.android.vending.licensing.u: java.util.Queue j>;

     label07:
        interfaceinvoke $r12.<java.util.Queue: boolean offer(java.lang.Object)>($r5);

     label08:
        goto label02;

     label09:
        $r13 := @caughtexception;

     label10:
        $r14 = <com.android.vending.licensing.w: com.android.vending.licensing.w e>;

        interfaceinvoke $r1.<com.android.vending.licensing.q: void a(com.android.vending.licensing.w)>($r14);

     label11:
        goto label02;

     label12:
        $r15 := @caughtexception;

        exitmonitor r0;

        throw $r15;

     label13:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LicenseChecker", "Could not bind to service.");

        specialinvoke r0.<com.android.vending.licensing.u: void b(com.android.vending.licensing.h)>($r5);

     label14:
        goto label02;

     label15:
        $r12 = r0.<com.android.vending.licensing.u: java.util.Queue j>;

        interfaceinvoke $r12.<java.util.Queue: boolean offer(java.lang.Object)>($r5);

        specialinvoke r0.<com.android.vending.licensing.u: void b()>();

     label16:
        goto label02;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.SecurityException from label05 to label06 with label09;
        catch java.lang.SecurityException from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label08 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.SecurityException from label13 to label14 with label09;
        catch java.lang.Throwable from label13 to label14 with label12;
        catch java.lang.Throwable from label15 to label16 with label12;
    }

    public final void onServiceConnected(android.content.ComponentName, android.os.IBinder)
    {
        java.lang.Throwable $r5;
        com.android.vending.licensing.ILicensingService $r7;
        android.content.ComponentName $r1;
        android.os.IInterface $r3;
        android.os.IBinder $r2;
        com.android.vending.licensing.u r0;
        java.lang.Object $r4;
        com.android.vending.licensing.n $r6;
        boolean $z0;

        r0 := @this: com.android.vending.licensing.u;

        $r1 := @parameter0: android.content.ComponentName;

        $r2 := @parameter1: android.os.IBinder;

        entermonitor r0;

        if $r2 != null goto label3;

        $r4 = null;

     label1:
        $r7 = (com.android.vending.licensing.ILicensingService) $r4;

        r0.<com.android.vending.licensing.u: com.android.vending.licensing.ILicensingService b> = $r7;

        specialinvoke r0.<com.android.vending.licensing.u: void b()>();

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 = interfaceinvoke $r2.<android.os.IBinder: android.os.IInterface queryLocalInterface(java.lang.String)>("com.android.vending.licensing.ILicensingService");

        if $r3 == null goto label4;

        $z0 = $r3 instanceof com.android.vending.licensing.ILicensingService;

        if $z0 == 0 goto label4;

        $r4 = (com.android.vending.licensing.ILicensingService) $r3;

        goto label1;

     label4:
        $r6 = new com.android.vending.licensing.n;

        $r4 = $r6;

        specialinvoke $r6.<com.android.vending.licensing.n: void <init>(android.os.IBinder)>($r2);

     label5:
        goto label1;

     label6:
        $r5 := @caughtexception;

        exitmonitor r0;

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label5 with label6;
    }

    public final void onServiceDisconnected(android.content.ComponentName)
    {
        java.lang.Throwable $r2;
        com.android.vending.licensing.u r0;
        android.content.ComponentName $r1;

        r0 := @this: com.android.vending.licensing.u;

        $r1 := @parameter0: android.content.ComponentName;

        entermonitor r0;

     label1:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LicenseChecker", "Service unexpectedly disconnected.");

        r0.<com.android.vending.licensing.u: com.android.vending.licensing.ILicensingService b> = null;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
