public class proguard.classfile.util.DynamicClassReferenceInitializer extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.instruction.visitor.InstructionVisitor, proguard.classfile.constant.visitor.ConstantVisitor, proguard.classfile.attribute.visitor.AttributeVisitor
{
    public static final int A;
    public static final int B;
    public static final int C;
    public static final int D;
    public static final int X;
    public static final int Y;
    public static final int Z;
    private final proguard.classfile.instruction.Instruction[] CLASS_FOR_NAME_CAST_INSTRUCTIONS;
    private final proguard.classfile.constant.Constant[] CLASS_FOR_NAME_CONSTANTS;
    private final proguard.classfile.instruction.Instruction[] CONSTANT_CLASS_FOR_NAME_INSTRUCTIONS;
    private final proguard.classfile.constant.Constant[] DOT_CLASS_JAVAC_CONSTANTS;
    private final proguard.classfile.instruction.Instruction[] DOT_CLASS_JAVAC_IMPLEMENTATION_INSTRUCTIONS;
    private final proguard.classfile.instruction.Instruction[] DOT_CLASS_JAVAC_INSTRUCTIONS;
    private final proguard.classfile.constant.Constant[] DOT_CLASS_JIKES_CONSTANTS;
    private final proguard.classfile.instruction.Instruction[] DOT_CLASS_JIKES_IMPLEMENTATION_INSTRUCTIONS;
    private final proguard.classfile.instruction.Instruction[] DOT_CLASS_JIKES_IMPLEMENTATION_INSTRUCTIONS2;
    private final proguard.classfile.instruction.Instruction[] DOT_CLASS_JIKES_INSTRUCTIONS;
    private final proguard.classfile.util.InstructionSequenceMatcher classForNameCastMatcher;
    private final proguard.classfile.util.InstructionSequenceMatcher constantClassForNameMatcher;
    private final proguard.classfile.util.WarningPrinter dependencyWarningPrinter;
    private final proguard.classfile.util.InstructionSequenceMatcher dotClassJavacImplementationMatcher;
    private final proguard.classfile.util.InstructionSequenceMatcher dotClassJavacMatcher;
    private final proguard.classfile.util.InstructionSequenceMatcher dotClassJikesImplementationMatcher;
    private final proguard.classfile.util.InstructionSequenceMatcher dotClassJikesImplementationMatcher2;
    private final proguard.classfile.util.InstructionSequenceMatcher dotClassJikesMatcher;
    private boolean isClassForNameInvocation;
    private final proguard.classfile.ClassPool libraryClassPool;
    private final proguard.classfile.util.WarningPrinter missingNotePrinter;
    private final proguard.util.StringMatcher noteExceptionMatcher;
    private final proguard.classfile.util.WarningPrinter notePrinter;
    private final proguard.classfile.ClassPool programClassPool;

    public void <init>(proguard.classfile.ClassPool, proguard.classfile.ClassPool, proguard.classfile.util.WarningPrinter, proguard.classfile.util.WarningPrinter, proguard.classfile.util.WarningPrinter, proguard.util.StringMatcher)
    {
        proguard.classfile.instruction.Instruction[] $r12;
        proguard.classfile.ClassPool $r1, $r2;
        proguard.classfile.util.DynamicClassReferenceInitializer r0;
        proguard.classfile.constant.Utf8Constant $r11;
        proguard.classfile.constant.ClassConstant $r9;
        proguard.classfile.util.WarningPrinter $r3, $r4, $r5;
        proguard.classfile.util.InstructionSequenceMatcher $r17;
        proguard.classfile.instruction.BranchInstruction $r16;
        proguard.classfile.constant.MethodrefConstant $r8;
        proguard.classfile.instruction.VariableInstruction $r15;
        proguard.classfile.instruction.SimpleInstruction $r14;
        proguard.util.StringMatcher $r6;
        proguard.classfile.instruction.ConstantInstruction $r13;
        proguard.classfile.constant.Constant[] $r7;
        proguard.classfile.constant.NameAndTypeConstant $r10;

        r0 := @this: proguard.classfile.util.DynamicClassReferenceInitializer;

        $r1 := @parameter0: proguard.classfile.ClassPool;

        $r2 := @parameter1: proguard.classfile.ClassPool;

        $r3 := @parameter2: proguard.classfile.util.WarningPrinter;

        $r4 := @parameter3: proguard.classfile.util.WarningPrinter;

        $r5 := @parameter4: proguard.classfile.util.WarningPrinter;

        $r6 := @parameter5: proguard.util.StringMatcher;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        $r7 = newarray (proguard.classfile.constant.Constant)[14];

        $r8 = new proguard.classfile.constant.MethodrefConstant;

        specialinvoke $r8.<proguard.classfile.constant.MethodrefConstant: void <init>(int,int,proguard.classfile.Clazz,proguard.classfile.Member)>(1, 2, null, null);

        $r7[0] = $r8;

        $r9 = new proguard.classfile.constant.ClassConstant;

        specialinvoke $r9.<proguard.classfile.constant.ClassConstant: void <init>(int,proguard.classfile.Clazz)>(3, null);

        $r7[1] = $r9;

        $r10 = new proguard.classfile.constant.NameAndTypeConstant;

        specialinvoke $r10.<proguard.classfile.constant.NameAndTypeConstant: void <init>(int,int)>(4, 5);

        $r7[2] = $r10;

        $r11 = new proguard.classfile.constant.Utf8Constant;

        specialinvoke $r11.<proguard.classfile.constant.Utf8Constant: void <init>(java.lang.String)>("java/lang/Class");

        $r7[3] = $r11;

        $r11 = new proguard.classfile.constant.Utf8Constant;

        specialinvoke $r11.<proguard.classfile.constant.Utf8Constant: void <init>(java.lang.String)>("forName");

        $r7[4] = $r11;

        $r11 = new proguard.classfile.constant.Utf8Constant;

        specialinvoke $r11.<proguard.classfile.constant.Utf8Constant: void <init>(java.lang.String)>("(Ljava/lang/String;)Ljava/lang/Class;");

        $r7[5] = $r11;

        $r8 = new proguard.classfile.constant.MethodrefConstant;

        specialinvoke $r8.<proguard.classfile.constant.MethodrefConstant: void <init>(int,int,proguard.classfile.Clazz,proguard.classfile.Member)>(1, 7, null, null);

        $r7[6] = $r8;

        $r10 = new proguard.classfile.constant.NameAndTypeConstant;

        specialinvoke $r10.<proguard.classfile.constant.NameAndTypeConstant: void <init>(int,int)>(8, 9);

        $r7[7] = $r10;

        $r11 = new proguard.classfile.constant.Utf8Constant;

        specialinvoke $r11.<proguard.classfile.constant.Utf8Constant: void <init>(java.lang.String)>("newInstance");

        $r7[8] = $r11;

        $r11 = new proguard.classfile.constant.Utf8Constant;

        specialinvoke $r11.<proguard.classfile.constant.Utf8Constant: void <init>(java.lang.String)>("()Ljava/lang/Object;");

        $r7[9] = $r11;

        $r8 = new proguard.classfile.constant.MethodrefConstant;

        specialinvoke $r8.<proguard.classfile.constant.MethodrefConstant: void <init>(int,int,proguard.classfile.Clazz,proguard.classfile.Member)>(1, 11, null, null);

        $r7[10] = $r8;

        $r10 = new proguard.classfile.constant.NameAndTypeConstant;

        specialinvoke $r10.<proguard.classfile.constant.NameAndTypeConstant: void <init>(int,int)>(12, 13);

        $r7[11] = $r10;

        $r11 = new proguard.classfile.constant.Utf8Constant;

        specialinvoke $r11.<proguard.classfile.constant.Utf8Constant: void <init>(java.lang.String)>("getComponentType");

        $r7[12] = $r11;

        $r11 = new proguard.classfile.constant.Utf8Constant;

        specialinvoke $r11.<proguard.classfile.constant.Utf8Constant: void <init>(java.lang.String)>("()Ljava/lang/Class;");

        $r7[13] = $r11;

        r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.constant.Constant[] CLASS_FOR_NAME_CONSTANTS> = $r7;

        $r12 = newarray (proguard.classfile.instruction.Instruction)[2];

        $r13 = new proguard.classfile.instruction.ConstantInstruction;

        specialinvoke $r13.<proguard.classfile.instruction.ConstantInstruction: void <init>(byte,int)>(18, 1073741824);

        $r12[0] = $r13;

        $r13 = new proguard.classfile.instruction.ConstantInstruction;

        specialinvoke $r13.<proguard.classfile.instruction.ConstantInstruction: void <init>(byte,int)>(-72, 0);

        $r12[1] = $r13;

        r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.instruction.Instruction[] CONSTANT_CLASS_FOR_NAME_INSTRUCTIONS> = $r12;

        $r12 = newarray (proguard.classfile.instruction.Instruction)[3];

        $r13 = new proguard.classfile.instruction.ConstantInstruction;

        specialinvoke $r13.<proguard.classfile.instruction.ConstantInstruction: void <init>(byte,int)>(-72, 0);

        $r12[0] = $r13;

        $r13 = new proguard.classfile.instruction.ConstantInstruction;

        specialinvoke $r13.<proguard.classfile.instruction.ConstantInstruction: void <init>(byte,int)>(-74, 6);

        $r12[1] = $r13;

        $r13 = new proguard.classfile.instruction.ConstantInstruction;

        specialinvoke $r13.<proguard.classfile.instruction.ConstantInstruction: void <init>(byte,int)>(-64, 1073741824);

        $r12[2] = $r13;

        r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.instruction.Instruction[] CLASS_FOR_NAME_CAST_INSTRUCTIONS> = $r12;

        $r7 = newarray (proguard.classfile.constant.Constant)[3];

        $r8 = new proguard.classfile.constant.MethodrefConstant;

        specialinvoke $r8.<proguard.classfile.constant.MethodrefConstant: void <init>(int,int,proguard.classfile.Clazz,proguard.classfile.Member)>(1073741827, 1, null, null);

        $r7[0] = $r8;

        $r10 = new proguard.classfile.constant.NameAndTypeConstant;

        specialinvoke $r10.<proguard.classfile.constant.NameAndTypeConstant: void <init>(int,int)>(1073741828, 2);

        $r7[1] = $r10;

        $r11 = new proguard.classfile.constant.Utf8Constant;

        specialinvoke $r11.<proguard.classfile.constant.Utf8Constant: void <init>(java.lang.String)>("(Ljava/lang/String;)Ljava/lang/Class;");

        $r7[2] = $r11;

        r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.constant.Constant[] DOT_CLASS_JAVAC_CONSTANTS> = $r7;

        $r12 = newarray (proguard.classfile.instruction.Instruction)[2];

        $r13 = new proguard.classfile.instruction.ConstantInstruction;

        specialinvoke $r13.<proguard.classfile.instruction.ConstantInstruction: void <init>(byte,int)>(18, 1073741824);

        $r12[0] = $r13;

        $r13 = new proguard.classfile.instruction.ConstantInstruction;

        specialinvoke $r13.<proguard.classfile.instruction.ConstantInstruction: void <init>(byte,int)>(-72, 0);

        $r12[1] = $r13;

        r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.instruction.Instruction[] DOT_CLASS_JAVAC_INSTRUCTIONS> = $r12;

        $r7 = newarray (proguard.classfile.constant.Constant)[3];

        $r8 = new proguard.classfile.constant.MethodrefConstant;

        specialinvoke $r8.<proguard.classfile.constant.MethodrefConstant: void <init>(int,int,proguard.classfile.Clazz,proguard.classfile.Member)>(1073741827, 1, null, null);

        $r7[0] = $r8;

        $r10 = new proguard.classfile.constant.NameAndTypeConstant;

        specialinvoke $r10.<proguard.classfile.constant.NameAndTypeConstant: void <init>(int,int)>(1073741828, 2);

        $r7[1] = $r10;

        $r11 = new proguard.classfile.constant.Utf8Constant;

        specialinvoke $r11.<proguard.classfile.constant.Utf8Constant: void <init>(java.lang.String)>("(Ljava/lang/String;Z)Ljava/lang/Class;");

        $r7[2] = $r11;

        r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.constant.Constant[] DOT_CLASS_JIKES_CONSTANTS> = $r7;

        $r12 = newarray (proguard.classfile.instruction.Instruction)[3];

        $r13 = new proguard.classfile.instruction.ConstantInstruction;

        specialinvoke $r13.<proguard.classfile.instruction.ConstantInstruction: void <init>(byte,int)>(18, 1073741824);

        $r12[0] = $r13;

        $r14 = new proguard.classfile.instruction.SimpleInstruction;

        specialinvoke $r14.<proguard.classfile.instruction.SimpleInstruction: void <init>(byte)>(3);

        $r12[1] = $r14;

        $r13 = new proguard.classfile.instruction.ConstantInstruction;

        specialinvoke $r13.<proguard.classfile.instruction.ConstantInstruction: void <init>(byte,int)>(-72, 0);

        $r12[2] = $r13;

        r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.instruction.Instruction[] DOT_CLASS_JIKES_INSTRUCTIONS> = $r12;

        $r12 = newarray (proguard.classfile.instruction.Instruction)[3];

        $r15 = new proguard.classfile.instruction.VariableInstruction;

        specialinvoke $r15.<proguard.classfile.instruction.VariableInstruction: void <init>(byte)>(42);

        $r12[0] = $r15;

        $r13 = new proguard.classfile.instruction.ConstantInstruction;

        specialinvoke $r13.<proguard.classfile.instruction.ConstantInstruction: void <init>(byte,int)>(-72, 0);

        $r12[1] = $r13;

        $r14 = new proguard.classfile.instruction.SimpleInstruction;

        specialinvoke $r14.<proguard.classfile.instruction.SimpleInstruction: void <init>(byte)>(-80);

        $r12[2] = $r14;

        r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.instruction.Instruction[] DOT_CLASS_JAVAC_IMPLEMENTATION_INSTRUCTIONS> = $r12;

        $r12 = newarray (proguard.classfile.instruction.Instruction)[6];

        $r15 = new proguard.classfile.instruction.VariableInstruction;

        specialinvoke $r15.<proguard.classfile.instruction.VariableInstruction: void <init>(byte)>(42);

        $r12[0] = $r15;

        $r13 = new proguard.classfile.instruction.ConstantInstruction;

        specialinvoke $r13.<proguard.classfile.instruction.ConstantInstruction: void <init>(byte,int)>(-72, 0);

        $r12[1] = $r13;

        $r15 = new proguard.classfile.instruction.VariableInstruction;

        specialinvoke $r15.<proguard.classfile.instruction.VariableInstruction: void <init>(byte)>(43);

        $r12[2] = $r15;

        $r16 = new proguard.classfile.instruction.BranchInstruction;

        specialinvoke $r16.<proguard.classfile.instruction.BranchInstruction: void <init>(byte,int)>(-102, 6);

        $r12[3] = $r16;

        $r13 = new proguard.classfile.instruction.ConstantInstruction;

        specialinvoke $r13.<proguard.classfile.instruction.ConstantInstruction: void <init>(byte,int)>(-74, 10);

        $r12[4] = $r13;

        $r14 = new proguard.classfile.instruction.SimpleInstruction;

        specialinvoke $r14.<proguard.classfile.instruction.SimpleInstruction: void <init>(byte)>(-80);

        $r12[5] = $r14;

        r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.instruction.Instruction[] DOT_CLASS_JIKES_IMPLEMENTATION_INSTRUCTIONS> = $r12;

        $r12 = newarray (proguard.classfile.instruction.Instruction)[4];

        $r15 = new proguard.classfile.instruction.VariableInstruction;

        specialinvoke $r15.<proguard.classfile.instruction.VariableInstruction: void <init>(byte)>(42);

        $r12[0] = $r15;

        $r13 = new proguard.classfile.instruction.ConstantInstruction;

        specialinvoke $r13.<proguard.classfile.instruction.ConstantInstruction: void <init>(byte,int)>(-72, 0);

        $r12[1] = $r13;

        $r13 = new proguard.classfile.instruction.ConstantInstruction;

        specialinvoke $r13.<proguard.classfile.instruction.ConstantInstruction: void <init>(byte,int)>(-74, 10);

        $r12[2] = $r13;

        $r14 = new proguard.classfile.instruction.SimpleInstruction;

        specialinvoke $r14.<proguard.classfile.instruction.SimpleInstruction: void <init>(byte)>(-80);

        $r12[3] = $r14;

        r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.instruction.Instruction[] DOT_CLASS_JIKES_IMPLEMENTATION_INSTRUCTIONS2> = $r12;

        $r17 = new proguard.classfile.util.InstructionSequenceMatcher;

        $r7 = r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.constant.Constant[] CLASS_FOR_NAME_CONSTANTS>;

        $r12 = r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.instruction.Instruction[] CONSTANT_CLASS_FOR_NAME_INSTRUCTIONS>;

        specialinvoke $r17.<proguard.classfile.util.InstructionSequenceMatcher: void <init>(proguard.classfile.constant.Constant[],proguard.classfile.instruction.Instruction[])>($r7, $r12);

        r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.util.InstructionSequenceMatcher constantClassForNameMatcher> = $r17;

        $r17 = new proguard.classfile.util.InstructionSequenceMatcher;

        $r7 = r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.constant.Constant[] CLASS_FOR_NAME_CONSTANTS>;

        $r12 = r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.instruction.Instruction[] CLASS_FOR_NAME_CAST_INSTRUCTIONS>;

        specialinvoke $r17.<proguard.classfile.util.InstructionSequenceMatcher: void <init>(proguard.classfile.constant.Constant[],proguard.classfile.instruction.Instruction[])>($r7, $r12);

        r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.util.InstructionSequenceMatcher classForNameCastMatcher> = $r17;

        $r17 = new proguard.classfile.util.InstructionSequenceMatcher;

        $r7 = r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.constant.Constant[] DOT_CLASS_JAVAC_CONSTANTS>;

        $r12 = r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.instruction.Instruction[] DOT_CLASS_JAVAC_INSTRUCTIONS>;

        specialinvoke $r17.<proguard.classfile.util.InstructionSequenceMatcher: void <init>(proguard.classfile.constant.Constant[],proguard.classfile.instruction.Instruction[])>($r7, $r12);

        r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.util.InstructionSequenceMatcher dotClassJavacMatcher> = $r17;

        $r17 = new proguard.classfile.util.InstructionSequenceMatcher;

        $r7 = r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.constant.Constant[] DOT_CLASS_JIKES_CONSTANTS>;

        $r12 = r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.instruction.Instruction[] DOT_CLASS_JIKES_INSTRUCTIONS>;

        specialinvoke $r17.<proguard.classfile.util.InstructionSequenceMatcher: void <init>(proguard.classfile.constant.Constant[],proguard.classfile.instruction.Instruction[])>($r7, $r12);

        r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.util.InstructionSequenceMatcher dotClassJikesMatcher> = $r17;

        $r17 = new proguard.classfile.util.InstructionSequenceMatcher;

        $r7 = r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.constant.Constant[] CLASS_FOR_NAME_CONSTANTS>;

        $r12 = r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.instruction.Instruction[] DOT_CLASS_JAVAC_IMPLEMENTATION_INSTRUCTIONS>;

        specialinvoke $r17.<proguard.classfile.util.InstructionSequenceMatcher: void <init>(proguard.classfile.constant.Constant[],proguard.classfile.instruction.Instruction[])>($r7, $r12);

        r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.util.InstructionSequenceMatcher dotClassJavacImplementationMatcher> = $r17;

        $r17 = new proguard.classfile.util.InstructionSequenceMatcher;

        $r7 = r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.constant.Constant[] CLASS_FOR_NAME_CONSTANTS>;

        $r12 = r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.instruction.Instruction[] DOT_CLASS_JIKES_IMPLEMENTATION_INSTRUCTIONS>;

        specialinvoke $r17.<proguard.classfile.util.InstructionSequenceMatcher: void <init>(proguard.classfile.constant.Constant[],proguard.classfile.instruction.Instruction[])>($r7, $r12);

        r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.util.InstructionSequenceMatcher dotClassJikesImplementationMatcher> = $r17;

        $r17 = new proguard.classfile.util.InstructionSequenceMatcher;

        $r7 = r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.constant.Constant[] CLASS_FOR_NAME_CONSTANTS>;

        $r12 = r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.instruction.Instruction[] DOT_CLASS_JIKES_IMPLEMENTATION_INSTRUCTIONS2>;

        specialinvoke $r17.<proguard.classfile.util.InstructionSequenceMatcher: void <init>(proguard.classfile.constant.Constant[],proguard.classfile.instruction.Instruction[])>($r7, $r12);

        r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.util.InstructionSequenceMatcher dotClassJikesImplementationMatcher2> = $r17;

        r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.ClassPool programClassPool> = $r1;

        r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.ClassPool libraryClassPool> = $r2;

        r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.util.WarningPrinter missingNotePrinter> = $r3;

        r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.util.WarningPrinter dependencyWarningPrinter> = $r4;

        r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.util.WarningPrinter notePrinter> = $r5;

        r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.util.StringMatcher noteExceptionMatcher> = $r6;

        return;
    }

    private proguard.classfile.Clazz findClass(java.lang.String, java.lang.String)
    {
        proguard.classfile.util.WarningPrinter $r5;
        proguard.classfile.ClassPool $r3;
        proguard.classfile.util.DynamicClassReferenceInitializer r0;
        proguard.classfile.Clazz $r4;
        java.lang.StringBuffer $r6;
        java.lang.String $r1, $r2, $r7;
        boolean $z0;

        r0 := @this: proguard.classfile.util.DynamicClassReferenceInitializer;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $z0 = staticinvoke <proguard.classfile.util.ClassUtil: boolean isInternalArrayType(java.lang.String)>($r2);

        if $z0 == 0 goto label1;

        $z0 = staticinvoke <proguard.classfile.util.ClassUtil: boolean isInternalClassType(java.lang.String)>($r2);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r3 = r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.ClassPool programClassPool>;

        $r4 = virtualinvoke $r3.<proguard.classfile.ClassPool: proguard.classfile.Clazz getClass(java.lang.String)>($r2);

        if $r4 != null goto label2;

        $r3 = r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.ClassPool libraryClassPool>;

        $r4 = virtualinvoke $r3.<proguard.classfile.ClassPool: proguard.classfile.Clazz getClass(java.lang.String)>($r2);

        if $r4 != null goto label3;

        $r5 = r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.util.WarningPrinter missingNotePrinter>;

        if $r5 == null goto label3;

        $r5 = r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.util.WarningPrinter missingNotePrinter>;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Note: ");

        $r7 = staticinvoke <proguard.classfile.util.ClassUtil: java.lang.String externalClassName(java.lang.String)>($r1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": can\'t find dynamically referenced class ");

        $r7 = staticinvoke <proguard.classfile.util.ClassUtil: java.lang.String externalClassName(java.lang.String)>($r2);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r5.<proguard.classfile.util.WarningPrinter: void print(java.lang.String,java.lang.String,java.lang.String)>($r1, $r2, $r7);

        return $r4;

     label2:
        $r5 = r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.util.WarningPrinter dependencyWarningPrinter>;

        if $r5 == null goto label3;

        $r5 = r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.util.WarningPrinter dependencyWarningPrinter>;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Warning: library class ");

        $r7 = staticinvoke <proguard.classfile.util.ClassUtil: java.lang.String externalClassName(java.lang.String)>($r1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" depends dynamically on program class ");

        $r7 = staticinvoke <proguard.classfile.util.ClassUtil: java.lang.String externalClassName(java.lang.String)>($r2);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r5.<proguard.classfile.util.WarningPrinter: void print(java.lang.String,java.lang.String,java.lang.String)>($r1, $r2, $r7);

     label3:
        return $r4;
    }

    private boolean isDotClassMethodCode(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.util.InstructionSequenceMatcher, int)
    {
        proguard.classfile.util.InstructionSequenceMatcher $r4;
        proguard.classfile.util.DynamicClassReferenceInitializer r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0, $i1;
        proguard.classfile.Method $r2;
        boolean $z0;

        r0 := @this: proguard.classfile.util.DynamicClassReferenceInitializer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.util.InstructionSequenceMatcher;

        $i0 := @parameter4: int;

        $i1 = $r3.<proguard.classfile.attribute.CodeAttribute: int u4codeLength>;

        if $i1 >= $i0 goto label1;

        return 0;

     label1:
        virtualinvoke $r4.<proguard.classfile.util.InstructionSequenceMatcher: void reset()>();

        virtualinvoke $r3.<proguard.classfile.attribute.CodeAttribute: void instructionsAccept(proguard.classfile.Clazz,proguard.classfile.Method,int,int,proguard.classfile.instruction.visitor.InstructionVisitor)>($r1, $r2, 0, $i0, $r4);

        $z0 = virtualinvoke $r4.<proguard.classfile.util.InstructionSequenceMatcher: boolean isMatching()>();

        return $z0;
    }

    private boolean isDotClassMethodref(proguard.classfile.Clazz, int)
    {
        proguard.classfile.util.DynamicClassReferenceInitializer r0;
        proguard.classfile.Clazz $r1;
        int $i0;
        boolean z0;

        r0 := @this: proguard.classfile.util.DynamicClassReferenceInitializer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $i0 := @parameter1: int;

        r0.<proguard.classfile.util.DynamicClassReferenceInitializer: boolean isClassForNameInvocation> = 0;

        interfaceinvoke $r1.<proguard.classfile.Clazz: void constantPoolEntryAccept(int,proguard.classfile.constant.visitor.ConstantVisitor)>($i0, r0);

        z0 = r0.<proguard.classfile.util.DynamicClassReferenceInitializer: boolean isClassForNameInvocation>;

        return z0;
    }

    public void visitAnyAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.Attribute)
    {
        proguard.classfile.util.DynamicClassReferenceInitializer r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.Attribute $r2;

        r0 := @this: proguard.classfile.util.DynamicClassReferenceInitializer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.Attribute;

        return;
    }

    public void visitAnyInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.Instruction)
    {
        proguard.classfile.util.InstructionSequenceMatcher $r5;
        proguard.classfile.util.DynamicClassReferenceInitializer r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.instruction.Instruction $r4;
        int $i0, $i1;
        proguard.classfile.Method $r2;
        boolean $z0;

        r0 := @this: proguard.classfile.util.DynamicClassReferenceInitializer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.Instruction;

        $r5 = r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.util.InstructionSequenceMatcher constantClassForNameMatcher>;

        virtualinvoke $r4.<proguard.classfile.instruction.Instruction: void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.visitor.InstructionVisitor)>($r1, $r2, $r3, $i0, $r5);

        $r5 = r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.util.InstructionSequenceMatcher constantClassForNameMatcher>;

        $z0 = virtualinvoke $r5.<proguard.classfile.util.InstructionSequenceMatcher: boolean isMatching()>();

        if $z0 == 0 goto label1;

        $r5 = r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.util.InstructionSequenceMatcher constantClassForNameMatcher>;

        $i1 = virtualinvoke $r5.<proguard.classfile.util.InstructionSequenceMatcher: int matchedConstantIndex(int)>(1073741824);

        interfaceinvoke $r1.<proguard.classfile.Clazz: void constantPoolEntryAccept(int,proguard.classfile.constant.visitor.ConstantVisitor)>($i1, r0);

        $r5 = r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.util.InstructionSequenceMatcher classForNameCastMatcher>;

        virtualinvoke $r5.<proguard.classfile.util.InstructionSequenceMatcher: void reset()>();

     label1:
        $r5 = r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.util.InstructionSequenceMatcher classForNameCastMatcher>;

        virtualinvoke $r4.<proguard.classfile.instruction.Instruction: void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.visitor.InstructionVisitor)>($r1, $r2, $r3, $i0, $r5);

        $r5 = r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.util.InstructionSequenceMatcher classForNameCastMatcher>;

        $z0 = virtualinvoke $r5.<proguard.classfile.util.InstructionSequenceMatcher: boolean isMatching()>();

        if $z0 == 0 goto label2;

        $r5 = r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.util.InstructionSequenceMatcher classForNameCastMatcher>;

        $i1 = virtualinvoke $r5.<proguard.classfile.util.InstructionSequenceMatcher: int matchedConstantIndex(int)>(1073741824);

        interfaceinvoke $r1.<proguard.classfile.Clazz: void constantPoolEntryAccept(int,proguard.classfile.constant.visitor.ConstantVisitor)>($i1, r0);

     label2:
        $r5 = r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.util.InstructionSequenceMatcher dotClassJavacMatcher>;

        virtualinvoke $r4.<proguard.classfile.instruction.Instruction: void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.visitor.InstructionVisitor)>($r1, $r2, $r3, $i0, $r5);

        $r5 = r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.util.InstructionSequenceMatcher dotClassJavacMatcher>;

        $z0 = virtualinvoke $r5.<proguard.classfile.util.InstructionSequenceMatcher: boolean isMatching()>();

        if $z0 == 0 goto label3;

        $r5 = r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.util.InstructionSequenceMatcher dotClassJavacMatcher>;

        $i1 = virtualinvoke $r5.<proguard.classfile.util.InstructionSequenceMatcher: int matchedConstantIndex(int)>(0);

        $z0 = specialinvoke r0.<proguard.classfile.util.DynamicClassReferenceInitializer: boolean isDotClassMethodref(proguard.classfile.Clazz,int)>($r1, $i1);

        if $z0 == 0 goto label3;

        $r5 = r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.util.InstructionSequenceMatcher dotClassJavacMatcher>;

        $i1 = virtualinvoke $r5.<proguard.classfile.util.InstructionSequenceMatcher: int matchedConstantIndex(int)>(1073741824);

        interfaceinvoke $r1.<proguard.classfile.Clazz: void constantPoolEntryAccept(int,proguard.classfile.constant.visitor.ConstantVisitor)>($i1, r0);

     label3:
        $r5 = r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.util.InstructionSequenceMatcher dotClassJikesMatcher>;

        virtualinvoke $r4.<proguard.classfile.instruction.Instruction: void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.visitor.InstructionVisitor)>($r1, $r2, $r3, $i0, $r5);

        $r5 = r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.util.InstructionSequenceMatcher dotClassJikesMatcher>;

        $z0 = virtualinvoke $r5.<proguard.classfile.util.InstructionSequenceMatcher: boolean isMatching()>();

        if $z0 == 0 goto label4;

        $r5 = r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.util.InstructionSequenceMatcher dotClassJikesMatcher>;

        $i0 = virtualinvoke $r5.<proguard.classfile.util.InstructionSequenceMatcher: int matchedConstantIndex(int)>(0);

        $z0 = specialinvoke r0.<proguard.classfile.util.DynamicClassReferenceInitializer: boolean isDotClassMethodref(proguard.classfile.Clazz,int)>($r1, $i0);

        if $z0 == 0 goto label4;

        $r5 = r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.util.InstructionSequenceMatcher dotClassJikesMatcher>;

        $i0 = virtualinvoke $r5.<proguard.classfile.util.InstructionSequenceMatcher: int matchedConstantIndex(int)>(1073741824);

        interfaceinvoke $r1.<proguard.classfile.Clazz: void constantPoolEntryAccept(int,proguard.classfile.constant.visitor.ConstantVisitor)>($i0, r0);

     label4:
        return;
    }

    public void visitClassConstant(proguard.classfile.Clazz, proguard.classfile.constant.ClassConstant)
    {
        proguard.classfile.constant.ClassConstant $r2;
        proguard.classfile.util.WarningPrinter $r5;
        proguard.util.StringMatcher $r3;
        proguard.classfile.util.DynamicClassReferenceInitializer r0;
        proguard.classfile.Clazz $r1;
        java.lang.StringBuffer $r7;
        java.lang.String $r4, $r6, $r8;
        boolean $z0;

        r0 := @this: proguard.classfile.util.DynamicClassReferenceInitializer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.ClassConstant;

        $r3 = r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.util.StringMatcher noteExceptionMatcher>;

        if $r3 == null goto label1;

        $r3 = r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.util.StringMatcher noteExceptionMatcher>;

        $r4 = virtualinvoke $r2.<proguard.classfile.constant.ClassConstant: java.lang.String getName(proguard.classfile.Clazz)>($r1);

        $z0 = interfaceinvoke $r3.<proguard.util.StringMatcher: boolean matches(java.lang.String)>($r4);

        if $z0 != 0 goto label2;

     label1:
        $r5 = r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.util.WarningPrinter notePrinter>;

        $r4 = interfaceinvoke $r1.<proguard.classfile.Clazz: java.lang.String getName()>();

        $r6 = virtualinvoke $r2.<proguard.classfile.constant.ClassConstant: java.lang.String getName(proguard.classfile.Clazz)>($r1);

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Note: ");

        $r8 = interfaceinvoke $r1.<proguard.classfile.Clazz: java.lang.String getName()>();

        $r8 = staticinvoke <proguard.classfile.util.ClassUtil: java.lang.String externalClassName(java.lang.String)>($r8);

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" calls \'(");

        $r8 = virtualinvoke $r2.<proguard.classfile.constant.ClassConstant: java.lang.String getName(proguard.classfile.Clazz)>($r1);

        $r8 = staticinvoke <proguard.classfile.util.ClassUtil: java.lang.String externalClassName(java.lang.String)>($r8);

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")Class.forName(variable).newInstance()\'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r5.<proguard.classfile.util.WarningPrinter: void print(java.lang.String,java.lang.String,java.lang.String)>($r4, $r6, $r8);

     label2:
        return;
    }

    public void visitCodeAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute)
    {
        proguard.classfile.util.DynamicClassReferenceInitializer r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.util.InstructionSequenceMatcher $r4;
        proguard.classfile.Method $r2;
        boolean $z0;

        r0 := @this: proguard.classfile.util.DynamicClassReferenceInitializer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 = r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.util.InstructionSequenceMatcher dotClassJavacImplementationMatcher>;

        $z0 = specialinvoke r0.<proguard.classfile.util.DynamicClassReferenceInitializer: boolean isDotClassMethodCode(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.util.InstructionSequenceMatcher,int)>($r1, $r2, $r3, $r4, 5);

        if $z0 != 0 goto label1;

        $r4 = r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.util.InstructionSequenceMatcher dotClassJikesImplementationMatcher>;

        $z0 = specialinvoke r0.<proguard.classfile.util.DynamicClassReferenceInitializer: boolean isDotClassMethodCode(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.util.InstructionSequenceMatcher,int)>($r1, $r2, $r3, $r4, 12);

        if $z0 != 0 goto label1;

        $r4 = r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.util.InstructionSequenceMatcher dotClassJikesImplementationMatcher2>;

        $z0 = specialinvoke r0.<proguard.classfile.util.DynamicClassReferenceInitializer: boolean isDotClassMethodCode(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.util.InstructionSequenceMatcher,int)>($r1, $r2, $r3, $r4, 8);

        if $z0 == 0 goto label3;

     label1:
        $z0 = 1;

     label2:
        r0.<proguard.classfile.util.DynamicClassReferenceInitializer: boolean isClassForNameInvocation> = $z0;

        return;

     label3:
        $z0 = 0;

        goto label2;
    }

    public void visitMethodrefConstant(proguard.classfile.Clazz, proguard.classfile.constant.MethodrefConstant)
    {
        proguard.classfile.attribute.visitor.AllAttributeVisitor $r7;
        proguard.classfile.constant.MethodrefConstant $r2;
        proguard.classfile.ClassPool $r6;
        proguard.classfile.util.DynamicClassReferenceInitializer r0;
        proguard.classfile.Clazz $r1;
        java.lang.String $r3, $r4, $r5;
        boolean $z0;

        r0 := @this: proguard.classfile.util.DynamicClassReferenceInitializer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.MethodrefConstant;

        $r3 = virtualinvoke $r2.<proguard.classfile.constant.MethodrefConstant: java.lang.String getType(proguard.classfile.Clazz)>($r1);

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("(Ljava/lang/String;)Ljava/lang/Class;");

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("(Ljava/lang/String;Z)Ljava/lang/Class;");

        if $z0 == 0 goto label6;

     label1:
        $r4 = virtualinvoke $r2.<proguard.classfile.constant.MethodrefConstant: java.lang.String getName(proguard.classfile.Clazz)>($r1);

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("class$");

        if $z0 != 0 goto label2;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("class");

        if $z0 == 0 goto label4;

     label2:
        $z0 = 1;

     label3:
        r0.<proguard.classfile.util.DynamicClassReferenceInitializer: boolean isClassForNameInvocation> = $z0;

        $z0 = r0.<proguard.classfile.util.DynamicClassReferenceInitializer: boolean isClassForNameInvocation>;

        if $z0 == 0 goto label5;

        return;

     label4:
        $z0 = 0;

        goto label3;

     label5:
        $r5 = virtualinvoke $r2.<proguard.classfile.constant.MethodrefConstant: java.lang.String getClassName(proguard.classfile.Clazz)>($r1);

        $r6 = r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.ClassPool programClassPool>;

        $r1 = virtualinvoke $r6.<proguard.classfile.ClassPool: proguard.classfile.Clazz getClass(java.lang.String)>($r5);

        if $r1 == null goto label6;

        $r7 = new proguard.classfile.attribute.visitor.AllAttributeVisitor;

        specialinvoke $r7.<proguard.classfile.attribute.visitor.AllAttributeVisitor: void <init>(proguard.classfile.attribute.visitor.AttributeVisitor)>(r0);

        interfaceinvoke $r1.<proguard.classfile.Clazz: void methodAccept(java.lang.String,java.lang.String,proguard.classfile.visitor.MemberVisitor)>($r4, $r3, $r7);

     label6:
        return;
    }

    public void visitStringConstant(proguard.classfile.Clazz, proguard.classfile.constant.StringConstant)
    {
        proguard.classfile.util.DynamicClassReferenceInitializer r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.constant.StringConstant $r2;
        java.lang.String $r3, $r4;

        r0 := @this: proguard.classfile.util.DynamicClassReferenceInitializer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.StringConstant;

        $r3 = virtualinvoke $r2.<proguard.classfile.constant.StringConstant: java.lang.String getString(proguard.classfile.Clazz)>($r1);

        $r3 = staticinvoke <proguard.classfile.util.ClassUtil: java.lang.String internalClassName(java.lang.String)>($r3);

        $r4 = interfaceinvoke $r1.<proguard.classfile.Clazz: java.lang.String getName()>();

        $r1 = specialinvoke r0.<proguard.classfile.util.DynamicClassReferenceInitializer: proguard.classfile.Clazz findClass(java.lang.String,java.lang.String)>($r4, $r3);

        $r2.<proguard.classfile.constant.StringConstant: proguard.classfile.Clazz referencedClass> = $r1;

        return;
    }

    public static void <clinit>()
    {
        <proguard.classfile.util.DynamicClassReferenceInitializer: int Z> = 1073741826;

        <proguard.classfile.util.DynamicClassReferenceInitializer: int Y> = 1073741825;

        <proguard.classfile.util.DynamicClassReferenceInitializer: int X> = 1073741824;

        <proguard.classfile.util.DynamicClassReferenceInitializer: int D> = 1073741830;

        <proguard.classfile.util.DynamicClassReferenceInitializer: int C> = 1073741829;

        <proguard.classfile.util.DynamicClassReferenceInitializer: int B> = 1073741828;

        <proguard.classfile.util.DynamicClassReferenceInitializer: int A> = 1073741827;

        return;
    }
}
