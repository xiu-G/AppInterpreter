class org.jsoup.examples.HtmlToPlainText$FormattingVisitor extends java.lang.Object implements org.jsoup.select.NodeVisitor
{
    private static final int maxWidth;
    private java.lang.StringBuilder accum;
    final org.jsoup.examples.HtmlToPlainText this$0;
    private int width;

    private void <init>(org.jsoup.examples.HtmlToPlainText)
    {
        java.lang.StringBuilder $r2;
        org.jsoup.examples.HtmlToPlainText$FormattingVisitor r0;
        org.jsoup.examples.HtmlToPlainText $r1;

        r0 := @this: org.jsoup.examples.HtmlToPlainText$FormattingVisitor;

        $r1 := @parameter0: org.jsoup.examples.HtmlToPlainText;

        r0.<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: org.jsoup.examples.HtmlToPlainText this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: int width> = 0;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        r0.<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: java.lang.StringBuilder accum> = $r2;

        return;
    }

    void <init>(org.jsoup.examples.HtmlToPlainText, org.jsoup.examples.HtmlToPlainText$1)
    {
        org.jsoup.examples.HtmlToPlainText$1 $r2;
        org.jsoup.examples.HtmlToPlainText$FormattingVisitor r0;
        org.jsoup.examples.HtmlToPlainText $r1;

        r0 := @this: org.jsoup.examples.HtmlToPlainText$FormattingVisitor;

        $r1 := @parameter0: org.jsoup.examples.HtmlToPlainText;

        $r2 := @parameter1: org.jsoup.examples.HtmlToPlainText$1;

        specialinvoke r0.<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: void <init>(org.jsoup.examples.HtmlToPlainText)>($r1);

        return;
    }

    private void append(java.lang.String)
    {
        org.jsoup.examples.HtmlToPlainText$FormattingVisitor r0;
        java.lang.String[] $r5;
        int $i0, $i1, $i2;
        java.lang.StringBuilder $r2, $r3;
        java.lang.String $r1, $r4;
        boolean $z0;

        r0 := @this: org.jsoup.examples.HtmlToPlainText$FormattingVisitor;

        $r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("\n");

        if $z0 == 0 goto label01;

        r0.<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: int width> = 0;

     label01:
        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(" ");

        if $z0 == 0 goto label02;

        $r2 = r0.<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: java.lang.StringBuilder accum>;

        $i0 = virtualinvoke $r2.<java.lang.StringBuilder: int length()>();

        if $i0 == 0 goto label10;

        $r2 = r0.<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: java.lang.StringBuilder accum>;

        $r3 = r0.<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: java.lang.StringBuilder accum>;

        $i0 = virtualinvoke $r3.<java.lang.StringBuilder: int length()>();

        $i0 = $i0 + -1;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String substring(int)>($i0);

        $r5 = newarray (java.lang.String)[2];

        $r5[0] = " ";

        $r5[1] = "\n";

        $z0 = staticinvoke <org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>($r4, $r5);

        if $z0 == 0 goto label02;

        return;

     label02:
        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i1 = r0.<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: int width>;

        $i0 = $i0 + $i1;

        if $i0 <= 80 goto label09;

        $r5 = virtualinvoke $r1.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\s+");

        $i0 = 0;

     label03:
        $i1 = lengthof $r5;

        if $i0 >= $i1 goto label10;

        $r1 = $r5[$i0];

        $i1 = lengthof $r5;

        $i1 = $i1 + -1;

        if $i0 != $i1 goto label07;

        $z0 = 1;

     label04:
        if $z0 != 0 goto label05;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

     label05:
        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i2 = r0.<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: int width>;

        $i1 = $i1 + $i2;

        if $i1 <= 80 goto label08;

        $r2 = r0.<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: java.lang.StringBuilder accum>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        r0.<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: int width> = $i1;

     label06:
        $i0 = $i0 + 1;

        goto label03;

     label07:
        $z0 = 0;

        goto label04;

     label08:
        $r2 = r0.<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: java.lang.StringBuilder accum>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $i1 = r0.<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: int width>;

        $i2 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i1 = $i1 + $i2;

        r0.<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: int width> = $i1;

        goto label06;

     label09:
        $r2 = r0.<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: java.lang.StringBuilder accum>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $i0 = r0.<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: int width>;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i0 = $i0 + $i1;

        r0.<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: int width> = $i0;

     label10:
        return;
    }

    public void head(org.jsoup.nodes.Node, int)
    {
        org.jsoup.nodes.Node r1;
        org.jsoup.examples.HtmlToPlainText$FormattingVisitor r0;
        org.jsoup.nodes.TextNode r3;
        int $i0;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: org.jsoup.examples.HtmlToPlainText$FormattingVisitor;

        r1 := @parameter0: org.jsoup.nodes.Node;

        $i0 := @parameter1: int;

        $r2 = virtualinvoke r1.<org.jsoup.nodes.Node: java.lang.String nodeName()>();

        $z0 = r1 instanceof org.jsoup.nodes.TextNode;

        if $z0 == 0 goto label1;

        r3 = (org.jsoup.nodes.TextNode) r1;

        $r2 = virtualinvoke r3.<org.jsoup.nodes.TextNode: java.lang.String text()>();

        specialinvoke r0.<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: void append(java.lang.String)>($r2);

        return;

     label1:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("li");

        if $z0 == 0 goto label2;

        specialinvoke r0.<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: void append(java.lang.String)>("\n * ");

     label2:
        return;
    }

    public void tail(org.jsoup.nodes.Node, int)
    {
        org.jsoup.nodes.Node $r1;
        org.jsoup.examples.HtmlToPlainText$FormattingVisitor r0;
        java.lang.Object[] $r4;
        int $i0;
        java.lang.String[] $r3;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: org.jsoup.examples.HtmlToPlainText$FormattingVisitor;

        $r1 := @parameter0: org.jsoup.nodes.Node;

        $i0 := @parameter1: int;

        $r2 = virtualinvoke $r1.<org.jsoup.nodes.Node: java.lang.String nodeName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("br");

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: void append(java.lang.String)>("\n");

        return;

     label1:
        $r3 = newarray (java.lang.String)[6];

        $r3[0] = "p";

        $r3[1] = "h1";

        $r3[2] = "h2";

        $r3[3] = "h3";

        $r3[4] = "h4";

        $r3[5] = "h5";

        $z0 = staticinvoke <org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>($r2, $r3);

        if $z0 == 0 goto label2;

        specialinvoke r0.<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: void append(java.lang.String)>("\n\n");

        return;

     label2:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("a");

        if $z0 == 0 goto label3;

        $r4 = newarray (java.lang.Object)[1];

        $r2 = virtualinvoke $r1.<org.jsoup.nodes.Node: java.lang.String absUrl(java.lang.String)>("href");

        $r4[0] = $r2;

        $r2 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(" <%s>", $r4);

        specialinvoke r0.<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: void append(java.lang.String)>($r2);

     label3:
        return;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r2;
        org.jsoup.examples.HtmlToPlainText$FormattingVisitor r0;
        java.lang.String $r1;

        r0 := @this: org.jsoup.examples.HtmlToPlainText$FormattingVisitor;

        $r2 = r0.<org.jsoup.examples.HtmlToPlainText$FormattingVisitor: java.lang.StringBuilder accum>;

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }

    public static void <clinit>()
    {
        <org.jsoup.examples.HtmlToPlainText$FormattingVisitor: int maxWidth> = 80;

        return;
    }
}
