public class net.davidashen.util.Hashtable extends java.util.Dictionary implements java.lang.Cloneable
{
    private java.lang.Object[] a;
    private int b;
    private int c;
    private int d;

    public void <init>()
    {
        net.davidashen.util.Hashtable r0;

        r0 := @this: net.davidashen.util.Hashtable;

        specialinvoke r0.<net.davidashen.util.Hashtable: void <init>(int)>(1);

        return;
    }

    public void <init>(int)
    {
        java.lang.Object[] $r1;
        int $i0, $i1;
        float $f0;
        net.davidashen.util.Hashtable r0;

        r0 := @this: net.davidashen.util.Hashtable;

        $i0 := @parameter0: int;

        specialinvoke r0.<java.util.Dictionary: void <init>()>();

        $i0 = $i0 + 1;

        $f0 = (float) $i0;

        $f0 = $f0 / 0.5F;

        $i0 = (int) $f0;

        r0.<net.davidashen.util.Hashtable: int b> = 1;

     label1:
        $i1 = r0.<net.davidashen.util.Hashtable: int b>;

        if $i1 < $i0 goto label2;

        $i1 = r0.<net.davidashen.util.Hashtable: int b>;

        $i1 = $i1 << 1;

        $r1 = newarray (java.lang.Object)[$i1];

        r0.<net.davidashen.util.Hashtable: java.lang.Object[] a> = $r1;

        $f0 = (float) $i0;

        $f0 = $f0 * 0.5F;

        $i0 = (int) $f0;

        r0.<net.davidashen.util.Hashtable: int d> = $i0;

        return;

     label2:
        $i1 = r0.<net.davidashen.util.Hashtable: int b>;

        $i1 = $i1 << 1;

        r0.<net.davidashen.util.Hashtable: int b> = $i1;

        goto label1;
    }

    public final void clear()
    {
        java.lang.Object[] $r1;
        int $i0, $i1;
        net.davidashen.util.Hashtable r0;

        r0 := @this: net.davidashen.util.Hashtable;

        $i0 = r0.<net.davidashen.util.Hashtable: int b>;

     label1:
        $i1 = -1;

        $i0 = $i0 + $i1;

        if $i0 >= 0 goto label2;

        r0.<net.davidashen.util.Hashtable: int c> = 0;

        return;

     label2:
        $r1 = r0.<net.davidashen.util.Hashtable: java.lang.Object[] a>;

        $r1[$i0] = null;

        $r1 = r0.<net.davidashen.util.Hashtable: java.lang.Object[] a>;

        $i1 = r0.<net.davidashen.util.Hashtable: int b>;

        $i1 = $i1 | $i0;

        $r1[$i1] = null;

        goto label1;
    }

    public java.lang.Object clone()
    {
        java.lang.Throwable $r6;
        java.lang.Object[] $r1, $r4, $r5;
        net.davidashen.util.Hashtable r0, $r3;
        int $i0;
        java.lang.Object $r2;

        r0 := @this: net.davidashen.util.Hashtable;

     label1:
        $r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

     label2:
        $r3 = (net.davidashen.util.Hashtable) $r2;

        $r1 = r0.<net.davidashen.util.Hashtable: java.lang.Object[] a>;

        $i0 = lengthof $r1;

        $r1 = newarray (java.lang.Object)[$i0];

        $r3.<net.davidashen.util.Hashtable: java.lang.Object[] a> = $r1;

        $r4 = r0.<net.davidashen.util.Hashtable: java.lang.Object[] a>;

        $r1 = $r3.<net.davidashen.util.Hashtable: java.lang.Object[] a>;

        $r5 = r0.<net.davidashen.util.Hashtable: java.lang.Object[] a>;

        $i0 = lengthof $r5;

     label3:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r1, 0, $i0);

     label4:
        return $r3;

     label5:
        $r6 := @caughtexception;

        return null;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label5;
        catch java.lang.CloneNotSupportedException from label3 to label4 with label5;
    }

    public final boolean containsKey(java.lang.Object)
    {
        java.lang.Object $r1;
        net.davidashen.util.Hashtable r0;

        r0 := @this: net.davidashen.util.Hashtable;

        $r1 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<net.davidashen.util.Hashtable: java.lang.Object get(java.lang.Object)>($r1);

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public final java.util.Enumeration elements()
    {
        java.lang.Object[] $r2;
        int $i0;
        net.davidashen.util.Hashtable r0;
        jh $r1;

        r0 := @this: net.davidashen.util.Hashtable;

        $r1 = new jh;

        $r2 = r0.<net.davidashen.util.Hashtable: java.lang.Object[] a>;

        $i0 = r0.<net.davidashen.util.Hashtable: int b>;

        specialinvoke $r1.<jh: void <init>(java.lang.Object[],int)>($r2, $i0);

        return $r1;
    }

    public final java.lang.Object get(java.lang.Object)
    {
        java.lang.Object[] $r2;
        int $i0, $i1;
        java.lang.Object $r1, $r3;
        net.davidashen.util.Hashtable r0;
        boolean $z0;

        r0 := @this: net.davidashen.util.Hashtable;

        $r1 := @parameter0: java.lang.Object;

        $i0 = r0.<net.davidashen.util.Hashtable: int c>;

        if $i0 == 0 goto label2;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i1 = r0.<net.davidashen.util.Hashtable: int b>;

        $i1 = $i1 - 1;

        $i0 = $i0 & $i1;

     label1:
        $r2 = r0.<net.davidashen.util.Hashtable: java.lang.Object[] a>;

        $r3 = $r2[$i0];

        if $r3 != null goto label3;

     label2:
        return null;

     label3:
        $r2 = r0.<net.davidashen.util.Hashtable: java.lang.Object[] a>;

        $r3 = $r2[$i0];

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label4;

        $r2 = r0.<net.davidashen.util.Hashtable: java.lang.Object[] a>;

        $i1 = r0.<net.davidashen.util.Hashtable: int b>;

        $i0 = $i0 | $i1;

        $r1 = $r2[$i0];

        return $r1;

     label4:
        if $i0 != 0 goto label5;

        $i0 = r0.<net.davidashen.util.Hashtable: int b>;

        $i0 = $i0 - 1;

        goto label1;

     label5:
        $i0 = $i0 - 1;

        goto label1;
    }

    public final boolean isEmpty()
    {
        int $i0;
        net.davidashen.util.Hashtable r0;

        r0 := @this: net.davidashen.util.Hashtable;

        $i0 = r0.<net.davidashen.util.Hashtable: int c>;

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public final java.util.Enumeration keys()
    {
        java.lang.Object[] $r2;
        net.davidashen.util.Hashtable r0;
        jh $r1;

        r0 := @this: net.davidashen.util.Hashtable;

        $r1 = new jh;

        $r2 = r0.<net.davidashen.util.Hashtable: java.lang.Object[] a>;

        specialinvoke $r1.<jh: void <init>(java.lang.Object[],int)>($r2, 0);

        return $r1;
    }

    public final java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        java.lang.Object[] $r3, $r5;
        net.davidashen.util.Hashtable r0;
        int $i0, $i1, $i2;
        float $f0;
        java.lang.Object $r1, $r2, $r4;
        boolean $z0;

        r0 := @this: net.davidashen.util.Hashtable;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i1 = r0.<net.davidashen.util.Hashtable: int b>;

        $i1 = $i1 - 1;

        $i0 = $i0 & $i1;

     label01:
        $r3 = r0.<net.davidashen.util.Hashtable: java.lang.Object[] a>;

        $r4 = $r3[$i0];

        if $r4 != null goto label05;

        $i1 = r0.<net.davidashen.util.Hashtable: int c>;

        $i2 = r0.<net.davidashen.util.Hashtable: int d>;

        if $i1 < $i2 goto label04;

        $r3 = r0.<net.davidashen.util.Hashtable: java.lang.Object[] a>;

        $i0 = lengthof $r3;

        r0.<net.davidashen.util.Hashtable: int b> = $i0;

        $i0 = r0.<net.davidashen.util.Hashtable: int b>;

        $f0 = (float) $i0;

        $f0 = $f0 * 0.5F;

        $i0 = (int) $f0;

        r0.<net.davidashen.util.Hashtable: int d> = $i0;

        $r3 = r0.<net.davidashen.util.Hashtable: java.lang.Object[] a>;

        $i0 = r0.<net.davidashen.util.Hashtable: int b>;

        $i0 = $i0 << 1;

        $r5 = newarray (java.lang.Object)[$i0];

        r0.<net.davidashen.util.Hashtable: java.lang.Object[] a> = $r5;

        $i0 = lengthof $r3;

        $i0 = $i0 >> 1;

     label02:
        if $i0 > 0 goto label08;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i1 = r0.<net.davidashen.util.Hashtable: int b>;

        $i1 = $i1 - 1;

        $i0 = $i0 & $i1;

     label03:
        $r3 = r0.<net.davidashen.util.Hashtable: java.lang.Object[] a>;

        $r4 = $r3[$i0];

        if $r4 != null goto label12;

     label04:
        $i1 = r0.<net.davidashen.util.Hashtable: int c>;

        $i1 = $i1 + 1;

        r0.<net.davidashen.util.Hashtable: int c> = $i1;

        $r3 = r0.<net.davidashen.util.Hashtable: java.lang.Object[] a>;

        $r3[$i0] = $r1;

        $r3 = r0.<net.davidashen.util.Hashtable: java.lang.Object[] a>;

        $i1 = r0.<net.davidashen.util.Hashtable: int b>;

        $i0 = $i0 | $i1;

        $r3[$i0] = $r2;

        return null;

     label05:
        $r3 = r0.<net.davidashen.util.Hashtable: java.lang.Object[] a>;

        $r4 = $r3[$i0];

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label06;

        $i1 = r0.<net.davidashen.util.Hashtable: int b>;

        $i0 = $i0 | $i1;

        $r3 = r0.<net.davidashen.util.Hashtable: java.lang.Object[] a>;

        $r1 = $r3[$i0];

        $r3 = r0.<net.davidashen.util.Hashtable: java.lang.Object[] a>;

        $r3[$i0] = $r2;

        return $r1;

     label06:
        if $i0 != 0 goto label07;

        $i0 = r0.<net.davidashen.util.Hashtable: int b>;

        $i0 = $i0 - 1;

        goto label01;

     label07:
        $i0 = $i0 - 1;

        goto label01;

     label08:
        $i1 = -1;

        $i0 = $i0 + $i1;

        $r4 = $r3[$i0];

        if $r4 == null goto label02;

        $r4 = $r3[$i0];

        $i1 = virtualinvoke $r4.<java.lang.Object: int hashCode()>();

        $i2 = r0.<net.davidashen.util.Hashtable: int b>;

        $i2 = $i2 - 1;

        $i1 = $i1 & $i2;

     label09:
        $r5 = r0.<net.davidashen.util.Hashtable: java.lang.Object[] a>;

        $r4 = $r5[$i1];

        if $r4 != null goto label10;

        $r5 = r0.<net.davidashen.util.Hashtable: java.lang.Object[] a>;

        $r4 = $r3[$i0];

        $r5[$i1] = $r4;

        $r5 = r0.<net.davidashen.util.Hashtable: java.lang.Object[] a>;

        $i2 = r0.<net.davidashen.util.Hashtable: int b>;

        $i1 = $i1 | $i2;

        $i2 = lengthof $r3;

        $i2 = $i2 >> 1;

        $i2 = $i2 + $i0;

        $r4 = $r3[$i2];

        $r5[$i1] = $r4;

        goto label02;

     label10:
        if $i1 != 0 goto label11;

        $i1 = r0.<net.davidashen.util.Hashtable: int b>;

        $i1 = $i1 - 1;

        goto label09;

     label11:
        $i1 = $i1 - 1;

        goto label09;

     label12:
        if $i0 != 0 goto label13;

        $i0 = r0.<net.davidashen.util.Hashtable: int b>;

        $i0 = $i0 - 1;

        goto label03;

     label13:
        $i0 = $i0 - 1;

        goto label03;
    }

    public final java.lang.Object remove(java.lang.Object)
    {
        java.lang.Object[] $r2, $r4;
        net.davidashen.util.Hashtable r0;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r1, $r3;
        boolean $z0;

        r0 := @this: net.davidashen.util.Hashtable;

        $r1 := @parameter0: java.lang.Object;

        $i0 = r0.<net.davidashen.util.Hashtable: int c>;

        if $i0 <= 0 goto label02;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i1 = r0.<net.davidashen.util.Hashtable: int b>;

        $i1 = $i1 - 1;

        $i0 = $i0 & $i1;

     label01:
        $r2 = r0.<net.davidashen.util.Hashtable: java.lang.Object[] a>;

        $r3 = $r2[$i0];

        if $r3 != null goto label03;

     label02:
        return null;

     label03:
        $r2 = r0.<net.davidashen.util.Hashtable: java.lang.Object[] a>;

        $r3 = $r2[$i0];

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label11;

        $r2 = r0.<net.davidashen.util.Hashtable: java.lang.Object[] a>;

        $i1 = r0.<net.davidashen.util.Hashtable: int b>;

        $i1 = $i1 | $i0;

        $r1 = $r2[$i1];

     label04:
        $r2 = r0.<net.davidashen.util.Hashtable: java.lang.Object[] a>;

        $r2[$i0] = null;

        $r2 = r0.<net.davidashen.util.Hashtable: java.lang.Object[] a>;

        $i1 = r0.<net.davidashen.util.Hashtable: int b>;

        $i1 = $i1 | $i0;

        $r2[$i1] = null;

        $i1 = $i0;

     label05:
        if $i1 != 0 goto label10;

        $i1 = r0.<net.davidashen.util.Hashtable: int b>;

        $i1 = $i1 - 1;

     label06:
        $r2 = r0.<net.davidashen.util.Hashtable: java.lang.Object[] a>;

        $r3 = $r2[$i1];

        if $r3 == null goto label09;

        $r2 = r0.<net.davidashen.util.Hashtable: java.lang.Object[] a>;

        $r3 = $r2[$i1];

        $i2 = virtualinvoke $r3.<java.lang.Object: int hashCode()>();

        $i3 = r0.<net.davidashen.util.Hashtable: int b>;

        $i3 = $i3 - 1;

        $i2 = $i2 & $i3;

        if $i1 > $i2 goto label07;

        if $i2 < $i0 goto label05;

     label07:
        if $i2 >= $i0 goto label08;

        if $i0 < $i1 goto label05;

     label08:
        if $i0 >= $i1 goto label09;

        if $i1 <= $i2 goto label05;

     label09:
        $r2 = r0.<net.davidashen.util.Hashtable: java.lang.Object[] a>;

        $r4 = r0.<net.davidashen.util.Hashtable: java.lang.Object[] a>;

        $r3 = $r4[$i1];

        $r2[$i0] = $r3;

        $r2 = r0.<net.davidashen.util.Hashtable: java.lang.Object[] a>;

        $i2 = r0.<net.davidashen.util.Hashtable: int b>;

        $i0 = $i0 | $i2;

        $r4 = r0.<net.davidashen.util.Hashtable: java.lang.Object[] a>;

        $i2 = r0.<net.davidashen.util.Hashtable: int b>;

        $i2 = $i2 | $i1;

        $r3 = $r4[$i2];

        $r2[$i0] = $r3;

        $r2 = r0.<net.davidashen.util.Hashtable: java.lang.Object[] a>;

        $r3 = $r2[$i1];

        if $r3 != null goto label13;

        $i0 = r0.<net.davidashen.util.Hashtable: int c>;

        $i0 = $i0 - 1;

        r0.<net.davidashen.util.Hashtable: int c> = $i0;

        return $r1;

     label10:
        $i1 = $i1 - 1;

        goto label06;

     label11:
        if $i0 != 0 goto label12;

        $i0 = r0.<net.davidashen.util.Hashtable: int b>;

        $i0 = $i0 - 1;

        goto label01;

     label12:
        $i0 = $i0 - 1;

        goto label01;

     label13:
        $i0 = $i1;

        goto label04;
    }

    public final int size()
    {
        int i0;
        net.davidashen.util.Hashtable r0;

        r0 := @this: net.davidashen.util.Hashtable;

        i0 = r0.<net.davidashen.util.Hashtable: int c>;

        return i0;
    }
}
