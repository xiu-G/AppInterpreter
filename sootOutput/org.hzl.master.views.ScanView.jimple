public class org.hzl.master.views.ScanView extends android.view.View implements java.lang.Runnable
{
    private android.graphics.Bitmap a;
    private android.graphics.Bitmap b;
    private android.graphics.Bitmap c;
    private android.graphics.Paint d;
    private android.graphics.Rect e;
    private android.graphics.Rect f;
    private int g;
    private int h;
    private int i;
    private float j;
    private boolean k;
    private int l;

    public void <init>(android.content.Context)
    {
        android.content.Context $r1;
        org.hzl.master.views.ScanView r0;

        r0 := @this: org.hzl.master.views.ScanView;

        $r1 := @parameter0: android.content.Context;

        specialinvoke r0.<org.hzl.master.views.ScanView: void <init>(android.content.Context,android.util.AttributeSet,int)>($r1, null, 0);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        android.content.Context $r1;
        org.hzl.master.views.ScanView r0;
        android.util.AttributeSet $r2;

        r0 := @this: org.hzl.master.views.ScanView;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: android.util.AttributeSet;

        specialinvoke r0.<org.hzl.master.views.ScanView: void <init>(android.content.Context,android.util.AttributeSet,int)>($r1, $r2, 0);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int)
    {
        android.content.Context $r1;
        android.graphics.Rect $r5;
        org.hzl.master.views.ScanView r0;
        android.util.AttributeSet $r2;
        android.graphics.Bitmap $r3;
        int $i0, $i1;
        android.graphics.Paint $r4;

        r0 := @this: org.hzl.master.views.ScanView;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: android.util.AttributeSet;

        $i0 := @parameter2: int;

        specialinvoke r0.<android.view.View: void <init>(android.content.Context,android.util.AttributeSet,int)>($r1, null, 0);

        $i0 = staticinvoke <org.hzl.master.utils.c: int a(int)>(144);

        r0.<org.hzl.master.views.ScanView: int i> = $i0;

        r0.<org.hzl.master.views.ScanView: float j> = 0.0F;

        r0.<org.hzl.master.views.ScanView: boolean k> = 1;

        virtualinvoke r0.<org.hzl.master.views.ScanView: void setDrawingCacheEnabled(boolean)>(1);

        $r3 = staticinvoke <org.hzl.master.utils.c: android.graphics.Bitmap a(android.content.Context,java.lang.String)>($r1, "scanner_bg.png");

        r0.<org.hzl.master.views.ScanView: android.graphics.Bitmap a> = $r3;

        $r3 = staticinvoke <org.hzl.master.utils.c: android.graphics.Bitmap a(android.content.Context,java.lang.String)>($r1, "scanner_top.png");

        r0.<org.hzl.master.views.ScanView: android.graphics.Bitmap b> = $r3;

        $r3 = staticinvoke <org.hzl.master.utils.c: android.graphics.Bitmap a(android.content.Context,java.lang.String)>($r1, "scanner_main.png");

        r0.<org.hzl.master.views.ScanView: android.graphics.Bitmap c> = $r3;

        $r3 = r0.<org.hzl.master.views.ScanView: android.graphics.Bitmap b>;

        $i0 = virtualinvoke $r3.<android.graphics.Bitmap: int getWidth()>();

        r0.<org.hzl.master.views.ScanView: int g> = $i0;

        $r3 = r0.<org.hzl.master.views.ScanView: android.graphics.Bitmap b>;

        $i0 = virtualinvoke $r3.<android.graphics.Bitmap: int getHeight()>();

        r0.<org.hzl.master.views.ScanView: int h> = $i0;

        $r4 = new android.graphics.Paint;

        specialinvoke $r4.<android.graphics.Paint: void <init>()>();

        r0.<org.hzl.master.views.ScanView: android.graphics.Paint d> = $r4;

        $r4 = r0.<org.hzl.master.views.ScanView: android.graphics.Paint d>;

        virtualinvoke $r4.<android.graphics.Paint: void setAntiAlias(boolean)>(1);

        $r5 = new android.graphics.Rect;

        $i1 = r0.<org.hzl.master.views.ScanView: int g>;

        $i0 = r0.<org.hzl.master.views.ScanView: int h>;

        specialinvoke $r5.<android.graphics.Rect: void <init>(int,int,int,int)>(0, 0, $i1, $i0);

        r0.<org.hzl.master.views.ScanView: android.graphics.Rect e> = $r5;

        return;
    }

    public final void a()
    {
        org.hzl.master.views.ScanView r0;

        r0 := @this: org.hzl.master.views.ScanView;

        r0.<org.hzl.master.views.ScanView: boolean k> = 1;

        staticinvoke <org.hzl.master.utils.w: org.hzl.master.utils.w a()>();

        staticinvoke <org.hzl.master.utils.w: void a(java.lang.Runnable)>(r0);

        return;
    }

    public final void b()
    {
        org.hzl.master.views.ScanView r0;

        r0 := @this: org.hzl.master.views.ScanView;

        r0.<org.hzl.master.views.ScanView: boolean k> = 0;

        return;
    }

    public final void c()
    {
        org.hzl.master.views.ScanView r0;
        android.graphics.Bitmap $r1;

        r0 := @this: org.hzl.master.views.ScanView;

        virtualinvoke r0.<org.hzl.master.views.ScanView: void destroyDrawingCache()>();

        $r1 = r0.<org.hzl.master.views.ScanView: android.graphics.Bitmap a>;

        virtualinvoke $r1.<android.graphics.Bitmap: void recycle()>();

        $r1 = r0.<org.hzl.master.views.ScanView: android.graphics.Bitmap b>;

        virtualinvoke $r1.<android.graphics.Bitmap: void recycle()>();

        $r1 = r0.<org.hzl.master.views.ScanView: android.graphics.Bitmap c>;

        virtualinvoke $r1.<android.graphics.Bitmap: void recycle()>();

        return;
    }

    protected void onDraw(android.graphics.Canvas)
    {
        android.graphics.Rect $r3, $r4;
        org.hzl.master.views.ScanView r0;
        android.graphics.Bitmap $r2;
        int $i0;
        float $f0, $f1, $f2;
        android.graphics.Canvas $r1;

        r0 := @this: org.hzl.master.views.ScanView;

        $r1 := @parameter0: android.graphics.Canvas;

        specialinvoke r0.<android.view.View: void onDraw(android.graphics.Canvas)>($r1);

        $r2 = r0.<org.hzl.master.views.ScanView: android.graphics.Bitmap c>;

        $r3 = r0.<org.hzl.master.views.ScanView: android.graphics.Rect e>;

        $r4 = r0.<org.hzl.master.views.ScanView: android.graphics.Rect f>;

        virtualinvoke $r1.<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.Rect,android.graphics.Paint)>($r2, $r3, $r4, null);

        $r2 = r0.<org.hzl.master.views.ScanView: android.graphics.Bitmap a>;

        $r3 = r0.<org.hzl.master.views.ScanView: android.graphics.Rect e>;

        $r4 = r0.<org.hzl.master.views.ScanView: android.graphics.Rect f>;

        virtualinvoke $r1.<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.Rect,android.graphics.Paint)>($r2, $r3, $r4, null);

        virtualinvoke $r1.<android.graphics.Canvas: int save()>();

        $i0 = r0.<org.hzl.master.views.ScanView: int l>;

        $f0 = (float) $i0;

        $i0 = r0.<org.hzl.master.views.ScanView: int i>;

        $i0 = $i0 / 2;

        $f1 = (float) $i0;

        $i0 = r0.<org.hzl.master.views.ScanView: int i>;

        $i0 = $i0 / 2;

        $f2 = (float) $i0;

        virtualinvoke $r1.<android.graphics.Canvas: void rotate(float,float,float)>($f0, $f1, $f2);

        $r2 = r0.<org.hzl.master.views.ScanView: android.graphics.Bitmap b>;

        $r3 = r0.<org.hzl.master.views.ScanView: android.graphics.Rect e>;

        $r4 = r0.<org.hzl.master.views.ScanView: android.graphics.Rect f>;

        virtualinvoke $r1.<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.Rect,android.graphics.Paint)>($r2, $r3, $r4, null);

        virtualinvoke $r1.<android.graphics.Canvas: void restore()>();

        return;
    }

    protected void onMeasure(int, int)
    {
        int $i0, $i1;
        org.hzl.master.views.ScanView r0;

        r0 := @this: org.hzl.master.views.ScanView;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        specialinvoke r0.<android.view.View: void onMeasure(int,int)>($i0, $i1);

        $i0 = virtualinvoke r0.<org.hzl.master.views.ScanView: int getMeasuredHeight()>();

        $i1 = virtualinvoke r0.<org.hzl.master.views.ScanView: int getMeasuredWidth()>();

        if $i0 <= $i1 goto label1;

        virtualinvoke r0.<org.hzl.master.views.ScanView: void setMeasuredDimension(int,int)>($i1, $i1);

        r0.<org.hzl.master.views.ScanView: int i> = $i1;

        return;

     label1:
        virtualinvoke r0.<org.hzl.master.views.ScanView: void setMeasuredDimension(int,int)>($i0, $i0);

        r0.<org.hzl.master.views.ScanView: int i> = $i0;

        return;
    }

    protected void onSizeChanged(int, int, int, int)
    {
        android.graphics.Rect $r1;
        org.hzl.master.views.ScanView r0;
        int $i0, $i1, $i2, $i3, $i4;
        float $f0;

        r0 := @this: org.hzl.master.views.ScanView;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        specialinvoke r0.<android.view.View: void onSizeChanged(int,int,int,int)>($i0, $i1, $i2, $i3);

        if $i0 <= $i1 goto label2;

        r0.<org.hzl.master.views.ScanView: int i> = $i1;

        $i0 = r0.<org.hzl.master.views.ScanView: int i>;

        $i0 = $i0 / 2;

        $i1 = virtualinvoke r0.<org.hzl.master.views.ScanView: int getPaddingTop()>();

        $i2 = virtualinvoke r0.<org.hzl.master.views.ScanView: int getPaddingBottom()>();

        $i1 = $i1 + $i2;

        $i0 = $i0 - $i1;

        $f0 = (float) $i0;

        r0.<org.hzl.master.views.ScanView: float j> = $f0;

     label1:
        $i0 = virtualinvoke r0.<org.hzl.master.views.ScanView: int getWidth()>();

        $i0 = $i0 / 2;

        $f0 = r0.<org.hzl.master.views.ScanView: float j>;

        $i1 = (int) $f0;

        $i0 = $i0 - $i1;

        $i1 = virtualinvoke r0.<org.hzl.master.views.ScanView: int getPaddingLeft()>();

        $i0 = $i0 + $i1;

        $i1 = virtualinvoke r0.<org.hzl.master.views.ScanView: int getWidth()>();

        $i1 = $i1 / 2;

        $f0 = r0.<org.hzl.master.views.ScanView: float j>;

        $i2 = (int) $f0;

        $i1 = $i1 + $i2;

        $i2 = virtualinvoke r0.<org.hzl.master.views.ScanView: int getPaddingRight()>();

        $i1 = $i1 - $i2;

        $i2 = virtualinvoke r0.<org.hzl.master.views.ScanView: int getHeight()>();

        $i2 = $i2 / 2;

        $f0 = r0.<org.hzl.master.views.ScanView: float j>;

        $i3 = (int) $f0;

        $i2 = $i2 - $i3;

        $i3 = virtualinvoke r0.<org.hzl.master.views.ScanView: int getPaddingTop()>();

        $i2 = $i2 + $i3;

        $i3 = virtualinvoke r0.<org.hzl.master.views.ScanView: int getHeight()>();

        $i3 = $i3 / 2;

        $f0 = r0.<org.hzl.master.views.ScanView: float j>;

        $i4 = (int) $f0;

        $i3 = $i3 + $i4;

        $i4 = virtualinvoke r0.<org.hzl.master.views.ScanView: int getPaddingBottom()>();

        $i3 = $i3 - $i4;

        $r1 = new android.graphics.Rect;

        specialinvoke $r1.<android.graphics.Rect: void <init>(int,int,int,int)>($i0, $i2, $i1, $i3);

        r0.<org.hzl.master.views.ScanView: android.graphics.Rect f> = $r1;

        return;

     label2:
        r0.<org.hzl.master.views.ScanView: int i> = $i0;

        $i0 = r0.<org.hzl.master.views.ScanView: int i>;

        $i0 = $i0 / 2;

        $i1 = virtualinvoke r0.<org.hzl.master.views.ScanView: int getPaddingLeft()>();

        $i2 = virtualinvoke r0.<org.hzl.master.views.ScanView: int getPaddingRight()>();

        $i1 = $i1 + $i2;

        $i0 = $i0 - $i1;

        $f0 = (float) $i0;

        r0.<org.hzl.master.views.ScanView: float j> = $f0;

        goto label1;
    }

    public void run()
    {
        int $i0;
        org.hzl.master.views.ScanView r0;
        boolean $z0;

        r0 := @this: org.hzl.master.views.ScanView;

     label1:
        $z0 = r0.<org.hzl.master.views.ScanView: boolean k>;

        if $z0 != 0 goto label2;

        return;

     label2:
        $i0 = r0.<org.hzl.master.views.ScanView: int l>;

        $i0 = $i0 + -3;

        r0.<org.hzl.master.views.ScanView: int l> = $i0;

        virtualinvoke r0.<org.hzl.master.views.ScanView: void postInvalidate()>();

        staticinvoke <android.os.SystemClock: void sleep(long)>(10L);

        goto label1;
    }
}
