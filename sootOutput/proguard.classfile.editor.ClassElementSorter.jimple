public class proguard.classfile.editor.ClassElementSorter extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.visitor.ClassVisitor
{
    private final proguard.classfile.visitor.ClassVisitor attributeSorter;
    private final proguard.classfile.visitor.ClassVisitor constantPoolSorter;
    private final proguard.classfile.visitor.ClassVisitor interfaceSorter;

    public void <init>()
    {
        proguard.classfile.editor.InterfaceSorter $r1;
        proguard.classfile.editor.ClassElementSorter r0;
        proguard.classfile.editor.ConstantPoolSorter $r2;
        proguard.classfile.editor.AttributeSorter $r3;

        r0 := @this: proguard.classfile.editor.ClassElementSorter;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        $r1 = new proguard.classfile.editor.InterfaceSorter;

        specialinvoke $r1.<proguard.classfile.editor.InterfaceSorter: void <init>()>();

        r0.<proguard.classfile.editor.ClassElementSorter: proguard.classfile.visitor.ClassVisitor interfaceSorter> = $r1;

        $r2 = new proguard.classfile.editor.ConstantPoolSorter;

        specialinvoke $r2.<proguard.classfile.editor.ConstantPoolSorter: void <init>()>();

        r0.<proguard.classfile.editor.ClassElementSorter: proguard.classfile.visitor.ClassVisitor constantPoolSorter> = $r2;

        $r3 = new proguard.classfile.editor.AttributeSorter;

        specialinvoke $r3.<proguard.classfile.editor.AttributeSorter: void <init>()>();

        r0.<proguard.classfile.editor.ClassElementSorter: proguard.classfile.visitor.ClassVisitor attributeSorter> = $r3;

        return;
    }

    public void visitProgramClass(proguard.classfile.ProgramClass)
    {
        proguard.classfile.editor.ClassElementSorter r0;
        proguard.classfile.ProgramClass $r1;
        proguard.classfile.visitor.ClassVisitor $r2;

        r0 := @this: proguard.classfile.editor.ClassElementSorter;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 = r0.<proguard.classfile.editor.ClassElementSorter: proguard.classfile.visitor.ClassVisitor constantPoolSorter>;

        virtualinvoke $r1.<proguard.classfile.ProgramClass: void accept(proguard.classfile.visitor.ClassVisitor)>($r2);

        $r2 = r0.<proguard.classfile.editor.ClassElementSorter: proguard.classfile.visitor.ClassVisitor interfaceSorter>;

        virtualinvoke $r1.<proguard.classfile.ProgramClass: void accept(proguard.classfile.visitor.ClassVisitor)>($r2);

        $r2 = r0.<proguard.classfile.editor.ClassElementSorter: proguard.classfile.visitor.ClassVisitor attributeSorter>;

        virtualinvoke $r1.<proguard.classfile.ProgramClass: void accept(proguard.classfile.visitor.ClassVisitor)>($r2);

        return;
    }
}
