final class com.google.gson.ObjectNavigator extends java.lang.Object
{
    private final com.google.gson.ExclusionStrategy exclusionStrategy;
    private final com.google.gson.ReflectingFieldNavigator reflectingFieldNavigator;

    void <init>(com.google.gson.ExclusionStrategy)
    {
        com.google.gson.NullExclusionStrategy $r2;
        com.google.gson.ReflectingFieldNavigator $r3;
        com.google.gson.ObjectNavigator r0;
        com.google.gson.ExclusionStrategy $r1;

        r0 := @this: com.google.gson.ObjectNavigator;

        $r1 := @parameter0: com.google.gson.ExclusionStrategy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $r1 != null goto label1;

        $r2 = new com.google.gson.NullExclusionStrategy;

        $r1 = $r2;

        specialinvoke $r2.<com.google.gson.NullExclusionStrategy: void <init>()>();

     label1:
        r0.<com.google.gson.ObjectNavigator: com.google.gson.ExclusionStrategy exclusionStrategy> = $r1;

        $r3 = new com.google.gson.ReflectingFieldNavigator;

        $r1 = r0.<com.google.gson.ObjectNavigator: com.google.gson.ExclusionStrategy exclusionStrategy>;

        specialinvoke $r3.<com.google.gson.ReflectingFieldNavigator: void <init>(com.google.gson.ExclusionStrategy)>($r1);

        r0.<com.google.gson.ObjectNavigator: com.google.gson.ReflectingFieldNavigator reflectingFieldNavigator> = $r3;

        return;
    }

    private static boolean isPrimitiveOrString(java.lang.Object)
    {
        java.lang.Object $r0;
        java.lang.Class $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        if $r1 == class "Ljava/lang/Object;" goto label1;

        if $r1 == class "Ljava/lang/String;" goto label1;

        $r1 = staticinvoke <com.google.gson.Primitives: java.lang.Class unwrap(java.lang.Class)>($r1);

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isPrimitive()>();

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public void accept(com.google.gson.ObjectTypePair, com.google.gson.ObjectNavigator$Visitor)
    {
        com.google.gson.ObjectNavigator$Visitor $r2;
        java.lang.Throwable $r7;
        com.google.gson.ReflectingFieldNavigator $r8;
        com.google.gson.ObjectTypePair $r1;
        java.lang.reflect.Type $r4;
        java.lang.Class $r5;
        java.lang.Object $r6;
        com.google.gson.ObjectNavigator r0;
        com.google.gson.ExclusionStrategy $r3;
        boolean $z0;

        r0 := @this: com.google.gson.ObjectNavigator;

        $r1 := @parameter0: com.google.gson.ObjectTypePair;

        $r2 := @parameter1: com.google.gson.ObjectNavigator$Visitor;

        $r3 = r0.<com.google.gson.ObjectNavigator: com.google.gson.ExclusionStrategy exclusionStrategy>;

        $r4 = $r1.<com.google.gson.ObjectTypePair: java.lang.reflect.Type type>;

        $r5 = staticinvoke <com.google.gson.internal.$Gson$Types: java.lang.Class getRawType(java.lang.reflect.Type)>($r4);

        $z0 = interfaceinvoke $r3.<com.google.gson.ExclusionStrategy: boolean shouldSkipClass(java.lang.Class)>($r5);

        if $z0 == 0 goto label01;

        return;

     label01:
        $z0 = interfaceinvoke $r2.<com.google.gson.ObjectNavigator$Visitor: boolean visitUsingCustomHandler(com.google.gson.ObjectTypePair)>($r1);

        if $z0 != 0 goto label16;

        $r6 = virtualinvoke $r1.<com.google.gson.ObjectTypePair: java.lang.Object getObject()>();

        if $r6 != null goto label02;

        $r6 = interfaceinvoke $r2.<com.google.gson.ObjectNavigator$Visitor: java.lang.Object getTarget()>();

     label02:
        if $r6 == null goto label16;

        virtualinvoke $r1.<com.google.gson.ObjectTypePair: void setObject(java.lang.Object)>($r6);

        interfaceinvoke $r2.<com.google.gson.ObjectNavigator$Visitor: void start(com.google.gson.ObjectTypePair)>($r1);

     label03:
        $r4 = $r1.<com.google.gson.ObjectTypePair: java.lang.reflect.Type type>;

        $z0 = staticinvoke <com.google.gson.internal.$Gson$Types: boolean isArray(java.lang.reflect.Type)>($r4);

     label04:
        if $z0 == 0 goto label07;

     label05:
        $r4 = $r1.<com.google.gson.ObjectTypePair: java.lang.reflect.Type type>;

        interfaceinvoke $r2.<com.google.gson.ObjectNavigator$Visitor: void visitArray(java.lang.Object,java.lang.reflect.Type)>($r6, $r4);

     label06:
        interfaceinvoke $r2.<com.google.gson.ObjectNavigator$Visitor: void end(com.google.gson.ObjectTypePair)>($r1);

        return;

     label07:
        $r4 = $r1.<com.google.gson.ObjectTypePair: java.lang.reflect.Type type>;

     label08:
        if $r4 != class "Ljava/lang/Object;" goto label14;

     label09:
        $z0 = staticinvoke <com.google.gson.ObjectNavigator: boolean isPrimitiveOrString(java.lang.Object)>($r6);

     label10:
        if $z0 == 0 goto label14;

     label11:
        interfaceinvoke $r2.<com.google.gson.ObjectNavigator$Visitor: void visitPrimitive(java.lang.Object)>($r6);

        interfaceinvoke $r2.<com.google.gson.ObjectNavigator$Visitor: java.lang.Object getTarget()>();

     label12:
        goto label06;

     label13:
        $r7 := @caughtexception;

        interfaceinvoke $r2.<com.google.gson.ObjectNavigator$Visitor: void end(com.google.gson.ObjectTypePair)>($r1);

        throw $r7;

     label14:
        interfaceinvoke $r2.<com.google.gson.ObjectNavigator$Visitor: void startVisitingObject(java.lang.Object)>($r6);

        $r8 = r0.<com.google.gson.ObjectNavigator: com.google.gson.ReflectingFieldNavigator reflectingFieldNavigator>;

        virtualinvoke $r8.<com.google.gson.ReflectingFieldNavigator: void visitFieldsReflectively(com.google.gson.ObjectTypePair,com.google.gson.ObjectNavigator$Visitor)>($r1, $r2);

     label15:
        goto label06;

     label16:
        return;

        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }
}
