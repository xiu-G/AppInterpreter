public class com.aishukeclassmfkb.util.BitmapUtil extends java.lang.Object
{

    public void <init>()
    {
        com.aishukeclassmfkb.util.BitmapUtil r0;

        r0 := @this: com.aishukeclassmfkb.util.BitmapUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static int computeInitialSampleSize(android.graphics.BitmapFactory$Options, int, int)
    {
        int $i0, $i1, $i2, $i3, $i4;
        android.graphics.BitmapFactory$Options $r0;
        double $d0, $d1, $d2, $d3;

        $r0 := @parameter0: android.graphics.BitmapFactory$Options;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 = $r0.<android.graphics.BitmapFactory$Options: int outWidth>;

        $d1 = (double) $i2;

        $i2 = $r0.<android.graphics.BitmapFactory$Options: int outHeight>;

        $d2 = (double) $i2;

        $i2 = -1;

        if $i1 != $i2 goto label3;

        $i2 = 1;

     label1:
        $i3 = -1;

        if $i0 != $i3 goto label4;

        $i3 = 128;

     label2:
        if $i3 >= $i2 goto label5;

        return $i2;

     label3:
        $d3 = $d1 * $d2;

        $d0 = (double) $i1;

        $d0 = $d3 / $d0;

        $d0 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        $d0 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        $i2 = (int) $d0;

        goto label1;

     label4:
        $d0 = (double) $i0;

        $d1 = $d1 / $d0;

        $d1 = staticinvoke <java.lang.Math: double floor(double)>($d1);

        $d0 = (double) $i0;

        $d2 = $d2 / $d0;

        $d2 = staticinvoke <java.lang.Math: double floor(double)>($d2);

        $d2 = staticinvoke <java.lang.Math: double min(double,double)>($d1, $d2);

        $i3 = (int) $d2;

        goto label2;

     label5:
        $i4 = -1;

        if $i1 != $i4 goto label6;

        $i1 = -1;

        if $i0 != $i1 goto label6;

        return 1;

     label6:
        $i1 = -1;

        if $i0 == $i1 goto label7;

        return $i3;

     label7:
        return $i2;
    }

    public static int computeSampleSize(android.graphics.BitmapFactory$Options, int, int)
    {
        int $i0, $i1;
        android.graphics.BitmapFactory$Options $r0;

        $r0 := @parameter0: android.graphics.BitmapFactory$Options;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i0 = staticinvoke <com.aishukeclassmfkb.util.BitmapUtil: int computeInitialSampleSize(android.graphics.BitmapFactory$Options,int,int)>($r0, $i0, $i1);

        if $i0 > 8 goto label2;

        $i1 = 1;

     label1:
        if $i1 >= $i0 goto label3;

        $i1 = $i1 << 1;

        goto label1;

     label2:
        $i0 = $i0 + 7;

        $i0 = $i0 / 8;

        $i0 = $i0 * 8;

        return $i0;

     label3:
        return $i1;
    }

    public static android.graphics.Bitmap getBitmap(android.content.Context, java.lang.Integer, java.lang.Integer, java.lang.Integer)
    {
        android.content.Context $r0;
        java.lang.Integer $r1, $r2, $r3;
        android.graphics.Bitmap$Config $r7;
        java.lang.Exception $r9;
        android.graphics.Bitmap $r6;
        int $i0, $i1, $i2;
        java.lang.OutOfMemoryError $r8;
        android.graphics.BitmapFactory$Options $r4;
        android.content.res.Resources $r5;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: java.lang.Integer;

        $r2 := @parameter2: java.lang.Integer;

        $r3 := @parameter3: java.lang.Integer;

        $r4 = new android.graphics.BitmapFactory$Options;

        specialinvoke $r4.<android.graphics.BitmapFactory$Options: void <init>()>();

        $r4.<android.graphics.BitmapFactory$Options: boolean inJustDecodeBounds> = 1;

        $r5 = virtualinvoke $r0.<android.content.Context: android.content.res.Resources getResources()>();

        $i0 = virtualinvoke $r1.<java.lang.Integer: int intValue()>();

        staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeResource(android.content.res.Resources,int,android.graphics.BitmapFactory$Options)>($r5, $i0, $r4);

        $i0 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();

        $i1 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        $i1 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();

        $i2 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        $i1 = $i1 * $i2;

        $i0 = staticinvoke <com.aishukeclassmfkb.util.BitmapUtil: int computeSampleSize(android.graphics.BitmapFactory$Options,int,int)>($r4, $i0, $i1);

        $r4.<android.graphics.BitmapFactory$Options: int inSampleSize> = $i0;

        $r4.<android.graphics.BitmapFactory$Options: boolean inJustDecodeBounds> = 0;

        $r4.<android.graphics.BitmapFactory$Options: boolean inInputShareable> = 1;

        $r4.<android.graphics.BitmapFactory$Options: boolean inPurgeable> = 1;

     label01:
        $i0 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();

     label02:
        $r4.<android.graphics.BitmapFactory$Options: int outWidth> = $i0;

     label03:
        $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

     label04:
        $r4.<android.graphics.BitmapFactory$Options: int outHeight> = $i0;

     label05:
        $r5 = virtualinvoke $r0.<android.content.Context: android.content.res.Resources getResources()>();

        $i0 = virtualinvoke $r1.<java.lang.Integer: int intValue()>();

        $r6 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeResource(android.content.res.Resources,int,android.graphics.BitmapFactory$Options)>($r5, $i0, $r4);

        $r7 = <com.aishukeclassmfkb.ledu.LeduShareValue: android.graphics.Bitmap$Config createBitmapConfig>;

        $r6 = virtualinvoke $r6.<android.graphics.Bitmap: android.graphics.Bitmap copy(android.graphics.Bitmap$Config,boolean)>($r7, 1);

     label06:
        return $r6;

     label07:
        $r8 := @caughtexception;

        virtualinvoke $r8.<java.lang.OutOfMemoryError: void printStackTrace()>();

     label08:
        $i0 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();

        $i1 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

     label09:
        $r7 = <com.aishukeclassmfkb.ledu.LeduShareValue: android.graphics.Bitmap$Config createBitmapConfig>;

     label10:
        $r6 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>($i0, $i1, $r7);

     label11:
        return $r6;

     label12:
        $r9 := @caughtexception;

        virtualinvoke $r9.<java.lang.Exception: void printStackTrace()>();

        return null;

        catch java.lang.OutOfMemoryError from label01 to label02 with label07;
        catch java.lang.OutOfMemoryError from label03 to label04 with label07;
        catch java.lang.OutOfMemoryError from label05 to label06 with label07;
        catch java.lang.Exception from label08 to label09 with label12;
        catch java.lang.Exception from label10 to label11 with label12;
    }
}
