public class org.htmlparser.filters.RegexFilter extends java.lang.Object implements org.htmlparser.NodeFilter
{
    public static final int FIND;
    public static final int LOOKINGAT;
    public static final int MATCH;
    protected java.lang.String a;
    protected java.util.regex.Pattern b;
    protected int c;

    public void <init>()
    {
        org.htmlparser.filters.RegexFilter r0;

        r0 := @this: org.htmlparser.filters.RegexFilter;

        specialinvoke r0.<org.htmlparser.filters.RegexFilter: void <init>(java.lang.String,int)>(".*", 3);

        return;
    }

    public void <init>(java.lang.String)
    {
        java.lang.String $r1;
        org.htmlparser.filters.RegexFilter r0;

        r0 := @this: org.htmlparser.filters.RegexFilter;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.htmlparser.filters.RegexFilter: void <init>(java.lang.String,int)>($r1, 3);

        return;
    }

    public void <init>(java.lang.String, int)
    {
        int $i0;
        java.lang.String $r1;
        org.htmlparser.filters.RegexFilter r0;

        r0 := @this: org.htmlparser.filters.RegexFilter;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        virtualinvoke r0.<org.htmlparser.filters.RegexFilter: void setPattern(java.lang.String)>($r1);

        virtualinvoke r0.<org.htmlparser.filters.RegexFilter: void setStrategy(int)>($i0);

        return;
    }

    public boolean accept(org.htmlparser.Node)
    {
        org.htmlparser.Node $r1;
        org.htmlparser.filters.RegexFilter r0;
        java.util.regex.Matcher $r5;
        org.htmlparser.Text $r2;
        int $i0;
        java.lang.String $r3;
        java.util.regex.Pattern $r4;
        boolean $z0;

        r0 := @this: org.htmlparser.filters.RegexFilter;

        $r1 := @parameter0: org.htmlparser.Node;

        $z0 = $r1 instanceof org.htmlparser.Text;

        if $z0 == 0 goto label4;

        $r2 = (org.htmlparser.Text) $r1;

        $r3 = interfaceinvoke $r2.<org.htmlparser.Text: java.lang.String getText()>();

        $r4 = r0.<org.htmlparser.filters.RegexFilter: java.util.regex.Pattern b>;

        $r5 = virtualinvoke $r4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r3);

        $i0 = r0.<org.htmlparser.filters.RegexFilter: int c>;

        lookupswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label3;
            default: goto label1;
        };

     label1:
        $z0 = virtualinvoke $r5.<java.util.regex.Matcher: boolean find()>();

        return $z0;

     label2:
        $z0 = virtualinvoke $r5.<java.util.regex.Matcher: boolean matches()>();

        return $z0;

     label3:
        $z0 = virtualinvoke $r5.<java.util.regex.Matcher: boolean lookingAt()>();

        return $z0;

     label4:
        return 0;
    }

    public java.lang.String getPattern()
    {
        java.lang.String r1;
        org.htmlparser.filters.RegexFilter r0;

        r0 := @this: org.htmlparser.filters.RegexFilter;

        r1 = r0.<org.htmlparser.filters.RegexFilter: java.lang.String a>;

        return r1;
    }

    public int getStrategy()
    {
        int i0;
        org.htmlparser.filters.RegexFilter r0;

        r0 := @this: org.htmlparser.filters.RegexFilter;

        i0 = r0.<org.htmlparser.filters.RegexFilter: int c>;

        return i0;
    }

    public void setPattern(java.lang.String)
    {
        java.lang.String $r1;
        java.util.regex.Pattern $r2;
        org.htmlparser.filters.RegexFilter r0;

        r0 := @this: org.htmlparser.filters.RegexFilter;

        $r1 := @parameter0: java.lang.String;

        r0.<org.htmlparser.filters.RegexFilter: java.lang.String a> = $r1;

        $r2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r1);

        r0.<org.htmlparser.filters.RegexFilter: java.util.regex.Pattern b> = $r2;

        return;
    }

    public void setStrategy(int)
    {
        int $i0;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.lang.IllegalArgumentException $r1;
        org.htmlparser.filters.RegexFilter r0;

        r0 := @this: org.htmlparser.filters.RegexFilter;

        $i0 := @parameter0: int;

        if $i0 == 1 goto label1;

        if $i0 == 2 goto label1;

        if $i0 == 3 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("illegal strategy (");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label1:
        r0.<org.htmlparser.filters.RegexFilter: int c> = $i0;

        return;
    }

    public static void <clinit>()
    {
        <org.htmlparser.filters.RegexFilter: int MATCH> = 1;

        <org.htmlparser.filters.RegexFilter: int LOOKINGAT> = 2;

        <org.htmlparser.filters.RegexFilter: int FIND> = 3;

        return;
    }
}
