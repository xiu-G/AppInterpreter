public class proguard.classfile.editor.InstructionAdder extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.instruction.visitor.InstructionVisitor
{
    private final proguard.classfile.editor.CodeAttributeComposer codeAttributeComposer;
    private final proguard.classfile.editor.ConstantAdder constantAdder;

    public void <init>(proguard.classfile.ProgramClass, proguard.classfile.editor.CodeAttributeComposer)
    {
        proguard.classfile.editor.ConstantAdder $r3;
        proguard.classfile.editor.InstructionAdder r0;
        proguard.classfile.editor.CodeAttributeComposer $r2;
        proguard.classfile.ProgramClass $r1;

        r0 := @this: proguard.classfile.editor.InstructionAdder;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.editor.CodeAttributeComposer;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        $r3 = new proguard.classfile.editor.ConstantAdder;

        specialinvoke $r3.<proguard.classfile.editor.ConstantAdder: void <init>(proguard.classfile.ProgramClass)>($r1);

        r0.<proguard.classfile.editor.InstructionAdder: proguard.classfile.editor.ConstantAdder constantAdder> = $r3;

        r0.<proguard.classfile.editor.InstructionAdder: proguard.classfile.editor.CodeAttributeComposer codeAttributeComposer> = $r2;

        return;
    }

    public void visitAnyInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.Instruction)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.instruction.Instruction $r4;
        proguard.classfile.editor.InstructionAdder r0;
        int $i0;
        proguard.classfile.Method $r2;
        proguard.classfile.editor.CodeAttributeComposer $r5;

        r0 := @this: proguard.classfile.editor.InstructionAdder;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.Instruction;

        $r5 = r0.<proguard.classfile.editor.InstructionAdder: proguard.classfile.editor.CodeAttributeComposer codeAttributeComposer>;

        virtualinvoke $r5.<proguard.classfile.editor.CodeAttributeComposer: void appendInstruction(int,proguard.classfile.instruction.Instruction)>($i0, $r4);

        return;
    }

    public void visitConstantInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.ConstantInstruction)
    {
        proguard.classfile.editor.ConstantAdder $r6;
        proguard.classfile.editor.CodeAttributeComposer $r8;
        byte $b1;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.instruction.Instruction $r7;
        proguard.classfile.editor.InstructionAdder r0;
        int $i0, $i2, $i3;
        proguard.classfile.instruction.ConstantInstruction $r4, $r5;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.classfile.editor.InstructionAdder;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.ConstantInstruction;

        $r5 = new proguard.classfile.instruction.ConstantInstruction;

        $b1 = $r4.<proguard.classfile.instruction.ConstantInstruction: byte opcode>;

        $r6 = r0.<proguard.classfile.editor.InstructionAdder: proguard.classfile.editor.ConstantAdder constantAdder>;

        $i2 = $r4.<proguard.classfile.instruction.ConstantInstruction: int constantIndex>;

        $i2 = virtualinvoke $r6.<proguard.classfile.editor.ConstantAdder: int addConstant(proguard.classfile.Clazz,int)>($r1, $i2);

        $i3 = $r4.<proguard.classfile.instruction.ConstantInstruction: int constant>;

        specialinvoke $r5.<proguard.classfile.instruction.ConstantInstruction: void <init>(byte,int,int)>($b1, $i2, $i3);

        $r7 = virtualinvoke $r5.<proguard.classfile.instruction.ConstantInstruction: proguard.classfile.instruction.Instruction shrink()>();

        $r8 = r0.<proguard.classfile.editor.InstructionAdder: proguard.classfile.editor.CodeAttributeComposer codeAttributeComposer>;

        virtualinvoke $r8.<proguard.classfile.editor.CodeAttributeComposer: void appendInstruction(int,proguard.classfile.instruction.Instruction)>($i0, $r7);

        return;
    }
}
