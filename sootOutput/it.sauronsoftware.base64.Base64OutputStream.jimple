public class it.sauronsoftware.base64.Base64OutputStream extends java.io.OutputStream
{
    private int buffer;
    private int bytecounter;
    private int linecounter;
    private int linelength;
    private java.io.OutputStream outputStream;

    public void <init>(java.io.OutputStream)
    {
        java.io.OutputStream $r1;
        it.sauronsoftware.base64.Base64OutputStream r0;

        r0 := @this: it.sauronsoftware.base64.Base64OutputStream;

        $r1 := @parameter0: java.io.OutputStream;

        specialinvoke r0.<it.sauronsoftware.base64.Base64OutputStream: void <init>(java.io.OutputStream,int)>($r1, 76);

        return;
    }

    public void <init>(java.io.OutputStream, int)
    {
        java.io.OutputStream $r1;
        int $i0;
        it.sauronsoftware.base64.Base64OutputStream r0;

        r0 := @this: it.sauronsoftware.base64.Base64OutputStream;

        $r1 := @parameter0: java.io.OutputStream;

        $i0 := @parameter1: int;

        specialinvoke r0.<java.io.OutputStream: void <init>()>();

        r0.<it.sauronsoftware.base64.Base64OutputStream: java.io.OutputStream outputStream> = null;

        r0.<it.sauronsoftware.base64.Base64OutputStream: int buffer> = 0;

        r0.<it.sauronsoftware.base64.Base64OutputStream: int bytecounter> = 0;

        r0.<it.sauronsoftware.base64.Base64OutputStream: int linecounter> = 0;

        r0.<it.sauronsoftware.base64.Base64OutputStream: int linelength> = 0;

        r0.<it.sauronsoftware.base64.Base64OutputStream: java.io.OutputStream outputStream> = $r1;

        r0.<it.sauronsoftware.base64.Base64OutputStream: int linelength> = 0;

        return;
    }

    public void close() throws java.io.IOException
    {
        java.io.OutputStream $r1;
        it.sauronsoftware.base64.Base64OutputStream r0;

        r0 := @this: it.sauronsoftware.base64.Base64OutputStream;

        virtualinvoke r0.<it.sauronsoftware.base64.Base64OutputStream: void commit()>();

        $r1 = r0.<it.sauronsoftware.base64.Base64OutputStream: java.io.OutputStream outputStream>;

        virtualinvoke $r1.<java.io.OutputStream: void close()>();

        return;
    }

    protected void commit() throws java.io.IOException
    {
        java.io.OutputStream $r1;
        byte[] $r3;
        it.sauronsoftware.base64.Base64OutputStream r0;
        char $c2, $c3, $c4, $c5;
        int $i0, $i1;
        java.lang.String $r2;

        r0 := @this: it.sauronsoftware.base64.Base64OutputStream;

        $i0 = r0.<it.sauronsoftware.base64.Base64OutputStream: int bytecounter>;

        if $i0 <= 0 goto label6;

        $i0 = r0.<it.sauronsoftware.base64.Base64OutputStream: int linelength>;

        if $i0 <= 0 goto label1;

        $i0 = r0.<it.sauronsoftware.base64.Base64OutputStream: int linecounter>;

        $i1 = r0.<it.sauronsoftware.base64.Base64OutputStream: int linelength>;

        if $i0 != $i1 goto label1;

        $r1 = r0.<it.sauronsoftware.base64.Base64OutputStream: java.io.OutputStream outputStream>;

        $r2 = "\r\n";

        $r3 = virtualinvoke $r2.<java.lang.String: byte[] getBytes()>();

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[])>($r3);

        r0.<it.sauronsoftware.base64.Base64OutputStream: int linecounter> = 0;

     label1:
        $r2 = <it.sauronsoftware.base64.Shared: java.lang.String chars>;

        $i0 = r0.<it.sauronsoftware.base64.Base64OutputStream: int buffer>;

        $i0 = $i0 << 8;

        $i0 = $i0 >>> 26;

        $c2 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i0);

        $r2 = <it.sauronsoftware.base64.Shared: java.lang.String chars>;

        $i0 = r0.<it.sauronsoftware.base64.Base64OutputStream: int buffer>;

        $i0 = $i0 << 14;

        $i0 = $i0 >>> 26;

        $c3 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i0);

        $i0 = r0.<it.sauronsoftware.base64.Base64OutputStream: int bytecounter>;

        if $i0 >= 2 goto label4;

        $c4 = <it.sauronsoftware.base64.Shared: char pad>;

     label2:
        $i0 = r0.<it.sauronsoftware.base64.Base64OutputStream: int bytecounter>;

        if $i0 >= 3 goto label5;

        $c5 = <it.sauronsoftware.base64.Shared: char pad>;

     label3:
        $r1 = r0.<it.sauronsoftware.base64.Base64OutputStream: java.io.OutputStream outputStream>;

        $i0 = (int) $c2;

        virtualinvoke $r1.<java.io.OutputStream: void write(int)>($i0);

        $r1 = r0.<it.sauronsoftware.base64.Base64OutputStream: java.io.OutputStream outputStream>;

        $i0 = (int) $c3;

        virtualinvoke $r1.<java.io.OutputStream: void write(int)>($i0);

        $r1 = r0.<it.sauronsoftware.base64.Base64OutputStream: java.io.OutputStream outputStream>;

        $i0 = (int) $c4;

        virtualinvoke $r1.<java.io.OutputStream: void write(int)>($i0);

        $r1 = r0.<it.sauronsoftware.base64.Base64OutputStream: java.io.OutputStream outputStream>;

        $i0 = (int) $c5;

        virtualinvoke $r1.<java.io.OutputStream: void write(int)>($i0);

        $i0 = r0.<it.sauronsoftware.base64.Base64OutputStream: int linecounter>;

        $i0 = $i0 + 4;

        r0.<it.sauronsoftware.base64.Base64OutputStream: int linecounter> = $i0;

        r0.<it.sauronsoftware.base64.Base64OutputStream: int bytecounter> = 0;

        r0.<it.sauronsoftware.base64.Base64OutputStream: int buffer> = 0;

        return;

     label4:
        $r2 = <it.sauronsoftware.base64.Shared: java.lang.String chars>;

        $i0 = r0.<it.sauronsoftware.base64.Base64OutputStream: int buffer>;

        $i0 = $i0 << 20;

        $i0 = $i0 >>> 26;

        $c4 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i0);

        goto label2;

     label5:
        $r2 = <it.sauronsoftware.base64.Shared: java.lang.String chars>;

        $i0 = r0.<it.sauronsoftware.base64.Base64OutputStream: int buffer>;

        $i0 = $i0 << 26;

        $i0 = $i0 >>> 26;

        $c5 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i0);

        goto label3;

     label6:
        return;
    }

    public void write(int) throws java.io.IOException
    {
        int $i0, $i1;
        it.sauronsoftware.base64.Base64OutputStream r0;

        r0 := @this: it.sauronsoftware.base64.Base64OutputStream;

        $i0 := @parameter0: int;

        $i0 = $i0 & 255;

        $i1 = r0.<it.sauronsoftware.base64.Base64OutputStream: int bytecounter>;

        $i1 = $i1 * 8;

        $i1 = 16 - $i1;

        $i0 = $i0 << $i1;

        $i1 = r0.<it.sauronsoftware.base64.Base64OutputStream: int buffer>;

        $i0 = $i0 | $i1;

        r0.<it.sauronsoftware.base64.Base64OutputStream: int buffer> = $i0;

        $i0 = r0.<it.sauronsoftware.base64.Base64OutputStream: int bytecounter>;

        $i0 = $i0 + 1;

        r0.<it.sauronsoftware.base64.Base64OutputStream: int bytecounter> = $i0;

        $i0 = r0.<it.sauronsoftware.base64.Base64OutputStream: int bytecounter>;

        if $i0 != 3 goto label1;

        virtualinvoke r0.<it.sauronsoftware.base64.Base64OutputStream: void commit()>();

     label1:
        return;
    }
}
