public class com.parse.ParseRelation extends java.lang.Object
{
    private java.lang.String key;
    private com.parse.ParseObject parent;
    private java.util.Set relationsToAdd;
    private java.util.Set relationsToRemove;
    private java.lang.String targetClass;

    void <init>(com.parse.ParseObject, java.lang.String)
    {
        java.util.HashSet $r3;
        com.parse.ParseRelation r0;
        java.lang.String $r2;
        com.parse.ParseObject $r1;

        r0 := @this: com.parse.ParseRelation;

        $r1 := @parameter0: com.parse.ParseObject;

        $r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.parse.ParseRelation: com.parse.ParseObject parent> = $r1;

        r0.<com.parse.ParseRelation: java.lang.String key> = $r2;

        r0.<com.parse.ParseRelation: java.lang.String targetClass> = null;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        r0.<com.parse.ParseRelation: java.util.Set relationsToAdd> = $r3;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        r0.<com.parse.ParseRelation: java.util.Set relationsToRemove> = $r3;

        return;
    }

    public void add(com.parse.ParseObject)
    {
        java.util.Set $r6;
        com.parse.ParseRelation r0;
        com.parse.ParseObject $r1;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r5;
        java.lang.String $r2, $r4;
        boolean $z0;

        r0 := @this: com.parse.ParseRelation;

        $r1 := @parameter0: com.parse.ParseObject;

        $r2 = virtualinvoke $r1.<com.parse.ParseObject: java.lang.String getObjectId()>();

        if $r2 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can\'t add a relation to an object without an objectId");

        throw $r3;

     label1:
        $r2 = r0.<com.parse.ParseRelation: java.lang.String targetClass>;

        if $r2 == null goto label2;

        $r2 = r0.<com.parse.ParseRelation: java.lang.String targetClass>;

        $r4 = virtualinvoke $r1.<com.parse.ParseObject: java.lang.String getClassName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Trying to add a relation on an object of type ");

        $r2 = virtualinvoke $r1.<com.parse.ParseObject: java.lang.String getClassName()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to a relation of ");

        $r2 = r0.<com.parse.ParseRelation: java.lang.String targetClass>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r3;

     label2:
        $r2 = virtualinvoke $r1.<com.parse.ParseObject: java.lang.String getClassName()>();

        r0.<com.parse.ParseRelation: java.lang.String targetClass> = $r2;

        $r6 = r0.<com.parse.ParseRelation: java.util.Set relationsToRemove>;

        $r2 = virtualinvoke $r1.<com.parse.ParseObject: java.lang.String getObjectId()>();

        interfaceinvoke $r6.<java.util.Set: boolean remove(java.lang.Object)>($r2);

        $r6 = r0.<com.parse.ParseRelation: java.util.Set relationsToAdd>;

        $r2 = virtualinvoke $r1.<com.parse.ParseObject: java.lang.String getObjectId()>();

        interfaceinvoke $r6.<java.util.Set: boolean add(java.lang.Object)>($r2);

        return;
    }

    void clearChanges()
    {
        java.util.Set $r1;
        com.parse.ParseRelation r0;

        r0 := @this: com.parse.ParseRelation;

        $r1 = r0.<com.parse.ParseRelation: java.util.Set relationsToAdd>;

        interfaceinvoke $r1.<java.util.Set: void clear()>();

        $r1 = r0.<com.parse.ParseRelation: java.util.Set relationsToRemove>;

        interfaceinvoke $r1.<java.util.Set: void clear()>();

        return;
    }

    org.json.JSONArray convertSetToArray(java.util.Set)
    {
        java.util.Iterator $r4;
        java.util.Set $r1;
        com.parse.ParseRelation r0;
        org.json.JSONObject $r3;
        java.lang.Object $r5;
        java.lang.String $r6, $r7;
        org.json.JSONArray $r2;
        boolean $z0;

        r0 := @this: com.parse.ParseRelation;

        $r1 := @parameter0: java.util.Set;

        $r2 = new org.json.JSONArray;

        specialinvoke $r2.<org.json.JSONArray: void <init>()>();

        $r4 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.lang.String) $r5;

        $r3 = new org.json.JSONObject;

        specialinvoke $r3.<org.json.JSONObject: void <init>()>();

        virtualinvoke $r3.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("__type", "Pointer");

        $r7 = r0.<com.parse.ParseRelation: java.lang.String targetClass>;

        virtualinvoke $r3.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("className", $r7);

        virtualinvoke $r3.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("objectId", $r6);

        virtualinvoke $r2.<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>($r3);

        goto label1;

     label2:
        return $r2;
    }

    org.json.JSONObject encodeToJSON()
    {
        java.util.Set $r1;
        com.parse.ParseRelation r0;
        org.json.JSONObject $r2, $r4, $r5;
        int $i0;
        java.lang.String $r6;
        org.json.JSONArray $r3;

        r0 := @this: com.parse.ParseRelation;

        $r1 = r0.<com.parse.ParseRelation: java.util.Set relationsToAdd>;

        $i0 = interfaceinvoke $r1.<java.util.Set: int size()>();

        if $i0 <= 0 goto label6;

        $r2 = new org.json.JSONObject;

        specialinvoke $r2.<org.json.JSONObject: void <init>()>();

        virtualinvoke $r2.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("__op", "AddRelation");

        $r1 = r0.<com.parse.ParseRelation: java.util.Set relationsToAdd>;

        $r3 = virtualinvoke r0.<com.parse.ParseRelation: org.json.JSONArray convertSetToArray(java.util.Set)>($r1);

        virtualinvoke $r2.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("objects", $r3);

     label1:
        $r1 = r0.<com.parse.ParseRelation: java.util.Set relationsToRemove>;

        $i0 = interfaceinvoke $r1.<java.util.Set: int size()>();

        if $i0 <= 0 goto label5;

        $r4 = new org.json.JSONObject;

        specialinvoke $r4.<org.json.JSONObject: void <init>()>();

        virtualinvoke $r4.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("__op", "RemoveRelation");

        $r1 = r0.<com.parse.ParseRelation: java.util.Set relationsToRemove>;

        $r3 = virtualinvoke r0.<com.parse.ParseRelation: org.json.JSONArray convertSetToArray(java.util.Set)>($r1);

        virtualinvoke $r4.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("objects", $r3);

     label2:
        if $r2 == null goto label3;

        if $r4 == null goto label3;

        $r5 = new org.json.JSONObject;

        specialinvoke $r5.<org.json.JSONObject: void <init>()>();

        virtualinvoke $r5.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("__op", "Batch");

        $r3 = new org.json.JSONArray;

        specialinvoke $r3.<org.json.JSONArray: void <init>()>();

        virtualinvoke $r3.<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>($r2);

        virtualinvoke $r3.<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>($r4);

        virtualinvoke $r5.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("ops", $r3);

        return $r5;

     label3:
        if $r2 != null goto label7;

        if $r4 == null goto label4;

        return $r4;

     label4:
        $r2 = new org.json.JSONObject;

        specialinvoke $r2.<org.json.JSONObject: void <init>()>();

        virtualinvoke $r2.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("__type", "Relation");

        $r6 = r0.<com.parse.ParseRelation: java.lang.String targetClass>;

        virtualinvoke $r2.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("className", $r6);

        return $r2;

     label5:
        $r4 = null;

        goto label2;

     label6:
        $r2 = null;

        goto label1;

     label7:
        return $r2;
    }

    public com.parse.ParseQuery getQuery()
    {
        com.parse.ParseQuery $r2;
        com.parse.ParseRelation r0;
        java.lang.String $r1;
        com.parse.ParseObject $r3;

        r0 := @this: com.parse.ParseRelation;

        $r2 = new com.parse.ParseQuery;

        $r1 = r0.<com.parse.ParseRelation: java.lang.String targetClass>;

        specialinvoke $r2.<com.parse.ParseQuery: void <init>(java.lang.String)>($r1);

        $r3 = r0.<com.parse.ParseRelation: com.parse.ParseObject parent>;

        $r1 = r0.<com.parse.ParseRelation: java.lang.String key>;

        $r2 = virtualinvoke $r2.<com.parse.ParseQuery: com.parse.ParseQuery whereRelatedTo(com.parse.ParseObject,java.lang.String)>($r3, $r1);

        return $r2;
    }

    java.lang.String getTargetClass()
    {
        com.parse.ParseRelation r0;
        java.lang.String r1;

        r0 := @this: com.parse.ParseRelation;

        r1 = r0.<com.parse.ParseRelation: java.lang.String targetClass>;

        return r1;
    }

    public boolean isDirty()
    {
        int $i0;
        java.util.Set $r1;
        com.parse.ParseRelation r0;

        r0 := @this: com.parse.ParseRelation;

        $r1 = r0.<com.parse.ParseRelation: java.util.Set relationsToAdd>;

        $i0 = interfaceinvoke $r1.<java.util.Set: int size()>();

        if $i0 > 0 goto label1;

        $r1 = r0.<com.parse.ParseRelation: java.util.Set relationsToRemove>;

        $i0 = interfaceinvoke $r1.<java.util.Set: int size()>();

        if $i0 <= 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public void remove(com.parse.ParseObject)
    {
        java.util.Set $r6;
        com.parse.ParseRelation r0;
        com.parse.ParseObject $r1;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r5;
        java.lang.String $r2, $r4;
        boolean $z0;

        r0 := @this: com.parse.ParseRelation;

        $r1 := @parameter0: com.parse.ParseObject;

        $r2 = virtualinvoke $r1.<com.parse.ParseObject: java.lang.String getObjectId()>();

        if $r2 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can\'t remove a relation to an object without an objectId");

        throw $r3;

     label1:
        $r2 = r0.<com.parse.ParseRelation: java.lang.String targetClass>;

        if $r2 == null goto label2;

        $r2 = r0.<com.parse.ParseRelation: java.lang.String targetClass>;

        $r4 = virtualinvoke $r1.<com.parse.ParseObject: java.lang.String getClassName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Trying to remove a relation on an object of type ");

        $r2 = virtualinvoke $r1.<com.parse.ParseObject: java.lang.String getClassName()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to a relation of ");

        $r2 = r0.<com.parse.ParseRelation: java.lang.String targetClass>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r3;

     label2:
        $r2 = virtualinvoke $r1.<com.parse.ParseObject: java.lang.String getClassName()>();

        r0.<com.parse.ParseRelation: java.lang.String targetClass> = $r2;

        $r6 = r0.<com.parse.ParseRelation: java.util.Set relationsToAdd>;

        $r2 = virtualinvoke $r1.<com.parse.ParseObject: java.lang.String getObjectId()>();

        interfaceinvoke $r6.<java.util.Set: boolean remove(java.lang.Object)>($r2);

        $r6 = r0.<com.parse.ParseRelation: java.util.Set relationsToRemove>;

        $r2 = virtualinvoke $r1.<com.parse.ParseObject: java.lang.String getObjectId()>();

        interfaceinvoke $r6.<java.util.Set: boolean add(java.lang.Object)>($r2);

        return;
    }

    void setTargetClass(java.lang.String)
    {
        com.parse.ParseRelation r0;
        java.lang.String $r1;

        r0 := @this: com.parse.ParseRelation;

        $r1 := @parameter0: java.lang.String;

        r0.<com.parse.ParseRelation: java.lang.String targetClass> = $r1;

        return;
    }
}
