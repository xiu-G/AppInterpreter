public class proguard.shrink.UsedMemberFilter extends java.lang.Object implements proguard.classfile.visitor.MemberVisitor
{
    private final proguard.classfile.visitor.MemberVisitor memberVisitor;
    private final proguard.shrink.UsageMarker usageMarker;

    public void <init>(proguard.shrink.UsageMarker, proguard.classfile.visitor.MemberVisitor)
    {
        proguard.shrink.UsedMemberFilter r0;
        proguard.classfile.visitor.MemberVisitor $r2;
        proguard.shrink.UsageMarker $r1;

        r0 := @this: proguard.shrink.UsedMemberFilter;

        $r1 := @parameter0: proguard.shrink.UsageMarker;

        $r2 := @parameter1: proguard.classfile.visitor.MemberVisitor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<proguard.shrink.UsedMemberFilter: proguard.shrink.UsageMarker usageMarker> = $r1;

        r0.<proguard.shrink.UsedMemberFilter: proguard.classfile.visitor.MemberVisitor memberVisitor> = $r2;

        return;
    }

    public void visitLibraryField(proguard.classfile.LibraryClass, proguard.classfile.LibraryField)
    {
        proguard.shrink.UsedMemberFilter r0;
        proguard.classfile.LibraryClass $r1;
        proguard.shrink.UsageMarker $r3;
        proguard.classfile.LibraryField $r2;
        proguard.classfile.visitor.MemberVisitor $r4;
        boolean $z0;

        r0 := @this: proguard.shrink.UsedMemberFilter;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        $r2 := @parameter1: proguard.classfile.LibraryField;

        $r3 = r0.<proguard.shrink.UsedMemberFilter: proguard.shrink.UsageMarker usageMarker>;

        $z0 = virtualinvoke $r3.<proguard.shrink.UsageMarker: boolean isUsed(proguard.classfile.VisitorAccepter)>($r2);

        if $z0 == 0 goto label1;

        $r4 = r0.<proguard.shrink.UsedMemberFilter: proguard.classfile.visitor.MemberVisitor memberVisitor>;

        interfaceinvoke $r4.<proguard.classfile.visitor.MemberVisitor: void visitLibraryField(proguard.classfile.LibraryClass,proguard.classfile.LibraryField)>($r1, $r2);

     label1:
        return;
    }

    public void visitLibraryMethod(proguard.classfile.LibraryClass, proguard.classfile.LibraryMethod)
    {
        proguard.shrink.UsedMemberFilter r0;
        proguard.classfile.LibraryClass $r1;
        proguard.shrink.UsageMarker $r3;
        proguard.classfile.LibraryMethod $r2;
        proguard.classfile.visitor.MemberVisitor $r4;
        boolean $z0;

        r0 := @this: proguard.shrink.UsedMemberFilter;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        $r2 := @parameter1: proguard.classfile.LibraryMethod;

        $r3 = r0.<proguard.shrink.UsedMemberFilter: proguard.shrink.UsageMarker usageMarker>;

        $z0 = virtualinvoke $r3.<proguard.shrink.UsageMarker: boolean isUsed(proguard.classfile.VisitorAccepter)>($r2);

        if $z0 == 0 goto label1;

        $r4 = r0.<proguard.shrink.UsedMemberFilter: proguard.classfile.visitor.MemberVisitor memberVisitor>;

        interfaceinvoke $r4.<proguard.classfile.visitor.MemberVisitor: void visitLibraryMethod(proguard.classfile.LibraryClass,proguard.classfile.LibraryMethod)>($r1, $r2);

     label1:
        return;
    }

    public void visitProgramField(proguard.classfile.ProgramClass, proguard.classfile.ProgramField)
    {
        proguard.shrink.UsedMemberFilter r0;
        proguard.shrink.UsageMarker $r3;
        proguard.classfile.ProgramField $r2;
        proguard.classfile.visitor.MemberVisitor $r4;
        proguard.classfile.ProgramClass $r1;
        boolean $z0;

        r0 := @this: proguard.shrink.UsedMemberFilter;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.ProgramField;

        $r3 = r0.<proguard.shrink.UsedMemberFilter: proguard.shrink.UsageMarker usageMarker>;

        $z0 = virtualinvoke $r3.<proguard.shrink.UsageMarker: boolean isUsed(proguard.classfile.VisitorAccepter)>($r2);

        if $z0 == 0 goto label1;

        $r4 = r0.<proguard.shrink.UsedMemberFilter: proguard.classfile.visitor.MemberVisitor memberVisitor>;

        interfaceinvoke $r4.<proguard.classfile.visitor.MemberVisitor: void visitProgramField(proguard.classfile.ProgramClass,proguard.classfile.ProgramField)>($r1, $r2);

     label1:
        return;
    }

    public void visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod)
    {
        proguard.shrink.UsedMemberFilter r0;
        proguard.shrink.UsageMarker $r3;
        proguard.classfile.ProgramMethod $r2;
        proguard.classfile.visitor.MemberVisitor $r4;
        proguard.classfile.ProgramClass $r1;
        boolean $z0;

        r0 := @this: proguard.shrink.UsedMemberFilter;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.ProgramMethod;

        $r3 = r0.<proguard.shrink.UsedMemberFilter: proguard.shrink.UsageMarker usageMarker>;

        $z0 = virtualinvoke $r3.<proguard.shrink.UsageMarker: boolean isUsed(proguard.classfile.VisitorAccepter)>($r2);

        if $z0 == 0 goto label1;

        $r4 = r0.<proguard.shrink.UsedMemberFilter: proguard.classfile.visitor.MemberVisitor memberVisitor>;

        interfaceinvoke $r4.<proguard.classfile.visitor.MemberVisitor: void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod)>($r1, $r2);

     label1:
        return;
    }
}
