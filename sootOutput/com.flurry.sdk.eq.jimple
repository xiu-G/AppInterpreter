public final class com.flurry.sdk.eq extends java.lang.Object
{
    private static com.flurry.sdk.eq a;
    private final java.lang.Thread$UncaughtExceptionHandler b;
    private final java.util.Map c;

    private void <init>()
    {
        com.flurry.sdk.eq$a $r3;
        java.lang.Thread$UncaughtExceptionHandler $r1;
        com.flurry.sdk.eq r0;
        java.util.WeakHashMap $r2;

        r0 := @this: com.flurry.sdk.eq;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.WeakHashMap;

        specialinvoke $r2.<java.util.WeakHashMap: void <init>()>();

        r0.<com.flurry.sdk.eq: java.util.Map c> = $r2;

        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getDefaultUncaughtExceptionHandler()>();

        r0.<com.flurry.sdk.eq: java.lang.Thread$UncaughtExceptionHandler b> = $r1;

        $r3 = new com.flurry.sdk.eq$a;

        specialinvoke $r3.<com.flurry.sdk.eq$a: void <init>(com.flurry.sdk.eq,com.flurry.sdk.eq$1)>(r0, null);

        staticinvoke <java.lang.Thread: void setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)>($r3);

        return;
    }

    public static com.flurry.sdk.eq a()
    {
        java.lang.Throwable $r1;
        com.flurry.sdk.eq $r0;

        entermonitor class "Lcom/flurry/sdk/eq;";

     label1:
        $r0 = <com.flurry.sdk.eq: com.flurry.sdk.eq a>;

        if $r0 != null goto label2;

        $r0 = new com.flurry.sdk.eq;

        specialinvoke $r0.<com.flurry.sdk.eq: void <init>()>();

        <com.flurry.sdk.eq: com.flurry.sdk.eq a> = $r0;

     label2:
        $r0 = <com.flurry.sdk.eq: com.flurry.sdk.eq a>;

     label3:
        exitmonitor class "Lcom/flurry/sdk/eq;";

        return $r0;

     label4:
        $r1 := @caughtexception;

        exitmonitor class "Lcom/flurry/sdk/eq;";

        throw $r1;

        catch java.lang.Throwable from label1 to label3 with label4;
    }

    static void a(com.flurry.sdk.eq, java.lang.Thread, java.lang.Throwable)
    {
        java.lang.Throwable $r2;
        com.flurry.sdk.eq $r0;
        java.lang.Thread $r1;

        $r0 := @parameter0: com.flurry.sdk.eq;

        $r1 := @parameter1: java.lang.Thread;

        $r2 := @parameter2: java.lang.Throwable;

        specialinvoke $r0.<com.flurry.sdk.eq: void a(java.lang.Thread,java.lang.Throwable)>($r1, $r2);

        return;
    }

    private void a(java.lang.Thread, java.lang.Throwable)
    {
        java.lang.Throwable $r2, $r7;
        java.util.Iterator $r4;
        java.util.Set $r3;
        java.lang.Thread$UncaughtExceptionHandler $r6;
        java.lang.Thread $r1;
        com.flurry.sdk.eq r0;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: com.flurry.sdk.eq;

        $r1 := @parameter0: java.lang.Thread;

        $r2 := @parameter1: java.lang.Throwable;

        $r3 = specialinvoke r0.<com.flurry.sdk.eq: java.util.Set b()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.lang.Thread$UncaughtExceptionHandler) $r5;

     label2:
        interfaceinvoke $r6.<java.lang.Thread$UncaughtExceptionHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)>($r1, $r2);

     label3:
        goto label1;

     label4:
        $r7 := @caughtexception;

        goto label1;

     label5:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    private java.util.Set b()
    {
        java.lang.Throwable $r4;
        java.util.Map $r1, $r3;
        java.util.Set $r2;
        com.flurry.sdk.eq r0;

        r0 := @this: com.flurry.sdk.eq;

        $r1 = r0.<com.flurry.sdk.eq: java.util.Map c>;

        entermonitor $r1;

     label1:
        $r3 = r0.<com.flurry.sdk.eq: java.util.Map c>;

        $r2 = interfaceinvoke $r3.<java.util.Map: java.util.Set keySet()>();

        exitmonitor $r1;

     label2:
        return $r2;

     label3:
        $r4 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    static void b(com.flurry.sdk.eq, java.lang.Thread, java.lang.Throwable)
    {
        java.lang.Throwable $r2;
        com.flurry.sdk.eq $r0;
        java.lang.Thread $r1;

        $r0 := @parameter0: com.flurry.sdk.eq;

        $r1 := @parameter1: java.lang.Thread;

        $r2 := @parameter2: java.lang.Throwable;

        specialinvoke $r0.<com.flurry.sdk.eq: void b(java.lang.Thread,java.lang.Throwable)>($r1, $r2);

        return;
    }

    private void b(java.lang.Thread, java.lang.Throwable)
    {
        java.lang.Throwable $r2;
        java.lang.Thread$UncaughtExceptionHandler $r3;
        java.lang.Thread $r1;
        com.flurry.sdk.eq r0;

        r0 := @this: com.flurry.sdk.eq;

        $r1 := @parameter0: java.lang.Thread;

        $r2 := @parameter1: java.lang.Throwable;

        $r3 = r0.<com.flurry.sdk.eq: java.lang.Thread$UncaughtExceptionHandler b>;

        if $r3 == null goto label1;

        $r3 = r0.<com.flurry.sdk.eq: java.lang.Thread$UncaughtExceptionHandler b>;

        interfaceinvoke $r3.<java.lang.Thread$UncaughtExceptionHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)>($r1, $r2);

     label1:
        return;
    }

    public final void a(java.lang.Thread$UncaughtExceptionHandler)
    {
        java.lang.Throwable $r4;
        java.lang.Thread$UncaughtExceptionHandler $r1;
        java.util.Map $r2, $r3;
        com.flurry.sdk.eq r0;

        r0 := @this: com.flurry.sdk.eq;

        $r1 := @parameter0: java.lang.Thread$UncaughtExceptionHandler;

        $r2 = r0.<com.flurry.sdk.eq: java.util.Map c>;

        entermonitor $r2;

     label1:
        $r3 = r0.<com.flurry.sdk.eq: java.util.Map c>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, null);

        exitmonitor $r2;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        exitmonitor $r2;

     label4:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
}
