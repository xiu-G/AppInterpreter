final class proguard.evaluation.value.ParticularIntegerValue extends proguard.evaluation.value.SpecificIntegerValue
{
    private final int value;

    public void <init>(int)
    {
        int $i0;
        proguard.evaluation.value.ParticularIntegerValue r0;

        r0 := @this: proguard.evaluation.value.ParticularIntegerValue;

        $i0 := @parameter0: int;

        specialinvoke r0.<proguard.evaluation.value.SpecificIntegerValue: void <init>()>();

        r0.<proguard.evaluation.value.ParticularIntegerValue: int value> = $i0;

        return;
    }

    public proguard.evaluation.value.IntegerValue add(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.ParticularIntegerValue r0;

        r0 := @this: proguard.evaluation.value.ParticularIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue add(proguard.evaluation.value.ParticularIntegerValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.IntegerValue add(proguard.evaluation.value.ParticularIntegerValue)
    {
        int $i0, $i1;
        proguard.evaluation.value.ParticularIntegerValue r0, $r1, $r2;

        r0 := @this: proguard.evaluation.value.ParticularIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularIntegerValue;

        $r2 = new proguard.evaluation.value.ParticularIntegerValue;

        $i1 = r0.<proguard.evaluation.value.ParticularIntegerValue: int value>;

        $i0 = $r1.<proguard.evaluation.value.ParticularIntegerValue: int value>;

        $i0 = $i1 + $i0;

        specialinvoke $r2.<proguard.evaluation.value.ParticularIntegerValue: void <init>(int)>($i0);

        return $r2;
    }

    public proguard.evaluation.value.IntegerValue and(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.ParticularIntegerValue r0;

        r0 := @this: proguard.evaluation.value.ParticularIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue and(proguard.evaluation.value.ParticularIntegerValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.IntegerValue and(proguard.evaluation.value.ParticularIntegerValue)
    {
        int $i0, $i1;
        proguard.evaluation.value.ParticularIntegerValue r0, $r1, $r2;

        r0 := @this: proguard.evaluation.value.ParticularIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularIntegerValue;

        $r2 = new proguard.evaluation.value.ParticularIntegerValue;

        $i1 = r0.<proguard.evaluation.value.ParticularIntegerValue: int value>;

        $i0 = $r1.<proguard.evaluation.value.ParticularIntegerValue: int value>;

        $i0 = $i1 & $i0;

        specialinvoke $r2.<proguard.evaluation.value.ParticularIntegerValue: void <init>(int)>($i0);

        return $r2;
    }

    public proguard.evaluation.value.IntegerValue convertToByte()
    {
        byte $b1;
        int $i0, $i2;
        proguard.evaluation.value.ParticularIntegerValue r0, $r1;

        r0 := @this: proguard.evaluation.value.ParticularIntegerValue;

        $i0 = r0.<proguard.evaluation.value.ParticularIntegerValue: int value>;

        $b1 = (byte) $i0;

        $i0 = r0.<proguard.evaluation.value.ParticularIntegerValue: int value>;

        $i2 = (int) $b1;

        if $i2 != $i0 goto label1;

        return r0;

     label1:
        $r1 = new proguard.evaluation.value.ParticularIntegerValue;

        $i0 = (int) $b1;

        specialinvoke $r1.<proguard.evaluation.value.ParticularIntegerValue: void <init>(int)>($i0);

        return $r1;
    }

    public proguard.evaluation.value.IntegerValue convertToCharacter()
    {
        int $i0, $i2;
        proguard.evaluation.value.ParticularIntegerValue r0, $r1;
        char $c1;

        r0 := @this: proguard.evaluation.value.ParticularIntegerValue;

        $i0 = r0.<proguard.evaluation.value.ParticularIntegerValue: int value>;

        $c1 = (char) $i0;

        $i0 = r0.<proguard.evaluation.value.ParticularIntegerValue: int value>;

        $i2 = (int) $c1;

        if $i2 != $i0 goto label1;

        return r0;

     label1:
        $r1 = new proguard.evaluation.value.ParticularIntegerValue;

        $i0 = (int) $c1;

        specialinvoke $r1.<proguard.evaluation.value.ParticularIntegerValue: void <init>(int)>($i0);

        return $r1;
    }

    public proguard.evaluation.value.DoubleValue convertToDouble()
    {
        proguard.evaluation.value.ParticularDoubleValue $r1;
        int $i0;
        proguard.evaluation.value.ParticularIntegerValue r0;
        double $d0;

        r0 := @this: proguard.evaluation.value.ParticularIntegerValue;

        $r1 = new proguard.evaluation.value.ParticularDoubleValue;

        $i0 = r0.<proguard.evaluation.value.ParticularIntegerValue: int value>;

        $d0 = (double) $i0;

        specialinvoke $r1.<proguard.evaluation.value.ParticularDoubleValue: void <init>(double)>($d0);

        return $r1;
    }

    public proguard.evaluation.value.FloatValue convertToFloat()
    {
        proguard.evaluation.value.ParticularFloatValue $r1;
        int $i0;
        float $f0;
        proguard.evaluation.value.ParticularIntegerValue r0;

        r0 := @this: proguard.evaluation.value.ParticularIntegerValue;

        $r1 = new proguard.evaluation.value.ParticularFloatValue;

        $i0 = r0.<proguard.evaluation.value.ParticularIntegerValue: int value>;

        $f0 = (float) $i0;

        specialinvoke $r1.<proguard.evaluation.value.ParticularFloatValue: void <init>(float)>($f0);

        return $r1;
    }

    public proguard.evaluation.value.LongValue convertToLong()
    {
        proguard.evaluation.value.ParticularLongValue $r1;
        int $i0;
        proguard.evaluation.value.ParticularIntegerValue r0;
        long $l1;

        r0 := @this: proguard.evaluation.value.ParticularIntegerValue;

        $r1 = new proguard.evaluation.value.ParticularLongValue;

        $i0 = r0.<proguard.evaluation.value.ParticularIntegerValue: int value>;

        $l1 = (long) $i0;

        specialinvoke $r1.<proguard.evaluation.value.ParticularLongValue: void <init>(long)>($l1);

        return $r1;
    }

    public proguard.evaluation.value.IntegerValue convertToShort()
    {
        short $s1;
        int $i0, $i2;
        proguard.evaluation.value.ParticularIntegerValue r0, $r1;

        r0 := @this: proguard.evaluation.value.ParticularIntegerValue;

        $i0 = r0.<proguard.evaluation.value.ParticularIntegerValue: int value>;

        $s1 = (short) $i0;

        $i0 = r0.<proguard.evaluation.value.ParticularIntegerValue: int value>;

        $i2 = (int) $s1;

        if $i2 != $i0 goto label1;

        return r0;

     label1:
        $r1 = new proguard.evaluation.value.ParticularIntegerValue;

        $i0 = (int) $s1;

        specialinvoke $r1.<proguard.evaluation.value.ParticularIntegerValue: void <init>(int)>($i0);

        return $r1;
    }

    public proguard.evaluation.value.IntegerValue divide(proguard.evaluation.value.IntegerValue) throws java.lang.ArithmeticException
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.ParticularIntegerValue r0;

        r0 := @this: proguard.evaluation.value.ParticularIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue divideOf(proguard.evaluation.value.ParticularIntegerValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.IntegerValue divide(proguard.evaluation.value.ParticularIntegerValue) throws java.lang.ArithmeticException
    {
        int $i0, $i1;
        proguard.evaluation.value.ParticularIntegerValue r0, $r1, $r2;

        r0 := @this: proguard.evaluation.value.ParticularIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularIntegerValue;

        $r2 = new proguard.evaluation.value.ParticularIntegerValue;

        $i1 = r0.<proguard.evaluation.value.ParticularIntegerValue: int value>;

        $i0 = $r1.<proguard.evaluation.value.ParticularIntegerValue: int value>;

        $i0 = $i1 / $i0;

        specialinvoke $r2.<proguard.evaluation.value.ParticularIntegerValue: void <init>(int)>($i0);

        return $r2;
    }

    public proguard.evaluation.value.IntegerValue divideOf(proguard.evaluation.value.IntegerValue) throws java.lang.ArithmeticException
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.ParticularIntegerValue r0;

        r0 := @this: proguard.evaluation.value.ParticularIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue divide(proguard.evaluation.value.ParticularIntegerValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.IntegerValue divideOf(proguard.evaluation.value.ParticularIntegerValue) throws java.lang.ArithmeticException
    {
        int $i0, $i1;
        proguard.evaluation.value.ParticularIntegerValue r0, $r1, $r2;

        r0 := @this: proguard.evaluation.value.ParticularIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularIntegerValue;

        $r2 = new proguard.evaluation.value.ParticularIntegerValue;

        $i1 = $r1.<proguard.evaluation.value.ParticularIntegerValue: int value>;

        $i0 = r0.<proguard.evaluation.value.ParticularIntegerValue: int value>;

        $i0 = $i1 / $i0;

        specialinvoke $r2.<proguard.evaluation.value.ParticularIntegerValue: void <init>(int)>($i0);

        return $r2;
    }

    public int equal(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.IntegerValue $r1;
        int $i0;
        proguard.evaluation.value.ParticularIntegerValue r0;

        r0 := @this: proguard.evaluation.value.ParticularIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        $i0 = virtualinvoke $r1.<proguard.evaluation.value.IntegerValue: int equal(proguard.evaluation.value.ParticularIntegerValue)>(r0);

        return $i0;
    }

    public int equal(proguard.evaluation.value.ParticularIntegerValue)
    {
        int $i0, $i1;
        proguard.evaluation.value.ParticularIntegerValue r0, $r1;

        r0 := @this: proguard.evaluation.value.ParticularIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularIntegerValue;

        $i1 = r0.<proguard.evaluation.value.ParticularIntegerValue: int value>;

        $i0 = $r1.<proguard.evaluation.value.ParticularIntegerValue: int value>;

        if $i1 != $i0 goto label1;

        return 1;

     label1:
        return -1;
    }

    public boolean equals(java.lang.Object)
    {
        int $i0, $i1;
        proguard.evaluation.value.ParticularIntegerValue r0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: proguard.evaluation.value.ParticularIntegerValue;

        $r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<proguard.evaluation.value.SpecificIntegerValue: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $i1 = r0.<proguard.evaluation.value.ParticularIntegerValue: int value>;

        r0 = (proguard.evaluation.value.ParticularIntegerValue) $r1;

        $i0 = r0.<proguard.evaluation.value.ParticularIntegerValue: int value>;

        if $i1 != $i0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public proguard.evaluation.value.IntegerValue generalize(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.ParticularIntegerValue r0;

        r0 := @this: proguard.evaluation.value.ParticularIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue generalize(proguard.evaluation.value.ParticularIntegerValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.IntegerValue generalize(proguard.evaluation.value.ParticularIntegerValue)
    {
        proguard.evaluation.value.IntegerValue $r2;
        proguard.evaluation.value.ParticularIntegerValue r0, $r1;

        r0 := @this: proguard.evaluation.value.ParticularIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularIntegerValue;

        $r2 = virtualinvoke r0.<proguard.evaluation.value.ParticularIntegerValue: proguard.evaluation.value.IntegerValue generalize(proguard.evaluation.value.SpecificIntegerValue)>($r1);

        return $r2;
    }

    public int hashCode()
    {
        int $i0, $i1;
        proguard.evaluation.value.ParticularIntegerValue r0;
        java.lang.Class $r1;

        r0 := @this: proguard.evaluation.value.ParticularIntegerValue;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i0 = r0.<proguard.evaluation.value.ParticularIntegerValue: int value>;

        $i0 = $i1 ^ $i0;

        return $i0;
    }

    public boolean isParticular()
    {
        proguard.evaluation.value.ParticularIntegerValue r0;

        r0 := @this: proguard.evaluation.value.ParticularIntegerValue;

        return 1;
    }

    public int lessThan(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.IntegerValue $r1;
        int $i0;
        proguard.evaluation.value.ParticularIntegerValue r0;

        r0 := @this: proguard.evaluation.value.ParticularIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        $i0 = virtualinvoke $r1.<proguard.evaluation.value.IntegerValue: int greaterThan(proguard.evaluation.value.ParticularIntegerValue)>(r0);

        return $i0;
    }

    public int lessThan(proguard.evaluation.value.ParticularIntegerValue)
    {
        int $i0, $i1;
        proguard.evaluation.value.ParticularIntegerValue r0, $r1;

        r0 := @this: proguard.evaluation.value.ParticularIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularIntegerValue;

        $i1 = r0.<proguard.evaluation.value.ParticularIntegerValue: int value>;

        $i0 = $r1.<proguard.evaluation.value.ParticularIntegerValue: int value>;

        if $i1 >= $i0 goto label1;

        return 1;

     label1:
        return -1;
    }

    public int lessThanOrEqual(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.IntegerValue $r1;
        int $i0;
        proguard.evaluation.value.ParticularIntegerValue r0;

        r0 := @this: proguard.evaluation.value.ParticularIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        $i0 = virtualinvoke $r1.<proguard.evaluation.value.IntegerValue: int greaterThanOrEqual(proguard.evaluation.value.ParticularIntegerValue)>(r0);

        return $i0;
    }

    public int lessThanOrEqual(proguard.evaluation.value.ParticularIntegerValue)
    {
        int $i0, $i1;
        proguard.evaluation.value.ParticularIntegerValue r0, $r1;

        r0 := @this: proguard.evaluation.value.ParticularIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularIntegerValue;

        $i1 = r0.<proguard.evaluation.value.ParticularIntegerValue: int value>;

        $i0 = $r1.<proguard.evaluation.value.ParticularIntegerValue: int value>;

        if $i1 > $i0 goto label1;

        return 1;

     label1:
        return -1;
    }

    public proguard.evaluation.value.IntegerValue multiply(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.ParticularIntegerValue r0;

        r0 := @this: proguard.evaluation.value.ParticularIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue multiply(proguard.evaluation.value.ParticularIntegerValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.IntegerValue multiply(proguard.evaluation.value.ParticularIntegerValue)
    {
        int $i0, $i1;
        proguard.evaluation.value.ParticularIntegerValue r0, $r1, $r2;

        r0 := @this: proguard.evaluation.value.ParticularIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularIntegerValue;

        $r2 = new proguard.evaluation.value.ParticularIntegerValue;

        $i1 = r0.<proguard.evaluation.value.ParticularIntegerValue: int value>;

        $i0 = $r1.<proguard.evaluation.value.ParticularIntegerValue: int value>;

        $i0 = $i1 * $i0;

        specialinvoke $r2.<proguard.evaluation.value.ParticularIntegerValue: void <init>(int)>($i0);

        return $r2;
    }

    public proguard.evaluation.value.IntegerValue negate()
    {
        int $i0;
        proguard.evaluation.value.ParticularIntegerValue r0, $r1;

        r0 := @this: proguard.evaluation.value.ParticularIntegerValue;

        $r1 = new proguard.evaluation.value.ParticularIntegerValue;

        $i0 = r0.<proguard.evaluation.value.ParticularIntegerValue: int value>;

        $i0 = neg $i0;

        specialinvoke $r1.<proguard.evaluation.value.ParticularIntegerValue: void <init>(int)>($i0);

        return $r1;
    }

    public proguard.evaluation.value.IntegerValue or(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.ParticularIntegerValue r0;

        r0 := @this: proguard.evaluation.value.ParticularIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue or(proguard.evaluation.value.ParticularIntegerValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.IntegerValue or(proguard.evaluation.value.ParticularIntegerValue)
    {
        int $i0, $i1;
        proguard.evaluation.value.ParticularIntegerValue r0, $r1, $r2;

        r0 := @this: proguard.evaluation.value.ParticularIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularIntegerValue;

        $r2 = new proguard.evaluation.value.ParticularIntegerValue;

        $i1 = r0.<proguard.evaluation.value.ParticularIntegerValue: int value>;

        $i0 = $r1.<proguard.evaluation.value.ParticularIntegerValue: int value>;

        $i0 = $i1 | $i0;

        specialinvoke $r2.<proguard.evaluation.value.ParticularIntegerValue: void <init>(int)>($i0);

        return $r2;
    }

    public proguard.evaluation.value.IntegerValue remainder(proguard.evaluation.value.IntegerValue) throws java.lang.ArithmeticException
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.ParticularIntegerValue r0;

        r0 := @this: proguard.evaluation.value.ParticularIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue remainderOf(proguard.evaluation.value.ParticularIntegerValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.IntegerValue remainder(proguard.evaluation.value.ParticularIntegerValue) throws java.lang.ArithmeticException
    {
        int $i0, $i1;
        proguard.evaluation.value.ParticularIntegerValue r0, $r1, $r2;

        r0 := @this: proguard.evaluation.value.ParticularIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularIntegerValue;

        $r2 = new proguard.evaluation.value.ParticularIntegerValue;

        $i1 = r0.<proguard.evaluation.value.ParticularIntegerValue: int value>;

        $i0 = $r1.<proguard.evaluation.value.ParticularIntegerValue: int value>;

        $i0 = $i1 % $i0;

        specialinvoke $r2.<proguard.evaluation.value.ParticularIntegerValue: void <init>(int)>($i0);

        return $r2;
    }

    public proguard.evaluation.value.IntegerValue remainderOf(proguard.evaluation.value.IntegerValue) throws java.lang.ArithmeticException
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.ParticularIntegerValue r0;

        r0 := @this: proguard.evaluation.value.ParticularIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue remainder(proguard.evaluation.value.ParticularIntegerValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.IntegerValue remainderOf(proguard.evaluation.value.ParticularIntegerValue) throws java.lang.ArithmeticException
    {
        int $i0, $i1;
        proguard.evaluation.value.ParticularIntegerValue r0, $r1, $r2;

        r0 := @this: proguard.evaluation.value.ParticularIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularIntegerValue;

        $r2 = new proguard.evaluation.value.ParticularIntegerValue;

        $i1 = $r1.<proguard.evaluation.value.ParticularIntegerValue: int value>;

        $i0 = r0.<proguard.evaluation.value.ParticularIntegerValue: int value>;

        $i0 = $i1 % $i0;

        specialinvoke $r2.<proguard.evaluation.value.ParticularIntegerValue: void <init>(int)>($i0);

        return $r2;
    }

    public proguard.evaluation.value.IntegerValue shiftLeft(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.ParticularIntegerValue r0;

        r0 := @this: proguard.evaluation.value.ParticularIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue shiftLeftOf(proguard.evaluation.value.ParticularIntegerValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.IntegerValue shiftLeft(proguard.evaluation.value.ParticularIntegerValue)
    {
        int $i0, $i1;
        proguard.evaluation.value.ParticularIntegerValue r0, $r1, $r2;

        r0 := @this: proguard.evaluation.value.ParticularIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularIntegerValue;

        $r2 = new proguard.evaluation.value.ParticularIntegerValue;

        $i1 = r0.<proguard.evaluation.value.ParticularIntegerValue: int value>;

        $i0 = $r1.<proguard.evaluation.value.ParticularIntegerValue: int value>;

        $i0 = $i1 << $i0;

        specialinvoke $r2.<proguard.evaluation.value.ParticularIntegerValue: void <init>(int)>($i0);

        return $r2;
    }

    public proguard.evaluation.value.IntegerValue shiftLeftOf(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.ParticularIntegerValue r0;

        r0 := @this: proguard.evaluation.value.ParticularIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue shiftLeft(proguard.evaluation.value.ParticularIntegerValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.IntegerValue shiftLeftOf(proguard.evaluation.value.ParticularIntegerValue)
    {
        int $i0, $i1;
        proguard.evaluation.value.ParticularIntegerValue r0, $r1, $r2;

        r0 := @this: proguard.evaluation.value.ParticularIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularIntegerValue;

        $r2 = new proguard.evaluation.value.ParticularIntegerValue;

        $i1 = $r1.<proguard.evaluation.value.ParticularIntegerValue: int value>;

        $i0 = r0.<proguard.evaluation.value.ParticularIntegerValue: int value>;

        $i0 = $i1 << $i0;

        specialinvoke $r2.<proguard.evaluation.value.ParticularIntegerValue: void <init>(int)>($i0);

        return $r2;
    }

    public proguard.evaluation.value.LongValue shiftLeftOf(proguard.evaluation.value.LongValue)
    {
        proguard.evaluation.value.ParticularIntegerValue r0;
        proguard.evaluation.value.LongValue $r1;

        r0 := @this: proguard.evaluation.value.ParticularIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.LongValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue shiftLeft(proguard.evaluation.value.ParticularIntegerValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.LongValue shiftLeftOf(proguard.evaluation.value.ParticularLongValue)
    {
        proguard.evaluation.value.ParticularLongValue $r1, $r2;
        int $i0;
        proguard.evaluation.value.ParticularIntegerValue r0;
        long $l1;

        r0 := @this: proguard.evaluation.value.ParticularIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularLongValue;

        $r2 = new proguard.evaluation.value.ParticularLongValue;

        $l1 = virtualinvoke $r1.<proguard.evaluation.value.ParticularLongValue: long value()>();

        $i0 = r0.<proguard.evaluation.value.ParticularIntegerValue: int value>;

        $l1 = $l1 << $i0;

        specialinvoke $r2.<proguard.evaluation.value.ParticularLongValue: void <init>(long)>($l1);

        return $r2;
    }

    public proguard.evaluation.value.IntegerValue shiftRight(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.ParticularIntegerValue r0;

        r0 := @this: proguard.evaluation.value.ParticularIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue shiftRightOf(proguard.evaluation.value.ParticularIntegerValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.IntegerValue shiftRight(proguard.evaluation.value.ParticularIntegerValue)
    {
        int $i0, $i1;
        proguard.evaluation.value.ParticularIntegerValue r0, $r1, $r2;

        r0 := @this: proguard.evaluation.value.ParticularIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularIntegerValue;

        $r2 = new proguard.evaluation.value.ParticularIntegerValue;

        $i1 = r0.<proguard.evaluation.value.ParticularIntegerValue: int value>;

        $i0 = $r1.<proguard.evaluation.value.ParticularIntegerValue: int value>;

        $i0 = $i1 >> $i0;

        specialinvoke $r2.<proguard.evaluation.value.ParticularIntegerValue: void <init>(int)>($i0);

        return $r2;
    }

    public proguard.evaluation.value.IntegerValue shiftRightOf(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.ParticularIntegerValue r0;

        r0 := @this: proguard.evaluation.value.ParticularIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue shiftRight(proguard.evaluation.value.ParticularIntegerValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.IntegerValue shiftRightOf(proguard.evaluation.value.ParticularIntegerValue)
    {
        int $i0, $i1;
        proguard.evaluation.value.ParticularIntegerValue r0, $r1, $r2;

        r0 := @this: proguard.evaluation.value.ParticularIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularIntegerValue;

        $r2 = new proguard.evaluation.value.ParticularIntegerValue;

        $i1 = $r1.<proguard.evaluation.value.ParticularIntegerValue: int value>;

        $i0 = r0.<proguard.evaluation.value.ParticularIntegerValue: int value>;

        $i0 = $i1 >> $i0;

        specialinvoke $r2.<proguard.evaluation.value.ParticularIntegerValue: void <init>(int)>($i0);

        return $r2;
    }

    public proguard.evaluation.value.LongValue shiftRightOf(proguard.evaluation.value.LongValue)
    {
        proguard.evaluation.value.ParticularIntegerValue r0;
        proguard.evaluation.value.LongValue $r1;

        r0 := @this: proguard.evaluation.value.ParticularIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.LongValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue shiftRight(proguard.evaluation.value.ParticularIntegerValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.LongValue shiftRightOf(proguard.evaluation.value.ParticularLongValue)
    {
        proguard.evaluation.value.ParticularLongValue $r1, $r2;
        int $i0;
        proguard.evaluation.value.ParticularIntegerValue r0;
        long $l1;

        r0 := @this: proguard.evaluation.value.ParticularIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularLongValue;

        $r2 = new proguard.evaluation.value.ParticularLongValue;

        $l1 = virtualinvoke $r1.<proguard.evaluation.value.ParticularLongValue: long value()>();

        $i0 = r0.<proguard.evaluation.value.ParticularIntegerValue: int value>;

        $l1 = $l1 >> $i0;

        specialinvoke $r2.<proguard.evaluation.value.ParticularLongValue: void <init>(long)>($l1);

        return $r2;
    }

    public proguard.evaluation.value.IntegerValue subtract(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.ParticularIntegerValue r0;

        r0 := @this: proguard.evaluation.value.ParticularIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue subtractFrom(proguard.evaluation.value.ParticularIntegerValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.IntegerValue subtract(proguard.evaluation.value.ParticularIntegerValue)
    {
        int $i0, $i1;
        proguard.evaluation.value.ParticularIntegerValue r0, $r1, $r2;

        r0 := @this: proguard.evaluation.value.ParticularIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularIntegerValue;

        $r2 = new proguard.evaluation.value.ParticularIntegerValue;

        $i1 = r0.<proguard.evaluation.value.ParticularIntegerValue: int value>;

        $i0 = $r1.<proguard.evaluation.value.ParticularIntegerValue: int value>;

        $i0 = $i1 - $i0;

        specialinvoke $r2.<proguard.evaluation.value.ParticularIntegerValue: void <init>(int)>($i0);

        return $r2;
    }

    public proguard.evaluation.value.IntegerValue subtractFrom(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.ParticularIntegerValue r0;

        r0 := @this: proguard.evaluation.value.ParticularIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue subtract(proguard.evaluation.value.ParticularIntegerValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.IntegerValue subtractFrom(proguard.evaluation.value.ParticularIntegerValue)
    {
        int $i0, $i1;
        proguard.evaluation.value.ParticularIntegerValue r0, $r1, $r2;

        r0 := @this: proguard.evaluation.value.ParticularIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularIntegerValue;

        $r2 = new proguard.evaluation.value.ParticularIntegerValue;

        $i1 = $r1.<proguard.evaluation.value.ParticularIntegerValue: int value>;

        $i0 = r0.<proguard.evaluation.value.ParticularIntegerValue: int value>;

        $i0 = $i1 - $i0;

        specialinvoke $r2.<proguard.evaluation.value.ParticularIntegerValue: void <init>(int)>($i0);

        return $r2;
    }

    public java.lang.String toString()
    {
        int $i0;
        proguard.evaluation.value.ParticularIntegerValue r0;
        java.lang.String $r1;

        r0 := @this: proguard.evaluation.value.ParticularIntegerValue;

        $i0 = r0.<proguard.evaluation.value.ParticularIntegerValue: int value>;

        $r1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        return $r1;
    }

    public proguard.evaluation.value.IntegerValue unsignedShiftRight(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.ParticularIntegerValue r0;

        r0 := @this: proguard.evaluation.value.ParticularIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue unsignedShiftRightOf(proguard.evaluation.value.ParticularIntegerValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.IntegerValue unsignedShiftRight(proguard.evaluation.value.ParticularIntegerValue)
    {
        int $i0, $i1;
        proguard.evaluation.value.ParticularIntegerValue r0, $r1, $r2;

        r0 := @this: proguard.evaluation.value.ParticularIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularIntegerValue;

        $r2 = new proguard.evaluation.value.ParticularIntegerValue;

        $i1 = r0.<proguard.evaluation.value.ParticularIntegerValue: int value>;

        $i0 = $r1.<proguard.evaluation.value.ParticularIntegerValue: int value>;

        $i0 = $i1 >>> $i0;

        specialinvoke $r2.<proguard.evaluation.value.ParticularIntegerValue: void <init>(int)>($i0);

        return $r2;
    }

    public proguard.evaluation.value.IntegerValue unsignedShiftRightOf(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.ParticularIntegerValue r0;

        r0 := @this: proguard.evaluation.value.ParticularIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue unsignedShiftRight(proguard.evaluation.value.ParticularIntegerValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.IntegerValue unsignedShiftRightOf(proguard.evaluation.value.ParticularIntegerValue)
    {
        int $i0, $i1;
        proguard.evaluation.value.ParticularIntegerValue r0, $r1, $r2;

        r0 := @this: proguard.evaluation.value.ParticularIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularIntegerValue;

        $r2 = new proguard.evaluation.value.ParticularIntegerValue;

        $i1 = $r1.<proguard.evaluation.value.ParticularIntegerValue: int value>;

        $i0 = r0.<proguard.evaluation.value.ParticularIntegerValue: int value>;

        $i0 = $i1 >>> $i0;

        specialinvoke $r2.<proguard.evaluation.value.ParticularIntegerValue: void <init>(int)>($i0);

        return $r2;
    }

    public proguard.evaluation.value.LongValue unsignedShiftRightOf(proguard.evaluation.value.LongValue)
    {
        proguard.evaluation.value.ParticularIntegerValue r0;
        proguard.evaluation.value.LongValue $r1;

        r0 := @this: proguard.evaluation.value.ParticularIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.LongValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue unsignedShiftRight(proguard.evaluation.value.ParticularIntegerValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.LongValue unsignedShiftRightOf(proguard.evaluation.value.ParticularLongValue)
    {
        proguard.evaluation.value.ParticularLongValue $r1, $r2;
        int $i0;
        proguard.evaluation.value.ParticularIntegerValue r0;
        long $l1;

        r0 := @this: proguard.evaluation.value.ParticularIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularLongValue;

        $r2 = new proguard.evaluation.value.ParticularLongValue;

        $l1 = virtualinvoke $r1.<proguard.evaluation.value.ParticularLongValue: long value()>();

        $i0 = r0.<proguard.evaluation.value.ParticularIntegerValue: int value>;

        $l1 = $l1 >>> $i0;

        specialinvoke $r2.<proguard.evaluation.value.ParticularLongValue: void <init>(long)>($l1);

        return $r2;
    }

    public int value()
    {
        int i0;
        proguard.evaluation.value.ParticularIntegerValue r0;

        r0 := @this: proguard.evaluation.value.ParticularIntegerValue;

        i0 = r0.<proguard.evaluation.value.ParticularIntegerValue: int value>;

        return i0;
    }

    public proguard.evaluation.value.IntegerValue xor(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.ParticularIntegerValue r0;

        r0 := @this: proguard.evaluation.value.ParticularIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue xor(proguard.evaluation.value.ParticularIntegerValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.IntegerValue xor(proguard.evaluation.value.ParticularIntegerValue)
    {
        int $i0, $i1;
        proguard.evaluation.value.ParticularIntegerValue r0, $r1, $r2;

        r0 := @this: proguard.evaluation.value.ParticularIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularIntegerValue;

        $r2 = new proguard.evaluation.value.ParticularIntegerValue;

        $i1 = r0.<proguard.evaluation.value.ParticularIntegerValue: int value>;

        $i0 = $r1.<proguard.evaluation.value.ParticularIntegerValue: int value>;

        $i0 = $i1 ^ $i0;

        specialinvoke $r2.<proguard.evaluation.value.ParticularIntegerValue: void <init>(int)>($i0);

        return $r2;
    }
}
