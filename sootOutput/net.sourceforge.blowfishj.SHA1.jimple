public class net.sourceforge.blowfishj.SHA1 extends java.lang.Object
{
    public static final int DIGEST_SIZE;
    private static final java.lang.String HEXTAB;
    private static final byte[] SELFTEST_DIGEST;
    private static final java.lang.String SELFTEST_MESSAGE;
    private int[] m_block;
    private byte[] m_digestBits;
    private long m_lCount;
    private int m_nBlockIndex;
    private int[] m_state;

    static void <clinit>()
    {
        byte[] $r0;

        <net.sourceforge.blowfishj.SHA1: java.lang.String SELFTEST_MESSAGE> = "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq";

        <net.sourceforge.blowfishj.SHA1: java.lang.String HEXTAB> = "0123456789abcdef";

        <net.sourceforge.blowfishj.SHA1: int DIGEST_SIZE> = 20;

        $r0 = newarray (byte)[20];

        $r0[0] = -124;

        $r0[1] = -104;

        $r0[2] = 62;

        $r0[3] = 68;

        $r0[4] = 28;

        $r0[5] = 59;

        $r0[6] = -46;

        $r0[7] = 110;

        $r0[8] = -70;

        $r0[9] = -82;

        $r0[10] = 74;

        $r0[11] = -95;

        $r0[12] = -7;

        $r0[13] = 81;

        $r0[14] = 41;

        $r0[15] = -27;

        $r0[16] = -27;

        $r0[17] = 70;

        $r0[18] = 112;

        $r0[19] = -15;

        <net.sourceforge.blowfishj.SHA1: byte[] SELFTEST_DIGEST> = $r0;

        return;
    }

    public void <init>()
    {
        byte[] $r2;
        net.sourceforge.blowfishj.SHA1 r0;
        int[] $r1;

        r0 := @this: net.sourceforge.blowfishj.SHA1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (int)[5];

        r0.<net.sourceforge.blowfishj.SHA1: int[] m_state> = $r1;

        $r1 = newarray (int)[16];

        r0.<net.sourceforge.blowfishj.SHA1: int[] m_block> = $r1;

        $r2 = newarray (byte)[20];

        r0.<net.sourceforge.blowfishj.SHA1: byte[] m_digestBits> = $r2;

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void reset()>();

        return;
    }

    static final int rol(int, int)
    {
        int $i0, $i1, $i2;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = $i0 << $i1;

        $i1 = 32 - $i1;

        $i0 = $i0 >>> $i1;

        $i0 = $i2 | $i0;

        return $i0;
    }

    final int blk(int)
    {
        int[] $r1, $r2;
        int $i0, $i1, $i2, $i3;
        net.sourceforge.blowfishj.SHA1 r0;

        r0 := @this: net.sourceforge.blowfishj.SHA1;

        $i0 := @parameter0: int;

        $r1 = r0.<net.sourceforge.blowfishj.SHA1: int[] m_block>;

        $i1 = $i0 & 15;

        $r2 = r0.<net.sourceforge.blowfishj.SHA1: int[] m_block>;

        $i2 = $i0 + 13;

        $i2 = $i2 & 15;

        $i2 = $r2[$i2];

        $r2 = r0.<net.sourceforge.blowfishj.SHA1: int[] m_block>;

        $i3 = $i0 + 8;

        $i3 = $i3 & 15;

        $i3 = $r2[$i3];

        $i2 = $i2 ^ $i3;

        $r2 = r0.<net.sourceforge.blowfishj.SHA1: int[] m_block>;

        $i3 = $i0 + 2;

        $i3 = $i3 & 15;

        $i3 = $r2[$i3];

        $i2 = $i2 ^ $i3;

        $r2 = r0.<net.sourceforge.blowfishj.SHA1: int[] m_block>;

        $i0 = $i0 & 15;

        $i0 = $r2[$i0];

        $i0 = $i2 ^ $i0;

        $i0 = staticinvoke <net.sourceforge.blowfishj.SHA1: int rol(int,int)>($i0, 1);

        $r1[$i1] = $i0;

        return $i0;
    }

    final int blk0(int)
    {
        int[] $r1, $r2;
        int $i0, $i1, $i2;
        net.sourceforge.blowfishj.SHA1 r0;

        r0 := @this: net.sourceforge.blowfishj.SHA1;

        $i0 := @parameter0: int;

        $r1 = r0.<net.sourceforge.blowfishj.SHA1: int[] m_block>;

        $r2 = r0.<net.sourceforge.blowfishj.SHA1: int[] m_block>;

        $i1 = $r2[$i0];

        $i1 = staticinvoke <net.sourceforge.blowfishj.SHA1: int rol(int,int)>($i1, 24);

        $i1 = $i1 & -16711936;

        $r2 = r0.<net.sourceforge.blowfishj.SHA1: int[] m_block>;

        $i2 = $r2[$i0];

        $i2 = staticinvoke <net.sourceforge.blowfishj.SHA1: int rol(int,int)>($i2, 8);

        $i2 = $i2 & 16711935;

        $i1 = $i1 | $i2;

        $r1[$i0] = $i1;

        return $i1;
    }

    public void clear()
    {
        byte[] $r2;
        int[] $r1;
        int i0, $i1;
        net.sourceforge.blowfishj.SHA1 r0;

        r0 := @this: net.sourceforge.blowfishj.SHA1;

        i0 = 0;

     label1:
        $r1 = r0.<net.sourceforge.blowfishj.SHA1: int[] m_state>;

        $i1 = lengthof $r1;

        if i0 >= $i1 goto label2;

        $r1 = r0.<net.sourceforge.blowfishj.SHA1: int[] m_state>;

        $r1[i0] = 0;

        i0 = i0 + 1;

        goto label1;

     label2:
        i0 = 0;

     label3:
        $r2 = r0.<net.sourceforge.blowfishj.SHA1: byte[] m_digestBits>;

        $i1 = lengthof $r2;

        if i0 >= $i1 goto label4;

        $r2 = r0.<net.sourceforge.blowfishj.SHA1: byte[] m_digestBits>;

        $r2[i0] = 0;

        i0 = i0 + 1;

        goto label3;

     label4:
        i0 = 0;

     label5:
        $r1 = r0.<net.sourceforge.blowfishj.SHA1: int[] m_block>;

        $i1 = lengthof $r1;

        if i0 >= $i1 goto label6;

        $r1 = r0.<net.sourceforge.blowfishj.SHA1: int[] m_block>;

        $r1[i0] = 0;

        i0 = i0 + 1;

        goto label5;

     label6:
        r0.<net.sourceforge.blowfishj.SHA1: long m_lCount> = 0L;

        r0.<net.sourceforge.blowfishj.SHA1: int m_nBlockIndex> = 0;

        return;
    }

    public void finalize()
    {
        byte[] r1;
        long $l2;
        net.sourceforge.blowfishj.SHA1 r0;
        byte $b4;
        int[] $r2;
        int $i0, i1, $i3;

        r0 := @this: net.sourceforge.blowfishj.SHA1;

        r1 = newarray (byte)[8];

        i1 = 0;

     label1:
        if i1 >= 8 goto label2;

        $l2 = r0.<net.sourceforge.blowfishj.SHA1: long m_lCount>;

        $i3 = 7 - i1;

        $i3 = $i3 << 3;

        $l2 = $l2 >>> $i3;

        $l2 = $l2 & 255L;

        $i3 = (int) $l2;

        $b4 = (byte) $i3;

        r1[i1] = $b4;

        i1 = i1 + 1;

        goto label1;

     label2:
        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void update(byte)>(-128);

     label3:
        i1 = r0.<net.sourceforge.blowfishj.SHA1: int m_nBlockIndex>;

        if i1 == 56 goto label4;

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void update(byte)>(0);

        goto label3;

     label4:
        i1 = 0;

     label5:
        $i3 = lengthof r1;

        if i1 >= $i3 goto label6;

        $b4 = r1[i1];

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void update(byte)>($b4);

        i1 = i1 + 1;

        goto label5;

     label6:
        i1 = 0;

     label7:
        if i1 >= 20 goto label8;

        r1 = r0.<net.sourceforge.blowfishj.SHA1: byte[] m_digestBits>;

        $r2 = r0.<net.sourceforge.blowfishj.SHA1: int[] m_state>;

        $i3 = i1 >> 2;

        $i3 = $r2[$i3];

        $i0 = i1 & 3;

        $i0 = 3 - $i0;

        $i0 = $i0 << 3;

        $i3 = $i3 >> $i0;

        $i3 = $i3 & 255;

        $b4 = (byte) $i3;

        r1[i1] = $b4;

        i1 = i1 + 1;

        goto label7;

     label8:
        return;
    }

    public int getDigest(byte[], int)
    {
        byte[] $r1, $r2;
        int $i0;
        net.sourceforge.blowfishj.SHA1 r0;

        r0 := @this: net.sourceforge.blowfishj.SHA1;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 = r0.<net.sourceforge.blowfishj.SHA1: byte[] m_digestBits>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r1, $i0, 20);

        return 20;
    }

    public byte[] getDigest()
    {
        byte[] r1, $r2;
        net.sourceforge.blowfishj.SHA1 r0;

        r0 := @this: net.sourceforge.blowfishj.SHA1;

        r1 = newarray (byte)[20];

        $r2 = r0.<net.sourceforge.blowfishj.SHA1: byte[] m_digestBits>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, 20);

        return r1;
    }

    final void r0(int[], int, int, int, int, int, int)
    {
        net.sourceforge.blowfishj.SHA1 r0;
        int[] $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;

        r0 := @this: net.sourceforge.blowfishj.SHA1;

        $r1 := @parameter0: int[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        $i4 := @parameter5: int;

        $i5 := @parameter6: int;

        $i6 = $r1[$i4];

        $i7 = $r1[$i1];

        $i2 = $r1[$i2];

        $i8 = $r1[$i3];

        $i2 = $i2 ^ $i8;

        $i2 = $i7 & $i2;

        $i3 = $r1[$i3];

        $i2 = $i2 ^ $i3;

        $i3 = virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: int blk0(int)>($i5);

        $i2 = $i2 + $i3;

        $i2 = $i2 + 1518500249;

        $i0 = $r1[$i0];

        $i0 = staticinvoke <net.sourceforge.blowfishj.SHA1: int rol(int,int)>($i0, 5);

        $i0 = $i2 + $i0;

        $i0 = $i6 + $i0;

        $r1[$i4] = $i0;

        $i0 = $r1[$i1];

        $i0 = staticinvoke <net.sourceforge.blowfishj.SHA1: int rol(int,int)>($i0, 30);

        $r1[$i1] = $i0;

        return;
    }

    final void r1(int[], int, int, int, int, int, int)
    {
        net.sourceforge.blowfishj.SHA1 r0;
        int[] $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;

        r0 := @this: net.sourceforge.blowfishj.SHA1;

        $r1 := @parameter0: int[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        $i4 := @parameter5: int;

        $i5 := @parameter6: int;

        $i6 = $r1[$i4];

        $i7 = $r1[$i1];

        $i2 = $r1[$i2];

        $i8 = $r1[$i3];

        $i2 = $i2 ^ $i8;

        $i2 = $i7 & $i2;

        $i3 = $r1[$i3];

        $i2 = $i2 ^ $i3;

        $i3 = virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: int blk(int)>($i5);

        $i2 = $i2 + $i3;

        $i2 = $i2 + 1518500249;

        $i0 = $r1[$i0];

        $i0 = staticinvoke <net.sourceforge.blowfishj.SHA1: int rol(int,int)>($i0, 5);

        $i0 = $i2 + $i0;

        $i0 = $i6 + $i0;

        $r1[$i4] = $i0;

        $i0 = $r1[$i1];

        $i0 = staticinvoke <net.sourceforge.blowfishj.SHA1: int rol(int,int)>($i0, 30);

        $r1[$i1] = $i0;

        return;
    }

    final void r2(int[], int, int, int, int, int, int)
    {
        net.sourceforge.blowfishj.SHA1 r0;
        int[] $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: net.sourceforge.blowfishj.SHA1;

        $r1 := @parameter0: int[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        $i4 := @parameter5: int;

        $i5 := @parameter6: int;

        $i6 = $r1[$i4];

        $i7 = $r1[$i1];

        $i2 = $r1[$i2];

        $i2 = $i7 ^ $i2;

        $i3 = $r1[$i3];

        $i2 = $i2 ^ $i3;

        $i3 = virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: int blk(int)>($i5);

        $i2 = $i2 + $i3;

        $i2 = $i2 + 1859775393;

        $i0 = $r1[$i0];

        $i0 = staticinvoke <net.sourceforge.blowfishj.SHA1: int rol(int,int)>($i0, 5);

        $i0 = $i2 + $i0;

        $i0 = $i6 + $i0;

        $r1[$i4] = $i0;

        $i0 = $r1[$i1];

        $i0 = staticinvoke <net.sourceforge.blowfishj.SHA1: int rol(int,int)>($i0, 30);

        $r1[$i1] = $i0;

        return;
    }

    final void r3(int[], int, int, int, int, int, int)
    {
        net.sourceforge.blowfishj.SHA1 r0;
        int[] $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;

        r0 := @this: net.sourceforge.blowfishj.SHA1;

        $r1 := @parameter0: int[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        $i4 := @parameter5: int;

        $i5 := @parameter6: int;

        $i6 = $r1[$i4];

        $i7 = $r1[$i1];

        $i8 = $r1[$i2];

        $i7 = $i7 | $i8;

        $i3 = $r1[$i3];

        $i3 = $i7 & $i3;

        $i7 = $r1[$i1];

        $i2 = $r1[$i2];

        $i2 = $i7 & $i2;

        $i2 = $i3 | $i2;

        $i3 = virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: int blk(int)>($i5);

        $i2 = $i2 + $i3;

        $i2 = $i2 + -1894007588;

        $i0 = $r1[$i0];

        $i0 = staticinvoke <net.sourceforge.blowfishj.SHA1: int rol(int,int)>($i0, 5);

        $i0 = $i2 + $i0;

        $i0 = $i6 + $i0;

        $r1[$i4] = $i0;

        $i0 = $r1[$i1];

        $i0 = staticinvoke <net.sourceforge.blowfishj.SHA1: int rol(int,int)>($i0, 30);

        $r1[$i1] = $i0;

        return;
    }

    final void r4(int[], int, int, int, int, int, int)
    {
        net.sourceforge.blowfishj.SHA1 r0;
        int[] $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: net.sourceforge.blowfishj.SHA1;

        $r1 := @parameter0: int[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        $i4 := @parameter5: int;

        $i5 := @parameter6: int;

        $i6 = $r1[$i4];

        $i7 = $r1[$i1];

        $i2 = $r1[$i2];

        $i2 = $i7 ^ $i2;

        $i3 = $r1[$i3];

        $i2 = $i2 ^ $i3;

        $i3 = virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: int blk(int)>($i5);

        $i2 = $i2 + $i3;

        $i2 = $i2 + -899497514;

        $i0 = $r1[$i0];

        $i0 = staticinvoke <net.sourceforge.blowfishj.SHA1: int rol(int,int)>($i0, 5);

        $i0 = $i2 + $i0;

        $i0 = $i6 + $i0;

        $r1[$i4] = $i0;

        $i0 = $r1[$i1];

        $i0 = staticinvoke <net.sourceforge.blowfishj.SHA1: int rol(int,int)>($i0, 30);

        $r1[$i1] = $i0;

        return;
    }

    public void reset()
    {
        net.sourceforge.blowfishj.SHA1 r0;
        int[] $r1;

        r0 := @this: net.sourceforge.blowfishj.SHA1;

        $r1 = r0.<net.sourceforge.blowfishj.SHA1: int[] m_state>;

        $r1[0] = 1732584193;

        $r1 = r0.<net.sourceforge.blowfishj.SHA1: int[] m_state>;

        $r1[1] = -271733879;

        $r1 = r0.<net.sourceforge.blowfishj.SHA1: int[] m_state>;

        $r1[2] = -1732584194;

        $r1 = r0.<net.sourceforge.blowfishj.SHA1: int[] m_state>;

        $r1[3] = 271733878;

        $r1 = r0.<net.sourceforge.blowfishj.SHA1: int[] m_state>;

        $r1[4] = -1009589776;

        r0.<net.sourceforge.blowfishj.SHA1: long m_lCount> = 0L;

        r0.<net.sourceforge.blowfishj.SHA1: int m_nBlockIndex> = 0;

        return;
    }

    public boolean selfTest()
    {
        byte[] $r1, $r2;
        net.sourceforge.blowfishj.SHA1 r0, $r3;
        byte $b1, $b2;
        int i0, $i3, $i4;

        r0 := @this: net.sourceforge.blowfishj.SHA1;

        $r3 = new net.sourceforge.blowfishj.SHA1;

        r0 = $r3;

        specialinvoke $r3.<net.sourceforge.blowfishj.SHA1: void <init>()>();

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void update(java.lang.String)>("abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq");

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void finalize()>();

        $r1 = virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: byte[] getDigest()>();

        i0 = 0;

     label1:
        if i0 >= 20 goto label3;

        $b1 = $r1[i0];

        $r2 = <net.sourceforge.blowfishj.SHA1: byte[] SELFTEST_DIGEST>;

        $b2 = $r2[i0];

        $i3 = (int) $b1;

        $i4 = (int) $b2;

        if $i3 == $i4 goto label2;

        return 0;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return 1;
    }

    public java.lang.String toString()
    {
        byte[] $r3;
        char $c3;
        net.sourceforge.blowfishj.SHA1 r0;
        byte $b1;
        java.lang.StringBuffer r1, $r4;
        int i0, $i2;
        java.lang.String $r2;

        r0 := @this: net.sourceforge.blowfishj.SHA1;

        $r4 = new java.lang.StringBuffer;

        r1 = $r4;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>(int)>(40);

        i0 = 0;

     label1:
        if i0 >= 20 goto label2;

        $r2 = "0123456789abcdef";

        $r3 = r0.<net.sourceforge.blowfishj.SHA1: byte[] m_digestBits>;

        $b1 = $r3[i0];

        $i2 = (int) $b1;

        $i2 = $i2 >>> 4;

        $i2 = $i2 & 15;

        $c3 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i2);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c3);

        $r2 = "0123456789abcdef";

        $r3 = r0.<net.sourceforge.blowfishj.SHA1: byte[] m_digestBits>;

        $b1 = $r3[i0];

        $b1 = $b1 & 15;

        $i2 = (int) $b1;

        $c3 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i2);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c3);

        i0 = i0 + 1;

        goto label1;

     label2:
        $r2 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    void transform()
    {
        int[] r1, $r2;
        int $i0, $i1;
        net.sourceforge.blowfishj.SHA1 r0;

        r0 := @this: net.sourceforge.blowfishj.SHA1;

        r1 = newarray (int)[5];

        $r2 = r0.<net.sourceforge.blowfishj.SHA1: int[] m_state>;

        $i0 = $r2[0];

        r1[0] = $i0;

        $r2 = r0.<net.sourceforge.blowfishj.SHA1: int[] m_state>;

        $i0 = $r2[1];

        r1[1] = $i0;

        $r2 = r0.<net.sourceforge.blowfishj.SHA1: int[] m_state>;

        $i0 = $r2[2];

        r1[2] = $i0;

        $r2 = r0.<net.sourceforge.blowfishj.SHA1: int[] m_state>;

        $i0 = $r2[3];

        r1[3] = $i0;

        $r2 = r0.<net.sourceforge.blowfishj.SHA1: int[] m_state>;

        $i0 = $r2[4];

        r1[4] = $i0;

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r0(int[],int,int,int,int,int,int)>(r1, 0, 1, 2, 3, 4, 0);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r0(int[],int,int,int,int,int,int)>(r1, 4, 0, 1, 2, 3, 1);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r0(int[],int,int,int,int,int,int)>(r1, 3, 4, 0, 1, 2, 2);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r0(int[],int,int,int,int,int,int)>(r1, 2, 3, 4, 0, 1, 3);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r0(int[],int,int,int,int,int,int)>(r1, 1, 2, 3, 4, 0, 4);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r0(int[],int,int,int,int,int,int)>(r1, 0, 1, 2, 3, 4, 5);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r0(int[],int,int,int,int,int,int)>(r1, 4, 0, 1, 2, 3, 6);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r0(int[],int,int,int,int,int,int)>(r1, 3, 4, 0, 1, 2, 7);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r0(int[],int,int,int,int,int,int)>(r1, 2, 3, 4, 0, 1, 8);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r0(int[],int,int,int,int,int,int)>(r1, 1, 2, 3, 4, 0, 9);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r0(int[],int,int,int,int,int,int)>(r1, 0, 1, 2, 3, 4, 10);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r0(int[],int,int,int,int,int,int)>(r1, 4, 0, 1, 2, 3, 11);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r0(int[],int,int,int,int,int,int)>(r1, 3, 4, 0, 1, 2, 12);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r0(int[],int,int,int,int,int,int)>(r1, 2, 3, 4, 0, 1, 13);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r0(int[],int,int,int,int,int,int)>(r1, 1, 2, 3, 4, 0, 14);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r0(int[],int,int,int,int,int,int)>(r1, 0, 1, 2, 3, 4, 15);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r1(int[],int,int,int,int,int,int)>(r1, 4, 0, 1, 2, 3, 16);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r1(int[],int,int,int,int,int,int)>(r1, 3, 4, 0, 1, 2, 17);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r1(int[],int,int,int,int,int,int)>(r1, 2, 3, 4, 0, 1, 18);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r1(int[],int,int,int,int,int,int)>(r1, 1, 2, 3, 4, 0, 19);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r2(int[],int,int,int,int,int,int)>(r1, 0, 1, 2, 3, 4, 20);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r2(int[],int,int,int,int,int,int)>(r1, 4, 0, 1, 2, 3, 21);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r2(int[],int,int,int,int,int,int)>(r1, 3, 4, 0, 1, 2, 22);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r2(int[],int,int,int,int,int,int)>(r1, 2, 3, 4, 0, 1, 23);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r2(int[],int,int,int,int,int,int)>(r1, 1, 2, 3, 4, 0, 24);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r2(int[],int,int,int,int,int,int)>(r1, 0, 1, 2, 3, 4, 25);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r2(int[],int,int,int,int,int,int)>(r1, 4, 0, 1, 2, 3, 26);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r2(int[],int,int,int,int,int,int)>(r1, 3, 4, 0, 1, 2, 27);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r2(int[],int,int,int,int,int,int)>(r1, 2, 3, 4, 0, 1, 28);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r2(int[],int,int,int,int,int,int)>(r1, 1, 2, 3, 4, 0, 29);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r2(int[],int,int,int,int,int,int)>(r1, 0, 1, 2, 3, 4, 30);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r2(int[],int,int,int,int,int,int)>(r1, 4, 0, 1, 2, 3, 31);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r2(int[],int,int,int,int,int,int)>(r1, 3, 4, 0, 1, 2, 32);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r2(int[],int,int,int,int,int,int)>(r1, 2, 3, 4, 0, 1, 33);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r2(int[],int,int,int,int,int,int)>(r1, 1, 2, 3, 4, 0, 34);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r2(int[],int,int,int,int,int,int)>(r1, 0, 1, 2, 3, 4, 35);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r2(int[],int,int,int,int,int,int)>(r1, 4, 0, 1, 2, 3, 36);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r2(int[],int,int,int,int,int,int)>(r1, 3, 4, 0, 1, 2, 37);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r2(int[],int,int,int,int,int,int)>(r1, 2, 3, 4, 0, 1, 38);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r2(int[],int,int,int,int,int,int)>(r1, 1, 2, 3, 4, 0, 39);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r3(int[],int,int,int,int,int,int)>(r1, 0, 1, 2, 3, 4, 40);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r3(int[],int,int,int,int,int,int)>(r1, 4, 0, 1, 2, 3, 41);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r3(int[],int,int,int,int,int,int)>(r1, 3, 4, 0, 1, 2, 42);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r3(int[],int,int,int,int,int,int)>(r1, 2, 3, 4, 0, 1, 43);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r3(int[],int,int,int,int,int,int)>(r1, 1, 2, 3, 4, 0, 44);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r3(int[],int,int,int,int,int,int)>(r1, 0, 1, 2, 3, 4, 45);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r3(int[],int,int,int,int,int,int)>(r1, 4, 0, 1, 2, 3, 46);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r3(int[],int,int,int,int,int,int)>(r1, 3, 4, 0, 1, 2, 47);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r3(int[],int,int,int,int,int,int)>(r1, 2, 3, 4, 0, 1, 48);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r3(int[],int,int,int,int,int,int)>(r1, 1, 2, 3, 4, 0, 49);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r3(int[],int,int,int,int,int,int)>(r1, 0, 1, 2, 3, 4, 50);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r3(int[],int,int,int,int,int,int)>(r1, 4, 0, 1, 2, 3, 51);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r3(int[],int,int,int,int,int,int)>(r1, 3, 4, 0, 1, 2, 52);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r3(int[],int,int,int,int,int,int)>(r1, 2, 3, 4, 0, 1, 53);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r3(int[],int,int,int,int,int,int)>(r1, 1, 2, 3, 4, 0, 54);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r3(int[],int,int,int,int,int,int)>(r1, 0, 1, 2, 3, 4, 55);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r3(int[],int,int,int,int,int,int)>(r1, 4, 0, 1, 2, 3, 56);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r3(int[],int,int,int,int,int,int)>(r1, 3, 4, 0, 1, 2, 57);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r3(int[],int,int,int,int,int,int)>(r1, 2, 3, 4, 0, 1, 58);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r3(int[],int,int,int,int,int,int)>(r1, 1, 2, 3, 4, 0, 59);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r4(int[],int,int,int,int,int,int)>(r1, 0, 1, 2, 3, 4, 60);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r4(int[],int,int,int,int,int,int)>(r1, 4, 0, 1, 2, 3, 61);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r4(int[],int,int,int,int,int,int)>(r1, 3, 4, 0, 1, 2, 62);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r4(int[],int,int,int,int,int,int)>(r1, 2, 3, 4, 0, 1, 63);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r4(int[],int,int,int,int,int,int)>(r1, 1, 2, 3, 4, 0, 64);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r4(int[],int,int,int,int,int,int)>(r1, 0, 1, 2, 3, 4, 65);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r4(int[],int,int,int,int,int,int)>(r1, 4, 0, 1, 2, 3, 66);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r4(int[],int,int,int,int,int,int)>(r1, 3, 4, 0, 1, 2, 67);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r4(int[],int,int,int,int,int,int)>(r1, 2, 3, 4, 0, 1, 68);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r4(int[],int,int,int,int,int,int)>(r1, 1, 2, 3, 4, 0, 69);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r4(int[],int,int,int,int,int,int)>(r1, 0, 1, 2, 3, 4, 70);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r4(int[],int,int,int,int,int,int)>(r1, 4, 0, 1, 2, 3, 71);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r4(int[],int,int,int,int,int,int)>(r1, 3, 4, 0, 1, 2, 72);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r4(int[],int,int,int,int,int,int)>(r1, 2, 3, 4, 0, 1, 73);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r4(int[],int,int,int,int,int,int)>(r1, 1, 2, 3, 4, 0, 74);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r4(int[],int,int,int,int,int,int)>(r1, 0, 1, 2, 3, 4, 75);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r4(int[],int,int,int,int,int,int)>(r1, 4, 0, 1, 2, 3, 76);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r4(int[],int,int,int,int,int,int)>(r1, 3, 4, 0, 1, 2, 77);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r4(int[],int,int,int,int,int,int)>(r1, 2, 3, 4, 0, 1, 78);

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void r4(int[],int,int,int,int,int,int)>(r1, 1, 2, 3, 4, 0, 79);

        $r2 = r0.<net.sourceforge.blowfishj.SHA1: int[] m_state>;

        $i0 = $r2[0];

        $i1 = r1[0];

        $i0 = $i0 + $i1;

        $r2[0] = $i0;

        $r2 = r0.<net.sourceforge.blowfishj.SHA1: int[] m_state>;

        $i0 = $r2[1];

        $i1 = r1[1];

        $i0 = $i0 + $i1;

        $r2[1] = $i0;

        $r2 = r0.<net.sourceforge.blowfishj.SHA1: int[] m_state>;

        $i0 = $r2[2];

        $i1 = r1[2];

        $i0 = $i0 + $i1;

        $r2[2] = $i0;

        $r2 = r0.<net.sourceforge.blowfishj.SHA1: int[] m_state>;

        $i0 = $r2[3];

        $i1 = r1[3];

        $i0 = $i0 + $i1;

        $r2[3] = $i0;

        $r2 = r0.<net.sourceforge.blowfishj.SHA1: int[] m_state>;

        $i0 = $r2[4];

        $i1 = r1[4];

        $i0 = $i0 + $i1;

        $r2[4] = $i0;

        return;
    }

    public void update(byte)
    {
        long $l2;
        net.sourceforge.blowfishj.SHA1 r0;
        short $s6;
        byte $b0;
        int[] $r1;
        int i1, $i3, $i4, $i5, $i7;

        r0 := @this: net.sourceforge.blowfishj.SHA1;

        $b0 := @parameter0: byte;

        i1 = r0.<net.sourceforge.blowfishj.SHA1: int m_nBlockIndex>;

        i1 = i1 & 3;

        i1 = i1 << 3;

        $l2 = r0.<net.sourceforge.blowfishj.SHA1: long m_lCount>;

        $l2 = $l2 + 8L;

        r0.<net.sourceforge.blowfishj.SHA1: long m_lCount> = $l2;

        $r1 = r0.<net.sourceforge.blowfishj.SHA1: int[] m_block>;

        $i3 = r0.<net.sourceforge.blowfishj.SHA1: int m_nBlockIndex>;

        $i3 = $i3 >> 2;

        $i4 = $r1[$i3];

        $i5 = 255 << i1;

        $i7 = -1;

        $i5 = $i5 ^ $i7;

        $i4 = $i4 & $i5;

        $r1[$i3] = $i4;

        $r1 = r0.<net.sourceforge.blowfishj.SHA1: int[] m_block>;

        $i3 = r0.<net.sourceforge.blowfishj.SHA1: int m_nBlockIndex>;

        $i3 = $i3 >> 2;

        $i4 = $r1[$i3];

        $s6 = (short) $b0;

        $s6 = $s6 & 255;

        $i5 = (int) $s6;

        i1 = $i5 << i1;

        i1 = $i4 | i1;

        $r1[$i3] = i1;

        i1 = r0.<net.sourceforge.blowfishj.SHA1: int m_nBlockIndex>;

        i1 = i1 + 1;

        r0.<net.sourceforge.blowfishj.SHA1: int m_nBlockIndex> = i1;

        i1 = r0.<net.sourceforge.blowfishj.SHA1: int m_nBlockIndex>;

        if i1 != 64 goto label1;

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void transform()>();

        r0.<net.sourceforge.blowfishj.SHA1: int m_nBlockIndex> = 0;

     label1:
        return;
    }

    public void update(java.lang.String)
    {
        byte $b3;
        int i0, $i1;
        char $c2;
        java.lang.String $r1;
        net.sourceforge.blowfishj.SHA1 r0;

        r0 := @this: net.sourceforge.blowfishj.SHA1;

        $r1 := @parameter0: java.lang.String;

        i0 = 0;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

     label1:
        if i0 >= $i1 goto label2;

        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i0);

        $c2 = $c2 & 255;

        $b3 = (byte) $c2;

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void update(byte)>($b3);

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void update(byte[])
    {
        int $i0;
        byte[] $r1;
        net.sourceforge.blowfishj.SHA1 r0;

        r0 := @this: net.sourceforge.blowfishj.SHA1;

        $r1 := @parameter0: byte[];

        $i0 = lengthof $r1;

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void update(byte[],int,int)>($r1, 0, $i0);

        return;
    }

    public void update(byte[], int, int)
    {
        byte[] $r1;
        byte $b1;
        int $i0, $i2;
        net.sourceforge.blowfishj.SHA1 r0;

        r0 := @this: net.sourceforge.blowfishj.SHA1;

        $r1 := @parameter0: byte[];

        $i2 := @parameter1: int;

        $i0 := @parameter2: int;

        $i0 = $i2 + $i0;

     label1:
        if $i2 >= $i0 goto label2;

        $b1 = $r1[$i2];

        virtualinvoke r0.<net.sourceforge.blowfishj.SHA1: void update(byte)>($b1);

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return;
    }
}
