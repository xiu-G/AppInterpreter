public class com.google.zxing.qrcode.detector.FinderPatternFinder extends java.lang.Object
{
    private static final int CENTER_QUORUM;
    private static final int INTEGER_MATH_SHIFT;
    protected static final int MAX_MODULES;
    protected static final int MIN_SKIP;
    private final int[] crossCheckStateCount;
    private boolean hasSkipped;
    private final com.google.zxing.common.BitMatrix image;
    private final java.util.Vector possibleCenters;
    private final com.google.zxing.ResultPointCallback resultPointCallback;

    public void <init>(com.google.zxing.common.BitMatrix)
    {
        com.google.zxing.common.BitMatrix $r1;
        com.google.zxing.qrcode.detector.FinderPatternFinder r0;

        r0 := @this: com.google.zxing.qrcode.detector.FinderPatternFinder;

        $r1 := @parameter0: com.google.zxing.common.BitMatrix;

        specialinvoke r0.<com.google.zxing.qrcode.detector.FinderPatternFinder: void <init>(com.google.zxing.common.BitMatrix,com.google.zxing.ResultPointCallback)>($r1, null);

        return;
    }

    public void <init>(com.google.zxing.common.BitMatrix, com.google.zxing.ResultPointCallback)
    {
        java.util.Vector $r3;
        com.google.zxing.qrcode.detector.FinderPatternFinder r0;
        int[] $r4;
        com.google.zxing.ResultPointCallback $r2;
        com.google.zxing.common.BitMatrix $r1;

        r0 := @this: com.google.zxing.qrcode.detector.FinderPatternFinder;

        $r1 := @parameter0: com.google.zxing.common.BitMatrix;

        $r2 := @parameter1: com.google.zxing.ResultPointCallback;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.google.zxing.qrcode.detector.FinderPatternFinder: com.google.zxing.common.BitMatrix image> = $r1;

        $r3 = new java.util.Vector;

        specialinvoke $r3.<java.util.Vector: void <init>()>();

        r0.<com.google.zxing.qrcode.detector.FinderPatternFinder: java.util.Vector possibleCenters> = $r3;

        $r4 = newarray (int)[5];

        r0.<com.google.zxing.qrcode.detector.FinderPatternFinder: int[] crossCheckStateCount> = $r4;

        r0.<com.google.zxing.qrcode.detector.FinderPatternFinder: com.google.zxing.ResultPointCallback resultPointCallback> = $r2;

        return;
    }

    private static float centerFromEnd(int[], int)
    {
        int[] $r0;
        int $i0, $i1;
        float $f0, $f1;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $i1 = $r0[4];

        $i0 = $i0 - $i1;

        $i1 = $r0[3];

        $i0 = $i0 - $i1;

        $f0 = (float) $i0;

        $i0 = $r0[2];

        $f1 = (float) $i0;

        $f1 = $f1 / 2.0F;

        $f0 = $f0 - $f1;

        return $f0;
    }

    private float crossCheckHorizontal(int, int, int, int)
    {
        com.google.zxing.qrcode.detector.FinderPatternFinder r0;
        int[] $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        float $f0;
        com.google.zxing.common.BitMatrix $r1;
        boolean $z0;

        r0 := @this: com.google.zxing.qrcode.detector.FinderPatternFinder;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $r1 = r0.<com.google.zxing.qrcode.detector.FinderPatternFinder: com.google.zxing.common.BitMatrix image>;

        $i4 = virtualinvoke $r1.<com.google.zxing.common.BitMatrix: int getWidth()>();

        $r2 = specialinvoke r0.<com.google.zxing.qrcode.detector.FinderPatternFinder: int[] getCrossCheckStateCount()>();

        $i5 = $i0;

     label01:
        if $i5 < 0 goto label02;

        $z0 = virtualinvoke $r1.<com.google.zxing.common.BitMatrix: boolean get(int,int)>($i5, $i1);

        if $z0 == 0 goto label02;

        $i6 = $r2[2];

        $i6 = $i6 + 1;

        $r2[2] = $i6;

        $i5 = $i5 + -1;

        goto label01;

     label02:
        if $i5 >= 0 goto label03;

        return #NaNF;

     label03:
        if $i5 < 0 goto label13;

        $z0 = virtualinvoke $r1.<com.google.zxing.common.BitMatrix: boolean get(int,int)>($i5, $i1);

        if $z0 != 0 goto label04;

        $i6 = $r2[1];

        if $i6 > $i2 goto label04;

        $i6 = $r2[1];

        $i6 = $i6 + 1;

        $r2[1] = $i6;

        $i5 = $i5 + -1;

        goto label03;

     label04:
        if $i5 < 0 goto label13;

        $i6 = $r2[1];

        if $i6 > $i2 goto label13;

     label05:
        if $i5 < 0 goto label06;

        $z0 = virtualinvoke $r1.<com.google.zxing.common.BitMatrix: boolean get(int,int)>($i5, $i1);

        if $z0 == 0 goto label06;

        $i6 = $r2[0];

        if $i6 > $i2 goto label06;

        $i6 = $r2[0];

        $i6 = $i6 + 1;

        $r2[0] = $i6;

        $i5 = $i5 + -1;

        goto label05;

     label06:
        $i5 = $r2[0];

        if $i5 > $i2 goto label13;

        $i0 = $i0 + 1;

     label07:
        if $i0 >= $i4 goto label08;

        $z0 = virtualinvoke $r1.<com.google.zxing.common.BitMatrix: boolean get(int,int)>($i0, $i1);

        if $z0 == 0 goto label08;

        $i5 = $r2[2];

        $i5 = $i5 + 1;

        $r2[2] = $i5;

        $i0 = $i0 + 1;

        goto label07;

     label08:
        if $i0 == $i4 goto label13;

     label09:
        if $i0 >= $i4 goto label10;

        $z0 = virtualinvoke $r1.<com.google.zxing.common.BitMatrix: boolean get(int,int)>($i0, $i1);

        if $z0 != 0 goto label10;

        $i5 = $r2[3];

        if $i5 >= $i2 goto label10;

        $i5 = $r2[3];

        $i5 = $i5 + 1;

        $r2[3] = $i5;

        $i0 = $i0 + 1;

        goto label09;

     label10:
        if $i0 == $i4 goto label13;

        $i5 = $r2[3];

        if $i5 >= $i2 goto label13;

     label11:
        if $i0 >= $i4 goto label12;

        $z0 = virtualinvoke $r1.<com.google.zxing.common.BitMatrix: boolean get(int,int)>($i0, $i1);

        if $z0 == 0 goto label12;

        $i5 = $r2[4];

        if $i5 >= $i2 goto label12;

        $i5 = $r2[4];

        $i5 = $i5 + 1;

        $r2[4] = $i5;

        $i0 = $i0 + 1;

        goto label11;

     label12:
        $i1 = $r2[4];

        if $i1 >= $i2 goto label13;

        $i1 = $r2[0];

        $i2 = $r2[1];

        $i1 = $i1 + $i2;

        $i2 = $r2[2];

        $i1 = $i1 + $i2;

        $i2 = $r2[3];

        $i1 = $i1 + $i2;

        $i2 = $r2[4];

        $i1 = $i1 + $i2;

        $i1 = $i1 - $i3;

        $i1 = staticinvoke <java.lang.Math: int abs(int)>($i1);

        $i1 = $i1 * 5;

        if $i1 >= $i3 goto label13;

        $z0 = staticinvoke <com.google.zxing.qrcode.detector.FinderPatternFinder: boolean foundPatternCross(int[])>($r2);

        if $z0 == 0 goto label13;

        $f0 = staticinvoke <com.google.zxing.qrcode.detector.FinderPatternFinder: float centerFromEnd(int[],int)>($r2, $i0);

        return $f0;

     label13:
        return #NaNF;
    }

    private float crossCheckVertical(int, int, int, int)
    {
        com.google.zxing.qrcode.detector.FinderPatternFinder r0;
        int[] $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        float $f0;
        com.google.zxing.common.BitMatrix $r1;
        boolean $z0;

        r0 := @this: com.google.zxing.qrcode.detector.FinderPatternFinder;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $r1 = r0.<com.google.zxing.qrcode.detector.FinderPatternFinder: com.google.zxing.common.BitMatrix image>;

        $i4 = virtualinvoke $r1.<com.google.zxing.common.BitMatrix: int getHeight()>();

        $r2 = specialinvoke r0.<com.google.zxing.qrcode.detector.FinderPatternFinder: int[] getCrossCheckStateCount()>();

        $i5 = $i0;

     label01:
        if $i5 < 0 goto label02;

        $z0 = virtualinvoke $r1.<com.google.zxing.common.BitMatrix: boolean get(int,int)>($i1, $i5);

        if $z0 == 0 goto label02;

        $i6 = $r2[2];

        $i6 = $i6 + 1;

        $r2[2] = $i6;

        $i5 = $i5 + -1;

        goto label01;

     label02:
        if $i5 >= 0 goto label03;

        return #NaNF;

     label03:
        if $i5 < 0 goto label13;

        $z0 = virtualinvoke $r1.<com.google.zxing.common.BitMatrix: boolean get(int,int)>($i1, $i5);

        if $z0 != 0 goto label04;

        $i6 = $r2[1];

        if $i6 > $i2 goto label04;

        $i6 = $r2[1];

        $i6 = $i6 + 1;

        $r2[1] = $i6;

        $i5 = $i5 + -1;

        goto label03;

     label04:
        if $i5 < 0 goto label13;

        $i6 = $r2[1];

        if $i6 > $i2 goto label13;

     label05:
        if $i5 < 0 goto label06;

        $z0 = virtualinvoke $r1.<com.google.zxing.common.BitMatrix: boolean get(int,int)>($i1, $i5);

        if $z0 == 0 goto label06;

        $i6 = $r2[0];

        if $i6 > $i2 goto label06;

        $i6 = $r2[0];

        $i6 = $i6 + 1;

        $r2[0] = $i6;

        $i5 = $i5 + -1;

        goto label05;

     label06:
        $i5 = $r2[0];

        if $i5 > $i2 goto label13;

        $i0 = $i0 + 1;

     label07:
        if $i0 >= $i4 goto label08;

        $z0 = virtualinvoke $r1.<com.google.zxing.common.BitMatrix: boolean get(int,int)>($i1, $i0);

        if $z0 == 0 goto label08;

        $i5 = $r2[2];

        $i5 = $i5 + 1;

        $r2[2] = $i5;

        $i0 = $i0 + 1;

        goto label07;

     label08:
        if $i0 == $i4 goto label13;

     label09:
        if $i0 >= $i4 goto label10;

        $z0 = virtualinvoke $r1.<com.google.zxing.common.BitMatrix: boolean get(int,int)>($i1, $i0);

        if $z0 != 0 goto label10;

        $i5 = $r2[3];

        if $i5 >= $i2 goto label10;

        $i5 = $r2[3];

        $i5 = $i5 + 1;

        $r2[3] = $i5;

        $i0 = $i0 + 1;

        goto label09;

     label10:
        if $i0 == $i4 goto label13;

        $i5 = $r2[3];

        if $i5 >= $i2 goto label13;

     label11:
        if $i0 >= $i4 goto label12;

        $z0 = virtualinvoke $r1.<com.google.zxing.common.BitMatrix: boolean get(int,int)>($i1, $i0);

        if $z0 == 0 goto label12;

        $i5 = $r2[4];

        if $i5 >= $i2 goto label12;

        $i5 = $r2[4];

        $i5 = $i5 + 1;

        $r2[4] = $i5;

        $i0 = $i0 + 1;

        goto label11;

     label12:
        $i1 = $r2[4];

        if $i1 >= $i2 goto label13;

        $i1 = $r2[0];

        $i2 = $r2[1];

        $i1 = $i1 + $i2;

        $i2 = $r2[2];

        $i1 = $i1 + $i2;

        $i2 = $r2[3];

        $i1 = $i1 + $i2;

        $i2 = $r2[4];

        $i1 = $i1 + $i2;

        $i1 = $i1 - $i3;

        $i1 = staticinvoke <java.lang.Math: int abs(int)>($i1);

        $i1 = $i1 * 5;

        $i2 = $i3 * 2;

        if $i1 >= $i2 goto label13;

        $z0 = staticinvoke <com.google.zxing.qrcode.detector.FinderPatternFinder: boolean foundPatternCross(int[])>($r2);

        if $z0 == 0 goto label13;

        $f0 = staticinvoke <com.google.zxing.qrcode.detector.FinderPatternFinder: float centerFromEnd(int[],int)>($r2, $i0);

        return $f0;

     label13:
        return #NaNF;
    }

    private int findRowSkip()
    {
        com.google.zxing.qrcode.detector.FinderPatternFinder r0;
        java.util.Vector $r1;
        int $i0, $i1, $i2;
        float $f0, $f1, $f2;
        java.lang.Object $r3;
        com.google.zxing.qrcode.detector.FinderPattern $r2, $r4;

        r0 := @this: com.google.zxing.qrcode.detector.FinderPatternFinder;

        $r1 = r0.<com.google.zxing.qrcode.detector.FinderPatternFinder: java.util.Vector possibleCenters>;

        $i0 = virtualinvoke $r1.<java.util.Vector: int size()>();

        if $i0 > 1 goto label1;

        return 0;

     label1:
        $r2 = null;

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label5;

        $r1 = r0.<com.google.zxing.qrcode.detector.FinderPatternFinder: java.util.Vector possibleCenters>;

        $r3 = virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>($i1);

        $r4 = (com.google.zxing.qrcode.detector.FinderPattern) $r3;

        $i2 = virtualinvoke $r4.<com.google.zxing.qrcode.detector.FinderPattern: int getCount()>();

        if $i2 < 2 goto label6;

        if $r2 != null goto label4;

     label3:
        $i1 = $i1 + 1;

        $r2 = $r4;

        goto label2;

     label4:
        r0.<com.google.zxing.qrcode.detector.FinderPatternFinder: boolean hasSkipped> = 1;

        $f0 = virtualinvoke $r2.<com.google.zxing.qrcode.detector.FinderPattern: float getX()>();

        $f1 = virtualinvoke $r4.<com.google.zxing.qrcode.detector.FinderPattern: float getX()>();

        $f0 = $f0 - $f1;

        $f0 = staticinvoke <java.lang.Math: float abs(float)>($f0);

        $f1 = virtualinvoke $r2.<com.google.zxing.qrcode.detector.FinderPattern: float getY()>();

        $f2 = virtualinvoke $r4.<com.google.zxing.qrcode.detector.FinderPattern: float getY()>();

        $f1 = $f1 - $f2;

        $f1 = staticinvoke <java.lang.Math: float abs(float)>($f1);

        $f0 = $f0 - $f1;

        $i0 = (int) $f0;

        $i0 = $i0 / 2;

        return $i0;

     label5:
        return 0;

     label6:
        $r4 = $r2;

        goto label3;
    }

    protected static boolean foundPatternCross(int[])
    {
        int[] $r0;
        int $i0, $i1, $i2, $i3;
        boolean $z0;

        $r0 := @parameter0: int[];

        $z0 = 1;

        $i0 = 0;

        $i1 = 0;

     label1:
        if $i0 >= 5 goto label3;

        $i2 = $r0[$i0];

        if $i2 != 0 goto label2;

        return 0;

     label2:
        $i1 = $i1 + $i2;

        $i0 = $i0 + 1;

        goto label1;

     label3:
        if $i1 < 7 goto label6;

        $i0 = $i1 << 8;

        $i1 = $i0 / 7;

        $i0 = $i1 / 2;

        $i2 = $r0[0];

        $i2 = $i2 << 8;

        $i2 = $i1 - $i2;

        $i2 = staticinvoke <java.lang.Math: int abs(int)>($i2);

        if $i2 >= $i0 goto label5;

        $i2 = $r0[1];

        $i2 = $i2 << 8;

        $i2 = $i1 - $i2;

        $i2 = staticinvoke <java.lang.Math: int abs(int)>($i2);

        if $i2 >= $i0 goto label5;

        $i2 = $i1 * 3;

        $i3 = $r0[2];

        $i3 = $i3 << 8;

        $i2 = $i2 - $i3;

        $i2 = staticinvoke <java.lang.Math: int abs(int)>($i2);

        $i3 = $i0 * 3;

        if $i2 >= $i3 goto label5;

        $i2 = $r0[3];

        $i2 = $i2 << 8;

        $i2 = $i1 - $i2;

        $i2 = staticinvoke <java.lang.Math: int abs(int)>($i2);

        if $i2 >= $i0 goto label5;

        $i2 = $r0[4];

        $i2 = $i2 << 8;

        $i1 = $i1 - $i2;

        $i1 = staticinvoke <java.lang.Math: int abs(int)>($i1);

        if $i1 >= $i0 goto label5;

     label4:
        return $z0;

     label5:
        $z0 = 0;

        goto label4;

     label6:
        return 0;
    }

    private int[] getCrossCheckStateCount()
    {
        com.google.zxing.qrcode.detector.FinderPatternFinder r0;
        int[] $r1;

        r0 := @this: com.google.zxing.qrcode.detector.FinderPatternFinder;

        $r1 = r0.<com.google.zxing.qrcode.detector.FinderPatternFinder: int[] crossCheckStateCount>;

        $r1[0] = 0;

        $r1 = r0.<com.google.zxing.qrcode.detector.FinderPatternFinder: int[] crossCheckStateCount>;

        $r1[1] = 0;

        $r1 = r0.<com.google.zxing.qrcode.detector.FinderPatternFinder: int[] crossCheckStateCount>;

        $r1[2] = 0;

        $r1 = r0.<com.google.zxing.qrcode.detector.FinderPatternFinder: int[] crossCheckStateCount>;

        $r1[3] = 0;

        $r1 = r0.<com.google.zxing.qrcode.detector.FinderPatternFinder: int[] crossCheckStateCount>;

        $r1[4] = 0;

        $r1 = r0.<com.google.zxing.qrcode.detector.FinderPatternFinder: int[] crossCheckStateCount>;

        return $r1;
    }

    private boolean haveMultiplyConfirmedCenters()
    {
        com.google.zxing.qrcode.detector.FinderPatternFinder r0;
        java.util.Vector $r1;
        byte $b4;
        int $i0, $i1, $i2, $i3;
        float $f0, $f1, $f2, $f3;
        java.lang.Object $r2;
        com.google.zxing.qrcode.detector.FinderPattern $r3;
        boolean $z0;

        r0 := @this: com.google.zxing.qrcode.detector.FinderPatternFinder;

        $f0 = 0.0F;

        $r1 = r0.<com.google.zxing.qrcode.detector.FinderPatternFinder: java.util.Vector possibleCenters>;

        $i0 = virtualinvoke $r1.<java.util.Vector: int size()>();

        $i1 = 0;

        $f1 = 0.0F;

        $i2 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $r1 = r0.<com.google.zxing.qrcode.detector.FinderPatternFinder: java.util.Vector possibleCenters>;

        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>($i1);

        $r3 = (com.google.zxing.qrcode.detector.FinderPattern) $r2;

        $i3 = virtualinvoke $r3.<com.google.zxing.qrcode.detector.FinderPattern: int getCount()>();

        if $i3 < 2 goto label2;

        $f2 = virtualinvoke $r3.<com.google.zxing.qrcode.detector.FinderPattern: float getEstimatedModuleSize()>();

        $f1 = $f2 + $f1;

        $i2 = $i2 + 1;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        if $i2 >= 3 goto label4;

        return 0;

     label4:
        $f2 = (float) $i0;

        $f2 = $f1 / $f2;

        $i1 = 0;

     label5:
        if $i1 >= $i0 goto label6;

        $r1 = r0.<com.google.zxing.qrcode.detector.FinderPatternFinder: java.util.Vector possibleCenters>;

        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>($i1);

        $r3 = (com.google.zxing.qrcode.detector.FinderPattern) $r2;

        $f3 = virtualinvoke $r3.<com.google.zxing.qrcode.detector.FinderPattern: float getEstimatedModuleSize()>();

        $f3 = $f3 - $f2;

        $f3 = staticinvoke <java.lang.Math: float abs(float)>($f3);

        $f0 = $f0 + $f3;

        $i1 = $i1 + 1;

        goto label5;

     label6:
        $f1 = 0.05F * $f1;

        $b4 = $f0 cmpg $f1;

        $i0 = (int) $b4;

        if $i0 > 0 goto label8;

        $z0 = 1;

     label7:
        return $z0;

     label8:
        $z0 = 0;

        goto label7;
    }

    private com.google.zxing.qrcode.detector.FinderPattern[] selectBestPatterns() throws com.google.zxing.NotFoundException
    {
        com.google.zxing.qrcode.detector.FinderPatternFinder r0;
        com.google.zxing.qrcode.detector.FinderPattern[] $r5;
        java.util.Vector $r1;
        byte $b2;
        int $i0, $i1;
        com.google.zxing.qrcode.detector.FinderPatternFinder$FurthestFromAverageComparator $r6;
        double $d0;
        com.google.zxing.qrcode.detector.FinderPatternFinder$CenterComparator $r7;
        com.google.zxing.NotFoundException $r2;
        float $f0, $f1, $f2, $f3;
        java.lang.Object $r3;
        com.google.zxing.qrcode.detector.FinderPattern $r4;

        r0 := @this: com.google.zxing.qrcode.detector.FinderPatternFinder;

        $f0 = 0.0F;

        $r1 = r0.<com.google.zxing.qrcode.detector.FinderPatternFinder: java.util.Vector possibleCenters>;

        $i0 = virtualinvoke $r1.<java.util.Vector: int size()>();

        if $i0 >= 3 goto label1;

        $r2 = staticinvoke <com.google.zxing.NotFoundException: com.google.zxing.NotFoundException getNotFoundInstance()>();

        throw $r2;

     label1:
        if $i0 <= 3 goto label6;

        $i1 = 0;

        $f1 = 0.0F;

        $f2 = 0.0F;

     label2:
        if $i1 >= $i0 goto label3;

        $r1 = r0.<com.google.zxing.qrcode.detector.FinderPatternFinder: java.util.Vector possibleCenters>;

        $r3 = virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>($i1);

        $r4 = (com.google.zxing.qrcode.detector.FinderPattern) $r3;

        $f3 = virtualinvoke $r4.<com.google.zxing.qrcode.detector.FinderPattern: float getEstimatedModuleSize()>();

        $f2 = $f2 + $f3;

        $f3 = $f3 * $f3;

        $f1 = $f1 + $f3;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $f3 = (float) $i0;

        $f2 = $f2 / $f3;

        $f3 = (float) $i0;

        $f1 = $f1 / $f3;

        $f3 = $f2 * $f2;

        $f1 = $f1 - $f3;

        $d0 = (double) $f1;

        $d0 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        $f1 = (float) $d0;

        $r1 = r0.<com.google.zxing.qrcode.detector.FinderPatternFinder: java.util.Vector possibleCenters>;

        $r6 = new com.google.zxing.qrcode.detector.FinderPatternFinder$FurthestFromAverageComparator;

        specialinvoke $r6.<com.google.zxing.qrcode.detector.FinderPatternFinder$FurthestFromAverageComparator: void <init>(float)>($f2);

        staticinvoke <com.google.zxing.common.Collections: void insertionSort(java.util.Vector,com.google.zxing.common.Comparator)>($r1, $r6);

        $f3 = 0.2F * $f2;

        $f1 = staticinvoke <java.lang.Math: float max(float,float)>($f3, $f1);

        $i0 = 0;

     label4:
        $r1 = r0.<com.google.zxing.qrcode.detector.FinderPatternFinder: java.util.Vector possibleCenters>;

        $i1 = virtualinvoke $r1.<java.util.Vector: int size()>();

        if $i0 >= $i1 goto label6;

        $r1 = r0.<com.google.zxing.qrcode.detector.FinderPatternFinder: java.util.Vector possibleCenters>;

        $i1 = virtualinvoke $r1.<java.util.Vector: int size()>();

        if $i1 <= 3 goto label6;

        $r1 = r0.<com.google.zxing.qrcode.detector.FinderPatternFinder: java.util.Vector possibleCenters>;

        $r3 = virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>($i0);

        $r4 = (com.google.zxing.qrcode.detector.FinderPattern) $r3;

        $f3 = virtualinvoke $r4.<com.google.zxing.qrcode.detector.FinderPattern: float getEstimatedModuleSize()>();

        $f3 = $f3 - $f2;

        $f3 = staticinvoke <java.lang.Math: float abs(float)>($f3);

        $b2 = $f3 cmpl $f1;

        $i1 = (int) $b2;

        if $i1 <= 0 goto label5;

        $r1 = r0.<com.google.zxing.qrcode.detector.FinderPatternFinder: java.util.Vector possibleCenters>;

        virtualinvoke $r1.<java.util.Vector: void removeElementAt(int)>($i0);

        $i0 = $i0 + -1;

     label5:
        $i0 = $i0 + 1;

        goto label4;

     label6:
        $r1 = r0.<com.google.zxing.qrcode.detector.FinderPatternFinder: java.util.Vector possibleCenters>;

        $i0 = virtualinvoke $r1.<java.util.Vector: int size()>();

        if $i0 <= 3 goto label9;

        $i0 = 0;

     label7:
        $r1 = r0.<com.google.zxing.qrcode.detector.FinderPatternFinder: java.util.Vector possibleCenters>;

        $i1 = virtualinvoke $r1.<java.util.Vector: int size()>();

        if $i0 >= $i1 goto label8;

        $r1 = r0.<com.google.zxing.qrcode.detector.FinderPatternFinder: java.util.Vector possibleCenters>;

        $r3 = virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>($i0);

        $r4 = (com.google.zxing.qrcode.detector.FinderPattern) $r3;

        $f2 = virtualinvoke $r4.<com.google.zxing.qrcode.detector.FinderPattern: float getEstimatedModuleSize()>();

        $f0 = $f0 + $f2;

        $i0 = $i0 + 1;

        goto label7;

     label8:
        $r1 = r0.<com.google.zxing.qrcode.detector.FinderPatternFinder: java.util.Vector possibleCenters>;

        $i0 = virtualinvoke $r1.<java.util.Vector: int size()>();

        $f2 = (float) $i0;

        $f0 = $f0 / $f2;

        $r1 = r0.<com.google.zxing.qrcode.detector.FinderPatternFinder: java.util.Vector possibleCenters>;

        $r7 = new com.google.zxing.qrcode.detector.FinderPatternFinder$CenterComparator;

        specialinvoke $r7.<com.google.zxing.qrcode.detector.FinderPatternFinder$CenterComparator: void <init>(float)>($f0);

        staticinvoke <com.google.zxing.common.Collections: void insertionSort(java.util.Vector,com.google.zxing.common.Comparator)>($r1, $r7);

        $r1 = r0.<com.google.zxing.qrcode.detector.FinderPatternFinder: java.util.Vector possibleCenters>;

        virtualinvoke $r1.<java.util.Vector: void setSize(int)>(3);

     label9:
        $r5 = newarray (com.google.zxing.qrcode.detector.FinderPattern)[3];

        $r1 = r0.<com.google.zxing.qrcode.detector.FinderPatternFinder: java.util.Vector possibleCenters>;

        $r3 = virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>(0);

        $r4 = (com.google.zxing.qrcode.detector.FinderPattern) $r3;

        $r5[0] = $r4;

        $r1 = r0.<com.google.zxing.qrcode.detector.FinderPatternFinder: java.util.Vector possibleCenters>;

        $r3 = virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>(1);

        $r4 = (com.google.zxing.qrcode.detector.FinderPattern) $r3;

        $r5[1] = $r4;

        $r1 = r0.<com.google.zxing.qrcode.detector.FinderPatternFinder: java.util.Vector possibleCenters>;

        $r3 = virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>(2);

        $r4 = (com.google.zxing.qrcode.detector.FinderPattern) $r3;

        $r5[2] = $r4;

        return $r5;
    }

    com.google.zxing.qrcode.detector.FinderPatternInfo find(java.util.Hashtable) throws com.google.zxing.NotFoundException
    {
        com.google.zxing.qrcode.detector.FinderPatternInfo $r6;
        com.google.zxing.qrcode.detector.FinderPatternFinder r0;
        com.google.zxing.qrcode.detector.FinderPattern[] $r5;
        int[] $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.util.Hashtable $r1;
        boolean $z0, $z1;
        com.google.zxing.DecodeHintType $r3;
        com.google.zxing.common.BitMatrix $r4;

        r0 := @this: com.google.zxing.qrcode.detector.FinderPatternFinder;

        $r1 := @parameter0: java.util.Hashtable;

        if $r1 == null goto label08;

        $r3 = <com.google.zxing.DecodeHintType: com.google.zxing.DecodeHintType TRY_HARDER>;

        $z0 = virtualinvoke $r1.<java.util.Hashtable: boolean containsKey(java.lang.Object)>($r3);

        if $z0 == 0 goto label08;

        $z0 = 1;

     label01:
        $r4 = r0.<com.google.zxing.qrcode.detector.FinderPatternFinder: com.google.zxing.common.BitMatrix image>;

        $i0 = virtualinvoke $r4.<com.google.zxing.common.BitMatrix: int getHeight()>();

        $r4 = r0.<com.google.zxing.qrcode.detector.FinderPatternFinder: com.google.zxing.common.BitMatrix image>;

        $i1 = virtualinvoke $r4.<com.google.zxing.common.BitMatrix: int getWidth()>();

        $i2 = $i0 * 3;

        $i2 = $i2 / 228;

        if $i2 < 3 goto label02;

        if $z0 == 0 goto label19;

     label02:
        $i3 = 3;

     label03:
        $r2 = newarray (int)[5];

        $i2 = $i3 + -1;

        $z0 = 0;

        $i4 = $i3;

     label04:
        if $i2 >= $i0 goto label18;

        if $z0 != 0 goto label18;

        $r2[0] = 0;

        $r2[1] = 0;

        $r2[2] = 0;

        $r2[3] = 0;

        $r2[4] = 0;

        $i3 = 0;

        $i5 = 0;

     label05:
        if $i3 >= $i1 goto label16;

        $r4 = r0.<com.google.zxing.qrcode.detector.FinderPatternFinder: com.google.zxing.common.BitMatrix image>;

        $z1 = virtualinvoke $r4.<com.google.zxing.common.BitMatrix: boolean get(int,int)>($i3, $i2);

        if $z1 == 0 goto label09;

        $i6 = $i5 & 1;

        if $i6 != 1 goto label06;

        $i5 = $i5 + 1;

     label06:
        $i6 = $r2[$i5];

        $i6 = $i6 + 1;

        $r2[$i5] = $i6;

     label07:
        $i3 = $i3 + 1;

        goto label05;

     label08:
        $z0 = 0;

        goto label01;

     label09:
        $i6 = $i5 & 1;

        if $i6 != 0 goto label15;

        if $i5 != 4 goto label14;

        $z1 = staticinvoke <com.google.zxing.qrcode.detector.FinderPatternFinder: boolean foundPatternCross(int[])>($r2);

        if $z1 == 0 goto label13;

        $z1 = virtualinvoke r0.<com.google.zxing.qrcode.detector.FinderPatternFinder: boolean handlePossibleCenter(int[],int,int)>($r2, $i2, $i3);

        if $z1 == 0 goto label12;

        $z1 = r0.<com.google.zxing.qrcode.detector.FinderPatternFinder: boolean hasSkipped>;

        if $z1 == 0 goto label11;

        $z0 = specialinvoke r0.<com.google.zxing.qrcode.detector.FinderPatternFinder: boolean haveMultiplyConfirmedCenters()>();

     label10:
        $r2[0] = 0;

        $r2[1] = 0;

        $r2[2] = 0;

        $r2[3] = 0;

        $r2[4] = 0;

        $i4 = 2;

        $i5 = 0;

        goto label07;

     label11:
        $i4 = specialinvoke r0.<com.google.zxing.qrcode.detector.FinderPatternFinder: int findRowSkip()>();

        $i5 = $r2[2];

        if $i4 <= $i5 goto label10;

        $i3 = $r2[2];

        $i3 = $i4 - $i3;

        $i3 = $i3 - 2;

        $i2 = $i2 + $i3;

        $i3 = $i1 + -1;

        goto label10;

     label12:
        $i5 = $r2[2];

        $r2[0] = $i5;

        $i5 = $r2[3];

        $r2[1] = $i5;

        $i5 = $r2[4];

        $r2[2] = $i5;

        $r2[3] = 1;

        $r2[4] = 0;

        $i5 = 3;

        goto label07;

     label13:
        $i5 = $r2[2];

        $r2[0] = $i5;

        $i5 = $r2[3];

        $r2[1] = $i5;

        $i5 = $r2[4];

        $r2[2] = $i5;

        $r2[3] = 1;

        $r2[4] = 0;

        $i5 = 3;

        goto label07;

     label14:
        $i5 = $i5 + 1;

        $i6 = $r2[$i5];

        $i6 = $i6 + 1;

        $r2[$i5] = $i6;

        goto label07;

     label15:
        $i6 = $r2[$i5];

        $i6 = $i6 + 1;

        $r2[$i5] = $i6;

        goto label07;

     label16:
        $z1 = staticinvoke <com.google.zxing.qrcode.detector.FinderPatternFinder: boolean foundPatternCross(int[])>($r2);

        if $z1 == 0 goto label17;

        $z1 = virtualinvoke r0.<com.google.zxing.qrcode.detector.FinderPatternFinder: boolean handlePossibleCenter(int[],int,int)>($r2, $i2, $i1);

        if $z1 == 0 goto label17;

        $i4 = $r2[0];

        $z1 = r0.<com.google.zxing.qrcode.detector.FinderPatternFinder: boolean hasSkipped>;

        if $z1 == 0 goto label17;

        $z0 = specialinvoke r0.<com.google.zxing.qrcode.detector.FinderPatternFinder: boolean haveMultiplyConfirmedCenters()>();

     label17:
        $i2 = $i2 + $i4;

        goto label04;

     label18:
        $r5 = specialinvoke r0.<com.google.zxing.qrcode.detector.FinderPatternFinder: com.google.zxing.qrcode.detector.FinderPattern[] selectBestPatterns()>();

        staticinvoke <com.google.zxing.ResultPoint: void orderBestPatterns(com.google.zxing.ResultPoint[])>($r5);

        $r6 = new com.google.zxing.qrcode.detector.FinderPatternInfo;

        specialinvoke $r6.<com.google.zxing.qrcode.detector.FinderPatternInfo: void <init>(com.google.zxing.qrcode.detector.FinderPattern[])>($r5);

        return $r6;

     label19:
        $i3 = $i2;

        goto label03;
    }

    protected com.google.zxing.common.BitMatrix getImage()
    {
        com.google.zxing.common.BitMatrix r1;
        com.google.zxing.qrcode.detector.FinderPatternFinder r0;

        r0 := @this: com.google.zxing.qrcode.detector.FinderPatternFinder;

        r1 = r0.<com.google.zxing.qrcode.detector.FinderPatternFinder: com.google.zxing.common.BitMatrix image>;

        return r1;
    }

    protected java.util.Vector getPossibleCenters()
    {
        java.util.Vector r1;
        com.google.zxing.qrcode.detector.FinderPatternFinder r0;

        r0 := @this: com.google.zxing.qrcode.detector.FinderPatternFinder;

        r1 = r0.<com.google.zxing.qrcode.detector.FinderPatternFinder: java.util.Vector possibleCenters>;

        return r1;
    }

    protected boolean handlePossibleCenter(int[], int, int)
    {
        com.google.zxing.qrcode.detector.FinderPatternFinder r0;
        java.util.Vector $r2;
        int[] $r1;
        com.google.zxing.ResultPointCallback $r5;
        int $i0, $i1, $i2, $i3;
        float $f0, $f1, $f2;
        java.lang.Object $r3;
        com.google.zxing.qrcode.detector.FinderPattern $r4;
        boolean $z0, $z1;

        r0 := @this: com.google.zxing.qrcode.detector.FinderPatternFinder;

        $r1 := @parameter0: int[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 = 0;

        $i2 = $r1[0];

        $i3 = $r1[1];

        $i2 = $i2 + $i3;

        $i3 = $r1[2];

        $i2 = $i2 + $i3;

        $i3 = $r1[3];

        $i2 = $i2 + $i3;

        $i3 = $r1[4];

        $i2 = $i2 + $i3;

        $f0 = staticinvoke <com.google.zxing.qrcode.detector.FinderPatternFinder: float centerFromEnd(int[],int)>($r1, $i1);

        $i1 = (int) $f0;

        $i3 = $r1[2];

        $f1 = specialinvoke r0.<com.google.zxing.qrcode.detector.FinderPatternFinder: float crossCheckVertical(int,int,int,int)>($i0, $i1, $i3, $i2);

        $z1 = staticinvoke <java.lang.Float: boolean isNaN(float)>($f1);

        if $z1 != 0 goto label5;

        $i0 = (int) $f0;

        $i1 = (int) $f1;

        $i3 = $r1[2];

        $f0 = specialinvoke r0.<com.google.zxing.qrcode.detector.FinderPatternFinder: float crossCheckHorizontal(int,int,int,int)>($i0, $i1, $i3, $i2);

        $z1 = staticinvoke <java.lang.Float: boolean isNaN(float)>($f0);

        if $z1 != 0 goto label5;

        $f2 = (float) $i2;

        $f2 = $f2 / 7.0F;

        $r2 = r0.<com.google.zxing.qrcode.detector.FinderPatternFinder: java.util.Vector possibleCenters>;

        $i0 = virtualinvoke $r2.<java.util.Vector: int size()>();

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r2 = r0.<com.google.zxing.qrcode.detector.FinderPatternFinder: java.util.Vector possibleCenters>;

        $r3 = virtualinvoke $r2.<java.util.Vector: java.lang.Object elementAt(int)>($i1);

        $r4 = (com.google.zxing.qrcode.detector.FinderPattern) $r3;

        $z1 = virtualinvoke $r4.<com.google.zxing.qrcode.detector.FinderPattern: boolean aboutEquals(float,float,float)>($f2, $f1, $f0);

        if $z1 == 0 goto label4;

        virtualinvoke $r4.<com.google.zxing.qrcode.detector.FinderPattern: void incrementCount()>();

        $z0 = 1;

     label2:
        if $z0 != 0 goto label3;

        $r4 = new com.google.zxing.qrcode.detector.FinderPattern;

        specialinvoke $r4.<com.google.zxing.qrcode.detector.FinderPattern: void <init>(float,float,float)>($f0, $f1, $f2);

        $r2 = r0.<com.google.zxing.qrcode.detector.FinderPatternFinder: java.util.Vector possibleCenters>;

        virtualinvoke $r2.<java.util.Vector: void addElement(java.lang.Object)>($r4);

        $r5 = r0.<com.google.zxing.qrcode.detector.FinderPatternFinder: com.google.zxing.ResultPointCallback resultPointCallback>;

        if $r5 == null goto label3;

        $r5 = r0.<com.google.zxing.qrcode.detector.FinderPatternFinder: com.google.zxing.ResultPointCallback resultPointCallback>;

        interfaceinvoke $r5.<com.google.zxing.ResultPointCallback: void foundPossibleResultPoint(com.google.zxing.ResultPoint)>($r4);

     label3:
        return 1;

     label4:
        $i1 = $i1 + 1;

        goto label1;

     label5:
        return 0;
    }

    public static void <clinit>()
    {
        <com.google.zxing.qrcode.detector.FinderPatternFinder: int MIN_SKIP> = 3;

        <com.google.zxing.qrcode.detector.FinderPatternFinder: int MAX_MODULES> = 57;

        <com.google.zxing.qrcode.detector.FinderPatternFinder: int INTEGER_MATH_SHIFT> = 8;

        <com.google.zxing.qrcode.detector.FinderPatternFinder: int CENTER_QUORUM> = 2;

        return;
    }
}
