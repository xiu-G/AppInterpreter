class com.mt.airad.y extends java.lang.Object
{
    protected static final byte[] a;

    static void <clinit>()
    {
        byte[] $r0;
        java.lang.String $r1;

        $r1 = "__ThisIsUsedAsAirAdKey__";

        $r0 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        <com.mt.airad.y: byte[] a> = $r0;

        return;
    }

    void <init>()
    {
        com.mt.airad.y r0;

        r0 := @this: com.mt.airad.y;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    protected static java.lang.String a(java.lang.String)
    {
        byte[] $r2, $r3;
        java.lang.String $r0, $r1;
        java.lang.Exception $r4;

        $r0 := @parameter0: java.lang.String;

        $r1 = "d50d2de4fd5ac018e9c1683ae5eff41f";

     label1:
        $r2 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("-", "+");

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("_", "/");

        $r3 = staticinvoke <com.mt.airad.m: byte[] a(java.lang.String)>($r0);

        $r2 = staticinvoke <com.mt.airad.y: byte[] b(byte[],byte[])>($r2, $r3);

     label2:
        $r0 = new java.lang.String;

     label3:
        specialinvoke $r0.<java.lang.String: void <init>(byte[],java.lang.String)>($r2, "UTF-8");

     label4:
        return $r0;

     label5:
        $r4 := @caughtexception;

        return null;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }

    protected static byte[] a(byte[], byte[])
    {
        java.lang.Throwable $r6, $r7, $r8, $r9, $r10, $r11;
        byte[] $r0, $r1;
        javax.crypto.Cipher $r5;
        javax.crypto.spec.DESedeKeySpec $r2;
        javax.crypto.SecretKeyFactory $r3;
        javax.crypto.SecretKey $r4;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $r2 = new javax.crypto.spec.DESedeKeySpec;

     label1:
        specialinvoke $r2.<javax.crypto.spec.DESedeKeySpec: void <init>(byte[])>($r0);

        $r3 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>("desede");

        $r4 = virtualinvoke $r3.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r2);

        $r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("desede/ECB/PKCS5Padding");

        virtualinvoke $r5.<javax.crypto.Cipher: void init(int,java.security.Key)>(1, $r4);

        $r0 = virtualinvoke $r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1);

     label2:
        return $r0;

     label3:
        $r6 := @caughtexception;

        return null;

     label4:
        $r7 := @caughtexception;

        return null;

     label5:
        $r8 := @caughtexception;

        return null;

     label6:
        $r9 := @caughtexception;

        return null;

     label7:
        $r10 := @caughtexception;

        return null;

     label8:
        $r11 := @caughtexception;

        return null;

        catch javax.crypto.IllegalBlockSizeException from label1 to label2 with label8;
        catch java.security.InvalidKeyException from label1 to label2 with label7;
        catch java.security.NoSuchAlgorithmException from label1 to label2 with label6;
        catch java.security.spec.InvalidKeySpecException from label1 to label2 with label5;
        catch javax.crypto.BadPaddingException from label1 to label2 with label4;
        catch javax.crypto.NoSuchPaddingException from label1 to label2 with label3;
    }

    protected static java.lang.String b(java.lang.String)
    {
        byte[] $r2, $r3;
        java.lang.String $r0, $r1;
        java.lang.Exception $r4;

        $r0 := @parameter0: java.lang.String;

        $r1 = "d50d2de4fd5ac018e9c1683ae5eff41f";

     label1:
        $r2 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        $r3 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        $r2 = staticinvoke <com.mt.airad.y: byte[] a(byte[],byte[])>($r2, $r3);

     label2:
        $r0 = new java.lang.String;

     label3:
        $r2 = staticinvoke <com.mt.airad.m: byte[] a(byte[])>($r2);

        specialinvoke $r0.<java.lang.String: void <init>(byte[])>($r2);

     label4:
        return $r0;

     label5:
        $r4 := @caughtexception;

        return null;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }

    protected static byte[] b(byte[], byte[])
    {
        java.lang.Throwable $r6, $r7, $r8, $r9, $r10, $r11;
        byte[] $r0, $r1;
        javax.crypto.Cipher $r5;
        javax.crypto.spec.DESedeKeySpec $r2;
        javax.crypto.SecretKeyFactory $r3;
        javax.crypto.SecretKey $r4;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $r2 = new javax.crypto.spec.DESedeKeySpec;

     label1:
        specialinvoke $r2.<javax.crypto.spec.DESedeKeySpec: void <init>(byte[])>($r0);

        $r3 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>("desede");

        $r4 = virtualinvoke $r3.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r2);

        $r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("desede/ECB/PKCS5Padding");

        virtualinvoke $r5.<javax.crypto.Cipher: void init(int,java.security.Key)>(2, $r4);

        $r0 = virtualinvoke $r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1);

     label2:
        return $r0;

     label3:
        $r6 := @caughtexception;

        return null;

     label4:
        $r7 := @caughtexception;

        return null;

     label5:
        $r8 := @caughtexception;

        return null;

     label6:
        $r9 := @caughtexception;

        return null;

     label7:
        $r10 := @caughtexception;

        return null;

     label8:
        $r11 := @caughtexception;

        return null;

        catch javax.crypto.IllegalBlockSizeException from label1 to label2 with label8;
        catch java.security.InvalidKeyException from label1 to label2 with label7;
        catch java.security.NoSuchAlgorithmException from label1 to label2 with label6;
        catch java.security.spec.InvalidKeySpecException from label1 to label2 with label5;
        catch javax.crypto.BadPaddingException from label1 to label2 with label4;
        catch javax.crypto.NoSuchPaddingException from label1 to label2 with label3;
    }
}
