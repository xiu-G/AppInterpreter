public class cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable extends android.graphics.drawable.BitmapDrawable
{
    static final java.lang.String LOG_TAG;
    public static final int SOURCE_INBITMAP;
    public static final int SOURCE_NEW;
    public static final int SOURCE_UNKNOWN;
    private static final android.os.Handler sHandler;
    private int mCacheCount;
    private java.lang.Runnable mCheckStateRunnable;
    private int mDisplayingCount;
    private boolean mHasBeenDisplayed;
    private final int mMemorySize;
    private cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy mRecyclePolicy;
    private final int mSource;
    private java.lang.Throwable mStackTraceWhenRecycled;
    private final java.lang.String mUrl;

    static void <clinit>()
    {
        android.os.Handler $r0;
        android.os.Looper $r1;

        <cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: int SOURCE_UNKNOWN> = -1;

        <cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: int SOURCE_NEW> = 0;

        <cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: int SOURCE_INBITMAP> = 1;

        <cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: java.lang.String LOG_TAG> = "CacheableBitmapDrawable";

        $r0 = new android.os.Handler;

        $r1 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        specialinvoke $r0.<android.os.Handler: void <init>(android.os.Looper)>($r1);

        <cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: android.os.Handler sHandler> = $r0;

        return;
    }

    void <init>(java.lang.String, android.content.res.Resources, android.graphics.Bitmap, cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy, int)
    {
        cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy $r4;
        android.graphics.Bitmap $r3;
        cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable r0;
        int $i0, $i1, $i2;
        java.lang.String $r1;
        android.content.res.Resources $r2;

        r0 := @this: cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: android.content.res.Resources;

        $r3 := @parameter2: android.graphics.Bitmap;

        $r4 := @parameter3: cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy;

        $i0 := @parameter4: int;

        specialinvoke r0.<android.graphics.drawable.BitmapDrawable: void <init>(android.content.res.Resources,android.graphics.Bitmap)>($r2, $r3);

        if $r3 == null goto label2;

        $i1 = virtualinvoke $r3.<android.graphics.Bitmap: int getRowBytes()>();

        $i2 = virtualinvoke $r3.<android.graphics.Bitmap: int getHeight()>();

        $i1 = $i1 * $i2;

     label1:
        r0.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: int mMemorySize> = $i1;

        r0.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: java.lang.String mUrl> = $r1;

        r0.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy mRecyclePolicy> = $r4;

        r0.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: int mDisplayingCount> = 0;

        r0.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: int mCacheCount> = 0;

        r0.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: int mSource> = $i0;

        return;

     label2:
        $i1 = 0;

        goto label1;
    }

    static void access$000(cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable, boolean)
    {
        cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable $r0;
        boolean $z0;

        $r0 := @parameter0: cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable;

        $z0 := @parameter1: boolean;

        specialinvoke $r0.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: void checkState(boolean)>(1);

        return;
    }

    private void cancelCheckStateCallback()
    {
        android.os.Handler $r4;
        cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable r0;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.lang.Runnable $r1;
        boolean $z0;

        r0 := @this: cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable;

        $r1 = r0.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: java.lang.Runnable mCheckStateRunnable>;

        if $r1 == null goto label2;

        $z0 = <cn.ffcs.lib.bitmapcache.Constants: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cancelling checkState() callback for: ");

        $r3 = r0.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: java.lang.String mUrl>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("CacheableBitmapDrawable", $r3);

     label1:
        $r4 = <cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: android.os.Handler sHandler>;

        $r1 = r0.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: java.lang.Runnable mCheckStateRunnable>;

        virtualinvoke $r4.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r1);

        r0.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: java.lang.Runnable mCheckStateRunnable> = null;

     label2:
        return;
    }

    private void checkState()
    {
        cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable r0;

        r0 := @this: cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable;

        specialinvoke r0.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: void checkState(boolean)>(0);

        return;
    }

    private void checkState(boolean)
    {
        java.lang.Throwable $r7;
        java.lang.Object[] $r1;
        cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable$CheckStateRunnable $r9;
        java.lang.Integer $r3;
        java.lang.Runnable $r11;
        cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy $r5;
        android.graphics.Bitmap $r8;
        android.os.Handler $r10;
        cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable r0;
        int $i0;
        java.lang.Boolean $r2;
        java.lang.StringBuilder $r6;
        java.lang.String $r4;
        boolean $z0, $z1;

        r0 := @this: cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable;

        $z0 := @parameter0: boolean;

        entermonitor r0;

     label01:
        $z1 = <cn.ffcs.lib.bitmapcache.Constants: boolean DEBUG>;

        if $z1 == 0 goto label02;

        $r1 = newarray (java.lang.Object)[4];

        $z1 = r0.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: boolean mHasBeenDisplayed>;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        $r1[0] = $r2;

        $i0 = r0.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: int mDisplayingCount>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r1[1] = $r3;

        $i0 = r0.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: int mCacheCount>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r1[2] = $r3;

        $r4 = r0.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: java.lang.String mUrl>;

        $r1[3] = $r4;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("checkState(). Been Displayed: %b, Displaying: %d, Caching: %d, URL: %s", $r1);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("CacheableBitmapDrawable", $r4);

     label02:
        $r5 = r0.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy mRecyclePolicy>;

        $z1 = virtualinvoke $r5.<cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy: boolean canRecycle()>();

     label03:
        if $z1 != 0 goto label05;

     label04:
        exitmonitor r0;

        return;

     label05:
        specialinvoke r0.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: void cancelCheckStateCallback()>();

        $i0 = r0.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: int mCacheCount>;

        if $i0 > 0 goto label04;

        $i0 = r0.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: int mDisplayingCount>;

        if $i0 > 0 goto label04;

        $z1 = virtualinvoke r0.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: boolean isBitmapValid()>();

        if $z1 == 0 goto label04;

        $z1 = r0.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: boolean mHasBeenDisplayed>;

        if $z1 != 0 goto label06;

        if $z0 == 0 goto label10;

     label06:
        $z0 = <cn.ffcs.lib.bitmapcache.Constants: boolean DEBUG>;

        if $z0 == 0 goto label07;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Recycling bitmap with url: ");

        $r4 = r0.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: java.lang.String mUrl>;

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("CacheableBitmapDrawable", $r4);

     label07:
        $r7 = new java.lang.Throwable;

        specialinvoke $r7.<java.lang.Throwable: void <init>(java.lang.String)>("Recycled Bitmap Method Stack");

        r0.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: java.lang.Throwable mStackTraceWhenRecycled> = $r7;

        $r8 = virtualinvoke r0.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: android.graphics.Bitmap getBitmap()>();

        virtualinvoke $r8.<android.graphics.Bitmap: void recycle()>();

     label08:
        goto label04;

     label09:
        $r7 := @caughtexception;

        exitmonitor r0;

        throw $r7;

     label10:
        $z0 = <cn.ffcs.lib.bitmapcache.Constants: boolean DEBUG>;

        if $z0 == 0 goto label11;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unused Bitmap which hasn\'t been displayed, delaying recycle(): ");

        $r4 = r0.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: java.lang.String mUrl>;

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("CacheableBitmapDrawable", $r4);

     label11:
        $r9 = new cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable$CheckStateRunnable;

        specialinvoke $r9.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable$CheckStateRunnable: void <init>(cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable)>(r0);

        r0.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: java.lang.Runnable mCheckStateRunnable> = $r9;

        $r10 = <cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: android.os.Handler sHandler>;

        $r11 = r0.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: java.lang.Runnable mCheckStateRunnable>;

        virtualinvoke $r10.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r11, 2000L);

     label12:
        goto label04;

        catch java.lang.Throwable from label01 to label03 with label09;
        catch java.lang.Throwable from label05 to label08 with label09;
        catch java.lang.Throwable from label10 to label12 with label09;
    }

    public void draw(android.graphics.Canvas)
    {
        java.lang.Throwable $r3;
        cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable r0;
        android.graphics.Canvas $r1;
        java.lang.RuntimeException r2;

        r0 := @this: cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable;

        $r1 := @parameter0: android.graphics.Canvas;

     label1:
        specialinvoke r0.<android.graphics.drawable.BitmapDrawable: void draw(android.graphics.Canvas)>($r1);

     label2:
        return;

     label3:
        r2 := @caughtexception;

        $r3 = r0.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: java.lang.Throwable mStackTraceWhenRecycled>;

        if $r3 == null goto label4;

        $r3 = r0.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: java.lang.Throwable mStackTraceWhenRecycled>;

        virtualinvoke $r3.<java.lang.Throwable: void printStackTrace()>();

     label4:
        throw r2;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    int getMemorySize()
    {
        cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable r0;
        int i0;

        r0 := @this: cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable;

        i0 = r0.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: int mMemorySize>;

        return i0;
    }

    public int getSource()
    {
        cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable r0;
        int i0;

        r0 := @this: cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable;

        i0 = r0.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: int mSource>;

        return i0;
    }

    public java.lang.String getUrl()
    {
        cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable r0;
        java.lang.String r1;

        r0 := @this: cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable;

        r1 = r0.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: java.lang.String mUrl>;

        return r1;
    }

    public boolean isBeingDisplayed()
    {
        java.lang.Throwable $r1;
        cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable r0;
        int $i0;
        boolean $z0;

        r0 := @this: cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable;

        entermonitor r0;

     label1:
        $i0 = r0.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: int mDisplayingCount>;

     label2:
        if $i0 <= 0 goto label4;

        $z0 = 1;

     label3:
        exitmonitor r0;

        return $z0;

     label4:
        $z0 = 0;

        goto label3;

     label5:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label5;
    }

    public boolean isBitmapMutable()
    {
        java.lang.Throwable $r2;
        android.graphics.Bitmap $r1;
        cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable r0;
        boolean $z0;

        r0 := @this: cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable;

        entermonitor r0;

     label1:
        $r1 = virtualinvoke r0.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: android.graphics.Bitmap getBitmap()>();

        if $r1 == null goto label4;

        $z0 = virtualinvoke $r1.<android.graphics.Bitmap: boolean isMutable()>();

     label2:
        if $z0 == 0 goto label4;

        $z0 = 1;

     label3:
        exitmonitor r0;

        return $z0;

     label4:
        $z0 = 0;

        goto label3;

     label5:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label5;
    }

    public boolean isBitmapValid()
    {
        java.lang.Throwable $r2;
        android.graphics.Bitmap $r1;
        cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable r0;
        boolean $z0;

        r0 := @this: cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable;

        entermonitor r0;

     label1:
        $r1 = virtualinvoke r0.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: android.graphics.Bitmap getBitmap()>();

        if $r1 == null goto label4;

        $z0 = virtualinvoke $r1.<android.graphics.Bitmap: boolean isRecycled()>();

     label2:
        if $z0 != 0 goto label4;

        $z0 = 1;

     label3:
        exitmonitor r0;

        return $z0;

     label4:
        $z0 = 0;

        goto label3;

     label5:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label5;
    }

    public boolean isReferencedByCache()
    {
        java.lang.Throwable $r1;
        cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable r0;
        int $i0;
        boolean $z0;

        r0 := @this: cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable;

        entermonitor r0;

     label1:
        $i0 = r0.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: int mCacheCount>;

     label2:
        if $i0 <= 0 goto label4;

        $z0 = 1;

     label3:
        exitmonitor r0;

        return $z0;

     label4:
        $z0 = 0;

        goto label3;

     label5:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label5;
    }

    public void setBeingUsed(boolean)
    {
        java.lang.Throwable $r1;
        cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable r0;
        int $i0;
        boolean $z0;

        r0 := @this: cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable;

        $z0 := @parameter0: boolean;

        entermonitor r0;

        if $z0 == 0 goto label4;

     label1:
        $i0 = r0.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: int mDisplayingCount>;

        $i0 = $i0 + 1;

        r0.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: int mDisplayingCount> = $i0;

        r0.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: boolean mHasBeenDisplayed> = 1;

     label2:
        specialinvoke r0.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: void checkState()>();

     label3:
        exitmonitor r0;

        return;

     label4:
        $i0 = r0.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: int mDisplayingCount>;

        $i0 = $i0 + -1;

        r0.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: int mDisplayingCount> = $i0;

     label5:
        goto label2;

     label6:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    void setCached(boolean)
    {
        java.lang.Throwable $r1;
        cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable r0;
        int $i0;
        boolean $z0;

        r0 := @this: cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable;

        $z0 := @parameter0: boolean;

        entermonitor r0;

     label1:
        $i0 = r0.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: int mCacheCount>;

        $i0 = $i0 + 1;

        r0.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: int mCacheCount> = $i0;

        specialinvoke r0.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: void checkState()>();

     label2:
        exitmonitor r0;

        return;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
