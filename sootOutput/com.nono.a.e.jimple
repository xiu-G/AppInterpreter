public final class com.nono.a.e extends java.lang.Object
{
    int a;
    final java.util.HashMap b;
    final java.util.concurrent.ConcurrentHashMap c;

    public void <init>()
    {
        com.nono.a.e r0;

        r0 := @this: com.nono.a.e;

        specialinvoke r0.<com.nono.a.e: void <init>(int)>(30);

        return;
    }

    public void <init>(int)
    {
        com.nono.a.f $r1;
        com.nono.a.e r0;
        int $i0;
        java.util.concurrent.ConcurrentHashMap $r2;

        r0 := @this: com.nono.a.e;

        $i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.nono.a.e: int a> = 30;

        r0.<com.nono.a.e: int a> = 80;

        $r1 = new com.nono.a.f;

        $i0 = r0.<com.nono.a.e: int a>;

        $i0 = $i0 / 2;

        specialinvoke $r1.<com.nono.a.f: void <init>(com.nono.a.e,int)>(r0, $i0);

        r0.<com.nono.a.e: java.util.HashMap b> = $r1;

        $r2 = new java.util.concurrent.ConcurrentHashMap;

        $i0 = r0.<com.nono.a.e: int a>;

        $i0 = $i0 / 2;

        specialinvoke $r2.<java.util.concurrent.ConcurrentHashMap: void <init>(int)>($i0);

        r0.<com.nono.a.e: java.util.concurrent.ConcurrentHashMap c> = $r2;

        return;
    }

    public final java.lang.Object a(java.lang.String)
    {
        java.lang.Throwable $r7;
        java.util.concurrent.ConcurrentHashMap $r5;
        java.util.HashMap $r2, $r3;
        com.nono.a.e r0;
        java.lang.Object $r4;
        java.lang.String $r1;
        java.lang.ref.SoftReference $r6;

        r0 := @this: com.nono.a.e;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.nono.a.e: java.util.HashMap b>;

        entermonitor $r2;

     label1:
        $r3 = r0.<com.nono.a.e: java.util.HashMap b>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r1);

        if $r4 == null goto label3;

        $r3 = r0.<com.nono.a.e: java.util.HashMap b>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r1);

        $r3 = r0.<com.nono.a.e: java.util.HashMap b>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r4);

        exitmonitor $r2;

     label2:
        return $r4;

     label3:
        exitmonitor $r2;

        $r5 = r0.<com.nono.a.e: java.util.concurrent.ConcurrentHashMap c>;

        $r4 = virtualinvoke $r5.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r1);

        $r6 = (java.lang.ref.SoftReference) $r4;

        if $r6 == null goto label6;

        $r4 = virtualinvoke $r6.<java.lang.ref.SoftReference: java.lang.Object get()>();

        if $r4 == null goto label4;

        virtualinvoke r0.<com.nono.a.e: java.lang.Object a(java.lang.String,java.lang.Object)>($r1, $r4);

     label4:
        $r5 = r0.<com.nono.a.e: java.util.concurrent.ConcurrentHashMap c>;

        virtualinvoke $r5.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>($r1);

        return $r4;

     label5:
        $r7 := @caughtexception;

        exitmonitor $r2;

        throw $r7;

     label6:
        return null;

        catch java.lang.Throwable from label1 to label2 with label5;
    }

    public final java.lang.Object a(java.lang.String, java.lang.Object)
    {
        java.lang.Throwable $r5;
        com.nono.a.e r0;
        java.lang.Object $r2;
        java.util.HashMap $r3, $r4;
        java.lang.String $r1;

        r0 := @this: com.nono.a.e;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object;

        $r3 = r0.<com.nono.a.e: java.util.HashMap b>;

        entermonitor $r3;

     label1:
        $r4 = r0.<com.nono.a.e: java.util.HashMap b>;

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r1);

        $r4 = r0.<com.nono.a.e: java.util.HashMap b>;

        $r2 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        exitmonitor $r3;

     label2:
        return $r2;

     label3:
        $r5 := @caughtexception;

        exitmonitor $r3;

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
