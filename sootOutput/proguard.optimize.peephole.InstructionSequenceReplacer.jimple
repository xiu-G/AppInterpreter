public class proguard.optimize.peephole.InstructionSequenceReplacer extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.instruction.visitor.InstructionVisitor, proguard.classfile.constant.visitor.ConstantVisitor
{
    private static final boolean DEBUG;
    private final proguard.optimize.peephole.BranchTargetFinder branchTargetFinder;
    private final proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor;
    private final proguard.classfile.instruction.visitor.InstructionVisitor extraInstructionVisitor;
    private final proguard.classfile.util.InstructionSequenceMatcher instructionSequenceMatcher;
    private final proguard.optimize.peephole.InstructionSequenceReplacer$MyReplacementInstructionFactory replacementInstructionFactory;
    private final proguard.classfile.instruction.Instruction[] replacementInstructions;

    public void <init>(proguard.classfile.constant.Constant[], proguard.classfile.instruction.Instruction[], proguard.classfile.instruction.Instruction[], proguard.optimize.peephole.BranchTargetFinder, proguard.classfile.editor.CodeAttributeEditor)
    {
        proguard.classfile.instruction.Instruction[] $r2, $r3;
        proguard.optimize.peephole.InstructionSequenceReplacer r0;
        proguard.classfile.editor.CodeAttributeEditor $r5;
        proguard.classfile.constant.Constant[] $r1;
        proguard.optimize.peephole.BranchTargetFinder $r4;

        r0 := @this: proguard.optimize.peephole.InstructionSequenceReplacer;

        $r1 := @parameter0: proguard.classfile.constant.Constant[];

        $r2 := @parameter1: proguard.classfile.instruction.Instruction[];

        $r3 := @parameter2: proguard.classfile.instruction.Instruction[];

        $r4 := @parameter3: proguard.optimize.peephole.BranchTargetFinder;

        $r5 := @parameter4: proguard.classfile.editor.CodeAttributeEditor;

        specialinvoke r0.<proguard.optimize.peephole.InstructionSequenceReplacer: void <init>(proguard.classfile.constant.Constant[],proguard.classfile.instruction.Instruction[],proguard.classfile.instruction.Instruction[],proguard.optimize.peephole.BranchTargetFinder,proguard.classfile.editor.CodeAttributeEditor,proguard.classfile.instruction.visitor.InstructionVisitor)>($r1, $r2, $r3, $r4, $r5, null);

        return;
    }

    public void <init>(proguard.classfile.constant.Constant[], proguard.classfile.instruction.Instruction[], proguard.classfile.instruction.Instruction[], proguard.optimize.peephole.BranchTargetFinder, proguard.classfile.editor.CodeAttributeEditor, proguard.classfile.instruction.visitor.InstructionVisitor)
    {
        proguard.classfile.instruction.Instruction[] $r2, $r3;
        proguard.classfile.util.InstructionSequenceMatcher $r8;
        proguard.classfile.editor.CodeAttributeEditor $r5;
        proguard.optimize.peephole.BranchTargetFinder $r4;
        proguard.classfile.instruction.visitor.InstructionVisitor $r6;
        proguard.optimize.peephole.InstructionSequenceReplacer r0;
        proguard.optimize.peephole.InstructionSequenceReplacer$MyReplacementInstructionFactory $r7;
        proguard.classfile.constant.Constant[] $r1;

        r0 := @this: proguard.optimize.peephole.InstructionSequenceReplacer;

        $r1 := @parameter0: proguard.classfile.constant.Constant[];

        $r2 := @parameter1: proguard.classfile.instruction.Instruction[];

        $r3 := @parameter2: proguard.classfile.instruction.Instruction[];

        $r4 := @parameter3: proguard.optimize.peephole.BranchTargetFinder;

        $r5 := @parameter4: proguard.classfile.editor.CodeAttributeEditor;

        $r6 := @parameter5: proguard.classfile.instruction.visitor.InstructionVisitor;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        $r7 = new proguard.optimize.peephole.InstructionSequenceReplacer$MyReplacementInstructionFactory;

        specialinvoke $r7.<proguard.optimize.peephole.InstructionSequenceReplacer$MyReplacementInstructionFactory: void <init>(proguard.optimize.peephole.InstructionSequenceReplacer,proguard.optimize.peephole.InstructionSequenceReplacer$1)>(r0, null);

        r0.<proguard.optimize.peephole.InstructionSequenceReplacer: proguard.optimize.peephole.InstructionSequenceReplacer$MyReplacementInstructionFactory replacementInstructionFactory> = $r7;

        $r8 = new proguard.classfile.util.InstructionSequenceMatcher;

        specialinvoke $r8.<proguard.classfile.util.InstructionSequenceMatcher: void <init>(proguard.classfile.constant.Constant[],proguard.classfile.instruction.Instruction[])>($r1, $r2);

        r0.<proguard.optimize.peephole.InstructionSequenceReplacer: proguard.classfile.util.InstructionSequenceMatcher instructionSequenceMatcher> = $r8;

        r0.<proguard.optimize.peephole.InstructionSequenceReplacer: proguard.classfile.instruction.Instruction[] replacementInstructions> = $r3;

        r0.<proguard.optimize.peephole.InstructionSequenceReplacer: proguard.optimize.peephole.BranchTargetFinder branchTargetFinder> = $r4;

        r0.<proguard.optimize.peephole.InstructionSequenceReplacer: proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor> = $r5;

        r0.<proguard.optimize.peephole.InstructionSequenceReplacer: proguard.classfile.instruction.visitor.InstructionVisitor extraInstructionVisitor> = $r6;

        return;
    }

    static proguard.classfile.util.InstructionSequenceMatcher access$100(proguard.optimize.peephole.InstructionSequenceReplacer)
    {
        proguard.optimize.peephole.InstructionSequenceReplacer $r0;
        proguard.classfile.util.InstructionSequenceMatcher r1;

        $r0 := @parameter0: proguard.optimize.peephole.InstructionSequenceReplacer;

        r1 = $r0.<proguard.optimize.peephole.InstructionSequenceReplacer: proguard.classfile.util.InstructionSequenceMatcher instructionSequenceMatcher>;

        return r1;
    }

    static proguard.classfile.instruction.Instruction[] access$200(proguard.optimize.peephole.InstructionSequenceReplacer)
    {
        proguard.optimize.peephole.InstructionSequenceReplacer $r0;
        proguard.classfile.instruction.Instruction[] r1;

        $r0 := @parameter0: proguard.optimize.peephole.InstructionSequenceReplacer;

        r1 = $r0.<proguard.optimize.peephole.InstructionSequenceReplacer: proguard.classfile.instruction.Instruction[] replacementInstructions>;

        return r1;
    }

    private boolean matchedInstructionsUnmodified()
    {
        proguard.classfile.util.InstructionSequenceMatcher $r1;
        proguard.optimize.peephole.InstructionSequenceReplacer r0;
        int $i0, $i1;
        proguard.classfile.editor.CodeAttributeEditor $r2;
        boolean $z0;

        r0 := @this: proguard.optimize.peephole.InstructionSequenceReplacer;

        $i0 = 0;

     label1:
        $r1 = r0.<proguard.optimize.peephole.InstructionSequenceReplacer: proguard.classfile.util.InstructionSequenceMatcher instructionSequenceMatcher>;

        $i1 = virtualinvoke $r1.<proguard.classfile.util.InstructionSequenceMatcher: int instructionCount()>();

        if $i0 >= $i1 goto label3;

        $r2 = r0.<proguard.optimize.peephole.InstructionSequenceReplacer: proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor>;

        $r1 = r0.<proguard.optimize.peephole.InstructionSequenceReplacer: proguard.classfile.util.InstructionSequenceMatcher instructionSequenceMatcher>;

        $i1 = virtualinvoke $r1.<proguard.classfile.util.InstructionSequenceMatcher: int matchedInstructionOffset(int)>($i0);

        $z0 = virtualinvoke $r2.<proguard.classfile.editor.CodeAttributeEditor: boolean isModified(int)>($i1);

        if $z0 == 0 goto label2;

        return 0;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        return 1;
    }

    public void visitAnyInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.Instruction)
    {
        proguard.classfile.instruction.Instruction[] $r8;
        proguard.optimize.peephole.BranchTargetFinder $r5;
        proguard.classfile.Clazz $r1;
        int $i0, $i1, $i2;
        boolean $z0;
        proguard.classfile.util.InstructionSequenceMatcher $r7;
        proguard.classfile.editor.CodeAttributeEditor $r6;
        proguard.classfile.instruction.visitor.InstructionVisitor $r11;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.instruction.Instruction $r4, $r10;
        proguard.optimize.peephole.InstructionSequenceReplacer r0;
        proguard.optimize.peephole.InstructionSequenceReplacer$MyReplacementInstructionFactory $r9;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.optimize.peephole.InstructionSequenceReplacer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.Instruction;

        $r5 = r0.<proguard.optimize.peephole.InstructionSequenceReplacer: proguard.optimize.peephole.BranchTargetFinder branchTargetFinder>;

        $z0 = virtualinvoke $r5.<proguard.optimize.peephole.BranchTargetFinder: boolean isTarget(int)>($i0);

        if $z0 != 0 goto label1;

        $r6 = r0.<proguard.optimize.peephole.InstructionSequenceReplacer: proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor>;

        $z0 = virtualinvoke $r6.<proguard.classfile.editor.CodeAttributeEditor: boolean isModified(int)>($i0);

        if $z0 == 0 goto label2;

     label1:
        $r7 = r0.<proguard.optimize.peephole.InstructionSequenceReplacer: proguard.classfile.util.InstructionSequenceMatcher instructionSequenceMatcher>;

        virtualinvoke $r7.<proguard.classfile.util.InstructionSequenceMatcher: void reset()>();

     label2:
        $r7 = r0.<proguard.optimize.peephole.InstructionSequenceReplacer: proguard.classfile.util.InstructionSequenceMatcher instructionSequenceMatcher>;

        virtualinvoke $r4.<proguard.classfile.instruction.Instruction: void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.visitor.InstructionVisitor)>($r1, $r2, $r3, $i0, $r7);

        $r7 = r0.<proguard.optimize.peephole.InstructionSequenceReplacer: proguard.classfile.util.InstructionSequenceMatcher instructionSequenceMatcher>;

        $z0 = virtualinvoke $r7.<proguard.classfile.util.InstructionSequenceMatcher: boolean isMatching()>();

        if $z0 == 0 goto label7;

        $z0 = specialinvoke r0.<proguard.optimize.peephole.InstructionSequenceReplacer: boolean matchedInstructionsUnmodified()>();

        if $z0 == 0 goto label7;

        $i1 = 0;

     label3:
        $r8 = r0.<proguard.optimize.peephole.InstructionSequenceReplacer: proguard.classfile.instruction.Instruction[] replacementInstructions>;

        $i2 = lengthof $r8;

        if $i1 >= $i2 goto label4;

        $r6 = r0.<proguard.optimize.peephole.InstructionSequenceReplacer: proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor>;

        $r7 = r0.<proguard.optimize.peephole.InstructionSequenceReplacer: proguard.classfile.util.InstructionSequenceMatcher instructionSequenceMatcher>;

        $i2 = virtualinvoke $r7.<proguard.classfile.util.InstructionSequenceMatcher: int matchedInstructionOffset(int)>($i1);

        $r9 = r0.<proguard.optimize.peephole.InstructionSequenceReplacer: proguard.optimize.peephole.InstructionSequenceReplacer$MyReplacementInstructionFactory replacementInstructionFactory>;

        $r10 = virtualinvoke $r9.<proguard.optimize.peephole.InstructionSequenceReplacer$MyReplacementInstructionFactory: proguard.classfile.instruction.Instruction create(int)>($i1);

        $r10 = virtualinvoke $r10.<proguard.classfile.instruction.Instruction: proguard.classfile.instruction.Instruction shrink()>();

        virtualinvoke $r6.<proguard.classfile.editor.CodeAttributeEditor: void replaceInstruction(int,proguard.classfile.instruction.Instruction)>($i2, $r10);

        $i1 = $i1 + 1;

        goto label3;

     label4:
        $r8 = r0.<proguard.optimize.peephole.InstructionSequenceReplacer: proguard.classfile.instruction.Instruction[] replacementInstructions>;

        $i1 = lengthof $r8;

     label5:
        $r7 = r0.<proguard.optimize.peephole.InstructionSequenceReplacer: proguard.classfile.util.InstructionSequenceMatcher instructionSequenceMatcher>;

        $i2 = virtualinvoke $r7.<proguard.classfile.util.InstructionSequenceMatcher: int instructionCount()>();

        if $i1 >= $i2 goto label6;

        $r6 = r0.<proguard.optimize.peephole.InstructionSequenceReplacer: proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor>;

        $r7 = r0.<proguard.optimize.peephole.InstructionSequenceReplacer: proguard.classfile.util.InstructionSequenceMatcher instructionSequenceMatcher>;

        $i2 = virtualinvoke $r7.<proguard.classfile.util.InstructionSequenceMatcher: int matchedInstructionOffset(int)>($i1);

        virtualinvoke $r6.<proguard.classfile.editor.CodeAttributeEditor: void deleteInstruction(int)>($i2);

        $i1 = $i1 + 1;

        goto label5;

     label6:
        $r11 = r0.<proguard.optimize.peephole.InstructionSequenceReplacer: proguard.classfile.instruction.visitor.InstructionVisitor extraInstructionVisitor>;

        if $r11 == null goto label7;

        $r11 = r0.<proguard.optimize.peephole.InstructionSequenceReplacer: proguard.classfile.instruction.visitor.InstructionVisitor extraInstructionVisitor>;

        virtualinvoke $r4.<proguard.classfile.instruction.Instruction: void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.visitor.InstructionVisitor)>($r1, $r2, $r3, $i0, $r11);

     label7:
        return;
    }
}
