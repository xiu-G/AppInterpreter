public final class org.hzl.master.utils.f extends java.lang.Object
{

    public static int a()
    {
        int $i0;
        java.lang.Exception $r0;

     label1:
        $i0 = staticinvoke <org.hzl.master.utils.f: int a(java.lang.String)>("/sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq");

     label2:
        return $i0;

     label3:
        $r0 := @caughtexception;

        virtualinvoke $r0.<java.lang.Exception: void printStackTrace()>();

        return 0;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private static int a(java.lang.String)
    {
        java.lang.Process $r3;
        java.lang.String[] $r2;
        java.lang.Exception $r5, $r6;
        int $i0;
        java.lang.String $r0;
        java.lang.ProcessBuilder $r1;
        java.io.InputStream $r4;

        $r0 := @parameter0: java.lang.String;

        $r1 = new java.lang.ProcessBuilder;

        $r2 = newarray (java.lang.String)[2];

     label1:
        $r2[0] = "/system/bin/cat";

        $r2[1] = "/sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq";

        specialinvoke $r1.<java.lang.ProcessBuilder: void <init>(java.lang.String[])>($r2);

        $r3 = virtualinvoke $r1.<java.lang.ProcessBuilder: java.lang.Process start()>();

        $r4 = virtualinvoke $r3.<java.lang.Process: java.io.InputStream getInputStream()>();

        $r0 = staticinvoke <org.hzl.master.utils.f: java.lang.String a(java.io.InputStream)>($r4);

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r0);

     label2:
        return $i0;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.Exception;

        specialinvoke $r6.<java.lang.Exception: void <init>(java.lang.Throwable)>($r5);

        throw $r6;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private static final java.lang.String a(java.io.InputStream)
    {
        java.util.Scanner $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.io.InputStream $r0;
        boolean $z0;

        $r0 := @parameter0: java.io.InputStream;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r1 = new java.util.Scanner;

        specialinvoke $r1.<java.util.Scanner: void <init>(java.io.InputStream)>($r0);

     label1:
        $z0 = virtualinvoke $r1.<java.util.Scanner: boolean hasNextLine()>();

        if $z0 != 0 goto label2;

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;

     label2:
        $r3 = virtualinvoke $r1.<java.util.Scanner: java.lang.String nextLine()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        goto label1;
    }
}
