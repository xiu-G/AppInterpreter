public class proguard.classfile.editor.CodeAttributeComposer extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.attribute.visitor.AttributeVisitor, proguard.classfile.instruction.visitor.InstructionVisitor, proguard.classfile.attribute.visitor.ExceptionInfoVisitor, proguard.classfile.attribute.preverification.visitor.StackMapFrameVisitor, proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor, proguard.classfile.attribute.visitor.LineNumberInfoVisitor, proguard.classfile.attribute.visitor.LocalVariableInfoVisitor, proguard.classfile.attribute.visitor.LocalVariableTypeInfoVisitor
{
    private static final boolean DEBUG;
    private static final int INVALID;
    private static final int MAXIMUM_LEVELS;
    private boolean allowExternalExceptionHandlers;
    private byte[] code;
    private final int[] codeFragmentLengths;
    private final int[] codeFragmentOffsets;
    private int codeLength;
    private proguard.classfile.attribute.ExceptionInfo[] exceptionTable;
    private int exceptionTableLength;
    private int expectedStackMapFrameOffset;
    private final int[][] instructionOffsetMap;
    private int level;
    private int maximumCodeLength;
    private int[] oldInstructionOffsets;
    private final proguard.classfile.editor.StackSizeUpdater stackSizeUpdater;
    private final proguard.classfile.editor.VariableSizeUpdater variableSizeUpdater;

    public void <init>()
    {
        proguard.classfile.editor.CodeAttributeComposer r0;

        r0 := @this: proguard.classfile.editor.CodeAttributeComposer;

        specialinvoke r0.<proguard.classfile.editor.CodeAttributeComposer: void <init>(boolean)>(0);

        return;
    }

    public void <init>(boolean)
    {
        byte[] $r1;
        int[][] $r5;
        proguard.classfile.editor.StackSizeUpdater $r7;
        proguard.classfile.editor.VariableSizeUpdater $r8;
        proguard.classfile.editor.CodeAttributeComposer r0;
        proguard.classfile.attribute.ExceptionInfo[] $r6;
        int[] $r2;
        java.lang.Class $r3;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: proguard.classfile.editor.CodeAttributeComposer;

        $z0 := @parameter0: boolean;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        r0.<proguard.classfile.editor.CodeAttributeComposer: int level> = -1;

        $r1 = newarray (byte)[1024];

        r0.<proguard.classfile.editor.CodeAttributeComposer: byte[] code> = $r1;

        $r2 = newarray (int)[1024];

        r0.<proguard.classfile.editor.CodeAttributeComposer: int[] oldInstructionOffsets> = $r2;

        $r2 = newarray (int)[32];

        r0.<proguard.classfile.editor.CodeAttributeComposer: int[] codeFragmentOffsets> = $r2;

        $r2 = newarray (int)[32];

        r0.<proguard.classfile.editor.CodeAttributeComposer: int[] codeFragmentLengths> = $r2;

        $r2 = newarray (int)[2];

        $r2[0] = 32;

        $r2[1] = 1025;

        $r3 = <java.lang.Integer: java.lang.Class TYPE>;

        $r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r3, $r2);

        $r5 = (int[][]) $r4;

        r0.<proguard.classfile.editor.CodeAttributeComposer: int[][] instructionOffsetMap> = $r5;

        $r6 = newarray (proguard.classfile.attribute.ExceptionInfo)[16];

        r0.<proguard.classfile.editor.CodeAttributeComposer: proguard.classfile.attribute.ExceptionInfo[] exceptionTable> = $r6;

        $r7 = new proguard.classfile.editor.StackSizeUpdater;

        specialinvoke $r7.<proguard.classfile.editor.StackSizeUpdater: void <init>()>();

        r0.<proguard.classfile.editor.CodeAttributeComposer: proguard.classfile.editor.StackSizeUpdater stackSizeUpdater> = $r7;

        $r8 = new proguard.classfile.editor.VariableSizeUpdater;

        specialinvoke $r8.<proguard.classfile.editor.VariableSizeUpdater: void <init>()>();

        r0.<proguard.classfile.editor.CodeAttributeComposer: proguard.classfile.editor.VariableSizeUpdater variableSizeUpdater> = $r8;

        r0.<proguard.classfile.editor.CodeAttributeComposer: boolean allowExternalExceptionHandlers> = 0;

        return;
    }

    private void ensureCodeLength(int)
    {
        byte[] $r1, $r2;
        int[] $r3, $r4;
        int $i0, $i1;
        proguard.classfile.editor.CodeAttributeComposer r0;

        r0 := @this: proguard.classfile.editor.CodeAttributeComposer;

        $i0 := @parameter0: int;

        $r1 = r0.<proguard.classfile.editor.CodeAttributeComposer: byte[] code>;

        $i1 = lengthof $r1;

        if $i1 >= $i0 goto label1;

        $i0 = $i0 * 6;

        $i1 = $i0 / 5;

        $r1 = newarray (byte)[$i1];

        $r2 = r0.<proguard.classfile.editor.CodeAttributeComposer: byte[] code>;

        $i0 = r0.<proguard.classfile.editor.CodeAttributeComposer: int codeLength>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r1, 0, $i0);

        r0.<proguard.classfile.editor.CodeAttributeComposer: byte[] code> = $r1;

        $r3 = newarray (int)[$i1];

        $r4 = r0.<proguard.classfile.editor.CodeAttributeComposer: int[] oldInstructionOffsets>;

        $i0 = r0.<proguard.classfile.editor.CodeAttributeComposer: int codeLength>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r3, 0, $i0);

        r0.<proguard.classfile.editor.CodeAttributeComposer: int[] oldInstructionOffsets> = $r3;

     label1:
        return;
    }

    public static void main(java.lang.String[])
    {
        int $i0;
        proguard.classfile.instruction.BranchInstruction $r5;
        java.lang.String[] $r0;
        proguard.classfile.instruction.VariableInstruction $r4;
        proguard.classfile.instruction.SimpleInstruction $r3;
        proguard.classfile.editor.CodeAttributeComposer $r1, $r2;

        $r0 := @parameter0: java.lang.String[];

        $r2 = new proguard.classfile.editor.CodeAttributeComposer;

        $r1 = $r2;

        specialinvoke $r2.<proguard.classfile.editor.CodeAttributeComposer: void <init>()>();

        virtualinvoke $r1.<proguard.classfile.editor.CodeAttributeComposer: void beginCodeFragment(int)>(4);

        $r3 = new proguard.classfile.instruction.SimpleInstruction;

        specialinvoke $r3.<proguard.classfile.instruction.SimpleInstruction: void <init>(byte)>(3);

        virtualinvoke $r1.<proguard.classfile.editor.CodeAttributeComposer: void appendInstruction(int,proguard.classfile.instruction.Instruction)>(0, $r3);

        $r4 = new proguard.classfile.instruction.VariableInstruction;

        specialinvoke $r4.<proguard.classfile.instruction.VariableInstruction: void <init>(byte,int)>(54, 0);

        virtualinvoke $r1.<proguard.classfile.editor.CodeAttributeComposer: void appendInstruction(int,proguard.classfile.instruction.Instruction)>(1, $r4);

        $r5 = new proguard.classfile.instruction.BranchInstruction;

        specialinvoke $r5.<proguard.classfile.instruction.BranchInstruction: void <init>(byte,int)>(-89, 1);

        virtualinvoke $r1.<proguard.classfile.editor.CodeAttributeComposer: void appendInstruction(int,proguard.classfile.instruction.Instruction)>(2, $r5);

        virtualinvoke $r1.<proguard.classfile.editor.CodeAttributeComposer: void beginCodeFragment(int)>(4);

        $r4 = new proguard.classfile.instruction.VariableInstruction;

        specialinvoke $r4.<proguard.classfile.instruction.VariableInstruction: void <init>(byte,int,int)>(-124, 0, 1);

        virtualinvoke $r1.<proguard.classfile.editor.CodeAttributeComposer: void appendInstruction(int,proguard.classfile.instruction.Instruction)>(0, $r4);

        $r4 = new proguard.classfile.instruction.VariableInstruction;

        specialinvoke $r4.<proguard.classfile.instruction.VariableInstruction: void <init>(byte,int)>(21, 0);

        virtualinvoke $r1.<proguard.classfile.editor.CodeAttributeComposer: void appendInstruction(int,proguard.classfile.instruction.Instruction)>(1, $r4);

        $r3 = new proguard.classfile.instruction.SimpleInstruction;

        specialinvoke $r3.<proguard.classfile.instruction.SimpleInstruction: void <init>(byte)>(8);

        virtualinvoke $r1.<proguard.classfile.editor.CodeAttributeComposer: void appendInstruction(int,proguard.classfile.instruction.Instruction)>(2, $r3);

        $r5 = new proguard.classfile.instruction.BranchInstruction;

        $i0 = -3;

        specialinvoke $r5.<proguard.classfile.instruction.BranchInstruction: void <init>(byte,int)>(-95, $i0);

        virtualinvoke $r1.<proguard.classfile.editor.CodeAttributeComposer: void appendInstruction(int,proguard.classfile.instruction.Instruction)>(3, $r5);

        virtualinvoke $r1.<proguard.classfile.editor.CodeAttributeComposer: void endCodeFragment()>();

        $r3 = new proguard.classfile.instruction.SimpleInstruction;

        specialinvoke $r3.<proguard.classfile.instruction.SimpleInstruction: void <init>(byte)>(-79);

        virtualinvoke $r1.<proguard.classfile.editor.CodeAttributeComposer: void appendInstruction(int,proguard.classfile.instruction.Instruction)>(3, $r3);

        virtualinvoke $r1.<proguard.classfile.editor.CodeAttributeComposer: void endCodeFragment()>();

        return;
    }

    private void print(java.lang.String, java.lang.String)
    {
        java.io.PrintStream $r3;
        int $i0, $i1;
        java.lang.String $r1, $r2;
        proguard.classfile.editor.CodeAttributeComposer r0;

        r0 := @this: proguard.classfile.editor.CodeAttributeComposer;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void print(java.lang.String)>($r1);

        $i0 = 0;

     label1:
        $i1 = r0.<proguard.classfile.editor.CodeAttributeComposer: int level>;

        if $i0 >= $i1 goto label2;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void print(java.lang.String)>("  ");

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void print(java.lang.String)>($r2);

        return;
    }

    private void println(java.lang.String, java.lang.String)
    {
        java.io.PrintStream $r3;
        java.lang.String $r1, $r2;
        proguard.classfile.editor.CodeAttributeComposer r0;

        r0 := @this: proguard.classfile.editor.CodeAttributeComposer;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        specialinvoke r0.<proguard.classfile.editor.CodeAttributeComposer: void print(java.lang.String,java.lang.String)>($r1, $r2);

        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void println()>();

        return;
    }

    private int remapBranchOffset(int, int)
    {
        java.lang.IllegalArgumentException $r1;
        proguard.classfile.editor.CodeAttributeComposer r0;
        int[] $r4;
        java.lang.StringBuffer $r2;
        int $i0, $i1, $i2;
        java.lang.String $r3;

        r0 := @this: proguard.classfile.editor.CodeAttributeComposer;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        if $i0 < 0 goto label1;

        $i2 = r0.<proguard.classfile.editor.CodeAttributeComposer: int codeLength>;

        if $i0 <= $i2 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid instruction offset [");

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] in code with length [");

        $i0 = r0.<proguard.classfile.editor.CodeAttributeComposer: int codeLength>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label2:
        $r4 = r0.<proguard.classfile.editor.CodeAttributeComposer: int[] oldInstructionOffsets>;

        $i0 = $r4[$i0];

        $i1 = $i0 + $i1;

        $i1 = specialinvoke r0.<proguard.classfile.editor.CodeAttributeComposer: int remapInstructionOffset(int)>($i1);

        $i0 = specialinvoke r0.<proguard.classfile.editor.CodeAttributeComposer: int remapInstructionOffset(int)>($i0);

        $i0 = $i1 - $i0;

        return $i0;
    }

    private int remapInstructionOffset(int)
    {
        int[][] $r4;
        java.lang.IllegalArgumentException $r6;
        proguard.classfile.editor.CodeAttributeComposer r0;
        int[] $r1;
        java.lang.StringBuffer $r2, $r5;
        int $i0, $i1;
        java.lang.String $r3;

        r0 := @this: proguard.classfile.editor.CodeAttributeComposer;

        $i0 := @parameter0: int;

        if $i0 < 0 goto label1;

        $r1 = r0.<proguard.classfile.editor.CodeAttributeComposer: int[] codeFragmentLengths>;

        $i1 = r0.<proguard.classfile.editor.CodeAttributeComposer: int level>;

        $i1 = $r1[$i1];

        if $i0 <= $i1 goto label2;

     label1:
        $r6 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Instruction offset [");

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] out of range in code fragment with length [");

        $r1 = r0.<proguard.classfile.editor.CodeAttributeComposer: int[] codeFragmentLengths>;

        $i0 = r0.<proguard.classfile.editor.CodeAttributeComposer: int level>;

        $i0 = $r1[$i0];

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] at level ");

        $i0 = r0.<proguard.classfile.editor.CodeAttributeComposer: int level>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r6;

     label2:
        $r4 = r0.<proguard.classfile.editor.CodeAttributeComposer: int[][] instructionOffsetMap>;

        $i1 = r0.<proguard.classfile.editor.CodeAttributeComposer: int level>;

        $r1 = $r4[$i1];

        $i1 = $r1[$i0];

        if $i1 != -1 goto label3;

        $r6 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid instruction offset [");

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] in code fragment at level ");

        $i0 = r0.<proguard.classfile.editor.CodeAttributeComposer: int level>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r6;

     label3:
        return $i1;
    }

    private void remapJumpOffsets(int, int[])
    {
        int[] $r1;
        int $i0, $i1, $i2;
        proguard.classfile.editor.CodeAttributeComposer r0;

        r0 := @this: proguard.classfile.editor.CodeAttributeComposer;

        $i0 := @parameter0: int;

        $r1 := @parameter1: int[];

        $i2 = 0;

     label1:
        $i1 = lengthof $r1;

        if $i2 >= $i1 goto label2;

        $i1 = $r1[$i2];

        $i1 = specialinvoke r0.<proguard.classfile.editor.CodeAttributeComposer: int remapBranchOffset(int,int)>($i0, $i1);

        $r1[$i2] = $i1;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return;
    }

    private boolean remappableInstructionOffset(int)
    {
        int[][] $r2;
        int[] $r1;
        int $i0, $i1;
        proguard.classfile.editor.CodeAttributeComposer r0;

        r0 := @this: proguard.classfile.editor.CodeAttributeComposer;

        $i0 := @parameter0: int;

        $r1 = r0.<proguard.classfile.editor.CodeAttributeComposer: int[] codeFragmentLengths>;

        $i1 = r0.<proguard.classfile.editor.CodeAttributeComposer: int level>;

        $i1 = $r1[$i1];

        if $i0 > $i1 goto label1;

        $r2 = r0.<proguard.classfile.editor.CodeAttributeComposer: int[][] instructionOffsetMap>;

        $i1 = r0.<proguard.classfile.editor.CodeAttributeComposer: int level>;

        $r1 = $r2[$i1];

        $i0 = $r1[$i0];

        if $i0 <= -1 goto label1;

        return 1;

     label1:
        return 0;
    }

    private int removeEmptyExceptions(proguard.classfile.attribute.ExceptionInfo[], int)
    {
        proguard.classfile.editor.CodeAttributeComposer r0;
        proguard.classfile.attribute.ExceptionInfo[] $r1;
        int $i0, $i1, $i2, $i3, $i4;
        proguard.classfile.attribute.ExceptionInfo $r2;

        r0 := @this: proguard.classfile.editor.CodeAttributeComposer;

        $r1 := @parameter0: proguard.classfile.attribute.ExceptionInfo[];

        $i0 := @parameter1: int;

        $i2 = 0;

        $i3 = 0;

     label1:
        if $i2 >= $i0 goto label3;

        $r2 = $r1[$i2];

        $i4 = $r2.<proguard.classfile.attribute.ExceptionInfo: int u2startPC>;

        $i1 = $r2.<proguard.classfile.attribute.ExceptionInfo: int u2endPC>;

        if $i4 >= $i1 goto label2;

        $r1[$i3] = $r2;

        $i3 = $i3 + 1;

     label2:
        $i2 = $i2 + 1;

        goto label1;

     label3:
        $i2 = $i3;

     label4:
        if $i2 >= $i0 goto label5;

        $r1[$i2] = null;

        $i2 = $i2 + 1;

        goto label4;

     label5:
        return $i3;
    }

    private int removeEmptyLineNumbers(proguard.classfile.attribute.LineNumberInfo[], int, int)
    {
        proguard.classfile.attribute.LineNumberInfo $r2, $r3;
        proguard.classfile.editor.CodeAttributeComposer r0;
        proguard.classfile.attribute.LineNumberInfo[] $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: proguard.classfile.editor.CodeAttributeComposer;

        $r1 := @parameter0: proguard.classfile.attribute.LineNumberInfo[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 = 0;

        $i3 = 0;

     label1:
        if $i2 >= $i0 goto label4;

        $r2 = $r1[$i2];

        $i4 = $r2.<proguard.classfile.attribute.LineNumberInfo: int u2startPC>;

        if $i4 >= $i1 goto label3;

        if $i2 == 0 goto label2;

        $i5 = $i2 - 1;

        $r3 = $r1[$i5];

        $i5 = $r3.<proguard.classfile.attribute.LineNumberInfo: int u2startPC>;

        if $i4 <= $i5 goto label3;

     label2:
        $r1[$i3] = $r2;

        $i3 = $i3 + 1;

     label3:
        $i2 = $i2 + 1;

        goto label1;

     label4:
        $i1 = $i3;

     label5:
        if $i1 >= $i0 goto label6;

        $r1[$i1] = null;

        $i1 = $i1 + 1;

        goto label5;

     label6:
        return $i3;
    }

    private int removeEmptyLocalVariableTypes(proguard.classfile.attribute.LocalVariableTypeInfo[], int, int)
    {
        proguard.classfile.editor.CodeAttributeComposer r0;
        proguard.classfile.attribute.LocalVariableTypeInfo $r2;
        int $i0, $i1, $i2, $i3, $i4;
        proguard.classfile.attribute.LocalVariableTypeInfo[] $r1;

        r0 := @this: proguard.classfile.editor.CodeAttributeComposer;

        $r1 := @parameter0: proguard.classfile.attribute.LocalVariableTypeInfo[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 = 0;

        $i3 = 0;

     label1:
        if $i2 >= $i0 goto label3;

        $r2 = $r1[$i2];

        $i4 = $r2.<proguard.classfile.attribute.LocalVariableTypeInfo: int u2length>;

        if $i4 <= 0 goto label2;

        $i4 = $r2.<proguard.classfile.attribute.LocalVariableTypeInfo: int u2index>;

        if $i4 >= $i1 goto label2;

        $r1[$i3] = $r2;

        $i3 = $i3 + 1;

     label2:
        $i2 = $i2 + 1;

        goto label1;

     label3:
        $i1 = $i3;

     label4:
        if $i1 >= $i0 goto label5;

        $r1[$i1] = null;

        $i1 = $i1 + 1;

        goto label4;

     label5:
        return $i3;
    }

    private int removeEmptyLocalVariables(proguard.classfile.attribute.LocalVariableInfo[], int, int)
    {
        proguard.classfile.attribute.LocalVariableInfo $r2;
        proguard.classfile.editor.CodeAttributeComposer r0;
        int $i0, $i1, $i2, $i3, $i4;
        proguard.classfile.attribute.LocalVariableInfo[] $r1;

        r0 := @this: proguard.classfile.editor.CodeAttributeComposer;

        $r1 := @parameter0: proguard.classfile.attribute.LocalVariableInfo[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 = 0;

        $i3 = 0;

     label1:
        if $i2 >= $i0 goto label3;

        $r2 = $r1[$i2];

        $i4 = $r2.<proguard.classfile.attribute.LocalVariableInfo: int u2length>;

        if $i4 <= 0 goto label2;

        $i4 = $r2.<proguard.classfile.attribute.LocalVariableInfo: int u2index>;

        if $i4 >= $i1 goto label2;

        $r1[$i3] = $r2;

        $i3 = $i3 + 1;

     label2:
        $i2 = $i2 + 1;

        goto label1;

     label3:
        $i1 = $i3;

     label4:
        if $i1 >= $i0 goto label5;

        $r1[$i1] = null;

        $i1 = $i1 + 1;

        goto label4;

     label5:
        return $i3;
    }

    public void appendException(proguard.classfile.attribute.ExceptionInfo)
    {
        proguard.classfile.attribute.ExceptionInfo[] $r2, $r3;
        int $i0, $i1;
        proguard.classfile.attribute.ExceptionInfo $r1;
        proguard.classfile.editor.CodeAttributeComposer r0;

        r0 := @this: proguard.classfile.editor.CodeAttributeComposer;

        $r1 := @parameter0: proguard.classfile.attribute.ExceptionInfo;

        virtualinvoke r0.<proguard.classfile.editor.CodeAttributeComposer: void visitExceptionInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.ExceptionInfo)>(null, null, null, $r1);

        $i0 = $r1.<proguard.classfile.attribute.ExceptionInfo: int u2startPC>;

        $i1 = $r1.<proguard.classfile.attribute.ExceptionInfo: int u2endPC>;

        if $i0 != $i1 goto label1;

        return;

     label1:
        $r2 = r0.<proguard.classfile.editor.CodeAttributeComposer: proguard.classfile.attribute.ExceptionInfo[] exceptionTable>;

        $i0 = lengthof $r2;

        $i1 = r0.<proguard.classfile.editor.CodeAttributeComposer: int exceptionTableLength>;

        if $i0 > $i1 goto label2;

        $i0 = r0.<proguard.classfile.editor.CodeAttributeComposer: int exceptionTableLength>;

        $i0 = $i0 + 1;

        $r2 = newarray (proguard.classfile.attribute.ExceptionInfo)[$i0];

        $r3 = r0.<proguard.classfile.editor.CodeAttributeComposer: proguard.classfile.attribute.ExceptionInfo[] exceptionTable>;

        $i0 = r0.<proguard.classfile.editor.CodeAttributeComposer: int exceptionTableLength>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r2, 0, $i0);

        r0.<proguard.classfile.editor.CodeAttributeComposer: proguard.classfile.attribute.ExceptionInfo[] exceptionTable> = $r2;

     label2:
        $r2 = r0.<proguard.classfile.editor.CodeAttributeComposer: proguard.classfile.attribute.ExceptionInfo[] exceptionTable>;

        $i0 = r0.<proguard.classfile.editor.CodeAttributeComposer: int exceptionTableLength>;

        $i1 = $i0 + 1;

        r0.<proguard.classfile.editor.CodeAttributeComposer: int exceptionTableLength> = $i1;

        $r2[$i0] = $r1;

        return;
    }

    public void appendInstruction(int, proguard.classfile.instruction.Instruction)
    {
        byte[] $r3;
        int[][] $r4;
        proguard.classfile.editor.CodeAttributeComposer r0;
        proguard.classfile.instruction.Instruction $r1;
        int[] $r2;
        int $i0, $i1, $i2;

        r0 := @this: proguard.classfile.editor.CodeAttributeComposer;

        $i0 := @parameter0: int;

        $r1 := @parameter1: proguard.classfile.instruction.Instruction;

        $i2 = r0.<proguard.classfile.editor.CodeAttributeComposer: int codeLength>;

        $i1 = r0.<proguard.classfile.editor.CodeAttributeComposer: int codeLength>;

        $i1 = virtualinvoke $r1.<proguard.classfile.instruction.Instruction: int length(int)>($i1);

        $i2 = $i2 + $i1;

        specialinvoke r0.<proguard.classfile.editor.CodeAttributeComposer: void ensureCodeLength(int)>($i2);

        $r2 = r0.<proguard.classfile.editor.CodeAttributeComposer: int[] oldInstructionOffsets>;

        $i1 = r0.<proguard.classfile.editor.CodeAttributeComposer: int codeLength>;

        $r2[$i1] = $i0;

        $r3 = r0.<proguard.classfile.editor.CodeAttributeComposer: byte[] code>;

        $i1 = r0.<proguard.classfile.editor.CodeAttributeComposer: int codeLength>;

        virtualinvoke $r1.<proguard.classfile.instruction.Instruction: void write(byte[],int)>($r3, $i1);

        $r4 = r0.<proguard.classfile.editor.CodeAttributeComposer: int[][] instructionOffsetMap>;

        $i1 = r0.<proguard.classfile.editor.CodeAttributeComposer: int level>;

        $r2 = $r4[$i1];

        $i1 = r0.<proguard.classfile.editor.CodeAttributeComposer: int codeLength>;

        $r2[$i0] = $i1;

        r0.<proguard.classfile.editor.CodeAttributeComposer: int codeLength> = $i2;

        return;
    }

    public void appendLabel(int)
    {
        int[][] $r1;
        int[] $r2;
        int $i0, $i1;
        proguard.classfile.editor.CodeAttributeComposer r0;

        r0 := @this: proguard.classfile.editor.CodeAttributeComposer;

        $i0 := @parameter0: int;

        $r1 = r0.<proguard.classfile.editor.CodeAttributeComposer: int[][] instructionOffsetMap>;

        $i1 = r0.<proguard.classfile.editor.CodeAttributeComposer: int level>;

        $r2 = $r1[$i1];

        $i1 = r0.<proguard.classfile.editor.CodeAttributeComposer: int codeLength>;

        $r2[$i0] = $i1;

        return;
    }

    public void beginCodeFragment(int)
    {
        int[][] $r3;
        java.lang.IllegalArgumentException $r6;
        proguard.classfile.editor.CodeAttributeComposer r0;
        int[] $r4;
        java.lang.StringBuffer $r1, $r5;
        int $i0, $i1, $i2;
        java.lang.String $r2;

        r0 := @this: proguard.classfile.editor.CodeAttributeComposer;

        $i0 := @parameter0: int;

        $i1 = r0.<proguard.classfile.editor.CodeAttributeComposer: int level>;

        $i1 = $i1 + 1;

        r0.<proguard.classfile.editor.CodeAttributeComposer: int level> = $i1;

        $i1 = r0.<proguard.classfile.editor.CodeAttributeComposer: int level>;

        if $i1 < 32 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Maximum number of code fragment levels exceeded [");

        $i0 = r0.<proguard.classfile.editor.CodeAttributeComposer: int level>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r6;

     label1:
        $i1 = r0.<proguard.classfile.editor.CodeAttributeComposer: int maximumCodeLength>;

        $i1 = $i1 + $i0;

        r0.<proguard.classfile.editor.CodeAttributeComposer: int maximumCodeLength> = $i1;

        $i1 = r0.<proguard.classfile.editor.CodeAttributeComposer: int maximumCodeLength>;

        specialinvoke r0.<proguard.classfile.editor.CodeAttributeComposer: void ensureCodeLength(int)>($i1);

        $r3 = r0.<proguard.classfile.editor.CodeAttributeComposer: int[][] instructionOffsetMap>;

        $i1 = r0.<proguard.classfile.editor.CodeAttributeComposer: int level>;

        $r4 = $r3[$i1];

        $i1 = lengthof $r4;

        if $i1 > $i0 goto label2;

        $r3 = r0.<proguard.classfile.editor.CodeAttributeComposer: int[][] instructionOffsetMap>;

        $i1 = r0.<proguard.classfile.editor.CodeAttributeComposer: int level>;

        $i2 = $i0 + 1;

        $r4 = newarray (int)[$i2];

        $r3[$i1] = $r4;

     label2:
        $i1 = 0;

     label3:
        if $i1 > $i0 goto label4;

        $r3 = r0.<proguard.classfile.editor.CodeAttributeComposer: int[][] instructionOffsetMap>;

        $i2 = r0.<proguard.classfile.editor.CodeAttributeComposer: int level>;

        $r4 = $r3[$i2];

        $r4[$i1] = -1;

        $i1 = $i1 + 1;

        goto label3;

     label4:
        $r4 = r0.<proguard.classfile.editor.CodeAttributeComposer: int[] codeFragmentOffsets>;

        $i1 = r0.<proguard.classfile.editor.CodeAttributeComposer: int level>;

        $i2 = r0.<proguard.classfile.editor.CodeAttributeComposer: int codeLength>;

        $r4[$i1] = $i2;

        $r4 = r0.<proguard.classfile.editor.CodeAttributeComposer: int[] codeFragmentLengths>;

        $i1 = r0.<proguard.classfile.editor.CodeAttributeComposer: int level>;

        $r4[$i1] = $i0;

        return;
    }

    public void endCodeFragment()
    {
        byte[] $r4;
        java.lang.IllegalStateException $r10;
        java.lang.IllegalArgumentException $r9;
        proguard.classfile.editor.CodeAttributeComposer r0;
        proguard.classfile.attribute.ExceptionInfo[] $r6;
        int[] $r3;
        proguard.classfile.instruction.Instruction $r5;
        java.lang.StringBuffer $r1, $r8;
        int $i0, $i1, $i2;
        java.lang.String $r2;
        proguard.classfile.attribute.ExceptionInfo $r7;
        boolean $z0;

        r0 := @this: proguard.classfile.editor.CodeAttributeComposer;

        $i0 = r0.<proguard.classfile.editor.CodeAttributeComposer: int level>;

        if $i0 >= 0 goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Code fragment not begun [");

        $i0 = r0.<proguard.classfile.editor.CodeAttributeComposer: int level>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r9;

     label1:
        $r3 = r0.<proguard.classfile.editor.CodeAttributeComposer: int[] codeFragmentOffsets>;

        $i0 = r0.<proguard.classfile.editor.CodeAttributeComposer: int level>;

        $i0 = $r3[$i0];

     label2:
        $i1 = r0.<proguard.classfile.editor.CodeAttributeComposer: int codeLength>;

        if $i0 >= $i1 goto label4;

        $r4 = r0.<proguard.classfile.editor.CodeAttributeComposer: byte[] code>;

        $r5 = staticinvoke <proguard.classfile.instruction.InstructionFactory: proguard.classfile.instruction.Instruction create(byte[],int)>($r4, $i0);

        $r3 = r0.<proguard.classfile.editor.CodeAttributeComposer: int[] oldInstructionOffsets>;

        $i1 = $r3[$i0];

        if $i1 < 0 goto label3;

        virtualinvoke $r5.<proguard.classfile.instruction.Instruction: void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.visitor.InstructionVisitor)>(null, null, null, $i0, r0);

        $r4 = r0.<proguard.classfile.editor.CodeAttributeComposer: byte[] code>;

        virtualinvoke $r5.<proguard.classfile.instruction.Instruction: void write(byte[],int)>($r4, $i0);

        $r3 = r0.<proguard.classfile.editor.CodeAttributeComposer: int[] oldInstructionOffsets>;

        $r3[$i0] = -1;

     label3:
        $i1 = virtualinvoke $r5.<proguard.classfile.instruction.Instruction: int length(int)>($i0);

        $i0 = $i1 + $i0;

        goto label2;

     label4:
        $i0 = r0.<proguard.classfile.editor.CodeAttributeComposer: int maximumCodeLength>;

        $i1 = r0.<proguard.classfile.editor.CodeAttributeComposer: int codeLength>;

        $r3 = r0.<proguard.classfile.editor.CodeAttributeComposer: int[] codeFragmentOffsets>;

        $i2 = r0.<proguard.classfile.editor.CodeAttributeComposer: int level>;

        $i2 = $r3[$i2];

        $i1 = $i1 - $i2;

        $r3 = r0.<proguard.classfile.editor.CodeAttributeComposer: int[] codeFragmentLengths>;

        $i2 = r0.<proguard.classfile.editor.CodeAttributeComposer: int level>;

        $i2 = $r3[$i2];

        $i1 = $i1 - $i2;

        $i0 = $i0 + $i1;

        r0.<proguard.classfile.editor.CodeAttributeComposer: int maximumCodeLength> = $i0;

        $z0 = r0.<proguard.classfile.editor.CodeAttributeComposer: boolean allowExternalExceptionHandlers>;

        if $z0 == 0 goto label8;

        $i0 = 0;

     label5:
        $i1 = r0.<proguard.classfile.editor.CodeAttributeComposer: int exceptionTableLength>;

        if $i0 >= $i1 goto label8;

        $r6 = r0.<proguard.classfile.editor.CodeAttributeComposer: proguard.classfile.attribute.ExceptionInfo[] exceptionTable>;

        $r7 = $r6[$i0];

        $i1 = $r7.<proguard.classfile.attribute.ExceptionInfo: int u2handlerPC>;

        $i1 = neg $i1;

        if $i1 <= 0 goto label6;

        $z0 = specialinvoke r0.<proguard.classfile.editor.CodeAttributeComposer: boolean remappableInstructionOffset(int)>($i1);

        if $z0 == 0 goto label7;

        $i1 = specialinvoke r0.<proguard.classfile.editor.CodeAttributeComposer: int remapInstructionOffset(int)>($i1);

        $r7.<proguard.classfile.attribute.ExceptionInfo: int u2handlerPC> = $i1;

     label6:
        $i0 = $i0 + 1;

        goto label5;

     label7:
        $i2 = r0.<proguard.classfile.editor.CodeAttributeComposer: int level>;

        if $i2 != 0 goto label6;

        $r10 = new java.lang.IllegalStateException;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Couldn\'t remap exception handler offset [");

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r2);

        throw $r10;

     label8:
        $i0 = r0.<proguard.classfile.editor.CodeAttributeComposer: int level>;

        $i0 = $i0 - 1;

        r0.<proguard.classfile.editor.CodeAttributeComposer: int level> = $i0;

        return;
    }

    public void reset()
    {
        proguard.classfile.editor.CodeAttributeComposer r0;

        r0 := @this: proguard.classfile.editor.CodeAttributeComposer;

        r0.<proguard.classfile.editor.CodeAttributeComposer: int maximumCodeLength> = 0;

        r0.<proguard.classfile.editor.CodeAttributeComposer: int codeLength> = 0;

        r0.<proguard.classfile.editor.CodeAttributeComposer: int exceptionTableLength> = 0;

        r0.<proguard.classfile.editor.CodeAttributeComposer: int level> = -1;

        return;
    }

    public void visitAnyAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.Attribute)
    {
        proguard.classfile.editor.CodeAttributeComposer r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.Attribute $r2;

        r0 := @this: proguard.classfile.editor.CodeAttributeComposer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.Attribute;

        return;
    }

    public void visitAnyInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.Instruction)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.instruction.Instruction $r4;
        int $i0;
        proguard.classfile.Method $r2;
        proguard.classfile.editor.CodeAttributeComposer r0;

        r0 := @this: proguard.classfile.editor.CodeAttributeComposer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.Instruction;

        return;
    }

    public void visitAnyStackMapFrame(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.attribute.preverification.StackMapFrame)
    {
        proguard.classfile.editor.CodeAttributeComposer r0;
        proguard.classfile.attribute.preverification.StackMapFrame $r4;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0, $i1, $i2;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.classfile.editor.CodeAttributeComposer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.attribute.preverification.StackMapFrame;

        $i0 = specialinvoke r0.<proguard.classfile.editor.CodeAttributeComposer: int remapInstructionOffset(int)>($i0);

        $i1 = $i0;

        $i2 = r0.<proguard.classfile.editor.CodeAttributeComposer: int expectedStackMapFrameOffset>;

        if $i2 < 0 goto label1;

        $i1 = r0.<proguard.classfile.editor.CodeAttributeComposer: int expectedStackMapFrameOffset>;

        $i1 = $i0 - $i1;

        $i0 = $i0 + 1;

        r0.<proguard.classfile.editor.CodeAttributeComposer: int expectedStackMapFrameOffset> = $i0;

     label1:
        $r4.<proguard.classfile.attribute.preverification.StackMapFrame: int u2offsetDelta> = $i1;

        return;
    }

    public void visitAnySwitchInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.SwitchInstruction)
    {
        proguard.classfile.editor.CodeAttributeComposer r0;
        proguard.classfile.instruction.SwitchInstruction $r4;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int[] $r5;
        int $i0, $i1;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.classfile.editor.CodeAttributeComposer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.SwitchInstruction;

        $i1 = $r4.<proguard.classfile.instruction.SwitchInstruction: int defaultOffset>;

        $i1 = specialinvoke r0.<proguard.classfile.editor.CodeAttributeComposer: int remapBranchOffset(int,int)>($i0, $i1);

        $r4.<proguard.classfile.instruction.SwitchInstruction: int defaultOffset> = $i1;

        $r5 = $r4.<proguard.classfile.instruction.SwitchInstruction: int[] jumpOffsets>;

        specialinvoke r0.<proguard.classfile.editor.CodeAttributeComposer: void remapJumpOffsets(int,int[])>($i0, $r5);

        return;
    }

    public void visitAnyVerificationType(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.attribute.preverification.VerificationType)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.preverification.VerificationType $r4;
        proguard.classfile.editor.CodeAttributeComposer r0;

        r0 := @this: proguard.classfile.editor.CodeAttributeComposer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.attribute.preverification.VerificationType;

        return;
    }

    public void visitBranchInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.BranchInstruction)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0, $i1;
        proguard.classfile.Method $r2;
        proguard.classfile.instruction.BranchInstruction $r4;
        proguard.classfile.editor.CodeAttributeComposer r0;

        r0 := @this: proguard.classfile.editor.CodeAttributeComposer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.BranchInstruction;

        $i1 = $r4.<proguard.classfile.instruction.BranchInstruction: int branchOffset>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.CodeAttributeComposer: int remapBranchOffset(int,int)>($i0, $i1);

        $r4.<proguard.classfile.instruction.BranchInstruction: int branchOffset> = $i0;

        return;
    }

    public void visitCodeAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute)
    {
        byte[] $r6, $r7;
        proguard.classfile.editor.CodeAttributeComposer r0;
        proguard.classfile.Clazz $r1;
        java.lang.StringBuffer $r4, $r12;
        int $i0, $i1;
        java.lang.String $r5;
        proguard.classfile.editor.StackSizeUpdater $r10;
        proguard.classfile.editor.VariableSizeUpdater $r11;
        java.lang.IllegalArgumentException $r13;
        proguard.classfile.attribute.ExceptionInfo[] $r8, $r9;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.classfile.editor.CodeAttributeComposer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 = r0.<proguard.classfile.editor.CodeAttributeComposer: int level>;

        if $i0 == -1 goto label1;

        $r13 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Code fragment not ended [");

        $i0 = r0.<proguard.classfile.editor.CodeAttributeComposer: int level>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r13;

     label1:
        $i0 = r0.<proguard.classfile.editor.CodeAttributeComposer: int level>;

        $i0 = $i0 + 1;

        r0.<proguard.classfile.editor.CodeAttributeComposer: int level> = $i0;

        $i0 = $r3.<proguard.classfile.attribute.CodeAttribute: int u4codeLength>;

        $i1 = r0.<proguard.classfile.editor.CodeAttributeComposer: int codeLength>;

        if $i0 >= $i1 goto label2;

        $i0 = r0.<proguard.classfile.editor.CodeAttributeComposer: int codeLength>;

        $r6 = newarray (byte)[$i0];

        $r3.<proguard.classfile.attribute.CodeAttribute: byte[] code> = $r6;

     label2:
        $i0 = r0.<proguard.classfile.editor.CodeAttributeComposer: int codeLength>;

        $r3.<proguard.classfile.attribute.CodeAttribute: int u4codeLength> = $i0;

        $r6 = r0.<proguard.classfile.editor.CodeAttributeComposer: byte[] code>;

        $r7 = $r3.<proguard.classfile.attribute.CodeAttribute: byte[] code>;

        $i0 = r0.<proguard.classfile.editor.CodeAttributeComposer: int codeLength>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, $r7, 0, $i0);

        $r8 = $r3.<proguard.classfile.attribute.CodeAttribute: proguard.classfile.attribute.ExceptionInfo[] exceptionTable>;

        $i0 = lengthof $r8;

        $i1 = r0.<proguard.classfile.editor.CodeAttributeComposer: int exceptionTableLength>;

        if $i0 >= $i1 goto label3;

        $i0 = r0.<proguard.classfile.editor.CodeAttributeComposer: int exceptionTableLength>;

        $r8 = newarray (proguard.classfile.attribute.ExceptionInfo)[$i0];

        $r3.<proguard.classfile.attribute.CodeAttribute: proguard.classfile.attribute.ExceptionInfo[] exceptionTable> = $r8;

     label3:
        $i0 = r0.<proguard.classfile.editor.CodeAttributeComposer: int exceptionTableLength>;

        $r3.<proguard.classfile.attribute.CodeAttribute: int u2exceptionTableLength> = $i0;

        $r8 = r0.<proguard.classfile.editor.CodeAttributeComposer: proguard.classfile.attribute.ExceptionInfo[] exceptionTable>;

        $r9 = $r3.<proguard.classfile.attribute.CodeAttribute: proguard.classfile.attribute.ExceptionInfo[] exceptionTable>;

        $i0 = r0.<proguard.classfile.editor.CodeAttributeComposer: int exceptionTableLength>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, 0, $r9, 0, $i0);

        $r10 = r0.<proguard.classfile.editor.CodeAttributeComposer: proguard.classfile.editor.StackSizeUpdater stackSizeUpdater>;

        virtualinvoke $r10.<proguard.classfile.editor.StackSizeUpdater: void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute)>($r1, $r2, $r3);

        $r11 = r0.<proguard.classfile.editor.CodeAttributeComposer: proguard.classfile.editor.VariableSizeUpdater variableSizeUpdater>;

        virtualinvoke $r11.<proguard.classfile.editor.VariableSizeUpdater: void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute)>($r1, $r2, $r3);

        virtualinvoke $r3.<proguard.classfile.attribute.CodeAttribute: void attributesAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.visitor.AttributeVisitor)>($r1, $r2, r0);

        $i0 = r0.<proguard.classfile.editor.CodeAttributeComposer: int level>;

        $i0 = $i0 - 1;

        r0.<proguard.classfile.editor.CodeAttributeComposer: int level> = $i0;

        return;
    }

    public void visitExceptionInfo(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.ExceptionInfo)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.ExceptionInfo $r4;
        proguard.classfile.editor.CodeAttributeComposer r0;
        boolean $z0;

        r0 := @this: proguard.classfile.editor.CodeAttributeComposer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.ExceptionInfo;

        $i0 = $r4.<proguard.classfile.attribute.ExceptionInfo: int u2startPC>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.CodeAttributeComposer: int remapInstructionOffset(int)>($i0);

        $r4.<proguard.classfile.attribute.ExceptionInfo: int u2startPC> = $i0;

        $i0 = $r4.<proguard.classfile.attribute.ExceptionInfo: int u2endPC>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.CodeAttributeComposer: int remapInstructionOffset(int)>($i0);

        $r4.<proguard.classfile.attribute.ExceptionInfo: int u2endPC> = $i0;

        $i0 = $r4.<proguard.classfile.attribute.ExceptionInfo: int u2handlerPC>;

        $z0 = r0.<proguard.classfile.editor.CodeAttributeComposer: boolean allowExternalExceptionHandlers>;

        if $z0 == 0 goto label1;

        $z0 = specialinvoke r0.<proguard.classfile.editor.CodeAttributeComposer: boolean remappableInstructionOffset(int)>($i0);

        if $z0 == 0 goto label3;

     label1:
        $i0 = specialinvoke r0.<proguard.classfile.editor.CodeAttributeComposer: int remapInstructionOffset(int)>($i0);

     label2:
        $r4.<proguard.classfile.attribute.ExceptionInfo: int u2handlerPC> = $i0;

        return;

     label3:
        $i0 = neg $i0;

        goto label2;
    }

    public void visitFullFrame(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.attribute.preverification.FullFrame)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.attribute.preverification.FullFrame $r4;
        proguard.classfile.Method $r2;
        proguard.classfile.editor.CodeAttributeComposer r0;

        r0 := @this: proguard.classfile.editor.CodeAttributeComposer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.attribute.preverification.FullFrame;

        virtualinvoke r0.<proguard.classfile.editor.CodeAttributeComposer: void visitAnyStackMapFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.StackMapFrame)>($r1, $r2, $r3, $i0, $r4);

        virtualinvoke $r4.<proguard.classfile.attribute.preverification.FullFrame: void variablesAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor)>($r1, $r2, $r3, $i0, r0);

        virtualinvoke $r4.<proguard.classfile.attribute.preverification.FullFrame: void stackAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor)>($r1, $r2, $r3, $i0, r0);

        return;
    }

    public void visitLineNumberInfo(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LineNumberInfo)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.attribute.LineNumberInfo $r4;
        int $i0;
        proguard.classfile.Method $r2;
        proguard.classfile.editor.CodeAttributeComposer r0;

        r0 := @this: proguard.classfile.editor.CodeAttributeComposer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.LineNumberInfo;

        $i0 = $r4.<proguard.classfile.attribute.LineNumberInfo: int u2startPC>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.CodeAttributeComposer: int remapInstructionOffset(int)>($i0);

        $r4.<proguard.classfile.attribute.LineNumberInfo: int u2startPC> = $i0;

        return;
    }

    public void visitLineNumberTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LineNumberTableAttribute)
    {
        proguard.classfile.attribute.LineNumberTableAttribute $r4;
        proguard.classfile.editor.CodeAttributeComposer r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0, $i1;
        proguard.classfile.attribute.LineNumberInfo[] $r5;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.classfile.editor.CodeAttributeComposer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.LineNumberTableAttribute;

        virtualinvoke $r4.<proguard.classfile.attribute.LineNumberTableAttribute: void lineNumbersAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.visitor.LineNumberInfoVisitor)>($r1, $r2, $r3, r0);

        $r5 = $r4.<proguard.classfile.attribute.LineNumberTableAttribute: proguard.classfile.attribute.LineNumberInfo[] lineNumberTable>;

        $i0 = $r4.<proguard.classfile.attribute.LineNumberTableAttribute: int u2lineNumberTableLength>;

        $i1 = $r3.<proguard.classfile.attribute.CodeAttribute: int u4codeLength>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.CodeAttributeComposer: int removeEmptyLineNumbers(proguard.classfile.attribute.LineNumberInfo[],int,int)>($r5, $i0, $i1);

        $r4.<proguard.classfile.attribute.LineNumberTableAttribute: int u2lineNumberTableLength> = $i0;

        return;
    }

    public void visitLocalVariableInfo(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LocalVariableInfo)
    {
        proguard.classfile.attribute.LocalVariableInfo $r4;
        proguard.classfile.editor.CodeAttributeComposer r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0, $i1, $i2;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.classfile.editor.CodeAttributeComposer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.LocalVariableInfo;

        $i1 = $r4.<proguard.classfile.attribute.LocalVariableInfo: int u2startPC>;

        $i1 = specialinvoke r0.<proguard.classfile.editor.CodeAttributeComposer: int remapInstructionOffset(int)>($i1);

        $i2 = $r4.<proguard.classfile.attribute.LocalVariableInfo: int u2startPC>;

        $i0 = $r4.<proguard.classfile.attribute.LocalVariableInfo: int u2length>;

        $i0 = $i2 + $i0;

        $i0 = specialinvoke r0.<proguard.classfile.editor.CodeAttributeComposer: int remapInstructionOffset(int)>($i0);

        $r4.<proguard.classfile.attribute.LocalVariableInfo: int u2startPC> = $i1;

        $i1 = $i0 - $i1;

        $r4.<proguard.classfile.attribute.LocalVariableInfo: int u2length> = $i1;

        return;
    }

    public void visitLocalVariableTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LocalVariableTableAttribute)
    {
        proguard.classfile.editor.CodeAttributeComposer r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0, $i1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.LocalVariableTableAttribute $r4;
        proguard.classfile.attribute.LocalVariableInfo[] $r5;

        r0 := @this: proguard.classfile.editor.CodeAttributeComposer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.LocalVariableTableAttribute;

        virtualinvoke $r4.<proguard.classfile.attribute.LocalVariableTableAttribute: void localVariablesAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.visitor.LocalVariableInfoVisitor)>($r1, $r2, $r3, r0);

        $r5 = $r4.<proguard.classfile.attribute.LocalVariableTableAttribute: proguard.classfile.attribute.LocalVariableInfo[] localVariableTable>;

        $i0 = $r4.<proguard.classfile.attribute.LocalVariableTableAttribute: int u2localVariableTableLength>;

        $i1 = $r3.<proguard.classfile.attribute.CodeAttribute: int u2maxLocals>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.CodeAttributeComposer: int removeEmptyLocalVariables(proguard.classfile.attribute.LocalVariableInfo[],int,int)>($r5, $i0, $i1);

        $r4.<proguard.classfile.attribute.LocalVariableTableAttribute: int u2localVariableTableLength> = $i0;

        return;
    }

    public void visitLocalVariableTypeInfo(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LocalVariableTypeInfo)
    {
        proguard.classfile.editor.CodeAttributeComposer r0;
        proguard.classfile.attribute.LocalVariableTypeInfo $r4;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0, $i1, $i2;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.classfile.editor.CodeAttributeComposer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.LocalVariableTypeInfo;

        $i1 = $r4.<proguard.classfile.attribute.LocalVariableTypeInfo: int u2startPC>;

        $i1 = specialinvoke r0.<proguard.classfile.editor.CodeAttributeComposer: int remapInstructionOffset(int)>($i1);

        $i2 = $r4.<proguard.classfile.attribute.LocalVariableTypeInfo: int u2startPC>;

        $i0 = $r4.<proguard.classfile.attribute.LocalVariableTypeInfo: int u2length>;

        $i0 = $i2 + $i0;

        $i0 = specialinvoke r0.<proguard.classfile.editor.CodeAttributeComposer: int remapInstructionOffset(int)>($i0);

        $r4.<proguard.classfile.attribute.LocalVariableTypeInfo: int u2startPC> = $i1;

        $i1 = $i0 - $i1;

        $r4.<proguard.classfile.attribute.LocalVariableTypeInfo: int u2length> = $i1;

        return;
    }

    public void visitLocalVariableTypeTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LocalVariableTypeTableAttribute)
    {
        proguard.classfile.editor.CodeAttributeComposer r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0, $i1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.LocalVariableTypeTableAttribute $r4;
        proguard.classfile.attribute.LocalVariableTypeInfo[] $r5;

        r0 := @this: proguard.classfile.editor.CodeAttributeComposer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.LocalVariableTypeTableAttribute;

        virtualinvoke $r4.<proguard.classfile.attribute.LocalVariableTypeTableAttribute: void localVariablesAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.visitor.LocalVariableTypeInfoVisitor)>($r1, $r2, $r3, r0);

        $r5 = $r4.<proguard.classfile.attribute.LocalVariableTypeTableAttribute: proguard.classfile.attribute.LocalVariableTypeInfo[] localVariableTypeTable>;

        $i0 = $r4.<proguard.classfile.attribute.LocalVariableTypeTableAttribute: int u2localVariableTypeTableLength>;

        $i1 = $r3.<proguard.classfile.attribute.CodeAttribute: int u2maxLocals>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.CodeAttributeComposer: int removeEmptyLocalVariableTypes(proguard.classfile.attribute.LocalVariableTypeInfo[],int,int)>($r5, $i0, $i1);

        $r4.<proguard.classfile.attribute.LocalVariableTypeTableAttribute: int u2localVariableTypeTableLength> = $i0;

        return;
    }

    public void visitMoreZeroFrame(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.attribute.preverification.MoreZeroFrame)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.Method $r2;
        proguard.classfile.editor.CodeAttributeComposer r0;
        proguard.classfile.attribute.preverification.MoreZeroFrame $r4;

        r0 := @this: proguard.classfile.editor.CodeAttributeComposer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.attribute.preverification.MoreZeroFrame;

        virtualinvoke r0.<proguard.classfile.editor.CodeAttributeComposer: void visitAnyStackMapFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.StackMapFrame)>($r1, $r2, $r3, $i0, $r4);

        virtualinvoke $r4.<proguard.classfile.attribute.preverification.MoreZeroFrame: void additionalVariablesAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor)>($r1, $r2, $r3, $i0, r0);

        return;
    }

    public void visitSameOneFrame(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.attribute.preverification.SameOneFrame)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.attribute.preverification.SameOneFrame $r4;
        int $i0;
        proguard.classfile.Method $r2;
        proguard.classfile.editor.CodeAttributeComposer r0;

        r0 := @this: proguard.classfile.editor.CodeAttributeComposer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.attribute.preverification.SameOneFrame;

        virtualinvoke r0.<proguard.classfile.editor.CodeAttributeComposer: void visitAnyStackMapFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.StackMapFrame)>($r1, $r2, $r3, $i0, $r4);

        virtualinvoke $r4.<proguard.classfile.attribute.preverification.SameOneFrame: void stackItemAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor)>($r1, $r2, $r3, $i0, r0);

        return;
    }

    public void visitStackMapAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.preverification.StackMapAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.attribute.preverification.StackMapAttribute $r4;
        proguard.classfile.Method $r2;
        proguard.classfile.editor.CodeAttributeComposer r0;

        r0 := @this: proguard.classfile.editor.CodeAttributeComposer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.preverification.StackMapAttribute;

        r0.<proguard.classfile.editor.CodeAttributeComposer: int expectedStackMapFrameOffset> = -1;

        virtualinvoke $r4.<proguard.classfile.attribute.preverification.StackMapAttribute: void stackMapFramesAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.preverification.visitor.StackMapFrameVisitor)>($r1, $r2, $r3, r0);

        return;
    }

    public void visitStackMapTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.preverification.StackMapTableAttribute)
    {
        proguard.classfile.attribute.preverification.StackMapTableAttribute $r4;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.Method $r2;
        proguard.classfile.editor.CodeAttributeComposer r0;

        r0 := @this: proguard.classfile.editor.CodeAttributeComposer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.preverification.StackMapTableAttribute;

        r0.<proguard.classfile.editor.CodeAttributeComposer: int expectedStackMapFrameOffset> = 0;

        virtualinvoke $r4.<proguard.classfile.attribute.preverification.StackMapTableAttribute: void stackMapFramesAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.preverification.visitor.StackMapFrameVisitor)>($r1, $r2, $r3, r0);

        return;
    }

    public void visitUninitializedType(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.attribute.preverification.UninitializedType)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.preverification.UninitializedType $r4;
        proguard.classfile.editor.CodeAttributeComposer r0;

        r0 := @this: proguard.classfile.editor.CodeAttributeComposer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.attribute.preverification.UninitializedType;

        $i0 = $r4.<proguard.classfile.attribute.preverification.UninitializedType: int u2newInstructionOffset>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.CodeAttributeComposer: int remapInstructionOffset(int)>($i0);

        $r4.<proguard.classfile.attribute.preverification.UninitializedType: int u2newInstructionOffset> = $i0;

        return;
    }

    public static void <clinit>()
    {
        <proguard.classfile.editor.CodeAttributeComposer: int MAXIMUM_LEVELS> = 32;

        <proguard.classfile.editor.CodeAttributeComposer: int INVALID> = -1;

        <proguard.classfile.editor.CodeAttributeComposer: boolean DEBUG> = 0;

        return;
    }
}
