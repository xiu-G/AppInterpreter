public abstract class org.jsoup.nodes.Node extends java.lang.Object implements java.lang.Cloneable
{
    org.jsoup.nodes.Attributes attributes;
    java.lang.String baseUri;
    java.util.List childNodes;
    org.jsoup.nodes.Node parentNode;
    int siblingIndex;

    protected void <init>()
    {
        org.jsoup.nodes.Node r0;
        java.util.List $r1;

        r0 := @this: org.jsoup.nodes.Node;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r0.<org.jsoup.nodes.Node: java.util.List childNodes> = $r1;

        r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Attributes attributes> = null;

        return;
    }

    protected void <init>(java.lang.String)
    {
        org.jsoup.nodes.Node r0;
        org.jsoup.nodes.Attributes $r2;
        java.lang.String $r1;

        r0 := @this: org.jsoup.nodes.Node;

        $r1 := @parameter0: java.lang.String;

        $r2 = new org.jsoup.nodes.Attributes;

        specialinvoke $r2.<org.jsoup.nodes.Attributes: void <init>()>();

        specialinvoke r0.<org.jsoup.nodes.Node: void <init>(java.lang.String,org.jsoup.nodes.Attributes)>($r1, $r2);

        return;
    }

    protected void <init>(java.lang.String, org.jsoup.nodes.Attributes)
    {
        org.jsoup.nodes.Node r0;
        org.jsoup.nodes.Attributes $r2;
        java.lang.String $r1;
        java.util.ArrayList $r3;

        r0 := @this: org.jsoup.nodes.Node;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.jsoup.nodes.Attributes;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r1);

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r2);

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>(4);

        r0.<org.jsoup.nodes.Node: java.util.List childNodes> = $r3;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>();

        r0.<org.jsoup.nodes.Node: java.lang.String baseUri> = $r1;

        r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Attributes attributes> = $r2;

        return;
    }

    private void addSiblingHtml(int, java.lang.String)
    {
        org.jsoup.nodes.Node[] $r6;
        java.lang.Object[] $r7;
        org.jsoup.nodes.Node r0, $r2;
        java.util.List $r5;
        org.jsoup.nodes.Element $r3;
        int $i0, $i1;
        java.lang.String $r1, $r4;
        boolean $z0;

        r0 := @this: org.jsoup.nodes.Node;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r1);

        $r2 = r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r2);

        $r2 = virtualinvoke r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parent()>();

        $z0 = $r2 instanceof org.jsoup.nodes.Element;

        if $z0 == 0 goto label2;

        $r2 = virtualinvoke r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parent()>();

        $r3 = (org.jsoup.nodes.Element) $r2;

     label1:
        $r4 = virtualinvoke r0.<org.jsoup.nodes.Node: java.lang.String baseUri()>();

        $r5 = staticinvoke <org.jsoup.parser.Parser: java.util.List parseFragment(java.lang.String,org.jsoup.nodes.Element,java.lang.String)>($r1, $r3, $r4);

        r0 = r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        $i1 = interfaceinvoke $r5.<java.util.List: int size()>();

        $r6 = newarray (org.jsoup.nodes.Node)[$i1];

        $r7 = interfaceinvoke $r5.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        $r6 = (org.jsoup.nodes.Node[]) $r7;

        virtualinvoke r0.<org.jsoup.nodes.Node: void addChildren(int,org.jsoup.nodes.Node[])>($i0, $r6);

        return;

     label2:
        $r3 = null;

        goto label1;
    }

    private org.jsoup.nodes.Element getDeepChild(org.jsoup.nodes.Element)
    {
        org.jsoup.nodes.Node r0;
        org.jsoup.nodes.Element $r1;
        int $i0;
        java.lang.Object $r3;
        org.jsoup.select.Elements $r2;

        r0 := @this: org.jsoup.nodes.Node;

        $r1 := @parameter0: org.jsoup.nodes.Element;

        $r2 = virtualinvoke $r1.<org.jsoup.nodes.Element: org.jsoup.select.Elements children()>();

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 <= 0 goto label1;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(0);

        $r1 = (org.jsoup.nodes.Element) $r3;

        $r1 = specialinvoke r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Element getDeepChild(org.jsoup.nodes.Element)>($r1);

     label1:
        return $r1;
    }

    private org.jsoup.nodes.Document$OutputSettings getOutputSettings()
    {
        org.jsoup.nodes.Node r0;
        org.jsoup.nodes.Document$OutputSettings $r2;
        org.jsoup.nodes.Document $r1;

        r0 := @this: org.jsoup.nodes.Node;

        $r1 = virtualinvoke r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Document ownerDocument()>();

        if $r1 == null goto label1;

        $r1 = virtualinvoke r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Document ownerDocument()>();

        $r2 = virtualinvoke $r1.<org.jsoup.nodes.Document: org.jsoup.nodes.Document$OutputSettings outputSettings()>();

        return $r2;

     label1:
        $r1 = new org.jsoup.nodes.Document;

        specialinvoke $r1.<org.jsoup.nodes.Document: void <init>(java.lang.String)>("");

        $r2 = virtualinvoke $r1.<org.jsoup.nodes.Document: org.jsoup.nodes.Document$OutputSettings outputSettings()>();

        return $r2;
    }

    private void reindexChildren()
    {
        org.jsoup.nodes.Node r0, $r3;
        java.util.List $r1;
        int i0, $i1;
        java.lang.Object $r2;

        r0 := @this: org.jsoup.nodes.Node;

        i0 = 0;

     label1:
        $r1 = r0.<org.jsoup.nodes.Node: java.util.List childNodes>;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i0 >= $i1 goto label2;

        $r1 = r0.<org.jsoup.nodes.Node: java.util.List childNodes>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (org.jsoup.nodes.Node) $r2;

        virtualinvoke $r3.<org.jsoup.nodes.Node: void setSiblingIndex(int)>(i0);

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }

    private void reparentChild(org.jsoup.nodes.Node)
    {
        org.jsoup.nodes.Node r0, $r1, $r2;

        r0 := @this: org.jsoup.nodes.Node;

        $r1 := @parameter0: org.jsoup.nodes.Node;

        $r2 = $r1.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        if $r2 == null goto label1;

        $r2 = $r1.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        virtualinvoke $r2.<org.jsoup.nodes.Node: void removeChild(org.jsoup.nodes.Node)>($r1);

     label1:
        virtualinvoke $r1.<org.jsoup.nodes.Node: void setParentNode(org.jsoup.nodes.Node)>(r0);

        return;
    }

    public java.lang.String absUrl(java.lang.String)
    {
        java.lang.Throwable r7, r8;
        java.net.URL r2, r6;
        org.jsoup.nodes.Node r0;
        java.lang.StringBuilder $r5;
        java.lang.String $r1, $r3, r4;
        boolean $z0;

        r0 := @this: org.jsoup.nodes.Node;

        $r1 := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notEmpty(java.lang.String)>($r1);

        $r3 = virtualinvoke r0.<org.jsoup.nodes.Node: java.lang.String attr(java.lang.String)>($r1);

        r4 = $r3;

        $z0 = virtualinvoke r0.<org.jsoup.nodes.Node: boolean hasAttr(java.lang.String)>($r1);

        if $z0 != 0 goto label01;

        return "";

     label01:
        r2 = new java.net.URL;

        $r1 = r0.<org.jsoup.nodes.Node: java.lang.String baseUri>;

     label02:
        specialinvoke r2.<java.net.URL: void <init>(java.lang.String)>($r1);

     label03:
        $z0 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("?");

     label04:
        if $z0 == 0 goto label07;

        $r5 = new java.lang.StringBuilder;

     label05:
        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke r2.<java.net.URL: java.lang.String getPath()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

     label06:
        r4 = $r1;

     label07:
        r6 = new java.net.URL;

     label08:
        specialinvoke r6.<java.net.URL: void <init>(java.net.URL,java.lang.String)>(r2, r4);

        $r1 = virtualinvoke r6.<java.net.URL: java.lang.String toExternalForm()>();

     label09:
        return $r1;

     label10:
        r7 := @caughtexception;

        r2 = new java.net.URL;

     label11:
        specialinvoke r2.<java.net.URL: void <init>(java.lang.String)>($r3);

        $r1 = virtualinvoke r2.<java.net.URL: java.lang.String toExternalForm()>();

     label12:
        return $r1;

     label13:
        r8 := @caughtexception;

        return "";

        catch java.net.MalformedURLException from label02 to label03 with label10;
        catch java.net.MalformedURLException from label03 to label04 with label13;
        catch java.net.MalformedURLException from label05 to label06 with label13;
        catch java.net.MalformedURLException from label08 to label09 with label13;
        catch java.net.MalformedURLException from label11 to label12 with label13;
    }

    protected transient void addChildren(int, org.jsoup.nodes.Node[])
    {
        org.jsoup.nodes.Node r0, r2;
        org.jsoup.nodes.Node[] $r1;
        java.util.List $r3;
        int $i0, $i1;

        r0 := @this: org.jsoup.nodes.Node;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.jsoup.nodes.Node[];

        staticinvoke <org.jsoup.helper.Validate: void noNullElements(java.lang.Object[])>($r1);

        $i1 = lengthof $r1;

        $i1 = $i1 + -1;

     label1:
        if $i1 < 0 goto label2;

        r2 = $r1[$i1];

        specialinvoke r0.<org.jsoup.nodes.Node: void reparentChild(org.jsoup.nodes.Node)>(r2);

        $r3 = r0.<org.jsoup.nodes.Node: java.util.List childNodes>;

        interfaceinvoke $r3.<java.util.List: void add(int,java.lang.Object)>($i0, r2);

        $i1 = $i1 + -1;

        goto label1;

     label2:
        specialinvoke r0.<org.jsoup.nodes.Node: void reindexChildren()>();

        return;
    }

    protected transient void addChildren(org.jsoup.nodes.Node[])
    {
        org.jsoup.nodes.Node r0, r2;
        org.jsoup.nodes.Node[] $r1;
        java.util.List $r3;
        int i0, $i1, i2;

        r0 := @this: org.jsoup.nodes.Node;

        $r1 := @parameter0: org.jsoup.nodes.Node[];

        i0 = lengthof $r1;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        r2 = $r1[i2];

        specialinvoke r0.<org.jsoup.nodes.Node: void reparentChild(org.jsoup.nodes.Node)>(r2);

        $r3 = r0.<org.jsoup.nodes.Node: java.util.List childNodes>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2);

        $r3 = r0.<org.jsoup.nodes.Node: java.util.List childNodes>;

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        $i1 = $i1 + -1;

        virtualinvoke r2.<org.jsoup.nodes.Node: void setSiblingIndex(int)>($i1);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public org.jsoup.nodes.Node after(java.lang.String)
    {
        int $i0;
        org.jsoup.nodes.Node r0;
        java.lang.String $r1;

        r0 := @this: org.jsoup.nodes.Node;

        $r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<org.jsoup.nodes.Node: int siblingIndex()>();

        $i0 = $i0 + 1;

        specialinvoke r0.<org.jsoup.nodes.Node: void addSiblingHtml(int,java.lang.String)>($i0, $r1);

        return r0;
    }

    public org.jsoup.nodes.Node after(org.jsoup.nodes.Node)
    {
        org.jsoup.nodes.Node r0, $r1, $r2;
        org.jsoup.nodes.Node[] $r3;
        int $i0;

        r0 := @this: org.jsoup.nodes.Node;

        $r1 := @parameter0: org.jsoup.nodes.Node;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r1);

        $r2 = r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r2);

        $r2 = r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        $i0 = virtualinvoke r0.<org.jsoup.nodes.Node: int siblingIndex()>();

        $i0 = $i0 + 1;

        $r3 = newarray (org.jsoup.nodes.Node)[1];

        $r3[0] = $r1;

        virtualinvoke $r2.<org.jsoup.nodes.Node: void addChildren(int,org.jsoup.nodes.Node[])>($i0, $r3);

        return r0;
    }

    public java.lang.String attr(java.lang.String)
    {
        org.jsoup.nodes.Node r0;
        org.jsoup.nodes.Attributes $r2;
        int $i0;
        java.lang.String $r1, $r3;
        boolean $z0;

        r0 := @this: org.jsoup.nodes.Node;

        $r1 := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r1);

        $r2 = r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Attributes attributes>;

        $z0 = virtualinvoke $r2.<org.jsoup.nodes.Attributes: boolean hasKey(java.lang.String)>($r1);

        if $z0 == 0 goto label1;

        $r2 = r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Attributes attributes>;

        $r1 = virtualinvoke $r2.<org.jsoup.nodes.Attributes: java.lang.String get(java.lang.String)>($r1);

        return $r1;

     label1:
        $r3 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("abs:");

        if $z0 == 0 goto label2;

        $r3 = "abs:";

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i0);

        $r1 = virtualinvoke r0.<org.jsoup.nodes.Node: java.lang.String absUrl(java.lang.String)>($r1);

        return $r1;

     label2:
        return "";
    }

    public org.jsoup.nodes.Node attr(java.lang.String, java.lang.String)
    {
        org.jsoup.nodes.Node r0;
        org.jsoup.nodes.Attributes $r3;
        java.lang.String $r1, $r2;

        r0 := @this: org.jsoup.nodes.Node;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Attributes attributes>;

        virtualinvoke $r3.<org.jsoup.nodes.Attributes: void put(java.lang.String,java.lang.String)>($r1, $r2);

        return r0;
    }

    public org.jsoup.nodes.Attributes attributes()
    {
        org.jsoup.nodes.Node r0;
        org.jsoup.nodes.Attributes r1;

        r0 := @this: org.jsoup.nodes.Node;

        r1 = r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Attributes attributes>;

        return r1;
    }

    public java.lang.String baseUri()
    {
        org.jsoup.nodes.Node r0;
        java.lang.String r1;

        r0 := @this: org.jsoup.nodes.Node;

        r1 = r0.<org.jsoup.nodes.Node: java.lang.String baseUri>;

        return r1;
    }

    public org.jsoup.nodes.Node before(java.lang.String)
    {
        int $i0;
        org.jsoup.nodes.Node r0;
        java.lang.String $r1;

        r0 := @this: org.jsoup.nodes.Node;

        $r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<org.jsoup.nodes.Node: int siblingIndex()>();

        specialinvoke r0.<org.jsoup.nodes.Node: void addSiblingHtml(int,java.lang.String)>($i0, $r1);

        return r0;
    }

    public org.jsoup.nodes.Node before(org.jsoup.nodes.Node)
    {
        org.jsoup.nodes.Node r0, $r1, $r2;
        org.jsoup.nodes.Node[] $r3;
        int $i0;

        r0 := @this: org.jsoup.nodes.Node;

        $r1 := @parameter0: org.jsoup.nodes.Node;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r1);

        $r2 = r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r2);

        $r2 = r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        $i0 = virtualinvoke r0.<org.jsoup.nodes.Node: int siblingIndex()>();

        $r3 = newarray (org.jsoup.nodes.Node)[1];

        $r3[0] = $r1;

        virtualinvoke $r2.<org.jsoup.nodes.Node: void addChildren(int,org.jsoup.nodes.Node[])>($i0, $r3);

        return r0;
    }

    public org.jsoup.nodes.Node childNode(int)
    {
        org.jsoup.nodes.Node r0;
        java.util.List $r2;
        int $i0;
        java.lang.Object $r1;

        r0 := @this: org.jsoup.nodes.Node;

        $i0 := @parameter0: int;

        $r2 = r0.<org.jsoup.nodes.Node: java.util.List childNodes>;

        $r1 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(0);

        r0 = (org.jsoup.nodes.Node) $r1;

        return r0;
    }

    public final int childNodeSize()
    {
        int $i0;
        org.jsoup.nodes.Node r0;
        java.util.List $r1;

        r0 := @this: org.jsoup.nodes.Node;

        $r1 = r0.<org.jsoup.nodes.Node: java.util.List childNodes>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public java.util.List childNodes()
    {
        org.jsoup.nodes.Node r0;
        java.util.List $r1;

        r0 := @this: org.jsoup.nodes.Node;

        $r1 = r0.<org.jsoup.nodes.Node: java.util.List childNodes>;

        $r1 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r1;
    }

    protected org.jsoup.nodes.Node[] childNodesAsArray()
    {
        org.jsoup.nodes.Node r0;
        java.util.List $r1;
        org.jsoup.nodes.Node[] $r2;
        java.lang.Object[] $r3;
        int $i0;

        r0 := @this: org.jsoup.nodes.Node;

        $r1 = r0.<org.jsoup.nodes.Node: java.util.List childNodes>;

        $i0 = virtualinvoke r0.<org.jsoup.nodes.Node: int childNodeSize()>();

        $r2 = newarray (org.jsoup.nodes.Node)[$i0];

        $r3 = interfaceinvoke $r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r2);

        $r2 = (org.jsoup.nodes.Node[]) $r3;

        return $r2;
    }

    public java.util.List childNodesCopy()
    {
        org.jsoup.nodes.Node r0;
        java.util.List $r2;
        java.util.Iterator $r3;
        int $i0;
        java.lang.Object $r4;
        java.util.ArrayList r1;
        boolean $z0;

        r0 := @this: org.jsoup.nodes.Node;

        r1 = new java.util.ArrayList;

        $r2 = r0.<org.jsoup.nodes.Node: java.util.List childNodes>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        specialinvoke r1.<java.util.ArrayList: void <init>(int)>($i0);

        $r2 = r0.<org.jsoup.nodes.Node: java.util.List childNodes>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r0 = (org.jsoup.nodes.Node) $r4;

        r0 = virtualinvoke r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node clone()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r0);

        goto label1;

     label2:
        return r1;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.jsoup.nodes.Node r0;

        r0 := @this: org.jsoup.nodes.Node;

        r0 = virtualinvoke r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node clone()>();

        return r0;
    }

    public org.jsoup.nodes.Node clone()
    {
        org.jsoup.nodes.Node r0;

        r0 := @this: org.jsoup.nodes.Node;

        r0 = virtualinvoke r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node doClone(org.jsoup.nodes.Node)>(null);

        return r0;
    }

    protected org.jsoup.nodes.Node doClone(org.jsoup.nodes.Node)
    {
        java.lang.Throwable r2;
        org.jsoup.nodes.Attributes $r5;
        java.util.Iterator $r9;
        java.lang.RuntimeException $r10;
        java.util.ArrayList $r7;
        org.jsoup.nodes.Node r0, $r1, r4;
        java.util.List $r8;
        int $i0;
        java.lang.Object $r3;
        java.lang.String $r6;
        boolean $z0;

        r0 := @this: org.jsoup.nodes.Node;

        $r1 := @parameter0: org.jsoup.nodes.Node;

     label1:
        $r3 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

     label2:
        r4 = (org.jsoup.nodes.Node) $r3;

        r4.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode> = $r1;

        if $r1 != null goto label7;

        $i0 = 0;

     label3:
        r4.<org.jsoup.nodes.Node: int siblingIndex> = $i0;

        $r5 = r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Attributes attributes>;

        if $r5 == null goto label8;

        $r5 = r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Attributes attributes>;

        $r5 = virtualinvoke $r5.<org.jsoup.nodes.Attributes: org.jsoup.nodes.Attributes clone()>();

     label4:
        r4.<org.jsoup.nodes.Node: org.jsoup.nodes.Attributes attributes> = $r5;

        $r6 = r0.<org.jsoup.nodes.Node: java.lang.String baseUri>;

        r4.<org.jsoup.nodes.Node: java.lang.String baseUri> = $r6;

        $r7 = new java.util.ArrayList;

        $r8 = r0.<org.jsoup.nodes.Node: java.util.List childNodes>;

        $i0 = interfaceinvoke $r8.<java.util.List: int size()>();

        specialinvoke $r7.<java.util.ArrayList: void <init>(int)>($i0);

        r4.<org.jsoup.nodes.Node: java.util.List childNodes> = $r7;

        $r8 = r0.<org.jsoup.nodes.Node: java.util.List childNodes>;

        $r9 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label9;

        $r3 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r0 = (org.jsoup.nodes.Node) $r3;

        $r8 = r4.<org.jsoup.nodes.Node: java.util.List childNodes>;

        r0 = virtualinvoke r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node doClone(org.jsoup.nodes.Node)>(r4);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>(r0);

        goto label5;

     label6:
        r2 := @caughtexception;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r10;

     label7:
        $i0 = r0.<org.jsoup.nodes.Node: int siblingIndex>;

        goto label3;

     label8:
        $r5 = null;

        goto label4;

     label9:
        return r4;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label6;
    }

    public boolean equals(java.lang.Object)
    {
        org.jsoup.nodes.Node r0;
        java.lang.Object $r1;

        r0 := @this: org.jsoup.nodes.Node;

        $r1 := @parameter0: java.lang.Object;

        if r0 != $r1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean hasAttr(java.lang.String)
    {
        org.jsoup.nodes.Node r0;
        org.jsoup.nodes.Attributes $r3;
        int $i0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: org.jsoup.nodes.Node;

        $r1 := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r1);

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("abs:");

        if $z0 == 0 goto label1;

        $r2 = "abs:";

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i0);

        $r3 = r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Attributes attributes>;

        $z0 = virtualinvoke $r3.<org.jsoup.nodes.Attributes: boolean hasKey(java.lang.String)>($r2);

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<org.jsoup.nodes.Node: java.lang.String absUrl(java.lang.String)>($r2);

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 != 0 goto label1;

        return 1;

     label1:
        $r3 = r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Attributes attributes>;

        $z0 = virtualinvoke $r3.<org.jsoup.nodes.Attributes: boolean hasKey(java.lang.String)>($r1);

        return $z0;
    }

    public int hashCode()
    {
        org.jsoup.nodes.Node r0, $r2;
        org.jsoup.nodes.Attributes $r1;
        int $i0, $i1;

        r0 := @this: org.jsoup.nodes.Node;

        $i0 = 0;

        $r2 = r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        if $r2 == null goto label3;

        $r2 = r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        $i1 = virtualinvoke $r2.<org.jsoup.nodes.Node: int hashCode()>();

     label1:
        $i1 = $i1 * 31;

        $r1 = r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Attributes attributes>;

        if $r1 == null goto label2;

        $r1 = r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Attributes attributes>;

        $i0 = virtualinvoke $r1.<org.jsoup.nodes.Attributes: int hashCode()>();

     label2:
        $i0 = $i1 + $i0;

        return $i0;

     label3:
        $i1 = 0;

        goto label1;
    }

    protected void indent(java.lang.StringBuilder, int, org.jsoup.nodes.Document$OutputSettings)
    {
        org.jsoup.nodes.Node r0;
        org.jsoup.nodes.Document$OutputSettings $r2;
        int $i0, $i1;
        java.lang.StringBuilder $r1;
        java.lang.String $r3;

        r0 := @this: org.jsoup.nodes.Node;

        $r1 := @parameter0: java.lang.StringBuilder;

        $i0 := @parameter1: int;

        $r2 := @parameter2: org.jsoup.nodes.Document$OutputSettings;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $i1 = virtualinvoke $r2.<org.jsoup.nodes.Document$OutputSettings: int indentAmount()>();

        $i0 = $i1 * $i0;

        $r3 = staticinvoke <org.jsoup.helper.StringUtil: java.lang.String padding(int)>($i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        return;
    }

    public org.jsoup.nodes.Node nextSibling()
    {
        org.jsoup.nodes.Node r0, $r2;
        java.util.List r1;
        int $i0, $i1;
        java.lang.Object $r4;
        java.lang.Integer $r3;

        r0 := @this: org.jsoup.nodes.Node;

        $r2 = r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        if $r2 != null goto label1;

        return null;

     label1:
        $r2 = r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        r1 = $r2.<org.jsoup.nodes.Node: java.util.List childNodes>;

        $i0 = virtualinvoke r0.<org.jsoup.nodes.Node: int siblingIndex()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r3);

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $i1 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        $i1 = $i1 + 1;

        if $i0 <= $i1 goto label2;

        $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        $i0 = $i0 + 1;

        $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i0);

        r0 = (org.jsoup.nodes.Node) $r4;

        return r0;

     label2:
        return null;
    }

    public abstract java.lang.String nodeName();

    public java.lang.String outerHtml()
    {
        org.jsoup.nodes.Node r0;
        java.lang.StringBuilder r1;
        java.lang.String $r2;

        r0 := @this: org.jsoup.nodes.Node;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>(int)>(128);

        virtualinvoke r0.<org.jsoup.nodes.Node: void outerHtml(java.lang.StringBuilder)>(r1);

        $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    protected void outerHtml(java.lang.StringBuilder)
    {
        org.jsoup.nodes.Node r0;
        org.jsoup.nodes.Node$OuterHtmlVisitor $r3;
        org.jsoup.nodes.Document$OutputSettings $r4;
        java.lang.StringBuilder $r1;
        org.jsoup.select.NodeTraversor $r2;

        r0 := @this: org.jsoup.nodes.Node;

        $r1 := @parameter0: java.lang.StringBuilder;

        $r2 = new org.jsoup.select.NodeTraversor;

        $r3 = new org.jsoup.nodes.Node$OuterHtmlVisitor;

        $r4 = specialinvoke r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Document$OutputSettings getOutputSettings()>();

        specialinvoke $r3.<org.jsoup.nodes.Node$OuterHtmlVisitor: void <init>(java.lang.StringBuilder,org.jsoup.nodes.Document$OutputSettings)>($r1, $r4);

        specialinvoke $r2.<org.jsoup.select.NodeTraversor: void <init>(org.jsoup.select.NodeVisitor)>($r3);

        virtualinvoke $r2.<org.jsoup.select.NodeTraversor: void traverse(org.jsoup.nodes.Node)>(r0);

        return;
    }

    abstract void outerHtmlHead(java.lang.StringBuilder, int, org.jsoup.nodes.Document$OutputSettings);

    abstract void outerHtmlTail(java.lang.StringBuilder, int, org.jsoup.nodes.Document$OutputSettings);

    public org.jsoup.nodes.Document ownerDocument()
    {
        org.jsoup.nodes.Node r1, $r2;
        org.jsoup.nodes.Document $r0;
        boolean $z0;

        r1 := @this: org.jsoup.nodes.Node;

        $z0 = r1 instanceof org.jsoup.nodes.Document;

        if $z0 == 0 goto label1;

        $r0 = (org.jsoup.nodes.Document) r1;

        return $r0;

     label1:
        $r2 = r1.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        if $r2 != null goto label2;

        return null;

     label2:
        r1 = r1.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        $r0 = virtualinvoke r1.<org.jsoup.nodes.Node: org.jsoup.nodes.Document ownerDocument()>();

        return $r0;
    }

    public org.jsoup.nodes.Node parent()
    {
        org.jsoup.nodes.Node r0;

        r0 := @this: org.jsoup.nodes.Node;

        r0 = r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        return r0;
    }

    public org.jsoup.nodes.Node previousSibling()
    {
        org.jsoup.nodes.Node r0, $r2;
        java.util.List r1;
        int $i0, $i1;
        java.lang.Object $r4;
        java.lang.Integer $r3;

        r0 := @this: org.jsoup.nodes.Node;

        $r2 = r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        if $r2 != null goto label1;

        return null;

     label1:
        $r2 = r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        r1 = $r2.<org.jsoup.nodes.Node: java.util.List childNodes>;

        $i0 = virtualinvoke r0.<org.jsoup.nodes.Node: int siblingIndex()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r3);

        $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        if $i0 <= 0 goto label2;

        $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        $i1 = -1;

        $i0 = $i0 + $i1;

        $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i0);

        r0 = (org.jsoup.nodes.Node) $r4;

        return r0;

     label2:
        return null;
    }

    public void remove()
    {
        org.jsoup.nodes.Node r0, $r1;

        r0 := @this: org.jsoup.nodes.Node;

        $r1 = r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r1);

        $r1 = r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        virtualinvoke $r1.<org.jsoup.nodes.Node: void removeChild(org.jsoup.nodes.Node)>(r0);

        return;
    }

    public org.jsoup.nodes.Node removeAttr(java.lang.String)
    {
        org.jsoup.nodes.Node r0;
        org.jsoup.nodes.Attributes $r2;
        java.lang.String $r1;

        r0 := @this: org.jsoup.nodes.Node;

        $r1 := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r1);

        $r2 = r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Attributes attributes>;

        virtualinvoke $r2.<org.jsoup.nodes.Attributes: void remove(java.lang.String)>($r1);

        return r0;
    }

    protected void removeChild(org.jsoup.nodes.Node)
    {
        org.jsoup.nodes.Node r0, $r1, $r2;
        java.util.List $r3;
        int $i0;
        boolean $z0;

        r0 := @this: org.jsoup.nodes.Node;

        $r1 := @parameter0: org.jsoup.nodes.Node;

        $r2 = $r1.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        if $r2 != r0 goto label2;

        $z0 = 1;

     label1:
        staticinvoke <org.jsoup.helper.Validate: void isTrue(boolean)>($z0);

        $i0 = virtualinvoke $r1.<org.jsoup.nodes.Node: int siblingIndex()>();

        $r3 = r0.<org.jsoup.nodes.Node: java.util.List childNodes>;

        interfaceinvoke $r3.<java.util.List: java.lang.Object remove(int)>($i0);

        specialinvoke r0.<org.jsoup.nodes.Node: void reindexChildren()>();

        $r1.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode> = null;

        return;

     label2:
        $z0 = 0;

        goto label1;
    }

    protected void replaceChild(org.jsoup.nodes.Node, org.jsoup.nodes.Node)
    {
        java.lang.Integer $r4;
        org.jsoup.nodes.Node r0, $r1, $r2, $r3;
        java.util.List $r5;
        int $i0;
        boolean $z0;

        r0 := @this: org.jsoup.nodes.Node;

        $r1 := @parameter0: org.jsoup.nodes.Node;

        $r2 := @parameter1: org.jsoup.nodes.Node;

        $r3 = $r1.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        if $r3 != r0 goto label3;

        $z0 = 1;

     label1:
        staticinvoke <org.jsoup.helper.Validate: void isTrue(boolean)>($z0);

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r2);

        $r3 = $r2.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        if $r3 == null goto label2;

        $r3 = $r2.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        virtualinvoke $r3.<org.jsoup.nodes.Node: void removeChild(org.jsoup.nodes.Node)>($r2);

     label2:
        $i0 = virtualinvoke $r1.<org.jsoup.nodes.Node: int siblingIndex()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r5 = r0.<org.jsoup.nodes.Node: java.util.List childNodes>;

        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        interfaceinvoke $r5.<java.util.List: java.lang.Object set(int,java.lang.Object)>($i0, $r2);

        $r2.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode> = r0;

        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        virtualinvoke $r2.<org.jsoup.nodes.Node: void setSiblingIndex(int)>($i0);

        $r1.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode> = null;

        return;

     label3:
        $z0 = 0;

        goto label1;
    }

    public void replaceWith(org.jsoup.nodes.Node)
    {
        org.jsoup.nodes.Node r0, $r1, $r2;

        r0 := @this: org.jsoup.nodes.Node;

        $r1 := @parameter0: org.jsoup.nodes.Node;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r1);

        $r2 = r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r2);

        $r2 = r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        virtualinvoke $r2.<org.jsoup.nodes.Node: void replaceChild(org.jsoup.nodes.Node,org.jsoup.nodes.Node)>(r0, $r1);

        return;
    }

    public void setBaseUri(java.lang.String)
    {
        org.jsoup.nodes.Node r0;
        java.lang.String $r1;
        org.jsoup.nodes.Node$1 $r2;

        r0 := @this: org.jsoup.nodes.Node;

        $r1 := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r1);

        $r2 = new org.jsoup.nodes.Node$1;

        specialinvoke $r2.<org.jsoup.nodes.Node$1: void <init>(org.jsoup.nodes.Node,java.lang.String)>(r0, $r1);

        virtualinvoke r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node traverse(org.jsoup.select.NodeVisitor)>($r2);

        return;
    }

    protected void setParentNode(org.jsoup.nodes.Node)
    {
        org.jsoup.nodes.Node r0, $r1, $r2;

        r0 := @this: org.jsoup.nodes.Node;

        $r1 := @parameter0: org.jsoup.nodes.Node;

        $r2 = r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        if $r2 == null goto label1;

        $r2 = r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        virtualinvoke $r2.<org.jsoup.nodes.Node: void removeChild(org.jsoup.nodes.Node)>(r0);

     label1:
        r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode> = $r1;

        return;
    }

    protected void setSiblingIndex(int)
    {
        int $i0;
        org.jsoup.nodes.Node r0;

        r0 := @this: org.jsoup.nodes.Node;

        $i0 := @parameter0: int;

        r0.<org.jsoup.nodes.Node: int siblingIndex> = $i0;

        return;
    }

    public int siblingIndex()
    {
        int i0;
        org.jsoup.nodes.Node r0;

        r0 := @this: org.jsoup.nodes.Node;

        i0 = r0.<org.jsoup.nodes.Node: int siblingIndex>;

        return i0;
    }

    public java.util.List siblingNodes()
    {
        java.util.Iterator $r4;
        java.util.ArrayList r3, $r6;
        org.jsoup.nodes.Node r0, $r2;
        java.util.List r1;
        int $i0;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: org.jsoup.nodes.Node;

        $r2 = r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        if $r2 != null goto label1;

        r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return r1;

     label1:
        $r2 = r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        r1 = $r2.<org.jsoup.nodes.Node: java.util.List childNodes>;

        $r6 = new java.util.ArrayList;

        r3 = $r6;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $i0 = $i0 + -1;

        specialinvoke $r6.<java.util.ArrayList: void <init>(int)>($i0);

        $r4 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r2 = (org.jsoup.nodes.Node) $r5;

        if $r2 == r0 goto label2;

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r2);

        goto label2;

     label3:
        return r3;
    }

    public java.lang.String toString()
    {
        org.jsoup.nodes.Node r0;
        java.lang.String $r1;

        r0 := @this: org.jsoup.nodes.Node;

        $r1 = virtualinvoke r0.<org.jsoup.nodes.Node: java.lang.String outerHtml()>();

        return $r1;
    }

    public org.jsoup.nodes.Node traverse(org.jsoup.select.NodeVisitor)
    {
        org.jsoup.select.NodeVisitor $r1;
        org.jsoup.nodes.Node r0;
        org.jsoup.select.NodeTraversor r2;

        r0 := @this: org.jsoup.nodes.Node;

        $r1 := @parameter0: org.jsoup.select.NodeVisitor;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r1);

        r2 = new org.jsoup.select.NodeTraversor;

        specialinvoke r2.<org.jsoup.select.NodeTraversor: void <init>(org.jsoup.select.NodeVisitor)>($r1);

        virtualinvoke r2.<org.jsoup.select.NodeTraversor: void traverse(org.jsoup.nodes.Node)>(r0);

        return r0;
    }

    public org.jsoup.nodes.Node unwrap()
    {
        org.jsoup.nodes.Node[] $r5;
        org.jsoup.nodes.Node r0, $r1, $r4;
        java.util.List $r2;
        int i0, $i1;
        java.lang.Object $r3;

        r0 := @this: org.jsoup.nodes.Node;

        $r1 = r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r1);

        i0 = r0.<org.jsoup.nodes.Node: int siblingIndex>;

        $r2 = r0.<org.jsoup.nodes.Node: java.util.List childNodes>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i1 <= 0 goto label2;

        $r2 = r0.<org.jsoup.nodes.Node: java.util.List childNodes>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(0);

        $r1 = (org.jsoup.nodes.Node) $r3;

     label1:
        $r4 = r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        $r5 = virtualinvoke r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node[] childNodesAsArray()>();

        virtualinvoke $r4.<org.jsoup.nodes.Node: void addChildren(int,org.jsoup.nodes.Node[])>(i0, $r5);

        virtualinvoke r0.<org.jsoup.nodes.Node: void remove()>();

        return $r1;

     label2:
        $r1 = null;

        goto label1;
    }

    public org.jsoup.nodes.Node wrap(java.lang.String)
    {
        org.jsoup.nodes.Node[] $r8;
        org.jsoup.nodes.Node r1, $r2, $r9;
        java.util.List $r5;
        org.jsoup.nodes.Element $r3, $r7;
        int $i0, $i1;
        java.lang.Object $r6;
        java.lang.String $r0, $r4;
        boolean $z0;

        r1 := @this: org.jsoup.nodes.Node;

        $r0 := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notEmpty(java.lang.String)>($r0);

        $r2 = virtualinvoke r1.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parent()>();

        $z0 = $r2 instanceof org.jsoup.nodes.Element;

        if $z0 == 0 goto label3;

        $r2 = virtualinvoke r1.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parent()>();

        $r3 = (org.jsoup.nodes.Element) $r2;

     label1:
        $r4 = virtualinvoke r1.<org.jsoup.nodes.Node: java.lang.String baseUri()>();

        $r5 = staticinvoke <org.jsoup.parser.Parser: java.util.List parseFragment(java.lang.String,org.jsoup.nodes.Element,java.lang.String)>($r0, $r3, $r4);

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(0);

        $r2 = (org.jsoup.nodes.Node) $r6;

        if $r2 == null goto label2;

        $z0 = $r2 instanceof org.jsoup.nodes.Element;

        if $z0 != 0 goto label4;

     label2:
        return null;

     label3:
        $r3 = null;

        goto label1;

     label4:
        $r3 = (org.jsoup.nodes.Element) $r2;

        $r7 = specialinvoke r1.<org.jsoup.nodes.Node: org.jsoup.nodes.Element getDeepChild(org.jsoup.nodes.Element)>($r3);

        $r2 = r1.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        virtualinvoke $r2.<org.jsoup.nodes.Node: void replaceChild(org.jsoup.nodes.Node,org.jsoup.nodes.Node)>(r1, $r3);

        $r8 = newarray (org.jsoup.nodes.Node)[1];

        $r8[0] = r1;

        virtualinvoke $r7.<org.jsoup.nodes.Element: void addChildren(org.jsoup.nodes.Node[])>($r8);

        $i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        if $i0 <= 0 goto label6;

        $i0 = 0;

     label5:
        $i1 = interfaceinvoke $r5.<java.util.List: int size()>();

        if $i0 >= $i1 goto label6;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>($i0);

        $r2 = (org.jsoup.nodes.Node) $r6;

        $r9 = $r2.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        virtualinvoke $r9.<org.jsoup.nodes.Node: void removeChild(org.jsoup.nodes.Node)>($r2);

        virtualinvoke $r3.<org.jsoup.nodes.Element: org.jsoup.nodes.Element appendChild(org.jsoup.nodes.Node)>($r2);

        $i0 = $i0 + 1;

        goto label5;

     label6:
        return r1;
    }
}
