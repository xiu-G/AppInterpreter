public class vStudio.Android.Camera360.Share.Tx.SDK.MySSLSocketFactory extends org.apache.http.conn.ssl.SSLSocketFactory
{
    javax.net.ssl.SSLContext sslContext;

    public void <init>(java.security.KeyStore) throws java.security.NoSuchAlgorithmException, java.security.KeyManagementException, java.security.KeyStoreException, java.security.UnrecoverableKeyException
    {
        vStudio.Android.Camera360.Share.Tx.SDK.MySSLSocketFactory r0;
        javax.net.ssl.SSLContext $r2;
        java.lang.Object[] $r3;
        javax.net.ssl.TrustManager[] $r5;
        java.security.KeyStore $r1;
        vStudio.Android.Camera360.Share.Tx.SDK.MySSLSocketFactory$1 $r4;

        r0 := @this: vStudio.Android.Camera360.Share.Tx.SDK.MySSLSocketFactory;

        $r1 := @parameter0: java.security.KeyStore;

        specialinvoke r0.<org.apache.http.conn.ssl.SSLSocketFactory: void <init>(java.security.KeyStore)>($r1);

        $r2 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>("TLS");

        r0.<vStudio.Android.Camera360.Share.Tx.SDK.MySSLSocketFactory: javax.net.ssl.SSLContext sslContext> = $r2;

        $r4 = new vStudio.Android.Camera360.Share.Tx.SDK.MySSLSocketFactory$1;

        specialinvoke $r4.<vStudio.Android.Camera360.Share.Tx.SDK.MySSLSocketFactory$1: void <init>(vStudio.Android.Camera360.Share.Tx.SDK.MySSLSocketFactory)>(r0);

        $r2 = r0.<vStudio.Android.Camera360.Share.Tx.SDK.MySSLSocketFactory: javax.net.ssl.SSLContext sslContext>;

        $r3 = newarray (javax.net.ssl.TrustManager)[1];

        $r3[0] = $r4;

        $r5 = (javax.net.ssl.TrustManager[]) $r3;

        virtualinvoke $r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(null, $r5, null);

        return;
    }

    public static org.apache.http.client.HttpClient getNewHttpClient()
    {
        org.apache.http.HttpVersion $r7;
        org.apache.http.conn.scheme.PlainSocketFactory $r9;
        org.apache.http.impl.client.DefaultHttpClient $r10;
        org.apache.http.conn.scheme.SchemeRegistry r2;
        org.apache.http.params.BasicHttpParams r1;
        java.security.KeyStore $r5;
        java.lang.Exception $r11;
        vStudio.Android.Camera360.Share.Tx.SDK.MySSLSocketFactory r3;
        org.apache.http.conn.scheme.Scheme $r8;
        org.apache.http.conn.ssl.X509HostnameVerifier $r6;
        org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager r0;
        java.lang.String $r4;

     label01:
        $r4 = staticinvoke <java.security.KeyStore: java.lang.String getDefaultType()>();

        $r5 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r4);

        virtualinvoke $r5.<java.security.KeyStore: void load(java.io.InputStream,char[])>(null, null);

     label02:
        r3 = new vStudio.Android.Camera360.Share.Tx.SDK.MySSLSocketFactory;

     label03:
        specialinvoke r3.<vStudio.Android.Camera360.Share.Tx.SDK.MySSLSocketFactory: void <init>(java.security.KeyStore)>($r5);

     label04:
        $r6 = <org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier ALLOW_ALL_HOSTNAME_VERIFIER>;

     label05:
        virtualinvoke r3.<org.apache.http.conn.ssl.SSLSocketFactory: void setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier)>($r6);

     label06:
        r1 = new org.apache.http.params.BasicHttpParams;

     label07:
        specialinvoke r1.<org.apache.http.params.BasicHttpParams: void <init>()>();

     label08:
        $r7 = <org.apache.http.HttpVersion: org.apache.http.HttpVersion HTTP_1_1>;

     label09:
        staticinvoke <org.apache.http.params.HttpProtocolParams: void setVersion(org.apache.http.params.HttpParams,org.apache.http.ProtocolVersion)>(r1, $r7);

        staticinvoke <org.apache.http.params.HttpProtocolParams: void setContentCharset(org.apache.http.params.HttpParams,java.lang.String)>(r1, "UTF-8");

     label10:
        r2 = new org.apache.http.conn.scheme.SchemeRegistry;

     label11:
        specialinvoke r2.<org.apache.http.conn.scheme.SchemeRegistry: void <init>()>();

     label12:
        $r8 = new org.apache.http.conn.scheme.Scheme;

     label13:
        $r9 = staticinvoke <org.apache.http.conn.scheme.PlainSocketFactory: org.apache.http.conn.scheme.PlainSocketFactory getSocketFactory()>();

        specialinvoke $r8.<org.apache.http.conn.scheme.Scheme: void <init>(java.lang.String,org.apache.http.conn.scheme.SocketFactory,int)>("http", $r9, 80);

        virtualinvoke r2.<org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme register(org.apache.http.conn.scheme.Scheme)>($r8);

     label14:
        $r8 = new org.apache.http.conn.scheme.Scheme;

     label15:
        specialinvoke $r8.<org.apache.http.conn.scheme.Scheme: void <init>(java.lang.String,org.apache.http.conn.scheme.SocketFactory,int)>("https", r3, 443);

        virtualinvoke r2.<org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme register(org.apache.http.conn.scheme.Scheme)>($r8);

     label16:
        r0 = new org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;

     label17:
        specialinvoke r0.<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: void <init>(org.apache.http.params.HttpParams,org.apache.http.conn.scheme.SchemeRegistry)>(r1, r2);

     label18:
        $r10 = new org.apache.http.impl.client.DefaultHttpClient;

     label19:
        specialinvoke $r10.<org.apache.http.impl.client.DefaultHttpClient: void <init>(org.apache.http.conn.ClientConnectionManager,org.apache.http.params.HttpParams)>(r0, r1);

     label20:
        return $r10;

     label21:
        $r11 := @caughtexception;

        $r10 = new org.apache.http.impl.client.DefaultHttpClient;

        specialinvoke $r10.<org.apache.http.impl.client.DefaultHttpClient: void <init>()>();

        return $r10;

        catch java.lang.Exception from label01 to label02 with label21;
        catch java.lang.Exception from label03 to label04 with label21;
        catch java.lang.Exception from label05 to label06 with label21;
        catch java.lang.Exception from label07 to label08 with label21;
        catch java.lang.Exception from label09 to label10 with label21;
        catch java.lang.Exception from label11 to label12 with label21;
        catch java.lang.Exception from label13 to label14 with label21;
        catch java.lang.Exception from label15 to label16 with label21;
        catch java.lang.Exception from label17 to label18 with label21;
        catch java.lang.Exception from label19 to label20 with label21;
    }

    public java.net.Socket createSocket() throws java.io.IOException
    {
        vStudio.Android.Camera360.Share.Tx.SDK.MySSLSocketFactory r0;
        javax.net.ssl.SSLContext $r1;
        java.net.Socket $r3;
        javax.net.ssl.SSLSocketFactory $r2;

        r0 := @this: vStudio.Android.Camera360.Share.Tx.SDK.MySSLSocketFactory;

        $r1 = r0.<vStudio.Android.Camera360.Share.Tx.SDK.MySSLSocketFactory: javax.net.ssl.SSLContext sslContext>;

        $r2 = virtualinvoke $r1.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

        $r3 = virtualinvoke $r2.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket()>();

        return $r3;
    }

    public java.net.Socket createSocket(java.net.Socket, java.lang.String, int, boolean) throws java.io.IOException, java.net.UnknownHostException
    {
        vStudio.Android.Camera360.Share.Tx.SDK.MySSLSocketFactory r0;
        java.net.Socket $r1;
        javax.net.ssl.SSLContext $r3;
        int $i0;
        java.lang.String $r2;
        boolean $z0;
        javax.net.ssl.SSLSocketFactory $r4;

        r0 := @this: vStudio.Android.Camera360.Share.Tx.SDK.MySSLSocketFactory;

        $r1 := @parameter0: java.net.Socket;

        $r2 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $r3 = r0.<vStudio.Android.Camera360.Share.Tx.SDK.MySSLSocketFactory: javax.net.ssl.SSLContext sslContext>;

        $r4 = virtualinvoke $r3.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

        $r1 = virtualinvoke $r4.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>($r1, $r2, $i0, $z0);

        return $r1;
    }

    public void test()
    {
        vStudio.Android.Camera360.Share.Tx.SDK.MySSLSocketFactory r0;

        r0 := @this: vStudio.Android.Camera360.Share.Tx.SDK.MySSLSocketFactory;

        staticinvoke <vStudio.Android.Camera360.Share.Tx.SDK.MySSLSocketFactory: org.apache.http.client.HttpClient getNewHttpClient()>();

        return;
    }
}
