public class proguard.evaluation.TracedStack extends proguard.evaluation.Stack
{
    private proguard.evaluation.Stack producerStack;
    private proguard.evaluation.value.Value producerValue;

    public void <init>(int)
    {
        int $i0;
        proguard.evaluation.TracedStack r0;
        proguard.evaluation.Stack $r1;

        r0 := @this: proguard.evaluation.TracedStack;

        $i0 := @parameter0: int;

        specialinvoke r0.<proguard.evaluation.Stack: void <init>(int)>($i0);

        $r1 = new proguard.evaluation.Stack;

        specialinvoke $r1.<proguard.evaluation.Stack: void <init>(int)>($i0);

        r0.<proguard.evaluation.TracedStack: proguard.evaluation.Stack producerStack> = $r1;

        return;
    }

    public void <init>(proguard.evaluation.TracedStack)
    {
        proguard.evaluation.TracedStack r0, $r1;
        proguard.evaluation.Stack $r2, $r3;

        r0 := @this: proguard.evaluation.TracedStack;

        $r1 := @parameter0: proguard.evaluation.TracedStack;

        specialinvoke r0.<proguard.evaluation.Stack: void <init>(proguard.evaluation.Stack)>($r1);

        $r2 = new proguard.evaluation.Stack;

        $r3 = $r1.<proguard.evaluation.TracedStack: proguard.evaluation.Stack producerStack>;

        specialinvoke $r2.<proguard.evaluation.Stack: void <init>(proguard.evaluation.Stack)>($r3);

        r0.<proguard.evaluation.TracedStack: proguard.evaluation.Stack producerStack> = $r2;

        return;
    }

    private void producerPop()
    {
        proguard.evaluation.TracedStack r0;
        proguard.evaluation.Stack $r1;

        r0 := @this: proguard.evaluation.TracedStack;

        $r1 = r0.<proguard.evaluation.TracedStack: proguard.evaluation.Stack producerStack>;

        virtualinvoke $r1.<proguard.evaluation.Stack: proguard.evaluation.value.Value pop()>();

        return;
    }

    private void producerPush()
    {
        proguard.evaluation.TracedStack r0;
        proguard.evaluation.Stack $r1;
        proguard.evaluation.value.Value $r2;

        r0 := @this: proguard.evaluation.TracedStack;

        $r1 = r0.<proguard.evaluation.TracedStack: proguard.evaluation.Stack producerStack>;

        $r2 = r0.<proguard.evaluation.TracedStack: proguard.evaluation.value.Value producerValue>;

        virtualinvoke $r1.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r2);

        return;
    }

    public void clear()
    {
        proguard.evaluation.TracedStack r0;
        proguard.evaluation.Stack $r1;

        r0 := @this: proguard.evaluation.TracedStack;

        specialinvoke r0.<proguard.evaluation.Stack: void clear()>();

        $r1 = r0.<proguard.evaluation.TracedStack: proguard.evaluation.Stack producerStack>;

        virtualinvoke $r1.<proguard.evaluation.Stack: void clear()>();

        return;
    }

    public void copy(proguard.evaluation.TracedStack)
    {
        proguard.evaluation.TracedStack r0, $r1;
        proguard.evaluation.Stack $r2, $r3;

        r0 := @this: proguard.evaluation.TracedStack;

        $r1 := @parameter0: proguard.evaluation.TracedStack;

        specialinvoke r0.<proguard.evaluation.Stack: void copy(proguard.evaluation.Stack)>($r1);

        $r2 = r0.<proguard.evaluation.TracedStack: proguard.evaluation.Stack producerStack>;

        $r3 = $r1.<proguard.evaluation.TracedStack: proguard.evaluation.Stack producerStack>;

        virtualinvoke $r2.<proguard.evaluation.Stack: void copy(proguard.evaluation.Stack)>($r3);

        return;
    }

    public void dup()
    {
        proguard.evaluation.TracedStack r0;

        r0 := @this: proguard.evaluation.TracedStack;

        specialinvoke r0.<proguard.evaluation.Stack: void dup()>();

        specialinvoke r0.<proguard.evaluation.TracedStack: void producerPop()>();

        specialinvoke r0.<proguard.evaluation.TracedStack: void producerPush()>();

        specialinvoke r0.<proguard.evaluation.TracedStack: void producerPush()>();

        return;
    }

    public void dup2()
    {
        proguard.evaluation.TracedStack r0;

        r0 := @this: proguard.evaluation.TracedStack;

        specialinvoke r0.<proguard.evaluation.Stack: void dup2()>();

        specialinvoke r0.<proguard.evaluation.TracedStack: void producerPop()>();

        specialinvoke r0.<proguard.evaluation.TracedStack: void producerPop()>();

        specialinvoke r0.<proguard.evaluation.TracedStack: void producerPush()>();

        specialinvoke r0.<proguard.evaluation.TracedStack: void producerPush()>();

        specialinvoke r0.<proguard.evaluation.TracedStack: void producerPush()>();

        specialinvoke r0.<proguard.evaluation.TracedStack: void producerPush()>();

        return;
    }

    public void dup2_x1()
    {
        proguard.evaluation.TracedStack r0;

        r0 := @this: proguard.evaluation.TracedStack;

        specialinvoke r0.<proguard.evaluation.Stack: void dup2_x1()>();

        specialinvoke r0.<proguard.evaluation.TracedStack: void producerPop()>();

        specialinvoke r0.<proguard.evaluation.TracedStack: void producerPop()>();

        specialinvoke r0.<proguard.evaluation.TracedStack: void producerPop()>();

        specialinvoke r0.<proguard.evaluation.TracedStack: void producerPush()>();

        specialinvoke r0.<proguard.evaluation.TracedStack: void producerPush()>();

        specialinvoke r0.<proguard.evaluation.TracedStack: void producerPush()>();

        specialinvoke r0.<proguard.evaluation.TracedStack: void producerPush()>();

        specialinvoke r0.<proguard.evaluation.TracedStack: void producerPush()>();

        return;
    }

    public void dup2_x2()
    {
        proguard.evaluation.TracedStack r0;

        r0 := @this: proguard.evaluation.TracedStack;

        specialinvoke r0.<proguard.evaluation.Stack: void dup2_x2()>();

        specialinvoke r0.<proguard.evaluation.TracedStack: void producerPop()>();

        specialinvoke r0.<proguard.evaluation.TracedStack: void producerPop()>();

        specialinvoke r0.<proguard.evaluation.TracedStack: void producerPop()>();

        specialinvoke r0.<proguard.evaluation.TracedStack: void producerPop()>();

        specialinvoke r0.<proguard.evaluation.TracedStack: void producerPush()>();

        specialinvoke r0.<proguard.evaluation.TracedStack: void producerPush()>();

        specialinvoke r0.<proguard.evaluation.TracedStack: void producerPush()>();

        specialinvoke r0.<proguard.evaluation.TracedStack: void producerPush()>();

        specialinvoke r0.<proguard.evaluation.TracedStack: void producerPush()>();

        specialinvoke r0.<proguard.evaluation.TracedStack: void producerPush()>();

        return;
    }

    public void dup_x1()
    {
        proguard.evaluation.TracedStack r0;

        r0 := @this: proguard.evaluation.TracedStack;

        specialinvoke r0.<proguard.evaluation.Stack: void dup_x1()>();

        specialinvoke r0.<proguard.evaluation.TracedStack: void producerPop()>();

        specialinvoke r0.<proguard.evaluation.TracedStack: void producerPop()>();

        specialinvoke r0.<proguard.evaluation.TracedStack: void producerPush()>();

        specialinvoke r0.<proguard.evaluation.TracedStack: void producerPush()>();

        specialinvoke r0.<proguard.evaluation.TracedStack: void producerPush()>();

        return;
    }

    public void dup_x2()
    {
        proguard.evaluation.TracedStack r0;

        r0 := @this: proguard.evaluation.TracedStack;

        specialinvoke r0.<proguard.evaluation.Stack: void dup_x2()>();

        specialinvoke r0.<proguard.evaluation.TracedStack: void producerPop()>();

        specialinvoke r0.<proguard.evaluation.TracedStack: void producerPop()>();

        specialinvoke r0.<proguard.evaluation.TracedStack: void producerPop()>();

        specialinvoke r0.<proguard.evaluation.TracedStack: void producerPush()>();

        specialinvoke r0.<proguard.evaluation.TracedStack: void producerPush()>();

        specialinvoke r0.<proguard.evaluation.TracedStack: void producerPush()>();

        specialinvoke r0.<proguard.evaluation.TracedStack: void producerPush()>();

        return;
    }

    public boolean equals(java.lang.Object)
    {
        proguard.evaluation.TracedStack r0, $r4;
        proguard.evaluation.Stack $r5, $r6;
        java.lang.Object $r1;
        java.lang.Class $r2, $r3;
        boolean $z0;

        r0 := @this: proguard.evaluation.TracedStack;

        $r1 := @parameter0: java.lang.Object;

        if $r1 == null goto label1;

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 == $r3 goto label2;

     label1:
        return 0;

     label2:
        $r4 = (proguard.evaluation.TracedStack) $r1;

        $z0 = specialinvoke r0.<proguard.evaluation.Stack: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label3;

        $r5 = r0.<proguard.evaluation.TracedStack: proguard.evaluation.Stack producerStack>;

        $r6 = $r4.<proguard.evaluation.TracedStack: proguard.evaluation.Stack producerStack>;

        $z0 = virtualinvoke $r5.<proguard.evaluation.Stack: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    public boolean generalize(proguard.evaluation.TracedStack)
    {
        proguard.evaluation.TracedStack r0, $r1;
        proguard.evaluation.Stack $r2, $r3;
        boolean $z0, $z1;

        r0 := @this: proguard.evaluation.TracedStack;

        $r1 := @parameter0: proguard.evaluation.TracedStack;

        $z0 = specialinvoke r0.<proguard.evaluation.Stack: boolean generalize(proguard.evaluation.Stack)>($r1);

        $r3 = r0.<proguard.evaluation.TracedStack: proguard.evaluation.Stack producerStack>;

        $r2 = $r1.<proguard.evaluation.TracedStack: proguard.evaluation.Stack producerStack>;

        $z1 = virtualinvoke $r3.<proguard.evaluation.Stack: boolean generalize(proguard.evaluation.Stack)>($r2);

        $z0 = $z0 | $z1;

        return $z0;
    }

    public proguard.evaluation.value.Value getBottomProducerValue(int)
    {
        int $i0;
        proguard.evaluation.TracedStack r0;
        proguard.evaluation.Stack $r2;
        proguard.evaluation.value.Value $r1;

        r0 := @this: proguard.evaluation.TracedStack;

        $i0 := @parameter0: int;

        $r2 = r0.<proguard.evaluation.TracedStack: proguard.evaluation.Stack producerStack>;

        $r1 = virtualinvoke $r2.<proguard.evaluation.Stack: proguard.evaluation.value.Value getBottom(int)>($i0);

        return $r1;
    }

    public proguard.evaluation.value.Value getTopProducerValue(int)
    {
        int $i0;
        proguard.evaluation.TracedStack r0;
        proguard.evaluation.Stack $r2;
        proguard.evaluation.value.Value $r1;

        r0 := @this: proguard.evaluation.TracedStack;

        $i0 := @parameter0: int;

        $r2 = r0.<proguard.evaluation.TracedStack: proguard.evaluation.Stack producerStack>;

        $r1 = virtualinvoke $r2.<proguard.evaluation.Stack: proguard.evaluation.value.Value getTop(int)>($i0);

        return $r1;
    }

    public int hashCode()
    {
        int $i0, $i1;
        proguard.evaluation.TracedStack r0;
        proguard.evaluation.Stack $r1;

        r0 := @this: proguard.evaluation.TracedStack;

        $i0 = specialinvoke r0.<proguard.evaluation.Stack: int hashCode()>();

        $r1 = r0.<proguard.evaluation.TracedStack: proguard.evaluation.Stack producerStack>;

        $i1 = virtualinvoke $r1.<proguard.evaluation.Stack: int hashCode()>();

        $i0 = $i0 ^ $i1;

        return $i0;
    }

    public proguard.evaluation.value.Value pop()
    {
        proguard.evaluation.TracedStack r0;
        proguard.evaluation.value.Value $r1;
        boolean $z0;

        r0 := @this: proguard.evaluation.TracedStack;

        $r1 = specialinvoke r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value pop()>();

        specialinvoke r0.<proguard.evaluation.TracedStack: void producerPop()>();

        $z0 = virtualinvoke $r1.<proguard.evaluation.value.Value: boolean isCategory2()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<proguard.evaluation.TracedStack: void producerPop()>();

     label1:
        return $r1;
    }

    public void pop1()
    {
        proguard.evaluation.TracedStack r0;

        r0 := @this: proguard.evaluation.TracedStack;

        specialinvoke r0.<proguard.evaluation.Stack: void pop1()>();

        specialinvoke r0.<proguard.evaluation.TracedStack: void producerPop()>();

        return;
    }

    public void pop2()
    {
        proguard.evaluation.TracedStack r0;

        r0 := @this: proguard.evaluation.TracedStack;

        specialinvoke r0.<proguard.evaluation.Stack: void pop2()>();

        specialinvoke r0.<proguard.evaluation.TracedStack: void producerPop()>();

        specialinvoke r0.<proguard.evaluation.TracedStack: void producerPop()>();

        return;
    }

    public void push(proguard.evaluation.value.Value)
    {
        proguard.evaluation.TracedStack r0;
        proguard.evaluation.value.Value $r1;
        boolean $z0;

        r0 := @this: proguard.evaluation.TracedStack;

        $r1 := @parameter0: proguard.evaluation.value.Value;

        specialinvoke r0.<proguard.evaluation.Stack: void push(proguard.evaluation.value.Value)>($r1);

        specialinvoke r0.<proguard.evaluation.TracedStack: void producerPush()>();

        $z0 = virtualinvoke $r1.<proguard.evaluation.value.Value: boolean isCategory2()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<proguard.evaluation.TracedStack: void producerPush()>();

     label1:
        return;
    }

    public void removeTop(int)
    {
        int $i0;
        proguard.evaluation.TracedStack r0;
        proguard.evaluation.Stack $r1;

        r0 := @this: proguard.evaluation.TracedStack;

        $i0 := @parameter0: int;

        specialinvoke r0.<proguard.evaluation.Stack: void removeTop(int)>($i0);

        $r1 = r0.<proguard.evaluation.TracedStack: proguard.evaluation.Stack producerStack>;

        virtualinvoke $r1.<proguard.evaluation.Stack: void removeTop(int)>($i0);

        return;
    }

    public void reset(int)
    {
        int $i0;
        proguard.evaluation.TracedStack r0;
        proguard.evaluation.Stack $r1;

        r0 := @this: proguard.evaluation.TracedStack;

        $i0 := @parameter0: int;

        specialinvoke r0.<proguard.evaluation.Stack: void reset(int)>($i0);

        $r1 = r0.<proguard.evaluation.TracedStack: proguard.evaluation.Stack producerStack>;

        virtualinvoke $r1.<proguard.evaluation.Stack: void reset(int)>($i0);

        return;
    }

    public void setBottomProducerValue(int, proguard.evaluation.value.Value)
    {
        int $i0;
        proguard.evaluation.TracedStack r0;
        proguard.evaluation.Stack $r2;
        proguard.evaluation.value.Value $r1;

        r0 := @this: proguard.evaluation.TracedStack;

        $i0 := @parameter0: int;

        $r1 := @parameter1: proguard.evaluation.value.Value;

        $r2 = r0.<proguard.evaluation.TracedStack: proguard.evaluation.Stack producerStack>;

        virtualinvoke $r2.<proguard.evaluation.Stack: void setBottom(int,proguard.evaluation.value.Value)>($i0, $r1);

        return;
    }

    public void setProducerValue(proguard.evaluation.value.Value)
    {
        proguard.evaluation.TracedStack r0;
        proguard.evaluation.value.Value $r1;

        r0 := @this: proguard.evaluation.TracedStack;

        $r1 := @parameter0: proguard.evaluation.value.Value;

        r0.<proguard.evaluation.TracedStack: proguard.evaluation.value.Value producerValue> = $r1;

        return;
    }

    public void setTopProducerValue(int, proguard.evaluation.value.Value)
    {
        int $i0;
        proguard.evaluation.TracedStack r0;
        proguard.evaluation.Stack $r2;
        proguard.evaluation.value.Value $r1;

        r0 := @this: proguard.evaluation.TracedStack;

        $i0 := @parameter0: int;

        $r1 := @parameter1: proguard.evaluation.value.Value;

        $r2 = r0.<proguard.evaluation.TracedStack: proguard.evaluation.Stack producerStack>;

        virtualinvoke $r2.<proguard.evaluation.Stack: void setTop(int,proguard.evaluation.value.Value)>($i0, $r1);

        return;
    }

    public void swap()
    {
        proguard.evaluation.TracedStack r0;

        r0 := @this: proguard.evaluation.TracedStack;

        specialinvoke r0.<proguard.evaluation.Stack: void swap()>();

        specialinvoke r0.<proguard.evaluation.TracedStack: void producerPop()>();

        specialinvoke r0.<proguard.evaluation.TracedStack: void producerPop()>();

        specialinvoke r0.<proguard.evaluation.TracedStack: void producerPush()>();

        specialinvoke r0.<proguard.evaluation.TracedStack: void producerPush()>();

        return;
    }

    public java.lang.String toString()
    {
        proguard.evaluation.TracedStack r0;
        proguard.evaluation.Stack $r4;
        proguard.evaluation.value.Value[] $r2;
        java.lang.StringBuffer $r1;
        int $i0, $i1;
        java.lang.String $r6;
        proguard.evaluation.value.Value $r3, $r5;

        r0 := @this: proguard.evaluation.TracedStack;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $i0 = 0;

     label1:
        $i1 = virtualinvoke r0.<proguard.evaluation.TracedStack: int size()>();

        if $i0 >= $i1 goto label6;

        $r2 = r0.<proguard.evaluation.TracedStack: proguard.evaluation.value.Value[] values>;

        $r3 = $r2[$i0];

        $r4 = r0.<proguard.evaluation.TracedStack: proguard.evaluation.Stack producerStack>;

        $r5 = virtualinvoke $r4.<proguard.evaluation.Stack: proguard.evaluation.value.Value getBottom(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(91);

        if $r5 != null goto label4;

        $r6 = "empty:";

     label2:
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        if $r3 != null goto label5;

        $r6 = "empty";

     label3:
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);

        $i0 = $i0 + 1;

        goto label1;

     label4:
        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        goto label2;

     label5:
        $r6 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        goto label3;

     label6:
        $r6 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r6;
    }
}
