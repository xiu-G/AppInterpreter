public final class lg extends java.lang.Object implements java.io.Serializable
{
    public org.htmlparser.Node[] a;
    public int b;
    private int c;
    private int d;

    public void <init>()
    {
        int $i0;
        org.htmlparser.Node[] $r1;
        lg r0;

        r0 := @this: lg;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<lg: int b> = 0;

        r0.<lg: int c> = 10;

        $i0 = r0.<lg: int c>;

        $r1 = newarray (org.htmlparser.Node)[$i0];

        r0.<lg: org.htmlparser.Node[] a> = $r1;

        $i0 = r0.<lg: int c>;

        $i0 = $i0 << 1;

        r0.<lg: int d> = $i0;

        return;
    }

    public void <init>(org.htmlparser.Node)
    {
        lg r0;
        org.htmlparser.Node $r1;

        r0 := @this: lg;

        $r1 := @parameter0: org.htmlparser.Node;

        specialinvoke r0.<lg: void <init>()>();

        virtualinvoke r0.<lg: void a(org.htmlparser.Node)>($r1);

        return;
    }

    public final lg a(org.htmlparser.NodeFilter, boolean)
    {
        org.htmlparser.Node[] $r3;
        org.htmlparser.Node $r4;
        org.htmlparser.NodeFilter $r1;
        int $i0, $i1, $i2;
        lg r0, $r2, $r5;
        boolean $z0, $z1;

        r0 := @this: lg;

        $r1 := @parameter0: org.htmlparser.NodeFilter;

        $z0 := @parameter1: boolean;

        $r2 = new lg;

        specialinvoke $r2.<lg: void <init>()>();

        $i0 = 0;

     label1:
        $i1 = r0.<lg: int b>;

        if $i0 >= $i1 goto label5;

        $r3 = r0.<lg: org.htmlparser.Node[] a>;

        $r4 = $r3[$i0];

        $z1 = interfaceinvoke $r1.<org.htmlparser.NodeFilter: boolean accept(org.htmlparser.Node)>($r4);

        if $z1 == 0 goto label2;

        virtualinvoke $r2.<lg: void a(org.htmlparser.Node)>($r4);

     label2:
        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<org.htmlparser.Node: lg getChildren()>();

        if $r5 == null goto label4;

        $r5 = virtualinvoke $r5.<lg: lg a(org.htmlparser.NodeFilter,boolean)>($r1, $z0);

        $i1 = 0;

     label3:
        $i2 = $r5.<lg: int b>;

        if $i1 >= $i2 goto label4;

        $r3 = $r5.<lg: org.htmlparser.Node[] a>;

        $r4 = $r3[$i1];

        virtualinvoke $r2.<lg: void a(org.htmlparser.Node)>($r4);

        $i1 = $i1 + 1;

        goto label3;

     label4:
        $i0 = $i0 + 1;

        goto label1;

     label5:
        return $r2;
    }

    public final org.htmlparser.Node a(int)
    {
        org.htmlparser.Node[] $r1, $r3;
        int $i0, $i1, $i2;
        lg r0;
        org.htmlparser.Node $r2;

        r0 := @this: lg;

        $i0 := @parameter0: int;

        $r1 = r0.<lg: org.htmlparser.Node[] a>;

        $r2 = $r1[$i0];

        $r1 = r0.<lg: org.htmlparser.Node[] a>;

        $i1 = $i0 + 1;

        $r3 = r0.<lg: org.htmlparser.Node[] a>;

        $i2 = r0.<lg: int b>;

        $i2 = $i2 - $i0;

        $i2 = $i2 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i1, $r3, $i0, $i2);

        $r1 = r0.<lg: org.htmlparser.Node[] a>;

        $i0 = r0.<lg: int b>;

        $i0 = $i0 - 1;

        $r1[$i0] = null;

        $i0 = r0.<lg: int b>;

        $i0 = $i0 - 1;

        r0.<lg: int b> = $i0;

        return $r2;
    }

    public final void a(org.htmlparser.Node)
    {
        org.htmlparser.Node[] $r2, $r3;
        int $i0, $i1;
        lg r0;
        org.htmlparser.Node $r1;

        r0 := @this: lg;

        $r1 := @parameter0: org.htmlparser.Node;

        $i0 = r0.<lg: int b>;

        $i1 = r0.<lg: int c>;

        if $i0 != $i1 goto label1;

        $i0 = r0.<lg: int c>;

        $i1 = r0.<lg: int d>;

        $i0 = $i0 + $i1;

        r0.<lg: int c> = $i0;

        $i0 = r0.<lg: int d>;

        $i0 = $i0 << 1;

        r0.<lg: int d> = $i0;

        $r2 = r0.<lg: org.htmlparser.Node[] a>;

        $i0 = r0.<lg: int c>;

        $r3 = newarray (org.htmlparser.Node)[$i0];

        r0.<lg: org.htmlparser.Node[] a> = $r3;

        $r3 = r0.<lg: org.htmlparser.Node[] a>;

        $i0 = r0.<lg: int b>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r3, 0, $i0);

     label1:
        $r2 = r0.<lg: org.htmlparser.Node[] a>;

        $i0 = r0.<lg: int b>;

        $i1 = $i0 + 1;

        r0.<lg: int b> = $i1;

        $r2[$i0] = $r1;

        return;
    }

    public final java.lang.String toString()
    {
        org.htmlparser.Node[] $r3;
        java.lang.StringBuffer $r2;
        int $i0, $i1;
        lg r0;
        java.lang.String $r1;
        org.htmlparser.Node $r4;

        r0 := @this: lg;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $i0 = 0;

     label1:
        $i1 = r0.<lg: int b>;

        if $i0 >= $i1 goto label2;

        $r3 = r0.<lg: org.htmlparser.Node[] a>;

        $r4 = $r3[$i0];

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r4);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r1 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r1;
    }
}
