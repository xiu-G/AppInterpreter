final class com.parse.ParseCommandCache extends java.lang.Object
{
    private static int e;
    private static java.lang.Object j;
    private java.io.File a;
    private int b;
    private double c;
    private int d;
    private boolean f;
    private boolean g;
    private java.util.HashMap h;
    private java.util.IdentityHashMap i;
    private boolean k;
    private java.lang.Object l;
    private java.util.logging.Logger m;
    private com.parse.ParseCommandCache$TestHelper n;

    static void <clinit>()
    {
        java.lang.Object $r0;

        <com.parse.ParseCommandCache: int e> = 0;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <com.parse.ParseCommandCache: java.lang.Object j> = $r0;

        return;
    }

    public void <init>(android.content.Context)
    {
        java.lang.Throwable $r14, $r15, $r17;
        android.content.Context $r1;
        com.parse.ParseCommandCache r0;
        java.util.HashMap $r2;
        com.parse.n $r10;
        com.parse.o $r12;
        boolean $z0, $z1;
        android.net.ConnectivityManager $r8;
        java.util.IdentityHashMap $r3;
        android.content.IntentFilter $r11;
        android.net.NetworkInfo $r9;
        java.util.logging.Logger $r5;
        java.io.File $r6, $r7;
        java.lang.Object $r4, $r13, $r16;

        r0 := @this: com.parse.ParseCommandCache;

        $r1 := @parameter0: android.content.Context;

        $z0 = 1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.parse.ParseCommandCache: int b> = 5;

        r0.<com.parse.ParseCommandCache: double c> = 600.0;

        r0.<com.parse.ParseCommandCache: int d> = 10485760;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<com.parse.ParseCommandCache: java.util.HashMap h> = $r2;

        $r3 = new java.util.IdentityHashMap;

        specialinvoke $r3.<java.util.IdentityHashMap: void <init>()>();

        r0.<com.parse.ParseCommandCache: java.util.IdentityHashMap i> = $r3;

        r0.<com.parse.ParseCommandCache: com.parse.ParseCommandCache$TestHelper n> = null;

        r0.<com.parse.ParseCommandCache: boolean g> = 0;

        r0.<com.parse.ParseCommandCache: boolean f> = 0;

        r0.<com.parse.ParseCommandCache: boolean k> = 0;

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        <com.parse.ParseCommandCache: java.lang.Object j> = $r4;

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        r0.<com.parse.ParseCommandCache: java.lang.Object l> = $r4;

        $r5 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>("com.parse.ParseCommandCache");

        r0.<com.parse.ParseCommandCache: java.util.logging.Logger m> = $r5;

        $r6 = staticinvoke <com.parse.Parse: java.io.File getParseDir()>();

        $r7 = new java.io.File;

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, "CommandCache");

        r0.<com.parse.ParseCommandCache: java.io.File a> = $r7;

        $r6 = r0.<com.parse.ParseCommandCache: java.io.File a>;

        virtualinvoke $r6.<java.io.File: boolean mkdirs()>();

        $z1 = staticinvoke <com.parse.Parse: boolean hasPermission(java.lang.String)>("android.permission.ACCESS_NETWORK_STATE");

        if $z1 != 0 goto label01;

        return;

     label01:
        $r4 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("connectivity");

        $r8 = (android.net.ConnectivityManager) $r4;

        if $r8 == null goto label03;

        $r9 = virtualinvoke $r8.<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>();

        if $r9 == null goto label10;

        $z1 = virtualinvoke $r9.<android.net.NetworkInfo: boolean isConnected()>();

        if $z1 == 0 goto label10;

     label02:
        virtualinvoke r0.<com.parse.ParseCommandCache: void a(boolean)>($z0);

        $r10 = new com.parse.n;

        specialinvoke $r10.<com.parse.n: void <init>(com.parse.ParseCommandCache,android.net.ConnectivityManager)>(r0, $r8);

        $r11 = new android.content.IntentFilter;

        specialinvoke $r11.<android.content.IntentFilter: void <init>(java.lang.String)>("android.net.conn.CONNECTIVITY_CHANGE");

        virtualinvoke $r1.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r10, $r11);

     label03:
        $r4 = r0.<com.parse.ParseCommandCache: java.lang.Object l>;

        entermonitor $r4;

     label04:
        $z0 = r0.<com.parse.ParseCommandCache: boolean k>;

        if $z0 != 0 goto label07;

        $r12 = new com.parse.o;

        specialinvoke $r12.<com.parse.o: void <init>(com.parse.ParseCommandCache,java.lang.String)>(r0, "ParseCommandCache.runLoop()");

        virtualinvoke $r12.<com.parse.o: void start()>();

     label05:
        $r13 = r0.<com.parse.ParseCommandCache: java.lang.Object l>;

     label06:
        virtualinvoke $r13.<java.lang.Object: void wait()>();

     label07:
        exitmonitor $r4;

     label08:
        return;

     label09:
        $r14 := @caughtexception;

        exitmonitor $r4;

        throw $r14;

     label10:
        $z0 = 0;

        goto label02;

     label11:
        $r15 := @caughtexception;

     label12:
        $r13 = <com.parse.ParseCommandCache: java.lang.Object j>;

        entermonitor $r13;

     label13:
        r0.<com.parse.ParseCommandCache: boolean f> = 1;

        $r16 = <com.parse.ParseCommandCache: java.lang.Object j>;

        virtualinvoke $r16.<java.lang.Object: void notify()>();

        exitmonitor $r13;

     label14:
        goto label07;

     label15:
        $r17 := @caughtexception;

     label16:
        exitmonitor $r13;

        throw $r17;

     label17:
        nop;

        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.InterruptedException from label06 to label07 with label11;
        catch java.lang.Throwable from label05 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label12 to label13 with label09;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label16 to label17 with label09;
    }

    private void a(int)
    {
        byte[] $r10;
        com.parse.ParseCommandCache r0;
        java.io.BufferedInputStream $r7, $r33;
        org.json.JSONException $r23, $r26;
        org.json.JSONObject $r14, $r35;
        byte $b7;
        com.parse.l $r17, $r37;
        com.parse.ParseCommandCache$TestHelper $r18;
        boolean $z0;
        java.util.logging.Logger $r12;
        java.lang.StringBuilder $r20, $r36;
        java.lang.Throwable $r4, $r11, $r21, $r22, $r24, $r25, $r27, $r28, $r29, $r30;
        java.io.ByteArrayOutputStream $r9, $r34;
        com.parse.ParseException $r19;
        java.lang.String[] $r3;
        java.util.HashMap $r15;
        long $l4, $l5, $l6, $l8;
        java.util.logging.Level $r13;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r5;
        double $d0;
        java.io.FileInputStream $r8, $r32;
        java.io.File $r2, $r6, $r31;
        java.lang.Object $r1, $r16;

        r0 := @this: com.parse.ParseCommandCache;

        $i0 := @parameter0: int;

        $r1 = <com.parse.ParseCommandCache: java.lang.Object j>;

        entermonitor $r1;

     label01:
        $z0 = r0.<com.parse.ParseCommandCache: boolean g>;

        if $z0 != 0 goto label03;

        exitmonitor $r1;

     label02:
        return;

     label03:
        $r2 = r0.<com.parse.ParseCommandCache: java.io.File a>;

        $r3 = virtualinvoke $r2.<java.io.File: java.lang.String[] list()>();

        if $r3 == null goto label04;

        $i1 = lengthof $r3;

        if $i1 != 0 goto label07;

     label04:
        exitmonitor $r1;

     label05:
        return;

     label06:
        $r4 := @caughtexception;

        exitmonitor $r1;

        throw $r4;

     label07:
        staticinvoke <java.util.Arrays: void sort(java.lang.Object[])>($r3);

        $i1 = lengthof $r3;

        $i2 = 0;

     label08:
        if $i2 >= $i1 goto label70;

        $r5 = $r3[$i2];

        $r31 = new java.io.File;

        $r2 = $r31;

        $r6 = r0.<com.parse.ParseCommandCache: java.io.File a>;

        specialinvoke $r31.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, $r5);

     label09:
        $r33 = new java.io.BufferedInputStream;

        $r7 = $r33;

        $r32 = new java.io.FileInputStream;

        $r8 = $r32;

     label10:
        specialinvoke $r32.<java.io.FileInputStream: void <init>(java.io.File)>($r2);

        specialinvoke $r33.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r8);

     label11:
        $r34 = new java.io.ByteArrayOutputStream;

        $r9 = $r34;

     label12:
        specialinvoke $r34.<java.io.ByteArrayOutputStream: void <init>()>();

     label13:
        $r10 = newarray (byte)[1024];

     label14:
        $i3 = virtualinvoke $r7.<java.io.InputStream: int read(byte[])>($r10);

     label15:
        if $i3 <= 0 goto label23;

     label16:
        virtualinvoke $r9.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r10, 0, $i3);

     label17:
        goto label14;

     label18:
        $r11 := @caughtexception;

     label19:
        $i3 = staticinvoke <com.parse.Parse: int getLogLevel()>();

        if 6 < $i3 goto label20;

        $r12 = r0.<com.parse.ParseCommandCache: java.util.logging.Logger m>;

        $r13 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        virtualinvoke $r12.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r13, "File disappeared from cache while being read.", $r11);

     label20:
        if $r7 == null goto label22;

     label21:
        virtualinvoke $r7.<java.io.InputStream: void close()>();

     label22:
        $i2 = $i2 + 1;

        goto label08;

     label23:
        $r35 = new org.json.JSONObject;

        $r14 = $r35;

     label24:
        $r5 = virtualinvoke $r9.<java.io.ByteArrayOutputStream: java.lang.String toString(java.lang.String)>("UTF-8");

        specialinvoke $r35.<org.json.JSONObject: void <init>(java.lang.String)>($r5);

     label25:
        virtualinvoke $r7.<java.io.InputStream: void close()>();

     label26:
        $r15 = r0.<com.parse.ParseCommandCache: java.util.HashMap h>;

        $z0 = virtualinvoke $r15.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r2);

        if $z0 == 0 goto label56;

        $r15 = r0.<com.parse.ParseCommandCache: java.util.HashMap h>;

        $r16 = virtualinvoke $r15.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r2);

        $r17 = (com.parse.l) $r16;

     label27:
        virtualinvoke $r17.<com.parse.l: java.lang.Object c()>();

        specialinvoke r0.<com.parse.ParseCommandCache: void a(java.io.File)>($r2);

     label28:
        $r18 = r0.<com.parse.ParseCommandCache: com.parse.ParseCommandCache$TestHelper n>;

        if $r18 == null goto label22;

        $r18 = r0.<com.parse.ParseCommandCache: com.parse.ParseCommandCache$TestHelper n>;

     label29:
        virtualinvoke $r18.<com.parse.ParseCommandCache$TestHelper: void notify(int)>(1);

     label30:
        goto label22;

     label31:
        $r19 := @caughtexception;

     label32:
        $i3 = virtualinvoke $r19.<com.parse.ParseException: int getCode()>();

        if $i3 != 100 goto label68;

        if $i0 <= 0 goto label22;

        $i3 = staticinvoke <com.parse.Parse: int getLogLevel()>();

        if 4 < $i3 goto label33;

        $r12 = r0.<com.parse.ParseCommandCache: java.util.logging.Logger m>;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>(java.lang.String)>("Network timeout in command cache. Waiting for ");

        $d0 = r0.<com.parse.ParseCommandCache: double c>;

        $r20 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r20 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" seconds and then retrying ");

        $r20 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r20 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" times.");

        $r5 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r12.<java.util.logging.Logger: void info(java.lang.String)>($r5);

     label33:
        $l4 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l5 = $l4;

        $d0 = r0.<com.parse.ParseCommandCache: double c>;

        $d0 = $d0 * 1000.0;

        $l6 = (long) $d0;

        $l4 = $l6 + $l4;

     label34:
        $b7 = $l5 cmp $l4;

        $i3 = (int) $b7;

        if $i3 >= 0 goto label67;

        $z0 = r0.<com.parse.ParseCommandCache: boolean g>;

        if $z0 == 0 goto label35;

        $z0 = r0.<com.parse.ParseCommandCache: boolean f>;

        if $z0 == 0 goto label63;

     label35:
        $i0 = staticinvoke <com.parse.Parse: int getLogLevel()>();

        if 4 < $i0 goto label36;

        $r12 = r0.<com.parse.ParseCommandCache: java.util.logging.Logger m>;

        virtualinvoke $r12.<java.util.logging.Logger: void info(java.lang.String)>("Aborting wait because runEventually thread should stop.");

     label36:
        exitmonitor $r1;

     label37:
        return;

     label38:
        $r21 := @caughtexception;

        $r7 = null;

     label39:
        $i3 = staticinvoke <com.parse.Parse: int getLogLevel()>();

        if 6 < $i3 goto label40;

        $r12 = r0.<com.parse.ParseCommandCache: java.util.logging.Logger m>;

        $r13 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        virtualinvoke $r12.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r13, "Unable to read contents of file in cache.", $r21);

     label40:
        specialinvoke r0.<com.parse.ParseCommandCache: void a(java.io.File)>($r2);

     label41:
        if $r7 == null goto label22;

     label42:
        virtualinvoke $r7.<java.io.InputStream: void close()>();

     label43:
        goto label22;

     label44:
        $r22 := @caughtexception;

        goto label22;

     label45:
        $r23 := @caughtexception;

        $r7 = null;

     label46:
        $i3 = staticinvoke <com.parse.Parse: int getLogLevel()>();

        if 6 < $i3 goto label47;

        $r12 = r0.<com.parse.ParseCommandCache: java.util.logging.Logger m>;

        $r13 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        virtualinvoke $r12.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r13, "Error parsing JSON found in cache.", $r23);

     label47:
        specialinvoke r0.<com.parse.ParseCommandCache: void a(java.io.File)>($r2);

     label48:
        if $r7 == null goto label22;

     label49:
        virtualinvoke $r7.<java.io.InputStream: void close()>();

     label50:
        goto label22;

     label51:
        $r24 := @caughtexception;

        goto label22;

     label52:
        $r25 := @caughtexception;

        $r7 = null;

     label53:
        if $r7 == null goto label55;

     label54:
        virtualinvoke $r7.<java.io.InputStream: void close()>();

     label55:
        throw $r25;

     label56:
        $r37 = new com.parse.l;

        $r17 = $r37;

     label57:
        specialinvoke $r37.<com.parse.l: void <init>(org.json.JSONObject)>($r14);

     label58:
        goto label27;

     label59:
        $r26 := @caughtexception;

     label60:
        $i3 = staticinvoke <com.parse.Parse: int getLogLevel()>();

        if 6 < $i3 goto label61;

        $r12 = r0.<com.parse.ParseCommandCache: java.util.logging.Logger m>;

        $r13 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        virtualinvoke $r12.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r13, "Unable to create ParseCommand from JSON.", $r26);

     label61:
        specialinvoke r0.<com.parse.ParseCommandCache: void a(java.io.File)>($r2);

     label62:
        goto label22;

     label63:
        $r16 = <com.parse.ParseCommandCache: java.lang.Object j>;

        $l5 = $l4 - $l5;

     label64:
        virtualinvoke $r16.<java.lang.Object: void wait(long)>($l5);

     label65:
        $l6 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l5 = $l6;

        $d0 = r0.<com.parse.ParseCommandCache: double c>;

        $d0 = $d0 * 1000.0;

        $l8 = (long) $d0;

        $l8 = $l4 - $l8;

        $b7 = $l6 cmp $l8;

        $i3 = (int) $b7;

        if $i3 >= 0 goto label34;

        $d0 = r0.<com.parse.ParseCommandCache: double c>;

        $d0 = $d0 * 1000.0;

        $l5 = (long) $d0;

        $l5 = $l4 - $l5;

        goto label34;

     label66:
        $r27 := @caughtexception;

        r0.<com.parse.ParseCommandCache: boolean f> = 1;

        goto label65;

     label67:
        $i3 = $i0 + -1;

        specialinvoke r0.<com.parse.ParseCommandCache: void a(int)>($i3);

        goto label22;

     label68:
        $i3 = staticinvoke <com.parse.Parse: int getLogLevel()>();

        if 6 < $i3 goto label69;

        $r12 = r0.<com.parse.ParseCommandCache: java.util.logging.Logger m>;

        $r13 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        virtualinvoke $r12.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r13, "Failed to run command.", $r19);

     label69:
        specialinvoke r0.<com.parse.ParseCommandCache: void a(java.io.File)>($r2);

        $r18 = r0.<com.parse.ParseCommandCache: com.parse.ParseCommandCache$TestHelper n>;

        if $r18 == null goto label22;

        $r18 = r0.<com.parse.ParseCommandCache: com.parse.ParseCommandCache$TestHelper n>;

        virtualinvoke $r18.<com.parse.ParseCommandCache$TestHelper: void notify(int)>(2);

        goto label22;

     label70:
        exitmonitor $r1;

     label71:
        return;

     label72:
        $r28 := @caughtexception;

        goto label26;

     label73:
        $r29 := @caughtexception;

        goto label22;

     label74:
        $r30 := @caughtexception;

        goto label55;

     label75:
        $r25 := @caughtexception;

        goto label53;

     label76:
        $r23 := @caughtexception;

        goto label46;

     label77:
        $r21 := @caughtexception;

        goto label39;

     label78:
        $r11 := @caughtexception;

        $r7 = null;

        goto label19;

        catch java.lang.Throwable from label01 to label02 with label06;
        catch java.lang.Throwable from label03 to label05 with label06;
        catch java.lang.Throwable from label07 to label09 with label06;
        catch java.io.FileNotFoundException from label10 to label11 with label78;
        catch java.io.IOException from label10 to label11 with label38;
        catch org.json.JSONException from label10 to label11 with label45;
        catch java.lang.Throwable from label09 to label11 with label52;
        catch java.io.FileNotFoundException from label12 to label13 with label18;
        catch java.io.FileNotFoundException from label14 to label15 with label18;
        catch java.io.FileNotFoundException from label16 to label17 with label18;
        catch java.io.IOException from label12 to label13 with label77;
        catch java.io.IOException from label14 to label15 with label77;
        catch java.io.IOException from label16 to label17 with label77;
        catch org.json.JSONException from label12 to label13 with label76;
        catch org.json.JSONException from label14 to label15 with label76;
        catch org.json.JSONException from label16 to label17 with label76;
        catch java.lang.Throwable from label11 to label17 with label75;
        catch java.lang.Throwable from label19 to label20 with label75;
        catch java.io.IOException from label21 to label22 with label73;
        catch java.lang.Throwable from label21 to label22 with label06;
        catch java.io.FileNotFoundException from label24 to label25 with label18;
        catch java.io.IOException from label24 to label25 with label77;
        catch org.json.JSONException from label24 to label25 with label76;
        catch java.lang.Throwable from label23 to label25 with label75;
        catch java.io.IOException from label25 to label26 with label72;
        catch java.lang.Throwable from label25 to label26 with label06;
        catch java.lang.Throwable from label26 to label27 with label06;
        catch com.parse.ParseException from label27 to label28 with label31;
        catch com.parse.ParseException from label29 to label30 with label31;
        catch java.lang.Throwable from label27 to label30 with label06;
        catch java.lang.Throwable from label32 to label37 with label06;
        catch java.lang.Throwable from label39 to label41 with label75;
        catch java.io.IOException from label42 to label43 with label44;
        catch java.lang.Throwable from label42 to label43 with label06;
        catch java.lang.Throwable from label46 to label48 with label75;
        catch java.io.IOException from label49 to label50 with label51;
        catch java.lang.Throwable from label49 to label50 with label06;
        catch java.io.IOException from label54 to label55 with label74;
        catch java.lang.Throwable from label54 to label55 with label06;
        catch java.lang.Throwable from label55 to label56 with label06;
        catch org.json.JSONException from label57 to label58 with label59;
        catch java.lang.Throwable from label56 to label58 with label06;
        catch java.lang.Throwable from label60 to label62 with label06;
        catch java.lang.InterruptedException from label64 to label65 with label66;
        catch java.lang.Throwable from label63 to label65 with label06;
        catch java.lang.Throwable from label65 to label71 with label06;
    }

    static void a(com.parse.ParseCommandCache)
    {
        java.lang.Throwable $r4, $r5, $r6, $r7, $r10, $r11;
        com.parse.ParseCommandCache $r0;
        java.util.logging.Logger $r1;
        java.lang.Exception $r8;
        java.util.logging.Level $r9;
        int $i0;
        java.lang.Object $r2, $r3;
        boolean $z0;

        $r0 := @parameter0: com.parse.ParseCommandCache;

        $i0 = staticinvoke <com.parse.Parse: int getLogLevel()>();

        if 4 < $i0 goto label01;

        $r1 = $r0.<com.parse.ParseCommandCache: java.util.logging.Logger m>;

        virtualinvoke $r1.<java.util.logging.Logger: void info(java.lang.String)>("Parse command cache has started processing queued commands.");

     label01:
        $r2 = $r0.<com.parse.ParseCommandCache: java.lang.Object l>;

        entermonitor $r2;

     label02:
        $z0 = $r0.<com.parse.ParseCommandCache: boolean k>;

        if $z0 == 0 goto label04;

        exitmonitor $r2;

     label03:
        return;

     label04:
        $r0.<com.parse.ParseCommandCache: boolean k> = 1;

        $r3 = $r0.<com.parse.ParseCommandCache: java.lang.Object l>;

        virtualinvoke $r3.<java.lang.Object: void notifyAll()>();

        exitmonitor $r2;

     label05:
        $r2 = <com.parse.ParseCommandCache: java.lang.Object j>;

        entermonitor $r2;

     label06:
        $z0 = $r0.<com.parse.ParseCommandCache: boolean f>;

        if $z0 != 0 goto label18;

        $z0 = staticinvoke <java.lang.Thread: boolean interrupted()>();

        if $z0 != 0 goto label18;

        $z0 = 1;

     label07:
        exitmonitor $r2;

     label08:
        if $z0 == 0 goto label29;

        $r2 = <com.parse.ParseCommandCache: java.lang.Object j>;

        entermonitor $r2;

     label09:
        $i0 = $r0.<com.parse.ParseCommandCache: int b>;

        specialinvoke $r0.<com.parse.ParseCommandCache: void a(int)>($i0);

        $z0 = $r0.<com.parse.ParseCommandCache: boolean f>;

     label10:
        if $z0 != 0 goto label13;

     label11:
        $r3 = <com.parse.ParseCommandCache: java.lang.Object j>;

     label12:
        virtualinvoke $r3.<java.lang.Object: void wait()>();

     label13:
        $z0 = $r0.<com.parse.ParseCommandCache: boolean f>;

        if $z0 != 0 goto label26;

        $z0 = 1;

     label14:
        exitmonitor $r2;

     label15:
        goto label08;

     label16:
        $r4 := @caughtexception;

        exitmonitor $r2;

        throw $r4;

     label17:
        $r5 := @caughtexception;

        exitmonitor $r2;

        throw $r5;

     label18:
        $z0 = 0;

        goto label07;

     label19:
        $r6 := @caughtexception;

        exitmonitor $r2;

        throw $r6;

     label20:
        $r7 := @caughtexception;

     label21:
        $r0.<com.parse.ParseCommandCache: boolean f> = 1;

     label22:
        goto label13;

     label23:
        $r8 := @caughtexception;

     label24:
        $i0 = staticinvoke <com.parse.Parse: int getLogLevel()>();

        if 6 < $i0 goto label25;

        $r1 = $r0.<com.parse.ParseCommandCache: java.util.logging.Logger m>;

        $r9 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        virtualinvoke $r1.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r9, "saveEventually thread had an error.", $r8);

     label25:
        $z0 = $r0.<com.parse.ParseCommandCache: boolean f>;

        if $z0 != 0 goto label27;

        $z0 = 1;

        goto label14;

     label26:
        $z0 = 0;

        goto label14;

     label27:
        $z0 = 0;

        goto label14;

     label28:
        $r10 := @caughtexception;

        $z0 = $r0.<com.parse.ParseCommandCache: boolean f>;

        throw $r10;

     label29:
        $r2 = $r0.<com.parse.ParseCommandCache: java.lang.Object l>;

        entermonitor $r2;

     label30:
        $r0.<com.parse.ParseCommandCache: boolean k> = 0;

        $r3 = $r0.<com.parse.ParseCommandCache: java.lang.Object l>;

        virtualinvoke $r3.<java.lang.Object: void notifyAll()>();

        exitmonitor $r2;

     label31:
        $i0 = staticinvoke <com.parse.Parse: int getLogLevel()>();

        if 4 < $i0 goto label33;

        $r1 = $r0.<com.parse.ParseCommandCache: java.util.logging.Logger m>;

        virtualinvoke $r1.<java.util.logging.Logger: void info(java.lang.String)>("saveEventually thread has stopped processing commands.");

        return;

     label32:
        $r11 := @caughtexception;

        exitmonitor $r2;

        throw $r11;

     label33:
        return;

        catch java.lang.Throwable from label02 to label03 with label17;
        catch java.lang.Throwable from label04 to label05 with label17;
        catch java.lang.Throwable from label06 to label08 with label19;
        catch java.lang.Exception from label09 to label10 with label23;
        catch java.lang.Throwable from label09 to label10 with label28;
        catch java.lang.InterruptedException from label12 to label13 with label20;
        catch java.lang.Exception from label12 to label13 with label23;
        catch java.lang.Throwable from label11 to label13 with label28;
        catch java.lang.Throwable from label13 to label15 with label16;
        catch java.lang.Exception from label21 to label22 with label23;
        catch java.lang.Throwable from label21 to label22 with label28;
        catch java.lang.Throwable from label24 to label25 with label28;
        catch java.lang.Throwable from label25 to label29 with label16;
        catch java.lang.Throwable from label30 to label31 with label32;
    }

    private void a(java.io.File)
    {
        java.lang.Throwable $r10;
        com.parse.ParseCommandCache r0;
        java.util.IdentityHashMap $r4;
        java.util.Iterator $r6;
        java.util.Set $r5;
        java.util.HashMap $r3;
        com.parse.ParseObject $r8;
        java.io.File $r1, $r9;
        java.lang.Object $r2, $r7;
        boolean $z0;

        r0 := @this: com.parse.ParseCommandCache;

        $r1 := @parameter0: java.io.File;

        $r2 = <com.parse.ParseCommandCache: java.lang.Object j>;

        entermonitor $r2;

     label1:
        $r3 = r0.<com.parse.ParseCommandCache: java.util.HashMap h>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r1);

        $r4 = r0.<com.parse.ParseCommandCache: java.util.IdentityHashMap i>;

        $r5 = virtualinvoke $r4.<java.util.IdentityHashMap: java.util.Set keySet()>();

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (com.parse.ParseObject) $r7;

        $r4 = r0.<com.parse.ParseCommandCache: java.util.IdentityHashMap i>;

        $r7 = virtualinvoke $r4.<java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>($r8);

        $r9 = (java.io.File) $r7;

        $z0 = virtualinvoke $r9.<java.io.File: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        $r4 = r0.<com.parse.ParseCommandCache: java.util.IdentityHashMap i>;

        virtualinvoke $r4.<java.util.IdentityHashMap: java.lang.Object remove(java.lang.Object)>($r8);

     label3:
        virtualinvoke $r1.<java.io.File: boolean delete()>();

        exitmonitor $r2;

     label4:
        return;

     label5:
        $r10 := @caughtexception;

        exitmonitor $r2;

        throw $r10;

        catch java.lang.Throwable from label1 to label4 with label5;
    }

    public final void a()
    {
        java.lang.Throwable $r4, $r5, $r6;
        com.parse.ParseCommandCache r0;
        java.lang.Object $r1, $r2, $r3;
        boolean $z0;

        r0 := @this: com.parse.ParseCommandCache;

        $r1 = r0.<com.parse.ParseCommandCache: java.lang.Object l>;

        entermonitor $r1;

     label01:
        $z0 = r0.<com.parse.ParseCommandCache: boolean k>;

        if $z0 == 0 goto label03;

        $r2 = <com.parse.ParseCommandCache: java.lang.Object j>;

        entermonitor $r2;

     label02:
        r0.<com.parse.ParseCommandCache: boolean f> = 1;

        $r3 = <com.parse.ParseCommandCache: java.lang.Object j>;

        virtualinvoke $r3.<java.lang.Object: void notify()>();

        exitmonitor $r2;

     label03:
        $z0 = r0.<com.parse.ParseCommandCache: boolean k>;

     label04:
        if $z0 == 0 goto label12;

     label05:
        $r2 = r0.<com.parse.ParseCommandCache: java.lang.Object l>;

     label06:
        virtualinvoke $r2.<java.lang.Object: void wait()>();

     label07:
        goto label03;

     label08:
        $r4 := @caughtexception;

        goto label03;

     label09:
        $r5 := @caughtexception;

     label10:
        exitmonitor $r2;

        throw $r5;

     label11:
        $r6 := @caughtexception;

        exitmonitor $r1;

        throw $r6;

     label12:
        exitmonitor $r1;

     label13:
        return;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.InterruptedException from label06 to label07 with label08;
        catch java.lang.Throwable from label05 to label07 with label11;
        catch java.lang.Throwable from label10 to label11 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    final void a(com.parse.ParseObject)
    {
        java.lang.Throwable $r6;
        com.parse.ParseCommandCache r0;
        java.util.IdentityHashMap $r3;
        com.parse.ParseObject $r1;
        java.io.File $r5;
        java.lang.Object $r2, $r4;
        boolean $z0;

        r0 := @this: com.parse.ParseCommandCache;

        $r1 := @parameter0: com.parse.ParseObject;

        $r2 = <com.parse.ParseCommandCache: java.lang.Object j>;

        entermonitor $r2;

     label1:
        $r3 = r0.<com.parse.ParseCommandCache: java.util.IdentityHashMap i>;

        $z0 = virtualinvoke $r3.<java.util.IdentityHashMap: boolean containsKey(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        $r3 = r0.<com.parse.ParseCommandCache: java.util.IdentityHashMap i>;

        $r4 = virtualinvoke $r3.<java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>($r1);

        $r5 = (java.io.File) $r4;

        specialinvoke r0.<com.parse.ParseCommandCache: void a(java.io.File)>($r5);

     label2:
        exitmonitor $r2;

     label3:
        return;

     label4:
        $r6 := @caughtexception;

        exitmonitor $r2;

        throw $r6;

        catch java.lang.Throwable from label1 to label3 with label4;
    }

    public final void a(com.parse.l, com.parse.ParseObject)
    {
        byte[] $r7;
        com.parse.ParseCommandCache r0;
        com.parse.ParseObject $r2;
        org.json.JSONObject $r5;
        com.parse.l $r1;
        com.parse.ParseCommandCache$TestHelper $r9;
        boolean $z0, $z1;
        java.util.IdentityHashMap $r13;
        java.util.logging.Logger $r8;
        java.lang.StringBuilder $r17;
        java.lang.Throwable $r10, $r23, $r24, $r25;
        java.lang.String[] $r15;
        long $l3;
        java.util.HashMap $r20;
        java.util.logging.Level $r11;
        java.io.BufferedOutputStream $r21;
        int $i0, $i1, $i2, $i4;
        java.lang.String $r6, $r18, $r19;
        java.io.FileOutputStream $r22;
        java.io.File $r3, $r4;
        char[] $r16;
        java.lang.Object $r12, $r14;

        r0 := @this: com.parse.ParseCommandCache;

        $r1 := @parameter0: com.parse.l;

        $r2 := @parameter1: com.parse.ParseObject;

        staticinvoke <com.parse.Parse: void requirePermission(java.lang.String)>("android.permission.ACCESS_NETWORK_STATE");

     label01:
        $r5 = virtualinvoke $r1.<com.parse.l: org.json.JSONObject a()>();

        $r6 = virtualinvoke $r5.<org.json.JSONObject: java.lang.String toString()>();

        $r7 = virtualinvoke $r6.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

     label02:
        $i0 = lengthof $r7;

        $i1 = r0.<com.parse.ParseCommandCache: int d>;

        if $i0 <= $i1 goto label06;

        $i0 = staticinvoke <com.parse.Parse: int getLogLevel()>();

        if 5 < $i0 goto label03;

        $r8 = r0.<com.parse.ParseCommandCache: java.util.logging.Logger m>;

        virtualinvoke $r8.<java.util.logging.Logger: void warning(java.lang.String)>("Unable to save command for later because it\'s too big.");

     label03:
        $r9 = r0.<com.parse.ParseCommandCache: com.parse.ParseCommandCache$TestHelper n>;

        if $r9 == null goto label76;

        $r9 = r0.<com.parse.ParseCommandCache: com.parse.ParseCommandCache$TestHelper n>;

        virtualinvoke $r9.<com.parse.ParseCommandCache$TestHelper: void notify(int)>(4);

        return;

     label04:
        $r10 := @caughtexception;

        $i0 = staticinvoke <com.parse.Parse: int getLogLevel()>();

        if 5 < $i0 goto label05;

        $r8 = r0.<com.parse.ParseCommandCache: java.util.logging.Logger m>;

        $r11 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        virtualinvoke $r8.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r11, "UTF-8 isn\'t supported.  This shouldn\'t happen.", $r10);

     label05:
        $r9 = r0.<com.parse.ParseCommandCache: com.parse.ParseCommandCache$TestHelper n>;

        if $r9 == null goto label76;

        $r9 = r0.<com.parse.ParseCommandCache: com.parse.ParseCommandCache$TestHelper n>;

        virtualinvoke $r9.<com.parse.ParseCommandCache$TestHelper: void notify(int)>(4);

        return;

     label06:
        $r12 = <com.parse.ParseCommandCache: java.lang.Object j>;

        entermonitor $r12;

        if $r2 == null goto label23;

     label07:
        $r6 = virtualinvoke $r2.<com.parse.ParseObject: java.lang.String getObjectId()>();

     label08:
        if $r6 != null goto label23;

        $z0 = 1;

     label09:
        if $z0 == 0 goto label15;

        $r13 = r0.<com.parse.ParseCommandCache: java.util.IdentityHashMap i>;

     label10:
        $z1 = virtualinvoke $r13.<java.util.IdentityHashMap: boolean containsKey(java.lang.Object)>($r2);

     label11:
        if $z1 == 0 goto label15;

        $r13 = r0.<com.parse.ParseCommandCache: java.util.IdentityHashMap i>;

     label12:
        $r14 = virtualinvoke $r13.<java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>($r2);

     label13:
        $r3 = (java.io.File) $r14;

     label14:
        specialinvoke r0.<com.parse.ParseCommandCache: void a(java.io.File)>($r3);

     label15:
        $r3 = r0.<com.parse.ParseCommandCache: java.io.File a>;

     label16:
        $r15 = virtualinvoke $r3.<java.io.File: java.lang.String[] list()>();

     label17:
        if $r15 == null goto label34;

     label18:
        staticinvoke <java.util.Arrays: void sort(java.lang.Object[])>($r15);

     label19:
        $i1 = lengthof $r15;

        $i2 = 0;

        $i0 = 0;

     label20:
        if $i2 >= $i1 goto label24;

        $r6 = $r15[$i2];

        $r3 = new java.io.File;

        $r4 = r0.<com.parse.ParseCommandCache: java.io.File a>;

     label21:
        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, $r6);

        $l3 = virtualinvoke $r3.<java.io.File: long length()>();

     label22:
        $i4 = (int) $l3;

        $i0 = $i0 + $i4;

        $i2 = $i2 + 1;

        goto label20;

     label23:
        $z0 = 0;

        goto label09;

     label24:
        $i1 = lengthof $r7;

        $i0 = $i1 + $i0;

        $i1 = r0.<com.parse.ParseCommandCache: int d>;

        if $i0 <= $i1 goto label34;

     label25:
        $i1 = staticinvoke <com.parse.Parse: int getLogLevel()>();

     label26:
        if 5 < $i1 goto label28;

        $r8 = r0.<com.parse.ParseCommandCache: java.util.logging.Logger m>;

     label27:
        virtualinvoke $r8.<java.util.logging.Logger: void warning(java.lang.String)>("Deleting old commands to make room in command cache.");

     label28:
        $i1 = 0;

     label29:
        $i2 = r0.<com.parse.ParseCommandCache: int d>;

        if $i0 <= $i2 goto label34;

        $i2 = lengthof $r15;

        if $i1 >= $i2 goto label34;

        $r3 = new java.io.File;

        $r4 = r0.<com.parse.ParseCommandCache: java.io.File a>;

        $i2 = $i1 + 1;

        $r6 = $r15[$i1];

     label30:
        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, $r6);

        $l3 = virtualinvoke $r3.<java.io.File: long length()>();

     label31:
        $i1 = (int) $l3;

     label32:
        specialinvoke r0.<com.parse.ParseCommandCache: void a(java.io.File)>($r3);

     label33:
        $i0 = $i0 - $i1;

        $i1 = $i2;

        goto label29;

     label34:
        $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r6 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l3);

        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

     label35:
        if $i0 >= 16 goto label43;

     label36:
        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

     label37:
        $i0 = 16 - $i0;

        $r16 = newarray (char)[$i0];

     label38:
        staticinvoke <java.util.Arrays: void fill(char[],char)>($r16, 48);

     label39:
        $r17 = new java.lang.StringBuilder;

     label40:
        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

     label41:
        $r18 = new java.lang.String;

     label42:
        specialinvoke $r18.<java.lang.String: void <init>(char[])>($r16);

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

     label43:
        $i0 = <com.parse.ParseCommandCache: int e>;

        $i1 = $i0 + 1;

        <com.parse.ParseCommandCache: int e> = $i1;

     label44:
        $r18 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

     label45:
        $r19 = $r18;

     label46:
        $i0 = virtualinvoke $r18.<java.lang.String: int length()>();

     label47:
        if $i0 >= 8 goto label56;

     label48:
        $i0 = virtualinvoke $r18.<java.lang.String: int length()>();

     label49:
        $i0 = 8 - $i0;

        $r16 = newarray (char)[$i0];

     label50:
        staticinvoke <java.util.Arrays: void fill(char[],char)>($r16, 48);

     label51:
        $r17 = new java.lang.StringBuilder;

     label52:
        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

     label53:
        $r19 = new java.lang.String;

     label54:
        specialinvoke $r19.<java.lang.String: void <init>(char[])>($r16);

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

     label55:
        $r19 = $r18;

     label56:
        $r17 = new java.lang.StringBuilder;

     label57:
        specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>("CachedCommand_");

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

        $r6 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

     label58:
        $r3 = r0.<com.parse.ParseCommandCache: java.io.File a>;

     label59:
        $r3 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>($r6, "", $r3);

     label60:
        if $z0 == 0 goto label62;

        $r13 = r0.<com.parse.ParseCommandCache: java.util.IdentityHashMap i>;

     label61:
        virtualinvoke $r13.<java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r3);

     label62:
        $r20 = r0.<com.parse.ParseCommandCache: java.util.HashMap h>;

     label63:
        virtualinvoke $r20.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r1);

     label64:
        $r21 = new java.io.BufferedOutputStream;

        $r22 = new java.io.FileOutputStream;

     label65:
        specialinvoke $r22.<java.io.FileOutputStream: void <init>(java.io.File)>($r3);

        specialinvoke $r21.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r22);

        virtualinvoke $r21.<java.io.OutputStream: void write(byte[])>($r7);

        virtualinvoke $r21.<java.io.OutputStream: void close()>();

     label66:
        $r9 = r0.<com.parse.ParseCommandCache: com.parse.ParseCommandCache$TestHelper n>;

        if $r9 == null goto label68;

        $r9 = r0.<com.parse.ParseCommandCache: com.parse.ParseCommandCache$TestHelper n>;

     label67:
        virtualinvoke $r9.<com.parse.ParseCommandCache$TestHelper: void notify(int)>(3);

     label68:
        $r14 = <com.parse.ParseCommandCache: java.lang.Object j>;

        virtualinvoke $r14.<java.lang.Object: void notify()>();

     label69:
        exitmonitor $r12;

     label70:
        return;

     label71:
        $r23 := @caughtexception;

        exitmonitor $r12;

        throw $r23;

     label72:
        $r24 := @caughtexception;

     label73:
        $i0 = staticinvoke <com.parse.Parse: int getLogLevel()>();

        if 5 < $i0 goto label74;

        $r8 = r0.<com.parse.ParseCommandCache: java.util.logging.Logger m>;

        $r11 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        virtualinvoke $r8.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r11, "Unable to save command for later.", $r24);

     label74:
        $r14 = <com.parse.ParseCommandCache: java.lang.Object j>;

        virtualinvoke $r14.<java.lang.Object: void notify()>();

        goto label69;

     label75:
        $r25 := @caughtexception;

        $r14 = <com.parse.ParseCommandCache: java.lang.Object j>;

        virtualinvoke $r14.<java.lang.Object: void notify()>();

        throw $r25;

     label76:
        return;

        catch java.io.UnsupportedEncodingException from label01 to label02 with label04;
        catch java.io.IOException from label07 to label08 with label72;
        catch java.io.IOException from label10 to label11 with label72;
        catch java.io.IOException from label12 to label13 with label72;
        catch java.io.IOException from label14 to label15 with label72;
        catch java.io.IOException from label16 to label17 with label72;
        catch java.io.IOException from label18 to label19 with label72;
        catch java.io.IOException from label21 to label22 with label72;
        catch java.io.IOException from label25 to label26 with label72;
        catch java.io.IOException from label27 to label28 with label72;
        catch java.io.IOException from label30 to label31 with label72;
        catch java.io.IOException from label32 to label33 with label72;
        catch java.io.IOException from label34 to label35 with label72;
        catch java.io.IOException from label36 to label37 with label72;
        catch java.io.IOException from label38 to label39 with label72;
        catch java.io.IOException from label40 to label41 with label72;
        catch java.io.IOException from label42 to label43 with label72;
        catch java.io.IOException from label44 to label45 with label72;
        catch java.io.IOException from label46 to label47 with label72;
        catch java.io.IOException from label48 to label49 with label72;
        catch java.io.IOException from label50 to label51 with label72;
        catch java.io.IOException from label52 to label53 with label72;
        catch java.io.IOException from label54 to label55 with label72;
        catch java.io.IOException from label57 to label58 with label72;
        catch java.io.IOException from label59 to label60 with label72;
        catch java.io.IOException from label61 to label62 with label72;
        catch java.io.IOException from label63 to label64 with label72;
        catch java.io.IOException from label65 to label66 with label72;
        catch java.io.IOException from label67 to label68 with label72;
        catch java.lang.Throwable from label07 to label68 with label75;
        catch java.lang.Throwable from label68 to label70 with label71;
        catch java.lang.Throwable from label73 to label74 with label75;
        catch java.lang.Throwable from label74 to label76 with label71;
    }

    public final void a(boolean)
    {
        java.lang.Throwable $r3;
        com.parse.ParseCommandCache r0;
        java.lang.Object $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: com.parse.ParseCommandCache;

        $z0 := @parameter0: boolean;

        $r1 = <com.parse.ParseCommandCache: java.lang.Object j>;

        entermonitor $r1;

     label1:
        $z1 = r0.<com.parse.ParseCommandCache: boolean g>;

        if $z1 == $z0 goto label2;

        r0.<com.parse.ParseCommandCache: boolean g> = $z0;

        if $z0 == 0 goto label2;

        $r2 = <com.parse.ParseCommandCache: java.lang.Object j>;

        virtualinvoke $r2.<java.lang.Object: void notify()>();

     label2:
        exitmonitor $r1;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

        exitmonitor $r1;

        throw $r3;

        catch java.lang.Throwable from label1 to label3 with label4;
    }

    public final com.parse.ParseCommandCache$TestHelper b()
    {
        com.parse.ParseCommandCache r0;
        com.parse.ParseCommandCache$TestHelper $r1;

        r0 := @this: com.parse.ParseCommandCache;

        $r1 = r0.<com.parse.ParseCommandCache: com.parse.ParseCommandCache$TestHelper n>;

        if $r1 != null goto label1;

        $r1 = new com.parse.ParseCommandCache$TestHelper;

        specialinvoke $r1.<com.parse.ParseCommandCache$TestHelper: void <init>(com.parse.ParseCommandCache,com.parse.n)>(r0, null);

        r0.<com.parse.ParseCommandCache: com.parse.ParseCommandCache$TestHelper n> = $r1;

     label1:
        $r1 = r0.<com.parse.ParseCommandCache: com.parse.ParseCommandCache$TestHelper n>;

        return $r1;
    }
}
