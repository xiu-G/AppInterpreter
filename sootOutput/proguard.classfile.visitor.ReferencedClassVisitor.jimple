public class proguard.classfile.visitor.ReferencedClassVisitor extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.visitor.ClassVisitor, proguard.classfile.visitor.MemberVisitor, proguard.classfile.constant.visitor.ConstantVisitor, proguard.classfile.attribute.visitor.AttributeVisitor, proguard.classfile.attribute.visitor.LocalVariableInfoVisitor, proguard.classfile.attribute.visitor.LocalVariableTypeInfoVisitor, proguard.classfile.attribute.'annotation'.visitor.AnnotationVisitor, proguard.classfile.attribute.'annotation'.visitor.ElementValueVisitor
{
    private final proguard.classfile.visitor.ClassVisitor classVisitor;

    public void <init>(proguard.classfile.visitor.ClassVisitor)
    {
        proguard.classfile.visitor.ReferencedClassVisitor r0;
        proguard.classfile.visitor.ClassVisitor $r1;

        r0 := @this: proguard.classfile.visitor.ReferencedClassVisitor;

        $r1 := @parameter0: proguard.classfile.visitor.ClassVisitor;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        r0.<proguard.classfile.visitor.ReferencedClassVisitor: proguard.classfile.visitor.ClassVisitor classVisitor> = $r1;

        return;
    }

    public void visitAnnotation(proguard.classfile.Clazz, proguard.classfile.attribute.'annotation'.Annotation)
    {
        proguard.classfile.attribute.'annotation'.Annotation $r2;
        proguard.classfile.Clazz $r1;
        proguard.classfile.visitor.ClassVisitor $r3;
        proguard.classfile.visitor.ReferencedClassVisitor r0;

        r0 := @this: proguard.classfile.visitor.ReferencedClassVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.Annotation;

        $r3 = r0.<proguard.classfile.visitor.ReferencedClassVisitor: proguard.classfile.visitor.ClassVisitor classVisitor>;

        virtualinvoke $r2.<proguard.classfile.attribute.'annotation'.Annotation: void referencedClassesAccept(proguard.classfile.visitor.ClassVisitor)>($r3);

        virtualinvoke $r2.<proguard.classfile.attribute.'annotation'.Annotation: void elementValuesAccept(proguard.classfile.Clazz,proguard.classfile.attribute.'annotation'.visitor.ElementValueVisitor)>($r1, r0);

        return;
    }

    public void visitAnnotationDefaultAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.'annotation'.AnnotationDefaultAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.'annotation'.AnnotationDefaultAttribute $r3;
        proguard.classfile.visitor.ReferencedClassVisitor r0;

        r0 := @this: proguard.classfile.visitor.ReferencedClassVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.AnnotationDefaultAttribute;

        virtualinvoke $r3.<proguard.classfile.attribute.'annotation'.AnnotationDefaultAttribute: void defaultValueAccept(proguard.classfile.Clazz,proguard.classfile.attribute.'annotation'.visitor.ElementValueVisitor)>($r1, r0);

        return;
    }

    public void visitAnyAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.'annotation'.AnnotationsAttribute)
    {
        proguard.classfile.attribute.'annotation'.AnnotationsAttribute $r2;
        proguard.classfile.visitor.ReferencedClassVisitor r0;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.classfile.visitor.ReferencedClassVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.AnnotationsAttribute;

        virtualinvoke $r2.<proguard.classfile.attribute.'annotation'.AnnotationsAttribute: void annotationsAccept(proguard.classfile.Clazz,proguard.classfile.attribute.'annotation'.visitor.AnnotationVisitor)>($r1, r0);

        return;
    }

    public void visitAnyAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.Attribute)
    {
        proguard.classfile.visitor.ReferencedClassVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.Attribute $r2;

        r0 := @this: proguard.classfile.visitor.ReferencedClassVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.Attribute;

        return;
    }

    public void visitAnyConstant(proguard.classfile.Clazz, proguard.classfile.constant.Constant)
    {
        proguard.classfile.visitor.ReferencedClassVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.constant.Constant $r2;

        r0 := @this: proguard.classfile.visitor.ReferencedClassVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.Constant;

        return;
    }

    public void visitAnyElementValue(proguard.classfile.Clazz, proguard.classfile.attribute.'annotation'.Annotation, proguard.classfile.attribute.'annotation'.ElementValue)
    {
        proguard.classfile.attribute.'annotation'.Annotation $r2;
        proguard.classfile.attribute.'annotation'.ElementValue $r3;
        proguard.classfile.Clazz $r1;
        proguard.classfile.visitor.ReferencedClassVisitor r0;

        r0 := @this: proguard.classfile.visitor.ReferencedClassVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.Annotation;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.ElementValue;

        return;
    }

    public void visitAnyParameterAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute $r3;
        proguard.classfile.visitor.ReferencedClassVisitor r0;

        r0 := @this: proguard.classfile.visitor.ReferencedClassVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute;

        virtualinvoke $r3.<proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute: void annotationsAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.'annotation'.visitor.AnnotationVisitor)>($r1, $r2, r0);

        return;
    }

    public void visitAnyRefConstant(proguard.classfile.Clazz, proguard.classfile.constant.RefConstant)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.visitor.ClassVisitor $r3;
        proguard.classfile.visitor.ReferencedClassVisitor r0;
        proguard.classfile.constant.RefConstant $r2;

        r0 := @this: proguard.classfile.visitor.ReferencedClassVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.RefConstant;

        $r3 = r0.<proguard.classfile.visitor.ReferencedClassVisitor: proguard.classfile.visitor.ClassVisitor classVisitor>;

        virtualinvoke $r2.<proguard.classfile.constant.RefConstant: void referencedClassAccept(proguard.classfile.visitor.ClassVisitor)>($r3);

        return;
    }

    public void visitArrayElementValue(proguard.classfile.Clazz, proguard.classfile.attribute.'annotation'.Annotation, proguard.classfile.attribute.'annotation'.ArrayElementValue)
    {
        proguard.classfile.attribute.'annotation'.Annotation $r2;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.'annotation'.ArrayElementValue $r3;
        proguard.classfile.visitor.ReferencedClassVisitor r0;

        r0 := @this: proguard.classfile.visitor.ReferencedClassVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.Annotation;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.ArrayElementValue;

        virtualinvoke $r3.<proguard.classfile.attribute.'annotation'.ArrayElementValue: void elementValuesAccept(proguard.classfile.Clazz,proguard.classfile.attribute.'annotation'.Annotation,proguard.classfile.attribute.'annotation'.visitor.ElementValueVisitor)>($r1, $r2, r0);

        return;
    }

    public void visitClassConstant(proguard.classfile.Clazz, proguard.classfile.constant.ClassConstant)
    {
        proguard.classfile.constant.ClassConstant $r2;
        proguard.classfile.Clazz $r1;
        proguard.classfile.visitor.ClassVisitor $r3;
        proguard.classfile.visitor.ReferencedClassVisitor r0;

        r0 := @this: proguard.classfile.visitor.ReferencedClassVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.ClassConstant;

        $r3 = r0.<proguard.classfile.visitor.ReferencedClassVisitor: proguard.classfile.visitor.ClassVisitor classVisitor>;

        virtualinvoke $r2.<proguard.classfile.constant.ClassConstant: void referencedClassAccept(proguard.classfile.visitor.ClassVisitor)>($r3);

        return;
    }

    public void visitClassElementValue(proguard.classfile.Clazz, proguard.classfile.attribute.'annotation'.Annotation, proguard.classfile.attribute.'annotation'.ClassElementValue)
    {
        proguard.classfile.attribute.'annotation'.Annotation $r2;
        proguard.classfile.attribute.'annotation'.ClassElementValue $r3;
        proguard.classfile.Clazz $r1;
        proguard.classfile.visitor.ClassVisitor $r4;
        proguard.classfile.visitor.ReferencedClassVisitor r0;

        r0 := @this: proguard.classfile.visitor.ReferencedClassVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.Annotation;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.ClassElementValue;

        $r4 = r0.<proguard.classfile.visitor.ReferencedClassVisitor: proguard.classfile.visitor.ClassVisitor classVisitor>;

        virtualinvoke $r3.<proguard.classfile.attribute.'annotation'.ClassElementValue: void referencedClassesAccept(proguard.classfile.visitor.ClassVisitor)>($r4);

        return;
    }

    public void visitCodeAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.Method $r2;
        proguard.classfile.visitor.ReferencedClassVisitor r0;

        r0 := @this: proguard.classfile.visitor.ReferencedClassVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        virtualinvoke $r3.<proguard.classfile.attribute.CodeAttribute: void attributesAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.visitor.AttributeVisitor)>($r1, $r2, r0);

        return;
    }

    public void visitEnclosingMethodAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.EnclosingMethodAttribute)
    {
        proguard.classfile.attribute.EnclosingMethodAttribute $r2;
        proguard.classfile.Clazz $r1;
        proguard.classfile.visitor.ClassVisitor $r3;
        proguard.classfile.visitor.ReferencedClassVisitor r0;

        r0 := @this: proguard.classfile.visitor.ReferencedClassVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.EnclosingMethodAttribute;

        $r3 = r0.<proguard.classfile.visitor.ReferencedClassVisitor: proguard.classfile.visitor.ClassVisitor classVisitor>;

        virtualinvoke $r2.<proguard.classfile.attribute.EnclosingMethodAttribute: void referencedClassAccept(proguard.classfile.visitor.ClassVisitor)>($r3);

        return;
    }

    public void visitEnumConstantElementValue(proguard.classfile.Clazz, proguard.classfile.attribute.'annotation'.Annotation, proguard.classfile.attribute.'annotation'.EnumConstantElementValue)
    {
        proguard.classfile.attribute.'annotation'.Annotation $r2;
        proguard.classfile.Clazz $r1;
        proguard.classfile.visitor.ClassVisitor $r4;
        proguard.classfile.attribute.'annotation'.EnumConstantElementValue $r3;
        proguard.classfile.visitor.ReferencedClassVisitor r0;

        r0 := @this: proguard.classfile.visitor.ReferencedClassVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.Annotation;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.EnumConstantElementValue;

        $r4 = r0.<proguard.classfile.visitor.ReferencedClassVisitor: proguard.classfile.visitor.ClassVisitor classVisitor>;

        virtualinvoke $r3.<proguard.classfile.attribute.'annotation'.EnumConstantElementValue: void referencedClassesAccept(proguard.classfile.visitor.ClassVisitor)>($r4);

        return;
    }

    public void visitLibraryClass(proguard.classfile.LibraryClass)
    {
        proguard.classfile.LibraryClass $r1;
        proguard.classfile.visitor.ReferencedClassVisitor r0;
        proguard.classfile.visitor.ClassVisitor $r2;

        r0 := @this: proguard.classfile.visitor.ReferencedClassVisitor;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        $r2 = r0.<proguard.classfile.visitor.ReferencedClassVisitor: proguard.classfile.visitor.ClassVisitor classVisitor>;

        virtualinvoke $r1.<proguard.classfile.LibraryClass: void superClassAccept(proguard.classfile.visitor.ClassVisitor)>($r2);

        $r2 = r0.<proguard.classfile.visitor.ReferencedClassVisitor: proguard.classfile.visitor.ClassVisitor classVisitor>;

        virtualinvoke $r1.<proguard.classfile.LibraryClass: void interfacesAccept(proguard.classfile.visitor.ClassVisitor)>($r2);

        virtualinvoke $r1.<proguard.classfile.LibraryClass: void fieldsAccept(proguard.classfile.visitor.MemberVisitor)>(r0);

        virtualinvoke $r1.<proguard.classfile.LibraryClass: void methodsAccept(proguard.classfile.visitor.MemberVisitor)>(r0);

        return;
    }

    public void visitLibraryMember(proguard.classfile.LibraryClass, proguard.classfile.LibraryMember)
    {
        proguard.classfile.LibraryClass $r1;
        proguard.classfile.visitor.ClassVisitor $r3;
        proguard.classfile.LibraryMember $r2;
        proguard.classfile.visitor.ReferencedClassVisitor r0;

        r0 := @this: proguard.classfile.visitor.ReferencedClassVisitor;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        $r2 := @parameter1: proguard.classfile.LibraryMember;

        $r3 = r0.<proguard.classfile.visitor.ReferencedClassVisitor: proguard.classfile.visitor.ClassVisitor classVisitor>;

        virtualinvoke $r2.<proguard.classfile.LibraryMember: void referencedClassesAccept(proguard.classfile.visitor.ClassVisitor)>($r3);

        return;
    }

    public void visitLocalVariableInfo(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LocalVariableInfo)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.visitor.ClassVisitor $r5;
        proguard.classfile.attribute.LocalVariableInfo $r4;
        proguard.classfile.Method $r2;
        proguard.classfile.visitor.ReferencedClassVisitor r0;

        r0 := @this: proguard.classfile.visitor.ReferencedClassVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.LocalVariableInfo;

        $r5 = r0.<proguard.classfile.visitor.ReferencedClassVisitor: proguard.classfile.visitor.ClassVisitor classVisitor>;

        virtualinvoke $r4.<proguard.classfile.attribute.LocalVariableInfo: void referencedClassAccept(proguard.classfile.visitor.ClassVisitor)>($r5);

        return;
    }

    public void visitLocalVariableTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LocalVariableTableAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.Method $r2;
        proguard.classfile.visitor.ReferencedClassVisitor r0;
        proguard.classfile.attribute.LocalVariableTableAttribute $r4;

        r0 := @this: proguard.classfile.visitor.ReferencedClassVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.LocalVariableTableAttribute;

        virtualinvoke $r4.<proguard.classfile.attribute.LocalVariableTableAttribute: void localVariablesAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.visitor.LocalVariableInfoVisitor)>($r1, $r2, $r3, r0);

        return;
    }

    public void visitLocalVariableTypeInfo(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LocalVariableTypeInfo)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.visitor.ClassVisitor $r5;
        proguard.classfile.Method $r2;
        proguard.classfile.visitor.ReferencedClassVisitor r0;
        proguard.classfile.attribute.LocalVariableTypeInfo $r4;

        r0 := @this: proguard.classfile.visitor.ReferencedClassVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.LocalVariableTypeInfo;

        $r5 = r0.<proguard.classfile.visitor.ReferencedClassVisitor: proguard.classfile.visitor.ClassVisitor classVisitor>;

        virtualinvoke $r4.<proguard.classfile.attribute.LocalVariableTypeInfo: void referencedClassesAccept(proguard.classfile.visitor.ClassVisitor)>($r5);

        return;
    }

    public void visitLocalVariableTypeTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LocalVariableTypeTableAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.Method $r2;
        proguard.classfile.visitor.ReferencedClassVisitor r0;
        proguard.classfile.attribute.LocalVariableTypeTableAttribute $r4;

        r0 := @this: proguard.classfile.visitor.ReferencedClassVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.LocalVariableTypeTableAttribute;

        virtualinvoke $r4.<proguard.classfile.attribute.LocalVariableTypeTableAttribute: void localVariablesAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.visitor.LocalVariableTypeInfoVisitor)>($r1, $r2, $r3, r0);

        return;
    }

    public void visitProgramClass(proguard.classfile.ProgramClass)
    {
        proguard.classfile.visitor.ReferencedClassVisitor r0;
        proguard.classfile.ProgramClass $r1;

        r0 := @this: proguard.classfile.visitor.ReferencedClassVisitor;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        virtualinvoke $r1.<proguard.classfile.ProgramClass: void constantPoolEntriesAccept(proguard.classfile.constant.visitor.ConstantVisitor)>(r0);

        virtualinvoke $r1.<proguard.classfile.ProgramClass: void fieldsAccept(proguard.classfile.visitor.MemberVisitor)>(r0);

        virtualinvoke $r1.<proguard.classfile.ProgramClass: void methodsAccept(proguard.classfile.visitor.MemberVisitor)>(r0);

        virtualinvoke $r1.<proguard.classfile.ProgramClass: void attributesAccept(proguard.classfile.attribute.visitor.AttributeVisitor)>(r0);

        return;
    }

    public void visitProgramMember(proguard.classfile.ProgramClass, proguard.classfile.ProgramMember)
    {
        proguard.classfile.ProgramMember $r2;
        proguard.classfile.visitor.ClassVisitor $r3;
        proguard.classfile.visitor.ReferencedClassVisitor r0;
        proguard.classfile.ProgramClass $r1;

        r0 := @this: proguard.classfile.visitor.ReferencedClassVisitor;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.ProgramMember;

        $r3 = r0.<proguard.classfile.visitor.ReferencedClassVisitor: proguard.classfile.visitor.ClassVisitor classVisitor>;

        virtualinvoke $r2.<proguard.classfile.ProgramMember: void referencedClassesAccept(proguard.classfile.visitor.ClassVisitor)>($r3);

        virtualinvoke $r2.<proguard.classfile.ProgramMember: void attributesAccept(proguard.classfile.ProgramClass,proguard.classfile.attribute.visitor.AttributeVisitor)>($r1, r0);

        return;
    }

    public void visitSignatureAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.SignatureAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.visitor.ClassVisitor $r3;
        proguard.classfile.attribute.SignatureAttribute $r2;
        proguard.classfile.visitor.ReferencedClassVisitor r0;

        r0 := @this: proguard.classfile.visitor.ReferencedClassVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.SignatureAttribute;

        $r3 = r0.<proguard.classfile.visitor.ReferencedClassVisitor: proguard.classfile.visitor.ClassVisitor classVisitor>;

        virtualinvoke $r2.<proguard.classfile.attribute.SignatureAttribute: void referencedClassesAccept(proguard.classfile.visitor.ClassVisitor)>($r3);

        return;
    }

    public void visitStringConstant(proguard.classfile.Clazz, proguard.classfile.constant.StringConstant)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.visitor.ClassVisitor $r3;
        proguard.classfile.constant.StringConstant $r2;
        proguard.classfile.visitor.ReferencedClassVisitor r0;

        r0 := @this: proguard.classfile.visitor.ReferencedClassVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.StringConstant;

        $r3 = r0.<proguard.classfile.visitor.ReferencedClassVisitor: proguard.classfile.visitor.ClassVisitor classVisitor>;

        virtualinvoke $r2.<proguard.classfile.constant.StringConstant: void referencedClassAccept(proguard.classfile.visitor.ClassVisitor)>($r3);

        return;
    }
}
