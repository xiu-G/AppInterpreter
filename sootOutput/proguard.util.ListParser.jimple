public class proguard.util.ListParser extends java.lang.Object implements proguard.util.StringParser
{
    private final proguard.util.StringParser stringParser;

    public void <init>(proguard.util.StringParser)
    {
        proguard.util.ListParser r0;
        proguard.util.StringParser $r1;

        r0 := @this: proguard.util.ListParser;

        $r1 := @parameter0: proguard.util.StringParser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<proguard.util.ListParser: proguard.util.StringParser stringParser> = $r1;

        return;
    }

    private boolean isNegated(java.lang.String)
    {
        proguard.util.ListParser r0;
        int $i0;
        char $c1;
        java.lang.String $r1;

        r0 := @this: proguard.util.ListParser;

        $r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        $c1 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(0);

        $i0 = (int) $c1;

        if $i0 != 33 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static void main(java.lang.String[])
    {
        java.io.PrintStream $r1;
        proguard.util.ListParser $r4;
        java.lang.String[] $r0;
        proguard.util.StringMatcher $r6;
        java.lang.Exception $r7;
        java.lang.StringBuffer $r2;
        int $i0, $i1;
        java.lang.String $r3;
        proguard.util.NameParser $r5;
        boolean $z0;

        $r0 := @parameter0: java.lang.String[];

        $r1 = <java.lang.System: java.io.PrintStream out>;

        $r2 = new java.lang.StringBuffer;

     label01:
        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Regular expression [");

        $r3 = $r0[0];

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r3);

     label02:
        $r4 = new proguard.util.ListParser;

        $r5 = new proguard.util.NameParser;

     label03:
        specialinvoke $r5.<proguard.util.NameParser: void <init>()>();

        specialinvoke $r4.<proguard.util.ListParser: void <init>(proguard.util.StringParser)>($r5);

        $r3 = $r0[0];

        $r6 = virtualinvoke $r4.<proguard.util.ListParser: proguard.util.StringMatcher parse(java.lang.String)>($r3);

     label04:
        $i0 = 1;

     label05:
        $i1 = lengthof $r0;

     label06:
        if $i0 >= $i1 goto label14;

     label07:
        $r3 = $r0[$i0];

     label08:
        $r1 = <java.lang.System: java.io.PrintStream out>;

        $r2 = new java.lang.StringBuffer;

     label09:
        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("String             [");

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void print(java.lang.String)>($r3);

     label10:
        $r1 = <java.lang.System: java.io.PrintStream out>;

        $r2 = new java.lang.StringBuffer;

     label11:
        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" -> match = ");

        $r3 = $r0[$i0];

        $z0 = interfaceinvoke $r6.<proguard.util.StringMatcher: boolean matches(java.lang.String)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>($z0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r3);

     label12:
        $i0 = $i0 + 1;

        goto label05;

     label13:
        $r7 := @caughtexception;

        virtualinvoke $r7.<java.lang.Exception: void printStackTrace()>();

     label14:
        return;

        catch java.lang.Exception from label01 to label02 with label13;
        catch java.lang.Exception from label03 to label04 with label13;
        catch java.lang.Exception from label05 to label06 with label13;
        catch java.lang.Exception from label07 to label08 with label13;
        catch java.lang.Exception from label09 to label10 with label13;
        catch java.lang.Exception from label11 to label12 with label13;
    }

    private proguard.util.StringMatcher parseEntry(java.lang.String)
    {
        proguard.util.ListParser r0;
        proguard.util.NotMatcher $r2;
        java.lang.String $r1;
        proguard.util.StringParser $r3;
        proguard.util.StringMatcher $r4;
        boolean $z0;

        r0 := @this: proguard.util.ListParser;

        $r1 := @parameter0: java.lang.String;

        $z0 = specialinvoke r0.<proguard.util.ListParser: boolean isNegated(java.lang.String)>($r1);

        if $z0 == 0 goto label1;

        $r2 = new proguard.util.NotMatcher;

        $r3 = r0.<proguard.util.ListParser: proguard.util.StringParser stringParser>;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>(1);

        $r4 = interfaceinvoke $r3.<proguard.util.StringParser: proguard.util.StringMatcher parse(java.lang.String)>($r1);

        specialinvoke $r2.<proguard.util.NotMatcher: void <init>(proguard.util.StringMatcher)>($r4);

        return $r2;

     label1:
        $r3 = r0.<proguard.util.ListParser: proguard.util.StringParser stringParser>;

        $r4 = interfaceinvoke $r3.<proguard.util.StringParser: proguard.util.StringMatcher parse(java.lang.String)>($r1);

        return $r4;
    }

    public proguard.util.StringMatcher parse(java.lang.String)
    {
        java.util.List $r2;
        proguard.util.ListParser r0;
        java.lang.String $r1;
        proguard.util.StringMatcher $r3;

        r0 := @this: proguard.util.ListParser;

        $r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <proguard.util.ListUtil: java.util.List commaSeparatedList(java.lang.String)>($r1);

        $r3 = virtualinvoke r0.<proguard.util.ListParser: proguard.util.StringMatcher parse(java.util.List)>($r2);

        return $r3;
    }

    public proguard.util.StringMatcher parse(java.util.List)
    {
        proguard.util.ListParser r0;
        proguard.util.StringMatcher $r2, $r5, $r6;
        proguard.util.AndMatcher $r7;
        java.util.List $r1;
        int $i0, $i1;
        java.lang.Object $r3;
        proguard.util.OrMatcher $r8;
        java.lang.String $r4;
        boolean $z0;
        proguard.util.ConstantMatcher $r9;

        r0 := @this: proguard.util.ListParser;

        $r1 := @parameter0: java.util.List;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i0 = $i0 - 1;

        $r2 = null;

     label1:
        if $i0 < 0 goto label5;

        $r3 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        $r4 = (java.lang.String) $r3;

        $r5 = specialinvoke r0.<proguard.util.ListParser: proguard.util.StringMatcher parseEntry(java.lang.String)>($r4);

        if $r2 != null goto label3;

        $r6 = $r5;

     label2:
        $i1 = -1;

        $i0 = $i0 + $i1;

        $r2 = $r6;

        goto label1;

     label3:
        $z0 = specialinvoke r0.<proguard.util.ListParser: boolean isNegated(java.lang.String)>($r4);

        if $z0 == 0 goto label4;

        $r7 = new proguard.util.AndMatcher;

        $r6 = $r7;

        specialinvoke $r7.<proguard.util.AndMatcher: void <init>(proguard.util.StringMatcher,proguard.util.StringMatcher)>($r5, $r2);

        goto label2;

     label4:
        $r8 = new proguard.util.OrMatcher;

        $r6 = $r8;

        specialinvoke $r8.<proguard.util.OrMatcher: void <init>(proguard.util.StringMatcher,proguard.util.StringMatcher)>($r5, $r2);

        goto label2;

     label5:
        if $r2 == null goto label6;

        return $r2;

     label6:
        $r9 = new proguard.util.ConstantMatcher;

        specialinvoke $r9.<proguard.util.ConstantMatcher: void <init>(boolean)>(1);

        return $r9;
    }
}
