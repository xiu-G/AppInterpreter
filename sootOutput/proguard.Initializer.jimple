public class proguard.Initializer extends java.lang.Object
{
    private final proguard.Configuration configuration;

    public void <init>(proguard.Configuration)
    {
        proguard.Configuration $r1;
        proguard.Initializer r0;

        r0 := @this: proguard.Initializer;

        $r1 := @parameter0: proguard.Configuration;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<proguard.Initializer: proguard.Configuration configuration> = $r1;

        return;
    }

    private proguard.util.StringMatcher createClassMemberNoteExceptionMatcher(java.util.List, boolean)
    {
        proguard.util.ListParser $r8;
        proguard.Initializer r1;
        proguard.KeepClassSpecification r4;
        proguard.util.StringMatcher $r10;
        java.util.ArrayList $r2;
        java.util.List $r0, $r5;
        proguard.util.ClassNameParser $r9;
        int $i0, $i1, $i2;
        java.lang.Object $r3;
        java.lang.String $r7;
        proguard.MemberSpecification r6;
        boolean $z0;

        r1 := @this: proguard.Initializer;

        $r0 := @parameter0: java.util.List;

        $z0 := @parameter1: boolean;

        if $r0 == null goto label8;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $i0 = 0;

     label1:
        $i1 = interfaceinvoke $r0.<java.util.List: int size()>();

        if $i0 >= $i1 goto label7;

        $r3 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>($i0);

        r4 = (proguard.KeepClassSpecification) $r3;

        if $z0 == 0 goto label5;

        $r5 = r4.<proguard.KeepClassSpecification: java.util.List fieldSpecifications>;

     label2:
        if $r5 == null goto label6;

        $i1 = 0;

     label3:
        $i2 = interfaceinvoke $r5.<java.util.List: int size()>();

        if $i1 >= $i2 goto label6;

        $r3 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>($i1);

        r6 = (proguard.MemberSpecification) $r3;

        $r7 = r6.<proguard.MemberSpecification: java.lang.String name>;

        if $r7 == null goto label4;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r7);

     label4:
        $i1 = $i1 + 1;

        goto label3;

     label5:
        $r5 = r4.<proguard.KeepClassSpecification: java.util.List methodSpecifications>;

        goto label2;

     label6:
        $i0 = $i0 + 1;

        goto label1;

     label7:
        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 <= 0 goto label8;

        $r8 = new proguard.util.ListParser;

        $r9 = new proguard.util.ClassNameParser;

        specialinvoke $r9.<proguard.util.ClassNameParser: void <init>()>();

        specialinvoke $r8.<proguard.util.ListParser: void <init>(proguard.util.StringParser)>($r9);

        $r10 = virtualinvoke $r8.<proguard.util.ListParser: proguard.util.StringMatcher parse(java.util.List)>($r2);

        return $r10;

     label8:
        return null;
    }

    private proguard.util.StringMatcher createClassNoteExceptionMatcher(java.util.List)
    {
        proguard.util.ListParser $r6;
        proguard.Initializer r1;
        proguard.KeepClassSpecification r4;
        proguard.util.StringMatcher $r8;
        java.util.ArrayList $r2;
        java.util.List $r0;
        proguard.util.ClassNameParser $r7;
        int $i0, $i1;
        java.lang.Object $r3;
        java.lang.String $r5;
        boolean $z0;

        r1 := @this: proguard.Initializer;

        $r0 := @parameter0: java.util.List;

        if $r0 == null goto label5;

        $r2 = new java.util.ArrayList;

        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>($i0);

        $i0 = 0;

     label1:
        $i1 = interfaceinvoke $r0.<java.util.List: int size()>();

        if $i0 >= $i1 goto label4;

        $r3 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>($i0);

        r4 = (proguard.KeepClassSpecification) $r3;

        $z0 = r4.<proguard.KeepClassSpecification: boolean markClasses>;

        if $z0 == 0 goto label3;

        $r5 = r4.<proguard.KeepClassSpecification: java.lang.String className>;

        if $r5 == null goto label2;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r5);

     label2:
        $r5 = r4.<proguard.KeepClassSpecification: java.lang.String extendsClassName>;

        if $r5 == null goto label3;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r5);

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 <= 0 goto label5;

        $r6 = new proguard.util.ListParser;

        $r7 = new proguard.util.ClassNameParser;

        specialinvoke $r7.<proguard.util.ClassNameParser: void <init>()>();

        specialinvoke $r6.<proguard.util.ListParser: void <init>(proguard.util.StringParser)>($r7);

        $r8 = virtualinvoke $r6.<proguard.util.ListParser: proguard.util.StringMatcher parse(java.util.List)>($r2);

        return $r8;

     label5:
        return null;
    }

    public void execute(proguard.classfile.ClassPool, proguard.classfile.ClassPool) throws java.io.IOException
    {
        proguard.Initializer r0;
        proguard.classfile.attribute.visitor.AllAttributeVisitor $r19;
        proguard.classfile.visitor.AllMethodVisitor $r18;
        proguard.classfile.ClassPool $r1, $r2, $r8;
        proguard.classfile.util.ClassSuperHierarchyInitializer $r12;
        proguard.classfile.util.DynamicClassReferenceInitializer $r21;
        proguard.classfile.util.StringReferenceInitializer $r27;
        boolean $z0;
        proguard.classfile.instruction.visitor.AllInstructionVisitor $r20;
        proguard.classfile.visitor.ClassNameFilter $r25;
        proguard.classfile.constant.visitor.AllConstantVisitor $r26;
        proguard.classfile.util.WarningPrinter $r3, $r4, $r5, $r6, $r9, $r13, $r28, $r29;
        proguard.classfile.visitor.ClassPoolFiller $r17;
        proguard.classfile.visitor.ClassVisitor[] $r35;
        proguard.util.StringMatcher $r22, $r24;
        java.util.List $r11;
        proguard.classfile.visitor.MultiClassVisitor $r34;
        proguard.Configuration $r7;
        proguard.classfile.util.ClassSubHierarchyInitializer $r36;
        proguard.classfile.visitor.ClassHierarchyTraveler $r32;
        proguard.DescriptorKeepChecker $r31;
        java.lang.StringBuffer $r38;
        int $i0, $i1, $i2, $i3;
        proguard.classfile.util.StringSharer $r37;
        java.lang.String $r39;
        proguard.classfile.util.DynamicMemberReferenceInitializer $r23;
        java.io.PrintStream $r10;
        proguard.classfile.util.ClassReferenceInitializer $r14;
        proguard.FullyQualifiedClassNameChecker $r30;
        java.io.IOException $r40;
        proguard.classfile.visitor.ReferencedClassVisitor $r15;
        proguard.classfile.visitor.LibraryClassFilter $r16, $r33;

        r0 := @this: proguard.Initializer;

        $r1 := @parameter0: proguard.classfile.ClassPool;

        $r2 := @parameter1: proguard.classfile.ClassPool;

        $i0 = virtualinvoke $r2.<proguard.classfile.ClassPool: int size()>();

        $r7 = r0.<proguard.Initializer: proguard.Configuration configuration>;

        $z0 = $r7.<proguard.Configuration: boolean useUniqueClassMemberNames>;

        if $z0 == 0 goto label14;

        $r8 = null;

     label01:
        $r9 = new proguard.classfile.util.WarningPrinter;

        $r10 = <java.lang.System: java.io.PrintStream err>;

        $r7 = r0.<proguard.Initializer: proguard.Configuration configuration>;

        $r11 = $r7.<proguard.Configuration: java.util.List warn>;

        specialinvoke $r9.<proguard.classfile.util.WarningPrinter: void <init>(java.io.PrintStream,java.util.List)>($r10, $r11);

        $r6 = new proguard.classfile.util.WarningPrinter;

        $r10 = <java.lang.System: java.io.PrintStream err>;

        $r7 = r0.<proguard.Initializer: proguard.Configuration configuration>;

        $r11 = $r7.<proguard.Configuration: java.util.List warn>;

        specialinvoke $r6.<proguard.classfile.util.WarningPrinter: void <init>(java.io.PrintStream,java.util.List)>($r10, $r11);

        $r12 = new proguard.classfile.util.ClassSuperHierarchyInitializer;

        specialinvoke $r12.<proguard.classfile.util.ClassSuperHierarchyInitializer: void <init>(proguard.classfile.ClassPool,proguard.classfile.ClassPool,proguard.classfile.util.WarningPrinter,proguard.classfile.util.WarningPrinter)>($r1, $r2, $r9, null);

        virtualinvoke $r1.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r12);

        $r12 = new proguard.classfile.util.ClassSuperHierarchyInitializer;

        specialinvoke $r12.<proguard.classfile.util.ClassSuperHierarchyInitializer: void <init>(proguard.classfile.ClassPool,proguard.classfile.ClassPool,proguard.classfile.util.WarningPrinter,proguard.classfile.util.WarningPrinter)>($r1, $r2, null, $r6);

        virtualinvoke $r2.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r12);

        $r13 = new proguard.classfile.util.WarningPrinter;

        $r10 = <java.lang.System: java.io.PrintStream err>;

        $r7 = r0.<proguard.Initializer: proguard.Configuration configuration>;

        $r11 = $r7.<proguard.Configuration: java.util.List warn>;

        specialinvoke $r13.<proguard.classfile.util.WarningPrinter: void <init>(java.io.PrintStream,java.util.List)>($r10, $r11);

        $r14 = new proguard.classfile.util.ClassReferenceInitializer;

        specialinvoke $r14.<proguard.classfile.util.ClassReferenceInitializer: void <init>(proguard.classfile.ClassPool,proguard.classfile.ClassPool,proguard.classfile.util.WarningPrinter,proguard.classfile.util.WarningPrinter,proguard.classfile.util.WarningPrinter)>($r1, $r2, $r9, $r13, null);

        virtualinvoke $r1.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r14);

        if $r8 == null goto label02;

        $r15 = new proguard.classfile.visitor.ReferencedClassVisitor;

        $r16 = new proguard.classfile.visitor.LibraryClassFilter;

        $r17 = new proguard.classfile.visitor.ClassPoolFiller;

        specialinvoke $r17.<proguard.classfile.visitor.ClassPoolFiller: void <init>(proguard.classfile.ClassPool)>($r8);

        specialinvoke $r16.<proguard.classfile.visitor.LibraryClassFilter: void <init>(proguard.classfile.visitor.ClassVisitor)>($r17);

        specialinvoke $r15.<proguard.classfile.visitor.ReferencedClassVisitor: void <init>(proguard.classfile.visitor.ClassVisitor)>($r16);

        virtualinvoke $r1.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r15);

        $r12 = new proguard.classfile.util.ClassSuperHierarchyInitializer;

        specialinvoke $r12.<proguard.classfile.util.ClassSuperHierarchyInitializer: void <init>(proguard.classfile.ClassPool,proguard.classfile.ClassPool,proguard.classfile.util.WarningPrinter,proguard.classfile.util.WarningPrinter)>($r1, $r2, $r9, null);

        virtualinvoke $r8.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r12);

     label02:
        $r3 = new proguard.classfile.util.WarningPrinter;

        $r10 = <java.lang.System: java.io.PrintStream out>;

        $r7 = r0.<proguard.Initializer: proguard.Configuration configuration>;

        $r11 = $r7.<proguard.Configuration: java.util.List note>;

        specialinvoke $r3.<proguard.classfile.util.WarningPrinter: void <init>(java.io.PrintStream,java.util.List)>($r10, $r11);

        $r4 = new proguard.classfile.util.WarningPrinter;

        $r10 = <java.lang.System: java.io.PrintStream out>;

        $r7 = r0.<proguard.Initializer: proguard.Configuration configuration>;

        $r11 = $r7.<proguard.Configuration: java.util.List note>;

        specialinvoke $r4.<proguard.classfile.util.WarningPrinter: void <init>(java.io.PrintStream,java.util.List)>($r10, $r11);

        $r18 = new proguard.classfile.visitor.AllMethodVisitor;

        $r19 = new proguard.classfile.attribute.visitor.AllAttributeVisitor;

        $r20 = new proguard.classfile.instruction.visitor.AllInstructionVisitor;

        $r21 = new proguard.classfile.util.DynamicClassReferenceInitializer;

        $r7 = r0.<proguard.Initializer: proguard.Configuration configuration>;

        $r11 = $r7.<proguard.Configuration: java.util.List keep>;

        $r22 = specialinvoke r0.<proguard.Initializer: proguard.util.StringMatcher createClassNoteExceptionMatcher(java.util.List)>($r11);

        specialinvoke $r21.<proguard.classfile.util.DynamicClassReferenceInitializer: void <init>(proguard.classfile.ClassPool,proguard.classfile.ClassPool,proguard.classfile.util.WarningPrinter,proguard.classfile.util.WarningPrinter,proguard.classfile.util.WarningPrinter,proguard.util.StringMatcher)>($r1, $r2, $r3, null, $r4, $r22);

        specialinvoke $r20.<proguard.classfile.instruction.visitor.AllInstructionVisitor: void <init>(proguard.classfile.instruction.visitor.InstructionVisitor)>($r21);

        specialinvoke $r19.<proguard.classfile.attribute.visitor.AllAttributeVisitor: void <init>(proguard.classfile.attribute.visitor.AttributeVisitor)>($r20);

        specialinvoke $r18.<proguard.classfile.visitor.AllMethodVisitor: void <init>(proguard.classfile.visitor.MemberVisitor)>($r19);

        virtualinvoke $r1.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r18);

        $r5 = new proguard.classfile.util.WarningPrinter;

        $r10 = <java.lang.System: java.io.PrintStream out>;

        $r7 = r0.<proguard.Initializer: proguard.Configuration configuration>;

        $r11 = $r7.<proguard.Configuration: java.util.List note>;

        specialinvoke $r5.<proguard.classfile.util.WarningPrinter: void <init>(java.io.PrintStream,java.util.List)>($r10, $r11);

        $r18 = new proguard.classfile.visitor.AllMethodVisitor;

        $r19 = new proguard.classfile.attribute.visitor.AllAttributeVisitor;

        $r20 = new proguard.classfile.instruction.visitor.AllInstructionVisitor;

        $r23 = new proguard.classfile.util.DynamicMemberReferenceInitializer;

        $r7 = r0.<proguard.Initializer: proguard.Configuration configuration>;

        $r11 = $r7.<proguard.Configuration: java.util.List keep>;

        $r22 = specialinvoke r0.<proguard.Initializer: proguard.util.StringMatcher createClassMemberNoteExceptionMatcher(java.util.List,boolean)>($r11, 1);

        $r7 = r0.<proguard.Initializer: proguard.Configuration configuration>;

        $r11 = $r7.<proguard.Configuration: java.util.List keep>;

        $r24 = specialinvoke r0.<proguard.Initializer: proguard.util.StringMatcher createClassMemberNoteExceptionMatcher(java.util.List,boolean)>($r11, 0);

        specialinvoke $r23.<proguard.classfile.util.DynamicMemberReferenceInitializer: void <init>(proguard.classfile.ClassPool,proguard.classfile.ClassPool,proguard.classfile.util.WarningPrinter,proguard.util.StringMatcher,proguard.util.StringMatcher)>($r1, $r2, $r5, $r22, $r24);

        specialinvoke $r20.<proguard.classfile.instruction.visitor.AllInstructionVisitor: void <init>(proguard.classfile.instruction.visitor.InstructionVisitor)>($r23);

        specialinvoke $r19.<proguard.classfile.attribute.visitor.AllAttributeVisitor: void <init>(proguard.classfile.attribute.visitor.AttributeVisitor)>($r20);

        specialinvoke $r18.<proguard.classfile.visitor.AllMethodVisitor: void <init>(proguard.classfile.visitor.MemberVisitor)>($r19);

        virtualinvoke $r1.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r18);

        $r7 = r0.<proguard.Initializer: proguard.Configuration configuration>;

        $r11 = $r7.<proguard.Configuration: java.util.List adaptClassStrings>;

        if $r11 == null goto label03;

        $r25 = new proguard.classfile.visitor.ClassNameFilter;

        $r7 = r0.<proguard.Initializer: proguard.Configuration configuration>;

        $r11 = $r7.<proguard.Configuration: java.util.List adaptClassStrings>;

        $r26 = new proguard.classfile.constant.visitor.AllConstantVisitor;

        $r27 = new proguard.classfile.util.StringReferenceInitializer;

        specialinvoke $r27.<proguard.classfile.util.StringReferenceInitializer: void <init>(proguard.classfile.ClassPool,proguard.classfile.ClassPool)>($r1, $r2);

        specialinvoke $r26.<proguard.classfile.constant.visitor.AllConstantVisitor: void <init>(proguard.classfile.constant.visitor.ConstantVisitor)>($r27);

        specialinvoke $r25.<proguard.classfile.visitor.ClassNameFilter: void <init>(java.util.List,proguard.classfile.visitor.ClassVisitor)>($r11, $r26);

        virtualinvoke $r1.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r25);

     label03:
        $r28 = new proguard.classfile.util.WarningPrinter;

        $r10 = <java.lang.System: java.io.PrintStream out>;

        $r7 = r0.<proguard.Initializer: proguard.Configuration configuration>;

        $r11 = $r7.<proguard.Configuration: java.util.List note>;

        specialinvoke $r28.<proguard.classfile.util.WarningPrinter: void <init>(java.io.PrintStream,java.util.List)>($r10, $r11);

        $r29 = new proguard.classfile.util.WarningPrinter;

        $r10 = <java.lang.System: java.io.PrintStream out>;

        $r7 = r0.<proguard.Initializer: proguard.Configuration configuration>;

        $r11 = $r7.<proguard.Configuration: java.util.List note>;

        specialinvoke $r29.<proguard.classfile.util.WarningPrinter: void <init>(java.io.PrintStream,java.util.List)>($r10, $r11);

        $r30 = new proguard.FullyQualifiedClassNameChecker;

        specialinvoke $r30.<proguard.FullyQualifiedClassNameChecker: void <init>(proguard.classfile.ClassPool,proguard.classfile.ClassPool,proguard.classfile.util.WarningPrinter)>($r1, $r2, $r28);

        $r7 = r0.<proguard.Initializer: proguard.Configuration configuration>;

        $r11 = $r7.<proguard.Configuration: java.util.List keep>;

        virtualinvoke $r30.<proguard.FullyQualifiedClassNameChecker: void checkClassSpecifications(java.util.List)>($r11);

        $r31 = new proguard.DescriptorKeepChecker;

        specialinvoke $r31.<proguard.DescriptorKeepChecker: void <init>(proguard.classfile.ClassPool,proguard.classfile.ClassPool,proguard.classfile.util.WarningPrinter)>($r1, $r2, $r29);

        $r7 = r0.<proguard.Initializer: proguard.Configuration configuration>;

        $r11 = $r7.<proguard.Configuration: java.util.List keep>;

        virtualinvoke $r31.<proguard.DescriptorKeepChecker: void checkClassSpecifications(java.util.List)>($r11);

        if $r8 == null goto label15;

        $r15 = new proguard.classfile.visitor.ReferencedClassVisitor;

        $r16 = new proguard.classfile.visitor.LibraryClassFilter;

        $r32 = new proguard.classfile.visitor.ClassHierarchyTraveler;

        $r33 = new proguard.classfile.visitor.LibraryClassFilter;

        $r17 = new proguard.classfile.visitor.ClassPoolFiller;

        specialinvoke $r17.<proguard.classfile.visitor.ClassPoolFiller: void <init>(proguard.classfile.ClassPool)>($r8);

        specialinvoke $r33.<proguard.classfile.visitor.LibraryClassFilter: void <init>(proguard.classfile.visitor.ClassVisitor)>($r17);

        specialinvoke $r32.<proguard.classfile.visitor.ClassHierarchyTraveler: void <init>(boolean,boolean,boolean,boolean,proguard.classfile.visitor.ClassVisitor)>(1, 1, 1, 0, $r33);

        specialinvoke $r16.<proguard.classfile.visitor.LibraryClassFilter: void <init>(proguard.classfile.visitor.ClassVisitor)>($r32);

        specialinvoke $r15.<proguard.classfile.visitor.ReferencedClassVisitor: void <init>(proguard.classfile.visitor.ClassVisitor)>($r16);

        virtualinvoke $r1.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r15);

        $r14 = new proguard.classfile.util.ClassReferenceInitializer;

        specialinvoke $r14.<proguard.classfile.util.ClassReferenceInitializer: void <init>(proguard.classfile.ClassPool,proguard.classfile.ClassPool,proguard.classfile.util.WarningPrinter,proguard.classfile.util.WarningPrinter,proguard.classfile.util.WarningPrinter)>($r1, $r2, null, null, $r6);

        virtualinvoke $r8.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r14);

        virtualinvoke $r2.<proguard.classfile.ClassPool: void clear()>();

        $r34 = new proguard.classfile.visitor.MultiClassVisitor;

        $r35 = newarray (proguard.classfile.visitor.ClassVisitor)[2];

        $r32 = new proguard.classfile.visitor.ClassHierarchyTraveler;

        $r16 = new proguard.classfile.visitor.LibraryClassFilter;

        $r17 = new proguard.classfile.visitor.ClassPoolFiller;

        specialinvoke $r17.<proguard.classfile.visitor.ClassPoolFiller: void <init>(proguard.classfile.ClassPool)>($r2);

        specialinvoke $r16.<proguard.classfile.visitor.LibraryClassFilter: void <init>(proguard.classfile.visitor.ClassVisitor)>($r17);

        specialinvoke $r32.<proguard.classfile.visitor.ClassHierarchyTraveler: void <init>(boolean,boolean,boolean,boolean,proguard.classfile.visitor.ClassVisitor)>(1, 1, 1, 0, $r16);

        $r35[0] = $r32;

        $r15 = new proguard.classfile.visitor.ReferencedClassVisitor;

        $r16 = new proguard.classfile.visitor.LibraryClassFilter;

        $r32 = new proguard.classfile.visitor.ClassHierarchyTraveler;

        $r33 = new proguard.classfile.visitor.LibraryClassFilter;

        $r17 = new proguard.classfile.visitor.ClassPoolFiller;

        specialinvoke $r17.<proguard.classfile.visitor.ClassPoolFiller: void <init>(proguard.classfile.ClassPool)>($r2);

        specialinvoke $r33.<proguard.classfile.visitor.LibraryClassFilter: void <init>(proguard.classfile.visitor.ClassVisitor)>($r17);

        specialinvoke $r32.<proguard.classfile.visitor.ClassHierarchyTraveler: void <init>(boolean,boolean,boolean,boolean,proguard.classfile.visitor.ClassVisitor)>(1, 1, 1, 0, $r33);

        specialinvoke $r16.<proguard.classfile.visitor.LibraryClassFilter: void <init>(proguard.classfile.visitor.ClassVisitor)>($r32);

        specialinvoke $r15.<proguard.classfile.visitor.ReferencedClassVisitor: void <init>(proguard.classfile.visitor.ClassVisitor)>($r16);

        $r35[1] = $r15;

        specialinvoke $r34.<proguard.classfile.visitor.MultiClassVisitor: void <init>(proguard.classfile.visitor.ClassVisitor[])>($r35);

        virtualinvoke $r8.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r34);

     label04:
        $r36 = new proguard.classfile.util.ClassSubHierarchyInitializer;

        specialinvoke $r36.<proguard.classfile.util.ClassSubHierarchyInitializer: void <init>()>();

        virtualinvoke $r1.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r36);

        $r36 = new proguard.classfile.util.ClassSubHierarchyInitializer;

        specialinvoke $r36.<proguard.classfile.util.ClassSubHierarchyInitializer: void <init>()>();

        virtualinvoke $r2.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r36);

        $r37 = new proguard.classfile.util.StringSharer;

        specialinvoke $r37.<proguard.classfile.util.StringSharer: void <init>()>();

        virtualinvoke $r1.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r37);

        $r37 = new proguard.classfile.util.StringSharer;

        specialinvoke $r37.<proguard.classfile.util.StringSharer: void <init>()>();

        virtualinvoke $r2.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r37);

        $i1 = virtualinvoke $r28.<proguard.classfile.util.WarningPrinter: int getWarningCount()>();

        if $i1 <= 0 goto label05;

        $r10 = <java.lang.System: java.io.PrintStream out>;

        $r38 = new java.lang.StringBuffer;

        specialinvoke $r38.<java.lang.StringBuffer: void <init>()>();

        $r38 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Note: there were ");

        $r38 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r38 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" references to unknown classes.");

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r39);

        $r10 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("      You should check your configuration for typos.");

     label05:
        $i1 = virtualinvoke $r29.<proguard.classfile.util.WarningPrinter: int getWarningCount()>();

        if $i1 <= 0 goto label06;

        $r10 = <java.lang.System: java.io.PrintStream out>;

        $r38 = new java.lang.StringBuffer;

        specialinvoke $r38.<java.lang.StringBuffer: void <init>()>();

        $r38 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Note: there were ");

        $r38 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r38 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" unkept descriptor classes in kept class members.");

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r39);

        $r10 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("      You should consider explicitly keeping the mentioned classes");

        $r10 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("      (using \'-keep\').");

     label06:
        $i1 = virtualinvoke $r3.<proguard.classfile.util.WarningPrinter: int getWarningCount()>();

        if $i1 <= 0 goto label07;

        $r10 = <java.lang.System: java.io.PrintStream out>;

        $r38 = new java.lang.StringBuffer;

        specialinvoke $r38.<java.lang.StringBuffer: void <init>()>();

        $r38 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Note: there were ");

        $r38 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r38 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" unresolved dynamic references to classes or interfaces.");

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r39);

        $r10 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("      You should check if you need to specify additional program jars.");

     label07:
        $i1 = virtualinvoke $r4.<proguard.classfile.util.WarningPrinter: int getWarningCount()>();

        if $i1 <= 0 goto label08;

        $r10 = <java.lang.System: java.io.PrintStream out>;

        $r38 = new java.lang.StringBuffer;

        specialinvoke $r38.<java.lang.StringBuffer: void <init>()>();

        $r38 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Note: there were ");

        $r38 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r38 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" class casts of dynamically created class instances.");

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r39);

        $r10 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("      You might consider explicitly keeping the mentioned classes and/or");

        $r10 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("      their implementations (using \'-keep\').");

     label08:
        $i1 = virtualinvoke $r5.<proguard.classfile.util.WarningPrinter: int getWarningCount()>();

        if $i1 <= 0 goto label09;

        $r10 = <java.lang.System: java.io.PrintStream out>;

        $r38 = new java.lang.StringBuffer;

        specialinvoke $r38.<java.lang.StringBuffer: void <init>()>();

        $r38 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Note: there were ");

        $r38 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r38 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" accesses to class members by means of introspection.");

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r39);

        $r10 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("      You should consider explicitly keeping the mentioned class members");

        $r10 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("      (using \'-keep\' or \'-keepclassmembers\').");

     label09:
        $i1 = virtualinvoke $r9.<proguard.classfile.util.WarningPrinter: int getWarningCount()>();

        if $i1 <= 0 goto label10;

        $r10 = <java.lang.System: java.io.PrintStream err>;

        $r38 = new java.lang.StringBuffer;

        specialinvoke $r38.<java.lang.StringBuffer: void <init>()>();

        $r38 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Warning: there were ");

        $r38 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r38 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" unresolved references to classes or interfaces.");

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r39);

        $r10 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("         You may need to specify additional library jars (using \'-libraryjars\').");

        $r7 = r0.<proguard.Initializer: proguard.Configuration configuration>;

        $z0 = $r7.<proguard.Configuration: boolean skipNonPublicLibraryClasses>;

        if $z0 == 0 goto label10;

        $r10 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("         You may also have to remove the option \'-skipnonpubliclibraryclasses\'.");

     label10:
        $i2 = virtualinvoke $r6.<proguard.classfile.util.WarningPrinter: int getWarningCount()>();

        if $i2 <= 0 goto label11;

        $r10 = <java.lang.System: java.io.PrintStream err>;

        $r38 = new java.lang.StringBuffer;

        specialinvoke $r38.<java.lang.StringBuffer: void <init>()>();

        $r38 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Warning: there were ");

        $r38 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        $r38 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" instances of library classes depending on program classes.");

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r39);

        $r10 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("         You must avoid such dependencies, since the program classes will");

        $r10 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("         be processed, while the library classes will remain unchanged.");

     label11:
        $i3 = virtualinvoke $r13.<proguard.classfile.util.WarningPrinter: int getWarningCount()>();

        if $i3 <= 0 goto label12;

        $r10 = <java.lang.System: java.io.PrintStream err>;

        $r38 = new java.lang.StringBuffer;

        specialinvoke $r38.<java.lang.StringBuffer: void <init>()>();

        $r38 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Warning: there were ");

        $r38 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3);

        $r38 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" unresolved references to program class members.");

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r39);

        $r10 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("         Your input classes appear to be inconsistent.");

        $r10 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("         You may need to recompile them and try again.");

        $r10 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("         Alternatively, you may have to specify the option ");

        $r10 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("         \'-dontskipnonpubliclibraryclassmembers\'.");

        $r7 = r0.<proguard.Initializer: proguard.Configuration configuration>;

        $z0 = $r7.<proguard.Configuration: boolean skipNonPublicLibraryClasses>;

        if $z0 == 0 goto label12;

        $r10 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("         You may also have to remove the option \'-skipnonpubliclibraryclasses\'.");

     label12:
        if $i1 > 0 goto label13;

        if $i2 > 0 goto label13;

        if $i3 <= 0 goto label16;

     label13:
        $r7 = r0.<proguard.Initializer: proguard.Configuration configuration>;

        $z0 = $r7.<proguard.Configuration: boolean ignoreWarnings>;

        if $z0 != 0 goto label16;

        $r40 = new java.io.IOException;

        specialinvoke $r40.<java.io.IOException: void <init>(java.lang.String)>("Please correct the above warnings first.");

        throw $r40;

     label14:
        $r8 = new proguard.classfile.ClassPool;

        specialinvoke $r8.<proguard.classfile.ClassPool: void <init>()>();

        goto label01;

     label15:
        $r14 = new proguard.classfile.util.ClassReferenceInitializer;

        specialinvoke $r14.<proguard.classfile.util.ClassReferenceInitializer: void <init>(proguard.classfile.ClassPool,proguard.classfile.ClassPool,proguard.classfile.util.WarningPrinter,proguard.classfile.util.WarningPrinter,proguard.classfile.util.WarningPrinter)>($r1, $r2, null, null, $r6);

        virtualinvoke $r2.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r14);

        goto label04;

     label16:
        $r7 = r0.<proguard.Initializer: proguard.Configuration configuration>;

        $r11 = $r7.<proguard.Configuration: java.util.List note>;

        if $r11 == null goto label17;

        $r7 = r0.<proguard.Initializer: proguard.Configuration configuration>;

        $r11 = $r7.<proguard.Configuration: java.util.List note>;

        $z0 = interfaceinvoke $r11.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label20;

     label17:
        $r7 = r0.<proguard.Initializer: proguard.Configuration configuration>;

        $r11 = $r7.<proguard.Configuration: java.util.List warn>;

        if $r11 == null goto label18;

        $r7 = r0.<proguard.Initializer: proguard.Configuration configuration>;

        $r11 = $r7.<proguard.Configuration: java.util.List warn>;

        $z0 = interfaceinvoke $r11.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label19;

     label18:
        $r7 = r0.<proguard.Initializer: proguard.Configuration configuration>;

        $z0 = $r7.<proguard.Configuration: boolean ignoreWarnings>;

        if $z0 == 0 goto label20;

     label19:
        $r10 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("Note: You\'re ignoring all warnings!");

     label20:
        $r7 = r0.<proguard.Initializer: proguard.Configuration configuration>;

        $z0 = $r7.<proguard.Configuration: boolean verbose>;

        if $z0 == 0 goto label21;

        $r10 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("Ignoring unused library classes...");

        $r10 = <java.lang.System: java.io.PrintStream out>;

        $r38 = new java.lang.StringBuffer;

        specialinvoke $r38.<java.lang.StringBuffer: void <init>()>();

        $r38 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Original number of library classes: ");

        $r38 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r39);

        $r10 = <java.lang.System: java.io.PrintStream out>;

        $r38 = new java.lang.StringBuffer;

        specialinvoke $r38.<java.lang.StringBuffer: void <init>()>();

        $r38 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Final number of library classes:    ");

        $i0 = virtualinvoke $r2.<proguard.classfile.ClassPool: int size()>();

        $r38 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r39);

     label21:
        return;
    }
}
