public abstract class com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache extends java.lang.Object implements com.nostra13.universalimageloader.cache.disc.DiskCache
{
    public static final int DEFAULT_BUFFER_SIZE;
    public static final android.graphics.Bitmap$CompressFormat DEFAULT_COMPRESS_FORMAT;
    public static final int DEFAULT_COMPRESS_QUALITY;
    private static final java.lang.String ERROR_ARG_NULL;
    private static final java.lang.String TEMP_IMAGE_POSTFIX;
    protected int bufferSize;
    protected final java.io.File cacheDir;
    protected android.graphics.Bitmap$CompressFormat compressFormat;
    protected int compressQuality;
    protected final com.nostra13.universalimageloader.cache.disc.naming.FileNameGenerator fileNameGenerator;
    protected final java.io.File reserveCacheDir;

    static void <clinit>()
    {
        android.graphics.Bitmap$CompressFormat $r0;

        <com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache: java.lang.String TEMP_IMAGE_POSTFIX> = ".tmp";

        <com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache: java.lang.String ERROR_ARG_NULL> = " argument must be not null";

        <com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache: int DEFAULT_COMPRESS_QUALITY> = 100;

        <com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache: int DEFAULT_BUFFER_SIZE> = 32768;

        $r0 = <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat PNG>;

        <com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache: android.graphics.Bitmap$CompressFormat DEFAULT_COMPRESS_FORMAT> = $r0;

        return;
    }

    public void <init>(java.io.File)
    {
        com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache r0;
        java.io.File $r1;

        r0 := @this: com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache;

        $r1 := @parameter0: java.io.File;

        specialinvoke r0.<com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache: void <init>(java.io.File,java.io.File)>($r1, null);

        return;
    }

    public void <init>(java.io.File, java.io.File)
    {
        com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache r0;
        com.nostra13.universalimageloader.cache.disc.naming.FileNameGenerator $r3;
        java.io.File $r1, $r2;

        r0 := @this: com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache;

        $r1 := @parameter0: java.io.File;

        $r2 := @parameter1: java.io.File;

        $r3 = staticinvoke <com.nostra13.universalimageloader.core.DefaultConfigurationFactory: com.nostra13.universalimageloader.cache.disc.naming.FileNameGenerator createFileNameGenerator()>();

        specialinvoke r0.<com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache: void <init>(java.io.File,java.io.File,com.nostra13.universalimageloader.cache.disc.naming.FileNameGenerator)>($r1, $r2, $r3);

        return;
    }

    public void <init>(java.io.File, java.io.File, com.nostra13.universalimageloader.cache.disc.naming.FileNameGenerator)
    {
        com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache r0;
        com.nostra13.universalimageloader.cache.disc.naming.FileNameGenerator $r3;
        android.graphics.Bitmap$CompressFormat $r4;
        java.lang.IllegalArgumentException $r5;
        java.io.File $r1, $r2;

        r0 := @this: com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache;

        $r1 := @parameter0: java.io.File;

        $r2 := @parameter1: java.io.File;

        $r3 := @parameter2: com.nostra13.universalimageloader.cache.disc.naming.FileNameGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache: int bufferSize> = 32768;

        $r4 = <com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache: android.graphics.Bitmap$CompressFormat DEFAULT_COMPRESS_FORMAT>;

        r0.<com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache: android.graphics.Bitmap$CompressFormat compressFormat> = $r4;

        r0.<com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache: int compressQuality> = 100;

        if $r1 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("cacheDir argument must be not null");

        throw $r5;

     label1:
        if $r3 != null goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("fileNameGenerator argument must be not null");

        throw $r5;

     label2:
        r0.<com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache: java.io.File cacheDir> = $r1;

        r0.<com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache: java.io.File reserveCacheDir> = $r2;

        r0.<com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache: com.nostra13.universalimageloader.cache.disc.naming.FileNameGenerator fileNameGenerator> = $r3;

        return;
    }

    public void clear()
    {
        com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache r0;
        int $i0, $i1;
        java.io.File[] $r2;
        java.io.File $r1;

        r0 := @this: com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache;

        $r1 = r0.<com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache: java.io.File cacheDir>;

        $r2 = virtualinvoke $r1.<java.io.File: java.io.File[] listFiles()>();

        if $r2 == null goto label2;

        $i0 = lengthof $r2;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r1 = $r2[$i1];

        virtualinvoke $r1.<java.io.File: boolean delete()>();

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void close()
    {
        com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache r0;

        r0 := @this: com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache;

        return;
    }

    public java.io.File get(java.lang.String)
    {
        java.lang.String $r1;
        com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache r0;
        java.io.File $r2;

        r0 := @this: com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache: java.io.File getFile(java.lang.String)>($r1);

        return $r2;
    }

    public java.io.File getDirectory()
    {
        com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache r0;
        java.io.File r1;

        r0 := @this: com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache;

        r1 = r0.<com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache: java.io.File cacheDir>;

        return r1;
    }

    protected java.io.File getFile(java.lang.String)
    {
        com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache r0;
        com.nostra13.universalimageloader.cache.disc.naming.FileNameGenerator $r2;
        java.lang.String $r1;
        java.io.File $r3, $r4;
        boolean $z0;

        r0 := @this: com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache: com.nostra13.universalimageloader.cache.disc.naming.FileNameGenerator fileNameGenerator>;

        $r1 = interfaceinvoke $r2.<com.nostra13.universalimageloader.cache.disc.naming.FileNameGenerator: java.lang.String generate(java.lang.String)>($r1);

        $r3 = r0.<com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache: java.io.File cacheDir>;

        $r4 = r0.<com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache: java.io.File cacheDir>;

        $z0 = virtualinvoke $r4.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label2;

        $r4 = r0.<com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache: java.io.File cacheDir>;

        $z0 = virtualinvoke $r4.<java.io.File: boolean mkdirs()>();

        if $z0 != 0 goto label2;

        $r4 = r0.<com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache: java.io.File reserveCacheDir>;

        if $r4 == null goto label2;

        $r4 = r0.<com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache: java.io.File reserveCacheDir>;

        $z0 = virtualinvoke $r4.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        $r4 = r0.<com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache: java.io.File reserveCacheDir>;

        $z0 = virtualinvoke $r4.<java.io.File: boolean mkdirs()>();

        if $z0 == 0 goto label2;

     label1:
        $r3 = r0.<com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache: java.io.File reserveCacheDir>;

     label2:
        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, $r1);

        return $r4;
    }

    public boolean remove(java.lang.String)
    {
        com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache r0;
        java.lang.String $r1;
        java.io.File $r2;
        boolean $z0;

        r0 := @this: com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache: java.io.File getFile(java.lang.String)>($r1);

        $z0 = virtualinvoke $r2.<java.io.File: boolean delete()>();

        return $z0;
    }

    public boolean save(java.lang.String, android.graphics.Bitmap)
    {
        java.lang.Throwable $r9;
        com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache r0;
        java.io.FileOutputStream $r7;
        java.io.File $r3, $r4;
        java.io.BufferedOutputStream $r6;
        android.graphics.Bitmap $r2;
        int $i0;
        java.lang.StringBuilder $r5;
        android.graphics.Bitmap$CompressFormat $r8;
        java.lang.String $r1;
        boolean $z0, $z1;

        r0 := @this: com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: android.graphics.Bitmap;

        $r4 = virtualinvoke r0.<com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache: java.io.File getFile(java.lang.String)>($r1);

        $r3 = new java.io.File;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r4.<java.io.File: java.lang.String getAbsolutePath()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".tmp");

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>($r1);

        $r6 = new java.io.BufferedOutputStream;

        $r7 = new java.io.FileOutputStream;

        specialinvoke $r7.<java.io.FileOutputStream: void <init>(java.io.File)>($r3);

        $i0 = r0.<com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache: int bufferSize>;

        specialinvoke $r6.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream,int)>($r7, $i0);

     label1:
        $r8 = r0.<com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache: android.graphics.Bitmap$CompressFormat compressFormat>;

        $i0 = r0.<com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache: int compressQuality>;

        $z0 = virtualinvoke $r2.<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>($r8, $i0, $r6);

     label2:
        $z1 = $z0;

        staticinvoke <com.nostra13.universalimageloader.utils.IoUtils: void closeSilently(java.io.Closeable)>($r6);

        if $z0 == 0 goto label3;

        $z0 = virtualinvoke $r3.<java.io.File: boolean renameTo(java.io.File)>($r4);

        if $z0 != 0 goto label3;

        $z1 = 0;

     label3:
        if $z1 != 0 goto label4;

        virtualinvoke $r3.<java.io.File: boolean delete()>();

     label4:
        virtualinvoke $r2.<android.graphics.Bitmap: void recycle()>();

        return $z1;

     label5:
        $r9 := @caughtexception;

        staticinvoke <com.nostra13.universalimageloader.utils.IoUtils: void closeSilently(java.io.Closeable)>($r6);

        virtualinvoke $r3.<java.io.File: boolean delete()>();

        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label5;
    }

    public boolean save(java.lang.String, java.io.InputStream, com.nostra13.universalimageloader.utils.IoUtils$CopyListener)
    {
        java.lang.Throwable $r9, $r10;
        com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache r0;
        com.nostra13.universalimageloader.utils.IoUtils$CopyListener $r3;
        java.io.FileOutputStream $r8;
        java.io.File $r4, $r6;
        java.io.BufferedOutputStream $r5;
        int $i0;
        java.lang.StringBuilder $r7;
        java.lang.String $r1;
        java.io.InputStream $r2;
        boolean $z0, $z1;

        r0 := @this: com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.io.InputStream;

        $r3 := @parameter2: com.nostra13.universalimageloader.utils.IoUtils$CopyListener;

        $r6 = virtualinvoke r0.<com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache: java.io.File getFile(java.lang.String)>($r1);

        $r4 = new java.io.File;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r6.<java.io.File: java.lang.String getAbsolutePath()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".tmp");

        $r1 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>($r1);

     label01:
        $r5 = new java.io.BufferedOutputStream;

        $r8 = new java.io.FileOutputStream;

        specialinvoke $r8.<java.io.FileOutputStream: void <init>(java.io.File)>($r4);

        $i0 = r0.<com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache: int bufferSize>;

        specialinvoke $r5.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream,int)>($r8, $i0);

     label02:
        $i0 = r0.<com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache: int bufferSize>;

        $z0 = staticinvoke <com.nostra13.universalimageloader.utils.IoUtils: boolean copyStream(java.io.InputStream,java.io.OutputStream,com.nostra13.universalimageloader.utils.IoUtils$CopyListener,int)>($r2, $r5, $r3, $i0);

     label03:
        $z1 = $z0;

     label04:
        staticinvoke <com.nostra13.universalimageloader.utils.IoUtils: void closeSilently(java.io.Closeable)>($r5);

     label05:
        staticinvoke <com.nostra13.universalimageloader.utils.IoUtils: void closeSilently(java.io.Closeable)>($r2);

        if $z0 == 0 goto label06;

        $z0 = virtualinvoke $r4.<java.io.File: boolean renameTo(java.io.File)>($r6);

        if $z0 != 0 goto label06;

        $z1 = 0;

     label06:
        if $z1 != 0 goto label14;

        virtualinvoke $r4.<java.io.File: boolean delete()>();

        return $z1;

     label07:
        $r9 := @caughtexception;

     label08:
        staticinvoke <com.nostra13.universalimageloader.utils.IoUtils: void closeSilently(java.io.Closeable)>($r5);

        throw $r9;

     label09:
        $r10 := @caughtexception;

        $z1 = 0;

     label10:
        staticinvoke <com.nostra13.universalimageloader.utils.IoUtils: void closeSilently(java.io.Closeable)>($r2);

        if $z1 == 0 goto label11;

        $z0 = virtualinvoke $r4.<java.io.File: boolean renameTo(java.io.File)>($r6);

        if $z0 != 0 goto label11;

        $z1 = 0;

     label11:
        if $z1 != 0 goto label12;

        virtualinvoke $r4.<java.io.File: boolean delete()>();

     label12:
        throw $r10;

     label13:
        $r10 := @caughtexception;

        goto label10;

     label14:
        return $z1;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label02 to label03 with label07;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Throwable from label08 to label09 with label09;
    }

    public void setBufferSize(int)
    {
        int $i0;
        com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache r0;

        r0 := @this: com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache;

        $i0 := @parameter0: int;

        r0.<com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache: int bufferSize> = $i0;

        return;
    }

    public void setCompressFormat(android.graphics.Bitmap$CompressFormat)
    {
        android.graphics.Bitmap$CompressFormat $r1;
        com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache r0;

        r0 := @this: com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache;

        $r1 := @parameter0: android.graphics.Bitmap$CompressFormat;

        r0.<com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache: android.graphics.Bitmap$CompressFormat compressFormat> = $r1;

        return;
    }

    public void setCompressQuality(int)
    {
        int $i0;
        com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache r0;

        r0 := @this: com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache;

        $i0 := @parameter0: int;

        r0.<com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache: int compressQuality> = $i0;

        return;
    }
}
