public class cn.sharesdk.framework.utils.a extends java.lang.Object
{
    private static cn.sharesdk.framework.utils.d a;

    static void <clinit>()
    {
        cn.sharesdk.framework.utils.d $r0;

        $r0 = new cn.sharesdk.framework.utils.d;

        specialinvoke $r0.<cn.sharesdk.framework.utils.d: void <init>()>();

        <cn.sharesdk.framework.utils.a: cn.sharesdk.framework.utils.d a> = $r0;

        return;
    }

    public static java.lang.String a(byte[])
    {
        int $i0;
        byte[] $r0;
        java.lang.String $r1;

        $r0 := @parameter0: byte[];

        $i0 = lengthof $r0;

        $r1 = staticinvoke <cn.sharesdk.framework.utils.a: java.lang.String a(byte[],int,int)>($r0, 0, $i0);

        return $r1;
    }

    public static java.lang.String a(byte[], int, int)
    {
        byte[] $r0;
        java.lang.Object[] $r2;
        byte $b2;
        java.lang.StringBuffer $r1;
        int $i0, $i1;
        java.lang.String $r4;
        java.lang.Byte $r3;

        $r0 := @parameter0: byte[];

        $i1 := @parameter1: int;

        $i0 := @parameter2: int;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

     label1:
        if $i1 >= $i0 goto label2;

        $r2 = newarray (java.lang.Object)[1];

        $b2 = $r0[$i1];

        $r3 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b2);

        $r2[0] = $r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%02x", $r2);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    public static byte[] a(java.lang.String)
    {
        byte[] $r1;
        java.lang.String $r0;
        java.security.MessageDigest $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke $r0.<java.lang.String: byte[] getBytes(java.lang.String)>("utf-8");

        $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA-1");

        virtualinvoke $r2.<java.security.MessageDigest: void update(byte[])>($r1);

        $r1 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest()>();

        return $r1;
    }

    public static byte[] a(java.lang.String, java.lang.String)
    {
        byte[] $r2, $r3;
        int $i0;
        javax.crypto.spec.SecretKeySpec $r4;
        java.lang.String $r0, $r1;
        javax.crypto.Cipher $r5;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke $r0.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        $r3 = newarray (byte)[16];

        $i0 = lengthof $r2;

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, 16);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r3, 0, $i0);

        $r2 = virtualinvoke $r1.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        $r4 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, "AES");

        $r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>("AES/ECB/PKCS7Padding", "BC");

        virtualinvoke $r5.<javax.crypto.Cipher: void init(int,java.security.Key)>(1, $r4);

        $i0 = lengthof $r2;

        $i0 = virtualinvoke $r5.<javax.crypto.Cipher: int getOutputSize(int)>($i0);

        $r3 = newarray (byte)[$i0];

        $i0 = lengthof $r2;

        $i0 = virtualinvoke $r5.<javax.crypto.Cipher: int update(byte[],int,int,byte[],int)>($r2, 0, $i0, $r3, 0);

        virtualinvoke $r5.<javax.crypto.Cipher: int doFinal(byte[],int)>($r3, $i0);

        return $r3;
    }

    public static byte[] a(byte[], java.lang.String)
    {
        byte[] $r0, $r2;
        int $i0;
        javax.crypto.spec.SecretKeySpec $r3;
        java.lang.String $r1;
        javax.crypto.Cipher $r4;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke $r1.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        $r3 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, "AES");

        $r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>("AES/ECB/PKCS7Padding", "BC");

        virtualinvoke $r4.<javax.crypto.Cipher: void init(int,java.security.Key)>(1, $r3);

        $i0 = lengthof $r2;

        $i0 = virtualinvoke $r4.<javax.crypto.Cipher: int getOutputSize(int)>($i0);

        $r0 = newarray (byte)[$i0];

        $i0 = lengthof $r2;

        $i0 = virtualinvoke $r4.<javax.crypto.Cipher: int update(byte[],int,int,byte[],int)>($r2, 0, $i0, $r0, 0);

        virtualinvoke $r4.<javax.crypto.Cipher: int doFinal(byte[],int)>($r0, $i0);

        return $r0;
    }

    public static byte[] a(byte[], byte[])
    {
        byte[] $r0, $r1, $r2;
        int $i0;
        javax.crypto.spec.SecretKeySpec $r3;
        javax.crypto.Cipher $r4;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $r2 = newarray (byte)[16];

        $i0 = lengthof $r0;

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, 16);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, $r2, 0, $i0);

        $r3 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, "AES");

        $r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>("AES/ECB/NoPadding", "BC");

        virtualinvoke $r4.<javax.crypto.Cipher: void init(int,java.security.Key)>(2, $r3);

        $i0 = lengthof $r1;

        $i0 = virtualinvoke $r4.<javax.crypto.Cipher: int getOutputSize(int)>($i0);

        $r0 = newarray (byte)[$i0];

        $i0 = lengthof $r1;

        $i0 = virtualinvoke $r4.<javax.crypto.Cipher: int update(byte[],int,int,byte[],int)>($r1, 0, $i0, $r0, 0);

        virtualinvoke $r4.<javax.crypto.Cipher: int doFinal(byte[],int)>($r0, $i0);

        return $r0;
    }

    public static java.lang.String b(java.lang.String)
    {
        byte[] $r1;
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        if $r0 != null goto label1;

        return null;

     label1:
        $r1 = staticinvoke <cn.sharesdk.framework.utils.a: byte[] c(java.lang.String)>($r0);

        if $r1 == null goto label2;

        $r0 = staticinvoke <cn.sharesdk.framework.utils.c: java.lang.String a(byte[])>($r1);

        return $r0;

     label2:
        return null;
    }

    public static java.lang.String b(java.lang.String, java.lang.String)
    {
        java.lang.Throwable $r3, $r4;
        byte[] $r2;
        java.lang.String $r0, $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

     label01:
        $r2 = staticinvoke <cn.sharesdk.framework.utils.a: byte[] a(java.lang.String,java.lang.String)>($r1, $r0);

        $r1 = staticinvoke <android.util.Base64: java.lang.String encodeToString(byte[],int)>($r2, 0);

     label02:
        $r0 = $r1;

     label03:
        $z0 = virtualinvoke $r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("\n");

     label04:
        if $z0 == 0 goto label10;

     label05:
        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\n", "");

     label06:
        return $r1;

     label07:
        $r3 := @caughtexception;

        $r0 = null;

        $r4 = $r3;

     label08:
        staticinvoke <cn.sharesdk.framework.utils.e: int c(java.lang.Throwable)>($r4);

        return $r0;

     label09:
        $r4 := @caughtexception;

        goto label08;

     label10:
        return $r1;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
    }

    public static java.lang.String c(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r0 = staticinvoke <java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>($r0, "utf-8");

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("+", "%20");

        return $r0;
    }

    public static byte[] c(java.lang.String)
    {
        byte[] $r2;
        java.security.MessageDigest $r1;
        java.lang.String $r0;
        java.lang.Exception $r3;

        $r0 := @parameter0: java.lang.String;

        if $r0 != null goto label1;

        return null;

     label1:
        $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("MD5");

        $r2 = virtualinvoke $r0.<java.lang.String: byte[] getBytes(java.lang.String)>("utf-8");

        virtualinvoke $r1.<java.security.MessageDigest: void update(byte[])>($r2);

        $r2 = virtualinvoke $r1.<java.security.MessageDigest: byte[] digest()>();

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        staticinvoke <cn.sharesdk.framework.utils.e: int c(java.lang.Throwable)>($r3);

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static java.lang.String d(java.lang.String)
    {
        java.lang.Throwable $r1;
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

     label1:
        $r0 = staticinvoke <cn.sharesdk.framework.utils.a: java.lang.String c(java.lang.String,java.lang.String)>($r0, "utf-8");

     label2:
        return $r0;

     label3:
        $r1 := @caughtexception;

        staticinvoke <cn.sharesdk.framework.utils.e: int c(java.lang.Throwable)>($r1);

        return null;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
