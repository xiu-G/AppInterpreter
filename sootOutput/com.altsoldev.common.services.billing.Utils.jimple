public class com.altsoldev.common.services.billing.Utils extends java.lang.Object
{
    public static int CACHESIZE;

    static void <clinit>()
    {
        <com.altsoldev.common.services.billing.Utils: int CACHESIZE> = 100;

        return;
    }

    public void <init>()
    {
        com.altsoldev.common.services.billing.Utils r0;

        r0 := @this: com.altsoldev.common.services.billing.Utils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void cacheImage(java.io.InputStream, java.io.File) throws java.io.IOException
    {
        java.io.FileOutputStream r4, $r6;
        long $l2, $l3;
        java.io.File $r1, $r2, $r5;
        byte $b4;
        int $i0, $i1;
        java.io.File[] $r3;
        java.io.InputStream $r0;

        $r0 := @parameter0: java.io.InputStream;

        $r1 := @parameter1: java.io.File;

        $r2 = virtualinvoke $r1.<java.io.File: java.io.File getParentFile()>();

        $r3 = virtualinvoke $r2.<java.io.File: java.io.File[] listFiles()>();

        $i1 = lengthof $r3;

        $i0 = <com.altsoldev.common.services.billing.Utils: int CACHESIZE>;

        if $i1 >= $i0 goto label1;

        $r6 = new java.io.FileOutputStream;

        r4 = $r6;

        specialinvoke $r6.<java.io.FileOutputStream: void <init>(java.io.File)>($r1);

        staticinvoke <com.altsoldev.common.services.billing.Utils: void copyStream(java.io.InputStream,java.io.OutputStream)>($r0, r4);

        virtualinvoke r4.<java.io.OutputStream: void close()>();

        return;

     label1:
        $r2 = null;

        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $i0 = 0;

     label2:
        $i1 = lengthof $r3;

        if $i0 < $i1 goto label3;

        virtualinvoke $r2.<java.io.File: boolean delete()>();

        $r6 = new java.io.FileOutputStream;

        r4 = $r6;

        specialinvoke $r6.<java.io.FileOutputStream: void <init>(java.io.File)>($r1);

        staticinvoke <com.altsoldev.common.services.billing.Utils: void copyStream(java.io.InputStream,java.io.OutputStream)>($r0, r4);

        virtualinvoke r4.<java.io.OutputStream: void close()>();

        return;

     label3:
        $r5 = $r3[$i0];

        $l3 = virtualinvoke $r5.<java.io.File: long lastModified()>();

        $b4 = $l3 cmp $l2;

        $i1 = (int) $b4;

        if $i1 >= 0 goto label4;

        $r2 = $r3[$i0];

        $l2 = virtualinvoke $r2.<java.io.File: long lastModified()>();

        $r2 = $r3[$i0];

     label4:
        $i0 = $i0 + 1;

        goto label2;
    }

    public static int compareDates(java.lang.String, java.lang.String)
    {
        java.lang.Throwable r2;
        java.util.Date $r4, $r5;
        java.text.SimpleDateFormat r3, $r6;
        long $l1, $l2;
        byte $b3;
        int $i0;
        java.lang.String $r0, $r1;
        java.text.ParseException $r7;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

     label01:
        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

     label02:
        if $i0 > 10 goto label10;

        $r6 = new java.text.SimpleDateFormat;

        r3 = $r6;

     label03:
        specialinvoke $r6.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy-MM-dd");

        $r4 = virtualinvoke r3.<java.text.DateFormat: java.util.Date parse(java.lang.String)>($r0);

        $r5 = virtualinvoke r3.<java.text.DateFormat: java.util.Date parse(java.lang.String)>($r1);

        $z0 = virtualinvoke $r4.<java.util.Date: boolean before(java.util.Date)>($r5);

     label04:
        if $z0 == 0 goto label05;

        return -1;

     label05:
        $i0 = virtualinvoke $r4.<java.util.Date: int compareTo(java.util.Date)>($r5);

     label06:
        if $i0 != 0 goto label07;

        return 0;

     label07:
        $z0 = virtualinvoke $r4.<java.util.Date: boolean after(java.util.Date)>($r5);

     label08:
        if $z0 == 0 goto label09;

        return 1;

     label09:
        return -2;

     label10:
        $r6 = new java.text.SimpleDateFormat;

        r3 = $r6;

     label11:
        specialinvoke $r6.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy-MM-dd hh:mm");

        $r4 = virtualinvoke r3.<java.text.DateFormat: java.util.Date parse(java.lang.String)>($r0);

        $r5 = virtualinvoke r3.<java.text.DateFormat: java.util.Date parse(java.lang.String)>($r1);

        $l1 = virtualinvoke $r4.<java.util.Date: long getTime()>();

        $l2 = virtualinvoke $r5.<java.util.Date: long getTime()>();

     label12:
        $b3 = $l1 cmp $l2;

        $i0 = (int) $b3;

        if $i0 < 0 goto label19;

     label13:
        $l1 = virtualinvoke $r4.<java.util.Date: long getTime()>();

        $l2 = virtualinvoke $r5.<java.util.Date: long getTime()>();

     label14:
        $b3 = $l1 cmp $l2;

        if $b3 != 0 goto label15;

        return 0;

     label15:
        $l1 = virtualinvoke $r4.<java.util.Date: long getTime()>();

        $l2 = virtualinvoke $r5.<java.util.Date: long getTime()>();

     label16:
        $b3 = $l1 cmp $l2;

        $i0 = (int) $b3;

        if $i0 <= 0 goto label17;

        return 1;

     label17:
        return -2;

     label18:
        r2 := @caughtexception;

        $r7 = (java.text.ParseException) r2;

        virtualinvoke $r7.<java.text.ParseException: void printStackTrace()>();

        return -2;

     label19:
        return -1;

        catch java.text.ParseException from label01 to label02 with label18;
        catch java.text.ParseException from label03 to label04 with label18;
        catch java.text.ParseException from label05 to label06 with label18;
        catch java.text.ParseException from label07 to label08 with label18;
        catch java.text.ParseException from label11 to label12 with label18;
        catch java.text.ParseException from label13 to label14 with label18;
        catch java.text.ParseException from label15 to label16 with label18;
    }

    public static void copyStream(java.io.InputStream, java.io.OutputStream)
    {
        java.io.OutputStream $r1;
        byte[] r2;
        int $i0;
        java.lang.Exception $r3;
        java.io.InputStream $r0;

        $r0 := @parameter0: java.io.InputStream;

        $r1 := @parameter1: java.io.OutputStream;

        r2 = newarray (byte)[1024];

     label1:
        $i0 = virtualinvoke $r0.<java.io.InputStream: int read(byte[],int,int)>(r2, 0, 1024);

     label2:
        if $i0 != -1 goto label3;

        return;

     label3:
        virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>(r2, 0, $i0);

     label4:
        goto label1;

     label5:
        $r3 := @caughtexception;

        return;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }

    public static java.lang.String downloadTextContent(java.lang.String) throws java.lang.Exception
    {
        java.lang.Throwable r1;
        java.net.HttpURLConnection r6;
        java.net.MalformedURLException $r12;
        java.net.URL r4, $r9;
        java.io.InputStreamReader $r10;
        java.lang.StringBuffer r3, $r8;
        java.net.URLConnection $r5;
        java.lang.String $r0;
        java.io.BufferedReader r2, $r11;
        java.io.InputStream $r7;

        $r0 := @parameter0: java.lang.String;

        r4 = null;

        $r8 = new java.lang.StringBuffer;

        r3 = $r8;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = new java.net.URL;

     label1:
        specialinvoke $r9.<java.net.URL: void <init>(java.lang.String)>($r0);

     label2:
        r4 = $r9;

     label3:
        $r5 = virtualinvoke r4.<java.net.URL: java.net.URLConnection openConnection()>();

        r6 = (java.net.HttpURLConnection) $r5;

        virtualinvoke r6.<java.net.HttpURLConnection: void setDoOutput(boolean)>(1);

        virtualinvoke r6.<java.net.HttpURLConnection: void setConnectTimeout(int)>(10000);

        virtualinvoke r6.<java.net.HttpURLConnection: void connect()>();

        $r7 = virtualinvoke r6.<java.net.HttpURLConnection: java.io.InputStream getInputStream()>();

        $r11 = new java.io.BufferedReader;

        r2 = $r11;

        $r10 = new java.io.InputStreamReader;

        specialinvoke $r10.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r7);

        specialinvoke $r11.<java.io.BufferedReader: void <init>(java.io.Reader)>($r10);

     label4:
        $r0 = virtualinvoke r2.<java.io.BufferedReader: java.lang.String readLine()>();

        if $r0 != null goto label6;

        $r0 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r0;

     label5:
        r1 := @caughtexception;

        $r12 = (java.net.MalformedURLException) r1;

        virtualinvoke $r12.<java.net.MalformedURLException: void printStackTrace()>();

        goto label3;

     label6:
        $r8 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r0);

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        goto label4;

        catch java.net.MalformedURLException from label1 to label2 with label5;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] $r0;

        $r0 := @parameter0: java.lang.String[];

        return;
    }

    public static java.lang.String removeHttp(java.lang.String)
    {
        int $i0;
        java.lang.String $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>("https");

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(8, $i0);

        return $r0;

     label1:
        $z0 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>("http");

        if $z0 == 0 goto label2;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(7, $i0);

     label2:
        return $r0;
    }

    public static java.lang.String roundUpDecimal(java.lang.Double, int)
    {
        java.lang.Double $r0;
        int $i0, i1;
        java.text.DecimalFormat r1;
        java.lang.StringBuilder $r3;
        java.lang.String r2;
        boolean $z0;

        $r0 := @parameter0: java.lang.Double;

        $i0 := @parameter1: int;

        r2 = ".";

        i1 = 0;

     label1:
        if i1 < $i0 goto label2;

        r1 = new java.text.DecimalFormat;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("#");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r1.<java.text.DecimalFormat: void <init>(java.lang.String)>(r2);

        r2 = virtualinvoke r1.<java.text.DecimalFormat: java.lang.String format(java.lang.Object)>($r0);

        $z0 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>("-");

        if $z0 == 0 goto label3;

        return "0";

     label2:
        $r3 = new java.lang.StringBuilder;

        r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2);

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>(r2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#");

        r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        i1 = i1 + 1;

        goto label1;

     label3:
        return r2;
    }

    public static java.lang.String truncateContent(java.lang.String, int, boolean)
    {
        java.util.StringTokenizer r0;
        int $i0, $i1;
        java.lang.StringBuilder $r2;
        java.lang.String r1;
        boolean $z0;

        r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $z0 := @parameter2: boolean;

        r0 = new java.util.StringTokenizer;

        specialinvoke r0.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r1, " ");

        $i1 = virtualinvoke r0.<java.util.StringTokenizer: int countTokens()>();

        if $i1 <= $i0 goto label4;

        r1 = "";

        $i1 = 0;

     label1:
        if $i1 < $i0 goto label2;

        if $z0 == 0 goto label3;

        $r2 = new java.lang.StringBuilder;

        r1 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>();

        r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>(r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("..");

        r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return r1;

     label2:
        $r2 = new java.lang.StringBuilder;

        r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>(r1);

        r1 = virtualinvoke r0.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $i1 = $i1 + 1;

        goto label1;

     label3:
        $r2 = new java.lang.StringBuilder;

        r1 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>();

        r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>(r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("...");

        r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

     label4:
        return r1;
    }

    public static java.lang.String tweetHashTag(java.lang.String, java.lang.String)
    {
        java.lang.StringBuilder $r2;
        java.lang.String $r0, $r1, $r3;

        $r1 := @parameter0: java.lang.String;

        $r0 := @parameter1: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("#");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>($r0, $r3);

        return $r1;
    }
}
