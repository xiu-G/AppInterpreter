public class org.jsoup.select.Evaluator$IsNthOfType extends org.jsoup.select.Evaluator$CssNthEvaluator
{

    public void <init>(int, int)
    {
        int $i0, $i1;
        org.jsoup.select.Evaluator$IsNthOfType r0;

        r0 := @this: org.jsoup.select.Evaluator$IsNthOfType;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        specialinvoke r0.<org.jsoup.select.Evaluator$CssNthEvaluator: void <init>(int,int)>($i0, $i1);

        return;
    }

    protected int calculatePosition(org.jsoup.nodes.Element, org.jsoup.nodes.Element)
    {
        org.jsoup.parser.Tag $r4, $r5;
        org.jsoup.nodes.Element $r1, $r2;
        int i0, i1, $i2;
        org.jsoup.select.Evaluator$IsNthOfType r0;
        org.jsoup.select.Elements $r3;

        r0 := @this: org.jsoup.select.Evaluator$IsNthOfType;

        $r1 := @parameter0: org.jsoup.nodes.Element;

        $r2 := @parameter1: org.jsoup.nodes.Element;

        i0 = 0;

        $r1 = virtualinvoke $r2.<org.jsoup.nodes.Element: org.jsoup.nodes.Element parent()>();

        $r3 = virtualinvoke $r1.<org.jsoup.nodes.Element: org.jsoup.select.Elements children()>();

        i1 = 0;

     label1:
        $i2 = virtualinvoke $r3.<org.jsoup.select.Elements: int size()>();

        if i1 >= $i2 goto label4;

        $r1 = virtualinvoke $r3.<org.jsoup.select.Elements: org.jsoup.nodes.Element get(int)>(i1);

        $r4 = virtualinvoke $r1.<org.jsoup.nodes.Element: org.jsoup.parser.Tag tag()>();

        $r5 = virtualinvoke $r2.<org.jsoup.nodes.Element: org.jsoup.parser.Tag tag()>();

        if $r4 != $r5 goto label2;

        i0 = i0 + 1;

     label2:
        $r1 = virtualinvoke $r3.<org.jsoup.select.Elements: org.jsoup.nodes.Element get(int)>(i1);

        if $r1 != $r2 goto label3;

        return i0;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return i0;
    }

    protected java.lang.String getPseudoClass()
    {
        org.jsoup.select.Evaluator$IsNthOfType r0;

        r0 := @this: org.jsoup.select.Evaluator$IsNthOfType;

        return "nth-of-type";
    }
}
