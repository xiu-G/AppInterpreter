public class org.dom4j.tree.BackedList extends java.util.ArrayList
{
    private org.dom4j.tree.AbstractBranch branch;
    private java.util.List branchContent;

    public void <init>(org.dom4j.tree.AbstractBranch, java.util.List)
    {
        java.util.List $r2;
        int $i0;
        org.dom4j.tree.BackedList r0;
        org.dom4j.tree.AbstractBranch $r1;

        r0 := @this: org.dom4j.tree.BackedList;

        $r1 := @parameter0: org.dom4j.tree.AbstractBranch;

        $r2 := @parameter1: java.util.List;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        specialinvoke r0.<org.dom4j.tree.BackedList: void <init>(org.dom4j.tree.AbstractBranch,java.util.List,int)>($r1, $r2, $i0);

        return;
    }

    public void <init>(org.dom4j.tree.AbstractBranch, java.util.List, int)
    {
        java.util.List $r2;
        int $i0;
        org.dom4j.tree.BackedList r0;
        org.dom4j.tree.AbstractBranch $r1;

        r0 := @this: org.dom4j.tree.BackedList;

        $r1 := @parameter0: org.dom4j.tree.AbstractBranch;

        $r2 := @parameter1: java.util.List;

        $i0 := @parameter2: int;

        specialinvoke r0.<java.util.ArrayList: void <init>(int)>($i0);

        r0.<org.dom4j.tree.BackedList: org.dom4j.tree.AbstractBranch branch> = $r1;

        r0.<org.dom4j.tree.BackedList: java.util.List branchContent> = $r2;

        return;
    }

    public void <init>(org.dom4j.tree.AbstractBranch, java.util.List, java.util.List)
    {
        java.util.List $r2, $r3;
        org.dom4j.tree.BackedList r0;
        org.dom4j.tree.AbstractBranch $r1;

        r0 := @this: org.dom4j.tree.BackedList;

        $r1 := @parameter0: org.dom4j.tree.AbstractBranch;

        $r2 := @parameter1: java.util.List;

        $r3 := @parameter2: java.util.List;

        specialinvoke r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        r0.<org.dom4j.tree.BackedList: org.dom4j.tree.AbstractBranch branch> = $r1;

        r0.<org.dom4j.tree.BackedList: java.util.List branchContent> = $r2;

        return;
    }

    public void add(int, java.lang.Object)
    {
        java.lang.IndexOutOfBoundsException $r9;
        org.dom4j.Node $r6;
        org.dom4j.tree.BackedList r0;
        java.util.List $r4;
        java.lang.StringBuffer $r2, $r8;
        int $i0, $i1;
        java.lang.Object $r1, $r7;
        java.lang.String $r3;
        org.dom4j.tree.AbstractBranch $r5;

        r0 := @this: org.dom4j.tree.BackedList;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.Object;

        $i1 = virtualinvoke r0.<org.dom4j.tree.BackedList: int size()>();

        if $i0 >= 0 goto label1;

        $r9 = new java.lang.IndexOutOfBoundsException;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Index value: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is less than zero");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r3);

        throw $r9;

     label1:
        if $i0 <= $i1 goto label2;

        $r9 = new java.lang.IndexOutOfBoundsException;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Index value: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" cannot be greater than ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("the size: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r3);

        throw $r9;

     label2:
        if $i1 != 0 goto label4;

        $r4 = r0.<org.dom4j.tree.BackedList: java.util.List branchContent>;

        $i1 = interfaceinvoke $r4.<java.util.List: int size()>();

     label3:
        $r5 = r0.<org.dom4j.tree.BackedList: org.dom4j.tree.AbstractBranch branch>;

        $r6 = virtualinvoke r0.<org.dom4j.tree.BackedList: org.dom4j.Node asNode(java.lang.Object)>($r1);

        virtualinvoke $r5.<org.dom4j.tree.AbstractBranch: void addNode(int,org.dom4j.Node)>($i1, $r6);

        specialinvoke r0.<java.util.ArrayList: void add(int,java.lang.Object)>($i0, $r1);

        return;

     label4:
        if $i0 >= $i1 goto label5;

        $r4 = r0.<org.dom4j.tree.BackedList: java.util.List branchContent>;

        $r7 = virtualinvoke r0.<org.dom4j.tree.BackedList: java.lang.Object get(int)>($i0);

        $i1 = interfaceinvoke $r4.<java.util.List: int indexOf(java.lang.Object)>($r7);

        goto label3;

     label5:
        $r4 = r0.<org.dom4j.tree.BackedList: java.util.List branchContent>;

        $i1 = $i1 + -1;

        $r7 = virtualinvoke r0.<org.dom4j.tree.BackedList: java.lang.Object get(int)>($i1);

        $i1 = interfaceinvoke $r4.<java.util.List: int indexOf(java.lang.Object)>($r7);

        $i1 = $i1 + 1;

        goto label3;
    }

    public boolean add(java.lang.Object)
    {
        org.dom4j.Node $r3;
        java.lang.Object $r1;
        org.dom4j.tree.BackedList r0;
        org.dom4j.tree.AbstractBranch $r2;
        boolean $z0;

        r0 := @this: org.dom4j.tree.BackedList;

        $r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.dom4j.tree.BackedList: org.dom4j.tree.AbstractBranch branch>;

        $r3 = virtualinvoke r0.<org.dom4j.tree.BackedList: org.dom4j.Node asNode(java.lang.Object)>($r1);

        virtualinvoke $r2.<org.dom4j.tree.AbstractBranch: void addNode(org.dom4j.Node)>($r3);

        $z0 = specialinvoke r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r1);

        return $z0;
    }

    public boolean addAll(int, java.util.Collection)
    {
        java.util.Iterator $r2;
        java.util.Collection $r1;
        org.dom4j.tree.BackedList r0;
        int i0, i1, $i2;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.dom4j.tree.BackedList;

        i1 := @parameter0: int;

        $r1 := @parameter1: java.util.Collection;

        i0 = virtualinvoke r0.<org.dom4j.tree.BackedList: int size()>();

        $i2 = interfaceinvoke $r1.<java.util.Collection: int size()>();

        i0 = i0 + $i2;

        virtualinvoke r0.<org.dom4j.tree.BackedList: void ensureCapacity(int)>(i0);

        $i2 = virtualinvoke r0.<org.dom4j.tree.BackedList: int size()>();

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        i0 = i1 + 1;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke r0.<org.dom4j.tree.BackedList: void add(int,java.lang.Object)>(i1, $r3);

        i1 = -1;

        $i2 = $i2 + i1;

        i1 = i0;

        goto label1;

     label2:
        if $i2 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    public boolean addAll(java.util.Collection)
    {
        java.util.Iterator $r2;
        java.util.Collection $r1;
        int $i0, $i1;
        java.lang.Object $r3;
        org.dom4j.tree.BackedList r0;
        boolean $z0;

        r0 := @this: org.dom4j.tree.BackedList;

        $r1 := @parameter0: java.util.Collection;

        $i0 = virtualinvoke r0.<org.dom4j.tree.BackedList: int size()>();

        $i1 = interfaceinvoke $r1.<java.util.Collection: int size()>();

        $i0 = $i0 + $i1;

        virtualinvoke r0.<org.dom4j.tree.BackedList: void ensureCapacity(int)>($i0);

        $i0 = virtualinvoke r0.<org.dom4j.tree.BackedList: int size()>();

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke r0.<org.dom4j.tree.BackedList: boolean add(java.lang.Object)>($r3);

        $i0 = $i0 + -1;

        goto label1;

     label2:
        if $i0 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    public void addLocal(java.lang.Object)
    {
        java.lang.Object $r1;
        org.dom4j.tree.BackedList r0;

        r0 := @this: org.dom4j.tree.BackedList;

        $r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r1);

        return;
    }

    protected org.dom4j.Node asNode(java.lang.Object)
    {
        org.dom4j.Node r2;
        java.lang.StringBuffer $r4;
        org.dom4j.IllegalAddException $r3;
        java.lang.Object r1;
        org.dom4j.tree.BackedList r0;
        java.lang.String $r5;
        boolean $z0;

        r0 := @this: org.dom4j.tree.BackedList;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.dom4j.Node;

        if $z0 == 0 goto label1;

        r2 = (org.dom4j.Node) r1;

        return r2;

     label1:
        $r3 = new org.dom4j.IllegalAddException;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("This list must contain instances of Node. Invalid type: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<org.dom4j.IllegalAddException: void <init>(java.lang.String)>($r5);

        throw $r3;
    }

    public void clear()
    {
        java.util.List $r3;
        java.util.Iterator $r1;
        org.dom4j.Node $r5;
        java.lang.Object $r2;
        org.dom4j.tree.BackedList r0;
        org.dom4j.tree.AbstractBranch $r4;
        boolean $z0;

        r0 := @this: org.dom4j.tree.BackedList;

        $r1 = virtualinvoke r0.<org.dom4j.tree.BackedList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r3 = r0.<org.dom4j.tree.BackedList: java.util.List branchContent>;

        interfaceinvoke $r3.<java.util.List: boolean remove(java.lang.Object)>($r2);

        $r4 = r0.<org.dom4j.tree.BackedList: org.dom4j.tree.AbstractBranch branch>;

        $r5 = virtualinvoke r0.<org.dom4j.tree.BackedList: org.dom4j.Node asNode(java.lang.Object)>($r2);

        virtualinvoke $r4.<org.dom4j.tree.AbstractBranch: void childRemoved(org.dom4j.Node)>($r5);

        goto label1;

     label2:
        specialinvoke r0.<java.util.ArrayList: void clear()>();

        return;
    }

    public java.lang.Object remove(int)
    {
        org.dom4j.Node $r3;
        int $i0;
        java.lang.Object $r2;
        org.dom4j.tree.BackedList r0;
        org.dom4j.tree.AbstractBranch $r1;

        r0 := @this: org.dom4j.tree.BackedList;

        $i0 := @parameter0: int;

        $r2 = specialinvoke r0.<java.util.ArrayList: java.lang.Object remove(int)>($i0);

        if $r2 == null goto label1;

        $r1 = r0.<org.dom4j.tree.BackedList: org.dom4j.tree.AbstractBranch branch>;

        $r3 = virtualinvoke r0.<org.dom4j.tree.BackedList: org.dom4j.Node asNode(java.lang.Object)>($r2);

        virtualinvoke $r1.<org.dom4j.tree.AbstractBranch: boolean removeNode(org.dom4j.Node)>($r3);

     label1:
        return $r2;
    }

    public boolean remove(java.lang.Object)
    {
        org.dom4j.Node $r3;
        java.lang.Object $r1;
        org.dom4j.tree.BackedList r0;
        org.dom4j.tree.AbstractBranch $r2;
        boolean $z0;

        r0 := @this: org.dom4j.tree.BackedList;

        $r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.dom4j.tree.BackedList: org.dom4j.tree.AbstractBranch branch>;

        $r3 = virtualinvoke r0.<org.dom4j.tree.BackedList: org.dom4j.Node asNode(java.lang.Object)>($r1);

        virtualinvoke $r2.<org.dom4j.tree.AbstractBranch: boolean removeNode(org.dom4j.Node)>($r3);

        $z0 = specialinvoke r0.<java.util.ArrayList: boolean remove(java.lang.Object)>($r1);

        return $z0;
    }

    public java.lang.Object set(int, java.lang.Object)
    {
        org.dom4j.Node $r5;
        org.dom4j.tree.BackedList r0;
        java.util.List $r2;
        int $i0, $i1, i2;
        java.lang.Object $r1, $r3;
        org.dom4j.tree.AbstractBranch $r4;

        r0 := @this: org.dom4j.tree.BackedList;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.Object;

        $r2 = r0.<org.dom4j.tree.BackedList: java.util.List branchContent>;

        $r3 = virtualinvoke r0.<org.dom4j.tree.BackedList: java.lang.Object get(int)>($i0);

        $i1 = interfaceinvoke $r2.<java.util.List: int indexOf(java.lang.Object)>($r3);

        i2 = $i1;

        if $i1 >= 0 goto label1;

        if $i0 != 0 goto label3;

        i2 = 0;

     label1:
        $r2 = r0.<org.dom4j.tree.BackedList: java.util.List branchContent>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i2 >= $i1 goto label4;

        $r4 = r0.<org.dom4j.tree.BackedList: org.dom4j.tree.AbstractBranch branch>;

        $r3 = virtualinvoke r0.<org.dom4j.tree.BackedList: java.lang.Object get(int)>($i0);

        $r5 = virtualinvoke r0.<org.dom4j.tree.BackedList: org.dom4j.Node asNode(java.lang.Object)>($r3);

        virtualinvoke $r4.<org.dom4j.tree.AbstractBranch: boolean removeNode(org.dom4j.Node)>($r5);

        $r4 = r0.<org.dom4j.tree.BackedList: org.dom4j.tree.AbstractBranch branch>;

        $r5 = virtualinvoke r0.<org.dom4j.tree.BackedList: org.dom4j.Node asNode(java.lang.Object)>($r1);

        virtualinvoke $r4.<org.dom4j.tree.AbstractBranch: void addNode(int,org.dom4j.Node)>(i2, $r5);

     label2:
        $r4 = r0.<org.dom4j.tree.BackedList: org.dom4j.tree.AbstractBranch branch>;

        $r5 = virtualinvoke r0.<org.dom4j.tree.BackedList: org.dom4j.Node asNode(java.lang.Object)>($r1);

        virtualinvoke $r4.<org.dom4j.tree.AbstractBranch: void childAdded(org.dom4j.Node)>($r5);

        $r1 = specialinvoke r0.<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>($i0, $r1);

        return $r1;

     label3:
        i2 = 2147483647;

        goto label1;

     label4:
        $r4 = r0.<org.dom4j.tree.BackedList: org.dom4j.tree.AbstractBranch branch>;

        $r3 = virtualinvoke r0.<org.dom4j.tree.BackedList: java.lang.Object get(int)>($i0);

        $r5 = virtualinvoke r0.<org.dom4j.tree.BackedList: org.dom4j.Node asNode(java.lang.Object)>($r3);

        virtualinvoke $r4.<org.dom4j.tree.AbstractBranch: boolean removeNode(org.dom4j.Node)>($r5);

        $r4 = r0.<org.dom4j.tree.BackedList: org.dom4j.tree.AbstractBranch branch>;

        $r5 = virtualinvoke r0.<org.dom4j.tree.BackedList: org.dom4j.Node asNode(java.lang.Object)>($r1);

        virtualinvoke $r4.<org.dom4j.tree.AbstractBranch: void addNode(org.dom4j.Node)>($r5);

        goto label2;
    }
}
