public class proguard.classfile.attribute.visitor.AllAttributeVisitor extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.visitor.ClassVisitor, proguard.classfile.visitor.MemberVisitor, proguard.classfile.attribute.visitor.AttributeVisitor
{
    private final proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor;
    private final boolean deep;

    public void <init>(proguard.classfile.attribute.visitor.AttributeVisitor)
    {
        proguard.classfile.attribute.visitor.AllAttributeVisitor r0;
        proguard.classfile.attribute.visitor.AttributeVisitor $r1;

        r0 := @this: proguard.classfile.attribute.visitor.AllAttributeVisitor;

        $r1 := @parameter0: proguard.classfile.attribute.visitor.AttributeVisitor;

        specialinvoke r0.<proguard.classfile.attribute.visitor.AllAttributeVisitor: void <init>(boolean,proguard.classfile.attribute.visitor.AttributeVisitor)>(0, $r1);

        return;
    }

    public void <init>(boolean, proguard.classfile.attribute.visitor.AttributeVisitor)
    {
        proguard.classfile.attribute.visitor.AllAttributeVisitor r0;
        proguard.classfile.attribute.visitor.AttributeVisitor $r1;
        boolean $z0;

        r0 := @this: proguard.classfile.attribute.visitor.AllAttributeVisitor;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: proguard.classfile.attribute.visitor.AttributeVisitor;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        r0.<proguard.classfile.attribute.visitor.AllAttributeVisitor: boolean deep> = 0;

        r0.<proguard.classfile.attribute.visitor.AllAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor> = $r1;

        return;
    }

    public void visitAnyAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.Attribute)
    {
        proguard.classfile.attribute.visitor.AllAttributeVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.Attribute $r2;

        r0 := @this: proguard.classfile.attribute.visitor.AllAttributeVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.Attribute;

        return;
    }

    public void visitCodeAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.attribute.visitor.AllAttributeVisitor r0;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.visitor.AttributeVisitor $r4;

        r0 := @this: proguard.classfile.attribute.visitor.AllAttributeVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 = r0.<proguard.classfile.attribute.visitor.AllAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        virtualinvoke $r3.<proguard.classfile.attribute.CodeAttribute: void attributesAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.visitor.AttributeVisitor)>($r1, $r2, $r4);

        return;
    }

    public void visitLibraryClass(proguard.classfile.LibraryClass)
    {
        proguard.classfile.attribute.visitor.AllAttributeVisitor r0;
        proguard.classfile.LibraryClass $r1;

        r0 := @this: proguard.classfile.attribute.visitor.AllAttributeVisitor;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        return;
    }

    public void visitLibraryMember(proguard.classfile.LibraryClass, proguard.classfile.LibraryMember)
    {
        proguard.classfile.attribute.visitor.AllAttributeVisitor r0;
        proguard.classfile.LibraryClass $r1;
        proguard.classfile.LibraryMember $r2;

        r0 := @this: proguard.classfile.attribute.visitor.AllAttributeVisitor;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        $r2 := @parameter1: proguard.classfile.LibraryMember;

        return;
    }

    public void visitProgramClass(proguard.classfile.ProgramClass)
    {
        proguard.classfile.attribute.visitor.AllAttributeVisitor r0;
        proguard.classfile.attribute.visitor.AttributeVisitor $r2;
        proguard.classfile.ProgramClass $r1;
        boolean $z0;

        r0 := @this: proguard.classfile.attribute.visitor.AllAttributeVisitor;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 = r0.<proguard.classfile.attribute.visitor.AllAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        virtualinvoke $r1.<proguard.classfile.ProgramClass: void attributesAccept(proguard.classfile.attribute.visitor.AttributeVisitor)>($r2);

        $z0 = r0.<proguard.classfile.attribute.visitor.AllAttributeVisitor: boolean deep>;

        if $z0 == 0 goto label1;

        virtualinvoke $r1.<proguard.classfile.ProgramClass: void fieldsAccept(proguard.classfile.visitor.MemberVisitor)>(r0);

        virtualinvoke $r1.<proguard.classfile.ProgramClass: void methodsAccept(proguard.classfile.visitor.MemberVisitor)>(r0);

        virtualinvoke $r1.<proguard.classfile.ProgramClass: void attributesAccept(proguard.classfile.attribute.visitor.AttributeVisitor)>(r0);

     label1:
        return;
    }

    public void visitProgramMember(proguard.classfile.ProgramClass, proguard.classfile.ProgramMember)
    {
        proguard.classfile.ProgramMember $r2;
        proguard.classfile.attribute.visitor.AllAttributeVisitor r0;
        proguard.classfile.attribute.visitor.AttributeVisitor $r3;
        proguard.classfile.ProgramClass $r1;
        boolean $z0;

        r0 := @this: proguard.classfile.attribute.visitor.AllAttributeVisitor;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.ProgramMember;

        $r3 = r0.<proguard.classfile.attribute.visitor.AllAttributeVisitor: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        virtualinvoke $r2.<proguard.classfile.ProgramMember: void attributesAccept(proguard.classfile.ProgramClass,proguard.classfile.attribute.visitor.AttributeVisitor)>($r1, $r3);

        $z0 = r0.<proguard.classfile.attribute.visitor.AllAttributeVisitor: boolean deep>;

        if $z0 == 0 goto label1;

        virtualinvoke $r2.<proguard.classfile.ProgramMember: void attributesAccept(proguard.classfile.ProgramClass,proguard.classfile.attribute.visitor.AttributeVisitor)>($r1, r0);

     label1:
        return;
    }
}
