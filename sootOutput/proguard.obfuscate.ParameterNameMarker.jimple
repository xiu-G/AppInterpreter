public class proguard.obfuscate.ParameterNameMarker extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.attribute.visitor.AttributeVisitor
{
    private proguard.obfuscate.AttributeUsageMarker attributeUsageMarker;

    public void <init>()
    {
        proguard.obfuscate.ParameterNameMarker r0;
        proguard.obfuscate.AttributeUsageMarker $r1;

        r0 := @this: proguard.obfuscate.ParameterNameMarker;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        $r1 = new proguard.obfuscate.AttributeUsageMarker;

        specialinvoke $r1.<proguard.obfuscate.AttributeUsageMarker: void <init>()>();

        r0.<proguard.obfuscate.ParameterNameMarker: proguard.obfuscate.AttributeUsageMarker attributeUsageMarker> = $r1;

        return;
    }

    public void visitAnyAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.Attribute)
    {
        proguard.obfuscate.ParameterNameMarker r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.Attribute $r2;

        r0 := @this: proguard.obfuscate.ParameterNameMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.Attribute;

        return;
    }

    public void visitLocalVariableTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LocalVariableTableAttribute)
    {
        proguard.classfile.attribute.LocalVariableInfo $r6;
        proguard.obfuscate.ParameterNameMarker r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.obfuscate.AttributeUsageMarker $r7;
        int $i0, $i1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.LocalVariableTableAttribute $r4;
        proguard.classfile.attribute.LocalVariableInfo[] $r5;
        boolean $z0;

        r0 := @this: proguard.obfuscate.ParameterNameMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.LocalVariableTableAttribute;

        $z0 = staticinvoke <proguard.obfuscate.AttributeUsageMarker: boolean isUsed(proguard.classfile.VisitorAccepter)>($r4);

        if $z0 != 0 goto label4;

        $i0 = 0;

     label1:
        $i1 = $r4.<proguard.classfile.attribute.LocalVariableTableAttribute: int u2localVariableTableLength>;

        if $i0 >= $i1 goto label2;

        $r5 = $r4.<proguard.classfile.attribute.LocalVariableTableAttribute: proguard.classfile.attribute.LocalVariableInfo[] localVariableTable>;

        $r6 = $r5[$i0];

        $i1 = $r6.<proguard.classfile.attribute.LocalVariableInfo: int u2startPC>;

        if $i1 <= 0 goto label3;

        $r4.<proguard.classfile.attribute.LocalVariableTableAttribute: int u2localVariableTableLength> = $i0;

     label2:
        $i0 = $r4.<proguard.classfile.attribute.LocalVariableTableAttribute: int u2localVariableTableLength>;

        if $i0 <= 0 goto label4;

        $r7 = r0.<proguard.obfuscate.ParameterNameMarker: proguard.obfuscate.AttributeUsageMarker attributeUsageMarker>;

        virtualinvoke $r7.<proguard.obfuscate.AttributeUsageMarker: void visitLocalVariableTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTableAttribute)>($r1, $r2, $r3, $r4);

        return;

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        return;
    }

    public void visitLocalVariableTypeTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LocalVariableTypeTableAttribute)
    {
        proguard.classfile.attribute.LocalVariableTypeInfo $r6;
        proguard.obfuscate.ParameterNameMarker r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.obfuscate.AttributeUsageMarker $r7;
        int $i0, $i1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.LocalVariableTypeTableAttribute $r4;
        boolean $z0;
        proguard.classfile.attribute.LocalVariableTypeInfo[] $r5;

        r0 := @this: proguard.obfuscate.ParameterNameMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.LocalVariableTypeTableAttribute;

        $z0 = staticinvoke <proguard.obfuscate.AttributeUsageMarker: boolean isUsed(proguard.classfile.VisitorAccepter)>($r4);

        if $z0 != 0 goto label4;

        $i0 = 0;

     label1:
        $i1 = $r4.<proguard.classfile.attribute.LocalVariableTypeTableAttribute: int u2localVariableTypeTableLength>;

        if $i0 >= $i1 goto label2;

        $r5 = $r4.<proguard.classfile.attribute.LocalVariableTypeTableAttribute: proguard.classfile.attribute.LocalVariableTypeInfo[] localVariableTypeTable>;

        $r6 = $r5[$i0];

        $i1 = $r6.<proguard.classfile.attribute.LocalVariableTypeInfo: int u2startPC>;

        if $i1 <= 0 goto label3;

        $r4.<proguard.classfile.attribute.LocalVariableTypeTableAttribute: int u2localVariableTypeTableLength> = $i0;

     label2:
        $i0 = $r4.<proguard.classfile.attribute.LocalVariableTypeTableAttribute: int u2localVariableTypeTableLength>;

        if $i0 <= 0 goto label4;

        $r7 = r0.<proguard.obfuscate.ParameterNameMarker: proguard.obfuscate.AttributeUsageMarker attributeUsageMarker>;

        virtualinvoke $r7.<proguard.obfuscate.AttributeUsageMarker: void visitLocalVariableTypeTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTypeTableAttribute)>($r1, $r2, $r3, $r4);

        return;

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        return;
    }
}
