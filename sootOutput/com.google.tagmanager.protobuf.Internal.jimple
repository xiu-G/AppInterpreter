public class com.google.tagmanager.protobuf.Internal extends java.lang.Object
{
    private static final int DEFAULT_BUFFER_SIZE;
    public static final byte[] EMPTY_BYTE_ARRAY;
    public static final java.nio.ByteBuffer EMPTY_BYTE_BUFFER;

    static void <clinit>()
    {
        byte[] $r1;
        java.nio.ByteBuffer $r0;

        <com.google.tagmanager.protobuf.Internal: int DEFAULT_BUFFER_SIZE> = 4096;

        $r1 = newarray (byte)[0];

        <com.google.tagmanager.protobuf.Internal: byte[] EMPTY_BYTE_ARRAY> = $r1;

        $r0 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r1);

        <com.google.tagmanager.protobuf.Internal: java.nio.ByteBuffer EMPTY_BYTE_BUFFER> = $r0;

        return;
    }

    public void <init>()
    {
        com.google.tagmanager.protobuf.Internal r0;

        r0 := @this: com.google.tagmanager.protobuf.Internal;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static byte[] byteArrayDefaultValue(java.lang.String)
    {
        java.lang.Throwable $r3;
        java.lang.IllegalStateException $r1;
        byte[] $r2;
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

     label1:
        $r2 = virtualinvoke $r0.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Java VM does not support a standard character set.", $r3);

        throw $r1;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public static java.nio.ByteBuffer byteBufferDefaultValue(java.lang.String)
    {
        byte[] $r1;
        java.lang.String $r0;
        java.nio.ByteBuffer $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.google.tagmanager.protobuf.Internal: byte[] byteArrayDefaultValue(java.lang.String)>($r0);

        $r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r1);

        return $r2;
    }

    public static com.google.tagmanager.protobuf.ByteString bytesDefaultValue(java.lang.String)
    {
        com.google.tagmanager.protobuf.ByteString $r3;
        java.lang.Throwable $r4;
        java.lang.IllegalStateException $r1;
        byte[] $r2;
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

     label1:
        $r2 = virtualinvoke $r0.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

        $r3 = staticinvoke <com.google.tagmanager.protobuf.ByteString: com.google.tagmanager.protobuf.ByteString copyFrom(byte[])>($r2);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Java VM does not support a standard character set.", $r4);

        throw $r1;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public static java.nio.ByteBuffer copyByteBuffer(java.nio.ByteBuffer)
    {
        int $i0;
        java.nio.ByteBuffer $r0, $r1;

        $r0 := @parameter0: java.nio.ByteBuffer;

        $r0 = virtualinvoke $r0.<java.nio.ByteBuffer: java.nio.ByteBuffer duplicate()>();

        virtualinvoke $r0.<java.nio.ByteBuffer: java.nio.Buffer clear()>();

        $i0 = virtualinvoke $r0.<java.nio.ByteBuffer: int capacity()>();

        $r1 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i0);

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)>($r0);

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.Buffer clear()>();

        return $r1;
    }

    public static boolean equals(java.util.List, java.util.List)
    {
        byte[] $r3, $r4;
        java.util.List $r0, $r1;
        int $i0, $i1;
        java.lang.Object $r2;
        boolean $z0;

        $r0 := @parameter0: java.util.List;

        $r1 := @parameter1: java.util.List;

        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 == $i1 goto label1;

        return 0;

     label1:
        $i0 = 0;

     label2:
        $i1 = interfaceinvoke $r0.<java.util.List: int size()>();

        if $i0 >= $i1 goto label3;

        $r2 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>($i0);

        $r3 = (byte[]) $r2;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        $r4 = (byte[]) $r2;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r3, $r4);

        if $z0 == 0 goto label4;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        return 1;

     label4:
        return 0;
    }

    public static boolean equalsByteBuffer(java.nio.ByteBuffer, java.nio.ByteBuffer)
    {
        java.nio.Buffer $r2, $r3;
        int $i0, $i1;
        java.nio.ByteBuffer $r0, $r1;
        boolean $z0;

        $r0 := @parameter0: java.nio.ByteBuffer;

        $r1 := @parameter1: java.nio.ByteBuffer;

        $i0 = virtualinvoke $r0.<java.nio.ByteBuffer: int capacity()>();

        $i1 = virtualinvoke $r1.<java.nio.ByteBuffer: int capacity()>();

        if $i0 == $i1 goto label1;

        return 0;

     label1:
        $r0 = virtualinvoke $r0.<java.nio.ByteBuffer: java.nio.ByteBuffer duplicate()>();

        $r2 = virtualinvoke $r0.<java.nio.ByteBuffer: java.nio.Buffer clear()>();

        $r0 = virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer duplicate()>();

        $r3 = virtualinvoke $r0.<java.nio.ByteBuffer: java.nio.Buffer clear()>();

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        return $z0;
    }

    public static boolean equalsByteBuffer(java.util.List, java.util.List)
    {
        java.nio.ByteBuffer $r3, $r4;
        java.util.List $r0, $r1;
        int $i0, $i1;
        java.lang.Object $r2;
        boolean $z0;

        $r0 := @parameter0: java.util.List;

        $r1 := @parameter1: java.util.List;

        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 == $i1 goto label1;

        return 0;

     label1:
        $i0 = 0;

     label2:
        $i1 = interfaceinvoke $r0.<java.util.List: int size()>();

        if $i0 >= $i1 goto label3;

        $r2 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>($i0);

        $r3 = (java.nio.ByteBuffer) $r2;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        $r4 = (java.nio.ByteBuffer) $r2;

        $z0 = staticinvoke <com.google.tagmanager.protobuf.Internal: boolean equalsByteBuffer(java.nio.ByteBuffer,java.nio.ByteBuffer)>($r3, $r4);

        if $z0 == 0 goto label4;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        return 1;

     label4:
        return 0;
    }

    public static int hashBoolean(boolean)
    {
        boolean $z0;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label1;

        return 1231;

     label1:
        return 1237;
    }

    public static int hashCode(java.util.List)
    {
        byte[] $r3;
        java.util.List $r0;
        java.util.Iterator $r1;
        int $i0, $i1;
        java.lang.Object $r2;
        boolean $z0;

        $r0 := @parameter0: java.util.List;

        $r1 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

        $i0 = 1;

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (byte[]) $r2;

        $i0 = $i0 * 31;

        $i1 = staticinvoke <com.google.tagmanager.protobuf.Internal: int hashCode(byte[])>($r3);

        $i0 = $i1 + $i0;

        goto label1;

     label2:
        return $i0;
    }

    public static int hashCode(byte[])
    {
        int $i0;
        byte[] $r0;

        $r0 := @parameter0: byte[];

        $i0 = staticinvoke <com.google.tagmanager.protobuf.LiteralByteString: int hashCode(byte[])>($r0);

        return $i0;
    }

    public static int hashCodeByteBuffer(java.nio.ByteBuffer)
    {
        byte[] $r1;
        int $i0, $i1, $i2;
        java.nio.ByteBuffer $r0, $r2;
        boolean $z0;

        $r0 := @parameter0: java.nio.ByteBuffer;

        $i0 = 4096;

        $z0 = virtualinvoke $r0.<java.nio.ByteBuffer: boolean hasArray()>();

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke $r0.<java.nio.ByteBuffer: int capacity()>();

        $r1 = virtualinvoke $r0.<java.nio.ByteBuffer: byte[] array()>();

        $i1 = virtualinvoke $r0.<java.nio.ByteBuffer: int arrayOffset()>();

        $i2 = virtualinvoke $r0.<java.nio.ByteBuffer: int capacity()>();

        $i0 = staticinvoke <com.google.tagmanager.protobuf.LiteralByteString: int hashCode(int,byte[],int,int)>($i0, $r1, $i1, $i2);

        if $i0 != 0 goto label8;

        return 1;

     label1:
        $i1 = virtualinvoke $r0.<java.nio.ByteBuffer: int capacity()>();

        if $i1 <= 4096 goto label5;

     label2:
        $r1 = newarray (byte)[$i0];

        $r2 = virtualinvoke $r0.<java.nio.ByteBuffer: java.nio.ByteBuffer duplicate()>();

        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.Buffer clear()>();

        $i1 = virtualinvoke $r0.<java.nio.ByteBuffer: int capacity()>();

     label3:
        $i2 = virtualinvoke $r2.<java.nio.ByteBuffer: int remaining()>();

        if $i2 <= 0 goto label7;

        $i2 = virtualinvoke $r2.<java.nio.ByteBuffer: int remaining()>();

        if $i2 > $i0 goto label6;

        $i2 = virtualinvoke $r2.<java.nio.ByteBuffer: int remaining()>();

     label4:
        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>($r1, 0, $i2);

        $i1 = staticinvoke <com.google.tagmanager.protobuf.LiteralByteString: int hashCode(int,byte[],int,int)>($i1, $r1, 0, $i2);

        goto label3;

     label5:
        $i0 = virtualinvoke $r0.<java.nio.ByteBuffer: int capacity()>();

        goto label2;

     label6:
        $i2 = $i0;

        goto label4;

     label7:
        if $i1 != 0 goto label9;

        return 1;

     label8:
        return $i0;

     label9:
        return $i1;
    }

    public static int hashCodeByteBuffer(java.util.List)
    {
        java.util.List $r0;
        java.util.Iterator $r1;
        int $i0, $i1;
        java.lang.Object $r2;
        java.nio.ByteBuffer $r3;
        boolean $z0;

        $r0 := @parameter0: java.util.List;

        $r1 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

        $i0 = 1;

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (java.nio.ByteBuffer) $r2;

        $i0 = $i0 * 31;

        $i1 = staticinvoke <com.google.tagmanager.protobuf.Internal: int hashCodeByteBuffer(java.nio.ByteBuffer)>($r3);

        $i0 = $i1 + $i0;

        goto label1;

     label2:
        return $i0;
    }

    public static int hashEnum(com.google.tagmanager.protobuf.Internal$EnumLite)
    {
        int $i0;
        com.google.tagmanager.protobuf.Internal$EnumLite $r0;

        $r0 := @parameter0: com.google.tagmanager.protobuf.Internal$EnumLite;

        $i0 = interfaceinvoke $r0.<com.google.tagmanager.protobuf.Internal$EnumLite: int getNumber()>();

        return $i0;
    }

    public static int hashEnumList(java.util.List)
    {
        java.util.List $r0;
        java.util.Iterator $r1;
        com.google.tagmanager.protobuf.Internal$EnumLite $r3;
        int $i0, $i1;
        java.lang.Object $r2;
        boolean $z0;

        $r0 := @parameter0: java.util.List;

        $r1 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

        $i0 = 1;

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (com.google.tagmanager.protobuf.Internal$EnumLite) $r2;

        $i0 = $i0 * 31;

        $i1 = staticinvoke <com.google.tagmanager.protobuf.Internal: int hashEnum(com.google.tagmanager.protobuf.Internal$EnumLite)>($r3);

        $i0 = $i1 + $i0;

        goto label1;

     label2:
        return $i0;
    }

    public static int hashLong(long)
    {
        int $i2;
        long $l0, $l1;

        $l0 := @parameter0: long;

        $l1 = $l0 >>> 32;

        $l0 = $l1 ^ $l0;

        $i2 = (int) $l0;

        return $i2;
    }

    static boolean isProto1Group(com.google.tagmanager.protobuf.MessageLite)
    {
        com.google.tagmanager.protobuf.MessageLite $r0;
        boolean $z0;
        com.google.tagmanager.protobuf.AbstractMutableMessageLite $r1;

        $r0 := @parameter0: com.google.tagmanager.protobuf.MessageLite;

        $z0 = $r0 instanceof com.google.tagmanager.protobuf.AbstractMutableMessageLite;

        if $z0 == 0 goto label1;

        $r1 = (com.google.tagmanager.protobuf.AbstractMutableMessageLite) $r0;

        $z0 = virtualinvoke $r1.<com.google.tagmanager.protobuf.AbstractMutableMessageLite: boolean isProto1Group()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static boolean isValidUtf8(com.google.tagmanager.protobuf.ByteString)
    {
        com.google.tagmanager.protobuf.ByteString $r0;
        boolean $z0;

        $r0 := @parameter0: com.google.tagmanager.protobuf.ByteString;

        $z0 = virtualinvoke $r0.<com.google.tagmanager.protobuf.ByteString: boolean isValidUtf8()>();

        return $z0;
    }

    public static boolean isValidUtf8(byte[])
    {
        byte[] $r0;
        boolean $z0;

        $r0 := @parameter0: byte[];

        $z0 = staticinvoke <com.google.tagmanager.protobuf.Utf8: boolean isValidUtf8(byte[])>($r0);

        return $z0;
    }

    public static com.google.tagmanager.protobuf.MutableMessageLite mergeFrom(com.google.tagmanager.protobuf.MutableMessageLite, com.google.tagmanager.protobuf.CodedInputStream)
    {
        com.google.tagmanager.protobuf.CodedInputStream $r1;
        com.google.tagmanager.protobuf.MutableMessageLite $r0;
        com.google.tagmanager.protobuf.InvalidProtocolBufferException $r2;
        boolean $z0;

        $r0 := @parameter0: com.google.tagmanager.protobuf.MutableMessageLite;

        $r1 := @parameter1: com.google.tagmanager.protobuf.CodedInputStream;

        $z0 = interfaceinvoke $r0.<com.google.tagmanager.protobuf.MutableMessageLite: boolean mergeFrom(com.google.tagmanager.protobuf.CodedInputStream)>($r1);

        if $z0 != 0 goto label1;

        $r2 = staticinvoke <com.google.tagmanager.protobuf.InvalidProtocolBufferException: com.google.tagmanager.protobuf.InvalidProtocolBufferException parseFailure()>();

        throw $r2;

     label1:
        return $r0;
    }

    public static com.google.tagmanager.protobuf.MutableMessageLite mergeFrom(com.google.tagmanager.protobuf.MutableMessageLite, com.google.tagmanager.protobuf.CodedInputStream, com.google.tagmanager.protobuf.ExtensionRegistryLite)
    {
        com.google.tagmanager.protobuf.CodedInputStream $r1;
        com.google.tagmanager.protobuf.MutableMessageLite $r0;
        com.google.tagmanager.protobuf.InvalidProtocolBufferException $r3;
        com.google.tagmanager.protobuf.ExtensionRegistryLite $r2;
        boolean $z0;

        $r0 := @parameter0: com.google.tagmanager.protobuf.MutableMessageLite;

        $r1 := @parameter1: com.google.tagmanager.protobuf.CodedInputStream;

        $r2 := @parameter2: com.google.tagmanager.protobuf.ExtensionRegistryLite;

        $z0 = interfaceinvoke $r0.<com.google.tagmanager.protobuf.MutableMessageLite: boolean mergeFrom(com.google.tagmanager.protobuf.CodedInputStream,com.google.tagmanager.protobuf.ExtensionRegistryLite)>($r1, $r2);

        if $z0 != 0 goto label1;

        $r3 = staticinvoke <com.google.tagmanager.protobuf.InvalidProtocolBufferException: com.google.tagmanager.protobuf.InvalidProtocolBufferException parseFailure()>();

        throw $r3;

     label1:
        return $r0;
    }

    public static com.google.tagmanager.protobuf.MutableMessageLite mergeFrom(com.google.tagmanager.protobuf.MutableMessageLite, byte[])
    {
        byte[] $r1;
        com.google.tagmanager.protobuf.MutableMessageLite $r0;
        com.google.tagmanager.protobuf.InvalidProtocolBufferException $r2;
        boolean $z0;

        $r0 := @parameter0: com.google.tagmanager.protobuf.MutableMessageLite;

        $r1 := @parameter1: byte[];

        $z0 = interfaceinvoke $r0.<com.google.tagmanager.protobuf.MutableMessageLite: boolean mergeFrom(byte[])>($r1);

        if $z0 != 0 goto label1;

        $r2 = staticinvoke <com.google.tagmanager.protobuf.InvalidProtocolBufferException: com.google.tagmanager.protobuf.InvalidProtocolBufferException parseFailure()>();

        throw $r2;

     label1:
        return $r0;
    }

    public static java.lang.String stringDefaultValue(java.lang.String)
    {
        java.lang.Throwable $r3;
        byte[] $r1;
        java.lang.IllegalStateException $r4;
        java.lang.String $r0, $r2;

        $r0 := @parameter0: java.lang.String;

        $r2 = new java.lang.String;

     label1:
        $r1 = virtualinvoke $r0.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

        specialinvoke $r2.<java.lang.String: void <init>(byte[],java.lang.String)>($r1, "UTF-8");

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Java VM does not support a standard character set.", $r3);

        throw $r4;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public static byte[] toByteArray(java.lang.String)
    {
        java.lang.Throwable $r3;
        byte[] $r2;
        java.lang.String $r0;
        java.lang.RuntimeException $r1;

        $r0 := @parameter0: java.lang.String;

     label1:
        $r2 = virtualinvoke $r0.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("UTF-8 not supported?", $r3);

        throw $r1;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public static java.lang.String toStringUtf8(byte[])
    {
        java.lang.Throwable $r2;
        byte[] $r0;
        java.lang.String $r1;
        java.lang.RuntimeException $r3;

        $r0 := @parameter0: byte[];

        $r1 = new java.lang.String;

     label1:
        specialinvoke $r1.<java.lang.String: void <init>(byte[],java.lang.String)>($r0, "UTF-8");

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("UTF-8 not supported?", $r2);

        throw $r3;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }
}
