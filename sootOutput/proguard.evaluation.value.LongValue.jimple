public abstract class proguard.evaluation.value.LongValue extends proguard.evaluation.value.Category2Value
{

    public void <init>()
    {
        proguard.evaluation.value.LongValue r0;

        r0 := @this: proguard.evaluation.value.LongValue;

        specialinvoke r0.<proguard.evaluation.value.Category2Value: void <init>()>();

        return;
    }

    public proguard.evaluation.value.LongValue add(proguard.evaluation.value.LongValue)
    {
        proguard.evaluation.value.LongValue r0, $r1;

        r0 := @this: proguard.evaluation.value.LongValue;

        $r1 := @parameter0: proguard.evaluation.value.LongValue;

        r0 = virtualinvoke $r1.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue add(proguard.evaluation.value.LongValue)>(r0);

        return r0;
    }

    public proguard.evaluation.value.LongValue add(proguard.evaluation.value.ParticularLongValue)
    {
        proguard.evaluation.value.ParticularLongValue $r1;
        proguard.evaluation.value.LongValue r0;

        r0 := @this: proguard.evaluation.value.LongValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularLongValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue add(proguard.evaluation.value.SpecificLongValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.LongValue add(proguard.evaluation.value.SpecificLongValue)
    {
        proguard.evaluation.value.SpecificLongValue $r1;
        proguard.evaluation.value.LongValue r0;

        r0 := @this: proguard.evaluation.value.LongValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificLongValue;

        return r0;
    }

    public proguard.evaluation.value.LongValue and(proguard.evaluation.value.LongValue)
    {
        proguard.evaluation.value.LongValue r0, $r1;

        r0 := @this: proguard.evaluation.value.LongValue;

        $r1 := @parameter0: proguard.evaluation.value.LongValue;

        r0 = virtualinvoke $r1.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue and(proguard.evaluation.value.LongValue)>(r0);

        return r0;
    }

    public proguard.evaluation.value.LongValue and(proguard.evaluation.value.ParticularLongValue)
    {
        proguard.evaluation.value.ParticularLongValue $r1;
        proguard.evaluation.value.LongValue r0;

        r0 := @this: proguard.evaluation.value.LongValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularLongValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue and(proguard.evaluation.value.SpecificLongValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.LongValue and(proguard.evaluation.value.SpecificLongValue)
    {
        proguard.evaluation.value.SpecificLongValue $r1;
        proguard.evaluation.value.LongValue r0;

        r0 := @this: proguard.evaluation.value.LongValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificLongValue;

        return r0;
    }

    public proguard.evaluation.value.IntegerValue compare(proguard.evaluation.value.LongValue)
    {
        proguard.evaluation.value.IntegerValue $r2;
        proguard.evaluation.value.LongValue r0, $r1;

        r0 := @this: proguard.evaluation.value.LongValue;

        $r1 := @parameter0: proguard.evaluation.value.LongValue;

        $r2 = virtualinvoke $r1.<proguard.evaluation.value.LongValue: proguard.evaluation.value.IntegerValue compareReverse(proguard.evaluation.value.LongValue)>(r0);

        return $r2;
    }

    public proguard.evaluation.value.IntegerValue compare(proguard.evaluation.value.ParticularLongValue)
    {
        proguard.evaluation.value.ParticularLongValue $r1;
        proguard.evaluation.value.IntegerValue $r2;
        proguard.evaluation.value.LongValue r0;

        r0 := @this: proguard.evaluation.value.LongValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularLongValue;

        $r2 = virtualinvoke r0.<proguard.evaluation.value.LongValue: proguard.evaluation.value.IntegerValue compare(proguard.evaluation.value.SpecificLongValue)>($r1);

        return $r2;
    }

    public proguard.evaluation.value.IntegerValue compare(proguard.evaluation.value.SpecificLongValue)
    {
        proguard.evaluation.value.SpecificLongValue $r1;
        proguard.evaluation.value.ComparisonValue $r2;
        proguard.evaluation.value.LongValue r0;

        r0 := @this: proguard.evaluation.value.LongValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificLongValue;

        $r2 = new proguard.evaluation.value.ComparisonValue;

        specialinvoke $r2.<proguard.evaluation.value.ComparisonValue: void <init>(proguard.evaluation.value.Value,proguard.evaluation.value.Value)>(r0, $r1);

        return $r2;
    }

    public final proguard.evaluation.value.IntegerValue compareReverse(proguard.evaluation.value.LongValue)
    {
        proguard.evaluation.value.IntegerValue $r2;
        proguard.evaluation.value.LongValue r0, $r1;

        r0 := @this: proguard.evaluation.value.LongValue;

        $r1 := @parameter0: proguard.evaluation.value.LongValue;

        $r2 = virtualinvoke r0.<proguard.evaluation.value.LongValue: proguard.evaluation.value.IntegerValue compare(proguard.evaluation.value.LongValue)>($r1);

        $r2 = virtualinvoke $r2.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue negate()>();

        return $r2;
    }

    public final proguard.evaluation.value.IntegerValue compareReverse(proguard.evaluation.value.ParticularLongValue)
    {
        proguard.evaluation.value.ParticularLongValue $r1;
        proguard.evaluation.value.IntegerValue $r2;
        proguard.evaluation.value.LongValue r0;

        r0 := @this: proguard.evaluation.value.LongValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularLongValue;

        $r2 = virtualinvoke r0.<proguard.evaluation.value.LongValue: proguard.evaluation.value.IntegerValue compare(proguard.evaluation.value.ParticularLongValue)>($r1);

        $r2 = virtualinvoke $r2.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue negate()>();

        return $r2;
    }

    public final proguard.evaluation.value.IntegerValue compareReverse(proguard.evaluation.value.SpecificLongValue)
    {
        proguard.evaluation.value.IntegerValue $r2;
        proguard.evaluation.value.SpecificLongValue $r1;
        proguard.evaluation.value.LongValue r0;

        r0 := @this: proguard.evaluation.value.LongValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificLongValue;

        $r2 = virtualinvoke r0.<proguard.evaluation.value.LongValue: proguard.evaluation.value.IntegerValue compare(proguard.evaluation.value.SpecificLongValue)>($r1);

        $r2 = virtualinvoke $r2.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue negate()>();

        return $r2;
    }

    public final int computationalType()
    {
        proguard.evaluation.value.LongValue r0;

        r0 := @this: proguard.evaluation.value.LongValue;

        return 2;
    }

    public abstract proguard.evaluation.value.DoubleValue convertToDouble();

    public abstract proguard.evaluation.value.FloatValue convertToFloat();

    public abstract proguard.evaluation.value.IntegerValue convertToInteger();

    public proguard.evaluation.value.LongValue divide(proguard.evaluation.value.LongValue) throws java.lang.ArithmeticException
    {
        proguard.evaluation.value.LongValue r0, $r1;

        r0 := @this: proguard.evaluation.value.LongValue;

        $r1 := @parameter0: proguard.evaluation.value.LongValue;

        r0 = virtualinvoke $r1.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue divideOf(proguard.evaluation.value.LongValue)>(r0);

        return r0;
    }

    public proguard.evaluation.value.LongValue divide(proguard.evaluation.value.ParticularLongValue)
    {
        proguard.evaluation.value.ParticularLongValue $r1;
        proguard.evaluation.value.LongValue r0;

        r0 := @this: proguard.evaluation.value.LongValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularLongValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue divide(proguard.evaluation.value.SpecificLongValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.LongValue divide(proguard.evaluation.value.SpecificLongValue)
    {
        proguard.evaluation.value.SpecificLongValue $r1;
        proguard.evaluation.value.LongValue r0;

        r0 := @this: proguard.evaluation.value.LongValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificLongValue;

        return r0;
    }

    public proguard.evaluation.value.LongValue divideOf(proguard.evaluation.value.LongValue) throws java.lang.ArithmeticException
    {
        proguard.evaluation.value.LongValue r0, $r1;

        r0 := @this: proguard.evaluation.value.LongValue;

        $r1 := @parameter0: proguard.evaluation.value.LongValue;

        r0 = virtualinvoke $r1.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue divide(proguard.evaluation.value.LongValue)>(r0);

        return r0;
    }

    public proguard.evaluation.value.LongValue divideOf(proguard.evaluation.value.ParticularLongValue)
    {
        proguard.evaluation.value.ParticularLongValue $r1;
        proguard.evaluation.value.LongValue r0;

        r0 := @this: proguard.evaluation.value.LongValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularLongValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue divideOf(proguard.evaluation.value.SpecificLongValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.LongValue divideOf(proguard.evaluation.value.SpecificLongValue)
    {
        proguard.evaluation.value.SpecificLongValue $r1;
        proguard.evaluation.value.LongValue r0;

        r0 := @this: proguard.evaluation.value.LongValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificLongValue;

        return r0;
    }

    public proguard.evaluation.value.LongValue generalize(proguard.evaluation.value.LongValue)
    {
        proguard.evaluation.value.LongValue r0, $r1;

        r0 := @this: proguard.evaluation.value.LongValue;

        $r1 := @parameter0: proguard.evaluation.value.LongValue;

        r0 = virtualinvoke $r1.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue generalize(proguard.evaluation.value.LongValue)>(r0);

        return r0;
    }

    public proguard.evaluation.value.LongValue generalize(proguard.evaluation.value.ParticularLongValue)
    {
        proguard.evaluation.value.ParticularLongValue $r1;
        proguard.evaluation.value.LongValue r0;

        r0 := @this: proguard.evaluation.value.LongValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularLongValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue generalize(proguard.evaluation.value.SpecificLongValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.LongValue generalize(proguard.evaluation.value.SpecificLongValue)
    {
        proguard.evaluation.value.SpecificLongValue $r1;
        proguard.evaluation.value.LongValue r0;

        r0 := @this: proguard.evaluation.value.LongValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificLongValue;

        return r0;
    }

    public final proguard.evaluation.value.Value generalize(proguard.evaluation.value.Value)
    {
        proguard.evaluation.value.Value $r1;
        proguard.evaluation.value.LongValue r0, $r2;

        r0 := @this: proguard.evaluation.value.LongValue;

        $r1 := @parameter0: proguard.evaluation.value.Value;

        $r2 = virtualinvoke $r1.<proguard.evaluation.value.Value: proguard.evaluation.value.LongValue longValue()>();

        r0 = virtualinvoke r0.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue generalize(proguard.evaluation.value.LongValue)>($r2);

        return r0;
    }

    public final java.lang.String internalType()
    {
        java.lang.String $r1;
        proguard.evaluation.value.LongValue r0;

        r0 := @this: proguard.evaluation.value.LongValue;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(73);

        return $r1;
    }

    public final proguard.evaluation.value.LongValue longValue()
    {
        proguard.evaluation.value.LongValue r0;

        r0 := @this: proguard.evaluation.value.LongValue;

        return r0;
    }

    public proguard.evaluation.value.LongValue multiply(proguard.evaluation.value.LongValue) throws java.lang.ArithmeticException
    {
        proguard.evaluation.value.LongValue r0, $r1;

        r0 := @this: proguard.evaluation.value.LongValue;

        $r1 := @parameter0: proguard.evaluation.value.LongValue;

        r0 = virtualinvoke $r1.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue multiply(proguard.evaluation.value.LongValue)>(r0);

        return r0;
    }

    public proguard.evaluation.value.LongValue multiply(proguard.evaluation.value.ParticularLongValue)
    {
        proguard.evaluation.value.ParticularLongValue $r1;
        proguard.evaluation.value.LongValue r0;

        r0 := @this: proguard.evaluation.value.LongValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularLongValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue multiply(proguard.evaluation.value.SpecificLongValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.LongValue multiply(proguard.evaluation.value.SpecificLongValue)
    {
        proguard.evaluation.value.SpecificLongValue $r1;
        proguard.evaluation.value.LongValue r0;

        r0 := @this: proguard.evaluation.value.LongValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificLongValue;

        return r0;
    }

    public abstract proguard.evaluation.value.LongValue negate();

    public proguard.evaluation.value.LongValue or(proguard.evaluation.value.LongValue)
    {
        proguard.evaluation.value.LongValue r0, $r1;

        r0 := @this: proguard.evaluation.value.LongValue;

        $r1 := @parameter0: proguard.evaluation.value.LongValue;

        r0 = virtualinvoke $r1.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue or(proguard.evaluation.value.LongValue)>(r0);

        return r0;
    }

    public proguard.evaluation.value.LongValue or(proguard.evaluation.value.ParticularLongValue)
    {
        proguard.evaluation.value.ParticularLongValue $r1;
        proguard.evaluation.value.LongValue r0;

        r0 := @this: proguard.evaluation.value.LongValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularLongValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue or(proguard.evaluation.value.SpecificLongValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.LongValue or(proguard.evaluation.value.SpecificLongValue)
    {
        proguard.evaluation.value.SpecificLongValue $r1;
        proguard.evaluation.value.LongValue r0;

        r0 := @this: proguard.evaluation.value.LongValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificLongValue;

        return r0;
    }

    public proguard.evaluation.value.LongValue remainder(proguard.evaluation.value.LongValue) throws java.lang.ArithmeticException
    {
        proguard.evaluation.value.LongValue r0, $r1;

        r0 := @this: proguard.evaluation.value.LongValue;

        $r1 := @parameter0: proguard.evaluation.value.LongValue;

        r0 = virtualinvoke $r1.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue remainderOf(proguard.evaluation.value.LongValue)>(r0);

        return r0;
    }

    public proguard.evaluation.value.LongValue remainder(proguard.evaluation.value.ParticularLongValue)
    {
        proguard.evaluation.value.ParticularLongValue $r1;
        proguard.evaluation.value.LongValue r0;

        r0 := @this: proguard.evaluation.value.LongValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularLongValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue remainder(proguard.evaluation.value.SpecificLongValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.LongValue remainder(proguard.evaluation.value.SpecificLongValue)
    {
        proguard.evaluation.value.SpecificLongValue $r1;
        proguard.evaluation.value.LongValue r0;

        r0 := @this: proguard.evaluation.value.LongValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificLongValue;

        return r0;
    }

    public proguard.evaluation.value.LongValue remainderOf(proguard.evaluation.value.LongValue) throws java.lang.ArithmeticException
    {
        proguard.evaluation.value.LongValue r0, $r1;

        r0 := @this: proguard.evaluation.value.LongValue;

        $r1 := @parameter0: proguard.evaluation.value.LongValue;

        r0 = virtualinvoke $r1.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue remainder(proguard.evaluation.value.LongValue)>(r0);

        return r0;
    }

    public proguard.evaluation.value.LongValue remainderOf(proguard.evaluation.value.ParticularLongValue)
    {
        proguard.evaluation.value.ParticularLongValue $r1;
        proguard.evaluation.value.LongValue r0;

        r0 := @this: proguard.evaluation.value.LongValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularLongValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue remainderOf(proguard.evaluation.value.SpecificLongValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.LongValue remainderOf(proguard.evaluation.value.SpecificLongValue)
    {
        proguard.evaluation.value.SpecificLongValue $r1;
        proguard.evaluation.value.LongValue r0;

        r0 := @this: proguard.evaluation.value.LongValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificLongValue;

        return r0;
    }

    public proguard.evaluation.value.LongValue shiftLeft(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.LongValue r0;

        r0 := @this: proguard.evaluation.value.LongValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        r0 = virtualinvoke $r1.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.LongValue shiftLeftOf(proguard.evaluation.value.LongValue)>(r0);

        return r0;
    }

    public proguard.evaluation.value.LongValue shiftLeft(proguard.evaluation.value.ParticularIntegerValue)
    {
        proguard.evaluation.value.ParticularIntegerValue $r1;
        proguard.evaluation.value.LongValue r0;

        r0 := @this: proguard.evaluation.value.LongValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularIntegerValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue shiftLeft(proguard.evaluation.value.IntegerValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.LongValue shiftLeft(proguard.evaluation.value.SpecificLongValue)
    {
        proguard.evaluation.value.SpecificLongValue $r1;
        proguard.evaluation.value.LongValue r0;

        r0 := @this: proguard.evaluation.value.LongValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificLongValue;

        return r0;
    }

    public proguard.evaluation.value.LongValue shiftRight(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.LongValue r0;

        r0 := @this: proguard.evaluation.value.LongValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        r0 = virtualinvoke $r1.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.LongValue shiftRightOf(proguard.evaluation.value.LongValue)>(r0);

        return r0;
    }

    public proguard.evaluation.value.LongValue shiftRight(proguard.evaluation.value.ParticularIntegerValue)
    {
        proguard.evaluation.value.ParticularIntegerValue $r1;
        proguard.evaluation.value.LongValue r0;

        r0 := @this: proguard.evaluation.value.LongValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularIntegerValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue shiftRight(proguard.evaluation.value.IntegerValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.LongValue shiftRight(proguard.evaluation.value.SpecificLongValue)
    {
        proguard.evaluation.value.SpecificLongValue $r1;
        proguard.evaluation.value.LongValue r0;

        r0 := @this: proguard.evaluation.value.LongValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificLongValue;

        return r0;
    }

    public proguard.evaluation.value.LongValue subtract(proguard.evaluation.value.LongValue)
    {
        proguard.evaluation.value.LongValue r0, $r1;

        r0 := @this: proguard.evaluation.value.LongValue;

        $r1 := @parameter0: proguard.evaluation.value.LongValue;

        r0 = virtualinvoke $r1.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue subtractFrom(proguard.evaluation.value.LongValue)>(r0);

        return r0;
    }

    public proguard.evaluation.value.LongValue subtract(proguard.evaluation.value.ParticularLongValue)
    {
        proguard.evaluation.value.ParticularLongValue $r1;
        proguard.evaluation.value.LongValue r0;

        r0 := @this: proguard.evaluation.value.LongValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularLongValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue subtract(proguard.evaluation.value.SpecificLongValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.LongValue subtract(proguard.evaluation.value.SpecificLongValue)
    {
        proguard.evaluation.value.SpecificLongValue $r1;
        proguard.evaluation.value.LongValue r0;

        r0 := @this: proguard.evaluation.value.LongValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificLongValue;

        return r0;
    }

    public proguard.evaluation.value.LongValue subtractFrom(proguard.evaluation.value.LongValue)
    {
        proguard.evaluation.value.LongValue r0, $r1;

        r0 := @this: proguard.evaluation.value.LongValue;

        $r1 := @parameter0: proguard.evaluation.value.LongValue;

        r0 = virtualinvoke $r1.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue subtract(proguard.evaluation.value.LongValue)>(r0);

        return r0;
    }

    public proguard.evaluation.value.LongValue subtractFrom(proguard.evaluation.value.ParticularLongValue)
    {
        proguard.evaluation.value.ParticularLongValue $r1;
        proguard.evaluation.value.LongValue r0;

        r0 := @this: proguard.evaluation.value.LongValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularLongValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue subtractFrom(proguard.evaluation.value.SpecificLongValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.LongValue subtractFrom(proguard.evaluation.value.SpecificLongValue)
    {
        proguard.evaluation.value.SpecificLongValue $r1;
        proguard.evaluation.value.LongValue r0;

        r0 := @this: proguard.evaluation.value.LongValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificLongValue;

        return r0;
    }

    public proguard.evaluation.value.LongValue unsignedShiftRight(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.LongValue r0;

        r0 := @this: proguard.evaluation.value.LongValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        r0 = virtualinvoke $r1.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.LongValue unsignedShiftRightOf(proguard.evaluation.value.LongValue)>(r0);

        return r0;
    }

    public proguard.evaluation.value.LongValue unsignedShiftRight(proguard.evaluation.value.ParticularIntegerValue)
    {
        proguard.evaluation.value.ParticularIntegerValue $r1;
        proguard.evaluation.value.LongValue r0;

        r0 := @this: proguard.evaluation.value.LongValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularIntegerValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue unsignedShiftRight(proguard.evaluation.value.IntegerValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.LongValue unsignedShiftRight(proguard.evaluation.value.SpecificLongValue)
    {
        proguard.evaluation.value.SpecificLongValue $r1;
        proguard.evaluation.value.LongValue r0;

        r0 := @this: proguard.evaluation.value.LongValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificLongValue;

        return r0;
    }

    public long value()
    {
        proguard.evaluation.value.LongValue r0;

        r0 := @this: proguard.evaluation.value.LongValue;

        return 0L;
    }

    public proguard.evaluation.value.LongValue xor(proguard.evaluation.value.LongValue)
    {
        proguard.evaluation.value.LongValue r0, $r1;

        r0 := @this: proguard.evaluation.value.LongValue;

        $r1 := @parameter0: proguard.evaluation.value.LongValue;

        r0 = virtualinvoke $r1.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue xor(proguard.evaluation.value.LongValue)>(r0);

        return r0;
    }

    public proguard.evaluation.value.LongValue xor(proguard.evaluation.value.ParticularLongValue)
    {
        proguard.evaluation.value.ParticularLongValue $r1;
        proguard.evaluation.value.LongValue r0;

        r0 := @this: proguard.evaluation.value.LongValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularLongValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue xor(proguard.evaluation.value.SpecificLongValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.LongValue xor(proguard.evaluation.value.SpecificLongValue)
    {
        proguard.evaluation.value.SpecificLongValue $r1;
        proguard.evaluation.value.LongValue r0;

        r0 := @this: proguard.evaluation.value.LongValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificLongValue;

        return r0;
    }
}
