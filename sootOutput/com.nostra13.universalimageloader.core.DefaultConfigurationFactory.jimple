public class com.nostra13.universalimageloader.core.DefaultConfigurationFactory extends java.lang.Object
{

    public void <init>()
    {
        com.nostra13.universalimageloader.core.DefaultConfigurationFactory r0;

        r0 := @this: com.nostra13.universalimageloader.core.DefaultConfigurationFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.nostra13.universalimageloader.core.display.BitmapDisplayer createBitmapDisplayer()
    {
        com.nostra13.universalimageloader.core.display.SimpleBitmapDisplayer $r0;

        $r0 = new com.nostra13.universalimageloader.core.display.SimpleBitmapDisplayer;

        specialinvoke $r0.<com.nostra13.universalimageloader.core.display.SimpleBitmapDisplayer: void <init>()>();

        return $r0;
    }

    public static com.nostra13.universalimageloader.cache.disc.DiskCache createDiskCache(android.content.Context, com.nostra13.universalimageloader.cache.disc.naming.FileNameGenerator, long, int)
    {
        java.lang.Throwable $r4;
        android.content.Context $r0;
        com.nostra13.universalimageloader.cache.disc.impl.UnlimitedDiscCache $r6;
        com.nostra13.universalimageloader.cache.disc.naming.FileNameGenerator $r1;
        long $l0;
        java.io.File $r2, $r3;
        com.nostra13.universalimageloader.cache.disc.impl.ext.LruDiscCache $r5;
        byte $b2;
        int $i1, $i3;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: com.nostra13.universalimageloader.cache.disc.naming.FileNameGenerator;

        $l0 := @parameter2: long;

        $i1 := @parameter3: int;

        $r2 = staticinvoke <com.nostra13.universalimageloader.core.DefaultConfigurationFactory: java.io.File createReserveDiskCacheDir(android.content.Context)>($r0);

        $b2 = $l0 cmp 0L;

        $i3 = (int) $b2;

        if $i3 > 0 goto label1;

        if $i1 <= 0 goto label5;

     label1:
        $r3 = staticinvoke <com.nostra13.universalimageloader.utils.StorageUtils: java.io.File getIndividualCacheDirectory(android.content.Context)>($r0);

        $r5 = new com.nostra13.universalimageloader.cache.disc.impl.ext.LruDiscCache;

     label2:
        specialinvoke $r5.<com.nostra13.universalimageloader.cache.disc.impl.ext.LruDiscCache: void <init>(java.io.File,java.io.File,com.nostra13.universalimageloader.cache.disc.naming.FileNameGenerator,long,int)>($r3, $r2, $r1, $l0, $i1);

     label3:
        return $r5;

     label4:
        $r4 := @caughtexception;

        staticinvoke <com.nostra13.universalimageloader.utils.L: void e(java.lang.Throwable)>($r4);

     label5:
        $r3 = staticinvoke <com.nostra13.universalimageloader.utils.StorageUtils: java.io.File getCacheDirectory(android.content.Context)>($r0);

        $r6 = new com.nostra13.universalimageloader.cache.disc.impl.UnlimitedDiscCache;

        specialinvoke $r6.<com.nostra13.universalimageloader.cache.disc.impl.UnlimitedDiscCache: void <init>(java.io.File,java.io.File,com.nostra13.universalimageloader.cache.disc.naming.FileNameGenerator)>($r3, $r2, $r1);

        return $r6;

        catch java.io.IOException from label2 to label3 with label4;
    }

    public static java.util.concurrent.Executor createExecutor(int, int, com.nostra13.universalimageloader.core.assist.QueueProcessingType)
    {
        java.util.concurrent.ThreadPoolExecutor $r7;
        java.util.concurrent.BlockingQueue $r5;
        com.nostra13.universalimageloader.core.assist.deque.LIFOLinkedBlockingDeque $r6;
        java.util.concurrent.LinkedBlockingQueue $r8;
        com.nostra13.universalimageloader.core.assist.QueueProcessingType $r0, $r3;
        java.util.concurrent.TimeUnit $r1;
        int $i0, $i1;
        java.lang.Object $r4;
        java.util.concurrent.ThreadFactory $r2;
        boolean $z0;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0 := @parameter2: com.nostra13.universalimageloader.core.assist.QueueProcessingType;

        $r3 = <com.nostra13.universalimageloader.core.assist.QueueProcessingType: com.nostra13.universalimageloader.core.assist.QueueProcessingType LIFO>;

        if $r0 != $r3 goto label3;

        $z0 = 1;

     label1:
        if $z0 == 0 goto label4;

        $r6 = new com.nostra13.universalimageloader.core.assist.deque.LIFOLinkedBlockingDeque;

        $r4 = $r6;

        specialinvoke $r6.<com.nostra13.universalimageloader.core.assist.deque.LIFOLinkedBlockingDeque: void <init>()>();

     label2:
        $r5 = (java.util.concurrent.BlockingQueue) $r4;

        $r7 = new java.util.concurrent.ThreadPoolExecutor;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $r2 = staticinvoke <com.nostra13.universalimageloader.core.DefaultConfigurationFactory: java.util.concurrent.ThreadFactory createThreadFactory(int,java.lang.String)>($i1, "uil-pool-");

        specialinvoke $r7.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)>($i0, $i0, 0L, $r1, $r5, $r2);

        return $r7;

     label3:
        $z0 = 0;

        goto label1;

     label4:
        $r8 = new java.util.concurrent.LinkedBlockingQueue;

        $r4 = $r8;

        specialinvoke $r8.<java.util.concurrent.LinkedBlockingQueue: void <init>()>();

        goto label2;
    }

    public static com.nostra13.universalimageloader.cache.disc.naming.FileNameGenerator createFileNameGenerator()
    {
        com.nostra13.universalimageloader.cache.disc.naming.HashCodeFileNameGenerator $r0;

        $r0 = new com.nostra13.universalimageloader.cache.disc.naming.HashCodeFileNameGenerator;

        specialinvoke $r0.<com.nostra13.universalimageloader.cache.disc.naming.HashCodeFileNameGenerator: void <init>()>();

        return $r0;
    }

    public static com.nostra13.universalimageloader.core.decode.ImageDecoder createImageDecoder(boolean)
    {
        com.nostra13.universalimageloader.core.decode.BaseImageDecoder $r0;
        boolean $z0;

        $z0 := @parameter0: boolean;

        $r0 = new com.nostra13.universalimageloader.core.decode.BaseImageDecoder;

        specialinvoke $r0.<com.nostra13.universalimageloader.core.decode.BaseImageDecoder: void <init>(boolean)>($z0);

        return $r0;
    }

    public static com.nostra13.universalimageloader.core.download.ImageDownloader createImageDownloader(android.content.Context)
    {
        android.content.Context $r0;
        com.nostra13.universalimageloader.core.download.BaseImageDownloader $r1;

        $r0 := @parameter0: android.content.Context;

        $r1 = new com.nostra13.universalimageloader.core.download.BaseImageDownloader;

        specialinvoke $r1.<com.nostra13.universalimageloader.core.download.BaseImageDownloader: void <init>(android.content.Context)>($r0);

        return $r1;
    }

    public static com.nostra13.universalimageloader.cache.memory.MemoryCache createMemoryCache(int)
    {
        java.lang.Runtime $r0;
        int $i0;
        long $l1;
        com.nostra13.universalimageloader.cache.memory.impl.LruMemoryCache $r1;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label1;

        $r0 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $l1 = virtualinvoke $r0.<java.lang.Runtime: long maxMemory()>();

        $l1 = $l1 / 8L;

        $i0 = (int) $l1;

     label1:
        $r1 = new com.nostra13.universalimageloader.cache.memory.impl.LruMemoryCache;

        specialinvoke $r1.<com.nostra13.universalimageloader.cache.memory.impl.LruMemoryCache: void <init>(int)>($i0);

        return $r1;
    }

    private static java.io.File createReserveDiskCacheDir(android.content.Context)
    {
        android.content.Context $r0;
        java.io.File $r1, $r2;
        boolean $z0;

        $r0 := @parameter0: android.content.Context;

        $r2 = staticinvoke <com.nostra13.universalimageloader.utils.StorageUtils: java.io.File getCacheDirectory(android.content.Context,boolean)>($r0, 0);

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, "uil-images");

        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r1.<java.io.File: boolean mkdir()>();

        if $z0 == 0 goto label2;

     label1:
        return $r1;

     label2:
        return $r2;
    }

    public static java.util.concurrent.Executor createTaskDistributor()
    {
        java.util.concurrent.ThreadFactory $r0;
        java.util.concurrent.ExecutorService $r1;

        $r0 = staticinvoke <com.nostra13.universalimageloader.core.DefaultConfigurationFactory: java.util.concurrent.ThreadFactory createThreadFactory(int,java.lang.String)>(5, "uil-pool-d-");

        $r1 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newCachedThreadPool(java.util.concurrent.ThreadFactory)>($r0);

        return $r1;
    }

    private static java.util.concurrent.ThreadFactory createThreadFactory(int, java.lang.String)
    {
        int $i0;
        java.lang.String $r0;
        com.nostra13.universalimageloader.core.DefaultConfigurationFactory$DefaultThreadFactory $r1;

        $i0 := @parameter0: int;

        $r0 := @parameter1: java.lang.String;

        $r1 = new com.nostra13.universalimageloader.core.DefaultConfigurationFactory$DefaultThreadFactory;

        specialinvoke $r1.<com.nostra13.universalimageloader.core.DefaultConfigurationFactory$DefaultThreadFactory: void <init>(int,java.lang.String)>($i0, $r0);

        return $r1;
    }
}
