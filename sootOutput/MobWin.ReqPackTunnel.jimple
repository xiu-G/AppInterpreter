public final class MobWin.ReqPackTunnel extends com.qq.taf.jce.JceStruct
{
    static final boolean $assertionsDisabled;
    static byte[] cache_data;
    static byte[] cache_sec;
    public byte code;
    public byte[] data;
    public boolean isCompressed;
    public java.lang.String os;
    public java.lang.String sdkVersion;
    public byte[] sec;

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0;

        $r0 = class "LMobWin/ReqPackTunnel;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label2;

        $z0 = 1;

     label1:
        <MobWin.ReqPackTunnel: boolean $assertionsDisabled> = $z0;

        return;

     label2:
        $z0 = 0;

        goto label1;
    }

    public void <init>()
    {
        byte[] $r2;
        byte $b0;
        MobWin.ReqPackTunnel r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: MobWin.ReqPackTunnel;

        specialinvoke r0.<com.qq.taf.jce.JceStruct: void <init>()>();

        r0.<MobWin.ReqPackTunnel: byte code> = 0;

        r0.<MobWin.ReqPackTunnel: java.lang.String os> = "";

        r0.<MobWin.ReqPackTunnel: java.lang.String sdkVersion> = "";

        r0.<MobWin.ReqPackTunnel: byte[] data> = null;

        r0.<MobWin.ReqPackTunnel: byte[] sec> = null;

        r0.<MobWin.ReqPackTunnel: boolean isCompressed> = 1;

        $b0 = r0.<MobWin.ReqPackTunnel: byte code>;

        virtualinvoke r0.<MobWin.ReqPackTunnel: void setCode(byte)>($b0);

        $r1 = r0.<MobWin.ReqPackTunnel: java.lang.String os>;

        virtualinvoke r0.<MobWin.ReqPackTunnel: void setOs(java.lang.String)>($r1);

        $r1 = r0.<MobWin.ReqPackTunnel: java.lang.String sdkVersion>;

        virtualinvoke r0.<MobWin.ReqPackTunnel: void setSdkVersion(java.lang.String)>($r1);

        $r2 = r0.<MobWin.ReqPackTunnel: byte[] data>;

        virtualinvoke r0.<MobWin.ReqPackTunnel: void setData(byte[])>($r2);

        $r2 = r0.<MobWin.ReqPackTunnel: byte[] sec>;

        virtualinvoke r0.<MobWin.ReqPackTunnel: void setSec(byte[])>($r2);

        $z0 = r0.<MobWin.ReqPackTunnel: boolean isCompressed>;

        virtualinvoke r0.<MobWin.ReqPackTunnel: void setIsCompressed(boolean)>($z0);

        return;
    }

    public void <init>(byte, java.lang.String, java.lang.String, byte[], byte[], boolean)
    {
        byte[] $r3, $r4;
        byte $b0;
        MobWin.ReqPackTunnel r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: MobWin.ReqPackTunnel;

        $b0 := @parameter0: byte;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: byte[];

        $r4 := @parameter4: byte[];

        $z0 := @parameter5: boolean;

        specialinvoke r0.<com.qq.taf.jce.JceStruct: void <init>()>();

        r0.<MobWin.ReqPackTunnel: byte code> = 0;

        r0.<MobWin.ReqPackTunnel: java.lang.String os> = "";

        r0.<MobWin.ReqPackTunnel: java.lang.String sdkVersion> = "";

        r0.<MobWin.ReqPackTunnel: byte[] data> = null;

        r0.<MobWin.ReqPackTunnel: byte[] sec> = null;

        r0.<MobWin.ReqPackTunnel: boolean isCompressed> = 1;

        virtualinvoke r0.<MobWin.ReqPackTunnel: void setCode(byte)>($b0);

        virtualinvoke r0.<MobWin.ReqPackTunnel: void setOs(java.lang.String)>($r1);

        virtualinvoke r0.<MobWin.ReqPackTunnel: void setSdkVersion(java.lang.String)>($r2);

        virtualinvoke r0.<MobWin.ReqPackTunnel: void setData(byte[])>($r3);

        virtualinvoke r0.<MobWin.ReqPackTunnel: void setSec(byte[])>($r4);

        virtualinvoke r0.<MobWin.ReqPackTunnel: void setIsCompressed(boolean)>($z0);

        return;
    }

    public java.lang.String className()
    {
        MobWin.ReqPackTunnel r0;

        r0 := @this: MobWin.ReqPackTunnel;

        return "MobWin.ReqPackTunnel";
    }

    public java.lang.Object clone()
    {
        java.lang.Throwable r1;
        MobWin.ReqPackTunnel r0;
        java.lang.Object $r2;
        java.lang.AssertionError $r3;
        boolean $z0;

        r0 := @this: MobWin.ReqPackTunnel;

     label1:
        $r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

     label2:
        return $r2;

     label3:
        r1 := @caughtexception;

        $z0 = <MobWin.ReqPackTunnel: boolean $assertionsDisabled>;

        if $z0 != 0 goto label4;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label4:
        return null;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    public void display(java.lang.StringBuilder, int)
    {
        byte[] $r4;
        MobWin.ReqPackTunnel r0;
        byte $b1;
        int $i0;
        com.qq.taf.jce.JceDisplayer r2;
        java.lang.StringBuilder $r1;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: MobWin.ReqPackTunnel;

        $r1 := @parameter0: java.lang.StringBuilder;

        $i0 := @parameter1: int;

        r2 = new com.qq.taf.jce.JceDisplayer;

        specialinvoke r2.<com.qq.taf.jce.JceDisplayer: void <init>(java.lang.StringBuilder,int)>($r1, $i0);

        $b1 = r0.<MobWin.ReqPackTunnel: byte code>;

        virtualinvoke r2.<com.qq.taf.jce.JceDisplayer: com.qq.taf.jce.JceDisplayer display(byte,java.lang.String)>($b1, "code");

        $r3 = r0.<MobWin.ReqPackTunnel: java.lang.String os>;

        virtualinvoke r2.<com.qq.taf.jce.JceDisplayer: com.qq.taf.jce.JceDisplayer display(java.lang.String,java.lang.String)>($r3, "os");

        $r3 = r0.<MobWin.ReqPackTunnel: java.lang.String sdkVersion>;

        virtualinvoke r2.<com.qq.taf.jce.JceDisplayer: com.qq.taf.jce.JceDisplayer display(java.lang.String,java.lang.String)>($r3, "sdkVersion");

        $r4 = r0.<MobWin.ReqPackTunnel: byte[] data>;

        virtualinvoke r2.<com.qq.taf.jce.JceDisplayer: com.qq.taf.jce.JceDisplayer display(byte[],java.lang.String)>($r4, "data");

        $r4 = r0.<MobWin.ReqPackTunnel: byte[] sec>;

        virtualinvoke r2.<com.qq.taf.jce.JceDisplayer: com.qq.taf.jce.JceDisplayer display(byte[],java.lang.String)>($r4, "sec");

        $z0 = r0.<MobWin.ReqPackTunnel: boolean isCompressed>;

        virtualinvoke r2.<com.qq.taf.jce.JceDisplayer: com.qq.taf.jce.JceDisplayer display(boolean,java.lang.String)>($z0, "isCompressed");

        return;
    }

    public boolean equals(java.lang.Object)
    {
        byte[] $r5, $r6;
        MobWin.ReqPackTunnel r0, r2;
        byte $b0, $b1;
        java.lang.Object $r1;
        java.lang.String $r3, $r4;
        boolean $z0, $z1;

        r0 := @this: MobWin.ReqPackTunnel;

        $r1 := @parameter0: java.lang.Object;

        r2 = (MobWin.ReqPackTunnel) $r1;

        $b0 = r0.<MobWin.ReqPackTunnel: byte code>;

        $b1 = r2.<MobWin.ReqPackTunnel: byte code>;

        $z0 = staticinvoke <com.qq.taf.jce.JceUtil: boolean equals(byte,byte)>($b0, $b1);

        if $z0 == 0 goto label1;

        $r3 = r0.<MobWin.ReqPackTunnel: java.lang.String os>;

        $r4 = r2.<MobWin.ReqPackTunnel: java.lang.String os>;

        $z0 = staticinvoke <com.qq.taf.jce.JceUtil: boolean equals(java.lang.Object,java.lang.Object)>($r3, $r4);

        if $z0 == 0 goto label1;

        $r3 = r0.<MobWin.ReqPackTunnel: java.lang.String sdkVersion>;

        $r4 = r2.<MobWin.ReqPackTunnel: java.lang.String sdkVersion>;

        $z0 = staticinvoke <com.qq.taf.jce.JceUtil: boolean equals(java.lang.Object,java.lang.Object)>($r3, $r4);

        if $z0 == 0 goto label1;

        $r5 = r0.<MobWin.ReqPackTunnel: byte[] data>;

        $r6 = r2.<MobWin.ReqPackTunnel: byte[] data>;

        $z0 = staticinvoke <com.qq.taf.jce.JceUtil: boolean equals(java.lang.Object,java.lang.Object)>($r5, $r6);

        if $z0 == 0 goto label1;

        $r5 = r0.<MobWin.ReqPackTunnel: byte[] sec>;

        $r6 = r2.<MobWin.ReqPackTunnel: byte[] sec>;

        $z0 = staticinvoke <com.qq.taf.jce.JceUtil: boolean equals(java.lang.Object,java.lang.Object)>($r5, $r6);

        if $z0 == 0 goto label1;

        $z0 = r0.<MobWin.ReqPackTunnel: boolean isCompressed>;

        $z1 = r2.<MobWin.ReqPackTunnel: boolean isCompressed>;

        $z0 = staticinvoke <com.qq.taf.jce.JceUtil: boolean equals(boolean,boolean)>($z0, $z1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.String fullClassName()
    {
        MobWin.ReqPackTunnel r0;

        r0 := @this: MobWin.ReqPackTunnel;

        return "MobWin.ReqPackTunnel";
    }

    public byte getCode()
    {
        MobWin.ReqPackTunnel r0;
        byte b0;

        r0 := @this: MobWin.ReqPackTunnel;

        b0 = r0.<MobWin.ReqPackTunnel: byte code>;

        return b0;
    }

    public byte[] getData()
    {
        MobWin.ReqPackTunnel r0;
        byte[] r1;

        r0 := @this: MobWin.ReqPackTunnel;

        r1 = r0.<MobWin.ReqPackTunnel: byte[] data>;

        return r1;
    }

    public boolean getIsCompressed()
    {
        MobWin.ReqPackTunnel r0;
        boolean z0;

        r0 := @this: MobWin.ReqPackTunnel;

        z0 = r0.<MobWin.ReqPackTunnel: boolean isCompressed>;

        return z0;
    }

    public java.lang.String getOs()
    {
        MobWin.ReqPackTunnel r0;
        java.lang.String r1;

        r0 := @this: MobWin.ReqPackTunnel;

        r1 = r0.<MobWin.ReqPackTunnel: java.lang.String os>;

        return r1;
    }

    public java.lang.String getSdkVersion()
    {
        MobWin.ReqPackTunnel r0;
        java.lang.String r1;

        r0 := @this: MobWin.ReqPackTunnel;

        r1 = r0.<MobWin.ReqPackTunnel: java.lang.String sdkVersion>;

        return r1;
    }

    public byte[] getSec()
    {
        MobWin.ReqPackTunnel r0;
        byte[] r1;

        r0 := @this: MobWin.ReqPackTunnel;

        r1 = r0.<MobWin.ReqPackTunnel: byte[] sec>;

        return r1;
    }

    public void readFrom(com.qq.taf.jce.JceInputStream)
    {
        com.qq.taf.jce.JceInputStream $r1;
        byte[] $r3;
        byte $b0;
        MobWin.ReqPackTunnel r0;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: MobWin.ReqPackTunnel;

        $r1 := @parameter0: com.qq.taf.jce.JceInputStream;

        $b0 = r0.<MobWin.ReqPackTunnel: byte code>;

        $b0 = virtualinvoke $r1.<com.qq.taf.jce.JceInputStream: byte read(byte,int,boolean)>($b0, 0, 1);

        virtualinvoke r0.<MobWin.ReqPackTunnel: void setCode(byte)>($b0);

        $r2 = virtualinvoke $r1.<com.qq.taf.jce.JceInputStream: java.lang.String readString(int,boolean)>(1, 1);

        virtualinvoke r0.<MobWin.ReqPackTunnel: void setOs(java.lang.String)>($r2);

        $r2 = virtualinvoke $r1.<com.qq.taf.jce.JceInputStream: java.lang.String readString(int,boolean)>(2, 1);

        virtualinvoke r0.<MobWin.ReqPackTunnel: void setSdkVersion(java.lang.String)>($r2);

        $r3 = <MobWin.ReqPackTunnel: byte[] cache_data>;

        if $r3 != null goto label1;

        $r3 = newarray (byte)[1];

        <MobWin.ReqPackTunnel: byte[] cache_data> = $r3;

        $r3 = <MobWin.ReqPackTunnel: byte[] cache_data>;

        $r3[0] = 0;

     label1:
        $r3 = <MobWin.ReqPackTunnel: byte[] cache_data>;

        $r3 = virtualinvoke $r1.<com.qq.taf.jce.JceInputStream: byte[] read(byte[],int,boolean)>($r3, 3, 1);

        virtualinvoke r0.<MobWin.ReqPackTunnel: void setData(byte[])>($r3);

        $r3 = <MobWin.ReqPackTunnel: byte[] cache_sec>;

        if $r3 != null goto label2;

        $r3 = newarray (byte)[1];

        <MobWin.ReqPackTunnel: byte[] cache_sec> = $r3;

        $r3 = <MobWin.ReqPackTunnel: byte[] cache_sec>;

        $r3[0] = 0;

     label2:
        $r3 = <MobWin.ReqPackTunnel: byte[] cache_sec>;

        $r3 = virtualinvoke $r1.<com.qq.taf.jce.JceInputStream: byte[] read(byte[],int,boolean)>($r3, 4, 0);

        virtualinvoke r0.<MobWin.ReqPackTunnel: void setSec(byte[])>($r3);

        $z0 = r0.<MobWin.ReqPackTunnel: boolean isCompressed>;

        $z0 = virtualinvoke $r1.<com.qq.taf.jce.JceInputStream: boolean read(boolean,int,boolean)>($z0, 5, 0);

        virtualinvoke r0.<MobWin.ReqPackTunnel: void setIsCompressed(boolean)>($z0);

        return;
    }

    public void setCode(byte)
    {
        MobWin.ReqPackTunnel r0;
        byte $b0;

        r0 := @this: MobWin.ReqPackTunnel;

        $b0 := @parameter0: byte;

        r0.<MobWin.ReqPackTunnel: byte code> = $b0;

        return;
    }

    public void setData(byte[])
    {
        MobWin.ReqPackTunnel r0;
        byte[] $r1;

        r0 := @this: MobWin.ReqPackTunnel;

        $r1 := @parameter0: byte[];

        r0.<MobWin.ReqPackTunnel: byte[] data> = $r1;

        return;
    }

    public void setIsCompressed(boolean)
    {
        MobWin.ReqPackTunnel r0;
        boolean $z0;

        r0 := @this: MobWin.ReqPackTunnel;

        $z0 := @parameter0: boolean;

        r0.<MobWin.ReqPackTunnel: boolean isCompressed> = $z0;

        return;
    }

    public void setOs(java.lang.String)
    {
        MobWin.ReqPackTunnel r0;
        java.lang.String $r1;

        r0 := @this: MobWin.ReqPackTunnel;

        $r1 := @parameter0: java.lang.String;

        r0.<MobWin.ReqPackTunnel: java.lang.String os> = $r1;

        return;
    }

    public void setSdkVersion(java.lang.String)
    {
        MobWin.ReqPackTunnel r0;
        java.lang.String $r1;

        r0 := @this: MobWin.ReqPackTunnel;

        $r1 := @parameter0: java.lang.String;

        r0.<MobWin.ReqPackTunnel: java.lang.String sdkVersion> = $r1;

        return;
    }

    public void setSec(byte[])
    {
        MobWin.ReqPackTunnel r0;
        byte[] $r1;

        r0 := @this: MobWin.ReqPackTunnel;

        $r1 := @parameter0: byte[];

        r0.<MobWin.ReqPackTunnel: byte[] sec> = $r1;

        return;
    }

    public void writeTo(com.qq.taf.jce.JceOutputStream)
    {
        byte[] $r3;
        byte $b0;
        MobWin.ReqPackTunnel r0;
        java.lang.String $r2;
        com.qq.taf.jce.JceOutputStream $r1;
        boolean $z0;

        r0 := @this: MobWin.ReqPackTunnel;

        $r1 := @parameter0: com.qq.taf.jce.JceOutputStream;

        $b0 = r0.<MobWin.ReqPackTunnel: byte code>;

        virtualinvoke $r1.<com.qq.taf.jce.JceOutputStream: void write(byte,int)>($b0, 0);

        $r2 = r0.<MobWin.ReqPackTunnel: java.lang.String os>;

        virtualinvoke $r1.<com.qq.taf.jce.JceOutputStream: void write(java.lang.String,int)>($r2, 1);

        $r2 = r0.<MobWin.ReqPackTunnel: java.lang.String sdkVersion>;

        virtualinvoke $r1.<com.qq.taf.jce.JceOutputStream: void write(java.lang.String,int)>($r2, 2);

        $r3 = r0.<MobWin.ReqPackTunnel: byte[] data>;

        virtualinvoke $r1.<com.qq.taf.jce.JceOutputStream: void write(byte[],int)>($r3, 3);

        $r3 = r0.<MobWin.ReqPackTunnel: byte[] sec>;

        if $r3 == null goto label1;

        $r3 = r0.<MobWin.ReqPackTunnel: byte[] sec>;

        virtualinvoke $r1.<com.qq.taf.jce.JceOutputStream: void write(byte[],int)>($r3, 4);

     label1:
        $z0 = r0.<MobWin.ReqPackTunnel: boolean isCompressed>;

        virtualinvoke $r1.<com.qq.taf.jce.JceOutputStream: void write(boolean,int)>($z0, 5);

        return;
    }
}
