public class mpp.mpp2010.algo.Dip extends java.lang.Object
{
    static final int BLUE;
    static final int GREEN;
    static final int RED;
    static final double[] _C;
    double[][] Gray;
    private int H;
    private int[][][] RGB;
    private int W;
    double[][] aft_gra;
    private android.graphics.Bitmap bmp;
    double[] c_map;
    private java.lang.String cache_path;
    private android.view.Display display;
    private int[] max;
    double max_aft;
    private int[] min;
    private android.graphics.Bitmap obmp;
    private double[][][] temp;

    static void <clinit>()
    {
        double[] $r0;

        <mpp.mpp2010.algo.Dip: int RED> = 2;

        <mpp.mpp2010.algo.Dip: int GREEN> = 1;

        <mpp.mpp2010.algo.Dip: int BLUE> = 0;

        $r0 = newarray (double)[9];

        $r0[0] = 0.1;

        $r0[1] = 0.23;

        $r0[2] = 0.36;

        $r0[3] = 0.49;

        $r0[4] = 0.61;

        $r0[5] = 0.74;

        $r0[6] = 0.87;

        $r0[7] = 0.92;

        $r0[8] = 0.0;

        <mpp.mpp2010.algo.Dip: double[] _C> = $r0;

        return;
    }

    public void <init>(android.graphics.Bitmap, android.view.Display, java.lang.String)
    {
        int[] $r4;
        mpp.mpp2010.algo.Dip r0;
        android.graphics.Bitmap $r1;
        int $i0, $i1;
        android.view.Display $r2;
        java.lang.String $r3;

        r0 := @this: mpp.mpp2010.algo.Dip;

        $r1 := @parameter0: android.graphics.Bitmap;

        $r2 := @parameter1: android.view.Display;

        $r3 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = newarray (int)[3];

        r0.<mpp.mpp2010.algo.Dip: int[] min> = $r4;

        $r4 = newarray (int)[3];

        r0.<mpp.mpp2010.algo.Dip: int[] max> = $r4;

        r0.<mpp.mpp2010.algo.Dip: double max_aft> = 0.0;

        r0.<mpp.mpp2010.algo.Dip: android.view.Display display> = $r2;

        r0.<mpp.mpp2010.algo.Dip: android.graphics.Bitmap obmp> = $r1;

        r0.<mpp.mpp2010.algo.Dip: java.lang.String cache_path> = $r3;

        $r1 = r0.<mpp.mpp2010.algo.Dip: android.graphics.Bitmap obmp>;

        $r2 = r0.<mpp.mpp2010.algo.Dip: android.view.Display display>;

        $i0 = virtualinvoke $r2.<android.view.Display: int getWidth()>();

        $i0 = $i0 / 3;

        $r2 = r0.<mpp.mpp2010.algo.Dip: android.view.Display display>;

        $i1 = virtualinvoke $r2.<android.view.Display: int getHeight()>();

        $i1 = $i1 / 3;

        $r1 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createScaledBitmap(android.graphics.Bitmap,int,int,boolean)>($r1, $i0, $i1, 1);

        r0.<mpp.mpp2010.algo.Dip: android.graphics.Bitmap bmp> = $r1;

        specialinvoke r0.<mpp.mpp2010.algo.Dip: void init()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("debug", "[DIP] contruct done");

        return;
    }

    private void _normalization(int)
    {
        int[][] $r5;
        mpp.mpp2010.algo.Dip r0;
        double[] $r3;
        byte b5, b6;
        int[] $r6;
        int $i0, i1, $i2, $i3, $i4, $i7, $i8;
        double d0, d1, d2, $d3, d4, $d5;
        boolean z0, z1;
        double[][][] $r1;
        int[][][] $r4;
        double[][] $r2;

        r0 := @this: mpp.mpp2010.algo.Dip;

        $i0 := @parameter0: int;

        i1 = 0;

     label01:
        $i2 = r0.<mpp.mpp2010.algo.Dip: int H>;

        if i1 < $i2 goto label03;

        i1 = 0;

     label02:
        $i2 = r0.<mpp.mpp2010.algo.Dip: int H>;

        if i1 < $i2 goto label06;

        return;

     label03:
        $i2 = 0;

     label04:
        $i3 = r0.<mpp.mpp2010.algo.Dip: int W>;

        if $i2 < $i3 goto label05;

        i1 = i1 + 1;

        goto label01;

     label05:
        $r1 = r0.<mpp.mpp2010.algo.Dip: double[][][] temp>;

        $r2 = $r1[$i0];

        $r3 = $r2[i1];

        $r4 = r0.<mpp.mpp2010.algo.Dip: int[][][] RGB>;

        $r5 = $r4[$i0];

        $r6 = $r5[i1];

        $i3 = $r6[$i2];

        d1 = (double) $i3;

        $r6 = r0.<mpp.mpp2010.algo.Dip: int[] min>;

        $i3 = $r6[$i0];

        $d3 = (double) $i3;

        d1 = d1 - $d3;

        d1 = d1 * 255.0;

        $r6 = r0.<mpp.mpp2010.algo.Dip: int[] max>;

        $i3 = $r6[$i0];

        $r6 = r0.<mpp.mpp2010.algo.Dip: int[] min>;

        $i4 = $r6[$i0];

        $i3 = $i3 - $i4;

        $d3 = (double) $i3;

        d1 = d1 / $d3;

        $r3[$i2] = d1;

        $i2 = $i2 + 1;

        goto label04;

     label06:
        $i2 = 0;

     label07:
        $i3 = r0.<mpp.mpp2010.algo.Dip: int W>;

        if $i2 < $i3 goto label08;

        i1 = i1 + 1;

        goto label02;

     label08:
        $i3 = r0.<mpp.mpp2010.algo.Dip: int H>;

        $i3 = $i3 - 1;

        if i1 != $i3 goto label10;

        $i3 = r0.<mpp.mpp2010.algo.Dip: int W>;

        $i3 = $i3 - 1;

        if $i2 != $i3 goto label10;

     label09:
        $i2 = $i2 + 1;

        goto label07;

     label10:
        b5 = -1;

        z0 = 1;

        b6 = -1;

        z1 = 1;

        if i1 != 0 goto label14;

        b5 = 0;

     label11:
        if $i2 != 0 goto label15;

        b6 = 0;

     label12:
        $r1 = r0.<mpp.mpp2010.algo.Dip: double[][][] temp>;

        $r2 = $r1[$i0];

        $r3 = $r2[i1];

        d1 = $r3[$i2];

        $r6 = r0.<mpp.mpp2010.algo.Dip: int[] max>;

        $i3 = $r6[$i0];

        $d3 = (double) $i3;

        d1 = d1 / $d3;

        d1 = 0.03096 * d1;

        d1 = d1 + 5.737;

        d1 = staticinvoke <java.lang.Math: double pow(double,double)>(2.0, d1);

        d4 = 500.0;

        $d3 = -2.3;

        $i3 = b5;

     label13:
        if $i3 <= z0 goto label16;

        $r1 = r0.<mpp.mpp2010.algo.Dip: double[][][] temp>;

        $r2 = $r1[$i0];

        $r3 = $r2[i1];

        d0 = $r3[$i2];

        d0 = d0 + 1.0;

        d2 = 1.0 / d0;

        $r1 = r0.<mpp.mpp2010.algo.Dip: double[][][] temp>;

        $r2 = $r1[$i0];

        $r3 = $r2[i1];

        d0 = $r3[$i2];

        $d5 = 0.5 * d4;

        d0 = d0 - $d5;

        d0 = 255.0 * d0;

        d4 = 0.5 * d4;

        $d3 = $d3 - d4;

        $r6 = r0.<mpp.mpp2010.algo.Dip: int[] max>;

        $i3 = $r6[$i0];

        d4 = (double) $i3;

        d4 = 1.0 / d4;

        d4 = d2 - d4;

        d4 = d4 * d1;

        $d3 = $d3 + d4;

        d1 = 0.1 / d1;

        d1 = $d3 + d1;

        d1 = d0 / d1;

        $r1 = r0.<mpp.mpp2010.algo.Dip: double[][][] temp>;

        $r2 = $r1[$i0];

        $r3 = $r2[i1];

        $d3 = $r3[$i2];

        $d3 = $d3 + 0.001;

        d1 = d1 / $d3;

        b6 = d1 cmpl 255.0;

        $i3 = (int) b6;

        if $i3 <= 0 goto label21;

        $r1 = r0.<mpp.mpp2010.algo.Dip: double[][][] temp>;

        $r2 = $r1[$i0];

        $r3 = $r2[i1];

        $r3[$i2] = 255.0;

        goto label09;

     label14:
        $i3 = r0.<mpp.mpp2010.algo.Dip: int H>;

        $i3 = $i3 - 1;

        if i1 != $i3 goto label11;

        z0 = 0;

        goto label11;

     label15:
        $i3 = r0.<mpp.mpp2010.algo.Dip: int W>;

        $i3 = $i3 - 1;

        if $i2 != $i3 goto label12;

        z1 = 0;

        goto label12;

     label16:
        $i4 = b6;

     label17:
        if $i4 <= z1 goto label18;

        $i3 = $i3 + 1;

        goto label13;

     label18:
        $r4 = r0.<mpp.mpp2010.algo.Dip: int[][][] RGB>;

        $r5 = $r4[$i0];

        $i7 = i1 + $i3;

        $r6 = $r5[$i7];

        $i7 = $i2 + $i4;

        $i7 = $r6[$i7];

        d0 = (double) $i7;

        $r6 = r0.<mpp.mpp2010.algo.Dip: int[] min>;

        $i7 = $r6[$i0];

        d2 = (double) $i7;

        d0 = d0 - d2;

        d0 = d0 * 255.0;

        $r6 = r0.<mpp.mpp2010.algo.Dip: int[] max>;

        $i7 = $r6[$i0];

        $r6 = r0.<mpp.mpp2010.algo.Dip: int[] min>;

        $i8 = $r6[$i0];

        $i7 = $i7 - $i8;

        d2 = (double) $i7;

        d0 = d0 / d2;

        b5 = d0 cmpg d4;

        $i7 = (int) b5;

        if $i7 >= 0 goto label19;

        d4 = d0;

     label19:
        b5 = d0 cmpl $d3;

        $i7 = (int) b5;

        if $i7 <= 0 goto label20;

        $d3 = d0;

     label20:
        $i4 = $i4 + 1;

        goto label17;

     label21:
        b6 = d1 cmpg 0.0;

        $i3 = (int) b6;

        if $i3 >= 0 goto label22;

        $r1 = r0.<mpp.mpp2010.algo.Dip: double[][][] temp>;

        $r2 = $r1[$i0];

        $r3 = $r2[i1];

        $r3[$i2] = 0.0;

        goto label09;

     label22:
        $r1 = r0.<mpp.mpp2010.algo.Dip: double[][][] temp>;

        $r2 = $r1[$i0];

        $r3 = $r2[i1];

        $r3[$i2] = d1;

        goto label09;
    }

    private void count_cmap(double)
    {
        mpp.mpp2010.algo.Dip r0;
        double[] $r1, $r3;
        int i0, i1, i2, $i3;
        double[][] $r2;
        double $d0, $d1, $d2, $d3;

        r0 := @this: mpp.mpp2010.algo.Dip;

        $d0 := @parameter0: double;

        i1 = 0;

        i2 = 0;

     label1:
        $i3 = r0.<mpp.mpp2010.algo.Dip: int H>;

        if i2 < $i3 goto label2;

        return;

     label2:
        $i3 = 0;

     label3:
        i0 = r0.<mpp.mpp2010.algo.Dip: int W>;

        if $i3 < i0 goto label4;

        i2 = i2 + 1;

        goto label1;

     label4:
        $r1 = r0.<mpp.mpp2010.algo.Dip: double[] c_map>;

        $r2 = r0.<mpp.mpp2010.algo.Dip: double[][] aft_gra>;

        $r3 = $r2[i2];

        $d1 = $r3[$i3];

        $d2 = r0.<mpp.mpp2010.algo.Dip: double max_aft>;

        $r2 = r0.<mpp.mpp2010.algo.Dip: double[][] aft_gra>;

        $r3 = $r2[i2];

        $d3 = $r3[$i3];

        $d2 = $d2 - $d3;

        $d2 = $d2 * $d0;

        $d1 = $d1 + $d2;

        $d2 = r0.<mpp.mpp2010.algo.Dip: double max_aft>;

        $d1 = $d1 / $d2;

        $r1[i1] = $d1;

        $i3 = $i3 + 1;

        i1 = i1 + 1;

        goto label3;
    }

    private void count_gray_level()
    {
        mpp.mpp2010.algo.Dip r0;
        double[] $r2, $r4;
        byte $b7;
        int i0, $i1, $i2, i3, i4, i5, $i6;
        double d0, d1, $d2, $d3;
        double[][][] $r3;
        double[][] $r1;

        r0 := @this: mpp.mpp2010.algo.Dip;

        i0 = 0;

     label01:
        $i1 = r0.<mpp.mpp2010.algo.Dip: int H>;

        if i0 < $i1 goto label03;

        i0 = 0;

     label02:
        $i1 = r0.<mpp.mpp2010.algo.Dip: int H>;

        if i0 < $i1 goto label06;

        return;

     label03:
        $i1 = 0;

     label04:
        $i2 = r0.<mpp.mpp2010.algo.Dip: int W>;

        if $i1 < $i2 goto label05;

        i0 = i0 + 1;

        goto label01;

     label05:
        $r1 = r0.<mpp.mpp2010.algo.Dip: double[][] Gray>;

        $r2 = $r1[i0];

        $r3 = r0.<mpp.mpp2010.algo.Dip: double[][][] temp>;

        $r1 = $r3[0];

        $r4 = $r1[i0];

        d0 = $r4[$i1];

        $r3 = r0.<mpp.mpp2010.algo.Dip: double[][][] temp>;

        $r1 = $r3[1];

        $r4 = $r1[i0];

        d1 = $r4[$i1];

        d0 = d0 + d1;

        $r3 = r0.<mpp.mpp2010.algo.Dip: double[][][] temp>;

        $r1 = $r3[2];

        $r4 = $r1[i0];

        d1 = $r4[$i1];

        d0 = d0 + d1;

        d0 = d0 / 3.0;

        $r2[$i1] = d0;

        $i1 = $i1 + 1;

        goto label04;

     label06:
        $i1 = 0;

     label07:
        $i2 = r0.<mpp.mpp2010.algo.Dip: int W>;

        if $i1 < $i2 goto label08;

        i0 = i0 + 1;

        goto label02;

     label08:
        $i2 = i0 - 1;

        i3 = i0 + 2;

        i4 = $i1 - 1;

        i5 = $i1 + 2;

        if $i2 >= 0 goto label09;

        $i2 = 1;

     label09:
        $i6 = r0.<mpp.mpp2010.algo.Dip: int H>;

        if i3 < $i6 goto label10;

        i3 = r0.<mpp.mpp2010.algo.Dip: int H>;

        i3 = i3 - 2;

     label10:
        if i4 >= 0 goto label11;

        i4 = 1;

     label11:
        $i6 = r0.<mpp.mpp2010.algo.Dip: int W>;

        if i5 < $i6 goto label12;

        i5 = r0.<mpp.mpp2010.algo.Dip: int W>;

        i5 = i5 - 2;

     label12:
        $r1 = r0.<mpp.mpp2010.algo.Dip: double[][] Gray>;

        $r2 = $r1[$i2];

        d0 = $r2[i5];

        $r1 = r0.<mpp.mpp2010.algo.Dip: double[][] Gray>;

        $r2 = $r1[i0];

        d1 = $r2[i5];

        d0 = d0 + d1;

        $r1 = r0.<mpp.mpp2010.algo.Dip: double[][] Gray>;

        $r2 = $r1[i3];

        d1 = $r2[i5];

        d0 = d0 + d1;

        $r1 = r0.<mpp.mpp2010.algo.Dip: double[][] Gray>;

        $r2 = $r1[$i2];

        d1 = $r2[i4];

        $r1 = r0.<mpp.mpp2010.algo.Dip: double[][] Gray>;

        $r2 = $r1[i0];

        $d2 = $r2[i4];

        d1 = d1 + $d2;

        $r1 = r0.<mpp.mpp2010.algo.Dip: double[][] Gray>;

        $r2 = $r1[i3];

        $d2 = $r2[i4];

        d1 = d1 + $d2;

        d0 = d0 - d1;

        d0 = d0 / 4.0;

        $r1 = r0.<mpp.mpp2010.algo.Dip: double[][] Gray>;

        $r2 = $r1[$i2];

        d1 = $r2[i4];

        $r1 = r0.<mpp.mpp2010.algo.Dip: double[][] Gray>;

        $r2 = $r1[$i2];

        $d2 = $r2[$i1];

        d1 = d1 + $d2;

        $r1 = r0.<mpp.mpp2010.algo.Dip: double[][] Gray>;

        $r2 = $r1[$i2];

        $d2 = $r2[i5];

        d1 = d1 + $d2;

        $r1 = r0.<mpp.mpp2010.algo.Dip: double[][] Gray>;

        $r2 = $r1[i3];

        $d2 = $r2[i4];

        $r1 = r0.<mpp.mpp2010.algo.Dip: double[][] Gray>;

        $r2 = $r1[i3];

        $d3 = $r2[$i1];

        $d2 = $d2 + $d3;

        $r1 = r0.<mpp.mpp2010.algo.Dip: double[][] Gray>;

        $r2 = $r1[i3];

        $d3 = $r2[i5];

        $d2 = $d2 + $d3;

        d1 = d1 - $d2;

        d1 = d1 / 4.0;

        $r1 = r0.<mpp.mpp2010.algo.Dip: double[][] aft_gra>;

        $r2 = $r1[i0];

        d0 = d0 * d0;

        d1 = d1 * d1;

        d0 = d0 + d1;

        d0 = staticinvoke <java.lang.Math: double sqrt(double)>(d0);

        $r2[$i1] = d0;

        $r1 = r0.<mpp.mpp2010.algo.Dip: double[][] aft_gra>;

        $r2 = $r1[i0];

        d0 = $r2[$i1];

        d1 = r0.<mpp.mpp2010.algo.Dip: double max_aft>;

        $b7 = d0 cmpl d1;

        $i2 = (int) $b7;

        if $i2 <= 0 goto label13;

        $r1 = r0.<mpp.mpp2010.algo.Dip: double[][] aft_gra>;

        $r2 = $r1[i0];

        d0 = $r2[$i1];

        r0.<mpp.mpp2010.algo.Dip: double max_aft> = d0;

     label13:
        $i1 = $i1 + 1;

        goto label07;
    }

    private int getB(int)
    {
        int $i0;
        mpp.mpp2010.algo.Dip r0;

        r0 := @this: mpp.mpp2010.algo.Dip;

        $i0 := @parameter0: int;

        $i0 = $i0 & 255;

        return $i0;
    }

    private int getG(int)
    {
        int $i0, $i1;
        mpp.mpp2010.algo.Dip r0;

        r0 := @this: mpp.mpp2010.algo.Dip;

        $i0 := @parameter0: int;

        $i1 = 65280;

        $i0 = $i1 & $i0;

        $i0 = $i0 >> 8;

        return $i0;
    }

    private android.graphics.Bitmap getNewImage()
    {
        int[][] $r10;
        mpp.mpp2010.algo.Dip r0;
        double[] $r8;
        android.graphics.Bitmap$Config $r4;
        int[] $r11;
        int i0, i1, i2, $i3, $i4, $i5;
        java.lang.String $r3;
        double $d0, $d1;
        double[][][] $r6;
        java.lang.Exception r1;
        int[][][] $r9;
        android.graphics.Bitmap $r5;
        java.lang.StringBuilder $r2;
        double[][] $r7;

        r0 := @this: mpp.mpp2010.algo.Dip;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("W=");

        $i3 = r0.<mpp.mpp2010.algo.Dip: int W>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("H=");

        $i3 = r0.<mpp.mpp2010.algo.Dip: int H>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("iforests", $r3);

        $i3 = r0.<mpp.mpp2010.algo.Dip: int W>;

        $i4 = r0.<mpp.mpp2010.algo.Dip: int H>;

        $r4 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config RGB_565>;

        $r5 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>($i3, $i4, $r4);

        $i3 = 0;

        $i4 = 0;

     label1:
        $i5 = r0.<mpp.mpp2010.algo.Dip: int H>;

        if $i4 < $i5 goto label2;

        $i3 = virtualinvoke $r5.<android.graphics.Bitmap: int getWidth()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i3);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("srx", $r3);

        return $r5;

     label2:
        $i5 = 0;

     label3:
        i0 = r0.<mpp.mpp2010.algo.Dip: int W>;

        if $i5 < i0 goto label4;

        $i4 = $i4 + 1;

        goto label1;

     label4:
        $r6 = r0.<mpp.mpp2010.algo.Dip: double[][][] temp>;

        $r7 = $r6[0];

        $r8 = $r7[$i4];

        $d0 = $r8[$i5];

        $r8 = r0.<mpp.mpp2010.algo.Dip: double[] c_map>;

        $d1 = $r8[$i3];

        $d0 = staticinvoke <java.lang.Math: double pow(double,double)>($d0, $d1);

        $r9 = r0.<mpp.mpp2010.algo.Dip: int[][][] RGB>;

        $r10 = $r9[0];

        $r11 = $r10[$i4];

        i0 = $r11[$i5];

        $d1 = (double) i0;

        $d0 = $d0 * $d1;

        i0 = (int) $d0;

        $r6 = r0.<mpp.mpp2010.algo.Dip: double[][][] temp>;

        $r7 = $r6[1];

        $r8 = $r7[$i4];

        $d0 = $r8[$i5];

        $r8 = r0.<mpp.mpp2010.algo.Dip: double[] c_map>;

        $d1 = $r8[$i3];

        $d0 = staticinvoke <java.lang.Math: double pow(double,double)>($d0, $d1);

        $r9 = r0.<mpp.mpp2010.algo.Dip: int[][][] RGB>;

        $r10 = $r9[1];

        $r11 = $r10[$i4];

        i2 = $r11[$i5];

        $d1 = (double) i2;

        $d0 = $d0 * $d1;

        i1 = (int) $d0;

        $r6 = r0.<mpp.mpp2010.algo.Dip: double[][][] temp>;

        $r7 = $r6[2];

        $r8 = $r7[$i4];

        $d0 = $r8[$i5];

        $r8 = r0.<mpp.mpp2010.algo.Dip: double[] c_map>;

        $d1 = $r8[$i3];

        $d0 = staticinvoke <java.lang.Math: double pow(double,double)>($d0, $d1);

        $r9 = r0.<mpp.mpp2010.algo.Dip: int[][][] RGB>;

        $r10 = $r9[2];

        $r11 = $r10[$i4];

        i2 = $r11[$i5];

        $d1 = (double) i2;

        $d0 = $d0 * $d1;

        i2 = (int) $d0;

        i1 = i1 << 8;

        i0 = i1 + i0;

        i2 = i2 << 16;

        i0 = i0 + i2;

     label5:
        virtualinvoke $r5.<android.graphics.Bitmap: void setPixel(int,int,int)>($i5, $i4, i0);

     label6:
        $i5 = $i5 + 1;

        $i3 = $i3 + 1;

        goto label3;

     label7:
        r1 := @caughtexception;

        $r3 = virtualinvoke r1.<java.lang.Exception: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("debug", $r3);

        return null;

        catch java.lang.Exception from label5 to label6 with label7;
    }

    private int getR(int)
    {
        int $i0;
        mpp.mpp2010.algo.Dip r0;

        r0 := @this: mpp.mpp2010.algo.Dip;

        $i0 := @parameter0: int;

        $i0 = 16711680 & $i0;

        $i0 = $i0 >> 16;

        return $i0;
    }

    private void getRGBArray()
    {
        int[][] $r4;
        mpp.mpp2010.algo.Dip r0;
        int[][][] $r3;
        int[] $r2;
        android.graphics.Bitmap $r1;
        int i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: mpp.mpp2010.algo.Dip;

        i0 = 0;

     label01:
        $i1 = r0.<mpp.mpp2010.algo.Dip: int H>;

        if i0 < $i1 goto label02;

        return;

     label02:
        $i1 = 0;

     label03:
        $i2 = r0.<mpp.mpp2010.algo.Dip: int W>;

        if $i1 < $i2 goto label04;

        i0 = i0 + 1;

        goto label01;

     label04:
        $r1 = r0.<mpp.mpp2010.algo.Dip: android.graphics.Bitmap bmp>;

        $i3 = virtualinvoke $r1.<android.graphics.Bitmap: int getPixel(int,int)>($i1, i0);

        $i2 = specialinvoke r0.<mpp.mpp2010.algo.Dip: int getB(int)>($i3);

        $i4 = specialinvoke r0.<mpp.mpp2010.algo.Dip: int getG(int)>($i3);

        $i3 = specialinvoke r0.<mpp.mpp2010.algo.Dip: int getR(int)>($i3);

        $r2 = r0.<mpp.mpp2010.algo.Dip: int[] min>;

        $i5 = $r2[0];

        if $i2 >= $i5 goto label05;

        $r2 = r0.<mpp.mpp2010.algo.Dip: int[] min>;

        $r2[0] = $i2;

     label05:
        $r2 = r0.<mpp.mpp2010.algo.Dip: int[] max>;

        $i5 = $r2[0];

        if $i2 <= $i5 goto label06;

        $r2 = r0.<mpp.mpp2010.algo.Dip: int[] max>;

        $r2[0] = $i2;

     label06:
        $r2 = r0.<mpp.mpp2010.algo.Dip: int[] min>;

        $i5 = $r2[1];

        if $i4 >= $i5 goto label07;

        $r2 = r0.<mpp.mpp2010.algo.Dip: int[] min>;

        $r2[1] = $i4;

     label07:
        $r2 = r0.<mpp.mpp2010.algo.Dip: int[] max>;

        $i5 = $r2[1];

        if $i4 <= $i5 goto label08;

        $r2 = r0.<mpp.mpp2010.algo.Dip: int[] max>;

        $r2[1] = $i4;

     label08:
        $r2 = r0.<mpp.mpp2010.algo.Dip: int[] min>;

        $i5 = $r2[2];

        if $i3 >= $i5 goto label09;

        $r2 = r0.<mpp.mpp2010.algo.Dip: int[] min>;

        $r2[2] = $i3;

     label09:
        $r2 = r0.<mpp.mpp2010.algo.Dip: int[] max>;

        $i5 = $r2[2];

        if $i3 <= $i5 goto label10;

        $r2 = r0.<mpp.mpp2010.algo.Dip: int[] max>;

        $r2[2] = $i3;

     label10:
        $r3 = r0.<mpp.mpp2010.algo.Dip: int[][][] RGB>;

        $r4 = $r3[0];

        $r2 = $r4[i0];

        $r2[$i1] = $i2;

        $r3 = r0.<mpp.mpp2010.algo.Dip: int[][][] RGB>;

        $r4 = $r3[1];

        $r2 = $r4[i0];

        $r2[$i1] = $i4;

        $r3 = r0.<mpp.mpp2010.algo.Dip: int[][][] RGB>;

        $r4 = $r3[2];

        $r2 = $r4[i0];

        $r2[$i1] = $i3;

        $i1 = $i1 + 1;

        goto label03;
    }

    private void init()
    {
        double[][][] $r7;
        mpp.mpp2010.algo.Dip r0;
        double[] $r10;
        int[][][] $r8;
        int[] $r4, $r11, $r12;
        android.graphics.Bitmap $r1;
        int $i0, $i1;
        java.lang.StringBuilder $r2;
        java.lang.Class $r5;
        java.lang.Object $r6;
        java.lang.String $r3;
        double[][] $r9;

        r0 := @this: mpp.mpp2010.algo.Dip;

        $r1 = r0.<mpp.mpp2010.algo.Dip: android.graphics.Bitmap bmp>;

        $i0 = virtualinvoke $r1.<android.graphics.Bitmap: int getHeight()>();

        r0.<mpp.mpp2010.algo.Dip: int H> = $i0;

        $r1 = r0.<mpp.mpp2010.algo.Dip: android.graphics.Bitmap bmp>;

        $i0 = virtualinvoke $r1.<android.graphics.Bitmap: int getWidth()>();

        r0.<mpp.mpp2010.algo.Dip: int W> = $i0;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("[DIP] construct H=");

        $i0 = r0.<mpp.mpp2010.algo.Dip: int H>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("debug", $r3);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("[DIP] construct W=");

        $i0 = r0.<mpp.mpp2010.algo.Dip: int W>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("debug", $r3);

        $i0 = r0.<mpp.mpp2010.algo.Dip: int H>;

        $i1 = r0.<mpp.mpp2010.algo.Dip: int W>;

        $r4 = newarray (int)[3];

        $r4[0] = 3;

        $r4[1] = $i0;

        $r4[2] = $i1;

        $r5 = <java.lang.Double: java.lang.Class TYPE>;

        $r6 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r5, $r4);

        $r7 = (double[][][]) $r6;

        r0.<mpp.mpp2010.algo.Dip: double[][][] temp> = $r7;

        $i0 = r0.<mpp.mpp2010.algo.Dip: int H>;

        $i1 = r0.<mpp.mpp2010.algo.Dip: int W>;

        $r4 = newarray (int)[3];

        $r4[0] = 3;

        $r4[1] = $i0;

        $r4[2] = $i1;

        $r5 = <java.lang.Integer: java.lang.Class TYPE>;

        $r6 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r5, $r4);

        $r8 = (int[][][]) $r6;

        r0.<mpp.mpp2010.algo.Dip: int[][][] RGB> = $r8;

        $i0 = r0.<mpp.mpp2010.algo.Dip: int H>;

        $i1 = r0.<mpp.mpp2010.algo.Dip: int W>;

        $r4 = newarray (int)[2];

        $r4[0] = $i0;

        $r4[1] = $i1;

        $r5 = <java.lang.Double: java.lang.Class TYPE>;

        $r6 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r5, $r4);

        $r9 = (double[][]) $r6;

        r0.<mpp.mpp2010.algo.Dip: double[][] Gray> = $r9;

        $i0 = r0.<mpp.mpp2010.algo.Dip: int H>;

        $i1 = r0.<mpp.mpp2010.algo.Dip: int W>;

        $r4 = newarray (int)[2];

        $r4[0] = $i0;

        $r4[1] = $i1;

        $r5 = <java.lang.Double: java.lang.Class TYPE>;

        $r6 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r5, $r4);

        $r9 = (double[][]) $r6;

        r0.<mpp.mpp2010.algo.Dip: double[][] aft_gra> = $r9;

        $i0 = r0.<mpp.mpp2010.algo.Dip: int H>;

        $i1 = r0.<mpp.mpp2010.algo.Dip: int W>;

        $i0 = $i0 * $i1;

        $r10 = newarray (double)[$i0];

        r0.<mpp.mpp2010.algo.Dip: double[] c_map> = $r10;

        $r4 = r0.<mpp.mpp2010.algo.Dip: int[] min>;

        $r11 = r0.<mpp.mpp2010.algo.Dip: int[] min>;

        $r12 = r0.<mpp.mpp2010.algo.Dip: int[] min>;

        $r12[2] = 255;

        $r11[1] = 255;

        $r4[0] = 255;

        $r4 = r0.<mpp.mpp2010.algo.Dip: int[] max>;

        $r11 = r0.<mpp.mpp2010.algo.Dip: int[] max>;

        $r12 = r0.<mpp.mpp2010.algo.Dip: int[] max>;

        $r12[2] = 0;

        $r11[1] = 0;

        $r4[0] = 0;

        return;
    }

    private void local_normalization()
    {
        mpp.mpp2010.algo.Dip r0;

        r0 := @this: mpp.mpp2010.algo.Dip;

        specialinvoke r0.<mpp.mpp2010.algo.Dip: void _normalization(int)>(0);

        specialinvoke r0.<mpp.mpp2010.algo.Dip: void _normalization(int)>(1);

        specialinvoke r0.<mpp.mpp2010.algo.Dip: void _normalization(int)>(2);

        return;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] $r0;

        $r0 := @parameter0: java.lang.String[];

        return;
    }

    public void _write(android.graphics.Bitmap, java.lang.String)
    {
        mpp.mpp2010.algo.Dip r0;
        android.graphics.Bitmap $r1;
        java.io.FileOutputStream r4;
        android.graphics.Bitmap$CompressFormat $r5;
        java.lang.String $r2;
        java.io.File r3;
        java.lang.Exception $r6;

        r0 := @this: mpp.mpp2010.algo.Dip;

        $r1 := @parameter0: android.graphics.Bitmap;

        $r2 := @parameter1: java.lang.String;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ggm", $r2);

        r3 = new java.io.File;

        specialinvoke r3.<java.io.File: void <init>(java.lang.String)>($r2);

        r4 = new java.io.FileOutputStream;

     label1:
        specialinvoke r4.<java.io.FileOutputStream: void <init>(java.io.File)>(r3);

     label2:
        $r5 = <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat PNG>;

     label3:
        virtualinvoke $r1.<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>($r5, 77, r4);

        virtualinvoke r4.<java.io.FileOutputStream: void flush()>();

        virtualinvoke r4.<java.io.FileOutputStream: void close()>();

     label4:
        return;

     label5:
        $r6 := @caughtexception;

        virtualinvoke $r6.<java.lang.Exception: void printStackTrace()>();

        return;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }

    public void process(double)
    {
        mpp.mpp2010.algo.Dip r0;
        long l0, $l1;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        double $d0;

        r0 := @this: mpp.mpp2010.algo.Dip;

        $d0 := @parameter0: double;

        l0 = staticinvoke <java.lang.System: long nanoTime()>();

        specialinvoke r0.<mpp.mpp2010.algo.Dip: void getRGBArray()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("debug", "[DIP] getRGBArray done");

        specialinvoke r0.<mpp.mpp2010.algo.Dip: void local_normalization()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("debug", "[DIP] local_normalization done");

        specialinvoke r0.<mpp.mpp2010.algo.Dip: void count_gray_level()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("debug", "[DIP] count_gray_level done");

        specialinvoke r0.<mpp.mpp2010.algo.Dip: void count_cmap(double)>($d0);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("debug", "[DIP] count_cmap done");

        $l1 = staticinvoke <java.lang.System: long nanoTime()>();

        l0 = $l1 - l0;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("[DIP] time:");

        l0 = l0 / 1000000L;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("debug", $r2);

        return;
    }

    public java.lang.String[] process9_Cache()
    {
        mpp.mpp2010.algo.Dip r0;
        android.graphics.Bitmap[] r2;
        double[] $r3;
        java.lang.String[] r1;
        android.graphics.Bitmap $r4;
        int $i0, $i1;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;
        double $d0;

        r0 := @this: mpp.mpp2010.algo.Dip;

        specialinvoke r0.<mpp.mpp2010.algo.Dip: void getRGBArray()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("debug", "[DIP] getRGBArray done");

        specialinvoke r0.<mpp.mpp2010.algo.Dip: void local_normalization()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("debug", "[DIP] local_normalization done");

        specialinvoke r0.<mpp.mpp2010.algo.Dip: void count_gray_level()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("debug", "[DIP] count_gray_level done");

        $r3 = <mpp.mpp2010.algo.Dip: double[] _C>;

        $i0 = lengthof $r3;

        r1 = newarray (java.lang.String)[$i0];

        $r3 = <mpp.mpp2010.algo.Dip: double[] _C>;

        $i0 = lengthof $r3;

        r2 = newarray (android.graphics.Bitmap)[$i0];

        $i0 = 0;

     label1:
        $r3 = <mpp.mpp2010.algo.Dip: double[] _C>;

        $i1 = lengthof $r3;

        if $i0 < $i1 goto label2;

        return r1;

     label2:
        $r3 = <mpp.mpp2010.algo.Dip: double[] _C>;

        $d0 = $r3[$i0];

        specialinvoke r0.<mpp.mpp2010.algo.Dip: void count_cmap(double)>($d0);

        $r4 = specialinvoke r0.<mpp.mpp2010.algo.Dip: android.graphics.Bitmap getNewImage()>();

        r2[$i0] = $r4;

        $r5 = new java.lang.StringBuilder;

        $r6 = r0.<mpp.mpp2010.algo.Dip: java.lang.String cache_path>;

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r6);

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>($r6);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        r1[$i0] = $r6;

        $r4 = r2[$i0];

        $r6 = r1[$i0];

        virtualinvoke r0.<mpp.mpp2010.algo.Dip: void _write(android.graphics.Bitmap,java.lang.String)>($r4, $r6);

        $r6 = r1[$i0];

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("debug", $r6);

        $i0 = $i0 + 1;

        goto label1;
    }

    public android.graphics.Bitmap[] process9_Drawable()
    {
        mpp.mpp2010.algo.Dip r0;
        android.graphics.Bitmap $r2;
        android.graphics.Bitmap[] r1;
        double[] $r3;
        int $i0, $i1;
        double $d0;

        r0 := @this: mpp.mpp2010.algo.Dip;

        specialinvoke r0.<mpp.mpp2010.algo.Dip: void getRGBArray()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("debug", "[DIP] getRGBArray done");

        specialinvoke r0.<mpp.mpp2010.algo.Dip: void local_normalization()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("debug", "[DIP] local_normalization done");

        specialinvoke r0.<mpp.mpp2010.algo.Dip: void count_gray_level()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("debug", "[DIP] count_gray_level done");

        $r3 = <mpp.mpp2010.algo.Dip: double[] _C>;

        $i0 = lengthof $r3;

        r1 = newarray (android.graphics.Bitmap)[$i0];

        $i0 = 0;

     label1:
        $r3 = <mpp.mpp2010.algo.Dip: double[] _C>;

        $i1 = lengthof $r3;

        if $i0 < $i1 goto label2;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("debug", "[DIP] Loop done");

        return r1;

     label2:
        $r3 = <mpp.mpp2010.algo.Dip: double[] _C>;

        $d0 = $r3[$i0];

        specialinvoke r0.<mpp.mpp2010.algo.Dip: void count_cmap(double)>($d0);

        $r2 = specialinvoke r0.<mpp.mpp2010.algo.Dip: android.graphics.Bitmap getNewImage()>();

        r1[$i0] = $r2;

        $i0 = $i0 + 1;

        goto label1;
    }

    public void resize()
    {
        mpp.mpp2010.algo.Dip r0;
        android.graphics.Bitmap $r3;
        int $i0, $i1;
        android.view.Display $r1;
        java.lang.String $r2;

        r0 := @this: mpp.mpp2010.algo.Dip;

        $r1 = r0.<mpp.mpp2010.algo.Dip: android.view.Display display>;

        $i0 = virtualinvoke $r1.<android.view.Display: int getWidth()>();

        $r1 = r0.<mpp.mpp2010.algo.Dip: android.view.Display display>;

        $i1 = virtualinvoke $r1.<android.view.Display: int getHeight()>();

        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("srx", $r2);

        $r3 = r0.<mpp.mpp2010.algo.Dip: android.graphics.Bitmap bmp>;

        $i0 = $i0 / 3;

        $i1 = $i1 / 3;

        $r3 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createScaledBitmap(android.graphics.Bitmap,int,int,boolean)>($r3, $i0, $i1, 1);

        r0.<mpp.mpp2010.algo.Dip: android.graphics.Bitmap bmp> = $r3;

        $r3 = r0.<mpp.mpp2010.algo.Dip: android.graphics.Bitmap bmp>;

        $i0 = virtualinvoke $r3.<android.graphics.Bitmap: int getWidth()>();

        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("srx", $r2);

        return;
    }

    public android.graphics.Bitmap storeProcessedImage(int, java.lang.String)
    {
        mpp.mpp2010.algo.Dip r0;
        double[] $r5;
        android.graphics.Bitmap $r4;
        int $i0;
        java.lang.StringBuilder $r2;
        java.lang.String $r1, $r3;
        double $d0;

        r0 := @this: mpp.mpp2010.algo.Dip;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.String;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("debug", "storeProcessedImage\n");

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("k=");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("debug", $r3);

        $r4 = r0.<mpp.mpp2010.algo.Dip: android.graphics.Bitmap obmp>;

        r0.<mpp.mpp2010.algo.Dip: android.graphics.Bitmap bmp> = $r4;

        specialinvoke r0.<mpp.mpp2010.algo.Dip: void init()>();

        $r5 = <mpp.mpp2010.algo.Dip: double[] _C>;

        $d0 = $r5[$i0];

        virtualinvoke r0.<mpp.mpp2010.algo.Dip: void process(double)>($d0);

        $r4 = specialinvoke r0.<mpp.mpp2010.algo.Dip: android.graphics.Bitmap getNewImage()>();

        virtualinvoke r0.<mpp.mpp2010.algo.Dip: void _write(android.graphics.Bitmap,java.lang.String)>($r4, $r1);

        return $r4;
    }
}
