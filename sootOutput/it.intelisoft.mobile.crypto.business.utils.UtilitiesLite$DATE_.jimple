public final class it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_ extends java.lang.Object
{
    final it.intelisoft.mobile.crypto.business.utils.UtilitiesLite this$0;

    public void <init>(it.intelisoft.mobile.crypto.business.utils.UtilitiesLite)
    {
        it.intelisoft.mobile.crypto.business.utils.UtilitiesLite $r1;
        it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_ r0;

        r0 := @this: it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_;

        $r1 := @parameter0: it.intelisoft.mobile.crypto.business.utils.UtilitiesLite;

        r0.<it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_: it.intelisoft.mobile.crypto.business.utils.UtilitiesLite this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.sql.Timestamp addSqlDelta(java.sql.Timestamp, int, int) throws java.lang.Exception
    {
        java.util.Calendar $r2;
        java.sql.Timestamp $r1;
        int $i0, $i1;
        long $l2;
        it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_ r0;

        r0 := @this: it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_;

        $r1 := @parameter0: java.sql.Timestamp;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $l2 = virtualinvoke $r1.<java.sql.Timestamp: long getTime()>();

        virtualinvoke $r2.<java.util.Calendar: void setTimeInMillis(long)>($l2);

        virtualinvoke $r2.<java.util.Calendar: void add(int,int)>(13, $i1);

        $r1 = new java.sql.Timestamp;

        $l2 = virtualinvoke $r2.<java.util.Calendar: long getTimeInMillis()>();

        specialinvoke $r1.<java.sql.Timestamp: void <init>(long)>($l2);

        return $r1;
    }

    public java.lang.String calendar2String(java.util.Calendar, java.lang.String) throws java.lang.Exception
    {
        java.util.Calendar $r1;
        java.util.Date $r4;
        java.text.SimpleDateFormat r3;
        java.lang.String $r2;
        it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_ r0;

        r0 := @this: it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_;

        $r1 := @parameter0: java.util.Calendar;

        $r2 := @parameter1: java.lang.String;

        r3 = new java.text.SimpleDateFormat;

        specialinvoke r3.<java.text.SimpleDateFormat: void <init>(java.lang.String)>($r2);

        $r4 = virtualinvoke $r1.<java.util.Calendar: java.util.Date getTime()>();

        $r2 = virtualinvoke r3.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r4);

        return $r2;
    }

    public java.lang.String convertDate(java.lang.String, java.lang.String, java.lang.String) throws java.lang.Exception
    {
        java.util.Date $r7;
        java.text.ParsePosition $r4;
        java.text.SimpleDateFormat $r5, $r6;
        java.lang.Exception $r9;
        java.lang.StringBuilder $r10;
        java.lang.String $r1, $r2, $r3, $r8;
        it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_ r0;

        r0 := @this: it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r5 = new java.text.SimpleDateFormat;

     label1:
        specialinvoke $r5.<java.text.SimpleDateFormat: void <init>(java.lang.String)>($r3);

     label2:
        $r6 = new java.text.SimpleDateFormat;

     label3:
        specialinvoke $r6.<java.text.SimpleDateFormat: void <init>(java.lang.String)>($r2);

     label4:
        $r4 = new java.text.ParsePosition;

     label5:
        specialinvoke $r4.<java.text.ParsePosition: void <init>(int)>(0);

        $r7 = virtualinvoke $r6.<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String,java.text.ParsePosition)>($r1, $r4);

        $r8 = virtualinvoke $r5.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r7);

     label6:
        return $r8;

     label7:
        $r9 := @caughtexception;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("ERRORE NELLA CONVERSIONE DELLA DATA [");

        $r8 = virtualinvoke $r9.<java.lang.Exception: java.lang.String getMessage()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] DATA: [");

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] FROM:[");

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] TO:[");

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r1 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = new java.lang.Exception;

        specialinvoke $r9.<java.lang.Exception: void <init>(java.lang.String)>($r1);

        throw $r9;

        catch java.lang.Exception from label1 to label2 with label7;
        catch java.lang.Exception from label3 to label4 with label7;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    public java.sql.Timestamp getPasqua(int)
    {
        java.util.GregorianCalendar r1;
        java.sql.Timestamp $r2;
        long $l5;
        int $i0, i1, i2, i3, i4, $i6;
        it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_ r0;
        boolean $z0;

        r0 := @this: it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_;

        $i0 := @parameter0: int;

        i2 = $i0 % 19;

        i2 = i2 + 1;

        i3 = $i0 / 100;

        i1 = i3 + 1;

        i3 = i1 * 3;

        i3 = i3 / 4;

        i3 = i3 - 12;

        i1 = i1 * 8;

        i1 = i1 + 5;

        i1 = i1 / 25;

        i4 = i1 - 5;

        i1 = $i0 * 5;

        i1 = i1 / 4;

        i1 = i1 - i3;

        i1 = i1 - 10;

        $i6 = i2 * 11;

        $i6 = $i6 + 20;

        i4 = $i6 + i4;

        i3 = i4 - i3;

        i3 = i3 % 30;

        if i3 != 25 goto label1;

        if i2 > 11 goto label2;

     label1:
        if i3 != 24 goto label3;

     label2:
        i3 = i3 + 1;

     label3:
        i2 = 44 - i3;

        if i2 >= 21 goto label6;

        $z0 = 1;

     label4:
        i3 = $z0 * 30;

        i2 = i2 + i3;

        i3 = i1 + i2;

        i3 = i3 % 7;

        i3 = 7 - i3;

        i2 = i2 + i3;

        if i2 <= 31 goto label7;

        r1 = new java.util.GregorianCalendar;

        i2 = i2 - 31;

        specialinvoke r1.<java.util.GregorianCalendar: void <init>(int,int,int)>($i0, 3, i2);

     label5:
        $r2 = new java.sql.Timestamp;

        $l5 = virtualinvoke r1.<java.util.Calendar: long getTimeInMillis()>();

        specialinvoke $r2.<java.sql.Timestamp: void <init>(long)>($l5);

        return $r2;

     label6:
        $z0 = 0;

        goto label4;

     label7:
        r1 = new java.util.GregorianCalendar;

        specialinvoke r1.<java.util.GregorianCalendar: void <init>(int,int,int)>($i0, 2, i2);

        goto label5;
    }

    public java.sql.Date getSqlDate(java.util.Date)
    {
        java.util.Date $r1;
        long $l0;
        it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_ r0;
        java.sql.Date $r2;

        r0 := @this: it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_;

        $r1 := @parameter0: java.util.Date;

        $r2 = new java.sql.Date;

        $l0 = virtualinvoke $r1.<java.util.Date: long getTime()>();

        specialinvoke $r2.<java.sql.Date: void <init>(long)>($l0);

        return $r2;
    }

    public int getSqlDeltaGGDiff(java.sql.Timestamp, java.sql.Timestamp) throws java.lang.Exception
    {
        java.sql.Timestamp $r1, $r2;
        int i0;
        long l1, l2;
        java.lang.String $r3;
        it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_ r0;

        r0 := @this: it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_;

        $r1 := @parameter0: java.sql.Timestamp;

        $r2 := @parameter1: java.sql.Timestamp;

        $r3 = virtualinvoke r0.<it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_: java.lang.String timestamp2String(java.sql.Timestamp,java.lang.String)>($r1, "yyyyMMdd");

        $r1 = virtualinvoke r0.<it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_: java.sql.Timestamp getSring2Timestamp(java.lang.String,java.lang.String)>($r3, "yyyyMMdd");

        $r3 = virtualinvoke r0.<it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_: java.lang.String timestamp2String(java.sql.Timestamp,java.lang.String)>($r2, "yyyyMMdd");

        $r2 = virtualinvoke r0.<it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_: java.sql.Timestamp getSring2Timestamp(java.lang.String,java.lang.String)>($r3, "yyyyMMdd");

        l1 = virtualinvoke $r1.<java.sql.Timestamp: long getTime()>();

        l1 = l1 / 86400000L;

        l2 = virtualinvoke $r2.<java.sql.Timestamp: long getTime()>();

        l2 = l2 / 86400000L;

        l1 = l2 - l1;

        i0 = (int) l1;

        return i0;
    }

    public int getSqlDeltaGGDiffFine(java.sql.Timestamp, java.sql.Timestamp) throws java.lang.Exception
    {
        java.sql.Timestamp $r1, $r2;
        int i0;
        long l1, $l2;
        it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_ r0;

        r0 := @this: it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_;

        $r1 := @parameter0: java.sql.Timestamp;

        $r2 := @parameter1: java.sql.Timestamp;

        l1 = virtualinvoke $r1.<java.sql.Timestamp: long getTime()>();

        $l2 = virtualinvoke $r2.<java.sql.Timestamp: long getTime()>();

        l1 = l1 - $l2;

        l1 = l1 / 86400000L;

        i0 = (int) l1;

        return i0;
    }

    public java.sql.Timestamp getSqlSysdate() throws java.lang.Exception
    {
        java.util.Date r1;
        java.sql.Timestamp r2;
        long $l0;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        java.lang.Exception $r3;
        it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_ r0;

        r0 := @this: it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_;

        r1 = new java.util.Date;

     label1:
        specialinvoke r1.<java.util.Date: void <init>()>();

     label2:
        r2 = new java.sql.Timestamp;

     label3:
        $l0 = virtualinvoke r1.<java.util.Date: long getTime()>();

        specialinvoke r2.<java.sql.Timestamp: void <init>(long)>($l0);

     label4:
        return r2;

     label5:
        $r3 := @caughtexception;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("ERRORE NELLA GET DATE [");

        $r5 = virtualinvoke $r3.<java.lang.Exception: java.lang.String getMessage()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3 = new java.lang.Exception;

        specialinvoke $r3.<java.lang.Exception: void <init>(java.lang.String)>($r5);

        throw $r3;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }

    public java.sql.Time getSqlTime(java.util.Date)
    {
        java.sql.Time $r2;
        java.util.Date $r1;
        long $l0;
        it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_ r0;

        r0 := @this: it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_;

        $r1 := @parameter0: java.util.Date;

        $r2 = new java.sql.Time;

        $l0 = virtualinvoke $r1.<java.util.Date: long getTime()>();

        specialinvoke $r2.<java.sql.Time: void <init>(long)>($l0);

        return $r2;
    }

    public java.sql.Timestamp getSqlTimestamp(java.lang.String) throws java.lang.Exception
    {
        java.sql.Timestamp $r4;
        long $l0;
        java.lang.Exception r2;
        java.util.Calendar $r3;
        java.lang.StringBuilder $r5;
        java.lang.String $r1, $r6;
        it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_ r0;

        r0 := @this: it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_;

        $r1 := @parameter0: java.lang.String;

     label1:
        $r3 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

     label2:
        $r4 = new java.sql.Timestamp;

        $l0 = virtualinvoke $r3.<java.util.Calendar: long getTimeInMillis()>();

        specialinvoke $r4.<java.sql.Timestamp: void <init>(long)>($l0);

        return $r4;

     label3:
        r2 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("ERRORE NELLA GET DATE [");

        $r6 = virtualinvoke r2.<java.lang.Exception: java.lang.String getMessage()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] FORMATO:[");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        r2 = new java.lang.Exception;

        specialinvoke r2.<java.lang.Exception: void <init>(java.lang.String)>($r1);

        throw r2;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public java.sql.Timestamp getSqlTimestamp(java.util.Date)
    {
        java.util.Date $r1;
        java.sql.Timestamp $r2;
        long $l0;
        it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_ r0;

        r0 := @this: it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_;

        $r1 := @parameter0: java.util.Date;

        $r2 = new java.sql.Timestamp;

        $l0 = virtualinvoke $r1.<java.util.Date: long getTime()>();

        specialinvoke $r2.<java.sql.Timestamp: void <init>(long)>($l0);

        return $r2;
    }

    public java.util.Calendar getSring2Calendar(java.lang.String, java.lang.String) throws java.lang.Exception
    {
        java.util.Date $r4;
        java.lang.Exception $r6;
        java.util.Calendar $r5;
        it.intelisoft.mobile.crypto.business.utils.UtilitiesLite $r3;
        java.lang.StringBuilder $r7;
        java.lang.String $r1, $r2;
        it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_ r0;

        r0 := @this: it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

     label1:
        $r3 = staticinvoke <it.intelisoft.mobile.crypto.business.utils.UtilitiesLite: it.intelisoft.mobile.crypto.business.utils.UtilitiesLite getInstance()>();

        r0 = $r3.<it.intelisoft.mobile.crypto.business.utils.UtilitiesLite: it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_ DATE>;

        $r4 = virtualinvoke r0.<it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_: java.util.Date getSring2Date(java.lang.String,java.lang.String)>($r1, "yyyy-MM-dd HH:mm:ss");

        $r5 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke $r5.<java.util.Calendar: void setTime(java.util.Date)>($r4);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("ERRORE NELLA GET DATE [");

        $r1 = virtualinvoke $r6.<java.lang.Exception: java.lang.String getMessage()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] FORMATO:[");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("yyyy-MM-dd HH:mm:ss");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r1 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = new java.lang.Exception;

        specialinvoke $r6.<java.lang.Exception: void <init>(java.lang.String)>($r1);

        throw $r6;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public java.util.Date getSring2Date(java.lang.String, java.lang.String) throws java.lang.Exception
    {
        java.util.Date $r4;
        java.text.SimpleDateFormat r3;
        java.lang.StringBuilder $r6;
        java.lang.String $r1, $r2;
        java.lang.Exception $r5;
        it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_ r0;

        r0 := @this: it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        r3 = new java.text.SimpleDateFormat;

     label1:
        specialinvoke r3.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy-MM-dd HH:mm:ss");

        $r4 = virtualinvoke r3.<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String)>($r1);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("ERRORE NELLA GET DATE [");

        $r1 = virtualinvoke $r5.<java.lang.Exception: java.lang.String getMessage()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] FORMATO:[");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("yyyy-MM-dd HH:mm:ss");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = new java.lang.Exception;

        specialinvoke $r5.<java.lang.Exception: void <init>(java.lang.String)>($r1);

        throw $r5;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public java.sql.Timestamp getSring2Timestamp(java.lang.String, java.lang.String) throws java.lang.Exception
    {
        java.util.Date $r4;
        java.sql.Timestamp r5;
        java.text.SimpleDateFormat r3;
        long $l0;
        java.lang.Exception $r6;
        java.lang.StringBuilder $r7;
        java.lang.String $r1, $r2;
        it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_ r0;

        r0 := @this: it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        r3 = new java.text.SimpleDateFormat;

     label1:
        specialinvoke r3.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy-MM-dd HH:mm:ss");

        $r4 = virtualinvoke r3.<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String)>($r1);

     label2:
        r5 = new java.sql.Timestamp;

     label3:
        $l0 = virtualinvoke $r4.<java.util.Date: long getTime()>();

        specialinvoke r5.<java.sql.Timestamp: void <init>(long)>($l0);

     label4:
        return r5;

     label5:
        $r6 := @caughtexception;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("ERRORE NELLA GET DATE [");

        $r1 = virtualinvoke $r6.<java.lang.Exception: java.lang.String getMessage()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] FORMATO:[");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("yyyy-MM-dd HH:mm:ss");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r1 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = new java.lang.Exception;

        specialinvoke $r6.<java.lang.Exception: void <init>(java.lang.String)>($r1);

        throw $r6;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }

    public java.lang.String getStringDateOffest(java.lang.String, java.lang.String, int, java.lang.String) throws java.lang.Exception
    {
        java.util.Date $r7;
        java.text.ParsePosition $r6;
        java.text.SimpleDateFormat r4;
        java.lang.Exception $r9, $r11;
        java.util.Calendar $r5;
        int $i0;
        java.lang.StringBuilder $r10;
        java.lang.String $r1, $r2, $r3, $r8;
        it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_ r0;

        r0 := @this: it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $r3 := @parameter3: java.lang.String;

     label1:
        $r5 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

     label2:
        r4 = new java.text.SimpleDateFormat;

     label3:
        specialinvoke r4.<java.text.SimpleDateFormat: void <init>(java.lang.String)>($r1);

     label4:
        $r6 = new java.text.ParsePosition;

     label5:
        specialinvoke $r6.<java.text.ParsePosition: void <init>(int)>(0);

        $r7 = virtualinvoke r4.<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String,java.text.ParsePosition)>($r2, $r6);

        virtualinvoke $r5.<java.util.Calendar: void setTime(java.util.Date)>($r7);

        virtualinvoke $r5.<java.util.Calendar: void add(int,int)>(13, $i0);

        $r7 = virtualinvoke $r5.<java.util.Calendar: java.util.Date getTime()>();

        $r8 = virtualinvoke r4.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r7);

        $r8 = virtualinvoke r0.<it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_: java.lang.String convertDate(java.lang.String,java.lang.String,java.lang.String)>($r8, $r1, $r3);

     label6:
        return $r8;

     label7:
        $r9 := @caughtexception;

     label8:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("ERRORE NELLA CONVERSIONE DELLA DATA [");

        $r8 = virtualinvoke $r9.<java.lang.Exception: java.lang.String getMessage()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] DATA: [");

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] FORMATO INPUT:[");

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] OFFSET:[");

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] FORMATO OUTPUT:[");

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r1 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = new java.lang.Exception;

        specialinvoke $r9.<java.lang.Exception: void <init>(java.lang.String)>($r1);

        throw $r9;

     label9:
        $r11 := @caughtexception;

        $r9 = $r11;

        goto label8;

        catch java.lang.Exception from label1 to label2 with label7;
        catch java.lang.Exception from label3 to label4 with label7;
        catch java.lang.Exception from label5 to label6 with label9;
    }

    public java.lang.String getStringSysdate(java.lang.String) throws java.lang.Exception
    {
        java.util.Date $r4;
        java.text.SimpleDateFormat r3;
        java.lang.Exception $r5;
        java.util.Calendar $r2;
        java.lang.StringBuilder $r6;
        java.lang.String $r1, $r7;
        it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_ r0;

        r0 := @this: it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_;

        $r1 := @parameter0: java.lang.String;

     label1:
        $r2 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

     label2:
        r3 = new java.text.SimpleDateFormat;

     label3:
        specialinvoke r3.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy_MM_dd HH:mm:ss");

     label4:
        $r4 = virtualinvoke $r2.<java.util.Calendar: java.util.Date getTime()>();

        $r1 = virtualinvoke r3.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r4);

        return $r1;

     label5:
        $r5 := @caughtexception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("ERRORE NELLA GET DATE [");

        $r7 = virtualinvoke $r5.<java.lang.Exception: java.lang.String getMessage()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] FORMATO:[");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("yyyy_MM_dd HH:mm:ss");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = new java.lang.Exception;

        specialinvoke $r5.<java.lang.Exception: void <init>(java.lang.String)>($r1);

        throw $r5;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }

    public long getTimeInMillis() throws java.lang.Exception
    {
        java.util.Calendar $r1;
        long $l0;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        java.lang.Exception $r2;
        it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_ r0;

        r0 := @this: it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_;

     label1:
        $r1 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $l0 = virtualinvoke $r1.<java.util.Calendar: long getTimeInMillis()>();

     label2:
        return $l0;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("ERRORE NELLA GET DATE [");

        $r4 = virtualinvoke $r2.<java.lang.Exception: java.lang.String getMessage()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r2 = new java.lang.Exception;

        specialinvoke $r2.<java.lang.Exception: void <init>(java.lang.String)>($r4);

        throw $r2;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public long getTimestampCompare(java.sql.Timestamp, java.sql.Timestamp) throws java.lang.Exception
    {
        java.sql.Timestamp $r1, $r2;
        long l0, $l1;
        it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_ r0;

        r0 := @this: it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_;

        $r1 := @parameter0: java.sql.Timestamp;

        $r2 := @parameter1: java.sql.Timestamp;

        l0 = virtualinvoke $r1.<java.sql.Timestamp: long getTime()>();

        $l1 = virtualinvoke $r2.<java.sql.Timestamp: long getTime()>();

        l0 = l0 - $l1;

        return l0;
    }

    public java.sql.Timestamp getTimestampOffest(java.lang.String, java.lang.String, int, java.lang.String) throws java.lang.Exception
    {
        java.util.Date $r7;
        java.sql.Timestamp r8;
        java.text.ParsePosition $r6;
        java.text.SimpleDateFormat r4;
        long $l1;
        java.lang.Exception $r9, $r12;
        java.util.Calendar $r5;
        int $i0;
        java.lang.StringBuilder $r10;
        java.lang.String $r1, $r2, $r3, $r11;
        it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_ r0;

        r0 := @this: it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $r3 := @parameter3: java.lang.String;

     label01:
        $r5 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

     label02:
        r4 = new java.text.SimpleDateFormat;

     label03:
        specialinvoke r4.<java.text.SimpleDateFormat: void <init>(java.lang.String)>($r1);

     label04:
        $r6 = new java.text.ParsePosition;

     label05:
        specialinvoke $r6.<java.text.ParsePosition: void <init>(int)>(0);

        $r7 = virtualinvoke r4.<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String,java.text.ParsePosition)>($r2, $r6);

        virtualinvoke $r5.<java.util.Calendar: void setTime(java.util.Date)>($r7);

        virtualinvoke $r5.<java.util.Calendar: void add(int,int)>(13, $i0);

     label06:
        r8 = new java.sql.Timestamp;

     label07:
        $r7 = virtualinvoke $r5.<java.util.Calendar: java.util.Date getTime()>();

        $l1 = virtualinvoke $r7.<java.util.Date: long getTime()>();

        specialinvoke r8.<java.sql.Timestamp: void <init>(long)>($l1);

     label08:
        return r8;

     label09:
        $r9 := @caughtexception;

     label10:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("ERRORE NELLA CONVERSIONE DELLA DATA [");

        $r11 = virtualinvoke $r9.<java.lang.Exception: java.lang.String getMessage()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] DATA: [");

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] FORMATO INPUT:[");

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] OFFSET:[");

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] FORMATO OUTPUT:[");

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r1 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = new java.lang.Exception;

        specialinvoke $r9.<java.lang.Exception: void <init>(java.lang.String)>($r1);

        throw $r9;

     label11:
        $r12 := @caughtexception;

        $r9 = $r12;

        goto label10;

        catch java.lang.Exception from label01 to label02 with label09;
        catch java.lang.Exception from label03 to label04 with label09;
        catch java.lang.Exception from label05 to label06 with label11;
        catch java.lang.Exception from label07 to label08 with label11;
    }

    public boolean isDataInPeriodo(java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer) throws java.lang.Exception
    {
        java.lang.Integer $r1, $r2, $r3, $r4, $r5;
        int $i0, $i1, $i2, $i3;
        it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_ r0;

        r0 := @this: it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_;

        $r1 := @parameter0: java.lang.Integer;

        $r5 := @parameter1: java.lang.Integer;

        $r2 := @parameter2: java.lang.Integer;

        $r3 := @parameter3: java.lang.Integer;

        $r4 := @parameter4: java.lang.Integer;

        $i0 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        $i1 = virtualinvoke $r1.<java.lang.Integer: int intValue()>();

        if $i0 >= $i1 goto label4;

        $i1 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $i0 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        $r5 = $r3;

     label1:
        $i2 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();

        $i3 = virtualinvoke $r1.<java.lang.Integer: int intValue()>();

        if $i2 < $i3 goto label2;

        $i2 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();

        if $i2 <= $i1 goto label3;

     label2:
        $i1 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();

        $i2 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        if $i1 < $i2 goto label5;

        $i1 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();

        if $i1 > $i0 goto label5;

     label3:
        return 1;

     label4:
        $i1 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        $i0 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        $r5 = $r1;

        goto label1;

     label5:
        return 0;
    }

    public int timestamp2Anno(java.sql.Timestamp) throws java.lang.Exception
    {
        java.sql.Timestamp $r1;
        int $i0;
        java.text.SimpleDateFormat r2;
        java.lang.String $r3;
        it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_ r0;

        r0 := @this: it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_;

        $r1 := @parameter0: java.sql.Timestamp;

        r2 = new java.text.SimpleDateFormat;

        specialinvoke r2.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy");

        $r3 = virtualinvoke r2.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r1);

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        return $i0;
    }

    public int timestamp2HH(java.sql.Timestamp) throws java.lang.Exception
    {
        java.sql.Timestamp $r1;
        int $i0;
        java.text.SimpleDateFormat r2;
        java.lang.String $r3;
        it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_ r0;

        r0 := @this: it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_;

        $r1 := @parameter0: java.sql.Timestamp;

        r2 = new java.text.SimpleDateFormat;

        specialinvoke r2.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("H");

        $r3 = virtualinvoke r2.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r1);

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        return $i0;
    }

    public int timestamp2HHmm(java.sql.Timestamp) throws java.lang.Exception
    {
        java.sql.Timestamp $r1;
        int $i0;
        java.text.SimpleDateFormat r2;
        java.lang.String $r3;
        it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_ r0;

        r0 := @this: it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_;

        $r1 := @parameter0: java.sql.Timestamp;

        r2 = new java.text.SimpleDateFormat;

        specialinvoke r2.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("Hmm");

        $r3 = virtualinvoke r2.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r1);

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        return $i0;
    }

    public int timestamp2ProgressivoAnno(java.sql.Timestamp) throws java.lang.Exception
    {
        java.sql.Timestamp $r1;
        int $i0;
        java.text.SimpleDateFormat r2;
        java.lang.String $r3;
        it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_ r0;

        r0 := @this: it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_;

        $r1 := @parameter0: java.sql.Timestamp;

        r2 = new java.text.SimpleDateFormat;

        specialinvoke r2.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("D");

        $r3 = virtualinvoke r2.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r1);

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        return $i0;
    }

    public java.lang.String timestamp2String(java.sql.Timestamp, java.lang.String) throws java.lang.Exception
    {
        java.sql.Timestamp $r1;
        java.text.SimpleDateFormat r3;
        java.lang.String $r2;
        it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_ r0;

        r0 := @this: it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_;

        $r1 := @parameter0: java.sql.Timestamp;

        $r2 := @parameter1: java.lang.String;

        r3 = new java.text.SimpleDateFormat;

        specialinvoke r3.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy-MM-dd HH:mm:ss");

        $r2 = virtualinvoke r3.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r1);

        return $r2;
    }

    public int tsCompareTo(java.lang.String, java.lang.String, java.lang.String) throws java.lang.Exception
    {
        java.sql.Timestamp $r4, $r5;
        int $i0;
        java.lang.String $r1, $r2, $r3;
        it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_ r0;

        r0 := @this: it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 = virtualinvoke r0.<it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_: java.sql.Timestamp getSring2Timestamp(java.lang.String,java.lang.String)>($r1, $r3);

        $r5 = virtualinvoke r0.<it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_: java.sql.Timestamp getSring2Timestamp(java.lang.String,java.lang.String)>($r2, $r3);

        $i0 = virtualinvoke $r5.<java.sql.Timestamp: int compareTo(java.sql.Timestamp)>($r4);

        return $i0;
    }

    public int tsCompareTo(java.sql.Timestamp, java.sql.Timestamp) throws java.lang.Exception
    {
        java.sql.Timestamp $r1, $r2;
        int $i0;
        it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_ r0;

        r0 := @this: it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_;

        $r1 := @parameter0: java.sql.Timestamp;

        $r2 := @parameter1: java.sql.Timestamp;

        $i0 = virtualinvoke $r1.<java.sql.Timestamp: int compareTo(java.sql.Timestamp)>($r2);

        return $i0;
    }

    public int tsCompareTo(java.sql.Timestamp, java.sql.Timestamp, java.lang.String) throws java.lang.Exception
    {
        java.sql.Timestamp $r1, $r2;
        int $i0;
        java.lang.String $r3;
        it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_ r0;

        r0 := @this: it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_;

        $r1 := @parameter0: java.sql.Timestamp;

        $r2 := @parameter1: java.sql.Timestamp;

        $r3 := @parameter2: java.lang.String;

        $r1 = virtualinvoke r0.<it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_: java.sql.Timestamp tsFormat(java.sql.Timestamp,java.lang.String)>($r1, $r3);

        $r2 = virtualinvoke r0.<it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_: java.sql.Timestamp tsFormat(java.sql.Timestamp,java.lang.String)>($r2, $r3);

        $i0 = virtualinvoke $r2.<java.sql.Timestamp: int compareTo(java.sql.Timestamp)>($r1);

        return $i0;
    }

    public java.sql.Timestamp tsFormat(java.sql.Timestamp, java.lang.String) throws java.lang.Exception
    {
        java.sql.Timestamp $r1;
        java.lang.String $r2, $r3;
        it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_ r0;

        r0 := @this: it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_;

        $r1 := @parameter0: java.sql.Timestamp;

        $r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_: java.lang.String timestamp2String(java.sql.Timestamp,java.lang.String)>($r1, $r2);

        $r1 = virtualinvoke r0.<it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$DATE_: java.sql.Timestamp getSring2Timestamp(java.lang.String,java.lang.String)>($r3, $r2);

        return $r1;
    }
}
