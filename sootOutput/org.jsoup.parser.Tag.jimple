public class org.jsoup.parser.Tag extends java.lang.Object
{
    private static final java.lang.String[] blockTags;
    private static final java.lang.String[] emptyTags;
    private static final java.lang.String[] formatAsInlineTags;
    private static final java.lang.String[] inlineTags;
    private static final java.lang.String[] preserveWhitespaceTags;
    private static final java.util.Map tags;
    private boolean canContainBlock;
    private boolean canContainInline;
    private boolean empty;
    private boolean formatAsBlock;
    private boolean isBlock;
    private boolean preserveWhitespace;
    private boolean selfClosing;
    private java.lang.String tagName;

    static void <clinit>()
    {
        java.util.HashMap $r0;
        java.lang.String[] $r1;
        org.jsoup.parser.Tag r3;
        java.util.Map $r4;
        int i0, i1;
        java.lang.Object $r5;
        java.lang.String r2;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <org.jsoup.parser.Tag: java.util.Map tags> = $r0;

        $r1 = newarray (java.lang.String)[59];

        $r1[0] = "html";

        $r1[1] = "head";

        $r1[2] = "body";

        $r1[3] = "frameset";

        $r1[4] = "script";

        $r1[5] = "noscript";

        $r1[6] = "style";

        $r1[7] = "meta";

        $r1[8] = "link";

        $r1[9] = "title";

        $r1[10] = "frame";

        $r1[11] = "noframes";

        $r1[12] = "section";

        $r1[13] = "nav";

        $r1[14] = "aside";

        $r1[15] = "hgroup";

        $r1[16] = "header";

        $r1[17] = "footer";

        $r1[18] = "p";

        $r1[19] = "h1";

        $r1[20] = "h2";

        $r1[21] = "h3";

        $r1[22] = "h4";

        $r1[23] = "h5";

        $r1[24] = "h6";

        $r1[25] = "ul";

        $r1[26] = "ol";

        $r1[27] = "pre";

        $r1[28] = "div";

        $r1[29] = "blockquote";

        $r1[30] = "hr";

        $r1[31] = "address";

        $r1[32] = "figure";

        $r1[33] = "figcaption";

        $r1[34] = "form";

        $r1[35] = "fieldset";

        $r1[36] = "ins";

        $r1[37] = "del";

        $r1[38] = "s";

        $r1[39] = "dl";

        $r1[40] = "dt";

        $r1[41] = "dd";

        $r1[42] = "li";

        $r1[43] = "table";

        $r1[44] = "caption";

        $r1[45] = "thead";

        $r1[46] = "tfoot";

        $r1[47] = "tbody";

        $r1[48] = "colgroup";

        $r1[49] = "col";

        $r1[50] = "tr";

        $r1[51] = "th";

        $r1[52] = "td";

        $r1[53] = "video";

        $r1[54] = "audio";

        $r1[55] = "canvas";

        $r1[56] = "details";

        $r1[57] = "menu";

        $r1[58] = "plaintext";

        <org.jsoup.parser.Tag: java.lang.String[] blockTags> = $r1;

        $r1 = newarray (java.lang.String)[56];

        $r1[0] = "object";

        $r1[1] = "base";

        $r1[2] = "font";

        $r1[3] = "tt";

        $r1[4] = "i";

        $r1[5] = "b";

        $r1[6] = "u";

        $r1[7] = "big";

        $r1[8] = "small";

        $r1[9] = "em";

        $r1[10] = "strong";

        $r1[11] = "dfn";

        $r1[12] = "code";

        $r1[13] = "samp";

        $r1[14] = "kbd";

        $r1[15] = "var";

        $r1[16] = "cite";

        $r1[17] = "abbr";

        $r1[18] = "time";

        $r1[19] = "acronym";

        $r1[20] = "mark";

        $r1[21] = "ruby";

        $r1[22] = "rt";

        $r1[23] = "rp";

        $r1[24] = "a";

        $r1[25] = "img";

        $r1[26] = "br";

        $r1[27] = "wbr";

        $r1[28] = "map";

        $r1[29] = "q";

        $r1[30] = "sub";

        $r1[31] = "sup";

        $r1[32] = "bdo";

        $r1[33] = "iframe";

        $r1[34] = "embed";

        $r1[35] = "span";

        $r1[36] = "input";

        $r1[37] = "select";

        $r1[38] = "textarea";

        $r1[39] = "label";

        $r1[40] = "button";

        $r1[41] = "optgroup";

        $r1[42] = "option";

        $r1[43] = "legend";

        $r1[44] = "datalist";

        $r1[45] = "keygen";

        $r1[46] = "output";

        $r1[47] = "progress";

        $r1[48] = "meter";

        $r1[49] = "area";

        $r1[50] = "param";

        $r1[51] = "source";

        $r1[52] = "track";

        $r1[53] = "summary";

        $r1[54] = "command";

        $r1[55] = "device";

        <org.jsoup.parser.Tag: java.lang.String[] inlineTags> = $r1;

        $r1 = newarray (java.lang.String)[14];

        $r1[0] = "meta";

        $r1[1] = "link";

        $r1[2] = "base";

        $r1[3] = "frame";

        $r1[4] = "img";

        $r1[5] = "br";

        $r1[6] = "wbr";

        $r1[7] = "embed";

        $r1[8] = "hr";

        $r1[9] = "input";

        $r1[10] = "keygen";

        $r1[11] = "col";

        $r1[12] = "command";

        $r1[13] = "device";

        <org.jsoup.parser.Tag: java.lang.String[] emptyTags> = $r1;

        $r1 = newarray (java.lang.String)[19];

        $r1[0] = "title";

        $r1[1] = "a";

        $r1[2] = "p";

        $r1[3] = "h1";

        $r1[4] = "h2";

        $r1[5] = "h3";

        $r1[6] = "h4";

        $r1[7] = "h5";

        $r1[8] = "h6";

        $r1[9] = "pre";

        $r1[10] = "address";

        $r1[11] = "li";

        $r1[12] = "th";

        $r1[13] = "td";

        $r1[14] = "script";

        $r1[15] = "style";

        $r1[16] = "ins";

        $r1[17] = "del";

        $r1[18] = "s";

        <org.jsoup.parser.Tag: java.lang.String[] formatAsInlineTags> = $r1;

        $r1 = newarray (java.lang.String)[4];

        $r1[0] = "pre";

        $r1[1] = "plaintext";

        $r1[2] = "title";

        $r1[3] = "textarea";

        <org.jsoup.parser.Tag: java.lang.String[] preserveWhitespaceTags> = $r1;

        $r1 = <org.jsoup.parser.Tag: java.lang.String[] blockTags>;

        i0 = lengthof $r1;

        i1 = 0;

     label01:
        if i1 >= i0 goto label02;

        r2 = $r1[i1];

        r3 = new org.jsoup.parser.Tag;

        specialinvoke r3.<org.jsoup.parser.Tag: void <init>(java.lang.String)>(r2);

        staticinvoke <org.jsoup.parser.Tag: void register(org.jsoup.parser.Tag)>(r3);

        i1 = i1 + 1;

        goto label01;

     label02:
        $r1 = <org.jsoup.parser.Tag: java.lang.String[] inlineTags>;

        i0 = lengthof $r1;

        i1 = 0;

     label03:
        if i1 >= i0 goto label04;

        r2 = $r1[i1];

        r3 = new org.jsoup.parser.Tag;

        specialinvoke r3.<org.jsoup.parser.Tag: void <init>(java.lang.String)>(r2);

        r3.<org.jsoup.parser.Tag: boolean isBlock> = 0;

        r3.<org.jsoup.parser.Tag: boolean canContainBlock> = 0;

        r3.<org.jsoup.parser.Tag: boolean formatAsBlock> = 0;

        staticinvoke <org.jsoup.parser.Tag: void register(org.jsoup.parser.Tag)>(r3);

        i1 = i1 + 1;

        goto label03;

     label04:
        $r1 = <org.jsoup.parser.Tag: java.lang.String[] emptyTags>;

        i0 = lengthof $r1;

        i1 = 0;

     label05:
        if i1 >= i0 goto label06;

        r2 = $r1[i1];

        $r4 = <org.jsoup.parser.Tag: java.util.Map tags>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r3 = (org.jsoup.parser.Tag) $r5;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>(r3);

        r3.<org.jsoup.parser.Tag: boolean canContainBlock> = 0;

        r3.<org.jsoup.parser.Tag: boolean canContainInline> = 0;

        r3.<org.jsoup.parser.Tag: boolean empty> = 1;

        i1 = i1 + 1;

        goto label05;

     label06:
        $r1 = <org.jsoup.parser.Tag: java.lang.String[] formatAsInlineTags>;

        i0 = lengthof $r1;

        i1 = 0;

     label07:
        if i1 >= i0 goto label08;

        r2 = $r1[i1];

        $r4 = <org.jsoup.parser.Tag: java.util.Map tags>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r3 = (org.jsoup.parser.Tag) $r5;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>(r3);

        r3.<org.jsoup.parser.Tag: boolean formatAsBlock> = 0;

        i1 = i1 + 1;

        goto label07;

     label08:
        $r1 = <org.jsoup.parser.Tag: java.lang.String[] preserveWhitespaceTags>;

        i0 = lengthof $r1;

        i1 = 0;

     label09:
        if i1 >= i0 goto label10;

        r2 = $r1[i1];

        $r4 = <org.jsoup.parser.Tag: java.util.Map tags>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r3 = (org.jsoup.parser.Tag) $r5;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>(r3);

        r3.<org.jsoup.parser.Tag: boolean preserveWhitespace> = 1;

        i1 = i1 + 1;

        goto label09;

     label10:
        return;
    }

    private void <init>(java.lang.String)
    {
        java.lang.String $r1;
        org.jsoup.parser.Tag r0;

        r0 := @this: org.jsoup.parser.Tag;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.jsoup.parser.Tag: boolean isBlock> = 1;

        r0.<org.jsoup.parser.Tag: boolean formatAsBlock> = 1;

        r0.<org.jsoup.parser.Tag: boolean canContainBlock> = 1;

        r0.<org.jsoup.parser.Tag: boolean canContainInline> = 1;

        r0.<org.jsoup.parser.Tag: boolean empty> = 0;

        r0.<org.jsoup.parser.Tag: boolean selfClosing> = 0;

        r0.<org.jsoup.parser.Tag: boolean preserveWhitespace> = 0;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        r0.<org.jsoup.parser.Tag: java.lang.String tagName> = $r1;

        return;
    }

    public static boolean isKnownTag(java.lang.String)
    {
        java.lang.String $r0;
        boolean $z0;
        java.util.Map $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = <org.jsoup.parser.Tag: java.util.Map tags>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r0);

        return $z0;
    }

    private static void register(org.jsoup.parser.Tag)
    {
        java.lang.String $r2;
        org.jsoup.parser.Tag $r0;
        java.util.Map $r1;

        $r0 := @parameter0: org.jsoup.parser.Tag;

        $r1 = <org.jsoup.parser.Tag: java.util.Map tags>;

        $r2 = $r0.<org.jsoup.parser.Tag: java.lang.String tagName>;

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r0);

        return;
    }

    public static org.jsoup.parser.Tag valueOf(java.lang.String)
    {
        java.util.Map $r1;
        java.lang.Object $r2;
        java.lang.String $r0;
        org.jsoup.parser.Tag r3;

        $r0 := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r0);

        $r1 = <org.jsoup.parser.Tag: java.util.Map tags>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        r3 = (org.jsoup.parser.Tag) $r2;

        if r3 != null goto label1;

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String trim()>();

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String toLowerCase()>();

        staticinvoke <org.jsoup.helper.Validate: void notEmpty(java.lang.String)>($r0);

        $r1 = <org.jsoup.parser.Tag: java.util.Map tags>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        r3 = (org.jsoup.parser.Tag) $r2;

        if r3 != null goto label1;

        r3 = new org.jsoup.parser.Tag;

        specialinvoke r3.<org.jsoup.parser.Tag: void <init>(java.lang.String)>($r0);

        r3.<org.jsoup.parser.Tag: boolean isBlock> = 0;

        r3.<org.jsoup.parser.Tag: boolean canContainBlock> = 1;

     label1:
        return r3;
    }

    public boolean canContainBlock()
    {
        org.jsoup.parser.Tag r0;
        boolean z0;

        r0 := @this: org.jsoup.parser.Tag;

        z0 = r0.<org.jsoup.parser.Tag: boolean canContainBlock>;

        return z0;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object $r1;
        java.lang.String $r3, $r4;
        org.jsoup.parser.Tag r0, r2;
        boolean $z0, $z1;

        r0 := @this: org.jsoup.parser.Tag;

        $r1 := @parameter0: java.lang.Object;

        if r0 != $r1 goto label01;

        return 1;

     label01:
        $z0 = $r1 instanceof org.jsoup.parser.Tag;

        if $z0 != 0 goto label02;

        return 0;

     label02:
        r2 = (org.jsoup.parser.Tag) $r1;

        $z0 = r0.<org.jsoup.parser.Tag: boolean canContainBlock>;

        $z1 = r2.<org.jsoup.parser.Tag: boolean canContainBlock>;

        if $z0 == $z1 goto label03;

        return 0;

     label03:
        $z0 = r0.<org.jsoup.parser.Tag: boolean canContainInline>;

        $z1 = r2.<org.jsoup.parser.Tag: boolean canContainInline>;

        if $z0 == $z1 goto label04;

        return 0;

     label04:
        $z0 = r0.<org.jsoup.parser.Tag: boolean empty>;

        $z1 = r2.<org.jsoup.parser.Tag: boolean empty>;

        if $z0 == $z1 goto label05;

        return 0;

     label05:
        $z0 = r0.<org.jsoup.parser.Tag: boolean formatAsBlock>;

        $z1 = r2.<org.jsoup.parser.Tag: boolean formatAsBlock>;

        if $z0 == $z1 goto label06;

        return 0;

     label06:
        $z0 = r0.<org.jsoup.parser.Tag: boolean isBlock>;

        $z1 = r2.<org.jsoup.parser.Tag: boolean isBlock>;

        if $z0 == $z1 goto label07;

        return 0;

     label07:
        $z0 = r0.<org.jsoup.parser.Tag: boolean preserveWhitespace>;

        $z1 = r2.<org.jsoup.parser.Tag: boolean preserveWhitespace>;

        if $z0 == $z1 goto label08;

        return 0;

     label08:
        $z0 = r0.<org.jsoup.parser.Tag: boolean selfClosing>;

        $z1 = r2.<org.jsoup.parser.Tag: boolean selfClosing>;

        if $z0 == $z1 goto label09;

        return 0;

     label09:
        $r3 = r0.<org.jsoup.parser.Tag: java.lang.String tagName>;

        $r4 = r2.<org.jsoup.parser.Tag: java.lang.String tagName>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label10;

        return 0;

     label10:
        return 1;
    }

    public boolean formatAsBlock()
    {
        org.jsoup.parser.Tag r0;
        boolean z0;

        r0 := @this: org.jsoup.parser.Tag;

        z0 = r0.<org.jsoup.parser.Tag: boolean formatAsBlock>;

        return z0;
    }

    public java.lang.String getName()
    {
        java.lang.String r1;
        org.jsoup.parser.Tag r0;

        r0 := @this: org.jsoup.parser.Tag;

        r1 = r0.<org.jsoup.parser.Tag: java.lang.String tagName>;

        return r1;
    }

    public int hashCode()
    {
        int $i0;
        java.lang.String $r1;
        org.jsoup.parser.Tag r0;
        boolean $z0, $z1;

        r0 := @this: org.jsoup.parser.Tag;

        $z0 = 1;

        $r1 = r0.<org.jsoup.parser.Tag: java.lang.String tagName>;

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        $i0 = $i0 * 31;

        $z1 = r0.<org.jsoup.parser.Tag: boolean isBlock>;

        if $z1 == 0 goto label08;

        $z1 = 1;

     label01:
        $i0 = $i0 + $z1;

        $i0 = $i0 * 31;

        $z1 = r0.<org.jsoup.parser.Tag: boolean formatAsBlock>;

        if $z1 == 0 goto label09;

        $z1 = 1;

     label02:
        $i0 = $i0 + $z1;

        $i0 = $i0 * 31;

        $z1 = r0.<org.jsoup.parser.Tag: boolean canContainBlock>;

        if $z1 == 0 goto label10;

        $z1 = 1;

     label03:
        $i0 = $i0 + $z1;

        $i0 = $i0 * 31;

        $z1 = r0.<org.jsoup.parser.Tag: boolean canContainInline>;

        if $z1 == 0 goto label11;

        $z1 = 1;

     label04:
        $i0 = $i0 + $z1;

        $i0 = $i0 * 31;

        $z1 = r0.<org.jsoup.parser.Tag: boolean empty>;

        if $z1 == 0 goto label12;

        $z1 = 1;

     label05:
        $i0 = $i0 + $z1;

        $i0 = $i0 * 31;

        $z1 = r0.<org.jsoup.parser.Tag: boolean selfClosing>;

        if $z1 == 0 goto label13;

        $z1 = 1;

     label06:
        $i0 = $i0 + $z1;

        $i0 = $i0 * 31;

        $z1 = r0.<org.jsoup.parser.Tag: boolean preserveWhitespace>;

        if $z1 == 0 goto label14;

     label07:
        $i0 = $i0 + $z0;

        return $i0;

     label08:
        $z1 = 0;

        goto label01;

     label09:
        $z1 = 0;

        goto label02;

     label10:
        $z1 = 0;

        goto label03;

     label11:
        $z1 = 0;

        goto label04;

     label12:
        $z1 = 0;

        goto label05;

     label13:
        $z1 = 0;

        goto label06;

     label14:
        $z0 = 0;

        goto label07;
    }

    public boolean isBlock()
    {
        org.jsoup.parser.Tag r0;
        boolean z0;

        r0 := @this: org.jsoup.parser.Tag;

        z0 = r0.<org.jsoup.parser.Tag: boolean isBlock>;

        return z0;
    }

    public boolean isData()
    {
        org.jsoup.parser.Tag r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.Tag;

        $z0 = r0.<org.jsoup.parser.Tag: boolean canContainInline>;

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke r0.<org.jsoup.parser.Tag: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isEmpty()
    {
        org.jsoup.parser.Tag r0;
        boolean z0;

        r0 := @this: org.jsoup.parser.Tag;

        z0 = r0.<org.jsoup.parser.Tag: boolean empty>;

        return z0;
    }

    public boolean isInline()
    {
        org.jsoup.parser.Tag r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.Tag;

        $z0 = r0.<org.jsoup.parser.Tag: boolean isBlock>;

        if $z0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isKnownTag()
    {
        java.util.Map $r2;
        java.lang.String $r1;
        org.jsoup.parser.Tag r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.Tag;

        $r2 = <org.jsoup.parser.Tag: java.util.Map tags>;

        $r1 = r0.<org.jsoup.parser.Tag: java.lang.String tagName>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        return $z0;
    }

    public boolean isSelfClosing()
    {
        org.jsoup.parser.Tag r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.Tag;

        $z0 = r0.<org.jsoup.parser.Tag: boolean empty>;

        if $z0 != 0 goto label1;

        $z0 = r0.<org.jsoup.parser.Tag: boolean selfClosing>;

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public boolean preserveWhitespace()
    {
        org.jsoup.parser.Tag r0;
        boolean z0;

        r0 := @this: org.jsoup.parser.Tag;

        z0 = r0.<org.jsoup.parser.Tag: boolean preserveWhitespace>;

        return z0;
    }

    org.jsoup.parser.Tag setSelfClosing()
    {
        org.jsoup.parser.Tag r0;

        r0 := @this: org.jsoup.parser.Tag;

        r0.<org.jsoup.parser.Tag: boolean selfClosing> = 1;

        return r0;
    }

    public java.lang.String toString()
    {
        java.lang.String r1;
        org.jsoup.parser.Tag r0;

        r0 := @this: org.jsoup.parser.Tag;

        r1 = r0.<org.jsoup.parser.Tag: java.lang.String tagName>;

        return r1;
    }
}
