public class net.sourceforge.blowfishj.BlowfishCBC extends net.sourceforge.blowfishj.BlowfishECB
{
    int m_nIVHi;
    int m_nIVLo;

    public void <init>(byte[])
    {
        byte[] $r1;
        net.sourceforge.blowfishj.BlowfishCBC r0;

        r0 := @this: net.sourceforge.blowfishj.BlowfishCBC;

        $r1 := @parameter0: byte[];

        specialinvoke r0.<net.sourceforge.blowfishj.BlowfishECB: void <init>(byte[])>($r1);

        r0.<net.sourceforge.blowfishj.BlowfishCBC: int m_nIVLo> = 0;

        r0.<net.sourceforge.blowfishj.BlowfishCBC: int m_nIVHi> = 0;

        return;
    }

    public void <init>(byte[], int, int)
    {
        byte[] $r1;
        net.sourceforge.blowfishj.BlowfishCBC r0;
        int $i0, $i1;

        r0 := @this: net.sourceforge.blowfishj.BlowfishCBC;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        specialinvoke r0.<net.sourceforge.blowfishj.BlowfishECB: void <init>(byte[],int,int)>($r1, $i0, $i1);

        r0.<net.sourceforge.blowfishj.BlowfishCBC: int m_nIVLo> = 0;

        r0.<net.sourceforge.blowfishj.BlowfishCBC: int m_nIVHi> = 0;

        return;
    }

    public void <init>(byte[], int, int, long)
    {
        byte[] $r1;
        net.sourceforge.blowfishj.BlowfishCBC r0;
        int $i0, $i1;
        long $l2;

        r0 := @this: net.sourceforge.blowfishj.BlowfishCBC;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $l2 := @parameter3: long;

        specialinvoke r0.<net.sourceforge.blowfishj.BlowfishECB: void <init>(byte[],int,int)>($r1, $i0, $i1);

        virtualinvoke r0.<net.sourceforge.blowfishj.BlowfishCBC: void setCBCIV(long)>($l2);

        return;
    }

    public void <init>(byte[], int, int, byte[], int)
    {
        byte[] $r1, $r2;
        net.sourceforge.blowfishj.BlowfishCBC r0;
        int $i0, $i1, $i2;

        r0 := @this: net.sourceforge.blowfishj.BlowfishCBC;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: byte[];

        $i2 := @parameter4: int;

        specialinvoke r0.<net.sourceforge.blowfishj.BlowfishECB: void <init>(byte[],int,int)>($r1, $i0, $i1);

        virtualinvoke r0.<net.sourceforge.blowfishj.BlowfishCBC: void setCBCIV(byte[],int)>($r2, $i2);

        return;
    }

    public void <init>(byte[], long)
    {
        byte[] $r1;
        long $l0;
        net.sourceforge.blowfishj.BlowfishCBC r0;

        r0 := @this: net.sourceforge.blowfishj.BlowfishCBC;

        $r1 := @parameter0: byte[];

        $l0 := @parameter1: long;

        specialinvoke r0.<net.sourceforge.blowfishj.BlowfishECB: void <init>(byte[])>($r1);

        virtualinvoke r0.<net.sourceforge.blowfishj.BlowfishCBC: void setCBCIV(long)>($l0);

        return;
    }

    public void <init>(byte[], byte[])
    {
        byte[] $r1, $r2;
        net.sourceforge.blowfishj.BlowfishCBC r0;

        r0 := @this: net.sourceforge.blowfishj.BlowfishCBC;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: byte[];

        specialinvoke r0.<net.sourceforge.blowfishj.BlowfishECB: void <init>(byte[])>($r1);

        virtualinvoke r0.<net.sourceforge.blowfishj.BlowfishCBC: void setCBCIV(byte[])>($r2);

        return;
    }

    public void cleanUp()
    {
        net.sourceforge.blowfishj.BlowfishCBC r0;

        r0 := @this: net.sourceforge.blowfishj.BlowfishCBC;

        r0.<net.sourceforge.blowfishj.BlowfishCBC: int m_nIVLo> = 0;

        r0.<net.sourceforge.blowfishj.BlowfishCBC: int m_nIVHi> = 0;

        specialinvoke r0.<net.sourceforge.blowfishj.BlowfishECB: void cleanUp()>();

        return;
    }

    public int decrypt(byte[], int, byte[], int, int)
    {
        byte[] $r1, $r2;
        byte $b26;
        int[] $r3, $r4, $r5, $r6;
        short $s27;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, $i21, $i22, $i23, i24, i25, i28, i29, $i30, $i31;
        net.sourceforge.blowfishj.BlowfishCBC r0;

        r0 := @this: net.sourceforge.blowfishj.BlowfishCBC;

        $r1 := @parameter0: byte[];

        i19 := @parameter1: int;

        $r2 := @parameter2: byte[];

        i20 := @parameter3: int;

        i0 := @parameter4: int;

        i1 = i0 % 8;

        $i21 = i0 - i1;

        i0 = i19 + $i21;

        $r3 = r0.<net.sourceforge.blowfishj.BlowfishECB: int[] m_pbox>;

        i1 = $r3[0];

        i2 = $r3[1];

        i3 = $r3[2];

        i4 = $r3[3];

        i5 = $r3[4];

        i6 = $r3[5];

        i7 = $r3[6];

        i8 = $r3[7];

        i9 = $r3[8];

        i10 = $r3[9];

        i11 = $r3[10];

        i12 = $r3[11];

        i13 = $r3[12];

        i14 = $r3[13];

        i15 = $r3[14];

        i16 = $r3[15];

        i17 = $r3[16];

        i18 = $r3[17];

        $r3 = r0.<net.sourceforge.blowfishj.BlowfishECB: int[] m_sbox1>;

        $r4 = r0.<net.sourceforge.blowfishj.BlowfishECB: int[] m_sbox2>;

        $r5 = r0.<net.sourceforge.blowfishj.BlowfishECB: int[] m_sbox3>;

        $r6 = r0.<net.sourceforge.blowfishj.BlowfishECB: int[] m_sbox4>;

        $i22 = r0.<net.sourceforge.blowfishj.BlowfishCBC: int m_nIVHi>;

        $i23 = r0.<net.sourceforge.blowfishj.BlowfishCBC: int m_nIVLo>;

        i24 = i19;

     label1:
        if i24 >= i0 goto label2;

        i25 = i24 + 1;

        $b26 = $r1[i24];

        i19 = (int) $b26;

        i19 = i19 << 24;

        i24 = i25 + 1;

        $b26 = $r1[i25];

        i25 = (int) $b26;

        i25 = i25 << 16;

        i25 = i25 & 16711680;

        i25 = i19 | i25;

        i19 = i24 + 1;

        $b26 = $r1[i24];

        i24 = (int) $b26;

        i24 = i24 << 8;

        i28 = 65280;

        i24 = i24 & i28;

        i25 = i25 | i24;

        i24 = i19 + 1;

        $b26 = $r1[i19];

        $s27 = (short) $b26;

        $s27 = $s27 & 255;

        i19 = (int) $s27;

        i19 = i25 | i19;

        i28 = i24 + 1;

        $b26 = $r1[i24];

        i24 = (int) $b26;

        i25 = i24 << 24;

        i24 = i28 + 1;

        $b26 = $r1[i28];

        i28 = (int) $b26;

        i28 = i28 << 16;

        i28 = i28 & 16711680;

        i28 = i25 | i28;

        i25 = i24 + 1;

        $b26 = $r1[i24];

        i24 = (int) $b26;

        i24 = i24 << 8;

        i29 = 65280;

        i24 = i24 & i29;

        i28 = i28 | i24;

        i24 = i25 + 1;

        $b26 = $r1[i25];

        $s27 = (short) $b26;

        $s27 = $s27 & 255;

        i25 = (int) $s27;

        i25 = i28 | i25;

        i29 = i19 ^ i18;

        i28 = i29 >>> 24;

        i28 = $r3[i28];

        $i30 = i29 >>> 16;

        $i30 = $i30 & 255;

        $i30 = $r4[$i30];

        i28 = i28 + $i30;

        $i30 = i29 >>> 8;

        $i30 = $i30 & 255;

        $i30 = $r5[$i30];

        i28 = i28 ^ $i30;

        $i30 = i29 & 255;

        $i30 = $r6[$i30];

        i28 = i28 + $i30;

        i28 = i28 ^ i17;

        i28 = i25 ^ i28;

        $i30 = i28 >>> 24;

        $i30 = $r3[$i30];

        $i31 = i28 >>> 16;

        $i31 = $i31 & 255;

        $i31 = $r4[$i31];

        $i30 = $i30 + $i31;

        $i31 = i28 >>> 8;

        $i31 = $i31 & 255;

        $i31 = $r5[$i31];

        $i30 = $i30 ^ $i31;

        $i31 = i28 & 255;

        $i31 = $r6[$i31];

        $i30 = $i30 + $i31;

        $i30 = $i30 ^ i16;

        i29 = i29 ^ $i30;

        $i30 = i29 >>> 24;

        $i30 = $r3[$i30];

        $i31 = i29 >>> 16;

        $i31 = $i31 & 255;

        $i31 = $r4[$i31];

        $i30 = $i30 + $i31;

        $i31 = i29 >>> 8;

        $i31 = $i31 & 255;

        $i31 = $r5[$i31];

        $i30 = $i30 ^ $i31;

        $i31 = i29 & 255;

        $i31 = $r6[$i31];

        $i30 = $i30 + $i31;

        $i30 = $i30 ^ i15;

        i28 = i28 ^ $i30;

        $i30 = i28 >>> 24;

        $i30 = $r3[$i30];

        $i31 = i28 >>> 16;

        $i31 = $i31 & 255;

        $i31 = $r4[$i31];

        $i30 = $i30 + $i31;

        $i31 = i28 >>> 8;

        $i31 = $i31 & 255;

        $i31 = $r5[$i31];

        $i30 = $i30 ^ $i31;

        $i31 = i28 & 255;

        $i31 = $r6[$i31];

        $i30 = $i30 + $i31;

        $i30 = $i30 ^ i14;

        i29 = i29 ^ $i30;

        $i30 = i29 >>> 24;

        $i30 = $r3[$i30];

        $i31 = i29 >>> 16;

        $i31 = $i31 & 255;

        $i31 = $r4[$i31];

        $i30 = $i30 + $i31;

        $i31 = i29 >>> 8;

        $i31 = $i31 & 255;

        $i31 = $r5[$i31];

        $i30 = $i30 ^ $i31;

        $i31 = i29 & 255;

        $i31 = $r6[$i31];

        $i30 = $i30 + $i31;

        $i30 = $i30 ^ i13;

        i28 = i28 ^ $i30;

        $i30 = i28 >>> 24;

        $i30 = $r3[$i30];

        $i31 = i28 >>> 16;

        $i31 = $i31 & 255;

        $i31 = $r4[$i31];

        $i30 = $i30 + $i31;

        $i31 = i28 >>> 8;

        $i31 = $i31 & 255;

        $i31 = $r5[$i31];

        $i30 = $i30 ^ $i31;

        $i31 = i28 & 255;

        $i31 = $r6[$i31];

        $i30 = $i30 + $i31;

        $i30 = $i30 ^ i12;

        i29 = i29 ^ $i30;

        $i30 = i29 >>> 24;

        $i30 = $r3[$i30];

        $i31 = i29 >>> 16;

        $i31 = $i31 & 255;

        $i31 = $r4[$i31];

        $i30 = $i30 + $i31;

        $i31 = i29 >>> 8;

        $i31 = $i31 & 255;

        $i31 = $r5[$i31];

        $i30 = $i30 ^ $i31;

        $i31 = i29 & 255;

        $i31 = $r6[$i31];

        $i30 = $i30 + $i31;

        $i30 = $i30 ^ i11;

        i28 = i28 ^ $i30;

        $i30 = i28 >>> 24;

        $i30 = $r3[$i30];

        $i31 = i28 >>> 16;

        $i31 = $i31 & 255;

        $i31 = $r4[$i31];

        $i30 = $i30 + $i31;

        $i31 = i28 >>> 8;

        $i31 = $i31 & 255;

        $i31 = $r5[$i31];

        $i30 = $i30 ^ $i31;

        $i31 = i28 & 255;

        $i31 = $r6[$i31];

        $i30 = $i30 + $i31;

        $i30 = $i30 ^ i10;

        i29 = i29 ^ $i30;

        $i30 = i29 >>> 24;

        $i30 = $r3[$i30];

        $i31 = i29 >>> 16;

        $i31 = $i31 & 255;

        $i31 = $r4[$i31];

        $i30 = $i30 + $i31;

        $i31 = i29 >>> 8;

        $i31 = $i31 & 255;

        $i31 = $r5[$i31];

        $i30 = $i30 ^ $i31;

        $i31 = i29 & 255;

        $i31 = $r6[$i31];

        $i30 = $i30 + $i31;

        $i30 = $i30 ^ i9;

        i28 = i28 ^ $i30;

        $i30 = i28 >>> 24;

        $i30 = $r3[$i30];

        $i31 = i28 >>> 16;

        $i31 = $i31 & 255;

        $i31 = $r4[$i31];

        $i30 = $i30 + $i31;

        $i31 = i28 >>> 8;

        $i31 = $i31 & 255;

        $i31 = $r5[$i31];

        $i30 = $i30 ^ $i31;

        $i31 = i28 & 255;

        $i31 = $r6[$i31];

        $i30 = $i30 + $i31;

        $i30 = $i30 ^ i8;

        i29 = i29 ^ $i30;

        $i30 = i29 >>> 24;

        $i30 = $r3[$i30];

        $i31 = i29 >>> 16;

        $i31 = $i31 & 255;

        $i31 = $r4[$i31];

        $i30 = $i30 + $i31;

        $i31 = i29 >>> 8;

        $i31 = $i31 & 255;

        $i31 = $r5[$i31];

        $i30 = $i30 ^ $i31;

        $i31 = i29 & 255;

        $i31 = $r6[$i31];

        $i30 = $i30 + $i31;

        $i30 = $i30 ^ i7;

        i28 = i28 ^ $i30;

        $i30 = i28 >>> 24;

        $i30 = $r3[$i30];

        $i31 = i28 >>> 16;

        $i31 = $i31 & 255;

        $i31 = $r4[$i31];

        $i30 = $i30 + $i31;

        $i31 = i28 >>> 8;

        $i31 = $i31 & 255;

        $i31 = $r5[$i31];

        $i30 = $i30 ^ $i31;

        $i31 = i28 & 255;

        $i31 = $r6[$i31];

        $i30 = $i30 + $i31;

        $i30 = $i30 ^ i6;

        i29 = i29 ^ $i30;

        $i30 = i29 >>> 24;

        $i30 = $r3[$i30];

        $i31 = i29 >>> 16;

        $i31 = $i31 & 255;

        $i31 = $r4[$i31];

        $i30 = $i30 + $i31;

        $i31 = i29 >>> 8;

        $i31 = $i31 & 255;

        $i31 = $r5[$i31];

        $i30 = $i30 ^ $i31;

        $i31 = i29 & 255;

        $i31 = $r6[$i31];

        $i30 = $i30 + $i31;

        $i30 = $i30 ^ i5;

        i28 = i28 ^ $i30;

        $i30 = i28 >>> 24;

        $i30 = $r3[$i30];

        $i31 = i28 >>> 16;

        $i31 = $i31 & 255;

        $i31 = $r4[$i31];

        $i30 = $i30 + $i31;

        $i31 = i28 >>> 8;

        $i31 = $i31 & 255;

        $i31 = $r5[$i31];

        $i30 = $i30 ^ $i31;

        $i31 = i28 & 255;

        $i31 = $r6[$i31];

        $i30 = $i30 + $i31;

        $i30 = $i30 ^ i4;

        i29 = i29 ^ $i30;

        $i30 = i29 >>> 24;

        $i30 = $r3[$i30];

        $i31 = i29 >>> 16;

        $i31 = $i31 & 255;

        $i31 = $r4[$i31];

        $i30 = $i30 + $i31;

        $i31 = i29 >>> 8;

        $i31 = $i31 & 255;

        $i31 = $r5[$i31];

        $i30 = $i30 ^ $i31;

        $i31 = i29 & 255;

        $i31 = $r6[$i31];

        $i30 = $i30 + $i31;

        $i30 = $i30 ^ i3;

        i28 = i28 ^ $i30;

        $i30 = i28 >>> 24;

        $i30 = $r3[$i30];

        $i31 = i28 >>> 16;

        $i31 = $i31 & 255;

        $i31 = $r4[$i31];

        $i30 = $i30 + $i31;

        $i31 = i28 >>> 8;

        $i31 = $i31 & 255;

        $i31 = $r5[$i31];

        $i30 = $i30 ^ $i31;

        $i31 = i28 & 255;

        $i31 = $r6[$i31];

        $i30 = $i30 + $i31;

        $i30 = $i30 ^ i2;

        i29 = i29 ^ $i30;

        i28 = i28 ^ i1;

        $i23 = i29 ^ $i23;

        $i22 = i28 ^ $i22;

        i28 = i20 + 1;

        i29 = $i22 >>> 24;

        $b26 = (byte) i29;

        $r2[i20] = $b26;

        i20 = i28 + 1;

        i29 = $i22 >>> 16;

        $b26 = (byte) i29;

        $r2[i28] = $b26;

        i28 = i20 + 1;

        i29 = $i22 >>> 8;

        $b26 = (byte) i29;

        $r2[i20] = $b26;

        i20 = i28 + 1;

        $b26 = (byte) $i22;

        $r2[i28] = $b26;

        $i22 = i20 + 1;

        i28 = $i23 >>> 24;

        $b26 = (byte) i28;

        $r2[i20] = $b26;

        i20 = $i22 + 1;

        i28 = $i23 >>> 16;

        $b26 = (byte) i28;

        $r2[$i22] = $b26;

        $i22 = i20 + 1;

        i28 = $i23 >>> 8;

        $b26 = (byte) i28;

        $r2[i20] = $b26;

        i20 = $i22 + 1;

        $b26 = (byte) $i23;

        $r2[$i22] = $b26;

        $i22 = i19;

        $i23 = i25;

        goto label1;

     label2:
        r0.<net.sourceforge.blowfishj.BlowfishCBC: int m_nIVHi> = $i22;

        r0.<net.sourceforge.blowfishj.BlowfishCBC: int m_nIVLo> = $i23;

        return $i21;
    }

    public void decrypt(byte[])
    {
        int $i0;
        byte[] $r1;
        net.sourceforge.blowfishj.BlowfishCBC r0;

        r0 := @this: net.sourceforge.blowfishj.BlowfishCBC;

        $r1 := @parameter0: byte[];

        $i0 = lengthof $r1;

        virtualinvoke r0.<net.sourceforge.blowfishj.BlowfishCBC: int decrypt(byte[],int,byte[],int,int)>($r1, 0, $r1, 0, $i0);

        return;
    }

    public void decrypt(byte[], byte[])
    {
        byte[] $r1, $r2;
        net.sourceforge.blowfishj.BlowfishCBC r0;
        int $i0;

        r0 := @this: net.sourceforge.blowfishj.BlowfishCBC;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: byte[];

        $i0 = lengthof $r2;

        virtualinvoke r0.<net.sourceforge.blowfishj.BlowfishCBC: int decrypt(byte[],int,byte[],int,int)>($r1, 0, $r2, 0, $i0);

        return;
    }

    public void decrypt(int[])
    {
        int $i0;
        net.sourceforge.blowfishj.BlowfishCBC r0;
        int[] $r1;

        r0 := @this: net.sourceforge.blowfishj.BlowfishCBC;

        $r1 := @parameter0: int[];

        $i0 = lengthof $r1;

        virtualinvoke r0.<net.sourceforge.blowfishj.BlowfishCBC: void decrypt(int[],int,int[],int,int)>($r1, 0, $r1, 0, $i0);

        return;
    }

    public void decrypt(int[], int, int[], int, int)
    {
        byte[] $r3;
        net.sourceforge.blowfishj.BlowfishCBC r0;
        int[] $r1, $r2;
        int $i0, i1, i2, i3, $i4;

        r0 := @this: net.sourceforge.blowfishj.BlowfishCBC;

        $r1 := @parameter0: int[];

        i1 := @parameter1: int;

        $r2 := @parameter2: int[];

        i2 := @parameter3: int;

        $i0 := @parameter4: int;

        $i0 = i1 + $i0;

     label1:
        if i1 >= $i0 goto label2;

        i3 = i1 + 1;

        i1 = $r1[i1];

        $r3 = r0.<net.sourceforge.blowfishj.BlowfishECB: byte[] m_blockBuf>;

        staticinvoke <net.sourceforge.blowfishj.BinConverter: void intToByteArray(int,byte[],int)>(i1, $r3, 0);

        i1 = i3 + 1;

        i3 = $r1[i3];

        $r3 = r0.<net.sourceforge.blowfishj.BlowfishECB: byte[] m_blockBuf>;

        staticinvoke <net.sourceforge.blowfishj.BinConverter: void intToByteArray(int,byte[],int)>(i3, $r3, 4);

        $r3 = r0.<net.sourceforge.blowfishj.BlowfishECB: byte[] m_blockBuf>;

        virtualinvoke r0.<net.sourceforge.blowfishj.BlowfishCBC: void decrypt(byte[])>($r3);

        i3 = i2 + 1;

        $r3 = r0.<net.sourceforge.blowfishj.BlowfishECB: byte[] m_blockBuf>;

        $i4 = staticinvoke <net.sourceforge.blowfishj.BinConverter: int byteArrayToInt(byte[],int)>($r3, 0);

        $r2[i2] = $i4;

        i2 = i3 + 1;

        $r3 = r0.<net.sourceforge.blowfishj.BlowfishECB: byte[] m_blockBuf>;

        $i4 = staticinvoke <net.sourceforge.blowfishj.BinConverter: int byteArrayToInt(byte[],int)>($r3, 4);

        $r2[i3] = $i4;

        goto label1;

     label2:
        return;
    }

    public void decrypt(int[], int[])
    {
        net.sourceforge.blowfishj.BlowfishCBC r0;
        int[] $r1, $r2;
        int $i0;

        r0 := @this: net.sourceforge.blowfishj.BlowfishCBC;

        $r1 := @parameter0: int[];

        $r2 := @parameter1: int[];

        $i0 = lengthof $r1;

        virtualinvoke r0.<net.sourceforge.blowfishj.BlowfishCBC: void decrypt(int[],int,int[],int,int)>($r1, 0, $r2, 0, $i0);

        return;
    }

    public void decrypt(long[])
    {
        int $i0;
        long[] $r1;
        net.sourceforge.blowfishj.BlowfishCBC r0;

        r0 := @this: net.sourceforge.blowfishj.BlowfishCBC;

        $r1 := @parameter0: long[];

        $i0 = lengthof $r1;

        virtualinvoke r0.<net.sourceforge.blowfishj.BlowfishCBC: void decrypt(long[],int,long[],int,int)>($r1, 0, $r1, 0, $i0);

        return;
    }

    public void decrypt(long[], int, long[], int, int)
    {
        byte[] $r3;
        long $l4;
        long[] $r1, $r2;
        net.sourceforge.blowfishj.BlowfishCBC r0;
        int $i0, $i1, i2, i3;

        r0 := @this: net.sourceforge.blowfishj.BlowfishCBC;

        $r1 := @parameter0: long[];

        i2 := @parameter1: int;

        $r2 := @parameter2: long[];

        i3 := @parameter3: int;

        $i0 := @parameter4: int;

        $i0 = i2 + $i0;

        $i1 = i2;

     label1:
        if $i1 >= $i0 goto label2;

        i2 = $i1 + 1;

        $l4 = $r1[$i1];

        $r3 = r0.<net.sourceforge.blowfishj.BlowfishECB: byte[] m_blockBuf>;

        staticinvoke <net.sourceforge.blowfishj.BinConverter: void longToByteArray(long,byte[],int)>($l4, $r3, 0);

        $r3 = r0.<net.sourceforge.blowfishj.BlowfishECB: byte[] m_blockBuf>;

        virtualinvoke r0.<net.sourceforge.blowfishj.BlowfishCBC: void decrypt(byte[])>($r3);

        $r3 = r0.<net.sourceforge.blowfishj.BlowfishECB: byte[] m_blockBuf>;

        $i1 = staticinvoke <net.sourceforge.blowfishj.BinConverter: int byteArrayToInt(byte[],int)>($r3, 0);

        $l4 = (long) $i1;

        $r2[i3] = $l4;

        i3 = i3 + 1;

        $i1 = i2;

        goto label1;

     label2:
        return;
    }

    public void decrypt(long[], long[])
    {
        long[] $r1, $r2;
        net.sourceforge.blowfishj.BlowfishCBC r0;
        int $i0;

        r0 := @this: net.sourceforge.blowfishj.BlowfishCBC;

        $r1 := @parameter0: long[];

        $r2 := @parameter1: long[];

        $i0 = lengthof $r1;

        virtualinvoke r0.<net.sourceforge.blowfishj.BlowfishCBC: void decrypt(long[],int,long[],int,int)>($r1, 0, $r2, 0, $i0);

        return;
    }

    public int encrypt(byte[], int, byte[], int, int)
    {
        byte[] $r1, $r2;
        byte $b25;
        int[] $r3, $r4, $r5, $r6;
        short $s27;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, $i21, $i22, $i23, i24, i26, i28;
        net.sourceforge.blowfishj.BlowfishCBC r0;

        r0 := @this: net.sourceforge.blowfishj.BlowfishCBC;

        $r1 := @parameter0: byte[];

        i19 := @parameter1: int;

        $r2 := @parameter2: byte[];

        i20 := @parameter3: int;

        i0 := @parameter4: int;

        i1 = i0 % 8;

        $i21 = i0 - i1;

        i0 = 0 + $i21;

        $r3 = r0.<net.sourceforge.blowfishj.BlowfishECB: int[] m_pbox>;

        i1 = $r3[0];

        i2 = $r3[1];

        i3 = $r3[2];

        i4 = $r3[3];

        i5 = $r3[4];

        i6 = $r3[5];

        i7 = $r3[6];

        i8 = $r3[7];

        i9 = $r3[8];

        i10 = $r3[9];

        i11 = $r3[10];

        i12 = $r3[11];

        i13 = $r3[12];

        i14 = $r3[13];

        i15 = $r3[14];

        i16 = $r3[15];

        i17 = $r3[16];

        i18 = $r3[17];

        $r3 = r0.<net.sourceforge.blowfishj.BlowfishECB: int[] m_sbox1>;

        $r4 = r0.<net.sourceforge.blowfishj.BlowfishECB: int[] m_sbox2>;

        $r5 = r0.<net.sourceforge.blowfishj.BlowfishECB: int[] m_sbox3>;

        $r6 = r0.<net.sourceforge.blowfishj.BlowfishECB: int[] m_sbox4>;

        $i22 = r0.<net.sourceforge.blowfishj.BlowfishCBC: int m_nIVHi>;

        $i23 = r0.<net.sourceforge.blowfishj.BlowfishCBC: int m_nIVLo>;

     label1:
        if i19 >= i0 goto label2;

        i24 = i19 + 1;

        $b25 = $r1[i19];

        i19 = (int) $b25;

        i19 = i19 << 24;

        i26 = i24 + 1;

        $b25 = $r1[i24];

        i24 = (int) $b25;

        i24 = i24 << 16;

        i24 = i24 & 16711680;

        i24 = i19 | i24;

        i19 = i26 + 1;

        $b25 = $r1[i26];

        i26 = (int) $b25;

        i26 = i26 << 8;

        i26 = i26 & 65280;

        i26 = i24 | i26;

        i24 = i19 + 1;

        $b25 = $r1[i19];

        $s27 = (short) $b25;

        $s27 = $s27 & 255;

        i19 = (int) $s27;

        i26 = i26 | i19;

        i28 = i24 + 1;

        $b25 = $r1[i24];

        i19 = (int) $b25;

        i24 = i19 << 24;

        i19 = i28 + 1;

        $b25 = $r1[i28];

        i28 = (int) $b25;

        i28 = i28 << 16;

        i28 = i28 & 16711680;

        i28 = i24 | i28;

        i24 = i19 + 1;

        $b25 = $r1[i19];

        i19 = (int) $b25;

        i19 = i19 << 8;

        i19 = i19 & 65280;

        i28 = i28 | i19;

        i19 = i24 + 1;

        $b25 = $r1[i24];

        $s27 = (short) $b25;

        $s27 = $s27 & 255;

        i24 = (int) $s27;

        i24 = i28 | i24;

        $i22 = i26 ^ $i22;

        $i23 = i24 ^ $i23;

        $i22 = $i22 ^ i1;

        i26 = $i22 >>> 24;

        i26 = $r3[i26];

        i24 = $i22 >>> 16;

        i24 = i24 & 255;

        i24 = $r4[i24];

        i26 = i26 + i24;

        i24 = $i22 >>> 8;

        i24 = i24 & 255;

        i24 = $r5[i24];

        i26 = i26 ^ i24;

        i24 = $i22 & 255;

        i24 = $r6[i24];

        i26 = i26 + i24;

        i26 = i26 ^ i2;

        $i23 = $i23 ^ i26;

        i26 = $i23 >>> 24;

        i26 = $r3[i26];

        i24 = $i23 >>> 16;

        i24 = i24 & 255;

        i24 = $r4[i24];

        i26 = i26 + i24;

        i24 = $i23 >>> 8;

        i24 = i24 & 255;

        i24 = $r5[i24];

        i26 = i26 ^ i24;

        i24 = $i23 & 255;

        i24 = $r6[i24];

        i26 = i26 + i24;

        i26 = i26 ^ i3;

        $i22 = $i22 ^ i26;

        i26 = $i22 >>> 24;

        i26 = $r3[i26];

        i24 = $i22 >>> 16;

        i24 = i24 & 255;

        i24 = $r4[i24];

        i26 = i26 + i24;

        i24 = $i22 >>> 8;

        i24 = i24 & 255;

        i24 = $r5[i24];

        i26 = i26 ^ i24;

        i24 = $i22 & 255;

        i24 = $r6[i24];

        i26 = i26 + i24;

        i26 = i26 ^ i4;

        $i23 = $i23 ^ i26;

        i26 = $i23 >>> 24;

        i26 = $r3[i26];

        i24 = $i23 >>> 16;

        i24 = i24 & 255;

        i24 = $r4[i24];

        i26 = i26 + i24;

        i24 = $i23 >>> 8;

        i24 = i24 & 255;

        i24 = $r5[i24];

        i26 = i26 ^ i24;

        i24 = $i23 & 255;

        i24 = $r6[i24];

        i26 = i26 + i24;

        i26 = i26 ^ i5;

        $i22 = $i22 ^ i26;

        i26 = $i22 >>> 24;

        i26 = $r3[i26];

        i24 = $i22 >>> 16;

        i24 = i24 & 255;

        i24 = $r4[i24];

        i26 = i26 + i24;

        i24 = $i22 >>> 8;

        i24 = i24 & 255;

        i24 = $r5[i24];

        i26 = i26 ^ i24;

        i24 = $i22 & 255;

        i24 = $r6[i24];

        i26 = i26 + i24;

        i26 = i26 ^ i6;

        $i23 = $i23 ^ i26;

        i26 = $i23 >>> 24;

        i26 = $r3[i26];

        i24 = $i23 >>> 16;

        i24 = i24 & 255;

        i24 = $r4[i24];

        i26 = i26 + i24;

        i24 = $i23 >>> 8;

        i24 = i24 & 255;

        i24 = $r5[i24];

        i26 = i26 ^ i24;

        i24 = $i23 & 255;

        i24 = $r6[i24];

        i26 = i26 + i24;

        i26 = i26 ^ i7;

        $i22 = $i22 ^ i26;

        i26 = $i22 >>> 24;

        i26 = $r3[i26];

        i24 = $i22 >>> 16;

        i24 = i24 & 255;

        i24 = $r4[i24];

        i26 = i26 + i24;

        i24 = $i22 >>> 8;

        i24 = i24 & 255;

        i24 = $r5[i24];

        i26 = i26 ^ i24;

        i24 = $i22 & 255;

        i24 = $r6[i24];

        i26 = i26 + i24;

        i26 = i26 ^ i8;

        $i23 = $i23 ^ i26;

        i26 = $i23 >>> 24;

        i26 = $r3[i26];

        i24 = $i23 >>> 16;

        i24 = i24 & 255;

        i24 = $r4[i24];

        i26 = i26 + i24;

        i24 = $i23 >>> 8;

        i24 = i24 & 255;

        i24 = $r5[i24];

        i26 = i26 ^ i24;

        i24 = $i23 & 255;

        i24 = $r6[i24];

        i26 = i26 + i24;

        i26 = i26 ^ i9;

        $i22 = $i22 ^ i26;

        i26 = $i22 >>> 24;

        i26 = $r3[i26];

        i24 = $i22 >>> 16;

        i24 = i24 & 255;

        i24 = $r4[i24];

        i26 = i26 + i24;

        i24 = $i22 >>> 8;

        i24 = i24 & 255;

        i24 = $r5[i24];

        i26 = i26 ^ i24;

        i24 = $i22 & 255;

        i24 = $r6[i24];

        i26 = i26 + i24;

        i26 = i26 ^ i10;

        $i23 = $i23 ^ i26;

        i26 = $i23 >>> 24;

        i26 = $r3[i26];

        i24 = $i23 >>> 16;

        i24 = i24 & 255;

        i24 = $r4[i24];

        i26 = i26 + i24;

        i24 = $i23 >>> 8;

        i24 = i24 & 255;

        i24 = $r5[i24];

        i26 = i26 ^ i24;

        i24 = $i23 & 255;

        i24 = $r6[i24];

        i26 = i26 + i24;

        i26 = i26 ^ i11;

        $i22 = $i22 ^ i26;

        i26 = $i22 >>> 24;

        i26 = $r3[i26];

        i24 = $i22 >>> 16;

        i24 = i24 & 255;

        i24 = $r4[i24];

        i26 = i26 + i24;

        i24 = $i22 >>> 8;

        i24 = i24 & 255;

        i24 = $r5[i24];

        i26 = i26 ^ i24;

        i24 = $i22 & 255;

        i24 = $r6[i24];

        i26 = i26 + i24;

        i26 = i26 ^ i12;

        $i23 = $i23 ^ i26;

        i26 = $i23 >>> 24;

        i26 = $r3[i26];

        i24 = $i23 >>> 16;

        i24 = i24 & 255;

        i24 = $r4[i24];

        i26 = i26 + i24;

        i24 = $i23 >>> 8;

        i24 = i24 & 255;

        i24 = $r5[i24];

        i26 = i26 ^ i24;

        i24 = $i23 & 255;

        i24 = $r6[i24];

        i26 = i26 + i24;

        i26 = i26 ^ i13;

        $i22 = $i22 ^ i26;

        i26 = $i22 >>> 24;

        i26 = $r3[i26];

        i24 = $i22 >>> 16;

        i24 = i24 & 255;

        i24 = $r4[i24];

        i26 = i26 + i24;

        i24 = $i22 >>> 8;

        i24 = i24 & 255;

        i24 = $r5[i24];

        i26 = i26 ^ i24;

        i24 = $i22 & 255;

        i24 = $r6[i24];

        i26 = i26 + i24;

        i26 = i26 ^ i14;

        $i23 = $i23 ^ i26;

        i26 = $i23 >>> 24;

        i26 = $r3[i26];

        i24 = $i23 >>> 16;

        i24 = i24 & 255;

        i24 = $r4[i24];

        i26 = i26 + i24;

        i24 = $i23 >>> 8;

        i24 = i24 & 255;

        i24 = $r5[i24];

        i26 = i26 ^ i24;

        i24 = $i23 & 255;

        i24 = $r6[i24];

        i26 = i26 + i24;

        i26 = i26 ^ i15;

        $i22 = $i22 ^ i26;

        i26 = $i22 >>> 24;

        i26 = $r3[i26];

        i24 = $i22 >>> 16;

        i24 = i24 & 255;

        i24 = $r4[i24];

        i26 = i26 + i24;

        i24 = $i22 >>> 8;

        i24 = i24 & 255;

        i24 = $r5[i24];

        i26 = i26 ^ i24;

        i24 = $i22 & 255;

        i24 = $r6[i24];

        i26 = i26 + i24;

        i26 = i26 ^ i16;

        $i23 = $i23 ^ i26;

        i26 = $i23 >>> 24;

        i26 = $r3[i26];

        i24 = $i23 >>> 16;

        i24 = i24 & 255;

        i24 = $r4[i24];

        i26 = i26 + i24;

        i24 = $i23 >>> 8;

        i24 = i24 & 255;

        i24 = $r5[i24];

        i26 = i26 ^ i24;

        i24 = $i23 & 255;

        i24 = $r6[i24];

        i26 = i26 + i24;

        i26 = i26 ^ i17;

        i26 = $i22 ^ i26;

        $i22 = $i23 ^ i18;

        $i23 = i20 + 1;

        i24 = $i22 >>> 24;

        $b25 = (byte) i24;

        $r2[i20] = $b25;

        i20 = $i23 + 1;

        i24 = $i22 >>> 16;

        $b25 = (byte) i24;

        $r2[$i23] = $b25;

        $i23 = i20 + 1;

        i24 = $i22 >>> 8;

        $b25 = (byte) i24;

        $r2[i20] = $b25;

        i24 = $i23 + 1;

        $b25 = (byte) $i22;

        $r2[$i23] = $b25;

        i20 = i24 + 1;

        $i23 = i26 >>> 24;

        $b25 = (byte) $i23;

        $r2[i24] = $b25;

        $i23 = i20 + 1;

        i24 = i26 >>> 16;

        $b25 = (byte) i24;

        $r2[i20] = $b25;

        i24 = $i23 + 1;

        i20 = i26 >>> 8;

        $b25 = (byte) i20;

        $r2[$i23] = $b25;

        i20 = i24 + 1;

        $b25 = (byte) i26;

        $r2[i24] = $b25;

        $i23 = i26;

        goto label1;

     label2:
        r0.<net.sourceforge.blowfishj.BlowfishCBC: int m_nIVHi> = $i22;

        r0.<net.sourceforge.blowfishj.BlowfishCBC: int m_nIVLo> = $i23;

        return $i21;
    }

    public void encrypt(byte[])
    {
        int $i0;
        byte[] $r1;
        net.sourceforge.blowfishj.BlowfishCBC r0;

        r0 := @this: net.sourceforge.blowfishj.BlowfishCBC;

        $r1 := @parameter0: byte[];

        $i0 = lengthof $r1;

        virtualinvoke r0.<net.sourceforge.blowfishj.BlowfishCBC: int encrypt(byte[],int,byte[],int,int)>($r1, 0, $r1, 0, $i0);

        return;
    }

    public void encrypt(byte[], byte[])
    {
        byte[] $r1, $r2;
        net.sourceforge.blowfishj.BlowfishCBC r0;
        int $i0;

        r0 := @this: net.sourceforge.blowfishj.BlowfishCBC;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: byte[];

        $i0 = lengthof $r2;

        virtualinvoke r0.<net.sourceforge.blowfishj.BlowfishCBC: int encrypt(byte[],int,byte[],int,int)>($r1, 0, $r2, 0, $i0);

        return;
    }

    public void encrypt(int[])
    {
        int $i0;
        net.sourceforge.blowfishj.BlowfishCBC r0;
        int[] $r1;

        r0 := @this: net.sourceforge.blowfishj.BlowfishCBC;

        $r1 := @parameter0: int[];

        $i0 = lengthof $r1;

        virtualinvoke r0.<net.sourceforge.blowfishj.BlowfishCBC: void encrypt(int[],int,int[],int,int)>($r1, 0, $r1, 0, $i0);

        return;
    }

    public void encrypt(int[], int, int[], int, int)
    {
        byte[] $r3;
        net.sourceforge.blowfishj.BlowfishCBC r0;
        int[] $r1, $r2;
        int $i0, i1, i2, i3, $i4;

        r0 := @this: net.sourceforge.blowfishj.BlowfishCBC;

        $r1 := @parameter0: int[];

        i1 := @parameter1: int;

        $r2 := @parameter2: int[];

        i2 := @parameter3: int;

        $i0 := @parameter4: int;

        $i0 = i1 + $i0;

     label1:
        if i1 >= $i0 goto label2;

        i3 = i1 + 1;

        i1 = $r1[i1];

        $r3 = r0.<net.sourceforge.blowfishj.BlowfishECB: byte[] m_blockBuf>;

        staticinvoke <net.sourceforge.blowfishj.BinConverter: void intToByteArray(int,byte[],int)>(i1, $r3, 0);

        i1 = i3 + 1;

        i3 = $r1[i3];

        $r3 = r0.<net.sourceforge.blowfishj.BlowfishECB: byte[] m_blockBuf>;

        staticinvoke <net.sourceforge.blowfishj.BinConverter: void intToByteArray(int,byte[],int)>(i3, $r3, 4);

        $r3 = r0.<net.sourceforge.blowfishj.BlowfishECB: byte[] m_blockBuf>;

        virtualinvoke r0.<net.sourceforge.blowfishj.BlowfishCBC: void encrypt(byte[])>($r3);

        i3 = i2 + 1;

        $r3 = r0.<net.sourceforge.blowfishj.BlowfishECB: byte[] m_blockBuf>;

        $i4 = staticinvoke <net.sourceforge.blowfishj.BinConverter: int byteArrayToInt(byte[],int)>($r3, 0);

        $r2[i2] = $i4;

        i2 = i3 + 1;

        $r3 = r0.<net.sourceforge.blowfishj.BlowfishECB: byte[] m_blockBuf>;

        $i4 = staticinvoke <net.sourceforge.blowfishj.BinConverter: int byteArrayToInt(byte[],int)>($r3, 4);

        $r2[i3] = $i4;

        goto label1;

     label2:
        return;
    }

    public void encrypt(int[], int[])
    {
        net.sourceforge.blowfishj.BlowfishCBC r0;
        int[] $r1, $r2;
        int $i0;

        r0 := @this: net.sourceforge.blowfishj.BlowfishCBC;

        $r1 := @parameter0: int[];

        $r2 := @parameter1: int[];

        $i0 = lengthof $r1;

        virtualinvoke r0.<net.sourceforge.blowfishj.BlowfishCBC: void encrypt(int[],int,int[],int,int)>($r1, 0, $r2, 0, $i0);

        return;
    }

    public void encrypt(long[])
    {
        int $i0;
        long[] $r1;
        net.sourceforge.blowfishj.BlowfishCBC r0;

        r0 := @this: net.sourceforge.blowfishj.BlowfishCBC;

        $r1 := @parameter0: long[];

        $i0 = lengthof $r1;

        virtualinvoke r0.<net.sourceforge.blowfishj.BlowfishCBC: void encrypt(long[],int,long[],int,int)>($r1, 0, $r1, 0, $i0);

        return;
    }

    public void encrypt(long[], int, long[], int, int)
    {
        byte[] $r3;
        long $l4;
        long[] $r1, $r2;
        net.sourceforge.blowfishj.BlowfishCBC r0;
        int $i0, $i1, i2, i3;

        r0 := @this: net.sourceforge.blowfishj.BlowfishCBC;

        $r1 := @parameter0: long[];

        i2 := @parameter1: int;

        $r2 := @parameter2: long[];

        i3 := @parameter3: int;

        $i0 := @parameter4: int;

        $i0 = i2 + $i0;

        $i1 = i2;

     label1:
        if $i1 >= $i0 goto label2;

        i2 = $i1 + 1;

        $l4 = $r1[$i1];

        $r3 = r0.<net.sourceforge.blowfishj.BlowfishECB: byte[] m_blockBuf>;

        staticinvoke <net.sourceforge.blowfishj.BinConverter: void longToByteArray(long,byte[],int)>($l4, $r3, 0);

        $r3 = r0.<net.sourceforge.blowfishj.BlowfishECB: byte[] m_blockBuf>;

        virtualinvoke r0.<net.sourceforge.blowfishj.BlowfishCBC: void encrypt(byte[])>($r3);

        $r3 = r0.<net.sourceforge.blowfishj.BlowfishECB: byte[] m_blockBuf>;

        $i1 = staticinvoke <net.sourceforge.blowfishj.BinConverter: int byteArrayToInt(byte[],int)>($r3, 0);

        $l4 = (long) $i1;

        $r2[i3] = $l4;

        i3 = i3 + 1;

        $i1 = i2;

        goto label1;

     label2:
        return;
    }

    public void encrypt(long[], long[])
    {
        long[] $r1, $r2;
        net.sourceforge.blowfishj.BlowfishCBC r0;
        int $i0;

        r0 := @this: net.sourceforge.blowfishj.BlowfishCBC;

        $r1 := @parameter0: long[];

        $r2 := @parameter1: long[];

        $i0 = lengthof $r1;

        virtualinvoke r0.<net.sourceforge.blowfishj.BlowfishCBC: void encrypt(long[],int,long[],int,int)>($r1, 0, $r2, 0, $i0);

        return;
    }

    public long getCBCIV()
    {
        net.sourceforge.blowfishj.BlowfishCBC r0;
        int $i0, $i2;
        long $l1;

        r0 := @this: net.sourceforge.blowfishj.BlowfishCBC;

        $i2 = r0.<net.sourceforge.blowfishj.BlowfishCBC: int m_nIVLo>;

        $i0 = r0.<net.sourceforge.blowfishj.BlowfishCBC: int m_nIVHi>;

        $l1 = staticinvoke <net.sourceforge.blowfishj.BinConverter: long makeLong(int,int)>($i2, $i0);

        return $l1;
    }

    public void getCBCIV(byte[])
    {
        byte[] $r1;
        net.sourceforge.blowfishj.BlowfishCBC r0;

        r0 := @this: net.sourceforge.blowfishj.BlowfishCBC;

        $r1 := @parameter0: byte[];

        virtualinvoke r0.<net.sourceforge.blowfishj.BlowfishCBC: void getCBCIV(byte[],int)>($r1, 0);

        return;
    }

    public void getCBCIV(byte[], int)
    {
        byte[] $r1;
        net.sourceforge.blowfishj.BlowfishCBC r0;
        int $i0, $i1;

        r0 := @this: net.sourceforge.blowfishj.BlowfishCBC;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 = r0.<net.sourceforge.blowfishj.BlowfishCBC: int m_nIVHi>;

        staticinvoke <net.sourceforge.blowfishj.BinConverter: void intToByteArray(int,byte[],int)>($i1, $r1, $i0);

        $i1 = r0.<net.sourceforge.blowfishj.BlowfishCBC: int m_nIVLo>;

        $i0 = $i0 + 4;

        staticinvoke <net.sourceforge.blowfishj.BinConverter: void intToByteArray(int,byte[],int)>($i1, $r1, $i0);

        return;
    }

    public void setCBCIV(long)
    {
        int $i1;
        long $l0;
        net.sourceforge.blowfishj.BlowfishCBC r0;

        r0 := @this: net.sourceforge.blowfishj.BlowfishCBC;

        $l0 := @parameter0: long;

        $i1 = staticinvoke <net.sourceforge.blowfishj.BinConverter: int longHi32(long)>($l0);

        r0.<net.sourceforge.blowfishj.BlowfishCBC: int m_nIVHi> = $i1;

        $i1 = staticinvoke <net.sourceforge.blowfishj.BinConverter: int longLo32(long)>($l0);

        r0.<net.sourceforge.blowfishj.BlowfishCBC: int m_nIVLo> = $i1;

        return;
    }

    public void setCBCIV(byte[])
    {
        byte[] $r1;
        net.sourceforge.blowfishj.BlowfishCBC r0;

        r0 := @this: net.sourceforge.blowfishj.BlowfishCBC;

        $r1 := @parameter0: byte[];

        virtualinvoke r0.<net.sourceforge.blowfishj.BlowfishCBC: void setCBCIV(byte[],int)>($r1, 0);

        return;
    }

    public void setCBCIV(byte[], int)
    {
        byte[] $r1;
        net.sourceforge.blowfishj.BlowfishCBC r0;
        int $i0, $i1;

        r0 := @this: net.sourceforge.blowfishj.BlowfishCBC;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 = staticinvoke <net.sourceforge.blowfishj.BinConverter: int byteArrayToInt(byte[],int)>($r1, $i0);

        r0.<net.sourceforge.blowfishj.BlowfishCBC: int m_nIVHi> = $i1;

        $i0 = $i0 + 4;

        $i0 = staticinvoke <net.sourceforge.blowfishj.BinConverter: int byteArrayToInt(byte[],int)>($r1, $i0);

        r0.<net.sourceforge.blowfishj.BlowfishCBC: int m_nIVLo> = $i0;

        return;
    }
}
