public interface  proguard.classfile.Clazz extends java.lang.Object implements proguard.classfile.VisitorAccepter
{

    public abstract void accept(proguard.classfile.visitor.ClassVisitor);

    public abstract void addSubClass(proguard.classfile.Clazz);

    public abstract void attributesAccept(proguard.classfile.attribute.visitor.AttributeVisitor);

    public abstract void constantPoolEntriesAccept(proguard.classfile.constant.visitor.ConstantVisitor);

    public abstract void constantPoolEntryAccept(int, proguard.classfile.constant.visitor.ConstantVisitor);

    public abstract boolean extendsOrImplements(proguard.classfile.Clazz);

    public abstract boolean extends_(proguard.classfile.Clazz);

    public abstract void fieldAccept(java.lang.String, java.lang.String, proguard.classfile.visitor.MemberVisitor);

    public abstract void fieldsAccept(proguard.classfile.visitor.MemberVisitor);

    public abstract proguard.classfile.Field findField(java.lang.String, java.lang.String);

    public abstract proguard.classfile.Method findMethod(java.lang.String, java.lang.String);

    public abstract int getAccessFlags();

    public abstract java.lang.String getClassName(int);

    public abstract proguard.classfile.Clazz getInterface(int);

    public abstract int getInterfaceCount();

    public abstract java.lang.String getInterfaceName(int);

    public abstract java.lang.String getName();

    public abstract java.lang.String getName(int);

    public abstract java.lang.String getString(int);

    public abstract java.lang.String getStringString(int);

    public abstract proguard.classfile.Clazz getSuperClass();

    public abstract java.lang.String getSuperName();

    public abstract int getTag(int);

    public abstract java.lang.String getType(int);

    public abstract void hierarchyAccept(boolean, boolean, boolean, boolean, proguard.classfile.visitor.ClassVisitor);

    public abstract void interfaceConstantsAccept(proguard.classfile.constant.visitor.ConstantVisitor);

    public abstract boolean mayHaveImplementations(proguard.classfile.Method);

    public abstract void methodAccept(java.lang.String, java.lang.String, proguard.classfile.visitor.MemberVisitor);

    public abstract void methodsAccept(proguard.classfile.visitor.MemberVisitor);

    public abstract void subclassesAccept(proguard.classfile.visitor.ClassVisitor);

    public abstract void superClassConstantAccept(proguard.classfile.constant.visitor.ConstantVisitor);

    public abstract void thisClassConstantAccept(proguard.classfile.constant.visitor.ConstantVisitor);
}
