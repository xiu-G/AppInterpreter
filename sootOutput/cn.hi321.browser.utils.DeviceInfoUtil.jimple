public class cn.hi321.browser.utils.DeviceInfoUtil extends java.lang.Object
{
    private static final int BASE_SIZE;
    private static final java.lang.String CPUINFO_PATH;
    public static final int DEVICE_WIDTH_240X320;
    public static final int DEVICE_WIDTH_320X480;
    public static final int DEVICE_WIDTH_480X800;
    public static final int DEVICE_WIDTH_640X960;
    public static final int DEVICE_WIDTH_720X1280;
    public static final int DEVICE_WIDTH_800X1280;
    public static final int DPI_DIVIDER;
    private static final int FILE_SIZE;
    private static final java.lang.String MAK_KEK;
    private static final java.lang.String MAK_VALUE;
    private static final java.lang.String TAG;
    private static final java.lang.String TYPE_APAD;
    private static final java.lang.String TYPE_APHONE;
    private static final int TYPE_AVAIABLE;
    private static final int TYPE_TOTAL;
    private static final java.lang.String UNKNOWN_MAC_ADDRESS;
    public static final java.lang.String UNKNOWN_VERSION;
    private static java.lang.String mAppVersion;
    private static android.content.Context mContext;
    private static java.lang.String mCpuInfo;
    private static float mDensity;
    private static java.lang.String[] mDeviceInfo;
    private static java.lang.String mDeviceManufacturer;
    private static java.lang.String mDeviceModel;
    private static java.lang.String mDeviceType;
    private static java.lang.String mIpAddress;
    private static java.lang.String mMacAddress;
    private static java.lang.String mOSVersion;
    private static java.lang.String mReportDeviceInfo;
    private static java.lang.String mUploadDeviceInfo;

    static void <clinit>()
    {
        <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String UNKNOWN_VERSION> = "versionUnknown";

        <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String UNKNOWN_MAC_ADDRESS> = "00:00:00:00:00:00";

        <cn.hi321.browser.utils.DeviceInfoUtil: int TYPE_TOTAL> = 1;

        <cn.hi321.browser.utils.DeviceInfoUtil: int TYPE_AVAIABLE> = 2;

        <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String TYPE_APHONE> = "aphone";

        <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String TYPE_APAD> = "apad";

        <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String TAG> = "DeviceInfoUtil";

        <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String MAK_VALUE> = "mac_value";

        <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String MAK_KEK> = "mac_key";

        <cn.hi321.browser.utils.DeviceInfoUtil: int FILE_SIZE> = 8192;

        <cn.hi321.browser.utils.DeviceInfoUtil: int DPI_DIVIDER> = 320;

        <cn.hi321.browser.utils.DeviceInfoUtil: int DEVICE_WIDTH_800X1280> = 800;

        <cn.hi321.browser.utils.DeviceInfoUtil: int DEVICE_WIDTH_720X1280> = 720;

        <cn.hi321.browser.utils.DeviceInfoUtil: int DEVICE_WIDTH_640X960> = 640;

        <cn.hi321.browser.utils.DeviceInfoUtil: int DEVICE_WIDTH_480X800> = 480;

        <cn.hi321.browser.utils.DeviceInfoUtil: int DEVICE_WIDTH_320X480> = 320;

        <cn.hi321.browser.utils.DeviceInfoUtil: int DEVICE_WIDTH_240X320> = 240;

        <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String CPUINFO_PATH> = "/proc/cpuinfo";

        <cn.hi321.browser.utils.DeviceInfoUtil: int BASE_SIZE> = 1024;

        <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String mAppVersion> = "versionUnknown";

        <cn.hi321.browser.utils.DeviceInfoUtil: android.content.Context mContext> = null;

        <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String mCpuInfo> = "";

        <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String[] mDeviceInfo> = null;

        <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String mOSVersion> = "";

        <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String mDeviceType> = "aphone";

        <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String mDeviceModel> = "";

        <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String mMacAddress> = "00:00:00:00:00:00";

        <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String mIpAddress> = "";

        <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String mDeviceManufacturer> = "";

        <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String mUploadDeviceInfo> = "";

        <cn.hi321.browser.utils.DeviceInfoUtil: float mDensity> = 0.0F;

        return;
    }

    public void <init>()
    {
        cn.hi321.browser.utils.DeviceInfoUtil r0;

        r0 := @this: cn.hi321.browser.utils.DeviceInfoUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int dip2px(android.content.Context, float)
    {
        android.content.Context $r0;
        android.util.DisplayMetrics $r2;
        byte $b0;
        int $i1;
        float $f0, $f1;
        double $d0;
        android.content.res.Resources $r1;

        $r0 := @parameter0: android.content.Context;

        $f0 := @parameter1: float;

        $f1 = <cn.hi321.browser.utils.DeviceInfoUtil: float mDensity>;

        $f1 = $f1 - 0.0F;

        $f1 = staticinvoke <java.lang.Math: float abs(float)>($f1);

        $d0 = (double) $f1;

        $b0 = $d0 cmpg 1.0E-4;

        $i1 = (int) $b0;

        if $i1 >= 0 goto label1;

        $r1 = virtualinvoke $r0.<android.content.Context: android.content.res.Resources getResources()>();

        $r2 = virtualinvoke $r1.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $f1 = $r2.<android.util.DisplayMetrics: float density>;

        <cn.hi321.browser.utils.DeviceInfoUtil: float mDensity> = $f1;

     label1:
        $f1 = <cn.hi321.browser.utils.DeviceInfoUtil: float mDensity>;

        $f0 = $f1 * $f0;

        $f0 = $f0 + 0.5F;

        $i1 = (int) $f0;

        return $i1;
    }

    public static int dipToPx(android.content.Context, float)
    {
        android.content.Context $r0;
        int $i0;
        float $f0, f1;
        android.util.DisplayMetrics $r2;
        android.content.res.Resources $r1;

        $r0 := @parameter0: android.content.Context;

        $f0 := @parameter1: float;

        $r1 = virtualinvoke $r0.<android.content.Context: android.content.res.Resources getResources()>();

        $r2 = virtualinvoke $r1.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        f1 = $r2.<android.util.DisplayMetrics: float density>;

        $f0 = $f0 * f1;

        $f0 = $f0 + 0.5F;

        $i0 = (int) $f0;

        return $i0;
    }

    public static java.lang.String getAppVersionName(android.content.Context)
    {
        android.content.Context $r0;
        java.lang.String r1;

        $r0 := @parameter0: android.content.Context;

        <cn.hi321.browser.utils.DeviceInfoUtil: android.content.Context mContext> = $r0;

        staticinvoke <cn.hi321.browser.utils.DeviceInfoUtil: void setVersionNameFromPackage()>();

        r1 = <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String mAppVersion>;

        return r1;
    }

    public static double getAvailableExternalMemory()
    {
        double $d0;

        $d0 = staticinvoke <cn.hi321.browser.utils.DeviceInfoUtil: double getExternalMemory(int)>(2);

        return $d0;
    }

    public static double getAvailableInternalMemory()
    {
        double $d0;

        $d0 = staticinvoke <cn.hi321.browser.utils.DeviceInfoUtil: double getInternalMemory(int)>(2);

        return $d0;
    }

    private static java.lang.String getCacheMacAddress(android.content.Context)
    {
        android.content.Context $r0;
        java.lang.String $r2;
        android.content.SharedPreferences $r1;

        $r0 := @parameter0: android.content.Context;

        if $r0 != null goto label1;

        return null;

     label1:
        $r1 = virtualinvoke $r0.<android.content.Context: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>("mac_key", 0);

        $r2 = interfaceinvoke $r1.<android.content.SharedPreferences: java.lang.String getString(java.lang.String,java.lang.String)>("mac_value", null);

        return $r2;
    }

    public static double getDeviceAvailableMemory()
    {
        byte $b0;
        java.lang.Exception r0;
        double $d0, $d1;

     label1:
        $d0 = staticinvoke <cn.hi321.browser.utils.DeviceInfoUtil: double getAvailableInternalMemory()>();

        $d1 = staticinvoke <cn.hi321.browser.utils.DeviceInfoUtil: double getAvailableExternalMemory()>();

     label2:
        $b0 = $d0 cmpl $d1;

        if $b0 != 0 goto label3;

        return $d0;

     label3:
        $d0 = $d0 + $d1;

        return $d0;

     label4:
        r0 := @caughtexception;

        virtualinvoke r0.<java.lang.Exception: void printStackTrace()>();

        return 0.0;

        catch java.lang.Exception from label1 to label2 with label4;
    }

    public static java.lang.String getDeviceCPUInfo()
    {
        int $i0;
        java.lang.String[] $r0;
        java.lang.String r1;

        $r0 = staticinvoke <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String[] getDeviceInfo()>();

        if $r0 == null goto label1;

        $i0 = lengthof $r0;

        if $i0 <= 0 goto label1;

        r1 = $r0[0];

        return r1;

     label1:
        return "";
    }

    public static java.lang.String getDeviceInfo(android.content.Context)
    {
        android.content.Context $r0;
        int $i0;
        java.lang.StringBuilder $r2;
        java.lang.String $r1;
        boolean $z0;

        $r0 := @parameter0: android.content.Context;

        $r1 = <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String mUploadDeviceInfo>;

        $z0 = staticinvoke <cn.hi321.browser.utils.StringUtil: boolean isEmpty(java.lang.String)>($r1);

        if $z0 == 0 goto label1;

        if $r0 == null goto label1;

        $r2 = new java.lang.StringBuilder;

        $r1 = staticinvoke <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String getDeviceType(android.content.Context)>($r0);

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>($r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

        $r1 = staticinvoke <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String getOSVersion()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

        $r1 = staticinvoke <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String getDeviceModel()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r2 = new java.lang.StringBuilder;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>($r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&mac=");

        $r1 = staticinvoke <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String getMacAddress(android.content.Context)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&ver=");

        $r1 = staticinvoke <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String getAppVersionName(android.content.Context)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&nt=");

        $i0 = staticinvoke <cn.hi321.browser.utils.NetworkUtil: int reportNetType(android.content.Context)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String mUploadDeviceInfo> = $r1;

     label1:
        $r1 = <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String mUploadDeviceInfo>;

        return $r1;
    }

    private static java.lang.String[] getDeviceInfo()
    {
        java.lang.Throwable r1;
        java.lang.String[] $r3, $r5;
        java.io.IOException $r10;
        int $i0, $i1;
        java.lang.StringBuilder $r6, $r9;
        java.io.BufferedReader r0, $r8;
        java.io.FileReader r2, $r7;
        java.lang.String $r4;
        boolean $z0;

        $r3 = <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String[] mDeviceInfo>;

        if $r3 == null goto label01;

        $r3 = <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String[] mDeviceInfo>;

        $i0 = lengthof $r3;

        if $i0 <= 0 goto label01;

        $r3 = <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String[] mDeviceInfo>;

        $r4 = $r3[0];

        $z0 = staticinvoke <cn.hi321.browser.utils.StringUtil: boolean isEmpty(java.lang.String)>($r4);

        if $z0 == 0 goto label14;

     label01:
        $r3 = newarray (java.lang.String)[2];

        $r3[0] = "";

        $r3[1] = "";

        <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String[] mDeviceInfo> = $r3;

        $r7 = new java.io.FileReader;

        r2 = $r7;

     label02:
        specialinvoke $r7.<java.io.FileReader: void <init>(java.lang.String)>("/proc/cpuinfo");

     label03:
        $r8 = new java.io.BufferedReader;

        r0 = $r8;

     label04:
        specialinvoke $r8.<java.io.BufferedReader: void <init>(java.io.Reader,int)>(r2, 8192);

        $r4 = virtualinvoke r0.<java.io.BufferedReader: java.lang.String readLine()>();

        $r3 = virtualinvoke $r4.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\s+");

     label05:
        $i0 = 2;

     label06:
        $i1 = lengthof $r3;

        if $i0 < $i1 goto label15;

     label07:
        virtualinvoke r0.<java.io.BufferedReader: java.lang.String readLine()>();

     label08:
        $r5 = <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String[] mDeviceInfo>;

        $r4 = $r5[1];

        $r9 = new java.lang.StringBuilder;

        $r6 = $r9;

     label09:
        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4);

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);

     label10:
        $r4 = $r3[2];

     label11:
        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

     label12:
        $r5[1] = $r4;

     label13:
        virtualinvoke r0.<java.io.BufferedReader: void close()>();

     label14:
        $r3 = <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String[] mDeviceInfo>;

        return $r3;

     label15:
        $r5 = <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String[] mDeviceInfo>;

        $r4 = $r5[0];

        $r9 = new java.lang.StringBuilder;

        $r6 = $r9;

     label16:
        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4);

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);

     label17:
        $r4 = $r3[$i0];

     label18:
        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r4 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

     label19:
        $r5[0] = $r4;

        $i0 = $i0 + 1;

        goto label06;

     label20:
        r1 := @caughtexception;

        $r10 = (java.io.IOException) r1;

        virtualinvoke $r10.<java.io.IOException: void printStackTrace()>();

        goto label14;

        catch java.io.IOException from label02 to label03 with label20;
        catch java.io.IOException from label04 to label05 with label20;
        catch java.io.IOException from label07 to label08 with label20;
        catch java.io.IOException from label09 to label10 with label20;
        catch java.io.IOException from label11 to label12 with label20;
        catch java.io.IOException from label13 to label14 with label20;
        catch java.io.IOException from label16 to label17 with label20;
        catch java.io.IOException from label18 to label19 with label20;
    }

    public static java.lang.String getDeviceManufacturer()
    {
        java.lang.Throwable r0;
        java.lang.String $r1;
        java.io.UnsupportedEncodingException $r2;
        boolean $z0;

        $r1 = <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String mDeviceManufacturer>;

        $z0 = staticinvoke <cn.hi321.browser.utils.StringUtil: boolean isEmpty(java.lang.String)>($r1);

        if $z0 == 0 goto label3;

        $r1 = <android.os.Build: java.lang.String MANUFACTURER>;

     label1:
        $r1 = staticinvoke <java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>($r1, "UTF-8");

     label2:
        <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String mDeviceManufacturer> = $r1;

     label3:
        $r1 = <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String mDeviceManufacturer>;

        return $r1;

     label4:
        r0 := @caughtexception;

        $r2 = (java.io.UnsupportedEncodingException) r0;

        virtualinvoke $r2.<java.io.UnsupportedEncodingException: void printStackTrace()>();

        goto label3;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label4;
    }

    public static double getDeviceMemory()
    {
        byte $b0;
        java.lang.Exception r0;
        double $d0, $d1;

     label1:
        $d0 = staticinvoke <cn.hi321.browser.utils.DeviceInfoUtil: double getTotalInternalMemory()>();

        $d1 = staticinvoke <cn.hi321.browser.utils.DeviceInfoUtil: double getTotalExternaMemory()>();

     label2:
        $b0 = $d0 cmpl $d1;

        if $b0 != 0 goto label3;

        return $d0;

     label3:
        $d0 = $d0 + $d1;

        return $d0;

     label4:
        r0 := @caughtexception;

        virtualinvoke r0.<java.lang.Exception: void printStackTrace()>();

        return 0.0;

        catch java.lang.Exception from label1 to label2 with label4;
    }

    public static java.lang.String getDeviceModel()
    {
        java.lang.Throwable r0;
        java.lang.String $r1;
        java.io.UnsupportedEncodingException $r2;
        boolean $z0;

        $r1 = <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String mDeviceModel>;

        $z0 = staticinvoke <cn.hi321.browser.utils.StringUtil: boolean isEmpty(java.lang.String)>($r1);

        if $z0 == 0 goto label3;

        $r1 = <android.os.Build: java.lang.String MODEL>;

     label1:
        $r1 = staticinvoke <java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>($r1, "UTF-8");

     label2:
        <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String mDeviceModel> = $r1;

     label3:
        $r1 = <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String mDeviceModel>;

        return $r1;

     label4:
        r0 := @caughtexception;

        $r2 = (java.io.UnsupportedEncodingException) r0;

        virtualinvoke $r2.<java.io.UnsupportedEncodingException: void printStackTrace()>();

        goto label3;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label4;
    }

    public static float getDeviceScreenDensity(android.content.Context)
    {
        android.content.Context $r1;
        android.view.WindowManager $r3;
        android.view.Display $r4;
        float f0;
        android.app.Activity $r2;
        android.util.DisplayMetrics r0;

        $r1 := @parameter0: android.content.Context;

        r0 = new android.util.DisplayMetrics;

        specialinvoke r0.<android.util.DisplayMetrics: void <init>()>();

        $r2 = (android.app.Activity) $r1;

        $r3 = virtualinvoke $r2.<android.app.Activity: android.view.WindowManager getWindowManager()>();

        $r4 = interfaceinvoke $r3.<android.view.WindowManager: android.view.Display getDefaultDisplay()>();

        virtualinvoke $r4.<android.view.Display: void getMetrics(android.util.DisplayMetrics)>(r0);

        f0 = r0.<android.util.DisplayMetrics: float density>;

        return f0;
    }

    public static java.lang.String getDeviceType(android.content.Context)
    {
        android.content.Context $r1;
        android.view.WindowManager $r3;
        android.util.DisplayMetrics r0, $r6;
        byte $b1;
        int $i0;
        float $f0;
        android.view.Display $r4;
        java.lang.String r5;
        android.app.Activity $r2;
        double d0, $d1;
        boolean $z0;

        $r1 := @parameter0: android.content.Context;

        if $r1 == null goto label1;

        $z0 = $r1 instanceof android.app.Activity;

        if $z0 == 0 goto label1;

        $r6 = new android.util.DisplayMetrics;

        r0 = $r6;

        specialinvoke $r6.<android.util.DisplayMetrics: void <init>()>();

        $r2 = (android.app.Activity) $r1;

        $r3 = virtualinvoke $r2.<android.app.Activity: android.view.WindowManager getWindowManager()>();

        $r4 = interfaceinvoke $r3.<android.view.WindowManager: android.view.Display getDefaultDisplay()>();

        virtualinvoke $r4.<android.view.Display: void getMetrics(android.util.DisplayMetrics)>(r0);

        $i0 = r0.<android.util.DisplayMetrics: int widthPixels>;

        d0 = (double) $i0;

        d0 = staticinvoke <java.lang.Math: double pow(double,double)>(d0, 2.0);

        $i0 = r0.<android.util.DisplayMetrics: int heightPixels>;

        $d1 = (double) $i0;

        $d1 = staticinvoke <java.lang.Math: double pow(double,double)>($d1, 2.0);

        d0 = d0 + $d1;

        d0 = staticinvoke <java.lang.Math: double sqrt(double)>(d0);

        $f0 = r0.<android.util.DisplayMetrics: float density>;

        $f0 = 160.0F * $f0;

        $d1 = (double) $f0;

        d0 = d0 / $d1;

        $b1 = 2.0 cmpg d0;

        $i0 = (int) $b1;

        if $i0 >= 0 goto label2;

        $b1 = 5.0 cmpl d0;

        $i0 = (int) $b1;

        if $i0 <= 0 goto label2;

        <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String mDeviceType> = "aphone";

     label1:
        r5 = <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String mDeviceType>;

        return r5;

     label2:
        <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String mDeviceType> = "apad";

        goto label1;
    }

    public static int getDifferentScreenOffsetX(android.content.Context)
    {
        int $i0;
        android.content.Context $r0;

        $r0 := @parameter0: android.content.Context;

        if $r0 != null goto label1;

        return 0;

     label1:
        $i0 = staticinvoke <cn.hi321.browser.utils.DeviceInfoUtil: int getHeightPixels(android.content.Context)>($r0);

        if $i0 <= 0 goto label2;

        if $i0 > 320 goto label2;

        $i0 = -4;

        return $i0;

     label2:
        if $i0 <= 320 goto label3;

        if $i0 > 480 goto label3;

        return 12;

     label3:
        if $i0 <= 480 goto label4;

        if $i0 > 720 goto label4;

        return 10;

     label4:
        if $i0 <= 720 goto label5;

        if $i0 > 800 goto label5;

     label5:
        return 8;
    }

    private static double getExternalMemory(int)
    {
        long l1, l2;
        java.lang.Exception r0;
        java.io.File $r3;
        android.os.StatFs r1;
        int $i0, $i3;
        java.lang.String $r2;
        boolean $z0;
        double d0;

        $i0 := @parameter0: int;

     label01:
        $r2 = staticinvoke <android.os.Environment: java.lang.String getExternalStorageState()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("mounted");

     label02:
        if $z0 == 0 goto label11;

     label03:
        $r3 = staticinvoke <android.os.Environment: java.io.File getExternalStorageDirectory()>();

     label04:
        r1 = new android.os.StatFs;

     label05:
        $r2 = virtualinvoke $r3.<java.io.File: java.lang.String getPath()>();

        specialinvoke r1.<android.os.StatFs: void <init>(java.lang.String)>($r2);

        $i3 = virtualinvoke r1.<android.os.StatFs: int getBlockSize()>();

     label06:
        l1 = (long) $i3;

        goto label08;

     label07:
        l2 = (long) $i0;

        l1 = l1 * l2;

        l1 = l1 / 1048576L;

        d0 = (double) l1;

        return d0;

     label08:
        $i0 = virtualinvoke r1.<android.os.StatFs: int getAvailableBlocks()>();

     label09:
        goto label07;

     label10:
        r0 := @caughtexception;

        virtualinvoke r0.<java.lang.Exception: void printStackTrace()>();

     label11:
        return 0.0;

        catch java.lang.Exception from label01 to label02 with label10;
        catch java.lang.Exception from label03 to label04 with label10;
        catch java.lang.Exception from label05 to label06 with label10;
        catch java.lang.Exception from label08 to label09 with label10;
    }

    public static int getHeightPixels(android.content.Context)
    {
        android.content.Context $r1;
        android.view.WindowManager $r3;
        int i0;
        android.view.Display $r4;
        android.app.Activity $r2;
        android.util.DisplayMetrics r0;

        $r1 := @parameter0: android.content.Context;

        r0 = new android.util.DisplayMetrics;

        specialinvoke r0.<android.util.DisplayMetrics: void <init>()>();

        $r2 = (android.app.Activity) $r1;

        $r3 = virtualinvoke $r2.<android.app.Activity: android.view.WindowManager getWindowManager()>();

        $r4 = interfaceinvoke $r3.<android.view.WindowManager: android.view.Display getDefaultDisplay()>();

        virtualinvoke $r4.<android.view.Display: void getMetrics(android.util.DisplayMetrics)>(r0);

        i0 = r0.<android.util.DisplayMetrics: int heightPixels>;

        return i0;
    }

    private static double getInternalMemory(int)
    {
        long l1, l2;
        java.lang.Exception r0;
        java.io.File $r2;
        android.os.StatFs r1;
        int $i0, $i3;
        java.lang.String $r3;
        double d0;

        $i0 := @parameter0: int;

     label1:
        $r2 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

     label2:
        r1 = new android.os.StatFs;

     label3:
        $r3 = virtualinvoke $r2.<java.io.File: java.lang.String getPath()>();

        specialinvoke r1.<android.os.StatFs: void <init>(java.lang.String)>($r3);

        $i3 = virtualinvoke r1.<android.os.StatFs: int getBlockSize()>();

     label4:
        l1 = (long) $i3;

        if 1 != $i0 goto label7;

     label5:
        $i0 = virtualinvoke r1.<android.os.StatFs: int getBlockCount()>();

     label6:
        l2 = (long) $i0;

        l1 = l1 * l2;

        l1 = l1 / 1048576L;

        d0 = (double) l1;

        return d0;

     label7:
        $i0 = virtualinvoke r1.<android.os.StatFs: int getAvailableBlocks()>();

     label8:
        goto label6;

     label9:
        r0 := @caughtexception;

        virtualinvoke r0.<java.lang.Exception: void printStackTrace()>();

        return 0.0;

        catch java.lang.Exception from label1 to label2 with label9;
        catch java.lang.Exception from label3 to label4 with label9;
        catch java.lang.Exception from label5 to label6 with label9;
        catch java.lang.Exception from label7 to label8 with label9;
    }

    public static java.lang.String getIpAddress()
    {
        java.lang.Throwable r0;
        java.util.Enumeration $r2, $r5;
        java.net.NetworkInterface r4;
        java.net.InetAddress r6;
        java.net.SocketException $r7;
        java.lang.Object $r3;
        java.lang.String $r1;
        boolean $z0;

        $r1 = <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String mIpAddress>;

        $z0 = staticinvoke <cn.hi321.browser.utils.StringUtil: boolean isEmpty(java.lang.String)>($r1);

        if $z0 == 0 goto label04;

     label01:
        $r2 = staticinvoke <java.net.NetworkInterface: java.util.Enumeration getNetworkInterfaces()>();

     label02:
        $z0 = interfaceinvoke $r2.<java.util.Enumeration: boolean hasMoreElements()>();

     label03:
        if $z0 != 0 goto label05;

     label04:
        $r1 = <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String mIpAddress>;

        return $r1;

     label05:
        $r3 = interfaceinvoke $r2.<java.util.Enumeration: java.lang.Object nextElement()>();

     label06:
        r4 = (java.net.NetworkInterface) $r3;

     label07:
        $r5 = virtualinvoke r4.<java.net.NetworkInterface: java.util.Enumeration getInetAddresses()>();

     label08:
        $z0 = interfaceinvoke $r5.<java.util.Enumeration: boolean hasMoreElements()>();

     label09:
        if $z0 == 0 goto label02;

     label10:
        $r3 = interfaceinvoke $r5.<java.util.Enumeration: java.lang.Object nextElement()>();

     label11:
        r6 = (java.net.InetAddress) $r3;

     label12:
        $z0 = virtualinvoke r6.<java.net.InetAddress: boolean isLoopbackAddress()>();

     label13:
        if $z0 != 0 goto label08;

     label14:
        $r1 = virtualinvoke r6.<java.net.InetAddress: java.lang.String getHostAddress()>();

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toString()>();

     label15:
        <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String mIpAddress> = $r1;

        goto label08;

     label16:
        r0 := @caughtexception;

        $r7 = (java.net.SocketException) r0;

        virtualinvoke $r7.<java.net.SocketException: void printStackTrace()>();

        goto label04;

        catch java.net.SocketException from label01 to label03 with label16;
        catch java.net.SocketException from label05 to label06 with label16;
        catch java.net.SocketException from label07 to label09 with label16;
        catch java.net.SocketException from label10 to label11 with label16;
        catch java.net.SocketException from label12 to label13 with label16;
        catch java.net.SocketException from label14 to label15 with label16;
    }

    public static java.lang.String getMacAddress(android.content.Context)
    {
        android.content.Context $r7;
        android.net.wifi.WifiInfo $r6;
        long $l0;
        java.lang.Exception r0;
        android.net.wifi.WifiManager r5;
        java.lang.Object $r1, $r4;
        java.lang.String $r2, $r3;
        boolean $z0;

        $r1 := @parameter0: android.content.Context;

        if $r1 != null goto label01;

        $r1 = staticinvoke <cn.hi321.browser.BrowserApp: cn.hi321.browser.BrowserApp getInstance()>();

     label01:
        $r2 = "00:00:00:00:00:00";

        $r3 = <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String mMacAddress>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label02;

        if $r1 != null goto label03;

     label02:
        $r2 = <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String mMacAddress>;

        return $r2;

     label03:
        $r7 = (android.content.Context) $r1;

        $r4 = virtualinvoke $r7.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("wifi");

        r5 = (android.net.wifi.WifiManager) $r4;

        $r6 = virtualinvoke r5.<android.net.wifi.WifiManager: android.net.wifi.WifiInfo getConnectionInfo()>();

     label04:
        if $r6 == null goto label10;

     label05:
        $r2 = virtualinvoke $r6.<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>();

        $z0 = staticinvoke <cn.hi321.browser.utils.StringUtil: boolean isEmpty(java.lang.String)>($r2);

     label06:
        if $z0 != 0 goto label10;

     label07:
        $r2 = virtualinvoke $r6.<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>();

        $r7 = (android.content.Context) $r1;

        staticinvoke <cn.hi321.browser.utils.DeviceInfoUtil: void setCacheMacAddress(android.content.Context,java.lang.String)>($r7, $r2);

        $r2 = virtualinvoke $r6.<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>();

     label08:
        <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String mMacAddress> = $r2;

        return $r2;

     label09:
        r0 := @caughtexception;

        virtualinvoke r0.<java.lang.Exception: void printStackTrace()>();

        $r2 = <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String mMacAddress>;

        return $r2;

     label10:
        $r7 = (android.content.Context) $r1;

        $r2 = staticinvoke <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String getCacheMacAddress(android.content.Context)>($r7);

        $z0 = staticinvoke <cn.hi321.browser.utils.StringUtil: boolean isEmpty(java.lang.String)>($r2);

     label11:
        if $z0 != 0 goto label12;

        <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String mMacAddress> = $r2;

        return $r2;

     label12:
        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l0);

        $r2 = staticinvoke <cn.hi321.browser.utils.StringUtil: java.lang.String getMD5Str(java.lang.String)>($r2);

        $r2 = staticinvoke <cn.hi321.browser.utils.StringUtil: java.lang.String substringAndAddPrefix(java.lang.String,int,java.lang.String)>($r2, 10, "AF");

        $z0 = staticinvoke <cn.hi321.browser.utils.StringUtil: boolean isEmpty(java.lang.String)>($r2);

     label13:
        if $z0 != 0 goto label16;

     label14:
        $r7 = (android.content.Context) $r1;

        staticinvoke <cn.hi321.browser.utils.DeviceInfoUtil: void setCacheMacAddress(android.content.Context,java.lang.String)>($r7, $r2);

     label15:
        return $r2;

     label16:
        $r2 = <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String mMacAddress>;

        return $r2;

        catch java.lang.Exception from label03 to label04 with label09;
        catch java.lang.Exception from label05 to label06 with label09;
        catch java.lang.Exception from label07 to label08 with label09;
        catch java.lang.Exception from label10 to label11 with label09;
        catch java.lang.Exception from label12 to label13 with label09;
        catch java.lang.Exception from label14 to label15 with label09;
    }

    public static java.lang.String getOSVersion()
    {
        java.lang.String $r0;
        boolean $z0;

        $r0 = <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String mOSVersion>;

        $z0 = staticinvoke <cn.hi321.browser.utils.StringUtil: boolean isEmpty(java.lang.String)>($r0);

        if $z0 == 0 goto label1;

        $r0 = <android.os.Build$VERSION: java.lang.String RELEASE>;

        <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String mOSVersion> = $r0;

     label1:
        $r0 = <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String mOSVersion>;

        return $r0;
    }

    public static int getOSVersionSDKINT(android.content.Context)
    {
        int i0;
        android.content.Context $r0;

        $r0 := @parameter0: android.content.Context;

        i0 = <android.os.Build$VERSION: int SDK_INT>;

        return i0;
    }

    public static java.lang.String getPhoneImei(android.content.Context)
    {
        android.content.Context $r0;
        android.telephony.TelephonyManager $r3;
        java.lang.Object $r2;
        java.lang.StringBuilder $r5;
        java.lang.String $r4, $r6;
        java.lang.Exception r1;

        $r0 := @parameter0: android.content.Context;

     label1:
        $r2 = virtualinvoke $r0.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("phone");

        $r3 = (android.telephony.TelephonyManager) $r2;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("DeviceInfoUtil", "after get system service.");

     label2:
        if $r3 == null goto label8;

     label3:
        $r4 = virtualinvoke $r3.<android.telephony.TelephonyManager: java.lang.String getDeviceId()>();

     label4:
        $r5 = new java.lang.StringBuilder;

     label5:
        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("mPhoneImei = ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("DeviceInfoUtil", $r6);

     label6:
        if $r4 != null goto label9;

        return "ImeiUnknown";

     label7:
        r1 := @caughtexception;

        virtualinvoke r1.<java.lang.Exception: void printStackTrace()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("DeviceInfoUtil", "in the catch.");

        return "ImeiUnknown";

     label8:
        return "";

     label9:
        return $r4;

        catch java.lang.Exception from label1 to label2 with label7;
        catch java.lang.Exception from label3 to label4 with label7;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    public static java.lang.String getReportDeviceInfo(android.content.Context)
    {
        android.content.Context $r0;
        java.lang.StringBuilder $r2;
        java.lang.String $r1;
        boolean $z0;

        $r0 := @parameter0: android.content.Context;

        $r1 = <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String mReportDeviceInfo>;

        $z0 = staticinvoke <cn.hi321.browser.utils.StringUtil: boolean isEmpty(java.lang.String)>($r1);

        if $z0 == 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        $r1 = staticinvoke <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String getDeviceType(android.content.Context)>($r0);

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>($r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

        $r1 = staticinvoke <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String getOSVersion()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

        $r1 = staticinvoke <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String getDeviceModel()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String mReportDeviceInfo> = $r1;

     label1:
        $r1 = <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String mReportDeviceInfo>;

        return $r1;
    }

    public static double getTotalExternaMemory()
    {
        double $d0;

        $d0 = staticinvoke <cn.hi321.browser.utils.DeviceInfoUtil: double getExternalMemory(int)>(1);

        return $d0;
    }

    public static double getTotalInternalMemory()
    {
        double $d0;

        $d0 = staticinvoke <cn.hi321.browser.utils.DeviceInfoUtil: double getInternalMemory(int)>(1);

        return $d0;
    }

    public static float getWidthDpi(android.content.Context)
    {
        android.content.Context $r0;
        int $i0;
        float $f0;
        android.util.DisplayMetrics r1;
        android.content.res.Resources $r2;

        $r0 := @parameter0: android.content.Context;

        r1 = new android.util.DisplayMetrics;

        specialinvoke r1.<android.util.DisplayMetrics: void <init>()>();

        $r0 = virtualinvoke $r0.<android.content.Context: android.content.Context getApplicationContext()>();

        $r2 = virtualinvoke $r0.<android.content.Context: android.content.res.Resources getResources()>();

        r1 = virtualinvoke $r2.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $i0 = r1.<android.util.DisplayMetrics: int densityDpi>;

        $f0 = (float) $i0;

        return $f0;
    }

    public static int getWidthPixels(android.content.Context)
    {
        android.content.Context $r1;
        android.view.WindowManager $r3;
        int i0;
        android.view.Display $r4;
        android.app.Activity $r2;
        android.util.DisplayMetrics r0;

        $r1 := @parameter0: android.content.Context;

        r0 = new android.util.DisplayMetrics;

        specialinvoke r0.<android.util.DisplayMetrics: void <init>()>();

        $r2 = (android.app.Activity) $r1;

        $r3 = virtualinvoke $r2.<android.app.Activity: android.view.WindowManager getWindowManager()>();

        $r4 = interfaceinvoke $r3.<android.view.WindowManager: android.view.Display getDefaultDisplay()>();

        virtualinvoke $r4.<android.view.Display: void getMetrics(android.util.DisplayMetrics)>(r0);

        i0 = r0.<android.util.DisplayMetrics: int widthPixels>;

        return i0;
    }

    private static boolean isNeedToSetVersionNumber()
    {
        android.content.Context $r2;
        java.lang.String $r0, $r1;
        boolean $z0;

        $r1 = "versionUnknown";

        $r0 = <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String mAppVersion>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z0 == 0 goto label1;

        $r2 = <cn.hi321.browser.utils.DeviceInfoUtil: android.content.Context mContext>;

        if $r2 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public static int px2dip(android.content.Context, float)
    {
        android.content.Context $r0;
        android.util.DisplayMetrics $r2;
        byte $b0;
        int $i1;
        float $f0, $f1;
        double $d0;
        android.content.res.Resources $r1;

        $r0 := @parameter0: android.content.Context;

        $f0 := @parameter1: float;

        $f1 = <cn.hi321.browser.utils.DeviceInfoUtil: float mDensity>;

        $f1 = $f1 - 0.0F;

        $f1 = staticinvoke <java.lang.Math: float abs(float)>($f1);

        $d0 = (double) $f1;

        $b0 = $d0 cmpg 1.0E-4;

        $i1 = (int) $b0;

        if $i1 >= 0 goto label1;

        $r1 = virtualinvoke $r0.<android.content.Context: android.content.res.Resources getResources()>();

        $r2 = virtualinvoke $r1.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $f1 = $r2.<android.util.DisplayMetrics: float density>;

        <cn.hi321.browser.utils.DeviceInfoUtil: float mDensity> = $f1;

     label1:
        $f1 = <cn.hi321.browser.utils.DeviceInfoUtil: float mDensity>;

        $f0 = $f0 / $f1;

        $f0 = $f0 + 0.5F;

        $i1 = (int) $f0;

        return $i1;
    }

    private static void setCacheMacAddress(android.content.Context, java.lang.String)
    {
        android.content.SharedPreferences$Editor $r3;
        android.content.Context $r0;
        android.content.SharedPreferences $r2;
        java.lang.String $r1;
        boolean $z0;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: java.lang.String;

        if $r0 == null goto label1;

        $z0 = staticinvoke <cn.hi321.browser.utils.StringUtil: boolean isEmpty(java.lang.String)>($r1);

        if $z0 != 0 goto label1;

        $r2 = virtualinvoke $r0.<android.content.Context: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>("mac_key", 0);

        $r3 = interfaceinvoke $r2.<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>();

        interfaceinvoke $r3.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>("mac_value", $r1);

        interfaceinvoke $r3.<android.content.SharedPreferences$Editor: boolean commit()>();

     label1:
        return;
    }

    private static void setVersionNameFromPackage()
    {
        android.content.Context $r1;
        android.content.pm.PackageManager $r2;
        java.lang.String $r3;
        android.content.pm.PackageInfo $r4;
        java.lang.Exception r0;
        boolean $z0;

        $z0 = staticinvoke <cn.hi321.browser.utils.DeviceInfoUtil: boolean isNeedToSetVersionNumber()>();

        if $z0 != 0 goto label01;

        return;

     label01:
        $r1 = <cn.hi321.browser.utils.DeviceInfoUtil: android.content.Context mContext>;

     label02:
        $r2 = virtualinvoke $r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

     label03:
        $r1 = <cn.hi321.browser.utils.DeviceInfoUtil: android.content.Context mContext>;

     label04:
        $r3 = virtualinvoke $r1.<android.content.Context: java.lang.String getPackageName()>();

        $r4 = virtualinvoke $r2.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>($r3, 0);

     label05:
        if $r4 == null goto label11;

     label06:
        $r3 = $r4.<android.content.pm.PackageInfo: java.lang.String versionName>;

        $z0 = staticinvoke <cn.hi321.browser.utils.StringUtil: boolean isEmpty(java.lang.String)>($r3);

     label07:
        if $z0 != 0 goto label11;

     label08:
        $r3 = $r4.<android.content.pm.PackageInfo: java.lang.String versionName>;

     label09:
        <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String mAppVersion> = $r3;

        return;

     label10:
        r0 := @caughtexception;

        virtualinvoke r0.<java.lang.Exception: void printStackTrace()>();

        <cn.hi321.browser.utils.DeviceInfoUtil: java.lang.String mAppVersion> = "versionUnknown";

     label11:
        return;

        catch java.lang.Exception from label02 to label03 with label10;
        catch java.lang.Exception from label04 to label05 with label10;
        catch java.lang.Exception from label06 to label07 with label10;
        catch java.lang.Exception from label08 to label09 with label10;
    }
}
