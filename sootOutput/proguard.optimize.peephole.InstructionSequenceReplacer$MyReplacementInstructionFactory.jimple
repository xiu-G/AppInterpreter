class proguard.optimize.peephole.InstructionSequenceReplacer$MyReplacementInstructionFactory extends java.lang.Object implements proguard.classfile.instruction.visitor.InstructionVisitor
{
    private proguard.classfile.instruction.Instruction replacementInstruction;
    private final proguard.optimize.peephole.InstructionSequenceReplacer this$0;

    private void <init>(proguard.optimize.peephole.InstructionSequenceReplacer)
    {
        proguard.optimize.peephole.InstructionSequenceReplacer$MyReplacementInstructionFactory r0;
        proguard.optimize.peephole.InstructionSequenceReplacer $r1;

        r0 := @this: proguard.optimize.peephole.InstructionSequenceReplacer$MyReplacementInstructionFactory;

        $r1 := @parameter0: proguard.optimize.peephole.InstructionSequenceReplacer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<proguard.optimize.peephole.InstructionSequenceReplacer$MyReplacementInstructionFactory: proguard.optimize.peephole.InstructionSequenceReplacer this$0> = $r1;

        return;
    }

    void <init>(proguard.optimize.peephole.InstructionSequenceReplacer, proguard.optimize.peephole.InstructionSequenceReplacer$1)
    {
        proguard.optimize.peephole.InstructionSequenceReplacer$MyReplacementInstructionFactory r0;
        proguard.optimize.peephole.InstructionSequenceReplacer $r1;
        proguard.optimize.peephole.InstructionSequenceReplacer$1 $r2;

        r0 := @this: proguard.optimize.peephole.InstructionSequenceReplacer$MyReplacementInstructionFactory;

        $r1 := @parameter0: proguard.optimize.peephole.InstructionSequenceReplacer;

        $r2 := @parameter1: proguard.optimize.peephole.InstructionSequenceReplacer$1;

        specialinvoke r0.<proguard.optimize.peephole.InstructionSequenceReplacer$MyReplacementInstructionFactory: void <init>(proguard.optimize.peephole.InstructionSequenceReplacer)>($r1);

        return;
    }

    public proguard.classfile.instruction.Instruction create(int)
    {
        proguard.classfile.instruction.Instruction $r3;
        proguard.classfile.instruction.Instruction[] $r2;
        proguard.classfile.util.InstructionSequenceMatcher $r4;
        proguard.optimize.peephole.InstructionSequenceReplacer$MyReplacementInstructionFactory r0;
        int $i0;
        proguard.optimize.peephole.InstructionSequenceReplacer $r1;

        r0 := @this: proguard.optimize.peephole.InstructionSequenceReplacer$MyReplacementInstructionFactory;

        $i0 := @parameter0: int;

        $r1 = r0.<proguard.optimize.peephole.InstructionSequenceReplacer$MyReplacementInstructionFactory: proguard.optimize.peephole.InstructionSequenceReplacer this$0>;

        $r2 = staticinvoke <proguard.optimize.peephole.InstructionSequenceReplacer: proguard.classfile.instruction.Instruction[] access$200(proguard.optimize.peephole.InstructionSequenceReplacer)>($r1);

        $r3 = $r2[$i0];

        $r1 = r0.<proguard.optimize.peephole.InstructionSequenceReplacer$MyReplacementInstructionFactory: proguard.optimize.peephole.InstructionSequenceReplacer this$0>;

        $r4 = staticinvoke <proguard.optimize.peephole.InstructionSequenceReplacer: proguard.classfile.util.InstructionSequenceMatcher access$100(proguard.optimize.peephole.InstructionSequenceReplacer)>($r1);

        $i0 = virtualinvoke $r4.<proguard.classfile.util.InstructionSequenceMatcher: int matchedInstructionOffset(int)>($i0);

        virtualinvoke $r3.<proguard.classfile.instruction.Instruction: void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.visitor.InstructionVisitor)>(null, null, null, $i0, r0);

        $r3 = r0.<proguard.optimize.peephole.InstructionSequenceReplacer$MyReplacementInstructionFactory: proguard.classfile.instruction.Instruction replacementInstruction>;

        $r3 = virtualinvoke $r3.<proguard.classfile.instruction.Instruction: proguard.classfile.instruction.Instruction shrink()>();

        return $r3;
    }

    public void visitBranchInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.BranchInstruction)
    {
        proguard.classfile.util.InstructionSequenceMatcher $r7;
        proguard.classfile.instruction.BranchInstruction $r4, $r5;
        byte $b1;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.optimize.peephole.InstructionSequenceReplacer$MyReplacementInstructionFactory r0;
        int $i0, $i2;
        proguard.optimize.peephole.InstructionSequenceReplacer $r6;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.optimize.peephole.InstructionSequenceReplacer$MyReplacementInstructionFactory;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.BranchInstruction;

        $r5 = new proguard.classfile.instruction.BranchInstruction;

        $b1 = $r4.<proguard.classfile.instruction.BranchInstruction: byte opcode>;

        $r6 = r0.<proguard.optimize.peephole.InstructionSequenceReplacer$MyReplacementInstructionFactory: proguard.optimize.peephole.InstructionSequenceReplacer this$0>;

        $r7 = staticinvoke <proguard.optimize.peephole.InstructionSequenceReplacer: proguard.classfile.util.InstructionSequenceMatcher access$100(proguard.optimize.peephole.InstructionSequenceReplacer)>($r6);

        $i2 = $r4.<proguard.classfile.instruction.BranchInstruction: int branchOffset>;

        $i0 = virtualinvoke $r7.<proguard.classfile.util.InstructionSequenceMatcher: int matchedBranchOffset(int,int)>($i0, $i2);

        specialinvoke $r5.<proguard.classfile.instruction.BranchInstruction: void <init>(byte,int)>($b1, $i0);

        r0.<proguard.optimize.peephole.InstructionSequenceReplacer$MyReplacementInstructionFactory: proguard.classfile.instruction.Instruction replacementInstruction> = $r5;

        return;
    }

    public void visitConstantInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.ConstantInstruction)
    {
        proguard.classfile.util.InstructionSequenceMatcher $r7;
        byte $b1;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.optimize.peephole.InstructionSequenceReplacer$MyReplacementInstructionFactory r0;
        int $i0, $i2;
        proguard.classfile.instruction.ConstantInstruction $r4, $r5;
        proguard.optimize.peephole.InstructionSequenceReplacer $r6;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.optimize.peephole.InstructionSequenceReplacer$MyReplacementInstructionFactory;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.ConstantInstruction;

        $r5 = new proguard.classfile.instruction.ConstantInstruction;

        $b1 = $r4.<proguard.classfile.instruction.ConstantInstruction: byte opcode>;

        $r6 = r0.<proguard.optimize.peephole.InstructionSequenceReplacer$MyReplacementInstructionFactory: proguard.optimize.peephole.InstructionSequenceReplacer this$0>;

        $r7 = staticinvoke <proguard.optimize.peephole.InstructionSequenceReplacer: proguard.classfile.util.InstructionSequenceMatcher access$100(proguard.optimize.peephole.InstructionSequenceReplacer)>($r6);

        $i0 = $r4.<proguard.classfile.instruction.ConstantInstruction: int constantIndex>;

        $i0 = virtualinvoke $r7.<proguard.classfile.util.InstructionSequenceMatcher: int matchedConstantIndex(int)>($i0);

        $r6 = r0.<proguard.optimize.peephole.InstructionSequenceReplacer$MyReplacementInstructionFactory: proguard.optimize.peephole.InstructionSequenceReplacer this$0>;

        $r7 = staticinvoke <proguard.optimize.peephole.InstructionSequenceReplacer: proguard.classfile.util.InstructionSequenceMatcher access$100(proguard.optimize.peephole.InstructionSequenceReplacer)>($r6);

        $i2 = $r4.<proguard.classfile.instruction.ConstantInstruction: int constant>;

        $i2 = virtualinvoke $r7.<proguard.classfile.util.InstructionSequenceMatcher: int matchedArgument(int)>($i2);

        specialinvoke $r5.<proguard.classfile.instruction.ConstantInstruction: void <init>(byte,int,int)>($b1, $i0, $i2);

        r0.<proguard.optimize.peephole.InstructionSequenceReplacer$MyReplacementInstructionFactory: proguard.classfile.instruction.Instruction replacementInstruction> = $r5;

        return;
    }

    public void visitLookUpSwitchInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.LookUpSwitchInstruction)
    {
        proguard.classfile.util.InstructionSequenceMatcher $r8;
        proguard.classfile.instruction.LookUpSwitchInstruction $r4, $r5;
        byte $b1;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int[] $r6, $r9;
        proguard.optimize.peephole.InstructionSequenceReplacer$MyReplacementInstructionFactory r0;
        int $i0, $i2;
        proguard.optimize.peephole.InstructionSequenceReplacer $r7;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.optimize.peephole.InstructionSequenceReplacer$MyReplacementInstructionFactory;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.LookUpSwitchInstruction;

        $r5 = new proguard.classfile.instruction.LookUpSwitchInstruction;

        $b1 = $r4.<proguard.classfile.instruction.LookUpSwitchInstruction: byte opcode>;

        $r7 = r0.<proguard.optimize.peephole.InstructionSequenceReplacer$MyReplacementInstructionFactory: proguard.optimize.peephole.InstructionSequenceReplacer this$0>;

        $r8 = staticinvoke <proguard.optimize.peephole.InstructionSequenceReplacer: proguard.classfile.util.InstructionSequenceMatcher access$100(proguard.optimize.peephole.InstructionSequenceReplacer)>($r7);

        $i2 = $r4.<proguard.classfile.instruction.LookUpSwitchInstruction: int defaultOffset>;

        $i2 = virtualinvoke $r8.<proguard.classfile.util.InstructionSequenceMatcher: int matchedBranchOffset(int,int)>($i0, $i2);

        $r7 = r0.<proguard.optimize.peephole.InstructionSequenceReplacer$MyReplacementInstructionFactory: proguard.optimize.peephole.InstructionSequenceReplacer this$0>;

        $r8 = staticinvoke <proguard.optimize.peephole.InstructionSequenceReplacer: proguard.classfile.util.InstructionSequenceMatcher access$100(proguard.optimize.peephole.InstructionSequenceReplacer)>($r7);

        $r9 = $r4.<proguard.classfile.instruction.LookUpSwitchInstruction: int[] cases>;

        $r9 = virtualinvoke $r8.<proguard.classfile.util.InstructionSequenceMatcher: int[] matchedArguments(int[])>($r9);

        $r7 = r0.<proguard.optimize.peephole.InstructionSequenceReplacer$MyReplacementInstructionFactory: proguard.optimize.peephole.InstructionSequenceReplacer this$0>;

        $r8 = staticinvoke <proguard.optimize.peephole.InstructionSequenceReplacer: proguard.classfile.util.InstructionSequenceMatcher access$100(proguard.optimize.peephole.InstructionSequenceReplacer)>($r7);

        $r6 = $r4.<proguard.classfile.instruction.LookUpSwitchInstruction: int[] jumpOffsets>;

        $r6 = virtualinvoke $r8.<proguard.classfile.util.InstructionSequenceMatcher: int[] matchedJumpOffsets(int,int[])>($i0, $r6);

        specialinvoke $r5.<proguard.classfile.instruction.LookUpSwitchInstruction: void <init>(byte,int,int[],int[])>($b1, $i2, $r9, $r6);

        r0.<proguard.optimize.peephole.InstructionSequenceReplacer$MyReplacementInstructionFactory: proguard.classfile.instruction.Instruction replacementInstruction> = $r5;

        return;
    }

    public void visitSimpleInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.SimpleInstruction)
    {
        proguard.classfile.util.InstructionSequenceMatcher $r7;
        proguard.classfile.instruction.SimpleInstruction $r4, $r5;
        byte $b1;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.optimize.peephole.InstructionSequenceReplacer$MyReplacementInstructionFactory r0;
        int $i0;
        proguard.optimize.peephole.InstructionSequenceReplacer $r6;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.optimize.peephole.InstructionSequenceReplacer$MyReplacementInstructionFactory;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.SimpleInstruction;

        $r5 = new proguard.classfile.instruction.SimpleInstruction;

        $b1 = $r4.<proguard.classfile.instruction.SimpleInstruction: byte opcode>;

        $r6 = r0.<proguard.optimize.peephole.InstructionSequenceReplacer$MyReplacementInstructionFactory: proguard.optimize.peephole.InstructionSequenceReplacer this$0>;

        $r7 = staticinvoke <proguard.optimize.peephole.InstructionSequenceReplacer: proguard.classfile.util.InstructionSequenceMatcher access$100(proguard.optimize.peephole.InstructionSequenceReplacer)>($r6);

        $i0 = $r4.<proguard.classfile.instruction.SimpleInstruction: int constant>;

        $i0 = virtualinvoke $r7.<proguard.classfile.util.InstructionSequenceMatcher: int matchedArgument(int)>($i0);

        specialinvoke $r5.<proguard.classfile.instruction.SimpleInstruction: void <init>(byte,int)>($b1, $i0);

        r0.<proguard.optimize.peephole.InstructionSequenceReplacer$MyReplacementInstructionFactory: proguard.classfile.instruction.Instruction replacementInstruction> = $r5;

        return;
    }

    public void visitTableSwitchInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.TableSwitchInstruction)
    {
        proguard.classfile.util.InstructionSequenceMatcher $r8;
        proguard.classfile.instruction.TableSwitchInstruction $r4, $r5;
        byte $b1;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int[] $r6;
        proguard.optimize.peephole.InstructionSequenceReplacer$MyReplacementInstructionFactory r0;
        int $i0, $i2, $i3, $i4;
        proguard.optimize.peephole.InstructionSequenceReplacer $r7;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.optimize.peephole.InstructionSequenceReplacer$MyReplacementInstructionFactory;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.TableSwitchInstruction;

        $r5 = new proguard.classfile.instruction.TableSwitchInstruction;

        $b1 = $r4.<proguard.classfile.instruction.TableSwitchInstruction: byte opcode>;

        $r7 = r0.<proguard.optimize.peephole.InstructionSequenceReplacer$MyReplacementInstructionFactory: proguard.optimize.peephole.InstructionSequenceReplacer this$0>;

        $r8 = staticinvoke <proguard.optimize.peephole.InstructionSequenceReplacer: proguard.classfile.util.InstructionSequenceMatcher access$100(proguard.optimize.peephole.InstructionSequenceReplacer)>($r7);

        $i2 = $r4.<proguard.classfile.instruction.TableSwitchInstruction: int defaultOffset>;

        $i2 = virtualinvoke $r8.<proguard.classfile.util.InstructionSequenceMatcher: int matchedBranchOffset(int,int)>($i0, $i2);

        $r7 = r0.<proguard.optimize.peephole.InstructionSequenceReplacer$MyReplacementInstructionFactory: proguard.optimize.peephole.InstructionSequenceReplacer this$0>;

        $r8 = staticinvoke <proguard.optimize.peephole.InstructionSequenceReplacer: proguard.classfile.util.InstructionSequenceMatcher access$100(proguard.optimize.peephole.InstructionSequenceReplacer)>($r7);

        $i3 = $r4.<proguard.classfile.instruction.TableSwitchInstruction: int lowCase>;

        $i3 = virtualinvoke $r8.<proguard.classfile.util.InstructionSequenceMatcher: int matchedArgument(int)>($i3);

        $r7 = r0.<proguard.optimize.peephole.InstructionSequenceReplacer$MyReplacementInstructionFactory: proguard.optimize.peephole.InstructionSequenceReplacer this$0>;

        $r8 = staticinvoke <proguard.optimize.peephole.InstructionSequenceReplacer: proguard.classfile.util.InstructionSequenceMatcher access$100(proguard.optimize.peephole.InstructionSequenceReplacer)>($r7);

        $i4 = $r4.<proguard.classfile.instruction.TableSwitchInstruction: int highCase>;

        $i4 = virtualinvoke $r8.<proguard.classfile.util.InstructionSequenceMatcher: int matchedArgument(int)>($i4);

        $r7 = r0.<proguard.optimize.peephole.InstructionSequenceReplacer$MyReplacementInstructionFactory: proguard.optimize.peephole.InstructionSequenceReplacer this$0>;

        $r8 = staticinvoke <proguard.optimize.peephole.InstructionSequenceReplacer: proguard.classfile.util.InstructionSequenceMatcher access$100(proguard.optimize.peephole.InstructionSequenceReplacer)>($r7);

        $r6 = $r4.<proguard.classfile.instruction.TableSwitchInstruction: int[] jumpOffsets>;

        $r6 = virtualinvoke $r8.<proguard.classfile.util.InstructionSequenceMatcher: int[] matchedJumpOffsets(int,int[])>($i0, $r6);

        specialinvoke $r5.<proguard.classfile.instruction.TableSwitchInstruction: void <init>(byte,int,int,int,int[])>($b1, $i2, $i3, $i4, $r6);

        r0.<proguard.optimize.peephole.InstructionSequenceReplacer$MyReplacementInstructionFactory: proguard.classfile.instruction.Instruction replacementInstruction> = $r5;

        return;
    }

    public void visitVariableInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.VariableInstruction)
    {
        proguard.classfile.util.InstructionSequenceMatcher $r7;
        proguard.classfile.instruction.VariableInstruction $r4, $r5;
        byte $b1;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.optimize.peephole.InstructionSequenceReplacer$MyReplacementInstructionFactory r0;
        int $i0, $i2;
        proguard.optimize.peephole.InstructionSequenceReplacer $r6;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.optimize.peephole.InstructionSequenceReplacer$MyReplacementInstructionFactory;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.VariableInstruction;

        $r5 = new proguard.classfile.instruction.VariableInstruction;

        $b1 = $r4.<proguard.classfile.instruction.VariableInstruction: byte opcode>;

        $r6 = r0.<proguard.optimize.peephole.InstructionSequenceReplacer$MyReplacementInstructionFactory: proguard.optimize.peephole.InstructionSequenceReplacer this$0>;

        $r7 = staticinvoke <proguard.optimize.peephole.InstructionSequenceReplacer: proguard.classfile.util.InstructionSequenceMatcher access$100(proguard.optimize.peephole.InstructionSequenceReplacer)>($r6);

        $i0 = $r4.<proguard.classfile.instruction.VariableInstruction: int variableIndex>;

        $i0 = virtualinvoke $r7.<proguard.classfile.util.InstructionSequenceMatcher: int matchedArgument(int)>($i0);

        $r6 = r0.<proguard.optimize.peephole.InstructionSequenceReplacer$MyReplacementInstructionFactory: proguard.optimize.peephole.InstructionSequenceReplacer this$0>;

        $r7 = staticinvoke <proguard.optimize.peephole.InstructionSequenceReplacer: proguard.classfile.util.InstructionSequenceMatcher access$100(proguard.optimize.peephole.InstructionSequenceReplacer)>($r6);

        $i2 = $r4.<proguard.classfile.instruction.VariableInstruction: int constant>;

        $i2 = virtualinvoke $r7.<proguard.classfile.util.InstructionSequenceMatcher: int matchedArgument(int)>($i2);

        specialinvoke $r5.<proguard.classfile.instruction.VariableInstruction: void <init>(byte,int,int)>($b1, $i0, $i2);

        r0.<proguard.optimize.peephole.InstructionSequenceReplacer$MyReplacementInstructionFactory: proguard.classfile.instruction.Instruction replacementInstruction> = $r5;

        return;
    }
}
