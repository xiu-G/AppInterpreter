public class proguard.optimize.peephole.HorizontalClassMerger extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.visitor.ClassVisitor
{
    private final boolean allowAccessModification;
    private final proguard.classfile.visitor.ClassVisitor extraClassVisitor;
    private final boolean mergeInterfacesAggressively;

    public void <init>(boolean, boolean)
    {
        proguard.optimize.peephole.HorizontalClassMerger r0;
        boolean $z0, $z1;

        r0 := @this: proguard.optimize.peephole.HorizontalClassMerger;

        $z0 := @parameter0: boolean;

        $z1 := @parameter1: boolean;

        specialinvoke r0.<proguard.optimize.peephole.HorizontalClassMerger: void <init>(boolean,boolean,proguard.classfile.visitor.ClassVisitor)>($z0, $z1, null);

        return;
    }

    public void <init>(boolean, boolean, proguard.classfile.visitor.ClassVisitor)
    {
        proguard.optimize.peephole.HorizontalClassMerger r0;
        proguard.classfile.visitor.ClassVisitor $r1;
        boolean $z0, $z1;

        r0 := @this: proguard.optimize.peephole.HorizontalClassMerger;

        $z0 := @parameter0: boolean;

        $z1 := @parameter1: boolean;

        $r1 := @parameter2: proguard.classfile.visitor.ClassVisitor;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        r0.<proguard.optimize.peephole.HorizontalClassMerger: boolean allowAccessModification> = $z0;

        r0.<proguard.optimize.peephole.HorizontalClassMerger: boolean mergeInterfacesAggressively> = $z1;

        r0.<proguard.optimize.peephole.HorizontalClassMerger: proguard.classfile.visitor.ClassVisitor extraClassVisitor> = $r1;

        return;
    }

    public void visitProgramClass(proguard.classfile.ProgramClass)
    {
        proguard.optimize.peephole.ClassMerger $r5;
        proguard.classfile.visitor.ClassVisitor $r6;
        proguard.classfile.visitor.ReferencedClassVisitor $r2;
        proguard.classfile.ProgramClass $r1;
        proguard.classfile.visitor.SubclassTraveler $r3;
        proguard.optimize.peephole.HorizontalClassMerger r0;
        proguard.classfile.visitor.ProgramClassFilter $r4;
        boolean $z0, $z1;

        r0 := @this: proguard.optimize.peephole.HorizontalClassMerger;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 = new proguard.classfile.visitor.ReferencedClassVisitor;

        $r3 = new proguard.classfile.visitor.SubclassTraveler;

        $r4 = new proguard.classfile.visitor.ProgramClassFilter;

        $r5 = new proguard.optimize.peephole.ClassMerger;

        $z0 = r0.<proguard.optimize.peephole.HorizontalClassMerger: boolean allowAccessModification>;

        $z1 = r0.<proguard.optimize.peephole.HorizontalClassMerger: boolean mergeInterfacesAggressively>;

        $r6 = r0.<proguard.optimize.peephole.HorizontalClassMerger: proguard.classfile.visitor.ClassVisitor extraClassVisitor>;

        specialinvoke $r5.<proguard.optimize.peephole.ClassMerger: void <init>(proguard.classfile.ProgramClass,boolean,boolean,proguard.classfile.visitor.ClassVisitor)>($r1, $z0, $z1, $r6);

        specialinvoke $r4.<proguard.classfile.visitor.ProgramClassFilter: void <init>(proguard.classfile.visitor.ClassVisitor)>($r5);

        specialinvoke $r3.<proguard.classfile.visitor.SubclassTraveler: void <init>(proguard.classfile.visitor.ClassVisitor)>($r4);

        specialinvoke $r2.<proguard.classfile.visitor.ReferencedClassVisitor: void <init>(proguard.classfile.visitor.ClassVisitor)>($r3);

        virtualinvoke $r1.<proguard.classfile.ProgramClass: void superClassConstantAccept(proguard.classfile.constant.visitor.ConstantVisitor)>($r2);

        return;
    }
}
