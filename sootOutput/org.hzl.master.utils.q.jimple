public final class org.hzl.master.utils.q extends java.lang.Object
{

    public static double a(double, double)
    {
        java.math.BigDecimal $r0, $r2;
        java.lang.String $r1;
        java.lang.Exception $r3;
        double $d0, $d1;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $r0 = new java.math.BigDecimal;

     label1:
        $r1 = staticinvoke <java.lang.Double: java.lang.String toString(double)>($d0);

        specialinvoke $r0.<java.math.BigDecimal: void <init>(java.lang.String)>($r1);

     label2:
        $r2 = new java.math.BigDecimal;

     label3:
        $r1 = staticinvoke <java.lang.Double: java.lang.String toString(double)>($d1);

        specialinvoke $r2.<java.math.BigDecimal: void <init>(java.lang.String)>($r1);

        $r0 = virtualinvoke $r0.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r2);

        $d0 = virtualinvoke $r0.<java.math.BigDecimal: double doubleValue()>();

     label4:
        return $d0;

     label5:
        $r3 := @caughtexception;

        return 0.0;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }

    public static java.lang.String a(java.lang.String, java.lang.String)
    {
        java.math.BigDecimal $r2, $r4;
        java.math.MathContext $r3;
        java.lang.String $r0, $r1;
        java.lang.Exception $r5;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r4 = new java.math.BigDecimal;

     label1:
        specialinvoke $r4.<java.math.BigDecimal: void <init>(java.lang.String)>($r0);

     label2:
        $r2 = new java.math.BigDecimal;

     label3:
        specialinvoke $r2.<java.math.BigDecimal: void <init>(java.lang.String)>($r1);

     label4:
        $r3 = new java.math.MathContext;

     label5:
        specialinvoke $r3.<java.math.MathContext: void <init>(int)>(10);

        $r2 = virtualinvoke $r4.<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal,java.math.MathContext)>($r2, $r3);

        $r0 = virtualinvoke $r2.<java.math.BigDecimal: java.lang.String toString()>();

     label6:
        return $r0;

     label7:
        $r5 := @caughtexception;

        return "NaN";

        catch java.lang.Exception from label1 to label2 with label7;
        catch java.lang.Exception from label3 to label4 with label7;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    public static double b(double, double)
    {
        java.math.BigDecimal $r0, $r2;
        java.math.MathContext $r3;
        java.lang.String $r1;
        java.lang.Exception $r4;
        double $d0, $d1;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $r0 = new java.math.BigDecimal;

     label1:
        $r1 = staticinvoke <java.lang.Double: java.lang.String toString(double)>($d0);

        specialinvoke $r0.<java.math.BigDecimal: void <init>(java.lang.String)>($r1);

     label2:
        $r2 = new java.math.BigDecimal;

     label3:
        $r1 = staticinvoke <java.lang.Double: java.lang.String toString(double)>($d1);

        specialinvoke $r2.<java.math.BigDecimal: void <init>(java.lang.String)>($r1);

     label4:
        $r3 = new java.math.MathContext;

     label5:
        specialinvoke $r3.<java.math.MathContext: void <init>(int)>(10);

        $r0 = virtualinvoke $r0.<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal,java.math.MathContext)>($r2, $r3);

        $d0 = virtualinvoke $r0.<java.math.BigDecimal: double doubleValue()>();

     label6:
        return $d0;

     label7:
        $r4 := @caughtexception;

        return 0.0;

        catch java.lang.Exception from label1 to label2 with label7;
        catch java.lang.Exception from label3 to label4 with label7;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    public static double c(double, double)
    {
        java.lang.Exception $r0;
        double $d0, $d1;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

     label1:
        $d0 = staticinvoke <org.hzl.master.utils.q: double d(double,double)>($d0, $d1);

     label2:
        return $d0;

     label3:
        $r0 := @caughtexception;

        return 0.0;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private static double d(double, double)
    {
        java.lang.Exception $r0;
        double $d0, $d1;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

     label1:
        $d0 = staticinvoke <org.hzl.master.utils.q: double e(double,double)>($d0, $d1);

     label2:
        return $d0;

     label3:
        $r0 := @caughtexception;

        return 0.0;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private static double e(double, double)
    {
        java.math.BigDecimal $r0, $r2;
        java.lang.String $r1;
        java.lang.Exception $r3;
        double $d0, $d1;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $r0 = new java.math.BigDecimal;

     label1:
        $r1 = staticinvoke <java.lang.Double: java.lang.String toString(double)>($d0);

        specialinvoke $r0.<java.math.BigDecimal: void <init>(java.lang.String)>($r1);

     label2:
        $r2 = new java.math.BigDecimal;

     label3:
        $r1 = staticinvoke <java.lang.Double: java.lang.String toString(double)>($d1);

        specialinvoke $r2.<java.math.BigDecimal: void <init>(java.lang.String)>($r1);

        $r0 = virtualinvoke $r0.<java.math.BigDecimal: java.math.BigDecimal divide(java.math.BigDecimal,int,int)>($r2, 2, 6);

        $d0 = virtualinvoke $r0.<java.math.BigDecimal: double doubleValue()>();

     label4:
        return $d0;

     label5:
        $r3 := @caughtexception;

        return 0.0;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }
}
