public class proguard.util.VariableStringMatcher extends java.lang.Object implements proguard.util.StringMatcher
{
    private final char[] allowedCharacters;
    private final char[] disallowedCharacters;
    private final int maximumLength;
    private final int minimumLength;
    private final proguard.util.StringMatcher nextMatcher;

    public void <init>(char[], char[], int, int, proguard.util.StringMatcher)
    {
        proguard.util.VariableStringMatcher r0;
        int $i0, $i1;
        char[] $r1, $r2;
        proguard.util.StringMatcher $r3;

        r0 := @this: proguard.util.VariableStringMatcher;

        $r1 := @parameter0: char[];

        $r2 := @parameter1: char[];

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $r3 := @parameter4: proguard.util.StringMatcher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<proguard.util.VariableStringMatcher: char[] allowedCharacters> = $r1;

        r0.<proguard.util.VariableStringMatcher: char[] disallowedCharacters> = $r2;

        r0.<proguard.util.VariableStringMatcher: int minimumLength> = $i0;

        r0.<proguard.util.VariableStringMatcher: int maximumLength> = $i1;

        r0.<proguard.util.VariableStringMatcher: proguard.util.StringMatcher nextMatcher> = $r3;

        return;
    }

    private boolean isAllowedCharacter(char)
    {
        proguard.util.VariableStringMatcher r0;
        int $i1, $i2, $i4;
        char[] $r1;
        char $c0, $c3;

        r0 := @this: proguard.util.VariableStringMatcher;

        $c0 := @parameter0: char;

        $r1 = r0.<proguard.util.VariableStringMatcher: char[] allowedCharacters>;

        if $r1 == null goto label4;

        $i1 = 0;

     label1:
        $r1 = r0.<proguard.util.VariableStringMatcher: char[] allowedCharacters>;

        $i2 = lengthof $r1;

        if $i1 >= $i2 goto label3;

        $r1 = r0.<proguard.util.VariableStringMatcher: char[] allowedCharacters>;

        $c3 = $r1[$i1];

        $i2 = (int) $c3;

        $i4 = (int) $c0;

        if $i2 != $i4 goto label2;

        return 1;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return 0;

     label4:
        $r1 = r0.<proguard.util.VariableStringMatcher: char[] disallowedCharacters>;

        if $r1 == null goto label7;

        $i1 = 0;

     label5:
        $r1 = r0.<proguard.util.VariableStringMatcher: char[] disallowedCharacters>;

        $i2 = lengthof $r1;

        if $i1 >= $i2 goto label7;

        $r1 = r0.<proguard.util.VariableStringMatcher: char[] disallowedCharacters>;

        $c3 = $r1[$i1];

        $i2 = (int) $c3;

        $i4 = (int) $c0;

        if $i2 != $i4 goto label6;

        return 0;

     label6:
        $i1 = $i1 + 1;

        goto label5;

     label7:
        return 1;
    }

    public boolean matches(java.lang.String)
    {
        proguard.util.VariableStringMatcher r0;
        char $c2;
        proguard.util.StringMatcher $r2;
        int $i0, $i1;
        java.lang.String $r1, $r3;
        boolean $z0;

        r0 := @this: proguard.util.VariableStringMatcher;

        $r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i1 = r0.<proguard.util.VariableStringMatcher: int minimumLength>;

        if $i0 >= $i1 goto label1;

        return 0;

     label1:
        $i0 = 0;

     label2:
        $i1 = r0.<proguard.util.VariableStringMatcher: int minimumLength>;

        if $i0 >= $i1 goto label4;

        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i0);

        $z0 = specialinvoke r0.<proguard.util.VariableStringMatcher: boolean isAllowedCharacter(char)>($c2);

        if $z0 != 0 goto label3;

        return 0;

     label3:
        $i0 = $i0 + 1;

        goto label2;

     label4:
        $i0 = r0.<proguard.util.VariableStringMatcher: int maximumLength>;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        $i1 = r0.<proguard.util.VariableStringMatcher: int minimumLength>;

     label5:
        if $i1 >= $i0 goto label8;

        $r2 = r0.<proguard.util.VariableStringMatcher: proguard.util.StringMatcher nextMatcher>;

        $r3 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i1);

        $z0 = interfaceinvoke $r2.<proguard.util.StringMatcher: boolean matches(java.lang.String)>($r3);

        if $z0 == 0 goto label6;

        return 1;

     label6:
        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i1);

        $z0 = specialinvoke r0.<proguard.util.VariableStringMatcher: boolean isAllowedCharacter(char)>($c2);

        if $z0 != 0 goto label7;

        return 0;

     label7:
        $i1 = $i1 + 1;

        goto label5;

     label8:
        $r2 = r0.<proguard.util.VariableStringMatcher: proguard.util.StringMatcher nextMatcher>;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i0);

        $z0 = interfaceinvoke $r2.<proguard.util.StringMatcher: boolean matches(java.lang.String)>($r1);

        return $z0;
    }
}
