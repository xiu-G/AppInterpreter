public class proguard.classfile.visitor.ConcreteClassDownTraveler extends java.lang.Object implements proguard.classfile.visitor.ClassVisitor
{
    private final proguard.classfile.visitor.ClassVisitor classVisitor;

    public void <init>(proguard.classfile.visitor.ClassVisitor)
    {
        proguard.classfile.visitor.ConcreteClassDownTraveler r0;
        proguard.classfile.visitor.ClassVisitor $r1;

        r0 := @this: proguard.classfile.visitor.ConcreteClassDownTraveler;

        $r1 := @parameter0: proguard.classfile.visitor.ClassVisitor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<proguard.classfile.visitor.ConcreteClassDownTraveler: proguard.classfile.visitor.ClassVisitor classVisitor> = $r1;

        return;
    }

    public void visitLibraryClass(proguard.classfile.LibraryClass)
    {
        proguard.classfile.LibraryClass $r1;
        proguard.classfile.Clazz[] $r2;
        proguard.classfile.Clazz $r3;
        proguard.classfile.visitor.ClassVisitor $r4;
        int $i0, $i1;
        proguard.classfile.visitor.ConcreteClassDownTraveler r0;

        r0 := @this: proguard.classfile.visitor.ConcreteClassDownTraveler;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        $i0 = virtualinvoke $r1.<proguard.classfile.LibraryClass: int getAccessFlags()>();

        $i0 = $i0 & 1536;

        if $i0 == 0 goto label2;

        $r2 = $r1.<proguard.classfile.LibraryClass: proguard.classfile.Clazz[] subClasses>;

        if $r2 == null goto label3;

        $i0 = 0;

     label1:
        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label3;

        $r3 = $r2[$i0];

        interfaceinvoke $r3.<proguard.classfile.Clazz: void accept(proguard.classfile.visitor.ClassVisitor)>(r0);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r4 = r0.<proguard.classfile.visitor.ConcreteClassDownTraveler: proguard.classfile.visitor.ClassVisitor classVisitor>;

        virtualinvoke $r1.<proguard.classfile.LibraryClass: void accept(proguard.classfile.visitor.ClassVisitor)>($r4);

     label3:
        return;
    }

    public void visitProgramClass(proguard.classfile.ProgramClass)
    {
        proguard.classfile.Clazz[] $r2;
        proguard.classfile.Clazz $r3;
        proguard.classfile.visitor.ClassVisitor $r4;
        int $i0, $i1;
        proguard.classfile.visitor.ConcreteClassDownTraveler r0;
        proguard.classfile.ProgramClass $r1;

        r0 := @this: proguard.classfile.visitor.ConcreteClassDownTraveler;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $i0 = virtualinvoke $r1.<proguard.classfile.ProgramClass: int getAccessFlags()>();

        $i0 = $i0 & 1536;

        if $i0 == 0 goto label2;

        $r2 = $r1.<proguard.classfile.ProgramClass: proguard.classfile.Clazz[] subClasses>;

        if $r2 == null goto label3;

        $i0 = 0;

     label1:
        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label3;

        $r3 = $r2[$i0];

        interfaceinvoke $r3.<proguard.classfile.Clazz: void accept(proguard.classfile.visitor.ClassVisitor)>(r0);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r4 = r0.<proguard.classfile.visitor.ConcreteClassDownTraveler: proguard.classfile.visitor.ClassVisitor classVisitor>;

        virtualinvoke $r1.<proguard.classfile.ProgramClass: void accept(proguard.classfile.visitor.ClassVisitor)>($r4);

     label3:
        return;
    }
}
