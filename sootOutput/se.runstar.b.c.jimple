final class se.runstar.b.c extends java.lang.Object
{
    private final java.lang.String[] a;
    private final byte[] b;
    private final boolean c;
    private int[] d;
    private boolean[] e;

    public void <init>(java.lang.String[], byte[])
    {
        se.runstar.b.c r0;
        byte[] $r2;
        int $i0, $i1;
        java.lang.String[] $r1;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: se.runstar.b.c;

        $r1 := @parameter0: java.lang.String[];

        $r2 := @parameter1: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = lengthof $r1;

        $i1 = lengthof $r2;

        if $i0 == $i1 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Names don\'t match types");

        throw $r3;

     label1:
        r0.<se.runstar.b.c: java.lang.String[] a> = $r1;

        r0.<se.runstar.b.c: byte[] b> = $r2;

        r0.<se.runstar.b.c: boolean c> = 0;

        return;
    }

    private void a(int, java.io.DataOutputStream)
    {
        se.runstar.b.c r0;
        byte[] $r4;
        java.lang.String[] $r2;
        java.io.DataOutputStream $r1;
        byte $b3;
        int $i0, $i1, $i2;
        java.lang.String $r3;

        r0 := @this: se.runstar.b.c;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.io.DataOutputStream;

        $r2 = r0.<se.runstar.b.c: java.lang.String[] a>;

        $i1 = lengthof $r2;

        virtualinvoke $r1.<java.io.DataOutputStream: void writeInt(int)>($i1);

        $i1 = 0;

     label1:
        $r2 = r0.<se.runstar.b.c: java.lang.String[] a>;

        $i2 = lengthof $r2;

        if $i1 >= $i2 goto label2;

        $r2 = r0.<se.runstar.b.c: java.lang.String[] a>;

        $r3 = $r2[$i1];

        $r4 = r0.<se.runstar.b.c: byte[] b>;

        $b3 = $r4[$i1];

        virtualinvoke $r1.<java.io.DataOutputStream: void writeUTF(java.lang.String)>($r3);

        $i2 = (int) $b3;

        virtualinvoke $r1.<java.io.DataOutputStream: void writeByte(int)>($i2);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        virtualinvoke $r1.<java.io.DataOutputStream: void writeInt(int)>($i0);

        return;
    }

    private void b(android.database.Cursor, java.io.DataOutputStream)
    {
        se.runstar.b.c r0;
        byte[] $r5;
        java.lang.IllegalStateException $r8;
        long $l1, $l3;
        java.io.DataOutputStream $r2;
        byte $b4;
        int[] $r3;
        int $i0, $i2, $i5;
        java.lang.String $r7;
        android.database.Cursor $r1;
        boolean $z0;
        double $d0;
        boolean[] $r4;
        java.lang.IllegalArgumentException $r9;
        float $f0;
        java.lang.StringBuilder $r6, $r10;

        r0 := @this: se.runstar.b.c;

        $r1 := @parameter0: android.database.Cursor;

        $r2 := @parameter1: java.io.DataOutputStream;

        $r3 = r0.<se.runstar.b.c: int[] d>;

        if $r3 != null goto label01;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot write rows before writing the header");

        throw $r8;

     label01:
        $r3 = r0.<se.runstar.b.c: int[] d>;

        $i0 = lengthof $r3;

        if $i0 <= 64 goto label02;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Too many fields");

        throw $r9;

     label02:
        $i0 = 0;

        $l1 = 0L;

     label03:
        $r3 = r0.<se.runstar.b.c: int[] d>;

        $i2 = lengthof $r3;

        if $i0 >= $i2 goto label08;

        $r4 = r0.<se.runstar.b.c: boolean[] e>;

        $r3 = r0.<se.runstar.b.c: int[] d>;

        $i2 = $r3[$i0];

        $z0 = interfaceinvoke $r1.<android.database.Cursor: boolean isNull(int)>($i2);

        if $z0 != 0 goto label06;

        $z0 = 1;

     label04:
        $r4[$i0] = $z0;

        $r4 = r0.<se.runstar.b.c: boolean[] e>;

        $z0 = $r4[$i0];

        if $z0 == 0 goto label07;

        $z0 = 1;

     label05:
        $i2 = $z0 << $i0;

        $l3 = (long) $i2;

        $l1 = $l1 | $l3;

        $i0 = $i0 + 1;

        goto label03;

     label06:
        $z0 = 0;

        goto label04;

     label07:
        $z0 = 0;

        goto label05;

     label08:
        virtualinvoke $r2.<java.io.DataOutputStream: void writeLong(long)>($l1);

        $i0 = 0;

     label09:
        $r3 = r0.<se.runstar.b.c: int[] d>;

        $i2 = lengthof $r3;

        if $i0 >= $i2 goto label30;

        $r4 = r0.<se.runstar.b.c: boolean[] e>;

        $z0 = $r4[$i0];

        if $z0 == 0 goto label21;

        $r3 = r0.<se.runstar.b.c: int[] d>;

        $i2 = $r3[$i0];

        $r5 = r0.<se.runstar.b.c: byte[] b>;

        $b4 = $r5[$i0];

        $i5 = (int) $b4;

        lookupswitch($i5)
        {
            case 0: goto label15;
            case 1: goto label11;
            case 2: goto label18;
            case 3: goto label14;
            case 4: goto label13;
            case 5: goto label19;
            case 6: goto label20;
            default: goto label10;
        };

     label10:
        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type ");

        $i0 = (int) $b4;

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not supported");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r9;

     label11:
        $l1 = interfaceinvoke $r1.<android.database.Cursor: long getLong(int)>($i2);

        virtualinvoke $r2.<java.io.DataOutputStream: void writeLong(long)>($l1);

     label12:
        $i0 = $i0 + 1;

        goto label09;

     label13:
        $d0 = interfaceinvoke $r1.<android.database.Cursor: double getDouble(int)>($i2);

        virtualinvoke $r2.<java.io.DataOutputStream: void writeDouble(double)>($d0);

        goto label12;

     label14:
        $f0 = interfaceinvoke $r1.<android.database.Cursor: float getFloat(int)>($i2);

        virtualinvoke $r2.<java.io.DataOutputStream: void writeFloat(float)>($f0);

        goto label12;

     label15:
        $i2 = interfaceinvoke $r1.<android.database.Cursor: int getInt(int)>($i2);

        if $i2 == 0 goto label17;

        $z0 = 1;

     label16:
        virtualinvoke $r2.<java.io.DataOutputStream: void writeBoolean(boolean)>($z0);

        goto label12;

     label17:
        $z0 = 0;

        goto label16;

     label18:
        $i2 = interfaceinvoke $r1.<android.database.Cursor: int getInt(int)>($i2);

        virtualinvoke $r2.<java.io.DataOutputStream: void writeInt(int)>($i2);

        goto label12;

     label19:
        $r7 = interfaceinvoke $r1.<android.database.Cursor: java.lang.String getString(int)>($i2);

        virtualinvoke $r2.<java.io.DataOutputStream: void writeUTF(java.lang.String)>($r7);

        goto label12;

     label20:
        $r5 = interfaceinvoke $r1.<android.database.Cursor: byte[] getBlob(int)>($i2);

        $i2 = lengthof $r5;

        virtualinvoke $r2.<java.io.DataOutputStream: void writeInt(int)>($i2);

        virtualinvoke $r2.<java.io.DataOutputStream: void write(byte[])>($r5);

        goto label12;

     label21:
        $z0 = r0.<se.runstar.b.c: boolean c>;

        if $z0 == 0 goto label12;

        $r5 = r0.<se.runstar.b.c: byte[] b>;

        $b4 = $r5[$i0];

        $i2 = (int) $b4;

        lookupswitch($i2)
        {
            case 0: goto label26;
            case 1: goto label23;
            case 2: goto label27;
            case 3: goto label25;
            case 4: goto label24;
            case 5: goto label28;
            case 6: goto label29;
            default: goto label22;
        };

     label22:
        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type ");

        $i0 = (int) $b4;

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not supported");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r9;

     label23:
        virtualinvoke $r2.<java.io.DataOutputStream: void writeLong(long)>(0L);

        goto label12;

     label24:
        virtualinvoke $r2.<java.io.DataOutputStream: void writeDouble(double)>(0.0);

        goto label12;

     label25:
        virtualinvoke $r2.<java.io.DataOutputStream: void writeFloat(float)>(0.0F);

        goto label12;

     label26:
        virtualinvoke $r2.<java.io.DataOutputStream: void writeBoolean(boolean)>(0);

        goto label12;

     label27:
        virtualinvoke $r2.<java.io.DataOutputStream: void writeInt(int)>(0);

        goto label12;

     label28:
        virtualinvoke $r2.<java.io.DataOutputStream: void writeUTF(java.lang.String)>("");

        goto label12;

     label29:
        virtualinvoke $r2.<java.io.DataOutputStream: void writeInt(int)>(0);

        goto label12;

     label30:
        return;
    }

    public final void a(android.database.Cursor, java.io.DataOutputStream)
    {
        se.runstar.b.c r0;
        boolean[] $r7;
        java.lang.String[] $r5;
        java.lang.IllegalArgumentException $r4;
        java.io.DataOutputStream $r2;
        int[] $r3;
        int $i0, $i1, $i2;
        java.lang.String $r6;
        android.database.Cursor $r1;
        boolean $z0;

        r0 := @this: se.runstar.b.c;

        $r1 := @parameter0: android.database.Cursor;

        $r2 := @parameter1: java.io.DataOutputStream;

        $i0 = interfaceinvoke $r1.<android.database.Cursor: int getCount()>();

        $z0 = $r1 instanceof android.database.MergeCursor;

        if $z0 == 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot use a MergeCursor");

        throw $r4;

     label1:
        $r5 = r0.<se.runstar.b.c: java.lang.String[] a>;

        $i1 = lengthof $r5;

        $r3 = newarray (int)[$i1];

        r0.<se.runstar.b.c: int[] d> = $r3;

        $i1 = 0;

     label2:
        $r5 = r0.<se.runstar.b.c: java.lang.String[] a>;

        $i2 = lengthof $r5;

        if $i1 >= $i2 goto label3;

        $r5 = r0.<se.runstar.b.c: java.lang.String[] a>;

        $r6 = $r5[$i1];

        $r3 = r0.<se.runstar.b.c: int[] d>;

        $i2 = interfaceinvoke $r1.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>($r6);

        $r3[$i1] = $i2;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $r3 = r0.<se.runstar.b.c: int[] d>;

        $i1 = lengthof $r3;

        $r7 = newarray (boolean)[$i1];

        r0.<se.runstar.b.c: boolean[] e> = $r7;

        specialinvoke r0.<se.runstar.b.c: void a(int,java.io.DataOutputStream)>($i0, $r2);

        $z0 = interfaceinvoke $r1.<android.database.Cursor: boolean moveToFirst()>();

        if $z0 != 0 goto label4;

        return;

     label4:
        specialinvoke r0.<se.runstar.b.c: void b(android.database.Cursor,java.io.DataOutputStream)>($r1, $r2);

        $z0 = interfaceinvoke $r1.<android.database.Cursor: boolean moveToNext()>();

        if $z0 != 0 goto label4;

        return;
    }
}
