public class de.greenrobot.dao.query.WhereCondition$PropertyCondition extends de.greenrobot.dao.query.WhereCondition$AbstractCondition
{
    public final java.lang.String op;
    public final de.greenrobot.dao.Property property;

    public void <init>(de.greenrobot.dao.Property, java.lang.String)
    {
        de.greenrobot.dao.query.WhereCondition$PropertyCondition r0;
        java.lang.String $r2;
        de.greenrobot.dao.Property $r1;

        r0 := @this: de.greenrobot.dao.query.WhereCondition$PropertyCondition;

        $r1 := @parameter0: de.greenrobot.dao.Property;

        $r2 := @parameter1: java.lang.String;

        specialinvoke r0.<de.greenrobot.dao.query.WhereCondition$AbstractCondition: void <init>()>();

        r0.<de.greenrobot.dao.query.WhereCondition$PropertyCondition: de.greenrobot.dao.Property property> = $r1;

        r0.<de.greenrobot.dao.query.WhereCondition$PropertyCondition: java.lang.String op> = $r2;

        return;
    }

    public void <init>(de.greenrobot.dao.Property, java.lang.String, java.lang.Object)
    {
        de.greenrobot.dao.query.WhereCondition$PropertyCondition r0;
        de.greenrobot.dao.Property $r1;
        java.lang.Object $r3;
        java.lang.String $r2;

        r0 := @this: de.greenrobot.dao.query.WhereCondition$PropertyCondition;

        $r1 := @parameter0: de.greenrobot.dao.Property;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.Object;

        $r3 = staticinvoke <de.greenrobot.dao.query.WhereCondition$PropertyCondition: java.lang.Object checkValueForType(de.greenrobot.dao.Property,java.lang.Object)>($r1, $r3);

        specialinvoke r0.<de.greenrobot.dao.query.WhereCondition$AbstractCondition: void <init>(java.lang.Object)>($r3);

        r0.<de.greenrobot.dao.query.WhereCondition$PropertyCondition: de.greenrobot.dao.Property property> = $r1;

        r0.<de.greenrobot.dao.query.WhereCondition$PropertyCondition: java.lang.String op> = "=?";

        return;
    }

    public void <init>(de.greenrobot.dao.Property, java.lang.String, java.lang.Object[])
    {
        de.greenrobot.dao.query.WhereCondition$PropertyCondition r0;
        java.lang.Object[] $r3;
        de.greenrobot.dao.Property $r1;
        java.lang.String $r2;

        r0 := @this: de.greenrobot.dao.query.WhereCondition$PropertyCondition;

        $r1 := @parameter0: de.greenrobot.dao.Property;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.Object[];

        $r3 = staticinvoke <de.greenrobot.dao.query.WhereCondition$PropertyCondition: java.lang.Object[] checkValuesForType(de.greenrobot.dao.Property,java.lang.Object[])>($r1, $r3);

        specialinvoke r0.<de.greenrobot.dao.query.WhereCondition$AbstractCondition: void <init>(java.lang.Object[])>($r3);

        r0.<de.greenrobot.dao.query.WhereCondition$PropertyCondition: de.greenrobot.dao.Property property> = $r1;

        r0.<de.greenrobot.dao.query.WhereCondition$PropertyCondition: java.lang.String op> = $r2;

        return;
    }

    private static java.lang.Object checkValueForType(de.greenrobot.dao.Property, java.lang.Object)
    {
        java.util.Date $r4;
        long $l0;
        java.lang.Integer $r10;
        byte $b1;
        java.lang.Long $r5;
        int $i2;
        java.lang.Boolean $r9;
        java.lang.String $r7, $r12;
        java.lang.Number $r11;
        boolean $z0;
        de.greenrobot.dao.DaoException $r3;
        de.greenrobot.dao.Property $r0;
        java.lang.Object $r1;
        java.lang.Class $r2, $r8;
        java.lang.StringBuilder $r6;

        $r0 := @parameter0: de.greenrobot.dao.Property;

        $r1 := @parameter1: java.lang.Object;

        if $r1 == null goto label01;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label01;

        $r3 = new de.greenrobot.dao.DaoException;

        specialinvoke $r3.<de.greenrobot.dao.DaoException: void <init>(java.lang.String)>("Illegal value: found array, but simple object required");

        throw $r3;

     label01:
        $r2 = $r0.<de.greenrobot.dao.Property: java.lang.Class type>;

        if $r2 != class "Ljava/util/Date;" goto label03;

        $z0 = $r1 instanceof java.util.Date;

        if $z0 == 0 goto label02;

        $r4 = (java.util.Date) $r1;

        $l0 = virtualinvoke $r4.<java.util.Date: long getTime()>();

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        return $r5;

     label02:
        $z0 = $r1 instanceof java.lang.Long;

        if $z0 != 0 goto label11;

        $r3 = new de.greenrobot.dao.DaoException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Illegal date value: expected java.util.Date or Long for value ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<de.greenrobot.dao.DaoException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label03:
        $r2 = $r0.<de.greenrobot.dao.Property: java.lang.Class type>;

        $r8 = <java.lang.Boolean: java.lang.Class TYPE>;

        if $r2 == $r8 goto label04;

        $r2 = $r0.<de.greenrobot.dao.Property: java.lang.Class type>;

        if $r2 != class "Ljava/lang/Boolean;" goto label11;

     label04:
        $z0 = $r1 instanceof java.lang.Boolean;

        if $z0 == 0 goto label07;

        $r9 = (java.lang.Boolean) $r1;

        $z0 = virtualinvoke $r9.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label06;

        $b1 = 1;

     label05:
        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($b1);

        return $r10;

     label06:
        $b1 = 0;

        goto label05;

     label07:
        $z0 = $r1 instanceof java.lang.Number;

        if $z0 == 0 goto label08;

        $r11 = (java.lang.Number) $r1;

        $i2 = virtualinvoke $r11.<java.lang.Number: int intValue()>();

        if $i2 == 0 goto label11;

        if $i2 == 1 goto label11;

        $r3 = new de.greenrobot.dao.DaoException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Illegal boolean value: numbers must be 0 or 1, but was ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<de.greenrobot.dao.DaoException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label08:
        $z0 = $r1 instanceof java.lang.String;

        if $z0 == 0 goto label11;

        $r7 = (java.lang.String) $r1;

        $r12 = "TRUE";

        $z0 = virtualinvoke $r12.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r7);

        if $z0 == 0 goto label09;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        return $r10;

     label09:
        $r12 = "FALSE";

        $z0 = virtualinvoke $r12.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r7);

        if $z0 == 0 goto label10;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        return $r10;

     label10:
        $r3 = new de.greenrobot.dao.DaoException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Illegal boolean value: Strings must be \"TRUE\" or \"FALSE\" (case insesnsitive), but was ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<de.greenrobot.dao.DaoException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label11:
        return $r1;
    }

    private static java.lang.Object[] checkValuesForType(de.greenrobot.dao.Property, java.lang.Object[])
    {
        java.lang.Object[] $r1;
        de.greenrobot.dao.Property $r0;
        int $i0, $i1;
        java.lang.Object $r2;

        $r0 := @parameter0: de.greenrobot.dao.Property;

        $r1 := @parameter1: java.lang.Object[];

        $i0 = 0;

     label1:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label2;

        $r2 = $r1[$i0];

        $r2 = staticinvoke <de.greenrobot.dao.query.WhereCondition$PropertyCondition: java.lang.Object checkValueForType(de.greenrobot.dao.Property,java.lang.Object)>($r0, $r2);

        $r1[$i0] = $r2;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return $r1;
    }

    public void appendTo(java.lang.StringBuilder, java.lang.String)
    {
        de.greenrobot.dao.query.WhereCondition$PropertyCondition r0;
        de.greenrobot.dao.Property $r4;
        java.lang.StringBuilder $r1, $r3;
        java.lang.String $r2;

        r0 := @this: de.greenrobot.dao.query.WhereCondition$PropertyCondition;

        $r1 := @parameter0: java.lang.StringBuilder;

        $r2 := @parameter1: java.lang.String;

        if $r2 == null goto label1;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

     label1:
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39);

        $r4 = r0.<de.greenrobot.dao.query.WhereCondition$PropertyCondition: de.greenrobot.dao.Property property>;

        $r2 = $r4.<de.greenrobot.dao.Property: java.lang.String columnName>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39);

        $r2 = r0.<de.greenrobot.dao.query.WhereCondition$PropertyCondition: java.lang.String op>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        return;
    }
}
