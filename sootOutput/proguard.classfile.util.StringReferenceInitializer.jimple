public class proguard.classfile.util.StringReferenceInitializer extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.constant.visitor.ConstantVisitor
{
    private final proguard.classfile.ClassPool libraryClassPool;
    private final proguard.classfile.ClassPool programClassPool;

    public void <init>(proguard.classfile.ClassPool, proguard.classfile.ClassPool)
    {
        proguard.classfile.ClassPool $r1, $r2;
        proguard.classfile.util.StringReferenceInitializer r0;

        r0 := @this: proguard.classfile.util.StringReferenceInitializer;

        $r1 := @parameter0: proguard.classfile.ClassPool;

        $r2 := @parameter1: proguard.classfile.ClassPool;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        r0.<proguard.classfile.util.StringReferenceInitializer: proguard.classfile.ClassPool programClassPool> = $r1;

        r0.<proguard.classfile.util.StringReferenceInitializer: proguard.classfile.ClassPool libraryClassPool> = $r2;

        return;
    }

    private proguard.classfile.Clazz findClass(java.lang.String)
    {
        proguard.classfile.ClassPool $r2;
        proguard.classfile.Clazz $r3;
        proguard.classfile.util.StringReferenceInitializer r0;
        java.lang.String $r1;

        r0 := @this: proguard.classfile.util.StringReferenceInitializer;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<proguard.classfile.util.StringReferenceInitializer: proguard.classfile.ClassPool programClassPool>;

        $r3 = virtualinvoke $r2.<proguard.classfile.ClassPool: proguard.classfile.Clazz getClass(java.lang.String)>($r1);

        if $r3 != null goto label1;

        $r2 = r0.<proguard.classfile.util.StringReferenceInitializer: proguard.classfile.ClassPool libraryClassPool>;

        $r3 = virtualinvoke $r2.<proguard.classfile.ClassPool: proguard.classfile.Clazz getClass(java.lang.String)>($r1);

     label1:
        return $r3;
    }

    public void visitAnyConstant(proguard.classfile.Clazz, proguard.classfile.constant.Constant)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.constant.Constant $r2;
        proguard.classfile.util.StringReferenceInitializer r0;

        r0 := @this: proguard.classfile.util.StringReferenceInitializer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.Constant;

        return;
    }

    public void visitStringConstant(proguard.classfile.Clazz, proguard.classfile.constant.StringConstant)
    {
        proguard.classfile.Clazz $r1, $r3;
        proguard.classfile.util.StringReferenceInitializer r0;
        proguard.classfile.constant.StringConstant $r2;
        java.lang.String $r4;

        r0 := @this: proguard.classfile.util.StringReferenceInitializer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.StringConstant;

        $r3 = $r2.<proguard.classfile.constant.StringConstant: proguard.classfile.Clazz referencedClass>;

        if $r3 != null goto label1;

        $r4 = virtualinvoke $r2.<proguard.classfile.constant.StringConstant: java.lang.String getString(proguard.classfile.Clazz)>($r1);

        $r4 = staticinvoke <proguard.classfile.util.ClassUtil: java.lang.String internalClassName(java.lang.String)>($r4);

        $r1 = specialinvoke r0.<proguard.classfile.util.StringReferenceInitializer: proguard.classfile.Clazz findClass(java.lang.String)>($r4);

        $r2.<proguard.classfile.constant.StringConstant: proguard.classfile.Clazz referencedClass> = $r1;

     label1:
        return;
    }
}
