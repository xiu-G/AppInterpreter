public class proguard.classfile.editor.VariableRemapper extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.attribute.visitor.AttributeVisitor, proguard.classfile.instruction.visitor.InstructionVisitor, proguard.classfile.attribute.visitor.LocalVariableInfoVisitor, proguard.classfile.attribute.visitor.LocalVariableTypeInfoVisitor
{
    private static final boolean DEBUG;
    private final proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor;
    private int[] variableMap;

    public void <init>()
    {
        proguard.classfile.editor.CodeAttributeEditor $r1;
        proguard.classfile.editor.VariableRemapper r0;

        r0 := @this: proguard.classfile.editor.VariableRemapper;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        $r1 = new proguard.classfile.editor.CodeAttributeEditor;

        specialinvoke $r1.<proguard.classfile.editor.CodeAttributeEditor: void <init>()>();

        r0.<proguard.classfile.editor.VariableRemapper: proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor> = $r1;

        return;
    }

    private int remapVariable(int)
    {
        int $i0;
        proguard.classfile.editor.VariableRemapper r0;
        int[] $r1;

        r0 := @this: proguard.classfile.editor.VariableRemapper;

        $i0 := @parameter0: int;

        $r1 = r0.<proguard.classfile.editor.VariableRemapper: int[] variableMap>;

        $i0 = $r1[$i0];

        return $i0;
    }

    public void setVariableMap(int[])
    {
        proguard.classfile.editor.VariableRemapper r0;
        int[] $r1;

        r0 := @this: proguard.classfile.editor.VariableRemapper;

        $r1 := @parameter0: int[];

        r0.<proguard.classfile.editor.VariableRemapper: int[] variableMap> = $r1;

        return;
    }

    public void visitAnyAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.Attribute)
    {
        proguard.classfile.editor.VariableRemapper r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.Attribute $r2;

        r0 := @this: proguard.classfile.editor.VariableRemapper;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.Attribute;

        return;
    }

    public void visitAnyInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.Instruction)
    {
        proguard.classfile.editor.VariableRemapper r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.instruction.Instruction $r4;
        int $i0;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.classfile.editor.VariableRemapper;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.Instruction;

        return;
    }

    public void visitCodeAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute)
    {
        proguard.classfile.editor.VariableRemapper r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.editor.CodeAttributeEditor $r4;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.classfile.editor.VariableRemapper;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        virtualinvoke $r3.<proguard.classfile.attribute.CodeAttribute: void attributesAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.visitor.AttributeVisitor)>($r1, $r2, r0);

        $r4 = r0.<proguard.classfile.editor.VariableRemapper: proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor>;

        $i0 = $r3.<proguard.classfile.attribute.CodeAttribute: int u4codeLength>;

        virtualinvoke $r4.<proguard.classfile.editor.CodeAttributeEditor: void reset(int)>($i0);

        virtualinvoke $r3.<proguard.classfile.attribute.CodeAttribute: void instructionsAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.instruction.visitor.InstructionVisitor)>($r1, $r2, r0);

        $r4 = r0.<proguard.classfile.editor.VariableRemapper: proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor>;

        virtualinvoke $r4.<proguard.classfile.editor.CodeAttributeEditor: void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute)>($r1, $r2, $r3);

        return;
    }

    public void visitLocalVariableInfo(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LocalVariableInfo)
    {
        proguard.classfile.editor.VariableRemapper r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.attribute.LocalVariableInfo $r4;
        int $i0;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.classfile.editor.VariableRemapper;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.LocalVariableInfo;

        $i0 = $r4.<proguard.classfile.attribute.LocalVariableInfo: int u2index>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.VariableRemapper: int remapVariable(int)>($i0);

        $r4.<proguard.classfile.attribute.LocalVariableInfo: int u2index> = $i0;

        return;
    }

    public void visitLocalVariableTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LocalVariableTableAttribute)
    {
        proguard.classfile.editor.VariableRemapper r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.LocalVariableTableAttribute $r4;

        r0 := @this: proguard.classfile.editor.VariableRemapper;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.LocalVariableTableAttribute;

        virtualinvoke $r4.<proguard.classfile.attribute.LocalVariableTableAttribute: void localVariablesAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.visitor.LocalVariableInfoVisitor)>($r1, $r2, $r3, r0);

        return;
    }

    public void visitLocalVariableTypeInfo(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LocalVariableTypeInfo)
    {
        proguard.classfile.editor.VariableRemapper r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.LocalVariableTypeInfo $r4;

        r0 := @this: proguard.classfile.editor.VariableRemapper;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.LocalVariableTypeInfo;

        $i0 = $r4.<proguard.classfile.attribute.LocalVariableTypeInfo: int u2index>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.VariableRemapper: int remapVariable(int)>($i0);

        $r4.<proguard.classfile.attribute.LocalVariableTypeInfo: int u2index> = $i0;

        return;
    }

    public void visitLocalVariableTypeTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LocalVariableTypeTableAttribute)
    {
        proguard.classfile.editor.VariableRemapper r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.LocalVariableTypeTableAttribute $r4;

        r0 := @this: proguard.classfile.editor.VariableRemapper;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.LocalVariableTypeTableAttribute;

        virtualinvoke $r4.<proguard.classfile.attribute.LocalVariableTypeTableAttribute: void localVariablesAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.visitor.LocalVariableTypeInfoVisitor)>($r1, $r2, $r3, r0);

        return;
    }

    public void visitVariableInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.VariableInstruction)
    {
        proguard.classfile.editor.CodeAttributeEditor $r7;
        proguard.classfile.instruction.VariableInstruction $r4, $r5;
        proguard.classfile.editor.VariableRemapper r0;
        byte $b1;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.instruction.Instruction $r6;
        int $i0, $i2, $i3;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.classfile.editor.VariableRemapper;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.VariableInstruction;

        $i2 = $r4.<proguard.classfile.instruction.VariableInstruction: int variableIndex>;

        $i3 = specialinvoke r0.<proguard.classfile.editor.VariableRemapper: int remapVariable(int)>($i2);

        if $i3 == $i2 goto label1;

        $r5 = new proguard.classfile.instruction.VariableInstruction;

        $b1 = $r4.<proguard.classfile.instruction.VariableInstruction: byte opcode>;

        $i2 = $r4.<proguard.classfile.instruction.VariableInstruction: int constant>;

        specialinvoke $r5.<proguard.classfile.instruction.VariableInstruction: void <init>(byte,int,int)>($b1, $i3, $i2);

        $r6 = virtualinvoke $r5.<proguard.classfile.instruction.VariableInstruction: proguard.classfile.instruction.Instruction shrink()>();

        $r7 = r0.<proguard.classfile.editor.VariableRemapper: proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor>;

        virtualinvoke $r7.<proguard.classfile.editor.CodeAttributeEditor: void replaceInstruction(int,proguard.classfile.instruction.Instruction)>($i0, $r6);

     label1:
        return;
    }
}
