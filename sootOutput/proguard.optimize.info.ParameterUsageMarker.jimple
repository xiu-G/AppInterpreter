public class proguard.optimize.info.ParameterUsageMarker extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.visitor.MemberVisitor, proguard.classfile.attribute.visitor.AttributeVisitor, proguard.classfile.instruction.visitor.InstructionVisitor
{
    private static final boolean DEBUG;
    private final boolean markAllParameters;
    private final boolean markThisParameter;
    private final proguard.optimize.evaluation.PartialEvaluator partialEvaluator;

    public void <init>()
    {
        proguard.optimize.info.ParameterUsageMarker r0;

        r0 := @this: proguard.optimize.info.ParameterUsageMarker;

        specialinvoke r0.<proguard.optimize.info.ParameterUsageMarker: void <init>(boolean,boolean)>(0, 0);

        return;
    }

    public void <init>(boolean, boolean)
    {
        proguard.optimize.evaluation.PartialEvaluator $r1;
        proguard.optimize.info.ParameterUsageMarker r0;
        boolean $z0, $z1;

        r0 := @this: proguard.optimize.info.ParameterUsageMarker;

        $z0 := @parameter0: boolean;

        $z1 := @parameter1: boolean;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        $r1 = new proguard.optimize.evaluation.PartialEvaluator;

        specialinvoke $r1.<proguard.optimize.evaluation.PartialEvaluator: void <init>()>();

        r0.<proguard.optimize.info.ParameterUsageMarker: proguard.optimize.evaluation.PartialEvaluator partialEvaluator> = $r1;

        r0.<proguard.optimize.info.ParameterUsageMarker: boolean markThisParameter> = $z0;

        r0.<proguard.optimize.info.ParameterUsageMarker: boolean markAllParameters> = $z1;

        return;
    }

    public static int getParameterSize(proguard.classfile.Method)
    {
        int $i0;
        proguard.classfile.Method $r0;
        proguard.optimize.info.MethodOptimizationInfo $r1;

        $r0 := @parameter0: proguard.classfile.Method;

        $r1 = staticinvoke <proguard.optimize.info.MethodOptimizationInfo: proguard.optimize.info.MethodOptimizationInfo getMethodOptimizationInfo(proguard.classfile.Method)>($r0);

        if $r1 == null goto label1;

        $i0 = virtualinvoke $r1.<proguard.optimize.info.MethodOptimizationInfo: int getParameterSize()>();

        return $i0;

     label1:
        return 0;
    }

    public static long getUsedParameters(proguard.classfile.Method)
    {
        proguard.classfile.Method $r0;
        long $l0;
        proguard.optimize.info.MethodOptimizationInfo $r1;

        $r0 := @parameter0: proguard.classfile.Method;

        $r1 = staticinvoke <proguard.optimize.info.MethodOptimizationInfo: proguard.optimize.info.MethodOptimizationInfo getMethodOptimizationInfo(proguard.classfile.Method)>($r0);

        if $r1 == null goto label1;

        $l0 = virtualinvoke $r1.<proguard.optimize.info.MethodOptimizationInfo: long getUsedParameters()>();

        return $l0;

     label1:
        return -1L;
    }

    public static boolean isParameterUsed(proguard.classfile.Method, int)
    {
        int $i0;
        proguard.classfile.Method $r0;
        proguard.optimize.info.MethodOptimizationInfo $r1;
        boolean $z0;

        $r0 := @parameter0: proguard.classfile.Method;

        $i0 := @parameter1: int;

        $r1 = staticinvoke <proguard.optimize.info.MethodOptimizationInfo: proguard.optimize.info.MethodOptimizationInfo getMethodOptimizationInfo(proguard.classfile.Method)>($r0);

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r1.<proguard.optimize.info.MethodOptimizationInfo: boolean isParameterUsed(int)>($i0);

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public static void markParameterUsed(proguard.classfile.Method, int)
    {
        int $i0;
        proguard.classfile.Method $r0;
        proguard.optimize.info.MethodOptimizationInfo $r1;

        $r0 := @parameter0: proguard.classfile.Method;

        $i0 := @parameter1: int;

        $r1 = staticinvoke <proguard.optimize.info.MethodOptimizationInfo: proguard.optimize.info.MethodOptimizationInfo getMethodOptimizationInfo(proguard.classfile.Method)>($r0);

        if $r1 == null goto label1;

        virtualinvoke $r1.<proguard.optimize.info.MethodOptimizationInfo: void setParameterUsed(int)>($i0);

     label1:
        return;
    }

    public static void markUsedParameters(proguard.classfile.Method, long)
    {
        proguard.classfile.Method $r0;
        long $l0, $l1;
        proguard.optimize.info.MethodOptimizationInfo $r1;

        $r0 := @parameter0: proguard.classfile.Method;

        $l0 := @parameter1: long;

        $r1 = staticinvoke <proguard.optimize.info.MethodOptimizationInfo: proguard.optimize.info.MethodOptimizationInfo getMethodOptimizationInfo(proguard.classfile.Method)>($r0);

        if $r1 == null goto label1;

        $l1 = virtualinvoke $r1.<proguard.optimize.info.MethodOptimizationInfo: long getUsedParameters()>();

        $l0 = $l1 | $l0;

        virtualinvoke $r1.<proguard.optimize.info.MethodOptimizationInfo: void setUsedParameters(long)>($l0);

     label1:
        return;
    }

    private static void setParameterSize(proguard.classfile.Method, int)
    {
        int $i0;
        proguard.classfile.Method $r0;
        proguard.optimize.info.MethodOptimizationInfo $r1;

        $r0 := @parameter0: proguard.classfile.Method;

        $i0 := @parameter1: int;

        $r1 = staticinvoke <proguard.optimize.info.MethodOptimizationInfo: proguard.optimize.info.MethodOptimizationInfo getMethodOptimizationInfo(proguard.classfile.Method)>($r0);

        if $r1 == null goto label1;

        virtualinvoke $r1.<proguard.optimize.info.MethodOptimizationInfo: void setParameterSize(int)>($i0);

     label1:
        return;
    }

    public void visitAnyAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.Attribute)
    {
        proguard.optimize.info.ParameterUsageMarker r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.Attribute $r2;

        r0 := @this: proguard.optimize.info.ParameterUsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.Attribute;

        return;
    }

    public void visitAnyInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.Instruction)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.instruction.Instruction $r4;
        int $i0;
        proguard.optimize.info.ParameterUsageMarker r0;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.optimize.info.ParameterUsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.Instruction;

        return;
    }

    public void visitCodeAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute)
    {
        proguard.optimize.evaluation.PartialEvaluator $r4;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.optimize.info.ParameterUsageMarker r0;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.optimize.info.ParameterUsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 = r0.<proguard.optimize.info.ParameterUsageMarker: proguard.optimize.evaluation.PartialEvaluator partialEvaluator>;

        virtualinvoke $r4.<proguard.optimize.evaluation.PartialEvaluator: void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute)>($r1, $r2, $r3);

        virtualinvoke $r3.<proguard.classfile.attribute.CodeAttribute: void instructionsAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.instruction.visitor.InstructionVisitor)>($r1, $r2, r0);

        return;
    }

    public void visitLibraryMethod(proguard.classfile.LibraryClass, proguard.classfile.LibraryMethod)
    {
        proguard.classfile.LibraryClass $r1;
        proguard.optimize.info.ParameterUsageMarker r0;
        proguard.classfile.LibraryMethod $r2;
        boolean $z0;

        r0 := @this: proguard.optimize.info.ParameterUsageMarker;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        $r2 := @parameter1: proguard.classfile.LibraryMethod;

        $z0 = virtualinvoke $r1.<proguard.classfile.LibraryClass: boolean mayHaveImplementations(proguard.classfile.Method)>($r2);

        if $z0 == 0 goto label1;

        staticinvoke <proguard.optimize.info.ParameterUsageMarker: void markUsedParameters(proguard.classfile.Method,long)>($r2, -1L);

     label1:
        return;
    }

    public void visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod)
    {
        proguard.optimize.info.ParameterUsageMarker r0;
        long $l3;
        proguard.classfile.ProgramClass $r1;
        proguard.classfile.ProgramMethod $r2;
        int $i0, $i1, $i2;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: proguard.optimize.info.ParameterUsageMarker;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.ProgramMethod;

        $r3 = virtualinvoke $r2.<proguard.classfile.ProgramMethod: java.lang.String getDescriptor(proguard.classfile.Clazz)>($r1);

        $i0 = virtualinvoke $r2.<proguard.classfile.ProgramMethod: int getAccessFlags()>();

        $i0 = staticinvoke <proguard.classfile.util.ClassUtil: int internalMethodParameterSize(java.lang.String,int)>($r3, $i0);

        if $i0 <= 0 goto label4;

        $i1 = virtualinvoke $r2.<proguard.classfile.ProgramMethod: int getAccessFlags()>();

        $z0 = r0.<proguard.optimize.info.ParameterUsageMarker: boolean markThisParameter>;

        if $z0 == 0 goto label1;

        $i2 = $i1 & 8;

        if $i2 != 0 goto label1;

        staticinvoke <proguard.optimize.info.ParameterUsageMarker: void markParameterUsed(proguard.classfile.Method,int)>($r2, 0);

     label1:
        $z0 = r0.<proguard.optimize.info.ParameterUsageMarker: boolean markAllParameters>;

        if $z0 == 0 goto label3;

        $i2 = $i1 & 8;

        if $i2 == 0 goto label5;

        $l3 = -1L;

     label2:
        staticinvoke <proguard.optimize.info.ParameterUsageMarker: void markUsedParameters(proguard.classfile.Method,long)>($r2, $l3);

     label3:
        $i2 = $i1 & 256;

        if $i2 == 0 goto label6;

        staticinvoke <proguard.optimize.info.ParameterUsageMarker: void markUsedParameters(proguard.classfile.Method,long)>($r2, -1L);

     label4:
        staticinvoke <proguard.optimize.info.ParameterUsageMarker: void setParameterSize(proguard.classfile.Method,int)>($r2, $i0);

        return;

     label5:
        $l3 = -2L;

        goto label2;

     label6:
        $i2 = $i1 & 1024;

        if $i2 == 0 goto label7;

        staticinvoke <proguard.optimize.info.ParameterUsageMarker: void markParameterUsed(proguard.classfile.Method,int)>($r2, 0);

        goto label4;

     label7:
        $i2 = $i1 & 8;

        if $i2 != 0 goto label9;

        $i1 = $i1 & 32;

        if $i1 != 0 goto label8;

        $z0 = virtualinvoke $r1.<proguard.classfile.ProgramClass: boolean mayHaveImplementations(proguard.classfile.Method)>($r2);

        if $z0 != 0 goto label8;

        $r3 = virtualinvoke $r2.<proguard.classfile.ProgramMethod: java.lang.String getName(proguard.classfile.Clazz)>($r1);

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("<init>");

        if $z0 == 0 goto label9;

     label8:
        staticinvoke <proguard.optimize.info.ParameterUsageMarker: void markParameterUsed(proguard.classfile.Method,int)>($r2, 0);

     label9:
        virtualinvoke $r2.<proguard.classfile.ProgramMethod: void attributesAccept(proguard.classfile.ProgramClass,proguard.classfile.attribute.visitor.AttributeVisitor)>($r1, r0);

        goto label4;
    }

    public void visitVariableInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.VariableInstruction)
    {
        proguard.evaluation.TracedVariables $r6;
        proguard.optimize.info.ParameterUsageMarker r0;
        proguard.classfile.instruction.VariableInstruction $r4;
        proguard.optimize.evaluation.PartialEvaluator $r5;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.evaluation.value.InstructionOffsetValue $r8;
        int $i0, $i1, $i2;
        proguard.classfile.Method $r2;
        proguard.evaluation.value.Value $r7;
        boolean $z0;

        r0 := @this: proguard.optimize.info.ParameterUsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.VariableInstruction;

        $r5 = r0.<proguard.optimize.info.ParameterUsageMarker: proguard.optimize.evaluation.PartialEvaluator partialEvaluator>;

        $z0 = virtualinvoke $r5.<proguard.optimize.evaluation.PartialEvaluator: boolean isTraced(int)>($i0);

        if $z0 == 0 goto label1;

        $z0 = virtualinvoke $r4.<proguard.classfile.instruction.VariableInstruction: boolean isLoad()>();

        if $z0 == 0 goto label1;

        $i1 = $r4.<proguard.classfile.instruction.VariableInstruction: int variableIndex>;

        $i2 = $r3.<proguard.classfile.attribute.CodeAttribute: int u2maxLocals>;

        if $i1 >= $i2 goto label1;

        $r5 = r0.<proguard.optimize.info.ParameterUsageMarker: proguard.optimize.evaluation.PartialEvaluator partialEvaluator>;

        $r6 = virtualinvoke $r5.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedVariables getVariablesBefore(int)>($i0);

        $r7 = virtualinvoke $r6.<proguard.evaluation.TracedVariables: proguard.evaluation.value.Value getProducerValue(int)>($i1);

        if $r7 == null goto label1;

        $r8 = virtualinvoke $r7.<proguard.evaluation.value.Value: proguard.evaluation.value.InstructionOffsetValue instructionOffsetValue()>();

        $z0 = virtualinvoke $r8.<proguard.evaluation.value.InstructionOffsetValue: boolean contains(int)>(-1);

        if $z0 == 0 goto label1;

        staticinvoke <proguard.optimize.info.ParameterUsageMarker: void markParameterUsed(proguard.classfile.Method,int)>($r2, $i1);

        $z0 = virtualinvoke $r4.<proguard.classfile.instruction.VariableInstruction: boolean isCategory2()>();

        if $z0 == 0 goto label1;

        $i0 = $i1 + 1;

        staticinvoke <proguard.optimize.info.ParameterUsageMarker: void markParameterUsed(proguard.classfile.Method,int)>($r2, $i0);

     label1:
        return;
    }
}
