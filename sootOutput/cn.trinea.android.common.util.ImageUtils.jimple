public class cn.trinea.android.common.util.ImageUtils extends java.lang.Object
{

    public void <init>()
    {
        cn.trinea.android.common.util.ImageUtils r0;

        r0 := @this: cn.trinea.android.common.util.ImageUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static byte[] bitmapToByte(android.graphics.Bitmap)
    {
        byte[] $r2;
        java.io.ByteArrayOutputStream $r3;
        android.graphics.Bitmap $r0;
        android.graphics.Bitmap$CompressFormat $r1;

        $r0 := @parameter0: android.graphics.Bitmap;

        if $r0 != null goto label1;

        return null;

     label1:
        $r3 = new java.io.ByteArrayOutputStream;

        specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>()>();

        $r1 = <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat PNG>;

        virtualinvoke $r0.<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>($r1, 100, $r3);

        $r2 = virtualinvoke $r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r2;
    }

    public static android.graphics.drawable.Drawable bitmapToDrawable(android.graphics.Bitmap)
    {
        android.graphics.drawable.BitmapDrawable $r1;
        android.graphics.Bitmap $r0;

        $r0 := @parameter0: android.graphics.Bitmap;

        if $r0 != null goto label1;

        return null;

     label1:
        $r1 = new android.graphics.drawable.BitmapDrawable;

        specialinvoke $r1.<android.graphics.drawable.BitmapDrawable: void <init>(android.graphics.Bitmap)>($r0);

        return $r1;
    }

    public static android.graphics.Bitmap byteToBitmap(byte[])
    {
        int $i0;
        byte[] $r0;
        android.graphics.Bitmap $r1;

        $r0 := @parameter0: byte[];

        if $r0 == null goto label1;

        $i0 = lengthof $r0;

        if $i0 != 0 goto label2;

     label1:
        return null;

     label2:
        $i0 = lengthof $r0;

        $r1 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeByteArray(byte[],int,int)>($r0, 0, $i0);

        return $r1;
    }

    public static android.graphics.drawable.Drawable byteToDrawable(byte[])
    {
        byte[] $r0;
        android.graphics.drawable.Drawable $r2;
        android.graphics.Bitmap $r1;

        $r0 := @parameter0: byte[];

        $r1 = staticinvoke <cn.trinea.android.common.util.ImageUtils: android.graphics.Bitmap byteToBitmap(byte[])>($r0);

        $r2 = staticinvoke <cn.trinea.android.common.util.ImageUtils: android.graphics.drawable.Drawable bitmapToDrawable(android.graphics.Bitmap)>($r1);

        return $r2;
    }

    private static void closeInputStream(java.io.InputStream)
    {
        java.lang.Throwable $r1;
        java.lang.RuntimeException $r2;
        java.io.InputStream $r0;

        $r0 := @parameter0: java.io.InputStream;

        if $r0 != null goto label1;

        return;

     label1:
        virtualinvoke $r0.<java.io.InputStream: void close()>();

     label2:
        return;

     label3:
        $r1 := @caughtexception;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("IOException occurred. ", $r1);

        throw $r2;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static android.graphics.Bitmap drawableToBitmap(android.graphics.drawable.Drawable)
    {
        android.graphics.drawable.BitmapDrawable $r2;
        android.graphics.drawable.Drawable $r1;
        android.graphics.Bitmap $r0;

        $r1 := @parameter0: android.graphics.drawable.Drawable;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = (android.graphics.drawable.BitmapDrawable) $r1;

        $r0 = virtualinvoke $r2.<android.graphics.drawable.BitmapDrawable: android.graphics.Bitmap getBitmap()>();

        return $r0;
    }

    public static byte[] drawableToByte(android.graphics.drawable.Drawable)
    {
        byte[] $r2;
        android.graphics.drawable.Drawable $r0;
        android.graphics.Bitmap $r1;

        $r0 := @parameter0: android.graphics.drawable.Drawable;

        $r1 = staticinvoke <cn.trinea.android.common.util.ImageUtils: android.graphics.Bitmap drawableToBitmap(android.graphics.drawable.Drawable)>($r0);

        $r2 = staticinvoke <cn.trinea.android.common.util.ImageUtils: byte[] bitmapToByte(android.graphics.Bitmap)>($r1);

        return $r2;
    }

    public static android.graphics.Bitmap getBitmapFromUrl(java.lang.String, int)
    {
        int $i0;
        java.lang.String $r0;
        android.graphics.Bitmap $r1;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r1 = staticinvoke <cn.trinea.android.common.util.ImageUtils: android.graphics.Bitmap getBitmapFromUrl(java.lang.String,int,java.util.Map)>($r0, $i0, null);

        return $r1;
    }

    public static android.graphics.Bitmap getBitmapFromUrl(java.lang.String, int, java.util.Map)
    {
        android.graphics.Bitmap $r3;
        java.util.Map $r1;
        int $i0;
        java.lang.String $r0;
        java.io.InputStream $r2;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r1 := @parameter2: java.util.Map;

        $r2 = staticinvoke <cn.trinea.android.common.util.ImageUtils: java.io.InputStream getInputStreamFromUrl(java.lang.String,int,java.util.Map)>($r0, $i0, $r1);

        $r3 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream)>($r2);

        staticinvoke <cn.trinea.android.common.util.ImageUtils: void closeInputStream(java.io.InputStream)>($r2);

        return $r3;
    }

    public static android.graphics.drawable.Drawable getDrawableFromUrl(java.lang.String, int)
    {
        int $i0;
        java.lang.String $r0;
        android.graphics.drawable.Drawable $r1;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r1 = staticinvoke <cn.trinea.android.common.util.ImageUtils: android.graphics.drawable.Drawable getDrawableFromUrl(java.lang.String,int,java.util.Map)>($r0, $i0, null);

        return $r1;
    }

    public static android.graphics.drawable.Drawable getDrawableFromUrl(java.lang.String, int, java.util.Map)
    {
        java.util.Map $r1;
        int $i0;
        java.lang.String $r0;
        android.graphics.drawable.Drawable $r3;
        java.io.InputStream $r2;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r1 := @parameter2: java.util.Map;

        $r2 = staticinvoke <cn.trinea.android.common.util.ImageUtils: java.io.InputStream getInputStreamFromUrl(java.lang.String,int,java.util.Map)>($r0, $i0, $r1);

        $r3 = staticinvoke <android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromStream(java.io.InputStream,java.lang.String)>($r2, "src");

        staticinvoke <cn.trinea.android.common.util.ImageUtils: void closeInputStream(java.io.InputStream)>($r2);

        return $r3;
    }

    public static java.io.InputStream getInputStreamFromUrl(java.lang.String, int)
    {
        int $i0;
        java.lang.String $r0;
        java.io.InputStream $r1;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r1 = staticinvoke <cn.trinea.android.common.util.ImageUtils: java.io.InputStream getInputStreamFromUrl(java.lang.String,int,java.util.Map)>($r0, $i0, null);

        return $r1;
    }

    public static java.io.InputStream getInputStreamFromUrl(java.lang.String, int, java.util.Map)
    {
        java.net.HttpURLConnection $r4;
        java.lang.Throwable $r6, $r8;
        java.net.URL $r2;
        java.lang.RuntimeException $r7;
        java.net.URLConnection $r3;
        java.util.Map $r1;
        int $i0;
        java.lang.String $r0;
        java.io.InputStream $r5;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r1 := @parameter2: java.util.Map;

        $r2 = new java.net.URL;

     label1:
        specialinvoke $r2.<java.net.URL: void <init>(java.lang.String)>($r0);

        $r3 = virtualinvoke $r2.<java.net.URL: java.net.URLConnection openConnection()>();

     label2:
        $r4 = (java.net.HttpURLConnection) $r3;

     label3:
        staticinvoke <cn.trinea.android.common.util.HttpUtils: void setURLConnection(java.util.Map,java.net.HttpURLConnection)>($r1, $r4);

     label4:
        if $i0 <= 0 goto label6;

     label5:
        virtualinvoke $r4.<java.net.HttpURLConnection: void setReadTimeout(int)>($i0);

     label6:
        $r5 = virtualinvoke $r4.<java.net.HttpURLConnection: java.io.InputStream getInputStream()>();

     label7:
        return $r5;

     label8:
        $r6 := @caughtexception;

        staticinvoke <cn.trinea.android.common.util.ImageUtils: void closeInputStream(java.io.InputStream)>(null);

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("MalformedURLException occurred. ", $r6);

        throw $r7;

     label9:
        $r8 := @caughtexception;

        staticinvoke <cn.trinea.android.common.util.ImageUtils: void closeInputStream(java.io.InputStream)>(null);

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("IOException occurred. ", $r8);

        throw $r7;

        catch java.net.MalformedURLException from label1 to label2 with label8;
        catch java.net.MalformedURLException from label3 to label4 with label8;
        catch java.net.MalformedURLException from label5 to label7 with label8;
        catch java.io.IOException from label1 to label2 with label9;
        catch java.io.IOException from label3 to label4 with label9;
        catch java.io.IOException from label5 to label7 with label9;
    }

    public static android.graphics.Bitmap scaleImage(android.graphics.Bitmap, float, float)
    {
        android.graphics.Bitmap $r0;
        int $i0, $i1;
        float $f0, $f1;
        android.graphics.Matrix $r1;

        $r0 := @parameter0: android.graphics.Bitmap;

        $f0 := @parameter1: float;

        $f1 := @parameter2: float;

        if $r0 != null goto label1;

        return null;

     label1:
        $r1 = new android.graphics.Matrix;

        specialinvoke $r1.<android.graphics.Matrix: void <init>()>();

        virtualinvoke $r1.<android.graphics.Matrix: boolean postScale(float,float)>($f0, $f1);

        $i0 = virtualinvoke $r0.<android.graphics.Bitmap: int getWidth()>();

        $i1 = virtualinvoke $r0.<android.graphics.Bitmap: int getHeight()>();

        $r0 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int,android.graphics.Matrix,boolean)>($r0, 0, 0, $i0, $i1, $r1, 1);

        return $r0;
    }

    public static android.graphics.Bitmap scaleImageTo(android.graphics.Bitmap, int, int)
    {
        android.graphics.Bitmap $r0;
        int $i0, $i1;
        float $f0, $f1, $f2;

        $r0 := @parameter0: android.graphics.Bitmap;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $f0 = (float) $i0;

        $i0 = virtualinvoke $r0.<android.graphics.Bitmap: int getWidth()>();

        $f1 = (float) $i0;

        $f0 = $f0 / $f1;

        $f1 = (float) $i1;

        $i0 = virtualinvoke $r0.<android.graphics.Bitmap: int getHeight()>();

        $f2 = (float) $i0;

        $f1 = $f1 / $f2;

        $r0 = staticinvoke <cn.trinea.android.common.util.ImageUtils: android.graphics.Bitmap scaleImage(android.graphics.Bitmap,float,float)>($r0, $f0, $f1);

        return $r0;
    }
}
