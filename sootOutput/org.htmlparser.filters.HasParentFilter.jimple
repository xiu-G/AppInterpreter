public class org.htmlparser.filters.HasParentFilter extends java.lang.Object implements org.htmlparser.NodeFilter
{
    protected org.htmlparser.NodeFilter a;
    protected boolean b;

    public void <init>()
    {
        org.htmlparser.filters.HasParentFilter r0;

        r0 := @this: org.htmlparser.filters.HasParentFilter;

        specialinvoke r0.<org.htmlparser.filters.HasParentFilter: void <init>(org.htmlparser.NodeFilter)>(null);

        return;
    }

    public void <init>(org.htmlparser.NodeFilter)
    {
        org.htmlparser.NodeFilter $r1;
        org.htmlparser.filters.HasParentFilter r0;

        r0 := @this: org.htmlparser.filters.HasParentFilter;

        $r1 := @parameter0: org.htmlparser.NodeFilter;

        specialinvoke r0.<org.htmlparser.filters.HasParentFilter: void <init>(org.htmlparser.NodeFilter,boolean)>($r1, 0);

        return;
    }

    public void <init>(org.htmlparser.NodeFilter, boolean)
    {
        org.htmlparser.NodeFilter $r1;
        org.htmlparser.filters.HasParentFilter r0;
        boolean $z0;

        r0 := @this: org.htmlparser.filters.HasParentFilter;

        $r1 := @parameter0: org.htmlparser.NodeFilter;

        $z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        virtualinvoke r0.<org.htmlparser.filters.HasParentFilter: void setParentFilter(org.htmlparser.NodeFilter)>($r1);

        virtualinvoke r0.<org.htmlparser.filters.HasParentFilter: void setRecursive(boolean)>($z0);

        return;
    }

    public boolean accept(org.htmlparser.Node)
    {
        org.htmlparser.NodeFilter $r3;
        org.htmlparser.Tag $r2;
        org.htmlparser.filters.HasParentFilter r0;
        org.htmlparser.Node $r1;
        boolean $z0, $z1;

        r0 := @this: org.htmlparser.filters.HasParentFilter;

        $r1 := @parameter0: org.htmlparser.Node;

        $z0 = $r1 instanceof org.htmlparser.Tag;

        if $z0 == 0 goto label1;

        $r2 = (org.htmlparser.Tag) $r1;

        $z0 = interfaceinvoke $r2.<org.htmlparser.Tag: boolean isEndTag()>();

        if $z0 != 0 goto label3;

     label1:
        $r1 = interfaceinvoke $r1.<org.htmlparser.Node: org.htmlparser.Node getParent()>();

        if $r1 == null goto label3;

        $r3 = virtualinvoke r0.<org.htmlparser.filters.HasParentFilter: org.htmlparser.NodeFilter getParentFilter()>();

        if $r3 == null goto label3;

        $r3 = virtualinvoke r0.<org.htmlparser.filters.HasParentFilter: org.htmlparser.NodeFilter getParentFilter()>();

        $z0 = interfaceinvoke $r3.<org.htmlparser.NodeFilter: boolean accept(org.htmlparser.Node)>($r1);

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke r0.<org.htmlparser.filters.HasParentFilter: boolean getRecursive()>();

        if $z1 == 0 goto label2;

        $z0 = virtualinvoke r0.<org.htmlparser.filters.HasParentFilter: boolean accept(org.htmlparser.Node)>($r1);

     label2:
        return $z0;

     label3:
        return 0;
    }

    public org.htmlparser.NodeFilter getParentFilter()
    {
        org.htmlparser.NodeFilter r1;
        org.htmlparser.filters.HasParentFilter r0;

        r0 := @this: org.htmlparser.filters.HasParentFilter;

        r1 = r0.<org.htmlparser.filters.HasParentFilter: org.htmlparser.NodeFilter a>;

        return r1;
    }

    public boolean getRecursive()
    {
        org.htmlparser.filters.HasParentFilter r0;
        boolean z0;

        r0 := @this: org.htmlparser.filters.HasParentFilter;

        z0 = r0.<org.htmlparser.filters.HasParentFilter: boolean b>;

        return z0;
    }

    public void setParentFilter(org.htmlparser.NodeFilter)
    {
        org.htmlparser.NodeFilter $r1;
        org.htmlparser.filters.HasParentFilter r0;

        r0 := @this: org.htmlparser.filters.HasParentFilter;

        $r1 := @parameter0: org.htmlparser.NodeFilter;

        r0.<org.htmlparser.filters.HasParentFilter: org.htmlparser.NodeFilter a> = $r1;

        return;
    }

    public void setRecursive(boolean)
    {
        org.htmlparser.filters.HasParentFilter r0;
        boolean $z0;

        r0 := @this: org.htmlparser.filters.HasParentFilter;

        $z0 := @parameter0: boolean;

        r0.<org.htmlparser.filters.HasParentFilter: boolean b> = $z0;

        return;
    }
}
