public final class com.nostra13.universalimageloader.utils.StorageUtils extends java.lang.Object
{
    private static final java.lang.String EXTERNAL_STORAGE_PERMISSION;
    private static final java.lang.String INDIVIDUAL_DIR_NAME;

    private void <init>()
    {
        com.nostra13.universalimageloader.utils.StorageUtils r0;

        r0 := @this: com.nostra13.universalimageloader.utils.StorageUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.io.File getCacheDirectory(android.content.Context)
    {
        android.content.Context $r0;
        java.io.File $r1;

        $r0 := @parameter0: android.content.Context;

        $r1 = staticinvoke <com.nostra13.universalimageloader.utils.StorageUtils: java.io.File getCacheDirectory(android.content.Context,boolean)>($r0, 1);

        return $r1;
    }

    public static java.io.File getCacheDirectory(android.content.Context, boolean)
    {
        android.content.Context $r0;
        java.lang.Object[] $r5;
        java.io.File $r1;
        java.lang.NullPointerException $r6;
        java.lang.StringBuilder $r4;
        java.lang.String $r2, $r3;
        boolean $z0;

        $r0 := @parameter0: android.content.Context;

        $z0 := @parameter1: boolean;

        $r1 = null;

     label1:
        $r2 = staticinvoke <android.os.Environment: java.lang.String getExternalStorageState()>();

     label2:
        if $z0 == 0 goto label3;

        $r3 = "mounted";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label3;

        $z0 = staticinvoke <com.nostra13.universalimageloader.utils.StorageUtils: boolean hasExternalStoragePermission(android.content.Context)>($r0);

        if $z0 == 0 goto label3;

        $r1 = staticinvoke <com.nostra13.universalimageloader.utils.StorageUtils: java.io.File getExternalCacheDir(android.content.Context)>($r0);

     label3:
        if $r1 != null goto label5;

        $r1 = virtualinvoke $r0.<android.content.Context: java.io.File getCacheDir()>();

        if $r1 != null goto label5;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("/data/data/");

        $r2 = virtualinvoke $r0.<android.content.Context: java.lang.String getPackageName()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/cache/");

        $r2 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = $r2;

        staticinvoke <com.nostra13.universalimageloader.utils.L: void w(java.lang.String,java.lang.Object[])>("Can\'t define system cache directory! \'%s\' will be used.", $r5);

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>($r2);

        return $r1;

     label4:
        $r6 := @caughtexception;

        $r2 = "";

        goto label2;

     label5:
        return $r1;

        catch java.lang.NullPointerException from label1 to label2 with label4;
    }

    private static java.io.File getExternalCacheDir(android.content.Context)
    {
        java.lang.Throwable $r6;
        android.content.Context $r0;
        java.lang.Object[] $r5;
        java.io.File $r1, $r2, $r3;
        java.lang.String $r4;
        boolean $z0;

        $r0 := @parameter0: android.content.Context;

        $r1 = new java.io.File;

        $r2 = new java.io.File;

        $r3 = staticinvoke <android.os.Environment: java.io.File getExternalStorageDirectory()>();

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, "Android");

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, "data");

        $r2 = new java.io.File;

        $r3 = new java.io.File;

        $r4 = virtualinvoke $r0.<android.content.Context: java.lang.String getPackageName()>();

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, $r4);

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, "cache");

        $z0 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label5;

        $z0 = virtualinvoke $r2.<java.io.File: boolean mkdirs()>();

        if $z0 != 0 goto label1;

        $r5 = newarray (java.lang.Object)[0];

        staticinvoke <com.nostra13.universalimageloader.utils.L: void w(java.lang.String,java.lang.Object[])>("Unable to create external cache directory", $r5);

        return null;

     label1:
        $r1 = new java.io.File;

     label2:
        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, ".nomedia");

        virtualinvoke $r1.<java.io.File: boolean createNewFile()>();

     label3:
        return $r2;

     label4:
        $r6 := @caughtexception;

        $r5 = newarray (java.lang.Object)[0];

        staticinvoke <com.nostra13.universalimageloader.utils.L: void i(java.lang.String,java.lang.Object[])>("Can\'t create \".nomedia\" file in application external cache directory", $r5);

     label5:
        return $r2;

        catch java.io.IOException from label2 to label3 with label4;
    }

    public static java.io.File getIndividualCacheDirectory(android.content.Context)
    {
        android.content.Context $r0;
        java.io.File $r1, $r2;
        boolean $z0;

        $r0 := @parameter0: android.content.Context;

        $r2 = staticinvoke <com.nostra13.universalimageloader.utils.StorageUtils: java.io.File getCacheDirectory(android.content.Context)>($r0);

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, "uil-images");

        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r1.<java.io.File: boolean mkdir()>();

        if $z0 != 0 goto label1;

        return $r2;

     label1:
        return $r1;
    }

    public static java.io.File getOwnCacheDirectory(android.content.Context, java.lang.String)
    {
        android.content.Context $r0;
        java.lang.String $r1, $r3, $r4;
        java.io.File $r2, $r5;
        boolean $z0;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: java.lang.String;

        $r2 = null;

        $r3 = "mounted";

        $r4 = staticinvoke <android.os.Environment: java.lang.String getExternalStorageState()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label1;

        $z0 = staticinvoke <com.nostra13.universalimageloader.utils.StorageUtils: boolean hasExternalStoragePermission(android.content.Context)>($r0);

        if $z0 == 0 goto label1;

        $r2 = new java.io.File;

        $r5 = staticinvoke <android.os.Environment: java.io.File getExternalStorageDirectory()>();

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, $r1);

     label1:
        if $r2 == null goto label2;

        $z0 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label3;

        $z0 = virtualinvoke $r2.<java.io.File: boolean mkdirs()>();

        if $z0 != 0 goto label3;

     label2:
        $r2 = virtualinvoke $r0.<android.content.Context: java.io.File getCacheDir()>();

     label3:
        return $r2;
    }

    private static boolean hasExternalStoragePermission(android.content.Context)
    {
        int $i0;
        android.content.Context $r0;

        $r0 := @parameter0: android.content.Context;

        $i0 = virtualinvoke $r0.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.WRITE_EXTERNAL_STORAGE");

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static void <clinit>()
    {
        <com.nostra13.universalimageloader.utils.StorageUtils: java.lang.String INDIVIDUAL_DIR_NAME> = "uil-images";

        <com.nostra13.universalimageloader.utils.StorageUtils: java.lang.String EXTERNAL_STORAGE_PERMISSION> = "android.permission.WRITE_EXTERNAL_STORAGE";

        return;
    }
}
