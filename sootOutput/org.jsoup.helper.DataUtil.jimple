public class org.jsoup.helper.DataUtil extends java.lang.Object
{
    private static final int bufferSize;
    private static final java.util.regex.Pattern charsetPattern;
    static final java.lang.String defaultCharset;

    static void <clinit>()
    {
        java.util.regex.Pattern $r0;

        <org.jsoup.helper.DataUtil: java.lang.String defaultCharset> = "UTF-8";

        <org.jsoup.helper.DataUtil: int bufferSize> = 131072;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(?i)\\bcharset=\\s*\"?([^\\s;\"]*)");

        <org.jsoup.helper.DataUtil: java.util.regex.Pattern charsetPattern> = $r0;

        return;
    }

    private void <init>()
    {
        org.jsoup.helper.DataUtil r0;

        r0 := @this: org.jsoup.helper.DataUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static java.lang.String getCharsetFromContentType(java.lang.String)
    {
        java.util.regex.Matcher $r2;
        java.util.Locale $r3;
        java.lang.String $r0;
        java.util.regex.Pattern $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        if $r0 != null goto label1;

        return null;

     label1:
        $r1 = <org.jsoup.helper.DataUtil: java.util.regex.Pattern charsetPattern>;

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r0);

        $z0 = virtualinvoke $r2.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label2;

        $r0 = virtualinvoke $r2.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String trim()>();

        $z0 = staticinvoke <java.nio.charset.Charset: boolean isSupported(java.lang.String)>($r0);

        if $z0 != 0 goto label3;

        $r3 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r3);

        $z0 = staticinvoke <java.nio.charset.Charset: boolean isSupported(java.lang.String)>($r0);

        if $z0 != 0 goto label3;

     label2:
        return null;

     label3:
        return $r0;
    }

    public static org.jsoup.nodes.Document load(java.io.File, java.lang.String, java.lang.String) throws java.io.IOException
    {
        java.lang.Throwable $r8;
        java.io.FileInputStream r3, r4;
        java.io.File $r0;
        java.nio.ByteBuffer $r5;
        org.jsoup.parser.Parser $r6;
        org.jsoup.nodes.Document $r7;
        java.lang.String $r1, $r2;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        r4 = null;

     label1:
        r3 = new java.io.FileInputStream;

        specialinvoke r3.<java.io.FileInputStream: void <init>(java.io.File)>($r0);

     label2:
        $r5 = staticinvoke <org.jsoup.helper.DataUtil: java.nio.ByteBuffer readToByteBuffer(java.io.InputStream)>(r3);

        $r6 = staticinvoke <org.jsoup.parser.Parser: org.jsoup.parser.Parser htmlParser()>();

        $r7 = staticinvoke <org.jsoup.helper.DataUtil: org.jsoup.nodes.Document parseByteData(java.nio.ByteBuffer,java.lang.String,java.lang.String,org.jsoup.parser.Parser)>($r5, $r1, $r2, $r6);

     label3:
        if r3 == null goto label8;

        virtualinvoke r3.<java.io.FileInputStream: void close()>();

        return $r7;

     label4:
        $r8 := @caughtexception;

     label5:
        if r4 == null goto label6;

        virtualinvoke r4.<java.io.FileInputStream: void close()>();

     label6:
        throw $r8;

     label7:
        $r8 := @caughtexception;

        r4 = r3;

        goto label5;

     label8:
        return $r7;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label7;
    }

    public static org.jsoup.nodes.Document load(java.io.InputStream, java.lang.String, java.lang.String) throws java.io.IOException
    {
        org.jsoup.nodes.Document $r5;
        java.lang.String $r1, $r2;
        java.nio.ByteBuffer $r3;
        org.jsoup.parser.Parser $r4;
        java.io.InputStream $r0;

        $r0 := @parameter0: java.io.InputStream;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r3 = staticinvoke <org.jsoup.helper.DataUtil: java.nio.ByteBuffer readToByteBuffer(java.io.InputStream)>($r0);

        $r4 = staticinvoke <org.jsoup.parser.Parser: org.jsoup.parser.Parser htmlParser()>();

        $r5 = staticinvoke <org.jsoup.helper.DataUtil: org.jsoup.nodes.Document parseByteData(java.nio.ByteBuffer,java.lang.String,java.lang.String,org.jsoup.parser.Parser)>($r3, $r1, $r2, $r4);

        return $r5;
    }

    public static org.jsoup.nodes.Document load(java.io.InputStream, java.lang.String, java.lang.String, org.jsoup.parser.Parser) throws java.io.IOException
    {
        org.jsoup.nodes.Document $r5;
        java.lang.String $r1, $r2;
        org.jsoup.parser.Parser $r3;
        java.nio.ByteBuffer $r4;
        java.io.InputStream $r0;

        $r0 := @parameter0: java.io.InputStream;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: org.jsoup.parser.Parser;

        $r4 = staticinvoke <org.jsoup.helper.DataUtil: java.nio.ByteBuffer readToByteBuffer(java.io.InputStream)>($r0);

        $r5 = staticinvoke <org.jsoup.helper.DataUtil: org.jsoup.nodes.Document parseByteData(java.nio.ByteBuffer,java.lang.String,java.lang.String,org.jsoup.parser.Parser)>($r4, $r1, $r2, $r3);

        return $r5;
    }

    static org.jsoup.nodes.Document parseByteData(java.nio.ByteBuffer, java.lang.String, java.lang.String, org.jsoup.parser.Parser)
    {
        java.nio.ByteBuffer $r0;
        org.jsoup.parser.Parser $r2;
        java.nio.charset.Charset $r5;
        org.jsoup.nodes.Document$OutputSettings $r12;
        org.jsoup.nodes.Element $r11;
        int $i0, $i2;
        java.lang.String $r1, $r3, $r7, r8;
        boolean $z0;
        java.nio.CharBuffer $r6;
        char $c1;
        org.jsoup.nodes.Document r4, $r9;
        org.jsoup.select.Elements $r10;

        $r0 := @parameter0: java.nio.ByteBuffer;

        $r3 := @parameter1: java.lang.String;

        $r1 := @parameter2: java.lang.String;

        $r2 := @parameter3: org.jsoup.parser.Parser;

        r4 = null;

        if $r3 != null goto label5;

        $r5 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-8");

        $r6 = virtualinvoke $r5.<java.nio.charset.Charset: java.nio.CharBuffer decode(java.nio.ByteBuffer)>($r0);

        $r7 = virtualinvoke $r6.<java.nio.CharBuffer: java.lang.String toString()>();

        r8 = $r7;

        $r9 = virtualinvoke $r2.<org.jsoup.parser.Parser: org.jsoup.nodes.Document parseInput(java.lang.String,java.lang.String)>($r7, $r1);

        r4 = $r9;

        $r10 = virtualinvoke $r9.<org.jsoup.nodes.Document: org.jsoup.select.Elements select(java.lang.String)>("meta[http-equiv=content-type], meta[charset]");

        $r11 = virtualinvoke $r10.<org.jsoup.select.Elements: org.jsoup.nodes.Element first()>();

        if $r11 == null goto label2;

        $z0 = virtualinvoke $r11.<org.jsoup.nodes.Element: boolean hasAttr(java.lang.String)>("http-equiv");

        if $z0 == 0 goto label4;

        $r7 = virtualinvoke $r11.<org.jsoup.nodes.Element: java.lang.String attr(java.lang.String)>("content");

        $r7 = staticinvoke <org.jsoup.helper.DataUtil: java.lang.String getCharsetFromContentType(java.lang.String)>($r7);

     label1:
        if $r7 == null goto label2;

        $i0 = virtualinvoke $r7.<java.lang.String: int length()>();

        if $i0 == 0 goto label2;

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("UTF-8");

        if $z0 != 0 goto label2;

        $r3 = $r7;

        virtualinvoke $r0.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

        $r5 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>($r7);

        $r6 = virtualinvoke $r5.<java.nio.charset.Charset: java.nio.CharBuffer decode(java.nio.ByteBuffer)>($r0);

        r8 = virtualinvoke $r6.<java.nio.CharBuffer: java.lang.String toString()>();

        r4 = null;

     label2:
        if r4 != null goto label6;

        $i0 = virtualinvoke r8.<java.lang.String: int length()>();

        if $i0 <= 0 goto label3;

        $c1 = virtualinvoke r8.<java.lang.String: char charAt(int)>(0);

        $i0 = (int) $c1;

        $i2 = 65279;

        if $i0 != $i2 goto label3;

        r8 = virtualinvoke r8.<java.lang.String: java.lang.String substring(int)>(1);

     label3:
        r4 = virtualinvoke $r2.<org.jsoup.parser.Parser: org.jsoup.nodes.Document parseInput(java.lang.String,java.lang.String)>(r8, $r1);

        $r12 = virtualinvoke r4.<org.jsoup.nodes.Document: org.jsoup.nodes.Document$OutputSettings outputSettings()>();

        virtualinvoke $r12.<org.jsoup.nodes.Document$OutputSettings: org.jsoup.nodes.Document$OutputSettings charset(java.lang.String)>($r3);

        return r4;

     label4:
        $r7 = virtualinvoke $r11.<org.jsoup.nodes.Element: java.lang.String attr(java.lang.String)>("charset");

        goto label1;

     label5:
        staticinvoke <org.jsoup.helper.Validate: void notEmpty(java.lang.String,java.lang.String)>($r3, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");

        $r5 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>($r3);

        $r6 = virtualinvoke $r5.<java.nio.charset.Charset: java.nio.CharBuffer decode(java.nio.ByteBuffer)>($r0);

        r8 = virtualinvoke $r6.<java.nio.CharBuffer: java.lang.String toString()>();

        goto label2;

     label6:
        return r4;
    }

    static java.nio.ByteBuffer readToByteBuffer(java.io.InputStream) throws java.io.IOException
    {
        java.nio.ByteBuffer $r1;
        java.io.InputStream $r0;

        $r0 := @parameter0: java.io.InputStream;

        $r1 = staticinvoke <org.jsoup.helper.DataUtil: java.nio.ByteBuffer readToByteBuffer(java.io.InputStream,int)>($r0, 0);

        return $r1;
    }

    static java.nio.ByteBuffer readToByteBuffer(java.io.InputStream, int) throws java.io.IOException
    {
        byte[] r1;
        java.io.ByteArrayOutputStream r2, $r4;
        java.nio.ByteBuffer $r3;
        int $i0, $i1, $i2;
        java.io.InputStream $r0;
        boolean $z0;

        $r0 := @parameter0: java.io.InputStream;

        $i0 := @parameter1: int;

        if $i0 < 0 goto label5;

        $z0 = 1;

     label1:
        staticinvoke <org.jsoup.helper.Validate: void isTrue(boolean,java.lang.String)>($z0, "maxSize must be 0 (unlimited) or larger");

        if $i0 <= 0 goto label6;

        $z0 = 1;

     label2:
        r1 = newarray (byte)[131072];

        $r4 = new java.io.ByteArrayOutputStream;

        r2 = $r4;

        specialinvoke $r4.<java.io.ByteArrayOutputStream: void <init>(int)>(131072);

     label3:
        $i1 = virtualinvoke $r0.<java.io.InputStream: int read(byte[])>(r1);

        $i2 = -1;

        if $i1 != $i2 goto label7;

     label4:
        r1 = virtualinvoke r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r1);

        return $r3;

     label5:
        $z0 = 0;

        goto label1;

     label6:
        $z0 = 0;

        goto label2;

     label7:
        if $z0 == 0 goto label9;

        if $i1 <= $i0 goto label8;

        virtualinvoke r2.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r1, 0, $i0);

        goto label4;

     label8:
        $i0 = $i0 - $i1;

     label9:
        virtualinvoke r2.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r1, 0, $i1);

        goto label3;
    }
}
