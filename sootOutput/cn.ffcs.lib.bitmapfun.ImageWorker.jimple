public abstract class cn.ffcs.lib.bitmapfun.ImageWorker extends java.lang.Object
{
    private static final int FADE_IN_TIME;
    private static final java.lang.String TAG;
    protected android.content.Context mContext;
    private boolean mExitTasksEarly;
    private boolean mFadeInBitmap;
    private cn.ffcs.lib.bitmapfun.ImageCache mImageCache;
    protected cn.ffcs.lib.bitmapfun.ImageWorker$ImageWorkerAdapter mImageWorkerAdapter;
    private android.graphics.Bitmap mLoadingBitmap;

    protected void <init>(android.content.Context)
    {
        android.content.Context $r1;
        cn.ffcs.lib.bitmapfun.ImageWorker r0;

        r0 := @this: cn.ffcs.lib.bitmapfun.ImageWorker;

        $r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<cn.ffcs.lib.bitmapfun.ImageWorker: boolean mFadeInBitmap> = 1;

        r0.<cn.ffcs.lib.bitmapfun.ImageWorker: boolean mExitTasksEarly> = 0;

        r0.<cn.ffcs.lib.bitmapfun.ImageWorker: android.content.Context mContext> = $r1;

        return;
    }

    static cn.ffcs.lib.bitmapfun.ImageCache access$100(cn.ffcs.lib.bitmapfun.ImageWorker)
    {
        cn.ffcs.lib.bitmapfun.ImageWorker $r0;
        cn.ffcs.lib.bitmapfun.ImageCache r1;

        $r0 := @parameter0: cn.ffcs.lib.bitmapfun.ImageWorker;

        r1 = $r0.<cn.ffcs.lib.bitmapfun.ImageWorker: cn.ffcs.lib.bitmapfun.ImageCache mImageCache>;

        return r1;
    }

    static boolean access$200(cn.ffcs.lib.bitmapfun.ImageWorker)
    {
        cn.ffcs.lib.bitmapfun.ImageWorker $r0;
        boolean z0;

        $r0 := @parameter0: cn.ffcs.lib.bitmapfun.ImageWorker;

        z0 = $r0.<cn.ffcs.lib.bitmapfun.ImageWorker: boolean mExitTasksEarly>;

        return z0;
    }

    static void access$300(cn.ffcs.lib.bitmapfun.ImageWorker, android.widget.ImageView, android.graphics.Bitmap)
    {
        android.widget.ImageView $r1;
        cn.ffcs.lib.bitmapfun.ImageWorker $r0;
        android.graphics.Bitmap $r2;

        $r0 := @parameter0: cn.ffcs.lib.bitmapfun.ImageWorker;

        $r1 := @parameter1: android.widget.ImageView;

        $r2 := @parameter2: android.graphics.Bitmap;

        specialinvoke $r0.<cn.ffcs.lib.bitmapfun.ImageWorker: void setImageBitmap(android.widget.ImageView,android.graphics.Bitmap)>($r1, $r2);

        return;
    }

    static cn.ffcs.lib.bitmapfun.ImageWorker$BitmapWorkerTask access$400(android.widget.ImageView)
    {
        android.widget.ImageView $r0;
        cn.ffcs.lib.bitmapfun.ImageWorker$BitmapWorkerTask $r1;

        $r0 := @parameter0: android.widget.ImageView;

        $r1 = staticinvoke <cn.ffcs.lib.bitmapfun.ImageWorker: cn.ffcs.lib.bitmapfun.ImageWorker$BitmapWorkerTask getBitmapWorkerTask(android.widget.ImageView)>($r0);

        return $r1;
    }

    public static boolean cancelPotentialWork(java.lang.Object, android.widget.ImageView)
    {
        cn.ffcs.lib.bitmapfun.ImageWorker$BitmapWorkerTask $r2;
        android.widget.ImageView $r1;
        java.lang.Object $r0, $r3;
        boolean $z0;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: android.widget.ImageView;

        $r2 = staticinvoke <cn.ffcs.lib.bitmapfun.ImageWorker: cn.ffcs.lib.bitmapfun.ImageWorker$BitmapWorkerTask getBitmapWorkerTask(android.widget.ImageView)>($r1);

        if $r2 == null goto label3;

        $r3 = staticinvoke <cn.ffcs.lib.bitmapfun.ImageWorker$BitmapWorkerTask: java.lang.Object access$000(cn.ffcs.lib.bitmapfun.ImageWorker$BitmapWorkerTask)>($r2);

        if $r3 == null goto label1;

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r0);

        if $z0 != 0 goto label2;

     label1:
        virtualinvoke $r2.<cn.ffcs.lib.bitmapfun.ImageWorker$BitmapWorkerTask: boolean cancel(boolean)>(1);

        return 1;

     label2:
        return 0;

     label3:
        return 1;
    }

    public static void cancelWork(android.widget.ImageView)
    {
        android.widget.ImageView $r0;
        cn.ffcs.lib.bitmapfun.ImageWorker$BitmapWorkerTask $r1;

        $r0 := @parameter0: android.widget.ImageView;

        $r1 = staticinvoke <cn.ffcs.lib.bitmapfun.ImageWorker: cn.ffcs.lib.bitmapfun.ImageWorker$BitmapWorkerTask getBitmapWorkerTask(android.widget.ImageView)>($r0);

        if $r1 == null goto label1;

        virtualinvoke $r1.<cn.ffcs.lib.bitmapfun.ImageWorker$BitmapWorkerTask: boolean cancel(boolean)>(1);

     label1:
        return;
    }

    private static cn.ffcs.lib.bitmapfun.ImageWorker$BitmapWorkerTask getBitmapWorkerTask(android.widget.ImageView)
    {
        cn.ffcs.lib.bitmapfun.ImageWorker$AsyncDrawable r2;
        cn.ffcs.lib.bitmapfun.ImageWorker$BitmapWorkerTask $r3;
        android.widget.ImageView $r0;
        android.graphics.drawable.Drawable $r1;
        boolean $z0;

        $r0 := @parameter0: android.widget.ImageView;

        if $r0 == null goto label1;

        $r1 = virtualinvoke $r0.<android.widget.ImageView: android.graphics.drawable.Drawable getDrawable()>();

        $z0 = $r1 instanceof cn.ffcs.lib.bitmapfun.ImageWorker$AsyncDrawable;

        if $z0 == 0 goto label1;

        r2 = (cn.ffcs.lib.bitmapfun.ImageWorker$AsyncDrawable) $r1;

        $r3 = virtualinvoke r2.<cn.ffcs.lib.bitmapfun.ImageWorker$AsyncDrawable: cn.ffcs.lib.bitmapfun.ImageWorker$BitmapWorkerTask getBitmapWorkerTask()>();

        return $r3;

     label1:
        return null;
    }

    private void setImageBitmap(android.widget.ImageView, android.graphics.Bitmap)
    {
        android.content.Context $r5;
        java.lang.Object[] $r4;
        android.widget.ImageView $r1;
        android.graphics.drawable.ColorDrawable $r7;
        android.graphics.drawable.BitmapDrawable $r8;
        android.graphics.drawable.TransitionDrawable r3, $r9;
        cn.ffcs.lib.bitmapfun.ImageWorker r0;
        android.graphics.Bitmap $r2;
        android.graphics.drawable.Drawable[] $r10;
        boolean $z0;
        android.content.res.Resources $r6;

        r0 := @this: cn.ffcs.lib.bitmapfun.ImageWorker;

        $r1 := @parameter0: android.widget.ImageView;

        $r2 := @parameter1: android.graphics.Bitmap;

        $z0 = r0.<cn.ffcs.lib.bitmapfun.ImageWorker: boolean mFadeInBitmap>;

        if $z0 == 0 goto label1;

        $r9 = new android.graphics.drawable.TransitionDrawable;

        r3 = $r9;

        $r4 = newarray (android.graphics.drawable.Drawable)[2];

        $r7 = new android.graphics.drawable.ColorDrawable;

        specialinvoke $r7.<android.graphics.drawable.ColorDrawable: void <init>(int)>(17170445);

        $r4[0] = $r7;

        $r8 = new android.graphics.drawable.BitmapDrawable;

        $r5 = r0.<cn.ffcs.lib.bitmapfun.ImageWorker: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: android.content.res.Resources getResources()>();

        specialinvoke $r8.<android.graphics.drawable.BitmapDrawable: void <init>(android.content.res.Resources,android.graphics.Bitmap)>($r6, $r2);

        $r4[1] = $r8;

        $r10 = (android.graphics.drawable.Drawable[]) $r4;

        specialinvoke $r9.<android.graphics.drawable.TransitionDrawable: void <init>(android.graphics.drawable.Drawable[])>($r10);

        $r8 = new android.graphics.drawable.BitmapDrawable;

        $r5 = r0.<cn.ffcs.lib.bitmapfun.ImageWorker: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: android.content.res.Resources getResources()>();

        $r2 = r0.<cn.ffcs.lib.bitmapfun.ImageWorker: android.graphics.Bitmap mLoadingBitmap>;

        specialinvoke $r8.<android.graphics.drawable.BitmapDrawable: void <init>(android.content.res.Resources,android.graphics.Bitmap)>($r6, $r2);

        virtualinvoke $r1.<android.widget.ImageView: void setBackground(android.graphics.drawable.Drawable)>($r8);

        virtualinvoke $r1.<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>(r3);

        virtualinvoke r3.<android.graphics.drawable.TransitionDrawable: void startTransition(int)>(200);

        return;

     label1:
        virtualinvoke $r1.<android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>($r2);

        return;
    }

    public cn.ffcs.lib.bitmapfun.ImageWorker$ImageWorkerAdapter getAdapter()
    {
        cn.ffcs.lib.bitmapfun.ImageWorker r0;
        cn.ffcs.lib.bitmapfun.ImageWorker$ImageWorkerAdapter r1;

        r0 := @this: cn.ffcs.lib.bitmapfun.ImageWorker;

        r1 = r0.<cn.ffcs.lib.bitmapfun.ImageWorker: cn.ffcs.lib.bitmapfun.ImageWorker$ImageWorkerAdapter mImageWorkerAdapter>;

        return r1;
    }

    public cn.ffcs.lib.bitmapfun.ImageCache getImageCache()
    {
        cn.ffcs.lib.bitmapfun.ImageWorker r0;
        cn.ffcs.lib.bitmapfun.ImageCache r1;

        r0 := @this: cn.ffcs.lib.bitmapfun.ImageWorker;

        r1 = r0.<cn.ffcs.lib.bitmapfun.ImageWorker: cn.ffcs.lib.bitmapfun.ImageCache mImageCache>;

        return r1;
    }

    public void loadImage(int, android.widget.ImageView)
    {
        cn.ffcs.lib.bitmapfun.ImageWorker r0;
        int $i0;
        android.widget.ImageView $r1;
        java.lang.Object $r2;
        java.lang.NullPointerException $r4;
        cn.ffcs.lib.bitmapfun.ImageWorker$ImageWorkerAdapter $r3;

        r0 := @this: cn.ffcs.lib.bitmapfun.ImageWorker;

        $i0 := @parameter0: int;

        $r1 := @parameter1: android.widget.ImageView;

        $r3 = r0.<cn.ffcs.lib.bitmapfun.ImageWorker: cn.ffcs.lib.bitmapfun.ImageWorker$ImageWorkerAdapter mImageWorkerAdapter>;

        if $r3 == null goto label1;

        $r3 = r0.<cn.ffcs.lib.bitmapfun.ImageWorker: cn.ffcs.lib.bitmapfun.ImageWorker$ImageWorkerAdapter mImageWorkerAdapter>;

        $r2 = virtualinvoke $r3.<cn.ffcs.lib.bitmapfun.ImageWorker$ImageWorkerAdapter: java.lang.Object getItem(int)>($i0);

        virtualinvoke r0.<cn.ffcs.lib.bitmapfun.ImageWorker: void loadImage(java.lang.Object,android.widget.ImageView)>($r2, $r1);

        return;

     label1:
        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("Data not set, must call setAdapter() first.");

        throw $r4;
    }

    public void loadImage(java.lang.Object, android.widget.ImageView)
    {
        android.content.Context $r8;
        java.lang.Object[] $r10;
        android.widget.ImageView $r2;
        cn.ffcs.lib.bitmapfun.ImageWorker$AsyncDrawable r3;
        cn.ffcs.lib.bitmapfun.ImageWorker$BitmapWorkerTask r4;
        cn.ffcs.lib.bitmapfun.ImageWorker r0;
        cn.ffcs.lib.bitmapfun.ImageCache $r6;
        android.graphics.Bitmap r5;
        java.lang.Object $r1;
        java.lang.String $r7;
        boolean $z0;
        android.content.res.Resources $r9;

        r0 := @this: cn.ffcs.lib.bitmapfun.ImageWorker;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: android.widget.ImageView;

        r5 = null;

        $r6 = r0.<cn.ffcs.lib.bitmapfun.ImageWorker: cn.ffcs.lib.bitmapfun.ImageCache mImageCache>;

        if $r6 == null goto label1;

        $r6 = r0.<cn.ffcs.lib.bitmapfun.ImageWorker: cn.ffcs.lib.bitmapfun.ImageCache mImageCache>;

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        r5 = virtualinvoke $r6.<cn.ffcs.lib.bitmapfun.ImageCache: android.graphics.Bitmap getBitmapFromMemCache(java.lang.String)>($r7);

     label1:
        if r5 == null goto label2;

        virtualinvoke $r2.<android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>(r5);

        return;

     label2:
        $z0 = staticinvoke <cn.ffcs.lib.bitmapfun.ImageWorker: boolean cancelPotentialWork(java.lang.Object,android.widget.ImageView)>($r1, $r2);

        if $z0 == 0 goto label3;

        r4 = new cn.ffcs.lib.bitmapfun.ImageWorker$BitmapWorkerTask;

        specialinvoke r4.<cn.ffcs.lib.bitmapfun.ImageWorker$BitmapWorkerTask: void <init>(cn.ffcs.lib.bitmapfun.ImageWorker,android.widget.ImageView)>(r0, $r2);

        r3 = new cn.ffcs.lib.bitmapfun.ImageWorker$AsyncDrawable;

        $r8 = r0.<cn.ffcs.lib.bitmapfun.ImageWorker: android.content.Context mContext>;

        $r9 = virtualinvoke $r8.<android.content.Context: android.content.res.Resources getResources()>();

        r5 = r0.<cn.ffcs.lib.bitmapfun.ImageWorker: android.graphics.Bitmap mLoadingBitmap>;

        specialinvoke r3.<cn.ffcs.lib.bitmapfun.ImageWorker$AsyncDrawable: void <init>(android.content.res.Resources,android.graphics.Bitmap,cn.ffcs.lib.bitmapfun.ImageWorker$BitmapWorkerTask)>($r9, r5, r4);

        virtualinvoke $r2.<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>(r3);

        $r10 = newarray (java.lang.Object)[1];

        $r10[0] = $r1;

        virtualinvoke r4.<cn.ffcs.lib.bitmapfun.ImageWorker$BitmapWorkerTask: cn.ffcs.lib.bitmapfun.AsyncTask execute(java.lang.Object[])>($r10);

     label3:
        return;
    }

    protected abstract android.graphics.Bitmap processBitmap(java.lang.Object);

    public void setAdapter(cn.ffcs.lib.bitmapfun.ImageWorker$ImageWorkerAdapter)
    {
        cn.ffcs.lib.bitmapfun.ImageWorker r0;
        cn.ffcs.lib.bitmapfun.ImageWorker$ImageWorkerAdapter $r1;

        r0 := @this: cn.ffcs.lib.bitmapfun.ImageWorker;

        $r1 := @parameter0: cn.ffcs.lib.bitmapfun.ImageWorker$ImageWorkerAdapter;

        r0.<cn.ffcs.lib.bitmapfun.ImageWorker: cn.ffcs.lib.bitmapfun.ImageWorker$ImageWorkerAdapter mImageWorkerAdapter> = $r1;

        return;
    }

    public void setExitTasksEarly(boolean)
    {
        cn.ffcs.lib.bitmapfun.ImageWorker r0;
        boolean $z0;

        r0 := @this: cn.ffcs.lib.bitmapfun.ImageWorker;

        $z0 := @parameter0: boolean;

        r0.<cn.ffcs.lib.bitmapfun.ImageWorker: boolean mExitTasksEarly> = $z0;

        return;
    }

    public void setImageCache(cn.ffcs.lib.bitmapfun.ImageCache)
    {
        cn.ffcs.lib.bitmapfun.ImageWorker r0;
        cn.ffcs.lib.bitmapfun.ImageCache $r1;

        r0 := @this: cn.ffcs.lib.bitmapfun.ImageWorker;

        $r1 := @parameter0: cn.ffcs.lib.bitmapfun.ImageCache;

        r0.<cn.ffcs.lib.bitmapfun.ImageWorker: cn.ffcs.lib.bitmapfun.ImageCache mImageCache> = $r1;

        return;
    }

    public void setImageFadeIn(boolean)
    {
        cn.ffcs.lib.bitmapfun.ImageWorker r0;
        boolean $z0;

        r0 := @this: cn.ffcs.lib.bitmapfun.ImageWorker;

        $z0 := @parameter0: boolean;

        r0.<cn.ffcs.lib.bitmapfun.ImageWorker: boolean mFadeInBitmap> = $z0;

        return;
    }

    public void setLoadingImage(int)
    {
        android.content.Context $r1;
        cn.ffcs.lib.bitmapfun.ImageWorker r0;
        android.graphics.Bitmap $r3;
        int $i0;
        android.content.res.Resources $r2;

        r0 := @this: cn.ffcs.lib.bitmapfun.ImageWorker;

        $i0 := @parameter0: int;

        $r1 = r0.<cn.ffcs.lib.bitmapfun.ImageWorker: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $r3 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeResource(android.content.res.Resources,int)>($r2, $i0);

        r0.<cn.ffcs.lib.bitmapfun.ImageWorker: android.graphics.Bitmap mLoadingBitmap> = $r3;

        return;
    }

    public void setLoadingImage(android.graphics.Bitmap)
    {
        cn.ffcs.lib.bitmapfun.ImageWorker r0;
        android.graphics.Bitmap $r1;

        r0 := @this: cn.ffcs.lib.bitmapfun.ImageWorker;

        $r1 := @parameter0: android.graphics.Bitmap;

        r0.<cn.ffcs.lib.bitmapfun.ImageWorker: android.graphics.Bitmap mLoadingBitmap> = $r1;

        return;
    }

    public static void <clinit>()
    {
        <cn.ffcs.lib.bitmapfun.ImageWorker: java.lang.String TAG> = "ImageWorker";

        <cn.ffcs.lib.bitmapfun.ImageWorker: int FADE_IN_TIME> = 200;

        return;
    }
}
