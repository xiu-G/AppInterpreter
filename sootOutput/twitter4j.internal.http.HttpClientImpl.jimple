public class twitter4j.internal.http.HttpClientImpl extends twitter4j.internal.http.HttpClientBase implements java.io.Serializable, twitter4j.internal.http.HttpResponseCode
{
    private static final java.util.Map instanceMap;
    private static final twitter4j.internal.logging.Logger logger;
    private static final long serialVersionUID;

    static void <clinit>()
    {
        twitter4j.internal.logging.Logger $r0;
        twitter4j.conf.Configuration $r1;
        java.util.HashMap $r2;
        boolean $z0;

        <twitter4j.internal.http.HttpClientImpl: long serialVersionUID> = -8819171414069621503L;

        $r0 = staticinvoke <twitter4j.internal.logging.Logger: twitter4j.internal.logging.Logger getLogger(java.lang.Class)>(class "Ltwitter4j/internal/http/HttpClientImpl;");

        <twitter4j.internal.http.HttpClientImpl: twitter4j.internal.logging.Logger logger> = $r0;

        $r1 = staticinvoke <twitter4j.conf.ConfigurationContext: twitter4j.conf.Configuration getInstance()>();

        $z0 = interfaceinvoke $r1.<twitter4j.conf.Configuration: boolean isDalvik()>();

        if $z0 == 0 goto label1;

        staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>("http.keepAlive", "false");

     label1:
        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>(int)>(1);

        <twitter4j.internal.http.HttpClientImpl: java.util.Map instanceMap> = $r2;

        return;
    }

    public void <init>()
    {
        twitter4j.conf.Configuration $r1;
        twitter4j.internal.http.HttpClientImpl r0;

        r0 := @this: twitter4j.internal.http.HttpClientImpl;

        $r1 = staticinvoke <twitter4j.conf.ConfigurationContext: twitter4j.conf.Configuration getInstance()>();

        specialinvoke r0.<twitter4j.internal.http.HttpClientBase: void <init>(twitter4j.internal.http.HttpClientConfiguration)>($r1);

        return;
    }

    public void <init>(twitter4j.internal.http.HttpClientConfiguration)
    {
        twitter4j.internal.http.HttpClientConfiguration $r1;
        twitter4j.internal.http.HttpClientImpl r0;

        r0 := @this: twitter4j.internal.http.HttpClientImpl;

        $r1 := @parameter0: twitter4j.internal.http.HttpClientConfiguration;

        specialinvoke r0.<twitter4j.internal.http.HttpClientBase: void <init>(twitter4j.internal.http.HttpClientConfiguration)>($r1);

        return;
    }

    public static twitter4j.internal.http.HttpClient getInstance(twitter4j.internal.http.HttpClientConfiguration)
    {
        java.util.Map $r1;
        twitter4j.internal.http.HttpClientConfiguration $r0;
        twitter4j.internal.http.HttpClient $r3;
        java.lang.Object $r2;
        twitter4j.internal.http.HttpClientImpl $r4;

        $r0 := @parameter0: twitter4j.internal.http.HttpClientConfiguration;

        $r1 = <twitter4j.internal.http.HttpClientImpl: java.util.Map instanceMap>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        $r3 = (twitter4j.internal.http.HttpClient) $r2;

        if $r3 != null goto label1;

        $r4 = new twitter4j.internal.http.HttpClientImpl;

        specialinvoke $r4.<twitter4j.internal.http.HttpClientImpl: void <init>(twitter4j.internal.http.HttpClientConfiguration)>($r0);

        $r1 = <twitter4j.internal.http.HttpClientImpl: java.util.Map instanceMap>;

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r0, $r4);

        return $r4;

     label1:
        return $r3;
    }

    private void setHeaders(twitter4j.internal.http.HttpRequest, java.net.HttpURLConnection)
    {
        java.net.HttpURLConnection $r2;
        twitter4j.internal.logging.Logger $r3;
        twitter4j.auth.Authorization $r8;
        java.util.Iterator $r11;
        twitter4j.internal.http.RequestMethod $r5;
        java.util.Set $r10;
        twitter4j.internal.http.HttpRequest $r1;
        java.util.Map $r9;
        java.lang.StringBuilder $r4;
        java.lang.Object $r12;
        java.lang.String $r6, $r7;
        twitter4j.internal.http.HttpClientImpl r0;
        boolean $z0;

        r0 := @this: twitter4j.internal.http.HttpClientImpl;

        $r1 := @parameter0: twitter4j.internal.http.HttpRequest;

        $r2 := @parameter1: java.net.HttpURLConnection;

        $r3 = <twitter4j.internal.http.HttpClientImpl: twitter4j.internal.logging.Logger logger>;

        $z0 = virtualinvoke $r3.<twitter4j.internal.logging.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r3 = <twitter4j.internal.http.HttpClientImpl: twitter4j.internal.logging.Logger logger>;

        virtualinvoke $r3.<twitter4j.internal.logging.Logger: void debug(java.lang.String)>("Request: ");

        $r3 = <twitter4j.internal.http.HttpClientImpl: twitter4j.internal.logging.Logger logger>;

        $r4 = new java.lang.StringBuilder;

        $r5 = virtualinvoke $r1.<twitter4j.internal.http.HttpRequest: twitter4j.internal.http.RequestMethod getMethod()>();

        $r6 = virtualinvoke $r5.<twitter4j.internal.http.RequestMethod: java.lang.String name()>();

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r6);

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>($r6);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = virtualinvoke $r1.<twitter4j.internal.http.HttpRequest: java.lang.String getURL()>();

        virtualinvoke $r3.<twitter4j.internal.logging.Logger: void debug(java.lang.String,java.lang.String)>($r6, $r7);

     label1:
        $r8 = virtualinvoke $r1.<twitter4j.internal.http.HttpRequest: twitter4j.auth.Authorization getAuthorization()>();

        if $r8 == null goto label3;

        $r8 = virtualinvoke $r1.<twitter4j.internal.http.HttpRequest: twitter4j.auth.Authorization getAuthorization()>();

        $r6 = interfaceinvoke $r8.<twitter4j.auth.Authorization: java.lang.String getAuthorizationHeader(twitter4j.internal.http.HttpRequest)>($r1);

        if $r6 == null goto label3;

        $r3 = <twitter4j.internal.http.HttpClientImpl: twitter4j.internal.logging.Logger logger>;

        $z0 = virtualinvoke $r3.<twitter4j.internal.logging.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label2;

        $r3 = <twitter4j.internal.http.HttpClientImpl: twitter4j.internal.logging.Logger logger>;

        $r7 = staticinvoke <twitter4j.internal.util.z_T4JInternalStringUtil: java.lang.String maskString(java.lang.String)>($r6);

        virtualinvoke $r3.<twitter4j.internal.logging.Logger: void debug(java.lang.String,java.lang.String)>("Authorization: ", $r7);

     label2:
        virtualinvoke $r2.<java.net.HttpURLConnection: void addRequestProperty(java.lang.String,java.lang.String)>("Authorization", $r6);

     label3:
        $r9 = virtualinvoke $r1.<twitter4j.internal.http.HttpRequest: java.util.Map getRequestHeaders()>();

        if $r9 == null goto label6;

        $r9 = virtualinvoke $r1.<twitter4j.internal.http.HttpRequest: java.util.Map getRequestHeaders()>();

        $r10 = interfaceinvoke $r9.<java.util.Map: java.util.Set keySet()>();

        $r11 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label5;

        return;

     label5:
        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.lang.String) $r12;

        $r9 = virtualinvoke $r1.<twitter4j.internal.http.HttpRequest: java.util.Map getRequestHeaders()>();

        $r12 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

        $r7 = (java.lang.String) $r12;

        virtualinvoke $r2.<java.net.HttpURLConnection: void addRequestProperty(java.lang.String,java.lang.String)>($r6, $r7);

        $r3 = <twitter4j.internal.http.HttpClientImpl: twitter4j.internal.logging.Logger logger>;

        $r4 = new java.lang.StringBuilder;

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r6);

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>($r7);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r9 = virtualinvoke $r1.<twitter4j.internal.http.HttpRequest: java.util.Map getRequestHeaders()>();

        $r12 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

        $r6 = (java.lang.String) $r12;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<twitter4j.internal.logging.Logger: void debug(java.lang.String)>($r6);

        goto label4;

     label6:
        return;
    }

    public twitter4j.internal.http.HttpResponse get(java.lang.String)
    {
        twitter4j.internal.http.HttpResponse $r3;
        twitter4j.internal.http.RequestMethod $r2;
        twitter4j.internal.http.HttpRequest $r4;
        java.lang.String $r1;
        twitter4j.internal.http.HttpClientImpl r0;

        r0 := @this: twitter4j.internal.http.HttpClientImpl;

        $r1 := @parameter0: java.lang.String;

        $r4 = new twitter4j.internal.http.HttpRequest;

        $r2 = <twitter4j.internal.http.RequestMethod: twitter4j.internal.http.RequestMethod GET>;

        specialinvoke $r4.<twitter4j.internal.http.HttpRequest: void <init>(twitter4j.internal.http.RequestMethod,java.lang.String,twitter4j.internal.http.HttpParameter[],twitter4j.auth.Authorization,java.util.Map)>($r2, $r1, null, null, null);

        $r3 = virtualinvoke r0.<twitter4j.internal.http.HttpClientImpl: twitter4j.internal.http.HttpResponse request(twitter4j.internal.http.HttpRequest)>($r4);

        return $r3;
    }

    protected java.net.HttpURLConnection getConnection(java.lang.String)
    {
        twitter4j.internal.logging.Logger $r4;
        java.net.HttpURLConnection $r12;
        java.net.URL $r10;
        java.net.InetSocketAddress $r9;
        java.net.Proxy$Type $r8;
        java.net.Proxy $r7;
        twitter4j.internal.http.HttpClientImpl$1 $r6;
        java.net.URLConnection $r11;
        twitter4j.internal.http.HttpClientConfiguration $r2;
        int $i0;
        java.lang.StringBuilder $r5;
        java.lang.String $r1, $r3;
        twitter4j.internal.http.HttpClientImpl r0;
        boolean $z0;

        r0 := @this: twitter4j.internal.http.HttpClientImpl;

        $r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<twitter4j.internal.http.HttpClientImpl: boolean isProxyConfigured()>();

        if $z0 == 0 goto label7;

        $r2 = r0.<twitter4j.internal.http.HttpClientImpl: twitter4j.internal.http.HttpClientConfiguration CONF>;

        $r3 = interfaceinvoke $r2.<twitter4j.internal.http.HttpClientConfiguration: java.lang.String getHttpProxyUser()>();

        if $r3 == null goto label2;

        $r2 = r0.<twitter4j.internal.http.HttpClientImpl: twitter4j.internal.http.HttpClientConfiguration CONF>;

        $r3 = interfaceinvoke $r2.<twitter4j.internal.http.HttpClientConfiguration: java.lang.String getHttpProxyUser()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 != 0 goto label2;

        $r4 = <twitter4j.internal.http.HttpClientImpl: twitter4j.internal.logging.Logger logger>;

        $z0 = virtualinvoke $r4.<twitter4j.internal.logging.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r4 = <twitter4j.internal.http.HttpClientImpl: twitter4j.internal.logging.Logger logger>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Proxy AuthUser: ");

        $r2 = r0.<twitter4j.internal.http.HttpClientImpl: twitter4j.internal.http.HttpClientConfiguration CONF>;

        $r3 = interfaceinvoke $r2.<twitter4j.internal.http.HttpClientConfiguration: java.lang.String getHttpProxyUser()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<twitter4j.internal.logging.Logger: void debug(java.lang.String)>($r3);

        $r4 = <twitter4j.internal.http.HttpClientImpl: twitter4j.internal.logging.Logger logger>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Proxy AuthPassword: ");

        $r2 = r0.<twitter4j.internal.http.HttpClientImpl: twitter4j.internal.http.HttpClientConfiguration CONF>;

        $r3 = interfaceinvoke $r2.<twitter4j.internal.http.HttpClientConfiguration: java.lang.String getHttpProxyPassword()>();

        $r3 = staticinvoke <twitter4j.internal.util.z_T4JInternalStringUtil: java.lang.String maskString(java.lang.String)>($r3);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<twitter4j.internal.logging.Logger: void debug(java.lang.String)>($r3);

     label1:
        $r6 = new twitter4j.internal.http.HttpClientImpl$1;

        specialinvoke $r6.<twitter4j.internal.http.HttpClientImpl$1: void <init>(twitter4j.internal.http.HttpClientImpl)>(r0);

        staticinvoke <java.net.Authenticator: void setDefault(java.net.Authenticator)>($r6);

     label2:
        $r7 = new java.net.Proxy;

        $r8 = <java.net.Proxy$Type: java.net.Proxy$Type HTTP>;

        $r2 = r0.<twitter4j.internal.http.HttpClientImpl: twitter4j.internal.http.HttpClientConfiguration CONF>;

        $r3 = interfaceinvoke $r2.<twitter4j.internal.http.HttpClientConfiguration: java.lang.String getHttpProxyHost()>();

        $r2 = r0.<twitter4j.internal.http.HttpClientImpl: twitter4j.internal.http.HttpClientConfiguration CONF>;

        $i0 = interfaceinvoke $r2.<twitter4j.internal.http.HttpClientConfiguration: int getHttpProxyPort()>();

        $r9 = staticinvoke <java.net.InetSocketAddress: java.net.InetSocketAddress createUnresolved(java.lang.String,int)>($r3, $i0);

        specialinvoke $r7.<java.net.Proxy: void <init>(java.net.Proxy$Type,java.net.SocketAddress)>($r8, $r9);

        $r4 = <twitter4j.internal.http.HttpClientImpl: twitter4j.internal.logging.Logger logger>;

        $z0 = virtualinvoke $r4.<twitter4j.internal.logging.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label3;

        $r4 = <twitter4j.internal.http.HttpClientImpl: twitter4j.internal.logging.Logger logger>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Opening proxied connection(");

        $r2 = r0.<twitter4j.internal.http.HttpClientImpl: twitter4j.internal.http.HttpClientConfiguration CONF>;

        $r3 = interfaceinvoke $r2.<twitter4j.internal.http.HttpClientConfiguration: java.lang.String getHttpProxyHost()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r2 = r0.<twitter4j.internal.http.HttpClientImpl: twitter4j.internal.http.HttpClientConfiguration CONF>;

        $i0 = interfaceinvoke $r2.<twitter4j.internal.http.HttpClientConfiguration: int getHttpProxyPort()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r3 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<twitter4j.internal.logging.Logger: void debug(java.lang.String)>($r3);

     label3:
        $r10 = new java.net.URL;

        specialinvoke $r10.<java.net.URL: void <init>(java.lang.String)>($r1);

        $r11 = virtualinvoke $r10.<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>($r7);

        $r12 = (java.net.HttpURLConnection) $r11;

     label4:
        $r2 = r0.<twitter4j.internal.http.HttpClientImpl: twitter4j.internal.http.HttpClientConfiguration CONF>;

        $i0 = interfaceinvoke $r2.<twitter4j.internal.http.HttpClientConfiguration: int getHttpConnectionTimeout()>();

        if $i0 <= 0 goto label5;

        $r2 = r0.<twitter4j.internal.http.HttpClientImpl: twitter4j.internal.http.HttpClientConfiguration CONF>;

        $i0 = interfaceinvoke $r2.<twitter4j.internal.http.HttpClientConfiguration: int getHttpConnectionTimeout()>();

        virtualinvoke $r12.<java.net.HttpURLConnection: void setConnectTimeout(int)>($i0);

     label5:
        $r2 = r0.<twitter4j.internal.http.HttpClientImpl: twitter4j.internal.http.HttpClientConfiguration CONF>;

        $i0 = interfaceinvoke $r2.<twitter4j.internal.http.HttpClientConfiguration: int getHttpReadTimeout()>();

        if $i0 <= 0 goto label6;

        $r2 = r0.<twitter4j.internal.http.HttpClientImpl: twitter4j.internal.http.HttpClientConfiguration CONF>;

        $i0 = interfaceinvoke $r2.<twitter4j.internal.http.HttpClientConfiguration: int getHttpReadTimeout()>();

        virtualinvoke $r12.<java.net.HttpURLConnection: void setReadTimeout(int)>($i0);

     label6:
        virtualinvoke $r12.<java.net.HttpURLConnection: void setInstanceFollowRedirects(boolean)>(0);

        return $r12;

     label7:
        $r10 = new java.net.URL;

        specialinvoke $r10.<java.net.URL: void <init>(java.lang.String)>($r1);

        $r11 = virtualinvoke $r10.<java.net.URL: java.net.URLConnection openConnection()>();

        $r12 = (java.net.HttpURLConnection) $r11;

        goto label4;
    }

    public twitter4j.internal.http.HttpResponse post(java.lang.String, twitter4j.internal.http.HttpParameter[])
    {
        twitter4j.internal.http.HttpResponse $r4;
        twitter4j.internal.http.RequestMethod $r3;
        twitter4j.internal.http.HttpRequest $r5;
        java.lang.String $r1;
        twitter4j.internal.http.HttpParameter[] $r2;
        twitter4j.internal.http.HttpClientImpl r0;

        r0 := @this: twitter4j.internal.http.HttpClientImpl;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: twitter4j.internal.http.HttpParameter[];

        $r5 = new twitter4j.internal.http.HttpRequest;

        $r3 = <twitter4j.internal.http.RequestMethod: twitter4j.internal.http.RequestMethod POST>;

        specialinvoke $r5.<twitter4j.internal.http.HttpRequest: void <init>(twitter4j.internal.http.RequestMethod,java.lang.String,twitter4j.internal.http.HttpParameter[],twitter4j.auth.Authorization,java.util.Map)>($r3, $r1, $r2, null, null);

        $r4 = virtualinvoke r0.<twitter4j.internal.http.HttpClientImpl: twitter4j.internal.http.HttpResponse request(twitter4j.internal.http.HttpRequest)>($r5);

        return $r4;
    }

    public twitter4j.internal.http.HttpResponse request(twitter4j.internal.http.HttpRequest)
    {
        java.net.HttpURLConnection $r5;
        byte[] $r27;
        java.io.BufferedInputStream $r24, $r42;
        twitter4j.internal.http.HttpRequest $r1;
        twitter4j.internal.http.HttpResponseImpl $r3, $r14, $r40;
        java.io.DataOutputStream $r13, $r39;
        java.util.Map $r16;
        boolean $z0;
        twitter4j.internal.logging.Logger $r15;
        java.util.Set $r17;
        java.lang.Exception $r32, $r33, $r34;
        java.util.List $r29;
        java.lang.StringBuilder $r9, $r38;
        java.lang.Throwable $r20, $r21, $r28, $r35, $r36, $r37;
        twitter4j.internal.http.RequestMethod $r6, $r7;
        long $l3;
        int $i0, $i1, $i2, $i4, $i5, $i6, $i7;
        twitter4j.internal.http.HttpClientConfiguration $r2;
        twitter4j.TwitterException $r19, $r41;
        java.lang.String $r4, $r10, $r31;
        twitter4j.internal.http.HttpParameter[] $r8;
        twitter4j.internal.http.HttpClientImpl r0;
        java.io.OutputStream $r11, $r12;
        twitter4j.internal.http.HttpParameter $r22;
        java.util.Iterator $r18, $r30;
        java.io.IOException $r44;
        java.io.FileInputStream $r43;
        java.io.File $r23;
        java.lang.Object $r26;
        java.io.InputStream $r25;

        r0 := @this: twitter4j.internal.http.HttpClientImpl;

        $r1 := @parameter0: twitter4j.internal.http.HttpRequest;

        $r2 = r0.<twitter4j.internal.http.HttpClientImpl: twitter4j.internal.http.HttpClientConfiguration CONF>;

        $i0 = interfaceinvoke $r2.<twitter4j.internal.http.HttpClientConfiguration: int getHttpRetryCount()>();

        $i0 = $i0 + 1;

        $r3 = null;

        $i1 = 0;

     label001:
        if $i1 < $i0 goto label002;

        return $r3;

     label002:
        $i2 = -1;

     label003:
        $r4 = virtualinvoke $r1.<twitter4j.internal.http.HttpRequest: java.lang.String getURL()>();

        $r5 = virtualinvoke r0.<twitter4j.internal.http.HttpClientImpl: java.net.HttpURLConnection getConnection(java.lang.String)>($r4);

        virtualinvoke $r5.<java.net.HttpURLConnection: void setDoInput(boolean)>(1);

        specialinvoke r0.<twitter4j.internal.http.HttpClientImpl: void setHeaders(twitter4j.internal.http.HttpRequest,java.net.HttpURLConnection)>($r1, $r5);

        $r6 = virtualinvoke $r1.<twitter4j.internal.http.HttpRequest: twitter4j.internal.http.RequestMethod getMethod()>();

        $r4 = virtualinvoke $r6.<twitter4j.internal.http.RequestMethod: java.lang.String name()>();

        virtualinvoke $r5.<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>($r4);

        $r6 = virtualinvoke $r1.<twitter4j.internal.http.HttpRequest: twitter4j.internal.http.RequestMethod getMethod()>();

        $r7 = <twitter4j.internal.http.RequestMethod: twitter4j.internal.http.RequestMethod POST>;

     label004:
        if $r6 != $r7 goto label116;

     label005:
        $r8 = virtualinvoke $r1.<twitter4j.internal.http.HttpRequest: twitter4j.internal.http.HttpParameter[] getParameters()>();

        $z0 = staticinvoke <twitter4j.internal.http.HttpParameter: boolean containsFile(twitter4j.internal.http.HttpParameter[])>($r8);

     label006:
        if $z0 == 0 goto label078;

     label007:
        $r38 = new java.lang.StringBuilder;

     label008:
        $r9 = $r38;

     label009:
        specialinvoke $r38.<java.lang.StringBuilder: void <init>(java.lang.String)>("----Twitter4J-upload");

        $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3);

        $r4 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r38 = new java.lang.StringBuilder;

     label010:
        $r9 = $r38;

     label011:
        specialinvoke $r38.<java.lang.StringBuilder: void <init>(java.lang.String)>("multipart/form-data; boundary=");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>("Content-Type", $r10);

        $r38 = new java.lang.StringBuilder;

     label012:
        $r9 = $r38;

     label013:
        specialinvoke $r38.<java.lang.StringBuilder: void <init>(java.lang.String)>("--");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<java.net.HttpURLConnection: void setDoOutput(boolean)>(1);

        $r11 = virtualinvoke $r5.<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>();

     label014:
        $r12 = $r11;

     label015:
        $r39 = new java.io.DataOutputStream;

     label016:
        $r13 = $r39;

     label017:
        specialinvoke $r39.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r11);

        $r8 = virtualinvoke $r1.<twitter4j.internal.http.HttpRequest: twitter4j.internal.http.HttpParameter[] getParameters()>();

        $i4 = lengthof $r8;

     label018:
        $i5 = 0;

     label019:
        if $i5 < $i4 goto label045;

     label020:
        $r38 = new java.lang.StringBuilder;

     label021:
        $r9 = $r38;

     label022:
        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4);

        specialinvoke $r38.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("--\r\n");

        $r4 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<twitter4j.internal.http.HttpClientImpl: void write(java.io.DataOutputStream,java.lang.String)>($r13, $r4);

        virtualinvoke r0.<twitter4j.internal.http.HttpClientImpl: void write(java.io.DataOutputStream,java.lang.String)>($r13, "\r\n");

     label023:
        virtualinvoke $r12.<java.io.OutputStream: void flush()>();

        virtualinvoke $r12.<java.io.OutputStream: void close()>();

     label024:
        $r40 = new twitter4j.internal.http.HttpResponseImpl;

     label025:
        $r14 = $r40;

     label026:
        $r2 = r0.<twitter4j.internal.http.HttpClientImpl: twitter4j.internal.http.HttpClientConfiguration CONF>;

        specialinvoke $r40.<twitter4j.internal.http.HttpResponseImpl: void <init>(java.net.HttpURLConnection,twitter4j.internal.http.HttpClientConfiguration)>($r5, $r2);

     label027:
        $i4 = virtualinvoke $r5.<java.net.HttpURLConnection: int getResponseCode()>();

     label028:
        $i2 = $i4;

     label029:
        $r15 = <twitter4j.internal.http.HttpClientImpl: twitter4j.internal.logging.Logger logger>;

        $z0 = virtualinvoke $r15.<twitter4j.internal.logging.Logger: boolean isDebugEnabled()>();

     label030:
        if $z0 == 0 goto label034;

     label031:
        $r15 = <twitter4j.internal.http.HttpClientImpl: twitter4j.internal.logging.Logger logger>;

        virtualinvoke $r15.<twitter4j.internal.logging.Logger: void debug(java.lang.String)>("Response: ");

        $r16 = virtualinvoke $r5.<java.net.HttpURLConnection: java.util.Map getHeaderFields()>();

        $r17 = interfaceinvoke $r16.<java.util.Map: java.util.Set keySet()>();

        $r18 = interfaceinvoke $r17.<java.util.Set: java.util.Iterator iterator()>();

     label032:
        $z0 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

     label033:
        if $z0 != 0 goto label082;

     label034:
        if $i4 < 200 goto label035;

        if $i4 == 302 goto label093;

        if 300 > $i4 goto label093;

     label035:
        if $i4 == 420 goto label038;

        if $i4 == 400 goto label038;

        if $i4 < 500 goto label038;

     label036:
        $r2 = r0.<twitter4j.internal.http.HttpClientImpl: twitter4j.internal.http.HttpClientConfiguration CONF>;

        $i4 = interfaceinvoke $r2.<twitter4j.internal.http.HttpClientConfiguration: int getHttpRetryCount()>();

     label037:
        if $i1 != $i4 goto label096;

     label038:
        $r41 = new twitter4j.TwitterException;

     label039:
        $r19 = $r41;

     label040:
        $r4 = virtualinvoke $r14.<twitter4j.internal.http.HttpResponse: java.lang.String asString()>();

        specialinvoke $r41.<twitter4j.TwitterException: void <init>(java.lang.String,twitter4j.internal.http.HttpResponse)>($r4, $r14);

        throw $r19;

     label041:
        $r20 := @caughtexception;

        $r11 = $r12;

     label042:
        virtualinvoke $r11.<java.io.OutputStream: void close()>();

     label043:
        throw $r20;

     label044:
        $r21 := @caughtexception;

        $r2 = r0.<twitter4j.internal.http.HttpClientImpl: twitter4j.internal.http.HttpClientConfiguration CONF>;

        $i4 = interfaceinvoke $r2.<twitter4j.internal.http.HttpClientConfiguration: int getHttpRetryCount()>();

        if $i1 != $i4 goto label117;

        $r41 = new twitter4j.TwitterException;

        $r44 = (java.io.IOException) $r21;

        $r4 = virtualinvoke $r44.<java.io.IOException: java.lang.String getMessage()>();

        $r32 = (java.lang.Exception) $r21;

        specialinvoke $r41.<twitter4j.TwitterException: void <init>(java.lang.String,java.lang.Exception,int)>($r4, $r32, $i2);

        throw $r41;

     label045:
        $r22 = $r8[$i5];

        $z0 = virtualinvoke $r22.<twitter4j.internal.http.HttpParameter: boolean isFile()>();

     label046:
        if $z0 == 0 goto label072;

     label047:
        $r38 = new java.lang.StringBuilder;

     label048:
        $r9 = $r38;

     label049:
        $r10 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4);

        specialinvoke $r38.<java.lang.StringBuilder: void <init>(java.lang.String)>($r10);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r\n");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<twitter4j.internal.http.HttpClientImpl: void write(java.io.DataOutputStream,java.lang.String)>($r13, $r10);

        $r38 = new java.lang.StringBuilder;

     label050:
        $r9 = $r38;

     label051:
        specialinvoke $r38.<java.lang.StringBuilder: void <init>(java.lang.String)>("Content-Disposition: form-data; name=\"");

        $r10 = virtualinvoke $r22.<twitter4j.internal.http.HttpParameter: java.lang.String getName()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"; filename=\"");

        $r23 = virtualinvoke $r22.<twitter4j.internal.http.HttpParameter: java.io.File getFile()>();

        $r10 = virtualinvoke $r23.<java.io.File: java.lang.String getName()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"\r\n");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<twitter4j.internal.http.HttpClientImpl: void write(java.io.DataOutputStream,java.lang.String)>($r13, $r10);

        $r38 = new java.lang.StringBuilder;

     label052:
        $r9 = $r38;

     label053:
        specialinvoke $r38.<java.lang.StringBuilder: void <init>(java.lang.String)>("Content-Type: ");

        $r10 = virtualinvoke $r22.<twitter4j.internal.http.HttpParameter: java.lang.String getContentType()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r\n\r\n");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<twitter4j.internal.http.HttpClientImpl: void write(java.io.DataOutputStream,java.lang.String)>($r13, $r10);

        $r42 = new java.io.BufferedInputStream;

     label054:
        $r24 = $r42;

     label055:
        $z0 = virtualinvoke $r22.<twitter4j.internal.http.HttpParameter: boolean hasFileBody()>();

     label056:
        if $z0 == 0 goto label065;

     label057:
        $r25 = virtualinvoke $r22.<twitter4j.internal.http.HttpParameter: java.io.InputStream getFileBody()>();

     label058:
        $r26 = $r25;

     label059:
        $r25 = (java.io.InputStream) $r26;

        specialinvoke $r42.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r25);

     label060:
        $r27 = newarray (byte)[1024];

     label061:
        $i6 = virtualinvoke $r24.<java.io.BufferedInputStream: int read(byte[])>($r27);

     label062:
        $i7 = -1;

        if $i6 != $i7 goto label070;

     label063:
        virtualinvoke r0.<twitter4j.internal.http.HttpClientImpl: void write(java.io.DataOutputStream,java.lang.String)>($r13, "\r\n");

        virtualinvoke $r24.<java.io.BufferedInputStream: void close()>();

     label064:
        $i5 = $i5 + 1;

        goto label019;

     label065:
        $r43 = new java.io.FileInputStream;

     label066:
        $r26 = $r43;

     label067:
        $r23 = virtualinvoke $r22.<twitter4j.internal.http.HttpParameter: java.io.File getFile()>();

        specialinvoke $r43.<java.io.FileInputStream: void <init>(java.io.File)>($r23);

     label068:
        goto label059;

     label069:
        $r28 := @caughtexception;

        $r14 = $r3;

        $r20 = $r28;

        $r11 = $r12;

        $i2 = -1;

        goto label042;

     label070:
        virtualinvoke $r13.<java.io.DataOutputStream: void write(byte[],int,int)>($r27, 0, $i6);

     label071:
        goto label061;

     label072:
        $r38 = new java.lang.StringBuilder;

     label073:
        $r9 = $r38;

     label074:
        $r10 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4);

        specialinvoke $r38.<java.lang.StringBuilder: void <init>(java.lang.String)>($r10);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r\n");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<twitter4j.internal.http.HttpClientImpl: void write(java.io.DataOutputStream,java.lang.String)>($r13, $r10);

        $r38 = new java.lang.StringBuilder;

     label075:
        $r9 = $r38;

     label076:
        specialinvoke $r38.<java.lang.StringBuilder: void <init>(java.lang.String)>("Content-Disposition: form-data; name=\"");

        $r10 = virtualinvoke $r22.<twitter4j.internal.http.HttpParameter: java.lang.String getName()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"\r\n");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<twitter4j.internal.http.HttpClientImpl: void write(java.io.DataOutputStream,java.lang.String)>($r13, $r10);

        virtualinvoke r0.<twitter4j.internal.http.HttpClientImpl: void write(java.io.DataOutputStream,java.lang.String)>($r13, "Content-Type: text/plain; charset=UTF-8\r\n\r\n");

        $r15 = <twitter4j.internal.http.HttpClientImpl: twitter4j.internal.logging.Logger logger>;

        $r10 = virtualinvoke $r22.<twitter4j.internal.http.HttpParameter: java.lang.String getValue()>();

        virtualinvoke $r15.<twitter4j.internal.logging.Logger: void debug(java.lang.String)>($r10);

        $r10 = virtualinvoke $r22.<twitter4j.internal.http.HttpParameter: java.lang.String getValue()>();

        $r27 = virtualinvoke $r10.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        virtualinvoke $r13.<java.io.DataOutputStream: void write(byte[])>($r27);

        virtualinvoke r0.<twitter4j.internal.http.HttpClientImpl: void write(java.io.DataOutputStream,java.lang.String)>($r13, "\r\n");

     label077:
        goto label064;

     label078:
        virtualinvoke $r5.<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>("Content-Type", "application/x-www-form-urlencoded");

        $r8 = virtualinvoke $r1.<twitter4j.internal.http.HttpRequest: twitter4j.internal.http.HttpParameter[] getParameters()>();

        $r4 = staticinvoke <twitter4j.internal.http.HttpParameter: java.lang.String encodeParameters(twitter4j.internal.http.HttpParameter[])>($r8);

        $r15 = <twitter4j.internal.http.HttpClientImpl: twitter4j.internal.logging.Logger logger>;

        virtualinvoke $r15.<twitter4j.internal.logging.Logger: void debug(java.lang.String,java.lang.String)>("Post Params: ", $r4);

        $r27 = virtualinvoke $r4.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        $i4 = lengthof $r27;

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i4);

        virtualinvoke $r5.<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>("Content-Length", $r4);

        virtualinvoke $r5.<java.net.HttpURLConnection: void setDoOutput(boolean)>(1);

        $r11 = virtualinvoke $r5.<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>();

     label079:
        $r12 = $r11;

     label080:
        virtualinvoke $r11.<java.io.OutputStream: void write(byte[])>($r27);

     label081:
        goto label023;

     label082:
        $r26 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.lang.String) $r26;

        $r26 = interfaceinvoke $r16.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        $r29 = (java.util.List) $r26;

        $r30 = interfaceinvoke $r29.<java.util.List: java.util.Iterator iterator()>();

     label083:
        $z0 = interfaceinvoke $r30.<java.util.Iterator: boolean hasNext()>();

     label084:
        if $z0 == 0 goto label032;

     label085:
        $r26 = interfaceinvoke $r30.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (java.lang.String) $r26;

     label086:
        if $r4 == null goto label091;

     label087:
        $r15 = <twitter4j.internal.http.HttpClientImpl: twitter4j.internal.logging.Logger logger>;

        $r38 = new java.lang.StringBuilder;

     label088:
        $r9 = $r38;

     label089:
        $r31 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4);

        specialinvoke $r38.<java.lang.StringBuilder: void <init>(java.lang.String)>($r31);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r15.<twitter4j.internal.logging.Logger: void debug(java.lang.String)>($r10);

     label090:
        goto label083;

     label091:
        $r15 = <twitter4j.internal.http.HttpClientImpl: twitter4j.internal.logging.Logger logger>;

        virtualinvoke $r15.<twitter4j.internal.logging.Logger: void debug(java.lang.String)>($r10);

     label092:
        goto label083;

     label093:
        virtualinvoke $r12.<java.io.OutputStream: void close()>();

     label094:
        return $r14;

     label095:
        $r32 := @caughtexception;

        return $r14;

     label096:
        virtualinvoke $r12.<java.io.OutputStream: void close()>();

     label097:
        $r3 = $r14;

     label098:
        $r15 = <twitter4j.internal.http.HttpClientImpl: twitter4j.internal.logging.Logger logger>;

     label099:
        $z0 = virtualinvoke $r15.<twitter4j.internal.logging.Logger: boolean isDebugEnabled()>();

     label100:
        if $z0 == 0 goto label102;

        if $r3 == null goto label102;

     label101:
        virtualinvoke $r3.<twitter4j.internal.http.HttpResponse: java.lang.String asString()>();

     label102:
        $r15 = <twitter4j.internal.http.HttpClientImpl: twitter4j.internal.logging.Logger logger>;

        $r38 = new java.lang.StringBuilder;

        $r9 = $r38;

     label103:
        specialinvoke $r38.<java.lang.StringBuilder: void <init>(java.lang.String)>("Sleeping ");

     label104:
        $r2 = r0.<twitter4j.internal.http.HttpClientImpl: twitter4j.internal.http.HttpClientConfiguration CONF>;

     label105:
        $i2 = interfaceinvoke $r2.<twitter4j.internal.http.HttpClientConfiguration: int getHttpRetryIntervalSeconds()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" seconds until the next retry.");

        $r4 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r15.<twitter4j.internal.logging.Logger: void debug(java.lang.String)>($r4);

     label106:
        $r2 = r0.<twitter4j.internal.http.HttpClientImpl: twitter4j.internal.http.HttpClientConfiguration CONF>;

     label107:
        $i2 = interfaceinvoke $r2.<twitter4j.internal.http.HttpClientConfiguration: int getHttpRetryIntervalSeconds()>();

     label108:
        $i2 = $i2 * 1000;

        $l3 = (long) $i2;

     label109:
        staticinvoke <java.lang.Thread: void sleep(long)>($l3);

     label110:
        $i1 = $i1 + 1;

        goto label001;

     label111:
        $r33 := @caughtexception;

        $r3 = $r14;

        goto label098;

     label112:
        $r34 := @caughtexception;

        goto label043;

     label113:
        $r35 := @caughtexception;

        goto label110;

     label114:
        $r36 := @caughtexception;

        $r14 = $r3;

        $r20 = $r36;

        $r11 = null;

        $i2 = -1;

        goto label042;

     label115:
        $r37 := @caughtexception;

        $i2 = -1;

        $r14 = $r3;

        $r20 = $r37;

        $r11 = $r12;

        goto label042;

     label116:
        $r12 = null;

        goto label024;

     label117:
        $r3 = $r14;

        goto label098;

        catch java.lang.Throwable from label003 to label004 with label114;
        catch java.lang.Throwable from label005 to label006 with label114;
        catch java.lang.Throwable from label007 to label008 with label114;
        catch java.lang.Throwable from label009 to label010 with label114;
        catch java.lang.Throwable from label011 to label012 with label114;
        catch java.lang.Throwable from label013 to label014 with label114;
        catch java.lang.Throwable from label015 to label016 with label069;
        catch java.lang.Throwable from label017 to label018 with label069;
        catch java.lang.Throwable from label020 to label021 with label069;
        catch java.lang.Throwable from label022 to label024 with label069;
        catch java.lang.Throwable from label024 to label025 with label115;
        catch java.lang.Throwable from label026 to label027 with label115;
        catch java.lang.Throwable from label027 to label028 with label041;
        catch java.lang.Throwable from label029 to label030 with label041;
        catch java.lang.Throwable from label031 to label033 with label041;
        catch java.lang.Throwable from label036 to label037 with label041;
        catch java.lang.Throwable from label038 to label039 with label041;
        catch java.lang.Throwable from label040 to label041 with label041;
        catch java.lang.Exception from label042 to label043 with label112;
        catch java.io.IOException from label043 to label044 with label044;
        catch java.lang.Throwable from label045 to label046 with label069;
        catch java.lang.Throwable from label047 to label048 with label069;
        catch java.lang.Throwable from label049 to label050 with label069;
        catch java.lang.Throwable from label051 to label052 with label069;
        catch java.lang.Throwable from label053 to label054 with label069;
        catch java.lang.Throwable from label055 to label056 with label069;
        catch java.lang.Throwable from label057 to label058 with label069;
        catch java.lang.Throwable from label059 to label060 with label069;
        catch java.lang.Throwable from label061 to label062 with label069;
        catch java.lang.Throwable from label063 to label064 with label069;
        catch java.lang.Throwable from label065 to label066 with label069;
        catch java.lang.Throwable from label067 to label068 with label069;
        catch java.lang.Throwable from label070 to label071 with label069;
        catch java.lang.Throwable from label072 to label073 with label069;
        catch java.lang.Throwable from label074 to label075 with label069;
        catch java.lang.Throwable from label076 to label077 with label069;
        catch java.lang.Throwable from label078 to label079 with label114;
        catch java.lang.Throwable from label080 to label081 with label069;
        catch java.lang.Throwable from label082 to label084 with label041;
        catch java.lang.Throwable from label085 to label086 with label041;
        catch java.lang.Throwable from label087 to label088 with label041;
        catch java.lang.Throwable from label089 to label090 with label041;
        catch java.lang.Throwable from label091 to label092 with label041;
        catch java.lang.Exception from label093 to label094 with label095;
        catch java.lang.Exception from label096 to label097 with label111;
        catch java.lang.InterruptedException from label099 to label100 with label113;
        catch java.lang.InterruptedException from label101 to label102 with label113;
        catch java.lang.InterruptedException from label103 to label104 with label113;
        catch java.lang.InterruptedException from label105 to label106 with label113;
        catch java.lang.InterruptedException from label107 to label108 with label113;
        catch java.lang.InterruptedException from label109 to label110 with label113;
    }
}
