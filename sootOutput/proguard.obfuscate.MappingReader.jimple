public class proguard.obfuscate.MappingReader extends java.lang.Object
{
    private final java.io.File mappingFile;

    public void <init>(java.io.File)
    {
        proguard.obfuscate.MappingReader r0;
        java.io.File $r1;

        r0 := @this: proguard.obfuscate.MappingReader;

        $r1 := @parameter0: java.io.File;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<proguard.obfuscate.MappingReader: java.io.File mappingFile> = $r1;

        return;
    }

    private java.lang.String processClassMapping(java.lang.String, proguard.obfuscate.MappingProcessor)
    {
        proguard.obfuscate.MappingReader r0;
        proguard.obfuscate.MappingProcessor $r2;
        int $i0, $i1;
        java.lang.String $r1, $r3;
        boolean $z0;

        r0 := @this: proguard.obfuscate.MappingReader;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: proguard.obfuscate.MappingProcessor;

        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(java.lang.String)>("->");

        if $i0 >= 0 goto label1;

        return null;

     label1:
        $i1 = $i0 + 2;

        $i1 = virtualinvoke $r1.<java.lang.String: int indexOf(int,int)>(58, $i1);

        if $i1 >= 0 goto label2;

        return null;

     label2:
        $r3 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String trim()>();

        $i0 = $i0 + 2;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>($i0, $i1);

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>();

        $z0 = interfaceinvoke $r2.<proguard.obfuscate.MappingProcessor: boolean processClassMapping(java.lang.String,java.lang.String)>($r3, $r1);

        if $z0 == 0 goto label3;

        return $r3;

     label3:
        return null;
    }

    private void processClassMemberMapping(java.lang.String, java.lang.String, proguard.obfuscate.MappingProcessor)
    {
        proguard.obfuscate.MappingReader r0;
        proguard.obfuscate.MappingProcessor $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.String $r1, $r2, $r4, $r5, $r6, $r7;

        r0 := @this: proguard.obfuscate.MappingReader;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: proguard.obfuscate.MappingProcessor;

        $i0 = virtualinvoke $r2.<java.lang.String: int indexOf(int)>(58);

        if $i0 >= 0 goto label03;

        $i1 = -1;

     label01:
        $i2 = $i1 + 2;

        $i3 = virtualinvoke $r2.<java.lang.String: int indexOf(int,int)>(32, $i2);

        $i2 = $i3 + 1;

        $i2 = virtualinvoke $r2.<java.lang.String: int indexOf(int,int)>(40, $i2);

        if $i2 >= 0 goto label04;

        $i4 = -1;

     label02:
        $i5 = staticinvoke <java.lang.Math: int max(int,int)>($i3, $i4);

        $i5 = $i5 + 1;

        $i5 = virtualinvoke $r2.<java.lang.String: int indexOf(java.lang.String,int)>("->", $i5);

        if $i3 < 0 goto label11;

        if $i5 >= 0 goto label05;

        return;

     label03:
        $i1 = $i0 + 1;

        $i1 = virtualinvoke $r2.<java.lang.String: int indexOf(int,int)>(58, $i1);

        goto label01;

     label04:
        $i4 = $i2 + 1;

        $i4 = virtualinvoke $r2.<java.lang.String: int indexOf(int,int)>(41, $i4);

        goto label02;

     label05:
        $i6 = $i1 + 1;

        $r4 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>($i6, $i3);

        $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String trim()>();

        $i3 = $i3 + 1;

        if $i2 < 0 goto label07;

        $i6 = $i2;

     label06:
        $r5 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>($i3, $i6);

        $r5 = virtualinvoke $r5.<java.lang.String: java.lang.String trim()>();

        $i3 = $i5 + 2;

        $r6 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>($i3);

        $r6 = virtualinvoke $r6.<java.lang.String: java.lang.String trim()>();

        $i3 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i3 <= 0 goto label11;

        $i3 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i3 <= 0 goto label11;

        $i3 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i3 <= 0 goto label11;

        if $i4 >= 0 goto label08;

        interfaceinvoke $r3.<proguard.obfuscate.MappingProcessor: void processFieldMapping(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r1, $r4, $r5, $r6);

        return;

     label07:
        $i6 = $i5;

        goto label06;

     label08:
        if $i1 <= 0 goto label10;

        $r7 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r7 = virtualinvoke $r7.<java.lang.String: java.lang.String trim()>();

        $i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r7);

        $i0 = $i0 + 1;

        $r7 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>($i0, $i1);

        $r7 = virtualinvoke $r7.<java.lang.String: java.lang.String trim()>();

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r7);

     label09:
        $i1 = $i2 + 1;

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>($i1, $i4);

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        interfaceinvoke $r3.<proguard.obfuscate.MappingProcessor: void processMethodMapping(java.lang.String,int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r1, $i3, $i0, $r4, $r5, $r2, $r6);

        return;

     label10:
        $i0 = 0;

        $i3 = 0;

        goto label09;

     label11:
        return;
    }

    public void pump(proguard.obfuscate.MappingProcessor) throws java.io.IOException
    {
        proguard.obfuscate.MappingReader r0;
        java.lang.Throwable $r6, $r9, $r10, $r11;
        java.lang.StringBuffer $r8, $r15;
        java.lang.String $r4, $r5;
        boolean $z0;
        java.io.LineNumberReader $r2, $r14;
        java.io.IOException $r7, $r16, $r17;
        java.io.File $r3;
        proguard.obfuscate.MappingProcessor $r1;
        java.io.FileReader $r12;
        java.io.BufferedReader $r13;

        r0 := @this: proguard.obfuscate.MappingReader;

        $r1 := @parameter0: proguard.obfuscate.MappingProcessor;

        $r14 = new java.io.LineNumberReader;

        $r2 = $r14;

        $r13 = new java.io.BufferedReader;

        $r12 = new java.io.FileReader;

        $r3 = r0.<proguard.obfuscate.MappingReader: java.io.File mappingFile>;

        specialinvoke $r12.<java.io.FileReader: void <init>(java.io.File)>($r3);

        specialinvoke $r13.<java.io.BufferedReader: void <init>(java.io.Reader)>($r12);

        specialinvoke $r14.<java.io.LineNumberReader: void <init>(java.io.Reader)>($r13);

        $r4 = null;

     label01:
        $r5 = virtualinvoke $r2.<java.io.LineNumberReader: java.lang.String readLine()>();

     label02:
        if $r5 != null goto label05;

     label03:
        virtualinvoke $r2.<java.io.LineNumberReader: void close()>();

     label04:
        return;

     label05:
        $r5 = virtualinvoke $r5.<java.lang.String: java.lang.String trim()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean endsWith(java.lang.String)>(":");

     label06:
        if $z0 == 0 goto label09;

     label07:
        $r4 = specialinvoke r0.<proguard.obfuscate.MappingReader: java.lang.String processClassMapping(java.lang.String,proguard.obfuscate.MappingProcessor)>($r5, $r1);

     label08:
        goto label01;

     label09:
        if $r4 == null goto label01;

     label10:
        specialinvoke r0.<proguard.obfuscate.MappingReader: void processClassMemberMapping(java.lang.String,java.lang.String,proguard.obfuscate.MappingProcessor)>($r4, $r5, $r1);

     label11:
        goto label01;

     label12:
        $r6 := @caughtexception;

     label13:
        $r16 = new java.io.IOException;

     label14:
        $r7 = $r16;

     label15:
        $r15 = new java.lang.StringBuffer;

     label16:
        $r8 = $r15;

     label17:
        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Can\'t process mapping file (");

        $r17 = (java.io.IOException) $r6;

        $r4 = virtualinvoke $r17.<java.io.IOException: java.lang.String getMessage()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r4 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r16.<java.io.IOException: void <init>(java.lang.String)>($r4);

        throw $r7;

     label18:
        $r9 := @caughtexception;

     label19:
        virtualinvoke $r2.<java.io.LineNumberReader: void close()>();

     label20:
        throw $r9;

     label21:
        $r10 := @caughtexception;

        return;

     label22:
        $r11 := @caughtexception;

        goto label20;

        catch java.io.IOException from label01 to label02 with label12;
        catch java.lang.Throwable from label01 to label02 with label18;
        catch java.io.IOException from label03 to label04 with label21;
        catch java.io.IOException from label05 to label06 with label12;
        catch java.io.IOException from label07 to label08 with label12;
        catch java.io.IOException from label10 to label11 with label12;
        catch java.lang.Throwable from label05 to label06 with label18;
        catch java.lang.Throwable from label07 to label08 with label18;
        catch java.lang.Throwable from label10 to label11 with label18;
        catch java.lang.Throwable from label13 to label14 with label18;
        catch java.lang.Throwable from label15 to label16 with label18;
        catch java.lang.Throwable from label17 to label18 with label18;
        catch java.io.IOException from label19 to label20 with label22;
    }
}
