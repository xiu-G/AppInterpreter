public class proguard.optimize.evaluation.LivenessAnalyzer extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.attribute.visitor.AttributeVisitor, proguard.classfile.instruction.visitor.InstructionVisitor, proguard.classfile.attribute.visitor.ExceptionInfoVisitor
{
    private static final boolean DEBUG;
    private static final int MAX_VARIABLES_SIZE;
    private long alive;
    private boolean checkAgain;
    private long[] isAliveAfter;
    private long[] isAliveBefore;
    private long[] isCategory2;
    private final proguard.optimize.evaluation.PartialEvaluator partialEvaluator;

    public void <init>()
    {
        proguard.optimize.evaluation.PartialEvaluator $r1;
        proguard.optimize.evaluation.LivenessAnalyzer r0;

        r0 := @this: proguard.optimize.evaluation.LivenessAnalyzer;

        $r1 = new proguard.optimize.evaluation.PartialEvaluator;

        specialinvoke $r1.<proguard.optimize.evaluation.PartialEvaluator: void <init>()>();

        specialinvoke r0.<proguard.optimize.evaluation.LivenessAnalyzer: void <init>(proguard.optimize.evaluation.PartialEvaluator)>($r1);

        return;
    }

    public void <init>(proguard.optimize.evaluation.PartialEvaluator)
    {
        proguard.optimize.evaluation.PartialEvaluator $r1;
        long[] $r2;
        proguard.optimize.evaluation.LivenessAnalyzer r0;

        r0 := @this: proguard.optimize.evaluation.LivenessAnalyzer;

        $r1 := @parameter0: proguard.optimize.evaluation.PartialEvaluator;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        $r2 = newarray (long)[1024];

        r0.<proguard.optimize.evaluation.LivenessAnalyzer: long[] isAliveBefore> = $r2;

        $r2 = newarray (long)[1024];

        r0.<proguard.optimize.evaluation.LivenessAnalyzer: long[] isAliveAfter> = $r2;

        $r2 = newarray (long)[1024];

        r0.<proguard.optimize.evaluation.LivenessAnalyzer: long[] isCategory2> = $r2;

        r0.<proguard.optimize.evaluation.LivenessAnalyzer: proguard.optimize.evaluation.PartialEvaluator partialEvaluator> = $r1;

        return;
    }

    private long combinedLiveness(proguard.evaluation.value.InstructionOffsetValue)
    {
        proguard.optimize.evaluation.LivenessAnalyzer r0;
        long $l1, $l4;
        long[] $r2;
        proguard.evaluation.value.InstructionOffsetValue $r1;
        int $i0, $i2, $i3;

        r0 := @this: proguard.optimize.evaluation.LivenessAnalyzer;

        $r1 := @parameter0: proguard.evaluation.value.InstructionOffsetValue;

        $i0 = virtualinvoke $r1.<proguard.evaluation.value.InstructionOffsetValue: int instructionOffsetCount()>();

        $l1 = 0L;

        $i2 = 0;

     label1:
        if $i2 >= $i0 goto label2;

        $r2 = r0.<proguard.optimize.evaluation.LivenessAnalyzer: long[] isAliveBefore>;

        $i3 = virtualinvoke $r1.<proguard.evaluation.value.InstructionOffsetValue: int instructionOffset(int)>($i2);

        $l4 = $r2[$i3];

        $l1 = $l1 | $l4;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return $l1;
    }

    private void initializeArrays(proguard.classfile.attribute.CodeAttribute)
    {
        long[] $r2;
        proguard.optimize.evaluation.LivenessAnalyzer r0;
        proguard.classfile.attribute.CodeAttribute $r1;
        int $i0, $i1;

        r0 := @this: proguard.optimize.evaluation.LivenessAnalyzer;

        $r1 := @parameter0: proguard.classfile.attribute.CodeAttribute;

        $i0 = $r1.<proguard.classfile.attribute.CodeAttribute: int u4codeLength>;

        $r2 = r0.<proguard.optimize.evaluation.LivenessAnalyzer: long[] isAliveBefore>;

        $i1 = lengthof $r2;

        if $i1 >= $i0 goto label1;

        $r2 = newarray (long)[$i0];

        r0.<proguard.optimize.evaluation.LivenessAnalyzer: long[] isAliveBefore> = $r2;

        $r2 = newarray (long)[$i0];

        r0.<proguard.optimize.evaluation.LivenessAnalyzer: long[] isAliveAfter> = $r2;

        $r2 = newarray (long)[$i0];

        r0.<proguard.optimize.evaluation.LivenessAnalyzer: long[] isCategory2> = $r2;

        return;

     label1:
        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label3;

        $r2 = r0.<proguard.optimize.evaluation.LivenessAnalyzer: long[] isAliveBefore>;

        $r2[$i1] = 0L;

        $r2 = r0.<proguard.optimize.evaluation.LivenessAnalyzer: long[] isAliveAfter>;

        $r2[$i1] = 0L;

        $r2 = r0.<proguard.optimize.evaluation.LivenessAnalyzer: long[] isCategory2>;

        $r2[$i1] = 0L;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        return;
    }

    private int maxOffset(proguard.evaluation.value.Value)
    {
        int $i0;
        proguard.optimize.evaluation.LivenessAnalyzer r0;
        proguard.evaluation.value.Value $r1;

        r0 := @this: proguard.optimize.evaluation.LivenessAnalyzer;

        $r1 := @parameter0: proguard.evaluation.value.Value;

        $i0 = specialinvoke r0.<proguard.optimize.evaluation.LivenessAnalyzer: int maxOffset(proguard.evaluation.value.Value,int)>($r1, -2147483648);

        return $i0;
    }

    private int maxOffset(proguard.evaluation.value.Value, int)
    {
        proguard.optimize.evaluation.LivenessAnalyzer r0;
        proguard.evaluation.value.InstructionOffsetValue $r2;
        int $i0, $i1, $i2, $i3;
        proguard.evaluation.value.Value $r1;

        r0 := @this: proguard.optimize.evaluation.LivenessAnalyzer;

        $r1 := @parameter0: proguard.evaluation.value.Value;

        $i0 := @parameter1: int;

        if $r1 == null goto label3;

        $r2 = virtualinvoke $r1.<proguard.evaluation.value.Value: proguard.evaluation.value.InstructionOffsetValue instructionOffsetValue()>();

        $i1 = virtualinvoke $r2.<proguard.evaluation.value.InstructionOffsetValue: int instructionOffsetCount()>();

        $i2 = 0;

     label1:
        if $i2 >= $i1 goto label3;

        $i3 = virtualinvoke $r2.<proguard.evaluation.value.InstructionOffsetValue: int instructionOffset(int)>($i2);

        if $i0 >= $i3 goto label2;

        $i0 = $i3;

     label2:
        $i2 = $i2 + 1;

        goto label1;

     label3:
        return $i0;
    }

    private int minOffset(proguard.evaluation.value.Value)
    {
        int $i0;
        proguard.optimize.evaluation.LivenessAnalyzer r0;
        proguard.evaluation.value.Value $r1;

        r0 := @this: proguard.optimize.evaluation.LivenessAnalyzer;

        $r1 := @parameter0: proguard.evaluation.value.Value;

        $i0 = specialinvoke r0.<proguard.optimize.evaluation.LivenessAnalyzer: int minOffset(proguard.evaluation.value.Value,int)>($r1, 2147483647);

        return $i0;
    }

    private int minOffset(proguard.evaluation.value.Value, int)
    {
        proguard.optimize.evaluation.LivenessAnalyzer r0;
        proguard.evaluation.value.InstructionOffsetValue $r2;
        int $i0, $i1, $i2, $i3;
        proguard.evaluation.value.Value $r1;

        r0 := @this: proguard.optimize.evaluation.LivenessAnalyzer;

        $r1 := @parameter0: proguard.evaluation.value.Value;

        $i0 := @parameter1: int;

        if $r1 == null goto label3;

        $r2 = virtualinvoke $r1.<proguard.evaluation.value.Value: proguard.evaluation.value.InstructionOffsetValue instructionOffsetValue()>();

        $i1 = virtualinvoke $r2.<proguard.evaluation.value.InstructionOffsetValue: int instructionOffsetCount()>();

        $i2 = 0;

     label1:
        if $i2 >= $i1 goto label3;

        $i3 = virtualinvoke $r2.<proguard.evaluation.value.InstructionOffsetValue: int instructionOffset(int)>($i2);

        if $i0 <= $i3 goto label2;

        $i0 = $i3;

     label2:
        $i2 = $i2 + 1;

        goto label1;

     label3:
        return $i0;
    }

    public boolean isAliveAfter(int, int)
    {
        long[] $r1;
        byte $b4;
        proguard.optimize.evaluation.LivenessAnalyzer r0;
        int $i0, $i1;
        long $l2, $l3;

        r0 := @this: proguard.optimize.evaluation.LivenessAnalyzer;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        if $i1 >= 64 goto label1;

        $r1 = r0.<proguard.optimize.evaluation.LivenessAnalyzer: long[] isAliveAfter>;

        $l2 = $r1[$i0];

        $l3 = 1L << $i1;

        $l2 = $l2 & $l3;

        $b4 = $l2 cmp 0L;

        if $b4 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public boolean isAliveBefore(int, int)
    {
        long[] $r1;
        byte $b4;
        proguard.optimize.evaluation.LivenessAnalyzer r0;
        int $i0, $i1;
        long $l2, $l3;

        r0 := @this: proguard.optimize.evaluation.LivenessAnalyzer;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        if $i1 >= 64 goto label1;

        $r1 = r0.<proguard.optimize.evaluation.LivenessAnalyzer: long[] isAliveBefore>;

        $l2 = $r1[$i0];

        $l3 = 1L << $i1;

        $l2 = $l2 & $l3;

        $b4 = $l2 cmp 0L;

        if $b4 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public boolean isCategory2(int, int)
    {
        long[] $r1;
        byte $b4;
        proguard.optimize.evaluation.LivenessAnalyzer r0;
        int $i0, $i1;
        long $l2, $l3;

        r0 := @this: proguard.optimize.evaluation.LivenessAnalyzer;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        if $i1 >= 64 goto label1;

        $r1 = r0.<proguard.optimize.evaluation.LivenessAnalyzer: long[] isCategory2>;

        $l2 = $r1[$i0];

        $l3 = 1L << $i1;

        $l2 = $l2 & $l3;

        $b4 = $l2 cmp 0L;

        if $b4 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void setAliveAfter(int, int, boolean)
    {
        long[] $r1;
        proguard.optimize.evaluation.LivenessAnalyzer r0;
        int $i0, $i1;
        long $l2, $l3;
        boolean $z0;

        r0 := @this: proguard.optimize.evaluation.LivenessAnalyzer;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $z0 := @parameter2: boolean;

        if $i1 >= 64 goto label2;

        if $z0 == 0 goto label1;

        $r1 = r0.<proguard.optimize.evaluation.LivenessAnalyzer: long[] isAliveAfter>;

        $l2 = $r1[$i0];

        $l3 = 1L << $i1;

        $l2 = $l2 | $l3;

        $r1[$i0] = $l2;

        return;

     label1:
        $r1 = r0.<proguard.optimize.evaluation.LivenessAnalyzer: long[] isAliveAfter>;

        $l2 = $r1[$i0];

        $l3 = 1L << $i1;

        $l3 = $l3 ^ -1L;

        $l2 = $l2 & $l3;

        $r1[$i0] = $l2;

     label2:
        return;
    }

    public void setAliveBefore(int, int, boolean)
    {
        long[] $r1;
        proguard.optimize.evaluation.LivenessAnalyzer r0;
        int $i0, $i1;
        long $l2, $l3;
        boolean $z0;

        r0 := @this: proguard.optimize.evaluation.LivenessAnalyzer;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $z0 := @parameter2: boolean;

        if $i1 >= 64 goto label2;

        if $z0 == 0 goto label1;

        $r1 = r0.<proguard.optimize.evaluation.LivenessAnalyzer: long[] isAliveBefore>;

        $l2 = $r1[$i0];

        $l3 = 1L << $i1;

        $l2 = $l2 | $l3;

        $r1[$i0] = $l2;

        return;

     label1:
        $r1 = r0.<proguard.optimize.evaluation.LivenessAnalyzer: long[] isAliveBefore>;

        $l2 = $r1[$i0];

        $l3 = 1L << $i1;

        $l3 = $l3 ^ -1L;

        $l2 = $l2 & $l3;

        $r1[$i0] = $l2;

     label2:
        return;
    }

    public void setCategory2(int, int, boolean)
    {
        long[] $r1;
        proguard.optimize.evaluation.LivenessAnalyzer r0;
        int $i0, $i1;
        long $l2, $l3;
        boolean $z0;

        r0 := @this: proguard.optimize.evaluation.LivenessAnalyzer;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $z0 := @parameter2: boolean;

        if $i1 >= 64 goto label1;

        $r1 = r0.<proguard.optimize.evaluation.LivenessAnalyzer: long[] isCategory2>;

        $l2 = $r1[$i0];

        $l3 = 1L << $i1;

        $l2 = $l2 | $l3;

        $r1[$i0] = $l2;

        return;

     label1:
        return;
    }

    public void visitAnyAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.Attribute)
    {
        proguard.optimize.evaluation.LivenessAnalyzer r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.Attribute $r2;

        r0 := @this: proguard.optimize.evaluation.LivenessAnalyzer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.Attribute;

        return;
    }

    public void visitAnyInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.Instruction)
    {
        proguard.optimize.evaluation.LivenessAnalyzer r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.instruction.Instruction $r4;
        int $i0;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.optimize.evaluation.LivenessAnalyzer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.Instruction;

        return;
    }

    public void visitCodeAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute)
    {
        proguard.optimize.evaluation.LivenessAnalyzer r0;
        long $l3, $l4;
        proguard.optimize.evaluation.PartialEvaluator $r4;
        long[] $r6;
        byte $b5;
        proguard.classfile.Clazz $r1;
        proguard.evaluation.value.InstructionOffsetValue $r5;
        int $i0, $i1, $i2, $i6, $i7;
        proguard.evaluation.value.Value $r8;
        boolean $z0, $z1;
        proguard.evaluation.TracedVariables $r7;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.optimize.evaluation.LivenessAnalyzer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        specialinvoke r0.<proguard.optimize.evaluation.LivenessAnalyzer: void initializeArrays(proguard.classfile.attribute.CodeAttribute)>($r3);

        $r4 = r0.<proguard.optimize.evaluation.LivenessAnalyzer: proguard.optimize.evaluation.PartialEvaluator partialEvaluator>;

        virtualinvoke $r4.<proguard.optimize.evaluation.PartialEvaluator: void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute)>($r1, $r2, $r3);

        $i0 = $r3.<proguard.classfile.attribute.CodeAttribute: int u4codeLength>;

        $i1 = $r3.<proguard.classfile.attribute.CodeAttribute: int u2maxLocals>;

        if $i1 <= 64 goto label01;

        $i1 = 64;

     label01:
        r0.<proguard.optimize.evaluation.LivenessAnalyzer: boolean checkAgain> = 0;

        r0.<proguard.optimize.evaluation.LivenessAnalyzer: long alive> = 0L;

        $i2 = $i0 - 1;

     label02:
        if $i2 < 0 goto label07;

        $r4 = r0.<proguard.optimize.evaluation.LivenessAnalyzer: proguard.optimize.evaluation.PartialEvaluator partialEvaluator>;

        $z0 = virtualinvoke $r4.<proguard.optimize.evaluation.PartialEvaluator: boolean isTraced(int)>($i2);

        if $z0 == 0 goto label05;

        $r4 = r0.<proguard.optimize.evaluation.LivenessAnalyzer: proguard.optimize.evaluation.PartialEvaluator partialEvaluator>;

        $r5 = virtualinvoke $r4.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.value.InstructionOffsetValue branchTargets(int)>($i2);

        if $r5 == null goto label03;

        $l3 = specialinvoke r0.<proguard.optimize.evaluation.LivenessAnalyzer: long combinedLiveness(proguard.evaluation.value.InstructionOffsetValue)>($r5);

        r0.<proguard.optimize.evaluation.LivenessAnalyzer: long alive> = $l3;

     label03:
        $l3 = r0.<proguard.optimize.evaluation.LivenessAnalyzer: long alive>;

        $r6 = r0.<proguard.optimize.evaluation.LivenessAnalyzer: long[] isAliveAfter>;

        $l4 = $r6[$i2];

        $l3 = $l3 | $l4;

        r0.<proguard.optimize.evaluation.LivenessAnalyzer: long alive> = $l3;

        $r6 = r0.<proguard.optimize.evaluation.LivenessAnalyzer: long[] isAliveAfter>;

        $l3 = r0.<proguard.optimize.evaluation.LivenessAnalyzer: long alive>;

        $r6[$i2] = $l3;

        virtualinvoke $r3.<proguard.classfile.attribute.CodeAttribute: void instructionAccept(proguard.classfile.Clazz,proguard.classfile.Method,int,proguard.classfile.instruction.visitor.InstructionVisitor)>($r1, $r2, $i2, r0);

        $l3 = r0.<proguard.optimize.evaluation.LivenessAnalyzer: long alive>;

        $r6 = r0.<proguard.optimize.evaluation.LivenessAnalyzer: long[] isAliveBefore>;

        $l4 = $r6[$i2];

        $l3 = $l3 | $l4;

        r0.<proguard.optimize.evaluation.LivenessAnalyzer: long alive> = $l3;

        $r6 = r0.<proguard.optimize.evaluation.LivenessAnalyzer: long[] isAliveBefore>;

        $l3 = $r6[$i2];

        $l3 = $l3 ^ -1L;

        $l4 = r0.<proguard.optimize.evaluation.LivenessAnalyzer: long alive>;

        $l3 = $l3 & $l4;

        $b5 = $l3 cmp 0L;

        if $b5 == 0 goto label05;

        $r6 = r0.<proguard.optimize.evaluation.LivenessAnalyzer: long[] isAliveBefore>;

        $l3 = r0.<proguard.optimize.evaluation.LivenessAnalyzer: long alive>;

        $r6[$i2] = $l3;

        $z0 = r0.<proguard.optimize.evaluation.LivenessAnalyzer: boolean checkAgain>;

        $r4 = r0.<proguard.optimize.evaluation.LivenessAnalyzer: proguard.optimize.evaluation.PartialEvaluator partialEvaluator>;

        $r5 = virtualinvoke $r4.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.value.InstructionOffsetValue branchOrigins(int)>($i2);

        $i6 = specialinvoke r0.<proguard.optimize.evaluation.LivenessAnalyzer: int maxOffset(proguard.evaluation.value.Value)>($r5);

        if $i2 >= $i6 goto label06;

        $z1 = 1;

     label04:
        $z0 = $z0 | $z1;

        r0.<proguard.optimize.evaluation.LivenessAnalyzer: boolean checkAgain> = $z0;

     label05:
        $i2 = $i2 + -1;

        goto label02;

     label06:
        $z1 = 0;

        goto label04;

     label07:
        virtualinvoke $r3.<proguard.classfile.attribute.CodeAttribute: void exceptionsAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.visitor.ExceptionInfoVisitor)>($r1, $r2, r0);

        $z0 = r0.<proguard.optimize.evaluation.LivenessAnalyzer: boolean checkAgain>;

        if $z0 != 0 goto label01;

        $i2 = 0;

     label08:
        if $i2 >= $i0 goto label13;

        $r4 = r0.<proguard.optimize.evaluation.LivenessAnalyzer: proguard.optimize.evaluation.PartialEvaluator partialEvaluator>;

        $z0 = virtualinvoke $r4.<proguard.optimize.evaluation.PartialEvaluator: boolean isTraced(int)>($i2);

        if $z0 == 0 goto label12;

        $i6 = 0;

     label09:
        if $i6 >= $i1 goto label12;

        $z0 = virtualinvoke r0.<proguard.optimize.evaluation.LivenessAnalyzer: boolean isAliveBefore(int,int)>($i2, $i6);

        if $z0 == 0 goto label10;

        $r4 = r0.<proguard.optimize.evaluation.LivenessAnalyzer: proguard.optimize.evaluation.PartialEvaluator partialEvaluator>;

        $r7 = virtualinvoke $r4.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedVariables getVariablesBefore(int)>($i2);

        $r8 = virtualinvoke $r7.<proguard.evaluation.TracedVariables: proguard.evaluation.value.Value getValue(int)>($i6);

        if $r8 == null goto label10;

        $z0 = virtualinvoke $r8.<proguard.evaluation.value.Value: boolean isCategory2()>();

        if $z0 == 0 goto label10;

        virtualinvoke r0.<proguard.optimize.evaluation.LivenessAnalyzer: void setCategory2(int,int,boolean)>($i2, $i6, 1);

        $i7 = $i6 + 1;

        virtualinvoke r0.<proguard.optimize.evaluation.LivenessAnalyzer: void setAliveBefore(int,int,boolean)>($i2, $i7, 1);

        $i7 = $i6 + 1;

        virtualinvoke r0.<proguard.optimize.evaluation.LivenessAnalyzer: void setCategory2(int,int,boolean)>($i2, $i7, 1);

     label10:
        $z0 = virtualinvoke r0.<proguard.optimize.evaluation.LivenessAnalyzer: boolean isAliveAfter(int,int)>($i2, $i6);

        if $z0 == 0 goto label11;

        $r4 = r0.<proguard.optimize.evaluation.LivenessAnalyzer: proguard.optimize.evaluation.PartialEvaluator partialEvaluator>;

        $r7 = virtualinvoke $r4.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedVariables getVariablesAfter(int)>($i2);

        $r8 = virtualinvoke $r7.<proguard.evaluation.TracedVariables: proguard.evaluation.value.Value getValue(int)>($i6);

        if $r8 == null goto label11;

        $z0 = virtualinvoke $r8.<proguard.evaluation.value.Value: boolean isCategory2()>();

        if $z0 == 0 goto label11;

        virtualinvoke r0.<proguard.optimize.evaluation.LivenessAnalyzer: void setCategory2(int,int,boolean)>($i2, $i6, 1);

        $i7 = $i6 + 1;

        virtualinvoke r0.<proguard.optimize.evaluation.LivenessAnalyzer: void setAliveAfter(int,int,boolean)>($i2, $i7, 1);

        $i7 = $i6 + 1;

        virtualinvoke r0.<proguard.optimize.evaluation.LivenessAnalyzer: void setCategory2(int,int,boolean)>($i2, $i7, 1);

     label11:
        $i6 = $i6 + 1;

        goto label09;

     label12:
        $i2 = $i2 + 1;

        goto label08;

     label13:
        return;
    }

    public void visitConstantInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.ConstantInstruction)
    {
        proguard.optimize.evaluation.LivenessAnalyzer r0;
        long $l2;
        proguard.optimize.evaluation.PartialEvaluator $r5;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0, $i1;
        proguard.classfile.instruction.ConstantInstruction $r4;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.optimize.evaluation.LivenessAnalyzer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.ConstantInstruction;

        $r5 = r0.<proguard.optimize.evaluation.LivenessAnalyzer: proguard.optimize.evaluation.PartialEvaluator partialEvaluator>;

        $i1 = virtualinvoke $r5.<proguard.optimize.evaluation.PartialEvaluator: int superInitializationOffset()>();

        if $i0 != $i1 goto label1;

        $l2 = r0.<proguard.optimize.evaluation.LivenessAnalyzer: long alive>;

        $l2 = $l2 | 1L;

        r0.<proguard.optimize.evaluation.LivenessAnalyzer: long alive> = $l2;

     label1:
        return;
    }

    public void visitExceptionInfo(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.ExceptionInfo)
    {
        proguard.optimize.evaluation.LivenessAnalyzer r0;
        long $l1, $l4, $l5;
        proguard.optimize.evaluation.PartialEvaluator $r6;
        long[] $r5;
        byte $b2;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0, $i3;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.ExceptionInfo $r4;
        boolean $z0;

        r0 := @this: proguard.optimize.evaluation.LivenessAnalyzer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.ExceptionInfo;

        $r5 = r0.<proguard.optimize.evaluation.LivenessAnalyzer: long[] isAliveBefore>;

        $i0 = $r4.<proguard.classfile.attribute.ExceptionInfo: int u2handlerPC>;

        $l1 = $r5[$i0];

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label3;

        $i3 = $r4.<proguard.classfile.attribute.ExceptionInfo: int u2startPC>;

        $i0 = $r4.<proguard.classfile.attribute.ExceptionInfo: int u2endPC>;

     label1:
        if $i3 >= $i0 goto label3;

        $r6 = r0.<proguard.optimize.evaluation.LivenessAnalyzer: proguard.optimize.evaluation.PartialEvaluator partialEvaluator>;

        $z0 = virtualinvoke $r6.<proguard.optimize.evaluation.PartialEvaluator: boolean isTraced(int)>($i3);

        if $z0 == 0 goto label2;

        $r5 = r0.<proguard.optimize.evaluation.LivenessAnalyzer: long[] isAliveBefore>;

        $l4 = $r5[$i3];

        $r5 = r0.<proguard.optimize.evaluation.LivenessAnalyzer: long[] isAliveAfter>;

        $l5 = $r5[$i3];

        $l4 = $l4 & $l5;

        $l4 = $l4 ^ -1L;

        $l4 = $l4 & $l1;

        $b2 = $l4 cmp 0L;

        if $b2 == 0 goto label2;

        $r5 = r0.<proguard.optimize.evaluation.LivenessAnalyzer: long[] isAliveBefore>;

        $l4 = $r5[$i3];

        $l4 = $l4 | $l1;

        $r5[$i3] = $l4;

        $r5 = r0.<proguard.optimize.evaluation.LivenessAnalyzer: long[] isAliveAfter>;

        $l4 = $r5[$i3];

        $l4 = $l4 | $l1;

        $r5[$i3] = $l4;

        r0.<proguard.optimize.evaluation.LivenessAnalyzer: boolean checkAgain> = 1;

     label2:
        $i3 = $i3 + 1;

        goto label1;

     label3:
        return;
    }

    public void visitVariableInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.VariableInstruction)
    {
        proguard.optimize.evaluation.LivenessAnalyzer r0;
        proguard.classfile.instruction.VariableInstruction $r4;
        long $l1, $l3, $l4;
        long[] $r5;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0, $i2;
        proguard.classfile.Method $r2;
        boolean $z0;

        r0 := @this: proguard.optimize.evaluation.LivenessAnalyzer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.VariableInstruction;

        $i2 = $r4.<proguard.classfile.instruction.VariableInstruction: int variableIndex>;

        if $i2 >= 64 goto label2;

        $l3 = 1L << $i2;

        $z0 = virtualinvoke $r4.<proguard.classfile.instruction.VariableInstruction: boolean isLoad()>();

        if $z0 == 0 goto label1;

        $l1 = r0.<proguard.optimize.evaluation.LivenessAnalyzer: long alive>;

        $l3 = $l3 | $l1;

        r0.<proguard.optimize.evaluation.LivenessAnalyzer: long alive> = $l3;

        return;

     label1:
        $l1 = r0.<proguard.optimize.evaluation.LivenessAnalyzer: long alive>;

        $l4 = -1L ^ $l3;

        $l1 = $l1 & $l4;

        r0.<proguard.optimize.evaluation.LivenessAnalyzer: long alive> = $l1;

        $r5 = r0.<proguard.optimize.evaluation.LivenessAnalyzer: long[] isAliveAfter>;

        $l1 = $r5[$i0];

        $l3 = $l3 | $l1;

        $r5[$i0] = $l3;

     label2:
        return;
    }

    public static void <clinit>()
    {
        <proguard.optimize.evaluation.LivenessAnalyzer: int MAX_VARIABLES_SIZE> = 64;

        <proguard.optimize.evaluation.LivenessAnalyzer: boolean DEBUG> = 0;

        return;
    }
}
