public class twitter4j.StatusStream extends java.lang.Object
{
    private static final twitter4j.logging.Logger logger;
    private java.io.BufferedReader br;
    private java.io.InputStream is;
    private twitter4j.http.HttpResponse response;
    private boolean streamAlive;

    static void <clinit>()
    {
        twitter4j.logging.Logger $r0;

        $r0 = staticinvoke <twitter4j.logging.Logger: twitter4j.logging.Logger getLogger()>();

        <twitter4j.StatusStream: twitter4j.logging.Logger logger> = $r0;

        return;
    }

    void <init>(java.io.InputStream) throws java.io.IOException
    {
        twitter4j.StatusStream r0;
        java.io.BufferedReader $r3;
        java.io.InputStreamReader $r2;
        java.io.InputStream $r1;

        r0 := @this: twitter4j.StatusStream;

        $r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<twitter4j.StatusStream: boolean streamAlive> = 1;

        r0.<twitter4j.StatusStream: java.io.InputStream is> = $r1;

        $r3 = new java.io.BufferedReader;

        $r2 = new java.io.InputStreamReader;

        specialinvoke $r2.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r1, "UTF-8");

        specialinvoke $r3.<java.io.BufferedReader: void <init>(java.io.Reader)>($r2);

        r0.<twitter4j.StatusStream: java.io.BufferedReader br> = $r3;

        return;
    }

    void <init>(twitter4j.http.HttpResponse) throws java.io.IOException
    {
        twitter4j.StatusStream r0;
        twitter4j.http.HttpResponse $r1;
        java.io.InputStream $r2;

        r0 := @this: twitter4j.StatusStream;

        $r1 := @parameter0: twitter4j.http.HttpResponse;

        $r2 = virtualinvoke $r1.<twitter4j.http.HttpResponse: java.io.InputStream asStream()>();

        specialinvoke r0.<twitter4j.StatusStream: void <init>(java.io.InputStream)>($r2);

        r0.<twitter4j.StatusStream: twitter4j.http.HttpResponse response> = $r1;

        return;
    }

    public void close() throws java.io.IOException
    {
        twitter4j.http.HttpResponse $r3;
        twitter4j.StatusStream r0;
        java.io.BufferedReader $r2;
        java.io.InputStream $r1;

        r0 := @this: twitter4j.StatusStream;

        $r1 = r0.<twitter4j.StatusStream: java.io.InputStream is>;

        virtualinvoke $r1.<java.io.InputStream: void close()>();

        $r2 = r0.<twitter4j.StatusStream: java.io.BufferedReader br>;

        virtualinvoke $r2.<java.io.BufferedReader: void close()>();

        $r3 = r0.<twitter4j.StatusStream: twitter4j.http.HttpResponse response>;

        if $r3 == null goto label1;

        $r3 = r0.<twitter4j.StatusStream: twitter4j.http.HttpResponse response>;

        virtualinvoke $r3.<twitter4j.http.HttpResponse: void disconnect()>();

     label1:
        return;
    }

    public void next(twitter4j.StatusListener) throws twitter4j.TwitterException
    {
        java.lang.Throwable r2, $r11;
        java.lang.IllegalStateException $r12;
        int $i0;
        twitter4j.StatusDeletionNotice $r9, $r15;
        twitter4j.TwitterException $r16;
        twitter4j.logging.Logger $r7;
        java.lang.String $r6;
        twitter4j.StatusJSONImpl $r8, $r14;
        boolean $z0;
        twitter4j.StatusListener $r1;
        twitter4j.org.json.JSONObject r4, $r13;
        java.lang.Exception $r17;
        twitter4j.StatusStream r0;
        twitter4j.org.json.JSONException r3;
        java.io.BufferedReader $r5;
        java.io.InputStream $r10;

        r0 := @this: twitter4j.StatusStream;

        $r1 := @parameter0: twitter4j.StatusListener;

        $z0 = r0.<twitter4j.StatusStream: boolean streamAlive>;

        if $z0 != 0 goto label01;

        $r12 = new java.lang.IllegalStateException;

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Stream already closed.");

        throw $r12;

     label01:
        $r5 = r0.<twitter4j.StatusStream: java.io.BufferedReader br>;

     label02:
        $r6 = virtualinvoke $r5.<java.io.BufferedReader: java.lang.String readLine()>();

     label03:
        if $r6 == null goto label27;

     label04:
        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

     label05:
        if $i0 <= 0 goto label27;

        $r7 = <twitter4j.StatusStream: twitter4j.logging.Logger logger>;

     label06:
        virtualinvoke $r7.<twitter4j.logging.Logger: void debug(java.lang.String,java.lang.String)>("received:", $r6);

     label07:
        $r13 = new twitter4j.org.json.JSONObject;

        r4 = $r13;

     label08:
        specialinvoke $r13.<twitter4j.org.json.JSONObject: void <init>(java.lang.String)>($r6);

        $z0 = virtualinvoke r4.<twitter4j.org.json.JSONObject: boolean isNull(java.lang.String)>("text");

     label09:
        if $z0 != 0 goto label12;

        $r14 = new twitter4j.StatusJSONImpl;

        $r8 = $r14;

     label10:
        specialinvoke $r14.<twitter4j.StatusJSONImpl: void <init>(twitter4j.org.json.JSONObject)>(r4);

        interfaceinvoke $r1.<twitter4j.StatusListener: void onStatus(twitter4j.Status)>($r8);

     label11:
        return;

     label12:
        $z0 = virtualinvoke r4.<twitter4j.org.json.JSONObject: boolean isNull(java.lang.String)>("delete");

     label13:
        if $z0 != 0 goto label22;

        $r15 = new twitter4j.StatusDeletionNotice;

        $r9 = $r15;

     label14:
        specialinvoke $r15.<twitter4j.StatusDeletionNotice: void <init>(twitter4j.org.json.JSONObject)>(r4);

        interfaceinvoke $r1.<twitter4j.StatusListener: void onDeletionNotice(twitter4j.StatusDeletionNotice)>($r9);

     label15:
        return;

     label16:
        r3 := @caughtexception;

     label17:
        interfaceinvoke $r1.<twitter4j.StatusListener: void onException(java.lang.Exception)>(r3);

     label18:
        return;

     label19:
        r2 := @caughtexception;

        $r10 = r0.<twitter4j.StatusStream: java.io.InputStream is>;

     label20:
        virtualinvoke $r10.<java.io.InputStream: void close()>();

     label21:
        r0.<twitter4j.StatusStream: boolean streamAlive> = 0;

        $r16 = new twitter4j.TwitterException;

        $r17 = (java.lang.Exception) r2;

        specialinvoke $r16.<twitter4j.TwitterException: void <init>(java.lang.String,java.lang.Exception)>("Stream closed.", $r17);

        throw $r16;

     label22:
        $z0 = virtualinvoke r4.<twitter4j.org.json.JSONObject: boolean isNull(java.lang.String)>("limit");

     label23:
        if $z0 != 0 goto label27;

     label24:
        r4 = virtualinvoke r4.<twitter4j.org.json.JSONObject: twitter4j.org.json.JSONObject getJSONObject(java.lang.String)>("limit");

        $i0 = staticinvoke <twitter4j.ParseUtil: int getInt(java.lang.String,twitter4j.org.json.JSONObject)>("track", r4);

        interfaceinvoke $r1.<twitter4j.StatusListener: void onTrackLimitationNotice(int)>($i0);

     label25:
        return;

     label26:
        $r11 := @caughtexception;

        goto label21;

     label27:
        return;

        catch java.io.IOException from label02 to label03 with label19;
        catch java.io.IOException from label04 to label05 with label19;
        catch java.io.IOException from label06 to label07 with label19;
        catch twitter4j.org.json.JSONException from label08 to label09 with label16;
        catch twitter4j.org.json.JSONException from label10 to label11 with label16;
        catch twitter4j.org.json.JSONException from label12 to label13 with label16;
        catch twitter4j.org.json.JSONException from label14 to label15 with label16;
        catch java.io.IOException from label08 to label09 with label19;
        catch java.io.IOException from label10 to label11 with label19;
        catch java.io.IOException from label12 to label13 with label19;
        catch java.io.IOException from label14 to label15 with label19;
        catch java.io.IOException from label17 to label18 with label19;
        catch java.io.IOException from label20 to label21 with label26;
        catch twitter4j.org.json.JSONException from label22 to label23 with label16;
        catch twitter4j.org.json.JSONException from label24 to label25 with label16;
        catch java.io.IOException from label22 to label23 with label19;
        catch java.io.IOException from label24 to label25 with label19;
    }
}
