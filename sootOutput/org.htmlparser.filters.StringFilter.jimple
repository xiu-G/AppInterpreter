public class org.htmlparser.filters.StringFilter extends java.lang.Object implements org.htmlparser.NodeFilter
{
    protected java.lang.String a;
    protected java.lang.String b;
    protected boolean c;
    protected java.util.Locale d;

    public void <init>()
    {
        org.htmlparser.filters.StringFilter r0;

        r0 := @this: org.htmlparser.filters.StringFilter;

        specialinvoke r0.<org.htmlparser.filters.StringFilter: void <init>(java.lang.String,boolean)>("", 0);

        return;
    }

    public void <init>(java.lang.String)
    {
        java.lang.String $r1;
        org.htmlparser.filters.StringFilter r0;

        r0 := @this: org.htmlparser.filters.StringFilter;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.htmlparser.filters.StringFilter: void <init>(java.lang.String,boolean)>($r1, 0);

        return;
    }

    public void <init>(java.lang.String, boolean)
    {
        java.lang.String $r1;
        org.htmlparser.filters.StringFilter r0;
        boolean $z0;

        r0 := @this: org.htmlparser.filters.StringFilter;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        specialinvoke r0.<org.htmlparser.filters.StringFilter: void <init>(java.lang.String,boolean,java.util.Locale)>($r1, $z0, null);

        return;
    }

    public void <init>(java.lang.String, boolean, java.util.Locale)
    {
        java.util.Locale $r2;
        java.lang.String $r1;
        org.htmlparser.filters.StringFilter r0;
        boolean $z0;

        r0 := @this: org.htmlparser.filters.StringFilter;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $r2 := @parameter2: java.util.Locale;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.htmlparser.filters.StringFilter: java.lang.String a> = $r1;

        r0.<org.htmlparser.filters.StringFilter: boolean c> = $z0;

        if $r2 != null goto label2;

        $r2 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

     label1:
        r0.<org.htmlparser.filters.StringFilter: java.util.Locale d> = $r2;

        $z0 = virtualinvoke r0.<org.htmlparser.filters.StringFilter: boolean getCaseSensitive()>();

        if $z0 == 0 goto label3;

        $r1 = virtualinvoke r0.<org.htmlparser.filters.StringFilter: java.lang.String getPattern()>();

        r0.<org.htmlparser.filters.StringFilter: java.lang.String b> = $r1;

        return;

     label2:
        goto label1;

     label3:
        $r1 = virtualinvoke r0.<org.htmlparser.filters.StringFilter: java.lang.String getPattern()>();

        $r2 = virtualinvoke r0.<org.htmlparser.filters.StringFilter: java.util.Locale getLocale()>();

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r2);

        r0.<org.htmlparser.filters.StringFilter: java.lang.String b> = $r1;

        return;
    }

    public boolean accept(org.htmlparser.Node)
    {
        org.htmlparser.filters.StringFilter r0;
        org.htmlparser.Node $r2;
        org.htmlparser.Text $r3;
        java.util.Locale $r5;
        int $i0;
        java.lang.String $r1, $r4;
        boolean $z0;

        r0 := @this: org.htmlparser.filters.StringFilter;

        $r2 := @parameter0: org.htmlparser.Node;

        $z0 = $r2 instanceof org.htmlparser.Text;

        if $z0 == 0 goto label2;

        $r3 = (org.htmlparser.Text) $r2;

        $r1 = interfaceinvoke $r3.<org.htmlparser.Text: java.lang.String getText()>();

        $r4 = $r1;

        $z0 = virtualinvoke r0.<org.htmlparser.filters.StringFilter: boolean getCaseSensitive()>();

        if $z0 != 0 goto label1;

        $r5 = virtualinvoke r0.<org.htmlparser.filters.StringFilter: java.util.Locale getLocale()>();

        $r4 = virtualinvoke $r1.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r5);

     label1:
        $r1 = r0.<org.htmlparser.filters.StringFilter: java.lang.String b>;

        $i0 = virtualinvoke $r4.<java.lang.String: int indexOf(java.lang.String)>($r1);

        if -1 == $i0 goto label2;

        return 1;

     label2:
        return 0;
    }

    public boolean getCaseSensitive()
    {
        org.htmlparser.filters.StringFilter r0;
        boolean z0;

        r0 := @this: org.htmlparser.filters.StringFilter;

        z0 = r0.<org.htmlparser.filters.StringFilter: boolean c>;

        return z0;
    }

    public java.util.Locale getLocale()
    {
        org.htmlparser.filters.StringFilter r0;
        java.util.Locale r1;

        r0 := @this: org.htmlparser.filters.StringFilter;

        r1 = r0.<org.htmlparser.filters.StringFilter: java.util.Locale d>;

        return r1;
    }

    public java.lang.String getPattern()
    {
        java.lang.String r1;
        org.htmlparser.filters.StringFilter r0;

        r0 := @this: org.htmlparser.filters.StringFilter;

        r1 = r0.<org.htmlparser.filters.StringFilter: java.lang.String a>;

        return r1;
    }

    public void setCaseSensitive(boolean)
    {
        java.util.Locale $r2;
        java.lang.String $r1;
        org.htmlparser.filters.StringFilter r0;
        boolean $z0;

        r0 := @this: org.htmlparser.filters.StringFilter;

        $z0 := @parameter0: boolean;

        r0.<org.htmlparser.filters.StringFilter: boolean c> = $z0;

        $z0 = virtualinvoke r0.<org.htmlparser.filters.StringFilter: boolean getCaseSensitive()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<org.htmlparser.filters.StringFilter: java.lang.String getPattern()>();

        r0.<org.htmlparser.filters.StringFilter: java.lang.String b> = $r1;

        return;

     label1:
        $r1 = virtualinvoke r0.<org.htmlparser.filters.StringFilter: java.lang.String getPattern()>();

        $r2 = virtualinvoke r0.<org.htmlparser.filters.StringFilter: java.util.Locale getLocale()>();

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r2);

        r0.<org.htmlparser.filters.StringFilter: java.lang.String b> = $r1;

        return;
    }

    public void setLocale(java.util.Locale)
    {
        java.util.Locale $r1;
        java.lang.String $r2;
        org.htmlparser.filters.StringFilter r0;
        boolean $z0;

        r0 := @this: org.htmlparser.filters.StringFilter;

        $r1 := @parameter0: java.util.Locale;

        r0.<org.htmlparser.filters.StringFilter: java.util.Locale d> = $r1;

        $z0 = virtualinvoke r0.<org.htmlparser.filters.StringFilter: boolean getCaseSensitive()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<org.htmlparser.filters.StringFilter: java.lang.String getPattern()>();

        r0.<org.htmlparser.filters.StringFilter: java.lang.String b> = $r2;

        return;

     label1:
        $r2 = virtualinvoke r0.<org.htmlparser.filters.StringFilter: java.lang.String getPattern()>();

        $r1 = virtualinvoke r0.<org.htmlparser.filters.StringFilter: java.util.Locale getLocale()>();

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r1);

        r0.<org.htmlparser.filters.StringFilter: java.lang.String b> = $r2;

        return;
    }

    public void setPattern(java.lang.String)
    {
        java.util.Locale $r2;
        java.lang.String $r1;
        org.htmlparser.filters.StringFilter r0;
        boolean $z0;

        r0 := @this: org.htmlparser.filters.StringFilter;

        $r1 := @parameter0: java.lang.String;

        r0.<org.htmlparser.filters.StringFilter: java.lang.String a> = $r1;

        $z0 = virtualinvoke r0.<org.htmlparser.filters.StringFilter: boolean getCaseSensitive()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<org.htmlparser.filters.StringFilter: java.lang.String getPattern()>();

        r0.<org.htmlparser.filters.StringFilter: java.lang.String b> = $r1;

        return;

     label1:
        $r1 = virtualinvoke r0.<org.htmlparser.filters.StringFilter: java.lang.String getPattern()>();

        $r2 = virtualinvoke r0.<org.htmlparser.filters.StringFilter: java.util.Locale getLocale()>();

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r2);

        r0.<org.htmlparser.filters.StringFilter: java.lang.String b> = $r1;

        return;
    }
}
