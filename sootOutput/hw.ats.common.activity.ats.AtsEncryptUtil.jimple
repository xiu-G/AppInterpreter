public class hw.ats.common.activity.ats.AtsEncryptUtil extends java.lang.Object
{
    private static final java.lang.String TAG;
    private static final java.lang.String initialVectorParam;
    private static final java.lang.String keyString;

    public void <init>()
    {
        hw.ats.common.activity.ats.AtsEncryptUtil r0;

        r0 := @this: hw.ats.common.activity.ats.AtsEncryptUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String byte2Hex(byte)
    {
        short s2;
        byte $b0;
        int i1;
        java.lang.String[] r0;
        java.lang.StringBuilder $r1, $r3;
        java.lang.String $r2;

        $b0 := @parameter0: byte;

        r0 = newarray (java.lang.String)[16];

        r0[0] = "0";

        r0[1] = "1";

        r0[2] = "2";

        r0[3] = "3";

        r0[4] = "4";

        r0[5] = "5";

        r0[6] = "6";

        r0[7] = "7";

        r0[8] = "8";

        r0[9] = "9";

        r0[10] = "a";

        r0[11] = "b";

        r0[12] = "c";

        r0[13] = "d";

        r0[14] = "e";

        r0[15] = "f";

        s2 = (short) $b0;

        s2 = s2 & 255;

        i1 = (int) s2;

        i1 = i1 >> 4;

        i1 = i1 & 15;

        s2 = s2 & 15;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0[i1];

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        i1 = (int) s2;

        $r2 = r0[i1];

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public static java.lang.String bytes2Hex(byte[])
    {
        byte[] $r0;
        byte $b2;
        java.lang.StringBuffer r1;
        int $i0, $i1;
        java.lang.String $r2;

        $r0 := @parameter0: byte[];

        r1 = new java.lang.StringBuffer;

        $i0 = lengthof $r0;

        $i0 = $i0 * 2;

        specialinvoke r1.<java.lang.StringBuffer: void <init>(int)>($i0);

        $i0 = 0;

     label1:
        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label2;

        $b2 = $r0[$i0];

        $r2 = staticinvoke <hw.ats.common.activity.ats.AtsEncryptUtil: java.lang.String byte2Hex(byte)>($b2);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r2 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    public static byte[] decodeBase64(byte[])
    {
        byte[] $r1;
        java.lang.Object[] $r4;
        java.lang.Class[] r0;
        java.lang.Class $r2;
        java.lang.Object $r5;
        java.lang.reflect.Method $r3;
        java.lang.Exception $r6;

        $r1 := @parameter0: byte[];

     label1:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.apache.commons.codec.binary.Base64");

     label2:
        r0 = newarray (java.lang.Class)[1];

     label3:
        r0[0] = class "[B";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("decodeBase64", r0);

     label4:
        $r4 = newarray (java.lang.Object)[1];

     label5:
        $r4[0] = $r1;

        $r5 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r2, $r4);

        $r1 = (byte[]) $r5;

     label6:
        return $r1;

     label7:
        $r6 := @caughtexception;

        virtualinvoke $r6.<java.lang.Exception: void printStackTrace()>();

        return null;

        catch java.lang.Exception from label1 to label2 with label7;
        catch java.lang.Exception from label3 to label4 with label7;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    public static byte[] encodeBase64(byte[])
    {
        byte[] $r1;
        java.lang.Object[] $r4;
        java.lang.Class[] r0;
        java.lang.Class $r2;
        java.lang.Object $r5;
        java.lang.reflect.Method $r3;
        java.lang.Exception $r6;

        $r1 := @parameter0: byte[];

     label1:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.apache.commons.codec.binary.Base64");

     label2:
        r0 = newarray (java.lang.Class)[1];

     label3:
        r0[0] = class "[B";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("encodeBase64", r0);

     label4:
        $r4 = newarray (java.lang.Object)[1];

     label5:
        $r4[0] = $r1;

        $r5 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r2, $r4);

        $r1 = (byte[]) $r5;

     label6:
        return $r1;

     label7:
        $r6 := @caughtexception;

        virtualinvoke $r6.<java.lang.Exception: void printStackTrace()>();

        return null;

        catch java.lang.Exception from label1 to label2 with label7;
        catch java.lang.Exception from label3 to label4 with label7;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    public static java.lang.String getDecrypt(java.lang.String)
    {
        java.lang.Throwable $r7, $r8, $r9, $r10, $r11, $r12;
        byte[] $r4, $r6;
        javax.crypto.spec.SecretKeySpec r2, $r13;
        javax.crypto.Cipher $r5;
        java.security.InvalidAlgorithmParameterException $r20;
        javax.crypto.spec.IvParameterSpec r1, $r14;
        javax.crypto.NoSuchPaddingException $r18;
        java.lang.String $r0, $r3;
        javax.crypto.IllegalBlockSizeException $r15;
        javax.crypto.BadPaddingException $r16;
        java.security.NoSuchAlgorithmException $r17;
        java.security.InvalidKeyException $r19;

        $r0 := @parameter0: java.lang.String;

        $r13 = new javax.crypto.spec.SecretKeySpec;

        r2 = $r13;

        $r3 = "e0bc07309117e29c";

        $r4 = virtualinvoke $r3.<java.lang.String: byte[] getBytes()>();

        specialinvoke $r13.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r4, "AES");

        $r14 = new javax.crypto.spec.IvParameterSpec;

        r1 = $r14;

        $r3 = "26c7d1d265142de0";

        $r4 = virtualinvoke $r3.<java.lang.String: byte[] getBytes()>();

        specialinvoke $r14.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r4);

        $r4 = null;

     label1:
        $r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES/CFB8/NoPadding");

        virtualinvoke $r5.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(2, r2, r1);

        $r6 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        $r6 = staticinvoke <hw.ats.common.activity.ats.AtsEncryptUtil: byte[] decodeBase64(byte[])>($r6);

        $r6 = virtualinvoke $r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r6);

     label2:
        $r4 = $r6;

     label3:
        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(byte[])>($r4);

        return $r3;

     label4:
        $r7 := @caughtexception;

        $r15 = (javax.crypto.IllegalBlockSizeException) $r7;

        virtualinvoke $r15.<javax.crypto.IllegalBlockSizeException: void printStackTrace()>();

        goto label3;

     label5:
        $r8 := @caughtexception;

        $r16 = (javax.crypto.BadPaddingException) $r8;

        virtualinvoke $r16.<javax.crypto.BadPaddingException: void printStackTrace()>();

        goto label3;

     label6:
        $r9 := @caughtexception;

        $r17 = (java.security.NoSuchAlgorithmException) $r9;

        virtualinvoke $r17.<java.security.NoSuchAlgorithmException: void printStackTrace()>();

        goto label3;

     label7:
        $r10 := @caughtexception;

        $r18 = (javax.crypto.NoSuchPaddingException) $r10;

        virtualinvoke $r18.<javax.crypto.NoSuchPaddingException: void printStackTrace()>();

        goto label3;

     label8:
        $r11 := @caughtexception;

        $r19 = (java.security.InvalidKeyException) $r11;

        virtualinvoke $r19.<java.security.InvalidKeyException: void printStackTrace()>();

        goto label3;

     label9:
        $r12 := @caughtexception;

        $r20 = (java.security.InvalidAlgorithmParameterException) $r12;

        virtualinvoke $r20.<java.security.InvalidAlgorithmParameterException: void printStackTrace()>();

        goto label3;

        catch javax.crypto.IllegalBlockSizeException from label1 to label2 with label4;
        catch javax.crypto.BadPaddingException from label1 to label2 with label5;
        catch java.security.NoSuchAlgorithmException from label1 to label2 with label6;
        catch javax.crypto.NoSuchPaddingException from label1 to label2 with label7;
        catch java.security.InvalidKeyException from label1 to label2 with label8;
        catch java.security.InvalidAlgorithmParameterException from label1 to label2 with label9;
    }

    public static java.lang.String getEncrypt(java.lang.String)
    {
        java.lang.Throwable $r6, $r7, $r8, $r9, $r10, $r11;
        byte[] $r4;
        javax.crypto.spec.SecretKeySpec r2, $r12;
        javax.crypto.Cipher $r5;
        java.security.InvalidAlgorithmParameterException $r19;
        javax.crypto.spec.IvParameterSpec r1, $r13;
        javax.crypto.NoSuchPaddingException $r17;
        java.lang.String $r0, $r3;
        javax.crypto.IllegalBlockSizeException $r14;
        javax.crypto.BadPaddingException $r15;
        java.security.NoSuchAlgorithmException $r16;
        java.security.InvalidKeyException $r18;

        $r0 := @parameter0: java.lang.String;

        $r12 = new javax.crypto.spec.SecretKeySpec;

        r2 = $r12;

        $r3 = "e0bc07309117e29c";

        $r4 = virtualinvoke $r3.<java.lang.String: byte[] getBytes()>();

        specialinvoke $r12.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r4, "AES");

        $r13 = new javax.crypto.spec.IvParameterSpec;

        r1 = $r13;

        $r3 = "26c7d1d265142de0";

        $r4 = virtualinvoke $r3.<java.lang.String: byte[] getBytes()>();

        specialinvoke $r13.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r4);

     label1:
        $r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES/CFB8/NoPadding");

        virtualinvoke $r5.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(1, r2, r1);

        $r4 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        $r4 = virtualinvoke $r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r4);

        $r0 = staticinvoke <hw.ats.common.activity.ats.AtsEncryptUtil: java.lang.String bytes2Hex(byte[])>($r4);

     label2:
        return $r0;

     label3:
        $r6 := @caughtexception;

        $r14 = (javax.crypto.IllegalBlockSizeException) $r6;

        virtualinvoke $r14.<javax.crypto.IllegalBlockSizeException: void printStackTrace()>();

        return null;

     label4:
        $r7 := @caughtexception;

        $r15 = (javax.crypto.BadPaddingException) $r7;

        virtualinvoke $r15.<javax.crypto.BadPaddingException: void printStackTrace()>();

        return null;

     label5:
        $r8 := @caughtexception;

        $r16 = (java.security.NoSuchAlgorithmException) $r8;

        virtualinvoke $r16.<java.security.NoSuchAlgorithmException: void printStackTrace()>();

        return null;

     label6:
        $r9 := @caughtexception;

        $r17 = (javax.crypto.NoSuchPaddingException) $r9;

        virtualinvoke $r17.<javax.crypto.NoSuchPaddingException: void printStackTrace()>();

        return null;

     label7:
        $r10 := @caughtexception;

        $r18 = (java.security.InvalidKeyException) $r10;

        virtualinvoke $r18.<java.security.InvalidKeyException: void printStackTrace()>();

        return null;

     label8:
        $r11 := @caughtexception;

        $r19 = (java.security.InvalidAlgorithmParameterException) $r11;

        virtualinvoke $r19.<java.security.InvalidAlgorithmParameterException: void printStackTrace()>();

        return null;

        catch javax.crypto.IllegalBlockSizeException from label1 to label2 with label3;
        catch javax.crypto.BadPaddingException from label1 to label2 with label4;
        catch java.security.NoSuchAlgorithmException from label1 to label2 with label5;
        catch javax.crypto.NoSuchPaddingException from label1 to label2 with label6;
        catch java.security.InvalidKeyException from label1 to label2 with label7;
        catch java.security.InvalidAlgorithmParameterException from label1 to label2 with label8;
    }

    public static java.lang.String getEncryptPhoneNumber(android.content.Context)
    {
        android.content.Context $r0;
        java.lang.String $r1;

        $r0 := @parameter0: android.content.Context;

        $r1 = staticinvoke <hw.ats.common.activity.ats.AtsEncryptUtil: java.lang.String getPhoneNumber(android.content.Context)>($r0);

        $r1 = staticinvoke <hw.ats.common.activity.ats.AtsEncryptUtil: java.lang.String getEncrypt(java.lang.String)>($r1);

        return $r1;
    }

    public static java.lang.String getPhoneNumber(android.content.Context)
    {
        android.content.Context $r0;
        android.telephony.TelephonyManager r2;
        java.lang.Object $r1;
        java.lang.String $r3;

        $r0 := @parameter0: android.content.Context;

        $r1 = virtualinvoke $r0.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("phone");

        r2 = (android.telephony.TelephonyManager) $r1;

        if r2 == null goto label1;

        $r3 = virtualinvoke r2.<android.telephony.TelephonyManager: java.lang.String getLine1Number()>();

        return $r3;

     label1:
        return "";
    }

    public static void <clinit>()
    {
        <hw.ats.common.activity.ats.AtsEncryptUtil: java.lang.String keyString> = "e0bc07309117e29c";

        <hw.ats.common.activity.ats.AtsEncryptUtil: java.lang.String initialVectorParam> = "26c7d1d265142de0";

        <hw.ats.common.activity.ats.AtsEncryptUtil: java.lang.String TAG> = "AtsEncryptUtil";

        return;
    }
}
