public abstract class com.aishukeclassmfkb.util.UserTask extends java.lang.Object
{
    private static final int CORE_POOL_SIZE;
    private static final int KEEP_ALIVE;
    private static final java.lang.String LOG_TAG;
    private static final int MAXIMUM_POOL_SIZE;
    private static final int MESSAGE_POST_CANCEL;
    private static final int MESSAGE_POST_PROGRESS;
    private static final int MESSAGE_POST_RESULT;
    private static final java.util.concurrent.ThreadPoolExecutor sExecutor;
    private static final com.aishukeclassmfkb.util.UserTask$InternalHandler sHandler;
    private static final java.util.concurrent.ThreadFactory sThreadFactory;
    private static final java.util.concurrent.BlockingQueue sWorkQueue;
    private final java.util.concurrent.FutureTask mFuture;
    private volatile com.aishukeclassmfkb.util.UserTask$Status mStatus;
    private final com.aishukeclassmfkb.util.UserTask$WorkerRunnable mWorker;

    static void <clinit>()
    {
        java.util.concurrent.TimeUnit $r0;
        com.aishukeclassmfkb.util.UserTask$InternalHandler $r6;
        java.util.concurrent.ThreadPoolExecutor $r5;
        java.util.concurrent.BlockingQueue $r1;
        com.aishukeclassmfkb.util.UserTask$1 $r4;
        java.util.concurrent.ThreadFactory $r2;
        java.util.concurrent.LinkedBlockingQueue $r3;

        <com.aishukeclassmfkb.util.UserTask: int MESSAGE_POST_RESULT> = 1;

        <com.aishukeclassmfkb.util.UserTask: int MESSAGE_POST_PROGRESS> = 2;

        <com.aishukeclassmfkb.util.UserTask: int MESSAGE_POST_CANCEL> = 3;

        <com.aishukeclassmfkb.util.UserTask: int MAXIMUM_POOL_SIZE> = 10;

        <com.aishukeclassmfkb.util.UserTask: java.lang.String LOG_TAG> = "UserTask";

        <com.aishukeclassmfkb.util.UserTask: int KEEP_ALIVE> = 10;

        <com.aishukeclassmfkb.util.UserTask: int CORE_POOL_SIZE> = 1;

        $r3 = new java.util.concurrent.LinkedBlockingQueue;

        specialinvoke $r3.<java.util.concurrent.LinkedBlockingQueue: void <init>(int)>(10);

        <com.aishukeclassmfkb.util.UserTask: java.util.concurrent.BlockingQueue sWorkQueue> = $r3;

        $r4 = new com.aishukeclassmfkb.util.UserTask$1;

        specialinvoke $r4.<com.aishukeclassmfkb.util.UserTask$1: void <init>()>();

        <com.aishukeclassmfkb.util.UserTask: java.util.concurrent.ThreadFactory sThreadFactory> = $r4;

        $r5 = new java.util.concurrent.ThreadPoolExecutor;

        $r0 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $r1 = <com.aishukeclassmfkb.util.UserTask: java.util.concurrent.BlockingQueue sWorkQueue>;

        $r2 = <com.aishukeclassmfkb.util.UserTask: java.util.concurrent.ThreadFactory sThreadFactory>;

        specialinvoke $r5.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)>(1, 10, 10L, $r0, $r1, $r2);

        <com.aishukeclassmfkb.util.UserTask: java.util.concurrent.ThreadPoolExecutor sExecutor> = $r5;

        $r6 = new com.aishukeclassmfkb.util.UserTask$InternalHandler;

        specialinvoke $r6.<com.aishukeclassmfkb.util.UserTask$InternalHandler: void <init>(com.aishukeclassmfkb.util.UserTask$1)>(null);

        <com.aishukeclassmfkb.util.UserTask: com.aishukeclassmfkb.util.UserTask$InternalHandler sHandler> = $r6;

        return;
    }

    public void <init>()
    {
        com.aishukeclassmfkb.util.UserTask$WorkerRunnable $r1;
        com.aishukeclassmfkb.util.UserTask$3 $r4;
        com.aishukeclassmfkb.util.UserTask$2 $r3;
        com.aishukeclassmfkb.util.UserTask r0;
        com.aishukeclassmfkb.util.UserTask$Status $r2;

        r0 := @this: com.aishukeclassmfkb.util.UserTask;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = <com.aishukeclassmfkb.util.UserTask$Status: com.aishukeclassmfkb.util.UserTask$Status PENDING>;

        r0.<com.aishukeclassmfkb.util.UserTask: com.aishukeclassmfkb.util.UserTask$Status mStatus> = $r2;

        $r3 = new com.aishukeclassmfkb.util.UserTask$2;

        specialinvoke $r3.<com.aishukeclassmfkb.util.UserTask$2: void <init>(com.aishukeclassmfkb.util.UserTask)>(r0);

        r0.<com.aishukeclassmfkb.util.UserTask: com.aishukeclassmfkb.util.UserTask$WorkerRunnable mWorker> = $r3;

        $r4 = new com.aishukeclassmfkb.util.UserTask$3;

        $r1 = r0.<com.aishukeclassmfkb.util.UserTask: com.aishukeclassmfkb.util.UserTask$WorkerRunnable mWorker>;

        specialinvoke $r4.<com.aishukeclassmfkb.util.UserTask$3: void <init>(com.aishukeclassmfkb.util.UserTask,java.util.concurrent.Callable)>(r0, $r1);

        r0.<com.aishukeclassmfkb.util.UserTask: java.util.concurrent.FutureTask mFuture> = $r4;

        return;
    }

    static com.aishukeclassmfkb.util.UserTask$InternalHandler access$200()
    {
        com.aishukeclassmfkb.util.UserTask$InternalHandler r0;

        r0 = <com.aishukeclassmfkb.util.UserTask: com.aishukeclassmfkb.util.UserTask$InternalHandler sHandler>;

        return r0;
    }

    static void access$300(com.aishukeclassmfkb.util.UserTask, java.lang.Object)
    {
        java.lang.Object $r1;
        com.aishukeclassmfkb.util.UserTask $r0;

        $r0 := @parameter0: com.aishukeclassmfkb.util.UserTask;

        $r1 := @parameter1: java.lang.Object;

        specialinvoke $r0.<com.aishukeclassmfkb.util.UserTask: void finish(java.lang.Object)>($r1);

        return;
    }

    private void finish(java.lang.Object)
    {
        java.lang.Object $r1;
        com.aishukeclassmfkb.util.UserTask r0;
        com.aishukeclassmfkb.util.UserTask$Status $r2;

        r0 := @this: com.aishukeclassmfkb.util.UserTask;

        $r1 := @parameter0: java.lang.Object;

        virtualinvoke r0.<com.aishukeclassmfkb.util.UserTask: void onPostExecute(java.lang.Object)>($r1);

        $r2 = <com.aishukeclassmfkb.util.UserTask$Status: com.aishukeclassmfkb.util.UserTask$Status FINISHED>;

        r0.<com.aishukeclassmfkb.util.UserTask: com.aishukeclassmfkb.util.UserTask$Status mStatus> = $r2;

        return;
    }

    public final boolean cancel(boolean)
    {
        java.util.concurrent.FutureTask $r1;
        com.aishukeclassmfkb.util.UserTask r0;
        boolean $z0;

        r0 := @this: com.aishukeclassmfkb.util.UserTask;

        $z0 := @parameter0: boolean;

        $r1 = r0.<com.aishukeclassmfkb.util.UserTask: java.util.concurrent.FutureTask mFuture>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.FutureTask: boolean cancel(boolean)>($z0);

        return $z0;
    }

    public abstract transient java.lang.Object doInBackground(java.lang.Object[]);

    public final transient com.aishukeclassmfkb.util.UserTask execute(java.lang.Object[])
    {
        java.lang.IllegalStateException $r8;
        com.aishukeclassmfkb.util.UserTask$WorkerRunnable $r5;
        java.lang.Object[] $r1;
        java.util.concurrent.ThreadPoolExecutor $r6;
        java.util.concurrent.FutureTask $r7;
        int[] $r4;
        int $i0;
        com.aishukeclassmfkb.util.UserTask r0;
        com.aishukeclassmfkb.util.UserTask$Status $r2, $r3;

        r0 := @this: com.aishukeclassmfkb.util.UserTask;

        $r1 := @parameter0: java.lang.Object[];

        $r2 = r0.<com.aishukeclassmfkb.util.UserTask: com.aishukeclassmfkb.util.UserTask$Status mStatus>;

        $r3 = <com.aishukeclassmfkb.util.UserTask$Status: com.aishukeclassmfkb.util.UserTask$Status PENDING>;

        if $r2 == $r3 goto label1;

        $r4 = <com.aishukeclassmfkb.util.UserTask$4: int[] $SwitchMap$com$aishukeclassmfkb$util$UserTask$Status>;

        $r2 = r0.<com.aishukeclassmfkb.util.UserTask: com.aishukeclassmfkb.util.UserTask$Status mStatus>;

        $i0 = virtualinvoke $r2.<com.aishukeclassmfkb.util.UserTask$Status: int ordinal()>();

        $i0 = $r4[$i0];

        lookupswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label3;
            default: goto label1;
        };

     label1:
        $r2 = <com.aishukeclassmfkb.util.UserTask$Status: com.aishukeclassmfkb.util.UserTask$Status RUNNING>;

        r0.<com.aishukeclassmfkb.util.UserTask: com.aishukeclassmfkb.util.UserTask$Status mStatus> = $r2;

        virtualinvoke r0.<com.aishukeclassmfkb.util.UserTask: void onPreExecute()>();

        $r5 = r0.<com.aishukeclassmfkb.util.UserTask: com.aishukeclassmfkb.util.UserTask$WorkerRunnable mWorker>;

        $r5.<com.aishukeclassmfkb.util.UserTask$WorkerRunnable: java.lang.Object[] mParams> = $r1;

        $r6 = <com.aishukeclassmfkb.util.UserTask: java.util.concurrent.ThreadPoolExecutor sExecutor>;

        $r7 = r0.<com.aishukeclassmfkb.util.UserTask: java.util.concurrent.FutureTask mFuture>;

        virtualinvoke $r6.<java.util.concurrent.ThreadPoolExecutor: void execute(java.lang.Runnable)>($r7);

        return r0;

     label2:
        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot execute task: the task is already running.");

        throw $r8;

     label3:
        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot execute task: the task has already been executed (a task can be executed only once)");

        throw $r8;
    }

    public final java.lang.Object get() throws java.lang.InterruptedException, java.util.concurrent.ExecutionException
    {
        java.util.concurrent.FutureTask $r2;
        java.lang.Object $r1;
        com.aishukeclassmfkb.util.UserTask r0;

        r0 := @this: com.aishukeclassmfkb.util.UserTask;

        $r2 = r0.<com.aishukeclassmfkb.util.UserTask: java.util.concurrent.FutureTask mFuture>;

        $r1 = virtualinvoke $r2.<java.util.concurrent.FutureTask: java.lang.Object get()>();

        return $r1;
    }

    public final java.lang.Object get(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException
    {
        java.util.concurrent.TimeUnit $r1;
        java.util.concurrent.FutureTask $r3;
        long $l0;
        java.lang.Object $r2;
        com.aishukeclassmfkb.util.UserTask r0;

        r0 := @this: com.aishukeclassmfkb.util.UserTask;

        $l0 := @parameter0: long;

        $r1 := @parameter1: java.util.concurrent.TimeUnit;

        $r3 = r0.<com.aishukeclassmfkb.util.UserTask: java.util.concurrent.FutureTask mFuture>;

        $r2 = virtualinvoke $r3.<java.util.concurrent.FutureTask: java.lang.Object get(long,java.util.concurrent.TimeUnit)>($l0, $r1);

        return $r2;
    }

    public final com.aishukeclassmfkb.util.UserTask$Status getStatus()
    {
        com.aishukeclassmfkb.util.UserTask r0;
        com.aishukeclassmfkb.util.UserTask$Status r1;

        r0 := @this: com.aishukeclassmfkb.util.UserTask;

        r1 = r0.<com.aishukeclassmfkb.util.UserTask: com.aishukeclassmfkb.util.UserTask$Status mStatus>;

        return r1;
    }

    public final boolean isCancelled()
    {
        java.util.concurrent.FutureTask $r1;
        com.aishukeclassmfkb.util.UserTask r0;
        boolean $z0;

        r0 := @this: com.aishukeclassmfkb.util.UserTask;

        $r1 = r0.<com.aishukeclassmfkb.util.UserTask: java.util.concurrent.FutureTask mFuture>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.FutureTask: boolean isCancelled()>();

        return $z0;
    }

    public void onCancelled()
    {
        com.aishukeclassmfkb.util.UserTask r0;

        r0 := @this: com.aishukeclassmfkb.util.UserTask;

        return;
    }

    public void onPostExecute(java.lang.Object)
    {
        java.lang.Object $r1;
        com.aishukeclassmfkb.util.UserTask r0;

        r0 := @this: com.aishukeclassmfkb.util.UserTask;

        $r1 := @parameter0: java.lang.Object;

        return;
    }

    public void onPreExecute()
    {
        com.aishukeclassmfkb.util.UserTask r0;

        r0 := @this: com.aishukeclassmfkb.util.UserTask;

        return;
    }

    public transient void onProgressUpdate(java.lang.Object[])
    {
        java.lang.Object[] $r1;
        com.aishukeclassmfkb.util.UserTask r0;

        r0 := @this: com.aishukeclassmfkb.util.UserTask;

        $r1 := @parameter0: java.lang.Object[];

        return;
    }

    protected final transient void publishProgress(java.lang.Object[])
    {
        com.aishukeclassmfkb.util.UserTask$InternalHandler $r4;
        java.lang.Object[] $r1;
        android.os.Message $r3;
        com.aishukeclassmfkb.util.UserTask$UserTaskResult $r2;
        com.aishukeclassmfkb.util.UserTask r0;

        r0 := @this: com.aishukeclassmfkb.util.UserTask;

        $r1 := @parameter0: java.lang.Object[];

        $r4 = <com.aishukeclassmfkb.util.UserTask: com.aishukeclassmfkb.util.UserTask$InternalHandler sHandler>;

        $r2 = new com.aishukeclassmfkb.util.UserTask$UserTaskResult;

        specialinvoke $r2.<com.aishukeclassmfkb.util.UserTask$UserTaskResult: void <init>(com.aishukeclassmfkb.util.UserTask,java.lang.Object[])>(r0, $r1);

        $r3 = virtualinvoke $r4.<com.aishukeclassmfkb.util.UserTask$InternalHandler: android.os.Message obtainMessage(int,java.lang.Object)>(2, $r2);

        virtualinvoke $r3.<android.os.Message: void sendToTarget()>();

        return;
    }
}
