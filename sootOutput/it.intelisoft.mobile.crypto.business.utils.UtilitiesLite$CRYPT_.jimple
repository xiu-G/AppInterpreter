public final class it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$CRYPT_ extends java.lang.Object
{
    final it.intelisoft.mobile.crypto.business.utils.UtilitiesLite this$0;

    public void <init>(it.intelisoft.mobile.crypto.business.utils.UtilitiesLite)
    {
        it.intelisoft.mobile.crypto.business.utils.UtilitiesLite $r1;
        it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$CRYPT_ r0;

        r0 := @this: it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$CRYPT_;

        $r1 := @parameter0: it.intelisoft.mobile.crypto.business.utils.UtilitiesLite;

        r0.<it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$CRYPT_: it.intelisoft.mobile.crypto.business.utils.UtilitiesLite this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.String decrypt(java.lang.String, java.lang.String)
    {
        java.lang.Throwable $r10, $r11, $r13, $r14, $r15, $r16, $r17, $r18, $r19;
        byte[] r5;
        javax.crypto.Cipher $r9;
        javax.crypto.SecretKeyFactory $r7;
        javax.crypto.spec.PBEKeySpec r3;
        it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$CRYPT_ r0;
        java.lang.String $r1, $r2;
        java.io.PrintStream $r12;
        javax.crypto.spec.PBEParameterSpec r4;
        char[] $r6;
        javax.crypto.SecretKey $r8;

        r0 := @this: it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$CRYPT_;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        if $r1 == null goto label01;

        if $r2 != null goto label02;

     label01:
        return null;

     label02:
        r5 = newarray (byte)[8];

        r5[0] = -87;

        r5[1] = -101;

        r5[2] = -56;

        r5[3] = 50;

        r5[4] = 86;

        r5[5] = 52;

        r5[6] = -29;

        r5[7] = 3;

        r3 = new javax.crypto.spec.PBEKeySpec;

     label03:
        $r6 = virtualinvoke $r2.<java.lang.String: char[] toCharArray()>();

        specialinvoke r3.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int)>($r6, r5, 19);

        $r7 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>("PBEWithMD5AndDES");

        $r8 = virtualinvoke $r7.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>(r3);

        $r2 = interfaceinvoke $r8.<javax.crypto.SecretKey: java.lang.String getAlgorithm()>();

        $r9 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r2);

     label04:
        r4 = new javax.crypto.spec.PBEParameterSpec;

     label05:
        specialinvoke r4.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r5, 19);

        virtualinvoke $r9.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(2, $r8, r4);

        r5 = staticinvoke <it.intelisoft.mobile.crypto.business.utils.Base64: byte[] decode(java.lang.String)>($r1);

        r5 = virtualinvoke $r9.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r5);

     label06:
        $r1 = new java.lang.String;

     label07:
        specialinvoke $r1.<java.lang.String: void <init>(byte[],java.lang.String)>(r5, "UTF8");

     label08:
        return $r1;

     label09:
        $r10 := @caughtexception;

     label10:
        return null;

     label11:
        $r11 := @caughtexception;

        $r12 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>("EXCEPTION: InvalidAlgorithmParameterException");

        goto label10;

     label12:
        $r13 := @caughtexception;

        $r12 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>("EXCEPTION: InvalidKeySpecException");

        goto label10;

     label13:
        $r14 := @caughtexception;

        $r12 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>("EXCEPTION: NoSuchPaddingException");

        goto label10;

     label14:
        $r15 := @caughtexception;

        $r12 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>("EXCEPTION: NoSuchAlgorithmException");

        goto label10;

     label15:
        $r16 := @caughtexception;

        $r12 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>("EXCEPTION: InvalidKeyException");

        goto label10;

     label16:
        $r17 := @caughtexception;

        $r12 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>("EXCEPTION: InvalidKeyException");

        goto label10;

     label17:
        $r18 := @caughtexception;

        goto label10;

     label18:
        $r19 := @caughtexception;

        goto label10;

        catch javax.crypto.BadPaddingException from label03 to label04 with label09;
        catch javax.crypto.BadPaddingException from label05 to label06 with label09;
        catch javax.crypto.BadPaddingException from label07 to label08 with label09;
        catch javax.crypto.IllegalBlockSizeException from label03 to label04 with label18;
        catch javax.crypto.IllegalBlockSizeException from label05 to label06 with label18;
        catch javax.crypto.IllegalBlockSizeException from label07 to label08 with label18;
        catch java.io.UnsupportedEncodingException from label03 to label04 with label17;
        catch java.io.UnsupportedEncodingException from label05 to label06 with label17;
        catch java.io.UnsupportedEncodingException from label07 to label08 with label17;
        catch java.security.InvalidAlgorithmParameterException from label03 to label04 with label11;
        catch java.security.InvalidAlgorithmParameterException from label05 to label06 with label11;
        catch java.security.InvalidAlgorithmParameterException from label07 to label08 with label11;
        catch java.security.spec.InvalidKeySpecException from label03 to label04 with label12;
        catch java.security.spec.InvalidKeySpecException from label05 to label06 with label12;
        catch java.security.spec.InvalidKeySpecException from label07 to label08 with label12;
        catch javax.crypto.NoSuchPaddingException from label03 to label04 with label13;
        catch javax.crypto.NoSuchPaddingException from label05 to label06 with label13;
        catch javax.crypto.NoSuchPaddingException from label07 to label08 with label13;
        catch java.security.NoSuchAlgorithmException from label03 to label04 with label14;
        catch java.security.NoSuchAlgorithmException from label05 to label06 with label14;
        catch java.security.NoSuchAlgorithmException from label07 to label08 with label14;
        catch java.security.InvalidKeyException from label03 to label04 with label15;
        catch java.security.InvalidKeyException from label05 to label06 with label15;
        catch java.security.InvalidKeyException from label07 to label08 with label15;
        catch java.io.IOException from label03 to label04 with label16;
        catch java.io.IOException from label05 to label06 with label16;
        catch java.io.IOException from label07 to label08 with label16;
    }

    public java.lang.String encrypt(java.lang.String, java.lang.String)
    {
        java.lang.Throwable $r10, $r12, $r13, $r14, $r15, $r16, $r17, $r18;
        byte[] r5;
        javax.crypto.Cipher $r9;
        javax.crypto.SecretKeyFactory $r7;
        javax.crypto.spec.PBEKeySpec r3;
        it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$CRYPT_ r0;
        java.lang.String $r1, $r2;
        java.io.PrintStream $r11;
        javax.crypto.spec.PBEParameterSpec r4;
        char[] $r6;
        javax.crypto.SecretKey $r8;

        r0 := @this: it.intelisoft.mobile.crypto.business.utils.UtilitiesLite$CRYPT_;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        if $r1 == null goto label01;

        if $r2 != null goto label02;

     label01:
        return null;

     label02:
        r5 = newarray (byte)[8];

        r5[0] = -87;

        r5[1] = -101;

        r5[2] = -56;

        r5[3] = 50;

        r5[4] = 86;

        r5[5] = 52;

        r5[6] = -29;

        r5[7] = 3;

        r3 = new javax.crypto.spec.PBEKeySpec;

     label03:
        $r6 = virtualinvoke $r2.<java.lang.String: char[] toCharArray()>();

        specialinvoke r3.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int)>($r6, r5, 19);

        $r7 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>("PBEWithMD5AndDES");

        $r8 = virtualinvoke $r7.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>(r3);

        $r2 = interfaceinvoke $r8.<javax.crypto.SecretKey: java.lang.String getAlgorithm()>();

        $r9 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r2);

     label04:
        r4 = new javax.crypto.spec.PBEParameterSpec;

     label05:
        specialinvoke r4.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r5, 19);

        virtualinvoke $r9.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(1, $r8, r4);

        r5 = virtualinvoke $r1.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF8");

        r5 = virtualinvoke $r9.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r5);

        $r1 = staticinvoke <it.intelisoft.mobile.crypto.business.utils.Base64: java.lang.String encodeBytes(byte[])>(r5);

     label06:
        return $r1;

     label07:
        $r10 := @caughtexception;

        $r11 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>("EXCEPTION: InvalidAlgorithmParameterException");

     label08:
        return null;

     label09:
        $r12 := @caughtexception;

        $r11 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>("EXCEPTION: InvalidKeySpecException");

        goto label08;

     label10:
        $r13 := @caughtexception;

        $r11 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>("EXCEPTION: NoSuchPaddingException");

        goto label08;

     label11:
        $r14 := @caughtexception;

        $r11 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>("EXCEPTION: NoSuchAlgorithmException");

        goto label08;

     label12:
        $r15 := @caughtexception;

        $r11 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>("EXCEPTION: InvalidKeyException");

        goto label08;

     label13:
        $r16 := @caughtexception;

        goto label08;

     label14:
        $r17 := @caughtexception;

        goto label08;

     label15:
        $r18 := @caughtexception;

        goto label08;

        catch javax.crypto.BadPaddingException from label03 to label04 with label15;
        catch javax.crypto.BadPaddingException from label05 to label06 with label15;
        catch javax.crypto.IllegalBlockSizeException from label03 to label04 with label14;
        catch javax.crypto.IllegalBlockSizeException from label05 to label06 with label14;
        catch java.io.UnsupportedEncodingException from label03 to label04 with label13;
        catch java.io.UnsupportedEncodingException from label05 to label06 with label13;
        catch java.security.InvalidAlgorithmParameterException from label03 to label04 with label07;
        catch java.security.InvalidAlgorithmParameterException from label05 to label06 with label07;
        catch java.security.spec.InvalidKeySpecException from label03 to label04 with label09;
        catch java.security.spec.InvalidKeySpecException from label05 to label06 with label09;
        catch javax.crypto.NoSuchPaddingException from label03 to label04 with label10;
        catch javax.crypto.NoSuchPaddingException from label05 to label06 with label10;
        catch java.security.NoSuchAlgorithmException from label03 to label04 with label11;
        catch java.security.NoSuchAlgorithmException from label05 to label06 with label11;
        catch java.security.InvalidKeyException from label03 to label04 with label12;
        catch java.security.InvalidKeyException from label05 to label06 with label12;
    }
}
