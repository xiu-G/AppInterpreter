public final class cs.gson.Gson extends java.lang.Object
{
    static final boolean DEFAULT_JSON_NON_EXECUTABLE;
    private static final java.lang.String JSON_NON_EXECUTABLE_PREFIX;
    private final java.lang.ThreadLocal calls;
    private final cs.gson.internal.ConstructorConstructor constructorConstructor;
    final cs.gson.JsonDeserializationContext deserializationContext;
    private final java.util.List factories;
    private final boolean generateNonExecutableJson;
    private final boolean htmlSafe;
    private final boolean prettyPrinting;
    final cs.gson.JsonSerializationContext serializationContext;
    private final boolean serializeNulls;
    private final java.util.Map typeTokenCache;

    public void <init>()
    {
        java.util.List $r5;
        cs.gson.Gson r0;
        cs.gson.internal.Excluder $r1;
        java.util.Map $r4;
        cs.gson.LongSerializationPolicy $r3;
        cs.gson.FieldNamingPolicy $r2;

        r0 := @this: cs.gson.Gson;

        $r1 = <cs.gson.internal.Excluder: cs.gson.internal.Excluder DEFAULT>;

        $r2 = <cs.gson.FieldNamingPolicy: cs.gson.FieldNamingPolicy IDENTITY>;

        $r4 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        $r3 = <cs.gson.LongSerializationPolicy: cs.gson.LongSerializationPolicy DEFAULT>;

        $r5 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        specialinvoke r0.<cs.gson.Gson: void <init>(cs.gson.internal.Excluder,cs.gson.FieldNamingStrategy,java.util.Map,boolean,boolean,boolean,boolean,boolean,boolean,cs.gson.LongSerializationPolicy,java.util.List)>($r1, $r2, $r4, 0, 0, 0, 1, 0, 0, $r3, $r5);

        return;
    }

    void <init>(cs.gson.internal.Excluder, cs.gson.FieldNamingStrategy, java.util.Map, boolean, boolean, boolean, boolean, boolean, boolean, cs.gson.LongSerializationPolicy, java.util.List)
    {
        cs.gson.FieldNamingStrategy $r2;
        java.util.HashMap $r8;
        java.util.ArrayList r6;
        java.util.Map r3, $r9;
        cs.gson.internal.bind.ReflectiveTypeAdapterFactory $r18;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.ThreadLocal $r7;
        cs.gson.internal.Excluder $r1;
        cs.gson.TypeAdapterFactory $r13;
        cs.gson.internal.bind.CollectionTypeAdapterFactory $r16;
        cs.gson.LongSerializationPolicy $r4;
        java.util.List r5;
        cs.gson.TypeAdapter $r15;
        cs.gson.Gson r0;
        cs.gson.Gson$2 $r11;
        cs.gson.internal.ConstructorConstructor $r12;
        cs.gson.Gson$1 $r10;
        cs.gson.internal.bind.MapTypeAdapterFactory $r17;
        java.lang.Class $r14;

        r0 := @this: cs.gson.Gson;

        $r1 := @parameter0: cs.gson.internal.Excluder;

        $r2 := @parameter1: cs.gson.FieldNamingStrategy;

        r3 := @parameter2: java.util.Map;

        $z0 := @parameter3: boolean;

        $z1 := @parameter4: boolean;

        $z2 := @parameter5: boolean;

        $z3 := @parameter6: boolean;

        $z4 := @parameter7: boolean;

        $z5 := @parameter8: boolean;

        $r4 := @parameter9: cs.gson.LongSerializationPolicy;

        r5 := @parameter10: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r7 = new java.lang.ThreadLocal;

        specialinvoke $r7.<java.lang.ThreadLocal: void <init>()>();

        r0.<cs.gson.Gson: java.lang.ThreadLocal calls> = $r7;

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        $r9 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>($r8);

        r0.<cs.gson.Gson: java.util.Map typeTokenCache> = $r9;

        $r10 = new cs.gson.Gson$1;

        specialinvoke $r10.<cs.gson.Gson$1: void <init>(cs.gson.Gson)>(r0);

        r0.<cs.gson.Gson: cs.gson.JsonDeserializationContext deserializationContext> = $r10;

        $r11 = new cs.gson.Gson$2;

        specialinvoke $r11.<cs.gson.Gson$2: void <init>(cs.gson.Gson)>(r0);

        r0.<cs.gson.Gson: cs.gson.JsonSerializationContext serializationContext> = $r11;

        $r12 = new cs.gson.internal.ConstructorConstructor;

        specialinvoke $r12.<cs.gson.internal.ConstructorConstructor: void <init>(java.util.Map)>(r3);

        r0.<cs.gson.Gson: cs.gson.internal.ConstructorConstructor constructorConstructor> = $r12;

        r0.<cs.gson.Gson: boolean serializeNulls> = $z0;

        r0.<cs.gson.Gson: boolean generateNonExecutableJson> = $z2;

        r0.<cs.gson.Gson: boolean htmlSafe> = $z3;

        r0.<cs.gson.Gson: boolean prettyPrinting> = $z4;

        r6 = new java.util.ArrayList;

        specialinvoke r6.<java.util.ArrayList: void <init>()>();

        $r13 = <cs.gson.internal.bind.TypeAdapters: cs.gson.TypeAdapterFactory JSON_ELEMENT_FACTORY>;

        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>($r13);

        $r13 = <cs.gson.internal.bind.ObjectTypeAdapter: cs.gson.TypeAdapterFactory FACTORY>;

        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>($r13);

        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>($r1);

        interfaceinvoke r6.<java.util.List: boolean addAll(java.util.Collection)>(r5);

        $r13 = <cs.gson.internal.bind.TypeAdapters: cs.gson.TypeAdapterFactory STRING_FACTORY>;

        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>($r13);

        $r13 = <cs.gson.internal.bind.TypeAdapters: cs.gson.TypeAdapterFactory INTEGER_FACTORY>;

        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>($r13);

        $r13 = <cs.gson.internal.bind.TypeAdapters: cs.gson.TypeAdapterFactory BOOLEAN_FACTORY>;

        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>($r13);

        $r13 = <cs.gson.internal.bind.TypeAdapters: cs.gson.TypeAdapterFactory BYTE_FACTORY>;

        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>($r13);

        $r13 = <cs.gson.internal.bind.TypeAdapters: cs.gson.TypeAdapterFactory SHORT_FACTORY>;

        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>($r13);

        $r14 = <java.lang.Long: java.lang.Class TYPE>;

        $r15 = specialinvoke r0.<cs.gson.Gson: cs.gson.TypeAdapter longAdapter(cs.gson.LongSerializationPolicy)>($r4);

        $r13 = staticinvoke <cs.gson.internal.bind.TypeAdapters: cs.gson.TypeAdapterFactory newFactory(java.lang.Class,java.lang.Class,cs.gson.TypeAdapter)>($r14, class "Ljava/lang/Long;", $r15);

        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>($r13);

        $r14 = <java.lang.Double: java.lang.Class TYPE>;

        $r15 = specialinvoke r0.<cs.gson.Gson: cs.gson.TypeAdapter doubleAdapter(boolean)>($z5);

        $r13 = staticinvoke <cs.gson.internal.bind.TypeAdapters: cs.gson.TypeAdapterFactory newFactory(java.lang.Class,java.lang.Class,cs.gson.TypeAdapter)>($r14, class "Ljava/lang/Double;", $r15);

        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>($r13);

        $r14 = <java.lang.Float: java.lang.Class TYPE>;

        $r15 = specialinvoke r0.<cs.gson.Gson: cs.gson.TypeAdapter floatAdapter(boolean)>($z5);

        $r13 = staticinvoke <cs.gson.internal.bind.TypeAdapters: cs.gson.TypeAdapterFactory newFactory(java.lang.Class,java.lang.Class,cs.gson.TypeAdapter)>($r14, class "Ljava/lang/Float;", $r15);

        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>($r13);

        $r13 = <cs.gson.internal.bind.TypeAdapters: cs.gson.TypeAdapterFactory NUMBER_FACTORY>;

        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>($r13);

        $r13 = <cs.gson.internal.bind.TypeAdapters: cs.gson.TypeAdapterFactory CHARACTER_FACTORY>;

        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>($r13);

        $r13 = <cs.gson.internal.bind.TypeAdapters: cs.gson.TypeAdapterFactory STRING_BUILDER_FACTORY>;

        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>($r13);

        $r13 = <cs.gson.internal.bind.TypeAdapters: cs.gson.TypeAdapterFactory STRING_BUFFER_FACTORY>;

        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>($r13);

        $r15 = <cs.gson.internal.bind.TypeAdapters: cs.gson.TypeAdapter BIG_DECIMAL>;

        $r13 = staticinvoke <cs.gson.internal.bind.TypeAdapters: cs.gson.TypeAdapterFactory newFactory(java.lang.Class,cs.gson.TypeAdapter)>(class "Ljava/math/BigDecimal;", $r15);

        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>($r13);

        $r15 = <cs.gson.internal.bind.TypeAdapters: cs.gson.TypeAdapter BIG_INTEGER>;

        $r13 = staticinvoke <cs.gson.internal.bind.TypeAdapters: cs.gson.TypeAdapterFactory newFactory(java.lang.Class,cs.gson.TypeAdapter)>(class "Ljava/math/BigInteger;", $r15);

        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>($r13);

        $r13 = <cs.gson.internal.bind.TypeAdapters: cs.gson.TypeAdapterFactory URL_FACTORY>;

        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>($r13);

        $r13 = <cs.gson.internal.bind.TypeAdapters: cs.gson.TypeAdapterFactory URI_FACTORY>;

        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>($r13);

        $r13 = <cs.gson.internal.bind.TypeAdapters: cs.gson.TypeAdapterFactory UUID_FACTORY>;

        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>($r13);

        $r13 = <cs.gson.internal.bind.TypeAdapters: cs.gson.TypeAdapterFactory LOCALE_FACTORY>;

        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>($r13);

        $r13 = <cs.gson.internal.bind.TypeAdapters: cs.gson.TypeAdapterFactory INET_ADDRESS_FACTORY>;

        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>($r13);

        $r13 = <cs.gson.internal.bind.TypeAdapters: cs.gson.TypeAdapterFactory BIT_SET_FACTORY>;

        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>($r13);

        $r13 = <cs.gson.internal.bind.DateTypeAdapter: cs.gson.TypeAdapterFactory FACTORY>;

        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>($r13);

        $r13 = <cs.gson.internal.bind.TypeAdapters: cs.gson.TypeAdapterFactory CALENDAR_FACTORY>;

        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>($r13);

        $r13 = <cs.gson.internal.bind.TimeTypeAdapter: cs.gson.TypeAdapterFactory FACTORY>;

        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>($r13);

        $r13 = <cs.gson.internal.bind.SqlDateTypeAdapter: cs.gson.TypeAdapterFactory FACTORY>;

        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>($r13);

        $r13 = <cs.gson.internal.bind.TypeAdapters: cs.gson.TypeAdapterFactory TIMESTAMP_FACTORY>;

        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>($r13);

        $r13 = <cs.gson.internal.bind.ArrayTypeAdapter: cs.gson.TypeAdapterFactory FACTORY>;

        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>($r13);

        $r13 = <cs.gson.internal.bind.TypeAdapters: cs.gson.TypeAdapterFactory ENUM_FACTORY>;

        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>($r13);

        $r13 = <cs.gson.internal.bind.TypeAdapters: cs.gson.TypeAdapterFactory CLASS_FACTORY>;

        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>($r13);

        $r16 = new cs.gson.internal.bind.CollectionTypeAdapterFactory;

        $r12 = r0.<cs.gson.Gson: cs.gson.internal.ConstructorConstructor constructorConstructor>;

        specialinvoke $r16.<cs.gson.internal.bind.CollectionTypeAdapterFactory: void <init>(cs.gson.internal.ConstructorConstructor)>($r12);

        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>($r16);

        $r17 = new cs.gson.internal.bind.MapTypeAdapterFactory;

        $r12 = r0.<cs.gson.Gson: cs.gson.internal.ConstructorConstructor constructorConstructor>;

        specialinvoke $r17.<cs.gson.internal.bind.MapTypeAdapterFactory: void <init>(cs.gson.internal.ConstructorConstructor,boolean)>($r12, $z1);

        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>($r17);

        $r18 = new cs.gson.internal.bind.ReflectiveTypeAdapterFactory;

        $r12 = r0.<cs.gson.Gson: cs.gson.internal.ConstructorConstructor constructorConstructor>;

        specialinvoke $r18.<cs.gson.internal.bind.ReflectiveTypeAdapterFactory: void <init>(cs.gson.internal.ConstructorConstructor,cs.gson.FieldNamingStrategy,cs.gson.internal.Excluder)>($r12, $r2, $r1);

        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>($r18);

        r5 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r6);

        r0.<cs.gson.Gson: java.util.List factories> = r5;

        return;
    }

    static void access$0(cs.gson.Gson, double)
    {
        cs.gson.Gson $r0;
        double $d0;

        $r0 := @parameter0: cs.gson.Gson;

        $d0 := @parameter1: double;

        specialinvoke $r0.<cs.gson.Gson: void checkValidFloatingPoint(double)>($d0);

        return;
    }

    private static void assertFullConsumption(java.lang.Object, cs.gson.stream.JsonReader)
    {
        java.lang.Throwable r7;
        cs.gson.stream.MalformedJsonException r5;
        cs.gson.stream.JsonReader $r1;
        cs.gson.JsonSyntaxException $r6;
        cs.gson.JsonIOException $r4;
        java.lang.Object $r0;
        cs.gson.stream.JsonToken $r2, $r3;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: cs.gson.stream.JsonReader;

        if $r0 == null goto label7;

     label1:
        $r2 = virtualinvoke $r1.<cs.gson.stream.JsonReader: cs.gson.stream.JsonToken peek()>();

     label2:
        $r3 = <cs.gson.stream.JsonToken: cs.gson.stream.JsonToken END_DOCUMENT>;

        if $r2 == $r3 goto label7;

        $r4 = new cs.gson.JsonIOException;

     label3:
        specialinvoke $r4.<cs.gson.JsonIOException: void <init>(java.lang.String)>("JSON document was not fully consumed.");

     label4:
        throw $r4;

     label5:
        r5 := @caughtexception;

        $r6 = new cs.gson.JsonSyntaxException;

        specialinvoke $r6.<cs.gson.JsonSyntaxException: void <init>(java.lang.Throwable)>(r5);

        throw $r6;

     label6:
        r7 := @caughtexception;

        $r4 = new cs.gson.JsonIOException;

        specialinvoke $r4.<cs.gson.JsonIOException: void <init>(java.lang.Throwable)>(r7);

        throw $r4;

     label7:
        return;

        catch cs.gson.stream.MalformedJsonException from label1 to label2 with label5;
        catch cs.gson.stream.MalformedJsonException from label3 to label4 with label5;
        catch java.io.IOException from label1 to label2 with label6;
        catch java.io.IOException from label3 to label4 with label6;
    }

    private void checkValidFloatingPoint(double)
    {
        cs.gson.Gson r0;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.lang.IllegalArgumentException $r1;
        double $d0;
        boolean $z0;

        r0 := @this: cs.gson.Gson;

        $d0 := @parameter0: double;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 != 0 goto label1;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d0);

        if $z0 == 0 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(double)>($d0);

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a valid double value as per JSON specification. To override this");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label2:
        return;
    }

    private cs.gson.TypeAdapter doubleAdapter(boolean)
    {
        cs.gson.TypeAdapter r2;
        cs.gson.Gson r0;
        cs.gson.Gson$3 $r1;
        boolean $z0;

        r0 := @this: cs.gson.Gson;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label1;

        r2 = <cs.gson.internal.bind.TypeAdapters: cs.gson.TypeAdapter DOUBLE>;

        return r2;

     label1:
        $r1 = new cs.gson.Gson$3;

        specialinvoke $r1.<cs.gson.Gson$3: void <init>(cs.gson.Gson)>(r0);

        return $r1;
    }

    private cs.gson.TypeAdapter floatAdapter(boolean)
    {
        cs.gson.TypeAdapter r2;
        cs.gson.Gson r0;
        cs.gson.Gson$4 $r1;
        boolean $z0;

        r0 := @this: cs.gson.Gson;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label1;

        r2 = <cs.gson.internal.bind.TypeAdapters: cs.gson.TypeAdapter FLOAT>;

        return r2;

     label1:
        $r1 = new cs.gson.Gson$4;

        specialinvoke $r1.<cs.gson.Gson$4: void <init>(cs.gson.Gson)>(r0);

        return $r1;
    }

    private cs.gson.TypeAdapter longAdapter(cs.gson.LongSerializationPolicy)
    {
        cs.gson.TypeAdapter r4;
        cs.gson.Gson r0;
        cs.gson.LongSerializationPolicy $r1, $r2;
        cs.gson.Gson$5 $r3;

        r0 := @this: cs.gson.Gson;

        $r1 := @parameter0: cs.gson.LongSerializationPolicy;

        $r2 = <cs.gson.LongSerializationPolicy: cs.gson.LongSerializationPolicy DEFAULT>;

        if $r1 != $r2 goto label1;

        r4 = <cs.gson.internal.bind.TypeAdapters: cs.gson.TypeAdapter LONG>;

        return r4;

     label1:
        $r3 = new cs.gson.Gson$5;

        specialinvoke $r3.<cs.gson.Gson$5: void <init>(cs.gson.Gson)>(r0);

        return $r3;
    }

    private cs.gson.stream.JsonWriter newJsonWriter(java.io.Writer) throws java.io.IOException
    {
        cs.gson.Gson r0;
        java.io.Writer $r1;
        cs.gson.stream.JsonWriter r2;
        boolean $z0;

        r0 := @this: cs.gson.Gson;

        $r1 := @parameter0: java.io.Writer;

        $z0 = r0.<cs.gson.Gson: boolean generateNonExecutableJson>;

        if $z0 == 0 goto label1;

        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>(")]}\'\n");

     label1:
        r2 = new cs.gson.stream.JsonWriter;

        specialinvoke r2.<cs.gson.stream.JsonWriter: void <init>(java.io.Writer)>($r1);

        $z0 = r0.<cs.gson.Gson: boolean prettyPrinting>;

        if $z0 == 0 goto label2;

        virtualinvoke r2.<cs.gson.stream.JsonWriter: void setIndent(java.lang.String)>("  ");

     label2:
        $z0 = r0.<cs.gson.Gson: boolean serializeNulls>;

        virtualinvoke r2.<cs.gson.stream.JsonWriter: void setSerializeNulls(boolean)>($z0);

        return r2;
    }

    public java.lang.Object fromJson(cs.gson.JsonElement, java.lang.Class) throws cs.gson.JsonSyntaxException
    {
        cs.gson.Gson r0;
        cs.gson.JsonElement $r1;
        java.lang.Class r2;
        java.lang.Object $r3;

        r0 := @this: cs.gson.Gson;

        $r1 := @parameter0: cs.gson.JsonElement;

        r2 := @parameter1: java.lang.Class;

        $r3 = virtualinvoke r0.<cs.gson.Gson: java.lang.Object fromJson(cs.gson.JsonElement,java.lang.reflect.Type)>($r1, r2);

        r2 = staticinvoke <cs.gson.internal.Primitives: java.lang.Class wrap(java.lang.Class)>(r2);

        $r3 = virtualinvoke r2.<java.lang.Class: java.lang.Object cast(java.lang.Object)>($r3);

        return $r3;
    }

    public java.lang.Object fromJson(cs.gson.JsonElement, java.lang.reflect.Type) throws cs.gson.JsonSyntaxException
    {
        cs.gson.internal.bind.JsonTreeReader $r4;
        cs.gson.Gson r0;
        java.lang.reflect.Type $r2;
        cs.gson.JsonElement $r1;
        java.lang.Object $r3;

        r0 := @this: cs.gson.Gson;

        $r1 := @parameter0: cs.gson.JsonElement;

        $r2 := @parameter1: java.lang.reflect.Type;

        if $r1 != null goto label1;

        return null;

     label1:
        $r4 = new cs.gson.internal.bind.JsonTreeReader;

        specialinvoke $r4.<cs.gson.internal.bind.JsonTreeReader: void <init>(cs.gson.JsonElement)>($r1);

        $r3 = virtualinvoke r0.<cs.gson.Gson: java.lang.Object fromJson(cs.gson.stream.JsonReader,java.lang.reflect.Type)>($r4, $r2);

        return $r3;
    }

    public java.lang.Object fromJson(cs.gson.stream.JsonReader, java.lang.reflect.Type) throws cs.gson.JsonIOException, cs.gson.JsonSyntaxException
    {
        java.lang.Throwable r6, $r8, r9, r10;
        cs.gson.stream.JsonReader $r1;
        cs.gson.JsonSyntaxException $r7;
        cs.gson.TypeAdapter $r4;
        cs.gson.Gson r0;
        java.lang.reflect.Type $r2;
        java.lang.Object $r5;
        cs.gson.reflect.TypeToken $r3;
        boolean z0, $z1;

        r0 := @this: cs.gson.Gson;

        $r1 := @parameter0: cs.gson.stream.JsonReader;

        $r2 := @parameter1: java.lang.reflect.Type;

        z0 = 1;

        $z1 = virtualinvoke $r1.<cs.gson.stream.JsonReader: boolean isLenient()>();

        virtualinvoke $r1.<cs.gson.stream.JsonReader: void setLenient(boolean)>(1);

     label01:
        virtualinvoke $r1.<cs.gson.stream.JsonReader: cs.gson.stream.JsonToken peek()>();

     label02:
        z0 = 0;

     label03:
        $r3 = staticinvoke <cs.gson.reflect.TypeToken: cs.gson.reflect.TypeToken get(java.lang.reflect.Type)>($r2);

        $r4 = virtualinvoke r0.<cs.gson.Gson: cs.gson.TypeAdapter getAdapter(cs.gson.reflect.TypeToken)>($r3);

        $r5 = virtualinvoke $r4.<cs.gson.TypeAdapter: java.lang.Object read(cs.gson.stream.JsonReader)>($r1);

     label04:
        virtualinvoke $r1.<cs.gson.stream.JsonReader: void setLenient(boolean)>($z1);

        return $r5;

     label05:
        r6 := @caughtexception;

        if z0 == 0 goto label06;

        virtualinvoke $r1.<cs.gson.stream.JsonReader: void setLenient(boolean)>($z1);

        return null;

     label06:
        $r7 = new cs.gson.JsonSyntaxException;

        specialinvoke $r7.<cs.gson.JsonSyntaxException: void <init>(java.lang.Throwable)>(r6);

        throw $r7;

     label07:
        $r8 := @caughtexception;

        virtualinvoke $r1.<cs.gson.stream.JsonReader: void setLenient(boolean)>($z1);

        throw $r8;

     label08:
        r9 := @caughtexception;

     label09:
        $r7 = new cs.gson.JsonSyntaxException;

        specialinvoke $r7.<cs.gson.JsonSyntaxException: void <init>(java.lang.Throwable)>(r9);

        throw $r7;

     label10:
        r10 := @caughtexception;

     label11:
        $r7 = new cs.gson.JsonSyntaxException;

        specialinvoke $r7.<cs.gson.JsonSyntaxException: void <init>(java.lang.Throwable)>(r10);

        throw $r7;

     label12:
        nop;

        catch java.io.EOFException from label01 to label02 with label05;
        catch java.io.EOFException from label03 to label04 with label05;
        catch java.lang.IllegalStateException from label01 to label02 with label08;
        catch java.lang.IllegalStateException from label03 to label04 with label08;
        catch java.io.IOException from label01 to label02 with label10;
        catch java.io.IOException from label03 to label04 with label10;
        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label06 to label07 with label07;
        catch java.lang.Throwable from label09 to label10 with label07;
        catch java.lang.Throwable from label11 to label12 with label07;
    }

    public java.lang.Object fromJson(java.io.Reader, java.lang.Class) throws cs.gson.JsonSyntaxException, cs.gson.JsonIOException
    {
        cs.gson.Gson r0;
        java.lang.Class r2;
        java.lang.Object $r4;
        java.io.Reader $r1;
        cs.gson.stream.JsonReader r3;

        r0 := @this: cs.gson.Gson;

        $r1 := @parameter0: java.io.Reader;

        r2 := @parameter1: java.lang.Class;

        r3 = new cs.gson.stream.JsonReader;

        specialinvoke r3.<cs.gson.stream.JsonReader: void <init>(java.io.Reader)>($r1);

        $r4 = virtualinvoke r0.<cs.gson.Gson: java.lang.Object fromJson(cs.gson.stream.JsonReader,java.lang.reflect.Type)>(r3, r2);

        staticinvoke <cs.gson.Gson: void assertFullConsumption(java.lang.Object,cs.gson.stream.JsonReader)>($r4, r3);

        r2 = staticinvoke <cs.gson.internal.Primitives: java.lang.Class wrap(java.lang.Class)>(r2);

        $r4 = virtualinvoke r2.<java.lang.Class: java.lang.Object cast(java.lang.Object)>($r4);

        return $r4;
    }

    public java.lang.Object fromJson(java.io.Reader, java.lang.reflect.Type) throws cs.gson.JsonIOException, cs.gson.JsonSyntaxException
    {
        cs.gson.Gson r0;
        java.lang.reflect.Type $r2;
        java.lang.Object $r4;
        java.io.Reader $r1;
        cs.gson.stream.JsonReader r3;

        r0 := @this: cs.gson.Gson;

        $r1 := @parameter0: java.io.Reader;

        $r2 := @parameter1: java.lang.reflect.Type;

        r3 = new cs.gson.stream.JsonReader;

        specialinvoke r3.<cs.gson.stream.JsonReader: void <init>(java.io.Reader)>($r1);

        $r4 = virtualinvoke r0.<cs.gson.Gson: java.lang.Object fromJson(cs.gson.stream.JsonReader,java.lang.reflect.Type)>(r3, $r2);

        staticinvoke <cs.gson.Gson: void assertFullConsumption(java.lang.Object,cs.gson.stream.JsonReader)>($r4, r3);

        return $r4;
    }

    public java.lang.Object fromJson(java.lang.String, java.lang.Class) throws cs.gson.JsonSyntaxException
    {
        cs.gson.Gson r0;
        java.lang.Class r2;
        java.lang.Object $r3;
        java.lang.String $r1;

        r0 := @this: cs.gson.Gson;

        $r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class;

        $r3 = virtualinvoke r0.<cs.gson.Gson: java.lang.Object fromJson(java.lang.String,java.lang.reflect.Type)>($r1, r2);

        r2 = staticinvoke <cs.gson.internal.Primitives: java.lang.Class wrap(java.lang.Class)>(r2);

        $r3 = virtualinvoke r2.<java.lang.Class: java.lang.Object cast(java.lang.Object)>($r3);

        return $r3;
    }

    public java.lang.Object fromJson(java.lang.String, java.lang.reflect.Type) throws cs.gson.JsonSyntaxException
    {
        cs.gson.Gson r0;
        java.io.StringReader r3;
        java.lang.reflect.Type $r2;
        java.lang.Object $r4;
        java.lang.String $r1;

        r0 := @this: cs.gson.Gson;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.reflect.Type;

        if $r1 != null goto label1;

        return null;

     label1:
        r3 = new java.io.StringReader;

        specialinvoke r3.<java.io.StringReader: void <init>(java.lang.String)>($r1);

        $r4 = virtualinvoke r0.<cs.gson.Gson: java.lang.Object fromJson(java.io.Reader,java.lang.reflect.Type)>(r3, $r2);

        return $r4;
    }

    public cs.gson.TypeAdapter getAdapter(cs.gson.reflect.TypeToken)
    {
        java.lang.Throwable $r13;
        java.util.HashMap $r15;
        java.util.Map $r3;
        java.lang.String $r12;
        boolean z0, $z1;
        java.lang.ThreadLocal $r6;
        java.util.Iterator $r9;
        cs.gson.TypeAdapterFactory r14;
        java.lang.IllegalArgumentException $r10, $r18;
        cs.gson.Gson$FutureTypeAdapter r2, $r16;
        java.util.List $r8;
        cs.gson.TypeAdapter r5;
        cs.gson.Gson r0;
        java.lang.Object $r4, $r7;
        java.lang.StringBuilder $r11, $r17;
        cs.gson.reflect.TypeToken r1;

        r0 := @this: cs.gson.Gson;

        r1 := @parameter0: cs.gson.reflect.TypeToken;

        $r3 = r0.<cs.gson.Gson: java.util.Map typeTokenCache>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r5 = (cs.gson.TypeAdapter) $r4;

        if r5 == null goto label01;

        return r5;

     label01:
        $r6 = r0.<cs.gson.Gson: java.lang.ThreadLocal calls>;

        $r4 = virtualinvoke $r6.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r4 = (java.util.Map) $r4;

        z0 = 0;

        if $r4 != null goto label02;

        $r15 = new java.util.HashMap;

        $r4 = $r15;

        specialinvoke $r15.<java.util.HashMap: void <init>()>();

        $r6 = r0.<cs.gson.Gson: java.lang.ThreadLocal calls>;

        virtualinvoke $r6.<java.lang.ThreadLocal: void set(java.lang.Object)>($r4);

        z0 = 1;

     label02:
        $r3 = (java.util.Map) $r4;

        $r7 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (cs.gson.Gson$FutureTypeAdapter) $r7;

        if r2 == null goto label03;

        return r2;

     label03:
        $r16 = new cs.gson.Gson$FutureTypeAdapter;

     label04:
        r2 = $r16;

     label05:
        specialinvoke $r16.<cs.gson.Gson$FutureTypeAdapter: void <init>()>();

        $r3 = (java.util.Map) $r4;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        $r8 = r0.<cs.gson.Gson: java.util.List factories>;

        $r9 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z1 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

     label07:
        if $z1 != 0 goto label15;

     label08:
        $r18 = new java.lang.IllegalArgumentException;

     label09:
        $r10 = $r18;

     label10:
        $r17 = new java.lang.StringBuilder;

     label11:
        $r11 = $r17;

     label12:
        specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>("GSON cannot handle ");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r10;

     label13:
        $r13 := @caughtexception;

        $r3 = (java.util.Map) $r4;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        if z0 == 0 goto label14;

        $r6 = r0.<cs.gson.Gson: java.lang.ThreadLocal calls>;

        virtualinvoke $r6.<java.lang.ThreadLocal: void remove()>();

     label14:
        throw $r13;

     label15:
        $r7 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r14 = (cs.gson.TypeAdapterFactory) $r7;

        r5 = interfaceinvoke r14.<cs.gson.TypeAdapterFactory: cs.gson.TypeAdapter create(cs.gson.Gson,cs.gson.reflect.TypeToken)>(r0, r1);

     label16:
        if r5 == null goto label06;

     label17:
        virtualinvoke r2.<cs.gson.Gson$FutureTypeAdapter: void setDelegate(cs.gson.TypeAdapter)>(r5);

        $r3 = r0.<cs.gson.Gson: java.util.Map typeTokenCache>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r5);

     label18:
        $r3 = (java.util.Map) $r4;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        if z0 == 0 goto label19;

        $r6 = r0.<cs.gson.Gson: java.lang.ThreadLocal calls>;

        virtualinvoke $r6.<java.lang.ThreadLocal: void remove()>();

     label19:
        return r5;

        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label05 to label07 with label13;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label10 to label11 with label13;
        catch java.lang.Throwable from label12 to label13 with label13;
        catch java.lang.Throwable from label15 to label16 with label13;
        catch java.lang.Throwable from label17 to label18 with label13;
    }

    public cs.gson.TypeAdapter getAdapter(java.lang.Class)
    {
        cs.gson.TypeAdapter $r3;
        cs.gson.Gson r0;
        java.lang.Class r1;
        cs.gson.reflect.TypeToken $r2;

        r0 := @this: cs.gson.Gson;

        r1 := @parameter0: java.lang.Class;

        $r2 = staticinvoke <cs.gson.reflect.TypeToken: cs.gson.reflect.TypeToken get(java.lang.Class)>(r1);

        $r3 = virtualinvoke r0.<cs.gson.Gson: cs.gson.TypeAdapter getAdapter(cs.gson.reflect.TypeToken)>($r2);

        return $r3;
    }

    public cs.gson.TypeAdapter getDelegateAdapter(cs.gson.TypeAdapterFactory, cs.gson.reflect.TypeToken)
    {
        cs.gson.TypeAdapterFactory $r1, r9;
        java.util.Iterator $r4;
        java.lang.IllegalArgumentException $r5;
        java.util.List $r3;
        cs.gson.TypeAdapter $r10;
        cs.gson.Gson r0;
        java.lang.StringBuilder $r6;
        java.lang.Object $r8;
        java.lang.String $r7;
        cs.gson.reflect.TypeToken r2;
        boolean z0, $z1;

        r0 := @this: cs.gson.Gson;

        $r1 := @parameter0: cs.gson.TypeAdapterFactory;

        r2 := @parameter1: cs.gson.reflect.TypeToken;

        z0 = 0;

        $r3 = r0.<cs.gson.Gson: java.util.List factories>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("GSON cannot serialize ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r5;

     label2:
        $r8 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r9 = (cs.gson.TypeAdapterFactory) $r8;

        if z0 != 0 goto label3;

        if r9 != $r1 goto label1;

        z0 = 1;

        goto label1;

     label3:
        $r10 = interfaceinvoke r9.<cs.gson.TypeAdapterFactory: cs.gson.TypeAdapter create(cs.gson.Gson,cs.gson.reflect.TypeToken)>(r0, r2);

        if $r10 == null goto label1;

        return $r10;
    }

    public java.lang.String toJson(cs.gson.JsonElement)
    {
        cs.gson.Gson r0;
        cs.gson.JsonElement $r1;
        java.io.StringWriter r2;
        java.lang.String $r3;

        r0 := @this: cs.gson.Gson;

        $r1 := @parameter0: cs.gson.JsonElement;

        r2 = new java.io.StringWriter;

        specialinvoke r2.<java.io.StringWriter: void <init>()>();

        virtualinvoke r0.<cs.gson.Gson: void toJson(cs.gson.JsonElement,java.lang.Appendable)>($r1, r2);

        $r3 = virtualinvoke r2.<java.io.StringWriter: java.lang.String toString()>();

        return $r3;
    }

    public java.lang.String toJson(java.lang.Object)
    {
        cs.gson.Gson r0;
        cs.gson.JsonNull $r2;
        java.lang.Object $r1;
        java.lang.Class $r4;
        java.lang.String $r3;

        r0 := @this: cs.gson.Gson;

        $r1 := @parameter0: java.lang.Object;

        if $r1 != null goto label1;

        $r2 = <cs.gson.JsonNull: cs.gson.JsonNull INSTANCE>;

        $r3 = virtualinvoke r0.<cs.gson.Gson: java.lang.String toJson(cs.gson.JsonElement)>($r2);

        return $r3;

     label1:
        $r4 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r0.<cs.gson.Gson: java.lang.String toJson(java.lang.Object,java.lang.reflect.Type)>($r1, $r4);

        return $r3;
    }

    public java.lang.String toJson(java.lang.Object, java.lang.reflect.Type)
    {
        cs.gson.Gson r0;
        java.lang.reflect.Type $r2;
        java.io.StringWriter r3;
        java.lang.Object $r1;
        java.lang.String $r4;

        r0 := @this: cs.gson.Gson;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.reflect.Type;

        r3 = new java.io.StringWriter;

        specialinvoke r3.<java.io.StringWriter: void <init>()>();

        virtualinvoke r0.<cs.gson.Gson: void toJson(java.lang.Object,java.lang.reflect.Type,java.lang.Appendable)>($r1, $r2, r3);

        $r4 = virtualinvoke r3.<java.io.StringWriter: java.lang.String toString()>();

        return $r4;
    }

    public void toJson(cs.gson.JsonElement, cs.gson.stream.JsonWriter) throws cs.gson.JsonIOException
    {
        java.lang.Throwable r3, $r5;
        cs.gson.JsonIOException $r4;
        cs.gson.Gson r0;
        cs.gson.JsonElement $r1;
        cs.gson.stream.JsonWriter $r2;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: cs.gson.Gson;

        $r1 := @parameter0: cs.gson.JsonElement;

        $r2 := @parameter1: cs.gson.stream.JsonWriter;

        $z0 = virtualinvoke $r2.<cs.gson.stream.JsonWriter: boolean isLenient()>();

        virtualinvoke $r2.<cs.gson.stream.JsonWriter: void setLenient(boolean)>(1);

        $z1 = virtualinvoke $r2.<cs.gson.stream.JsonWriter: boolean isHtmlSafe()>();

        $z2 = r0.<cs.gson.Gson: boolean htmlSafe>;

        virtualinvoke $r2.<cs.gson.stream.JsonWriter: void setHtmlSafe(boolean)>($z2);

        $z2 = virtualinvoke $r2.<cs.gson.stream.JsonWriter: boolean getSerializeNulls()>();

        $z3 = r0.<cs.gson.Gson: boolean serializeNulls>;

        virtualinvoke $r2.<cs.gson.stream.JsonWriter: void setSerializeNulls(boolean)>($z3);

     label1:
        staticinvoke <cs.gson.internal.Streams: void write(cs.gson.JsonElement,cs.gson.stream.JsonWriter)>($r1, $r2);

     label2:
        virtualinvoke $r2.<cs.gson.stream.JsonWriter: void setLenient(boolean)>($z0);

        virtualinvoke $r2.<cs.gson.stream.JsonWriter: void setHtmlSafe(boolean)>($z1);

        virtualinvoke $r2.<cs.gson.stream.JsonWriter: void setSerializeNulls(boolean)>($z2);

        return;

     label3:
        r3 := @caughtexception;

     label4:
        $r4 = new cs.gson.JsonIOException;

        specialinvoke $r4.<cs.gson.JsonIOException: void <init>(java.lang.Throwable)>(r3);

        throw $r4;

     label5:
        $r5 := @caughtexception;

        virtualinvoke $r2.<cs.gson.stream.JsonWriter: void setLenient(boolean)>($z0);

        virtualinvoke $r2.<cs.gson.stream.JsonWriter: void setHtmlSafe(boolean)>($z1);

        virtualinvoke $r2.<cs.gson.stream.JsonWriter: void setSerializeNulls(boolean)>($z2);

        throw $r5;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label4 to label5 with label5;
    }

    public void toJson(cs.gson.JsonElement, java.lang.Appendable) throws cs.gson.JsonIOException
    {
        java.lang.Throwable r3;
        cs.gson.Gson r0;
        java.lang.Appendable $r2;
        cs.gson.JsonElement $r1;
        java.io.Writer $r4;
        java.lang.RuntimeException $r6;
        cs.gson.stream.JsonWriter $r5;

        r0 := @this: cs.gson.Gson;

        $r1 := @parameter0: cs.gson.JsonElement;

        $r2 := @parameter1: java.lang.Appendable;

     label1:
        $r4 = staticinvoke <cs.gson.internal.Streams: java.io.Writer writerForAppendable(java.lang.Appendable)>($r2);

        $r5 = specialinvoke r0.<cs.gson.Gson: cs.gson.stream.JsonWriter newJsonWriter(java.io.Writer)>($r4);

        virtualinvoke r0.<cs.gson.Gson: void toJson(cs.gson.JsonElement,cs.gson.stream.JsonWriter)>($r1, $r5);

     label2:
        return;

     label3:
        r3 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r3);

        throw $r6;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void toJson(java.lang.Object, java.lang.Appendable) throws cs.gson.JsonIOException
    {
        cs.gson.Gson r0;
        java.lang.Appendable $r2;
        cs.gson.JsonNull $r4;
        java.lang.Object $r1;
        java.lang.Class $r3;

        r0 := @this: cs.gson.Gson;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Appendable;

        if $r1 == null goto label1;

        $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        virtualinvoke r0.<cs.gson.Gson: void toJson(java.lang.Object,java.lang.reflect.Type,java.lang.Appendable)>($r1, $r3, $r2);

        return;

     label1:
        $r4 = <cs.gson.JsonNull: cs.gson.JsonNull INSTANCE>;

        virtualinvoke r0.<cs.gson.Gson: void toJson(cs.gson.JsonElement,java.lang.Appendable)>($r4, $r2);

        return;
    }

    public void toJson(java.lang.Object, java.lang.reflect.Type, cs.gson.stream.JsonWriter) throws cs.gson.JsonIOException
    {
        java.lang.Throwable r4, $r8;
        cs.gson.JsonIOException $r7;
        cs.gson.TypeAdapter $r6;
        cs.gson.Gson r0;
        java.lang.reflect.Type $r2;
        java.lang.Object $r1;
        cs.gson.reflect.TypeToken $r5;
        cs.gson.stream.JsonWriter $r3;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: cs.gson.Gson;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.reflect.Type;

        $r3 := @parameter2: cs.gson.stream.JsonWriter;

        $r5 = staticinvoke <cs.gson.reflect.TypeToken: cs.gson.reflect.TypeToken get(java.lang.reflect.Type)>($r2);

        $r6 = virtualinvoke r0.<cs.gson.Gson: cs.gson.TypeAdapter getAdapter(cs.gson.reflect.TypeToken)>($r5);

        $z0 = virtualinvoke $r3.<cs.gson.stream.JsonWriter: boolean isLenient()>();

        virtualinvoke $r3.<cs.gson.stream.JsonWriter: void setLenient(boolean)>(1);

        $z1 = virtualinvoke $r3.<cs.gson.stream.JsonWriter: boolean isHtmlSafe()>();

        $z2 = r0.<cs.gson.Gson: boolean htmlSafe>;

        virtualinvoke $r3.<cs.gson.stream.JsonWriter: void setHtmlSafe(boolean)>($z2);

        $z2 = virtualinvoke $r3.<cs.gson.stream.JsonWriter: boolean getSerializeNulls()>();

        $z3 = r0.<cs.gson.Gson: boolean serializeNulls>;

        virtualinvoke $r3.<cs.gson.stream.JsonWriter: void setSerializeNulls(boolean)>($z3);

     label1:
        virtualinvoke $r6.<cs.gson.TypeAdapter: void write(cs.gson.stream.JsonWriter,java.lang.Object)>($r3, $r1);

     label2:
        virtualinvoke $r3.<cs.gson.stream.JsonWriter: void setLenient(boolean)>($z0);

        virtualinvoke $r3.<cs.gson.stream.JsonWriter: void setHtmlSafe(boolean)>($z1);

        virtualinvoke $r3.<cs.gson.stream.JsonWriter: void setSerializeNulls(boolean)>($z2);

        return;

     label3:
        r4 := @caughtexception;

     label4:
        $r7 = new cs.gson.JsonIOException;

        specialinvoke $r7.<cs.gson.JsonIOException: void <init>(java.lang.Throwable)>(r4);

        throw $r7;

     label5:
        $r8 := @caughtexception;

        virtualinvoke $r3.<cs.gson.stream.JsonWriter: void setLenient(boolean)>($z0);

        virtualinvoke $r3.<cs.gson.stream.JsonWriter: void setHtmlSafe(boolean)>($z1);

        virtualinvoke $r3.<cs.gson.stream.JsonWriter: void setSerializeNulls(boolean)>($z2);

        throw $r8;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label4 to label5 with label5;
    }

    public void toJson(java.lang.Object, java.lang.reflect.Type, java.lang.Appendable) throws cs.gson.JsonIOException
    {
        java.lang.Throwable r4;
        java.lang.Appendable $r3;
        cs.gson.JsonIOException $r7;
        cs.gson.Gson r0;
        java.lang.reflect.Type $r2;
        java.io.Writer $r5;
        java.lang.Object $r1;
        cs.gson.stream.JsonWriter $r6;

        r0 := @this: cs.gson.Gson;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.reflect.Type;

        $r3 := @parameter2: java.lang.Appendable;

     label1:
        $r5 = staticinvoke <cs.gson.internal.Streams: java.io.Writer writerForAppendable(java.lang.Appendable)>($r3);

        $r6 = specialinvoke r0.<cs.gson.Gson: cs.gson.stream.JsonWriter newJsonWriter(java.io.Writer)>($r5);

        virtualinvoke r0.<cs.gson.Gson: void toJson(java.lang.Object,java.lang.reflect.Type,cs.gson.stream.JsonWriter)>($r1, $r2, $r6);

     label2:
        return;

     label3:
        r4 := @caughtexception;

        $r7 = new cs.gson.JsonIOException;

        specialinvoke $r7.<cs.gson.JsonIOException: void <init>(java.lang.Throwable)>(r4);

        throw $r7;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public cs.gson.JsonElement toJsonTree(java.lang.Object)
    {
        cs.gson.Gson r0;
        cs.gson.JsonElement $r3;
        cs.gson.JsonNull r4;
        java.lang.Object $r1;
        java.lang.Class $r2;

        r0 := @this: cs.gson.Gson;

        $r1 := @parameter0: java.lang.Object;

        if $r1 != null goto label1;

        r4 = <cs.gson.JsonNull: cs.gson.JsonNull INSTANCE>;

        return r4;

     label1:
        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r0.<cs.gson.Gson: cs.gson.JsonElement toJsonTree(java.lang.Object,java.lang.reflect.Type)>($r1, $r2);

        return $r3;
    }

    public cs.gson.JsonElement toJsonTree(java.lang.Object, java.lang.reflect.Type)
    {
        cs.gson.Gson r0;
        java.lang.reflect.Type $r2;
        cs.gson.JsonElement $r4;
        java.lang.Object $r1;
        cs.gson.internal.bind.JsonTreeWriter r3;

        r0 := @this: cs.gson.Gson;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.reflect.Type;

        r3 = new cs.gson.internal.bind.JsonTreeWriter;

        specialinvoke r3.<cs.gson.internal.bind.JsonTreeWriter: void <init>()>();

        virtualinvoke r0.<cs.gson.Gson: void toJson(java.lang.Object,java.lang.reflect.Type,cs.gson.stream.JsonWriter)>($r1, $r2, r3);

        $r4 = virtualinvoke r3.<cs.gson.internal.bind.JsonTreeWriter: cs.gson.JsonElement get()>();

        return $r4;
    }

    public java.lang.String toString()
    {
        java.util.List $r2;
        cs.gson.Gson r0;
        cs.gson.internal.ConstructorConstructor $r3;
        java.lang.StringBuilder $r1;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: cs.gson.Gson;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("{serializeNulls:");

        $z0 = r0.<cs.gson.Gson: boolean serializeNulls>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("factories:");

        $r2 = r0.<cs.gson.Gson: java.util.List factories>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",instanceCreators:");

        $r3 = r0.<cs.gson.Gson: cs.gson.internal.ConstructorConstructor constructorConstructor>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public static void <clinit>()
    {
        <cs.gson.Gson: java.lang.String JSON_NON_EXECUTABLE_PREFIX> = ")]}\'\n";

        <cs.gson.Gson: boolean DEFAULT_JSON_NON_EXECUTABLE> = 0;

        return;
    }
}
