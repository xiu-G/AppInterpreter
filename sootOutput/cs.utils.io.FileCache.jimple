public class cs.utils.io.FileCache extends java.lang.Object
{
    private java.io.File cacheDir;

    public void <init>(android.content.Context)
    {
        android.content.Context $r1;
        cs.utils.io.FileCache r0;
        java.lang.String $r2;
        java.io.File $r3, $r4;
        boolean $z0;

        r0 := @this: cs.utils.io.FileCache;

        $r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <android.os.Environment: java.lang.String getExternalStorageState()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("mounted");

        if $z0 == 0 goto label2;

        $r3 = new java.io.File;

        $r4 = staticinvoke <android.os.Environment: java.io.File getExternalStorageDirectory()>();

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, "ltcImageCache");

        r0.<cs.utils.io.FileCache: java.io.File cacheDir> = $r3;

     label1:
        $r3 = r0.<cs.utils.io.FileCache: java.io.File cacheDir>;

        $z0 = virtualinvoke $r3.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label3;

        $r3 = r0.<cs.utils.io.FileCache: java.io.File cacheDir>;

        virtualinvoke $r3.<java.io.File: boolean mkdir()>();

        return;

     label2:
        $r3 = virtualinvoke $r1.<android.content.Context: java.io.File getCacheDir()>();

        r0.<cs.utils.io.FileCache: java.io.File cacheDir> = $r3;

        goto label1;

     label3:
        return;
    }

    private void copyStream(java.io.InputStream, java.io.OutputStream)
    {
        java.io.OutputStream $r2;
        byte[] r3;
        int $i0;
        cs.utils.io.FileCache r0;
        java.lang.Exception $r4;
        java.io.InputStream $r1;

        r0 := @this: cs.utils.io.FileCache;

        $r1 := @parameter0: java.io.InputStream;

        $r2 := @parameter1: java.io.OutputStream;

        r3 = newarray (byte)[1024];

     label1:
        $i0 = virtualinvoke $r1.<java.io.InputStream: int read(byte[],int,int)>(r3, 0, 1024);

     label2:
        if $i0 != -1 goto label3;

        return;

     label3:
        virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r3, 0, $i0);

     label4:
        goto label1;

     label5:
        $r4 := @caughtexception;

        return;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }

    private static android.graphics.Bitmap decodeFile(java.io.File, android.graphics.BitmapFactory$Options)
    {
        android.graphics.Bitmap $r4;
        java.lang.String $r3;
        java.io.File $r0;
        java.lang.OutOfMemoryError r2;
        android.graphics.BitmapFactory$Options $r1;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: android.graphics.BitmapFactory$Options;

     label1:
        $r3 = virtualinvoke $r0.<java.io.File: java.lang.String getAbsolutePath()>();

        $r4 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>($r3, $r1);

     label2:
        return $r4;

     label3:
        r2 := @caughtexception;

        virtualinvoke r2.<java.lang.OutOfMemoryError: void printStackTrace()>();

        staticinvoke <cs.utils.io.ImageBuffer: void clearCache()>();

        $r3 = virtualinvoke $r0.<java.io.File: java.lang.String getAbsolutePath()>();

        $r4 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>($r3, $r1);

        return $r4;

        catch java.lang.OutOfMemoryError from label1 to label2 with label3;
    }

    public static android.graphics.Bitmap getPhotoFromFilePath(java.io.File, android.content.Context)
    {
        java.io.PrintStream $r3;
        android.content.Context $r1;
        java.io.File $r0;
        android.util.DisplayMetrics $r6;
        android.graphics.Bitmap $r7;
        int i0, i1;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        android.graphics.BitmapFactory$Options r2;
        boolean $z0;
        double $d0, $d1;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: android.content.Context;

        r2 = new android.graphics.BitmapFactory$Options;

        specialinvoke r2.<android.graphics.BitmapFactory$Options: void <init>()>();

        r2.<android.graphics.BitmapFactory$Options: boolean inJustDecodeBounds> = 1;

        staticinvoke <cs.utils.io.FileCache: android.graphics.Bitmap decodeFile(java.io.File,android.graphics.BitmapFactory$Options)>($r0, r2);

        $z0 = <cs.utils.system.SystemUtil: boolean debug>;

        if $z0 == 0 goto label1;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("op:");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r5);

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("displayWidth:");

        $r6 = staticinvoke <cs.utils.system.SystemUtil: android.util.DisplayMetrics init(android.content.Context)>($r1);

        i0 = $r6.<android.util.DisplayMetrics: int widthPixels>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r5);

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("op:");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r5);

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("op.outWidth:");

        i0 = r2.<android.graphics.BitmapFactory$Options: int outWidth>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r5);

     label1:
        r2.<android.graphics.BitmapFactory$Options: boolean inJustDecodeBounds> = 0;

        i0 = r2.<android.graphics.BitmapFactory$Options: int outWidth>;

        $d0 = (double) i0;

        $r6 = staticinvoke <cs.utils.system.SystemUtil: android.util.DisplayMetrics init(android.content.Context)>($r1);

        i0 = $r6.<android.util.DisplayMetrics: int widthPixels>;

        $d1 = (double) i0;

        $d1 = $d1 * 1.0;

        $d0 = $d0 / $d1;

        i0 = (int) $d0;

        i1 = r2.<android.graphics.BitmapFactory$Options: int outHeight>;

        $d0 = (double) i1;

        $r6 = staticinvoke <cs.utils.system.SystemUtil: android.util.DisplayMetrics init(android.content.Context)>($r1);

        i1 = $r6.<android.util.DisplayMetrics: int heightPixels>;

        $d1 = (double) i1;

        $d1 = $d1 * 1.0;

        $d0 = $d0 / $d1;

        i1 = (int) $d0;

        if i0 <= i1 goto label4;

     label2:
        if i0 >= 0 goto label3;

        i0 = 1;

     label3:
        r2.<android.graphics.BitmapFactory$Options: int inSampleSize> = i0;

        $r7 = staticinvoke <cs.utils.io.FileCache: android.graphics.Bitmap decodeFile(java.io.File,android.graphics.BitmapFactory$Options)>($r0, r2);

        return $r7;

     label4:
        i0 = i1;

        goto label2;
    }

    private java.lang.String urlToFileName(java.lang.String)
    {
        int $i0;
        cs.utils.io.FileCache r0;
        java.lang.String $r1;

        r0 := @this: cs.utils.io.FileCache;

        $r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        return $r1;
    }

    public void addToFileCache(java.lang.String, java.io.InputStream)
    {
        java.lang.Throwable r6, r7, $r8, r9, r10;
        cs.utils.io.FileCache r0;
        java.io.FileOutputStream r3, r5, $r11;
        java.io.IOException $r13;
        java.io.File $r4;
        java.io.FileNotFoundException $r12;
        java.lang.String $r1;
        java.io.InputStream $r2;

        r0 := @this: cs.utils.io.FileCache;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.io.InputStream;

        r5 = null;

     label01:
        $r11 = new java.io.FileOutputStream;

     label02:
        r3 = $r11;

     label03:
        $r4 = virtualinvoke r0.<cs.utils.io.FileCache: java.io.File getFromFileCache(java.lang.String)>($r1);

        specialinvoke $r11.<java.io.FileOutputStream: void <init>(java.io.File)>($r4);

     label04:
        specialinvoke r0.<cs.utils.io.FileCache: void copyStream(java.io.InputStream,java.io.OutputStream)>($r2, r3);

     label05:
        if r3 == null goto label20;

     label06:
        virtualinvoke r3.<java.io.OutputStream: void close()>();

     label07:
        return;

     label08:
        r6 := @caughtexception;

     label09:
        $r12 = (java.io.FileNotFoundException) r6;

        virtualinvoke $r12.<java.io.FileNotFoundException: void printStackTrace()>();

     label10:
        if r5 == null goto label23;

     label11:
        virtualinvoke r5.<java.io.OutputStream: void close()>();

     label12:
        return;

     label13:
        r7 := @caughtexception;

        $r13 = (java.io.IOException) r7;

        virtualinvoke $r13.<java.io.IOException: void printStackTrace()>();

        return;

     label14:
        $r8 := @caughtexception;

     label15:
        if r5 == null goto label17;

     label16:
        virtualinvoke r5.<java.io.OutputStream: void close()>();

     label17:
        throw $r8;

     label18:
        r9 := @caughtexception;

        $r13 = (java.io.IOException) r9;

        virtualinvoke $r13.<java.io.IOException: void printStackTrace()>();

        goto label17;

     label19:
        r10 := @caughtexception;

        $r13 = (java.io.IOException) r10;

        virtualinvoke $r13.<java.io.IOException: void printStackTrace()>();

     label20:
        return;

     label21:
        $r8 := @caughtexception;

        r5 = r3;

        goto label15;

     label22:
        r6 := @caughtexception;

        r5 = r3;

        goto label09;

     label23:
        return;

        catch java.io.FileNotFoundException from label03 to label04 with label08;
        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.io.FileNotFoundException from label04 to label05 with label22;
        catch java.lang.Throwable from label04 to label05 with label21;
        catch java.io.IOException from label06 to label07 with label19;
        catch java.lang.Throwable from label09 to label10 with label14;
        catch java.io.IOException from label11 to label12 with label13;
        catch java.io.IOException from label16 to label17 with label18;
    }

    public void clearCache()
    {
        int $i0, $i1;
        cs.utils.io.FileCache r0;
        java.io.File[] $r2;
        java.io.File r1;

        r0 := @this: cs.utils.io.FileCache;

        r1 = r0.<cs.utils.io.FileCache: java.io.File cacheDir>;

        $r2 = virtualinvoke r1.<java.io.File: java.io.File[] listFiles()>();

        if $r2 != null goto label1;

        return;

     label1:
        $i0 = lengthof $r2;

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label3;

        r1 = $r2[$i1];

        virtualinvoke r1.<java.io.File: boolean delete()>();

        $i1 = $i1 + 1;

        goto label2;

     label3:
        return;
    }

    public java.io.File getFromFileCache(java.lang.String)
    {
        cs.utils.io.FileCache r0;
        java.lang.String $r1;
        java.io.File r2, $r3;
        boolean $z0;

        r0 := @this: cs.utils.io.FileCache;

        $r1 := @parameter0: java.lang.String;

        $r1 = specialinvoke r0.<cs.utils.io.FileCache: java.lang.String urlToFileName(java.lang.String)>($r1);

        r2 = new java.io.File;

        $r3 = r0.<cs.utils.io.FileCache: java.io.File cacheDir>;

        specialinvoke r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, $r1);

        $r3 = virtualinvoke r2.<java.io.File: java.io.File getParentFile()>();

        $z0 = virtualinvoke $r3.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        virtualinvoke r2.<java.io.File: boolean mkdirs()>();

     label1:
        return r2;
    }
}
