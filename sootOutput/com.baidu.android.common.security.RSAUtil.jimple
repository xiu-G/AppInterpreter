public final class com.baidu.android.common.security.RSAUtil extends java.lang.Object
{
    public static final java.lang.String ALGORITHM_RSA;
    public static final int BYTE_IN_BITS;
    public static final java.lang.String PRIVATE_KEY;
    public static final int PT_MAXLEN_OFFSET;
    public static final java.lang.String PUBLIC_KEY;

    private void <init>()
    {
        com.baidu.android.common.security.RSAUtil r0;

        r0 := @this: com.baidu.android.common.security.RSAUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static byte[] decryptByPrivateKey(byte[], java.lang.String) throws java.lang.Exception
    {
        byte[] $r0, $r2;
        java.security.spec.PKCS8EncodedKeySpec $r3;
        java.security.PrivateKey $r5;
        java.lang.String $r1;
        javax.crypto.Cipher $r6;
        java.security.KeyFactory $r4;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        $r2 = staticinvoke <com.baidu.android.common.security.Base64: byte[] decode(byte[])>($r2);

        $r3 = new java.security.spec.PKCS8EncodedKeySpec;

        specialinvoke $r3.<java.security.spec.PKCS8EncodedKeySpec: void <init>(byte[])>($r2);

        $r4 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>("RSA");

        $r5 = virtualinvoke $r4.<java.security.KeyFactory: java.security.PrivateKey generatePrivate(java.security.spec.KeySpec)>($r3);

        $r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("RSA/ECB/PKCS1Padding");

        virtualinvoke $r6.<javax.crypto.Cipher: void init(int,java.security.Key)>(2, $r5);

        $r0 = virtualinvoke $r6.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r0);

        return $r0;
    }

    public static byte[] decryptByPublicKey(byte[], java.lang.String) throws java.lang.Exception
    {
        byte[] $r0, $r2;
        java.security.PublicKey $r5;
        java.lang.String $r1;
        java.security.spec.X509EncodedKeySpec $r3;
        javax.crypto.Cipher $r6;
        java.security.KeyFactory $r4;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        $r2 = staticinvoke <com.baidu.android.common.security.Base64: byte[] decode(byte[])>($r2);

        $r3 = new java.security.spec.X509EncodedKeySpec;

        specialinvoke $r3.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>($r2);

        $r4 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>("RSA");

        $r5 = virtualinvoke $r4.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r3);

        $r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("RSA/ECB/PKCS1Padding");

        virtualinvoke $r6.<javax.crypto.Cipher: void init(int,java.security.Key)>(2, $r5);

        $r0 = virtualinvoke $r6.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r0);

        return $r0;
    }

    public static byte[] decryptLongByPrivateKey(byte[], java.lang.String, int) throws java.lang.Exception
    {
        byte[] $r0, $r3;
        java.security.spec.PKCS8EncodedKeySpec $r4;
        javax.crypto.Cipher $r7;
        java.security.KeyFactory $r5;
        java.security.PrivateKey $r6;
        int $i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r2;
        java.lang.String $r1;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $r3 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        $r3 = staticinvoke <com.baidu.android.common.security.Base64: byte[] decode(byte[])>($r3);

        $r4 = new java.security.spec.PKCS8EncodedKeySpec;

        specialinvoke $r4.<java.security.spec.PKCS8EncodedKeySpec: void <init>(byte[])>($r3);

        $r5 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>("RSA");

        $r6 = virtualinvoke $r5.<java.security.KeyFactory: java.security.PrivateKey generatePrivate(java.security.spec.KeySpec)>($r4);

        $r7 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("RSA/ECB/PKCS1Padding");

        virtualinvoke $r7.<javax.crypto.Cipher: void init(int,java.security.Key)>(2, $r6);

        $i1 = $i0 / 8;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $i0 = lengthof $r0;

        $i2 = 0;

     label1:
        if $i2 >= $i0 goto label3;

        $i3 = $i0 - $i2;

        if $i1 >= $i3 goto label2;

        $i3 = $i1;

     label2:
        $r3 = newarray (byte)[$i3];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i2, $r3, 0, $i3);

        $r1 = new java.lang.String;

        $r3 = virtualinvoke $r7.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r3);

        specialinvoke $r1.<java.lang.String: void <init>(byte[])>($r3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $i2 = $i3 + $i2;

        goto label1;

     label3:
        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r0 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        return $r0;
    }

    public static byte[] encryptByPrivateKey(byte[], java.lang.String) throws java.lang.Exception
    {
        byte[] $r0, $r2;
        java.security.spec.PKCS8EncodedKeySpec $r3;
        java.security.PrivateKey $r5;
        java.lang.String $r1;
        javax.crypto.Cipher $r6;
        java.security.KeyFactory $r4;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        $r2 = staticinvoke <com.baidu.android.common.security.Base64: byte[] decode(byte[])>($r2);

        $r3 = new java.security.spec.PKCS8EncodedKeySpec;

        specialinvoke $r3.<java.security.spec.PKCS8EncodedKeySpec: void <init>(byte[])>($r2);

        $r4 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>("RSA");

        $r5 = virtualinvoke $r4.<java.security.KeyFactory: java.security.PrivateKey generatePrivate(java.security.spec.KeySpec)>($r3);

        $r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("RSA/ECB/PKCS1Padding");

        virtualinvoke $r6.<javax.crypto.Cipher: void init(int,java.security.Key)>(1, $r5);

        $r0 = virtualinvoke $r6.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r0);

        return $r0;
    }

    public static byte[] encryptByPublicKey(byte[], java.lang.String) throws java.lang.Exception
    {
        byte[] $r0, $r2;
        java.security.PublicKey $r5;
        java.lang.String $r1;
        java.security.spec.X509EncodedKeySpec $r3;
        javax.crypto.Cipher $r6;
        java.security.KeyFactory $r4;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        $r2 = staticinvoke <com.baidu.android.common.security.Base64: byte[] decode(byte[])>($r2);

        $r3 = new java.security.spec.X509EncodedKeySpec;

        specialinvoke $r3.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>($r2);

        $r4 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>("RSA");

        $r5 = virtualinvoke $r4.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r3);

        $r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("RSA/ECB/PKCS1Padding");

        virtualinvoke $r6.<javax.crypto.Cipher: void init(int,java.security.Key)>(1, $r5);

        $r0 = virtualinvoke $r6.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r0);

        return $r0;
    }

    public static byte[] encryptLongByPublicKey(byte[], java.lang.String, int) throws java.lang.Exception
    {
        byte[] $r0, $r2, $r3;
        java.security.PublicKey $r5;
        javax.crypto.Cipher $r6;
        java.security.spec.X509EncodedKeySpec $r7;
        java.security.KeyFactory $r4;
        int $i0, $i1, $i3, $i4, $i5;
        java.lang.String $r1;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $r2 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        $r2 = staticinvoke <com.baidu.android.common.security.Base64: byte[] decode(byte[])>($r2);

        $r7 = new java.security.spec.X509EncodedKeySpec;

        specialinvoke $r7.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>($r2);

        $r4 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>("RSA");

        $r5 = virtualinvoke $r4.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r7);

        $r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("RSA/ECB/PKCS1Padding");

        virtualinvoke $r6.<javax.crypto.Cipher: void init(int,java.security.Key)>(1, $r5);

        $i1 = lengthof $r0;

        $i3 = $i1 + 117;

        $i3 = $i3 + -1;

        $i3 = $i3 / 117;

        $i3 = $i3 * 128;

        $r2 = newarray (byte)[$i3];

        $i4 = 0;

        $i3 = 0;

     label1:
        if $i3 >= $i1 goto label3;

        $i5 = $i1 - $i3;

        if 117 >= $i5 goto label2;

        $i5 = 117;

     label2:
        $r3 = newarray (byte)[$i5];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i3, $r3, 0, $i5);

        $i3 = $i3 + $i5;

        $r3 = virtualinvoke $r6.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r3);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r2, $i4, 128);

        $i4 = $i4 + 128;

        goto label1;

     label3:
        return $r2;
    }

    public static java.util.Map generateKey(int) throws java.security.NoSuchAlgorithmException
    {
        java.security.KeyPairGenerator $r1;
        java.security.KeyPair $r2;
        java.security.interfaces.RSAPrivateKey $r6;
        java.util.HashMap $r0;
        java.security.PublicKey $r3;
        java.security.interfaces.RSAPublicKey $r4;
        java.security.PrivateKey $r5;
        int $i0;

        $i0 := @parameter0: int;

        $r1 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>("RSA");

        virtualinvoke $r1.<java.security.KeyPairGenerator: void initialize(int)>($i0);

        $r2 = virtualinvoke $r1.<java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair()>();

        $r3 = virtualinvoke $r2.<java.security.KeyPair: java.security.PublicKey getPublic()>();

        $r4 = (java.security.interfaces.RSAPublicKey) $r3;

        $r5 = virtualinvoke $r2.<java.security.KeyPair: java.security.PrivateKey getPrivate()>();

        $r6 = (java.security.interfaces.RSAPrivateKey) $r5;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>(int)>(2);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("PublicKey", $r4);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("PrivateKey", $r6);

        return $r0;
    }

    public static java.security.interfaces.RSAPrivateKey generateRSAPrivateKey(java.math.BigInteger, java.math.BigInteger) throws java.lang.Exception
    {
        java.lang.Throwable $r6, $r8;
        java.security.spec.InvalidKeySpecException $r12;
        java.security.interfaces.RSAPrivateKey $r5;
        java.lang.Exception $r10;
        java.security.KeyFactory $r2;
        java.security.spec.RSAPrivateKeySpec $r3, $r9;
        java.security.PrivateKey $r4;
        java.security.NoSuchAlgorithmException $r11;
        java.math.BigInteger $r0, $r1;
        java.lang.String $r7;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 := @parameter1: java.math.BigInteger;

     label1:
        $r2 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>("RSA");

     label2:
        $r9 = new java.security.spec.RSAPrivateKeySpec;

        $r3 = $r9;

        specialinvoke $r9.<java.security.spec.RSAPrivateKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger)>($r0, $r1);

     label3:
        $r4 = virtualinvoke $r2.<java.security.KeyFactory: java.security.PrivateKey generatePrivate(java.security.spec.KeySpec)>($r3);

     label4:
        $r5 = (java.security.interfaces.RSAPrivateKey) $r4;

        return $r5;

     label5:
        $r6 := @caughtexception;

        $r10 = new java.lang.Exception;

        $r11 = (java.security.NoSuchAlgorithmException) $r6;

        $r7 = virtualinvoke $r11.<java.security.NoSuchAlgorithmException: java.lang.String getMessage()>();

        specialinvoke $r10.<java.lang.Exception: void <init>(java.lang.String)>($r7);

        throw $r10;

     label6:
        $r8 := @caughtexception;

        $r10 = new java.lang.Exception;

        $r12 = (java.security.spec.InvalidKeySpecException) $r8;

        $r7 = virtualinvoke $r12.<java.security.spec.InvalidKeySpecException: java.lang.String getMessage()>();

        specialinvoke $r10.<java.lang.Exception: void <init>(java.lang.String)>($r7);

        throw $r10;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label5;
        catch java.security.spec.InvalidKeySpecException from label3 to label4 with label6;
    }

    public static java.security.interfaces.RSAPublicKey generateRSAPublicKey(java.math.BigInteger, java.math.BigInteger) throws java.lang.Exception
    {
        java.lang.Throwable $r6, $r8;
        java.security.spec.InvalidKeySpecException $r12;
        java.security.PublicKey $r4;
        java.lang.Exception $r10;
        java.security.KeyFactory $r2;
        java.security.interfaces.RSAPublicKey $r5;
        java.security.NoSuchAlgorithmException $r11;
        java.security.spec.RSAPublicKeySpec $r3, $r9;
        java.math.BigInteger $r0, $r1;
        java.lang.String $r7;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 := @parameter1: java.math.BigInteger;

     label1:
        $r2 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>("RSA");

     label2:
        $r9 = new java.security.spec.RSAPublicKeySpec;

        $r3 = $r9;

        specialinvoke $r9.<java.security.spec.RSAPublicKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger)>($r0, $r1);

     label3:
        $r4 = virtualinvoke $r2.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r3);

     label4:
        $r5 = (java.security.interfaces.RSAPublicKey) $r4;

        return $r5;

     label5:
        $r6 := @caughtexception;

        $r10 = new java.lang.Exception;

        $r11 = (java.security.NoSuchAlgorithmException) $r6;

        $r7 = virtualinvoke $r11.<java.security.NoSuchAlgorithmException: java.lang.String getMessage()>();

        specialinvoke $r10.<java.lang.Exception: void <init>(java.lang.String)>($r7);

        throw $r10;

     label6:
        $r8 := @caughtexception;

        $r10 = new java.lang.Exception;

        $r12 = (java.security.spec.InvalidKeySpecException) $r8;

        $r7 = virtualinvoke $r12.<java.security.spec.InvalidKeySpecException: java.lang.String getMessage()>();

        specialinvoke $r10.<java.lang.Exception: void <init>(java.lang.String)>($r7);

        throw $r10;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label5;
        catch java.security.spec.InvalidKeySpecException from label3 to label4 with label6;
    }

    public static java.lang.String getPrivateKey(java.util.Map) throws java.lang.Exception
    {
        java.security.Key $r2;
        byte[] $r3;
        java.util.Map $r0;
        java.lang.Object $r1;
        java.lang.String $r4;

        $r0 := @parameter0: java.util.Map;

        $r1 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("PrivateKey");

        $r2 = (java.security.Key) $r1;

        $r3 = interfaceinvoke $r2.<java.security.Key: byte[] getEncoded()>();

        $r4 = staticinvoke <com.baidu.android.common.security.Base64: java.lang.String encode(byte[],java.lang.String)>($r3, "utf-8");

        return $r4;
    }

    public static java.lang.String getPublicKey(java.util.Map) throws java.io.UnsupportedEncodingException
    {
        java.security.Key $r2;
        byte[] $r3;
        java.util.Map $r0;
        java.lang.Object $r1;
        java.lang.String $r4;

        $r0 := @parameter0: java.util.Map;

        $r1 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("PublicKey");

        $r2 = (java.security.Key) $r1;

        $r3 = interfaceinvoke $r2.<java.security.Key: byte[] getEncoded()>();

        $r4 = staticinvoke <com.baidu.android.common.security.Base64: java.lang.String encode(byte[],java.lang.String)>($r3, "utf-8");

        return $r4;
    }

    public static void <clinit>()
    {
        <com.baidu.android.common.security.RSAUtil: java.lang.String PUBLIC_KEY> = "PublicKey";

        <com.baidu.android.common.security.RSAUtil: int PT_MAXLEN_OFFSET> = 11;

        <com.baidu.android.common.security.RSAUtil: java.lang.String PRIVATE_KEY> = "PrivateKey";

        <com.baidu.android.common.security.RSAUtil: int BYTE_IN_BITS> = 8;

        <com.baidu.android.common.security.RSAUtil: java.lang.String ALGORITHM_RSA> = "RSA";

        return;
    }
}
