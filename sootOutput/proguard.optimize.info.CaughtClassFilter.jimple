public class proguard.optimize.info.CaughtClassFilter extends java.lang.Object implements proguard.classfile.visitor.ClassVisitor
{
    private final proguard.classfile.visitor.ClassVisitor classVisitor;

    public void <init>(proguard.classfile.visitor.ClassVisitor)
    {
        proguard.optimize.info.CaughtClassFilter r0;
        proguard.classfile.visitor.ClassVisitor $r1;

        r0 := @this: proguard.optimize.info.CaughtClassFilter;

        $r1 := @parameter0: proguard.classfile.visitor.ClassVisitor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<proguard.optimize.info.CaughtClassFilter: proguard.classfile.visitor.ClassVisitor classVisitor> = $r1;

        return;
    }

    public void visitLibraryClass(proguard.classfile.LibraryClass)
    {
        proguard.classfile.LibraryClass $r1;
        proguard.optimize.info.CaughtClassFilter r0;
        proguard.classfile.visitor.ClassVisitor $r2;
        boolean $z0;

        r0 := @this: proguard.optimize.info.CaughtClassFilter;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        $z0 = staticinvoke <proguard.optimize.info.CaughtClassMarker: boolean isCaught(proguard.classfile.Clazz)>($r1);

        if $z0 == 0 goto label1;

        $r2 = r0.<proguard.optimize.info.CaughtClassFilter: proguard.classfile.visitor.ClassVisitor classVisitor>;

        interfaceinvoke $r2.<proguard.classfile.visitor.ClassVisitor: void visitLibraryClass(proguard.classfile.LibraryClass)>($r1);

     label1:
        return;
    }

    public void visitProgramClass(proguard.classfile.ProgramClass)
    {
        proguard.optimize.info.CaughtClassFilter r0;
        proguard.classfile.visitor.ClassVisitor $r2;
        proguard.classfile.ProgramClass $r1;
        boolean $z0;

        r0 := @this: proguard.optimize.info.CaughtClassFilter;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $z0 = staticinvoke <proguard.optimize.info.CaughtClassMarker: boolean isCaught(proguard.classfile.Clazz)>($r1);

        if $z0 == 0 goto label1;

        $r2 = r0.<proguard.optimize.info.CaughtClassFilter: proguard.classfile.visitor.ClassVisitor classVisitor>;

        interfaceinvoke $r2.<proguard.classfile.visitor.ClassVisitor: void visitProgramClass(proguard.classfile.ProgramClass)>($r1);

     label1:
        return;
    }
}
