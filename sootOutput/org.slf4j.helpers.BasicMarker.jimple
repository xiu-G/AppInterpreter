public class org.slf4j.helpers.BasicMarker extends java.lang.Object implements org.slf4j.Marker
{
    private static java.lang.String CLOSE;
    private static java.lang.String OPEN;
    private static java.lang.String SEP;
    private static final long serialVersionUID;
    private final java.lang.String name;
    private java.util.List refereceList;

    static void <clinit>()
    {
        <org.slf4j.helpers.BasicMarker: long serialVersionUID> = 1803952589649545191L;

        <org.slf4j.helpers.BasicMarker: java.lang.String OPEN> = "[ ";

        <org.slf4j.helpers.BasicMarker: java.lang.String CLOSE> = " ]";

        <org.slf4j.helpers.BasicMarker: java.lang.String SEP> = ", ";

        return;
    }

    void <init>(java.lang.String)
    {
        org.slf4j.helpers.BasicMarker r0;
        java.lang.String $r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.slf4j.helpers.BasicMarker;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("A merker name cannot be null");

        throw $r2;

     label1:
        r0.<org.slf4j.helpers.BasicMarker: java.lang.String name> = $r1;

        return;
    }

    public void add(org.slf4j.Marker)
    {
        java.lang.Throwable $r3;
        java.util.List $r4;
        java.util.Vector $r5;
        org.slf4j.Marker $r1;
        org.slf4j.helpers.BasicMarker r0;
        java.lang.IllegalArgumentException $r2;
        boolean $z0;

        r0 := @this: org.slf4j.helpers.BasicMarker;

        $r1 := @parameter0: org.slf4j.Marker;

        entermonitor r0;

        if $r1 != null goto label3;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("A null value cannot be added to a Marker as reference.");

        throw $r2;

     label2:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

     label3:
        $z0 = virtualinvoke r0.<org.slf4j.helpers.BasicMarker: boolean contains(org.slf4j.Marker)>($r1);

     label4:
        if $z0 == 0 goto label6;

     label5:
        exitmonitor r0;

        return;

     label6:
        $z0 = interfaceinvoke $r1.<org.slf4j.Marker: boolean contains(org.slf4j.Marker)>(r0);

        if $z0 != 0 goto label5;

        $r4 = r0.<org.slf4j.helpers.BasicMarker: java.util.List refereceList>;

        if $r4 != null goto label7;

        $r5 = new java.util.Vector;

        specialinvoke $r5.<java.util.Vector: void <init>()>();

        r0.<org.slf4j.helpers.BasicMarker: java.util.List refereceList> = $r5;

     label7:
        $r4 = r0.<org.slf4j.helpers.BasicMarker: java.util.List refereceList>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r1);

     label8:
        goto label5;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
        catch java.lang.Throwable from label6 to label8 with label2;
    }

    public boolean contains(java.lang.String)
    {
        java.lang.IllegalArgumentException $r2;
        java.util.List $r4;
        org.slf4j.Marker r6;
        int i0, $i1;
        org.slf4j.helpers.BasicMarker r0;
        java.lang.Object $r5;
        java.lang.String $r1, $r3;
        boolean $z0;

        r0 := @this: org.slf4j.helpers.BasicMarker;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Other cannot be null");

        throw $r2;

     label1:
        $r3 = r0.<org.slf4j.helpers.BasicMarker: java.lang.String name>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $z0 = virtualinvoke r0.<org.slf4j.helpers.BasicMarker: boolean hasReferences()>();

        if $z0 == 0 goto label4;

        i0 = 0;

     label3:
        $r4 = r0.<org.slf4j.helpers.BasicMarker: java.util.List refereceList>;

        $i1 = interfaceinvoke $r4.<java.util.List: int size()>();

        if i0 >= $i1 goto label4;

        $r4 = r0.<org.slf4j.helpers.BasicMarker: java.util.List refereceList>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i0);

        r6 = (org.slf4j.Marker) $r5;

        $z0 = interfaceinvoke r6.<org.slf4j.Marker: boolean contains(java.lang.String)>($r1);

        if $z0 != 0 goto label5;

        i0 = i0 + 1;

        goto label3;

     label4:
        return 0;

     label5:
        return 1;
    }

    public boolean contains(org.slf4j.Marker)
    {
        java.lang.IllegalArgumentException $r2;
        java.util.List $r3;
        org.slf4j.Marker $r1, r5;
        int i0, $i1;
        org.slf4j.helpers.BasicMarker r0;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: org.slf4j.helpers.BasicMarker;

        $r1 := @parameter0: org.slf4j.Marker;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Other cannot be null");

        throw $r2;

     label1:
        $z0 = virtualinvoke r0.<org.slf4j.helpers.BasicMarker: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $z0 = virtualinvoke r0.<org.slf4j.helpers.BasicMarker: boolean hasReferences()>();

        if $z0 == 0 goto label4;

        i0 = 0;

     label3:
        $r3 = r0.<org.slf4j.helpers.BasicMarker: java.util.List refereceList>;

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i0 >= $i1 goto label4;

        $r3 = r0.<org.slf4j.helpers.BasicMarker: java.util.List refereceList>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i0);

        r5 = (org.slf4j.Marker) $r4;

        $z0 = interfaceinvoke r5.<org.slf4j.Marker: boolean contains(org.slf4j.Marker)>($r1);

        if $z0 != 0 goto label5;

        i0 = i0 + 1;

        goto label3;

     label4:
        return 0;

     label5:
        return 1;
    }

    public boolean equals(java.lang.Object)
    {
        org.slf4j.Marker r2;
        org.slf4j.helpers.BasicMarker r0;
        java.lang.Object $r1;
        java.lang.String $r3, $r4;
        boolean $z0;

        r0 := @this: org.slf4j.helpers.BasicMarker;

        $r1 := @parameter0: java.lang.Object;

        if r0 != $r1 goto label1;

        return 1;

     label1:
        if $r1 == null goto label2;

        $z0 = $r1 instanceof org.slf4j.Marker;

        if $z0 == 0 goto label2;

        r2 = (org.slf4j.Marker) $r1;

        $r3 = r0.<org.slf4j.helpers.BasicMarker: java.lang.String name>;

        $r4 = interfaceinvoke r2.<org.slf4j.Marker: java.lang.String getName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        return $z0;

     label2:
        return 0;
    }

    public java.lang.String getName()
    {
        org.slf4j.helpers.BasicMarker r0;
        java.lang.String r1;

        r0 := @this: org.slf4j.helpers.BasicMarker;

        r1 = r0.<org.slf4j.helpers.BasicMarker: java.lang.String name>;

        return r1;
    }

    public boolean hasChildren()
    {
        org.slf4j.helpers.BasicMarker r0;
        boolean $z0;

        r0 := @this: org.slf4j.helpers.BasicMarker;

        $z0 = virtualinvoke r0.<org.slf4j.helpers.BasicMarker: boolean hasReferences()>();

        return $z0;
    }

    public boolean hasReferences()
    {
        java.lang.Throwable $r2;
        java.util.List $r1;
        int $i0;
        org.slf4j.helpers.BasicMarker r0;
        boolean $z0;

        r0 := @this: org.slf4j.helpers.BasicMarker;

        entermonitor r0;

     label1:
        $r1 = r0.<org.slf4j.helpers.BasicMarker: java.util.List refereceList>;

        if $r1 == null goto label4;

        $r1 = r0.<org.slf4j.helpers.BasicMarker: java.util.List refereceList>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

     label2:
        if $i0 <= 0 goto label4;

        $z0 = 1;

     label3:
        exitmonitor r0;

        return $z0;

     label4:
        $z0 = 0;

        goto label3;

     label5:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label5;
    }

    public int hashCode()
    {
        int $i0;
        org.slf4j.helpers.BasicMarker r0;
        java.lang.String $r1;

        r0 := @this: org.slf4j.helpers.BasicMarker;

        $r1 = r0.<org.slf4j.helpers.BasicMarker: java.lang.String name>;

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        return $i0;
    }

    public java.util.Iterator iterator()
    {
        java.lang.Throwable $r3;
        java.util.List $r1;
        java.util.Iterator $r2;
        org.slf4j.helpers.BasicMarker r0;

        r0 := @this: org.slf4j.helpers.BasicMarker;

        entermonitor r0;

     label1:
        $r1 = r0.<org.slf4j.helpers.BasicMarker: java.util.List refereceList>;

        if $r1 == null goto label3;

        $r1 = r0.<org.slf4j.helpers.BasicMarker: java.util.List refereceList>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label2:
        exitmonitor r0;

        return $r2;

     label3:
        $r1 = <java.util.Collections: java.util.List EMPTY_LIST>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label4:
        goto label2;

     label5:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public boolean remove(org.slf4j.Marker)
    {
        java.lang.Throwable $r5;
        java.util.List $r2;
        org.slf4j.Marker $r1, r4;
        int $i0, i1;
        org.slf4j.helpers.BasicMarker r0;
        java.lang.Object $r3;
        boolean $z0, $z1;

        r0 := @this: org.slf4j.helpers.BasicMarker;

        $r1 := @parameter0: org.slf4j.Marker;

        $z0 = 0;

        entermonitor r0;

     label1:
        $r2 = r0.<org.slf4j.helpers.BasicMarker: java.util.List refereceList>;

     label2:
        if $r2 != null goto label4;

     label3:
        exitmonitor r0;

        return $z0;

     label4:
        $r2 = r0.<org.slf4j.helpers.BasicMarker: java.util.List refereceList>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        i1 = 0;

     label5:
        if i1 >= $i0 goto label3;

        $r2 = r0.<org.slf4j.helpers.BasicMarker: java.util.List refereceList>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i1);

        r4 = (org.slf4j.Marker) $r3;

        $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>(r4);

        if $z1 == 0 goto label7;

        $r2 = r0.<org.slf4j.helpers.BasicMarker: java.util.List refereceList>;

        interfaceinvoke $r2.<java.util.List: java.lang.Object remove(int)>(i1);

     label6:
        $z0 = 1;

        goto label3;

     label7:
        i1 = i1 + 1;

        goto label5;

     label8:
        $r5 := @caughtexception;

        exitmonitor r0;

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label4 to label6 with label8;
    }

    public java.lang.String toString()
    {
        java.util.Iterator $r3;
        org.slf4j.Marker r6;
        java.lang.StringBuffer r1, $r4;
        org.slf4j.helpers.BasicMarker r0;
        java.lang.Object $r5;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: org.slf4j.helpers.BasicMarker;

        $z0 = virtualinvoke r0.<org.slf4j.helpers.BasicMarker: boolean hasReferences()>();

        if $z0 != 0 goto label1;

        $r2 = virtualinvoke r0.<org.slf4j.helpers.BasicMarker: java.lang.String getName()>();

        return $r2;

     label1:
        $r3 = virtualinvoke r0.<org.slf4j.helpers.BasicMarker: java.util.Iterator iterator()>();

        r1 = new java.lang.StringBuffer;

        $r2 = virtualinvoke r0.<org.slf4j.helpers.BasicMarker: java.lang.String getName()>();

        specialinvoke r1.<java.lang.StringBuffer: void <init>(java.lang.String)>($r2);

        $r4 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        $r2 = <org.slf4j.helpers.BasicMarker: java.lang.String OPEN>;

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.slf4j.Marker) $r5;

        $r2 = interfaceinvoke r6.<org.slf4j.Marker: java.lang.String getName()>();

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = <org.slf4j.helpers.BasicMarker: java.lang.String SEP>;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        goto label2;

     label3:
        $r2 = <org.slf4j.helpers.BasicMarker: java.lang.String CLOSE>;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r2 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }
}
