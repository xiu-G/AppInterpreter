public class com.nd.diandong.other.K extends java.lang.Object
{
    private static java.lang.String a;

    static void <clinit>()
    {
        <com.nd.diandong.other.K: java.lang.String a> = "SAXReaderUtils";

        return;
    }

    public void <init>()
    {
        com.nd.diandong.other.K r0;

        r0 := @this: com.nd.diandong.other.K;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.concurrent.ConcurrentHashMap a(java.io.InputStream)
    {
        java.util.concurrent.ConcurrentHashMap $r2;
        java.lang.String[] $r1;
        java.lang.Exception $r6;
        int $i0, $i1;
        java.lang.String $r4, $r5;
        java.io.InputStream $r0;
        org.xmlpull.v1.XmlPullParser $r3;
        boolean $z0, $z1;

        $r0 := @parameter0: java.io.InputStream;

        $r1 = newarray (java.lang.String)[3];

        $r1[0] = "code";

        $r1[1] = "did";

        $r1[2] = "sec";

        $r2 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r2.<java.util.concurrent.ConcurrentHashMap: void <init>(int)>(100);

     label01:
        $r3 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>();

        interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>($r0, "UTF-8");

        $i0 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: int getEventType()>();

     label02:
        $z0 = 0;

     label03:
        if $i0 != 1 goto label04;

        return $r2;

     label04:
        $r4 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

     label05:
        lookupswitch($i0)
        {
            case 2: goto label08;
            case 3: goto label21;
            default: goto label06;
        };

     label06:
        $i0 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: int next()>();

     label07:
        goto label03;

     label08:
        $r5 = "register";

     label09:
        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4);

     label10:
        if $z1 == 0 goto label11;

        $z0 = 1;

     label11:
        $r5 = "code";

     label12:
        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4);

     label13:
        if $z1 == 0 goto label14;

        $z0 = 1;

     label14:
        if $z0 == 0 goto label06;

        $i0 = 0;

     label15:
        $i1 = lengthof $r1;

     label16:
        if $i0 >= $i1 goto label06;

     label17:
        $r5 = $r1[$i0];

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4);

     label18:
        if $z1 == 0 goto label20;

     label19:
        $r5 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: java.lang.String nextText()>();

        virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r5);

     label20:
        $i0 = $i0 + 1;

        goto label15;

     label21:
        $r5 = "register";

     label22:
        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4);

     label23:
        if $z1 == 0 goto label24;

        $z0 = 0;

     label24:
        $r5 = "sec";

     label25:
        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4);

     label26:
        if $z1 == 0 goto label06;

        $z0 = 0;

        goto label06;

     label27:
        $r6 := @caughtexception;

        $r4 = <com.nd.diandong.other.K: java.lang.String a>;

        staticinvoke <com.nd.diandong.other.h: void c(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "getHashMapByXmlException:", $r6);

        return $r2;

        catch java.lang.Exception from label01 to label02 with label27;
        catch java.lang.Exception from label04 to label05 with label27;
        catch java.lang.Exception from label06 to label07 with label27;
        catch java.lang.Exception from label09 to label10 with label27;
        catch java.lang.Exception from label12 to label13 with label27;
        catch java.lang.Exception from label15 to label16 with label27;
        catch java.lang.Exception from label17 to label18 with label27;
        catch java.lang.Exception from label19 to label20 with label27;
        catch java.lang.Exception from label22 to label23 with label27;
        catch java.lang.Exception from label25 to label26 with label27;
    }
}
