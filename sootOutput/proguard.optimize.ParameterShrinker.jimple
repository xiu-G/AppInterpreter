public class proguard.optimize.ParameterShrinker extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.attribute.visitor.AttributeVisitor
{
    private static final boolean DEBUG;
    private final proguard.classfile.visitor.MemberVisitor extraVariableMemberVisitor;
    private final proguard.classfile.editor.VariableRemapper variableRemapper;

    public void <init>()
    {
        proguard.optimize.ParameterShrinker r0;

        r0 := @this: proguard.optimize.ParameterShrinker;

        specialinvoke r0.<proguard.optimize.ParameterShrinker: void <init>(proguard.classfile.visitor.MemberVisitor)>(null);

        return;
    }

    public void <init>(proguard.classfile.visitor.MemberVisitor)
    {
        proguard.classfile.visitor.MemberVisitor $r1;
        proguard.classfile.editor.VariableRemapper $r2;
        proguard.optimize.ParameterShrinker r0;

        r0 := @this: proguard.optimize.ParameterShrinker;

        $r1 := @parameter0: proguard.classfile.visitor.MemberVisitor;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        $r2 = new proguard.classfile.editor.VariableRemapper;

        specialinvoke $r2.<proguard.classfile.editor.VariableRemapper: void <init>()>();

        r0.<proguard.optimize.ParameterShrinker: proguard.classfile.editor.VariableRemapper variableRemapper> = $r2;

        r0.<proguard.optimize.ParameterShrinker: proguard.classfile.visitor.MemberVisitor extraVariableMemberVisitor> = $r1;

        return;
    }

    public void visitAnyAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.Attribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.optimize.ParameterShrinker r0;
        proguard.classfile.attribute.Attribute $r2;

        r0 := @this: proguard.optimize.ParameterShrinker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.Attribute;

        return;
    }

    public void visitCodeAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute)
    {
        proguard.classfile.editor.VariableRemapper $r7;
        proguard.classfile.Clazz $r1;
        int[] $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.String $r5;
        boolean $z0;
        proguard.classfile.visitor.MemberVisitor $r6;
        proguard.optimize.ParameterShrinker r0;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.optimize.ParameterShrinker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 = staticinvoke <proguard.optimize.info.ParameterUsageMarker: int getParameterSize(proguard.classfile.Method)>($r2);

        $i1 = $i0;

        $r5 = interfaceinvoke $r2.<proguard.classfile.Method: java.lang.String getDescriptor(proguard.classfile.Clazz)>($r1);

        $i2 = interfaceinvoke $r2.<proguard.classfile.Method: int getAccessFlags()>();

        $i3 = staticinvoke <proguard.classfile.util.ClassUtil: int internalMethodParameterSize(java.lang.String,int)>($r5, $i2);

        if $i0 <= $i3 goto label7;

        $i2 = $r3.<proguard.classfile.attribute.CodeAttribute: int u2maxLocals>;

        $r4 = newarray (int)[$i2];

        $i4 = 0;

        $i5 = 0;

     label1:
        if $i5 >= $i0 goto label5;

        $z0 = staticinvoke <proguard.optimize.info.ParameterUsageMarker: boolean isParameterUsed(proguard.classfile.Method,int)>($r2, $i5);

        if $z0 == 0 goto label3;

        $r4[$i5] = $i4;

        $i4 = $i4 + 1;

     label2:
        $i5 = $i5 + 1;

        goto label1;

     label3:
        $i6 = $i3 + 1;

        $r4[$i5] = $i3;

        $r6 = r0.<proguard.optimize.ParameterShrinker: proguard.classfile.visitor.MemberVisitor extraVariableMemberVisitor>;

        if $r6 == null goto label4;

        $r6 = r0.<proguard.optimize.ParameterShrinker: proguard.classfile.visitor.MemberVisitor extraVariableMemberVisitor>;

        interfaceinvoke $r2.<proguard.classfile.Method: void accept(proguard.classfile.Clazz,proguard.classfile.visitor.MemberVisitor)>($r1, $r6);

     label4:
        $i3 = $i6;

        goto label2;

     label5:
        if $i1 >= $i2 goto label6;

        $r4[$i1] = $i1;

        $i1 = $i1 + 1;

        goto label5;

     label6:
        $r7 = r0.<proguard.optimize.ParameterShrinker: proguard.classfile.editor.VariableRemapper variableRemapper>;

        virtualinvoke $r7.<proguard.classfile.editor.VariableRemapper: void setVariableMap(int[])>($r4);

        $r7 = r0.<proguard.optimize.ParameterShrinker: proguard.classfile.editor.VariableRemapper variableRemapper>;

        virtualinvoke $r7.<proguard.classfile.editor.VariableRemapper: void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute)>($r1, $r2, $r3);

     label7:
        return;
    }
}
