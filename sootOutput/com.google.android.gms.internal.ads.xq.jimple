public final class com.google.android.gms.internal.ads.xq extends java.lang.Object
{

    public static int a(byte)
    {
        int $i1;
        byte $b0;

        $b0 := @parameter0: byte;

        $i1 = (int) $b0;

        if $i1 >= 0 goto label1;

        $i1 = (int) $b0;

        $i1 = $i1 + 256;

        return $i1;

     label1:
        $i1 = (int) $b0;

        return $i1;
    }

    public static long b(java.nio.ByteBuffer)
    {
        byte $b2;
        int $i0;
        long $l1;
        java.nio.ByteBuffer $r0;

        $r0 := @parameter0: java.nio.ByteBuffer;

        $i0 = virtualinvoke $r0.<java.nio.ByteBuffer: int getInt()>();

        $l1 = (long) $i0;

        $b2 = $l1 cmp 0L;

        $i0 = (int) $b2;

        if $i0 >= 0 goto label1;

        $l1 = $l1 + 4294967296L;

     label1:
        return $l1;
    }

    public static int c(java.nio.ByteBuffer)
    {
        byte $b0;
        int $i1, $i2;
        java.nio.ByteBuffer $r0;

        $r0 := @parameter0: java.nio.ByteBuffer;

        $b0 = virtualinvoke $r0.<java.nio.ByteBuffer: byte get()>();

        $i1 = staticinvoke <com.google.android.gms.internal.ads.xq: int a(byte)>($b0);

        $i1 = $i1 << 8;

        $b0 = virtualinvoke $r0.<java.nio.ByteBuffer: byte get()>();

        $i2 = staticinvoke <com.google.android.gms.internal.ads.xq: int a(byte)>($b0);

        $i1 = $i1 + $i2;

        return $i1;
    }

    public static long d(java.nio.ByteBuffer)
    {
        byte $b0;
        int $i3;
        long $l1, $l2;
        java.lang.RuntimeException $r1;
        java.nio.ByteBuffer $r0;

        $r0 := @parameter0: java.nio.ByteBuffer;

        $l1 = staticinvoke <com.google.android.gms.internal.ads.xq: long b(java.nio.ByteBuffer)>($r0);

        $l1 = $l1 << 32;

        $l1 = $l1 + 0L;

        $b0 = $l1 cmp 0L;

        $i3 = (int) $b0;

        if $i3 < 0 goto label1;

        $l2 = staticinvoke <com.google.android.gms.internal.ads.xq: long b(java.nio.ByteBuffer)>($r0);

        $l1 = $l1 + $l2;

        return $l1;

     label1:
        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("I don\'t know how to deal with UInt64! long is not sufficient and I don\'t want to use BigInt");

        throw $r1;
    }

    public static double e(java.nio.ByteBuffer)
    {
        byte[] $r1;
        short $s3;
        byte $b0;
        int $i1, $i2;
        java.nio.ByteBuffer $r0;
        double $d0;

        $r0 := @parameter0: java.nio.ByteBuffer;

        $r1 = newarray (byte)[4];

        virtualinvoke $r0.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>($r1);

        $b0 = $r1[0];

        $i1 = (int) $b0;

        $i1 = $i1 << 24;

        $i1 = $i1 & -16777216;

        $b0 = $r1[1];

        $i2 = (int) $b0;

        $i2 = $i2 << 16;

        $i2 = $i2 & 16711680;

        $i1 = $i1 | $i2;

        $b0 = $r1[2];

        $i2 = (int) $b0;

        $i2 = $i2 << 8;

        $i2 = $i2 & 65280;

        $i1 = $i1 | $i2;

        $b0 = $r1[3];

        $s3 = (short) $b0;

        $s3 = $s3 & 255;

        $i2 = (int) $s3;

        $i1 = $i1 | $i2;

        $d0 = (double) $i1;

        staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        $d0 = $d0 / 65536.0;

        return $d0;
    }

    public static double f(java.nio.ByteBuffer)
    {
        byte[] $r1;
        short $s3;
        byte $b0;
        int $i1, $i2;
        java.nio.ByteBuffer $r0;
        double $d0;

        $r0 := @parameter0: java.nio.ByteBuffer;

        $r1 = newarray (byte)[4];

        virtualinvoke $r0.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>($r1);

        $b0 = $r1[0];

        $i1 = (int) $b0;

        $i1 = $i1 << 24;

        $i1 = $i1 & -16777216;

        $b0 = $r1[1];

        $i2 = (int) $b0;

        $i2 = $i2 << 16;

        $i2 = $i2 & 16711680;

        $i1 = $i1 | $i2;

        $b0 = $r1[2];

        $i2 = (int) $b0;

        $i2 = $i2 << 8;

        $i2 = $i2 & 65280;

        $i1 = $i1 | $i2;

        $b0 = $r1[3];

        $s3 = (short) $b0;

        $s3 = $s3 & 255;

        $i2 = (int) $s3;

        $i1 = $i1 | $i2;

        $d0 = (double) $i1;

        staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        $d0 = $d0 / 1.073741824E9;

        return $d0;
    }

    public static java.lang.String g(java.nio.ByteBuffer)
    {
        java.lang.Throwable $r3;
        byte[] $r1;
        java.lang.String $r2;
        java.lang.RuntimeException $r4;
        java.nio.ByteBuffer $r0;

        $r0 := @parameter0: java.nio.ByteBuffer;

        $r1 = newarray (byte)[4];

        virtualinvoke $r0.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>($r1);

        $r2 = new java.lang.String;

     label1:
        specialinvoke $r2.<java.lang.String: void <init>(byte[],java.lang.String)>($r1, "ISO-8859-1");

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }
}
