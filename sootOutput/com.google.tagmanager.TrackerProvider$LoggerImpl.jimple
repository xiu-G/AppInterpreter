class com.google.tagmanager.TrackerProvider$LoggerImpl extends java.lang.Object implements com.google.analytics.tracking.android.Logger
{

    void <init>()
    {
        com.google.tagmanager.TrackerProvider$LoggerImpl r0;

        r0 := @this: com.google.tagmanager.TrackerProvider$LoggerImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static com.google.analytics.tracking.android.Logger$LogLevel toAnalyticsLogLevel(com.google.tagmanager.Logger$LogLevel)
    {
        com.google.analytics.tracking.android.Logger$LogLevel r2;
        int[] $r1;
        int $i0;
        com.google.tagmanager.Logger$LogLevel $r0;

        $r0 := @parameter0: com.google.tagmanager.Logger$LogLevel;

        $r1 = <com.google.tagmanager.TrackerProvider$1: int[] $SwitchMap$com$google$tagmanager$Logger$LogLevel>;

        $i0 = virtualinvoke $r0.<com.google.tagmanager.Logger$LogLevel: int ordinal()>();

        $i0 = $r1[$i0];

        lookupswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            case 5: goto label4;
            case 6: goto label5;
            default: goto label1;
        };

     label1:
        r2 = <com.google.analytics.tracking.android.Logger$LogLevel: com.google.analytics.tracking.android.Logger$LogLevel ERROR>;

        return r2;

     label2:
        r2 = <com.google.analytics.tracking.android.Logger$LogLevel: com.google.analytics.tracking.android.Logger$LogLevel ERROR>;

        return r2;

     label3:
        r2 = <com.google.analytics.tracking.android.Logger$LogLevel: com.google.analytics.tracking.android.Logger$LogLevel WARNING>;

        return r2;

     label4:
        r2 = <com.google.analytics.tracking.android.Logger$LogLevel: com.google.analytics.tracking.android.Logger$LogLevel INFO>;

        return r2;

     label5:
        r2 = <com.google.analytics.tracking.android.Logger$LogLevel: com.google.analytics.tracking.android.Logger$LogLevel VERBOSE>;

        return r2;
    }

    public void error(java.lang.Exception)
    {
        com.google.tagmanager.TrackerProvider$LoggerImpl r0;
        java.lang.Exception $r1;

        r0 := @this: com.google.tagmanager.TrackerProvider$LoggerImpl;

        $r1 := @parameter0: java.lang.Exception;

        staticinvoke <com.google.tagmanager.Log: void e(java.lang.String,java.lang.Throwable)>("", $r1);

        return;
    }

    public void error(java.lang.String)
    {
        com.google.tagmanager.TrackerProvider$LoggerImpl r0;
        java.lang.String $r1;

        r0 := @this: com.google.tagmanager.TrackerProvider$LoggerImpl;

        $r1 := @parameter0: java.lang.String;

        staticinvoke <com.google.tagmanager.Log: void e(java.lang.String)>($r1);

        return;
    }

    public com.google.analytics.tracking.android.Logger$LogLevel getLogLevel()
    {
        com.google.tagmanager.TrackerProvider$LoggerImpl r0;
        com.google.analytics.tracking.android.Logger$LogLevel $r2;
        com.google.tagmanager.Logger$LogLevel $r1;

        r0 := @this: com.google.tagmanager.TrackerProvider$LoggerImpl;

        $r1 = staticinvoke <com.google.tagmanager.Log: com.google.tagmanager.Logger$LogLevel getLogLevel()>();

        if $r1 != null goto label1;

        $r2 = <com.google.analytics.tracking.android.Logger$LogLevel: com.google.analytics.tracking.android.Logger$LogLevel ERROR>;

        return $r2;

     label1:
        $r2 = staticinvoke <com.google.tagmanager.TrackerProvider$LoggerImpl: com.google.analytics.tracking.android.Logger$LogLevel toAnalyticsLogLevel(com.google.tagmanager.Logger$LogLevel)>($r1);

        return $r2;
    }

    public void info(java.lang.String)
    {
        com.google.tagmanager.TrackerProvider$LoggerImpl r0;
        java.lang.String $r1;

        r0 := @this: com.google.tagmanager.TrackerProvider$LoggerImpl;

        $r1 := @parameter0: java.lang.String;

        staticinvoke <com.google.tagmanager.Log: void i(java.lang.String)>($r1);

        return;
    }

    public void setLogLevel(com.google.analytics.tracking.android.Logger$LogLevel)
    {
        com.google.tagmanager.TrackerProvider$LoggerImpl r0;
        com.google.analytics.tracking.android.Logger$LogLevel $r1;

        r0 := @this: com.google.tagmanager.TrackerProvider$LoggerImpl;

        $r1 := @parameter0: com.google.analytics.tracking.android.Logger$LogLevel;

        staticinvoke <com.google.tagmanager.Log: void w(java.lang.String)>("GA uses GTM logger. Please use TagManager.getLogger().setLogLevel(LogLevel) instead.");

        return;
    }

    public void verbose(java.lang.String)
    {
        com.google.tagmanager.TrackerProvider$LoggerImpl r0;
        java.lang.String $r1;

        r0 := @this: com.google.tagmanager.TrackerProvider$LoggerImpl;

        $r1 := @parameter0: java.lang.String;

        staticinvoke <com.google.tagmanager.Log: void v(java.lang.String)>($r1);

        return;
    }

    public void warn(java.lang.String)
    {
        com.google.tagmanager.TrackerProvider$LoggerImpl r0;
        java.lang.String $r1;

        r0 := @this: com.google.tagmanager.TrackerProvider$LoggerImpl;

        $r1 := @parameter0: java.lang.String;

        staticinvoke <com.google.tagmanager.Log: void w(java.lang.String)>($r1);

        return;
    }
}
