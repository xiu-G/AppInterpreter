public abstract class proguard.classfile.util.SimplifiedVisitor extends java.lang.Object
{

    public void <init>()
    {
        proguard.classfile.util.SimplifiedVisitor r0;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void visitAnnotation(proguard.classfile.Clazz, proguard.classfile.Field, proguard.classfile.attribute.'annotation'.Annotation)
    {
        proguard.classfile.attribute.'annotation'.Annotation $r3;
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.Field $r2;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Field;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.Annotation;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnnotation(proguard.classfile.Clazz,proguard.classfile.Member,proguard.classfile.attribute.'annotation'.Annotation)>($r1, $r2, $r3);

        return;
    }

    public void visitAnnotation(proguard.classfile.Clazz, proguard.classfile.Member, proguard.classfile.attribute.'annotation'.Annotation)
    {
        proguard.classfile.attribute.'annotation'.Annotation $r3;
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.Member $r2;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Member;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.Annotation;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnnotation(proguard.classfile.Clazz,proguard.classfile.attribute.'annotation'.Annotation)>($r1, $r3);

        return;
    }

    public void visitAnnotation(proguard.classfile.Clazz, proguard.classfile.Method, int, proguard.classfile.attribute.'annotation'.Annotation)
    {
        proguard.classfile.attribute.'annotation'.Annotation $r3;
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        int $i0;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $i0 := @parameter2: int;

        $r3 := @parameter3: proguard.classfile.attribute.'annotation'.Annotation;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnnotation(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.'annotation'.Annotation)>($r1, $r2, $r3);

        return;
    }

    public void visitAnnotation(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.'annotation'.Annotation)
    {
        proguard.classfile.attribute.'annotation'.Annotation $r3;
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.Annotation;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnnotation(proguard.classfile.Clazz,proguard.classfile.Member,proguard.classfile.attribute.'annotation'.Annotation)>($r1, $r2, $r3);

        return;
    }

    public void visitAnnotation(proguard.classfile.Clazz, proguard.classfile.attribute.'annotation'.Annotation)
    {
        java.lang.UnsupportedOperationException $r3;
        proguard.classfile.attribute.'annotation'.Annotation $r2;
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        java.lang.StringBuffer $r4;
        java.lang.Class $r5;
        java.lang.String $r6;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.Annotation;

        $r3 = new java.lang.UnsupportedOperationException;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Method must be overridden in [");

        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] if ever called");

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r6);

        throw $r3;
    }

    public void visitAnnotationDefaultAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.'annotation'.AnnotationDefaultAttribute)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.'annotation'.AnnotationDefaultAttribute $r3;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.AnnotationDefaultAttribute;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute)>($r1, $r3);

        return;
    }

    public void visitAnnotationElementValue(proguard.classfile.Clazz, proguard.classfile.attribute.'annotation'.Annotation, proguard.classfile.attribute.'annotation'.AnnotationElementValue)
    {
        proguard.classfile.attribute.'annotation'.Annotation $r2;
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.'annotation'.AnnotationElementValue $r3;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.Annotation;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.AnnotationElementValue;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.'annotation'.Annotation,proguard.classfile.attribute.'annotation'.ElementValue)>($r1, $r2, $r3);

        return;
    }

    public void visitAnyAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.'annotation'.AnnotationsAttribute)
    {
        proguard.classfile.attribute.'annotation'.AnnotationsAttribute $r2;
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.AnnotationsAttribute;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute)>($r1, $r2);

        return;
    }

    public void visitAnyAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.Attribute)
    {
        java.lang.UnsupportedOperationException $r3;
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        java.lang.StringBuffer $r4;
        java.lang.Class $r5;
        java.lang.String $r6;
        proguard.classfile.attribute.Attribute $r2;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.Attribute;

        $r3 = new java.lang.UnsupportedOperationException;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Method must be overridden in [");

        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] if ever called");

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r6);

        throw $r3;
    }

    public void visitAnyClass(proguard.classfile.Clazz)
    {
        java.lang.UnsupportedOperationException $r2;
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        java.lang.StringBuffer $r3;
        java.lang.Class $r4;
        java.lang.String $r5;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 = new java.lang.UnsupportedOperationException;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Method must be overridden in [");

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] if ever called");

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r5);

        throw $r2;
    }

    public void visitAnyConstant(proguard.classfile.Clazz, proguard.classfile.constant.Constant)
    {
        java.lang.UnsupportedOperationException $r3;
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.constant.Constant $r2;
        java.lang.StringBuffer $r4;
        java.lang.Class $r5;
        java.lang.String $r6;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.Constant;

        $r3 = new java.lang.UnsupportedOperationException;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Method must be overridden in [");

        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] if ever called");

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r6);

        throw $r3;
    }

    public void visitAnyElementValue(proguard.classfile.Clazz, proguard.classfile.attribute.'annotation'.Annotation, proguard.classfile.attribute.'annotation'.ElementValue)
    {
        java.lang.UnsupportedOperationException $r4;
        proguard.classfile.attribute.'annotation'.Annotation $r2;
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.attribute.'annotation'.ElementValue $r3;
        proguard.classfile.Clazz $r1;
        java.lang.StringBuffer $r5;
        java.lang.Class $r6;
        java.lang.String $r7;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.Annotation;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.ElementValue;

        $r4 = new java.lang.UnsupportedOperationException;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Method must be overridden in [");

        $r6 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] if ever called");

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r7);

        throw $r4;
    }

    public void visitAnyInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.Instruction)
    {
        java.lang.UnsupportedOperationException $r5;
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.instruction.Instruction $r4;
        java.lang.StringBuffer $r6;
        int $i0;
        proguard.classfile.Method $r2;
        java.lang.Class $r7;
        java.lang.String $r8;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.Instruction;

        $r5 = new java.lang.UnsupportedOperationException;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Method must be overridden in [");

        $r7 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] if ever called");

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r8);

        throw $r5;
    }

    public void visitAnyMember(proguard.classfile.Clazz, proguard.classfile.Member)
    {
        java.lang.UnsupportedOperationException $r3;
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        java.lang.StringBuffer $r4;
        java.lang.Class $r5;
        java.lang.String $r6;
        proguard.classfile.Member $r2;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Member;

        $r3 = new java.lang.UnsupportedOperationException;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Method must be overridden in [");

        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] if ever called");

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r6);

        throw $r3;
    }

    public void visitAnyMethodrefConstant(proguard.classfile.Clazz, proguard.classfile.constant.RefConstant)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.constant.RefConstant $r2;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.RefConstant;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyRefConstant(proguard.classfile.Clazz,proguard.classfile.constant.RefConstant)>($r1, $r2);

        return;
    }

    public void visitAnyParameterAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute $r3;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute)>($r1, $r3);

        return;
    }

    public void visitAnyRefConstant(proguard.classfile.Clazz, proguard.classfile.constant.RefConstant)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.constant.RefConstant $r2;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.RefConstant;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyConstant(proguard.classfile.Clazz,proguard.classfile.constant.Constant)>($r1, $r2);

        return;
    }

    public void visitAnyStackMapFrame(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.attribute.preverification.StackMapFrame)
    {
        java.lang.UnsupportedOperationException $r5;
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.attribute.preverification.StackMapFrame $r4;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        java.lang.StringBuffer $r6;
        int $i0;
        proguard.classfile.Method $r2;
        java.lang.Class $r7;
        java.lang.String $r8;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.attribute.preverification.StackMapFrame;

        $r5 = new java.lang.UnsupportedOperationException;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Method must be overridden in [");

        $r7 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] if ever called");

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r8);

        throw $r5;
    }

    public void visitAnySwitchInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.SwitchInstruction)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.Method $r2;
        proguard.classfile.instruction.SwitchInstruction $r4;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.SwitchInstruction;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction)>($r1, $r2, $r3, $i0, $r4);

        return;
    }

    public void visitAnyVerificationType(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.attribute.preverification.VerificationType)
    {
        java.lang.UnsupportedOperationException $r5;
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.attribute.preverification.VerificationType $r4;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        java.lang.StringBuffer $r6;
        int $i0;
        proguard.classfile.Method $r2;
        java.lang.Class $r7;
        java.lang.String $r8;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.attribute.preverification.VerificationType;

        $r5 = new java.lang.UnsupportedOperationException;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Method must be overridden in [");

        $r7 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] if ever called");

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r8);

        throw $r5;
    }

    public void visitArrayElementValue(proguard.classfile.Clazz, proguard.classfile.attribute.'annotation'.Annotation, proguard.classfile.attribute.'annotation'.ArrayElementValue)
    {
        proguard.classfile.attribute.'annotation'.Annotation $r2;
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.'annotation'.ArrayElementValue $r3;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.Annotation;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.ArrayElementValue;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.'annotation'.Annotation,proguard.classfile.attribute.'annotation'.ElementValue)>($r1, $r2, $r3);

        return;
    }

    public void visitBranchInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.BranchInstruction)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.Method $r2;
        proguard.classfile.instruction.BranchInstruction $r4;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.BranchInstruction;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction)>($r1, $r2, $r3, $i0, $r4);

        return;
    }

    public void visitClassConstant(proguard.classfile.Clazz, proguard.classfile.constant.ClassConstant)
    {
        proguard.classfile.constant.ClassConstant $r2;
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.ClassConstant;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyConstant(proguard.classfile.Clazz,proguard.classfile.constant.Constant)>($r1, $r2);

        return;
    }

    public void visitClassElementValue(proguard.classfile.Clazz, proguard.classfile.attribute.'annotation'.Annotation, proguard.classfile.attribute.'annotation'.ClassElementValue)
    {
        proguard.classfile.attribute.'annotation'.Annotation $r2;
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.attribute.'annotation'.ClassElementValue $r3;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.Annotation;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.ClassElementValue;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.'annotation'.Annotation,proguard.classfile.attribute.'annotation'.ElementValue)>($r1, $r2, $r3);

        return;
    }

    public void visitCodeAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute)>($r1, $r3);

        return;
    }

    public void visitConstantElementValue(proguard.classfile.Clazz, proguard.classfile.attribute.'annotation'.Annotation, proguard.classfile.attribute.'annotation'.ConstantElementValue)
    {
        proguard.classfile.attribute.'annotation'.ConstantElementValue $r3;
        proguard.classfile.attribute.'annotation'.Annotation $r2;
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.Annotation;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.ConstantElementValue;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.'annotation'.Annotation,proguard.classfile.attribute.'annotation'.ElementValue)>($r1, $r2, $r3);

        return;
    }

    public void visitConstantInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.ConstantInstruction)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.instruction.ConstantInstruction $r4;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.ConstantInstruction;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction)>($r1, $r2, $r3, $i0, $r4);

        return;
    }

    public void visitConstantValueAttribute(proguard.classfile.Clazz, proguard.classfile.Field, proguard.classfile.attribute.ConstantValueAttribute)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.Field $r2;
        proguard.classfile.attribute.ConstantValueAttribute $r3;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Field;

        $r3 := @parameter2: proguard.classfile.attribute.ConstantValueAttribute;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute)>($r1, $r3);

        return;
    }

    public void visitDeprecatedAttribute(proguard.classfile.Clazz, proguard.classfile.Field, proguard.classfile.attribute.DeprecatedAttribute)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.Field $r2;
        proguard.classfile.attribute.DeprecatedAttribute $r3;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Field;

        $r3 := @parameter2: proguard.classfile.attribute.DeprecatedAttribute;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitDeprecatedAttribute(proguard.classfile.Clazz,proguard.classfile.Member,proguard.classfile.attribute.DeprecatedAttribute)>($r1, $r2, $r3);

        return;
    }

    public void visitDeprecatedAttribute(proguard.classfile.Clazz, proguard.classfile.Member, proguard.classfile.attribute.DeprecatedAttribute)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.DeprecatedAttribute $r3;
        proguard.classfile.Member $r2;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Member;

        $r3 := @parameter2: proguard.classfile.attribute.DeprecatedAttribute;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitDeprecatedAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.DeprecatedAttribute)>($r1, $r3);

        return;
    }

    public void visitDeprecatedAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.DeprecatedAttribute)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.DeprecatedAttribute $r3;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.DeprecatedAttribute;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitDeprecatedAttribute(proguard.classfile.Clazz,proguard.classfile.Member,proguard.classfile.attribute.DeprecatedAttribute)>($r1, $r2, $r3);

        return;
    }

    public void visitDeprecatedAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.DeprecatedAttribute)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.attribute.DeprecatedAttribute $r2;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.DeprecatedAttribute;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute)>($r1, $r2);

        return;
    }

    public void visitDoubleConstant(proguard.classfile.Clazz, proguard.classfile.constant.DoubleConstant)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.constant.DoubleConstant $r2;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.DoubleConstant;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyConstant(proguard.classfile.Clazz,proguard.classfile.constant.Constant)>($r1, $r2);

        return;
    }

    public void visitDoubleType(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.attribute.preverification.DoubleType)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.preverification.DoubleType $r4;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.attribute.preverification.DoubleType;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyVerificationType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.VerificationType)>($r1, $r2, $r3, $i0, $r4);

        return;
    }

    public void visitEnclosingMethodAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.EnclosingMethodAttribute)
    {
        proguard.classfile.attribute.EnclosingMethodAttribute $r2;
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.EnclosingMethodAttribute;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute)>($r1, $r2);

        return;
    }

    public void visitEnumConstantElementValue(proguard.classfile.Clazz, proguard.classfile.attribute.'annotation'.Annotation, proguard.classfile.attribute.'annotation'.EnumConstantElementValue)
    {
        proguard.classfile.attribute.'annotation'.Annotation $r2;
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.'annotation'.EnumConstantElementValue $r3;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.Annotation;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.EnumConstantElementValue;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.'annotation'.Annotation,proguard.classfile.attribute.'annotation'.ElementValue)>($r1, $r2, $r3);

        return;
    }

    public void visitExceptionsAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.ExceptionsAttribute)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.ExceptionsAttribute $r3;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.ExceptionsAttribute;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute)>($r1, $r3);

        return;
    }

    public void visitFieldrefConstant(proguard.classfile.Clazz, proguard.classfile.constant.FieldrefConstant)
    {
        proguard.classfile.constant.FieldrefConstant $r2;
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.FieldrefConstant;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyRefConstant(proguard.classfile.Clazz,proguard.classfile.constant.RefConstant)>($r1, $r2);

        return;
    }

    public void visitFloatConstant(proguard.classfile.Clazz, proguard.classfile.constant.FloatConstant)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.constant.FloatConstant $r2;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.FloatConstant;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyConstant(proguard.classfile.Clazz,proguard.classfile.constant.Constant)>($r1, $r2);

        return;
    }

    public void visitFloatType(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.attribute.preverification.FloatType)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.attribute.preverification.FloatType $r4;
        int $i0;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.attribute.preverification.FloatType;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyVerificationType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.VerificationType)>($r1, $r2, $r3, $i0, $r4);

        return;
    }

    public void visitFullFrame(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.attribute.preverification.FullFrame)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.attribute.preverification.FullFrame $r4;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.attribute.preverification.FullFrame;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyStackMapFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.StackMapFrame)>($r1, $r2, $r3, $i0, $r4);

        return;
    }

    public void visitInnerClassesAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.InnerClassesAttribute)
    {
        proguard.classfile.attribute.InnerClassesAttribute $r2;
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.InnerClassesAttribute;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute)>($r1, $r2);

        return;
    }

    public void visitIntegerConstant(proguard.classfile.Clazz, proguard.classfile.constant.IntegerConstant)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.constant.IntegerConstant $r2;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.IntegerConstant;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyConstant(proguard.classfile.Clazz,proguard.classfile.constant.Constant)>($r1, $r2);

        return;
    }

    public void visitIntegerType(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.attribute.preverification.IntegerType)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.attribute.preverification.IntegerType $r4;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.attribute.preverification.IntegerType;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyVerificationType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.VerificationType)>($r1, $r2, $r3, $i0, $r4);

        return;
    }

    public void visitInterfaceMethodrefConstant(proguard.classfile.Clazz, proguard.classfile.constant.InterfaceMethodrefConstant)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.constant.InterfaceMethodrefConstant $r2;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.InterfaceMethodrefConstant;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyMethodrefConstant(proguard.classfile.Clazz,proguard.classfile.constant.RefConstant)>($r1, $r2);

        return;
    }

    public void visitLessZeroFrame(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.attribute.preverification.LessZeroFrame)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.preverification.LessZeroFrame $r4;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.attribute.preverification.LessZeroFrame;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyStackMapFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.StackMapFrame)>($r1, $r2, $r3, $i0, $r4);

        return;
    }

    public void visitLibraryClass(proguard.classfile.LibraryClass)
    {
        proguard.classfile.LibraryClass $r1;
        proguard.classfile.util.SimplifiedVisitor r0;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyClass(proguard.classfile.Clazz)>($r1);

        return;
    }

    public void visitLibraryField(proguard.classfile.LibraryClass, proguard.classfile.LibraryField)
    {
        proguard.classfile.LibraryClass $r1;
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.LibraryField $r2;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        $r2 := @parameter1: proguard.classfile.LibraryField;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitLibraryMember(proguard.classfile.LibraryClass,proguard.classfile.LibraryMember)>($r1, $r2);

        return;
    }

    public void visitLibraryMember(proguard.classfile.LibraryClass, proguard.classfile.LibraryMember)
    {
        proguard.classfile.LibraryClass $r1;
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.LibraryMember $r2;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        $r2 := @parameter1: proguard.classfile.LibraryMember;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyMember(proguard.classfile.Clazz,proguard.classfile.Member)>($r1, $r2);

        return;
    }

    public void visitLibraryMethod(proguard.classfile.LibraryClass, proguard.classfile.LibraryMethod)
    {
        proguard.classfile.LibraryMethod $r2;
        proguard.classfile.LibraryClass $r1;
        proguard.classfile.util.SimplifiedVisitor r0;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        $r2 := @parameter1: proguard.classfile.LibraryMethod;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitLibraryMember(proguard.classfile.LibraryClass,proguard.classfile.LibraryMember)>($r1, $r2);

        return;
    }

    public void visitLineNumberTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LineNumberTableAttribute)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.attribute.LineNumberTableAttribute $r4;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.LineNumberTableAttribute;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute)>($r1, $r4);

        return;
    }

    public void visitLocalVariableTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LocalVariableTableAttribute)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.LocalVariableTableAttribute $r4;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.LocalVariableTableAttribute;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute)>($r1, $r4);

        return;
    }

    public void visitLocalVariableTypeTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LocalVariableTypeTableAttribute)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.LocalVariableTypeTableAttribute $r4;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.LocalVariableTypeTableAttribute;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute)>($r1, $r4);

        return;
    }

    public void visitLongConstant(proguard.classfile.Clazz, proguard.classfile.constant.LongConstant)
    {
        proguard.classfile.constant.LongConstant $r2;
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.LongConstant;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyConstant(proguard.classfile.Clazz,proguard.classfile.constant.Constant)>($r1, $r2);

        return;
    }

    public void visitLongType(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.attribute.preverification.LongType)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.preverification.LongType $r4;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.attribute.preverification.LongType;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyVerificationType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.VerificationType)>($r1, $r2, $r3, $i0, $r4);

        return;
    }

    public void visitLookUpSwitchInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.LookUpSwitchInstruction)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.instruction.LookUpSwitchInstruction $r4;
        int $i0;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.LookUpSwitchInstruction;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnySwitchInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.SwitchInstruction)>($r1, $r2, $r3, $i0, $r4);

        return;
    }

    public void visitMethodrefConstant(proguard.classfile.Clazz, proguard.classfile.constant.MethodrefConstant)
    {
        proguard.classfile.constant.MethodrefConstant $r2;
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.MethodrefConstant;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyMethodrefConstant(proguard.classfile.Clazz,proguard.classfile.constant.RefConstant)>($r1, $r2);

        return;
    }

    public void visitMoreZeroFrame(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.attribute.preverification.MoreZeroFrame)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.preverification.MoreZeroFrame $r4;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.attribute.preverification.MoreZeroFrame;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyStackMapFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.StackMapFrame)>($r1, $r2, $r3, $i0, $r4);

        return;
    }

    public void visitNameAndTypeConstant(proguard.classfile.Clazz, proguard.classfile.constant.NameAndTypeConstant)
    {
        proguard.classfile.constant.NameAndTypeConstant $r2;
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.NameAndTypeConstant;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyConstant(proguard.classfile.Clazz,proguard.classfile.constant.Constant)>($r1, $r2);

        return;
    }

    public void visitNullType(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.attribute.preverification.NullType)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.preverification.NullType $r4;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.attribute.preverification.NullType;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyVerificationType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.VerificationType)>($r1, $r2, $r3, $i0, $r4);

        return;
    }

    public void visitObjectType(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.attribute.preverification.ObjectType)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.preverification.ObjectType $r4;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.attribute.preverification.ObjectType;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyVerificationType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.VerificationType)>($r1, $r2, $r3, $i0, $r4);

        return;
    }

    public void visitProgramClass(proguard.classfile.ProgramClass)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.ProgramClass $r1;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyClass(proguard.classfile.Clazz)>($r1);

        return;
    }

    public void visitProgramField(proguard.classfile.ProgramClass, proguard.classfile.ProgramField)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.ProgramField $r2;
        proguard.classfile.ProgramClass $r1;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.ProgramField;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitProgramMember(proguard.classfile.ProgramClass,proguard.classfile.ProgramMember)>($r1, $r2);

        return;
    }

    public void visitProgramMember(proguard.classfile.ProgramClass, proguard.classfile.ProgramMember)
    {
        proguard.classfile.ProgramMember $r2;
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.ProgramClass $r1;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.ProgramMember;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyMember(proguard.classfile.Clazz,proguard.classfile.Member)>($r1, $r2);

        return;
    }

    public void visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.ProgramClass $r1;
        proguard.classfile.ProgramMethod $r2;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.ProgramMethod;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitProgramMember(proguard.classfile.ProgramClass,proguard.classfile.ProgramMember)>($r1, $r2);

        return;
    }

    public void visitRuntimeInvisibleAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.Field, proguard.classfile.attribute.'annotation'.RuntimeInvisibleAnnotationsAttribute)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.Field $r2;
        proguard.classfile.attribute.'annotation'.RuntimeInvisibleAnnotationsAttribute $r3;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Field;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.RuntimeInvisibleAnnotationsAttribute;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitRuntimeInvisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Member,proguard.classfile.attribute.'annotation'.RuntimeInvisibleAnnotationsAttribute)>($r1, $r2, $r3);

        return;
    }

    public void visitRuntimeInvisibleAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.Member, proguard.classfile.attribute.'annotation'.RuntimeInvisibleAnnotationsAttribute)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.'annotation'.RuntimeInvisibleAnnotationsAttribute $r3;
        proguard.classfile.Member $r2;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Member;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.RuntimeInvisibleAnnotationsAttribute;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitRuntimeInvisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.'annotation'.RuntimeInvisibleAnnotationsAttribute)>($r1, $r3);

        return;
    }

    public void visitRuntimeInvisibleAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.'annotation'.RuntimeInvisibleAnnotationsAttribute)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.'annotation'.RuntimeInvisibleAnnotationsAttribute $r3;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.RuntimeInvisibleAnnotationsAttribute;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitRuntimeInvisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Member,proguard.classfile.attribute.'annotation'.RuntimeInvisibleAnnotationsAttribute)>($r1, $r2, $r3);

        return;
    }

    public void visitRuntimeInvisibleAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.'annotation'.RuntimeInvisibleAnnotationsAttribute)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.'annotation'.RuntimeInvisibleAnnotationsAttribute $r2;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.RuntimeInvisibleAnnotationsAttribute;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.'annotation'.AnnotationsAttribute)>($r1, $r2);

        return;
    }

    public void visitRuntimeInvisibleParameterAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.'annotation'.RuntimeInvisibleParameterAnnotationsAttribute)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.'annotation'.RuntimeInvisibleParameterAnnotationsAttribute $r3;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.RuntimeInvisibleParameterAnnotationsAttribute;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyParameterAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute)>($r1, $r2, $r3);

        return;
    }

    public void visitRuntimeVisibleAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.Field, proguard.classfile.attribute.'annotation'.RuntimeVisibleAnnotationsAttribute)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.'annotation'.RuntimeVisibleAnnotationsAttribute $r3;
        proguard.classfile.Field $r2;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Field;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.RuntimeVisibleAnnotationsAttribute;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitRuntimeVisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Member,proguard.classfile.attribute.'annotation'.RuntimeVisibleAnnotationsAttribute)>($r1, $r2, $r3);

        return;
    }

    public void visitRuntimeVisibleAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.Member, proguard.classfile.attribute.'annotation'.RuntimeVisibleAnnotationsAttribute)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.'annotation'.RuntimeVisibleAnnotationsAttribute $r3;
        proguard.classfile.Member $r2;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Member;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.RuntimeVisibleAnnotationsAttribute;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitRuntimeVisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.'annotation'.RuntimeVisibleAnnotationsAttribute)>($r1, $r3);

        return;
    }

    public void visitRuntimeVisibleAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.'annotation'.RuntimeVisibleAnnotationsAttribute)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.'annotation'.RuntimeVisibleAnnotationsAttribute $r3;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.RuntimeVisibleAnnotationsAttribute;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitRuntimeVisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Member,proguard.classfile.attribute.'annotation'.RuntimeVisibleAnnotationsAttribute)>($r1, $r2, $r3);

        return;
    }

    public void visitRuntimeVisibleAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.'annotation'.RuntimeVisibleAnnotationsAttribute)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.'annotation'.RuntimeVisibleAnnotationsAttribute $r2;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.RuntimeVisibleAnnotationsAttribute;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.'annotation'.AnnotationsAttribute)>($r1, $r2);

        return;
    }

    public void visitRuntimeVisibleParameterAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.'annotation'.RuntimeVisibleParameterAnnotationsAttribute)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.'annotation'.RuntimeVisibleParameterAnnotationsAttribute $r3;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.RuntimeVisibleParameterAnnotationsAttribute;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyParameterAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute)>($r1, $r2, $r3);

        return;
    }

    public void visitSameOneFrame(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.attribute.preverification.SameOneFrame)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.attribute.preverification.SameOneFrame $r4;
        int $i0;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.attribute.preverification.SameOneFrame;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyStackMapFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.StackMapFrame)>($r1, $r2, $r3, $i0, $r4);

        return;
    }

    public void visitSameZeroFrame(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.attribute.preverification.SameZeroFrame)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.attribute.preverification.SameZeroFrame $r4;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.attribute.preverification.SameZeroFrame;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyStackMapFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.StackMapFrame)>($r1, $r2, $r3, $i0, $r4);

        return;
    }

    public void visitSignatureAttribute(proguard.classfile.Clazz, proguard.classfile.Field, proguard.classfile.attribute.SignatureAttribute)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.SignatureAttribute $r3;
        proguard.classfile.Field $r2;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Field;

        $r3 := @parameter2: proguard.classfile.attribute.SignatureAttribute;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitSignatureAttribute(proguard.classfile.Clazz,proguard.classfile.Member,proguard.classfile.attribute.SignatureAttribute)>($r1, $r2, $r3);

        return;
    }

    public void visitSignatureAttribute(proguard.classfile.Clazz, proguard.classfile.Member, proguard.classfile.attribute.SignatureAttribute)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.SignatureAttribute $r3;
        proguard.classfile.Member $r2;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Member;

        $r3 := @parameter2: proguard.classfile.attribute.SignatureAttribute;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitSignatureAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SignatureAttribute)>($r1, $r3);

        return;
    }

    public void visitSignatureAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.SignatureAttribute)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.SignatureAttribute $r3;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.SignatureAttribute;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitSignatureAttribute(proguard.classfile.Clazz,proguard.classfile.Member,proguard.classfile.attribute.SignatureAttribute)>($r1, $r2, $r3);

        return;
    }

    public void visitSignatureAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.SignatureAttribute)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.attribute.SignatureAttribute $r2;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.SignatureAttribute;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute)>($r1, $r2);

        return;
    }

    public void visitSimpleInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.SimpleInstruction)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.Method $r2;
        proguard.classfile.instruction.SimpleInstruction $r4;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.SimpleInstruction;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction)>($r1, $r2, $r3, $i0, $r4);

        return;
    }

    public void visitSourceDirAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.SourceDirAttribute)
    {
        proguard.classfile.attribute.SourceDirAttribute $r2;
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.SourceDirAttribute;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute)>($r1, $r2);

        return;
    }

    public void visitSourceFileAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.SourceFileAttribute)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.SourceFileAttribute $r2;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.SourceFileAttribute;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute)>($r1, $r2);

        return;
    }

    public void visitStackDoubleType(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, int, proguard.classfile.attribute.preverification.DoubleType)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0, $i1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.preverification.DoubleType $r4;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $r4 := @parameter5: proguard.classfile.attribute.preverification.DoubleType;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitDoubleType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.DoubleType)>($r1, $r2, $r3, $i0, $r4);

        return;
    }

    public void visitStackFloatType(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, int, proguard.classfile.attribute.preverification.FloatType)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.attribute.preverification.FloatType $r4;
        int $i0, $i1;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $r4 := @parameter5: proguard.classfile.attribute.preverification.FloatType;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitFloatType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.FloatType)>($r1, $r2, $r3, $i0, $r4);

        return;
    }

    public void visitStackIntegerType(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, int, proguard.classfile.attribute.preverification.IntegerType)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0, $i1;
        proguard.classfile.attribute.preverification.IntegerType $r4;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $r4 := @parameter5: proguard.classfile.attribute.preverification.IntegerType;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitIntegerType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.IntegerType)>($r1, $r2, $r3, $i0, $r4);

        return;
    }

    public void visitStackLongType(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, int, proguard.classfile.attribute.preverification.LongType)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0, $i1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.preverification.LongType $r4;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $r4 := @parameter5: proguard.classfile.attribute.preverification.LongType;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitLongType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.LongType)>($r1, $r2, $r3, $i0, $r4);

        return;
    }

    public void visitStackMapAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.preverification.StackMapAttribute)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.attribute.preverification.StackMapAttribute $r4;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.preverification.StackMapAttribute;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute)>($r1, $r4);

        return;
    }

    public void visitStackMapTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.preverification.StackMapTableAttribute)
    {
        proguard.classfile.attribute.preverification.StackMapTableAttribute $r4;
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.preverification.StackMapTableAttribute;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute)>($r1, $r4);

        return;
    }

    public void visitStackNullType(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, int, proguard.classfile.attribute.preverification.NullType)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0, $i1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.preverification.NullType $r4;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $r4 := @parameter5: proguard.classfile.attribute.preverification.NullType;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitNullType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.NullType)>($r1, $r2, $r3, $i0, $r4);

        return;
    }

    public void visitStackObjectType(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, int, proguard.classfile.attribute.preverification.ObjectType)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0, $i1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.preverification.ObjectType $r4;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $r4 := @parameter5: proguard.classfile.attribute.preverification.ObjectType;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitObjectType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.ObjectType)>($r1, $r2, $r3, $i0, $r4);

        return;
    }

    public void visitStackTopType(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, int, proguard.classfile.attribute.preverification.TopType)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0, $i1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.preverification.TopType $r4;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $r4 := @parameter5: proguard.classfile.attribute.preverification.TopType;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitTopType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.TopType)>($r1, $r2, $r3, $i0, $r4);

        return;
    }

    public void visitStackUninitializedThisType(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, int, proguard.classfile.attribute.preverification.UninitializedThisType)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0, $i1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.preverification.UninitializedThisType $r4;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $r4 := @parameter5: proguard.classfile.attribute.preverification.UninitializedThisType;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitUninitializedThisType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.UninitializedThisType)>($r1, $r2, $r3, $i0, $r4);

        return;
    }

    public void visitStackUninitializedType(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, int, proguard.classfile.attribute.preverification.UninitializedType)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0, $i1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.preverification.UninitializedType $r4;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $r4 := @parameter5: proguard.classfile.attribute.preverification.UninitializedType;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitUninitializedType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.UninitializedType)>($r1, $r2, $r3, $i0, $r4);

        return;
    }

    public void visitStringConstant(proguard.classfile.Clazz, proguard.classfile.constant.StringConstant)
    {
        proguard.classfile.constant.StringConstant $r2;
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.StringConstant;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyConstant(proguard.classfile.Clazz,proguard.classfile.constant.Constant)>($r1, $r2);

        return;
    }

    public void visitSyntheticAttribute(proguard.classfile.Clazz, proguard.classfile.Field, proguard.classfile.attribute.SyntheticAttribute)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.SyntheticAttribute $r3;
        proguard.classfile.Field $r2;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Field;

        $r3 := @parameter2: proguard.classfile.attribute.SyntheticAttribute;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitSyntheticAttribute(proguard.classfile.Clazz,proguard.classfile.Member,proguard.classfile.attribute.SyntheticAttribute)>($r1, $r2, $r3);

        return;
    }

    public void visitSyntheticAttribute(proguard.classfile.Clazz, proguard.classfile.Member, proguard.classfile.attribute.SyntheticAttribute)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.SyntheticAttribute $r3;
        proguard.classfile.Member $r2;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Member;

        $r3 := @parameter2: proguard.classfile.attribute.SyntheticAttribute;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitSyntheticAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SyntheticAttribute)>($r1, $r3);

        return;
    }

    public void visitSyntheticAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.SyntheticAttribute)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.SyntheticAttribute $r3;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.SyntheticAttribute;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitSyntheticAttribute(proguard.classfile.Clazz,proguard.classfile.Member,proguard.classfile.attribute.SyntheticAttribute)>($r1, $r2, $r3);

        return;
    }

    public void visitSyntheticAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.SyntheticAttribute)
    {
        proguard.classfile.attribute.SyntheticAttribute $r2;
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.SyntheticAttribute;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute)>($r1, $r2);

        return;
    }

    public void visitTableSwitchInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.TableSwitchInstruction)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.instruction.TableSwitchInstruction $r4;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.TableSwitchInstruction;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnySwitchInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.SwitchInstruction)>($r1, $r2, $r3, $i0, $r4);

        return;
    }

    public void visitTopType(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.attribute.preverification.TopType)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.preverification.TopType $r4;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.attribute.preverification.TopType;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyVerificationType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.VerificationType)>($r1, $r2, $r3, $i0, $r4);

        return;
    }

    public void visitUninitializedThisType(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.attribute.preverification.UninitializedThisType)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.preverification.UninitializedThisType $r4;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.attribute.preverification.UninitializedThisType;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyVerificationType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.VerificationType)>($r1, $r2, $r3, $i0, $r4);

        return;
    }

    public void visitUninitializedType(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.attribute.preverification.UninitializedType)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.preverification.UninitializedType $r4;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.attribute.preverification.UninitializedType;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyVerificationType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.VerificationType)>($r1, $r2, $r3, $i0, $r4);

        return;
    }

    public void visitUnknownAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.UnknownAttribute)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.attribute.UnknownAttribute $r2;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.UnknownAttribute;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute)>($r1, $r2);

        return;
    }

    public void visitUtf8Constant(proguard.classfile.Clazz, proguard.classfile.constant.Utf8Constant)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.constant.Utf8Constant $r2;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.Utf8Constant;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyConstant(proguard.classfile.Clazz,proguard.classfile.constant.Constant)>($r1, $r2);

        return;
    }

    public void visitVariableInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.VariableInstruction)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.Method $r2;
        proguard.classfile.instruction.VariableInstruction $r4;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.VariableInstruction;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitAnyInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction)>($r1, $r2, $r3, $i0, $r4);

        return;
    }

    public void visitVariablesDoubleType(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, int, proguard.classfile.attribute.preverification.DoubleType)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0, $i1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.preverification.DoubleType $r4;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $r4 := @parameter5: proguard.classfile.attribute.preverification.DoubleType;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitDoubleType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.DoubleType)>($r1, $r2, $r3, $i0, $r4);

        return;
    }

    public void visitVariablesFloatType(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, int, proguard.classfile.attribute.preverification.FloatType)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.attribute.preverification.FloatType $r4;
        int $i0, $i1;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $r4 := @parameter5: proguard.classfile.attribute.preverification.FloatType;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitFloatType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.FloatType)>($r1, $r2, $r3, $i0, $r4);

        return;
    }

    public void visitVariablesIntegerType(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, int, proguard.classfile.attribute.preverification.IntegerType)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0, $i1;
        proguard.classfile.attribute.preverification.IntegerType $r4;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $r4 := @parameter5: proguard.classfile.attribute.preverification.IntegerType;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitIntegerType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.IntegerType)>($r1, $r2, $r3, $i0, $r4);

        return;
    }

    public void visitVariablesLongType(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, int, proguard.classfile.attribute.preverification.LongType)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0, $i1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.preverification.LongType $r4;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $r4 := @parameter5: proguard.classfile.attribute.preverification.LongType;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitLongType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.LongType)>($r1, $r2, $r3, $i0, $r4);

        return;
    }

    public void visitVariablesNullType(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, int, proguard.classfile.attribute.preverification.NullType)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0, $i1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.preverification.NullType $r4;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $r4 := @parameter5: proguard.classfile.attribute.preverification.NullType;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitNullType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.NullType)>($r1, $r2, $r3, $i0, $r4);

        return;
    }

    public void visitVariablesObjectType(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, int, proguard.classfile.attribute.preverification.ObjectType)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0, $i1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.preverification.ObjectType $r4;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $r4 := @parameter5: proguard.classfile.attribute.preverification.ObjectType;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitObjectType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.ObjectType)>($r1, $r2, $r3, $i0, $r4);

        return;
    }

    public void visitVariablesTopType(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, int, proguard.classfile.attribute.preverification.TopType)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0, $i1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.preverification.TopType $r4;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $r4 := @parameter5: proguard.classfile.attribute.preverification.TopType;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitTopType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.TopType)>($r1, $r2, $r3, $i0, $r4);

        return;
    }

    public void visitVariablesUninitializedThisType(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, int, proguard.classfile.attribute.preverification.UninitializedThisType)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0, $i1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.preverification.UninitializedThisType $r4;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $r4 := @parameter5: proguard.classfile.attribute.preverification.UninitializedThisType;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitUninitializedThisType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.UninitializedThisType)>($r1, $r2, $r3, $i0, $r4);

        return;
    }

    public void visitVariablesUninitializedType(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, int, proguard.classfile.attribute.preverification.UninitializedType)
    {
        proguard.classfile.util.SimplifiedVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0, $i1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.preverification.UninitializedType $r4;

        r0 := @this: proguard.classfile.util.SimplifiedVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $r4 := @parameter5: proguard.classfile.attribute.preverification.UninitializedType;

        virtualinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void visitUninitializedType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.UninitializedType)>($r1, $r2, $r3, $i0, $r4);

        return;
    }
}
