public class org.dom4j.dom.DOMNodeHelper extends java.lang.Object
{
    public static final org.w3c.dom.NodeList EMPTY_NODE_LIST;

    static void <clinit>()
    {
        org.dom4j.dom.DOMNodeHelper$EmptyNodeList $r0;

        $r0 = new org.dom4j.dom.DOMNodeHelper$EmptyNodeList;

        specialinvoke $r0.<org.dom4j.dom.DOMNodeHelper$EmptyNodeList: void <init>()>();

        <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.NodeList EMPTY_NODE_LIST> = $r0;

        return;
    }

    protected void <init>()
    {
        org.dom4j.dom.DOMNodeHelper r0;

        r0 := @this: org.dom4j.dom.DOMNodeHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.w3c.dom.Node appendChild(org.dom4j.Node, org.w3c.dom.Node) throws org.w3c.dom.DOMException
    {
        org.dom4j.Node $r0;
        org.dom4j.Branch r2;
        java.lang.StringBuffer $r5;
        org.w3c.dom.Node $r1, $r3;
        org.w3c.dom.DOMException $r4;
        java.lang.String $r6;
        boolean $z0;

        $r0 := @parameter0: org.dom4j.Node;

        $r1 := @parameter1: org.w3c.dom.Node;

        $z0 = $r0 instanceof org.dom4j.Branch;

        if $z0 == 0 goto label2;

        r2 = (org.dom4j.Branch) $r0;

        $r3 = interfaceinvoke $r1.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        if $r3 == null goto label1;

        interfaceinvoke $r3.<org.w3c.dom.Node: org.w3c.dom.Node removeChild(org.w3c.dom.Node)>($r1);

     label1:
        $r0 = (org.dom4j.Node) $r1;

        interfaceinvoke r2.<org.dom4j.Branch: void add(org.dom4j.Node)>($r0);

        return $r1;

     label2:
        $r4 = new org.w3c.dom.DOMException;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Children not allowed for this node: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r4.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(3, $r6);

        throw $r4;
    }

    public static void appendData(org.dom4j.CharacterData, java.lang.String) throws org.w3c.dom.DOMException
    {
        java.lang.StringBuffer $r3;
        org.w3c.dom.DOMException $r2;
        java.lang.String $r1, $r4;
        org.dom4j.CharacterData $r0;
        boolean $z0;

        $r0 := @parameter0: org.dom4j.CharacterData;

        $r1 := @parameter1: java.lang.String;

        $z0 = interfaceinvoke $r0.<org.dom4j.CharacterData: boolean isReadOnly()>();

        if $z0 == 0 goto label1;

        $r2 = new org.w3c.dom.DOMException;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("CharacterData node is read only: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r0);

        $r1 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(7, $r1);

        throw $r2;

     label1:
        $r4 = interfaceinvoke $r0.<org.dom4j.CharacterData: java.lang.String getText()>();

        if $r4 != null goto label2;

        interfaceinvoke $r0.<org.dom4j.CharacterData: void setText(java.lang.String)>($r4);

        return;

     label2:
        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r0.<org.dom4j.CharacterData: void setText(java.lang.String)>($r1);

        return;
    }

    public static void appendElementsByTagName(java.util.List, org.dom4j.Branch, java.lang.String)
    {
        org.dom4j.Branch $r1;
        org.dom4j.Node $r4;
        java.util.List $r0;
        int i0, $i1;
        org.dom4j.Element r5;
        java.lang.String $r2, $r3;
        boolean $z0, $z1;

        $r0 := @parameter0: java.util.List;

        $r1 := @parameter1: org.dom4j.Branch;

        $r2 := @parameter2: java.lang.String;

        $r3 = "*";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        i0 = 0;

        $i1 = interfaceinvoke $r1.<org.dom4j.Branch: int nodeCount()>();

     label1:
        if i0 >= $i1 goto label5;

        $r4 = interfaceinvoke $r1.<org.dom4j.Branch: org.dom4j.Node node(int)>(i0);

        $z1 = $r4 instanceof org.dom4j.Element;

        if $z1 == 0 goto label4;

        r5 = (org.dom4j.Element) $r4;

        if $z0 != 0 goto label2;

        $r3 = interfaceinvoke r5.<org.dom4j.Element: java.lang.String getName()>();

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label3;

     label2:
        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r5);

     label3:
        staticinvoke <org.dom4j.dom.DOMNodeHelper: void appendElementsByTagName(java.util.List,org.dom4j.Branch,java.lang.String)>($r0, r5, $r2);

     label4:
        i0 = i0 + 1;

        goto label1;

     label5:
        return;
    }

    public static void appendElementsByTagNameNS(java.util.List, org.dom4j.Branch, java.lang.String, java.lang.String)
    {
        org.dom4j.Branch $r1;
        org.dom4j.Node $r5;
        java.util.List $r0;
        int i0, $i1, $i2;
        org.dom4j.Element r6;
        java.lang.String $r2, $r3, $r4;
        boolean $z0, $z1, $z2;

        $r0 := @parameter0: java.util.List;

        $r1 := @parameter1: org.dom4j.Branch;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: java.lang.String;

        $r4 = "*";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        $r4 = "*";

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        i0 = 0;

        $i1 = interfaceinvoke $r1.<org.dom4j.Branch: int nodeCount()>();

     label1:
        if i0 >= $i1 goto label8;

        $r5 = interfaceinvoke $r1.<org.dom4j.Branch: org.dom4j.Node node(int)>(i0);

        $z2 = $r5 instanceof org.dom4j.Element;

        if $z2 == 0 goto label7;

        r6 = (org.dom4j.Element) $r5;

        if $z0 != 0 goto label4;

        if $r2 == null goto label2;

        $i2 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i2 != 0 goto label3;

     label2:
        $r4 = interfaceinvoke r6.<org.dom4j.Element: java.lang.String getNamespaceURI()>();

        if $r4 == null goto label4;

        $r4 = interfaceinvoke r6.<org.dom4j.Element: java.lang.String getNamespaceURI()>();

        $i2 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i2 == 0 goto label4;

     label3:
        if $r2 == null goto label6;

        $r4 = interfaceinvoke r6.<org.dom4j.Element: java.lang.String getNamespaceURI()>();

        $z2 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z2 == 0 goto label6;

     label4:
        if $z1 != 0 goto label5;

        $r4 = interfaceinvoke r6.<org.dom4j.Element: java.lang.String getName()>();

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z2 == 0 goto label6;

     label5:
        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r6);

     label6:
        staticinvoke <org.dom4j.dom.DOMNodeHelper: void appendElementsByTagNameNS(java.util.List,org.dom4j.Branch,java.lang.String,java.lang.String)>($r0, r6, $r2, $r3);

     label7:
        i0 = i0 + 1;

        goto label1;

     label8:
        return;
    }

    public static org.w3c.dom.Attr asDOMAttr(org.dom4j.Node)
    {
        org.w3c.dom.Attr r1;
        org.dom4j.Node r0;
        boolean $z0;

        r0 := @parameter0: org.dom4j.Node;

        if r0 != null goto label1;

        return null;

     label1:
        $z0 = r0 instanceof org.w3c.dom.Attr;

        if $z0 == 0 goto label2;

        r1 = (org.w3c.dom.Attr) r0;

        return r1;

     label2:
        staticinvoke <org.dom4j.dom.DOMNodeHelper: void notSupported()>();

        return null;
    }

    public static org.w3c.dom.Document asDOMDocument(org.dom4j.Document)
    {
        org.dom4j.Document r0;
        org.w3c.dom.Document r1;
        boolean $z0;

        r0 := @parameter0: org.dom4j.Document;

        if r0 != null goto label1;

        return null;

     label1:
        $z0 = r0 instanceof org.w3c.dom.Document;

        if $z0 == 0 goto label2;

        r1 = (org.w3c.dom.Document) r0;

        return r1;

     label2:
        staticinvoke <org.dom4j.dom.DOMNodeHelper: void notSupported()>();

        return null;
    }

    public static org.w3c.dom.DocumentType asDOMDocumentType(org.dom4j.DocumentType)
    {
        org.dom4j.DocumentType r0;
        boolean $z0;
        org.w3c.dom.DocumentType r1;

        r0 := @parameter0: org.dom4j.DocumentType;

        if r0 != null goto label1;

        return null;

     label1:
        $z0 = r0 instanceof org.w3c.dom.DocumentType;

        if $z0 == 0 goto label2;

        r1 = (org.w3c.dom.DocumentType) r0;

        return r1;

     label2:
        staticinvoke <org.dom4j.dom.DOMNodeHelper: void notSupported()>();

        return null;
    }

    public static org.w3c.dom.Element asDOMElement(org.dom4j.Node)
    {
        org.w3c.dom.Element r1;
        org.dom4j.Node r0;
        boolean $z0;

        r0 := @parameter0: org.dom4j.Node;

        if r0 != null goto label1;

        return null;

     label1:
        $z0 = r0 instanceof org.w3c.dom.Element;

        if $z0 == 0 goto label2;

        r1 = (org.w3c.dom.Element) r0;

        return r1;

     label2:
        staticinvoke <org.dom4j.dom.DOMNodeHelper: void notSupported()>();

        return null;
    }

    public static org.w3c.dom.Node asDOMNode(org.dom4j.Node)
    {
        java.io.PrintStream $r2;
        org.dom4j.Node r0;
        java.lang.StringBuffer $r3;
        org.w3c.dom.Node r1;
        java.lang.String $r4;
        boolean $z0;

        r0 := @parameter0: org.dom4j.Node;

        if r0 != null goto label1;

        return null;

     label1:
        $z0 = r0 instanceof org.w3c.dom.Node;

        if $z0 == 0 goto label2;

        r1 = (org.w3c.dom.Node) r0;

        return r1;

     label2:
        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot convert: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" into a W3C DOM Node");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r4);

        staticinvoke <org.dom4j.dom.DOMNodeHelper: void notSupported()>();

        return null;
    }

    public static org.w3c.dom.Text asDOMText(org.dom4j.CharacterData)
    {
        org.w3c.dom.Text r1;
        org.dom4j.CharacterData r0;
        boolean $z0;

        r0 := @parameter0: org.dom4j.CharacterData;

        if r0 != null goto label1;

        return null;

     label1:
        $z0 = r0 instanceof org.w3c.dom.Text;

        if $z0 == 0 goto label2;

        r1 = (org.w3c.dom.Text) r0;

        return r1;

     label2:
        staticinvoke <org.dom4j.dom.DOMNodeHelper: void notSupported()>();

        return null;
    }

    public static org.w3c.dom.Node cloneNode(org.dom4j.Node, boolean)
    {
        org.dom4j.Node $r0;
        org.w3c.dom.Node $r2;
        java.lang.Object $r1;
        boolean $z0;

        $r0 := @parameter0: org.dom4j.Node;

        $z0 := @parameter1: boolean;

        $r1 = interfaceinvoke $r0.<org.dom4j.Node: java.lang.Object clone()>();

        $r0 = (org.dom4j.Node) $r1;

        $r2 = staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.Node asDOMNode(org.dom4j.Node)>($r0);

        return $r2;
    }

    public static org.w3c.dom.NodeList createNodeList(java.util.List)
    {
        java.util.List $r0;
        org.dom4j.dom.DOMNodeHelper$1 $r1;

        $r0 := @parameter0: java.util.List;

        $r1 = new org.dom4j.dom.DOMNodeHelper$1;

        specialinvoke $r1.<org.dom4j.dom.DOMNodeHelper$1: void <init>(java.util.List)>($r0);

        return $r1;
    }

    public static void deleteData(org.dom4j.CharacterData, int, int) throws org.w3c.dom.DOMException
    {
        java.lang.StringBuffer r1;
        org.w3c.dom.DOMException $r2;
        int $i0, $i1, $i2;
        java.lang.String $r3;
        org.dom4j.CharacterData $r0;
        boolean $z0;

        $r0 := @parameter0: org.dom4j.CharacterData;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 = interfaceinvoke $r0.<org.dom4j.CharacterData: boolean isReadOnly()>();

        if $z0 == 0 goto label1;

        $r2 = new org.w3c.dom.DOMException;

        r1 = new java.lang.StringBuffer;

        specialinvoke r1.<java.lang.StringBuffer: void <init>()>();

        r1 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("CharacterData node is read only: ");

        r1 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r0);

        $r3 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(7, $r3);

        throw $r2;

     label1:
        if $i1 >= 0 goto label2;

        $r2 = new org.w3c.dom.DOMException;

        r1 = new java.lang.StringBuffer;

        specialinvoke r1.<java.lang.StringBuffer: void <init>()>();

        r1 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Illegal value for count: ");

        r1 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r3 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(1, $r3);

        throw $r2;

     label2:
        $r3 = interfaceinvoke $r0.<org.dom4j.CharacterData: java.lang.String getText()>();

        if $r3 == null goto label5;

        $i2 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i0 < 0 goto label3;

        if $i0 < $i2 goto label4;

     label3:
        $r2 = new org.w3c.dom.DOMException;

        r1 = new java.lang.StringBuffer;

        specialinvoke r1.<java.lang.StringBuffer: void <init>()>();

        r1 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No text at offset: ");

        r1 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r3 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(1, $r3);

        throw $r2;

     label4:
        r1 = new java.lang.StringBuffer;

        specialinvoke r1.<java.lang.StringBuffer: void <init>(java.lang.String)>($r3);

        $i1 = $i0 + $i1;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer delete(int,int)>($i0, $i1);

        $r3 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r0.<org.dom4j.CharacterData: void setText(java.lang.String)>($r3);

     label5:
        return;
    }

    public static org.w3c.dom.NamedNodeMap getAttributes(org.dom4j.Node)
    {
        org.dom4j.Node $r0;

        $r0 := @parameter0: org.dom4j.Node;

        return null;
    }

    public static org.w3c.dom.NodeList getChildNodes(org.dom4j.Node)
    {
        org.w3c.dom.NodeList r1;
        org.dom4j.Node $r0;

        $r0 := @parameter0: org.dom4j.Node;

        r1 = <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.NodeList EMPTY_NODE_LIST>;

        return r1;
    }

    public static java.lang.String getData(org.dom4j.CharacterData) throws org.w3c.dom.DOMException
    {
        java.lang.String $r1;
        org.dom4j.CharacterData $r0;

        $r0 := @parameter0: org.dom4j.CharacterData;

        $r1 = interfaceinvoke $r0.<org.dom4j.CharacterData: java.lang.String getText()>();

        return $r1;
    }

    public static org.w3c.dom.Node getFirstChild(org.dom4j.Node)
    {
        org.dom4j.Node $r0;

        $r0 := @parameter0: org.dom4j.Node;

        return null;
    }

    public static org.w3c.dom.Node getLastChild(org.dom4j.Node)
    {
        org.dom4j.Node $r0;

        $r0 := @parameter0: org.dom4j.Node;

        return null;
    }

    public static int getLength(org.dom4j.CharacterData)
    {
        int $i0;
        java.lang.String $r1;
        org.dom4j.CharacterData $r0;

        $r0 := @parameter0: org.dom4j.CharacterData;

        $r1 = interfaceinvoke $r0.<org.dom4j.CharacterData: java.lang.String getText()>();

        if $r1 == null goto label1;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        return $i0;

     label1:
        return 0;
    }

    public static java.lang.String getLocalName(org.dom4j.Node)
    {
        org.dom4j.Node $r0;

        $r0 := @parameter0: org.dom4j.Node;

        return null;
    }

    public static java.lang.String getNamespaceURI(org.dom4j.Node)
    {
        org.dom4j.Node $r0;

        $r0 := @parameter0: org.dom4j.Node;

        return null;
    }

    public static org.w3c.dom.Node getNextSibling(org.dom4j.Node)
    {
        org.dom4j.Node $r0;
        org.w3c.dom.Node $r2;
        int $i0, $i1;
        org.dom4j.Element $r1;

        $r0 := @parameter0: org.dom4j.Node;

        $r1 = interfaceinvoke $r0.<org.dom4j.Node: org.dom4j.Element getParent()>();

        if $r1 == null goto label1;

        $i0 = interfaceinvoke $r1.<org.dom4j.Element: int indexOf(org.dom4j.Node)>($r0);

        if $i0 < 0 goto label1;

        $i0 = $i0 + 1;

        $i1 = interfaceinvoke $r1.<org.dom4j.Element: int nodeCount()>();

        if $i0 >= $i1 goto label1;

        $r0 = interfaceinvoke $r1.<org.dom4j.Element: org.dom4j.Node node(int)>($i0);

        $r2 = staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.Node asDOMNode(org.dom4j.Node)>($r0);

        return $r2;

     label1:
        return null;
    }

    public static java.lang.String getNodeValue(org.dom4j.Node) throws org.w3c.dom.DOMException
    {
        java.lang.String $r1;
        org.dom4j.Node $r0;

        $r0 := @parameter0: org.dom4j.Node;

        $r1 = interfaceinvoke $r0.<org.dom4j.Node: java.lang.String getText()>();

        return $r1;
    }

    public static org.w3c.dom.Document getOwnerDocument(org.dom4j.Node)
    {
        org.dom4j.Document $r1;
        org.dom4j.Node $r0;
        org.w3c.dom.Document $r2;

        $r0 := @parameter0: org.dom4j.Node;

        $r1 = interfaceinvoke $r0.<org.dom4j.Node: org.dom4j.Document getDocument()>();

        $r2 = staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.Document asDOMDocument(org.dom4j.Document)>($r1);

        return $r2;
    }

    public static org.w3c.dom.Node getParentNode(org.dom4j.Node)
    {
        org.dom4j.Element $r1;
        org.dom4j.Node $r0;
        org.w3c.dom.Node $r2;

        $r0 := @parameter0: org.dom4j.Node;

        $r1 = interfaceinvoke $r0.<org.dom4j.Node: org.dom4j.Element getParent()>();

        $r2 = staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.Node asDOMNode(org.dom4j.Node)>($r1);

        return $r2;
    }

    public static java.lang.String getPrefix(org.dom4j.Node)
    {
        org.dom4j.Node $r0;

        $r0 := @parameter0: org.dom4j.Node;

        return null;
    }

    public static org.w3c.dom.Node getPreviousSibling(org.dom4j.Node)
    {
        org.dom4j.Node $r0;
        org.w3c.dom.Node $r2;
        int $i0, $i1;
        org.dom4j.Element $r1;

        $r0 := @parameter0: org.dom4j.Node;

        $r1 = interfaceinvoke $r0.<org.dom4j.Node: org.dom4j.Element getParent()>();

        if $r1 == null goto label1;

        $i0 = interfaceinvoke $r1.<org.dom4j.Element: int indexOf(org.dom4j.Node)>($r0);

        if $i0 <= 0 goto label1;

        $i1 = -1;

        $i0 = $i0 + $i1;

        $r0 = interfaceinvoke $r1.<org.dom4j.Element: org.dom4j.Node node(int)>($i0);

        $r2 = staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.Node asDOMNode(org.dom4j.Node)>($r0);

        return $r2;

     label1:
        return null;
    }

    public static boolean hasAttributes(org.dom4j.Node)
    {
        org.dom4j.Node $r0;
        int $i0;
        org.dom4j.Element $r1;
        boolean $z0;

        $r0 := @parameter0: org.dom4j.Node;

        if $r0 == null goto label1;

        $z0 = $r0 instanceof org.dom4j.Element;

        if $z0 == 0 goto label1;

        $r1 = (org.dom4j.Element) $r0;

        $i0 = interfaceinvoke $r1.<org.dom4j.Element: int attributeCount()>();

        if $i0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static boolean hasChildNodes(org.dom4j.Node)
    {
        org.dom4j.Node $r0;

        $r0 := @parameter0: org.dom4j.Node;

        return 0;
    }

    public static org.w3c.dom.Node insertBefore(org.dom4j.Node, org.w3c.dom.Node, org.w3c.dom.Node) throws org.w3c.dom.DOMException
    {
        org.dom4j.Node $r0;
        org.dom4j.Branch r3;
        java.util.List $r4;
        java.lang.StringBuffer $r6;
        org.w3c.dom.Node $r1, $r2;
        org.w3c.dom.DOMException $r5;
        int $i0;
        java.lang.String $r7;
        boolean $z0;

        $r0 := @parameter0: org.dom4j.Node;

        $r1 := @parameter1: org.w3c.dom.Node;

        $r2 := @parameter2: org.w3c.dom.Node;

        $z0 = $r0 instanceof org.dom4j.Branch;

        if $z0 == 0 goto label2;

        r3 = (org.dom4j.Branch) $r0;

        $r4 = interfaceinvoke r3.<org.dom4j.Branch: java.util.List content()>();

        $i0 = interfaceinvoke $r4.<java.util.List: int indexOf(java.lang.Object)>($r2);

        if $i0 >= 0 goto label1;

        $r0 = (org.dom4j.Node) $r1;

        interfaceinvoke r3.<org.dom4j.Branch: void add(org.dom4j.Node)>($r0);

        return $r1;

     label1:
        interfaceinvoke $r4.<java.util.List: void add(int,java.lang.Object)>($i0, $r1);

        return $r1;

     label2:
        $r5 = new org.w3c.dom.DOMException;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Children not allowed for this node: ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r5.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(3, $r7);

        throw $r5;
    }

    public static void insertData(org.dom4j.CharacterData, int, java.lang.String) throws org.w3c.dom.DOMException
    {
        java.lang.StringBuffer r2;
        org.w3c.dom.DOMException $r3;
        int $i0, $i1;
        java.lang.String $r1, $r4;
        org.dom4j.CharacterData $r0;
        boolean $z0;

        $r0 := @parameter0: org.dom4j.CharacterData;

        $i0 := @parameter1: int;

        $r1 := @parameter2: java.lang.String;

        $z0 = interfaceinvoke $r0.<org.dom4j.CharacterData: boolean isReadOnly()>();

        if $z0 == 0 goto label1;

        $r3 = new org.w3c.dom.DOMException;

        r2 = new java.lang.StringBuffer;

        specialinvoke r2.<java.lang.StringBuffer: void <init>()>();

        r2 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("CharacterData node is read only: ");

        r2 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r0);

        $r1 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(7, $r1);

        throw $r3;

     label1:
        $r4 = interfaceinvoke $r0.<org.dom4j.CharacterData: java.lang.String getText()>();

        if $r4 != null goto label2;

        interfaceinvoke $r0.<org.dom4j.CharacterData: void setText(java.lang.String)>($r1);

        return;

     label2:
        $i1 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i0 < 0 goto label3;

        if $i0 <= $i1 goto label4;

     label3:
        $r3 = new org.w3c.dom.DOMException;

        r2 = new java.lang.StringBuffer;

        specialinvoke r2.<java.lang.StringBuffer: void <init>()>();

        r2 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No text at offset: ");

        r2 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r1 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(1, $r1);

        throw $r3;

     label4:
        r2 = new java.lang.StringBuffer;

        specialinvoke r2.<java.lang.StringBuffer: void <init>(java.lang.String)>($r4);

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)>($i0, $r1);

        $r1 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r0.<org.dom4j.CharacterData: void setText(java.lang.String)>($r1);

        return;
    }

    public static boolean isSupported(org.dom4j.Node, java.lang.String, java.lang.String)
    {
        java.lang.String $r1, $r2;
        org.dom4j.Node $r0;

        $r0 := @parameter0: org.dom4j.Node;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        return 0;
    }

    public static void normalize(org.dom4j.Node)
    {
        org.dom4j.Node $r0;

        $r0 := @parameter0: org.dom4j.Node;

        staticinvoke <org.dom4j.dom.DOMNodeHelper: void notSupported()>();

        return;
    }

    public static void notSupported()
    {
        org.w3c.dom.DOMException $r0;

        $r0 = new org.w3c.dom.DOMException;

        specialinvoke $r0.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(9, "Not supported yet");

        throw $r0;
    }

    public static org.w3c.dom.Node removeChild(org.dom4j.Node, org.w3c.dom.Node) throws org.w3c.dom.DOMException
    {
        org.dom4j.Node $r0;
        org.dom4j.Branch r2;
        java.lang.StringBuffer $r4;
        org.w3c.dom.Node $r1;
        org.w3c.dom.DOMException $r3;
        java.lang.String $r5;
        boolean $z0;

        $r0 := @parameter0: org.dom4j.Node;

        $r1 := @parameter1: org.w3c.dom.Node;

        $z0 = $r0 instanceof org.dom4j.Branch;

        if $z0 == 0 goto label1;

        r2 = (org.dom4j.Branch) $r0;

        $r0 = (org.dom4j.Node) $r1;

        interfaceinvoke r2.<org.dom4j.Branch: boolean remove(org.dom4j.Node)>($r0);

        return $r1;

     label1:
        $r3 = new org.w3c.dom.DOMException;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Children not allowed for this node: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(3, $r5);

        throw $r3;
    }

    public static org.w3c.dom.Node replaceChild(org.dom4j.Node, org.w3c.dom.Node, org.w3c.dom.Node) throws org.w3c.dom.DOMException
    {
        org.dom4j.Node $r0;
        org.dom4j.Branch r3;
        java.util.List $r4;
        java.lang.StringBuffer $r6;
        org.w3c.dom.Node $r1, $r2;
        org.w3c.dom.DOMException $r5;
        int $i0;
        java.lang.String $r7;
        boolean $z0;

        $r0 := @parameter0: org.dom4j.Node;

        $r1 := @parameter1: org.w3c.dom.Node;

        $r2 := @parameter2: org.w3c.dom.Node;

        $z0 = $r0 instanceof org.dom4j.Branch;

        if $z0 == 0 goto label2;

        r3 = (org.dom4j.Branch) $r0;

        $r4 = interfaceinvoke r3.<org.dom4j.Branch: java.util.List content()>();

        $i0 = interfaceinvoke $r4.<java.util.List: int indexOf(java.lang.Object)>($r2);

        if $i0 >= 0 goto label1;

        $r5 = new org.w3c.dom.DOMException;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Tried to replace a non existing child for node: ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r5.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(8, $r7);

        throw $r5;

     label1:
        interfaceinvoke $r4.<java.util.List: java.lang.Object set(int,java.lang.Object)>($i0, $r1);

        return $r2;

     label2:
        $r5 = new org.w3c.dom.DOMException;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Children not allowed for this node: ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r5.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(3, $r7);

        throw $r5;
    }

    public static void replaceData(org.dom4j.CharacterData, int, int, java.lang.String) throws org.w3c.dom.DOMException
    {
        java.lang.StringBuffer r2;
        org.w3c.dom.DOMException $r3;
        int $i0, $i1, $i2;
        java.lang.String $r1, $r4;
        org.dom4j.CharacterData $r0;
        boolean $z0;

        $r0 := @parameter0: org.dom4j.CharacterData;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r1 := @parameter3: java.lang.String;

        $z0 = interfaceinvoke $r0.<org.dom4j.CharacterData: boolean isReadOnly()>();

        if $z0 == 0 goto label1;

        $r3 = new org.w3c.dom.DOMException;

        r2 = new java.lang.StringBuffer;

        specialinvoke r2.<java.lang.StringBuffer: void <init>()>();

        r2 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("CharacterData node is read only: ");

        r2 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r0);

        $r1 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(7, $r1);

        throw $r3;

     label1:
        if $i1 >= 0 goto label2;

        $r3 = new org.w3c.dom.DOMException;

        r2 = new java.lang.StringBuffer;

        specialinvoke r2.<java.lang.StringBuffer: void <init>()>();

        r2 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Illegal value for count: ");

        r2 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r1 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(1, $r1);

        throw $r3;

     label2:
        $r4 = interfaceinvoke $r0.<org.dom4j.CharacterData: java.lang.String getText()>();

        if $r4 == null goto label5;

        $i2 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i0 < 0 goto label3;

        if $i0 < $i2 goto label4;

     label3:
        $r3 = new org.w3c.dom.DOMException;

        r2 = new java.lang.StringBuffer;

        specialinvoke r2.<java.lang.StringBuffer: void <init>()>();

        r2 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No text at offset: ");

        r2 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r1 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(1, $r1);

        throw $r3;

     label4:
        r2 = new java.lang.StringBuffer;

        specialinvoke r2.<java.lang.StringBuffer: void <init>(java.lang.String)>($r4);

        $i1 = $i0 + $i1;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer replace(int,int,java.lang.String)>($i0, $i1, $r1);

        $r1 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r0.<org.dom4j.CharacterData: void setText(java.lang.String)>($r1);

     label5:
        return;
    }

    public static void setData(org.dom4j.CharacterData, java.lang.String) throws org.w3c.dom.DOMException
    {
        java.lang.String $r1;
        org.dom4j.CharacterData $r0;

        $r0 := @parameter0: org.dom4j.CharacterData;

        $r1 := @parameter1: java.lang.String;

        interfaceinvoke $r0.<org.dom4j.CharacterData: void setText(java.lang.String)>($r1);

        return;
    }

    public static void setNodeValue(org.dom4j.Node, java.lang.String) throws org.w3c.dom.DOMException
    {
        java.lang.String $r1;
        org.dom4j.Node $r0;

        $r0 := @parameter0: org.dom4j.Node;

        $r1 := @parameter1: java.lang.String;

        interfaceinvoke $r0.<org.dom4j.Node: void setText(java.lang.String)>($r1);

        return;
    }

    public static void setPrefix(org.dom4j.Node, java.lang.String) throws org.w3c.dom.DOMException
    {
        java.lang.String $r1;
        org.dom4j.Node $r0;

        $r0 := @parameter0: org.dom4j.Node;

        $r1 := @parameter1: java.lang.String;

        staticinvoke <org.dom4j.dom.DOMNodeHelper: void notSupported()>();

        return;
    }

    public static java.lang.String substringData(org.dom4j.CharacterData, int, int) throws org.w3c.dom.DOMException
    {
        java.lang.StringBuffer $r2;
        org.w3c.dom.DOMException $r1;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r3;
        org.dom4j.CharacterData $r0;

        $r0 := @parameter0: org.dom4j.CharacterData;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $i1 >= 0 goto label1;

        $r1 = new org.w3c.dom.DOMException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Illegal value for count: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(1, $r3);

        throw $r1;

     label1:
        $r3 = interfaceinvoke $r0.<org.dom4j.CharacterData: java.lang.String getText()>();

        if $r3 == null goto label4;

        $i2 = virtualinvoke $r3.<java.lang.String: int length()>();

     label2:
        if $i0 < 0 goto label3;

        if $i0 < $i2 goto label5;

     label3:
        $r1 = new org.w3c.dom.DOMException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No text at offset: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(1, $r3);

        throw $r1;

     label4:
        $i2 = 0;

        goto label2;

     label5:
        $i3 = $i0 + $i1;

        if $i3 <= $i2 goto label6;

        $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int)>($i0);

        return $r3;

     label6:
        $i1 = $i0 + $i1;

        $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>($i0, $i1);

        return $r3;
    }

    public static boolean supports(org.dom4j.Node, java.lang.String, java.lang.String)
    {
        java.lang.String $r1, $r2;
        org.dom4j.Node $r0;

        $r0 := @parameter0: org.dom4j.Node;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        return 0;
    }
}
