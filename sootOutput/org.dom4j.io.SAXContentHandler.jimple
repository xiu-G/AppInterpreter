public class org.dom4j.io.SAXContentHandler extends org.xml.sax.helpers.DefaultHandler implements org.xml.sax.DTDHandler, org.xml.sax.ext.DeclHandler, org.xml.sax.ext.LexicalHandler
{
    private java.util.Map availableNamespaceMap;
    private java.lang.StringBuffer cdataText;
    private org.dom4j.Element currentElement;
    private int declaredNamespaceIndex;
    private java.util.List declaredNamespaceList;
    private org.dom4j.Document document;
    private org.dom4j.DocumentFactory documentFactory;
    private org.dom4j.ElementHandler elementHandler;
    private org.dom4j.io.ElementStack elementStack;
    private java.lang.String entity;
    private int entityLevel;
    private org.xml.sax.EntityResolver entityResolver;
    private java.util.List externalDTDDeclarations;
    private boolean ignoreComments;
    private boolean includeExternalDTDDeclarations;
    private boolean includeInternalDTDDeclarations;
    private org.xml.sax.InputSource inputSource;
    private boolean insideCDATASection;
    private boolean insideDTDSection;
    private java.util.List internalDTDDeclarations;
    private boolean internalDTDsubset;
    private org.xml.sax.Locator locator;
    private boolean mergeAdjacentText;
    private org.dom4j.tree.NamespaceStack namespaceStack;
    private boolean stripWhitespaceText;
    private java.lang.StringBuffer textBuffer;
    private boolean textInTextBuffer;

    public void <init>()
    {
        org.dom4j.io.SAXContentHandler r0;
        org.dom4j.DocumentFactory $r1;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        $r1 = staticinvoke <org.dom4j.DocumentFactory: org.dom4j.DocumentFactory getInstance()>();

        specialinvoke r0.<org.dom4j.io.SAXContentHandler: void <init>(org.dom4j.DocumentFactory)>($r1);

        return;
    }

    public void <init>(org.dom4j.DocumentFactory)
    {
        org.dom4j.io.SAXContentHandler r0;
        org.dom4j.DocumentFactory $r1;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        $r1 := @parameter0: org.dom4j.DocumentFactory;

        specialinvoke r0.<org.dom4j.io.SAXContentHandler: void <init>(org.dom4j.DocumentFactory,org.dom4j.ElementHandler)>($r1, null);

        return;
    }

    public void <init>(org.dom4j.DocumentFactory, org.dom4j.ElementHandler)
    {
        org.dom4j.io.ElementStack $r3;
        org.dom4j.ElementHandler $r2;
        org.dom4j.io.SAXContentHandler r0;
        org.dom4j.DocumentFactory $r1;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        $r1 := @parameter0: org.dom4j.DocumentFactory;

        $r2 := @parameter1: org.dom4j.ElementHandler;

        specialinvoke r0.<org.dom4j.io.SAXContentHandler: void <init>(org.dom4j.DocumentFactory,org.dom4j.ElementHandler,org.dom4j.io.ElementStack)>($r1, $r2, null);

        $r3 = virtualinvoke r0.<org.dom4j.io.SAXContentHandler: org.dom4j.io.ElementStack createElementStack()>();

        r0.<org.dom4j.io.SAXContentHandler: org.dom4j.io.ElementStack elementStack> = $r3;

        return;
    }

    public void <init>(org.dom4j.DocumentFactory, org.dom4j.ElementHandler, org.dom4j.io.ElementStack)
    {
        org.dom4j.tree.NamespaceStack $r6;
        org.dom4j.io.ElementStack $r3;
        org.dom4j.ElementHandler $r2;
        org.dom4j.io.SAXContentHandler r0;
        java.util.HashMap $r4;
        org.dom4j.DocumentFactory $r1;
        java.util.ArrayList $r5;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        $r1 := @parameter0: org.dom4j.DocumentFactory;

        $r2 := @parameter1: org.dom4j.ElementHandler;

        $r3 := @parameter2: org.dom4j.io.ElementStack;

        specialinvoke r0.<org.xml.sax.helpers.DefaultHandler: void <init>()>();

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<org.dom4j.io.SAXContentHandler: java.util.Map availableNamespaceMap> = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<org.dom4j.io.SAXContentHandler: java.util.List declaredNamespaceList> = $r5;

        r0.<org.dom4j.io.SAXContentHandler: boolean includeInternalDTDDeclarations> = 0;

        r0.<org.dom4j.io.SAXContentHandler: boolean includeExternalDTDDeclarations> = 0;

        r0.<org.dom4j.io.SAXContentHandler: boolean internalDTDsubset> = 0;

        r0.<org.dom4j.io.SAXContentHandler: boolean mergeAdjacentText> = 0;

        r0.<org.dom4j.io.SAXContentHandler: boolean textInTextBuffer> = 0;

        r0.<org.dom4j.io.SAXContentHandler: boolean ignoreComments> = 0;

        r0.<org.dom4j.io.SAXContentHandler: boolean stripWhitespaceText> = 0;

        r0.<org.dom4j.io.SAXContentHandler: org.dom4j.DocumentFactory documentFactory> = $r1;

        r0.<org.dom4j.io.SAXContentHandler: org.dom4j.ElementHandler elementHandler> = $r2;

        r0.<org.dom4j.io.SAXContentHandler: org.dom4j.io.ElementStack elementStack> = null;

        $r6 = new org.dom4j.tree.NamespaceStack;

        specialinvoke $r6.<org.dom4j.tree.NamespaceStack: void <init>(org.dom4j.DocumentFactory)>($r1);

        r0.<org.dom4j.io.SAXContentHandler: org.dom4j.tree.NamespaceStack namespaceStack> = $r6;

        return;
    }

    private java.lang.String getEncoding()
    {
        java.lang.Class[] $r3;
        org.xml.sax.Locator $r1;
        java.lang.Exception $r7;
        org.dom4j.io.SAXContentHandler r0;
        java.lang.Class $r2;
        java.lang.Object $r5;
        java.lang.String $r6;
        java.lang.reflect.Method $r4;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        $r1 = r0.<org.dom4j.io.SAXContentHandler: org.xml.sax.Locator locator>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r1 = r0.<org.dom4j.io.SAXContentHandler: org.xml.sax.Locator locator>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

     label2:
        $r3 = newarray (java.lang.Class)[0];

     label3:
        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getEncoding", $r3);

     label4:
        if $r4 == null goto label8;

     label5:
        $r1 = r0.<org.dom4j.io.SAXContentHandler: org.xml.sax.Locator locator>;

        $r5 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r1, null);

        $r6 = (java.lang.String) $r5;

     label6:
        return $r6;

     label7:
        $r7 := @caughtexception;

     label8:
        return null;

        catch java.lang.Exception from label1 to label2 with label7;
        catch java.lang.Exception from label3 to label4 with label7;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    protected void addAttributes(org.dom4j.Element, org.xml.sax.Attributes)
    {
        org.dom4j.tree.AbstractElement r3;
        org.dom4j.tree.NamespaceStack $r4;
        org.dom4j.io.SAXContentHandler r0;
        org.xml.sax.Attributes $r2;
        int $i0, i1;
        org.dom4j.Element $r1;
        org.dom4j.QName $r9;
        java.lang.String $r5, $r6, $r7, $r8;
        boolean $z0;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        $r1 := @parameter0: org.dom4j.Element;

        $r2 := @parameter1: org.xml.sax.Attributes;

        $z0 = $r1 instanceof org.dom4j.tree.AbstractElement;

        if $z0 == 0 goto label1;

        r3 = (org.dom4j.tree.AbstractElement) $r1;

        $r4 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.tree.NamespaceStack namespaceStack>;

        virtualinvoke r3.<org.dom4j.tree.AbstractElement: void setAttributes(org.xml.sax.Attributes,org.dom4j.tree.NamespaceStack,boolean)>($r2, $r4, 0);

        return;

     label1:
        $i0 = interfaceinvoke $r2.<org.xml.sax.Attributes: int getLength()>();

        i1 = 0;

     label2:
        if i1 >= $i0 goto label4;

        $r5 = interfaceinvoke $r2.<org.xml.sax.Attributes: java.lang.String getQName(int)>(i1);

        $z0 = virtualinvoke $r5.<java.lang.String: boolean startsWith(java.lang.String)>("xmlns");

        if $z0 != 0 goto label3;

        $r6 = interfaceinvoke $r2.<org.xml.sax.Attributes: java.lang.String getURI(int)>(i1);

        $r7 = interfaceinvoke $r2.<org.xml.sax.Attributes: java.lang.String getLocalName(int)>(i1);

        $r8 = interfaceinvoke $r2.<org.xml.sax.Attributes: java.lang.String getValue(int)>(i1);

        $r4 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.tree.NamespaceStack namespaceStack>;

        $r9 = virtualinvoke $r4.<org.dom4j.tree.NamespaceStack: org.dom4j.QName getAttributeQName(java.lang.String,java.lang.String,java.lang.String)>($r6, $r7, $r5);

        interfaceinvoke $r1.<org.dom4j.Element: org.dom4j.Element addAttribute(org.dom4j.QName,java.lang.String)>($r9, $r8);

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return;
    }

    protected void addDTDDeclaration(java.lang.Object)
    {
        java.util.List $r2;
        org.dom4j.io.SAXContentHandler r0;
        java.lang.Object $r1;
        java.util.ArrayList $r3;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        $r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.dom4j.io.SAXContentHandler: java.util.List internalDTDDeclarations>;

        if $r2 != null goto label1;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<org.dom4j.io.SAXContentHandler: java.util.List internalDTDDeclarations> = $r3;

     label1:
        $r2 = r0.<org.dom4j.io.SAXContentHandler: java.util.List internalDTDDeclarations>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;
    }

    protected void addDeclaredNamespaces(org.dom4j.Element)
    {
        org.dom4j.tree.NamespaceStack $r2;
        org.dom4j.Namespace $r3;
        org.dom4j.io.SAXContentHandler r0;
        int $i0, $i1;
        org.dom4j.Element $r1;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        $r1 := @parameter0: org.dom4j.Element;

        interfaceinvoke $r1.<org.dom4j.Element: org.dom4j.Namespace getNamespace()>();

        $r2 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.tree.NamespaceStack namespaceStack>;

        $i1 = virtualinvoke $r2.<org.dom4j.tree.NamespaceStack: int size()>();

     label1:
        $i0 = r0.<org.dom4j.io.SAXContentHandler: int declaredNamespaceIndex>;

        if $i0 >= $i1 goto label2;

        $r2 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.tree.NamespaceStack namespaceStack>;

        $i0 = r0.<org.dom4j.io.SAXContentHandler: int declaredNamespaceIndex>;

        $r3 = virtualinvoke $r2.<org.dom4j.tree.NamespaceStack: org.dom4j.Namespace getNamespace(int)>($i0);

        interfaceinvoke $r1.<org.dom4j.Element: void add(org.dom4j.Namespace)>($r3);

        $i0 = r0.<org.dom4j.io.SAXContentHandler: int declaredNamespaceIndex>;

        $i0 = $i0 + 1;

        r0.<org.dom4j.io.SAXContentHandler: int declaredNamespaceIndex> = $i0;

        goto label1;

     label2:
        return;
    }

    protected void addExternalDTDDeclaration(java.lang.Object)
    {
        java.util.List $r2;
        org.dom4j.io.SAXContentHandler r0;
        java.lang.Object $r1;
        java.util.ArrayList $r3;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        $r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.dom4j.io.SAXContentHandler: java.util.List externalDTDDeclarations>;

        if $r2 != null goto label1;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<org.dom4j.io.SAXContentHandler: java.util.List externalDTDDeclarations> = $r3;

     label1:
        $r2 = r0.<org.dom4j.io.SAXContentHandler: java.util.List externalDTDDeclarations>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;
    }

    public void attributeDecl(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        org.dom4j.dtd.AttributeDecl $r6;
        org.dom4j.io.SAXContentHandler r0;
        java.lang.String $r1, $r2, $r3, $r4, $r5;
        boolean $z0;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.lang.String;

        $r5 := @parameter4: java.lang.String;

        $z0 = r0.<org.dom4j.io.SAXContentHandler: boolean internalDTDsubset>;

        if $z0 == 0 goto label1;

        $z0 = r0.<org.dom4j.io.SAXContentHandler: boolean includeInternalDTDDeclarations>;

        if $z0 == 0 goto label2;

        $r6 = new org.dom4j.dtd.AttributeDecl;

        specialinvoke $r6.<org.dom4j.dtd.AttributeDecl: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r1, $r2, $r3, $r4, $r5);

        virtualinvoke r0.<org.dom4j.io.SAXContentHandler: void addDTDDeclaration(java.lang.Object)>($r6);

        return;

     label1:
        $z0 = r0.<org.dom4j.io.SAXContentHandler: boolean includeExternalDTDDeclarations>;

        if $z0 == 0 goto label2;

        $r6 = new org.dom4j.dtd.AttributeDecl;

        specialinvoke $r6.<org.dom4j.dtd.AttributeDecl: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r1, $r2, $r3, $r4, $r5);

        virtualinvoke r0.<org.dom4j.io.SAXContentHandler: void addExternalDTDDeclaration(java.lang.Object)>($r6);

     label2:
        return;
    }

    public void characters(char[], int, int) throws org.xml.sax.SAXException
    {
        java.lang.StringBuffer $r5;
        org.dom4j.io.SAXContentHandler r0;
        int $i0, $i1;
        char[] $r1;
        org.dom4j.Element $r3;
        java.lang.String $r2, $r4;
        boolean $z0;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        $r1 := @parameter0: char[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $i1 != 0 goto label1;

        return;

     label1:
        $r3 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.Element currentElement>;

        if $r3 == null goto label7;

        $r2 = r0.<org.dom4j.io.SAXContentHandler: java.lang.String entity>;

        if $r2 == null goto label3;

        $z0 = r0.<org.dom4j.io.SAXContentHandler: boolean mergeAdjacentText>;

        if $z0 == 0 goto label2;

        $z0 = r0.<org.dom4j.io.SAXContentHandler: boolean textInTextBuffer>;

        if $z0 == 0 goto label2;

        virtualinvoke r0.<org.dom4j.io.SAXContentHandler: void completeCurrentTextNode()>();

     label2:
        $r3 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.Element currentElement>;

        $r4 = r0.<org.dom4j.io.SAXContentHandler: java.lang.String entity>;

        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(char[],int,int)>($r1, 0, $i1);

        interfaceinvoke $r3.<org.dom4j.Element: org.dom4j.Element addEntity(java.lang.String,java.lang.String)>($r4, $r2);

        r0.<org.dom4j.io.SAXContentHandler: java.lang.String entity> = null;

        return;

     label3:
        $z0 = r0.<org.dom4j.io.SAXContentHandler: boolean insideCDATASection>;

        if $z0 == 0 goto label5;

        $z0 = r0.<org.dom4j.io.SAXContentHandler: boolean mergeAdjacentText>;

        if $z0 == 0 goto label4;

        $z0 = r0.<org.dom4j.io.SAXContentHandler: boolean textInTextBuffer>;

        if $z0 == 0 goto label4;

        virtualinvoke r0.<org.dom4j.io.SAXContentHandler: void completeCurrentTextNode()>();

     label4:
        $r5 = r0.<org.dom4j.io.SAXContentHandler: java.lang.StringBuffer cdataText>;

        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(char[],int,int)>($r1, 0, $i1);

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        return;

     label5:
        $z0 = r0.<org.dom4j.io.SAXContentHandler: boolean mergeAdjacentText>;

        if $z0 == 0 goto label6;

        $r5 = r0.<org.dom4j.io.SAXContentHandler: java.lang.StringBuffer textBuffer>;

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>($r1, 0, $i1);

        r0.<org.dom4j.io.SAXContentHandler: boolean textInTextBuffer> = 1;

        return;

     label6:
        $r3 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.Element currentElement>;

        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(char[],int,int)>($r1, 0, $i1);

        interfaceinvoke $r3.<org.dom4j.Element: org.dom4j.Element addText(java.lang.String)>($r2);

     label7:
        return;
    }

    public void comment(char[], int, int) throws org.xml.sax.SAXException
    {
        org.dom4j.Document $r4;
        org.dom4j.io.SAXContentHandler r0;
        int $i0, $i1;
        char[] $r1;
        org.dom4j.Element $r3;
        java.lang.String r2;
        boolean $z0;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        $r1 := @parameter0: char[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 = r0.<org.dom4j.io.SAXContentHandler: boolean ignoreComments>;

        if $z0 != 0 goto label3;

        $z0 = r0.<org.dom4j.io.SAXContentHandler: boolean mergeAdjacentText>;

        if $z0 == 0 goto label1;

        $z0 = r0.<org.dom4j.io.SAXContentHandler: boolean textInTextBuffer>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.dom4j.io.SAXContentHandler: void completeCurrentTextNode()>();

     label1:
        r2 = new java.lang.String;

        specialinvoke r2.<java.lang.String: void <init>(char[],int,int)>($r1, $i0, $i1);

        $z0 = r0.<org.dom4j.io.SAXContentHandler: boolean insideDTDSection>;

        if $z0 != 0 goto label3;

        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i0 <= 0 goto label3;

        $r3 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.Element currentElement>;

        if $r3 == null goto label2;

        $r3 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.Element currentElement>;

        interfaceinvoke $r3.<org.dom4j.Element: org.dom4j.Element addComment(java.lang.String)>(r2);

        return;

     label2:
        $r4 = virtualinvoke r0.<org.dom4j.io.SAXContentHandler: org.dom4j.Document getDocument()>();

        interfaceinvoke $r4.<org.dom4j.Document: org.dom4j.Document addComment(java.lang.String)>(r2);

     label3:
        return;
    }

    protected void completeCurrentTextNode()
    {
        char $c2;
        java.lang.StringBuffer $r1;
        org.dom4j.io.SAXContentHandler r0;
        int i0, $i1;
        org.dom4j.Element $r2;
        java.lang.String $r3;
        boolean $z0, $z1;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        $z0 = r0.<org.dom4j.io.SAXContentHandler: boolean stripWhitespaceText>;

        if $z0 == 0 goto label5;

        $z0 = 1;

        i0 = 0;

        $r1 = r0.<org.dom4j.io.SAXContentHandler: java.lang.StringBuffer textBuffer>;

        $i1 = virtualinvoke $r1.<java.lang.StringBuffer: int length()>();

     label1:
        if i0 >= $i1 goto label2;

        $r1 = r0.<org.dom4j.io.SAXContentHandler: java.lang.StringBuffer textBuffer>;

        $c2 = virtualinvoke $r1.<java.lang.StringBuffer: char charAt(int)>(i0);

        $z1 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c2);

        if $z1 != 0 goto label4;

        $z0 = 0;

     label2:
        if $z0 != 0 goto label3;

        $r2 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.Element currentElement>;

        $r1 = r0.<org.dom4j.io.SAXContentHandler: java.lang.StringBuffer textBuffer>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r2.<org.dom4j.Element: org.dom4j.Element addText(java.lang.String)>($r3);

     label3:
        $r1 = r0.<org.dom4j.io.SAXContentHandler: java.lang.StringBuffer textBuffer>;

        virtualinvoke $r1.<java.lang.StringBuffer: void setLength(int)>(0);

        r0.<org.dom4j.io.SAXContentHandler: boolean textInTextBuffer> = 0;

        return;

     label4:
        i0 = i0 + 1;

        goto label1;

     label5:
        $r2 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.Element currentElement>;

        $r1 = r0.<org.dom4j.io.SAXContentHandler: java.lang.StringBuffer textBuffer>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r2.<org.dom4j.Element: org.dom4j.Element addText(java.lang.String)>($r3);

        goto label3;
    }

    protected org.dom4j.Document createDocument()
    {
        org.xml.sax.InputSource $r5;
        org.dom4j.Document $r3;
        org.dom4j.io.SAXContentHandler r0;
        java.lang.String $r1;
        org.xml.sax.EntityResolver $r4;
        org.dom4j.DocumentFactory $r2;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        $r1 = specialinvoke r0.<org.dom4j.io.SAXContentHandler: java.lang.String getEncoding()>();

        $r2 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.DocumentFactory documentFactory>;

        $r3 = virtualinvoke $r2.<org.dom4j.DocumentFactory: org.dom4j.Document createDocument(java.lang.String)>($r1);

        $r4 = r0.<org.dom4j.io.SAXContentHandler: org.xml.sax.EntityResolver entityResolver>;

        interfaceinvoke $r3.<org.dom4j.Document: void setEntityResolver(org.xml.sax.EntityResolver)>($r4);

        $r5 = r0.<org.dom4j.io.SAXContentHandler: org.xml.sax.InputSource inputSource>;

        if $r5 == null goto label1;

        $r5 = r0.<org.dom4j.io.SAXContentHandler: org.xml.sax.InputSource inputSource>;

        $r1 = virtualinvoke $r5.<org.xml.sax.InputSource: java.lang.String getSystemId()>();

        interfaceinvoke $r3.<org.dom4j.Document: void setName(java.lang.String)>($r1);

     label1:
        return $r3;
    }

    protected org.dom4j.io.ElementStack createElementStack()
    {
        org.dom4j.io.SAXContentHandler r0;
        org.dom4j.io.ElementStack $r1;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        $r1 = new org.dom4j.io.ElementStack;

        specialinvoke $r1.<org.dom4j.io.ElementStack: void <init>()>();

        return $r1;
    }

    public void elementDecl(java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        org.dom4j.io.SAXContentHandler r0;
        java.lang.String $r1, $r2;
        org.dom4j.dtd.ElementDecl $r3;
        boolean $z0;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $z0 = r0.<org.dom4j.io.SAXContentHandler: boolean internalDTDsubset>;

        if $z0 == 0 goto label1;

        $z0 = r0.<org.dom4j.io.SAXContentHandler: boolean includeInternalDTDDeclarations>;

        if $z0 == 0 goto label2;

        $r3 = new org.dom4j.dtd.ElementDecl;

        specialinvoke $r3.<org.dom4j.dtd.ElementDecl: void <init>(java.lang.String,java.lang.String)>($r1, $r2);

        virtualinvoke r0.<org.dom4j.io.SAXContentHandler: void addDTDDeclaration(java.lang.Object)>($r3);

        return;

     label1:
        $z0 = r0.<org.dom4j.io.SAXContentHandler: boolean includeExternalDTDDeclarations>;

        if $z0 == 0 goto label2;

        $r3 = new org.dom4j.dtd.ElementDecl;

        specialinvoke $r3.<org.dom4j.dtd.ElementDecl: void <init>(java.lang.String,java.lang.String)>($r1, $r2);

        virtualinvoke r0.<org.dom4j.io.SAXContentHandler: void addExternalDTDDeclaration(java.lang.Object)>($r3);

     label2:
        return;
    }

    public void endCDATA() throws org.xml.sax.SAXException
    {
        java.lang.StringBuffer $r3;
        org.dom4j.io.SAXContentHandler r0;
        org.dom4j.Element $r2;
        java.lang.String $r1;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        r0.<org.dom4j.io.SAXContentHandler: boolean insideCDATASection> = 0;

        $r2 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.Element currentElement>;

        $r3 = r0.<org.dom4j.io.SAXContentHandler: java.lang.StringBuffer cdataText>;

        $r1 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r2.<org.dom4j.Element: org.dom4j.Element addCDATA(java.lang.String)>($r1);

        return;
    }

    public void endDTD() throws org.xml.sax.SAXException
    {
        org.dom4j.Document $r1;
        java.util.List $r3;
        org.dom4j.DocumentType $r2;
        org.dom4j.io.SAXContentHandler r0;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        r0.<org.dom4j.io.SAXContentHandler: boolean insideDTDSection> = 0;

        $r1 = virtualinvoke r0.<org.dom4j.io.SAXContentHandler: org.dom4j.Document getDocument()>();

        $r2 = interfaceinvoke $r1.<org.dom4j.Document: org.dom4j.DocumentType getDocType()>();

        if $r2 == null goto label2;

        $r3 = r0.<org.dom4j.io.SAXContentHandler: java.util.List internalDTDDeclarations>;

        if $r3 == null goto label1;

        $r3 = r0.<org.dom4j.io.SAXContentHandler: java.util.List internalDTDDeclarations>;

        interfaceinvoke $r2.<org.dom4j.DocumentType: void setInternalDeclarations(java.util.List)>($r3);

     label1:
        $r3 = r0.<org.dom4j.io.SAXContentHandler: java.util.List externalDTDDeclarations>;

        if $r3 == null goto label2;

        $r3 = r0.<org.dom4j.io.SAXContentHandler: java.util.List externalDTDDeclarations>;

        interfaceinvoke $r2.<org.dom4j.DocumentType: void setExternalDeclarations(java.util.List)>($r3);

     label2:
        r0.<org.dom4j.io.SAXContentHandler: java.util.List internalDTDDeclarations> = null;

        r0.<org.dom4j.io.SAXContentHandler: java.util.List externalDTDDeclarations> = null;

        return;
    }

    public void endDocument() throws org.xml.sax.SAXException
    {
        org.dom4j.io.SAXContentHandler r0;
        org.dom4j.tree.NamespaceStack $r1;
        org.dom4j.io.ElementStack $r2;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        $r1 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.tree.NamespaceStack namespaceStack>;

        virtualinvoke $r1.<org.dom4j.tree.NamespaceStack: void clear()>();

        $r2 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.io.ElementStack elementStack>;

        virtualinvoke $r2.<org.dom4j.io.ElementStack: void clear()>();

        r0.<org.dom4j.io.SAXContentHandler: org.dom4j.Element currentElement> = null;

        r0.<org.dom4j.io.SAXContentHandler: java.lang.StringBuffer textBuffer> = null;

        return;
    }

    public void endElement(java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        org.dom4j.io.ElementStack $r4;
        org.dom4j.ElementHandler $r6;
        org.dom4j.io.SAXContentHandler r0;
        org.dom4j.Element $r5;
        java.lang.String $r1, $r2, $r3;
        boolean $z0;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $z0 = r0.<org.dom4j.io.SAXContentHandler: boolean mergeAdjacentText>;

        if $z0 == 0 goto label1;

        $z0 = r0.<org.dom4j.io.SAXContentHandler: boolean textInTextBuffer>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.dom4j.io.SAXContentHandler: void completeCurrentTextNode()>();

     label1:
        $r6 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.ElementHandler elementHandler>;

        if $r6 == null goto label2;

        $r5 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.Element currentElement>;

        if $r5 == null goto label2;

        $r6 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.ElementHandler elementHandler>;

        $r4 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.io.ElementStack elementStack>;

        interfaceinvoke $r6.<org.dom4j.ElementHandler: void onEnd(org.dom4j.ElementPath)>($r4);

     label2:
        $r4 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.io.ElementStack elementStack>;

        virtualinvoke $r4.<org.dom4j.io.ElementStack: org.dom4j.Element popElement()>();

        $r4 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.io.ElementStack elementStack>;

        $r5 = virtualinvoke $r4.<org.dom4j.io.ElementStack: org.dom4j.Element peekElement()>();

        r0.<org.dom4j.io.SAXContentHandler: org.dom4j.Element currentElement> = $r5;

        return;
    }

    public void endEntity(java.lang.String) throws org.xml.sax.SAXException
    {
        org.dom4j.io.SAXContentHandler r0;
        int $i0;
        java.lang.String $r1;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        $r1 := @parameter0: java.lang.String;

        $i0 = r0.<org.dom4j.io.SAXContentHandler: int entityLevel>;

        $i0 = $i0 + -1;

        r0.<org.dom4j.io.SAXContentHandler: int entityLevel> = $i0;

        r0.<org.dom4j.io.SAXContentHandler: java.lang.String entity> = null;

        $i0 = r0.<org.dom4j.io.SAXContentHandler: int entityLevel>;

        if $i0 != 0 goto label1;

        r0.<org.dom4j.io.SAXContentHandler: boolean internalDTDsubset> = 1;

     label1:
        return;
    }

    public void endPrefixMapping(java.lang.String) throws org.xml.sax.SAXException
    {
        org.dom4j.tree.NamespaceStack $r2;
        org.dom4j.io.SAXContentHandler r0;
        int $i0;
        java.lang.String $r1;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.tree.NamespaceStack namespaceStack>;

        virtualinvoke $r2.<org.dom4j.tree.NamespaceStack: org.dom4j.Namespace pop(java.lang.String)>($r1);

        $r2 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.tree.NamespaceStack namespaceStack>;

        $i0 = virtualinvoke $r2.<org.dom4j.tree.NamespaceStack: int size()>();

        r0.<org.dom4j.io.SAXContentHandler: int declaredNamespaceIndex> = $i0;

        return;
    }

    public void error(org.xml.sax.SAXParseException) throws org.xml.sax.SAXException
    {
        org.dom4j.io.SAXContentHandler r0;
        org.xml.sax.SAXParseException $r1;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        $r1 := @parameter0: org.xml.sax.SAXParseException;

        throw $r1;
    }

    public void externalEntityDecl(java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        org.dom4j.io.SAXContentHandler r0;
        org.dom4j.dtd.ExternalEntityDecl r4;
        java.lang.String $r1, $r2, $r3;
        boolean $z0;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        r4 = new org.dom4j.dtd.ExternalEntityDecl;

        specialinvoke r4.<org.dom4j.dtd.ExternalEntityDecl: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r1, $r2, $r3);

        $z0 = r0.<org.dom4j.io.SAXContentHandler: boolean internalDTDsubset>;

        if $z0 == 0 goto label1;

        $z0 = r0.<org.dom4j.io.SAXContentHandler: boolean includeInternalDTDDeclarations>;

        if $z0 == 0 goto label2;

        virtualinvoke r0.<org.dom4j.io.SAXContentHandler: void addDTDDeclaration(java.lang.Object)>(r4);

        return;

     label1:
        $z0 = r0.<org.dom4j.io.SAXContentHandler: boolean includeExternalDTDDeclarations>;

        if $z0 == 0 goto label2;

        virtualinvoke r0.<org.dom4j.io.SAXContentHandler: void addExternalDTDDeclaration(java.lang.Object)>(r4);

     label2:
        return;
    }

    public void fatalError(org.xml.sax.SAXParseException) throws org.xml.sax.SAXException
    {
        org.dom4j.io.SAXContentHandler r0;
        org.xml.sax.SAXParseException $r1;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        $r1 := @parameter0: org.xml.sax.SAXParseException;

        throw $r1;
    }

    public org.dom4j.Document getDocument()
    {
        org.dom4j.io.SAXContentHandler r0;
        org.dom4j.Document $r1;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        $r1 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.Document document>;

        if $r1 != null goto label1;

        $r1 = virtualinvoke r0.<org.dom4j.io.SAXContentHandler: org.dom4j.Document createDocument()>();

        r0.<org.dom4j.io.SAXContentHandler: org.dom4j.Document document> = $r1;

     label1:
        $r1 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.Document document>;

        return $r1;
    }

    public org.dom4j.io.ElementStack getElementStack()
    {
        org.dom4j.io.SAXContentHandler r0;
        org.dom4j.io.ElementStack r1;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        r1 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.io.ElementStack elementStack>;

        return r1;
    }

    public org.xml.sax.EntityResolver getEntityResolver()
    {
        org.dom4j.io.SAXContentHandler r0;
        org.xml.sax.EntityResolver r1;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        r1 = r0.<org.dom4j.io.SAXContentHandler: org.xml.sax.EntityResolver entityResolver>;

        return r1;
    }

    public org.xml.sax.InputSource getInputSource()
    {
        org.dom4j.io.SAXContentHandler r0;
        org.xml.sax.InputSource r1;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        r1 = r0.<org.dom4j.io.SAXContentHandler: org.xml.sax.InputSource inputSource>;

        return r1;
    }

    public void internalEntityDecl(java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        org.dom4j.io.SAXContentHandler r0;
        java.lang.String $r1, $r2;
        org.dom4j.dtd.InternalEntityDecl $r3;
        boolean $z0;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $z0 = r0.<org.dom4j.io.SAXContentHandler: boolean internalDTDsubset>;

        if $z0 == 0 goto label1;

        $z0 = r0.<org.dom4j.io.SAXContentHandler: boolean includeInternalDTDDeclarations>;

        if $z0 == 0 goto label2;

        $r3 = new org.dom4j.dtd.InternalEntityDecl;

        specialinvoke $r3.<org.dom4j.dtd.InternalEntityDecl: void <init>(java.lang.String,java.lang.String)>($r1, $r2);

        virtualinvoke r0.<org.dom4j.io.SAXContentHandler: void addDTDDeclaration(java.lang.Object)>($r3);

        return;

     label1:
        $z0 = r0.<org.dom4j.io.SAXContentHandler: boolean includeExternalDTDDeclarations>;

        if $z0 == 0 goto label2;

        $r3 = new org.dom4j.dtd.InternalEntityDecl;

        specialinvoke $r3.<org.dom4j.dtd.InternalEntityDecl: void <init>(java.lang.String,java.lang.String)>($r1, $r2);

        virtualinvoke r0.<org.dom4j.io.SAXContentHandler: void addExternalDTDDeclaration(java.lang.Object)>($r3);

     label2:
        return;
    }

    protected boolean isIgnorableEntity(java.lang.String)
    {
        org.dom4j.io.SAXContentHandler r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        $r1 := @parameter0: java.lang.String;

        $r2 = "amp";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        $r2 = "apos";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        $r2 = "gt";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        $r2 = "lt";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        $r2 = "quot";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public boolean isIgnoreComments()
    {
        org.dom4j.io.SAXContentHandler r0;
        boolean z0;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        z0 = r0.<org.dom4j.io.SAXContentHandler: boolean ignoreComments>;

        return z0;
    }

    public boolean isIncludeExternalDTDDeclarations()
    {
        org.dom4j.io.SAXContentHandler r0;
        boolean z0;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        z0 = r0.<org.dom4j.io.SAXContentHandler: boolean includeExternalDTDDeclarations>;

        return z0;
    }

    public boolean isIncludeInternalDTDDeclarations()
    {
        org.dom4j.io.SAXContentHandler r0;
        boolean z0;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        z0 = r0.<org.dom4j.io.SAXContentHandler: boolean includeInternalDTDDeclarations>;

        return z0;
    }

    public boolean isMergeAdjacentText()
    {
        org.dom4j.io.SAXContentHandler r0;
        boolean z0;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        z0 = r0.<org.dom4j.io.SAXContentHandler: boolean mergeAdjacentText>;

        return z0;
    }

    public boolean isStripWhitespaceText()
    {
        org.dom4j.io.SAXContentHandler r0;
        boolean z0;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        z0 = r0.<org.dom4j.io.SAXContentHandler: boolean stripWhitespaceText>;

        return z0;
    }

    public void notationDecl(java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        org.dom4j.io.SAXContentHandler r0;
        java.lang.String $r1, $r2, $r3;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        return;
    }

    public void processingInstruction(java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        org.dom4j.Document $r3;
        org.dom4j.io.SAXContentHandler r0;
        org.dom4j.Element $r4;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $z0 = r0.<org.dom4j.io.SAXContentHandler: boolean mergeAdjacentText>;

        if $z0 == 0 goto label1;

        $z0 = r0.<org.dom4j.io.SAXContentHandler: boolean textInTextBuffer>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.dom4j.io.SAXContentHandler: void completeCurrentTextNode()>();

     label1:
        $r4 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.Element currentElement>;

        if $r4 == null goto label2;

        $r4 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.Element currentElement>;

        interfaceinvoke $r4.<org.dom4j.Element: org.dom4j.Element addProcessingInstruction(java.lang.String,java.lang.String)>($r1, $r2);

        return;

     label2:
        $r3 = virtualinvoke r0.<org.dom4j.io.SAXContentHandler: org.dom4j.Document getDocument()>();

        interfaceinvoke $r3.<org.dom4j.Document: org.dom4j.Document addProcessingInstruction(java.lang.String,java.lang.String)>($r1, $r2);

        return;
    }

    public void setDocumentLocator(org.xml.sax.Locator)
    {
        org.dom4j.io.SAXContentHandler r0;
        org.xml.sax.Locator $r1;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        $r1 := @parameter0: org.xml.sax.Locator;

        r0.<org.dom4j.io.SAXContentHandler: org.xml.sax.Locator locator> = $r1;

        return;
    }

    public void setElementStack(org.dom4j.io.ElementStack)
    {
        org.dom4j.io.SAXContentHandler r0;
        org.dom4j.io.ElementStack $r1;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        $r1 := @parameter0: org.dom4j.io.ElementStack;

        r0.<org.dom4j.io.SAXContentHandler: org.dom4j.io.ElementStack elementStack> = $r1;

        return;
    }

    public void setEntityResolver(org.xml.sax.EntityResolver)
    {
        org.dom4j.io.SAXContentHandler r0;
        org.xml.sax.EntityResolver $r1;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        $r1 := @parameter0: org.xml.sax.EntityResolver;

        r0.<org.dom4j.io.SAXContentHandler: org.xml.sax.EntityResolver entityResolver> = $r1;

        return;
    }

    public void setIgnoreComments(boolean)
    {
        org.dom4j.io.SAXContentHandler r0;
        boolean $z0;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        $z0 := @parameter0: boolean;

        r0.<org.dom4j.io.SAXContentHandler: boolean ignoreComments> = $z0;

        return;
    }

    public void setIncludeExternalDTDDeclarations(boolean)
    {
        org.dom4j.io.SAXContentHandler r0;
        boolean $z0;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        $z0 := @parameter0: boolean;

        r0.<org.dom4j.io.SAXContentHandler: boolean includeExternalDTDDeclarations> = $z0;

        return;
    }

    public void setIncludeInternalDTDDeclarations(boolean)
    {
        org.dom4j.io.SAXContentHandler r0;
        boolean $z0;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        $z0 := @parameter0: boolean;

        r0.<org.dom4j.io.SAXContentHandler: boolean includeInternalDTDDeclarations> = $z0;

        return;
    }

    public void setInputSource(org.xml.sax.InputSource)
    {
        org.dom4j.io.SAXContentHandler r0;
        org.xml.sax.InputSource $r1;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        $r1 := @parameter0: org.xml.sax.InputSource;

        r0.<org.dom4j.io.SAXContentHandler: org.xml.sax.InputSource inputSource> = $r1;

        return;
    }

    public void setMergeAdjacentText(boolean)
    {
        org.dom4j.io.SAXContentHandler r0;
        boolean $z0;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        $z0 := @parameter0: boolean;

        r0.<org.dom4j.io.SAXContentHandler: boolean mergeAdjacentText> = $z0;

        return;
    }

    public void setStripWhitespaceText(boolean)
    {
        org.dom4j.io.SAXContentHandler r0;
        boolean $z0;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        $z0 := @parameter0: boolean;

        r0.<org.dom4j.io.SAXContentHandler: boolean stripWhitespaceText> = $z0;

        return;
    }

    public void startCDATA() throws org.xml.sax.SAXException
    {
        org.dom4j.io.SAXContentHandler r0;
        java.lang.StringBuffer $r1;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        r0.<org.dom4j.io.SAXContentHandler: boolean insideCDATASection> = 1;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        r0.<org.dom4j.io.SAXContentHandler: java.lang.StringBuffer cdataText> = $r1;

        return;
    }

    public void startDTD(java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        org.dom4j.Document $r4;
        org.dom4j.io.SAXContentHandler r0;
        java.lang.String $r1, $r2, $r3;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 = virtualinvoke r0.<org.dom4j.io.SAXContentHandler: org.dom4j.Document getDocument()>();

        interfaceinvoke $r4.<org.dom4j.Document: org.dom4j.Document addDocType(java.lang.String,java.lang.String,java.lang.String)>($r1, $r2, $r3);

        r0.<org.dom4j.io.SAXContentHandler: boolean insideDTDSection> = 1;

        r0.<org.dom4j.io.SAXContentHandler: boolean internalDTDsubset> = 1;

        return;
    }

    public void startDocument() throws org.xml.sax.SAXException
    {
        org.dom4j.tree.NamespaceStack $r4;
        org.dom4j.io.ElementStack $r1;
        org.dom4j.ElementHandler $r2;
        java.lang.StringBuffer $r5;
        org.dom4j.io.SAXContentHandler r0;
        org.dom4j.io.DispatchHandler $r3;
        boolean $z0;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        r0.<org.dom4j.io.SAXContentHandler: org.dom4j.Document document> = null;

        r0.<org.dom4j.io.SAXContentHandler: org.dom4j.Element currentElement> = null;

        $r1 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.io.ElementStack elementStack>;

        virtualinvoke $r1.<org.dom4j.io.ElementStack: void clear()>();

        $r2 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.ElementHandler elementHandler>;

        if $r2 == null goto label1;

        $r2 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.ElementHandler elementHandler>;

        $z0 = $r2 instanceof org.dom4j.io.DispatchHandler;

        if $z0 == 0 goto label1;

        $r1 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.io.ElementStack elementStack>;

        $r2 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.ElementHandler elementHandler>;

        $r3 = (org.dom4j.io.DispatchHandler) $r2;

        virtualinvoke $r1.<org.dom4j.io.ElementStack: void setDispatchHandler(org.dom4j.io.DispatchHandler)>($r3);

     label1:
        $r4 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.tree.NamespaceStack namespaceStack>;

        virtualinvoke $r4.<org.dom4j.tree.NamespaceStack: void clear()>();

        r0.<org.dom4j.io.SAXContentHandler: int declaredNamespaceIndex> = 0;

        $z0 = r0.<org.dom4j.io.SAXContentHandler: boolean mergeAdjacentText>;

        if $z0 == 0 goto label2;

        $r5 = r0.<org.dom4j.io.SAXContentHandler: java.lang.StringBuffer textBuffer>;

        if $r5 != null goto label2;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        r0.<org.dom4j.io.SAXContentHandler: java.lang.StringBuffer textBuffer> = $r5;

     label2:
        r0.<org.dom4j.io.SAXContentHandler: boolean textInTextBuffer> = 0;

        return;
    }

    public void startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes) throws org.xml.sax.SAXException
    {
        org.dom4j.io.ElementStack $r5;
        org.dom4j.Branch r8;
        org.dom4j.ElementHandler $r10;
        org.dom4j.tree.NamespaceStack $r6;
        org.dom4j.io.SAXContentHandler r0;
        org.xml.sax.Attributes $r4;
        org.dom4j.QName $r7;
        org.dom4j.Element $r9;
        java.lang.String $r1, $r2, $r3;
        boolean $z0;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: org.xml.sax.Attributes;

        $z0 = r0.<org.dom4j.io.SAXContentHandler: boolean mergeAdjacentText>;

        if $z0 == 0 goto label1;

        $z0 = r0.<org.dom4j.io.SAXContentHandler: boolean textInTextBuffer>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.dom4j.io.SAXContentHandler: void completeCurrentTextNode()>();

     label1:
        $r6 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.tree.NamespaceStack namespaceStack>;

        $r7 = virtualinvoke $r6.<org.dom4j.tree.NamespaceStack: org.dom4j.QName getQName(java.lang.String,java.lang.String,java.lang.String)>($r1, $r2, $r3);

        r8 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.Element currentElement>;

        if r8 != null goto label2;

        r8 = virtualinvoke r0.<org.dom4j.io.SAXContentHandler: org.dom4j.Document getDocument()>();

     label2:
        $r9 = interfaceinvoke r8.<org.dom4j.Branch: org.dom4j.Element addElement(org.dom4j.QName)>($r7);

        virtualinvoke r0.<org.dom4j.io.SAXContentHandler: void addDeclaredNamespaces(org.dom4j.Element)>($r9);

        virtualinvoke r0.<org.dom4j.io.SAXContentHandler: void addAttributes(org.dom4j.Element,org.xml.sax.Attributes)>($r9, $r4);

        $r5 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.io.ElementStack elementStack>;

        virtualinvoke $r5.<org.dom4j.io.ElementStack: void pushElement(org.dom4j.Element)>($r9);

        r0.<org.dom4j.io.SAXContentHandler: org.dom4j.Element currentElement> = $r9;

        r0.<org.dom4j.io.SAXContentHandler: java.lang.String entity> = null;

        $r10 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.ElementHandler elementHandler>;

        if $r10 == null goto label3;

        $r10 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.ElementHandler elementHandler>;

        $r5 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.io.ElementStack elementStack>;

        interfaceinvoke $r10.<org.dom4j.ElementHandler: void onStart(org.dom4j.ElementPath)>($r5);

     label3:
        return;
    }

    public void startEntity(java.lang.String) throws org.xml.sax.SAXException
    {
        org.dom4j.io.SAXContentHandler r0;
        int $i0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        $r1 := @parameter0: java.lang.String;

        $i0 = r0.<org.dom4j.io.SAXContentHandler: int entityLevel>;

        $i0 = $i0 + 1;

        r0.<org.dom4j.io.SAXContentHandler: int entityLevel> = $i0;

        r0.<org.dom4j.io.SAXContentHandler: java.lang.String entity> = null;

        $z0 = r0.<org.dom4j.io.SAXContentHandler: boolean insideDTDSection>;

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke r0.<org.dom4j.io.SAXContentHandler: boolean isIgnorableEntity(java.lang.String)>($r1);

        if $z0 != 0 goto label1;

        r0.<org.dom4j.io.SAXContentHandler: java.lang.String entity> = $r1;

     label1:
        r0.<org.dom4j.io.SAXContentHandler: boolean internalDTDsubset> = 0;

        return;
    }

    public void startPrefixMapping(java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        org.dom4j.tree.NamespaceStack $r3;
        org.dom4j.io.SAXContentHandler r0;
        java.lang.String $r1, $r2;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.dom4j.io.SAXContentHandler: org.dom4j.tree.NamespaceStack namespaceStack>;

        virtualinvoke $r3.<org.dom4j.tree.NamespaceStack: void push(java.lang.String,java.lang.String)>($r1, $r2);

        return;
    }

    public void unparsedEntityDecl(java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        org.dom4j.io.SAXContentHandler r0;
        java.lang.String $r1, $r2, $r3, $r4;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.lang.String;

        return;
    }

    public void warning(org.xml.sax.SAXParseException) throws org.xml.sax.SAXException
    {
        org.dom4j.io.SAXContentHandler r0;
        org.xml.sax.SAXParseException $r1;

        r0 := @this: org.dom4j.io.SAXContentHandler;

        $r1 := @parameter0: org.xml.sax.SAXParseException;

        return;
    }
}
