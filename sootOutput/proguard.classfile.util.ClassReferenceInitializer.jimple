public class proguard.classfile.util.ClassReferenceInitializer extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.visitor.ClassVisitor, proguard.classfile.visitor.MemberVisitor, proguard.classfile.constant.visitor.ConstantVisitor, proguard.classfile.attribute.visitor.AttributeVisitor, proguard.classfile.attribute.visitor.LocalVariableInfoVisitor, proguard.classfile.attribute.visitor.LocalVariableTypeInfoVisitor, proguard.classfile.attribute.'annotation'.visitor.AnnotationVisitor, proguard.classfile.attribute.'annotation'.visitor.ElementValueVisitor
{
    private final proguard.classfile.util.WarningPrinter dependencyWarningPrinter;
    private final proguard.classfile.ClassPool libraryClassPool;
    private final proguard.classfile.util.MemberFinder memberFinder;
    private final proguard.classfile.util.WarningPrinter missingClassWarningPrinter;
    private final proguard.classfile.util.WarningPrinter missingMemberWarningPrinter;
    private final proguard.classfile.ClassPool programClassPool;

    public void <init>(proguard.classfile.ClassPool, proguard.classfile.ClassPool, proguard.classfile.util.WarningPrinter, proguard.classfile.util.WarningPrinter, proguard.classfile.util.WarningPrinter)
    {
        proguard.classfile.util.ClassReferenceInitializer r0;
        proguard.classfile.ClassPool $r1, $r2;
        proguard.classfile.util.WarningPrinter $r3, $r4, $r5;
        proguard.classfile.util.MemberFinder $r6;

        r0 := @this: proguard.classfile.util.ClassReferenceInitializer;

        $r1 := @parameter0: proguard.classfile.ClassPool;

        $r2 := @parameter1: proguard.classfile.ClassPool;

        $r3 := @parameter2: proguard.classfile.util.WarningPrinter;

        $r4 := @parameter3: proguard.classfile.util.WarningPrinter;

        $r5 := @parameter4: proguard.classfile.util.WarningPrinter;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        $r6 = new proguard.classfile.util.MemberFinder;

        specialinvoke $r6.<proguard.classfile.util.MemberFinder: void <init>()>();

        r0.<proguard.classfile.util.ClassReferenceInitializer: proguard.classfile.util.MemberFinder memberFinder> = $r6;

        r0.<proguard.classfile.util.ClassReferenceInitializer: proguard.classfile.ClassPool programClassPool> = $r1;

        r0.<proguard.classfile.util.ClassReferenceInitializer: proguard.classfile.ClassPool libraryClassPool> = $r2;

        r0.<proguard.classfile.util.ClassReferenceInitializer: proguard.classfile.util.WarningPrinter missingClassWarningPrinter> = $r3;

        r0.<proguard.classfile.util.ClassReferenceInitializer: proguard.classfile.util.WarningPrinter missingMemberWarningPrinter> = $r4;

        r0.<proguard.classfile.util.ClassReferenceInitializer: proguard.classfile.util.WarningPrinter dependencyWarningPrinter> = $r5;

        return;
    }

    private proguard.classfile.Clazz findClass(java.lang.String, java.lang.String)
    {
        proguard.classfile.util.ClassReferenceInitializer r0;
        proguard.classfile.util.WarningPrinter $r5;
        proguard.classfile.ClassPool $r3;
        proguard.classfile.Clazz $r4;
        java.lang.StringBuffer $r6;
        java.lang.String $r1, $r2, $r7;
        boolean $z0;

        r0 := @this: proguard.classfile.util.ClassReferenceInitializer;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $z0 = staticinvoke <proguard.classfile.util.ClassUtil: boolean isInternalArrayType(java.lang.String)>($r2);

        if $z0 == 0 goto label1;

        $z0 = staticinvoke <proguard.classfile.util.ClassUtil: boolean isInternalClassType(java.lang.String)>($r2);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r3 = r0.<proguard.classfile.util.ClassReferenceInitializer: proguard.classfile.ClassPool programClassPool>;

        $r4 = virtualinvoke $r3.<proguard.classfile.ClassPool: proguard.classfile.Clazz getClass(java.lang.String)>($r2);

        if $r4 != null goto label2;

        $r3 = r0.<proguard.classfile.util.ClassReferenceInitializer: proguard.classfile.ClassPool libraryClassPool>;

        $r4 = virtualinvoke $r3.<proguard.classfile.ClassPool: proguard.classfile.Clazz getClass(java.lang.String)>($r2);

        if $r4 != null goto label3;

        $r5 = r0.<proguard.classfile.util.ClassReferenceInitializer: proguard.classfile.util.WarningPrinter missingClassWarningPrinter>;

        if $r5 == null goto label3;

        $r5 = r0.<proguard.classfile.util.ClassReferenceInitializer: proguard.classfile.util.WarningPrinter missingClassWarningPrinter>;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Warning: ");

        $r7 = staticinvoke <proguard.classfile.util.ClassUtil: java.lang.String externalClassName(java.lang.String)>($r1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": can\'t find referenced class ");

        $r7 = staticinvoke <proguard.classfile.util.ClassUtil: java.lang.String externalClassName(java.lang.String)>($r2);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r5.<proguard.classfile.util.WarningPrinter: void print(java.lang.String,java.lang.String,java.lang.String)>($r1, $r2, $r7);

        return $r4;

     label2:
        $r5 = r0.<proguard.classfile.util.ClassReferenceInitializer: proguard.classfile.util.WarningPrinter dependencyWarningPrinter>;

        if $r5 == null goto label3;

        $r5 = r0.<proguard.classfile.util.ClassReferenceInitializer: proguard.classfile.util.WarningPrinter dependencyWarningPrinter>;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Warning: library class ");

        $r7 = staticinvoke <proguard.classfile.util.ClassUtil: java.lang.String externalClassName(java.lang.String)>($r1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" depends on program class ");

        $r7 = staticinvoke <proguard.classfile.util.ClassUtil: java.lang.String externalClassName(java.lang.String)>($r2);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r5.<proguard.classfile.util.WarningPrinter: void print(java.lang.String,java.lang.String,java.lang.String)>($r1, $r2, $r7);

     label3:
        return $r4;
    }

    private proguard.classfile.Clazz findReferencedClass(java.lang.String, java.lang.String)
    {
        proguard.classfile.util.ClassReferenceInitializer r0;
        proguard.classfile.Clazz $r4;
        java.lang.String $r1, $r2;
        proguard.classfile.util.DescriptorClassEnumeration $r3;
        boolean $z0;

        r0 := @this: proguard.classfile.util.ClassReferenceInitializer;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = new proguard.classfile.util.DescriptorClassEnumeration;

        specialinvoke $r3.<proguard.classfile.util.DescriptorClassEnumeration: void <init>(java.lang.String)>($r2);

        virtualinvoke $r3.<proguard.classfile.util.DescriptorClassEnumeration: java.lang.String nextFluff()>();

        $z0 = virtualinvoke $r3.<proguard.classfile.util.DescriptorClassEnumeration: boolean hasMoreClassNames()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke $r3.<proguard.classfile.util.DescriptorClassEnumeration: java.lang.String nextClassName()>();

        $r4 = specialinvoke r0.<proguard.classfile.util.ClassReferenceInitializer: proguard.classfile.Clazz findClass(java.lang.String,java.lang.String)>($r1, $r2);

        return $r4;

     label1:
        return null;
    }

    private proguard.classfile.Clazz[] findReferencedClasses(java.lang.String, java.lang.String)
    {
        proguard.classfile.util.ClassReferenceInitializer r0;
        proguard.classfile.Clazz[] $r3;
        proguard.classfile.Clazz $r5;
        int $i0, $i1;
        java.lang.String $r1, $r2;
        proguard.classfile.util.DescriptorClassEnumeration $r4;
        boolean $z0;

        r0 := @this: proguard.classfile.util.ClassReferenceInitializer;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $i0 = 0;

        $r4 = new proguard.classfile.util.DescriptorClassEnumeration;

        specialinvoke $r4.<proguard.classfile.util.DescriptorClassEnumeration: void <init>(java.lang.String)>($r2);

        $i1 = virtualinvoke $r4.<proguard.classfile.util.DescriptorClassEnumeration: int classCount()>();

        if $i1 <= 0 goto label4;

        $r3 = newarray (proguard.classfile.Clazz)[$i1];

        $z0 = 0;

     label1:
        if $i0 >= $i1 goto label3;

        virtualinvoke $r4.<proguard.classfile.util.DescriptorClassEnumeration: java.lang.String nextFluff()>();

        $r2 = virtualinvoke $r4.<proguard.classfile.util.DescriptorClassEnumeration: java.lang.String nextClassName()>();

        $r5 = specialinvoke r0.<proguard.classfile.util.ClassReferenceInitializer: proguard.classfile.Clazz findClass(java.lang.String,java.lang.String)>($r1, $r2);

        if $r5 == null goto label2;

        $r3[$i0] = $r5;

        $z0 = 1;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        if $z0 == 0 goto label4;

        return $r3;

     label4:
        return null;
    }

    private void initializeElementValue(proguard.classfile.Clazz, proguard.classfile.attribute.'annotation'.Annotation, proguard.classfile.attribute.'annotation'.ElementValue)
    {
        proguard.classfile.util.ClassReferenceInitializer r0;
        proguard.classfile.attribute.'annotation'.Annotation $r2;
        proguard.classfile.Clazz[] $r4;
        proguard.classfile.attribute.'annotation'.ElementValue $r3;
        proguard.classfile.Clazz $r1;
        int $i0;
        proguard.classfile.Method $r6;
        java.lang.String $r5;

        r0 := @this: proguard.classfile.util.ClassReferenceInitializer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.Annotation;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.ElementValue;

        if $r2 == null goto label1;

        $r4 = $r2.<proguard.classfile.attribute.'annotation'.Annotation: proguard.classfile.Clazz[] referencedClasses>;

        if $r4 == null goto label1;

        $i0 = $r3.<proguard.classfile.attribute.'annotation'.ElementValue: int u2elementNameIndex>;

        if $i0 == 0 goto label1;

        $i0 = $r3.<proguard.classfile.attribute.'annotation'.ElementValue: int u2elementNameIndex>;

        $r5 = interfaceinvoke $r1.<proguard.classfile.Clazz: java.lang.String getString(int)>($i0);

        $r4 = $r2.<proguard.classfile.attribute.'annotation'.Annotation: proguard.classfile.Clazz[] referencedClasses>;

        $r1 = $r4[0];

        $r3.<proguard.classfile.attribute.'annotation'.ElementValue: proguard.classfile.Clazz referencedClass> = $r1;

        $r6 = interfaceinvoke $r1.<proguard.classfile.Clazz: proguard.classfile.Method findMethod(java.lang.String,java.lang.String)>($r5, null);

        $r3.<proguard.classfile.attribute.'annotation'.ElementValue: proguard.classfile.Method referencedMethod> = $r6;

     label1:
        return;
    }

    public void visitAnnotation(proguard.classfile.Clazz, proguard.classfile.attribute.'annotation'.Annotation)
    {
        proguard.classfile.util.ClassReferenceInitializer r0;
        proguard.classfile.attribute.'annotation'.Annotation $r2;
        proguard.classfile.Clazz[] $r5;
        proguard.classfile.Clazz $r1;
        int $i0;
        java.lang.String $r3, $r4;

        r0 := @this: proguard.classfile.util.ClassReferenceInitializer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.Annotation;

        $r3 = interfaceinvoke $r1.<proguard.classfile.Clazz: java.lang.String getName()>();

        $i0 = $r2.<proguard.classfile.attribute.'annotation'.Annotation: int u2typeIndex>;

        $r4 = interfaceinvoke $r1.<proguard.classfile.Clazz: java.lang.String getString(int)>($i0);

        $r5 = specialinvoke r0.<proguard.classfile.util.ClassReferenceInitializer: proguard.classfile.Clazz[] findReferencedClasses(java.lang.String,java.lang.String)>($r3, $r4);

        $r2.<proguard.classfile.attribute.'annotation'.Annotation: proguard.classfile.Clazz[] referencedClasses> = $r5;

        virtualinvoke $r2.<proguard.classfile.attribute.'annotation'.Annotation: void elementValuesAccept(proguard.classfile.Clazz,proguard.classfile.attribute.'annotation'.visitor.ElementValueVisitor)>($r1, r0);

        return;
    }

    public void visitAnnotationDefaultAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.'annotation'.AnnotationDefaultAttribute)
    {
        proguard.classfile.util.ClassReferenceInitializer r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.'annotation'.AnnotationDefaultAttribute $r3;

        r0 := @this: proguard.classfile.util.ClassReferenceInitializer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.AnnotationDefaultAttribute;

        virtualinvoke $r3.<proguard.classfile.attribute.'annotation'.AnnotationDefaultAttribute: void defaultValueAccept(proguard.classfile.Clazz,proguard.classfile.attribute.'annotation'.visitor.ElementValueVisitor)>($r1, r0);

        return;
    }

    public void visitAnnotationElementValue(proguard.classfile.Clazz, proguard.classfile.attribute.'annotation'.Annotation, proguard.classfile.attribute.'annotation'.AnnotationElementValue)
    {
        proguard.classfile.util.ClassReferenceInitializer r0;
        proguard.classfile.attribute.'annotation'.Annotation $r2;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.'annotation'.AnnotationElementValue $r3;

        r0 := @this: proguard.classfile.util.ClassReferenceInitializer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.Annotation;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.AnnotationElementValue;

        specialinvoke r0.<proguard.classfile.util.ClassReferenceInitializer: void initializeElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.'annotation'.Annotation,proguard.classfile.attribute.'annotation'.ElementValue)>($r1, $r2, $r3);

        virtualinvoke $r3.<proguard.classfile.attribute.'annotation'.AnnotationElementValue: void annotationAccept(proguard.classfile.Clazz,proguard.classfile.attribute.'annotation'.visitor.AnnotationVisitor)>($r1, r0);

        return;
    }

    public void visitAnyAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.'annotation'.AnnotationsAttribute)
    {
        proguard.classfile.util.ClassReferenceInitializer r0;
        proguard.classfile.attribute.'annotation'.AnnotationsAttribute $r2;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.classfile.util.ClassReferenceInitializer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.AnnotationsAttribute;

        virtualinvoke $r2.<proguard.classfile.attribute.'annotation'.AnnotationsAttribute: void annotationsAccept(proguard.classfile.Clazz,proguard.classfile.attribute.'annotation'.visitor.AnnotationVisitor)>($r1, r0);

        return;
    }

    public void visitAnyAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.Attribute)
    {
        proguard.classfile.util.ClassReferenceInitializer r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.Attribute $r2;

        r0 := @this: proguard.classfile.util.ClassReferenceInitializer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.Attribute;

        return;
    }

    public void visitAnyConstant(proguard.classfile.Clazz, proguard.classfile.constant.Constant)
    {
        proguard.classfile.util.ClassReferenceInitializer r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.constant.Constant $r2;

        r0 := @this: proguard.classfile.util.ClassReferenceInitializer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.Constant;

        return;
    }

    public void visitAnyParameterAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute)
    {
        proguard.classfile.util.ClassReferenceInitializer r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute $r3;

        r0 := @this: proguard.classfile.util.ClassReferenceInitializer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute;

        virtualinvoke $r3.<proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute: void annotationsAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.'annotation'.visitor.AnnotationVisitor)>($r1, $r2, r0);

        return;
    }

    public void visitAnyRefConstant(proguard.classfile.Clazz, proguard.classfile.constant.RefConstant)
    {
        proguard.classfile.Clazz $r1, $r5;
        java.lang.StringBuffer $r11, $r13;
        int $i0;
        java.lang.String $r3, $r4, $r6, $r7, $r12;
        boolean $z0;
        proguard.classfile.util.ClassReferenceInitializer r0;
        proguard.classfile.util.WarningPrinter $r10;
        proguard.classfile.util.MemberFinder $r8;
        proguard.classfile.constant.RefConstant $r2;
        proguard.classfile.Member $r9;

        r0 := @this: proguard.classfile.util.ClassReferenceInitializer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.RefConstant;

        $r3 = virtualinvoke $r2.<proguard.classfile.constant.RefConstant: java.lang.String getClassName(proguard.classfile.Clazz)>($r1);

        $r4 = interfaceinvoke $r1.<proguard.classfile.Clazz: java.lang.String getName()>();

        $r5 = specialinvoke r0.<proguard.classfile.util.ClassReferenceInitializer: proguard.classfile.Clazz findClass(java.lang.String,java.lang.String)>($r4, $r3);

        if $r5 == null goto label5;

        $z0 = staticinvoke <proguard.classfile.util.ClassUtil: boolean isInternalArrayType(java.lang.String)>($r3);

        if $z0 != 0 goto label5;

        $r6 = virtualinvoke $r2.<proguard.classfile.constant.RefConstant: java.lang.String getName(proguard.classfile.Clazz)>($r1);

        $r7 = virtualinvoke $r2.<proguard.classfile.constant.RefConstant: java.lang.String getType(proguard.classfile.Clazz)>($r1);

        $i0 = virtualinvoke $r2.<proguard.classfile.constant.RefConstant: int getTag()>();

        if $i0 != 9 goto label3;

        $z0 = 1;

     label1:
        $r8 = r0.<proguard.classfile.util.ClassReferenceInitializer: proguard.classfile.util.MemberFinder memberFinder>;

        $r9 = virtualinvoke $r8.<proguard.classfile.util.MemberFinder: proguard.classfile.Member findMember(proguard.classfile.Clazz,proguard.classfile.Clazz,java.lang.String,java.lang.String,boolean)>($r1, $r5, $r6, $r7, $z0);

        $r2.<proguard.classfile.constant.RefConstant: proguard.classfile.Member referencedMember> = $r9;

        $r8 = r0.<proguard.classfile.util.ClassReferenceInitializer: proguard.classfile.util.MemberFinder memberFinder>;

        $r5 = virtualinvoke $r8.<proguard.classfile.util.MemberFinder: proguard.classfile.Clazz correspondingClass()>();

        $r2.<proguard.classfile.constant.RefConstant: proguard.classfile.Clazz referencedClass> = $r5;

        $r9 = $r2.<proguard.classfile.constant.RefConstant: proguard.classfile.Member referencedMember>;

        if $r9 != null goto label5;

        $r10 = r0.<proguard.classfile.util.ClassReferenceInitializer: proguard.classfile.util.WarningPrinter missingMemberWarningPrinter>;

        $r4 = interfaceinvoke $r1.<proguard.classfile.Clazz: java.lang.String getName()>();

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Warning: ");

        $r12 = interfaceinvoke $r1.<proguard.classfile.Clazz: java.lang.String getName()>();

        $r12 = staticinvoke <proguard.classfile.util.ClassUtil: java.lang.String externalClassName(java.lang.String)>($r12);

        $r11 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $r11 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": can\'t find referenced ");

        if $z0 == 0 goto label4;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("field \'");

        $r6 = staticinvoke <proguard.classfile.util.ClassUtil: java.lang.String externalFullFieldDescription(int,java.lang.String,java.lang.String)>(0, $r6, $r7);

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

     label2:
        $r11 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r11 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' in class ");

        $r6 = staticinvoke <proguard.classfile.util.ClassUtil: java.lang.String externalClassName(java.lang.String)>($r3);

        $r11 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r10.<proguard.classfile.util.WarningPrinter: void print(java.lang.String,java.lang.String,java.lang.String)>($r4, $r3, $r6);

        return;

     label3:
        $z0 = 0;

        goto label1;

     label4:
        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("method \'");

        $r6 = staticinvoke <proguard.classfile.util.ClassUtil: java.lang.String externalFullMethodDescription(java.lang.String,int,java.lang.String,java.lang.String)>($r3, 0, $r6, $r7);

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label2;

     label5:
        return;
    }

    public void visitArrayElementValue(proguard.classfile.Clazz, proguard.classfile.attribute.'annotation'.Annotation, proguard.classfile.attribute.'annotation'.ArrayElementValue)
    {
        proguard.classfile.util.ClassReferenceInitializer r0;
        proguard.classfile.attribute.'annotation'.Annotation $r2;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.'annotation'.ArrayElementValue $r3;

        r0 := @this: proguard.classfile.util.ClassReferenceInitializer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.Annotation;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.ArrayElementValue;

        specialinvoke r0.<proguard.classfile.util.ClassReferenceInitializer: void initializeElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.'annotation'.Annotation,proguard.classfile.attribute.'annotation'.ElementValue)>($r1, $r2, $r3);

        virtualinvoke $r3.<proguard.classfile.attribute.'annotation'.ArrayElementValue: void elementValuesAccept(proguard.classfile.Clazz,proguard.classfile.attribute.'annotation'.Annotation,proguard.classfile.attribute.'annotation'.visitor.ElementValueVisitor)>($r1, $r2, r0);

        return;
    }

    public void visitClassConstant(proguard.classfile.Clazz, proguard.classfile.constant.ClassConstant)
    {
        proguard.classfile.util.ClassReferenceInitializer r0;
        proguard.classfile.constant.ClassConstant $r2;
        proguard.classfile.Clazz $r1;
        java.lang.String $r3, $r4;

        r0 := @this: proguard.classfile.util.ClassReferenceInitializer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.ClassConstant;

        $r3 = interfaceinvoke $r1.<proguard.classfile.Clazz: java.lang.String getName()>();

        $r4 = virtualinvoke $r2.<proguard.classfile.constant.ClassConstant: java.lang.String getName(proguard.classfile.Clazz)>($r1);

        $r1 = specialinvoke r0.<proguard.classfile.util.ClassReferenceInitializer: proguard.classfile.Clazz findClass(java.lang.String,java.lang.String)>($r3, $r4);

        $r2.<proguard.classfile.constant.ClassConstant: proguard.classfile.Clazz referencedClass> = $r1;

        $r1 = specialinvoke r0.<proguard.classfile.util.ClassReferenceInitializer: proguard.classfile.Clazz findClass(java.lang.String,java.lang.String)>($r3, "java/lang/Class");

        $r2.<proguard.classfile.constant.ClassConstant: proguard.classfile.Clazz javaLangClassClass> = $r1;

        return;
    }

    public void visitClassElementValue(proguard.classfile.Clazz, proguard.classfile.attribute.'annotation'.Annotation, proguard.classfile.attribute.'annotation'.ClassElementValue)
    {
        proguard.classfile.util.ClassReferenceInitializer r0;
        proguard.classfile.attribute.'annotation'.Annotation $r2;
        proguard.classfile.Clazz[] $r6;
        proguard.classfile.attribute.'annotation'.ClassElementValue $r3;
        proguard.classfile.Clazz $r1;
        int $i0;
        java.lang.String $r4, $r5;

        r0 := @this: proguard.classfile.util.ClassReferenceInitializer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.Annotation;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.ClassElementValue;

        specialinvoke r0.<proguard.classfile.util.ClassReferenceInitializer: void initializeElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.'annotation'.Annotation,proguard.classfile.attribute.'annotation'.ElementValue)>($r1, $r2, $r3);

        $r4 = interfaceinvoke $r1.<proguard.classfile.Clazz: java.lang.String getName()>();

        $i0 = $r3.<proguard.classfile.attribute.'annotation'.ClassElementValue: int u2classInfoIndex>;

        $r5 = interfaceinvoke $r1.<proguard.classfile.Clazz: java.lang.String getString(int)>($i0);

        $r6 = specialinvoke r0.<proguard.classfile.util.ClassReferenceInitializer: proguard.classfile.Clazz[] findReferencedClasses(java.lang.String,java.lang.String)>($r4, $r5);

        $r3.<proguard.classfile.attribute.'annotation'.ClassElementValue: proguard.classfile.Clazz[] referencedClasses> = $r6;

        return;
    }

    public void visitCodeAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute)
    {
        proguard.classfile.util.ClassReferenceInitializer r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.classfile.util.ClassReferenceInitializer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        virtualinvoke $r3.<proguard.classfile.attribute.CodeAttribute: void attributesAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.visitor.AttributeVisitor)>($r1, $r2, r0);

        return;
    }

    public void visitConstantElementValue(proguard.classfile.Clazz, proguard.classfile.attribute.'annotation'.Annotation, proguard.classfile.attribute.'annotation'.ConstantElementValue)
    {
        proguard.classfile.util.ClassReferenceInitializer r0;
        proguard.classfile.attribute.'annotation'.ConstantElementValue $r3;
        proguard.classfile.attribute.'annotation'.Annotation $r2;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.classfile.util.ClassReferenceInitializer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.Annotation;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.ConstantElementValue;

        specialinvoke r0.<proguard.classfile.util.ClassReferenceInitializer: void initializeElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.'annotation'.Annotation,proguard.classfile.attribute.'annotation'.ElementValue)>($r1, $r2, $r3);

        return;
    }

    public void visitEnclosingMethodAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.EnclosingMethodAttribute)
    {
        proguard.classfile.util.ClassReferenceInitializer r0;
        proguard.classfile.attribute.EnclosingMethodAttribute $r2;
        proguard.classfile.util.WarningPrinter $r6;
        proguard.classfile.Clazz $r1, $r5;
        java.lang.StringBuffer $r7;
        int $i0;
        proguard.classfile.Method $r10;
        java.lang.String $r3, $r4, $r8, $r9, $r11;

        r0 := @this: proguard.classfile.util.ClassReferenceInitializer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.EnclosingMethodAttribute;

        $r3 = interfaceinvoke $r1.<proguard.classfile.Clazz: java.lang.String getName()>();

        $r4 = virtualinvoke $r2.<proguard.classfile.attribute.EnclosingMethodAttribute: java.lang.String getClassName(proguard.classfile.Clazz)>($r1);

        $r5 = specialinvoke r0.<proguard.classfile.util.ClassReferenceInitializer: proguard.classfile.Clazz findClass(java.lang.String,java.lang.String)>($r3, $r4);

        if $r5 != null goto label1;

        $r6 = r0.<proguard.classfile.util.ClassReferenceInitializer: proguard.classfile.util.WarningPrinter missingClassWarningPrinter>;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Warning: ");

        $r8 = staticinvoke <proguard.classfile.util.ClassUtil: java.lang.String externalClassName(java.lang.String)>($r3);

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": can\'t find enclosing class ");

        $r8 = staticinvoke <proguard.classfile.util.ClassUtil: java.lang.String externalClassName(java.lang.String)>($r4);

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r6.<proguard.classfile.util.WarningPrinter: void print(java.lang.String,java.lang.String,java.lang.String)>($r3, $r4, $r8);

        return;

     label1:
        $i0 = $r2.<proguard.classfile.attribute.EnclosingMethodAttribute: int u2nameAndTypeIndex>;

        if $i0 == 0 goto label3;

        $r8 = virtualinvoke $r2.<proguard.classfile.attribute.EnclosingMethodAttribute: java.lang.String getName(proguard.classfile.Clazz)>($r1);

        $r9 = virtualinvoke $r2.<proguard.classfile.attribute.EnclosingMethodAttribute: java.lang.String getType(proguard.classfile.Clazz)>($r1);

        $r10 = interfaceinvoke $r5.<proguard.classfile.Clazz: proguard.classfile.Method findMethod(java.lang.String,java.lang.String)>($r8, $r9);

        if $r10 != null goto label2;

        $r6 = r0.<proguard.classfile.util.ClassReferenceInitializer: proguard.classfile.util.WarningPrinter missingMemberWarningPrinter>;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Warning: ");

        $r11 = staticinvoke <proguard.classfile.util.ClassUtil: java.lang.String externalClassName(java.lang.String)>($r3);

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": can\'t find enclosing method \'");

        $r8 = staticinvoke <proguard.classfile.util.ClassUtil: java.lang.String externalFullMethodDescription(java.lang.String,int,java.lang.String,java.lang.String)>($r4, 0, $r8, $r9);

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' in class ");

        $r8 = staticinvoke <proguard.classfile.util.ClassUtil: java.lang.String externalClassName(java.lang.String)>($r4);

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r6.<proguard.classfile.util.WarningPrinter: void print(java.lang.String,java.lang.String,java.lang.String)>($r3, $r4, $r8);

        return;

     label2:
        $r2.<proguard.classfile.attribute.EnclosingMethodAttribute: proguard.classfile.Clazz referencedClass> = $r5;

        $r2.<proguard.classfile.attribute.EnclosingMethodAttribute: proguard.classfile.Method referencedMethod> = $r10;

     label3:
        return;
    }

    public void visitEnumConstantElementValue(proguard.classfile.Clazz, proguard.classfile.attribute.'annotation'.Annotation, proguard.classfile.attribute.'annotation'.EnumConstantElementValue)
    {
        proguard.classfile.util.ClassReferenceInitializer r0;
        proguard.classfile.attribute.'annotation'.Annotation $r2;
        proguard.classfile.Clazz[] $r6;
        proguard.classfile.attribute.'annotation'.EnumConstantElementValue $r3;
        proguard.classfile.Clazz $r1;
        int $i0;
        java.lang.String $r4, $r5;

        r0 := @this: proguard.classfile.util.ClassReferenceInitializer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.Annotation;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.EnumConstantElementValue;

        specialinvoke r0.<proguard.classfile.util.ClassReferenceInitializer: void initializeElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.'annotation'.Annotation,proguard.classfile.attribute.'annotation'.ElementValue)>($r1, $r2, $r3);

        $r4 = interfaceinvoke $r1.<proguard.classfile.Clazz: java.lang.String getName()>();

        $i0 = $r3.<proguard.classfile.attribute.'annotation'.EnumConstantElementValue: int u2typeNameIndex>;

        $r5 = interfaceinvoke $r1.<proguard.classfile.Clazz: java.lang.String getString(int)>($i0);

        $r6 = specialinvoke r0.<proguard.classfile.util.ClassReferenceInitializer: proguard.classfile.Clazz[] findReferencedClasses(java.lang.String,java.lang.String)>($r4, $r5);

        $r3.<proguard.classfile.attribute.'annotation'.EnumConstantElementValue: proguard.classfile.Clazz[] referencedClasses> = $r6;

        return;
    }

    public void visitLibraryClass(proguard.classfile.LibraryClass)
    {
        proguard.classfile.util.ClassReferenceInitializer r0;
        proguard.classfile.LibraryClass $r1;

        r0 := @this: proguard.classfile.util.ClassReferenceInitializer;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        virtualinvoke $r1.<proguard.classfile.LibraryClass: void fieldsAccept(proguard.classfile.visitor.MemberVisitor)>(r0);

        virtualinvoke $r1.<proguard.classfile.LibraryClass: void methodsAccept(proguard.classfile.visitor.MemberVisitor)>(r0);

        return;
    }

    public void visitLibraryField(proguard.classfile.LibraryClass, proguard.classfile.LibraryField)
    {
        proguard.classfile.util.ClassReferenceInitializer r0;
        proguard.classfile.LibraryClass $r1;
        proguard.classfile.Clazz $r5;
        proguard.classfile.LibraryField $r2;
        java.lang.String $r3, $r4;

        r0 := @this: proguard.classfile.util.ClassReferenceInitializer;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        $r2 := @parameter1: proguard.classfile.LibraryField;

        $r3 = virtualinvoke $r1.<proguard.classfile.LibraryClass: java.lang.String getName()>();

        $r4 = virtualinvoke $r2.<proguard.classfile.LibraryField: java.lang.String getDescriptor(proguard.classfile.Clazz)>($r1);

        $r5 = specialinvoke r0.<proguard.classfile.util.ClassReferenceInitializer: proguard.classfile.Clazz findReferencedClass(java.lang.String,java.lang.String)>($r3, $r4);

        $r2.<proguard.classfile.LibraryField: proguard.classfile.Clazz referencedClass> = $r5;

        return;
    }

    public void visitLibraryMethod(proguard.classfile.LibraryClass, proguard.classfile.LibraryMethod)
    {
        proguard.classfile.util.ClassReferenceInitializer r0;
        proguard.classfile.LibraryClass $r1;
        proguard.classfile.Clazz[] $r5;
        proguard.classfile.LibraryMethod $r2;
        java.lang.String $r3, $r4;

        r0 := @this: proguard.classfile.util.ClassReferenceInitializer;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        $r2 := @parameter1: proguard.classfile.LibraryMethod;

        $r3 = virtualinvoke $r1.<proguard.classfile.LibraryClass: java.lang.String getName()>();

        $r4 = virtualinvoke $r2.<proguard.classfile.LibraryMethod: java.lang.String getDescriptor(proguard.classfile.Clazz)>($r1);

        $r5 = specialinvoke r0.<proguard.classfile.util.ClassReferenceInitializer: proguard.classfile.Clazz[] findReferencedClasses(java.lang.String,java.lang.String)>($r3, $r4);

        $r2.<proguard.classfile.LibraryMethod: proguard.classfile.Clazz[] referencedClasses> = $r5;

        return;
    }

    public void visitLocalVariableInfo(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LocalVariableInfo)
    {
        proguard.classfile.util.ClassReferenceInitializer r0;
        proguard.classfile.attribute.LocalVariableInfo $r4;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.Method $r2;
        java.lang.String $r5, $r6;

        r0 := @this: proguard.classfile.util.ClassReferenceInitializer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.LocalVariableInfo;

        $r5 = interfaceinvoke $r1.<proguard.classfile.Clazz: java.lang.String getName()>();

        $i0 = $r4.<proguard.classfile.attribute.LocalVariableInfo: int u2descriptorIndex>;

        $r6 = interfaceinvoke $r1.<proguard.classfile.Clazz: java.lang.String getString(int)>($i0);

        $r1 = specialinvoke r0.<proguard.classfile.util.ClassReferenceInitializer: proguard.classfile.Clazz findReferencedClass(java.lang.String,java.lang.String)>($r5, $r6);

        $r4.<proguard.classfile.attribute.LocalVariableInfo: proguard.classfile.Clazz referencedClass> = $r1;

        return;
    }

    public void visitLocalVariableTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LocalVariableTableAttribute)
    {
        proguard.classfile.util.ClassReferenceInitializer r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.LocalVariableTableAttribute $r4;

        r0 := @this: proguard.classfile.util.ClassReferenceInitializer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.LocalVariableTableAttribute;

        virtualinvoke $r4.<proguard.classfile.attribute.LocalVariableTableAttribute: void localVariablesAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.visitor.LocalVariableInfoVisitor)>($r1, $r2, $r3, r0);

        return;
    }

    public void visitLocalVariableTypeInfo(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LocalVariableTypeInfo)
    {
        proguard.classfile.util.ClassReferenceInitializer r0;
        proguard.classfile.Clazz[] $r7;
        proguard.classfile.attribute.LocalVariableTypeInfo $r4;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.Method $r2;
        java.lang.String $r5, $r6;

        r0 := @this: proguard.classfile.util.ClassReferenceInitializer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.LocalVariableTypeInfo;

        $r5 = interfaceinvoke $r1.<proguard.classfile.Clazz: java.lang.String getName()>();

        $i0 = $r4.<proguard.classfile.attribute.LocalVariableTypeInfo: int u2signatureIndex>;

        $r6 = interfaceinvoke $r1.<proguard.classfile.Clazz: java.lang.String getString(int)>($i0);

        $r7 = specialinvoke r0.<proguard.classfile.util.ClassReferenceInitializer: proguard.classfile.Clazz[] findReferencedClasses(java.lang.String,java.lang.String)>($r5, $r6);

        $r4.<proguard.classfile.attribute.LocalVariableTypeInfo: proguard.classfile.Clazz[] referencedClasses> = $r7;

        return;
    }

    public void visitLocalVariableTypeTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LocalVariableTypeTableAttribute)
    {
        proguard.classfile.util.ClassReferenceInitializer r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.LocalVariableTypeTableAttribute $r4;

        r0 := @this: proguard.classfile.util.ClassReferenceInitializer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.LocalVariableTypeTableAttribute;

        virtualinvoke $r4.<proguard.classfile.attribute.LocalVariableTypeTableAttribute: void localVariablesAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.visitor.LocalVariableTypeInfoVisitor)>($r1, $r2, $r3, r0);

        return;
    }

    public void visitProgramClass(proguard.classfile.ProgramClass)
    {
        proguard.classfile.util.ClassReferenceInitializer r0;
        proguard.classfile.ProgramClass $r1;

        r0 := @this: proguard.classfile.util.ClassReferenceInitializer;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        virtualinvoke $r1.<proguard.classfile.ProgramClass: void constantPoolEntriesAccept(proguard.classfile.constant.visitor.ConstantVisitor)>(r0);

        virtualinvoke $r1.<proguard.classfile.ProgramClass: void fieldsAccept(proguard.classfile.visitor.MemberVisitor)>(r0);

        virtualinvoke $r1.<proguard.classfile.ProgramClass: void methodsAccept(proguard.classfile.visitor.MemberVisitor)>(r0);

        virtualinvoke $r1.<proguard.classfile.ProgramClass: void attributesAccept(proguard.classfile.attribute.visitor.AttributeVisitor)>(r0);

        return;
    }

    public void visitProgramField(proguard.classfile.ProgramClass, proguard.classfile.ProgramField)
    {
        proguard.classfile.util.ClassReferenceInitializer r0;
        proguard.classfile.ProgramField $r2;
        proguard.classfile.Clazz $r5;
        java.lang.String $r3, $r4;
        proguard.classfile.ProgramClass $r1;

        r0 := @this: proguard.classfile.util.ClassReferenceInitializer;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.ProgramField;

        $r3 = virtualinvoke $r1.<proguard.classfile.ProgramClass: java.lang.String getName()>();

        $r4 = virtualinvoke $r2.<proguard.classfile.ProgramField: java.lang.String getDescriptor(proguard.classfile.Clazz)>($r1);

        $r5 = specialinvoke r0.<proguard.classfile.util.ClassReferenceInitializer: proguard.classfile.Clazz findReferencedClass(java.lang.String,java.lang.String)>($r3, $r4);

        $r2.<proguard.classfile.ProgramField: proguard.classfile.Clazz referencedClass> = $r5;

        virtualinvoke $r2.<proguard.classfile.ProgramField: void attributesAccept(proguard.classfile.ProgramClass,proguard.classfile.attribute.visitor.AttributeVisitor)>($r1, r0);

        return;
    }

    public void visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod)
    {
        proguard.classfile.util.ClassReferenceInitializer r0;
        proguard.classfile.Clazz[] $r5;
        proguard.classfile.ProgramMethod $r2;
        java.lang.String $r3, $r4;
        proguard.classfile.ProgramClass $r1;

        r0 := @this: proguard.classfile.util.ClassReferenceInitializer;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.ProgramMethod;

        $r3 = virtualinvoke $r1.<proguard.classfile.ProgramClass: java.lang.String getName()>();

        $r4 = virtualinvoke $r2.<proguard.classfile.ProgramMethod: java.lang.String getDescriptor(proguard.classfile.Clazz)>($r1);

        $r5 = specialinvoke r0.<proguard.classfile.util.ClassReferenceInitializer: proguard.classfile.Clazz[] findReferencedClasses(java.lang.String,java.lang.String)>($r3, $r4);

        $r2.<proguard.classfile.ProgramMethod: proguard.classfile.Clazz[] referencedClasses> = $r5;

        virtualinvoke $r2.<proguard.classfile.ProgramMethod: void attributesAccept(proguard.classfile.ProgramClass,proguard.classfile.attribute.visitor.AttributeVisitor)>($r1, r0);

        return;
    }

    public void visitSignatureAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.SignatureAttribute)
    {
        proguard.classfile.util.ClassReferenceInitializer r0;
        proguard.classfile.Clazz[] $r5;
        proguard.classfile.Clazz $r1;
        int $i0;
        proguard.classfile.attribute.SignatureAttribute $r2;
        java.lang.String $r3, $r4;

        r0 := @this: proguard.classfile.util.ClassReferenceInitializer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.SignatureAttribute;

        $r3 = interfaceinvoke $r1.<proguard.classfile.Clazz: java.lang.String getName()>();

        $i0 = $r2.<proguard.classfile.attribute.SignatureAttribute: int u2signatureIndex>;

        $r4 = interfaceinvoke $r1.<proguard.classfile.Clazz: java.lang.String getString(int)>($i0);

        $r5 = specialinvoke r0.<proguard.classfile.util.ClassReferenceInitializer: proguard.classfile.Clazz[] findReferencedClasses(java.lang.String,java.lang.String)>($r3, $r4);

        $r2.<proguard.classfile.attribute.SignatureAttribute: proguard.classfile.Clazz[] referencedClasses> = $r5;

        return;
    }

    public void visitStringConstant(proguard.classfile.Clazz, proguard.classfile.constant.StringConstant)
    {
        proguard.classfile.util.ClassReferenceInitializer r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.constant.StringConstant $r2;
        java.lang.String $r3;

        r0 := @this: proguard.classfile.util.ClassReferenceInitializer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.StringConstant;

        $r3 = interfaceinvoke $r1.<proguard.classfile.Clazz: java.lang.String getName()>();

        $r1 = specialinvoke r0.<proguard.classfile.util.ClassReferenceInitializer: proguard.classfile.Clazz findClass(java.lang.String,java.lang.String)>($r3, "java/lang/String");

        $r2.<proguard.classfile.constant.StringConstant: proguard.classfile.Clazz javaLangStringClass> = $r1;

        return;
    }
}
