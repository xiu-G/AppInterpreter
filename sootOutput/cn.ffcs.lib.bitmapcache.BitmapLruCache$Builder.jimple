public final class cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder extends java.lang.Object
{
    static final int DEFAULT_DISK_CACHE_MAX_SIZE_MB;
    static final float DEFAULT_MEMORY_CACHE_HEAP_PERCENTAGE;
    static final float DEFAULT_MEMORY_CACHE_HEAP_RATIO;
    static final int DEFAULT_MEM_CACHE_MAX_SIZE_MB;
    static final cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy DEFAULT_RECYCLE_POLICY;
    static final float MAX_MEMORY_CACHE_HEAP_PERCENTAGE;
    static final float MAX_MEMORY_CACHE_HEAP_RATIO;
    static final int MEGABYTE;
    private android.content.Context mContext;
    private boolean mDiskCacheEnabled;
    private java.io.File mDiskCacheLocation;
    private long mDiskCacheMaxSize;
    private boolean mMemoryCacheEnabled;
    private int mMemoryCacheMaxSize;
    private cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy mRecyclePolicy;

    static void <clinit>()
    {
        cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy $r0;

        <cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder: int MEGABYTE> = 1048576;

        <cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder: float MAX_MEMORY_CACHE_HEAP_RATIO> = 0.75F;

        <cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder: float MAX_MEMORY_CACHE_HEAP_PERCENTAGE> = 75.0F;

        <cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder: int DEFAULT_MEM_CACHE_MAX_SIZE_MB> = 3;

        <cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder: float DEFAULT_MEMORY_CACHE_HEAP_RATIO> = 0.125F;

        <cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder: float DEFAULT_MEMORY_CACHE_HEAP_PERCENTAGE> = 12.5F;

        <cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder: int DEFAULT_DISK_CACHE_MAX_SIZE_MB> = 1000;

        $r0 = <cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy: cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy PRE_HONEYCOMB_ONLY>;

        <cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder: cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy DEFAULT_RECYCLE_POLICY> = $r0;

        return;
    }

    public void <init>()
    {
        cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder r0;

        r0 := @this: cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder;

        specialinvoke r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder: void <init>(android.content.Context)>(null);

        return;
    }

    public void <init>(android.content.Context)
    {
        android.content.Context $r1;
        cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder r0;
        cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy $r2;

        r0 := @this: cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder;

        $r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder: android.content.Context mContext> = $r1;

        r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder: long mDiskCacheMaxSize> = 1048576000L;

        r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder: boolean mMemoryCacheEnabled> = 1;

        r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder: int mMemoryCacheMaxSize> = 3145728;

        $r2 = <cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder: cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy DEFAULT_RECYCLE_POLICY>;

        r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder: cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy mRecyclePolicy> = $r2;

        return;
    }

    static java.io.File access$000(cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder)
    {
        cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder $r0;
        java.io.File r1;

        $r0 := @parameter0: cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder;

        r1 = $r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder: java.io.File mDiskCacheLocation>;

        return r1;
    }

    static long access$100(cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder)
    {
        long l0;
        cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder $r0;

        $r0 := @parameter0: cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder;

        l0 = $r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder: long mDiskCacheMaxSize>;

        return l0;
    }

    private static long getHeapSize()
    {
        long $l0;
        java.lang.Runtime $r0;

        $r0 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $l0 = virtualinvoke $r0.<java.lang.Runtime: long maxMemory()>();

        return $l0;
    }

    private boolean isValidOptionsForDiskCache()
    {
        cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder r0;
        java.lang.String $r2;
        java.io.File $r1;
        boolean $z0, z1;

        r0 := @this: cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder;

        z1 = r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder: boolean mDiskCacheEnabled>;

        if z1 == 0 goto label2;

        $r1 = r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder: java.io.File mDiskCacheLocation>;

        if $r1 != null goto label1;

        $r2 = <cn.ffcs.lib.bitmapcache.Constants: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r2, "Disk Cache has been enabled, but no location given. Please call setDiskCacheLocation(...)");

        return 0;

     label1:
        $r1 = r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder: java.io.File mDiskCacheLocation>;

        $z0 = virtualinvoke $r1.<java.io.File: boolean canWrite()>();

        if $z0 != 0 goto label2;

        $r2 = <cn.ffcs.lib.bitmapcache.Constants: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r2, "Disk Cache Location is not write-able, disabling disk caching.");

        return 0;

     label2:
        return z1;
    }

    private boolean isValidOptionsForMemoryCache()
    {
        int $i0;
        cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder r0;
        boolean $z0;

        r0 := @this: cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder;

        $z0 = r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder: boolean mMemoryCacheEnabled>;

        if $z0 == 0 goto label1;

        $i0 = r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder: int mMemoryCacheMaxSize>;

        if $i0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public cn.ffcs.lib.bitmapcache.BitmapLruCache build()
    {
        android.content.Context $r3;
        cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache $r4;
        cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder$1 $r5;
        cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy $r2;
        cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder r0;
        int $i0;
        cn.ffcs.lib.bitmapcache.BitmapLruCache r1;
        java.lang.Void[] $r6;
        boolean $z0;

        r0 := @this: cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder;

        r1 = new cn.ffcs.lib.bitmapcache.BitmapLruCache;

        $r3 = r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder: android.content.Context mContext>;

        specialinvoke r1.<cn.ffcs.lib.bitmapcache.BitmapLruCache: void <init>(android.content.Context)>($r3);

        $z0 = specialinvoke r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder: boolean isValidOptionsForMemoryCache()>();

        if $z0 == 0 goto label2;

        $z0 = <cn.ffcs.lib.bitmapcache.Constants: boolean DEBUG>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("BitmapLruCache.Builder", "Creating Memory Cache");

     label1:
        $r4 = new cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache;

        $i0 = r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder: int mMemoryCacheMaxSize>;

        $r2 = r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder: cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy mRecyclePolicy>;

        specialinvoke $r4.<cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache: void <init>(int,cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy)>($i0, $r2);

        virtualinvoke r1.<cn.ffcs.lib.bitmapcache.BitmapLruCache: void setMemoryCache(cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache)>($r4);

     label2:
        $z0 = specialinvoke r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder: boolean isValidOptionsForDiskCache()>();

        if $z0 == 0 goto label3;

        $r5 = new cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder$1;

        specialinvoke $r5.<cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder$1: void <init>(cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder,cn.ffcs.lib.bitmapcache.BitmapLruCache)>(r0, r1);

        $r6 = newarray (java.lang.Void)[0];

        virtualinvoke $r5.<cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder$1: android.os.AsyncTask execute(java.lang.Object[])>($r6);

     label3:
        return r1;
    }

    public cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder setDiskCacheEnabled(boolean)
    {
        cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder r0;
        boolean $z0;

        r0 := @this: cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder;

        $z0 := @parameter0: boolean;

        r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder: boolean mDiskCacheEnabled> = 1;

        return r0;
    }

    public cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder setDiskCacheLocation(java.io.File)
    {
        cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder r0;
        java.io.File $r1;

        r0 := @this: cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder;

        $r1 := @parameter0: java.io.File;

        r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder: java.io.File mDiskCacheLocation> = $r1;

        return r0;
    }

    public cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder setDiskCacheMaxSize(long)
    {
        long $l0;
        cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder r0;

        r0 := @this: cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder;

        $l0 := @parameter0: long;

        r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder: long mDiskCacheMaxSize> = $l0;

        return r0;
    }

    public cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder setMemoryCacheEnabled(boolean)
    {
        cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder r0;
        boolean $z0;

        r0 := @this: cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder;

        $z0 := @parameter0: boolean;

        r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder: boolean mMemoryCacheEnabled> = 1;

        return r0;
    }

    public cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder setMemoryCacheMaxSize(int)
    {
        int $i0;
        cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder r0;

        r0 := @this: cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder;

        $i0 := @parameter0: int;

        r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder: int mMemoryCacheMaxSize> = $i0;

        return r0;
    }

    public cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder setMemoryCacheMaxSizeUsingHeapSize()
    {
        cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder r0;

        r0 := @this: cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder;

        r0 = virtualinvoke r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder: cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder setMemoryCacheMaxSizeUsingHeapSize(float)>(0.125F);

        return r0;
    }

    public cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder setMemoryCacheMaxSizeUsingHeapSize(float)
    {
        cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder r0;
        int $i1;
        float $f0, $f1;
        long $l0;

        r0 := @this: cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder;

        $f0 := @parameter0: float;

        $l0 = staticinvoke <cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder: long getHeapSize()>();

        $f1 = (float) $l0;

        $f0 = staticinvoke <java.lang.Math: float min(float,float)>(0.125F, 0.75F);

        $f0 = $f1 * $f0;

        $i1 = staticinvoke <java.lang.Math: int round(float)>($f0);

        r0 = virtualinvoke r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder: cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder setMemoryCacheMaxSize(int)>($i1);

        return r0;
    }

    public cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder setRecyclePolicy(cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy)
    {
        cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder r0;
        java.lang.IllegalArgumentException $r2;
        cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy $r1;

        r0 := @this: cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder;

        $r1 := @parameter0: cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The recycle policy can not be null");

        throw $r2;

     label1:
        r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache$Builder: cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy mRecyclePolicy> = $r1;

        return r0;
    }
}
