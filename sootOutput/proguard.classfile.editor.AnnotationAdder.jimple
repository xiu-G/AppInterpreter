public class proguard.classfile.editor.AnnotationAdder extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.attribute.'annotation'.visitor.AnnotationVisitor
{
    private static final proguard.classfile.attribute.'annotation'.ElementValue[] EMPTY_ELEMENT_VALUES;
    private final proguard.classfile.editor.AnnotationsAttributeEditor annotationsAttributeEditor;
    private final proguard.classfile.editor.ConstantAdder constantAdder;
    private final proguard.classfile.editor.ParameterAnnotationsAttributeEditor parameterAnnotationsAttributeEditor;
    private final proguard.classfile.attribute.'annotation'.AnnotationElementValue targetAnnotationElementValue;
    private final proguard.classfile.ProgramClass targetClass;

    static void <clinit>()
    {
        proguard.classfile.attribute.'annotation'.ElementValue[] $r0;

        $r0 = newarray (proguard.classfile.attribute.'annotation'.ElementValue)[0];

        <proguard.classfile.editor.AnnotationAdder: proguard.classfile.attribute.'annotation'.ElementValue[] EMPTY_ELEMENT_VALUES> = $r0;

        return;
    }

    public void <init>(proguard.classfile.ProgramClass, proguard.classfile.attribute.'annotation'.AnnotationElementValue)
    {
        proguard.classfile.editor.ConstantAdder $r3;
        proguard.classfile.editor.AnnotationAdder r0;
        proguard.classfile.attribute.'annotation'.AnnotationElementValue $r2;
        proguard.classfile.ProgramClass $r1;

        r0 := @this: proguard.classfile.editor.AnnotationAdder;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.AnnotationElementValue;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        r0.<proguard.classfile.editor.AnnotationAdder: proguard.classfile.ProgramClass targetClass> = $r1;

        r0.<proguard.classfile.editor.AnnotationAdder: proguard.classfile.attribute.'annotation'.AnnotationElementValue targetAnnotationElementValue> = $r2;

        r0.<proguard.classfile.editor.AnnotationAdder: proguard.classfile.editor.AnnotationsAttributeEditor annotationsAttributeEditor> = null;

        r0.<proguard.classfile.editor.AnnotationAdder: proguard.classfile.editor.ParameterAnnotationsAttributeEditor parameterAnnotationsAttributeEditor> = null;

        $r3 = new proguard.classfile.editor.ConstantAdder;

        specialinvoke $r3.<proguard.classfile.editor.ConstantAdder: void <init>(proguard.classfile.ProgramClass)>($r1);

        r0.<proguard.classfile.editor.AnnotationAdder: proguard.classfile.editor.ConstantAdder constantAdder> = $r3;

        return;
    }

    public void <init>(proguard.classfile.ProgramClass, proguard.classfile.attribute.'annotation'.AnnotationsAttribute)
    {
        proguard.classfile.editor.ConstantAdder $r4;
        proguard.classfile.editor.AnnotationAdder r0;
        proguard.classfile.editor.AnnotationsAttributeEditor $r3;
        proguard.classfile.attribute.'annotation'.AnnotationsAttribute $r2;
        proguard.classfile.ProgramClass $r1;

        r0 := @this: proguard.classfile.editor.AnnotationAdder;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.AnnotationsAttribute;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        r0.<proguard.classfile.editor.AnnotationAdder: proguard.classfile.ProgramClass targetClass> = $r1;

        r0.<proguard.classfile.editor.AnnotationAdder: proguard.classfile.attribute.'annotation'.AnnotationElementValue targetAnnotationElementValue> = null;

        $r3 = new proguard.classfile.editor.AnnotationsAttributeEditor;

        specialinvoke $r3.<proguard.classfile.editor.AnnotationsAttributeEditor: void <init>(proguard.classfile.attribute.'annotation'.AnnotationsAttribute)>($r2);

        r0.<proguard.classfile.editor.AnnotationAdder: proguard.classfile.editor.AnnotationsAttributeEditor annotationsAttributeEditor> = $r3;

        r0.<proguard.classfile.editor.AnnotationAdder: proguard.classfile.editor.ParameterAnnotationsAttributeEditor parameterAnnotationsAttributeEditor> = null;

        $r4 = new proguard.classfile.editor.ConstantAdder;

        specialinvoke $r4.<proguard.classfile.editor.ConstantAdder: void <init>(proguard.classfile.ProgramClass)>($r1);

        r0.<proguard.classfile.editor.AnnotationAdder: proguard.classfile.editor.ConstantAdder constantAdder> = $r4;

        return;
    }

    public void <init>(proguard.classfile.ProgramClass, proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute)
    {
        proguard.classfile.editor.ParameterAnnotationsAttributeEditor $r3;
        proguard.classfile.editor.ConstantAdder $r4;
        proguard.classfile.editor.AnnotationAdder r0;
        proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute $r2;
        proguard.classfile.ProgramClass $r1;

        r0 := @this: proguard.classfile.editor.AnnotationAdder;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        r0.<proguard.classfile.editor.AnnotationAdder: proguard.classfile.ProgramClass targetClass> = $r1;

        r0.<proguard.classfile.editor.AnnotationAdder: proguard.classfile.attribute.'annotation'.AnnotationElementValue targetAnnotationElementValue> = null;

        r0.<proguard.classfile.editor.AnnotationAdder: proguard.classfile.editor.AnnotationsAttributeEditor annotationsAttributeEditor> = null;

        $r3 = new proguard.classfile.editor.ParameterAnnotationsAttributeEditor;

        specialinvoke $r3.<proguard.classfile.editor.ParameterAnnotationsAttributeEditor: void <init>(proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute)>($r2);

        r0.<proguard.classfile.editor.AnnotationAdder: proguard.classfile.editor.ParameterAnnotationsAttributeEditor parameterAnnotationsAttributeEditor> = $r3;

        $r4 = new proguard.classfile.editor.ConstantAdder;

        specialinvoke $r4.<proguard.classfile.editor.ConstantAdder: void <init>(proguard.classfile.ProgramClass)>($r1);

        r0.<proguard.classfile.editor.AnnotationAdder: proguard.classfile.editor.ConstantAdder constantAdder> = $r4;

        return;
    }

    public void visitAnnotation(proguard.classfile.Clazz, proguard.classfile.Method, int, proguard.classfile.attribute.'annotation'.Annotation)
    {
        proguard.classfile.editor.ConstantAdder $r5;
        proguard.classfile.attribute.'annotation'.Annotation $r3, $r4;
        proguard.classfile.Clazz[] $r7;
        proguard.classfile.attribute.'annotation'.ElementValue[] $r6;
        proguard.classfile.ProgramClass $r9;
        proguard.classfile.editor.ElementValueAdder $r8;
        proguard.classfile.editor.ParameterAnnotationsAttributeEditor $r10;
        proguard.classfile.editor.AnnotationAdder r0;
        proguard.classfile.Clazz $r1;
        int $i0, $i1, $i2;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.classfile.editor.AnnotationAdder;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $i0 := @parameter2: int;

        $r3 := @parameter3: proguard.classfile.attribute.'annotation'.Annotation;

        $r4 = new proguard.classfile.attribute.'annotation'.Annotation;

        $r5 = r0.<proguard.classfile.editor.AnnotationAdder: proguard.classfile.editor.ConstantAdder constantAdder>;

        $i1 = $r3.<proguard.classfile.attribute.'annotation'.Annotation: int u2typeIndex>;

        $i1 = virtualinvoke $r5.<proguard.classfile.editor.ConstantAdder: int addConstant(proguard.classfile.Clazz,int)>($r1, $i1);

        $i2 = $r3.<proguard.classfile.attribute.'annotation'.Annotation: int u2elementValuesCount>;

        if $i2 <= 0 goto label2;

        $i2 = $r3.<proguard.classfile.attribute.'annotation'.Annotation: int u2elementValuesCount>;

        $r6 = newarray (proguard.classfile.attribute.'annotation'.ElementValue)[$i2];

     label1:
        specialinvoke $r4.<proguard.classfile.attribute.'annotation'.Annotation: void <init>(int,int,proguard.classfile.attribute.'annotation'.ElementValue[])>($i1, 0, $r6);

        $r7 = $r3.<proguard.classfile.attribute.'annotation'.Annotation: proguard.classfile.Clazz[] referencedClasses>;

        $r4.<proguard.classfile.attribute.'annotation'.Annotation: proguard.classfile.Clazz[] referencedClasses> = $r7;

        $r8 = new proguard.classfile.editor.ElementValueAdder;

        $r9 = r0.<proguard.classfile.editor.AnnotationAdder: proguard.classfile.ProgramClass targetClass>;

        specialinvoke $r8.<proguard.classfile.editor.ElementValueAdder: void <init>(proguard.classfile.ProgramClass,proguard.classfile.attribute.'annotation'.Annotation,boolean)>($r9, $r4, 0);

        virtualinvoke $r3.<proguard.classfile.attribute.'annotation'.Annotation: void elementValuesAccept(proguard.classfile.Clazz,proguard.classfile.attribute.'annotation'.visitor.ElementValueVisitor)>($r1, $r8);

        $r10 = r0.<proguard.classfile.editor.AnnotationAdder: proguard.classfile.editor.ParameterAnnotationsAttributeEditor parameterAnnotationsAttributeEditor>;

        virtualinvoke $r10.<proguard.classfile.editor.ParameterAnnotationsAttributeEditor: void addAnnotation(int,proguard.classfile.attribute.'annotation'.Annotation)>($i0, $r4);

        return;

     label2:
        $r6 = <proguard.classfile.editor.AnnotationAdder: proguard.classfile.attribute.'annotation'.ElementValue[] EMPTY_ELEMENT_VALUES>;

        goto label1;
    }

    public void visitAnnotation(proguard.classfile.Clazz, proguard.classfile.attribute.'annotation'.Annotation)
    {
        proguard.classfile.editor.ConstantAdder $r4;
        proguard.classfile.attribute.'annotation'.Annotation $r2, $r3;
        proguard.classfile.Clazz[] $r6;
        proguard.classfile.attribute.'annotation'.ElementValue[] $r5;
        proguard.classfile.editor.AnnotationsAttributeEditor $r10;
        proguard.classfile.attribute.'annotation'.AnnotationElementValue $r9;
        proguard.classfile.ProgramClass $r8;
        proguard.classfile.editor.ElementValueAdder $r7;
        proguard.classfile.editor.AnnotationAdder r0;
        proguard.classfile.Clazz $r1;
        int $i0, $i1;

        r0 := @this: proguard.classfile.editor.AnnotationAdder;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.Annotation;

        $r3 = new proguard.classfile.attribute.'annotation'.Annotation;

        $r4 = r0.<proguard.classfile.editor.AnnotationAdder: proguard.classfile.editor.ConstantAdder constantAdder>;

        $i0 = $r2.<proguard.classfile.attribute.'annotation'.Annotation: int u2typeIndex>;

        $i0 = virtualinvoke $r4.<proguard.classfile.editor.ConstantAdder: int addConstant(proguard.classfile.Clazz,int)>($r1, $i0);

        $i1 = $r2.<proguard.classfile.attribute.'annotation'.Annotation: int u2elementValuesCount>;

        if $i1 <= 0 goto label2;

        $i1 = $r2.<proguard.classfile.attribute.'annotation'.Annotation: int u2elementValuesCount>;

        $r5 = newarray (proguard.classfile.attribute.'annotation'.ElementValue)[$i1];

     label1:
        specialinvoke $r3.<proguard.classfile.attribute.'annotation'.Annotation: void <init>(int,int,proguard.classfile.attribute.'annotation'.ElementValue[])>($i0, 0, $r5);

        $r6 = $r2.<proguard.classfile.attribute.'annotation'.Annotation: proguard.classfile.Clazz[] referencedClasses>;

        $r3.<proguard.classfile.attribute.'annotation'.Annotation: proguard.classfile.Clazz[] referencedClasses> = $r6;

        $r7 = new proguard.classfile.editor.ElementValueAdder;

        $r8 = r0.<proguard.classfile.editor.AnnotationAdder: proguard.classfile.ProgramClass targetClass>;

        specialinvoke $r7.<proguard.classfile.editor.ElementValueAdder: void <init>(proguard.classfile.ProgramClass,proguard.classfile.attribute.'annotation'.Annotation,boolean)>($r8, $r3, 0);

        virtualinvoke $r2.<proguard.classfile.attribute.'annotation'.Annotation: void elementValuesAccept(proguard.classfile.Clazz,proguard.classfile.attribute.'annotation'.visitor.ElementValueVisitor)>($r1, $r7);

        $r9 = r0.<proguard.classfile.editor.AnnotationAdder: proguard.classfile.attribute.'annotation'.AnnotationElementValue targetAnnotationElementValue>;

        if $r9 == null goto label3;

        $r9 = r0.<proguard.classfile.editor.AnnotationAdder: proguard.classfile.attribute.'annotation'.AnnotationElementValue targetAnnotationElementValue>;

        $r9.<proguard.classfile.attribute.'annotation'.AnnotationElementValue: proguard.classfile.attribute.'annotation'.Annotation annotationValue> = $r3;

        return;

     label2:
        $r5 = <proguard.classfile.editor.AnnotationAdder: proguard.classfile.attribute.'annotation'.ElementValue[] EMPTY_ELEMENT_VALUES>;

        goto label1;

     label3:
        $r10 = r0.<proguard.classfile.editor.AnnotationAdder: proguard.classfile.editor.AnnotationsAttributeEditor annotationsAttributeEditor>;

        virtualinvoke $r10.<proguard.classfile.editor.AnnotationsAttributeEditor: void addAnnotation(proguard.classfile.attribute.'annotation'.Annotation)>($r3);

        return;
    }
}
