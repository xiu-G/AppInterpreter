public class com.parse.entity.mime.MultipartEntity extends java.lang.Object implements org.apache.http.HttpEntity
{
    private static final char[] MULTIPART_CHARS;
    private final org.apache.http.Header contentType;
    private volatile boolean dirty;
    private long length;
    private final com.parse.entity.mime.HttpMultipart multipart;

    static void <clinit>()
    {
        char[] $r0;
        java.lang.String $r1;

        $r1 = "-_1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";

        $r0 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>();

        <com.parse.entity.mime.MultipartEntity: char[] MULTIPART_CHARS> = $r0;

        return;
    }

    public void <init>()
    {
        com.parse.entity.mime.MultipartEntity r0;
        com.parse.entity.mime.HttpMultipartMode $r1;

        r0 := @this: com.parse.entity.mime.MultipartEntity;

        $r1 = <com.parse.entity.mime.HttpMultipartMode: com.parse.entity.mime.HttpMultipartMode STRICT>;

        specialinvoke r0.<com.parse.entity.mime.MultipartEntity: void <init>(com.parse.entity.mime.HttpMultipartMode,java.lang.String,java.nio.charset.Charset)>($r1, null, null);

        return;
    }

    public void <init>(com.parse.entity.mime.HttpMultipartMode)
    {
        com.parse.entity.mime.MultipartEntity r0;
        com.parse.entity.mime.HttpMultipartMode $r1;

        r0 := @this: com.parse.entity.mime.MultipartEntity;

        $r1 := @parameter0: com.parse.entity.mime.HttpMultipartMode;

        specialinvoke r0.<com.parse.entity.mime.MultipartEntity: void <init>(com.parse.entity.mime.HttpMultipartMode,java.lang.String,java.nio.charset.Charset)>($r1, null, null);

        return;
    }

    public void <init>(com.parse.entity.mime.HttpMultipartMode, java.lang.String, java.nio.charset.Charset)
    {
        java.nio.charset.Charset $r1;
        org.apache.http.message.BasicHeader $r5;
        com.parse.entity.mime.HttpMultipart $r4;
        com.parse.entity.mime.MultipartEntity r0;
        java.lang.String $r3;
        com.parse.entity.mime.HttpMultipartMode $r2;

        r0 := @this: com.parse.entity.mime.MultipartEntity;

        $r2 := @parameter0: com.parse.entity.mime.HttpMultipartMode;

        $r3 := @parameter1: java.lang.String;

        $r1 := @parameter2: java.nio.charset.Charset;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = virtualinvoke r0.<com.parse.entity.mime.MultipartEntity: java.lang.String generateBoundary()>();

        if $r2 != null goto label1;

        $r2 = <com.parse.entity.mime.HttpMultipartMode: com.parse.entity.mime.HttpMultipartMode STRICT>;

     label1:
        $r4 = new com.parse.entity.mime.HttpMultipart;

        specialinvoke $r4.<com.parse.entity.mime.HttpMultipart: void <init>(java.lang.String,java.nio.charset.Charset,java.lang.String,com.parse.entity.mime.HttpMultipartMode)>("form-data", null, $r3, $r2);

        r0.<com.parse.entity.mime.MultipartEntity: com.parse.entity.mime.HttpMultipart multipart> = $r4;

        $r5 = new org.apache.http.message.BasicHeader;

        $r3 = virtualinvoke r0.<com.parse.entity.mime.MultipartEntity: java.lang.String generateContentType(java.lang.String,java.nio.charset.Charset)>($r3, null);

        specialinvoke $r5.<org.apache.http.message.BasicHeader: void <init>(java.lang.String,java.lang.String)>("Content-Type", $r3);

        r0.<com.parse.entity.mime.MultipartEntity: org.apache.http.Header contentType> = $r5;

        r0.<com.parse.entity.mime.MultipartEntity: boolean dirty> = 1;

        return;
    }

    public void addPart(com.parse.entity.mime.FormBodyPart)
    {
        com.parse.entity.mime.HttpMultipart $r2;
        com.parse.entity.mime.MultipartEntity r0;
        com.parse.entity.mime.FormBodyPart $r1;

        r0 := @this: com.parse.entity.mime.MultipartEntity;

        $r1 := @parameter0: com.parse.entity.mime.FormBodyPart;

        $r2 = r0.<com.parse.entity.mime.MultipartEntity: com.parse.entity.mime.HttpMultipart multipart>;

        virtualinvoke $r2.<com.parse.entity.mime.HttpMultipart: void addBodyPart(com.parse.entity.mime.FormBodyPart)>($r1);

        r0.<com.parse.entity.mime.MultipartEntity: boolean dirty> = 1;

        return;
    }

    public void addPart(java.lang.String, com.parse.entity.mime.content.ContentBody)
    {
        com.parse.entity.mime.content.ContentBody $r2;
        com.parse.entity.mime.MultipartEntity r0;
        java.lang.String $r1;
        com.parse.entity.mime.FormBodyPart $r3;

        r0 := @this: com.parse.entity.mime.MultipartEntity;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: com.parse.entity.mime.content.ContentBody;

        $r3 = new com.parse.entity.mime.FormBodyPart;

        specialinvoke $r3.<com.parse.entity.mime.FormBodyPart: void <init>(java.lang.String,com.parse.entity.mime.content.ContentBody)>($r1, $r2);

        virtualinvoke r0.<com.parse.entity.mime.MultipartEntity: void addPart(com.parse.entity.mime.FormBodyPart)>($r3);

        return;
    }

    public void consumeContent()
    {
        java.lang.UnsupportedOperationException $r1;
        com.parse.entity.mime.MultipartEntity r0;
        boolean $z0;

        r0 := @this: com.parse.entity.mime.MultipartEntity;

        $z0 = virtualinvoke r0.<com.parse.entity.mime.MultipartEntity: boolean isStreaming()>();

        if $z0 == 0 goto label1;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Streaming entity does not implement #consumeContent()");

        throw $r1;

     label1:
        return;
    }

    protected java.lang.String generateBoundary()
    {
        java.util.Random $r2;
        char $c3;
        com.parse.entity.mime.MultipartEntity r0;
        int $i0, $i1, $i2;
        char[] $r3, $r4;
        java.lang.StringBuilder $r1;
        java.lang.String $r5;

        r0 := @this: com.parse.entity.mime.MultipartEntity;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = new java.util.Random;

        specialinvoke $r2.<java.util.Random: void <init>()>();

        $i0 = virtualinvoke $r2.<java.util.Random: int nextInt(int)>(11);

        $i0 = $i0 + 30;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r3 = <com.parse.entity.mime.MultipartEntity: char[] MULTIPART_CHARS>;

        $r4 = <com.parse.entity.mime.MultipartEntity: char[] MULTIPART_CHARS>;

        $i2 = lengthof $r4;

        $i2 = virtualinvoke $r2.<java.util.Random: int nextInt(int)>($i2);

        $c3 = $r3[$i2];

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    protected java.lang.String generateContentType(java.lang.String, java.nio.charset.Charset)
    {
        java.nio.charset.Charset $r2;
        java.lang.StringBuilder $r3;
        com.parse.entity.mime.MultipartEntity r0;
        java.lang.String $r1;

        r0 := @this: com.parse.entity.mime.MultipartEntity;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.nio.charset.Charset;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("multipart/form-data; boundary=");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        goto label1;

     label1:
        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }

    public java.io.InputStream getContent()
    {
        java.lang.UnsupportedOperationException $r1;
        com.parse.entity.mime.MultipartEntity r0;

        r0 := @this: com.parse.entity.mime.MultipartEntity;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Multipart form entity does not implement #getContent()");

        throw $r1;
    }

    public org.apache.http.Header getContentEncoding()
    {
        com.parse.entity.mime.MultipartEntity r0;

        r0 := @this: com.parse.entity.mime.MultipartEntity;

        return null;
    }

    public long getContentLength()
    {
        long $l0;
        com.parse.entity.mime.HttpMultipart $r1;
        com.parse.entity.mime.MultipartEntity r0;
        boolean $z0;

        r0 := @this: com.parse.entity.mime.MultipartEntity;

        $z0 = r0.<com.parse.entity.mime.MultipartEntity: boolean dirty>;

        if $z0 == 0 goto label1;

        $r1 = r0.<com.parse.entity.mime.MultipartEntity: com.parse.entity.mime.HttpMultipart multipart>;

        $l0 = virtualinvoke $r1.<com.parse.entity.mime.HttpMultipart: long getTotalLength()>();

        r0.<com.parse.entity.mime.MultipartEntity: long length> = $l0;

        r0.<com.parse.entity.mime.MultipartEntity: boolean dirty> = 0;

     label1:
        $l0 = r0.<com.parse.entity.mime.MultipartEntity: long length>;

        return $l0;
    }

    public org.apache.http.Header getContentType()
    {
        com.parse.entity.mime.MultipartEntity r0;
        org.apache.http.Header r1;

        r0 := @this: com.parse.entity.mime.MultipartEntity;

        r1 = r0.<com.parse.entity.mime.MultipartEntity: org.apache.http.Header contentType>;

        return r1;
    }

    public boolean isChunked()
    {
        com.parse.entity.mime.MultipartEntity r0;
        boolean $z0;

        r0 := @this: com.parse.entity.mime.MultipartEntity;

        $z0 = virtualinvoke r0.<com.parse.entity.mime.MultipartEntity: boolean isRepeatable()>();

        if $z0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isRepeatable()
    {
        com.parse.entity.mime.content.ContentBody $r6;
        java.util.Iterator $r3;
        long $l0;
        com.parse.entity.mime.MultipartEntity r0;
        java.util.List $r2;
        byte $b1;
        int $i2;
        com.parse.entity.mime.HttpMultipart $r1;
        java.lang.Object $r4;
        com.parse.entity.mime.FormBodyPart $r5;
        boolean $z0;

        r0 := @this: com.parse.entity.mime.MultipartEntity;

        $r1 = r0.<com.parse.entity.mime.MultipartEntity: com.parse.entity.mime.HttpMultipart multipart>;

        $r2 = virtualinvoke $r1.<com.parse.entity.mime.HttpMultipart: java.util.List getBodyParts()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (com.parse.entity.mime.FormBodyPart) $r4;

        $r6 = virtualinvoke $r5.<com.parse.entity.mime.FormBodyPart: com.parse.entity.mime.content.ContentBody getBody()>();

        $l0 = interfaceinvoke $r6.<com.parse.entity.mime.content.ContentBody: long getContentLength()>();

        $b1 = $l0 cmp 0L;

        $i2 = (int) $b1;

        if $i2 >= 0 goto label1;

        return 0;

     label2:
        return 1;
    }

    public boolean isStreaming()
    {
        com.parse.entity.mime.MultipartEntity r0;
        boolean $z0;

        r0 := @this: com.parse.entity.mime.MultipartEntity;

        $z0 = virtualinvoke r0.<com.parse.entity.mime.MultipartEntity: boolean isRepeatable()>();

        if $z0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void writeTo(java.io.OutputStream)
    {
        java.io.OutputStream $r1;
        com.parse.entity.mime.HttpMultipart $r2;
        com.parse.entity.mime.MultipartEntity r0;

        r0 := @this: com.parse.entity.mime.MultipartEntity;

        $r1 := @parameter0: java.io.OutputStream;

        $r2 = r0.<com.parse.entity.mime.MultipartEntity: com.parse.entity.mime.HttpMultipart multipart>;

        virtualinvoke $r2.<com.parse.entity.mime.HttpMultipart: void writeTo(java.io.OutputStream)>($r1);

        return;
    }
}
