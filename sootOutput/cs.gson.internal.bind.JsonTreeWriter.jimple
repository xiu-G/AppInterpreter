public final class cs.gson.internal.bind.JsonTreeWriter extends cs.gson.stream.JsonWriter
{
    private static final cs.gson.JsonPrimitive SENTINEL_CLOSED;
    private static final java.io.Writer UNWRITABLE_WRITER;
    private java.lang.String pendingName;
    private cs.gson.JsonElement product;
    private final java.util.List stack;

    static void <clinit>()
    {
        cs.gson.JsonPrimitive $r1;
        cs.gson.internal.bind.JsonTreeWriter$1 $r0;

        $r0 = new cs.gson.internal.bind.JsonTreeWriter$1;

        specialinvoke $r0.<cs.gson.internal.bind.JsonTreeWriter$1: void <init>()>();

        <cs.gson.internal.bind.JsonTreeWriter: java.io.Writer UNWRITABLE_WRITER> = $r0;

        $r1 = new cs.gson.JsonPrimitive;

        specialinvoke $r1.<cs.gson.JsonPrimitive: void <init>(java.lang.String)>("closed");

        <cs.gson.internal.bind.JsonTreeWriter: cs.gson.JsonPrimitive SENTINEL_CLOSED> = $r1;

        return;
    }

    public void <init>()
    {
        java.io.Writer $r1;
        cs.gson.JsonNull $r3;
        cs.gson.internal.bind.JsonTreeWriter r0;
        java.util.ArrayList $r2;

        r0 := @this: cs.gson.internal.bind.JsonTreeWriter;

        $r1 = <cs.gson.internal.bind.JsonTreeWriter: java.io.Writer UNWRITABLE_WRITER>;

        specialinvoke r0.<cs.gson.stream.JsonWriter: void <init>(java.io.Writer)>($r1);

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<cs.gson.internal.bind.JsonTreeWriter: java.util.List stack> = $r2;

        $r3 = <cs.gson.JsonNull: cs.gson.JsonNull INSTANCE>;

        r0.<cs.gson.internal.bind.JsonTreeWriter: cs.gson.JsonElement product> = $r3;

        return;
    }

    private cs.gson.JsonElement peek()
    {
        java.util.List $r1, $r2;
        cs.gson.JsonElement $r4;
        int $i0;
        java.lang.Object $r3;
        cs.gson.internal.bind.JsonTreeWriter r0;

        r0 := @this: cs.gson.internal.bind.JsonTreeWriter;

        $r1 = r0.<cs.gson.internal.bind.JsonTreeWriter: java.util.List stack>;

        $r2 = r0.<cs.gson.internal.bind.JsonTreeWriter: java.util.List stack>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i0 = $i0 + -1;

        $r3 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        $r4 = (cs.gson.JsonElement) $r3;

        return $r4;
    }

    private void put(cs.gson.JsonElement)
    {
        java.lang.IllegalStateException $r7;
        cs.gson.JsonObject r4;
        cs.gson.JsonArray r6;
        java.util.List $r5;
        cs.gson.JsonElement $r1, $r3;
        java.lang.String $r2;
        cs.gson.internal.bind.JsonTreeWriter r0;
        boolean $z0;

        r0 := @this: cs.gson.internal.bind.JsonTreeWriter;

        $r1 := @parameter0: cs.gson.JsonElement;

        $r2 = r0.<cs.gson.internal.bind.JsonTreeWriter: java.lang.String pendingName>;

        if $r2 == null goto label3;

        $z0 = virtualinvoke $r1.<cs.gson.JsonElement: boolean isJsonNull()>();

        if $z0 == 0 goto label1;

        $z0 = virtualinvoke r0.<cs.gson.internal.bind.JsonTreeWriter: boolean getSerializeNulls()>();

        if $z0 == 0 goto label2;

     label1:
        $r3 = specialinvoke r0.<cs.gson.internal.bind.JsonTreeWriter: cs.gson.JsonElement peek()>();

        r4 = (cs.gson.JsonObject) $r3;

        $r2 = r0.<cs.gson.internal.bind.JsonTreeWriter: java.lang.String pendingName>;

        virtualinvoke r4.<cs.gson.JsonObject: void add(java.lang.String,cs.gson.JsonElement)>($r2, $r1);

     label2:
        r0.<cs.gson.internal.bind.JsonTreeWriter: java.lang.String pendingName> = null;

        return;

     label3:
        $r5 = r0.<cs.gson.internal.bind.JsonTreeWriter: java.util.List stack>;

        $z0 = interfaceinvoke $r5.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label4;

        r0.<cs.gson.internal.bind.JsonTreeWriter: cs.gson.JsonElement product> = $r1;

        return;

     label4:
        $r3 = specialinvoke r0.<cs.gson.internal.bind.JsonTreeWriter: cs.gson.JsonElement peek()>();

        $z0 = $r3 instanceof cs.gson.JsonArray;

        if $z0 == 0 goto label5;

        r6 = (cs.gson.JsonArray) $r3;

        virtualinvoke r6.<cs.gson.JsonArray: void add(cs.gson.JsonElement)>($r1);

        return;

     label5:
        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>()>();

        throw $r7;
    }

    public cs.gson.stream.JsonWriter beginArray() throws java.io.IOException
    {
        cs.gson.JsonArray r1;
        java.util.List $r2;
        cs.gson.internal.bind.JsonTreeWriter r0;

        r0 := @this: cs.gson.internal.bind.JsonTreeWriter;

        r1 = new cs.gson.JsonArray;

        specialinvoke r1.<cs.gson.JsonArray: void <init>()>();

        specialinvoke r0.<cs.gson.internal.bind.JsonTreeWriter: void put(cs.gson.JsonElement)>(r1);

        $r2 = r0.<cs.gson.internal.bind.JsonTreeWriter: java.util.List stack>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return r0;
    }

    public cs.gson.stream.JsonWriter beginObject() throws java.io.IOException
    {
        java.util.List $r2;
        cs.gson.internal.bind.JsonTreeWriter r0;
        cs.gson.JsonObject r1;

        r0 := @this: cs.gson.internal.bind.JsonTreeWriter;

        r1 = new cs.gson.JsonObject;

        specialinvoke r1.<cs.gson.JsonObject: void <init>()>();

        specialinvoke r0.<cs.gson.internal.bind.JsonTreeWriter: void put(cs.gson.JsonElement)>(r1);

        $r2 = r0.<cs.gson.internal.bind.JsonTreeWriter: java.util.List stack>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return r0;
    }

    public void close() throws java.io.IOException
    {
        java.util.List $r1;
        java.io.IOException $r2;
        cs.gson.JsonPrimitive $r3;
        cs.gson.internal.bind.JsonTreeWriter r0;
        boolean $z0;

        r0 := @this: cs.gson.internal.bind.JsonTreeWriter;

        $r1 = r0.<cs.gson.internal.bind.JsonTreeWriter: java.util.List stack>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Incomplete document");

        throw $r2;

     label1:
        $r1 = r0.<cs.gson.internal.bind.JsonTreeWriter: java.util.List stack>;

        $r3 = <cs.gson.internal.bind.JsonTreeWriter: cs.gson.JsonPrimitive SENTINEL_CLOSED>;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r3);

        return;
    }

    public cs.gson.stream.JsonWriter endArray() throws java.io.IOException
    {
        java.lang.IllegalStateException $r5;
        java.util.List $r1, $r4;
        cs.gson.JsonElement $r3;
        int $i0;
        java.lang.String $r2;
        cs.gson.internal.bind.JsonTreeWriter r0;
        boolean $z0;

        r0 := @this: cs.gson.internal.bind.JsonTreeWriter;

        $r1 = r0.<cs.gson.internal.bind.JsonTreeWriter: java.util.List stack>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r2 = r0.<cs.gson.internal.bind.JsonTreeWriter: java.lang.String pendingName>;

        if $r2 == null goto label2;

     label1:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>()>();

        throw $r5;

     label2:
        $r3 = specialinvoke r0.<cs.gson.internal.bind.JsonTreeWriter: cs.gson.JsonElement peek()>();

        $z0 = $r3 instanceof cs.gson.JsonArray;

        if $z0 == 0 goto label3;

        $r1 = r0.<cs.gson.internal.bind.JsonTreeWriter: java.util.List stack>;

        $r4 = r0.<cs.gson.internal.bind.JsonTreeWriter: java.util.List stack>;

        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        $i0 = $i0 + -1;

        interfaceinvoke $r1.<java.util.List: java.lang.Object remove(int)>($i0);

        return r0;

     label3:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>()>();

        throw $r5;
    }

    public cs.gson.stream.JsonWriter endObject() throws java.io.IOException
    {
        java.lang.IllegalStateException $r5;
        java.util.List $r1, $r4;
        cs.gson.JsonElement $r3;
        int $i0;
        java.lang.String $r2;
        cs.gson.internal.bind.JsonTreeWriter r0;
        boolean $z0;

        r0 := @this: cs.gson.internal.bind.JsonTreeWriter;

        $r1 = r0.<cs.gson.internal.bind.JsonTreeWriter: java.util.List stack>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r2 = r0.<cs.gson.internal.bind.JsonTreeWriter: java.lang.String pendingName>;

        if $r2 == null goto label2;

     label1:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>()>();

        throw $r5;

     label2:
        $r3 = specialinvoke r0.<cs.gson.internal.bind.JsonTreeWriter: cs.gson.JsonElement peek()>();

        $z0 = $r3 instanceof cs.gson.JsonObject;

        if $z0 == 0 goto label3;

        $r1 = r0.<cs.gson.internal.bind.JsonTreeWriter: java.util.List stack>;

        $r4 = r0.<cs.gson.internal.bind.JsonTreeWriter: java.util.List stack>;

        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        $i0 = $i0 + -1;

        interfaceinvoke $r1.<java.util.List: java.lang.Object remove(int)>($i0);

        return r0;

     label3:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>()>();

        throw $r5;
    }

    public void flush() throws java.io.IOException
    {
        cs.gson.internal.bind.JsonTreeWriter r0;

        r0 := @this: cs.gson.internal.bind.JsonTreeWriter;

        return;
    }

    public cs.gson.JsonElement get()
    {
        java.lang.IllegalStateException $r2;
        java.util.List $r1;
        cs.gson.JsonElement r5;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        cs.gson.internal.bind.JsonTreeWriter r0;
        boolean $z0;

        r0 := @this: cs.gson.internal.bind.JsonTreeWriter;

        $r1 = r0.<cs.gson.internal.bind.JsonTreeWriter: java.util.List stack>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Expected one JSON element but was ");

        $r1 = r0.<cs.gson.internal.bind.JsonTreeWriter: java.util.List stack>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label1:
        r5 = r0.<cs.gson.internal.bind.JsonTreeWriter: cs.gson.JsonElement product>;

        return r5;
    }

    public cs.gson.stream.JsonWriter name(java.lang.String) throws java.io.IOException
    {
        java.lang.IllegalStateException $r4;
        java.util.List $r2;
        cs.gson.JsonElement $r5;
        java.lang.String $r1, $r3;
        cs.gson.internal.bind.JsonTreeWriter r0;
        boolean $z0;

        r0 := @this: cs.gson.internal.bind.JsonTreeWriter;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<cs.gson.internal.bind.JsonTreeWriter: java.util.List stack>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r3 = r0.<cs.gson.internal.bind.JsonTreeWriter: java.lang.String pendingName>;

        if $r3 == null goto label2;

     label1:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>()>();

        throw $r4;

     label2:
        $r5 = specialinvoke r0.<cs.gson.internal.bind.JsonTreeWriter: cs.gson.JsonElement peek()>();

        $z0 = $r5 instanceof cs.gson.JsonObject;

        if $z0 == 0 goto label3;

        r0.<cs.gson.internal.bind.JsonTreeWriter: java.lang.String pendingName> = $r1;

        return r0;

     label3:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>()>();

        throw $r4;
    }

    public cs.gson.stream.JsonWriter nullValue() throws java.io.IOException
    {
        cs.gson.JsonNull $r1;
        cs.gson.internal.bind.JsonTreeWriter r0;

        r0 := @this: cs.gson.internal.bind.JsonTreeWriter;

        $r1 = <cs.gson.JsonNull: cs.gson.JsonNull INSTANCE>;

        specialinvoke r0.<cs.gson.internal.bind.JsonTreeWriter: void put(cs.gson.JsonElement)>($r1);

        return r0;
    }

    public cs.gson.stream.JsonWriter value(double) throws java.io.IOException
    {
        java.lang.Double $r5;
        java.lang.IllegalArgumentException $r1;
        cs.gson.JsonPrimitive $r4;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        cs.gson.internal.bind.JsonTreeWriter r0;
        double $d0;
        boolean $z0;

        r0 := @this: cs.gson.internal.bind.JsonTreeWriter;

        $d0 := @parameter0: double;

        $z0 = virtualinvoke r0.<cs.gson.internal.bind.JsonTreeWriter: boolean isLenient()>();

        if $z0 != 0 goto label2;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 != 0 goto label1;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d0);

        if $z0 == 0 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("JSON forbids NaN and infinities: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label2:
        $r4 = new cs.gson.JsonPrimitive;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        specialinvoke $r4.<cs.gson.JsonPrimitive: void <init>(java.lang.Number)>($r5);

        specialinvoke r0.<cs.gson.internal.bind.JsonTreeWriter: void put(cs.gson.JsonElement)>($r4);

        return r0;
    }

    public cs.gson.stream.JsonWriter value(long) throws java.io.IOException
    {
        java.lang.Long $r2;
        long $l0;
        cs.gson.JsonPrimitive $r1;
        cs.gson.internal.bind.JsonTreeWriter r0;

        r0 := @this: cs.gson.internal.bind.JsonTreeWriter;

        $l0 := @parameter0: long;

        $r1 = new cs.gson.JsonPrimitive;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        specialinvoke $r1.<cs.gson.JsonPrimitive: void <init>(java.lang.Number)>($r2);

        specialinvoke r0.<cs.gson.internal.bind.JsonTreeWriter: void put(cs.gson.JsonElement)>($r1);

        return r0;
    }

    public cs.gson.stream.JsonWriter value(java.lang.Number) throws java.io.IOException
    {
        java.lang.IllegalArgumentException $r3;
        cs.gson.JsonPrimitive $r6;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        java.lang.Number $r0;
        cs.gson.internal.bind.JsonTreeWriter r1;
        cs.gson.stream.JsonWriter $r2;
        boolean $z0;
        double $d0;

        r1 := @this: cs.gson.internal.bind.JsonTreeWriter;

        $r0 := @parameter0: java.lang.Number;

        if $r0 != null goto label1;

        $r2 = virtualinvoke r1.<cs.gson.internal.bind.JsonTreeWriter: cs.gson.stream.JsonWriter nullValue()>();

        return $r2;

     label1:
        $z0 = virtualinvoke r1.<cs.gson.internal.bind.JsonTreeWriter: boolean isLenient()>();

        if $z0 != 0 goto label3;

        $d0 = virtualinvoke $r0.<java.lang.Number: double doubleValue()>();

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 != 0 goto label2;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d0);

        if $z0 == 0 goto label3;

     label2:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("JSON forbids NaN and infinities: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label3:
        $r6 = new cs.gson.JsonPrimitive;

        specialinvoke $r6.<cs.gson.JsonPrimitive: void <init>(java.lang.Number)>($r0);

        specialinvoke r1.<cs.gson.internal.bind.JsonTreeWriter: void put(cs.gson.JsonElement)>($r6);

        return r1;
    }

    public cs.gson.stream.JsonWriter value(java.lang.String) throws java.io.IOException
    {
        java.lang.String $r0;
        cs.gson.JsonPrimitive $r1;
        cs.gson.stream.JsonWriter $r2;
        cs.gson.internal.bind.JsonTreeWriter r3;

        r3 := @this: cs.gson.internal.bind.JsonTreeWriter;

        $r0 := @parameter0: java.lang.String;

        if $r0 != null goto label1;

        $r2 = virtualinvoke r3.<cs.gson.internal.bind.JsonTreeWriter: cs.gson.stream.JsonWriter nullValue()>();

        return $r2;

     label1:
        $r1 = new cs.gson.JsonPrimitive;

        specialinvoke $r1.<cs.gson.JsonPrimitive: void <init>(java.lang.String)>($r0);

        specialinvoke r3.<cs.gson.internal.bind.JsonTreeWriter: void put(cs.gson.JsonElement)>($r1);

        return r3;
    }

    public cs.gson.stream.JsonWriter value(boolean) throws java.io.IOException
    {
        java.lang.Boolean $r2;
        cs.gson.JsonPrimitive $r1;
        cs.gson.internal.bind.JsonTreeWriter r0;
        boolean $z0;

        r0 := @this: cs.gson.internal.bind.JsonTreeWriter;

        $z0 := @parameter0: boolean;

        $r1 = new cs.gson.JsonPrimitive;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        specialinvoke $r1.<cs.gson.JsonPrimitive: void <init>(java.lang.Boolean)>($r2);

        specialinvoke r0.<cs.gson.internal.bind.JsonTreeWriter: void put(cs.gson.JsonElement)>($r1);

        return r0;
    }
}
