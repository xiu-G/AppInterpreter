public class org.kxml2.io.KXmlParser extends java.lang.Object implements org.xmlpull.v1.XmlPullParser
{
    private static final java.lang.String ILLEGAL_TYPE;
    private static final int LEGACY;
    private static final java.lang.String UNEXPECTED_EOF;
    private static final int XML_DECL;
    private int attributeCount;
    private java.lang.String[] attributes;
    private int column;
    private boolean degenerated;
    private int depth;
    private java.lang.String[] elementStack;
    private java.lang.String encoding;
    private java.util.Hashtable entityMap;
    private java.lang.String error;
    private boolean isWhitespace;
    private int line;
    private java.lang.Object location;
    private java.lang.String name;
    private java.lang.String namespace;
    private int[] nspCounts;
    private java.lang.String[] nspStack;
    private int[] peek;
    private int peekCount;
    private java.lang.String prefix;
    private boolean processNsp;
    private java.io.Reader reader;
    private boolean relaxed;
    private char[] srcBuf;
    private int srcCount;
    private int srcPos;
    private java.lang.Boolean standalone;
    private boolean token;
    private char[] txtBuf;
    private int txtPos;
    private int type;
    private boolean unresolved;
    private java.lang.String version;
    private boolean wasCR;

    public void <init>()
    {
        java.lang.Runtime $r4;
        java.lang.String[] $r1;
        long $l1;
        org.kxml2.io.KXmlParser r0;
        short $s0;
        byte $b2;
        int[] $r2;
        int $i3;
        char[] $r3;

        r0 := @this: org.kxml2.io.KXmlParser;

        $s0 = 128;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (java.lang.String)[16];

        r0.<org.kxml2.io.KXmlParser: java.lang.String[] elementStack> = $r1;

        $r1 = newarray (java.lang.String)[8];

        r0.<org.kxml2.io.KXmlParser: java.lang.String[] nspStack> = $r1;

        $r2 = newarray (int)[4];

        r0.<org.kxml2.io.KXmlParser: int[] nspCounts> = $r2;

        $r3 = newarray (char)[128];

        r0.<org.kxml2.io.KXmlParser: char[] txtBuf> = $r3;

        $r1 = newarray (java.lang.String)[16];

        r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes> = $r1;

        $r2 = newarray (int)[2];

        r0.<org.kxml2.io.KXmlParser: int[] peek> = $r2;

        $r4 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $l1 = virtualinvoke $r4.<java.lang.Runtime: long freeMemory()>();

        $b2 = $l1 cmp 1048576L;

        $i3 = (int) $b2;

        if $i3 < 0 goto label1;

        $s0 = 8192;

     label1:
        $r3 = newarray (char)[$s0];

        r0.<org.kxml2.io.KXmlParser: char[] srcBuf> = $r3;

        return;
    }

    private final boolean adjustNsp() throws org.xmlpull.v1.XmlPullParserException
    {
        java.lang.String[] $r1, $r5;
        org.kxml2.io.KXmlParser r0;
        int[] $r4;
        int i0, i1, $i2, $i3;
        java.lang.String r2, $r3, $r7;
        boolean z0, $z1;
        java.lang.RuntimeException $r9;
        java.lang.StringBuilder $r6, $r8;

        r0 := @this: org.kxml2.io.KXmlParser;

        z0 = 0;

        i1 = 0;

     label01:
        i0 = r0.<org.kxml2.io.KXmlParser: int attributeCount>;

        i0 = i0 << 2;

        if i1 >= i0 goto label07;

        $r1 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        i0 = i1 + 2;

        r2 = $r1[i0];

        i0 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(58);

        if i0 == -1 goto label04;

        $r3 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        i0 = i0 + 1;

        r2 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>(i0);

     label02:
        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("xmlns");

        if $z1 != 0 goto label05;

        z0 = 1;

     label03:
        i1 = i1 + 4;

        goto label01;

     label04:
        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("xmlns");

        if $z1 == 0 goto label03;

        $r3 = r2;

        r2 = null;

        goto label02;

     label05:
        $r4 = r0.<org.kxml2.io.KXmlParser: int[] nspCounts>;

        i0 = r0.<org.kxml2.io.KXmlParser: int depth>;

        $i2 = $r4[i0];

        $i3 = $i2 + 1;

        $r4[i0] = $i3;

        i0 = $i2 << 1;

        $r1 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] nspStack>;

        $i2 = i0 + 2;

        $r1 = specialinvoke r0.<org.kxml2.io.KXmlParser: java.lang.String[] ensureCapacity(java.lang.String[],int)>($r1, $i2);

        r0.<org.kxml2.io.KXmlParser: java.lang.String[] nspStack> = $r1;

        $r1 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] nspStack>;

        $r1[i0] = r2;

        $r1 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] nspStack>;

        i0 = i0 + 1;

        $r5 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $i2 = i1 + 3;

        $r3 = $r5[$i2];

        $r1[i0] = $r3;

        if r2 == null goto label06;

        $r1 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        i0 = i1 + 3;

        $r3 = $r1[i0];

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z1 == 0 goto label06;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void error(java.lang.String)>("illegal empty namespace");

     label06:
        $r1 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        i0 = i1 + 4;

        $r5 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $i2 = r0.<org.kxml2.io.KXmlParser: int attributeCount>;

        $i2 = $i2 + -1;

        r0.<org.kxml2.io.KXmlParser: int attributeCount> = $i2;

        $i2 = $i2 << 2;

        $i2 = $i2 - i1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, i0, $r5, i1, $i2);

        i1 = i1 + -4;

        goto label03;

     label07:
        if z0 == 0 goto label12;

        i1 = r0.<org.kxml2.io.KXmlParser: int attributeCount>;

        i1 = i1 << 2;

        i1 = i1 + -4;

     label08:
        if i1 < 0 goto label12;

        $r1 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        i0 = i1 + 2;

        r2 = $r1[i0];

        i0 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(58);

        if i0 != 0 goto label09;

        $z1 = r0.<org.kxml2.io.KXmlParser: boolean relaxed>;

        if $z1 != 0 goto label09;

        $r9 = new java.lang.RuntimeException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("illegal attribute name: ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r3 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String)>($r3);

        throw $r9;

     label09:
        if i0 == -1 goto label11;

        $r3 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        i0 = i0 + 1;

        r2 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>(i0);

        $r7 = virtualinvoke r0.<org.kxml2.io.KXmlParser: java.lang.String getNamespace(java.lang.String)>($r3);

        if $r7 != null goto label10;

        $z1 = r0.<org.kxml2.io.KXmlParser: boolean relaxed>;

        if $z1 != 0 goto label10;

        $r9 = new java.lang.RuntimeException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Undefined Prefix: ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r3 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String)>($r3);

        throw $r9;

     label10:
        $r1 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $r1[i1] = $r7;

        $r1 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        i0 = i1 + 1;

        $r1[i0] = $r3;

        $r1 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        i0 = i1 + 2;

        $r1[i0] = r2;

     label11:
        i1 = i1 + -4;

        goto label08;

     label12:
        $r3 = r0.<org.kxml2.io.KXmlParser: java.lang.String name>;

        i1 = virtualinvoke $r3.<java.lang.String: int indexOf(int)>(58);

        if i1 != 0 goto label13;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("illegal tag name: ");

        $r3 = r0.<org.kxml2.io.KXmlParser: java.lang.String name>;

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<org.kxml2.io.KXmlParser: void error(java.lang.String)>($r3);

     label13:
        if i1 == -1 goto label14;

        $r3 = r0.<org.kxml2.io.KXmlParser: java.lang.String name>;

        $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>(0, i1);

        r0.<org.kxml2.io.KXmlParser: java.lang.String prefix> = $r3;

        $r3 = r0.<org.kxml2.io.KXmlParser: java.lang.String name>;

        i1 = i1 + 1;

        $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int)>(i1);

        r0.<org.kxml2.io.KXmlParser: java.lang.String name> = $r3;

     label14:
        $r3 = r0.<org.kxml2.io.KXmlParser: java.lang.String prefix>;

        $r3 = virtualinvoke r0.<org.kxml2.io.KXmlParser: java.lang.String getNamespace(java.lang.String)>($r3);

        r0.<org.kxml2.io.KXmlParser: java.lang.String namespace> = $r3;

        $r3 = r0.<org.kxml2.io.KXmlParser: java.lang.String namespace>;

        if $r3 != null goto label16;

        $r3 = r0.<org.kxml2.io.KXmlParser: java.lang.String prefix>;

        if $r3 == null goto label15;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("undefined prefix: ");

        $r3 = r0.<org.kxml2.io.KXmlParser: java.lang.String prefix>;

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<org.kxml2.io.KXmlParser: void error(java.lang.String)>($r3);

     label15:
        r0.<org.kxml2.io.KXmlParser: java.lang.String namespace> = "";

     label16:
        return z0;
    }

    private final java.lang.String[] ensureCapacity(java.lang.String[], int)
    {
        org.kxml2.io.KXmlParser r0;
        int $i0, $i1;
        java.lang.String[] r1, r2;

        r0 := @this: org.kxml2.io.KXmlParser;

        r2 := @parameter0: java.lang.String[];

        $i0 := @parameter1: int;

        $i1 = lengthof r2;

        if $i1 < $i0 goto label1;

        return r2;

     label1:
        $i0 = $i0 + 16;

        r1 = newarray (java.lang.String)[$i0];

        $i0 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r1, 0, $i0);

        return r1;
    }

    private final void error(java.lang.String) throws org.xmlpull.v1.XmlPullParserException
    {
        org.kxml2.io.KXmlParser r0;
        java.lang.StringBuilder $r3;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: org.kxml2.io.KXmlParser;

        $r1 := @parameter0: java.lang.String;

        $z0 = r0.<org.kxml2.io.KXmlParser: boolean relaxed>;

        if $z0 == 0 goto label1;

        $r2 = r0.<org.kxml2.io.KXmlParser: java.lang.String error>;

        if $r2 != null goto label2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ERR: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<org.kxml2.io.KXmlParser: java.lang.String error> = $r1;

        return;

     label1:
        specialinvoke r0.<org.kxml2.io.KXmlParser: void exception(java.lang.String)>($r1);

     label2:
        return;
    }

    private final void exception(java.lang.String) throws org.xmlpull.v1.XmlPullParserException
    {
        org.xmlpull.v1.XmlPullParserException $r1;
        org.kxml2.io.KXmlParser r0;
        int $i0;
        java.lang.StringBuilder $r3;
        java.lang.String r2;

        r0 := @this: org.kxml2.io.KXmlParser;

        r2 := @parameter0: java.lang.String;

        $r1 = new org.xmlpull.v1.XmlPullParserException;

        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i0 >= 100 goto label2;

     label1:
        specialinvoke $r1.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>(r2, r0, null);

        throw $r1;

     label2:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        r2 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, 100);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label1;
    }

    private final java.lang.String get(int)
    {
        org.kxml2.io.KXmlParser r0;
        int $i0, $i1;
        char[] $r2;
        java.lang.String $r1;

        r0 := @this: org.kxml2.io.KXmlParser;

        $i0 := @parameter0: int;

        $r1 = new java.lang.String;

        $r2 = r0.<org.kxml2.io.KXmlParser: char[] txtBuf>;

        $i1 = r0.<org.kxml2.io.KXmlParser: int txtPos>;

        $i1 = $i1 - $i0;

        specialinvoke $r1.<java.lang.String: void <init>(char[],int,int)>($r2, $i0, $i1);

        return $r1;
    }

    private final boolean isProp(java.lang.String, boolean, java.lang.String)
    {
        org.kxml2.io.KXmlParser r0;
        java.lang.String $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: org.kxml2.io.KXmlParser;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $r2 := @parameter2: java.lang.String;

        $z1 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("http://xmlpull.org/v1/doc/");

        if $z1 != 0 goto label1;

        return 0;

     label1:
        if $z0 == 0 goto label2;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>(42);

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        return $z0;

     label2:
        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>(40);

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        return $z0;
    }

    private final void nextImpl() throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        char $c2;
        java.io.Reader $r1;
        org.kxml2.io.KXmlParser r0;
        int $i0, $i1;
        java.lang.String $r2;
        boolean $z0, $z1;

        r0 := @this: org.kxml2.io.KXmlParser;

        $z0 = 0;

        $r1 = r0.<org.kxml2.io.KXmlParser: java.io.Reader reader>;

        if $r1 != null goto label01;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void exception(java.lang.String)>("No Input specified");

     label01:
        $i0 = r0.<org.kxml2.io.KXmlParser: int type>;

        if $i0 != 3 goto label02;

        $i0 = r0.<org.kxml2.io.KXmlParser: int depth>;

        $i0 = $i0 + -1;

        r0.<org.kxml2.io.KXmlParser: int depth> = $i0;

     label02:
        r0.<org.kxml2.io.KXmlParser: int attributeCount> = -1;

        $z1 = r0.<org.kxml2.io.KXmlParser: boolean degenerated>;

        if $z1 == 0 goto label04;

        r0.<org.kxml2.io.KXmlParser: boolean degenerated> = 0;

        r0.<org.kxml2.io.KXmlParser: int type> = 3;

     label03:
        return;

     label04:
        $r2 = r0.<org.kxml2.io.KXmlParser: java.lang.String error>;

        if $r2 == null goto label07;

        $i0 = 0;

     label05:
        $r2 = r0.<org.kxml2.io.KXmlParser: java.lang.String error>;

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 >= $i1 goto label06;

        $r2 = r0.<org.kxml2.io.KXmlParser: java.lang.String error>;

        $c2 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i0);

        $i1 = (int) $c2;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void push(int)>($i1);

        $i0 = $i0 + 1;

        goto label05;

     label06:
        r0.<org.kxml2.io.KXmlParser: java.lang.String error> = null;

        r0.<org.kxml2.io.KXmlParser: int type> = 9;

        return;

     label07:
        r0.<org.kxml2.io.KXmlParser: java.lang.String prefix> = null;

        r0.<org.kxml2.io.KXmlParser: java.lang.String name> = null;

        r0.<org.kxml2.io.KXmlParser: java.lang.String namespace> = null;

        $i0 = specialinvoke r0.<org.kxml2.io.KXmlParser: int peekType()>();

        r0.<org.kxml2.io.KXmlParser: int type> = $i0;

        $i0 = r0.<org.kxml2.io.KXmlParser: int type>;

        lookupswitch($i0)
        {
            case 1: goto label03;
            case 2: goto label10;
            case 3: goto label11;
            case 4: goto label12;
            case 5: goto label08;
            case 6: goto label09;
            default: goto label08;
        };

     label08:
        $z1 = r0.<org.kxml2.io.KXmlParser: boolean token>;

        $i0 = specialinvoke r0.<org.kxml2.io.KXmlParser: int parseLegacy(boolean)>($z1);

        r0.<org.kxml2.io.KXmlParser: int type> = $i0;

        $i0 = r0.<org.kxml2.io.KXmlParser: int type>;

        if $i0 == 998 goto label02;

        return;

     label09:
        specialinvoke r0.<org.kxml2.io.KXmlParser: void pushEntity()>();

        return;

     label10:
        specialinvoke r0.<org.kxml2.io.KXmlParser: void parseStartTag(boolean)>(0);

        return;

     label11:
        specialinvoke r0.<org.kxml2.io.KXmlParser: void parseEndTag()>();

        return;

     label12:
        $z1 = r0.<org.kxml2.io.KXmlParser: boolean token>;

        if $z1 != 0 goto label13;

        $z0 = 1;

     label13:
        specialinvoke r0.<org.kxml2.io.KXmlParser: void pushText(int,boolean)>(60, $z0);

        $i0 = r0.<org.kxml2.io.KXmlParser: int depth>;

        if $i0 != 0 goto label14;

        $z0 = r0.<org.kxml2.io.KXmlParser: boolean isWhitespace>;

        if $z0 == 0 goto label14;

        r0.<org.kxml2.io.KXmlParser: int type> = 7;

     label14:
        return;
    }

    private final void parseDoctype(boolean) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.kxml2.io.KXmlParser r0;
        int $i0, i1;
        boolean $z0, z1;

        r0 := @this: org.kxml2.io.KXmlParser;

        $z0 := @parameter0: boolean;

        i1 = 1;

        z1 = 0;

     label1:
        $i0 = specialinvoke r0.<org.kxml2.io.KXmlParser: int read()>();

        lookupswitch($i0)
        {
            case -1: goto label3;
            case 39: goto label4;
            case 60: goto label6;
            case 62: goto label7;
            default: goto label2;
        };

     label2:
        if $z0 == 0 goto label1;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void push(int)>($i0);

        goto label1;

     label3:
        specialinvoke r0.<org.kxml2.io.KXmlParser: void error(java.lang.String)>("Unexpected EOF");

        return;

     label4:
        if z1 != 0 goto label5;

        z1 = 1;

        goto label2;

     label5:
        z1 = 0;

        goto label2;

     label6:
        if z1 != 0 goto label2;

        i1 = i1 + 1;

        goto label2;

     label7:
        if z1 != 0 goto label2;

        i1 = i1 + -1;

        if i1 != 0 goto label2;

        return;
    }

    private final void parseEndTag() throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        java.lang.String[] $r2;
        org.kxml2.io.KXmlParser r0;
        int i0, $i1;
        java.lang.StringBuilder $r4, $r5;
        java.lang.String $r1, $r3;
        boolean $z0;

        r0 := @this: org.kxml2.io.KXmlParser;

        specialinvoke r0.<org.kxml2.io.KXmlParser: int read()>();

        specialinvoke r0.<org.kxml2.io.KXmlParser: int read()>();

        $r1 = specialinvoke r0.<org.kxml2.io.KXmlParser: java.lang.String readName()>();

        r0.<org.kxml2.io.KXmlParser: java.lang.String name> = $r1;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void skip()>();

        specialinvoke r0.<org.kxml2.io.KXmlParser: void read(char)>(62);

        i0 = r0.<org.kxml2.io.KXmlParser: int depth>;

        i0 = i0 + -1;

        i0 = i0 << 2;

        $i1 = r0.<org.kxml2.io.KXmlParser: int depth>;

        if $i1 != 0 goto label1;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void error(java.lang.String)>("element stack empty");

        r0.<org.kxml2.io.KXmlParser: int type> = 9;

        return;

     label1:
        $z0 = r0.<org.kxml2.io.KXmlParser: boolean relaxed>;

        if $z0 != 0 goto label3;

        $r1 = r0.<org.kxml2.io.KXmlParser: java.lang.String name>;

        $r2 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] elementStack>;

        $i1 = i0 + 3;

        $r3 = $r2[$i1];

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label2;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected: /");

        $r2 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] elementStack>;

        $i1 = i0 + 3;

        $r1 = $r2[$i1];

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" read: ");

        $r1 = r0.<org.kxml2.io.KXmlParser: java.lang.String name>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<org.kxml2.io.KXmlParser: void error(java.lang.String)>($r1);

     label2:
        $r2 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] elementStack>;

        $r1 = $r2[i0];

        r0.<org.kxml2.io.KXmlParser: java.lang.String namespace> = $r1;

        $r2 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] elementStack>;

        $i1 = i0 + 1;

        $r1 = $r2[$i1];

        r0.<org.kxml2.io.KXmlParser: java.lang.String prefix> = $r1;

        $r2 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] elementStack>;

        i0 = i0 + 2;

        $r1 = $r2[i0];

        r0.<org.kxml2.io.KXmlParser: java.lang.String name> = $r1;

     label3:
        return;
    }

    private final int parseLegacy(boolean) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        java.lang.String[] $r2;
        char $c5;
        org.kxml2.io.KXmlParser r0;
        byte b2, b3;
        int i0, $i1, $i4;
        java.lang.Boolean $r5;
        java.lang.StringBuilder $r4, $r6;
        java.lang.String r1, $r3;
        boolean $z0, $z1;

        r0 := @this: org.kxml2.io.KXmlParser;

        $z0 := @parameter0: boolean;

        r1 = "";

        i0 = 0;

        specialinvoke r0.<org.kxml2.io.KXmlParser: int read()>();

        $i1 = specialinvoke r0.<org.kxml2.io.KXmlParser: int read()>();

        if $i1 != 63 goto label18;

        $i1 = specialinvoke r0.<org.kxml2.io.KXmlParser: int peek(int)>(0);

        if $i1 == 120 goto label01;

        $i1 = specialinvoke r0.<org.kxml2.io.KXmlParser: int peek(int)>(0);

        if $i1 != 88 goto label15;

     label01:
        $i1 = specialinvoke r0.<org.kxml2.io.KXmlParser: int peek(int)>(1);

        if $i1 == 109 goto label02;

        $i1 = specialinvoke r0.<org.kxml2.io.KXmlParser: int peek(int)>(1);

        if $i1 != 77 goto label15;

     label02:
        if $z0 == 0 goto label03;

        $i1 = specialinvoke r0.<org.kxml2.io.KXmlParser: int peek(int)>(0);

        specialinvoke r0.<org.kxml2.io.KXmlParser: void push(int)>($i1);

        $i1 = specialinvoke r0.<org.kxml2.io.KXmlParser: int peek(int)>(1);

        specialinvoke r0.<org.kxml2.io.KXmlParser: void push(int)>($i1);

     label03:
        specialinvoke r0.<org.kxml2.io.KXmlParser: int read()>();

        specialinvoke r0.<org.kxml2.io.KXmlParser: int read()>();

        $i1 = specialinvoke r0.<org.kxml2.io.KXmlParser: int peek(int)>(0);

        if $i1 == 108 goto label04;

        $i1 = specialinvoke r0.<org.kxml2.io.KXmlParser: int peek(int)>(0);

        if $i1 != 76 goto label15;

     label04:
        $i1 = specialinvoke r0.<org.kxml2.io.KXmlParser: int peek(int)>(1);

        if $i1 > 32 goto label15;

        i0 = r0.<org.kxml2.io.KXmlParser: int line>;

        if i0 != 1 goto label05;

        i0 = r0.<org.kxml2.io.KXmlParser: int column>;

        if i0 <= 4 goto label06;

     label05:
        specialinvoke r0.<org.kxml2.io.KXmlParser: void error(java.lang.String)>("PI must not start with xml");

     label06:
        specialinvoke r0.<org.kxml2.io.KXmlParser: void parseStartTag(boolean)>(1);

        i0 = r0.<org.kxml2.io.KXmlParser: int attributeCount>;

        if i0 < 1 goto label07;

        r1 = "version";

        $r2 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $r3 = $r2[2];

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label08;

     label07:
        specialinvoke r0.<org.kxml2.io.KXmlParser: void error(java.lang.String)>("version expected");

     label08:
        $r2 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        r1 = $r2[3];

        r0.<org.kxml2.io.KXmlParser: java.lang.String version> = r1;

        i0 = 1;

        $i1 = r0.<org.kxml2.io.KXmlParser: int attributeCount>;

        if 1 >= $i1 goto label09;

        r1 = "encoding";

        $r2 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $r3 = $r2[6];

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label09;

        $r2 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        r1 = $r2[7];

        r0.<org.kxml2.io.KXmlParser: java.lang.String encoding> = r1;

        i0 = 2;

     label09:
        $i1 = r0.<org.kxml2.io.KXmlParser: int attributeCount>;

        if i0 >= $i1 goto label11;

        r1 = "standalone";

        $r2 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $i1 = i0 * 4;

        $i1 = $i1 + 2;

        $r3 = $r2[$i1];

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label11;

        $r2 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $i1 = i0 * 4;

        $i1 = $i1 + 3;

        r1 = $r2[$i1];

        $r3 = "yes";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label13;

        $r5 = new java.lang.Boolean;

        specialinvoke $r5.<java.lang.Boolean: void <init>(boolean)>(1);

        r0.<org.kxml2.io.KXmlParser: java.lang.Boolean standalone> = $r5;

     label10:
        i0 = i0 + 1;

     label11:
        $i1 = r0.<org.kxml2.io.KXmlParser: int attributeCount>;

        if i0 == $i1 goto label12;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void error(java.lang.String)>("illegal xmldecl");

     label12:
        r0.<org.kxml2.io.KXmlParser: boolean isWhitespace> = 1;

        r0.<org.kxml2.io.KXmlParser: int txtPos> = 0;

        return 998;

     label13:
        $r3 = "no";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label14;

        $r5 = new java.lang.Boolean;

        specialinvoke $r5.<java.lang.Boolean: void <init>(boolean)>(0);

        r0.<org.kxml2.io.KXmlParser: java.lang.Boolean standalone> = $r5;

        goto label10;

     label14:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("illegal standalone value: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<org.kxml2.io.KXmlParser: void error(java.lang.String)>(r1);

        goto label10;

     label15:
        b2 = 63;

        b3 = 8;

     label16:
        $i1 = 0;

     label17:
        $i4 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i1 >= $i4 goto label22;

        $c5 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i1);

        specialinvoke r0.<org.kxml2.io.KXmlParser: void read(char)>($c5);

        $i1 = $i1 + 1;

        goto label17;

     label18:
        if $i1 != 33 goto label21;

        $i1 = specialinvoke r0.<org.kxml2.io.KXmlParser: int peek(int)>(0);

        if $i1 != 45 goto label19;

        b3 = 9;

        r1 = "--";

        b2 = 45;

        goto label16;

     label19:
        $i1 = specialinvoke r0.<org.kxml2.io.KXmlParser: int peek(int)>(0);

        if $i1 != 91 goto label20;

        b3 = 5;

        r1 = "[CDATA[";

        b2 = 93;

        $z0 = 1;

        goto label16;

     label20:
        b3 = 10;

        r1 = "DOCTYPE";

        b2 = -1;

        goto label16;

     label21:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("illegal: <");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<org.kxml2.io.KXmlParser: void error(java.lang.String)>(r1);

        return 9;

     label22:
        if b3 != 10 goto label24;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void parseDoctype(boolean)>($z0);

        return b3;

     label23:
        i0 = $i1;

     label24:
        $i1 = specialinvoke r0.<org.kxml2.io.KXmlParser: int read()>();

        if $i1 != -1 goto label25;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void error(java.lang.String)>("Unexpected EOF");

        return 9;

     label25:
        if $z0 == 0 goto label26;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void push(int)>($i1);

     label26:
        if b2 == 63 goto label27;

        if $i1 != b2 goto label23;

     label27:
        $i4 = specialinvoke r0.<org.kxml2.io.KXmlParser: int peek(int)>(0);

        if $i4 != b2 goto label23;

        $i4 = specialinvoke r0.<org.kxml2.io.KXmlParser: int peek(int)>(1);

        if $i4 != 62 goto label23;

        if b2 != 45 goto label28;

        if i0 != 45 goto label28;

        $z1 = r0.<org.kxml2.io.KXmlParser: boolean relaxed>;

        if $z1 != 0 goto label28;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void error(java.lang.String)>("illegal comment delimiter: --->");

     label28:
        specialinvoke r0.<org.kxml2.io.KXmlParser: int read()>();

        specialinvoke r0.<org.kxml2.io.KXmlParser: int read()>();

        if $z0 == 0 goto label29;

        if b2 == 63 goto label29;

        i0 = r0.<org.kxml2.io.KXmlParser: int txtPos>;

        i0 = i0 + -1;

        r0.<org.kxml2.io.KXmlParser: int txtPos> = i0;

     label29:
        return b3;
    }

    private final void parseStartTag(boolean) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        java.lang.String[] $r3;
        org.kxml2.io.KXmlParser r0;
        int[] r1, $r4, $r5;
        int i0, i1, $i2;
        java.lang.StringBuilder $r6, $r8;
        java.lang.String $r2, $r7;
        boolean $z0, $z1;

        r0 := @this: org.kxml2.io.KXmlParser;

        $z0 := @parameter0: boolean;

        if $z0 != 0 goto label01;

        specialinvoke r0.<org.kxml2.io.KXmlParser: int read()>();

     label01:
        $r2 = specialinvoke r0.<org.kxml2.io.KXmlParser: java.lang.String readName()>();

        r0.<org.kxml2.io.KXmlParser: java.lang.String name> = $r2;

        r0.<org.kxml2.io.KXmlParser: int attributeCount> = 0;

     label02:
        specialinvoke r0.<org.kxml2.io.KXmlParser: void skip()>();

        i1 = specialinvoke r0.<org.kxml2.io.KXmlParser: int peek(int)>(0);

        if $z0 == 0 goto label03;

        if i1 != 63 goto label08;

        specialinvoke r0.<org.kxml2.io.KXmlParser: int read()>();

        specialinvoke r0.<org.kxml2.io.KXmlParser: void read(char)>(62);

        return;

     label03:
        if i1 != 47 goto label07;

        r0.<org.kxml2.io.KXmlParser: boolean degenerated> = 1;

        specialinvoke r0.<org.kxml2.io.KXmlParser: int read()>();

        specialinvoke r0.<org.kxml2.io.KXmlParser: void skip()>();

        specialinvoke r0.<org.kxml2.io.KXmlParser: void read(char)>(62);

     label04:
        i1 = r0.<org.kxml2.io.KXmlParser: int depth>;

        $i2 = i1 + 1;

        r0.<org.kxml2.io.KXmlParser: int depth> = $i2;

        i1 = i1 << 2;

        $r3 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] elementStack>;

        $i2 = i1 + 4;

        $r3 = specialinvoke r0.<org.kxml2.io.KXmlParser: java.lang.String[] ensureCapacity(java.lang.String[],int)>($r3, $i2);

        r0.<org.kxml2.io.KXmlParser: java.lang.String[] elementStack> = $r3;

        $r3 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] elementStack>;

        $i2 = i1 + 3;

        $r2 = r0.<org.kxml2.io.KXmlParser: java.lang.String name>;

        $r3[$i2] = $r2;

        $i2 = r0.<org.kxml2.io.KXmlParser: int depth>;

        r1 = r0.<org.kxml2.io.KXmlParser: int[] nspCounts>;

        i0 = lengthof r1;

        if $i2 < i0 goto label05;

        $i2 = r0.<org.kxml2.io.KXmlParser: int depth>;

        $i2 = $i2 + 4;

        r1 = newarray (int)[$i2];

        $r4 = r0.<org.kxml2.io.KXmlParser: int[] nspCounts>;

        $r5 = r0.<org.kxml2.io.KXmlParser: int[] nspCounts>;

        $i2 = lengthof $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r1, 0, $i2);

        r0.<org.kxml2.io.KXmlParser: int[] nspCounts> = r1;

     label05:
        r1 = r0.<org.kxml2.io.KXmlParser: int[] nspCounts>;

        $i2 = r0.<org.kxml2.io.KXmlParser: int depth>;

        $r4 = r0.<org.kxml2.io.KXmlParser: int[] nspCounts>;

        i0 = r0.<org.kxml2.io.KXmlParser: int depth>;

        i0 = i0 + -1;

        i0 = $r4[i0];

        r1[$i2] = i0;

        $z0 = r0.<org.kxml2.io.KXmlParser: boolean processNsp>;

        if $z0 == 0 goto label16;

        specialinvoke r0.<org.kxml2.io.KXmlParser: boolean adjustNsp()>();

     label06:
        $r3 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] elementStack>;

        $r2 = r0.<org.kxml2.io.KXmlParser: java.lang.String namespace>;

        $r3[i1] = $r2;

        $r3 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] elementStack>;

        $i2 = i1 + 1;

        $r2 = r0.<org.kxml2.io.KXmlParser: java.lang.String prefix>;

        $r3[$i2] = $r2;

        $r3 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] elementStack>;

        i1 = i1 + 2;

        $r2 = r0.<org.kxml2.io.KXmlParser: java.lang.String name>;

        $r3[i1] = $r2;

        return;

     label07:
        if i1 != 62 goto label08;

        if $z0 != 0 goto label08;

        specialinvoke r0.<org.kxml2.io.KXmlParser: int read()>();

        goto label04;

     label08:
        if i1 != -1 goto label09;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void error(java.lang.String)>("Unexpected EOF");

        return;

     label09:
        $r2 = specialinvoke r0.<org.kxml2.io.KXmlParser: java.lang.String readName()>();

        i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        if i1 != 0 goto label10;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void error(java.lang.String)>("attr name expected");

        goto label04;

     label10:
        i1 = r0.<org.kxml2.io.KXmlParser: int attributeCount>;

        $i2 = i1 + 1;

        r0.<org.kxml2.io.KXmlParser: int attributeCount> = $i2;

        i1 = i1 << 2;

        $r3 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $i2 = i1 + 4;

        $r3 = specialinvoke r0.<org.kxml2.io.KXmlParser: java.lang.String[] ensureCapacity(java.lang.String[],int)>($r3, $i2);

        r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes> = $r3;

        $r3 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $i2 = i1 + 1;

        $r3[i1] = "";

        $r3 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        i0 = $i2 + 1;

        $r3[$i2] = null;

        $r3 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        i1 = i0 + 1;

        $r3[i0] = $r2;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void skip()>();

        $i2 = specialinvoke r0.<org.kxml2.io.KXmlParser: int peek(int)>(0);

        if $i2 == 61 goto label12;

        $z1 = r0.<org.kxml2.io.KXmlParser: boolean relaxed>;

        if $z1 != 0 goto label11;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attr.value missing f. ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<org.kxml2.io.KXmlParser: void error(java.lang.String)>($r7);

     label11:
        $r3 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $r3[i1] = $r2;

        goto label02;

     label12:
        specialinvoke r0.<org.kxml2.io.KXmlParser: void read(char)>(61);

        specialinvoke r0.<org.kxml2.io.KXmlParser: void skip()>();

        i0 = specialinvoke r0.<org.kxml2.io.KXmlParser: int peek(int)>(0);

        $i2 = i0;

        if i0 == 39 goto label15;

        if i0 == 34 goto label15;

        $z1 = r0.<org.kxml2.io.KXmlParser: boolean relaxed>;

        if $z1 != 0 goto label13;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void error(java.lang.String)>("attr value delimiter missing!");

     label13:
        $i2 = 32;

     label14:
        i0 = r0.<org.kxml2.io.KXmlParser: int txtPos>;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void pushText(int,boolean)>($i2, 1);

        $r3 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $r2 = specialinvoke r0.<org.kxml2.io.KXmlParser: java.lang.String get(int)>(i0);

        $r3[i1] = $r2;

        r0.<org.kxml2.io.KXmlParser: int txtPos> = i0;

        if $i2 == 32 goto label02;

        specialinvoke r0.<org.kxml2.io.KXmlParser: int read()>();

        goto label02;

     label15:
        specialinvoke r0.<org.kxml2.io.KXmlParser: int read()>();

        goto label14;

     label16:
        r0.<org.kxml2.io.KXmlParser: java.lang.String namespace> = "";

        goto label06;
    }

    private final int peek(int) throws java.io.IOException
    {
        java.io.Reader $r2;
        org.kxml2.io.KXmlParser r0;
        int[] $r3;
        int $i0, $i1, $i2, $i3;
        char[] $r1, $r4;
        boolean $z0;

        r0 := @this: org.kxml2.io.KXmlParser;

        $i0 := @parameter0: int;

     label01:
        $i1 = r0.<org.kxml2.io.KXmlParser: int peekCount>;

        if $i0 < $i1 goto label10;

        $r1 = r0.<org.kxml2.io.KXmlParser: char[] srcBuf>;

        $i1 = lengthof $r1;

        if $i1 > 1 goto label03;

        $r2 = r0.<org.kxml2.io.KXmlParser: java.io.Reader reader>;

        $i1 = virtualinvoke $r2.<java.io.Reader: int read()>();

     label02:
        if $i1 != 13 goto label07;

        r0.<org.kxml2.io.KXmlParser: boolean wasCR> = 1;

        $r3 = r0.<org.kxml2.io.KXmlParser: int[] peek>;

        $i1 = r0.<org.kxml2.io.KXmlParser: int peekCount>;

        $i2 = $i1 + 1;

        r0.<org.kxml2.io.KXmlParser: int peekCount> = $i2;

        $r3[$i1] = 10;

        goto label01;

     label03:
        $i1 = r0.<org.kxml2.io.KXmlParser: int srcPos>;

        $i2 = r0.<org.kxml2.io.KXmlParser: int srcCount>;

        if $i1 >= $i2 goto label04;

        $r1 = r0.<org.kxml2.io.KXmlParser: char[] srcBuf>;

        $i1 = r0.<org.kxml2.io.KXmlParser: int srcPos>;

        $i2 = $i1 + 1;

        r0.<org.kxml2.io.KXmlParser: int srcPos> = $i2;

        $i1 = $r1[$i1];

        goto label02;

     label04:
        $r2 = r0.<org.kxml2.io.KXmlParser: java.io.Reader reader>;

        $r1 = r0.<org.kxml2.io.KXmlParser: char[] srcBuf>;

        $r4 = r0.<org.kxml2.io.KXmlParser: char[] srcBuf>;

        $i1 = lengthof $r4;

        $i1 = virtualinvoke $r2.<java.io.Reader: int read(char[],int,int)>($r1, 0, $i1);

        r0.<org.kxml2.io.KXmlParser: int srcCount> = $i1;

        $i1 = r0.<org.kxml2.io.KXmlParser: int srcCount>;

        if $i1 > 0 goto label06;

        $i1 = -1;

     label05:
        r0.<org.kxml2.io.KXmlParser: int srcPos> = 1;

        goto label02;

     label06:
        $r1 = r0.<org.kxml2.io.KXmlParser: char[] srcBuf>;

        $i1 = $r1[0];

        goto label05;

     label07:
        if $i1 != 10 goto label09;

        $z0 = r0.<org.kxml2.io.KXmlParser: boolean wasCR>;

        if $z0 != 0 goto label08;

        $r3 = r0.<org.kxml2.io.KXmlParser: int[] peek>;

        $i1 = r0.<org.kxml2.io.KXmlParser: int peekCount>;

        $i2 = $i1 + 1;

        r0.<org.kxml2.io.KXmlParser: int peekCount> = $i2;

        $r3[$i1] = 10;

     label08:
        r0.<org.kxml2.io.KXmlParser: boolean wasCR> = 0;

        goto label01;

     label09:
        $r3 = r0.<org.kxml2.io.KXmlParser: int[] peek>;

        $i2 = r0.<org.kxml2.io.KXmlParser: int peekCount>;

        $i3 = $i2 + 1;

        r0.<org.kxml2.io.KXmlParser: int peekCount> = $i3;

        $r3[$i2] = $i1;

        goto label08;

     label10:
        $r3 = r0.<org.kxml2.io.KXmlParser: int[] peek>;

        $i0 = $r3[$i0];

        return $i0;
    }

    private final int peekType() throws java.io.IOException
    {
        int $i1;
        org.kxml2.io.KXmlParser r0;
        byte $b0;

        r0 := @this: org.kxml2.io.KXmlParser;

        $b0 = 1;

        $i1 = specialinvoke r0.<org.kxml2.io.KXmlParser: int peek(int)>(0);

        lookupswitch($i1)
        {
            case -1: goto label2;
            case 38: goto label3;
            case 60: goto label4;
            default: goto label1;
        };

     label1:
        $b0 = 4;

     label2:
        return $b0;

     label3:
        return 6;

     label4:
        $i1 = specialinvoke r0.<org.kxml2.io.KXmlParser: int peek(int)>(1);

        lookupswitch($i1)
        {
            case 33: goto label7;
            case 47: goto label6;
            case 63: goto label7;
            default: goto label5;
        };

     label5:
        return 2;

     label6:
        return 3;

     label7:
        return 999;
    }

    private final void push(int)
    {
        char $c3;
        org.kxml2.io.KXmlParser r0;
        int $i0, $i1, $i2;
        char[] r1, $r2;
        boolean $z0, $z1;

        r0 := @this: org.kxml2.io.KXmlParser;

        $i0 := @parameter0: int;

        $z0 = r0.<org.kxml2.io.KXmlParser: boolean isWhitespace>;

        if $i0 > 32 goto label3;

        $z1 = 1;

     label1:
        $z0 = $z1 & $z0;

        r0.<org.kxml2.io.KXmlParser: boolean isWhitespace> = $z0;

        $i1 = r0.<org.kxml2.io.KXmlParser: int txtPos>;

        r1 = r0.<org.kxml2.io.KXmlParser: char[] txtBuf>;

        $i2 = lengthof r1;

        if $i1 != $i2 goto label2;

        $i1 = r0.<org.kxml2.io.KXmlParser: int txtPos>;

        $i1 = $i1 * 4;

        $i1 = $i1 / 3;

        $i1 = $i1 + 4;

        r1 = newarray (char)[$i1];

        $r2 = r0.<org.kxml2.io.KXmlParser: char[] txtBuf>;

        $i1 = r0.<org.kxml2.io.KXmlParser: int txtPos>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, $i1);

        r0.<org.kxml2.io.KXmlParser: char[] txtBuf> = r1;

     label2:
        r1 = r0.<org.kxml2.io.KXmlParser: char[] txtBuf>;

        $i1 = r0.<org.kxml2.io.KXmlParser: int txtPos>;

        $i2 = $i1 + 1;

        r0.<org.kxml2.io.KXmlParser: int txtPos> = $i2;

        $c3 = (char) $i0;

        r1[$i1] = $c3;

        return;

     label3:
        $z1 = 0;

        goto label1;
    }

    private final void pushEntity() throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        java.io.PrintStream $r2;
        char $c2;
        org.kxml2.io.KXmlParser r0;
        int i0, $i1;
        java.lang.StringBuilder $r3, $r7;
        java.lang.Object $r5;
        java.lang.String $r1, r6;
        java.util.Hashtable $r4;
        boolean $z0, $z1;

        r0 := @this: org.kxml2.io.KXmlParser;

        $z0 = 1;

        i0 = specialinvoke r0.<org.kxml2.io.KXmlParser: int read()>();

        specialinvoke r0.<org.kxml2.io.KXmlParser: void push(int)>(i0);

        i0 = r0.<org.kxml2.io.KXmlParser: int txtPos>;

     label01:
        $i1 = specialinvoke r0.<org.kxml2.io.KXmlParser: int peek(int)>(0);

        if $i1 != 59 goto label04;

        specialinvoke r0.<org.kxml2.io.KXmlParser: int read()>();

        $r1 = specialinvoke r0.<org.kxml2.io.KXmlParser: java.lang.String get(int)>(i0);

        i0 = i0 + -1;

        r0.<org.kxml2.io.KXmlParser: int txtPos> = i0;

        $z1 = r0.<org.kxml2.io.KXmlParser: boolean token>;

        if $z1 == 0 goto label02;

        i0 = r0.<org.kxml2.io.KXmlParser: int type>;

        if i0 != 6 goto label02;

        r0.<org.kxml2.io.KXmlParser: java.lang.String name> = $r1;

     label02:
        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(0);

        i0 = (int) $c2;

        if i0 != 35 goto label11;

        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(1);

        i0 = (int) $c2;

        if i0 != 120 goto label10;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>(2);

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r1, 16);

     label03:
        specialinvoke r0.<org.kxml2.io.KXmlParser: void push(int)>(i0);

        return;

     label04:
        if $i1 >= 128 goto label09;

        if $i1 < 48 goto label05;

        if $i1 <= 57 goto label09;

     label05:
        if $i1 < 97 goto label06;

        if $i1 <= 122 goto label09;

     label06:
        if $i1 < 65 goto label07;

        if $i1 <= 90 goto label09;

     label07:
        if $i1 == 95 goto label09;

        if $i1 == 45 goto label09;

        if $i1 == 35 goto label09;

        $z0 = r0.<org.kxml2.io.KXmlParser: boolean relaxed>;

        if $z0 != 0 goto label08;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void error(java.lang.String)>("unterminated entity ref");

     label08:
        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("broken entitiy: ");

        i0 = i0 + -1;

        $r1 = specialinvoke r0.<org.kxml2.io.KXmlParser: java.lang.String get(int)>(i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r1);

        return;

     label09:
        $i1 = specialinvoke r0.<org.kxml2.io.KXmlParser: int read()>();

        specialinvoke r0.<org.kxml2.io.KXmlParser: void push(int)>($i1);

        goto label01;

     label10:
        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>(1);

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r1);

        goto label03;

     label11:
        $r4 = r0.<org.kxml2.io.KXmlParser: java.util.Hashtable entityMap>;

        $r5 = virtualinvoke $r4.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r1);

        r6 = (java.lang.String) $r5;

        if r6 != null goto label13;

     label12:
        r0.<org.kxml2.io.KXmlParser: boolean unresolved> = $z0;

        $z0 = r0.<org.kxml2.io.KXmlParser: boolean unresolved>;

        if $z0 == 0 goto label14;

        $z0 = r0.<org.kxml2.io.KXmlParser: boolean token>;

        if $z0 != 0 goto label16;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unresolved: &");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<org.kxml2.io.KXmlParser: void error(java.lang.String)>($r1);

        return;

     label13:
        $z0 = 0;

        goto label12;

     label14:
        i0 = 0;

     label15:
        $i1 = virtualinvoke r6.<java.lang.String: int length()>();

        if i0 >= $i1 goto label16;

        $c2 = virtualinvoke r6.<java.lang.String: char charAt(int)>(i0);

        $i1 = (int) $c2;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void push(int)>($i1);

        i0 = i0 + 1;

        goto label15;

     label16:
        return;
    }

    private final void pushText(int, boolean) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.kxml2.io.KXmlParser r0;
        int $i0, $i1, i2, $i3;
        boolean $z0;

        r0 := @this: org.kxml2.io.KXmlParser;

        $i0 := @parameter0: int;

        $z0 := @parameter1: boolean;

        i2 = specialinvoke r0.<org.kxml2.io.KXmlParser: int peek(int)>(0);

        $i1 = 0;

     label1:
        if i2 == -1 goto label9;

        if i2 == $i0 goto label9;

        if $i0 != 32 goto label2;

        if i2 <= 32 goto label9;

        if i2 != 62 goto label2;

        return;

     label2:
        if i2 != 38 goto label6;

        if $z0 == 0 goto label9;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void pushEntity()>();

     label3:
        if i2 != 62 goto label4;

        if $i1 < 2 goto label4;

        if $i0 == 93 goto label4;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void error(java.lang.String)>("Illegal: ]]>");

     label4:
        if i2 != 93 goto label8;

        $i1 = $i1 + 1;

     label5:
        i2 = specialinvoke r0.<org.kxml2.io.KXmlParser: int peek(int)>(0);

        goto label1;

     label6:
        if i2 != 10 goto label7;

        $i3 = r0.<org.kxml2.io.KXmlParser: int type>;

        if $i3 != 2 goto label7;

        specialinvoke r0.<org.kxml2.io.KXmlParser: int read()>();

        specialinvoke r0.<org.kxml2.io.KXmlParser: void push(int)>(32);

        goto label3;

     label7:
        $i3 = specialinvoke r0.<org.kxml2.io.KXmlParser: int read()>();

        specialinvoke r0.<org.kxml2.io.KXmlParser: void push(int)>($i3);

        goto label3;

     label8:
        $i1 = 0;

        goto label5;

     label9:
        return;
    }

    private final int read() throws java.io.IOException
    {
        org.kxml2.io.KXmlParser r0;
        int[] $r1, $r2;
        int $i0, $i1;

        r0 := @this: org.kxml2.io.KXmlParser;

        $i0 = r0.<org.kxml2.io.KXmlParser: int peekCount>;

        if $i0 != 0 goto label2;

        $i0 = specialinvoke r0.<org.kxml2.io.KXmlParser: int peek(int)>(0);

     label1:
        $i1 = r0.<org.kxml2.io.KXmlParser: int peekCount>;

        $i1 = $i1 + -1;

        r0.<org.kxml2.io.KXmlParser: int peekCount> = $i1;

        $i1 = r0.<org.kxml2.io.KXmlParser: int column>;

        $i1 = $i1 + 1;

        r0.<org.kxml2.io.KXmlParser: int column> = $i1;

        if $i0 != 10 goto label3;

        $i1 = r0.<org.kxml2.io.KXmlParser: int line>;

        $i1 = $i1 + 1;

        r0.<org.kxml2.io.KXmlParser: int line> = $i1;

        r0.<org.kxml2.io.KXmlParser: int column> = 1;

        return $i0;

     label2:
        $r1 = r0.<org.kxml2.io.KXmlParser: int[] peek>;

        $i0 = $r1[0];

        $r1 = r0.<org.kxml2.io.KXmlParser: int[] peek>;

        $r2 = r0.<org.kxml2.io.KXmlParser: int[] peek>;

        $i1 = $r2[1];

        $r1[0] = $i1;

        goto label1;

     label3:
        return $i0;
    }

    private final void read(char) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.kxml2.io.KXmlParser r0;
        int $i1, $i2;
        char $c0;
        java.lang.StringBuilder $r1, $r3;
        java.lang.String $r2;

        r0 := @this: org.kxml2.io.KXmlParser;

        $c0 := @parameter0: char;

        $i1 = specialinvoke r0.<org.kxml2.io.KXmlParser: int read()>();

        $i2 = (int) $c0;

        if $i1 == $i2 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected: \'");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' actual: \'");

        $c0 = (char) $i1;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<org.kxml2.io.KXmlParser: void error(java.lang.String)>($r2);

     label1:
        return;
    }

    private final java.lang.String readName() throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.kxml2.io.KXmlParser r0;
        int i0, $i1;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: org.kxml2.io.KXmlParser;

        i0 = r0.<org.kxml2.io.KXmlParser: int txtPos>;

        $i1 = specialinvoke r0.<org.kxml2.io.KXmlParser: int peek(int)>(0);

        if $i1 < 97 goto label1;

        if $i1 <= 122 goto label3;

     label1:
        if $i1 < 65 goto label2;

        if $i1 <= 90 goto label3;

     label2:
        if $i1 == 95 goto label3;

        if $i1 == 58 goto label3;

        if $i1 >= 192 goto label3;

        $z0 = r0.<org.kxml2.io.KXmlParser: boolean relaxed>;

        if $z0 != 0 goto label3;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void error(java.lang.String)>("name expected");

     label3:
        $i1 = specialinvoke r0.<org.kxml2.io.KXmlParser: int read()>();

        specialinvoke r0.<org.kxml2.io.KXmlParser: void push(int)>($i1);

        $i1 = specialinvoke r0.<org.kxml2.io.KXmlParser: int peek(int)>(0);

        if $i1 < 97 goto label4;

        if $i1 <= 122 goto label3;

     label4:
        if $i1 < 65 goto label5;

        if $i1 <= 90 goto label3;

     label5:
        if $i1 < 48 goto label6;

        if $i1 <= 57 goto label3;

     label6:
        if $i1 == 95 goto label3;

        if $i1 == 45 goto label3;

        if $i1 == 58 goto label3;

        if $i1 == 46 goto label3;

        if $i1 >= 183 goto label3;

        $r1 = specialinvoke r0.<org.kxml2.io.KXmlParser: java.lang.String get(int)>(i0);

        r0.<org.kxml2.io.KXmlParser: int txtPos> = i0;

        return $r1;
    }

    private final void skip() throws java.io.IOException
    {
        int $i0;
        org.kxml2.io.KXmlParser r0;

        r0 := @this: org.kxml2.io.KXmlParser;

     label1:
        $i0 = specialinvoke r0.<org.kxml2.io.KXmlParser: int peek(int)>(0);

        if $i0 > 32 goto label3;

        if $i0 != -1 goto label2;

        return;

     label2:
        specialinvoke r0.<org.kxml2.io.KXmlParser: int read()>();

        goto label1;

     label3:
        return;
    }

    public void defineEntityReplacementText(java.lang.String, java.lang.String) throws org.xmlpull.v1.XmlPullParserException
    {
        org.kxml2.io.KXmlParser r0;
        java.lang.String $r1, $r2;
        java.lang.RuntimeException $r4;
        java.util.Hashtable $r3;

        r0 := @this: org.kxml2.io.KXmlParser;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.kxml2.io.KXmlParser: java.util.Hashtable entityMap>;

        if $r3 != null goto label1;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("entity replacement text must be defined after setInput!");

        throw $r4;

     label1:
        $r3 = r0.<org.kxml2.io.KXmlParser: java.util.Hashtable entityMap>;

        virtualinvoke $r3.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        return;
    }

    public int getAttributeCount()
    {
        int i0;
        org.kxml2.io.KXmlParser r0;

        r0 := @this: org.kxml2.io.KXmlParser;

        i0 = r0.<org.kxml2.io.KXmlParser: int attributeCount>;

        return i0;
    }

    public java.lang.String getAttributeName(int)
    {
        org.kxml2.io.KXmlParser r0;
        java.lang.IndexOutOfBoundsException $r1;
        int $i0, $i1;
        java.lang.String[] $r2;
        java.lang.String $r3;

        r0 := @this: org.kxml2.io.KXmlParser;

        $i0 := @parameter0: int;

        $i1 = r0.<org.kxml2.io.KXmlParser: int attributeCount>;

        if $i0 < $i1 goto label1;

        $r1 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r1;

     label1:
        $r2 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $i0 = $i0 << 2;

        $i0 = $i0 + 2;

        $r3 = $r2[$i0];

        return $r3;
    }

    public java.lang.String getAttributeNamespace(int)
    {
        org.kxml2.io.KXmlParser r0;
        java.lang.IndexOutOfBoundsException $r1;
        int $i0, $i1;
        java.lang.String[] $r2;
        java.lang.String $r3;

        r0 := @this: org.kxml2.io.KXmlParser;

        $i0 := @parameter0: int;

        $i1 = r0.<org.kxml2.io.KXmlParser: int attributeCount>;

        if $i0 < $i1 goto label1;

        $r1 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r1;

     label1:
        $r2 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $i0 = $i0 << 2;

        $r3 = $r2[$i0];

        return $r3;
    }

    public java.lang.String getAttributePrefix(int)
    {
        org.kxml2.io.KXmlParser r0;
        java.lang.IndexOutOfBoundsException $r1;
        int $i0, $i1;
        java.lang.String[] $r2;
        java.lang.String $r3;

        r0 := @this: org.kxml2.io.KXmlParser;

        $i0 := @parameter0: int;

        $i1 = r0.<org.kxml2.io.KXmlParser: int attributeCount>;

        if $i0 < $i1 goto label1;

        $r1 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r1;

     label1:
        $r2 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $i0 = $i0 << 2;

        $i0 = $i0 + 1;

        $r3 = $r2[$i0];

        return $r3;
    }

    public java.lang.String getAttributeType(int)
    {
        int $i0;
        org.kxml2.io.KXmlParser r0;

        r0 := @this: org.kxml2.io.KXmlParser;

        $i0 := @parameter0: int;

        return "CDATA";
    }

    public java.lang.String getAttributeValue(int)
    {
        org.kxml2.io.KXmlParser r0;
        java.lang.IndexOutOfBoundsException $r1;
        int $i0, $i1;
        java.lang.String[] $r2;
        java.lang.String $r3;

        r0 := @this: org.kxml2.io.KXmlParser;

        $i0 := @parameter0: int;

        $i1 = r0.<org.kxml2.io.KXmlParser: int attributeCount>;

        if $i0 < $i1 goto label1;

        $r1 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r1;

     label1:
        $r2 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $i0 = $i0 << 2;

        $i0 = $i0 + 3;

        $r3 = $r2[$i0];

        return $r3;
    }

    public java.lang.String getAttributeValue(java.lang.String, java.lang.String)
    {
        java.lang.String[] $r3;
        org.kxml2.io.KXmlParser r0;
        int $i0, $i1;
        java.lang.String $r1, $r2, $r4;
        boolean $z0;

        r0 := @this: org.kxml2.io.KXmlParser;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $i0 = r0.<org.kxml2.io.KXmlParser: int attributeCount>;

        $i0 = $i0 << 2;

        $i0 = $i0 + -4;

     label1:
        if $i0 < 0 goto label4;

        $r3 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $i1 = $i0 + 2;

        $r4 = $r3[$i1];

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label3;

        if $r1 == null goto label2;

        $r3 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $r4 = $r3[$i0];

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label3;

     label2:
        $r3 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $i0 = $i0 + 3;

        $r1 = $r3[$i0];

        return $r1;

     label3:
        $i0 = $i0 + -4;

        goto label1;

     label4:
        return null;
    }

    public int getColumnNumber()
    {
        int i0;
        org.kxml2.io.KXmlParser r0;

        r0 := @this: org.kxml2.io.KXmlParser;

        i0 = r0.<org.kxml2.io.KXmlParser: int column>;

        return i0;
    }

    public int getDepth()
    {
        int i0;
        org.kxml2.io.KXmlParser r0;

        r0 := @this: org.kxml2.io.KXmlParser;

        i0 = r0.<org.kxml2.io.KXmlParser: int depth>;

        return i0;
    }

    public int getEventType() throws org.xmlpull.v1.XmlPullParserException
    {
        int i0;
        org.kxml2.io.KXmlParser r0;

        r0 := @this: org.kxml2.io.KXmlParser;

        i0 = r0.<org.kxml2.io.KXmlParser: int type>;

        return i0;
    }

    public boolean getFeature(java.lang.String)
    {
        org.kxml2.io.KXmlParser r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: org.kxml2.io.KXmlParser;

        $r1 := @parameter0: java.lang.String;

        $r2 = "http://xmlpull.org/v1/doc/features.html#process-namespaces";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $z0 = r0.<org.kxml2.io.KXmlParser: boolean processNsp>;

        return $z0;

     label1:
        $z0 = specialinvoke r0.<org.kxml2.io.KXmlParser: boolean isProp(java.lang.String,boolean,java.lang.String)>($r1, 0, "relaxed");

        if $z0 == 0 goto label2;

        $z0 = r0.<org.kxml2.io.KXmlParser: boolean relaxed>;

        return $z0;

     label2:
        return 0;
    }

    public java.lang.String getInputEncoding()
    {
        org.kxml2.io.KXmlParser r0;
        java.lang.String r1;

        r0 := @this: org.kxml2.io.KXmlParser;

        r1 = r0.<org.kxml2.io.KXmlParser: java.lang.String encoding>;

        return r1;
    }

    public int getLineNumber()
    {
        int i0;
        org.kxml2.io.KXmlParser r0;

        r0 := @this: org.kxml2.io.KXmlParser;

        i0 = r0.<org.kxml2.io.KXmlParser: int line>;

        return i0;
    }

    public java.lang.String getName()
    {
        org.kxml2.io.KXmlParser r0;
        java.lang.String r1;

        r0 := @this: org.kxml2.io.KXmlParser;

        r1 = r0.<org.kxml2.io.KXmlParser: java.lang.String name>;

        return r1;
    }

    public java.lang.String getNamespace()
    {
        org.kxml2.io.KXmlParser r0;
        java.lang.String r1;

        r0 := @this: org.kxml2.io.KXmlParser;

        r1 = r0.<org.kxml2.io.KXmlParser: java.lang.String namespace>;

        return r1;
    }

    public java.lang.String getNamespace(java.lang.String)
    {
        org.kxml2.io.KXmlParser r0;
        int $i0;
        java.lang.String[] $r3;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: org.kxml2.io.KXmlParser;

        $r1 := @parameter0: java.lang.String;

        $r2 = "xml";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        return "http://www.w3.org/XML/1998/namespace";

     label1:
        $r2 = "xmlns";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        return "http://www.w3.org/2000/xmlns/";

     label2:
        $i0 = r0.<org.kxml2.io.KXmlParser: int depth>;

        $i0 = virtualinvoke r0.<org.kxml2.io.KXmlParser: int getNamespaceCount(int)>($i0);

        $i0 = $i0 << 1;

        $i0 = $i0 + -2;

     label3:
        if $i0 < 0 goto label6;

        if $r1 != null goto label4;

        $r3 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] nspStack>;

        $r2 = $r3[$i0];

        if $r2 != null goto label5;

        $r3 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] nspStack>;

        $i0 = $i0 + 1;

        $r1 = $r3[$i0];

        return $r1;

     label4:
        $r3 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] nspStack>;

        $r2 = $r3[$i0];

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label5;

        $r3 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] nspStack>;

        $i0 = $i0 + 1;

        $r1 = $r3[$i0];

        return $r1;

     label5:
        $i0 = $i0 + -2;

        goto label3;

     label6:
        return null;
    }

    public int getNamespaceCount(int)
    {
        org.kxml2.io.KXmlParser r0;
        java.lang.IndexOutOfBoundsException $r1;
        int[] $r2;
        int $i0, $i1;

        r0 := @this: org.kxml2.io.KXmlParser;

        $i0 := @parameter0: int;

        $i1 = r0.<org.kxml2.io.KXmlParser: int depth>;

        if $i0 <= $i1 goto label1;

        $r1 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r1;

     label1:
        $r2 = r0.<org.kxml2.io.KXmlParser: int[] nspCounts>;

        $i0 = $r2[$i0];

        return $i0;
    }

    public java.lang.String getNamespacePrefix(int)
    {
        org.kxml2.io.KXmlParser r0;
        int $i0;
        java.lang.String[] $r1;
        java.lang.String $r2;

        r0 := @this: org.kxml2.io.KXmlParser;

        $i0 := @parameter0: int;

        $r1 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] nspStack>;

        $i0 = $i0 << 1;

        $r2 = $r1[$i0];

        return $r2;
    }

    public java.lang.String getNamespaceUri(int)
    {
        org.kxml2.io.KXmlParser r0;
        int $i0;
        java.lang.String[] $r1;
        java.lang.String $r2;

        r0 := @this: org.kxml2.io.KXmlParser;

        $i0 := @parameter0: int;

        $r1 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] nspStack>;

        $i0 = $i0 << 1;

        $i0 = $i0 + 1;

        $r2 = $r1[$i0];

        return $r2;
    }

    public java.lang.String getPositionDescription()
    {
        java.lang.String[] $r2;
        java.io.Reader $r7;
        org.kxml2.io.KXmlParser r0;
        java.lang.StringBuffer r1;
        int i0, $i1, $i2;
        java.lang.StringBuilder $r4;
        java.lang.Object $r5;
        java.lang.String $r3, r6;
        boolean $z0;

        r0 := @this: org.kxml2.io.KXmlParser;

        r1 = new java.lang.StringBuffer;

        i0 = r0.<org.kxml2.io.KXmlParser: int type>;

        $r2 = <org.kxml2.io.KXmlParser: java.lang.String[] TYPES>;

        $i1 = lengthof $r2;

        if i0 >= $i1 goto label08;

        $r2 = <org.kxml2.io.KXmlParser: java.lang.String[] TYPES>;

        i0 = r0.<org.kxml2.io.KXmlParser: int type>;

        $r3 = $r2[i0];

     label01:
        specialinvoke r1.<java.lang.StringBuffer: void <init>(java.lang.String)>($r3);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        i0 = r0.<org.kxml2.io.KXmlParser: int type>;

        if i0 == 2 goto label02;

        i0 = r0.<org.kxml2.io.KXmlParser: int type>;

        if i0 != 3 goto label12;

     label02:
        $z0 = r0.<org.kxml2.io.KXmlParser: boolean degenerated>;

        if $z0 == 0 goto label03;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(empty) ");

     label03:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(60);

        i0 = r0.<org.kxml2.io.KXmlParser: int type>;

        if i0 != 3 goto label04;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(47);

     label04:
        $r3 = r0.<org.kxml2.io.KXmlParser: java.lang.String prefix>;

        if $r3 == null goto label05;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{");

        $r3 = r0.<org.kxml2.io.KXmlParser: java.lang.String namespace>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r3 = r0.<org.kxml2.io.KXmlParser: java.lang.String prefix>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

     label05:
        $r3 = r0.<org.kxml2.io.KXmlParser: java.lang.String name>;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        i0 = r0.<org.kxml2.io.KXmlParser: int attributeCount>;

        i0 = i0 << 2;

        $i1 = 0;

     label06:
        if $i1 >= i0 goto label09;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        $r2 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $i2 = $i1 + 1;

        $r3 = $r2[$i2];

        if $r3 == null goto label07;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{");

        $r2 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $r3 = $r2[$i1];

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r2 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $i2 = $i1 + 1;

        $r3 = $r2[$i2];

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

     label07:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $i2 = $i1 + 2;

        $r3 = $r2[$i2];

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=\'");

        $r2 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $i2 = $i1 + 3;

        $r3 = $r2[$i2];

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $i1 = $i1 + 4;

        goto label06;

     label08:
        $r3 = "unknown";

        goto label01;

     label09:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(62);

     label10:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@");

        i0 = r0.<org.kxml2.io.KXmlParser: int line>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        i0 = r0.<org.kxml2.io.KXmlParser: int column>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = r0.<org.kxml2.io.KXmlParser: java.lang.Object location>;

        if $r5 == null goto label16;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" in ");

        $r5 = r0.<org.kxml2.io.KXmlParser: java.lang.Object location>;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r5);

     label11:
        $r3 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;

     label12:
        i0 = r0.<org.kxml2.io.KXmlParser: int type>;

        if i0 == 7 goto label10;

        i0 = r0.<org.kxml2.io.KXmlParser: int type>;

        if i0 == 4 goto label13;

        $r3 = virtualinvoke r0.<org.kxml2.io.KXmlParser: java.lang.String getText()>();

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        goto label10;

     label13:
        $z0 = r0.<org.kxml2.io.KXmlParser: boolean isWhitespace>;

        if $z0 == 0 goto label14;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(whitespace)");

        goto label10;

     label14:
        $r3 = virtualinvoke r0.<org.kxml2.io.KXmlParser: java.lang.String getText()>();

        r6 = $r3;

        i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        if i0 <= 16 goto label15;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>(0, 16);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("...");

        r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

     label15:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r6);

        goto label10;

     label16:
        $r7 = r0.<org.kxml2.io.KXmlParser: java.io.Reader reader>;

        if $r7 == null goto label11;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" in ");

        $r7 = r0.<org.kxml2.io.KXmlParser: java.io.Reader reader>;

        $r3 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        goto label11;
    }

    public java.lang.String getPrefix()
    {
        org.kxml2.io.KXmlParser r0;
        java.lang.String r1;

        r0 := @this: org.kxml2.io.KXmlParser;

        r1 = r0.<org.kxml2.io.KXmlParser: java.lang.String prefix>;

        return r1;
    }

    public java.lang.Object getProperty(java.lang.String)
    {
        org.kxml2.io.KXmlParser r0;
        java.lang.Boolean r4;
        java.lang.Object $r2;
        java.lang.String $r1;
        java.io.Reader $r3;
        boolean $z0;

        r0 := @this: org.kxml2.io.KXmlParser;

        $r1 := @parameter0: java.lang.String;

        $z0 = specialinvoke r0.<org.kxml2.io.KXmlParser: boolean isProp(java.lang.String,boolean,java.lang.String)>("http://xmlpull.org/v1/doc/properties.html#xmldecl-standalone", 1, "xmldecl-version");

        if $z0 == 0 goto label1;

        $r1 = r0.<org.kxml2.io.KXmlParser: java.lang.String version>;

        return $r1;

     label1:
        $z0 = specialinvoke r0.<org.kxml2.io.KXmlParser: boolean isProp(java.lang.String,boolean,java.lang.String)>("http://xmlpull.org/v1/doc/properties.html#xmldecl-standalone", 1, "xmldecl-standalone");

        if $z0 == 0 goto label2;

        r4 = r0.<org.kxml2.io.KXmlParser: java.lang.Boolean standalone>;

        return r4;

     label2:
        $z0 = specialinvoke r0.<org.kxml2.io.KXmlParser: boolean isProp(java.lang.String,boolean,java.lang.String)>("http://xmlpull.org/v1/doc/properties.html#xmldecl-standalone", 1, "location");

        if $z0 == 0 goto label4;

        $r2 = r0.<org.kxml2.io.KXmlParser: java.lang.Object location>;

        if $r2 == null goto label3;

        $r2 = r0.<org.kxml2.io.KXmlParser: java.lang.Object location>;

        return $r2;

     label3:
        $r3 = r0.<org.kxml2.io.KXmlParser: java.io.Reader reader>;

        $r1 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        return $r1;

     label4:
        return null;
    }

    public java.lang.String getText()
    {
        org.kxml2.io.KXmlParser r0;
        int $i0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: org.kxml2.io.KXmlParser;

        $i0 = r0.<org.kxml2.io.KXmlParser: int type>;

        if $i0 < 4 goto label1;

        $i0 = r0.<org.kxml2.io.KXmlParser: int type>;

        if $i0 != 6 goto label2;

        $z0 = r0.<org.kxml2.io.KXmlParser: boolean unresolved>;

        if $z0 == 0 goto label2;

     label1:
        return null;

     label2:
        $r1 = specialinvoke r0.<org.kxml2.io.KXmlParser: java.lang.String get(int)>(0);

        return $r1;
    }

    public char[] getTextCharacters(int[])
    {
        org.kxml2.io.KXmlParser r0;
        int[] $r1;
        int $i0;
        char[] $r3;
        java.lang.String $r2;

        r0 := @this: org.kxml2.io.KXmlParser;

        $r1 := @parameter0: int[];

        $i0 = r0.<org.kxml2.io.KXmlParser: int type>;

        if $i0 < 4 goto label2;

        $i0 = r0.<org.kxml2.io.KXmlParser: int type>;

        if $i0 != 6 goto label1;

        $r1[0] = 0;

        $r2 = r0.<org.kxml2.io.KXmlParser: java.lang.String name>;

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        $r1[1] = $i0;

        $r2 = r0.<org.kxml2.io.KXmlParser: java.lang.String name>;

        $r3 = virtualinvoke $r2.<java.lang.String: char[] toCharArray()>();

        return $r3;

     label1:
        $r1[0] = 0;

        $i0 = r0.<org.kxml2.io.KXmlParser: int txtPos>;

        $r1[1] = $i0;

        $r3 = r0.<org.kxml2.io.KXmlParser: char[] txtBuf>;

        return $r3;

     label2:
        $i0 = -1;

        $r1[0] = $i0;

        $i0 = -1;

        $r1[1] = $i0;

        return null;
    }

    public boolean isAttributeDefault(int)
    {
        int $i0;
        org.kxml2.io.KXmlParser r0;

        r0 := @this: org.kxml2.io.KXmlParser;

        $i0 := @parameter0: int;

        return 0;
    }

    public boolean isEmptyElementTag() throws org.xmlpull.v1.XmlPullParserException
    {
        int $i0;
        org.kxml2.io.KXmlParser r0;
        boolean z0;

        r0 := @this: org.kxml2.io.KXmlParser;

        $i0 = r0.<org.kxml2.io.KXmlParser: int type>;

        if $i0 == 2 goto label1;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void exception(java.lang.String)>("Wrong event type");

     label1:
        z0 = r0.<org.kxml2.io.KXmlParser: boolean degenerated>;

        return z0;
    }

    public boolean isWhitespace() throws org.xmlpull.v1.XmlPullParserException
    {
        int $i0;
        org.kxml2.io.KXmlParser r0;
        boolean z0;

        r0 := @this: org.kxml2.io.KXmlParser;

        $i0 = r0.<org.kxml2.io.KXmlParser: int type>;

        if $i0 == 4 goto label1;

        $i0 = r0.<org.kxml2.io.KXmlParser: int type>;

        if $i0 == 7 goto label1;

        $i0 = r0.<org.kxml2.io.KXmlParser: int type>;

        if $i0 == 5 goto label1;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void exception(java.lang.String)>("Wrong event type");

     label1:
        z0 = r0.<org.kxml2.io.KXmlParser: boolean isWhitespace>;

        return z0;
    }

    public int next() throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        int $i0, i1;
        org.kxml2.io.KXmlParser r0;

        r0 := @this: org.kxml2.io.KXmlParser;

        r0.<org.kxml2.io.KXmlParser: int txtPos> = 0;

        r0.<org.kxml2.io.KXmlParser: boolean isWhitespace> = 1;

        i1 = 9999;

        r0.<org.kxml2.io.KXmlParser: boolean token> = 0;

     label1:
        specialinvoke r0.<org.kxml2.io.KXmlParser: void nextImpl()>();

        $i0 = r0.<org.kxml2.io.KXmlParser: int type>;

        if $i0 >= i1 goto label2;

        i1 = r0.<org.kxml2.io.KXmlParser: int type>;

     label2:
        if i1 > 6 goto label1;

        if i1 < 4 goto label3;

        $i0 = specialinvoke r0.<org.kxml2.io.KXmlParser: int peekType()>();

        if $i0 >= 4 goto label1;

     label3:
        r0.<org.kxml2.io.KXmlParser: int type> = i1;

        i1 = r0.<org.kxml2.io.KXmlParser: int type>;

        if i1 <= 4 goto label4;

        r0.<org.kxml2.io.KXmlParser: int type> = 4;

     label4:
        i1 = r0.<org.kxml2.io.KXmlParser: int type>;

        return i1;
    }

    public int nextTag() throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        int $i0;
        org.kxml2.io.KXmlParser r0;
        boolean $z0;

        r0 := @this: org.kxml2.io.KXmlParser;

        virtualinvoke r0.<org.kxml2.io.KXmlParser: int next()>();

        $i0 = r0.<org.kxml2.io.KXmlParser: int type>;

        if $i0 != 4 goto label1;

        $z0 = r0.<org.kxml2.io.KXmlParser: boolean isWhitespace>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.kxml2.io.KXmlParser: int next()>();

     label1:
        $i0 = r0.<org.kxml2.io.KXmlParser: int type>;

        if $i0 == 3 goto label2;

        $i0 = r0.<org.kxml2.io.KXmlParser: int type>;

        if $i0 == 2 goto label2;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void exception(java.lang.String)>("unexpected type");

     label2:
        $i0 = r0.<org.kxml2.io.KXmlParser: int type>;

        return $i0;
    }

    public java.lang.String nextText() throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        int $i0;
        org.kxml2.io.KXmlParser r0;
        java.lang.String $r1;

        r0 := @this: org.kxml2.io.KXmlParser;

        $i0 = r0.<org.kxml2.io.KXmlParser: int type>;

        if $i0 == 2 goto label1;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void exception(java.lang.String)>("precondition: START_TAG");

     label1:
        virtualinvoke r0.<org.kxml2.io.KXmlParser: int next()>();

        $i0 = r0.<org.kxml2.io.KXmlParser: int type>;

        if $i0 != 4 goto label3;

        $r1 = virtualinvoke r0.<org.kxml2.io.KXmlParser: java.lang.String getText()>();

        virtualinvoke r0.<org.kxml2.io.KXmlParser: int next()>();

     label2:
        $i0 = r0.<org.kxml2.io.KXmlParser: int type>;

        if $i0 == 3 goto label4;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void exception(java.lang.String)>("END_TAG expected");

        return $r1;

     label3:
        $r1 = "";

        goto label2;

     label4:
        return $r1;
    }

    public int nextToken() throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        int i0;
        org.kxml2.io.KXmlParser r0;

        r0 := @this: org.kxml2.io.KXmlParser;

        r0.<org.kxml2.io.KXmlParser: boolean isWhitespace> = 1;

        r0.<org.kxml2.io.KXmlParser: int txtPos> = 0;

        r0.<org.kxml2.io.KXmlParser: boolean token> = 1;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void nextImpl()>();

        i0 = r0.<org.kxml2.io.KXmlParser: int type>;

        return i0;
    }

    public void require(int, java.lang.String, java.lang.String) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        java.lang.String[] $r5;
        org.kxml2.io.KXmlParser r0;
        int $i0, $i1;
        java.lang.StringBuilder $r4;
        java.lang.String $r1, $r2, $r3;
        boolean $z0;

        r0 := @this: org.kxml2.io.KXmlParser;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $i1 = r0.<org.kxml2.io.KXmlParser: int type>;

        if $i0 != $i1 goto label2;

        if $r1 == null goto label1;

        $r3 = virtualinvoke r0.<org.kxml2.io.KXmlParser: java.lang.String getNamespace()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

     label1:
        if $r2 == null goto label3;

        $r3 = virtualinvoke r0.<org.kxml2.io.KXmlParser: java.lang.String getName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label3;

     label2:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected: ");

        $r5 = <org.kxml2.io.KXmlParser: java.lang.String[] TYPES>;

        $r3 = $r5[$i0];

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" {");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<org.kxml2.io.KXmlParser: void exception(java.lang.String)>($r1);

     label3:
        return;
    }

    public void setFeature(java.lang.String, boolean) throws org.xmlpull.v1.XmlPullParserException
    {
        org.kxml2.io.KXmlParser r0;
        java.lang.StringBuilder $r3;
        java.lang.String $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: org.kxml2.io.KXmlParser;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $r2 = "http://xmlpull.org/v1/doc/features.html#process-namespaces";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("http://xmlpull.org/v1/doc/features.html#process-namespaces");

        if $z1 == 0 goto label1;

        r0.<org.kxml2.io.KXmlParser: boolean processNsp> = 1;

        return;

     label1:
        $z1 = specialinvoke r0.<org.kxml2.io.KXmlParser: boolean isProp(java.lang.String,boolean,java.lang.String)>("http://xmlpull.org/v1/doc/features.html#process-namespaces", 0, "relaxed");

        if $z1 == 0 goto label2;

        r0.<org.kxml2.io.KXmlParser: boolean relaxed> = 1;

        return;

     label2:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unsupported feature: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("http://xmlpull.org/v1/doc/features.html#process-namespaces");

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<org.kxml2.io.KXmlParser: void exception(java.lang.String)>($r1);

        return;
    }

    public void setInput(java.io.InputStream, java.lang.String) throws org.xmlpull.v1.XmlPullParserException
    {
        org.kxml2.io.KXmlParser r0;
        int i0, $i1, $i3, $i4;
        java.lang.String $r2, r4, r5, $r14;
        char $c2;
        java.lang.IllegalArgumentException $r10;
        java.io.InputStreamReader $r8, $r11;
        java.lang.Exception r3;
        org.xmlpull.v1.XmlPullParserException $r13;
        char[] $r6, $r7;
        java.lang.StringBuilder $r9, $r12;
        java.io.InputStream $r1;

        r0 := @this: org.kxml2.io.KXmlParser;

        $r1 := @parameter0: java.io.InputStream;

        $r2 := @parameter1: java.lang.String;

        r0.<org.kxml2.io.KXmlParser: int srcPos> = 0;

        r0.<org.kxml2.io.KXmlParser: int srcCount> = 0;

        r5 = null;

        if $r1 != null goto label01;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r10;

     label01:
        i0 = 0;

     label02:
        $i1 = r0.<org.kxml2.io.KXmlParser: int srcCount>;

     label03:
        if $i1 >= 4 goto label06;

     label04:
        $i1 = virtualinvoke $r1.<java.io.InputStream: int read()>();

     label05:
        if $i1 != -1 goto label19;

     label06:
        $i1 = r0.<org.kxml2.io.KXmlParser: int srcCount>;

     label07:
        if $i1 != 4 goto label14;

        lookupswitch(i0)
        {
            case -131072: goto label30;
            case 60: goto label33;
            case 65279: goto label27;
            case 3932223: goto label39;
            case 1006632960: goto label36;
            case 1006649088: goto label42;
            case 1010792557: goto label45;
            default: goto label08;
        };

     label08:
        $i1 = -65536 & i0;

        if $i1 != -16842752 goto label64;

        r5 = "UTF-16BE";

     label09:
        $r6 = r0.<org.kxml2.io.KXmlParser: char[] srcBuf>;

        $r7 = r0.<org.kxml2.io.KXmlParser: char[] srcBuf>;

        $c2 = $r7[2];

     label10:
        i0 = (int) $c2;

        i0 = i0 << 8;

     label11:
        $r7 = r0.<org.kxml2.io.KXmlParser: char[] srcBuf>;

        $c2 = $r7[3];

     label12:
        $i1 = (int) $c2;

        i0 = i0 | $i1;

        $c2 = (char) i0;

     label13:
        $r6[0] = $c2;

        r0.<org.kxml2.io.KXmlParser: int srcCount> = 1;

     label14:
        if r5 != null goto label15;

        r5 = "UTF-8";

     label15:
        i0 = r0.<org.kxml2.io.KXmlParser: int srcCount>;

     label16:
        $r11 = new java.io.InputStreamReader;

        $r8 = $r11;

     label17:
        specialinvoke $r11.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r1, r5);

        virtualinvoke r0.<org.kxml2.io.KXmlParser: void setInput(java.io.Reader)>($r8);

        r0.<org.kxml2.io.KXmlParser: java.lang.String encoding> = null;

        r0.<org.kxml2.io.KXmlParser: int srcCount> = i0;

     label18:
        return;

     label19:
        i0 = i0 << 8;

        i0 = i0 | $i1;

     label20:
        $r6 = r0.<org.kxml2.io.KXmlParser: char[] srcBuf>;

        $i3 = r0.<org.kxml2.io.KXmlParser: int srcCount>;

     label21:
        $i4 = $i3 + 1;

     label22:
        r0.<org.kxml2.io.KXmlParser: int srcCount> = $i4;

     label23:
        $c2 = (char) $i1;

     label24:
        $r6[$i3] = $c2;

     label25:
        goto label02;

     label26:
        r3 := @caughtexception;

        $r13 = new org.xmlpull.v1.XmlPullParserException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid stream or encoding: ");

        $r2 = virtualinvoke r3.<java.lang.Exception: java.lang.String toString()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>($r2, r0, r3);

        throw $r13;

     label27:
        r5 = "UTF-32BE";

     label28:
        r0.<org.kxml2.io.KXmlParser: int srcCount> = 0;

     label29:
        goto label14;

     label30:
        r5 = "UTF-32LE";

     label31:
        r0.<org.kxml2.io.KXmlParser: int srcCount> = 0;

     label32:
        goto label14;

     label33:
        r5 = "UTF-32BE";

     label34:
        $r6 = r0.<org.kxml2.io.KXmlParser: char[] srcBuf>;

        $r6[0] = 60;

        r0.<org.kxml2.io.KXmlParser: int srcCount> = 1;

     label35:
        goto label14;

     label36:
        r5 = "UTF-32LE";

     label37:
        $r6 = r0.<org.kxml2.io.KXmlParser: char[] srcBuf>;

        $r6[0] = 60;

        r0.<org.kxml2.io.KXmlParser: int srcCount> = 1;

     label38:
        goto label14;

     label39:
        r5 = "UTF-16BE";

     label40:
        $r6 = r0.<org.kxml2.io.KXmlParser: char[] srcBuf>;

        $r6[0] = 60;

        $r6 = r0.<org.kxml2.io.KXmlParser: char[] srcBuf>;

        $r6[1] = 63;

        r0.<org.kxml2.io.KXmlParser: int srcCount> = 2;

     label41:
        goto label14;

     label42:
        r5 = "UTF-16LE";

     label43:
        $r6 = r0.<org.kxml2.io.KXmlParser: char[] srcBuf>;

        $r6[0] = 60;

        $r6 = r0.<org.kxml2.io.KXmlParser: char[] srcBuf>;

        $r6[1] = 63;

        r0.<org.kxml2.io.KXmlParser: int srcCount> = 2;

     label44:
        goto label14;

     label45:
        $i1 = virtualinvoke $r1.<java.io.InputStream: int read()>();

     label46:
        if $i1 == -1 goto label08;

     label47:
        $r6 = r0.<org.kxml2.io.KXmlParser: char[] srcBuf>;

        $i3 = r0.<org.kxml2.io.KXmlParser: int srcCount>;

     label48:
        $i4 = $i3 + 1;

     label49:
        r0.<org.kxml2.io.KXmlParser: int srcCount> = $i4;

     label50:
        $c2 = (char) $i1;

     label51:
        $r6[$i3] = $c2;

     label52:
        if $i1 != 62 goto label45;

        $r14 = new java.lang.String;

        r4 = $r14;

     label53:
        $r6 = r0.<org.kxml2.io.KXmlParser: char[] srcBuf>;

        $i1 = r0.<org.kxml2.io.KXmlParser: int srcCount>;

        specialinvoke $r14.<java.lang.String: void <init>(char[],int,int)>($r6, 0, $i1);

        $i1 = virtualinvoke r4.<java.lang.String: int indexOf(java.lang.String)>("encoding");

     label54:
        if $i1 == -1 goto label08;

     label55:
        $c2 = virtualinvoke r4.<java.lang.String: char charAt(int)>($i1);

     label56:
        $i3 = (int) $c2;

        if $i3 == 34 goto label59;

     label57:
        $c2 = virtualinvoke r4.<java.lang.String: char charAt(int)>($i1);

     label58:
        $i3 = (int) $c2;

        if $i3 == 39 goto label59;

        $i1 = $i1 + 1;

        goto label55;

     label59:
        $i3 = $i1 + 1;

     label60:
        $c2 = virtualinvoke r4.<java.lang.String: char charAt(int)>($i1);

     label61:
        $i1 = (int) $c2;

     label62:
        $i1 = virtualinvoke r4.<java.lang.String: int indexOf(int,int)>($i1, $i3);

        r4 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int,int)>($i3, $i1);

     label63:
        r5 = r4;

        goto label08;

     label64:
        $i1 = -65536 & i0;

        if $i1 != -131072 goto label71;

        r5 = "UTF-16LE";

     label65:
        $r6 = r0.<org.kxml2.io.KXmlParser: char[] srcBuf>;

        $r7 = r0.<org.kxml2.io.KXmlParser: char[] srcBuf>;

        $c2 = $r7[3];

     label66:
        i0 = (int) $c2;

        i0 = i0 << 8;

     label67:
        $r7 = r0.<org.kxml2.io.KXmlParser: char[] srcBuf>;

        $c2 = $r7[2];

     label68:
        $i1 = (int) $c2;

        i0 = i0 | $i1;

        $c2 = (char) i0;

     label69:
        $r6[0] = $c2;

        r0.<org.kxml2.io.KXmlParser: int srcCount> = 1;

     label70:
        goto label14;

     label71:
        i0 = i0 & -256;

        if i0 != -272908544 goto label14;

        r5 = "UTF-8";

     label72:
        $r6 = r0.<org.kxml2.io.KXmlParser: char[] srcBuf>;

        $r7 = r0.<org.kxml2.io.KXmlParser: char[] srcBuf>;

        $c2 = $r7[3];

        $r6[0] = $c2;

        r0.<org.kxml2.io.KXmlParser: int srcCount> = 1;

     label73:
        goto label14;

        catch java.lang.Exception from label02 to label03 with label26;
        catch java.lang.Exception from label04 to label05 with label26;
        catch java.lang.Exception from label06 to label07 with label26;
        catch java.lang.Exception from label09 to label10 with label26;
        catch java.lang.Exception from label11 to label12 with label26;
        catch java.lang.Exception from label13 to label14 with label26;
        catch java.lang.Exception from label15 to label16 with label26;
        catch java.lang.Exception from label17 to label18 with label26;
        catch java.lang.Exception from label20 to label21 with label26;
        catch java.lang.Exception from label22 to label23 with label26;
        catch java.lang.Exception from label24 to label25 with label26;
        catch java.lang.Exception from label28 to label29 with label26;
        catch java.lang.Exception from label31 to label32 with label26;
        catch java.lang.Exception from label34 to label35 with label26;
        catch java.lang.Exception from label37 to label38 with label26;
        catch java.lang.Exception from label40 to label41 with label26;
        catch java.lang.Exception from label43 to label44 with label26;
        catch java.lang.Exception from label45 to label46 with label26;
        catch java.lang.Exception from label47 to label48 with label26;
        catch java.lang.Exception from label49 to label50 with label26;
        catch java.lang.Exception from label51 to label52 with label26;
        catch java.lang.Exception from label53 to label54 with label26;
        catch java.lang.Exception from label55 to label56 with label26;
        catch java.lang.Exception from label57 to label58 with label26;
        catch java.lang.Exception from label60 to label61 with label26;
        catch java.lang.Exception from label62 to label63 with label26;
        catch java.lang.Exception from label65 to label66 with label26;
        catch java.lang.Exception from label67 to label68 with label26;
        catch java.lang.Exception from label69 to label70 with label26;
        catch java.lang.Exception from label72 to label73 with label26;
    }

    public void setInput(java.io.Reader) throws org.xmlpull.v1.XmlPullParserException
    {
        org.kxml2.io.KXmlParser r0;
        java.io.Reader $r1;
        java.util.Hashtable $r2, $r3;

        r0 := @this: org.kxml2.io.KXmlParser;

        $r1 := @parameter0: java.io.Reader;

        r0.<org.kxml2.io.KXmlParser: java.io.Reader reader> = $r1;

        r0.<org.kxml2.io.KXmlParser: int line> = 1;

        r0.<org.kxml2.io.KXmlParser: int column> = 0;

        r0.<org.kxml2.io.KXmlParser: int type> = 0;

        r0.<org.kxml2.io.KXmlParser: java.lang.String name> = null;

        r0.<org.kxml2.io.KXmlParser: java.lang.String namespace> = null;

        r0.<org.kxml2.io.KXmlParser: boolean degenerated> = 0;

        r0.<org.kxml2.io.KXmlParser: int attributeCount> = -1;

        r0.<org.kxml2.io.KXmlParser: java.lang.String encoding> = null;

        r0.<org.kxml2.io.KXmlParser: java.lang.String version> = null;

        r0.<org.kxml2.io.KXmlParser: java.lang.Boolean standalone> = null;

        if $r1 != null goto label1;

        return;

     label1:
        r0.<org.kxml2.io.KXmlParser: int srcPos> = 0;

        r0.<org.kxml2.io.KXmlParser: int srcCount> = 0;

        r0.<org.kxml2.io.KXmlParser: int peekCount> = 0;

        r0.<org.kxml2.io.KXmlParser: int depth> = 0;

        $r3 = new java.util.Hashtable;

        specialinvoke $r3.<java.util.Hashtable: void <init>()>();

        r0.<org.kxml2.io.KXmlParser: java.util.Hashtable entityMap> = $r3;

        $r2 = r0.<org.kxml2.io.KXmlParser: java.util.Hashtable entityMap>;

        virtualinvoke $r2.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("amp", "&");

        $r2 = r0.<org.kxml2.io.KXmlParser: java.util.Hashtable entityMap>;

        virtualinvoke $r2.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("apos", "\'");

        $r2 = r0.<org.kxml2.io.KXmlParser: java.util.Hashtable entityMap>;

        virtualinvoke $r2.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("gt", ">");

        $r2 = r0.<org.kxml2.io.KXmlParser: java.util.Hashtable entityMap>;

        virtualinvoke $r2.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("lt", "<");

        $r2 = r0.<org.kxml2.io.KXmlParser: java.util.Hashtable entityMap>;

        virtualinvoke $r2.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("quot", "\"");

        return;
    }

    public void setProperty(java.lang.String, java.lang.Object) throws org.xmlpull.v1.XmlPullParserException
    {
        org.xmlpull.v1.XmlPullParserException $r3;
        org.kxml2.io.KXmlParser r0;
        java.lang.Object $r2;
        java.lang.StringBuilder $r4;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: org.kxml2.io.KXmlParser;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object;

        $z0 = specialinvoke r0.<org.kxml2.io.KXmlParser: boolean isProp(java.lang.String,boolean,java.lang.String)>($r1, 1, "location");

        if $z0 == 0 goto label1;

        r0.<org.kxml2.io.KXmlParser: java.lang.Object location> = $r2;

        return;

     label1:
        $r3 = new org.xmlpull.v1.XmlPullParserException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unsupported property: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r1);

        throw $r3;
    }

    public void skipSubTree() throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        int $i0, i1;
        org.kxml2.io.KXmlParser r0;

        r0 := @this: org.kxml2.io.KXmlParser;

        virtualinvoke r0.<org.kxml2.io.KXmlParser: void require(int,java.lang.String,java.lang.String)>(2, null, null);

        i1 = 1;

     label1:
        if i1 <= 0 goto label3;

        $i0 = virtualinvoke r0.<org.kxml2.io.KXmlParser: int next()>();

        if $i0 != 3 goto label2;

        $i0 = -1;

        i1 = i1 + $i0;

        goto label1;

     label2:
        if $i0 != 2 goto label1;

        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    public static void <clinit>()
    {
        <org.kxml2.io.KXmlParser: int XML_DECL> = 998;

        <org.kxml2.io.KXmlParser: java.lang.String UNEXPECTED_EOF> = "Unexpected EOF";

        <org.kxml2.io.KXmlParser: int LEGACY> = 999;

        <org.kxml2.io.KXmlParser: java.lang.String ILLEGAL_TYPE> = "Wrong event type";

        return;
    }
}
