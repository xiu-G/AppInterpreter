class twitter4j.internal.async.ExecuteThread extends java.lang.Thread
{
    private static twitter4j.internal.logging.Logger logger;
    private boolean alive;
    twitter4j.internal.async.DispatcherImpl q;

    static void <clinit>()
    {
        twitter4j.internal.logging.Logger $r0;

        $r0 = staticinvoke <twitter4j.internal.logging.Logger: twitter4j.internal.logging.Logger getLogger(java.lang.Class)>(class "Ltwitter4j/internal/async/ExecuteThread;");

        <twitter4j.internal.async.ExecuteThread: twitter4j.internal.logging.Logger logger> = $r0;

        return;
    }

    void <init>(java.lang.String, twitter4j.internal.async.DispatcherImpl, int)
    {
        twitter4j.internal.async.ExecuteThread r0;
        twitter4j.internal.async.DispatcherImpl $r2;
        int $i0;
        java.lang.StringBuilder $r3;
        java.lang.String $r1;

        r0 := @this: twitter4j.internal.async.ExecuteThread;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: twitter4j.internal.async.DispatcherImpl;

        $i0 := @parameter2: int;

        $r3 = new java.lang.StringBuilder;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<java.lang.Thread: void <init>(java.lang.String)>($r1);

        r0.<twitter4j.internal.async.ExecuteThread: boolean alive> = 1;

        r0.<twitter4j.internal.async.ExecuteThread: twitter4j.internal.async.DispatcherImpl q> = $r2;

        return;
    }

    public void run()
    {
        twitter4j.internal.logging.Logger $r1;
        twitter4j.internal.async.ExecuteThread r0;
        twitter4j.internal.async.DispatcherImpl $r3;
        java.lang.Runnable $r2;
        java.lang.Exception $r4;
        boolean $z0;

        r0 := @this: twitter4j.internal.async.ExecuteThread;

     label1:
        $z0 = r0.<twitter4j.internal.async.ExecuteThread: boolean alive>;

        if $z0 != 0 goto label2;

        return;

     label2:
        $r3 = r0.<twitter4j.internal.async.ExecuteThread: twitter4j.internal.async.DispatcherImpl q>;

        $r2 = virtualinvoke $r3.<twitter4j.internal.async.DispatcherImpl: java.lang.Runnable poll()>();

        if $r2 == null goto label1;

     label3:
        interfaceinvoke $r2.<java.lang.Runnable: void run()>();

     label4:
        goto label1;

     label5:
        $r4 := @caughtexception;

        $r1 = <twitter4j.internal.async.ExecuteThread: twitter4j.internal.logging.Logger logger>;

        virtualinvoke $r1.<twitter4j.internal.logging.Logger: void error(java.lang.String,java.lang.Throwable)>("Got an exception while running a task:", $r4);

        goto label1;

        catch java.lang.Exception from label3 to label4 with label5;
    }

    public void shutdown()
    {
        twitter4j.internal.async.ExecuteThread r0;

        r0 := @this: twitter4j.internal.async.ExecuteThread;

        r0.<twitter4j.internal.async.ExecuteThread: boolean alive> = 0;

        return;
    }
}
