public class proguard.classfile.attribute.visitor.AllExceptionInfoVisitor extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.attribute.visitor.AttributeVisitor
{
    private final proguard.classfile.attribute.visitor.ExceptionInfoVisitor exceptionInfoVisitor;

    public void <init>(proguard.classfile.attribute.visitor.ExceptionInfoVisitor)
    {
        proguard.classfile.attribute.visitor.AllExceptionInfoVisitor r0;
        proguard.classfile.attribute.visitor.ExceptionInfoVisitor $r1;

        r0 := @this: proguard.classfile.attribute.visitor.AllExceptionInfoVisitor;

        $r1 := @parameter0: proguard.classfile.attribute.visitor.ExceptionInfoVisitor;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        r0.<proguard.classfile.attribute.visitor.AllExceptionInfoVisitor: proguard.classfile.attribute.visitor.ExceptionInfoVisitor exceptionInfoVisitor> = $r1;

        return;
    }

    public void visitAnyAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.Attribute)
    {
        proguard.classfile.attribute.visitor.AllExceptionInfoVisitor r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.Attribute $r2;

        r0 := @this: proguard.classfile.attribute.visitor.AllExceptionInfoVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.Attribute;

        return;
    }

    public void visitCodeAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.attribute.visitor.ExceptionInfoVisitor $r4;
        proguard.classfile.attribute.visitor.AllExceptionInfoVisitor r0;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.classfile.attribute.visitor.AllExceptionInfoVisitor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 = r0.<proguard.classfile.attribute.visitor.AllExceptionInfoVisitor: proguard.classfile.attribute.visitor.ExceptionInfoVisitor exceptionInfoVisitor>;

        virtualinvoke $r3.<proguard.classfile.attribute.CodeAttribute: void exceptionsAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.visitor.ExceptionInfoVisitor)>($r1, $r2, $r4);

        return;
    }
}
