public class proguard.classfile.editor.ConstantPoolRemapper extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.visitor.ClassVisitor, proguard.classfile.constant.visitor.ConstantVisitor, proguard.classfile.visitor.MemberVisitor, proguard.classfile.attribute.visitor.AttributeVisitor, proguard.classfile.instruction.visitor.InstructionVisitor, proguard.classfile.attribute.visitor.InnerClassesInfoVisitor, proguard.classfile.attribute.visitor.ExceptionInfoVisitor, proguard.classfile.attribute.preverification.visitor.StackMapFrameVisitor, proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor, proguard.classfile.attribute.visitor.LocalVariableInfoVisitor, proguard.classfile.attribute.visitor.LocalVariableTypeInfoVisitor, proguard.classfile.attribute.'annotation'.visitor.AnnotationVisitor, proguard.classfile.attribute.'annotation'.visitor.ElementValueVisitor
{
    private final proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor;
    private int[] constantIndexMap;

    public void <init>()
    {
        proguard.classfile.editor.CodeAttributeEditor $r1;
        proguard.classfile.editor.ConstantPoolRemapper r0;

        r0 := @this: proguard.classfile.editor.ConstantPoolRemapper;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        $r1 = new proguard.classfile.editor.CodeAttributeEditor;

        specialinvoke $r1.<proguard.classfile.editor.CodeAttributeEditor: void <init>()>();

        r0.<proguard.classfile.editor.ConstantPoolRemapper: proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor> = $r1;

        return;
    }

    private int remapConstantIndex(int)
    {
        int $i0;
        proguard.classfile.editor.ConstantPoolRemapper r0;
        int[] $r1;

        r0 := @this: proguard.classfile.editor.ConstantPoolRemapper;

        $i0 := @parameter0: int;

        $r1 = r0.<proguard.classfile.editor.ConstantPoolRemapper: int[] constantIndexMap>;

        $i0 = $r1[$i0];

        return $i0;
    }

    private void remapConstantIndexArray(int[], int)
    {
        proguard.classfile.editor.ConstantPoolRemapper r0;
        int[] $r1;
        int $i0, $i1, $i2;

        r0 := @this: proguard.classfile.editor.ConstantPoolRemapper;

        $r1 := @parameter0: int[];

        $i0 := @parameter1: int;

        $i2 = 0;

     label1:
        if $i2 >= $i0 goto label2;

        $i1 = $r1[$i2];

        $i1 = specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: int remapConstantIndex(int)>($i1);

        $r1[$i2] = $i1;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return;
    }

    private void visitMember(proguard.classfile.ProgramClass, proguard.classfile.ProgramMember)
    {
        proguard.classfile.ProgramMember $r2;
        proguard.classfile.editor.ConstantPoolRemapper r0;
        int $i0;
        proguard.classfile.ProgramClass $r1;

        r0 := @this: proguard.classfile.editor.ConstantPoolRemapper;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.ProgramMember;

        $i0 = $r2.<proguard.classfile.ProgramMember: int u2nameIndex>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: int remapConstantIndex(int)>($i0);

        $r2.<proguard.classfile.ProgramMember: int u2nameIndex> = $i0;

        $i0 = $r2.<proguard.classfile.ProgramMember: int u2descriptorIndex>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: int remapConstantIndex(int)>($i0);

        $r2.<proguard.classfile.ProgramMember: int u2descriptorIndex> = $i0;

        virtualinvoke $r2.<proguard.classfile.ProgramMember: void attributesAccept(proguard.classfile.ProgramClass,proguard.classfile.attribute.visitor.AttributeVisitor)>($r1, r0);

        return;
    }

    public void setConstantIndexMap(int[])
    {
        proguard.classfile.editor.ConstantPoolRemapper r0;
        int[] $r1;

        r0 := @this: proguard.classfile.editor.ConstantPoolRemapper;

        $r1 := @parameter0: int[];

        r0.<proguard.classfile.editor.ConstantPoolRemapper: int[] constantIndexMap> = $r1;

        return;
    }

    public void visitAnnotation(proguard.classfile.Clazz, proguard.classfile.attribute.'annotation'.Annotation)
    {
        proguard.classfile.attribute.'annotation'.Annotation $r2;
        proguard.classfile.editor.ConstantPoolRemapper r0;
        proguard.classfile.Clazz $r1;
        int $i0;

        r0 := @this: proguard.classfile.editor.ConstantPoolRemapper;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.Annotation;

        $i0 = $r2.<proguard.classfile.attribute.'annotation'.Annotation: int u2typeIndex>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: int remapConstantIndex(int)>($i0);

        $r2.<proguard.classfile.attribute.'annotation'.Annotation: int u2typeIndex> = $i0;

        virtualinvoke $r2.<proguard.classfile.attribute.'annotation'.Annotation: void elementValuesAccept(proguard.classfile.Clazz,proguard.classfile.attribute.'annotation'.visitor.ElementValueVisitor)>($r1, r0);

        return;
    }

    public void visitAnnotationDefaultAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.'annotation'.AnnotationDefaultAttribute)
    {
        proguard.classfile.editor.ConstantPoolRemapper r0;
        proguard.classfile.Clazz $r1;
        int $i0;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.'annotation'.AnnotationDefaultAttribute $r3;

        r0 := @this: proguard.classfile.editor.ConstantPoolRemapper;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.AnnotationDefaultAttribute;

        $i0 = $r3.<proguard.classfile.attribute.'annotation'.AnnotationDefaultAttribute: int u2attributeNameIndex>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: int remapConstantIndex(int)>($i0);

        $r3.<proguard.classfile.attribute.'annotation'.AnnotationDefaultAttribute: int u2attributeNameIndex> = $i0;

        virtualinvoke $r3.<proguard.classfile.attribute.'annotation'.AnnotationDefaultAttribute: void defaultValueAccept(proguard.classfile.Clazz,proguard.classfile.attribute.'annotation'.visitor.ElementValueVisitor)>($r1, r0);

        return;
    }

    public void visitAnnotationElementValue(proguard.classfile.Clazz, proguard.classfile.attribute.'annotation'.Annotation, proguard.classfile.attribute.'annotation'.AnnotationElementValue)
    {
        proguard.classfile.attribute.'annotation'.Annotation $r2;
        proguard.classfile.editor.ConstantPoolRemapper r0;
        proguard.classfile.Clazz $r1;
        int $i0;
        proguard.classfile.attribute.'annotation'.AnnotationElementValue $r3;

        r0 := @this: proguard.classfile.editor.ConstantPoolRemapper;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.Annotation;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.AnnotationElementValue;

        $i0 = $r3.<proguard.classfile.attribute.'annotation'.AnnotationElementValue: int u2elementNameIndex>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: int remapConstantIndex(int)>($i0);

        $r3.<proguard.classfile.attribute.'annotation'.AnnotationElementValue: int u2elementNameIndex> = $i0;

        virtualinvoke $r3.<proguard.classfile.attribute.'annotation'.AnnotationElementValue: void annotationAccept(proguard.classfile.Clazz,proguard.classfile.attribute.'annotation'.visitor.AnnotationVisitor)>($r1, r0);

        return;
    }

    public void visitAnyAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.'annotation'.AnnotationsAttribute)
    {
        proguard.classfile.editor.ConstantPoolRemapper r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.'annotation'.AnnotationsAttribute $r2;
        int $i0;

        r0 := @this: proguard.classfile.editor.ConstantPoolRemapper;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.AnnotationsAttribute;

        $i0 = $r2.<proguard.classfile.attribute.'annotation'.AnnotationsAttribute: int u2attributeNameIndex>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: int remapConstantIndex(int)>($i0);

        $r2.<proguard.classfile.attribute.'annotation'.AnnotationsAttribute: int u2attributeNameIndex> = $i0;

        virtualinvoke $r2.<proguard.classfile.attribute.'annotation'.AnnotationsAttribute: void annotationsAccept(proguard.classfile.Clazz,proguard.classfile.attribute.'annotation'.visitor.AnnotationVisitor)>($r1, r0);

        return;
    }

    public void visitAnyInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.Instruction)
    {
        proguard.classfile.editor.ConstantPoolRemapper r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.instruction.Instruction $r4;
        int $i0;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.classfile.editor.ConstantPoolRemapper;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.Instruction;

        return;
    }

    public void visitAnyParameterAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute)
    {
        proguard.classfile.editor.ConstantPoolRemapper r0;
        proguard.classfile.Clazz $r1;
        int $i0;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute $r3;

        r0 := @this: proguard.classfile.editor.ConstantPoolRemapper;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute;

        $i0 = $r3.<proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute: int u2attributeNameIndex>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: int remapConstantIndex(int)>($i0);

        $r3.<proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute: int u2attributeNameIndex> = $i0;

        virtualinvoke $r3.<proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute: void annotationsAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.'annotation'.visitor.AnnotationVisitor)>($r1, $r2, r0);

        return;
    }

    public void visitAnyStackMapFrame(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.attribute.preverification.StackMapFrame)
    {
        proguard.classfile.editor.ConstantPoolRemapper r0;
        proguard.classfile.attribute.preverification.StackMapFrame $r4;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.classfile.editor.ConstantPoolRemapper;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.attribute.preverification.StackMapFrame;

        return;
    }

    public void visitAnyVerificationType(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.attribute.preverification.VerificationType)
    {
        proguard.classfile.editor.ConstantPoolRemapper r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.preverification.VerificationType $r4;

        r0 := @this: proguard.classfile.editor.ConstantPoolRemapper;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.attribute.preverification.VerificationType;

        return;
    }

    public void visitArrayElementValue(proguard.classfile.Clazz, proguard.classfile.attribute.'annotation'.Annotation, proguard.classfile.attribute.'annotation'.ArrayElementValue)
    {
        proguard.classfile.attribute.'annotation'.Annotation $r2;
        proguard.classfile.editor.ConstantPoolRemapper r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.'annotation'.ArrayElementValue $r3;
        int $i0;

        r0 := @this: proguard.classfile.editor.ConstantPoolRemapper;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.Annotation;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.ArrayElementValue;

        $i0 = $r3.<proguard.classfile.attribute.'annotation'.ArrayElementValue: int u2elementNameIndex>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: int remapConstantIndex(int)>($i0);

        $r3.<proguard.classfile.attribute.'annotation'.ArrayElementValue: int u2elementNameIndex> = $i0;

        virtualinvoke $r3.<proguard.classfile.attribute.'annotation'.ArrayElementValue: void elementValuesAccept(proguard.classfile.Clazz,proguard.classfile.attribute.'annotation'.Annotation,proguard.classfile.attribute.'annotation'.visitor.ElementValueVisitor)>($r1, $r2, r0);

        return;
    }

    public void visitClassConstant(proguard.classfile.Clazz, proguard.classfile.constant.ClassConstant)
    {
        proguard.classfile.constant.ClassConstant $r2;
        proguard.classfile.editor.ConstantPoolRemapper r0;
        proguard.classfile.Clazz $r1;
        int $i0;

        r0 := @this: proguard.classfile.editor.ConstantPoolRemapper;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.ClassConstant;

        $i0 = $r2.<proguard.classfile.constant.ClassConstant: int u2nameIndex>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: int remapConstantIndex(int)>($i0);

        $r2.<proguard.classfile.constant.ClassConstant: int u2nameIndex> = $i0;

        return;
    }

    public void visitClassElementValue(proguard.classfile.Clazz, proguard.classfile.attribute.'annotation'.Annotation, proguard.classfile.attribute.'annotation'.ClassElementValue)
    {
        proguard.classfile.attribute.'annotation'.Annotation $r2;
        proguard.classfile.editor.ConstantPoolRemapper r0;
        proguard.classfile.attribute.'annotation'.ClassElementValue $r3;
        proguard.classfile.Clazz $r1;
        int $i0;

        r0 := @this: proguard.classfile.editor.ConstantPoolRemapper;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.Annotation;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.ClassElementValue;

        $i0 = $r3.<proguard.classfile.attribute.'annotation'.ClassElementValue: int u2elementNameIndex>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: int remapConstantIndex(int)>($i0);

        $r3.<proguard.classfile.attribute.'annotation'.ClassElementValue: int u2elementNameIndex> = $i0;

        $i0 = $r3.<proguard.classfile.attribute.'annotation'.ClassElementValue: int u2classInfoIndex>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: int remapConstantIndex(int)>($i0);

        $r3.<proguard.classfile.attribute.'annotation'.ClassElementValue: int u2classInfoIndex> = $i0;

        return;
    }

    public void visitCodeAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute)
    {
        proguard.classfile.editor.ConstantPoolRemapper r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.editor.CodeAttributeEditor $r4;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.classfile.editor.ConstantPoolRemapper;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 = $r3.<proguard.classfile.attribute.CodeAttribute: int u2attributeNameIndex>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: int remapConstantIndex(int)>($i0);

        $r3.<proguard.classfile.attribute.CodeAttribute: int u2attributeNameIndex> = $i0;

        $r4 = r0.<proguard.classfile.editor.ConstantPoolRemapper: proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor>;

        $i0 = $r3.<proguard.classfile.attribute.CodeAttribute: int u4codeLength>;

        virtualinvoke $r4.<proguard.classfile.editor.CodeAttributeEditor: void reset(int)>($i0);

        virtualinvoke $r3.<proguard.classfile.attribute.CodeAttribute: void instructionsAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.instruction.visitor.InstructionVisitor)>($r1, $r2, r0);

        $r4 = r0.<proguard.classfile.editor.ConstantPoolRemapper: proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor>;

        virtualinvoke $r4.<proguard.classfile.editor.CodeAttributeEditor: void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute)>($r1, $r2, $r3);

        virtualinvoke $r3.<proguard.classfile.attribute.CodeAttribute: void exceptionsAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.visitor.ExceptionInfoVisitor)>($r1, $r2, r0);

        virtualinvoke $r3.<proguard.classfile.attribute.CodeAttribute: void attributesAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.visitor.AttributeVisitor)>($r1, $r2, r0);

        return;
    }

    public void visitConstantElementValue(proguard.classfile.Clazz, proguard.classfile.attribute.'annotation'.Annotation, proguard.classfile.attribute.'annotation'.ConstantElementValue)
    {
        proguard.classfile.attribute.'annotation'.ConstantElementValue $r3;
        proguard.classfile.attribute.'annotation'.Annotation $r2;
        proguard.classfile.editor.ConstantPoolRemapper r0;
        proguard.classfile.Clazz $r1;
        int $i0;

        r0 := @this: proguard.classfile.editor.ConstantPoolRemapper;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.Annotation;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.ConstantElementValue;

        $i0 = $r3.<proguard.classfile.attribute.'annotation'.ConstantElementValue: int u2elementNameIndex>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: int remapConstantIndex(int)>($i0);

        $r3.<proguard.classfile.attribute.'annotation'.ConstantElementValue: int u2elementNameIndex> = $i0;

        $i0 = $r3.<proguard.classfile.attribute.'annotation'.ConstantElementValue: int u2constantValueIndex>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: int remapConstantIndex(int)>($i0);

        $r3.<proguard.classfile.attribute.'annotation'.ConstantElementValue: int u2constantValueIndex> = $i0;

        return;
    }

    public void visitConstantInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.ConstantInstruction)
    {
        proguard.classfile.editor.CodeAttributeEditor $r7;
        proguard.classfile.editor.ConstantPoolRemapper r0;
        byte $b1;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.instruction.Instruction $r6;
        int $i0, $i2, $i3;
        proguard.classfile.instruction.ConstantInstruction $r4, $r5;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.classfile.editor.ConstantPoolRemapper;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.ConstantInstruction;

        $i3 = $r4.<proguard.classfile.instruction.ConstantInstruction: int constantIndex>;

        $i3 = specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: int remapConstantIndex(int)>($i3);

        $i2 = $r4.<proguard.classfile.instruction.ConstantInstruction: int constantIndex>;

        if $i3 == $i2 goto label1;

        $r5 = new proguard.classfile.instruction.ConstantInstruction;

        $b1 = $r4.<proguard.classfile.instruction.ConstantInstruction: byte opcode>;

        $i2 = $r4.<proguard.classfile.instruction.ConstantInstruction: int constant>;

        specialinvoke $r5.<proguard.classfile.instruction.ConstantInstruction: void <init>(byte,int,int)>($b1, $i3, $i2);

        $r6 = virtualinvoke $r5.<proguard.classfile.instruction.ConstantInstruction: proguard.classfile.instruction.Instruction shrink()>();

        $r7 = r0.<proguard.classfile.editor.ConstantPoolRemapper: proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor>;

        virtualinvoke $r7.<proguard.classfile.editor.CodeAttributeEditor: void replaceInstruction(int,proguard.classfile.instruction.Instruction)>($i0, $r6);

     label1:
        return;
    }

    public void visitConstantValueAttribute(proguard.classfile.Clazz, proguard.classfile.Field, proguard.classfile.attribute.ConstantValueAttribute)
    {
        proguard.classfile.editor.ConstantPoolRemapper r0;
        proguard.classfile.Clazz $r1;
        int $i0;
        proguard.classfile.Field $r2;
        proguard.classfile.attribute.ConstantValueAttribute $r3;

        r0 := @this: proguard.classfile.editor.ConstantPoolRemapper;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Field;

        $r3 := @parameter2: proguard.classfile.attribute.ConstantValueAttribute;

        $i0 = $r3.<proguard.classfile.attribute.ConstantValueAttribute: int u2attributeNameIndex>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: int remapConstantIndex(int)>($i0);

        $r3.<proguard.classfile.attribute.ConstantValueAttribute: int u2attributeNameIndex> = $i0;

        $i0 = $r3.<proguard.classfile.attribute.ConstantValueAttribute: int u2constantValueIndex>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: int remapConstantIndex(int)>($i0);

        $r3.<proguard.classfile.attribute.ConstantValueAttribute: int u2constantValueIndex> = $i0;

        return;
    }

    public void visitDeprecatedAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.DeprecatedAttribute)
    {
        proguard.classfile.editor.ConstantPoolRemapper r0;
        proguard.classfile.Clazz $r1;
        int $i0;
        proguard.classfile.attribute.DeprecatedAttribute $r2;

        r0 := @this: proguard.classfile.editor.ConstantPoolRemapper;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.DeprecatedAttribute;

        $i0 = $r2.<proguard.classfile.attribute.DeprecatedAttribute: int u2attributeNameIndex>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: int remapConstantIndex(int)>($i0);

        $r2.<proguard.classfile.attribute.DeprecatedAttribute: int u2attributeNameIndex> = $i0;

        return;
    }

    public void visitDoubleConstant(proguard.classfile.Clazz, proguard.classfile.constant.DoubleConstant)
    {
        proguard.classfile.editor.ConstantPoolRemapper r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.constant.DoubleConstant $r2;

        r0 := @this: proguard.classfile.editor.ConstantPoolRemapper;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.DoubleConstant;

        return;
    }

    public void visitEnclosingMethodAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.EnclosingMethodAttribute)
    {
        proguard.classfile.attribute.EnclosingMethodAttribute $r2;
        proguard.classfile.editor.ConstantPoolRemapper r0;
        proguard.classfile.Clazz $r1;
        int $i0;

        r0 := @this: proguard.classfile.editor.ConstantPoolRemapper;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.EnclosingMethodAttribute;

        $i0 = $r2.<proguard.classfile.attribute.EnclosingMethodAttribute: int u2attributeNameIndex>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: int remapConstantIndex(int)>($i0);

        $r2.<proguard.classfile.attribute.EnclosingMethodAttribute: int u2attributeNameIndex> = $i0;

        $i0 = $r2.<proguard.classfile.attribute.EnclosingMethodAttribute: int u2classIndex>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: int remapConstantIndex(int)>($i0);

        $r2.<proguard.classfile.attribute.EnclosingMethodAttribute: int u2classIndex> = $i0;

        $i0 = $r2.<proguard.classfile.attribute.EnclosingMethodAttribute: int u2nameAndTypeIndex>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: int remapConstantIndex(int)>($i0);

        $r2.<proguard.classfile.attribute.EnclosingMethodAttribute: int u2nameAndTypeIndex> = $i0;

        return;
    }

    public void visitEnumConstantElementValue(proguard.classfile.Clazz, proguard.classfile.attribute.'annotation'.Annotation, proguard.classfile.attribute.'annotation'.EnumConstantElementValue)
    {
        proguard.classfile.attribute.'annotation'.Annotation $r2;
        proguard.classfile.editor.ConstantPoolRemapper r0;
        proguard.classfile.Clazz $r1;
        int $i0;
        proguard.classfile.attribute.'annotation'.EnumConstantElementValue $r3;

        r0 := @this: proguard.classfile.editor.ConstantPoolRemapper;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.Annotation;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.EnumConstantElementValue;

        $i0 = $r3.<proguard.classfile.attribute.'annotation'.EnumConstantElementValue: int u2elementNameIndex>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: int remapConstantIndex(int)>($i0);

        $r3.<proguard.classfile.attribute.'annotation'.EnumConstantElementValue: int u2elementNameIndex> = $i0;

        $i0 = $r3.<proguard.classfile.attribute.'annotation'.EnumConstantElementValue: int u2typeNameIndex>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: int remapConstantIndex(int)>($i0);

        $r3.<proguard.classfile.attribute.'annotation'.EnumConstantElementValue: int u2typeNameIndex> = $i0;

        $i0 = $r3.<proguard.classfile.attribute.'annotation'.EnumConstantElementValue: int u2constantNameIndex>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: int remapConstantIndex(int)>($i0);

        $r3.<proguard.classfile.attribute.'annotation'.EnumConstantElementValue: int u2constantNameIndex> = $i0;

        return;
    }

    public void visitExceptionInfo(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.ExceptionInfo)
    {
        proguard.classfile.editor.ConstantPoolRemapper r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.ExceptionInfo $r4;

        r0 := @this: proguard.classfile.editor.ConstantPoolRemapper;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.ExceptionInfo;

        $i0 = $r4.<proguard.classfile.attribute.ExceptionInfo: int u2catchType>;

        if $i0 == 0 goto label1;

        $i0 = $r4.<proguard.classfile.attribute.ExceptionInfo: int u2catchType>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: int remapConstantIndex(int)>($i0);

        $r4.<proguard.classfile.attribute.ExceptionInfo: int u2catchType> = $i0;

     label1:
        return;
    }

    public void visitExceptionsAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.ExceptionsAttribute)
    {
        proguard.classfile.editor.ConstantPoolRemapper r0;
        proguard.classfile.Clazz $r1;
        int[] $r4;
        proguard.classfile.attribute.ExceptionsAttribute $r3;
        int $i0;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.classfile.editor.ConstantPoolRemapper;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.ExceptionsAttribute;

        $i0 = $r3.<proguard.classfile.attribute.ExceptionsAttribute: int u2attributeNameIndex>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: int remapConstantIndex(int)>($i0);

        $r3.<proguard.classfile.attribute.ExceptionsAttribute: int u2attributeNameIndex> = $i0;

        $r4 = $r3.<proguard.classfile.attribute.ExceptionsAttribute: int[] u2exceptionIndexTable>;

        $i0 = $r3.<proguard.classfile.attribute.ExceptionsAttribute: int u2exceptionIndexTableLength>;

        specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: void remapConstantIndexArray(int[],int)>($r4, $i0);

        return;
    }

    public void visitFieldrefConstant(proguard.classfile.Clazz, proguard.classfile.constant.FieldrefConstant)
    {
        proguard.classfile.editor.ConstantPoolRemapper r0;
        proguard.classfile.Clazz $r1;
        int $i0;
        proguard.classfile.constant.FieldrefConstant $r2;

        r0 := @this: proguard.classfile.editor.ConstantPoolRemapper;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.FieldrefConstant;

        $i0 = $r2.<proguard.classfile.constant.FieldrefConstant: int u2classIndex>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: int remapConstantIndex(int)>($i0);

        $r2.<proguard.classfile.constant.FieldrefConstant: int u2classIndex> = $i0;

        $i0 = $r2.<proguard.classfile.constant.FieldrefConstant: int u2nameAndTypeIndex>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: int remapConstantIndex(int)>($i0);

        $r2.<proguard.classfile.constant.FieldrefConstant: int u2nameAndTypeIndex> = $i0;

        return;
    }

    public void visitFloatConstant(proguard.classfile.Clazz, proguard.classfile.constant.FloatConstant)
    {
        proguard.classfile.constant.FloatConstant $r2;
        proguard.classfile.editor.ConstantPoolRemapper r0;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.classfile.editor.ConstantPoolRemapper;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.FloatConstant;

        return;
    }

    public void visitFullFrame(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.attribute.preverification.FullFrame)
    {
        proguard.classfile.editor.ConstantPoolRemapper r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.attribute.preverification.FullFrame $r4;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.classfile.editor.ConstantPoolRemapper;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.attribute.preverification.FullFrame;

        virtualinvoke $r4.<proguard.classfile.attribute.preverification.FullFrame: void variablesAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor)>($r1, $r2, $r3, $i0, r0);

        virtualinvoke $r4.<proguard.classfile.attribute.preverification.FullFrame: void stackAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor)>($r1, $r2, $r3, $i0, r0);

        return;
    }

    public void visitInnerClassesAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.InnerClassesAttribute)
    {
        proguard.classfile.attribute.InnerClassesAttribute $r2;
        proguard.classfile.editor.ConstantPoolRemapper r0;
        proguard.classfile.Clazz $r1;
        int $i0;

        r0 := @this: proguard.classfile.editor.ConstantPoolRemapper;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.InnerClassesAttribute;

        $i0 = $r2.<proguard.classfile.attribute.InnerClassesAttribute: int u2attributeNameIndex>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: int remapConstantIndex(int)>($i0);

        $r2.<proguard.classfile.attribute.InnerClassesAttribute: int u2attributeNameIndex> = $i0;

        virtualinvoke $r2.<proguard.classfile.attribute.InnerClassesAttribute: void innerClassEntriesAccept(proguard.classfile.Clazz,proguard.classfile.attribute.visitor.InnerClassesInfoVisitor)>($r1, r0);

        return;
    }

    public void visitInnerClassesInfo(proguard.classfile.Clazz, proguard.classfile.attribute.InnerClassesInfo)
    {
        proguard.classfile.editor.ConstantPoolRemapper r0;
        proguard.classfile.Clazz $r1;
        int $i0;
        proguard.classfile.attribute.InnerClassesInfo $r2;

        r0 := @this: proguard.classfile.editor.ConstantPoolRemapper;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.InnerClassesInfo;

        $i0 = $r2.<proguard.classfile.attribute.InnerClassesInfo: int u2innerClassIndex>;

        if $i0 == 0 goto label1;

        $i0 = $r2.<proguard.classfile.attribute.InnerClassesInfo: int u2innerClassIndex>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: int remapConstantIndex(int)>($i0);

        $r2.<proguard.classfile.attribute.InnerClassesInfo: int u2innerClassIndex> = $i0;

     label1:
        $i0 = $r2.<proguard.classfile.attribute.InnerClassesInfo: int u2outerClassIndex>;

        if $i0 == 0 goto label2;

        $i0 = $r2.<proguard.classfile.attribute.InnerClassesInfo: int u2outerClassIndex>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: int remapConstantIndex(int)>($i0);

        $r2.<proguard.classfile.attribute.InnerClassesInfo: int u2outerClassIndex> = $i0;

     label2:
        $i0 = $r2.<proguard.classfile.attribute.InnerClassesInfo: int u2innerNameIndex>;

        if $i0 == 0 goto label3;

        $i0 = $r2.<proguard.classfile.attribute.InnerClassesInfo: int u2innerNameIndex>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: int remapConstantIndex(int)>($i0);

        $r2.<proguard.classfile.attribute.InnerClassesInfo: int u2innerNameIndex> = $i0;

     label3:
        return;
    }

    public void visitIntegerConstant(proguard.classfile.Clazz, proguard.classfile.constant.IntegerConstant)
    {
        proguard.classfile.editor.ConstantPoolRemapper r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.constant.IntegerConstant $r2;

        r0 := @this: proguard.classfile.editor.ConstantPoolRemapper;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.IntegerConstant;

        return;
    }

    public void visitInterfaceMethodrefConstant(proguard.classfile.Clazz, proguard.classfile.constant.InterfaceMethodrefConstant)
    {
        proguard.classfile.editor.ConstantPoolRemapper r0;
        proguard.classfile.Clazz $r1;
        int $i0;
        proguard.classfile.constant.InterfaceMethodrefConstant $r2;

        r0 := @this: proguard.classfile.editor.ConstantPoolRemapper;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.InterfaceMethodrefConstant;

        $i0 = $r2.<proguard.classfile.constant.InterfaceMethodrefConstant: int u2classIndex>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: int remapConstantIndex(int)>($i0);

        $r2.<proguard.classfile.constant.InterfaceMethodrefConstant: int u2classIndex> = $i0;

        $i0 = $r2.<proguard.classfile.constant.InterfaceMethodrefConstant: int u2nameAndTypeIndex>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: int remapConstantIndex(int)>($i0);

        $r2.<proguard.classfile.constant.InterfaceMethodrefConstant: int u2nameAndTypeIndex> = $i0;

        return;
    }

    public void visitLibraryClass(proguard.classfile.LibraryClass)
    {
        proguard.classfile.LibraryClass $r1;
        proguard.classfile.editor.ConstantPoolRemapper r0;

        r0 := @this: proguard.classfile.editor.ConstantPoolRemapper;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        return;
    }

    public void visitLibraryField(proguard.classfile.LibraryClass, proguard.classfile.LibraryField)
    {
        proguard.classfile.LibraryClass $r1;
        proguard.classfile.editor.ConstantPoolRemapper r0;
        proguard.classfile.LibraryField $r2;

        r0 := @this: proguard.classfile.editor.ConstantPoolRemapper;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        $r2 := @parameter1: proguard.classfile.LibraryField;

        return;
    }

    public void visitLibraryMethod(proguard.classfile.LibraryClass, proguard.classfile.LibraryMethod)
    {
        proguard.classfile.LibraryMethod $r2;
        proguard.classfile.LibraryClass $r1;
        proguard.classfile.editor.ConstantPoolRemapper r0;

        r0 := @this: proguard.classfile.editor.ConstantPoolRemapper;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        $r2 := @parameter1: proguard.classfile.LibraryMethod;

        return;
    }

    public void visitLineNumberTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LineNumberTableAttribute)
    {
        proguard.classfile.attribute.LineNumberTableAttribute $r4;
        proguard.classfile.editor.ConstantPoolRemapper r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.classfile.editor.ConstantPoolRemapper;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.LineNumberTableAttribute;

        $i0 = $r4.<proguard.classfile.attribute.LineNumberTableAttribute: int u2attributeNameIndex>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: int remapConstantIndex(int)>($i0);

        $r4.<proguard.classfile.attribute.LineNumberTableAttribute: int u2attributeNameIndex> = $i0;

        return;
    }

    public void visitLocalVariableInfo(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LocalVariableInfo)
    {
        proguard.classfile.editor.ConstantPoolRemapper r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.attribute.LocalVariableInfo $r4;
        int $i0;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.classfile.editor.ConstantPoolRemapper;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.LocalVariableInfo;

        $i0 = $r4.<proguard.classfile.attribute.LocalVariableInfo: int u2nameIndex>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: int remapConstantIndex(int)>($i0);

        $r4.<proguard.classfile.attribute.LocalVariableInfo: int u2nameIndex> = $i0;

        $i0 = $r4.<proguard.classfile.attribute.LocalVariableInfo: int u2descriptorIndex>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: int remapConstantIndex(int)>($i0);

        $r4.<proguard.classfile.attribute.LocalVariableInfo: int u2descriptorIndex> = $i0;

        return;
    }

    public void visitLocalVariableTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LocalVariableTableAttribute)
    {
        proguard.classfile.editor.ConstantPoolRemapper r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.LocalVariableTableAttribute $r4;

        r0 := @this: proguard.classfile.editor.ConstantPoolRemapper;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.LocalVariableTableAttribute;

        $i0 = $r4.<proguard.classfile.attribute.LocalVariableTableAttribute: int u2attributeNameIndex>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: int remapConstantIndex(int)>($i0);

        $r4.<proguard.classfile.attribute.LocalVariableTableAttribute: int u2attributeNameIndex> = $i0;

        virtualinvoke $r4.<proguard.classfile.attribute.LocalVariableTableAttribute: void localVariablesAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.visitor.LocalVariableInfoVisitor)>($r1, $r2, $r3, r0);

        return;
    }

    public void visitLocalVariableTypeInfo(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LocalVariableTypeInfo)
    {
        proguard.classfile.editor.ConstantPoolRemapper r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.LocalVariableTypeInfo $r4;

        r0 := @this: proguard.classfile.editor.ConstantPoolRemapper;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.LocalVariableTypeInfo;

        $i0 = $r4.<proguard.classfile.attribute.LocalVariableTypeInfo: int u2nameIndex>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: int remapConstantIndex(int)>($i0);

        $r4.<proguard.classfile.attribute.LocalVariableTypeInfo: int u2nameIndex> = $i0;

        $i0 = $r4.<proguard.classfile.attribute.LocalVariableTypeInfo: int u2signatureIndex>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: int remapConstantIndex(int)>($i0);

        $r4.<proguard.classfile.attribute.LocalVariableTypeInfo: int u2signatureIndex> = $i0;

        return;
    }

    public void visitLocalVariableTypeTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LocalVariableTypeTableAttribute)
    {
        proguard.classfile.editor.ConstantPoolRemapper r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.LocalVariableTypeTableAttribute $r4;

        r0 := @this: proguard.classfile.editor.ConstantPoolRemapper;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.LocalVariableTypeTableAttribute;

        $i0 = $r4.<proguard.classfile.attribute.LocalVariableTypeTableAttribute: int u2attributeNameIndex>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: int remapConstantIndex(int)>($i0);

        $r4.<proguard.classfile.attribute.LocalVariableTypeTableAttribute: int u2attributeNameIndex> = $i0;

        virtualinvoke $r4.<proguard.classfile.attribute.LocalVariableTypeTableAttribute: void localVariablesAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.visitor.LocalVariableTypeInfoVisitor)>($r1, $r2, $r3, r0);

        return;
    }

    public void visitLongConstant(proguard.classfile.Clazz, proguard.classfile.constant.LongConstant)
    {
        proguard.classfile.constant.LongConstant $r2;
        proguard.classfile.editor.ConstantPoolRemapper r0;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.classfile.editor.ConstantPoolRemapper;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.LongConstant;

        return;
    }

    public void visitMethodrefConstant(proguard.classfile.Clazz, proguard.classfile.constant.MethodrefConstant)
    {
        proguard.classfile.editor.ConstantPoolRemapper r0;
        proguard.classfile.Clazz $r1;
        int $i0;
        proguard.classfile.constant.MethodrefConstant $r2;

        r0 := @this: proguard.classfile.editor.ConstantPoolRemapper;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.MethodrefConstant;

        $i0 = $r2.<proguard.classfile.constant.MethodrefConstant: int u2classIndex>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: int remapConstantIndex(int)>($i0);

        $r2.<proguard.classfile.constant.MethodrefConstant: int u2classIndex> = $i0;

        $i0 = $r2.<proguard.classfile.constant.MethodrefConstant: int u2nameAndTypeIndex>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: int remapConstantIndex(int)>($i0);

        $r2.<proguard.classfile.constant.MethodrefConstant: int u2nameAndTypeIndex> = $i0;

        return;
    }

    public void visitMoreZeroFrame(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.attribute.preverification.MoreZeroFrame)
    {
        proguard.classfile.editor.ConstantPoolRemapper r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.preverification.MoreZeroFrame $r4;

        r0 := @this: proguard.classfile.editor.ConstantPoolRemapper;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.attribute.preverification.MoreZeroFrame;

        virtualinvoke $r4.<proguard.classfile.attribute.preverification.MoreZeroFrame: void additionalVariablesAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor)>($r1, $r2, $r3, $i0, r0);

        return;
    }

    public void visitNameAndTypeConstant(proguard.classfile.Clazz, proguard.classfile.constant.NameAndTypeConstant)
    {
        proguard.classfile.editor.ConstantPoolRemapper r0;
        proguard.classfile.Clazz $r1;
        int $i0;
        proguard.classfile.constant.NameAndTypeConstant $r2;

        r0 := @this: proguard.classfile.editor.ConstantPoolRemapper;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.NameAndTypeConstant;

        $i0 = $r2.<proguard.classfile.constant.NameAndTypeConstant: int u2nameIndex>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: int remapConstantIndex(int)>($i0);

        $r2.<proguard.classfile.constant.NameAndTypeConstant: int u2nameIndex> = $i0;

        $i0 = $r2.<proguard.classfile.constant.NameAndTypeConstant: int u2descriptorIndex>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: int remapConstantIndex(int)>($i0);

        $r2.<proguard.classfile.constant.NameAndTypeConstant: int u2descriptorIndex> = $i0;

        return;
    }

    public void visitObjectType(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.attribute.preverification.ObjectType)
    {
        proguard.classfile.editor.ConstantPoolRemapper r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.preverification.ObjectType $r4;

        r0 := @this: proguard.classfile.editor.ConstantPoolRemapper;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.attribute.preverification.ObjectType;

        $i0 = $r4.<proguard.classfile.attribute.preverification.ObjectType: int u2classIndex>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: int remapConstantIndex(int)>($i0);

        $r4.<proguard.classfile.attribute.preverification.ObjectType: int u2classIndex> = $i0;

        return;
    }

    public void visitProgramClass(proguard.classfile.ProgramClass)
    {
        proguard.classfile.editor.ConstantPoolRemapper r0;
        int[] $r2;
        int $i0;
        proguard.classfile.ProgramClass $r1;

        r0 := @this: proguard.classfile.editor.ConstantPoolRemapper;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $i0 = $r1.<proguard.classfile.ProgramClass: int u2thisClass>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: int remapConstantIndex(int)>($i0);

        $r1.<proguard.classfile.ProgramClass: int u2thisClass> = $i0;

        $i0 = $r1.<proguard.classfile.ProgramClass: int u2superClass>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: int remapConstantIndex(int)>($i0);

        $r1.<proguard.classfile.ProgramClass: int u2superClass> = $i0;

        $r2 = $r1.<proguard.classfile.ProgramClass: int[] u2interfaces>;

        $i0 = $r1.<proguard.classfile.ProgramClass: int u2interfacesCount>;

        specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: void remapConstantIndexArray(int[],int)>($r2, $i0);

        virtualinvoke $r1.<proguard.classfile.ProgramClass: void constantPoolEntriesAccept(proguard.classfile.constant.visitor.ConstantVisitor)>(r0);

        virtualinvoke $r1.<proguard.classfile.ProgramClass: void fieldsAccept(proguard.classfile.visitor.MemberVisitor)>(r0);

        virtualinvoke $r1.<proguard.classfile.ProgramClass: void methodsAccept(proguard.classfile.visitor.MemberVisitor)>(r0);

        virtualinvoke $r1.<proguard.classfile.ProgramClass: void attributesAccept(proguard.classfile.attribute.visitor.AttributeVisitor)>(r0);

        return;
    }

    public void visitProgramField(proguard.classfile.ProgramClass, proguard.classfile.ProgramField)
    {
        proguard.classfile.editor.ConstantPoolRemapper r0;
        proguard.classfile.ProgramField $r2;
        proguard.classfile.ProgramClass $r1;

        r0 := @this: proguard.classfile.editor.ConstantPoolRemapper;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.ProgramField;

        specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: void visitMember(proguard.classfile.ProgramClass,proguard.classfile.ProgramMember)>($r1, $r2);

        return;
    }

    public void visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod)
    {
        proguard.classfile.editor.ConstantPoolRemapper r0;
        proguard.classfile.ProgramClass $r1;
        proguard.classfile.ProgramMethod $r2;

        r0 := @this: proguard.classfile.editor.ConstantPoolRemapper;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.ProgramMethod;

        specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: void visitMember(proguard.classfile.ProgramClass,proguard.classfile.ProgramMember)>($r1, $r2);

        return;
    }

    public void visitSameOneFrame(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.attribute.preverification.SameOneFrame)
    {
        proguard.classfile.editor.ConstantPoolRemapper r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.attribute.preverification.SameOneFrame $r4;
        int $i0;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.classfile.editor.ConstantPoolRemapper;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.attribute.preverification.SameOneFrame;

        virtualinvoke $r4.<proguard.classfile.attribute.preverification.SameOneFrame: void stackItemAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor)>($r1, $r2, $r3, $i0, r0);

        return;
    }

    public void visitSignatureAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.SignatureAttribute)
    {
        proguard.classfile.editor.ConstantPoolRemapper r0;
        proguard.classfile.Clazz $r1;
        int $i0;
        proguard.classfile.attribute.SignatureAttribute $r2;

        r0 := @this: proguard.classfile.editor.ConstantPoolRemapper;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.SignatureAttribute;

        $i0 = $r2.<proguard.classfile.attribute.SignatureAttribute: int u2attributeNameIndex>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: int remapConstantIndex(int)>($i0);

        $r2.<proguard.classfile.attribute.SignatureAttribute: int u2attributeNameIndex> = $i0;

        $i0 = $r2.<proguard.classfile.attribute.SignatureAttribute: int u2signatureIndex>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: int remapConstantIndex(int)>($i0);

        $r2.<proguard.classfile.attribute.SignatureAttribute: int u2signatureIndex> = $i0;

        return;
    }

    public void visitSourceDirAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.SourceDirAttribute)
    {
        proguard.classfile.attribute.SourceDirAttribute $r2;
        proguard.classfile.editor.ConstantPoolRemapper r0;
        proguard.classfile.Clazz $r1;
        int $i0;

        r0 := @this: proguard.classfile.editor.ConstantPoolRemapper;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.SourceDirAttribute;

        $i0 = $r2.<proguard.classfile.attribute.SourceDirAttribute: int u2attributeNameIndex>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: int remapConstantIndex(int)>($i0);

        $r2.<proguard.classfile.attribute.SourceDirAttribute: int u2attributeNameIndex> = $i0;

        $i0 = $r2.<proguard.classfile.attribute.SourceDirAttribute: int u2sourceDirIndex>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: int remapConstantIndex(int)>($i0);

        $r2.<proguard.classfile.attribute.SourceDirAttribute: int u2sourceDirIndex> = $i0;

        return;
    }

    public void visitSourceFileAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.SourceFileAttribute)
    {
        proguard.classfile.editor.ConstantPoolRemapper r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.SourceFileAttribute $r2;
        int $i0;

        r0 := @this: proguard.classfile.editor.ConstantPoolRemapper;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.SourceFileAttribute;

        $i0 = $r2.<proguard.classfile.attribute.SourceFileAttribute: int u2attributeNameIndex>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: int remapConstantIndex(int)>($i0);

        $r2.<proguard.classfile.attribute.SourceFileAttribute: int u2attributeNameIndex> = $i0;

        $i0 = $r2.<proguard.classfile.attribute.SourceFileAttribute: int u2sourceFileIndex>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: int remapConstantIndex(int)>($i0);

        $r2.<proguard.classfile.attribute.SourceFileAttribute: int u2sourceFileIndex> = $i0;

        return;
    }

    public void visitStackMapAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.preverification.StackMapAttribute)
    {
        proguard.classfile.editor.ConstantPoolRemapper r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.attribute.preverification.StackMapAttribute $r4;
        int $i0;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.classfile.editor.ConstantPoolRemapper;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.preverification.StackMapAttribute;

        $i0 = $r4.<proguard.classfile.attribute.preverification.StackMapAttribute: int u2attributeNameIndex>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: int remapConstantIndex(int)>($i0);

        $r4.<proguard.classfile.attribute.preverification.StackMapAttribute: int u2attributeNameIndex> = $i0;

        virtualinvoke $r4.<proguard.classfile.attribute.preverification.StackMapAttribute: void stackMapFramesAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.preverification.visitor.StackMapFrameVisitor)>($r1, $r2, $r3, r0);

        return;
    }

    public void visitStackMapTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.preverification.StackMapTableAttribute)
    {
        proguard.classfile.attribute.preverification.StackMapTableAttribute $r4;
        proguard.classfile.editor.ConstantPoolRemapper r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.classfile.editor.ConstantPoolRemapper;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.preverification.StackMapTableAttribute;

        $i0 = $r4.<proguard.classfile.attribute.preverification.StackMapTableAttribute: int u2attributeNameIndex>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: int remapConstantIndex(int)>($i0);

        $r4.<proguard.classfile.attribute.preverification.StackMapTableAttribute: int u2attributeNameIndex> = $i0;

        virtualinvoke $r4.<proguard.classfile.attribute.preverification.StackMapTableAttribute: void stackMapFramesAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.preverification.visitor.StackMapFrameVisitor)>($r1, $r2, $r3, r0);

        return;
    }

    public void visitStringConstant(proguard.classfile.Clazz, proguard.classfile.constant.StringConstant)
    {
        proguard.classfile.editor.ConstantPoolRemapper r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.constant.StringConstant $r2;
        int $i0;

        r0 := @this: proguard.classfile.editor.ConstantPoolRemapper;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.StringConstant;

        $i0 = $r2.<proguard.classfile.constant.StringConstant: int u2stringIndex>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: int remapConstantIndex(int)>($i0);

        $r2.<proguard.classfile.constant.StringConstant: int u2stringIndex> = $i0;

        return;
    }

    public void visitSyntheticAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.SyntheticAttribute)
    {
        proguard.classfile.editor.ConstantPoolRemapper r0;
        proguard.classfile.Clazz $r1;
        int $i0;
        proguard.classfile.attribute.SyntheticAttribute $r2;

        r0 := @this: proguard.classfile.editor.ConstantPoolRemapper;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.SyntheticAttribute;

        $i0 = $r2.<proguard.classfile.attribute.SyntheticAttribute: int u2attributeNameIndex>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: int remapConstantIndex(int)>($i0);

        $r2.<proguard.classfile.attribute.SyntheticAttribute: int u2attributeNameIndex> = $i0;

        return;
    }

    public void visitUnknownAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.UnknownAttribute)
    {
        proguard.classfile.editor.ConstantPoolRemapper r0;
        proguard.classfile.Clazz $r1;
        int $i0;
        proguard.classfile.attribute.UnknownAttribute $r2;

        r0 := @this: proguard.classfile.editor.ConstantPoolRemapper;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.UnknownAttribute;

        $i0 = $r2.<proguard.classfile.attribute.UnknownAttribute: int u2attributeNameIndex>;

        $i0 = specialinvoke r0.<proguard.classfile.editor.ConstantPoolRemapper: int remapConstantIndex(int)>($i0);

        $r2.<proguard.classfile.attribute.UnknownAttribute: int u2attributeNameIndex> = $i0;

        return;
    }

    public void visitUtf8Constant(proguard.classfile.Clazz, proguard.classfile.constant.Utf8Constant)
    {
        proguard.classfile.editor.ConstantPoolRemapper r0;
        proguard.classfile.constant.Utf8Constant $r2;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.classfile.editor.ConstantPoolRemapper;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.Utf8Constant;

        return;
    }
}
