public final class jp extends java.lang.Object
{
    public java.util.Hashtable a;
    java.io.RandomAccessFile b;
    private java.util.Hashtable c;
    private java.lang.String d;

    public void <init>(java.io.File, java.lang.String)
    {
        java.lang.Throwable $r5, $r6;
        java.io.RandomAccessFile $r4;
        jp r0;
        java.lang.String $r2;
        java.io.File $r1;
        java.util.Hashtable $r3;

        r0 := @this: jp;

        $r1 := @parameter0: java.io.File;

        $r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.Hashtable;

        specialinvoke $r3.<java.util.Hashtable: void <init>(int)>(509);

        r0.<jp: java.util.Hashtable a> = $r3;

        $r3 = new java.util.Hashtable;

        specialinvoke $r3.<java.util.Hashtable: void <init>(int)>(509);

        r0.<jp: java.util.Hashtable c> = $r3;

        r0.<jp: java.lang.String d> = null;

        r0.<jp: java.lang.String d> = "UTF-8";

        $r4 = new java.io.RandomAccessFile;

        specialinvoke $r4.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>($r1, "r");

        r0.<jp: java.io.RandomAccessFile b> = $r4;

     label1:
        specialinvoke r0.<jp: void a()>();

        specialinvoke r0.<jp: void b()>();

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        $r4 = r0.<jp: java.io.RandomAccessFile b>;

     label4:
        virtualinvoke $r4.<java.io.RandomAccessFile: void close()>();

     label5:
        throw $r5;

     label6:
        $r6 := @caughtexception;

        goto label5;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.io.IOException from label4 to label5 with label6;
    }

    private java.lang.String a(byte[])
    {
        java.lang.Throwable $r4;
        byte[] $r1;
        java.util.zip.ZipException $r6;
        jp r0;
        java.lang.String $r2, $r3, $r5;
        java.io.UnsupportedEncodingException $r7;

        r0 := @this: jp;

        $r1 := @parameter0: byte[];

        $r2 = r0.<jp: java.lang.String d>;

        if $r2 != null goto label1;

        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(byte[])>($r1);

        return $r3;

     label1:
        $r5 = new java.lang.String;

        $r3 = r0.<jp: java.lang.String d>;

     label2:
        specialinvoke $r5.<java.lang.String: void <init>(byte[],java.lang.String)>($r1, $r3);

     label3:
        return $r5;

     label4:
        $r4 := @caughtexception;

        $r6 = new java.util.zip.ZipException;

        $r7 = (java.io.UnsupportedEncodingException) $r4;

        $r2 = virtualinvoke $r7.<java.io.UnsupportedEncodingException: java.lang.String getMessage()>();

        specialinvoke $r6.<java.util.zip.ZipException: void <init>(java.lang.String)>($r2);

        throw $r6;

        catch java.io.UnsupportedEncodingException from label2 to label3 with label4;
    }

    private void a()
    {
        java.io.RandomAccessFile $r1;
        byte[] $r2, $r3, $r4;
        jp r0;
        java.util.Date $r7;
        jr $r9, $r13;
        long $l0, $l3, $l4;
        java.util.Calendar $r6;
        byte $b1;
        int $i2, $i5, $i6, $i7;
        java.lang.String $r8;
        java.util.Hashtable $r10;
        boolean $z0;
        java.util.zip.ZipException $r11;
        org.apache.tools.zip.ZipEntry $r5, $r12;

        r0 := @this: jp;

        $r1 = r0.<jp: java.io.RandomAccessFile b>;

        $l0 = virtualinvoke $r1.<java.io.RandomAccessFile: long length()>();

        $l0 = $l0 - 22L;

        $b1 = $l0 cmp 0L;

        $i2 = (int) $b1;

        if $i2 < 0 goto label7;

        $r1 = r0.<jp: java.io.RandomAccessFile b>;

        virtualinvoke $r1.<java.io.RandomAccessFile: void seek(long)>($l0);

        $r2 = <js: byte[] f>;

        $r1 = r0.<jp: java.io.RandomAccessFile b>;

        $i2 = virtualinvoke $r1.<java.io.RandomAccessFile: int read()>();

     label1:
        if $i2 == -1 goto label7;

        $b1 = $r2[0];

        $i5 = (int) $b1;

        if $i2 != $i5 goto label3;

        $r1 = r0.<jp: java.io.RandomAccessFile b>;

        $i2 = virtualinvoke $r1.<java.io.RandomAccessFile: int read()>();

        $b1 = $r2[1];

        $i5 = (int) $b1;

        if $i2 != $i5 goto label3;

        $r1 = r0.<jp: java.io.RandomAccessFile b>;

        $i2 = virtualinvoke $r1.<java.io.RandomAccessFile: int read()>();

        $b1 = $r2[2];

        $i5 = (int) $b1;

        if $i2 != $i5 goto label3;

        $r1 = r0.<jp: java.io.RandomAccessFile b>;

        $i2 = virtualinvoke $r1.<java.io.RandomAccessFile: int read()>();

        $b1 = $r2[3];

        $i5 = (int) $b1;

        if $i2 != $i5 goto label3;

        $z0 = 1;

     label2:
        if $z0 != 0 goto label4;

        $r11 = new java.util.zip.ZipException;

        specialinvoke $r11.<java.util.zip.ZipException: void <init>(java.lang.String)>("archive is not a ZIP archive");

        throw $r11;

     label3:
        $r1 = r0.<jp: java.io.RandomAccessFile b>;

        $l0 = $l0 - 1L;

        virtualinvoke $r1.<java.io.RandomAccessFile: void seek(long)>($l0);

        $r1 = r0.<jp: java.io.RandomAccessFile b>;

        $i2 = virtualinvoke $r1.<java.io.RandomAccessFile: int read()>();

        goto label1;

     label4:
        $r1 = r0.<jp: java.io.RandomAccessFile b>;

        $l0 = $l0 + 16L;

        virtualinvoke $r1.<java.io.RandomAccessFile: void seek(long)>($l0);

        $r2 = newarray (byte)[4];

        $r1 = r0.<jp: java.io.RandomAccessFile b>;

        virtualinvoke $r1.<java.io.RandomAccessFile: void readFully(byte[])>($r2);

        $r1 = r0.<jp: java.io.RandomAccessFile b>;

        $l0 = staticinvoke <org.apache.tools.zip.ZipLong: long getValue(byte[])>($r2);

        virtualinvoke $r1.<java.io.RandomAccessFile: void seek(long)>($l0);

        $r2 = newarray (byte)[42];

        $r3 = newarray (byte)[4];

        $r1 = r0.<jp: java.io.RandomAccessFile b>;

        virtualinvoke $r1.<java.io.RandomAccessFile: void readFully(byte[])>($r3);

        $l3 = staticinvoke <org.apache.tools.zip.ZipLong: long getValue(byte[])>($r3);

        $r4 = <js: byte[] e>;

        $l0 = staticinvoke <org.apache.tools.zip.ZipLong: long getValue(byte[])>($r4);

     label5:
        $b1 = $l3 cmp $l0;

        if $b1 != 0 goto label6;

        $r1 = r0.<jp: java.io.RandomAccessFile b>;

        virtualinvoke $r1.<java.io.RandomAccessFile: void readFully(byte[])>($r2);

        $r12 = new org.apache.tools.zip.ZipEntry;

        $r5 = $r12;

        specialinvoke $r12.<org.apache.tools.zip.ZipEntry: void <init>()>();

        $i2 = staticinvoke <org.apache.tools.zip.ZipShort: int getValue(byte[],int)>($r2, 0);

        $i2 = $i2 >> 8;

        $i2 = $i2 & 15;

        $r5.<org.apache.tools.zip.ZipEntry: int a> = $i2;

        $i2 = staticinvoke <org.apache.tools.zip.ZipShort: int getValue(byte[],int)>($r2, 6);

        virtualinvoke $r5.<org.apache.tools.zip.ZipEntry: void setMethod(int)>($i2);

        $l3 = staticinvoke <org.apache.tools.zip.ZipLong: long getValue(byte[],int)>($r2, 8);

        $r6 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $l4 = $l3 >> 25;

        $l4 = $l4 & 127L;

        $i2 = (int) $l4;

        $i2 = $i2 + 1980;

        virtualinvoke $r6.<java.util.Calendar: void set(int,int)>(1, $i2);

        $l4 = $l3 >> 21;

        $l4 = $l4 & 15L;

        $i2 = (int) $l4;

        $i2 = $i2 - 1;

        virtualinvoke $r6.<java.util.Calendar: void set(int,int)>(2, $i2);

        $l4 = $l3 >> 16;

        $i2 = (int) $l4;

        $i2 = $i2 & 31;

        virtualinvoke $r6.<java.util.Calendar: void set(int,int)>(5, $i2);

        $l4 = $l3 >> 11;

        $i2 = (int) $l4;

        $i2 = $i2 & 31;

        virtualinvoke $r6.<java.util.Calendar: void set(int,int)>(11, $i2);

        $l4 = $l3 >> 5;

        $i2 = (int) $l4;

        $i2 = $i2 & 63;

        virtualinvoke $r6.<java.util.Calendar: void set(int,int)>(12, $i2);

        $l3 = $l3 << 1;

        $i2 = (int) $l3;

        $i2 = $i2 & 62;

        virtualinvoke $r6.<java.util.Calendar: void set(int,int)>(13, $i2);

        $r7 = virtualinvoke $r6.<java.util.Calendar: java.util.Date getTime()>();

        $l3 = virtualinvoke $r7.<java.util.Date: long getTime()>();

        virtualinvoke $r5.<org.apache.tools.zip.ZipEntry: void setTime(long)>($l3);

        $l3 = staticinvoke <org.apache.tools.zip.ZipLong: long getValue(byte[],int)>($r2, 12);

        virtualinvoke $r5.<org.apache.tools.zip.ZipEntry: void setCrc(long)>($l3);

        $l3 = staticinvoke <org.apache.tools.zip.ZipLong: long getValue(byte[],int)>($r2, 16);

        virtualinvoke $r5.<org.apache.tools.zip.ZipEntry: void setCompressedSize(long)>($l3);

        $l3 = staticinvoke <org.apache.tools.zip.ZipLong: long getValue(byte[],int)>($r2, 20);

        virtualinvoke $r5.<org.apache.tools.zip.ZipEntry: void setSize(long)>($l3);

        $i2 = staticinvoke <org.apache.tools.zip.ZipShort: int getValue(byte[],int)>($r2, 24);

        $i5 = staticinvoke <org.apache.tools.zip.ZipShort: int getValue(byte[],int)>($r2, 26);

        $i6 = staticinvoke <org.apache.tools.zip.ZipShort: int getValue(byte[],int)>($r2, 28);

        $i7 = staticinvoke <org.apache.tools.zip.ZipShort: int getValue(byte[],int)>($r2, 32);

        virtualinvoke $r5.<org.apache.tools.zip.ZipEntry: void setInternalAttributes(int)>($i7);

        $l3 = staticinvoke <org.apache.tools.zip.ZipLong: long getValue(byte[],int)>($r2, 34);

        virtualinvoke $r5.<org.apache.tools.zip.ZipEntry: void setExternalAttributes(long)>($l3);

        $r4 = newarray (byte)[$i2];

        $r1 = r0.<jp: java.io.RandomAccessFile b>;

        virtualinvoke $r1.<java.io.RandomAccessFile: void readFully(byte[])>($r4);

        $r8 = specialinvoke r0.<jp: java.lang.String a(byte[])>($r4);

        $r5.<org.apache.tools.zip.ZipEntry: java.lang.String b> = $r8;

        $r13 = new jr;

        $r9 = $r13;

        specialinvoke $r13.<jr: void <init>()>();

        $l3 = staticinvoke <org.apache.tools.zip.ZipLong: long getValue(byte[],int)>($r2, 38);

        $r9.<jr: long a> = $l3;

        $r10 = r0.<jp: java.util.Hashtable a>;

        virtualinvoke $r10.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r9);

        $r10 = r0.<jp: java.util.Hashtable c>;

        $r8 = virtualinvoke $r5.<org.apache.tools.zip.ZipEntry: java.lang.String getName()>();

        virtualinvoke $r10.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r5);

        $r1 = r0.<jp: java.io.RandomAccessFile b>;

        virtualinvoke $r1.<java.io.RandomAccessFile: int skipBytes(int)>($i5);

        $r4 = newarray (byte)[$i6];

        $r1 = r0.<jp: java.io.RandomAccessFile b>;

        virtualinvoke $r1.<java.io.RandomAccessFile: void readFully(byte[])>($r4);

        $r8 = specialinvoke r0.<jp: java.lang.String a(byte[])>($r4);

        virtualinvoke $r5.<org.apache.tools.zip.ZipEntry: void setComment(java.lang.String)>($r8);

        $r1 = r0.<jp: java.io.RandomAccessFile b>;

        virtualinvoke $r1.<java.io.RandomAccessFile: void readFully(byte[])>($r3);

        $l3 = staticinvoke <org.apache.tools.zip.ZipLong: long getValue(byte[])>($r3);

        goto label5;

     label6:
        return;

     label7:
        $z0 = 0;

        goto label2;
    }

    private void b()
    {
        java.io.RandomAccessFile $r1;
        byte[] $r7;
        java.util.Enumeration $r3;
        jp r0;
        jr $r6;
        long $l0, $l1;
        org.apache.tools.zip.ZipEntry $r5;
        int $i2, $i3;
        java.lang.Object $r4;
        java.util.Hashtable $r2;
        boolean $z0;

        r0 := @this: jp;

        $r2 = r0.<jp: java.util.Hashtable a>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.util.Enumeration keys()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r5 = (org.apache.tools.zip.ZipEntry) $r4;

        $r2 = r0.<jp: java.util.Hashtable a>;

        $r4 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r5);

        $r6 = (jr) $r4;

        $l0 = $r6.<jr: long a>;

        $r1 = r0.<jp: java.io.RandomAccessFile b>;

        $l1 = $l0 + 26L;

        virtualinvoke $r1.<java.io.RandomAccessFile: void seek(long)>($l1);

        $r7 = newarray (byte)[2];

        $r1 = r0.<jp: java.io.RandomAccessFile b>;

        virtualinvoke $r1.<java.io.RandomAccessFile: void readFully(byte[])>($r7);

        $i2 = staticinvoke <org.apache.tools.zip.ZipShort: int getValue(byte[])>($r7);

        $r1 = r0.<jp: java.io.RandomAccessFile b>;

        virtualinvoke $r1.<java.io.RandomAccessFile: void readFully(byte[])>($r7);

        $i3 = staticinvoke <org.apache.tools.zip.ZipShort: int getValue(byte[])>($r7);

        $r1 = r0.<jp: java.io.RandomAccessFile b>;

        virtualinvoke $r1.<java.io.RandomAccessFile: int skipBytes(int)>($i2);

        $r7 = newarray (byte)[$i3];

        $r1 = r0.<jp: java.io.RandomAccessFile b>;

        virtualinvoke $r1.<java.io.RandomAccessFile: void readFully(byte[])>($r7);

        virtualinvoke $r5.<org.apache.tools.zip.ZipEntry: void setExtra(byte[])>($r7);

        $l0 = $l0 + 26L;

        $l0 = $l0 + 2L;

        $l0 = $l0 + 2L;

        $l1 = (long) $i2;

        $l0 = $l0 + $l1;

        $l1 = (long) $i3;

        $l0 = $l0 + $l1;

        $r6.<jr: long b> = $l0;

        goto label1;

     label2:
        return;
    }

    public final java.io.InputStream a(org.apache.tools.zip.ZipEntry)
    {
        java.util.zip.ZipException $r6;
        java.util.zip.Inflater $r10;
        jp r0;
        jq $r5;
        java.util.zip.InflaterInputStream $r9;
        jr $r4;
        long $l0, $l1;
        org.apache.tools.zip.ZipEntry $r1;
        int $i2;
        java.lang.Object $r3;
        java.lang.StringBuilder $r7;
        java.lang.String $r8;
        java.util.Hashtable $r2;

        r0 := @this: jp;

        $r1 := @parameter0: org.apache.tools.zip.ZipEntry;

        $r2 = r0.<jp: java.util.Hashtable a>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (jr) $r3;

        if $r4 != null goto label2;

        $r5 = null;

     label1:
        return $r5;

     label2:
        $l0 = $r4.<jr: long b>;

        $r5 = new jq;

        $l1 = virtualinvoke $r1.<org.apache.tools.zip.ZipEntry: long getCompressedSize()>();

        specialinvoke $r5.<jq: void <init>(jp,long,long)>(r0, $l0, $l1);

        $i2 = virtualinvoke $r1.<org.apache.tools.zip.ZipEntry: int getMethod()>();

        lookupswitch($i2)
        {
            case 0: goto label1;
            case 8: goto label4;
            default: goto label3;
        };

     label3:
        $r6 = new java.util.zip.ZipException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found unsupported compression method ");

        $i2 = virtualinvoke $r1.<org.apache.tools.zip.ZipEntry: int getMethod()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.util.zip.ZipException: void <init>(java.lang.String)>($r8);

        throw $r6;

     label4:
        $r5.<jq: boolean a> = 1;

        $r9 = new java.util.zip.InflaterInputStream;

        $r10 = new java.util.zip.Inflater;

        specialinvoke $r10.<java.util.zip.Inflater: void <init>(boolean)>(1);

        specialinvoke $r9.<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream,java.util.zip.Inflater)>($r5, $r10);

        return $r9;
    }
}
