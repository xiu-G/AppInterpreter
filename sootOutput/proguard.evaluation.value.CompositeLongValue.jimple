final class proguard.evaluation.value.CompositeLongValue extends proguard.evaluation.value.SpecificLongValue
{
    public static final byte ADD;
    public static final byte AND;
    public static final byte DIVIDE;
    public static final byte MULTIPLY;
    public static final byte OR;
    public static final byte REMAINDER;
    public static final byte SHIFT_LEFT;
    public static final byte SHIFT_RIGHT;
    public static final byte SUBTRACT;
    public static final byte UNSIGNED_SHIFT_RIGHT;
    public static final byte XOR;
    private final proguard.evaluation.value.LongValue longValue1;
    private final proguard.evaluation.value.Value longValue2;
    private final byte operation;

    public void <init>(proguard.evaluation.value.LongValue, byte, proguard.evaluation.value.Value)
    {
        proguard.evaluation.value.CompositeLongValue r0;
        byte $b0;
        proguard.evaluation.value.LongValue $r1;
        proguard.evaluation.value.Value $r2;

        r0 := @this: proguard.evaluation.value.CompositeLongValue;

        $r1 := @parameter0: proguard.evaluation.value.LongValue;

        $b0 := @parameter1: byte;

        $r2 := @parameter2: proguard.evaluation.value.Value;

        specialinvoke r0.<proguard.evaluation.value.SpecificLongValue: void <init>()>();

        r0.<proguard.evaluation.value.CompositeLongValue: proguard.evaluation.value.LongValue longValue1> = $r1;

        r0.<proguard.evaluation.value.CompositeLongValue: byte operation> = $b0;

        r0.<proguard.evaluation.value.CompositeLongValue: proguard.evaluation.value.Value longValue2> = $r2;

        return;
    }

    public boolean equals(java.lang.Object)
    {
        proguard.evaluation.value.CompositeLongValue r0, $r3;
        byte $b0, $b1;
        proguard.evaluation.value.LongValue $r2, $r4;
        int $i2, $i3;
        java.lang.Object $r1;
        proguard.evaluation.value.Value $r5, $r6;
        boolean $z0;

        r0 := @this: proguard.evaluation.value.CompositeLongValue;

        $r1 := @parameter0: java.lang.Object;

        if r0 == $r1 goto label1;

        $z0 = specialinvoke r0.<proguard.evaluation.value.SpecificLongValue: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        $r2 = r0.<proguard.evaluation.value.CompositeLongValue: proguard.evaluation.value.LongValue longValue1>;

        $r3 = (proguard.evaluation.value.CompositeLongValue) $r1;

        $r4 = $r3.<proguard.evaluation.value.CompositeLongValue: proguard.evaluation.value.LongValue longValue1>;

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        $b0 = r0.<proguard.evaluation.value.CompositeLongValue: byte operation>;

        $r3 = (proguard.evaluation.value.CompositeLongValue) $r1;

        $b1 = $r3.<proguard.evaluation.value.CompositeLongValue: byte operation>;

        $i2 = (int) $b0;

        $i3 = (int) $b1;

        if $i2 != $i3 goto label2;

        $r5 = r0.<proguard.evaluation.value.CompositeLongValue: proguard.evaluation.value.Value longValue2>;

        r0 = (proguard.evaluation.value.CompositeLongValue) $r1;

        $r6 = r0.<proguard.evaluation.value.CompositeLongValue: proguard.evaluation.value.Value longValue2>;

        $z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public int hashCode()
    {
        proguard.evaluation.value.CompositeLongValue r0;
        proguard.evaluation.value.LongValue $r1;
        int $i0, $i1;
        proguard.evaluation.value.Value $r2;

        r0 := @this: proguard.evaluation.value.CompositeLongValue;

        $i0 = specialinvoke r0.<proguard.evaluation.value.SpecificLongValue: int hashCode()>();

        $r1 = r0.<proguard.evaluation.value.CompositeLongValue: proguard.evaluation.value.LongValue longValue1>;

        $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i0 = $i0 ^ $i1;

        $r2 = r0.<proguard.evaluation.value.CompositeLongValue: proguard.evaluation.value.Value longValue2>;

        $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        $i0 = $i0 ^ $i1;

        return $i0;
    }

    public java.lang.String toString()
    {
        proguard.evaluation.value.CompositeLongValue r0;
        byte $b0;
        java.lang.StringBuffer $r1;
        proguard.evaluation.value.LongValue $r2;
        char $c1;
        java.lang.String $r4;
        proguard.evaluation.value.Value $r3;

        r0 := @this: proguard.evaluation.value.CompositeLongValue;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");

        $r2 = r0.<proguard.evaluation.value.CompositeLongValue: proguard.evaluation.value.LongValue longValue1>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r2);

        $b0 = r0.<proguard.evaluation.value.CompositeLongValue: byte operation>;

        $c1 = (char) $b0;

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);

        $r3 = r0.<proguard.evaluation.value.CompositeLongValue: proguard.evaluation.value.Value longValue2>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    public static void <clinit>()
    {
        <proguard.evaluation.value.CompositeLongValue: byte XOR> = 94;

        <proguard.evaluation.value.CompositeLongValue: byte UNSIGNED_SHIFT_RIGHT> = 125;

        <proguard.evaluation.value.CompositeLongValue: byte SUBTRACT> = 45;

        <proguard.evaluation.value.CompositeLongValue: byte SHIFT_RIGHT> = 62;

        <proguard.evaluation.value.CompositeLongValue: byte SHIFT_LEFT> = 60;

        <proguard.evaluation.value.CompositeLongValue: byte REMAINDER> = 37;

        <proguard.evaluation.value.CompositeLongValue: byte OR> = 124;

        <proguard.evaluation.value.CompositeLongValue: byte MULTIPLY> = 42;

        <proguard.evaluation.value.CompositeLongValue: byte DIVIDE> = 47;

        <proguard.evaluation.value.CompositeLongValue: byte AND> = 38;

        <proguard.evaluation.value.CompositeLongValue: byte ADD> = 43;

        return;
    }
}
