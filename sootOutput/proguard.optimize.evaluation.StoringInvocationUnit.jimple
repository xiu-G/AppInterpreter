public class proguard.optimize.evaluation.StoringInvocationUnit extends proguard.evaluation.BasicInvocationUnit
{
    private boolean storeFieldValues;
    private boolean storeMethodParameterValues;
    private boolean storeMethodReturnValues;

    public void <init>(proguard.evaluation.value.ValueFactory)
    {
        proguard.evaluation.value.ValueFactory $r1;
        proguard.optimize.evaluation.StoringInvocationUnit r0;

        r0 := @this: proguard.optimize.evaluation.StoringInvocationUnit;

        $r1 := @parameter0: proguard.evaluation.value.ValueFactory;

        specialinvoke r0.<proguard.optimize.evaluation.StoringInvocationUnit: void <init>(proguard.evaluation.value.ValueFactory,boolean,boolean,boolean)>($r1, 1, 1, 1);

        return;
    }

    public void <init>(proguard.evaluation.value.ValueFactory, boolean, boolean, boolean)
    {
        proguard.optimize.evaluation.StoringInvocationUnit r0;
        proguard.evaluation.value.ValueFactory $r1;
        boolean $z0, $z1, $z2;

        r0 := @this: proguard.optimize.evaluation.StoringInvocationUnit;

        $r1 := @parameter0: proguard.evaluation.value.ValueFactory;

        $z0 := @parameter1: boolean;

        $z1 := @parameter2: boolean;

        $z2 := @parameter3: boolean;

        specialinvoke r0.<proguard.evaluation.BasicInvocationUnit: void <init>(proguard.evaluation.value.ValueFactory)>($r1);

        r0.<proguard.optimize.evaluation.StoringInvocationUnit: boolean storeFieldValues> = $z0;

        r0.<proguard.optimize.evaluation.StoringInvocationUnit: boolean storeMethodParameterValues> = $z1;

        r0.<proguard.optimize.evaluation.StoringInvocationUnit: boolean storeMethodReturnValues> = $z2;

        return;
    }

    private static void generalizeFieldClassValue(proguard.classfile.Field, proguard.evaluation.value.ReferenceValue)
    {
        proguard.evaluation.value.ReferenceValue $r1;
        proguard.optimize.info.FieldOptimizationInfo $r2;
        proguard.classfile.Field $r0;

        $r0 := @parameter0: proguard.classfile.Field;

        $r1 := @parameter1: proguard.evaluation.value.ReferenceValue;

        $r2 = staticinvoke <proguard.optimize.info.FieldOptimizationInfo: proguard.optimize.info.FieldOptimizationInfo getFieldOptimizationInfo(proguard.classfile.Field)>($r0);

        if $r2 == null goto label1;

        virtualinvoke $r2.<proguard.optimize.info.FieldOptimizationInfo: void generalizeReferencedClass(proguard.evaluation.value.ReferenceValue)>($r1);

     label1:
        return;
    }

    private static void generalizeFieldValue(proguard.classfile.Field, proguard.evaluation.value.Value)
    {
        proguard.optimize.info.FieldOptimizationInfo $r2;
        proguard.classfile.Field $r0;
        proguard.evaluation.value.Value $r1;

        $r0 := @parameter0: proguard.classfile.Field;

        $r1 := @parameter1: proguard.evaluation.value.Value;

        $r2 = staticinvoke <proguard.optimize.info.FieldOptimizationInfo: proguard.optimize.info.FieldOptimizationInfo getFieldOptimizationInfo(proguard.classfile.Field)>($r0);

        if $r2 == null goto label1;

        virtualinvoke $r2.<proguard.optimize.info.FieldOptimizationInfo: void generalizeValue(proguard.evaluation.value.Value)>($r1);

     label1:
        return;
    }

    private static void generalizeMethodParameterValue(proguard.classfile.Method, int, proguard.evaluation.value.Value)
    {
        int $i0;
        proguard.classfile.Method $r0;
        proguard.optimize.info.MethodOptimizationInfo $r2;
        proguard.evaluation.value.Value $r1;

        $r0 := @parameter0: proguard.classfile.Method;

        $i0 := @parameter1: int;

        $r1 := @parameter2: proguard.evaluation.value.Value;

        $r2 = staticinvoke <proguard.optimize.info.MethodOptimizationInfo: proguard.optimize.info.MethodOptimizationInfo getMethodOptimizationInfo(proguard.classfile.Method)>($r0);

        if $r2 == null goto label1;

        virtualinvoke $r2.<proguard.optimize.info.MethodOptimizationInfo: void generalizeParameter(int,proguard.evaluation.value.Value)>($i0, $r1);

     label1:
        return;
    }

    private static void generalizeMethodReturnValue(proguard.classfile.Method, proguard.evaluation.value.Value)
    {
        proguard.classfile.Method $r0;
        proguard.optimize.info.MethodOptimizationInfo $r2;
        proguard.evaluation.value.Value $r1;

        $r0 := @parameter0: proguard.classfile.Method;

        $r1 := @parameter1: proguard.evaluation.value.Value;

        $r2 = staticinvoke <proguard.optimize.info.MethodOptimizationInfo: proguard.optimize.info.MethodOptimizationInfo getMethodOptimizationInfo(proguard.classfile.Method)>($r0);

        if $r2 == null goto label1;

        virtualinvoke $r2.<proguard.optimize.info.MethodOptimizationInfo: void generalizeReturnValue(proguard.evaluation.value.Value)>($r1);

     label1:
        return;
    }

    public static proguard.evaluation.value.ReferenceValue getFieldClassValue(proguard.classfile.Field)
    {
        proguard.optimize.info.FieldOptimizationInfo $r1;
        proguard.evaluation.value.ReferenceValue $r2;
        proguard.classfile.Field $r0;

        $r0 := @parameter0: proguard.classfile.Field;

        $r1 = staticinvoke <proguard.optimize.info.FieldOptimizationInfo: proguard.optimize.info.FieldOptimizationInfo getFieldOptimizationInfo(proguard.classfile.Field)>($r0);

        if $r1 == null goto label1;

        $r2 = virtualinvoke $r1.<proguard.optimize.info.FieldOptimizationInfo: proguard.evaluation.value.ReferenceValue getReferencedClass()>();

        return $r2;

     label1:
        return null;
    }

    public static proguard.evaluation.value.Value getFieldValue(proguard.classfile.Field)
    {
        proguard.optimize.info.FieldOptimizationInfo $r1;
        proguard.classfile.Field $r0;
        proguard.evaluation.value.Value $r2;

        $r0 := @parameter0: proguard.classfile.Field;

        $r1 = staticinvoke <proguard.optimize.info.FieldOptimizationInfo: proguard.optimize.info.FieldOptimizationInfo getFieldOptimizationInfo(proguard.classfile.Field)>($r0);

        if $r1 == null goto label1;

        $r2 = virtualinvoke $r1.<proguard.optimize.info.FieldOptimizationInfo: proguard.evaluation.value.Value getValue()>();

        return $r2;

     label1:
        return null;
    }

    public static proguard.evaluation.value.Value getMethodParameterValue(proguard.classfile.Method, int)
    {
        int $i0;
        proguard.classfile.Method $r0;
        proguard.optimize.info.MethodOptimizationInfo $r1;
        proguard.evaluation.value.Value $r2;

        $r0 := @parameter0: proguard.classfile.Method;

        $i0 := @parameter1: int;

        $r1 = staticinvoke <proguard.optimize.info.MethodOptimizationInfo: proguard.optimize.info.MethodOptimizationInfo getMethodOptimizationInfo(proguard.classfile.Method)>($r0);

        if $r1 == null goto label1;

        $r2 = virtualinvoke $r1.<proguard.optimize.info.MethodOptimizationInfo: proguard.evaluation.value.Value getParameter(int)>($i0);

        return $r2;

     label1:
        return null;
    }

    public static proguard.evaluation.value.Value getMethodReturnValue(proguard.classfile.Method)
    {
        proguard.classfile.Method $r0;
        proguard.optimize.info.MethodOptimizationInfo $r1;
        proguard.evaluation.value.Value $r2;

        $r0 := @parameter0: proguard.classfile.Method;

        $r1 = staticinvoke <proguard.optimize.info.MethodOptimizationInfo: proguard.optimize.info.MethodOptimizationInfo getMethodOptimizationInfo(proguard.classfile.Method)>($r0);

        if $r1 == null goto label1;

        $r2 = virtualinvoke $r1.<proguard.optimize.info.MethodOptimizationInfo: proguard.evaluation.value.Value getReturnValue()>();

        return $r2;

     label1:
        return null;
    }

    protected void setFieldClassValue(proguard.classfile.Clazz, proguard.classfile.constant.RefConstant, proguard.evaluation.value.ReferenceValue)
    {
        proguard.evaluation.value.ReferenceValue $r2;
        proguard.optimize.evaluation.StoringInvocationUnit r3;
        proguard.classfile.Clazz $r0;
        proguard.classfile.constant.RefConstant $r1;
        proguard.classfile.Field r5;
        boolean $z0;
        proguard.classfile.Member r4;

        r3 := @this: proguard.optimize.evaluation.StoringInvocationUnit;

        $r0 := @parameter0: proguard.classfile.Clazz;

        $r1 := @parameter1: proguard.classfile.constant.RefConstant;

        $r2 := @parameter2: proguard.evaluation.value.ReferenceValue;

        $z0 = r3.<proguard.optimize.evaluation.StoringInvocationUnit: boolean storeFieldValues>;

        if $z0 == 0 goto label1;

        r4 = $r1.<proguard.classfile.constant.RefConstant: proguard.classfile.Member referencedMember>;

        if r4 == null goto label1;

        r5 = (proguard.classfile.Field) r4;

        staticinvoke <proguard.optimize.evaluation.StoringInvocationUnit: void generalizeFieldClassValue(proguard.classfile.Field,proguard.evaluation.value.ReferenceValue)>(r5, $r2);

     label1:
        return;
    }

    protected void setFieldValue(proguard.classfile.Clazz, proguard.classfile.constant.RefConstant, proguard.evaluation.value.Value)
    {
        proguard.optimize.evaluation.StoringInvocationUnit r3;
        proguard.classfile.Clazz $r0;
        proguard.classfile.constant.RefConstant $r1;
        proguard.classfile.Field r5;
        proguard.evaluation.value.Value $r2;
        boolean $z0;
        proguard.classfile.Member r4;

        r3 := @this: proguard.optimize.evaluation.StoringInvocationUnit;

        $r0 := @parameter0: proguard.classfile.Clazz;

        $r1 := @parameter1: proguard.classfile.constant.RefConstant;

        $r2 := @parameter2: proguard.evaluation.value.Value;

        $z0 = r3.<proguard.optimize.evaluation.StoringInvocationUnit: boolean storeFieldValues>;

        if $z0 == 0 goto label1;

        r4 = $r1.<proguard.classfile.constant.RefConstant: proguard.classfile.Member referencedMember>;

        if r4 == null goto label1;

        r5 = (proguard.classfile.Field) r4;

        staticinvoke <proguard.optimize.evaluation.StoringInvocationUnit: void generalizeFieldValue(proguard.classfile.Field,proguard.evaluation.value.Value)>(r5, $r2);

     label1:
        return;
    }

    protected void setMethodParameterValue(proguard.classfile.Clazz, proguard.classfile.constant.RefConstant, int, proguard.evaluation.value.Value)
    {
        proguard.optimize.evaluation.StoringInvocationUnit r3;
        proguard.classfile.constant.RefConstant $r1;
        proguard.classfile.Member r4;
        proguard.classfile.Clazz $r0;
        int $i0;
        proguard.classfile.Method r5;
        proguard.evaluation.value.Value $r2;
        boolean $z0;

        r3 := @this: proguard.optimize.evaluation.StoringInvocationUnit;

        $r0 := @parameter0: proguard.classfile.Clazz;

        $r1 := @parameter1: proguard.classfile.constant.RefConstant;

        $i0 := @parameter2: int;

        $r2 := @parameter3: proguard.evaluation.value.Value;

        $z0 = r3.<proguard.optimize.evaluation.StoringInvocationUnit: boolean storeMethodParameterValues>;

        if $z0 == 0 goto label1;

        r4 = $r1.<proguard.classfile.constant.RefConstant: proguard.classfile.Member referencedMember>;

        if r4 == null goto label1;

        r5 = (proguard.classfile.Method) r4;

        staticinvoke <proguard.optimize.evaluation.StoringInvocationUnit: void generalizeMethodParameterValue(proguard.classfile.Method,int,proguard.evaluation.value.Value)>(r5, $i0, $r2);

     label1:
        return;
    }

    protected void setMethodReturnValue(proguard.classfile.Clazz, proguard.classfile.Method, proguard.evaluation.value.Value)
    {
        proguard.optimize.evaluation.StoringInvocationUnit r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.Method $r2;
        proguard.evaluation.value.Value $r3;
        boolean $z0;

        r0 := @this: proguard.optimize.evaluation.StoringInvocationUnit;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.evaluation.value.Value;

        $z0 = r0.<proguard.optimize.evaluation.StoringInvocationUnit: boolean storeMethodReturnValues>;

        if $z0 == 0 goto label1;

        staticinvoke <proguard.optimize.evaluation.StoringInvocationUnit: void generalizeMethodReturnValue(proguard.classfile.Method,proguard.evaluation.value.Value)>($r2, $r3);

     label1:
        return;
    }
}
