public class proguard.classfile.editor.ClassReferenceFixer extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.visitor.ClassVisitor, proguard.classfile.constant.visitor.ConstantVisitor, proguard.classfile.visitor.MemberVisitor, proguard.classfile.attribute.visitor.AttributeVisitor, proguard.classfile.attribute.visitor.InnerClassesInfoVisitor, proguard.classfile.attribute.visitor.LocalVariableInfoVisitor, proguard.classfile.attribute.visitor.LocalVariableTypeInfoVisitor, proguard.classfile.attribute.'annotation'.visitor.AnnotationVisitor, proguard.classfile.attribute.'annotation'.visitor.ElementValueVisitor
{
    private final boolean ensureUniqueMemberNames;

    public void <init>(boolean)
    {
        proguard.classfile.editor.ClassReferenceFixer r0;
        boolean $z0;

        r0 := @this: proguard.classfile.editor.ClassReferenceFixer;

        $z0 := @parameter0: boolean;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        r0.<proguard.classfile.editor.ClassReferenceFixer: boolean ensureUniqueMemberNames> = $z0;

        return;
    }

    private static java.lang.String newClassName(java.lang.String, proguard.classfile.Clazz)
    {
        proguard.classfile.Clazz $r1;
        java.lang.StringBuffer $r3, $r4;
        int $i1;
        char $c0;
        java.lang.String $r0, $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: proguard.classfile.Clazz;

        if $r1 != null goto label1;

        return $r0;

     label1:
        $r2 = interfaceinvoke $r1.<proguard.classfile.Clazz: java.lang.String getName()>();

        $c0 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(0);

        $i1 = (int) $c0;

        if $i1 != 91 goto label2;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $i1 = virtualinvoke $r0.<java.lang.String: int indexOf(int)>(76);

        $i1 = $i1 + 1;

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        $r3 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(59);

        $r0 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r0;

     label2:
        return $r2;
    }

    private static java.lang.String newDescriptor(java.lang.String, proguard.classfile.Clazz)
    {
        proguard.classfile.Clazz $r1;
        java.lang.StringBuffer $r2;
        int $i0;
        java.lang.String $r0, $r4;
        proguard.classfile.util.DescriptorClassEnumeration $r3;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: proguard.classfile.Clazz;

        if $r1 != null goto label1;

        return $r0;

     label1:
        $r3 = new proguard.classfile.util.DescriptorClassEnumeration;

        specialinvoke $r3.<proguard.classfile.util.DescriptorClassEnumeration: void <init>(java.lang.String)>($r0);

        $r2 = new java.lang.StringBuffer;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        specialinvoke $r2.<java.lang.StringBuffer: void <init>(int)>($i0);

        $r0 = virtualinvoke $r3.<proguard.classfile.util.DescriptorClassEnumeration: java.lang.String nextFluff()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r0);

        $z0 = virtualinvoke $r3.<proguard.classfile.util.DescriptorClassEnumeration: boolean hasMoreClassNames()>();

        if $z0 == 0 goto label2;

        $r4 = virtualinvoke $r3.<proguard.classfile.util.DescriptorClassEnumeration: java.lang.String nextClassName()>();

        $r0 = virtualinvoke $r3.<proguard.classfile.util.DescriptorClassEnumeration: java.lang.String nextFluff()>();

        $r4 = staticinvoke <proguard.classfile.editor.ClassReferenceFixer: java.lang.String newClassName(java.lang.String,proguard.classfile.Clazz)>($r4, $r1);

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r0);

     label2:
        $r0 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r0;
    }

    private static java.lang.String newDescriptor(java.lang.String, proguard.classfile.Clazz[])
    {
        proguard.classfile.Clazz[] $r1;
        proguard.classfile.Clazz $r5;
        java.lang.StringBuffer $r2;
        int $i0, $i1;
        java.lang.String $r0, $r4, $r6;
        proguard.classfile.util.DescriptorClassEnumeration $r3;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: proguard.classfile.Clazz[];

        if $r1 == null goto label1;

        $i0 = lengthof $r1;

        if $i0 != 0 goto label2;

     label1:
        return $r0;

     label2:
        $r3 = new proguard.classfile.util.DescriptorClassEnumeration;

        specialinvoke $r3.<proguard.classfile.util.DescriptorClassEnumeration: void <init>(java.lang.String)>($r0);

        $r2 = new java.lang.StringBuffer;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        specialinvoke $r2.<java.lang.StringBuffer: void <init>(int)>($i0);

        $r0 = virtualinvoke $r3.<proguard.classfile.util.DescriptorClassEnumeration: java.lang.String nextFluff()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r0);

        $i1 = 0;

     label3:
        $z0 = virtualinvoke $r3.<proguard.classfile.util.DescriptorClassEnumeration: boolean hasMoreClassNames()>();

        if $z0 == 0 goto label5;

        $r4 = virtualinvoke $r3.<proguard.classfile.util.DescriptorClassEnumeration: java.lang.String nextClassName()>();

        $z0 = virtualinvoke $r3.<proguard.classfile.util.DescriptorClassEnumeration: boolean isInnerClassName()>();

        $r0 = virtualinvoke $r3.<proguard.classfile.util.DescriptorClassEnumeration: java.lang.String nextFluff()>();

        $i0 = $i1 + 1;

        $r5 = $r1[$i1];

        $r4 = staticinvoke <proguard.classfile.editor.ClassReferenceFixer: java.lang.String newClassName(java.lang.String,proguard.classfile.Clazz)>($r4, $r5);

        $r6 = $r4;

        if $z0 == 0 goto label4;

        $i1 = virtualinvoke $r4.<java.lang.String: int lastIndexOf(int)>(36);

        $i1 = $i1 + 1;

        $r6 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int)>($i1);

     label4:
        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r0);

        $i1 = $i0;

        goto label3;

     label5:
        $r0 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r0;
    }

    private java.lang.String newUniqueMemberName(java.lang.String, java.lang.String)
    {
        proguard.classfile.editor.ClassReferenceFixer r0;
        java.lang.StringBuffer $r3;
        int $i0;
        long $l1;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: proguard.classfile.editor.ClassReferenceFixer;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("<init>");

        if $z0 == 0 goto label1;

        return "<init>";

     label1:
        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(36);

        $i0 = virtualinvoke $r2.<java.lang.String: int hashCode()>();

        $i0 = staticinvoke <java.lang.Math: int abs(int)>($i0);

        $l1 = (long) $i0;

        $r1 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r1;
    }

    public void visitAnnotation(proguard.classfile.Clazz, proguard.classfile.attribute.'annotation'.Annotation)
    {
        proguard.classfile.attribute.'annotation'.Annotation $r2;
        proguard.classfile.Clazz[] $r5;
        proguard.classfile.ProgramClass $r7;
        proguard.classfile.editor.ClassReferenceFixer r0;
        proguard.classfile.Clazz $r1;
        int $i0;
        java.lang.String $r4, $r6;
        proguard.classfile.editor.ConstantPoolEditor $r3;
        boolean $z0;

        r0 := @this: proguard.classfile.editor.ClassReferenceFixer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.Annotation;

        $i0 = $r2.<proguard.classfile.attribute.'annotation'.Annotation: int u2typeIndex>;

        $r4 = interfaceinvoke $r1.<proguard.classfile.Clazz: java.lang.String getString(int)>($i0);

        $r5 = $r2.<proguard.classfile.attribute.'annotation'.Annotation: proguard.classfile.Clazz[] referencedClasses>;

        $r6 = staticinvoke <proguard.classfile.editor.ClassReferenceFixer: java.lang.String newDescriptor(java.lang.String,proguard.classfile.Clazz[])>($r4, $r5);

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label1;

        $r3 = new proguard.classfile.editor.ConstantPoolEditor;

        $r7 = (proguard.classfile.ProgramClass) $r1;

        specialinvoke $r3.<proguard.classfile.editor.ConstantPoolEditor: void <init>(proguard.classfile.ProgramClass)>($r7);

        $i0 = virtualinvoke $r3.<proguard.classfile.editor.ConstantPoolEditor: int addUtf8Constant(java.lang.String)>($r6);

        $r2.<proguard.classfile.attribute.'annotation'.Annotation: int u2typeIndex> = $i0;

     label1:
        virtualinvoke $r2.<proguard.classfile.attribute.'annotation'.Annotation: void elementValuesAccept(proguard.classfile.Clazz,proguard.classfile.attribute.'annotation'.visitor.ElementValueVisitor)>($r1, r0);

        return;
    }

    public void visitAnnotationDefaultAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.'annotation'.AnnotationDefaultAttribute)
    {
        proguard.classfile.editor.ClassReferenceFixer r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.'annotation'.AnnotationDefaultAttribute $r3;

        r0 := @this: proguard.classfile.editor.ClassReferenceFixer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.AnnotationDefaultAttribute;

        virtualinvoke $r3.<proguard.classfile.attribute.'annotation'.AnnotationDefaultAttribute: void defaultValueAccept(proguard.classfile.Clazz,proguard.classfile.attribute.'annotation'.visitor.ElementValueVisitor)>($r1, r0);

        return;
    }

    public void visitAnnotationElementValue(proguard.classfile.Clazz, proguard.classfile.attribute.'annotation'.Annotation, proguard.classfile.attribute.'annotation'.AnnotationElementValue)
    {
        proguard.classfile.attribute.'annotation'.Annotation $r2;
        proguard.classfile.editor.ClassReferenceFixer r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.'annotation'.AnnotationElementValue $r3;

        r0 := @this: proguard.classfile.editor.ClassReferenceFixer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.Annotation;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.AnnotationElementValue;

        virtualinvoke $r3.<proguard.classfile.attribute.'annotation'.AnnotationElementValue: void annotationAccept(proguard.classfile.Clazz,proguard.classfile.attribute.'annotation'.visitor.AnnotationVisitor)>($r1, r0);

        return;
    }

    public void visitAnyAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.'annotation'.AnnotationsAttribute)
    {
        proguard.classfile.attribute.'annotation'.AnnotationsAttribute $r2;
        proguard.classfile.editor.ClassReferenceFixer r0;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.classfile.editor.ClassReferenceFixer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.AnnotationsAttribute;

        virtualinvoke $r2.<proguard.classfile.attribute.'annotation'.AnnotationsAttribute: void annotationsAccept(proguard.classfile.Clazz,proguard.classfile.attribute.'annotation'.visitor.AnnotationVisitor)>($r1, r0);

        return;
    }

    public void visitAnyAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.Attribute)
    {
        proguard.classfile.editor.ClassReferenceFixer r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.Attribute $r2;

        r0 := @this: proguard.classfile.editor.ClassReferenceFixer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.Attribute;

        return;
    }

    public void visitAnyConstant(proguard.classfile.Clazz, proguard.classfile.constant.Constant)
    {
        proguard.classfile.editor.ClassReferenceFixer r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.constant.Constant $r2;

        r0 := @this: proguard.classfile.editor.ClassReferenceFixer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.Constant;

        return;
    }

    public void visitAnyParameterAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute)
    {
        proguard.classfile.editor.ClassReferenceFixer r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute $r3;

        r0 := @this: proguard.classfile.editor.ClassReferenceFixer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute;

        virtualinvoke $r3.<proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute: void annotationsAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.'annotation'.visitor.AnnotationVisitor)>($r1, $r2, r0);

        return;
    }

    public void visitArrayElementValue(proguard.classfile.Clazz, proguard.classfile.attribute.'annotation'.Annotation, proguard.classfile.attribute.'annotation'.ArrayElementValue)
    {
        proguard.classfile.attribute.'annotation'.Annotation $r2;
        proguard.classfile.editor.ClassReferenceFixer r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.'annotation'.ArrayElementValue $r3;

        r0 := @this: proguard.classfile.editor.ClassReferenceFixer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.Annotation;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.ArrayElementValue;

        virtualinvoke $r3.<proguard.classfile.attribute.'annotation'.ArrayElementValue: void elementValuesAccept(proguard.classfile.Clazz,proguard.classfile.attribute.'annotation'.Annotation,proguard.classfile.attribute.'annotation'.visitor.ElementValueVisitor)>($r1, $r2, r0);

        return;
    }

    public void visitClassConstant(proguard.classfile.Clazz, proguard.classfile.constant.ClassConstant)
    {
        proguard.classfile.constant.ClassConstant $r1;
        proguard.classfile.ProgramClass $r7;
        proguard.classfile.editor.ClassReferenceFixer r0;
        proguard.classfile.Clazz $r2, $r3;
        int $i0;
        java.lang.String $r4, $r5;
        proguard.classfile.editor.ConstantPoolEditor $r6;
        boolean $z0;

        r0 := @this: proguard.classfile.editor.ClassReferenceFixer;

        $r2 := @parameter0: proguard.classfile.Clazz;

        $r1 := @parameter1: proguard.classfile.constant.ClassConstant;

        $r3 = $r1.<proguard.classfile.constant.ClassConstant: proguard.classfile.Clazz referencedClass>;

        if $r3 == null goto label1;

        $r4 = virtualinvoke $r1.<proguard.classfile.constant.ClassConstant: java.lang.String getName(proguard.classfile.Clazz)>($r2);

        $r5 = staticinvoke <proguard.classfile.editor.ClassReferenceFixer: java.lang.String newClassName(java.lang.String,proguard.classfile.Clazz)>($r4, $r3);

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label1;

        $r6 = new proguard.classfile.editor.ConstantPoolEditor;

        $r7 = (proguard.classfile.ProgramClass) $r2;

        specialinvoke $r6.<proguard.classfile.editor.ConstantPoolEditor: void <init>(proguard.classfile.ProgramClass)>($r7);

        $i0 = virtualinvoke $r6.<proguard.classfile.editor.ConstantPoolEditor: int addUtf8Constant(java.lang.String)>($r5);

        $r1.<proguard.classfile.constant.ClassConstant: int u2nameIndex> = $i0;

     label1:
        return;
    }

    public void visitClassElementValue(proguard.classfile.Clazz, proguard.classfile.attribute.'annotation'.Annotation, proguard.classfile.attribute.'annotation'.ClassElementValue)
    {
        proguard.classfile.attribute.'annotation'.Annotation $r1;
        proguard.classfile.Clazz[] $r5;
        proguard.classfile.attribute.'annotation'.ClassElementValue $r2;
        proguard.classfile.ProgramClass $r8;
        proguard.classfile.editor.ClassReferenceFixer r0;
        proguard.classfile.Clazz $r3;
        int $i0;
        java.lang.String $r4, $r6;
        proguard.classfile.editor.ConstantPoolEditor $r7;
        boolean $z0;

        r0 := @this: proguard.classfile.editor.ClassReferenceFixer;

        $r3 := @parameter0: proguard.classfile.Clazz;

        $r1 := @parameter1: proguard.classfile.attribute.'annotation'.Annotation;

        $r2 := @parameter2: proguard.classfile.attribute.'annotation'.ClassElementValue;

        $i0 = $r2.<proguard.classfile.attribute.'annotation'.ClassElementValue: int u2classInfoIndex>;

        $r4 = interfaceinvoke $r3.<proguard.classfile.Clazz: java.lang.String getString(int)>($i0);

        $r5 = $r2.<proguard.classfile.attribute.'annotation'.ClassElementValue: proguard.classfile.Clazz[] referencedClasses>;

        $r6 = staticinvoke <proguard.classfile.editor.ClassReferenceFixer: java.lang.String newDescriptor(java.lang.String,proguard.classfile.Clazz[])>($r4, $r5);

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label1;

        $r7 = new proguard.classfile.editor.ConstantPoolEditor;

        $r8 = (proguard.classfile.ProgramClass) $r3;

        specialinvoke $r7.<proguard.classfile.editor.ConstantPoolEditor: void <init>(proguard.classfile.ProgramClass)>($r8);

        $i0 = virtualinvoke $r7.<proguard.classfile.editor.ConstantPoolEditor: int addUtf8Constant(java.lang.String)>($r6);

        $r2.<proguard.classfile.attribute.'annotation'.ClassElementValue: int u2classInfoIndex> = $i0;

     label1:
        return;
    }

    public void visitCodeAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute)
    {
        proguard.classfile.editor.ClassReferenceFixer r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.classfile.editor.ClassReferenceFixer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        virtualinvoke $r3.<proguard.classfile.attribute.CodeAttribute: void attributesAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.visitor.AttributeVisitor)>($r1, $r2, r0);

        return;
    }

    public void visitConstantElementValue(proguard.classfile.Clazz, proguard.classfile.attribute.'annotation'.Annotation, proguard.classfile.attribute.'annotation'.ConstantElementValue)
    {
        proguard.classfile.attribute.'annotation'.ConstantElementValue $r3;
        proguard.classfile.attribute.'annotation'.Annotation $r2;
        proguard.classfile.editor.ClassReferenceFixer r0;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.classfile.editor.ClassReferenceFixer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.Annotation;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.ConstantElementValue;

        return;
    }

    public void visitEnumConstantElementValue(proguard.classfile.Clazz, proguard.classfile.attribute.'annotation'.Annotation, proguard.classfile.attribute.'annotation'.EnumConstantElementValue)
    {
        proguard.classfile.attribute.'annotation'.Annotation $r1;
        proguard.classfile.Clazz[] $r5;
        proguard.classfile.attribute.'annotation'.EnumConstantElementValue $r2;
        proguard.classfile.ProgramClass $r8;
        proguard.classfile.editor.ClassReferenceFixer r0;
        proguard.classfile.Clazz $r3;
        int $i0;
        java.lang.String $r4, $r6;
        proguard.classfile.editor.ConstantPoolEditor $r7;
        boolean $z0;

        r0 := @this: proguard.classfile.editor.ClassReferenceFixer;

        $r3 := @parameter0: proguard.classfile.Clazz;

        $r1 := @parameter1: proguard.classfile.attribute.'annotation'.Annotation;

        $r2 := @parameter2: proguard.classfile.attribute.'annotation'.EnumConstantElementValue;

        $i0 = $r2.<proguard.classfile.attribute.'annotation'.EnumConstantElementValue: int u2typeNameIndex>;

        $r4 = interfaceinvoke $r3.<proguard.classfile.Clazz: java.lang.String getString(int)>($i0);

        $r5 = $r2.<proguard.classfile.attribute.'annotation'.EnumConstantElementValue: proguard.classfile.Clazz[] referencedClasses>;

        $r6 = staticinvoke <proguard.classfile.editor.ClassReferenceFixer: java.lang.String newDescriptor(java.lang.String,proguard.classfile.Clazz[])>($r4, $r5);

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label1;

        $r7 = new proguard.classfile.editor.ConstantPoolEditor;

        $r8 = (proguard.classfile.ProgramClass) $r3;

        specialinvoke $r7.<proguard.classfile.editor.ConstantPoolEditor: void <init>(proguard.classfile.ProgramClass)>($r8);

        $i0 = virtualinvoke $r7.<proguard.classfile.editor.ConstantPoolEditor: int addUtf8Constant(java.lang.String)>($r6);

        $r2.<proguard.classfile.attribute.'annotation'.EnumConstantElementValue: int u2typeNameIndex> = $i0;

     label1:
        return;
    }

    public void visitInnerClassesAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.InnerClassesAttribute)
    {
        proguard.classfile.attribute.InnerClassesAttribute $r2;
        proguard.classfile.editor.ClassReferenceFixer r0;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.classfile.editor.ClassReferenceFixer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.InnerClassesAttribute;

        virtualinvoke $r2.<proguard.classfile.attribute.InnerClassesAttribute: void innerClassEntriesAccept(proguard.classfile.Clazz,proguard.classfile.attribute.visitor.InnerClassesInfoVisitor)>($r1, r0);

        return;
    }

    public void visitInnerClassesInfo(proguard.classfile.Clazz, proguard.classfile.attribute.InnerClassesInfo)
    {
        proguard.classfile.ProgramClass $r5;
        proguard.classfile.editor.ClassReferenceFixer r0;
        proguard.classfile.Clazz $r3;
        int $i0, $i1;
        java.lang.String $r4;
        proguard.classfile.attribute.InnerClassesInfo $r1;
        proguard.classfile.editor.ConstantPoolEditor $r2;

        r0 := @this: proguard.classfile.editor.ClassReferenceFixer;

        $r3 := @parameter0: proguard.classfile.Clazz;

        $r1 := @parameter1: proguard.classfile.attribute.InnerClassesInfo;

        $i0 = $r1.<proguard.classfile.attribute.InnerClassesInfo: int u2innerClassIndex>;

        $i1 = $r1.<proguard.classfile.attribute.InnerClassesInfo: int u2innerNameIndex>;

        if $i0 == 0 goto label1;

        if $i1 == 0 goto label1;

        $r4 = interfaceinvoke $r3.<proguard.classfile.Clazz: java.lang.String getClassName(int)>($i0);

        $i0 = virtualinvoke $r4.<java.lang.String: int lastIndexOf(int)>(36);

        if $i0 < 0 goto label1;

        $r2 = new proguard.classfile.editor.ConstantPoolEditor;

        $r5 = (proguard.classfile.ProgramClass) $r3;

        specialinvoke $r2.<proguard.classfile.editor.ConstantPoolEditor: void <init>(proguard.classfile.ProgramClass)>($r5);

        $i0 = $i0 + 1;

        $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int)>($i0);

        $i0 = virtualinvoke $r2.<proguard.classfile.editor.ConstantPoolEditor: int addUtf8Constant(java.lang.String)>($r4);

        $r1.<proguard.classfile.attribute.InnerClassesInfo: int u2innerNameIndex> = $i0;

     label1:
        return;
    }

    public void visitLibraryClass(proguard.classfile.LibraryClass)
    {
        proguard.classfile.LibraryClass $r1;
        proguard.classfile.editor.ClassReferenceFixer r0;

        r0 := @this: proguard.classfile.editor.ClassReferenceFixer;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        virtualinvoke $r1.<proguard.classfile.LibraryClass: void fieldsAccept(proguard.classfile.visitor.MemberVisitor)>(r0);

        virtualinvoke $r1.<proguard.classfile.LibraryClass: void methodsAccept(proguard.classfile.visitor.MemberVisitor)>(r0);

        return;
    }

    public void visitLibraryField(proguard.classfile.LibraryClass, proguard.classfile.LibraryField)
    {
        proguard.classfile.LibraryClass $r1;
        proguard.classfile.editor.ClassReferenceFixer r0;
        proguard.classfile.Clazz $r3;
        proguard.classfile.LibraryField $r2;
        java.lang.String $r4;

        r0 := @this: proguard.classfile.editor.ClassReferenceFixer;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        $r2 := @parameter1: proguard.classfile.LibraryField;

        $r4 = virtualinvoke $r2.<proguard.classfile.LibraryField: java.lang.String getDescriptor(proguard.classfile.Clazz)>($r1);

        $r3 = $r2.<proguard.classfile.LibraryField: proguard.classfile.Clazz referencedClass>;

        $r4 = staticinvoke <proguard.classfile.editor.ClassReferenceFixer: java.lang.String newDescriptor(java.lang.String,proguard.classfile.Clazz)>($r4, $r3);

        $r2.<proguard.classfile.LibraryField: java.lang.String descriptor> = $r4;

        return;
    }

    public void visitLibraryMethod(proguard.classfile.LibraryClass, proguard.classfile.LibraryMethod)
    {
        proguard.classfile.LibraryClass $r1;
        proguard.classfile.Clazz[] $r3;
        proguard.classfile.editor.ClassReferenceFixer r0;
        proguard.classfile.LibraryMethod $r2;
        java.lang.String $r4;

        r0 := @this: proguard.classfile.editor.ClassReferenceFixer;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        $r2 := @parameter1: proguard.classfile.LibraryMethod;

        $r4 = virtualinvoke $r2.<proguard.classfile.LibraryMethod: java.lang.String getDescriptor(proguard.classfile.Clazz)>($r1);

        $r3 = $r2.<proguard.classfile.LibraryMethod: proguard.classfile.Clazz[] referencedClasses>;

        $r4 = staticinvoke <proguard.classfile.editor.ClassReferenceFixer: java.lang.String newDescriptor(java.lang.String,proguard.classfile.Clazz[])>($r4, $r3);

        $r2.<proguard.classfile.LibraryMethod: java.lang.String descriptor> = $r4;

        return;
    }

    public void visitLocalVariableInfo(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LocalVariableInfo)
    {
        proguard.classfile.attribute.LocalVariableInfo $r3;
        proguard.classfile.ProgramClass $r9;
        proguard.classfile.editor.ClassReferenceFixer r0;
        proguard.classfile.attribute.CodeAttribute $r2;
        proguard.classfile.Clazz $r4, $r6;
        int $i0;
        proguard.classfile.Method $r1;
        java.lang.String $r5, $r7;
        proguard.classfile.editor.ConstantPoolEditor $r8;
        boolean $z0;

        r0 := @this: proguard.classfile.editor.ClassReferenceFixer;

        $r4 := @parameter0: proguard.classfile.Clazz;

        $r1 := @parameter1: proguard.classfile.Method;

        $r2 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r3 := @parameter3: proguard.classfile.attribute.LocalVariableInfo;

        $i0 = $r3.<proguard.classfile.attribute.LocalVariableInfo: int u2descriptorIndex>;

        $r5 = interfaceinvoke $r4.<proguard.classfile.Clazz: java.lang.String getString(int)>($i0);

        $r6 = $r3.<proguard.classfile.attribute.LocalVariableInfo: proguard.classfile.Clazz referencedClass>;

        $r7 = staticinvoke <proguard.classfile.editor.ClassReferenceFixer: java.lang.String newDescriptor(java.lang.String,proguard.classfile.Clazz)>($r5, $r6);

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 != 0 goto label1;

        $r8 = new proguard.classfile.editor.ConstantPoolEditor;

        $r9 = (proguard.classfile.ProgramClass) $r4;

        specialinvoke $r8.<proguard.classfile.editor.ConstantPoolEditor: void <init>(proguard.classfile.ProgramClass)>($r9);

        $i0 = virtualinvoke $r8.<proguard.classfile.editor.ConstantPoolEditor: int addUtf8Constant(java.lang.String)>($r7);

        $r3.<proguard.classfile.attribute.LocalVariableInfo: int u2descriptorIndex> = $i0;

     label1:
        return;
    }

    public void visitLocalVariableTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LocalVariableTableAttribute)
    {
        proguard.classfile.editor.ClassReferenceFixer r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.LocalVariableTableAttribute $r4;

        r0 := @this: proguard.classfile.editor.ClassReferenceFixer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.LocalVariableTableAttribute;

        virtualinvoke $r4.<proguard.classfile.attribute.LocalVariableTableAttribute: void localVariablesAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.visitor.LocalVariableInfoVisitor)>($r1, $r2, $r3, r0);

        return;
    }

    public void visitLocalVariableTypeInfo(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LocalVariableTypeInfo)
    {
        proguard.classfile.Clazz[] $r6;
        proguard.classfile.attribute.LocalVariableTypeInfo $r3;
        proguard.classfile.ProgramClass $r9;
        proguard.classfile.editor.ClassReferenceFixer r0;
        proguard.classfile.attribute.CodeAttribute $r2;
        proguard.classfile.Clazz $r4;
        int $i0;
        proguard.classfile.Method $r1;
        java.lang.String $r5, $r7;
        proguard.classfile.editor.ConstantPoolEditor $r8;
        boolean $z0;

        r0 := @this: proguard.classfile.editor.ClassReferenceFixer;

        $r4 := @parameter0: proguard.classfile.Clazz;

        $r1 := @parameter1: proguard.classfile.Method;

        $r2 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r3 := @parameter3: proguard.classfile.attribute.LocalVariableTypeInfo;

        $i0 = $r3.<proguard.classfile.attribute.LocalVariableTypeInfo: int u2signatureIndex>;

        $r5 = interfaceinvoke $r4.<proguard.classfile.Clazz: java.lang.String getString(int)>($i0);

        $r6 = $r3.<proguard.classfile.attribute.LocalVariableTypeInfo: proguard.classfile.Clazz[] referencedClasses>;

        $r7 = staticinvoke <proguard.classfile.editor.ClassReferenceFixer: java.lang.String newDescriptor(java.lang.String,proguard.classfile.Clazz[])>($r5, $r6);

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 != 0 goto label1;

        $r8 = new proguard.classfile.editor.ConstantPoolEditor;

        $r9 = (proguard.classfile.ProgramClass) $r4;

        specialinvoke $r8.<proguard.classfile.editor.ConstantPoolEditor: void <init>(proguard.classfile.ProgramClass)>($r9);

        $i0 = virtualinvoke $r8.<proguard.classfile.editor.ConstantPoolEditor: int addUtf8Constant(java.lang.String)>($r7);

        $r3.<proguard.classfile.attribute.LocalVariableTypeInfo: int u2signatureIndex> = $i0;

     label1:
        return;
    }

    public void visitLocalVariableTypeTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LocalVariableTypeTableAttribute)
    {
        proguard.classfile.editor.ClassReferenceFixer r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.LocalVariableTypeTableAttribute $r4;

        r0 := @this: proguard.classfile.editor.ClassReferenceFixer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.LocalVariableTypeTableAttribute;

        virtualinvoke $r4.<proguard.classfile.attribute.LocalVariableTypeTableAttribute: void localVariablesAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.visitor.LocalVariableTypeInfoVisitor)>($r1, $r2, $r3, r0);

        return;
    }

    public void visitProgramClass(proguard.classfile.ProgramClass)
    {
        proguard.classfile.editor.ClassReferenceFixer r0;
        proguard.classfile.ProgramClass $r1;

        r0 := @this: proguard.classfile.editor.ClassReferenceFixer;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        virtualinvoke $r1.<proguard.classfile.ProgramClass: void constantPoolEntriesAccept(proguard.classfile.constant.visitor.ConstantVisitor)>(r0);

        virtualinvoke $r1.<proguard.classfile.ProgramClass: void fieldsAccept(proguard.classfile.visitor.MemberVisitor)>(r0);

        virtualinvoke $r1.<proguard.classfile.ProgramClass: void methodsAccept(proguard.classfile.visitor.MemberVisitor)>(r0);

        virtualinvoke $r1.<proguard.classfile.ProgramClass: void attributesAccept(proguard.classfile.attribute.visitor.AttributeVisitor)>(r0);

        return;
    }

    public void visitProgramField(proguard.classfile.ProgramClass, proguard.classfile.ProgramField)
    {
        proguard.classfile.ProgramClass $r1;
        proguard.classfile.editor.ClassReferenceFixer r0;
        proguard.classfile.ProgramField $r2;
        proguard.classfile.Clazz $r4;
        int $i0;
        java.lang.String $r3, $r5;
        proguard.classfile.editor.ConstantPoolEditor $r6;
        boolean $z0;

        r0 := @this: proguard.classfile.editor.ClassReferenceFixer;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.ProgramField;

        $r3 = virtualinvoke $r2.<proguard.classfile.ProgramField: java.lang.String getDescriptor(proguard.classfile.Clazz)>($r1);

        $r4 = $r2.<proguard.classfile.ProgramField: proguard.classfile.Clazz referencedClass>;

        $r5 = staticinvoke <proguard.classfile.editor.ClassReferenceFixer: java.lang.String newDescriptor(java.lang.String,proguard.classfile.Clazz)>($r3, $r4);

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label1;

        $r6 = new proguard.classfile.editor.ConstantPoolEditor;

        specialinvoke $r6.<proguard.classfile.editor.ConstantPoolEditor: void <init>(proguard.classfile.ProgramClass)>($r1);

        $i0 = virtualinvoke $r6.<proguard.classfile.editor.ConstantPoolEditor: int addUtf8Constant(java.lang.String)>($r5);

        $r2.<proguard.classfile.ProgramField: int u2descriptorIndex> = $i0;

        $z0 = r0.<proguard.classfile.editor.ClassReferenceFixer: boolean ensureUniqueMemberNames>;

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke $r2.<proguard.classfile.ProgramField: java.lang.String getName(proguard.classfile.Clazz)>($r1);

        $r3 = specialinvoke r0.<proguard.classfile.editor.ClassReferenceFixer: java.lang.String newUniqueMemberName(java.lang.String,java.lang.String)>($r5, $r3);

        $i0 = virtualinvoke $r6.<proguard.classfile.editor.ConstantPoolEditor: int addUtf8Constant(java.lang.String)>($r3);

        $r2.<proguard.classfile.ProgramField: int u2nameIndex> = $i0;

     label1:
        virtualinvoke $r2.<proguard.classfile.ProgramField: void attributesAccept(proguard.classfile.ProgramClass,proguard.classfile.attribute.visitor.AttributeVisitor)>($r1, r0);

        return;
    }

    public void visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod)
    {
        proguard.classfile.Clazz[] $r4;
        proguard.classfile.ProgramClass $r1;
        proguard.classfile.editor.ClassReferenceFixer r0;
        proguard.classfile.ProgramMethod $r2;
        int $i0;
        java.lang.String $r3, $r5;
        proguard.classfile.editor.ConstantPoolEditor $r6;
        boolean $z0;

        r0 := @this: proguard.classfile.editor.ClassReferenceFixer;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.ProgramMethod;

        $r3 = virtualinvoke $r2.<proguard.classfile.ProgramMethod: java.lang.String getDescriptor(proguard.classfile.Clazz)>($r1);

        $r4 = $r2.<proguard.classfile.ProgramMethod: proguard.classfile.Clazz[] referencedClasses>;

        $r5 = staticinvoke <proguard.classfile.editor.ClassReferenceFixer: java.lang.String newDescriptor(java.lang.String,proguard.classfile.Clazz[])>($r3, $r4);

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label1;

        $r6 = new proguard.classfile.editor.ConstantPoolEditor;

        specialinvoke $r6.<proguard.classfile.editor.ConstantPoolEditor: void <init>(proguard.classfile.ProgramClass)>($r1);

        $i0 = virtualinvoke $r6.<proguard.classfile.editor.ConstantPoolEditor: int addUtf8Constant(java.lang.String)>($r5);

        $r2.<proguard.classfile.ProgramMethod: int u2descriptorIndex> = $i0;

        $z0 = r0.<proguard.classfile.editor.ClassReferenceFixer: boolean ensureUniqueMemberNames>;

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke $r2.<proguard.classfile.ProgramMethod: java.lang.String getName(proguard.classfile.Clazz)>($r1);

        $r3 = specialinvoke r0.<proguard.classfile.editor.ClassReferenceFixer: java.lang.String newUniqueMemberName(java.lang.String,java.lang.String)>($r5, $r3);

        $i0 = virtualinvoke $r6.<proguard.classfile.editor.ConstantPoolEditor: int addUtf8Constant(java.lang.String)>($r3);

        $r2.<proguard.classfile.ProgramMethod: int u2nameIndex> = $i0;

     label1:
        virtualinvoke $r2.<proguard.classfile.ProgramMethod: void attributesAccept(proguard.classfile.ProgramClass,proguard.classfile.attribute.visitor.AttributeVisitor)>($r1, r0);

        return;
    }

    public void visitSignatureAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.SignatureAttribute)
    {
        proguard.classfile.Clazz[] $r4;
        proguard.classfile.ProgramClass $r7;
        proguard.classfile.editor.ClassReferenceFixer r0;
        proguard.classfile.Clazz $r2;
        int $i0;
        proguard.classfile.attribute.SignatureAttribute $r1;
        java.lang.String $r3, $r5;
        proguard.classfile.editor.ConstantPoolEditor $r6;
        boolean $z0;

        r0 := @this: proguard.classfile.editor.ClassReferenceFixer;

        $r2 := @parameter0: proguard.classfile.Clazz;

        $r1 := @parameter1: proguard.classfile.attribute.SignatureAttribute;

        $i0 = $r1.<proguard.classfile.attribute.SignatureAttribute: int u2signatureIndex>;

        $r3 = interfaceinvoke $r2.<proguard.classfile.Clazz: java.lang.String getString(int)>($i0);

        $r4 = $r1.<proguard.classfile.attribute.SignatureAttribute: proguard.classfile.Clazz[] referencedClasses>;

        $r5 = staticinvoke <proguard.classfile.editor.ClassReferenceFixer: java.lang.String newDescriptor(java.lang.String,proguard.classfile.Clazz[])>($r3, $r4);

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label1;

        $r6 = new proguard.classfile.editor.ConstantPoolEditor;

        $r7 = (proguard.classfile.ProgramClass) $r2;

        specialinvoke $r6.<proguard.classfile.editor.ConstantPoolEditor: void <init>(proguard.classfile.ProgramClass)>($r7);

        $i0 = virtualinvoke $r6.<proguard.classfile.editor.ConstantPoolEditor: int addUtf8Constant(java.lang.String)>($r5);

        $r1.<proguard.classfile.attribute.SignatureAttribute: int u2signatureIndex> = $i0;

     label1:
        return;
    }

    public void visitStringConstant(proguard.classfile.Clazz, proguard.classfile.constant.StringConstant)
    {
        proguard.classfile.ProgramClass $r8;
        proguard.classfile.Member $r4;
        proguard.classfile.editor.ClassReferenceFixer r0;
        proguard.classfile.Clazz $r2, $r3;
        proguard.classfile.constant.StringConstant $r1;
        int $i0;
        java.lang.String $r5, $r6;
        proguard.classfile.editor.ConstantPoolEditor $r7;
        boolean $z0;

        r0 := @this: proguard.classfile.editor.ClassReferenceFixer;

        $r2 := @parameter0: proguard.classfile.Clazz;

        $r1 := @parameter1: proguard.classfile.constant.StringConstant;

        $r3 = $r1.<proguard.classfile.constant.StringConstant: proguard.classfile.Clazz referencedClass>;

        $r4 = $r1.<proguard.classfile.constant.StringConstant: proguard.classfile.Member referencedMember>;

        if $r3 == null goto label1;

        if $r4 != null goto label1;

        $r5 = virtualinvoke $r1.<proguard.classfile.constant.StringConstant: java.lang.String getString(proguard.classfile.Clazz)>($r2);

        $r5 = staticinvoke <proguard.classfile.util.ClassUtil: java.lang.String internalClassName(java.lang.String)>($r5);

        $r6 = staticinvoke <proguard.classfile.editor.ClassReferenceFixer: java.lang.String newClassName(java.lang.String,proguard.classfile.Clazz)>($r5, $r3);

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label1;

        $r5 = staticinvoke <proguard.classfile.util.ClassUtil: java.lang.String externalClassName(java.lang.String)>($r6);

        $r7 = new proguard.classfile.editor.ConstantPoolEditor;

        $r8 = (proguard.classfile.ProgramClass) $r2;

        specialinvoke $r7.<proguard.classfile.editor.ConstantPoolEditor: void <init>(proguard.classfile.ProgramClass)>($r8);

        $i0 = virtualinvoke $r7.<proguard.classfile.editor.ConstantPoolEditor: int addUtf8Constant(java.lang.String)>($r5);

        $r1.<proguard.classfile.constant.StringConstant: int u2stringIndex> = $i0;

     label1:
        return;
    }
}
