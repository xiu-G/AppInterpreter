public class cn.ffcs.lib.bitmapcache.BitmapLruCache extends java.lang.Object
{
    static final int DISK_CACHE_FLUSH_DELAY_SECS;
    private com.jakewharton.disklrucache.DiskLruCache mDiskCache;
    private java.util.HashMap mDiskCacheEditLocks;
    private java.util.concurrent.ScheduledThreadPoolExecutor mDiskCacheFlusherExecutor;
    private cn.ffcs.lib.bitmapcache.BitmapLruCache$DiskCacheFlushRunnable mDiskCacheFlusherRunnable;
    private java.util.concurrent.ScheduledFuture mDiskCacheFuture;
    private cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache mMemoryCache;
    private cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy mRecyclePolicy;
    private android.content.res.Resources mResources;
    private java.io.File mTempDir;

    void <init>(android.content.Context)
    {
        android.content.Context $r1;
        cn.ffcs.lib.bitmapcache.BitmapLruCache r0;
        java.io.File $r2;
        android.content.res.Resources $r3;

        r0 := @this: cn.ffcs.lib.bitmapcache.BitmapLruCache;

        $r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $r1 == null goto label1;

        $r1 = virtualinvoke $r1.<android.content.Context: android.content.Context getApplicationContext()>();

        $r2 = virtualinvoke $r1.<android.content.Context: java.io.File getCacheDir()>();

        r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: java.io.File mTempDir> = $r2;

        $r3 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: android.content.res.Resources mResources> = $r3;

     label1:
        return;
    }

    static com.jakewharton.disklrucache.DiskLruCache access$200(cn.ffcs.lib.bitmapcache.BitmapLruCache)
    {
        cn.ffcs.lib.bitmapcache.BitmapLruCache $r0;
        com.jakewharton.disklrucache.DiskLruCache r1;

        $r0 := @parameter0: cn.ffcs.lib.bitmapcache.BitmapLruCache;

        r1 = $r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: com.jakewharton.disklrucache.DiskLruCache mDiskCache>;

        return r1;
    }

    private boolean addInBitmapOptions(cn.ffcs.lib.bitmapcache.BitmapLruCache$InputStreamProvider, android.graphics.BitmapFactory$Options)
    {
        cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache $r4;
        cn.ffcs.lib.bitmapcache.BitmapLruCache$InputStreamProvider $r1;
        android.graphics.Bitmap $r5;
        int $i0, $i1;
        cn.ffcs.lib.bitmapcache.BitmapLruCache r0;
        java.lang.String $r6;
        android.graphics.BitmapFactory$Options $r2;
        java.io.InputStream $r3;
        boolean $z0;

        r0 := @this: cn.ffcs.lib.bitmapcache.BitmapLruCache;

        $r1 := @parameter0: cn.ffcs.lib.bitmapcache.BitmapLruCache$InputStreamProvider;

        $r2 := @parameter1: android.graphics.BitmapFactory$Options;

        $r3 = interfaceinvoke $r1.<cn.ffcs.lib.bitmapcache.BitmapLruCache$InputStreamProvider: java.io.InputStream getInputStream()>();

        $r2.<android.graphics.BitmapFactory$Options: boolean inJustDecodeBounds> = 1;

        staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>($r3, null, $r2);

        staticinvoke <cn.ffcs.lib.bitmapcache.IoUtils: void closeStream(java.io.InputStream)>($r3);

        $r2.<android.graphics.BitmapFactory$Options: boolean inJustDecodeBounds> = 0;

        $r2.<android.graphics.BitmapFactory$Options: boolean inMutable> = 1;

        $r4 = r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache mMemoryCache>;

        $i0 = $r2.<android.graphics.BitmapFactory$Options: int outWidth>;

        $i1 = $r2.<android.graphics.BitmapFactory$Options: int outHeight>;

        $r5 = virtualinvoke $r4.<cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache: android.graphics.Bitmap getBitmapFromRemoved(int,int)>($i0, $i1);

        if $r5 == null goto label2;

        $z0 = <cn.ffcs.lib.bitmapcache.Constants: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r6 = <cn.ffcs.lib.bitmapcache.Constants: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r6, "Using inBitmap");

     label1:
        staticinvoke <cn.ffcs.lib.bitmapcache.SDK11: void addInBitmapOption(android.graphics.BitmapFactory$Options,android.graphics.Bitmap)>($r2, $r5);

        return 1;

     label2:
        return 0;
    }

    private static void checkNotOnMainThread()
    {
        java.lang.IllegalStateException $r2;
        android.os.Looper $r0, $r1;

        $r0 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        $r1 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        if $r0 != $r1 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("This method should not be called from the main/UI thread.");

        throw $r2;

     label1:
        return;
    }

    private cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable decodeBitmap(cn.ffcs.lib.bitmapcache.BitmapLruCache$InputStreamProvider, java.lang.String, android.graphics.BitmapFactory$Options)
    {
        java.lang.Throwable $r14;
        cn.ffcs.lib.bitmapcache.BitmapLruCache$InputStreamProvider $r1;
        byte b0;
        int $i1;
        cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable $r9;
        cn.ffcs.lib.bitmapcache.BitmapLruCache r0;
        java.lang.String $r2, $r12;
        boolean $z0;
        java.lang.Exception r11;
        cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy $r3;
        android.graphics.Bitmap r5, $r8;
        java.lang.OutOfMemoryError r13;
        android.graphics.BitmapFactory$Options r4;
        java.io.InputStream r6, $r7;
        android.content.res.Resources $r10;

        r0 := @this: cn.ffcs.lib.bitmapcache.BitmapLruCache;

        $r1 := @parameter0: cn.ffcs.lib.bitmapcache.BitmapLruCache$InputStreamProvider;

        $r2 := @parameter1: java.lang.String;

        r4 := @parameter2: android.graphics.BitmapFactory$Options;

        r5 = null;

        r6 = null;

        b0 = 0;

     label01:
        $r3 = r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy mRecyclePolicy>;

     label02:
        $z0 = virtualinvoke $r3.<cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy: boolean canInBitmap()>();

     label03:
        if $z0 == 0 goto label11;

        if r4 != null goto label06;

     label04:
        r4 = new android.graphics.BitmapFactory$Options;

     label05:
        specialinvoke r4.<android.graphics.BitmapFactory$Options: void <init>()>();

     label06:
        $i1 = r4.<android.graphics.BitmapFactory$Options: int inSampleSize>;

     label07:
        if $i1 > 1 goto label11;

     label08:
        r4.<android.graphics.BitmapFactory$Options: int inSampleSize> = 1;

     label09:
        $z0 = specialinvoke r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: boolean addInBitmapOptions(cn.ffcs.lib.bitmapcache.BitmapLruCache$InputStreamProvider,android.graphics.BitmapFactory$Options)>($r1, r4);

     label10:
        if $z0 == 0 goto label11;

        b0 = 1;

     label11:
        $r7 = interfaceinvoke $r1.<cn.ffcs.lib.bitmapcache.BitmapLruCache$InputStreamProvider: java.io.InputStream getInputStream()>();

     label12:
        r6 = $r7;

     label13:
        $r8 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>($r7, null, r4);

     label14:
        r5 = $r8;

        staticinvoke <cn.ffcs.lib.bitmapcache.IoUtils: void closeStream(java.io.InputStream)>($r7);

     label15:
        if r5 == null goto label23;

        $r9 = new cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable;

        $r10 = r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: android.content.res.Resources mResources>;

        $r3 = r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy mRecyclePolicy>;

        specialinvoke $r9.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: void <init>(java.lang.String,android.content.res.Resources,android.graphics.Bitmap,cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy,int)>($r2, $r10, r5, $r3, b0);

        return $r9;

     label16:
        r11 := @caughtexception;

     label17:
        $r12 = <cn.ffcs.lib.bitmapcache.Constants: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r12, "Unable to decode stream", r11);

     label18:
        staticinvoke <cn.ffcs.lib.bitmapcache.IoUtils: void closeStream(java.io.InputStream)>(r6);

        goto label15;

     label19:
        r13 := @caughtexception;

     label20:
        $r12 = <cn.ffcs.lib.bitmapcache.Constants: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r12, "  OutOfMemoryError  ", r13);

     label21:
        staticinvoke <cn.ffcs.lib.bitmapcache.IoUtils: void closeStream(java.io.InputStream)>(r6);

        goto label15;

     label22:
        $r14 := @caughtexception;

        staticinvoke <cn.ffcs.lib.bitmapcache.IoUtils: void closeStream(java.io.InputStream)>(r6);

        throw $r14;

     label23:
        return null;

        catch java.lang.Exception from label01 to label03 with label16;
        catch java.lang.Exception from label05 to label06 with label16;
        catch java.lang.Exception from label06 to label07 with label16;
        catch java.lang.Exception from label08 to label10 with label16;
        catch java.lang.Exception from label11 to label12 with label16;
        catch java.lang.Exception from label13 to label14 with label16;
        catch java.lang.OutOfMemoryError from label02 to label03 with label19;
        catch java.lang.OutOfMemoryError from label04 to label06 with label19;
        catch java.lang.OutOfMemoryError from label09 to label10 with label19;
        catch java.lang.OutOfMemoryError from label11 to label12 with label19;
        catch java.lang.OutOfMemoryError from label13 to label14 with label19;
        catch java.lang.Throwable from label01 to label03 with label22;
        catch java.lang.Throwable from label04 to label06 with label22;
        catch java.lang.Throwable from label06 to label07 with label22;
        catch java.lang.Throwable from label08 to label10 with label22;
        catch java.lang.Throwable from label11 to label12 with label22;
        catch java.lang.Throwable from label13 to label14 with label22;
        catch java.lang.Throwable from label17 to label18 with label22;
        catch java.lang.Throwable from label20 to label21 with label22;
    }

    private static java.lang.String transformUrlForDiskCacheKey(java.lang.String)
    {
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        $r0 = staticinvoke <cn.ffcs.lib.bitmapcache.Md5: java.lang.String encode(java.lang.String)>($r0);

        return $r0;
    }

    public boolean contains(java.lang.String)
    {
        cn.ffcs.lib.bitmapcache.BitmapLruCache r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: cn.ffcs.lib.bitmapcache.BitmapLruCache;

        $r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: boolean containsInMemoryCache(java.lang.String)>($r1);

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: boolean containsInDiskCache(java.lang.String)>($r1);

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public boolean containsInDiskCache(java.lang.String)
    {
        java.lang.Throwable r2;
        com.jakewharton.disklrucache.DiskLruCache$Snapshot $r4;
        com.jakewharton.disklrucache.DiskLruCache $r3;
        cn.ffcs.lib.bitmapcache.BitmapLruCache r0;
        java.io.IOException $r5;
        java.lang.String $r1;

        r0 := @this: cn.ffcs.lib.bitmapcache.BitmapLruCache;

        $r1 := @parameter0: java.lang.String;

        $r3 = r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: com.jakewharton.disklrucache.DiskLruCache mDiskCache>;

        if $r3 == null goto label4;

        staticinvoke <cn.ffcs.lib.bitmapcache.BitmapLruCache: void checkNotOnMainThread()>();

        $r3 = r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: com.jakewharton.disklrucache.DiskLruCache mDiskCache>;

     label1:
        $r1 = staticinvoke <cn.ffcs.lib.bitmapcache.BitmapLruCache: java.lang.String transformUrlForDiskCacheKey(java.lang.String)>($r1);

        $r4 = virtualinvoke $r3.<com.jakewharton.disklrucache.DiskLruCache: com.jakewharton.disklrucache.DiskLruCache$Snapshot get(java.lang.String)>($r1);

     label2:
        if $r4 == null goto label4;

        return 1;

     label3:
        r2 := @caughtexception;

        $r5 = (java.io.IOException) r2;

        virtualinvoke $r5.<java.io.IOException: void printStackTrace()>();

     label4:
        return 0;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public boolean containsInMemoryCache(java.lang.String)
    {
        cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache $r3;
        cn.ffcs.lib.bitmapcache.BitmapLruCache r0;
        java.lang.Object $r2;
        java.lang.String $r1;

        r0 := @this: cn.ffcs.lib.bitmapcache.BitmapLruCache;

        $r1 := @parameter0: java.lang.String;

        $r3 = r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache mMemoryCache>;

        if $r3 == null goto label1;

        $r3 = r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache mMemoryCache>;

        $r2 = virtualinvoke $r3.<cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache: java.lang.Object get(java.lang.Object)>($r1);

        if $r2 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable get(java.lang.String)
    {
        cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable $r2;
        cn.ffcs.lib.bitmapcache.BitmapLruCache r0;
        java.lang.String $r1;

        r0 := @this: cn.ffcs.lib.bitmapcache.BitmapLruCache;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable get(java.lang.String,android.graphics.BitmapFactory$Options)>($r1, null);

        return $r2;
    }

    public cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable get(java.lang.String, android.graphics.BitmapFactory$Options)
    {
        cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable $r3;
        cn.ffcs.lib.bitmapcache.BitmapLruCache r0;
        java.lang.String $r1;
        android.graphics.BitmapFactory$Options $r2;

        r0 := @this: cn.ffcs.lib.bitmapcache.BitmapLruCache;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: android.graphics.BitmapFactory$Options;

        $r3 = virtualinvoke r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable getFromMemoryCache(java.lang.String)>($r1);

        if $r3 != null goto label1;

        $r3 = virtualinvoke r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable getFromDiskCache(java.lang.String,android.graphics.BitmapFactory$Options)>($r1, $r2);

     label1:
        return $r3;
    }

    public com.jakewharton.disklrucache.DiskLruCache getDiskLruCache()
    {
        cn.ffcs.lib.bitmapcache.BitmapLruCache r0;
        com.jakewharton.disklrucache.DiskLruCache r1;

        r0 := @this: cn.ffcs.lib.bitmapcache.BitmapLruCache;

        r1 = r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: com.jakewharton.disklrucache.DiskLruCache mDiskCache>;

        return r1;
    }

    public cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable getFromDiskCache(java.lang.String, android.graphics.BitmapFactory$Options)
    {
        java.lang.Throwable r3;
        com.jakewharton.disklrucache.DiskLruCache $r5;
        cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache $r9;
        java.io.IOException $r11;
        cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable r4, $r8;
        cn.ffcs.lib.bitmapcache.BitmapLruCache r0;
        java.lang.String $r1, $r6;
        cn.ffcs.lib.bitmapcache.BitmapLruCache$SnapshotInputStreamProvider $r7, $r10;
        android.graphics.BitmapFactory$Options $r2;

        r0 := @this: cn.ffcs.lib.bitmapcache.BitmapLruCache;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: android.graphics.BitmapFactory$Options;

        r4 = null;

        $r5 = r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: com.jakewharton.disklrucache.DiskLruCache mDiskCache>;

        if $r5 == null goto label11;

        staticinvoke <cn.ffcs.lib.bitmapcache.BitmapLruCache: void checkNotOnMainThread()>();

     label01:
        $r6 = staticinvoke <cn.ffcs.lib.bitmapcache.BitmapLruCache: java.lang.String transformUrlForDiskCacheKey(java.lang.String)>($r1);

     label02:
        $r10 = new cn.ffcs.lib.bitmapcache.BitmapLruCache$SnapshotInputStreamProvider;

        $r7 = $r10;

     label03:
        specialinvoke $r10.<cn.ffcs.lib.bitmapcache.BitmapLruCache$SnapshotInputStreamProvider: void <init>(cn.ffcs.lib.bitmapcache.BitmapLruCache,java.lang.String)>(r0, $r6);

        $r8 = specialinvoke r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable decodeBitmap(cn.ffcs.lib.bitmapcache.BitmapLruCache$InputStreamProvider,java.lang.String,android.graphics.BitmapFactory$Options)>($r7, $r1, $r2);

     label04:
        r4 = $r8;

        if $r8 == null goto label07;

        $r9 = r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache mMemoryCache>;

        if $r9 == null goto label12;

        $r9 = r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache mMemoryCache>;

     label05:
        virtualinvoke $r9.<cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache: cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable put(cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable)>($r8);

     label06:
        return $r8;

     label07:
        $r5 = r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: com.jakewharton.disklrucache.DiskLruCache mDiskCache>;

     label08:
        virtualinvoke $r5.<com.jakewharton.disklrucache.DiskLruCache: boolean remove(java.lang.String)>($r6);

        virtualinvoke r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: void scheduleDiskCacheFlush()>();

     label09:
        return $r8;

     label10:
        r3 := @caughtexception;

        $r11 = (java.io.IOException) r3;

        virtualinvoke $r11.<java.io.IOException: void printStackTrace()>();

        return r4;

     label11:
        return null;

     label12:
        return $r8;

        catch java.io.IOException from label01 to label02 with label10;
        catch java.io.IOException from label03 to label04 with label10;
        catch java.io.IOException from label05 to label06 with label10;
        catch java.io.IOException from label08 to label09 with label10;
    }

    public cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable getFromMemoryCache(java.lang.String)
    {
        java.lang.Throwable $r7;
        cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache $r2, $r3;
        cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable $r5, r6;
        cn.ffcs.lib.bitmapcache.BitmapLruCache r0;
        java.lang.Object $r4;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: cn.ffcs.lib.bitmapcache.BitmapLruCache;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache mMemoryCache>;

        if $r2 == null goto label6;

        $r2 = r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache mMemoryCache>;

        entermonitor $r2;

     label1:
        $r3 = r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache mMemoryCache>;

        $r4 = virtualinvoke $r3.<cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache: java.lang.Object get(java.lang.Object)>($r1);

        $r5 = (cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable) $r4;

        r6 = $r5;

        if $r5 == null goto label2;

        $z0 = virtualinvoke $r5.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: boolean isBitmapValid()>();

        if $z0 != 0 goto label2;

        $r3 = r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache mMemoryCache>;

        virtualinvoke $r3.<cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache: java.lang.Object remove(java.lang.Object)>($r1);

        r6 = null;

     label2:
        exitmonitor $r2;

     label3:
        return r6;

     label4:
        $r7 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw $r7;

     label6:
        return null;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public java.util.concurrent.locks.ReentrantLock getLockForDiskCacheEdit(java.lang.String)
    {
        java.lang.Throwable $r6;
        java.util.concurrent.locks.ReentrantLock r5;
        cn.ffcs.lib.bitmapcache.BitmapLruCache r0;
        java.util.HashMap $r2, $r4;
        java.lang.Object $r3;
        java.lang.String $r1;

        r0 := @this: cn.ffcs.lib.bitmapcache.BitmapLruCache;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: java.util.HashMap mDiskCacheEditLocks>;

        entermonitor $r2;

     label1:
        $r4 = r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: java.util.HashMap mDiskCacheEditLocks>;

        $r3 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r1);

        r5 = (java.util.concurrent.locks.ReentrantLock) $r3;

        if r5 != null goto label2;

        r5 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke r5.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        $r4 = r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: java.util.HashMap mDiskCacheEditLocks>;

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, r5);

     label2:
        exitmonitor $r2;

     label3:
        return r5;

     label4:
        $r6 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw $r6;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean isDiskCacheEnabled()
    {
        cn.ffcs.lib.bitmapcache.BitmapLruCache r0;
        com.jakewharton.disklrucache.DiskLruCache $r1;

        r0 := @this: cn.ffcs.lib.bitmapcache.BitmapLruCache;

        $r1 = r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: com.jakewharton.disklrucache.DiskLruCache mDiskCache>;

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isMemoryCacheEnabled()
    {
        cn.ffcs.lib.bitmapcache.BitmapLruCache r0;
        cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache $r1;

        r0 := @this: cn.ffcs.lib.bitmapcache.BitmapLruCache;

        $r1 = r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache mMemoryCache>;

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable put(java.lang.String, android.graphics.Bitmap)
    {
        android.graphics.Bitmap $r2;
        cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable $r3;
        cn.ffcs.lib.bitmapcache.BitmapLruCache r0;
        android.graphics.Bitmap$CompressFormat $r4;
        java.lang.String $r1;

        r0 := @this: cn.ffcs.lib.bitmapcache.BitmapLruCache;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: android.graphics.Bitmap;

        $r4 = <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat PNG>;

        $r3 = virtualinvoke r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable put(java.lang.String,android.graphics.Bitmap,android.graphics.Bitmap$CompressFormat,int)>($r1, $r2, $r4, 100);

        return $r3;
    }

    public cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable put(java.lang.String, android.graphics.Bitmap, android.graphics.Bitmap$CompressFormat, int)
    {
        java.lang.Throwable r6, $r14;
        cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache $r8;
        com.jakewharton.disklrucache.DiskLruCache$Editor $r12;
        int $i0, $i1;
        cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable r4, $r15;
        cn.ffcs.lib.bitmapcache.BitmapLruCache r0;
        android.graphics.Bitmap$CompressFormat $r3;
        java.lang.String $r1;
        java.io.OutputStream r11, $r13;
        com.jakewharton.disklrucache.DiskLruCache $r9;
        java.util.concurrent.locks.ReentrantLock $r10;
        cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy $r5;
        android.graphics.Bitmap $r2;
        android.content.res.Resources $r7;

        r0 := @this: cn.ffcs.lib.bitmapcache.BitmapLruCache;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: android.graphics.Bitmap;

        $r3 := @parameter2: android.graphics.Bitmap$CompressFormat;

        $i0 := @parameter3: int;

        $r15 = new cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable;

        r4 = $r15;

        $r7 = r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: android.content.res.Resources mResources>;

        $r5 = r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy mRecyclePolicy>;

        $i1 = -1;

        specialinvoke $r15.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: void <init>(java.lang.String,android.content.res.Resources,android.graphics.Bitmap,cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy,int)>($r1, $r7, $r2, $r5, $i1);

        $r8 = r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache mMemoryCache>;

        if $r8 == null goto label01;

        $r8 = r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache mMemoryCache>;

        virtualinvoke $r8.<cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache: cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable put(cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable)>(r4);

     label01:
        $r9 = r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: com.jakewharton.disklrucache.DiskLruCache mDiskCache>;

        if $r9 == null goto label11;

        staticinvoke <cn.ffcs.lib.bitmapcache.BitmapLruCache: void checkNotOnMainThread()>();

        $r1 = staticinvoke <cn.ffcs.lib.bitmapcache.BitmapLruCache: java.lang.String transformUrlForDiskCacheKey(java.lang.String)>($r1);

        $r10 = virtualinvoke r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: java.util.concurrent.locks.ReentrantLock getLockForDiskCacheEdit(java.lang.String)>($r1);

        virtualinvoke $r10.<java.util.concurrent.locks.ReentrantLock: void lock()>();

        r11 = null;

     label02:
        $r9 = r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: com.jakewharton.disklrucache.DiskLruCache mDiskCache>;

     label03:
        $r12 = virtualinvoke $r9.<com.jakewharton.disklrucache.DiskLruCache: com.jakewharton.disklrucache.DiskLruCache$Editor edit(java.lang.String)>($r1);

        $r13 = virtualinvoke $r12.<com.jakewharton.disklrucache.DiskLruCache$Editor: java.io.OutputStream newOutputStream(int)>(0);

     label04:
        r11 = $r13;

     label05:
        virtualinvoke $r2.<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>($r3, $i0, $r13);

        virtualinvoke $r13.<java.io.OutputStream: void flush()>();

        virtualinvoke $r12.<com.jakewharton.disklrucache.DiskLruCache$Editor: void commit()>();

     label06:
        staticinvoke <cn.ffcs.lib.bitmapcache.IoUtils: void closeStream(java.io.OutputStream)>($r13);

        virtualinvoke $r10.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        virtualinvoke r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: void scheduleDiskCacheFlush()>();

        return r4;

     label07:
        r6 := @caughtexception;

     label08:
        $r1 = <cn.ffcs.lib.bitmapcache.Constants: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r1, "Error while writing to disk cache", r6);

     label09:
        staticinvoke <cn.ffcs.lib.bitmapcache.IoUtils: void closeStream(java.io.OutputStream)>(r11);

        virtualinvoke $r10.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        virtualinvoke r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: void scheduleDiskCacheFlush()>();

        return r4;

     label10:
        $r14 := @caughtexception;

        staticinvoke <cn.ffcs.lib.bitmapcache.IoUtils: void closeStream(java.io.OutputStream)>(r11);

        virtualinvoke $r10.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        virtualinvoke r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: void scheduleDiskCacheFlush()>();

        throw $r14;

     label11:
        return r4;

        catch java.io.IOException from label03 to label04 with label07;
        catch java.io.IOException from label05 to label06 with label07;
        catch java.lang.Throwable from label02 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
    }

    public cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable put(java.lang.String, java.io.InputStream)
    {
        cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable $r3;
        cn.ffcs.lib.bitmapcache.BitmapLruCache r0;
        java.lang.String $r1;
        java.io.InputStream $r2;

        r0 := @this: cn.ffcs.lib.bitmapcache.BitmapLruCache;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.io.InputStream;

        $r3 = virtualinvoke r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable put(java.lang.String,java.io.InputStream,android.graphics.BitmapFactory$Options)>($r1, $r2, null);

        return $r3;
    }

    public cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable put(java.lang.String, java.io.InputStream, android.graphics.BitmapFactory$Options)
    {
        java.lang.Throwable r14, r17, $r18;
        cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache $r8;
        com.jakewharton.disklrucache.DiskLruCache$Editor $r12;
        cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable $r7;
        cn.ffcs.lib.bitmapcache.BitmapLruCache r0;
        java.lang.String $r1, $r9, $r16;
        java.io.OutputStream $r13;
        cn.ffcs.lib.bitmapcache.BitmapLruCache$FileInputStreamProvider $r6;
        com.jakewharton.disklrucache.DiskLruCache $r10;
        java.util.concurrent.locks.ReentrantLock $r11;
        java.io.File r4, $r5;
        java.lang.StringBuilder $r15;
        java.io.InputStream $r2;
        android.graphics.BitmapFactory$Options $r3;

        r0 := @this: cn.ffcs.lib.bitmapcache.BitmapLruCache;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.io.InputStream;

        $r3 := @parameter2: android.graphics.BitmapFactory$Options;

        staticinvoke <cn.ffcs.lib.bitmapcache.BitmapLruCache: void checkNotOnMainThread()>();

        r4 = null;

        $r5 = r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: java.io.File mTempDir>;

     label01:
        $r5 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>("bitmapcache_", null, $r5);

     label02:
        r4 = $r5;

     label03:
        staticinvoke <cn.ffcs.lib.bitmapcache.IoUtils: long copy(java.io.InputStream,java.io.File)>($r2, $r5);

     label04:
        if r4 == null goto label15;

        $r6 = new cn.ffcs.lib.bitmapcache.BitmapLruCache$FileInputStreamProvider;

        specialinvoke $r6.<cn.ffcs.lib.bitmapcache.BitmapLruCache$FileInputStreamProvider: void <init>(java.io.File)>(r4);

        $r7 = specialinvoke r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable decodeBitmap(cn.ffcs.lib.bitmapcache.BitmapLruCache$InputStreamProvider,java.lang.String,android.graphics.BitmapFactory$Options)>($r6, $r1, $r3);

        if $r7 == null goto label09;

        $r8 = r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache mMemoryCache>;

        if $r8 == null goto label05;

        virtualinvoke $r7.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: void setCached(boolean)>(1);

        $r8 = r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache mMemoryCache>;

        $r9 = virtualinvoke $r7.<cn.ffcs.lib.bitmapcache.CacheableBitmapDrawable: java.lang.String getUrl()>();

        virtualinvoke $r8.<cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r7);

     label05:
        $r10 = r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: com.jakewharton.disklrucache.DiskLruCache mDiskCache>;

        if $r10 == null goto label09;

        $r9 = staticinvoke <cn.ffcs.lib.bitmapcache.BitmapLruCache: java.lang.String transformUrlForDiskCacheKey(java.lang.String)>($r1);

        $r11 = virtualinvoke r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: java.util.concurrent.locks.ReentrantLock getLockForDiskCacheEdit(java.lang.String)>($r1);

        virtualinvoke $r11.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label06:
        $r10 = r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: com.jakewharton.disklrucache.DiskLruCache mDiskCache>;

     label07:
        $r12 = virtualinvoke $r10.<com.jakewharton.disklrucache.DiskLruCache: com.jakewharton.disklrucache.DiskLruCache$Editor edit(java.lang.String)>($r9);

        $r13 = virtualinvoke $r12.<com.jakewharton.disklrucache.DiskLruCache$Editor: java.io.OutputStream newOutputStream(int)>(0);

        staticinvoke <cn.ffcs.lib.bitmapcache.IoUtils: long copy(java.io.File,java.io.OutputStream)>(r4, $r13);

        virtualinvoke $r12.<com.jakewharton.disklrucache.DiskLruCache$Editor: void commit()>();

     label08:
        virtualinvoke $r11.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        virtualinvoke r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: void scheduleDiskCacheFlush()>();

     label09:
        virtualinvoke r4.<java.io.File: boolean delete()>();

        return $r7;

     label10:
        r14 := @caughtexception;

        $r9 = <cn.ffcs.lib.bitmapcache.Constants: java.lang.String LOG_TAG>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error writing to saving stream to temp file: ");

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r9, $r16, r14);

        goto label04;

     label11:
        r17 := @caughtexception;

     label12:
        $r9 = <cn.ffcs.lib.bitmapcache.Constants: java.lang.String LOG_TAG>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error writing to disk cache. URL: ");

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r9, $r1, r17);

     label13:
        virtualinvoke $r11.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        virtualinvoke r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: void scheduleDiskCacheFlush()>();

        goto label09;

     label14:
        $r18 := @caughtexception;

        virtualinvoke $r11.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        virtualinvoke r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: void scheduleDiskCacheFlush()>();

        throw $r18;

     label15:
        return null;

        catch java.io.IOException from label01 to label02 with label10;
        catch java.io.IOException from label03 to label04 with label10;
        catch java.io.IOException from label07 to label08 with label11;
        catch java.lang.Throwable from label06 to label08 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
    }

    public void remove(java.lang.String)
    {
        java.lang.Throwable r2;
        com.jakewharton.disklrucache.DiskLruCache $r4;
        cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache $r3;
        cn.ffcs.lib.bitmapcache.BitmapLruCache r0;
        java.io.IOException $r5;
        java.lang.String $r1;

        r0 := @this: cn.ffcs.lib.bitmapcache.BitmapLruCache;

        $r1 := @parameter0: java.lang.String;

        $r3 = r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache mMemoryCache>;

        if $r3 == null goto label1;

        $r3 = r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache mMemoryCache>;

        virtualinvoke $r3.<cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache: java.lang.Object remove(java.lang.Object)>($r1);

     label1:
        $r4 = r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: com.jakewharton.disklrucache.DiskLruCache mDiskCache>;

        if $r4 == null goto label5;

        staticinvoke <cn.ffcs.lib.bitmapcache.BitmapLruCache: void checkNotOnMainThread()>();

        $r4 = r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: com.jakewharton.disklrucache.DiskLruCache mDiskCache>;

     label2:
        $r1 = staticinvoke <cn.ffcs.lib.bitmapcache.BitmapLruCache: java.lang.String transformUrlForDiskCacheKey(java.lang.String)>($r1);

        virtualinvoke $r4.<com.jakewharton.disklrucache.DiskLruCache: boolean remove(java.lang.String)>($r1);

        virtualinvoke r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: void scheduleDiskCacheFlush()>();

     label3:
        return;

     label4:
        r2 := @caughtexception;

        $r5 = (java.io.IOException) r2;

        virtualinvoke $r5.<java.io.IOException: void printStackTrace()>();

     label5:
        return;

        catch java.io.IOException from label2 to label3 with label4;
    }

    public void scheduleDiskCacheFlush()
    {
        java.util.concurrent.TimeUnit $r1;
        java.util.concurrent.ScheduledFuture $r2;
        cn.ffcs.lib.bitmapcache.BitmapLruCache r0;
        java.util.concurrent.ScheduledThreadPoolExecutor $r3;
        cn.ffcs.lib.bitmapcache.BitmapLruCache$DiskCacheFlushRunnable $r4;

        r0 := @this: cn.ffcs.lib.bitmapcache.BitmapLruCache;

        $r2 = r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: java.util.concurrent.ScheduledFuture mDiskCacheFuture>;

        if $r2 == null goto label1;

        $r2 = r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: java.util.concurrent.ScheduledFuture mDiskCacheFuture>;

        interfaceinvoke $r2.<java.util.concurrent.ScheduledFuture: boolean cancel(boolean)>(0);

     label1:
        $r3 = r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: java.util.concurrent.ScheduledThreadPoolExecutor mDiskCacheFlusherExecutor>;

        $r4 = r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: cn.ffcs.lib.bitmapcache.BitmapLruCache$DiskCacheFlushRunnable mDiskCacheFlusherRunnable>;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $r2 = virtualinvoke $r3.<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>($r4, 5L, $r1);

        r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: java.util.concurrent.ScheduledFuture mDiskCacheFuture> = $r2;

        return;
    }

    void setDiskCache(com.jakewharton.disklrucache.DiskLruCache)
    {
        java.lang.Throwable $r5;
        com.jakewharton.disklrucache.DiskLruCache $r1;
        cn.ffcs.lib.bitmapcache.BitmapLruCache r0;
        java.util.HashMap $r2;
        java.util.concurrent.ScheduledThreadPoolExecutor $r3;
        cn.ffcs.lib.bitmapcache.BitmapLruCache$DiskCacheFlushRunnable $r4;

        r0 := @this: cn.ffcs.lib.bitmapcache.BitmapLruCache;

        $r1 := @parameter0: com.jakewharton.disklrucache.DiskLruCache;

        entermonitor r0;

     label1:
        r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: com.jakewharton.disklrucache.DiskLruCache mDiskCache> = $r1;

        if $r1 == null goto label2;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: java.util.HashMap mDiskCacheEditLocks> = $r2;

        $r3 = new java.util.concurrent.ScheduledThreadPoolExecutor;

        specialinvoke $r3.<java.util.concurrent.ScheduledThreadPoolExecutor: void <init>(int)>(1);

        r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: java.util.concurrent.ScheduledThreadPoolExecutor mDiskCacheFlusherExecutor> = $r3;

        $r4 = new cn.ffcs.lib.bitmapcache.BitmapLruCache$DiskCacheFlushRunnable;

        specialinvoke $r4.<cn.ffcs.lib.bitmapcache.BitmapLruCache$DiskCacheFlushRunnable: void <init>(com.jakewharton.disklrucache.DiskLruCache)>($r1);

        r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: cn.ffcs.lib.bitmapcache.BitmapLruCache$DiskCacheFlushRunnable mDiskCacheFlusherRunnable> = $r4;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r5 := @caughtexception;

        exitmonitor r0;

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    void setMemoryCache(cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache)
    {
        cn.ffcs.lib.bitmapcache.BitmapLruCache r0;
        cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache $r1;
        cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy $r2;

        r0 := @this: cn.ffcs.lib.bitmapcache.BitmapLruCache;

        $r1 := @parameter0: cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache;

        r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache mMemoryCache> = $r1;

        $r2 = virtualinvoke $r1.<cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache: cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy getRecyclePolicy()>();

        r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: cn.ffcs.lib.bitmapcache.BitmapLruCache$RecyclePolicy mRecyclePolicy> = $r2;

        return;
    }

    public void trimMemory()
    {
        cn.ffcs.lib.bitmapcache.BitmapLruCache r0;
        cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache $r1;

        r0 := @this: cn.ffcs.lib.bitmapcache.BitmapLruCache;

        $r1 = r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache mMemoryCache>;

        if $r1 == null goto label1;

        $r1 = r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache: cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache mMemoryCache>;

        virtualinvoke $r1.<cn.ffcs.lib.bitmapcache.BitmapMemoryLruCache: void trimMemory()>();

     label1:
        return;
    }

    public static void <clinit>()
    {
        <cn.ffcs.lib.bitmapcache.BitmapLruCache: int DISK_CACHE_FLUSH_DELAY_SECS> = 5;

        return;
    }
}
