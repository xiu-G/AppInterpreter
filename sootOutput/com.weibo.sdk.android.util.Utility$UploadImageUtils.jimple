public final class com.weibo.sdk.android.util.Utility$UploadImageUtils extends java.lang.Object
{

    public void <init>()
    {
        com.weibo.sdk.android.util.Utility$UploadImageUtils r0;

        r0 := @this: com.weibo.sdk.android.util.Utility$UploadImageUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static void revitionImageSize(java.lang.String, int, int) throws java.io.IOException
    {
        int $i0, $i1, i2, $i3;
        android.graphics.Bitmap$CompressFormat $r9;
        java.lang.String r3;
        double $d0;
        boolean $z0;
        java.io.FileOutputStream r2;
        java.io.IOException $r6;
        java.io.FileInputStream r0;
        java.io.FileNotFoundException $r5;
        java.lang.Exception r8, r10;
        android.graphics.Bitmap $r7;
        android.graphics.BitmapFactory$Options r1;

        r3 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        goto label01;

     label01:
        $z0 = staticinvoke <com.weibo.sdk.android.util.Utility: boolean access$0(java.lang.String)>(r3);

        if $z0 != 0 goto label03;

        $r5 = new java.io.FileNotFoundException;

        if r3 != null goto label02;

        r3 = "null";

     label02:
        specialinvoke $r5.<java.io.FileNotFoundException: void <init>(java.lang.String)>(r3);

        throw $r5;

     label03:
        $z0 = staticinvoke <com.weibo.sdk.android.util.BitmapHelper: boolean verifyBitmap(java.lang.String)>(r3);

        if $z0 != 0 goto label04;

        $r6 = new java.io.IOException;

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>("");

        throw $r6;

     label04:
        r0 = new java.io.FileInputStream;

        specialinvoke r0.<java.io.FileInputStream: void <init>(java.lang.String)>(r3);

        r1 = new android.graphics.BitmapFactory$Options;

        specialinvoke r1.<android.graphics.BitmapFactory$Options: void <init>()>();

        r1.<android.graphics.BitmapFactory$Options: boolean inJustDecodeBounds> = 1;

        staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>(r0, null, r1);

     label05:
        virtualinvoke r0.<java.io.FileInputStream: void close()>();

     label06:
        i2 = 0;

     label07:
        $i3 = r1.<android.graphics.BitmapFactory$Options: int outWidth>;

        $i3 = $i3 >> i2;

        if $i3 > 1024 goto label09;

        $i3 = r1.<android.graphics.BitmapFactory$Options: int outHeight>;

        $i3 = $i3 >> i2;

        if $i3 > 1024 goto label09;

        $d0 = (double) i2;

        $d0 = staticinvoke <java.lang.Math: double pow(double,double)>(2.0, $d0);

        $i0 = (int) $d0;

        r1.<android.graphics.BitmapFactory$Options: int inSampleSize> = $i0;

        r1.<android.graphics.BitmapFactory$Options: boolean inJustDecodeBounds> = 0;

        $r7 = staticinvoke <com.weibo.sdk.android.util.Utility$UploadImageUtils: android.graphics.Bitmap safeDecodeBimtapFile(java.lang.String,android.graphics.BitmapFactory$Options)>(r3, r1);

        if $r7 != null goto label10;

        $r6 = new java.io.IOException;

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>("Bitmap decode error!");

        throw $r6;

     label08:
        r8 := @caughtexception;

        virtualinvoke r8.<java.lang.Exception: void printStackTrace()>();

        goto label06;

     label09:
        i2 = i2 + 1;

        goto label07;

     label10:
        staticinvoke <com.weibo.sdk.android.util.Utility: boolean access$1(java.lang.String)>(r3);

        staticinvoke <com.weibo.sdk.android.util.Utility: void access$2(java.lang.String)>(r3);

        r2 = new java.io.FileOutputStream;

        specialinvoke r2.<java.io.FileOutputStream: void <init>(java.lang.String)>(r3);

        if r1 == null goto label13;

        r3 = r1.<android.graphics.BitmapFactory$Options: java.lang.String outMimeType>;

        if r3 == null goto label13;

        r3 = r1.<android.graphics.BitmapFactory$Options: java.lang.String outMimeType>;

        $z0 = virtualinvoke r3.<java.lang.String: boolean contains(java.lang.CharSequence)>("png");

        if $z0 == 0 goto label13;

        $r9 = <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat PNG>;

        virtualinvoke $r7.<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>($r9, 75, r2);

     label11:
        virtualinvoke r2.<java.io.FileOutputStream: void close()>();

     label12:
        virtualinvoke $r7.<android.graphics.Bitmap: void recycle()>();

        return;

     label13:
        $r9 = <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat JPEG>;

        virtualinvoke $r7.<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>($r9, 75, r2);

        goto label11;

     label14:
        r10 := @caughtexception;

        virtualinvoke r10.<java.lang.Exception: void printStackTrace()>();

        goto label12;

        catch java.lang.Exception from label05 to label06 with label08;
        catch java.lang.Exception from label11 to label12 with label14;
    }

    private static void revitionImageSizeHD(java.lang.String, int, int) throws java.io.IOException
    {
        android.graphics.Bitmap$Config $r9;
        byte $b5;
        int $i0, $i1, i2, i3, $i4;
        android.graphics.Bitmap$CompressFormat $r10;
        android.graphics.Canvas $r18;
        java.lang.String r5;
        android.graphics.Matrix r2, $r19;
        boolean $z0;
        double $d0;
        java.io.FileOutputStream r4, $r21;
        java.io.IOException $r15;
        java.io.FileInputStream r1, $r16;
        java.lang.Exception r0, r12;
        java.io.FileNotFoundException $r6, $r14;
        android.graphics.Bitmap $r7, r8;
        float $f0, $f1;
        android.graphics.Paint $r20;
        java.lang.OutOfMemoryError r11;
        android.graphics.BitmapFactory$Options r3, $r17;

        r5 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        goto label01;

     label01:
        $z0 = staticinvoke <com.weibo.sdk.android.util.Utility: boolean access$0(java.lang.String)>(r5);

        if $z0 != 0 goto label03;

        $r14 = new java.io.FileNotFoundException;

        $r6 = $r14;

        if r5 != null goto label02;

        r5 = "null";

     label02:
        specialinvoke $r14.<java.io.FileNotFoundException: void <init>(java.lang.String)>(r5);

        throw $r6;

     label03:
        $z0 = staticinvoke <com.weibo.sdk.android.util.BitmapHelper: boolean verifyBitmap(java.lang.String)>(r5);

        if $z0 != 0 goto label04;

        $r15 = new java.io.IOException;

        specialinvoke $r15.<java.io.IOException: void <init>(java.lang.String)>("");

        throw $r15;

     label04:
        $r16 = new java.io.FileInputStream;

        r1 = $r16;

        specialinvoke $r16.<java.io.FileInputStream: void <init>(java.lang.String)>(r5);

        $r17 = new android.graphics.BitmapFactory$Options;

        r3 = $r17;

        specialinvoke $r17.<android.graphics.BitmapFactory$Options: void <init>()>();

        r3.<android.graphics.BitmapFactory$Options: boolean inJustDecodeBounds> = 1;

        staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>(r1, null, r3);

     label05:
        virtualinvoke r1.<java.io.FileInputStream: void close()>();

     label06:
        i3 = 0;

     label07:
        $i4 = r3.<android.graphics.BitmapFactory$Options: int outWidth>;

        $i4 = $i4 >> i3;

        if $i4 > 3200 goto label09;

        $i4 = r3.<android.graphics.BitmapFactory$Options: int outHeight>;

        $i4 = $i4 >> i3;

        if $i4 > 3200 goto label09;

        $d0 = (double) i3;

        $d0 = staticinvoke <java.lang.Math: double pow(double,double)>(2.0, $d0);

        i2 = (int) $d0;

        r3.<android.graphics.BitmapFactory$Options: int inSampleSize> = i2;

        r3.<android.graphics.BitmapFactory$Options: boolean inJustDecodeBounds> = 0;

        $r7 = staticinvoke <com.weibo.sdk.android.util.Utility$UploadImageUtils: android.graphics.Bitmap safeDecodeBimtapFile(java.lang.String,android.graphics.BitmapFactory$Options)>(r5, r3);

        r8 = $r7;

        if $r7 != null goto label10;

        $r15 = new java.io.IOException;

        specialinvoke $r15.<java.io.IOException: void <init>(java.lang.String)>("Bitmap decode error!");

        throw $r15;

     label08:
        r0 := @caughtexception;

        virtualinvoke r0.<java.lang.Exception: void printStackTrace()>();

        goto label06;

     label09:
        i3 = i3 + 1;

        goto label07;

     label10:
        staticinvoke <com.weibo.sdk.android.util.Utility: boolean access$1(java.lang.String)>(r5);

        staticinvoke <com.weibo.sdk.android.util.Utility: void access$2(java.lang.String)>(r5);

        i2 = virtualinvoke $r7.<android.graphics.Bitmap: int getWidth()>();

        i3 = virtualinvoke $r7.<android.graphics.Bitmap: int getHeight()>();

        if i2 <= i3 goto label22;

        i2 = virtualinvoke $r7.<android.graphics.Bitmap: int getWidth()>();

     label11:
        $f0 = (float) 1600;

        $f1 = (float) i2;

        $f0 = $f0 / $f1;

        $b5 = $f0 cmpg 1.0F;

        $i0 = (int) $b5;

        if $i0 >= 0 goto label19;

     label12:
        $i0 = virtualinvoke $r7.<android.graphics.Bitmap: int getWidth()>();

     label13:
        $f1 = (float) $i0;

        $f1 = $f1 * $f0;

        $i0 = (int) $f1;

     label14:
        i2 = virtualinvoke $r7.<android.graphics.Bitmap: int getHeight()>();

     label15:
        $f1 = (float) i2;

        $f1 = $f1 * $f0;

        i2 = (int) $f1;

     label16:
        $r9 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        r8 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>($i0, i2, $r9);

     label17:
        if r8 != null goto label18;

        virtualinvoke $r7.<android.graphics.Bitmap: void recycle()>();

     label18:
        $r18 = new android.graphics.Canvas;

        specialinvoke $r18.<android.graphics.Canvas: void <init>(android.graphics.Bitmap)>(r8);

        $r19 = new android.graphics.Matrix;

        r2 = $r19;

        specialinvoke $r19.<android.graphics.Matrix: void <init>()>();

        virtualinvoke r2.<android.graphics.Matrix: void setScale(float,float)>($f0, $f0);

        $r20 = new android.graphics.Paint;

        specialinvoke $r20.<android.graphics.Paint: void <init>()>();

        virtualinvoke $r18.<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Matrix,android.graphics.Paint)>($r7, r2, $r20);

        virtualinvoke $r7.<android.graphics.Bitmap: void recycle()>();

     label19:
        $r21 = new java.io.FileOutputStream;

        r4 = $r21;

        specialinvoke $r21.<java.io.FileOutputStream: void <init>(java.lang.String)>(r5);

        if r3 == null goto label24;

        r5 = r3.<android.graphics.BitmapFactory$Options: java.lang.String outMimeType>;

        if r5 == null goto label24;

        r5 = r3.<android.graphics.BitmapFactory$Options: java.lang.String outMimeType>;

        $z0 = virtualinvoke r5.<java.lang.String: boolean contains(java.lang.CharSequence)>("png");

        if $z0 == 0 goto label24;

        $r10 = <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat PNG>;

        virtualinvoke r8.<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>($r10, 75, r4);

     label20:
        virtualinvoke r4.<java.io.FileOutputStream: void close()>();

     label21:
        virtualinvoke r8.<android.graphics.Bitmap: void recycle()>();

        return;

     label22:
        i2 = virtualinvoke $r7.<android.graphics.Bitmap: int getHeight()>();

        goto label11;

     label23:
        r11 := @caughtexception;

        staticinvoke <java.lang.System: void gc()>();

        $d0 = (double) $f0;

        $d0 = $d0 * 0.8;

        $f0 = (float) $d0;

        goto label12;

     label24:
        $r10 = <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat JPEG>;

        virtualinvoke r8.<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>($r10, 75, r4);

        goto label20;

     label25:
        r12 := @caughtexception;

        virtualinvoke r12.<java.lang.Exception: void printStackTrace()>();

        goto label21;

        catch java.lang.Exception from label05 to label06 with label08;
        catch java.lang.OutOfMemoryError from label12 to label13 with label23;
        catch java.lang.OutOfMemoryError from label14 to label15 with label23;
        catch java.lang.OutOfMemoryError from label16 to label17 with label23;
        catch java.lang.Exception from label20 to label21 with label25;
    }

    public static boolean revitionPostImageSize(java.lang.String)
    {
        java.lang.Throwable r1;
        java.io.IOException $r2;
        java.lang.String $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

     label1:
        $z0 = staticinvoke <com.weibo.sdk.android.Weibo: boolean isWifi()>();

     label2:
        if $z0 == 0 goto label5;

     label3:
        staticinvoke <com.weibo.sdk.android.util.Utility$UploadImageUtils: void revitionImageSizeHD(java.lang.String,int,int)>($r0, 1600, 75);

     label4:
        return 1;

     label5:
        staticinvoke <com.weibo.sdk.android.util.Utility$UploadImageUtils: void revitionImageSize(java.lang.String,int,int)>($r0, 1024, 75);

     label6:
        goto label4;

     label7:
        r1 := @caughtexception;

        $r2 = (java.io.IOException) r1;

        virtualinvoke $r2.<java.io.IOException: void printStackTrace()>();

        return 0;

        catch java.io.IOException from label1 to label2 with label7;
        catch java.io.IOException from label3 to label4 with label7;
        catch java.io.IOException from label5 to label6 with label7;
    }

    private static android.graphics.Bitmap safeDecodeBimtapFile(java.lang.String, android.graphics.BitmapFactory$Options)
    {
        java.lang.Throwable r2, r8, r10, r11;
        int i0, $i1;
        java.lang.String $r0;
        java.io.IOException $r14;
        java.io.FileInputStream r6, r7, $r13;
        android.graphics.Bitmap $r3, r5;
        java.lang.OutOfMemoryError r9;
        android.graphics.BitmapFactory$Options $r1, r4, $r12;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: android.graphics.BitmapFactory$Options;

        r4 = $r1;

        if $r1 != null goto label01;

        $r12 = new android.graphics.BitmapFactory$Options;

        r4 = $r12;

        specialinvoke $r12.<android.graphics.BitmapFactory$Options: void <init>()>();

        r4.<android.graphics.BitmapFactory$Options: int inSampleSize> = 1;

     label01:
        r5 = null;

        i0 = 0;

        r6 = null;

     label02:
        if i0 < 5 goto label03;

        return r5;

     label03:
        $r13 = new java.io.FileInputStream;

     label04:
        r7 = $r13;

     label05:
        specialinvoke $r13.<java.io.FileInputStream: void <init>(java.lang.String)>($r0);

     label06:
        $r3 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>(r7, null, $r1);

     label07:
        r5 = $r3;

     label08:
        virtualinvoke r7.<java.io.FileInputStream: void close()>();

     label09:
        return $r3;

     label10:
        r8 := @caughtexception;

        $r14 = (java.io.IOException) r8;

     label11:
        virtualinvoke $r14.<java.io.IOException: void printStackTrace()>();

     label12:
        return $r3;

     label13:
        r9 := @caughtexception;

     label14:
        virtualinvoke r9.<java.lang.OutOfMemoryError: void printStackTrace()>();

        $i1 = r4.<android.graphics.BitmapFactory$Options: int inSampleSize>;

        $i1 = $i1 * 2;

        r4.<android.graphics.BitmapFactory$Options: int inSampleSize> = $i1;

     label15:
        virtualinvoke r7.<java.io.FileInputStream: void close()>();

     label16:
        i0 = i0 + 1;

        r6 = r7;

        goto label02;

     label17:
        r2 := @caughtexception;

        $r14 = (java.io.IOException) r2;

        virtualinvoke $r14.<java.io.IOException: void printStackTrace()>();

        goto label16;

     label18:
        r10 := @caughtexception;

        return r5;

     label19:
        r11 := @caughtexception;

        return r5;

     label20:
        r9 := @caughtexception;

        r7 = r6;

        goto label14;

        catch java.lang.OutOfMemoryError from label03 to label04 with label20;
        catch java.lang.OutOfMemoryError from label05 to label06 with label20;
        catch java.io.FileNotFoundException from label05 to label06 with label18;
        catch java.lang.OutOfMemoryError from label06 to label07 with label13;
        catch java.io.FileNotFoundException from label06 to label07 with label19;
        catch java.io.IOException from label08 to label09 with label10;
        catch java.lang.OutOfMemoryError from label08 to label09 with label13;
        catch java.lang.OutOfMemoryError from label11 to label12 with label13;
        catch java.io.FileNotFoundException from label11 to label12 with label19;
        catch java.io.IOException from label15 to label16 with label17;
    }
}
