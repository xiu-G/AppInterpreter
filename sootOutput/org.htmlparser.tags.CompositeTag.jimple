public class org.htmlparser.tags.CompositeTag extends org.htmlparser.nodes.TagNode
{
    protected static final kw j;
    protected org.htmlparser.Tag i;

    static void <clinit>()
    {
        kw $r0;

        $r0 = new kw;

        specialinvoke $r0.<kw: void <init>()>();

        <org.htmlparser.tags.CompositeTag: kw j> = $r0;

        return;
    }

    public void <init>()
    {
        org.htmlparser.tags.CompositeTag r0;
        kw $r1;

        r0 := @this: org.htmlparser.tags.CompositeTag;

        specialinvoke r0.<org.htmlparser.nodes.TagNode: void <init>()>();

        $r1 = <org.htmlparser.tags.CompositeTag: kw j>;

        virtualinvoke r0.<org.htmlparser.tags.CompositeTag: void setThisScanner(kx)>($r1);

        return;
    }

    protected void a(java.lang.StringBuffer, boolean)
    {
        ll $r2;
        org.htmlparser.tags.CompositeTag r0;
        org.htmlparser.Node $r3;
        java.lang.StringBuffer $r1;
        int $i0, $i1;
        java.lang.String $r4;
        boolean $z0, $z1;

        r0 := @this: org.htmlparser.tags.CompositeTag;

        $r1 := @parameter0: java.lang.StringBuffer;

        $z0 := @parameter1: boolean;

        $r2 = virtualinvoke r0.<org.htmlparser.tags.CompositeTag: ll children()>();

     label1:
        $z1 = interfaceinvoke $r2.<ll: boolean a()>();

        if $z1 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<ll: org.htmlparser.Node b()>();

        if $z0 == 0 goto label2;

        $i0 = interfaceinvoke $r3.<org.htmlparser.Node: int getStartPosition()>();

        $i1 = interfaceinvoke $r3.<org.htmlparser.Node: int getEndPosition()>();

        if $i0 == $i1 goto label1;

     label2:
        $r4 = interfaceinvoke $r3.<org.htmlparser.Node: java.lang.String toHtml()>();

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        goto label1;

     label3:
        return;
    }

    public void accept(lp)
    {
        ll $r3;
        org.htmlparser.Tag $r5;
        lp $r1;
        lg $r2;
        org.htmlparser.tags.CompositeTag r0;
        org.htmlparser.Node $r4;
        boolean $z0;

        r0 := @this: org.htmlparser.tags.CompositeTag;

        $r1 := @parameter0: lp;

        $z0 = $r1.<lp: boolean a>;

        if $z0 == 0 goto label3;

        $r2 = virtualinvoke r0.<org.htmlparser.tags.CompositeTag: lg getChildren()>();

        if $r2 == null goto label2;

        $r3 = virtualinvoke r0.<org.htmlparser.tags.CompositeTag: ll children()>();

     label1:
        $z0 = interfaceinvoke $r3.<ll: boolean a()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<ll: org.htmlparser.Node b()>();

        interfaceinvoke $r4.<org.htmlparser.Node: void accept(lp)>($r1);

        goto label1;

     label2:
        $r5 = virtualinvoke r0.<org.htmlparser.tags.CompositeTag: org.htmlparser.Tag getEndTag()>();

        if $r5 == null goto label3;

        $r5 = virtualinvoke r0.<org.htmlparser.tags.CompositeTag: org.htmlparser.Tag getEndTag()>();

        if r0 == $r5 goto label3;

        $r5 = virtualinvoke r0.<org.htmlparser.tags.CompositeTag: org.htmlparser.Tag getEndTag()>();

        interfaceinvoke $r5.<org.htmlparser.Tag: void accept(lp)>($r1);

     label3:
        return;
    }

    public org.htmlparser.Node childAt(int)
    {
        org.htmlparser.Node[] $r2;
        int $i0;
        lg $r1;
        org.htmlparser.tags.CompositeTag r0;
        org.htmlparser.Node $r3;

        r0 := @this: org.htmlparser.tags.CompositeTag;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.htmlparser.tags.CompositeTag: lg getChildren()>();

        if $r1 != null goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<org.htmlparser.tags.CompositeTag: lg getChildren()>();

        $r2 = $r1.<lg: org.htmlparser.Node[] a>;

        $r3 = $r2[$i0];

        return $r3;
    }

    public ll children()
    {
        lg $r1;
        org.htmlparser.tags.CompositeTag r0;
        lh $r2;

        r0 := @this: org.htmlparser.tags.CompositeTag;

        $r1 = virtualinvoke r0.<org.htmlparser.tags.CompositeTag: lg getChildren()>();

        if $r1 == null goto label1;

        $r1 = virtualinvoke r0.<org.htmlparser.tags.CompositeTag: lg getChildren()>();

        $r2 = new lh;

        specialinvoke $r2.<lh: void <init>(lg)>($r1);

        return $r2;

     label1:
        $r1 = new lg;

        specialinvoke $r1.<lg: void <init>()>();

        $r2 = new lh;

        specialinvoke $r2.<lh: void <init>(lg)>($r1);

        return $r2;
    }

    public void collectInto(lg, org.htmlparser.NodeFilter)
    {
        ll $r3;
        org.htmlparser.NodeFilter $r2;
        org.htmlparser.Tag $r5;
        lg $r1;
        org.htmlparser.tags.CompositeTag r0;
        org.htmlparser.Node $r4;
        boolean $z0;

        r0 := @this: org.htmlparser.tags.CompositeTag;

        $r1 := @parameter0: lg;

        $r2 := @parameter1: org.htmlparser.NodeFilter;

        specialinvoke r0.<org.htmlparser.nodes.TagNode: void collectInto(lg,org.htmlparser.NodeFilter)>($r1, $r2);

        $r3 = virtualinvoke r0.<org.htmlparser.tags.CompositeTag: ll children()>();

     label1:
        $z0 = interfaceinvoke $r3.<ll: boolean a()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<ll: org.htmlparser.Node b()>();

        interfaceinvoke $r4.<org.htmlparser.Node: void collectInto(lg,org.htmlparser.NodeFilter)>($r1, $r2);

        goto label1;

     label2:
        $r5 = virtualinvoke r0.<org.htmlparser.tags.CompositeTag: org.htmlparser.Tag getEndTag()>();

        if $r5 == null goto label3;

        $r5 = virtualinvoke r0.<org.htmlparser.tags.CompositeTag: org.htmlparser.Tag getEndTag()>();

        if r0 == $r5 goto label3;

        $r5 = virtualinvoke r0.<org.htmlparser.tags.CompositeTag: org.htmlparser.Tag getEndTag()>();

        interfaceinvoke $r5.<org.htmlparser.Tag: void collectInto(lg,org.htmlparser.NodeFilter)>($r1, $r2);

     label3:
        return;
    }

    public org.htmlparser.Text[] digupStringNode(java.lang.String)
    {
        org.htmlparser.Node[] $r4;
        org.htmlparser.Text[] $r6;
        org.htmlparser.tags.CompositeTag r2;
        org.htmlparser.Node r5;
        org.htmlparser.Text $r7;
        int $i0, $i1, $i2;
        java.lang.String $r0;
        lg $r1, $r3;
        boolean $z0;

        r2 := @this: org.htmlparser.tags.CompositeTag;

        $r0 := @parameter0: java.lang.String;

        $r3 = virtualinvoke r2.<org.htmlparser.tags.CompositeTag: lg searchFor(java.lang.String)>($r0);

        $r1 = new lg;

        specialinvoke $r1.<lg: void <init>()>();

        $i0 = 0;

     label1:
        $i1 = $r3.<lg: int b>;

        if $i0 >= $i1 goto label5;

        $r4 = $r3.<lg: org.htmlparser.Node[] a>;

        r5 = $r4[$i0];

        $z0 = r5 instanceof org.htmlparser.Text;

        if $z0 == 0 goto label3;

        virtualinvoke $r1.<lg: void a(org.htmlparser.Node)>(r5);

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        $z0 = r5 instanceof org.htmlparser.tags.CompositeTag;

        if $z0 == 0 goto label2;

        r2 = (org.htmlparser.tags.CompositeTag) r5;

        $r6 = virtualinvoke r2.<org.htmlparser.tags.CompositeTag: org.htmlparser.Text[] digupStringNode(java.lang.String)>($r0);

        $i1 = 0;

     label4:
        $i2 = lengthof $r6;

        if $i1 >= $i2 goto label2;

        $r7 = $r6[$i1];

        virtualinvoke $r1.<lg: void a(org.htmlparser.Node)>($r7);

        $i1 = $i1 + 1;

        goto label4;

     label5:
        $i0 = $r1.<lg: int b>;

        $r6 = newarray (org.htmlparser.Text)[$i0];

        $i0 = 0;

     label6:
        $i1 = lengthof $r6;

        if $i0 >= $i1 goto label7;

        $r4 = $r1.<lg: org.htmlparser.Node[] a>;

        r5 = $r4[$i0];

        $r7 = (org.htmlparser.Text) r5;

        $r6[$i0] = $r7;

        $i0 = $i0 + 1;

        goto label6;

     label7:
        return $r6;
    }

    public ll elements()
    {
        lg $r1;
        org.htmlparser.tags.CompositeTag r0;
        lh $r2;

        r0 := @this: org.htmlparser.tags.CompositeTag;

        $r1 = virtualinvoke r0.<org.htmlparser.tags.CompositeTag: lg getChildren()>();

        if $r1 != null goto label1;

        $r1 = new lg;

        specialinvoke $r1.<lg: void <init>()>();

        $r2 = new lh;

        specialinvoke $r2.<lh: void <init>(lg)>($r1);

        return $r2;

     label1:
        $r1 = virtualinvoke r0.<org.htmlparser.tags.CompositeTag: lg getChildren()>();

        $r2 = new lh;

        specialinvoke $r2.<lh: void <init>(lg)>($r1);

        return $r2;
    }

    public int findPositionOf(java.lang.String)
    {
        java.util.Locale $r2;
        int $i0;
        java.lang.String $r1;
        org.htmlparser.tags.CompositeTag r0;

        r0 := @this: org.htmlparser.tags.CompositeTag;

        $r1 := @parameter0: java.lang.String;

        $r2 = <java.util.Locale: java.util.Locale ENGLISH>;

        $i0 = virtualinvoke r0.<org.htmlparser.tags.CompositeTag: int findPositionOf(java.lang.String,java.util.Locale)>($r1, $r2);

        return $i0;
    }

    public int findPositionOf(java.lang.String, java.util.Locale)
    {
        ll $r3;
        org.htmlparser.tags.CompositeTag r0;
        org.htmlparser.Node $r4;
        java.util.Locale $r2;
        int $i0, $i1, $i2;
        java.lang.String $r1, $r5;
        boolean $z0;

        r0 := @this: org.htmlparser.tags.CompositeTag;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.util.Locale;

        $i0 = 0;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r2);

        $r3 = virtualinvoke r0.<org.htmlparser.tags.CompositeTag: ll children()>();

     label1:
        $z0 = interfaceinvoke $r3.<ll: boolean a()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<ll: org.htmlparser.Node b()>();

        $r5 = interfaceinvoke $r4.<org.htmlparser.Node: java.lang.String toPlainTextString()>();

        $r5 = virtualinvoke $r5.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r2);

        $i1 = virtualinvoke $r5.<java.lang.String: int indexOf(java.lang.String)>($r1);

        $i2 = -1;

        if $i2 == $i1 goto label2;

        return $i0;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        $i0 = -1;

        return $i0;
    }

    public int findPositionOf(org.htmlparser.Node)
    {
        ll $r2;
        int $i0;
        org.htmlparser.tags.CompositeTag r0;
        org.htmlparser.Node $r1, $r3;
        boolean $z0;

        r0 := @this: org.htmlparser.tags.CompositeTag;

        $r1 := @parameter0: org.htmlparser.Node;

        $i0 = 0;

        $r2 = virtualinvoke r0.<org.htmlparser.tags.CompositeTag: ll children()>();

     label1:
        $z0 = interfaceinvoke $r2.<ll: boolean a()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<ll: org.htmlparser.Node b()>();

        if $r3 != $r1 goto label2;

        return $i0;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        $i0 = -1;

        return $i0;
    }

    public org.htmlparser.Node getChild(int)
    {
        org.htmlparser.Node[] $r2;
        int $i0;
        lg $r1;
        org.htmlparser.tags.CompositeTag r0;
        org.htmlparser.Node $r3;

        r0 := @this: org.htmlparser.tags.CompositeTag;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.htmlparser.tags.CompositeTag: lg getChildren()>();

        if $r1 != null goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<org.htmlparser.tags.CompositeTag: lg getChildren()>();

        $r2 = $r1.<lg: org.htmlparser.Node[] a>;

        $r3 = $r2[$i0];

        return $r3;
    }

    public int getChildCount()
    {
        int i0;
        lg $r1;
        org.htmlparser.tags.CompositeTag r0;

        r0 := @this: org.htmlparser.tags.CompositeTag;

        $r1 = virtualinvoke r0.<org.htmlparser.tags.CompositeTag: lg getChildren()>();

        if $r1 != null goto label1;

        return 0;

     label1:
        i0 = $r1.<lg: int b>;

        return i0;
    }

    public org.htmlparser.Node[] getChildrenAsNodeArray()
    {
        org.htmlparser.Node[] $r1, $r3;
        int $i0;
        lg $r2;
        org.htmlparser.tags.CompositeTag r0;

        r0 := @this: org.htmlparser.tags.CompositeTag;

        $r2 = virtualinvoke r0.<org.htmlparser.tags.CompositeTag: lg getChildren()>();

        if $r2 != null goto label1;

        $r1 = newarray (org.htmlparser.Node)[0];

        return $r1;

     label1:
        $r2 = virtualinvoke r0.<org.htmlparser.tags.CompositeTag: lg getChildren()>();

        $i0 = $r2.<lg: int b>;

        $r3 = newarray (org.htmlparser.Node)[$i0];

        $r1 = $r2.<lg: org.htmlparser.Node[] a>;

        $i0 = $r2.<lg: int b>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r3, 0, $i0);

        return $r3;
    }

    public java.lang.String getChildrenHTML()
    {
        ll $r2;
        org.htmlparser.nodes.AbstractNode r4;
        java.lang.StringBuffer $r1;
        java.lang.String $r5;
        org.htmlparser.tags.CompositeTag r0;
        org.htmlparser.Node $r3;
        boolean $z0;

        r0 := @this: org.htmlparser.tags.CompositeTag;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke r0.<org.htmlparser.tags.CompositeTag: ll children()>();

     label1:
        $z0 = interfaceinvoke $r2.<ll: boolean a()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<ll: org.htmlparser.Node b()>();

        r4 = (org.htmlparser.nodes.AbstractNode) $r3;

        $r5 = virtualinvoke r4.<org.htmlparser.nodes.AbstractNode: java.lang.String toHtml()>();

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        goto label1;

     label2:
        $r5 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r5;
    }

    public org.htmlparser.Tag getEndTag()
    {
        org.htmlparser.Tag r1;
        org.htmlparser.tags.CompositeTag r0;

        r0 := @this: org.htmlparser.tags.CompositeTag;

        r1 = r0.<org.htmlparser.tags.CompositeTag: org.htmlparser.Tag i>;

        return r1;
    }

    public java.lang.String getStringText()
    {
        org.htmlparser.Tag $r1;
        kr $r2;
        int $i0, $i1;
        java.lang.String $r3;
        org.htmlparser.tags.CompositeTag r0;

        r0 := @this: org.htmlparser.tags.CompositeTag;

        $i0 = virtualinvoke r0.<org.htmlparser.tags.CompositeTag: int getEndPosition()>();

        $r1 = r0.<org.htmlparser.tags.CompositeTag: org.htmlparser.Tag i>;

        $i1 = interfaceinvoke $r1.<org.htmlparser.Tag: int getStartPosition()>();

        $r2 = virtualinvoke r0.<org.htmlparser.tags.CompositeTag: kr getPage()>();

        $r3 = virtualinvoke $r2.<kr: java.lang.String a(int,int)>($i0, $i1);

        return $r3;
    }

    public java.lang.String getText()
    {
        int $i0;
        java.lang.String $r1;
        org.htmlparser.tags.CompositeTag r0;

        r0 := @this: org.htmlparser.tags.CompositeTag;

        $r1 = specialinvoke r0.<org.htmlparser.nodes.TagNode: java.lang.String toHtml(boolean)>(1);

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i0 = $i0 - 1;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(1, $i0);

        return $r1;
    }

    public void removeChild(int)
    {
        int $i0;
        lg $r1;
        org.htmlparser.tags.CompositeTag r0;

        r0 := @this: org.htmlparser.tags.CompositeTag;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.htmlparser.tags.CompositeTag: lg getChildren()>();

        if $r1 == null goto label1;

        $r1 = virtualinvoke r0.<org.htmlparser.tags.CompositeTag: lg getChildren()>();

        virtualinvoke $r1.<lg: org.htmlparser.Node a(int)>($i0);

     label1:
        return;
    }

    public org.htmlparser.Tag searchByName(java.lang.String)
    {
        ll $r2;
        org.htmlparser.tags.CompositeTag r1;
        org.htmlparser.Node $r4;
        org.htmlparser.Tag $r3;
        java.lang.String $r0, $r5;
        boolean $z0, $z1;

        r1 := @this: org.htmlparser.tags.CompositeTag;

        $r0 := @parameter0: java.lang.String;

        $z0 = 0;

        $r2 = virtualinvoke r1.<org.htmlparser.tags.CompositeTag: ll children()>();

        $r3 = null;

     label1:
        $z1 = interfaceinvoke $r2.<ll: boolean a()>();

        if $z1 == 0 goto label3;

        if $z0 != 0 goto label3;

        $r4 = interfaceinvoke $r2.<ll: org.htmlparser.Node b()>();

        $z1 = $r4 instanceof org.htmlparser.Tag;

        if $z1 == 0 goto label1;

        $r3 = (org.htmlparser.Tag) $r4;

        $r5 = interfaceinvoke $r3.<org.htmlparser.Tag: java.lang.String getAttribute(java.lang.String)>("NAME");

        if $r5 == null goto label2;

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z1 == 0 goto label2;

        $z0 = 1;

     label2:
        goto label1;

     label3:
        if $z0 == 0 goto label4;

        return $r3;

     label4:
        return null;
    }

    public lg searchFor(java.lang.Class, boolean)
    {
        java.lang.Class $r1;
        lg $r3;
        org.htmlparser.tags.CompositeTag r0;
        org.htmlparser.filters.NodeClassFilter $r2;
        boolean $z0;

        r0 := @this: org.htmlparser.tags.CompositeTag;

        $r1 := @parameter0: java.lang.Class;

        $z0 := @parameter1: boolean;

        $r3 = virtualinvoke r0.<org.htmlparser.tags.CompositeTag: lg getChildren()>();

        if $r3 != null goto label1;

        $r3 = new lg;

        specialinvoke $r3.<lg: void <init>()>();

        return $r3;

     label1:
        $r2 = new org.htmlparser.filters.NodeClassFilter;

        specialinvoke $r2.<org.htmlparser.filters.NodeClassFilter: void <init>(java.lang.Class)>($r1);

        $r3 = virtualinvoke $r3.<lg: lg a(org.htmlparser.NodeFilter,boolean)>($r2, $z0);

        return $r3;
    }

    public lg searchFor(java.lang.String)
    {
        java.lang.String $r1;
        lg $r2;
        org.htmlparser.tags.CompositeTag r0;

        r0 := @this: org.htmlparser.tags.CompositeTag;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.htmlparser.tags.CompositeTag: lg searchFor(java.lang.String,boolean)>($r1, 0);

        return $r2;
    }

    public lg searchFor(java.lang.String, boolean)
    {
        java.util.Locale $r3;
        java.lang.String $r1;
        lg $r2;
        org.htmlparser.tags.CompositeTag r0;
        boolean $z0;

        r0 := @this: org.htmlparser.tags.CompositeTag;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $r3 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r2 = virtualinvoke r0.<org.htmlparser.tags.CompositeTag: lg searchFor(java.lang.String,boolean,java.util.Locale)>($r1, $z0, $r3);

        return $r2;
    }

    public lg searchFor(java.lang.String, boolean, java.util.Locale)
    {
        ll $r4;
        org.htmlparser.tags.CompositeTag r0;
        org.htmlparser.Node $r5;
        java.util.Locale $r2;
        int $i0, $i1;
        java.lang.String $r1, $r6, $r7;
        lg $r3, $r8;
        boolean $z0, $z1;

        r0 := @this: org.htmlparser.tags.CompositeTag;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $r2 := @parameter2: java.util.Locale;

        $r8 = new lg;

        $r3 = $r8;

        specialinvoke $r8.<lg: void <init>()>();

        if $z0 != 0 goto label5;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r2);

     label1:
        $r4 = virtualinvoke r0.<org.htmlparser.tags.CompositeTag: ll children()>();

     label2:
        $z1 = interfaceinvoke $r4.<ll: boolean a()>();

        if $z1 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<ll: org.htmlparser.Node b()>();

        $r6 = interfaceinvoke $r5.<org.htmlparser.Node: java.lang.String toPlainTextString()>();

        $r7 = $r6;

        if $z0 != 0 goto label3;

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r2);

     label3:
        $i0 = virtualinvoke $r7.<java.lang.String: int indexOf(java.lang.String)>($r1);

        $i1 = -1;

        if $i1 == $i0 goto label2;

        virtualinvoke $r3.<lg: void a(org.htmlparser.Node)>($r5);

        goto label2;

     label4:
        return $r3;

     label5:
        goto label1;
    }

    public void setEndTag(org.htmlparser.Tag)
    {
        org.htmlparser.Tag $r1;
        org.htmlparser.tags.CompositeTag r0;

        r0 := @this: org.htmlparser.tags.CompositeTag;

        $r1 := @parameter0: org.htmlparser.Tag;

        r0.<org.htmlparser.tags.CompositeTag: org.htmlparser.Tag i> = $r1;

        return;
    }

    public java.lang.String toHtml(boolean)
    {
        org.htmlparser.tags.CompositeTag r0;
        org.htmlparser.Tag $r3;
        java.lang.StringBuffer $r1;
        int $i0, $i1;
        java.lang.String $r2;
        boolean $z0, $z1;

        r0 := @this: org.htmlparser.tags.CompositeTag;

        $z0 := @parameter0: boolean;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = specialinvoke r0.<org.htmlparser.nodes.TagNode: java.lang.String toHtml(boolean)>($z0);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $z1 = virtualinvoke r0.<org.htmlparser.tags.CompositeTag: boolean isEmptyXmlTag()>();

        if $z1 != 0 goto label2;

        virtualinvoke r0.<org.htmlparser.tags.CompositeTag: void a(java.lang.StringBuffer,boolean)>($r1, $z0);

        $r3 = virtualinvoke r0.<org.htmlparser.tags.CompositeTag: org.htmlparser.Tag getEndTag()>();

        if $r3 == null goto label2;

        if $z0 == 0 goto label1;

        $r3 = r0.<org.htmlparser.tags.CompositeTag: org.htmlparser.Tag i>;

        $i0 = interfaceinvoke $r3.<org.htmlparser.Tag: int getStartPosition()>();

        $r3 = r0.<org.htmlparser.tags.CompositeTag: org.htmlparser.Tag i>;

        $i1 = interfaceinvoke $r3.<org.htmlparser.Tag: int getEndPosition()>();

        if $i0 == $i1 goto label2;

     label1:
        $r3 = virtualinvoke r0.<org.htmlparser.tags.CompositeTag: org.htmlparser.Tag getEndTag()>();

        $r2 = interfaceinvoke $r3.<org.htmlparser.Tag: java.lang.String toHtml()>();

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

     label2:
        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    public java.lang.String toPlainTextString()
    {
        ll $r2;
        java.lang.StringBuffer $r1;
        java.lang.String $r4;
        org.htmlparser.tags.CompositeTag r0;
        org.htmlparser.Node $r3;
        boolean $z0;

        r0 := @this: org.htmlparser.tags.CompositeTag;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke r0.<org.htmlparser.tags.CompositeTag: ll children()>();

     label1:
        $z0 = interfaceinvoke $r2.<ll: boolean a()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<ll: org.htmlparser.Node b()>();

        $r4 = interfaceinvoke $r3.<org.htmlparser.Node: java.lang.String toPlainTextString()>();

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        goto label1;

     label2:
        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    public java.lang.String toString()
    {
        java.lang.String $r1;
        org.htmlparser.tags.CompositeTag r0;
        java.lang.StringBuffer $r2;

        r0 := @this: org.htmlparser.tags.CompositeTag;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>(int)>(1024);

        virtualinvoke r0.<org.htmlparser.tags.CompositeTag: void toString(int,java.lang.StringBuffer)>(0, $r2);

        $r1 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r1;
    }

    public void toString(int, java.lang.StringBuffer)
    {
        ll $r3;
        org.htmlparser.tags.CompositeTag r0, $r5;
        org.htmlparser.Node $r4;
        org.htmlparser.Tag $r6;
        java.lang.StringBuffer $r1;
        int $i0, $i1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: org.htmlparser.tags.CompositeTag;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.StringBuffer;

        $i1 = 0;

     label01:
        if $i1 >= $i0 goto label02;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  ");

        $i1 = $i1 + 1;

        goto label01;

     label02:
        $r2 = specialinvoke r0.<org.htmlparser.nodes.TagNode: java.lang.String toString()>();

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r3 = virtualinvoke r0.<org.htmlparser.tags.CompositeTag: ll children()>();

     label03:
        $z0 = interfaceinvoke $r3.<ll: boolean a()>();

        if $z0 == 0 goto label07;

        $r4 = interfaceinvoke $r3.<ll: org.htmlparser.Node b()>();

        $z0 = $r4 instanceof org.htmlparser.tags.CompositeTag;

        if $z0 == 0 goto label04;

        $r5 = (org.htmlparser.tags.CompositeTag) $r4;

        $i1 = $i0 + 1;

        virtualinvoke $r5.<org.htmlparser.tags.CompositeTag: void toString(int,java.lang.StringBuffer)>($i1, $r1);

        goto label03;

     label04:
        $i1 = 0;

     label05:
        if $i1 > $i0 goto label06;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  ");

        $i1 = $i1 + 1;

        goto label05;

     label06:
        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r4);

        $r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        goto label03;

     label07:
        $r6 = virtualinvoke r0.<org.htmlparser.tags.CompositeTag: org.htmlparser.Tag getEndTag()>();

        if $r6 == null goto label10;

        $r6 = virtualinvoke r0.<org.htmlparser.tags.CompositeTag: org.htmlparser.Tag getEndTag()>();

        if r0 == $r6 goto label10;

        $i1 = 0;

     label08:
        if $i1 > $i0 goto label09;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  ");

        $i1 = $i1 + 1;

        goto label08;

     label09:
        $r6 = virtualinvoke r0.<org.htmlparser.tags.CompositeTag: org.htmlparser.Tag getEndTag()>();

        $r2 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

     label10:
        return;
    }
}
