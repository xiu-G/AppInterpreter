public class proguard.classfile.attribute.preverification.StackMapTableAttribute extends proguard.classfile.attribute.Attribute
{
    public proguard.classfile.attribute.preverification.StackMapFrame[] stackMapFrames;
    public int u2stackMapFramesCount;

    public void <init>()
    {
        proguard.classfile.attribute.preverification.StackMapTableAttribute r0;

        r0 := @this: proguard.classfile.attribute.preverification.StackMapTableAttribute;

        specialinvoke r0.<proguard.classfile.attribute.Attribute: void <init>()>();

        return;
    }

    public void <init>(int, proguard.classfile.attribute.preverification.StackMapFrame[])
    {
        int $i0;
        proguard.classfile.attribute.preverification.StackMapFrame[] $r1;
        proguard.classfile.attribute.preverification.StackMapTableAttribute r0;

        r0 := @this: proguard.classfile.attribute.preverification.StackMapTableAttribute;

        $i0 := @parameter0: int;

        $r1 := @parameter1: proguard.classfile.attribute.preverification.StackMapFrame[];

        specialinvoke r0.<proguard.classfile.attribute.Attribute: void <init>()>();

        r0.<proguard.classfile.attribute.preverification.StackMapTableAttribute: int u2stackMapFramesCount> = $i0;

        r0.<proguard.classfile.attribute.preverification.StackMapTableAttribute: proguard.classfile.attribute.preverification.StackMapFrame[] stackMapFrames> = $r1;

        return;
    }

    public void <init>(proguard.classfile.attribute.preverification.StackMapFrame[])
    {
        int $i0;
        proguard.classfile.attribute.preverification.StackMapFrame[] $r1;
        proguard.classfile.attribute.preverification.StackMapTableAttribute r0;

        r0 := @this: proguard.classfile.attribute.preverification.StackMapTableAttribute;

        $r1 := @parameter0: proguard.classfile.attribute.preverification.StackMapFrame[];

        $i0 = lengthof $r1;

        specialinvoke r0.<proguard.classfile.attribute.preverification.StackMapTableAttribute: void <init>(int,proguard.classfile.attribute.preverification.StackMapFrame[])>($i0, $r1);

        return;
    }

    public void accept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.visitor.AttributeVisitor)
    {
        proguard.classfile.attribute.preverification.StackMapTableAttribute r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.visitor.AttributeVisitor $r4;

        r0 := @this: proguard.classfile.attribute.preverification.StackMapTableAttribute;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.visitor.AttributeVisitor;

        interfaceinvoke $r4.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitStackMapTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.preverification.StackMapTableAttribute)>($r1, $r2, $r3, r0);

        return;
    }

    public void stackMapFramesAccept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.preverification.visitor.StackMapFrameVisitor)
    {
        proguard.classfile.attribute.preverification.StackMapFrame[] $r5;
        proguard.classfile.attribute.preverification.visitor.StackMapFrameVisitor $r4;
        proguard.classfile.attribute.preverification.StackMapTableAttribute r0;
        proguard.classfile.attribute.preverification.StackMapFrame $r6;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0, $i1, $i2;
        proguard.classfile.Method $r2;
        boolean $z0;

        r0 := @this: proguard.classfile.attribute.preverification.StackMapTableAttribute;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.preverification.visitor.StackMapFrameVisitor;

        $i2 = 0;

        $i0 = 0;

     label1:
        $i1 = r0.<proguard.classfile.attribute.preverification.StackMapTableAttribute: int u2stackMapFramesCount>;

        if $i2 >= $i1 goto label4;

        $r5 = r0.<proguard.classfile.attribute.preverification.StackMapTableAttribute: proguard.classfile.attribute.preverification.StackMapFrame[] stackMapFrames>;

        $r6 = $r5[$i2];

        $i1 = virtualinvoke $r6.<proguard.classfile.attribute.preverification.StackMapFrame: int getOffsetDelta()>();

        if $i2 != 0 goto label3;

        $z0 = 0;

     label2:
        $i1 = $i1 + $z0;

        $i0 = $i0 + $i1;

        virtualinvoke $r6.<proguard.classfile.attribute.preverification.StackMapFrame: void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.visitor.StackMapFrameVisitor)>($r1, $r2, $r3, $i0, $r4);

        $i2 = $i2 + 1;

        goto label1;

     label3:
        $z0 = 1;

        goto label2;

     label4:
        return;
    }
}
