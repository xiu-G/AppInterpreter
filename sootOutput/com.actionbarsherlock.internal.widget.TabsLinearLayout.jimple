public class com.actionbarsherlock.internal.widget.TabsLinearLayout extends com.actionbarsherlock.internal.widget.IcsLinearLayout
{
    private static final int LinearLayout_measureWithLargestChild;
    private static final int[] R_styleable_LinearLayout;
    private boolean mUseLargestChild;

    static void <clinit>()
    {
        int[] $r0;

        $r0 = newarray (int)[1];

        $r0[0] = 16843476;

        <com.actionbarsherlock.internal.widget.TabsLinearLayout: int[] R_styleable_LinearLayout> = $r0;

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        android.content.Context $r1;
        android.util.AttributeSet $r2;
        int[] $r3;
        com.actionbarsherlock.internal.widget.TabsLinearLayout r0;
        android.content.res.TypedArray $r4;
        boolean $z0;

        r0 := @this: com.actionbarsherlock.internal.widget.TabsLinearLayout;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: android.util.AttributeSet;

        specialinvoke r0.<com.actionbarsherlock.internal.widget.IcsLinearLayout: void <init>(android.content.Context,android.util.AttributeSet)>($r1, $r2);

        $r3 = <com.actionbarsherlock.internal.widget.TabsLinearLayout: int[] R_styleable_LinearLayout>;

        $r4 = virtualinvoke $r1.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[])>($r2, $r3);

        $z0 = virtualinvoke $r4.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(0, 0);

        r0.<com.actionbarsherlock.internal.widget.TabsLinearLayout: boolean mUseLargestChild> = $z0;

        virtualinvoke $r4.<android.content.res.TypedArray: void recycle()>();

        return;
    }

    private void useLargestChildHorizontal()
    {
        android.view.ViewGroup$LayoutParams $r2;
        byte $b5;
        int $i0, $i1, $i2, $i3, $i4, $i6;
        android.view.View $r1;
        float $f0;
        android.widget.LinearLayout$LayoutParams $r3;
        com.actionbarsherlock.internal.widget.TabsLinearLayout r0;

        r0 := @this: com.actionbarsherlock.internal.widget.TabsLinearLayout;

        $i0 = virtualinvoke r0.<com.actionbarsherlock.internal.widget.TabsLinearLayout: int getChildCount()>();

        $i1 = 0;

        $i2 = 0;

     label1:
        if $i1 < $i0 goto label3;

        $i1 = 0;

        $i3 = 0;

     label2:
        if $i1 < $i0 goto label4;

        $i0 = virtualinvoke r0.<com.actionbarsherlock.internal.widget.TabsLinearLayout: int getPaddingLeft()>();

        $i2 = virtualinvoke r0.<com.actionbarsherlock.internal.widget.TabsLinearLayout: int getPaddingRight()>();

        $i0 = $i0 + $i2;

        $i0 = $i0 + $i3;

        $i2 = virtualinvoke r0.<com.actionbarsherlock.internal.widget.TabsLinearLayout: int getMeasuredHeight()>();

        virtualinvoke r0.<com.actionbarsherlock.internal.widget.TabsLinearLayout: void setMeasuredDimension(int,int)>($i0, $i2);

        return;

     label3:
        $r1 = virtualinvoke r0.<com.actionbarsherlock.internal.widget.TabsLinearLayout: android.view.View getChildAt(int)>($i1);

        $i3 = virtualinvoke $r1.<android.view.View: int getMeasuredWidth()>();

        $i1 = $i1 + 1;

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>($i3, $i2);

        goto label1;

     label4:
        $r1 = virtualinvoke r0.<com.actionbarsherlock.internal.widget.TabsLinearLayout: android.view.View getChildAt(int)>($i1);

        if $r1 == null goto label8;

        $i4 = virtualinvoke $r1.<android.view.View: int getVisibility()>();

        if $i4 == 8 goto label8;

        $r2 = virtualinvoke $r1.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        $r3 = (android.widget.LinearLayout$LayoutParams) $r2;

        $f0 = $r3.<android.widget.LinearLayout$LayoutParams: float weight>;

        $b5 = $f0 cmpl 0.0F;

        $i4 = (int) $b5;

        if $i4 <= 0 goto label7;

        $i4 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>($i2, 1073741824);

        $i6 = virtualinvoke $r1.<android.view.View: int getMeasuredHeight()>();

        $i6 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>($i6, 1073741824);

        virtualinvoke $r1.<android.view.View: void measure(int,int)>($i4, $i6);

        $i3 = $i3 + $i2;

     label5:
        $i4 = $r3.<android.widget.LinearLayout$LayoutParams: int leftMargin>;

        $i6 = $r3.<android.widget.LinearLayout$LayoutParams: int rightMargin>;

        $i4 = $i6 + $i4;

        $i3 = $i4 + $i3;

     label6:
        $i1 = $i1 + 1;

        goto label2;

     label7:
        $i4 = virtualinvoke $r1.<android.view.View: int getMeasuredWidth()>();

        $i3 = $i3 + $i4;

        goto label5;

     label8:
        goto label6;
    }

    public boolean isMeasureWithLargestChildEnabled()
    {
        com.actionbarsherlock.internal.widget.TabsLinearLayout r0;
        boolean z0;

        r0 := @this: com.actionbarsherlock.internal.widget.TabsLinearLayout;

        z0 = r0.<com.actionbarsherlock.internal.widget.TabsLinearLayout: boolean mUseLargestChild>;

        return z0;
    }

    protected void onMeasure(int, int)
    {
        int $i0, $i1;
        com.actionbarsherlock.internal.widget.TabsLinearLayout r0;
        boolean $z0;

        r0 := @this: com.actionbarsherlock.internal.widget.TabsLinearLayout;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        specialinvoke r0.<com.actionbarsherlock.internal.widget.IcsLinearLayout: void onMeasure(int,int)>($i0, $i1);

        $i1 = virtualinvoke r0.<com.actionbarsherlock.internal.widget.TabsLinearLayout: int getChildCount()>();

        if $i1 > 2 goto label1;

        return;

     label1:
        $i0 = staticinvoke <android.view.View$MeasureSpec: int getMode(int)>($i0);

        $z0 = r0.<com.actionbarsherlock.internal.widget.TabsLinearLayout: boolean mUseLargestChild>;

        if $z0 == 0 goto label2;

        if $i0 != 0 goto label2;

        $i0 = virtualinvoke r0.<com.actionbarsherlock.internal.widget.TabsLinearLayout: int getOrientation()>();

        if $i0 != 0 goto label2;

        specialinvoke r0.<com.actionbarsherlock.internal.widget.TabsLinearLayout: void useLargestChildHorizontal()>();

     label2:
        return;
    }

    public void setMeasureWithLargestChildEnabled(boolean)
    {
        com.actionbarsherlock.internal.widget.TabsLinearLayout r0;
        boolean $z0;

        r0 := @this: com.actionbarsherlock.internal.widget.TabsLinearLayout;

        $z0 := @parameter0: boolean;

        r0.<com.actionbarsherlock.internal.widget.TabsLinearLayout: boolean mUseLargestChild> = 1;

        return;
    }
}
