public class org.htmlparser.tags.TableRow extends org.htmlparser.tags.CompositeTag
{
    private static final java.lang.String[] k;
    private static final java.lang.String[] l;
    private static final java.lang.String[] m;

    static void <clinit>()
    {
        java.lang.String[] $r0;

        $r0 = newarray (java.lang.String)[1];

        $r0[0] = "TR";

        <org.htmlparser.tags.TableRow: java.lang.String[] k> = $r0;

        $r0 = newarray (java.lang.String)[3];

        $r0[0] = "TBODY";

        $r0[1] = "TFOOT";

        $r0[2] = "THEAD";

        <org.htmlparser.tags.TableRow: java.lang.String[] l> = $r0;

        $r0 = newarray (java.lang.String)[4];

        $r0[0] = "TBODY";

        $r0[1] = "TFOOT";

        $r0[2] = "THEAD";

        $r0[3] = "TABLE";

        <org.htmlparser.tags.TableRow: java.lang.String[] m> = $r0;

        return;
    }

    public void <init>()
    {
        org.htmlparser.tags.TableRow r0;

        r0 := @this: org.htmlparser.tags.TableRow;

        specialinvoke r0.<org.htmlparser.tags.CompositeTag: void <init>()>();

        return;
    }

    public int getColumnCount()
    {
        int $i0;
        org.htmlparser.tags.TableRow r0;
        org.htmlparser.tags.TableColumn[] $r1;

        r0 := @this: org.htmlparser.tags.TableRow;

        $r1 = virtualinvoke r0.<org.htmlparser.tags.TableRow: org.htmlparser.tags.TableColumn[] getColumns()>();

        $i0 = lengthof $r1;

        return $i0;
    }

    public org.htmlparser.tags.TableColumn[] getColumns()
    {
        org.htmlparser.Node[] $r10;
        org.htmlparser.tags.TableRow r0;
        org.htmlparser.filters.OrFilter $r5;
        org.htmlparser.filters.NodeClassFilter $r3;
        org.htmlparser.filters.NotFilter $r1;
        org.htmlparser.filters.IsEqualFilter $r7;
        org.htmlparser.tags.TableColumn[] $r9;
        org.htmlparser.filters.AndFilter $r6, $r8;
        org.htmlparser.filters.HasParentFilter $r4;
        int $i0;
        lg $r2;

        r0 := @this: org.htmlparser.tags.TableRow;

        $r2 = virtualinvoke r0.<org.htmlparser.tags.TableRow: lg getChildren()>();

        if $r2 == null goto label1;

        $r3 = new org.htmlparser.filters.NodeClassFilter;

        specialinvoke $r3.<org.htmlparser.filters.NodeClassFilter: void <init>(java.lang.Class)>(class "Lorg/htmlparser/tags/TableRow;");

        $r4 = new org.htmlparser.filters.HasParentFilter;

        specialinvoke $r4.<org.htmlparser.filters.HasParentFilter: void <init>(org.htmlparser.NodeFilter)>(null);

        $r5 = new org.htmlparser.filters.OrFilter;

        $r6 = new org.htmlparser.filters.AndFilter;

        $r7 = new org.htmlparser.filters.IsEqualFilter;

        specialinvoke $r7.<org.htmlparser.filters.IsEqualFilter: void <init>(org.htmlparser.Node)>(r0);

        specialinvoke $r6.<org.htmlparser.filters.AndFilter: void <init>(org.htmlparser.NodeFilter,org.htmlparser.NodeFilter)>($r3, $r7);

        $r8 = new org.htmlparser.filters.AndFilter;

        $r1 = new org.htmlparser.filters.NotFilter;

        specialinvoke $r1.<org.htmlparser.filters.NotFilter: void <init>(org.htmlparser.NodeFilter)>($r3);

        specialinvoke $r8.<org.htmlparser.filters.AndFilter: void <init>(org.htmlparser.NodeFilter,org.htmlparser.NodeFilter)>($r1, $r4);

        specialinvoke $r5.<org.htmlparser.filters.OrFilter: void <init>(org.htmlparser.NodeFilter,org.htmlparser.NodeFilter)>($r6, $r8);

        virtualinvoke $r4.<org.htmlparser.filters.HasParentFilter: void setParentFilter(org.htmlparser.NodeFilter)>($r5);

        $r6 = new org.htmlparser.filters.AndFilter;

        $r3 = new org.htmlparser.filters.NodeClassFilter;

        specialinvoke $r3.<org.htmlparser.filters.NodeClassFilter: void <init>(java.lang.Class)>(class "Lorg/htmlparser/tags/TableColumn;");

        specialinvoke $r6.<org.htmlparser.filters.AndFilter: void <init>(org.htmlparser.NodeFilter,org.htmlparser.NodeFilter)>($r3, $r5);

        $r2 = virtualinvoke $r2.<lg: lg a(org.htmlparser.NodeFilter,boolean)>($r6, 1);

        $i0 = $r2.<lg: int b>;

        $r9 = newarray (org.htmlparser.tags.TableColumn)[$i0];

        $r10 = $r2.<lg: org.htmlparser.Node[] a>;

        $i0 = $r2.<lg: int b>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, 0, $r9, 0, $i0);

        return $r9;

     label1:
        $r9 = newarray (org.htmlparser.tags.TableColumn)[0];

        return $r9;
    }

    public java.lang.String[] getEndTagEnders()
    {
        java.lang.String[] r1;
        org.htmlparser.tags.TableRow r0;

        r0 := @this: org.htmlparser.tags.TableRow;

        r1 = <org.htmlparser.tags.TableRow: java.lang.String[] m>;

        return r1;
    }

    public java.lang.String[] getEnders()
    {
        java.lang.String[] r1;
        org.htmlparser.tags.TableRow r0;

        r0 := @this: org.htmlparser.tags.TableRow;

        r1 = <org.htmlparser.tags.TableRow: java.lang.String[] l>;

        return r1;
    }

    public int getHeaderCount()
    {
        int $i0;
        org.htmlparser.tags.TableHeader[] $r1;
        org.htmlparser.tags.TableRow r0;

        r0 := @this: org.htmlparser.tags.TableRow;

        $r1 = virtualinvoke r0.<org.htmlparser.tags.TableRow: org.htmlparser.tags.TableHeader[] getHeaders()>();

        $i0 = lengthof $r1;

        return $i0;
    }

    public org.htmlparser.tags.TableHeader[] getHeaders()
    {
        org.htmlparser.Node[] $r10;
        org.htmlparser.tags.TableRow r0;
        org.htmlparser.filters.OrFilter $r5;
        org.htmlparser.filters.NodeClassFilter $r3;
        org.htmlparser.filters.NotFilter $r1;
        org.htmlparser.filters.IsEqualFilter $r7;
        org.htmlparser.filters.AndFilter $r6, $r8;
        org.htmlparser.filters.HasParentFilter $r4;
        int $i0;
        lg $r2;
        org.htmlparser.tags.TableHeader[] $r9;

        r0 := @this: org.htmlparser.tags.TableRow;

        $r2 = virtualinvoke r0.<org.htmlparser.tags.TableRow: lg getChildren()>();

        if $r2 == null goto label1;

        $r3 = new org.htmlparser.filters.NodeClassFilter;

        specialinvoke $r3.<org.htmlparser.filters.NodeClassFilter: void <init>(java.lang.Class)>(class "Lorg/htmlparser/tags/TableRow;");

        $r4 = new org.htmlparser.filters.HasParentFilter;

        specialinvoke $r4.<org.htmlparser.filters.HasParentFilter: void <init>(org.htmlparser.NodeFilter)>(null);

        $r5 = new org.htmlparser.filters.OrFilter;

        $r6 = new org.htmlparser.filters.AndFilter;

        $r7 = new org.htmlparser.filters.IsEqualFilter;

        specialinvoke $r7.<org.htmlparser.filters.IsEqualFilter: void <init>(org.htmlparser.Node)>(r0);

        specialinvoke $r6.<org.htmlparser.filters.AndFilter: void <init>(org.htmlparser.NodeFilter,org.htmlparser.NodeFilter)>($r3, $r7);

        $r8 = new org.htmlparser.filters.AndFilter;

        $r1 = new org.htmlparser.filters.NotFilter;

        specialinvoke $r1.<org.htmlparser.filters.NotFilter: void <init>(org.htmlparser.NodeFilter)>($r3);

        specialinvoke $r8.<org.htmlparser.filters.AndFilter: void <init>(org.htmlparser.NodeFilter,org.htmlparser.NodeFilter)>($r1, $r4);

        specialinvoke $r5.<org.htmlparser.filters.OrFilter: void <init>(org.htmlparser.NodeFilter,org.htmlparser.NodeFilter)>($r6, $r8);

        virtualinvoke $r4.<org.htmlparser.filters.HasParentFilter: void setParentFilter(org.htmlparser.NodeFilter)>($r5);

        $r6 = new org.htmlparser.filters.AndFilter;

        $r3 = new org.htmlparser.filters.NodeClassFilter;

        specialinvoke $r3.<org.htmlparser.filters.NodeClassFilter: void <init>(java.lang.Class)>(class "Lorg/htmlparser/tags/TableHeader;");

        specialinvoke $r6.<org.htmlparser.filters.AndFilter: void <init>(org.htmlparser.NodeFilter,org.htmlparser.NodeFilter)>($r3, $r5);

        $r2 = virtualinvoke $r2.<lg: lg a(org.htmlparser.NodeFilter,boolean)>($r6, 1);

        $i0 = $r2.<lg: int b>;

        $r9 = newarray (org.htmlparser.tags.TableHeader)[$i0];

        $r10 = $r2.<lg: org.htmlparser.Node[] a>;

        $i0 = $r2.<lg: int b>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, 0, $r9, 0, $i0);

        return $r9;

     label1:
        $r9 = newarray (org.htmlparser.tags.TableHeader)[0];

        return $r9;
    }

    public java.lang.String[] getIds()
    {
        java.lang.String[] r1;
        org.htmlparser.tags.TableRow r0;

        r0 := @this: org.htmlparser.tags.TableRow;

        r1 = <org.htmlparser.tags.TableRow: java.lang.String[] k>;

        return r1;
    }

    public boolean hasHeader()
    {
        int $i0;
        org.htmlparser.tags.TableRow r0;

        r0 := @this: org.htmlparser.tags.TableRow;

        $i0 = virtualinvoke r0.<org.htmlparser.tags.TableRow: int getHeaderCount()>();

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
}
