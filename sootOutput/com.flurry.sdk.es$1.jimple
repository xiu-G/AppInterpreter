class com.flurry.sdk.es$1 extends java.util.concurrent.ThreadPoolExecutor
{
    final com.flurry.sdk.es a;

    void <init>(com.flurry.sdk.es, int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue)
    {
        java.util.concurrent.TimeUnit $r2;
        com.flurry.sdk.es$1 r0;
        com.flurry.sdk.es $r1;
        int $i0, $i1;
        long $l2;
        java.util.concurrent.BlockingQueue $r3;

        r0 := @this: com.flurry.sdk.es$1;

        $r1 := @parameter0: com.flurry.sdk.es;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $l2 := @parameter3: long;

        $r2 := @parameter4: java.util.concurrent.TimeUnit;

        $r3 := @parameter5: java.util.concurrent.BlockingQueue;

        r0.<com.flurry.sdk.es$1: com.flurry.sdk.es a> = $r1;

        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue)>($i0, $i1, $l2, $r2, $r3);

        return;
    }

    protected void afterExecute(java.lang.Runnable, java.lang.Throwable)
    {
        java.lang.Throwable $r1, $r9;
        com.flurry.sdk.es$1 r0;
        com.flurry.sdk.es$1$2 $r8;
        com.flurry.sdk.fj $r4;
        java.util.HashMap $r6, $r7;
        java.lang.Runnable $r2;
        com.flurry.sdk.es$a $r3;
        com.flurry.sdk.es $r5;

        r0 := @this: com.flurry.sdk.es$1;

        $r2 := @parameter0: java.lang.Runnable;

        $r1 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void afterExecute(java.lang.Runnable,java.lang.Throwable)>($r2, $r1);

        $r3 = (com.flurry.sdk.es$a) $r2;

        $r2 = virtualinvoke $r3.<com.flurry.sdk.es$a: java.lang.Runnable a()>();

        $r4 = (com.flurry.sdk.fj) $r2;

        $r5 = r0.<com.flurry.sdk.es$1: com.flurry.sdk.es a>;

        $r6 = staticinvoke <com.flurry.sdk.es: java.util.HashMap a(com.flurry.sdk.es)>($r5);

        entermonitor $r6;

     label1:
        $r5 = r0.<com.flurry.sdk.es$1: com.flurry.sdk.es a>;

        $r7 = staticinvoke <com.flurry.sdk.es: java.util.HashMap a(com.flurry.sdk.es)>($r5);

        virtualinvoke $r7.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r4);

        exitmonitor $r6;

     label2:
        $r5 = r0.<com.flurry.sdk.es$1: com.flurry.sdk.es a>;

        staticinvoke <com.flurry.sdk.es: void a(com.flurry.sdk.es,com.flurry.sdk.fj)>($r5, $r4);

        $r8 = new com.flurry.sdk.es$1$2;

        specialinvoke $r8.<com.flurry.sdk.es$1$2: void <init>(com.flurry.sdk.es$1,com.flurry.sdk.fj)>(r0, $r4);

        virtualinvoke $r8.<com.flurry.sdk.es$1$2: void run()>();

        return;

     label3:
        $r9 := @caughtexception;

     label4:
        exitmonitor $r6;

     label5:
        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    protected void beforeExecute(java.lang.Thread, java.lang.Runnable)
    {
        com.flurry.sdk.es$1 r0;
        com.flurry.sdk.es$a $r4;
        com.flurry.sdk.fj $r5;
        com.flurry.sdk.es$1$1 $r2;
        java.lang.Thread $r1;
        java.lang.Runnable $r3;

        r0 := @this: com.flurry.sdk.es$1;

        $r1 := @parameter0: java.lang.Thread;

        $r3 := @parameter1: java.lang.Runnable;

        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void beforeExecute(java.lang.Thread,java.lang.Runnable)>($r1, $r3);

        $r4 = (com.flurry.sdk.es$a) $r3;

        $r3 = virtualinvoke $r4.<com.flurry.sdk.es$a: java.lang.Runnable a()>();

        $r5 = (com.flurry.sdk.fj) $r3;

        $r2 = new com.flurry.sdk.es$1$1;

        specialinvoke $r2.<com.flurry.sdk.es$1$1: void <init>(com.flurry.sdk.es$1,com.flurry.sdk.fj)>(r0, $r5);

        virtualinvoke $r2.<com.flurry.sdk.es$1$1: void run()>();

        return;
    }

    protected java.util.concurrent.RunnableFuture newTaskFor(java.lang.Runnable, java.lang.Object)
    {
        java.lang.Throwable $r8;
        com.flurry.sdk.es$1 r0;
        com.flurry.sdk.fj $r7;
        java.util.HashMap $r5, $r6;
        java.lang.Runnable $r2;
        com.flurry.sdk.es$a $r3;
        com.flurry.sdk.es $r4;
        java.lang.Object $r1;

        r0 := @this: com.flurry.sdk.es$1;

        $r2 := @parameter0: java.lang.Runnable;

        $r1 := @parameter1: java.lang.Object;

        $r3 = new com.flurry.sdk.es$a;

        specialinvoke $r3.<com.flurry.sdk.es$a: void <init>(java.lang.Runnable,java.lang.Object)>($r2, $r1);

        $r4 = r0.<com.flurry.sdk.es$1: com.flurry.sdk.es a>;

        $r5 = staticinvoke <com.flurry.sdk.es: java.util.HashMap a(com.flurry.sdk.es)>($r4);

        entermonitor $r5;

     label1:
        $r4 = r0.<com.flurry.sdk.es$1: com.flurry.sdk.es a>;

        $r6 = staticinvoke <com.flurry.sdk.es: java.util.HashMap a(com.flurry.sdk.es)>($r4);

        $r7 = (com.flurry.sdk.fj) $r2;

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r3);

        exitmonitor $r5;

     label2:
        return $r3;

     label3:
        $r8 := @caughtexception;

        exitmonitor $r5;

     label4:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected java.util.concurrent.RunnableFuture newTaskFor(java.util.concurrent.Callable)
    {
        com.flurry.sdk.es$1 r0;
        java.lang.UnsupportedOperationException $r2;
        java.util.concurrent.Callable $r1;

        r0 := @this: com.flurry.sdk.es$1;

        $r1 := @parameter0: java.util.concurrent.Callable;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Callable not supported");

        throw $r2;
    }
}
