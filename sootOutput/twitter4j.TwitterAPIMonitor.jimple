public class twitter4j.TwitterAPIMonitor extends java.lang.Object
{
    private static final twitter4j.TwitterAPIMonitor SINGLETON;
    private static final twitter4j.management.APIStatistics STATISTICS;
    private static final twitter4j.Logger logger;
    private static final java.util.regex.Pattern pattern;

    static void <clinit>()
    {
        java.lang.Throwable $r6, $r8, $r9, $r10;
        twitter4j.Logger $r1;
        twitter4j.management.APIStatistics $r0, $r12;
        javax.management.InstanceAlreadyExistsException $r15;
        javax.management.MBeanServer $r3;
        javax.management.MBeanRegistrationException $r16;
        java.lang.String $r7;
        javax.management.NotCompliantMBeanException $r17;
        javax.management.ObjectName $r4, $r13;
        twitter4j.TwitterAPIMonitor $r11;
        javax.management.MalformedObjectNameException $r18;
        java.util.regex.Pattern $r2;
        twitter4j.management.APIStatisticsOpenMBean $r5, $r14;

        $r1 = staticinvoke <twitter4j.Logger: twitter4j.Logger getLogger(java.lang.Class)>(class "Ltwitter4j/TwitterAPIMonitor;");

        <twitter4j.TwitterAPIMonitor: twitter4j.Logger logger> = $r1;

        $r2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("https?://[^/]+/[0-9.]*/([a-zA-Z_\\.]*).*");

        <twitter4j.TwitterAPIMonitor: java.util.regex.Pattern pattern> = $r2;

        $r11 = new twitter4j.TwitterAPIMonitor;

        specialinvoke $r11.<twitter4j.TwitterAPIMonitor: void <init>()>();

        <twitter4j.TwitterAPIMonitor: twitter4j.TwitterAPIMonitor SINGLETON> = $r11;

        $r12 = new twitter4j.management.APIStatistics;

        specialinvoke $r12.<twitter4j.management.APIStatistics: void <init>(int)>(100);

        <twitter4j.TwitterAPIMonitor: twitter4j.management.APIStatistics STATISTICS> = $r12;

     label01:
        $r3 = staticinvoke <java.lang.management.ManagementFactory: javax.management.MBeanServer getPlatformMBeanServer()>();

     label02:
        $r13 = new javax.management.ObjectName;

        $r4 = $r13;

     label03:
        specialinvoke $r13.<javax.management.ObjectName: void <init>(java.lang.String)>("twitter4j.mbean:type=APIStatisticsOpenMBean");

     label04:
        $r14 = new twitter4j.management.APIStatisticsOpenMBean;

        $r5 = $r14;

        $r0 = <twitter4j.TwitterAPIMonitor: twitter4j.management.APIStatistics STATISTICS>;

     label05:
        specialinvoke $r14.<twitter4j.management.APIStatisticsOpenMBean: void <init>(twitter4j.management.APIStatistics)>($r0);

        interfaceinvoke $r3.<javax.management.MBeanServer: javax.management.ObjectInstance registerMBean(java.lang.Object,javax.management.ObjectName)>($r5, $r4);

     label06:
        return;

     label07:
        $r6 := @caughtexception;

        $r15 = (javax.management.InstanceAlreadyExistsException) $r6;

        virtualinvoke $r15.<javax.management.InstanceAlreadyExistsException: void printStackTrace()>();

        $r1 = <twitter4j.TwitterAPIMonitor: twitter4j.Logger logger>;

        $r15 = (javax.management.InstanceAlreadyExistsException) $r6;

        $r7 = virtualinvoke $r15.<javax.management.InstanceAlreadyExistsException: java.lang.String getMessage()>();

        virtualinvoke $r1.<twitter4j.Logger: void error(java.lang.String)>($r7);

        return;

     label08:
        $r8 := @caughtexception;

        $r16 = (javax.management.MBeanRegistrationException) $r8;

        virtualinvoke $r16.<javax.management.MBeanRegistrationException: void printStackTrace()>();

        $r1 = <twitter4j.TwitterAPIMonitor: twitter4j.Logger logger>;

        $r16 = (javax.management.MBeanRegistrationException) $r8;

        $r7 = virtualinvoke $r16.<javax.management.MBeanRegistrationException: java.lang.String getMessage()>();

        virtualinvoke $r1.<twitter4j.Logger: void error(java.lang.String)>($r7);

        return;

     label09:
        $r9 := @caughtexception;

        $r17 = (javax.management.NotCompliantMBeanException) $r9;

        virtualinvoke $r17.<javax.management.NotCompliantMBeanException: void printStackTrace()>();

        $r1 = <twitter4j.TwitterAPIMonitor: twitter4j.Logger logger>;

        $r17 = (javax.management.NotCompliantMBeanException) $r9;

        $r7 = virtualinvoke $r17.<javax.management.NotCompliantMBeanException: java.lang.String getMessage()>();

        virtualinvoke $r1.<twitter4j.Logger: void error(java.lang.String)>($r7);

        return;

     label10:
        $r10 := @caughtexception;

        $r18 = (javax.management.MalformedObjectNameException) $r10;

        virtualinvoke $r18.<javax.management.MalformedObjectNameException: void printStackTrace()>();

        $r1 = <twitter4j.TwitterAPIMonitor: twitter4j.Logger logger>;

        $r18 = (javax.management.MalformedObjectNameException) $r10;

        $r7 = virtualinvoke $r18.<javax.management.MalformedObjectNameException: java.lang.String getMessage()>();

        virtualinvoke $r1.<twitter4j.Logger: void error(java.lang.String)>($r7);

        return;

        catch javax.management.InstanceAlreadyExistsException from label01 to label02 with label07;
        catch javax.management.InstanceAlreadyExistsException from label03 to label04 with label07;
        catch javax.management.InstanceAlreadyExistsException from label05 to label06 with label07;
        catch javax.management.MBeanRegistrationException from label01 to label02 with label08;
        catch javax.management.MBeanRegistrationException from label03 to label04 with label08;
        catch javax.management.MBeanRegistrationException from label05 to label06 with label08;
        catch javax.management.NotCompliantMBeanException from label01 to label02 with label09;
        catch javax.management.NotCompliantMBeanException from label03 to label04 with label09;
        catch javax.management.NotCompliantMBeanException from label05 to label06 with label09;
        catch javax.management.MalformedObjectNameException from label01 to label02 with label10;
        catch javax.management.MalformedObjectNameException from label03 to label04 with label10;
        catch javax.management.MalformedObjectNameException from label05 to label06 with label10;
    }

    private void <init>()
    {
        twitter4j.TwitterAPIMonitor r0;

        r0 := @this: twitter4j.TwitterAPIMonitor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static twitter4j.TwitterAPIMonitor getInstance()
    {
        twitter4j.TwitterAPIMonitor r0;

        r0 = <twitter4j.TwitterAPIMonitor: twitter4j.TwitterAPIMonitor SINGLETON>;

        return r0;
    }

    public twitter4j.management.APIStatisticsMBean getStatistics()
    {
        twitter4j.TwitterAPIMonitor r0;
        twitter4j.management.APIStatistics r1;

        r0 := @this: twitter4j.TwitterAPIMonitor;

        r1 = <twitter4j.TwitterAPIMonitor: twitter4j.management.APIStatistics STATISTICS>;

        return r1;
    }

    void methodCalled(java.lang.String, long, boolean)
    {
        long $l0;
        twitter4j.TwitterAPIMonitor r0;
        twitter4j.management.APIStatistics $r4;
        java.util.regex.Matcher $r3;
        int $i1;
        java.lang.String $r1;
        java.util.regex.Pattern $r2;
        boolean $z0, $z1;

        r0 := @this: twitter4j.TwitterAPIMonitor;

        $r1 := @parameter0: java.lang.String;

        $l0 := @parameter1: long;

        $z0 := @parameter2: boolean;

        $r2 = <twitter4j.TwitterAPIMonitor: java.util.regex.Pattern pattern>;

        $r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r1);

        $z1 = virtualinvoke $r3.<java.util.regex.Matcher: boolean matches()>();

        if $z1 == 0 goto label1;

        $i1 = virtualinvoke $r3.<java.util.regex.Matcher: int groupCount()>();

        if $i1 <= 0 goto label1;

        $r1 = virtualinvoke $r3.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $r4 = <twitter4j.TwitterAPIMonitor: twitter4j.management.APIStatistics STATISTICS>;

        virtualinvoke $r4.<twitter4j.management.APIStatistics: void methodCalled(java.lang.String,long,boolean)>($r1, $l0, $z0);

     label1:
        return;
    }
}
