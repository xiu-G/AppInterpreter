public class proguard.classfile.editor.MethodInvocationFixer extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.attribute.visitor.AttributeVisitor, proguard.classfile.instruction.visitor.InstructionVisitor, proguard.classfile.constant.visitor.ConstantVisitor, proguard.classfile.visitor.ClassVisitor, proguard.classfile.visitor.MemberVisitor
{
    private static final boolean DEBUG;
    private final proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor;
    private proguard.classfile.Clazz referencedClass;
    private proguard.classfile.Member referencedMethod;
    private proguard.classfile.Clazz referencedMethodClass;

    public void <init>()
    {
        proguard.classfile.editor.CodeAttributeEditor $r1;
        proguard.classfile.editor.MethodInvocationFixer r0;

        r0 := @this: proguard.classfile.editor.MethodInvocationFixer;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        $r1 = new proguard.classfile.editor.CodeAttributeEditor;

        specialinvoke $r1.<proguard.classfile.editor.CodeAttributeEditor: void <init>()>();

        r0.<proguard.classfile.editor.MethodInvocationFixer: proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor> = $r1;

        return;
    }

    private void debug(proguard.classfile.Clazz, proguard.classfile.Method, int, proguard.classfile.instruction.ConstantInstruction, proguard.classfile.instruction.Instruction)
    {
        java.io.PrintStream $r5;
        proguard.classfile.editor.MethodInvocationFixer r0;
        proguard.classfile.Member $r8;
        proguard.classfile.Clazz $r1;
        proguard.classfile.instruction.Instruction $r4;
        java.lang.StringBuffer $r6;
        int $i0, $i1;
        proguard.classfile.instruction.ConstantInstruction $r3;
        proguard.classfile.Method $r2;
        java.lang.String $r7;

        r0 := @this: proguard.classfile.editor.MethodInvocationFixer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $i0 := @parameter2: int;

        $r3 := @parameter3: proguard.classfile.instruction.ConstantInstruction;

        $r4 := @parameter4: proguard.classfile.instruction.Instruction;

        $r5 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>("MethodInvocationFixer:");

        $r5 = <java.lang.System: java.io.PrintStream out>;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Class       = ");

        $r7 = interfaceinvoke $r1.<proguard.classfile.Clazz: java.lang.String getName()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r7);

        $r5 = <java.lang.System: java.io.PrintStream out>;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Method      = ");

        $r7 = interfaceinvoke $r2.<proguard.classfile.Method: java.lang.String getName(proguard.classfile.Clazz)>($r1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r7 = interfaceinvoke $r2.<proguard.classfile.Method: java.lang.String getDescriptor(proguard.classfile.Clazz)>($r1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r7);

        $r5 = <java.lang.System: java.io.PrintStream out>;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Instruction = ");

        $r7 = virtualinvoke $r3.<proguard.classfile.instruction.ConstantInstruction: java.lang.String toString(int)>($i0);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r7);

        $r5 = <java.lang.System: java.io.PrintStream out>;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  -> Class    = ");

        $r1 = r0.<proguard.classfile.editor.MethodInvocationFixer: proguard.classfile.Clazz referencedClass>;

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r7);

        $r5 = <java.lang.System: java.io.PrintStream out>;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("     Method   = ");

        $r8 = r0.<proguard.classfile.editor.MethodInvocationFixer: proguard.classfile.Member referencedMethod>;

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r8);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r7);

        $r1 = r0.<proguard.classfile.editor.MethodInvocationFixer: proguard.classfile.Clazz referencedClass>;

        $i1 = interfaceinvoke $r1.<proguard.classfile.Clazz: int getAccessFlags()>();

        $i1 = $i1 & 512;

        if $i1 == 0 goto label1;

        $r5 = <java.lang.System: java.io.PrintStream out>;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("     Parameter size   = ");

        $r8 = r0.<proguard.classfile.editor.MethodInvocationFixer: proguard.classfile.Member referencedMethod>;

        $r1 = r0.<proguard.classfile.editor.MethodInvocationFixer: proguard.classfile.Clazz referencedMethodClass>;

        $r7 = interfaceinvoke $r8.<proguard.classfile.Member: java.lang.String getDescriptor(proguard.classfile.Clazz)>($r1);

        $i1 = staticinvoke <proguard.classfile.util.ClassUtil: int internalMethodParameterSize(java.lang.String,boolean)>($r7, 0);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r7);

     label1:
        $r5 = <java.lang.System: java.io.PrintStream out>;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Replacement instruction = ");

        $r7 = virtualinvoke $r4.<proguard.classfile.instruction.Instruction: java.lang.String toString(int)>($i0);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r7);

        return;
    }

    public void visitAnyAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.Attribute)
    {
        proguard.classfile.editor.MethodInvocationFixer r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.Attribute $r2;

        r0 := @this: proguard.classfile.editor.MethodInvocationFixer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.Attribute;

        return;
    }

    public void visitAnyClass(proguard.classfile.Clazz)
    {
        proguard.classfile.editor.MethodInvocationFixer r0;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.classfile.editor.MethodInvocationFixer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        r0.<proguard.classfile.editor.MethodInvocationFixer: proguard.classfile.Clazz referencedClass> = $r1;

        return;
    }

    public void visitAnyConstant(proguard.classfile.Clazz, proguard.classfile.constant.Constant)
    {
        proguard.classfile.editor.MethodInvocationFixer r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.constant.Constant $r2;

        r0 := @this: proguard.classfile.editor.MethodInvocationFixer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.Constant;

        return;
    }

    public void visitAnyInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.Instruction)
    {
        proguard.classfile.editor.MethodInvocationFixer r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.instruction.Instruction $r4;
        int $i0;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.classfile.editor.MethodInvocationFixer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.Instruction;

        return;
    }

    public void visitAnyMember(proguard.classfile.Clazz, proguard.classfile.Member)
    {
        proguard.classfile.editor.MethodInvocationFixer r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.Member $r2;

        r0 := @this: proguard.classfile.editor.MethodInvocationFixer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Member;

        r0.<proguard.classfile.editor.MethodInvocationFixer: proguard.classfile.Clazz referencedMethodClass> = $r1;

        r0.<proguard.classfile.editor.MethodInvocationFixer: proguard.classfile.Member referencedMethod> = $r2;

        return;
    }

    public void visitAnyMethodrefConstant(proguard.classfile.Clazz, proguard.classfile.constant.RefConstant)
    {
        proguard.classfile.editor.MethodInvocationFixer r0;
        proguard.classfile.Clazz $r1;
        int $i0;
        proguard.classfile.constant.RefConstant $r2;

        r0 := @this: proguard.classfile.editor.MethodInvocationFixer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.RefConstant;

        $i0 = $r2.<proguard.classfile.constant.RefConstant: int u2classIndex>;

        interfaceinvoke $r1.<proguard.classfile.Clazz: void constantPoolEntryAccept(int,proguard.classfile.constant.visitor.ConstantVisitor)>($i0, r0);

        virtualinvoke $r2.<proguard.classfile.constant.RefConstant: void referencedMemberAccept(proguard.classfile.visitor.MemberVisitor)>(r0);

        return;
    }

    public void visitClassConstant(proguard.classfile.Clazz, proguard.classfile.constant.ClassConstant)
    {
        proguard.classfile.editor.MethodInvocationFixer r0;
        proguard.classfile.constant.ClassConstant $r2;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.classfile.editor.MethodInvocationFixer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.ClassConstant;

        virtualinvoke $r2.<proguard.classfile.constant.ClassConstant: void referencedClassAccept(proguard.classfile.visitor.ClassVisitor)>(r0);

        return;
    }

    public void visitCodeAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute)
    {
        proguard.classfile.editor.MethodInvocationFixer r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.editor.CodeAttributeEditor $r4;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.classfile.editor.MethodInvocationFixer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 = r0.<proguard.classfile.editor.MethodInvocationFixer: proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor>;

        $i0 = $r3.<proguard.classfile.attribute.CodeAttribute: int u4codeLength>;

        virtualinvoke $r4.<proguard.classfile.editor.CodeAttributeEditor: void reset(int)>($i0);

        virtualinvoke $r3.<proguard.classfile.attribute.CodeAttribute: void instructionsAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.instruction.visitor.InstructionVisitor)>($r1, $r2, r0);

        $r4 = r0.<proguard.classfile.editor.MethodInvocationFixer: proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor>;

        virtualinvoke $r4.<proguard.classfile.editor.CodeAttributeEditor: void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute)>($r1, $r2, $r3);

        return;
    }

    public void visitConstantInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.ConstantInstruction)
    {
        proguard.classfile.editor.MethodInvocationFixer r0;
        byte $b2;
        proguard.classfile.Clazz $r1, $r8;
        int $i0, $i1, $i3, $i4;
        java.lang.String $r9;
        boolean $z0;
        proguard.classfile.editor.CodeAttributeEditor $r7;
        proguard.classfile.Member $r5;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.instruction.Instruction $r6;
        proguard.classfile.instruction.ConstantInstruction $r4, $r10;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.classfile.editor.MethodInvocationFixer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.ConstantInstruction;

        $i1 = $r4.<proguard.classfile.instruction.ConstantInstruction: int constantIndex>;

        r0.<proguard.classfile.editor.MethodInvocationFixer: proguard.classfile.Member referencedMethod> = null;

        interfaceinvoke $r1.<proguard.classfile.Clazz: void constantPoolEntryAccept(int,proguard.classfile.constant.visitor.ConstantVisitor)>($i1, r0);

        $r5 = r0.<proguard.classfile.editor.MethodInvocationFixer: proguard.classfile.Member referencedMethod>;

        if $r5 == null goto label7;

        $b2 = $r4.<proguard.classfile.instruction.ConstantInstruction: byte opcode>;

        $r5 = r0.<proguard.classfile.editor.MethodInvocationFixer: proguard.classfile.Member referencedMethod>;

        $i3 = interfaceinvoke $r5.<proguard.classfile.Member: int getAccessFlags()>();

        $i3 = $i3 & 8;

        if $i3 == 0 goto label1;

        $i3 = (int) $b2;

        if $i3 == -72 goto label7;

        $r10 = new proguard.classfile.instruction.ConstantInstruction;

        specialinvoke $r10.<proguard.classfile.instruction.ConstantInstruction: void <init>(byte,int)>(-72, $i1);

        $r6 = virtualinvoke $r10.<proguard.classfile.instruction.ConstantInstruction: proguard.classfile.instruction.Instruction shrink()>();

        $r7 = r0.<proguard.classfile.editor.MethodInvocationFixer: proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor>;

        virtualinvoke $r7.<proguard.classfile.editor.CodeAttributeEditor: void replaceInstruction(int,proguard.classfile.instruction.Instruction)>($i0, $r6);

        return;

     label1:
        $r5 = r0.<proguard.classfile.editor.MethodInvocationFixer: proguard.classfile.Member referencedMethod>;

        $i3 = interfaceinvoke $r5.<proguard.classfile.Member: int getAccessFlags()>();

        $i3 = $i3 & 2;

        if $i3 != 0 goto label2;

        $r5 = r0.<proguard.classfile.editor.MethodInvocationFixer: proguard.classfile.Member referencedMethod>;

        $r8 = r0.<proguard.classfile.editor.MethodInvocationFixer: proguard.classfile.Clazz referencedMethodClass>;

        $r9 = interfaceinvoke $r5.<proguard.classfile.Member: java.lang.String getName(proguard.classfile.Clazz)>($r8);

        $z0 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>("<init>");

        if $z0 == 0 goto label3;

     label2:
        $i3 = (int) $b2;

        if $i3 == -73 goto label7;

        $r10 = new proguard.classfile.instruction.ConstantInstruction;

        specialinvoke $r10.<proguard.classfile.instruction.ConstantInstruction: void <init>(byte,int)>(-73, $i1);

        $r6 = virtualinvoke $r10.<proguard.classfile.instruction.ConstantInstruction: proguard.classfile.instruction.Instruction shrink()>();

        $r7 = r0.<proguard.classfile.editor.MethodInvocationFixer: proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor>;

        virtualinvoke $r7.<proguard.classfile.editor.CodeAttributeEditor: void replaceInstruction(int,proguard.classfile.instruction.Instruction)>($i0, $r6);

        return;

     label3:
        $r8 = r0.<proguard.classfile.editor.MethodInvocationFixer: proguard.classfile.Clazz referencedClass>;

        $i3 = interfaceinvoke $r8.<proguard.classfile.Clazz: int getAccessFlags()>();

        $i3 = $i3 & 512;

        if $i3 == 0 goto label5;

        $r5 = r0.<proguard.classfile.editor.MethodInvocationFixer: proguard.classfile.Member referencedMethod>;

        $r1 = r0.<proguard.classfile.editor.MethodInvocationFixer: proguard.classfile.Clazz referencedMethodClass>;

        $r9 = interfaceinvoke $r5.<proguard.classfile.Member: java.lang.String getDescriptor(proguard.classfile.Clazz)>($r1);

        $i3 = staticinvoke <proguard.classfile.util.ClassUtil: int internalMethodParameterSize(java.lang.String,boolean)>($r9, 0);

        $i3 = $i3 << 8;

        $i4 = (int) $b2;

        if $i4 != -71 goto label4;

        $i4 = $r4.<proguard.classfile.instruction.ConstantInstruction: int constant>;

        if $i4 == $i3 goto label7;

     label4:
        $r10 = new proguard.classfile.instruction.ConstantInstruction;

        specialinvoke $r10.<proguard.classfile.instruction.ConstantInstruction: void <init>(byte,int,int)>(-71, $i1, $i3);

        $r6 = virtualinvoke $r10.<proguard.classfile.instruction.ConstantInstruction: proguard.classfile.instruction.Instruction shrink()>();

        $r7 = r0.<proguard.classfile.editor.MethodInvocationFixer: proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor>;

        virtualinvoke $r7.<proguard.classfile.editor.CodeAttributeEditor: void replaceInstruction(int,proguard.classfile.instruction.Instruction)>($i0, $r6);

        return;

     label5:
        $i3 = (int) $b2;

        if $i3 == -74 goto label7;

        $i3 = (int) $b2;

        if $i3 != -73 goto label6;

        $r8 = r0.<proguard.classfile.editor.MethodInvocationFixer: proguard.classfile.Clazz referencedClass>;

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r8);

        if $z0 != 0 goto label6;

        $r8 = r0.<proguard.classfile.editor.MethodInvocationFixer: proguard.classfile.Clazz referencedClass>;

        $z0 = interfaceinvoke $r1.<proguard.classfile.Clazz: boolean extends_(proguard.classfile.Clazz)>($r8);

        if $z0 != 0 goto label7;

     label6:
        $r10 = new proguard.classfile.instruction.ConstantInstruction;

        specialinvoke $r10.<proguard.classfile.instruction.ConstantInstruction: void <init>(byte,int)>(-74, $i1);

        $r6 = virtualinvoke $r10.<proguard.classfile.instruction.ConstantInstruction: proguard.classfile.instruction.Instruction shrink()>();

        $r7 = r0.<proguard.classfile.editor.MethodInvocationFixer: proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor>;

        virtualinvoke $r7.<proguard.classfile.editor.CodeAttributeEditor: void replaceInstruction(int,proguard.classfile.instruction.Instruction)>($i0, $r6);

     label7:
        return;
    }
}
