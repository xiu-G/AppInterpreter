public class proguard.classfile.attribute.'annotation'.visitor.AnnotationTypeFilter extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.attribute.'annotation'.visitor.AnnotationVisitor
{
    private final proguard.classfile.attribute.'annotation'.visitor.AnnotationVisitor annotationVisitor;
    private final proguard.util.StringMatcher regularExpressionMatcher;

    public void <init>(java.lang.String, proguard.classfile.attribute.'annotation'.visitor.AnnotationVisitor)
    {
        proguard.util.ListParser $r5;
        proguard.util.ClassNameParser $r3;
        proguard.classfile.attribute.'annotation'.visitor.AnnotationVisitor $r2;
        proguard.classfile.attribute.'annotation'.visitor.AnnotationTypeFilter r0;
        java.lang.String $r1;
        proguard.util.StringMatcher $r4;

        r0 := @this: proguard.classfile.attribute.'annotation'.visitor.AnnotationTypeFilter;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.visitor.AnnotationVisitor;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        $r5 = new proguard.util.ListParser;

        $r3 = new proguard.util.ClassNameParser;

        specialinvoke $r3.<proguard.util.ClassNameParser: void <init>()>();

        specialinvoke $r5.<proguard.util.ListParser: void <init>(proguard.util.StringParser)>($r3);

        $r4 = virtualinvoke $r5.<proguard.util.ListParser: proguard.util.StringMatcher parse(java.lang.String)>($r1);

        r0.<proguard.classfile.attribute.'annotation'.visitor.AnnotationTypeFilter: proguard.util.StringMatcher regularExpressionMatcher> = $r4;

        r0.<proguard.classfile.attribute.'annotation'.visitor.AnnotationTypeFilter: proguard.classfile.attribute.'annotation'.visitor.AnnotationVisitor annotationVisitor> = $r2;

        return;
    }

    private boolean accepted(java.lang.String)
    {
        proguard.classfile.attribute.'annotation'.visitor.AnnotationTypeFilter r0;
        java.lang.String $r1;
        proguard.util.StringMatcher $r2;
        boolean $z0;

        r0 := @this: proguard.classfile.attribute.'annotation'.visitor.AnnotationTypeFilter;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<proguard.classfile.attribute.'annotation'.visitor.AnnotationTypeFilter: proguard.util.StringMatcher regularExpressionMatcher>;

        $z0 = interfaceinvoke $r2.<proguard.util.StringMatcher: boolean matches(java.lang.String)>($r1);

        return $z0;
    }

    public void visitAnnotation(proguard.classfile.Clazz, proguard.classfile.Field, proguard.classfile.attribute.'annotation'.Annotation)
    {
        proguard.classfile.attribute.'annotation'.Annotation $r3;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.'annotation'.visitor.AnnotationVisitor $r5;
        proguard.classfile.attribute.'annotation'.visitor.AnnotationTypeFilter r0;
        java.lang.String $r4;
        proguard.classfile.Field $r2;
        boolean $z0;

        r0 := @this: proguard.classfile.attribute.'annotation'.visitor.AnnotationTypeFilter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Field;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.Annotation;

        $r4 = virtualinvoke $r3.<proguard.classfile.attribute.'annotation'.Annotation: java.lang.String getType(proguard.classfile.Clazz)>($r1);

        $z0 = specialinvoke r0.<proguard.classfile.attribute.'annotation'.visitor.AnnotationTypeFilter: boolean accepted(java.lang.String)>($r4);

        if $z0 == 0 goto label1;

        $r5 = r0.<proguard.classfile.attribute.'annotation'.visitor.AnnotationTypeFilter: proguard.classfile.attribute.'annotation'.visitor.AnnotationVisitor annotationVisitor>;

        interfaceinvoke $r5.<proguard.classfile.attribute.'annotation'.visitor.AnnotationVisitor: void visitAnnotation(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.'annotation'.Annotation)>($r1, $r2, $r3);

     label1:
        return;
    }

    public void visitAnnotation(proguard.classfile.Clazz, proguard.classfile.Method, int, proguard.classfile.attribute.'annotation'.Annotation)
    {
        proguard.classfile.attribute.'annotation'.Annotation $r3;
        proguard.classfile.attribute.'annotation'.visitor.AnnotationVisitor $r5;
        proguard.classfile.attribute.'annotation'.visitor.AnnotationTypeFilter r0;
        proguard.classfile.Clazz $r1;
        int $i0;
        proguard.classfile.Method $r2;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: proguard.classfile.attribute.'annotation'.visitor.AnnotationTypeFilter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $i0 := @parameter2: int;

        $r3 := @parameter3: proguard.classfile.attribute.'annotation'.Annotation;

        $r4 = virtualinvoke $r3.<proguard.classfile.attribute.'annotation'.Annotation: java.lang.String getType(proguard.classfile.Clazz)>($r1);

        $z0 = specialinvoke r0.<proguard.classfile.attribute.'annotation'.visitor.AnnotationTypeFilter: boolean accepted(java.lang.String)>($r4);

        if $z0 == 0 goto label1;

        $r5 = r0.<proguard.classfile.attribute.'annotation'.visitor.AnnotationTypeFilter: proguard.classfile.attribute.'annotation'.visitor.AnnotationVisitor annotationVisitor>;

        interfaceinvoke $r5.<proguard.classfile.attribute.'annotation'.visitor.AnnotationVisitor: void visitAnnotation(proguard.classfile.Clazz,proguard.classfile.Method,int,proguard.classfile.attribute.'annotation'.Annotation)>($r1, $r2, $i0, $r3);

     label1:
        return;
    }

    public void visitAnnotation(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.'annotation'.Annotation)
    {
        proguard.classfile.attribute.'annotation'.Annotation $r3;
        proguard.classfile.Clazz $r1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.'annotation'.visitor.AnnotationVisitor $r5;
        proguard.classfile.attribute.'annotation'.visitor.AnnotationTypeFilter r0;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: proguard.classfile.attribute.'annotation'.visitor.AnnotationTypeFilter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.Annotation;

        $r4 = virtualinvoke $r3.<proguard.classfile.attribute.'annotation'.Annotation: java.lang.String getType(proguard.classfile.Clazz)>($r1);

        $z0 = specialinvoke r0.<proguard.classfile.attribute.'annotation'.visitor.AnnotationTypeFilter: boolean accepted(java.lang.String)>($r4);

        if $z0 == 0 goto label1;

        $r5 = r0.<proguard.classfile.attribute.'annotation'.visitor.AnnotationTypeFilter: proguard.classfile.attribute.'annotation'.visitor.AnnotationVisitor annotationVisitor>;

        interfaceinvoke $r5.<proguard.classfile.attribute.'annotation'.visitor.AnnotationVisitor: void visitAnnotation(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.'annotation'.Annotation)>($r1, $r2, $r3);

     label1:
        return;
    }

    public void visitAnnotation(proguard.classfile.Clazz, proguard.classfile.attribute.'annotation'.Annotation)
    {
        proguard.classfile.attribute.'annotation'.Annotation $r2;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.'annotation'.visitor.AnnotationVisitor $r4;
        proguard.classfile.attribute.'annotation'.visitor.AnnotationTypeFilter r0;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: proguard.classfile.attribute.'annotation'.visitor.AnnotationTypeFilter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.Annotation;

        $r3 = virtualinvoke $r2.<proguard.classfile.attribute.'annotation'.Annotation: java.lang.String getType(proguard.classfile.Clazz)>($r1);

        $z0 = specialinvoke r0.<proguard.classfile.attribute.'annotation'.visitor.AnnotationTypeFilter: boolean accepted(java.lang.String)>($r3);

        if $z0 == 0 goto label1;

        $r4 = r0.<proguard.classfile.attribute.'annotation'.visitor.AnnotationTypeFilter: proguard.classfile.attribute.'annotation'.visitor.AnnotationVisitor annotationVisitor>;

        interfaceinvoke $r4.<proguard.classfile.attribute.'annotation'.visitor.AnnotationVisitor: void visitAnnotation(proguard.classfile.Clazz,proguard.classfile.attribute.'annotation'.Annotation)>($r1, $r2);

     label1:
        return;
    }
}
