class org.htmlparser.util.CharacterReferenceEx extends org.htmlparser.util.CharacterReference
{
    protected int c;
    protected int d;

    public void <init>()
    {
        org.htmlparser.util.CharacterReferenceEx r0;

        r0 := @this: org.htmlparser.util.CharacterReferenceEx;

        specialinvoke r0.<org.htmlparser.util.CharacterReference: void <init>(java.lang.String,int)>("", 0);

        return;
    }

    public int compare(java.lang.Object)
    {
        org.htmlparser.util.CharacterReference $r2;
        char $c5, $c6;
        org.htmlparser.util.CharacterReferenceEx r0;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Object $r1;
        java.lang.String $r3, $r4;

        r0 := @this: org.htmlparser.util.CharacterReferenceEx;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (org.htmlparser.util.CharacterReference) $r1;

        $r3 = virtualinvoke $r2.<org.htmlparser.util.CharacterReference: java.lang.String getKernel()>();

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        $i2 = 0;

        $i3 = 0;

        $i1 = r0.<org.htmlparser.util.CharacterReferenceEx: int c>;

     label1:
        $i4 = r0.<org.htmlparser.util.CharacterReferenceEx: int d>;

        if $i1 >= $i4 goto label3;

        if $i3 < $i0 goto label2;

        return 1;

     label2:
        $r4 = r0.<org.htmlparser.util.CharacterReferenceEx: java.lang.String b>;

        $c5 = virtualinvoke $r4.<java.lang.String: char charAt(int)>($i1);

        $c6 = virtualinvoke $r3.<java.lang.String: char charAt(int)>($i3);

        $i2 = (int) $c5;

        $i4 = (int) $c6;

        $i2 = $i2 - $i4;

        if $i2 != 0 goto label3;

        $i1 = $i1 + 1;

        $i3 = $i3 + 1;

        goto label1;

     label3:
        return $i2;
    }

    public java.lang.String getKernel()
    {
        org.htmlparser.util.CharacterReferenceEx r0;
        int $i0, $i1;
        java.lang.String $r1;

        r0 := @this: org.htmlparser.util.CharacterReferenceEx;

        $r1 = r0.<org.htmlparser.util.CharacterReferenceEx: java.lang.String b>;

        $i0 = r0.<org.htmlparser.util.CharacterReferenceEx: int c>;

        $i1 = r0.<org.htmlparser.util.CharacterReferenceEx: int d>;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>($i0, $i1);

        return $r1;
    }

    public void setEnd(int)
    {
        org.htmlparser.util.CharacterReferenceEx r0;
        int $i0;

        r0 := @this: org.htmlparser.util.CharacterReferenceEx;

        $i0 := @parameter0: int;

        r0.<org.htmlparser.util.CharacterReferenceEx: int d> = $i0;

        return;
    }

    public void setStart(int)
    {
        org.htmlparser.util.CharacterReferenceEx r0;
        int $i0;

        r0 := @this: org.htmlparser.util.CharacterReferenceEx;

        $i0 := @parameter0: int;

        r0.<org.htmlparser.util.CharacterReferenceEx: int c> = $i0;

        return;
    }
}
