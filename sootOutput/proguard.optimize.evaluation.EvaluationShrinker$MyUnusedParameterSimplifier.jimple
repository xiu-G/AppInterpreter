class proguard.optimize.evaluation.EvaluationShrinker$MyUnusedParameterSimplifier extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.instruction.visitor.InstructionVisitor, proguard.classfile.constant.visitor.ConstantVisitor, proguard.classfile.visitor.MemberVisitor
{
    private proguard.classfile.instruction.ConstantInstruction invocationInstruction;
    private int invocationOffset;
    private final proguard.optimize.evaluation.EvaluationShrinker this$0;

    private void <init>(proguard.optimize.evaluation.EvaluationShrinker)
    {
        proguard.optimize.evaluation.EvaluationShrinker $r1;
        proguard.optimize.evaluation.EvaluationShrinker$MyUnusedParameterSimplifier r0;

        r0 := @this: proguard.optimize.evaluation.EvaluationShrinker$MyUnusedParameterSimplifier;

        $r1 := @parameter0: proguard.optimize.evaluation.EvaluationShrinker;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        r0.<proguard.optimize.evaluation.EvaluationShrinker$MyUnusedParameterSimplifier: proguard.optimize.evaluation.EvaluationShrinker this$0> = $r1;

        return;
    }

    void <init>(proguard.optimize.evaluation.EvaluationShrinker, proguard.optimize.evaluation.EvaluationShrinker$1)
    {
        proguard.optimize.evaluation.EvaluationShrinker $r1;
        proguard.optimize.evaluation.EvaluationShrinker$MyUnusedParameterSimplifier r0;
        proguard.optimize.evaluation.EvaluationShrinker$1 $r2;

        r0 := @this: proguard.optimize.evaluation.EvaluationShrinker$MyUnusedParameterSimplifier;

        $r1 := @parameter0: proguard.optimize.evaluation.EvaluationShrinker;

        $r2 := @parameter1: proguard.optimize.evaluation.EvaluationShrinker$1;

        specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker$MyUnusedParameterSimplifier: void <init>(proguard.optimize.evaluation.EvaluationShrinker)>($r1);

        return;
    }

    public void visitAnyInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.Instruction)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.instruction.Instruction $r4;
        int $i0;
        proguard.optimize.evaluation.EvaluationShrinker$MyUnusedParameterSimplifier r0;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.optimize.evaluation.EvaluationShrinker$MyUnusedParameterSimplifier;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.Instruction;

        return;
    }

    public void visitAnyMember(proguard.classfile.Clazz, proguard.classfile.Member)
    {
        proguard.optimize.evaluation.EvaluationShrinker$MyUnusedParameterSimplifier r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.Member $r2;

        r0 := @this: proguard.optimize.evaluation.EvaluationShrinker$MyUnusedParameterSimplifier;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Member;

        return;
    }

    public void visitAnyRefConstant(proguard.classfile.Clazz, proguard.classfile.constant.RefConstant)
    {
        proguard.optimize.evaluation.EvaluationShrinker$MyUnusedParameterSimplifier r0;
        proguard.classfile.constant.RefConstant $r2;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.optimize.evaluation.EvaluationShrinker$MyUnusedParameterSimplifier;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.RefConstant;

        virtualinvoke $r2.<proguard.classfile.constant.RefConstant: void referencedMemberAccept(proguard.classfile.visitor.MemberVisitor)>(r0);

        return;
    }

    public void visitConstantInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.ConstantInstruction)
    {
        byte $b1;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0, $i2;
        proguard.classfile.instruction.ConstantInstruction $r4;
        proguard.optimize.evaluation.EvaluationShrinker$MyUnusedParameterSimplifier r0;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.optimize.evaluation.EvaluationShrinker$MyUnusedParameterSimplifier;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.ConstantInstruction;

        $b1 = $r4.<proguard.classfile.instruction.ConstantInstruction: byte opcode>;

        $i2 = (int) $b1;

        lookupswitch($i2)
        {
            case -74: goto label2;
            case -73: goto label2;
            case -72: goto label2;
            case -71: goto label2;
            default: goto label1;
        };

     label1:
        return;

     label2:
        r0.<proguard.optimize.evaluation.EvaluationShrinker$MyUnusedParameterSimplifier: int invocationOffset> = $i0;

        r0.<proguard.optimize.evaluation.EvaluationShrinker$MyUnusedParameterSimplifier: proguard.classfile.instruction.ConstantInstruction invocationInstruction> = $r4;

        $i0 = $r4.<proguard.classfile.instruction.ConstantInstruction: int constantIndex>;

        interfaceinvoke $r1.<proguard.classfile.Clazz: void constantPoolEntryAccept(int,proguard.classfile.constant.visitor.ConstantVisitor)>($i0, r0);

        return;
    }

    public void visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod)
    {
        proguard.optimize.evaluation.EvaluationShrinker $r3;
        proguard.evaluation.TracedStack $r6;
        proguard.classfile.ProgramClass $r1;
        proguard.optimize.evaluation.PartialEvaluator $r5;
        proguard.classfile.ProgramMethod $r2;
        int $i0, $i1, $i2, $i3;
        proguard.classfile.instruction.ConstantInstruction $r4;
        proguard.optimize.evaluation.EvaluationShrinker$MyUnusedParameterSimplifier r0;
        boolean $z0;

        r0 := @this: proguard.optimize.evaluation.EvaluationShrinker$MyUnusedParameterSimplifier;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.ProgramMethod;

        $i0 = staticinvoke <proguard.optimize.info.ParameterUsageMarker: int getParameterSize(proguard.classfile.Method)>($r2);

        $i1 = virtualinvoke $r2.<proguard.classfile.ProgramMethod: int getAccessFlags()>();

        $i1 = $i1 & 8;

        if $i1 != 0 goto label1;

        $z0 = staticinvoke <proguard.optimize.info.ParameterUsageMarker: boolean isParameterUsed(proguard.classfile.Method,int)>($r2, 0);

        if $z0 != 0 goto label1;

        $r3 = r0.<proguard.optimize.evaluation.EvaluationShrinker$MyUnusedParameterSimplifier: proguard.optimize.evaluation.EvaluationShrinker this$0>;

        $i1 = r0.<proguard.optimize.evaluation.EvaluationShrinker$MyUnusedParameterSimplifier: int invocationOffset>;

        $r4 = r0.<proguard.optimize.evaluation.EvaluationShrinker$MyUnusedParameterSimplifier: proguard.classfile.instruction.ConstantInstruction invocationInstruction>;

        staticinvoke <proguard.optimize.evaluation.EvaluationShrinker: void access$400(proguard.optimize.evaluation.EvaluationShrinker,proguard.classfile.Clazz,int,proguard.classfile.instruction.ConstantInstruction)>($r3, $r1, $i1, $r4);

     label1:
        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label4;

        $z0 = staticinvoke <proguard.optimize.info.ParameterUsageMarker: boolean isParameterUsed(proguard.classfile.Method,int)>($r2, $i1);

        if $z0 != 0 goto label3;

        $r3 = r0.<proguard.optimize.evaluation.EvaluationShrinker$MyUnusedParameterSimplifier: proguard.optimize.evaluation.EvaluationShrinker this$0>;

        $r5 = staticinvoke <proguard.optimize.evaluation.EvaluationShrinker: proguard.optimize.evaluation.PartialEvaluator access$500(proguard.optimize.evaluation.EvaluationShrinker)>($r3);

        $i2 = r0.<proguard.optimize.evaluation.EvaluationShrinker$MyUnusedParameterSimplifier: int invocationOffset>;

        $r6 = virtualinvoke $r5.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedStack getStackBefore(int)>($i2);

        $i2 = virtualinvoke $r6.<proguard.evaluation.TracedStack: int size()>();

        $i2 = $i2 - $i0;

        $i2 = $i2 + $i1;

        $r3 = r0.<proguard.optimize.evaluation.EvaluationShrinker$MyUnusedParameterSimplifier: proguard.optimize.evaluation.EvaluationShrinker this$0>;

        $i3 = r0.<proguard.optimize.evaluation.EvaluationShrinker$MyUnusedParameterSimplifier: int invocationOffset>;

        staticinvoke <proguard.optimize.evaluation.EvaluationShrinker: void access$600(proguard.optimize.evaluation.EvaluationShrinker,int,int)>($r3, $i3, $i2);

     label3:
        $i1 = $i1 + 1;

        goto label2;

     label4:
        return;
    }
}
