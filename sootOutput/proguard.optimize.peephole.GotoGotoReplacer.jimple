public class proguard.optimize.peephole.GotoGotoReplacer extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.instruction.visitor.InstructionVisitor
{
    private final proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor;
    private final proguard.classfile.instruction.visitor.InstructionVisitor extraInstructionVisitor;

    public void <init>(proguard.classfile.editor.CodeAttributeEditor)
    {
        proguard.classfile.editor.CodeAttributeEditor $r1;
        proguard.optimize.peephole.GotoGotoReplacer r0;

        r0 := @this: proguard.optimize.peephole.GotoGotoReplacer;

        $r1 := @parameter0: proguard.classfile.editor.CodeAttributeEditor;

        specialinvoke r0.<proguard.optimize.peephole.GotoGotoReplacer: void <init>(proguard.classfile.editor.CodeAttributeEditor,proguard.classfile.instruction.visitor.InstructionVisitor)>($r1, null);

        return;
    }

    public void <init>(proguard.classfile.editor.CodeAttributeEditor, proguard.classfile.instruction.visitor.InstructionVisitor)
    {
        proguard.classfile.editor.CodeAttributeEditor $r1;
        proguard.optimize.peephole.GotoGotoReplacer r0;
        proguard.classfile.instruction.visitor.InstructionVisitor $r2;

        r0 := @this: proguard.optimize.peephole.GotoGotoReplacer;

        $r1 := @parameter0: proguard.classfile.editor.CodeAttributeEditor;

        $r2 := @parameter1: proguard.classfile.instruction.visitor.InstructionVisitor;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        r0.<proguard.optimize.peephole.GotoGotoReplacer: proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor> = $r1;

        r0.<proguard.optimize.peephole.GotoGotoReplacer: proguard.classfile.instruction.visitor.InstructionVisitor extraInstructionVisitor> = $r2;

        return;
    }

    public void visitAnyInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.Instruction)
    {
        proguard.optimize.peephole.GotoGotoReplacer r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.instruction.Instruction $r4;
        int $i0;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.optimize.peephole.GotoGotoReplacer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.Instruction;

        return;
    }

    public void visitBranchInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.BranchInstruction)
    {
        byte[] $r6;
        byte $b1, $b5;
        proguard.classfile.Clazz $r1;
        int $i0, $i2, $i3, $i4;
        boolean $z0;
        proguard.optimize.peephole.GotoGotoReplacer r0;
        proguard.classfile.editor.CodeAttributeEditor $r5;
        proguard.classfile.instruction.BranchInstruction $r4, $r8, $r10;
        proguard.classfile.instruction.visitor.InstructionVisitor $r9;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.instruction.Instruction $r7;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.optimize.peephole.GotoGotoReplacer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.BranchInstruction;

        $b1 = $r4.<proguard.classfile.instruction.BranchInstruction: byte opcode>;

        $i2 = (int) $b1;

        if $i2 == -89 goto label1;

        $i2 = (int) $b1;

        if $i2 != -56 goto label2;

     label1:
        $i2 = $r4.<proguard.classfile.instruction.BranchInstruction: int branchOffset>;

        $i3 = $i0 + $i2;

        $i4 = virtualinvoke $r4.<proguard.classfile.instruction.BranchInstruction: int length(int)>($i0);

        if $i2 == $i4 goto label2;

        $r5 = r0.<proguard.optimize.peephole.GotoGotoReplacer: proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor>;

        $z0 = virtualinvoke $r5.<proguard.classfile.editor.CodeAttributeEditor: boolean isModified(int)>($i0);

        if $z0 != 0 goto label2;

        $r5 = r0.<proguard.optimize.peephole.GotoGotoReplacer: proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor>;

        $z0 = virtualinvoke $r5.<proguard.classfile.editor.CodeAttributeEditor: boolean isModified(int)>($i3);

        if $z0 != 0 goto label2;

        $r6 = $r3.<proguard.classfile.attribute.CodeAttribute: byte[] code>;

        $r7 = staticinvoke <proguard.classfile.instruction.InstructionFactory: proguard.classfile.instruction.Instruction create(byte[],int)>($r6, $i3);

        $b5 = $r7.<proguard.classfile.instruction.Instruction: byte opcode>;

        $i3 = (int) $b5;

        if $i3 != -89 goto label2;

        $r8 = (proguard.classfile.instruction.BranchInstruction) $r7;

        $i3 = $r8.<proguard.classfile.instruction.BranchInstruction: int branchOffset>;

        $r10 = new proguard.classfile.instruction.BranchInstruction;

        $i2 = $i3 + $i2;

        specialinvoke $r10.<proguard.classfile.instruction.BranchInstruction: void <init>(byte,int)>($b1, $i2);

        $r5 = r0.<proguard.optimize.peephole.GotoGotoReplacer: proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor>;

        virtualinvoke $r5.<proguard.classfile.editor.CodeAttributeEditor: void replaceInstruction(int,proguard.classfile.instruction.Instruction)>($i0, $r10);

        $r9 = r0.<proguard.optimize.peephole.GotoGotoReplacer: proguard.classfile.instruction.visitor.InstructionVisitor extraInstructionVisitor>;

        if $r9 == null goto label2;

        $r9 = r0.<proguard.optimize.peephole.GotoGotoReplacer: proguard.classfile.instruction.visitor.InstructionVisitor extraInstructionVisitor>;

        interfaceinvoke $r9.<proguard.classfile.instruction.visitor.InstructionVisitor: void visitBranchInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.BranchInstruction)>($r1, $r2, $r3, $i0, $r4);

     label2:
        return;
    }
}
