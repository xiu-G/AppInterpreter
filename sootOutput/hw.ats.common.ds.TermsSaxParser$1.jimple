class hw.ats.common.ds.TermsSaxParser$1 extends java.lang.Object implements android.sax.TextElementListener
{
    final hw.ats.common.ds.TermsSaxParser this$0;
    final hw.ats.common.model.Term val$entry;
    final java.util.List val$list;

    void <init>(hw.ats.common.ds.TermsSaxParser, hw.ats.common.model.Term, java.util.List)
    {
        java.util.List $r3;
        hw.ats.common.model.Term $r2;
        hw.ats.common.ds.TermsSaxParser $r1;
        hw.ats.common.ds.TermsSaxParser$1 r0;

        r0 := @this: hw.ats.common.ds.TermsSaxParser$1;

        $r1 := @parameter0: hw.ats.common.ds.TermsSaxParser;

        $r2 := @parameter1: hw.ats.common.model.Term;

        $r3 := @parameter2: java.util.List;

        r0.<hw.ats.common.ds.TermsSaxParser$1: hw.ats.common.ds.TermsSaxParser this$0> = $r1;

        r0.<hw.ats.common.ds.TermsSaxParser$1: hw.ats.common.model.Term val$entry> = $r2;

        r0.<hw.ats.common.ds.TermsSaxParser$1: java.util.List val$list> = $r3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void end(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.util.List $r3;
        hw.ats.common.model.Term $r2;
        java.lang.String $r1, $r5;
        hw.ats.common.ds.TermsSaxParser$1 r0;
        java.lang.CloneNotSupportedException $r6;

        r0 := @this: hw.ats.common.ds.TermsSaxParser$1;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<hw.ats.common.ds.TermsSaxParser$1: hw.ats.common.model.Term val$entry>;

        $r2.<hw.ats.common.model.Term: java.lang.String keyword_name> = $r1;

        $r3 = r0.<hw.ats.common.ds.TermsSaxParser$1: java.util.List val$list>;

        $r2 = r0.<hw.ats.common.ds.TermsSaxParser$1: hw.ats.common.model.Term val$entry>;

     label1:
        $r2 = virtualinvoke $r2.<hw.ats.common.model.Term: hw.ats.common.model.Term clone()>();

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r2);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r1 = staticinvoke <hw.ats.common.ds.TermsSaxParser: java.lang.String access$000()>();

        $r6 = (java.lang.CloneNotSupportedException) $r4;

        $r5 = virtualinvoke $r6.<java.lang.CloneNotSupportedException: java.lang.String getMessage()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>($r1, $r5, $r4);

        return;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    public void start(org.xml.sax.Attributes)
    {
        hw.ats.common.model.Term $r2;
        org.xml.sax.Attributes $r1;
        int $i0;
        java.lang.StringBuilder $r4;
        java.lang.String $r3, $r5;
        hw.ats.common.ds.TermsSaxParser$1 r0;

        r0 := @this: hw.ats.common.ds.TermsSaxParser$1;

        $r1 := @parameter0: org.xml.sax.Attributes;

        $r2 = r0.<hw.ats.common.ds.TermsSaxParser$1: hw.ats.common.model.Term val$entry>;

        $r3 = interfaceinvoke $r1.<org.xml.sax.Attributes: java.lang.String getValue(java.lang.String)>("value");

        $i0 = staticinvoke <com.humanwares.util.StringUtil: int intValue(java.lang.String)>($r3);

        $r2.<hw.ats.common.model.Term: int id> = $i0;

        $r2 = r0.<hw.ats.common.ds.TermsSaxParser$1: hw.ats.common.model.Term val$entry>;

        $r3 = interfaceinvoke $r1.<org.xml.sax.Attributes: java.lang.String getValue(java.lang.String)>("keyword");

        $r2.<hw.ats.common.model.Term: java.lang.String keyword> = $r3;

        $r3 = staticinvoke <hw.ats.common.ds.TermsSaxParser: java.lang.String access$000()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("entry.type:");

        $r5 = interfaceinvoke $r1.<org.xml.sax.Attributes: java.lang.String getValue(java.lang.String)>("keyword");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r3, $r5);

        return;
    }
}
