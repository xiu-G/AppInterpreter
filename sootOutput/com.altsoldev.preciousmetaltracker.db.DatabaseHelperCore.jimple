public class com.altsoldev.preciousmetaltracker.db.DatabaseHelperCore extends android.database.sqlite.SQLiteOpenHelper
{
    private static final int DATABASE_VERSION;
    public final android.content.Context myContext;
    public android.database.sqlite.SQLiteDatabase myDataBase;

    public void <init>(android.content.Context, java.lang.String)
    {
        com.altsoldev.preciousmetaltracker.db.DatabaseHelperCore r0;
        android.content.Context $r1;
        java.lang.String $r2;

        r0 := @this: com.altsoldev.preciousmetaltracker.db.DatabaseHelperCore;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: java.lang.String;

        specialinvoke r0.<android.database.sqlite.SQLiteOpenHelper: void <init>(android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)>($r1, "gspc.db", null, 3);

        r0.<com.altsoldev.preciousmetaltracker.db.DatabaseHelperCore: android.content.Context myContext> = $r1;

        return;
    }

    public static java.lang.String getVersionName(android.content.Context)
    {
        java.lang.Throwable r1;
        android.content.Context $r0;
        android.content.pm.PackageManager $r2;
        java.lang.String $r3;
        android.content.pm.PackageInfo $r4;

        $r0 := @parameter0: android.content.Context;

     label1:
        $r2 = virtualinvoke $r0.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r3 = virtualinvoke $r0.<android.content.Context: java.lang.String getPackageName()>();

        $r4 = virtualinvoke $r2.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>($r3, 0);

     label2:
        $r3 = $r4.<android.content.pm.PackageInfo: java.lang.String versionName>;

        return $r3;

     label3:
        r1 := @caughtexception;

        return null;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label3;
    }

    public void close()
    {
        com.altsoldev.preciousmetaltracker.db.DatabaseHelperCore r0;
        android.database.sqlite.SQLiteDatabase $r1;
        boolean $z0;

        r0 := @this: com.altsoldev.preciousmetaltracker.db.DatabaseHelperCore;

        specialinvoke r0.<android.database.sqlite.SQLiteOpenHelper: void close()>();

        $r1 = r0.<com.altsoldev.preciousmetaltracker.db.DatabaseHelperCore: android.database.sqlite.SQLiteDatabase myDataBase>;

        if $r1 == null goto label1;

        $r1 = r0.<com.altsoldev.preciousmetaltracker.db.DatabaseHelperCore: android.database.sqlite.SQLiteDatabase myDataBase>;

        $z0 = virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: boolean isOpen()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<com.altsoldev.preciousmetaltracker.db.DatabaseHelperCore: android.database.sqlite.SQLiteDatabase myDataBase>;

        virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: void close()>();

     label1:
        return;
    }

    public void onCreate(android.database.sqlite.SQLiteDatabase)
    {
        com.altsoldev.preciousmetaltracker.db.DatabaseHelperCore r0;
        android.database.sqlite.SQLiteDatabase $r1;

        r0 := @this: com.altsoldev.preciousmetaltracker.db.DatabaseHelperCore;

        $r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        return;
    }

    public void onUpgrade(android.database.sqlite.SQLiteDatabase, int, int)
    {
        com.altsoldev.preciousmetaltracker.db.DatabaseHelperCore r0;
        android.database.sqlite.SQLiteDatabase $r1;
        int $i0, $i1;

        r0 := @this: com.altsoldev.preciousmetaltracker.db.DatabaseHelperCore;

        $r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        return;
    }

    public static void <clinit>()
    {
        <com.altsoldev.preciousmetaltracker.db.DatabaseHelperCore: int DATABASE_VERSION> = 3;

        return;
    }
}
