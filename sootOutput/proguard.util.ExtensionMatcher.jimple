public class proguard.util.ExtensionMatcher extends java.lang.Object implements proguard.util.StringMatcher
{
    private final java.lang.String extension;

    public void <init>(java.lang.String)
    {
        proguard.util.ExtensionMatcher r0;
        java.lang.String $r1;

        r0 := @this: proguard.util.ExtensionMatcher;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<proguard.util.ExtensionMatcher: java.lang.String extension> = $r1;

        return;
    }

    private static boolean endsWithIgnoreCase(java.lang.String, java.lang.String)
    {
        int $i0, $i1;
        java.lang.String $r0, $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i0 = $i0 - $i1;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, $i0, $r1, 0, $i1);

        return $z0;
    }

    public boolean matches(java.lang.String)
    {
        proguard.util.ExtensionMatcher r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: proguard.util.ExtensionMatcher;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<proguard.util.ExtensionMatcher: java.lang.String extension>;

        $z0 = staticinvoke <proguard.util.ExtensionMatcher: boolean endsWithIgnoreCase(java.lang.String,java.lang.String)>($r1, $r2);

        return $z0;
    }
}
