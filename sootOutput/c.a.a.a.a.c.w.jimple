public final class c.a.a.a.a.c.w extends java.util.concurrent.ThreadPoolExecutor
{
    private static final int a;
    private static final int b;
    private static final int c;

    static void <clinit>()
    {
        int $i0;
        java.lang.Runtime $r0;

        $r0 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $i0 = virtualinvoke $r0.<java.lang.Runtime: int availableProcessors()>();

        <c.a.a.a.a.c.w: int a> = $i0;

        $i0 = $i0 + 1;

        <c.a.a.a.a.c.w: int b> = $i0;

        $i0 = <c.a.a.a.a.c.w: int a>;

        $i0 = $i0 * 2;

        $i0 = $i0 + 1;

        <c.a.a.a.a.c.w: int c> = $i0;

        return;
    }

    private void <init>(int, int, java.util.concurrent.TimeUnit, c.a.a.a.a.c.m, java.util.concurrent.ThreadFactory)
    {
        java.util.concurrent.TimeUnit $r1;
        c.a.a.a.a.c.w r0;
        int $i0, $i1;
        java.util.concurrent.ThreadFactory $r3;
        c.a.a.a.a.c.m $r2;

        r0 := @this: c.a.a.a.a.c.w;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: java.util.concurrent.TimeUnit;

        $r2 := @parameter3: c.a.a.a.a.c.m;

        $r3 := @parameter4: java.util.concurrent.ThreadFactory;

        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)>($i0, $i1, 1L, $r1, $r2, $r3);

        virtualinvoke r0.<c.a.a.a.a.c.w: int prestartAllCoreThreads()>();

        return;
    }

    public static c.a.a.a.a.c.w a()
    {
        java.util.concurrent.TimeUnit $r1;
        c.a.a.a.a.c.x $r3;
        c.a.a.a.a.c.w $r0;
        int $i0, $i1;
        c.a.a.a.a.c.m $r2;

        $i0 = <c.a.a.a.a.c.w: int b>;

        $i1 = <c.a.a.a.a.c.w: int c>;

        $r0 = new c.a.a.a.a.c.w;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $r2 = new c.a.a.a.a.c.m;

        specialinvoke $r2.<c.a.a.a.a.c.m: void <init>()>();

        $r3 = new c.a.a.a.a.c.x;

        specialinvoke $r3.<c.a.a.a.a.c.x: void <init>()>();

        specialinvoke $r0.<c.a.a.a.a.c.w: void <init>(int,int,java.util.concurrent.TimeUnit,c.a.a.a.a.c.m,java.util.concurrent.ThreadFactory)>($i0, $i1, $r1, $r2, $r3);

        return $r0;
    }

    protected final void afterExecute(java.lang.Runnable, java.lang.Throwable)
    {
        java.lang.Throwable $r2;
        c.a.a.a.a.c.y $r4;
        c.a.a.a.a.c.w r0;
        java.util.concurrent.BlockingQueue $r3;
        java.lang.Runnable $r1;
        c.a.a.a.a.c.m $r5;

        r0 := @this: c.a.a.a.a.c.w;

        $r1 := @parameter0: java.lang.Runnable;

        $r2 := @parameter1: java.lang.Throwable;

        $r4 = (c.a.a.a.a.c.y) $r1;

        interfaceinvoke $r4.<c.a.a.a.a.c.y: void a(boolean)>(1);

        interfaceinvoke $r4.<c.a.a.a.a.c.y: void a(java.lang.Throwable)>($r2);

        $r3 = specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue getQueue()>();

        $r5 = (c.a.a.a.a.c.m) $r3;

        virtualinvoke $r5.<c.a.a.a.a.c.m: void a()>();

        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void afterExecute(java.lang.Runnable,java.lang.Throwable)>($r1, $r2);

        return;
    }

    public final void execute(java.lang.Runnable)
    {
        java.util.concurrent.RunnableFuture $r2;
        c.a.a.a.a.c.w r0;
        java.lang.Runnable $r1;
        boolean $z0;

        r0 := @this: c.a.a.a.a.c.w;

        $r1 := @parameter0: java.lang.Runnable;

        $z0 = staticinvoke <c.a.a.a.a.c.v: boolean b(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void execute(java.lang.Runnable)>($r1);

        return;

     label1:
        $r2 = virtualinvoke r0.<c.a.a.a.a.c.w: java.util.concurrent.RunnableFuture newTaskFor(java.lang.Runnable,java.lang.Object)>($r1, null);

        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void execute(java.lang.Runnable)>($r2);

        return;
    }

    public final volatile java.util.concurrent.BlockingQueue getQueue()
    {
        java.util.concurrent.BlockingQueue $r1;
        c.a.a.a.a.c.w r0;
        c.a.a.a.a.c.m $r2;

        r0 := @this: c.a.a.a.a.c.w;

        $r1 = specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue getQueue()>();

        $r2 = (c.a.a.a.a.c.m) $r1;

        return $r2;
    }

    protected final java.util.concurrent.RunnableFuture newTaskFor(java.lang.Runnable, java.lang.Object)
    {
        c.a.a.a.a.c.w r0;
        c.a.a.a.a.c.t $r3;
        java.lang.Object $r2;
        java.lang.Runnable $r1;

        r0 := @this: c.a.a.a.a.c.w;

        $r1 := @parameter0: java.lang.Runnable;

        $r2 := @parameter1: java.lang.Object;

        $r3 = new c.a.a.a.a.c.t;

        specialinvoke $r3.<c.a.a.a.a.c.t: void <init>(java.lang.Runnable,java.lang.Object)>($r1, null);

        return $r3;
    }

    protected final java.util.concurrent.RunnableFuture newTaskFor(java.util.concurrent.Callable)
    {
        java.util.concurrent.Callable $r1;
        c.a.a.a.a.c.w r0;
        c.a.a.a.a.c.t $r2;

        r0 := @this: c.a.a.a.a.c.w;

        $r1 := @parameter0: java.util.concurrent.Callable;

        $r2 = new c.a.a.a.a.c.t;

        specialinvoke $r2.<c.a.a.a.a.c.t: void <init>(java.util.concurrent.Callable)>($r1);

        return $r2;
    }
}
