class cn.hi321.browser.weave.client.WeaveTransport$WeaveHostnameVerifier extends org.apache.http.conn.ssl.AbstractVerifier
{

    void <init>()
    {
        cn.hi321.browser.weave.client.WeaveTransport$WeaveHostnameVerifier r0;

        r0 := @this: cn.hi321.browser.weave.client.WeaveTransport$WeaveHostnameVerifier;

        specialinvoke r0.<org.apache.http.conn.ssl.AbstractVerifier: void <init>()>();

        return;
    }

    private static boolean isIPAddress(java.lang.String)
    {
        java.lang.String $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        if $r0 == null goto label2;

        $z0 = staticinvoke <org.apache.http.conn.util.InetAddressUtils: boolean isIPv4Address(java.lang.String)>($r0);

        if $z0 != 0 goto label1;

        $z0 = staticinvoke <org.apache.http.conn.util.InetAddressUtils: boolean isIPv6Address(java.lang.String)>($r0);

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    private static void resolveHostAddresses(java.lang.String, java.util.Collection)
    {
        java.net.InetAddress r2;
        java.lang.Throwable r3;
        java.net.InetAddress[] $r4;
        java.util.Collection r1;
        int $i0, $i1;
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.Collection;

     label1:
        $r4 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)>($r0);

     label2:
        $i0 = lengthof $r4;

        $i1 = 0;

     label3:
        if $i1 < $i0 goto label4;

        return;

     label4:
        r2 = $r4[$i1];

     label5:
        $r0 = virtualinvoke r2.<java.net.InetAddress: java.lang.String getHostAddress()>();

        interfaceinvoke r1.<java.util.Collection: boolean add(java.lang.Object)>($r0);

     label6:
        $i1 = $i1 + 1;

        goto label3;

     label7:
        r3 := @caughtexception;

        staticinvoke <cn.hi321.browser.weave.client.Dbg: void d(java.lang.Throwable)>(r3);

        return;

        catch java.net.UnknownHostException from label1 to label2 with label7;
        catch java.net.UnknownHostException from label5 to label6 with label7;
    }

    public void verify(java.lang.String, java.lang.String[], java.lang.String[]) throws javax.net.ssl.SSLException
    {
        java.lang.Object[] $r7;
        cn.hi321.browser.weave.client.WeaveTransport$WeaveHostnameVerifier r0;
        java.lang.String[] $r2, r4;
        java.util.HashSet r3;
        java.util.List $r6;
        int $i0;
        java.lang.String $r1, $r5;
        boolean $z0;

        r0 := @this: cn.hi321.browser.weave.client.WeaveTransport$WeaveHostnameVerifier;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String[];

        r4 := @parameter2: java.lang.String[];

        $z0 = staticinvoke <cn.hi321.browser.weave.client.WeaveTransport$WeaveHostnameVerifier: boolean isIPAddress(java.lang.String)>($r1);

        if $z0 == 0 goto label2;

        if $r2 == null goto label2;

        $i0 = lengthof $r2;

        if $i0 <= 0 goto label2;

        $r5 = $r2[0];

        if $r5 == null goto label2;

        r3 = new java.util.HashSet;

        specialinvoke r3.<java.util.HashSet: void <init>()>();

        $r5 = $r2[0];

        staticinvoke <cn.hi321.browser.weave.client.WeaveTransport$WeaveHostnameVerifier: void resolveHostAddresses(java.lang.String,java.util.Collection)>($r5, r3);

        if r4 == null goto label1;

        $r6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r4);

        virtualinvoke r3.<java.util.HashSet: boolean addAll(java.util.Collection)>($r6);

     label1:
        $i0 = virtualinvoke r3.<java.util.HashSet: int size()>();

        r4 = newarray (java.lang.String)[$i0];

        $r7 = virtualinvoke r3.<java.util.HashSet: java.lang.Object[] toArray(java.lang.Object[])>(r4);

        r4 = (java.lang.String[]) $r7;

     label2:
        virtualinvoke r0.<cn.hi321.browser.weave.client.WeaveTransport$WeaveHostnameVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[],boolean)>($r1, $r2, r4, 0);

        return;
    }
}
