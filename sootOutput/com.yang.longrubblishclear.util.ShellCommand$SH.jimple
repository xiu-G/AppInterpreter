public class com.yang.longrubblishclear.util.ShellCommand$SH extends java.lang.Object
{
    private static final java.lang.String TEMP_APK_PATH;
    private java.lang.String SHELL;
    final com.yang.longrubblishclear.util.ShellCommand this$0;

    public void <init>(com.yang.longrubblishclear.util.ShellCommand, java.lang.String)
    {
        com.yang.longrubblishclear.util.ShellCommand $r1;
        com.yang.longrubblishclear.util.ShellCommand$SH r0;
        java.lang.String $r2;

        r0 := @this: com.yang.longrubblishclear.util.ShellCommand$SH;

        $r1 := @parameter0: com.yang.longrubblishclear.util.ShellCommand;

        $r2 := @parameter1: java.lang.String;

        r0.<com.yang.longrubblishclear.util.ShellCommand$SH: com.yang.longrubblishclear.util.ShellCommand this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.yang.longrubblishclear.util.ShellCommand$SH: java.lang.String SHELL> = "sh";

        r0.<com.yang.longrubblishclear.util.ShellCommand$SH: java.lang.String SHELL> = $r2;

        return;
    }

    private java.lang.String getStreamLines(java.io.InputStream)
    {
        java.io.DataInputStream r3;
        java.lang.Exception r6;
        java.lang.StringBuffer r2, r4;
        int $i0;
        com.yang.longrubblishclear.util.ShellCommand$SH r0;
        java.lang.String $r5;
        java.io.InputStream $r1;

        r0 := @this: com.yang.longrubblishclear.util.ShellCommand$SH;

        $r1 := @parameter0: java.io.InputStream;

        r4 = null;

        r3 = new java.io.DataInputStream;

        specialinvoke r3.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r1);

     label01:
        $i0 = virtualinvoke r3.<java.io.DataInputStream: int available()>();

     label02:
        if $i0 <= 0 goto label06;

        r2 = new java.lang.StringBuffer;

     label03:
        $r5 = virtualinvoke r3.<java.io.DataInputStream: java.lang.String readLine()>();

        specialinvoke r2.<java.lang.StringBuffer: void <init>(java.lang.String)>($r5);

     label04:
        $i0 = virtualinvoke r3.<java.io.DataInputStream: int available()>();

     label05:
        if $i0 > 0 goto label08;

        r4 = r2;

     label06:
        virtualinvoke r3.<java.io.DataInputStream: void close()>();

     label07:
        if r4 == null goto label13;

        $r5 = virtualinvoke r4.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r5;

     label08:
        r4 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r5 = virtualinvoke r3.<java.io.DataInputStream: java.lang.String readLine()>();

        virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

     label09:
        goto label04;

     label10:
        r6 := @caughtexception;

        r4 = r2;

     label11:
        $r5 = virtualinvoke r6.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ShellCommand", $r5);

        goto label07;

     label12:
        r6 := @caughtexception;

        goto label11;

     label13:
        return null;

        catch java.lang.Exception from label01 to label02 with label12;
        catch java.lang.Exception from label03 to label04 with label12;
        catch java.lang.Exception from label04 to label05 with label10;
        catch java.lang.Exception from label06 to label07 with label12;
        catch java.lang.Exception from label08 to label09 with label10;
    }

    public com.yang.longrubblishclear.util.ShellCommand$CommandResult moveFile(java.lang.String, java.lang.String)
    {
        com.yang.longrubblishclear.util.ShellCommand$CommandResult $r7, $r12;
        java.lang.Integer $r9;
        java.io.File r3, r4, $r11;
        com.yang.longrubblishclear.util.ShellCommand $r8;
        int $i0;
        com.yang.longrubblishclear.util.ShellCommand$SH r0;
        java.lang.StringBuilder r5, $r10;
        java.lang.String $r1, $r2, $r6;
        boolean $z0;

        r0 := @this: com.yang.longrubblishclear.util.ShellCommand$SH;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        r3 = new java.io.File;

        r4 = r3;

        specialinvoke r3.<java.io.File: void <init>(java.lang.String)>($r2);

        virtualinvoke r4.<java.io.File: boolean delete()>();

        $r10 = new java.lang.StringBuilder;

        r5 = $r10;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("cp ");

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r6 = virtualinvoke r4.<java.io.File: java.lang.String getPath()>();

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = virtualinvoke r0.<com.yang.longrubblishclear.util.ShellCommand$SH: com.yang.longrubblishclear.util.ShellCommand$CommandResult runWaitFor(java.lang.String)>($r6);

        $z0 = virtualinvoke $r7.<com.yang.longrubblishclear.util.ShellCommand$CommandResult: boolean success()>();

        if $z0 == 0 goto label1;

        return $r7;

     label1:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("cat ");

        r5 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" > ");

        r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = virtualinvoke r0.<com.yang.longrubblishclear.util.ShellCommand$SH: com.yang.longrubblishclear.util.ShellCommand$CommandResult runWaitFor(java.lang.String)>($r2);

        $z0 = virtualinvoke $r7.<com.yang.longrubblishclear.util.ShellCommand$CommandResult: boolean success()>();

        if $z0 == 0 goto label2;

        return $r7;

     label2:
        $r11 = new java.io.File;

        r3 = $r11;

        specialinvoke $r11.<java.io.File: void <init>(java.lang.String)>($r1);

        $z0 = virtualinvoke r3.<java.io.File: boolean renameTo(java.io.File)>(r4);

        if $z0 != 0 goto label3;

        $z0 = staticinvoke <com.yang.longrubblishclear.util.Tools: boolean moveTo(java.io.File,java.io.File)>(r4, r3);

        if $z0 != 0 goto label3;

        $r1 = virtualinvoke $r7.<com.yang.longrubblishclear.util.ShellCommand$CommandResult: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("ShellCommand", $r1);

        $r12 = new com.yang.longrubblishclear.util.ShellCommand$CommandResult;

        $r8 = r0.<com.yang.longrubblishclear.util.ShellCommand$SH: com.yang.longrubblishclear.util.ShellCommand this$0>;

        $i0 = -1;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r12.<com.yang.longrubblishclear.util.ShellCommand$CommandResult: void <init>(com.yang.longrubblishclear.util.ShellCommand,java.lang.Integer)>($r8, $r9);

        return $r12;

     label3:
        $r12 = new com.yang.longrubblishclear.util.ShellCommand$CommandResult;

        $r8 = r0.<com.yang.longrubblishclear.util.ShellCommand$SH: com.yang.longrubblishclear.util.ShellCommand this$0>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        specialinvoke $r12.<com.yang.longrubblishclear.util.ShellCommand$CommandResult: void <init>(com.yang.longrubblishclear.util.ShellCommand,java.lang.Integer)>($r8, $r9);

        return $r12;
    }

    public com.yang.longrubblishclear.util.ShellCommand$CommandResult moveTo(boolean, java.lang.String, java.lang.String)
    {
        com.yang.longrubblishclear.util.ShellCommand$CommandResult r6, $r11;
        java.lang.Integer $r8;
        com.yang.longrubblishclear.util.SystemUninstallerApp $r9;
        int $i0;
        java.lang.String $r1, $r2, $r5;
        boolean $z0, $z1;
        java.io.File r3, r4, $r12;
        com.yang.longrubblishclear.util.ShellCommand $r7;
        com.yang.longrubblishclear.util.ShellCommand$SH r0;
        java.lang.StringBuilder $r10, $r13;

        r0 := @this: com.yang.longrubblishclear.util.ShellCommand$SH;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r5 = staticinvoke <android.os.Environment: java.lang.String getExternalStorageState()>();

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("mounted");

        if $z1 != 0 goto label1;

        $r11 = new com.yang.longrubblishclear.util.ShellCommand$CommandResult;

        $r7 = r0.<com.yang.longrubblishclear.util.ShellCommand$SH: com.yang.longrubblishclear.util.ShellCommand this$0>;

        $i0 = -1;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r9 = staticinvoke <com.yang.longrubblishclear.util.SystemUninstallerApp: com.yang.longrubblishclear.util.SystemUninstallerApp getInstance()>();

        $r1 = virtualinvoke $r9.<com.yang.longrubblishclear.util.SystemUninstallerApp: java.lang.String getString(int)>(2131230787);

        $r9 = staticinvoke <com.yang.longrubblishclear.util.SystemUninstallerApp: com.yang.longrubblishclear.util.SystemUninstallerApp getInstance()>();

        $r2 = virtualinvoke $r9.<com.yang.longrubblishclear.util.SystemUninstallerApp: java.lang.String getString(int)>(2131230788);

        specialinvoke $r11.<com.yang.longrubblishclear.util.ShellCommand$CommandResult: void <init>(com.yang.longrubblishclear.util.ShellCommand,java.lang.Integer,java.lang.String,java.lang.String)>($r7, $r8, $r1, $r2);

        return $r11;

     label1:
        $r12 = new java.io.File;

        r3 = $r12;

        r4 = staticinvoke <android.os.Environment: java.io.File getExternalStorageDirectory()>();

        specialinvoke $r12.<java.io.File: void <init>(java.io.File,java.lang.String)>(r4, ".deepuninstaller/.temp");

        $z1 = virtualinvoke r3.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label2;

        virtualinvoke r3.<java.io.File: boolean mkdirs()>();

     label2:
        $r12 = new java.io.File;

        r4 = $r12;

        $r13 = new java.lang.StringBuilder;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>($r2);

        $r10 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".apk");

        $r2 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.io.File: void <init>(java.io.File,java.lang.String)>(r3, $r2);

        $r13 = new java.lang.StringBuilder;

        $r10 = $r13;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>("cp ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r2 = virtualinvoke r4.<java.io.File: java.lang.String getPath()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        r6 = virtualinvoke r0.<com.yang.longrubblishclear.util.ShellCommand$SH: com.yang.longrubblishclear.util.ShellCommand$CommandResult runWaitFor(java.lang.String)>($r2);

        $z1 = virtualinvoke r6.<com.yang.longrubblishclear.util.ShellCommand$CommandResult: boolean success()>();

        if $z1 != 0 goto label3;

        $r12 = new java.io.File;

        r3 = $r12;

        specialinvoke $r12.<java.io.File: void <init>(java.lang.String)>($r1);

        $z1 = virtualinvoke r3.<java.io.File: boolean renameTo(java.io.File)>(r4);

        if $z1 != 0 goto label3;

        $z1 = staticinvoke <com.yang.longrubblishclear.util.Tools: boolean moveTo(java.io.File,java.io.File)>(r4, r3);

        if $z1 != 0 goto label3;

        $r1 = virtualinvoke r6.<com.yang.longrubblishclear.util.ShellCommand$CommandResult: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("ShellCommand", $r1);

        return r6;

     label3:
        $r13 = new java.lang.StringBuilder;

        $r10 = $r13;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>("pm install -r ");

        if $z0 == 0 goto label5;

        $r1 = "-s ";

     label4:
        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke r4.<java.io.File: java.lang.String getPath()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        r6 = virtualinvoke r0.<com.yang.longrubblishclear.util.ShellCommand$SH: com.yang.longrubblishclear.util.ShellCommand$CommandResult runWaitFor(java.lang.String)>($r1);

        $r1 = virtualinvoke r6.<com.yang.longrubblishclear.util.ShellCommand$CommandResult: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("ShellCommand", $r1);

        virtualinvoke r4.<java.io.File: boolean delete()>();

        return r6;

     label5:
        $r1 = "-f ";

        goto label4;
    }

    public java.lang.Process run(java.lang.String)
    {
        java.io.OutputStream $r7;
        java.lang.Process $r6;
        java.lang.Runtime $r4;
        java.lang.Exception r2;
        java.io.DataOutputStream r3;
        com.yang.longrubblishclear.util.ShellCommand$SH r0;
        java.lang.StringBuilder $r8;
        java.lang.String $r1, $r5;

        r0 := @this: com.yang.longrubblishclear.util.ShellCommand$SH;

        $r1 := @parameter0: java.lang.String;

     label1:
        $r4 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $r5 = r0.<com.yang.longrubblishclear.util.ShellCommand$SH: java.lang.String SHELL>;

        $r6 = virtualinvoke $r4.<java.lang.Runtime: java.lang.Process exec(java.lang.String)>($r5);

     label2:
        r3 = new java.io.DataOutputStream;

     label3:
        $r7 = virtualinvoke $r6.<java.lang.Process: java.io.OutputStream getOutputStream()>();

        specialinvoke r3.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r7);

     label4:
        $r8 = new java.lang.StringBuilder;

     label5:
        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("exec ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r5 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r3.<java.io.DataOutputStream: void writeBytes(java.lang.String)>($r5);

        virtualinvoke r3.<java.io.DataOutputStream: void flush()>();

     label6:
        return $r6;

     label7:
        r2 := @caughtexception;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("Exception while trying to run: \'");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' ");

        $r1 = virtualinvoke r2.<java.lang.Exception: java.lang.String getMessage()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("run", $r1);

        return null;

        catch java.lang.Exception from label1 to label2 with label7;
        catch java.lang.Exception from label3 to label4 with label7;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    public com.yang.longrubblishclear.util.ShellCommand$CommandResult runWaitFor(java.lang.String)
    {
        java.lang.Throwable r12;
        com.yang.longrubblishclear.util.ShellCommand$CommandResult r2, $r14;
        java.lang.Integer $r4, $r7;
        java.lang.NullPointerException r13;
        int $i0;
        java.lang.String $r1, r5, r6, $r9;
        java.lang.Process $r3;
        com.yang.longrubblishclear.util.ShellCommand $r10;
        java.lang.InterruptedException $r16;
        com.yang.longrubblishclear.util.ShellCommand$SH r0;
        java.lang.StringBuilder $r11, $r15;
        java.io.InputStream $r8;

        r0 := @this: com.yang.longrubblishclear.util.ShellCommand$SH;

        $r1 := @parameter0: java.lang.String;

        $r3 = virtualinvoke r0.<com.yang.longrubblishclear.util.ShellCommand$SH: java.lang.Process run(java.lang.String)>($r1);

        $i0 = -1;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        r5 = null;

        r6 = null;

        if $r3 == null goto label7;

     label1:
        $i0 = virtualinvoke $r3.<java.lang.Process: int waitFor()>();

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

     label2:
        $r4 = $r7;

     label3:
        $r8 = virtualinvoke $r3.<java.lang.Process: java.io.InputStream getInputStream()>();

        $r9 = specialinvoke r0.<com.yang.longrubblishclear.util.ShellCommand$SH: java.lang.String getStreamLines(java.io.InputStream)>($r8);

     label4:
        r5 = $r9;

     label5:
        $r8 = virtualinvoke $r3.<java.lang.Process: java.io.InputStream getErrorStream()>();

        $r9 = specialinvoke r0.<com.yang.longrubblishclear.util.ShellCommand$SH: java.lang.String getStreamLines(java.io.InputStream)>($r8);

     label6:
        r6 = $r9;

     label7:
        $r14 = new com.yang.longrubblishclear.util.ShellCommand$CommandResult;

        r2 = $r14;

        $r10 = r0.<com.yang.longrubblishclear.util.ShellCommand$SH: com.yang.longrubblishclear.util.ShellCommand this$0>;

        specialinvoke $r14.<com.yang.longrubblishclear.util.ShellCommand$CommandResult: void <init>(com.yang.longrubblishclear.util.ShellCommand,java.lang.Integer,java.lang.String,java.lang.String)>($r10, $r4, r5, r6);

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>(java.lang.String)>("run:");

        $r11 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ret:");

        $r1 = virtualinvoke r2.<com.yang.longrubblishclear.util.ShellCommand$CommandResult: java.lang.String toString()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("ShellCommand", $r1);

        return r2;

     label8:
        r12 := @caughtexception;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>(java.lang.String)>("runWaitFor ");

        $r16 = (java.lang.InterruptedException) r12;

        $r9 = virtualinvoke $r16.<java.lang.InterruptedException: java.lang.String toString()>();

        $r11 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r9 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ShellCommand", $r9);

        goto label7;

     label9:
        r13 := @caughtexception;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>(java.lang.String)>("runWaitFor ");

        $r9 = virtualinvoke r13.<java.lang.NullPointerException: java.lang.String toString()>();

        $r11 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r9 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ShellCommand", $r9);

        goto label7;

        catch java.lang.InterruptedException from label1 to label2 with label8;
        catch java.lang.InterruptedException from label3 to label4 with label8;
        catch java.lang.InterruptedException from label5 to label6 with label8;
        catch java.lang.NullPointerException from label1 to label2 with label9;
        catch java.lang.NullPointerException from label3 to label4 with label9;
        catch java.lang.NullPointerException from label5 to label6 with label9;
    }

    public static void <clinit>()
    {
        <com.yang.longrubblishclear.util.ShellCommand$SH: java.lang.String TEMP_APK_PATH> = ".deepuninstaller/.temp";

        return;
    }
}
