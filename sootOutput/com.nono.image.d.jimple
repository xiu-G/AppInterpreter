final class com.nono.image.d extends java.util.LinkedHashMap
{
    final com.nono.image.c a;

    void <init>(com.nono.image.c, int)
    {
        int $i0;
        com.nono.image.d r0;
        com.nono.image.c $r1;

        r0 := @this: com.nono.image.d;

        $r1 := @parameter0: com.nono.image.c;

        $i0 := @parameter1: int;

        r0.<com.nono.image.d: com.nono.image.c a> = $r1;

        specialinvoke r0.<java.util.LinkedHashMap: void <init>(int,float,boolean)>($i0, 0.75F, 1);

        return;
    }

    protected final boolean removeEldestEntry(java.util.Map$Entry)
    {
        java.util.Map$Entry $r1;
        java.util.concurrent.ConcurrentHashMap $r4;
        int $i0, $i1;
        com.nono.image.d r0;
        com.nono.image.c $r3;
        java.lang.Object $r5, $r6;
        java.lang.ref.SoftReference $r2;

        r0 := @this: com.nono.image.d;

        $r1 := @parameter0: java.util.Map$Entry;

        $i0 = virtualinvoke r0.<com.nono.image.d: int size()>();

        $r3 = r0.<com.nono.image.d: com.nono.image.c a>;

        $i1 = staticinvoke <com.nono.image.c: int a(com.nono.image.c)>($r3);

        if $i0 <= $i1 goto label1;

        $r3 = r0.<com.nono.image.d: com.nono.image.c a>;

        $r4 = staticinvoke <com.nono.image.c: java.util.concurrent.ConcurrentHashMap b(com.nono.image.c)>($r3);

        $r5 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r2 = new java.lang.ref.SoftReference;

        $r6 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getValue()>();

        specialinvoke $r2.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>($r6);

        virtualinvoke $r4.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r2);

        return 1;

     label1:
        return 0;
    }
}
