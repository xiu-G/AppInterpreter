public abstract class c.a.a.a.a.c.a extends java.lang.Object
{
    private static final int a;
    public static final java.util.concurrent.Executor b;
    public static final java.util.concurrent.Executor c;
    private static final int d;
    private static final int e;
    private static final java.util.concurrent.ThreadFactory f;
    private static final java.util.concurrent.BlockingQueue g;
    private static final c.a.a.a.a.c.g h;
    private static volatile java.util.concurrent.Executor i;
    private final c.a.a.a.a.c.k j;
    private final java.util.concurrent.FutureTask k;
    private volatile int l;
    private final java.util.concurrent.atomic.AtomicBoolean m;
    private final java.util.concurrent.atomic.AtomicBoolean n;

    static void <clinit>()
    {
        c.a.a.a.a.c.h $r7;
        c.a.a.a.a.c.g $r8;
        java.util.concurrent.ThreadPoolExecutor $r6;
        java.util.concurrent.Executor $r9;
        c.a.a.a.a.c.b $r4;
        java.lang.Runtime $r3;
        java.util.concurrent.BlockingQueue $r1;
        java.util.concurrent.LinkedBlockingQueue $r5;
        java.util.concurrent.TimeUnit $r0;
        int $i0, $i1;
        java.util.concurrent.ThreadFactory $r2;

        $r3 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $i0 = virtualinvoke $r3.<java.lang.Runtime: int availableProcessors()>();

        <c.a.a.a.a.c.a: int a> = $i0;

        $i0 = $i0 + 1;

        <c.a.a.a.a.c.a: int d> = $i0;

        $i0 = <c.a.a.a.a.c.a: int a>;

        $i0 = $i0 * 2;

        $i0 = $i0 + 1;

        <c.a.a.a.a.c.a: int e> = $i0;

        $r4 = new c.a.a.a.a.c.b;

        specialinvoke $r4.<c.a.a.a.a.c.b: void <init>()>();

        <c.a.a.a.a.c.a: java.util.concurrent.ThreadFactory f> = $r4;

        $r5 = new java.util.concurrent.LinkedBlockingQueue;

        specialinvoke $r5.<java.util.concurrent.LinkedBlockingQueue: void <init>(int)>(128);

        <c.a.a.a.a.c.a: java.util.concurrent.BlockingQueue g> = $r5;

        $r6 = new java.util.concurrent.ThreadPoolExecutor;

        $i1 = <c.a.a.a.a.c.a: int d>;

        $i0 = <c.a.a.a.a.c.a: int e>;

        $r0 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $r1 = <c.a.a.a.a.c.a: java.util.concurrent.BlockingQueue g>;

        $r2 = <c.a.a.a.a.c.a: java.util.concurrent.ThreadFactory f>;

        specialinvoke $r6.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)>($i1, $i0, 1L, $r0, $r1, $r2);

        <c.a.a.a.a.c.a: java.util.concurrent.Executor b> = $r6;

        $r7 = new c.a.a.a.a.c.h;

        specialinvoke $r7.<c.a.a.a.a.c.h: void <init>(byte)>(0);

        <c.a.a.a.a.c.a: java.util.concurrent.Executor c> = $r7;

        $r8 = new c.a.a.a.a.c.g;

        specialinvoke $r8.<c.a.a.a.a.c.g: void <init>()>();

        <c.a.a.a.a.c.a: c.a.a.a.a.c.g h> = $r8;

        $r9 = <c.a.a.a.a.c.a: java.util.concurrent.Executor c>;

        <c.a.a.a.a.c.a: java.util.concurrent.Executor i> = $r9;

        return;
    }

    public void <init>()
    {
        c.a.a.a.a.c.d $r4;
        c.a.a.a.a.c.c $r3;
        int $i0;
        c.a.a.a.a.c.a r0;
        java.util.concurrent.atomic.AtomicBoolean $r2;
        c.a.a.a.a.c.k $r1;

        r0 := @this: c.a.a.a.a.c.a;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = <c.a.a.a.a.c.j: int a>;

        r0.<c.a.a.a.a.c.a: int l> = $i0;

        $r2 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: void <init>()>();

        r0.<c.a.a.a.a.c.a: java.util.concurrent.atomic.AtomicBoolean m> = $r2;

        $r2 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: void <init>()>();

        r0.<c.a.a.a.a.c.a: java.util.concurrent.atomic.AtomicBoolean n> = $r2;

        $r3 = new c.a.a.a.a.c.c;

        specialinvoke $r3.<c.a.a.a.a.c.c: void <init>(c.a.a.a.a.c.a)>(r0);

        r0.<c.a.a.a.a.c.a: c.a.a.a.a.c.k j> = $r3;

        $r4 = new c.a.a.a.a.c.d;

        $r1 = r0.<c.a.a.a.a.c.a: c.a.a.a.a.c.k j>;

        specialinvoke $r4.<c.a.a.a.a.c.d: void <init>(c.a.a.a.a.c.a,java.util.concurrent.Callable)>(r0, $r1);

        r0.<c.a.a.a.a.c.a: java.util.concurrent.FutureTask k> = $r4;

        return;
    }

    static java.lang.Object a(c.a.a.a.a.c.a, java.lang.Object)
    {
        c.a.a.a.a.c.a $r0;
        java.lang.Object $r1;

        $r0 := @parameter0: c.a.a.a.a.c.a;

        $r1 := @parameter1: java.lang.Object;

        $r1 = specialinvoke $r0.<c.a.a.a.a.c.a: java.lang.Object b(java.lang.Object)>($r1);

        return $r1;
    }

    static java.util.concurrent.atomic.AtomicBoolean a(c.a.a.a.a.c.a)
    {
        c.a.a.a.a.c.a $r0;
        java.util.concurrent.atomic.AtomicBoolean r1;

        $r0 := @parameter0: c.a.a.a.a.c.a;

        r1 = $r0.<c.a.a.a.a.c.a: java.util.concurrent.atomic.AtomicBoolean n>;

        return r1;
    }

    private java.lang.Object b(java.lang.Object)
    {
        c.a.a.a.a.c.f $r2;
        java.lang.Object[] $r3;
        c.a.a.a.a.c.g $r5;
        android.os.Message $r4;
        c.a.a.a.a.c.a r0;
        java.lang.Object $r1;

        r0 := @this: c.a.a.a.a.c.a;

        $r1 := @parameter0: java.lang.Object;

        $r5 = <c.a.a.a.a.c.a: c.a.a.a.a.c.g h>;

        $r2 = new c.a.a.a.a.c.f;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = $r1;

        specialinvoke $r2.<c.a.a.a.a.c.f: void <init>(c.a.a.a.a.c.a,java.lang.Object[])>(r0, $r3);

        $r4 = virtualinvoke $r5.<c.a.a.a.a.c.g: android.os.Message obtainMessage(int,java.lang.Object)>(1, $r2);

        virtualinvoke $r4.<android.os.Message: void sendToTarget()>();

        return $r1;
    }

    static void b(c.a.a.a.a.c.a)
    {
        int $i0;
        c.a.a.a.a.c.a $r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        boolean $z0;

        $r0 := @parameter0: c.a.a.a.a.c.a;

        $r1 = $r0.<c.a.a.a.a.c.a: java.util.concurrent.atomic.AtomicBoolean m>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z0 == 0 goto label2;

        virtualinvoke $r0.<c.a.a.a.a.c.a: void d()>();

     label1:
        $i0 = <c.a.a.a.a.c.j: int c>;

        $r0.<c.a.a.a.a.c.a: int l> = $i0;

        return;

     label2:
        virtualinvoke $r0.<c.a.a.a.a.c.a: void c()>();

        goto label1;
    }

    static void b(c.a.a.a.a.c.a, java.lang.Object)
    {
        c.a.a.a.a.c.a $r0;
        java.util.concurrent.atomic.AtomicBoolean $r2;
        java.lang.Object $r1;
        boolean $z0;

        $r0 := @parameter0: c.a.a.a.a.c.a;

        $r1 := @parameter1: java.lang.Object;

        $r2 = $r0.<c.a.a.a.a.c.a: java.util.concurrent.atomic.AtomicBoolean n>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z0 != 0 goto label1;

        specialinvoke $r0.<c.a.a.a.a.c.a: java.lang.Object b(java.lang.Object)>($r1);

     label1:
        return;
    }

    protected static transient void b_()
    {
        return;
    }

    public final transient c.a.a.a.a.c.a a(java.util.concurrent.Executor, java.lang.Object[])
    {
        java.lang.IllegalStateException $r6;
        java.lang.Object[] $r2;
        java.util.concurrent.Executor $r1;
        c.a.a.a.a.c.a r0;
        java.util.concurrent.FutureTask $r5;
        int[] $r3;
        int $i0, $i1;
        c.a.a.a.a.c.k $r4;

        r0 := @this: c.a.a.a.a.c.a;

        $r1 := @parameter0: java.util.concurrent.Executor;

        $r2 := @parameter1: java.lang.Object[];

        $i0 = r0.<c.a.a.a.a.c.a: int l>;

        $i1 = <c.a.a.a.a.c.j: int a>;

        if $i0 == $i1 goto label1;

        $r3 = <c.a.a.a.a.c.e: int[] a>;

        $i0 = r0.<c.a.a.a.a.c.a: int l>;

        $i0 = $i0 + -1;

        $i0 = $r3[$i0];

        lookupswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label3;
            default: goto label1;
        };

     label1:
        $i0 = <c.a.a.a.a.c.j: int b>;

        r0.<c.a.a.a.a.c.a: int l> = $i0;

        virtualinvoke r0.<c.a.a.a.a.c.a: void b()>();

        $r4 = r0.<c.a.a.a.a.c.a: c.a.a.a.a.c.k j>;

        $r4.<c.a.a.a.a.c.k: java.lang.Object[] b> = $r2;

        $r5 = r0.<c.a.a.a.a.c.a: java.util.concurrent.FutureTask k>;

        interfaceinvoke $r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r5);

        return r0;

     label2:
        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot execute task: the task is already running.");

        throw $r6;

     label3:
        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot execute task: the task has already been executed (a task can be executed only once)");

        throw $r6;
    }

    public final int a_()
    {
        int i0;
        c.a.a.a.a.c.a r0;

        r0 := @this: c.a.a.a.a.c.a;

        i0 = r0.<c.a.a.a.a.c.a: int l>;

        return i0;
    }

    protected void b()
    {
        c.a.a.a.a.c.a r0;

        r0 := @this: c.a.a.a.a.c.a;

        return;
    }

    protected void c()
    {
        c.a.a.a.a.c.a r0;

        r0 := @this: c.a.a.a.a.c.a;

        return;
    }

    protected void d()
    {
        c.a.a.a.a.c.a r0;

        r0 := @this: c.a.a.a.a.c.a;

        return;
    }

    protected abstract transient java.lang.Object e();

    public final boolean h()
    {
        c.a.a.a.a.c.a r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        boolean $z0;

        r0 := @this: c.a.a.a.a.c.a;

        $r1 = r0.<c.a.a.a.a.c.a: java.util.concurrent.atomic.AtomicBoolean m>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        return $z0;
    }

    public final boolean i()
    {
        c.a.a.a.a.c.a r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        java.util.concurrent.FutureTask $r2;
        boolean $z0;

        r0 := @this: c.a.a.a.a.c.a;

        $r1 = r0.<c.a.a.a.a.c.a: java.util.concurrent.atomic.AtomicBoolean m>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        $r2 = r0.<c.a.a.a.a.c.a: java.util.concurrent.FutureTask k>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.FutureTask: boolean cancel(boolean)>(1);

        return $z0;
    }
}
