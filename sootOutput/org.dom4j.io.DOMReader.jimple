public class org.dom4j.io.DOMReader extends java.lang.Object
{
    private org.dom4j.DocumentFactory factory;
    private org.dom4j.tree.NamespaceStack namespaceStack;

    public void <init>()
    {
        org.dom4j.tree.NamespaceStack $r2;
        org.dom4j.io.DOMReader r0;
        org.dom4j.DocumentFactory $r1;

        r0 := @this: org.dom4j.io.DOMReader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.dom4j.DocumentFactory: org.dom4j.DocumentFactory getInstance()>();

        r0.<org.dom4j.io.DOMReader: org.dom4j.DocumentFactory factory> = $r1;

        $r2 = new org.dom4j.tree.NamespaceStack;

        $r1 = r0.<org.dom4j.io.DOMReader: org.dom4j.DocumentFactory factory>;

        specialinvoke $r2.<org.dom4j.tree.NamespaceStack: void <init>(org.dom4j.DocumentFactory)>($r1);

        r0.<org.dom4j.io.DOMReader: org.dom4j.tree.NamespaceStack namespaceStack> = $r2;

        return;
    }

    public void <init>(org.dom4j.DocumentFactory)
    {
        org.dom4j.tree.NamespaceStack $r2;
        org.dom4j.io.DOMReader r0;
        org.dom4j.DocumentFactory $r1;

        r0 := @this: org.dom4j.io.DOMReader;

        $r1 := @parameter0: org.dom4j.DocumentFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.dom4j.io.DOMReader: org.dom4j.DocumentFactory factory> = $r1;

        $r2 = new org.dom4j.tree.NamespaceStack;

        specialinvoke $r2.<org.dom4j.tree.NamespaceStack: void <init>(org.dom4j.DocumentFactory)>($r1);

        r0.<org.dom4j.io.DOMReader: org.dom4j.tree.NamespaceStack namespaceStack> = $r2;

        return;
    }

    private java.lang.String getPrefix(java.lang.String)
    {
        int $i0, $i1;
        java.lang.String $r1;
        org.dom4j.io.DOMReader r0;

        r0 := @this: org.dom4j.io.DOMReader;

        $r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(int,int)>(58, 5);

        $i1 = -1;

        if $i0 == $i1 goto label1;

        $i0 = $i0 + 1;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i0);

        return $r1;

     label1:
        return "";
    }

    protected void clearNamespaceStack()
    {
        org.dom4j.tree.NamespaceStack $r1;
        org.dom4j.Namespace $r2;
        org.dom4j.io.DOMReader r0;
        boolean $z0;

        r0 := @this: org.dom4j.io.DOMReader;

        $r1 = r0.<org.dom4j.io.DOMReader: org.dom4j.tree.NamespaceStack namespaceStack>;

        virtualinvoke $r1.<org.dom4j.tree.NamespaceStack: void clear()>();

        $r1 = r0.<org.dom4j.io.DOMReader: org.dom4j.tree.NamespaceStack namespaceStack>;

        $r2 = <org.dom4j.Namespace: org.dom4j.Namespace XML_NAMESPACE>;

        $z0 = virtualinvoke $r1.<org.dom4j.tree.NamespaceStack: boolean contains(org.dom4j.Namespace)>($r2);

        if $z0 != 0 goto label1;

        $r1 = r0.<org.dom4j.io.DOMReader: org.dom4j.tree.NamespaceStack namespaceStack>;

        $r2 = <org.dom4j.Namespace: org.dom4j.Namespace XML_NAMESPACE>;

        virtualinvoke $r1.<org.dom4j.tree.NamespaceStack: void push(org.dom4j.Namespace)>($r2);

     label1:
        return;
    }

    protected org.dom4j.Document createDocument()
    {
        org.dom4j.Document $r2;
        org.dom4j.io.DOMReader r0;
        org.dom4j.DocumentFactory $r1;

        r0 := @this: org.dom4j.io.DOMReader;

        $r1 = virtualinvoke r0.<org.dom4j.io.DOMReader: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r2 = virtualinvoke $r1.<org.dom4j.DocumentFactory: org.dom4j.Document createDocument()>();

        return $r2;
    }

    public org.dom4j.DocumentFactory getDocumentFactory()
    {
        org.dom4j.io.DOMReader r0;
        org.dom4j.DocumentFactory r1;

        r0 := @this: org.dom4j.io.DOMReader;

        r1 = r0.<org.dom4j.io.DOMReader: org.dom4j.DocumentFactory factory>;

        return r1;
    }

    protected org.dom4j.Namespace getNamespace(java.lang.String, java.lang.String)
    {
        org.dom4j.Namespace $r4;
        java.lang.String $r1, $r2;
        org.dom4j.io.DOMReader r0;
        org.dom4j.DocumentFactory $r3;

        r0 := @this: org.dom4j.io.DOMReader;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.dom4j.io.DOMReader: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r4 = virtualinvoke $r3.<org.dom4j.DocumentFactory: org.dom4j.Namespace createNamespace(java.lang.String,java.lang.String)>($r1, $r2);

        return $r4;
    }

    public org.dom4j.Document read(org.w3c.dom.Document)
    {
        org.dom4j.Document r2;
        org.w3c.dom.NodeList $r3;
        org.dom4j.io.DOMReader r0;
        org.w3c.dom.Document r1;
        org.w3c.dom.Node $r4;
        int i0, $i1;
        boolean $z0;

        r0 := @this: org.dom4j.io.DOMReader;

        r1 := @parameter0: org.w3c.dom.Document;

        $z0 = r1 instanceof org.dom4j.Document;

        if $z0 == 0 goto label1;

        r2 = (org.dom4j.Document) r1;

        return r2;

     label1:
        r2 = virtualinvoke r0.<org.dom4j.io.DOMReader: org.dom4j.Document createDocument()>();

        virtualinvoke r0.<org.dom4j.io.DOMReader: void clearNamespaceStack()>();

        $r3 = interfaceinvoke r1.<org.w3c.dom.Document: org.w3c.dom.NodeList getChildNodes()>();

        i0 = 0;

        $i1 = interfaceinvoke $r3.<org.w3c.dom.NodeList: int getLength()>();

     label2:
        if i0 >= $i1 goto label3;

        $r4 = interfaceinvoke $r3.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i0);

        virtualinvoke r0.<org.dom4j.io.DOMReader: void readTree(org.w3c.dom.Node,org.dom4j.Branch)>($r4, r2);

        i0 = i0 + 1;

        goto label2;

     label3:
        return r2;
    }

    protected void readElement(org.w3c.dom.Node, org.dom4j.Branch)
    {
        java.util.ArrayList r3;
        org.dom4j.tree.NamespaceStack $r4;
        org.w3c.dom.Node $r1, $r9;
        int $i0, $i1, i2;
        org.w3c.dom.NamedNodeMap $r8;
        java.lang.String $r5, r6, $r7;
        boolean $z0;
        org.w3c.dom.NodeList $r14;
        org.dom4j.Namespace $r12;
        org.dom4j.Branch $r2;
        org.dom4j.io.DOMReader r0;
        org.dom4j.QName $r10;
        org.dom4j.Element $r11;
        java.lang.Object $r13;

        r0 := @this: org.dom4j.io.DOMReader;

        $r1 := @parameter0: org.w3c.dom.Node;

        $r2 := @parameter1: org.dom4j.Branch;

        $r4 = r0.<org.dom4j.io.DOMReader: org.dom4j.tree.NamespaceStack namespaceStack>;

        $i0 = virtualinvoke $r4.<org.dom4j.tree.NamespaceStack: int size()>();

        $r5 = interfaceinvoke $r1.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        r6 = $r5;

        $r7 = interfaceinvoke $r1.<org.w3c.dom.Node: java.lang.String getPrefix()>();

        if $r7 != null goto label01;

     label01:
        $r8 = interfaceinvoke $r1.<org.w3c.dom.Node: org.w3c.dom.NamedNodeMap getAttributes()>();

        if $r8 == null goto label02;

        if $r5 != null goto label02;

        $r9 = interfaceinvoke $r8.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node getNamedItem(java.lang.String)>("xmlns");

        if $r9 == null goto label02;

        r6 = interfaceinvoke $r9.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

     label02:
        $r4 = r0.<org.dom4j.io.DOMReader: org.dom4j.tree.NamespaceStack namespaceStack>;

        $r5 = interfaceinvoke $r1.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $r7 = interfaceinvoke $r1.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r10 = virtualinvoke $r4.<org.dom4j.tree.NamespaceStack: org.dom4j.QName getQName(java.lang.String,java.lang.String,java.lang.String)>(r6, $r5, $r7);

        $r11 = interfaceinvoke $r2.<org.dom4j.Branch: org.dom4j.Element addElement(org.dom4j.QName)>($r10);

        if $r8 == null goto label08;

        $i1 = interfaceinvoke $r8.<org.w3c.dom.NamedNodeMap: int getLength()>();

        r3 = new java.util.ArrayList;

        specialinvoke r3.<java.util.ArrayList: void <init>(int)>($i1);

        i2 = 0;

     label03:
        if i2 >= $i1 goto label06;

        $r9 = interfaceinvoke $r8.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i2);

        r6 = interfaceinvoke $r9.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $z0 = virtualinvoke r6.<java.lang.String: boolean startsWith(java.lang.String)>("xmlns");

        if $z0 == 0 goto label05;

        r6 = specialinvoke r0.<org.dom4j.io.DOMReader: java.lang.String getPrefix(java.lang.String)>(r6);

        $r5 = interfaceinvoke $r9.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        $r4 = r0.<org.dom4j.io.DOMReader: org.dom4j.tree.NamespaceStack namespaceStack>;

        $r12 = virtualinvoke $r4.<org.dom4j.tree.NamespaceStack: org.dom4j.Namespace addNamespace(java.lang.String,java.lang.String)>(r6, $r5);

        interfaceinvoke $r11.<org.dom4j.Element: void add(org.dom4j.Namespace)>($r12);

     label04:
        i2 = i2 + 1;

        goto label03;

     label05:
        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r9);

        goto label04;

     label06:
        $i1 = interfaceinvoke r3.<java.util.List: int size()>();

        i2 = 0;

     label07:
        if i2 >= $i1 goto label08;

        $r13 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i2);

        $r9 = (org.w3c.dom.Node) $r13;

        $r4 = r0.<org.dom4j.io.DOMReader: org.dom4j.tree.NamespaceStack namespaceStack>;

        r6 = interfaceinvoke $r9.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $r5 = interfaceinvoke $r9.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $r7 = interfaceinvoke $r9.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r10 = virtualinvoke $r4.<org.dom4j.tree.NamespaceStack: org.dom4j.QName getQName(java.lang.String,java.lang.String,java.lang.String)>(r6, $r5, $r7);

        r6 = interfaceinvoke $r9.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        interfaceinvoke $r11.<org.dom4j.Element: org.dom4j.Element addAttribute(org.dom4j.QName,java.lang.String)>($r10, r6);

        i2 = i2 + 1;

        goto label07;

     label08:
        $r14 = interfaceinvoke $r1.<org.w3c.dom.Node: org.w3c.dom.NodeList getChildNodes()>();

        $i1 = 0;

        i2 = interfaceinvoke $r14.<org.w3c.dom.NodeList: int getLength()>();

     label09:
        if $i1 >= i2 goto label10;

        $r1 = interfaceinvoke $r14.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>($i1);

        virtualinvoke r0.<org.dom4j.io.DOMReader: void readTree(org.w3c.dom.Node,org.dom4j.Branch)>($r1, $r11);

        $i1 = $i1 + 1;

        goto label09;

     label10:
        $r4 = r0.<org.dom4j.io.DOMReader: org.dom4j.tree.NamespaceStack namespaceStack>;

        $i1 = virtualinvoke $r4.<org.dom4j.tree.NamespaceStack: int size()>();

        if $i1 <= $i0 goto label11;

        $r4 = r0.<org.dom4j.io.DOMReader: org.dom4j.tree.NamespaceStack namespaceStack>;

        virtualinvoke $r4.<org.dom4j.tree.NamespaceStack: org.dom4j.Namespace pop()>();

        goto label10;

     label11:
        return;
    }

    protected void readTree(org.w3c.dom.Node, org.dom4j.Branch)
    {
        org.dom4j.Document r4;
        short $s0;
        java.lang.StringBuffer $r6, $r12;
        org.w3c.dom.Node $r1, $r11;
        int $i1;
        java.lang.String $r7, $r8, $r10;
        boolean $z0;
        java.io.PrintStream $r5;
        org.dom4j.Branch r2;
        org.dom4j.io.DOMReader r0;
        org.w3c.dom.DocumentType r9;
        org.dom4j.Element r3;

        r0 := @this: org.dom4j.io.DOMReader;

        $r1 := @parameter0: org.w3c.dom.Node;

        r2 := @parameter1: org.dom4j.Branch;

        r3 = null;

        r4 = null;

        $z0 = r2 instanceof org.dom4j.Element;

        if $z0 == 0 goto label03;

        r3 = (org.dom4j.Element) r2;

     label01:
        $s0 = interfaceinvoke $r1.<org.w3c.dom.Node: short getNodeType()>();

        $i1 = (int) $s0;

        lookupswitch($i1)
        {
            case 1: goto label04;
            case 2: goto label02;
            case 3: goto label10;
            case 4: goto label11;
            case 5: goto label12;
            case 6: goto label14;
            case 7: goto label05;
            case 8: goto label07;
            case 9: goto label02;
            case 10: goto label09;
            default: goto label02;
        };

     label02:
        $r5 = <java.lang.System: java.io.PrintStream out>;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("WARNING: Unknown DOM node type: ");

        $s0 = interfaceinvoke $r1.<org.w3c.dom.Node: short getNodeType()>();

        $i1 = (int) $s0;

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r7);

        return;

     label03:
        r4 = (org.dom4j.Document) r2;

        goto label01;

     label04:
        virtualinvoke r0.<org.dom4j.io.DOMReader: void readElement(org.w3c.dom.Node,org.dom4j.Branch)>($r1, r2);

        return;

     label05:
        $z0 = r2 instanceof org.dom4j.Element;

        if $z0 == 0 goto label06;

        r3 = (org.dom4j.Element) r2;

        $r7 = interfaceinvoke $r1.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r8 = interfaceinvoke $r1.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        interfaceinvoke r3.<org.dom4j.Element: org.dom4j.Element addProcessingInstruction(java.lang.String,java.lang.String)>($r7, $r8);

        return;

     label06:
        r4 = (org.dom4j.Document) r2;

        $r7 = interfaceinvoke $r1.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r8 = interfaceinvoke $r1.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        interfaceinvoke r4.<org.dom4j.Document: org.dom4j.Document addProcessingInstruction(java.lang.String,java.lang.String)>($r7, $r8);

        return;

     label07:
        $z0 = r2 instanceof org.dom4j.Element;

        if $z0 == 0 goto label08;

        r3 = (org.dom4j.Element) r2;

        $r7 = interfaceinvoke $r1.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        interfaceinvoke r3.<org.dom4j.Element: org.dom4j.Element addComment(java.lang.String)>($r7);

        return;

     label08:
        r4 = (org.dom4j.Document) r2;

        $r7 = interfaceinvoke $r1.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        interfaceinvoke r4.<org.dom4j.Document: org.dom4j.Document addComment(java.lang.String)>($r7);

        return;

     label09:
        r9 = (org.w3c.dom.DocumentType) $r1;

        $r7 = interfaceinvoke r9.<org.w3c.dom.DocumentType: java.lang.String getName()>();

        $r8 = interfaceinvoke r9.<org.w3c.dom.DocumentType: java.lang.String getPublicId()>();

        $r10 = interfaceinvoke r9.<org.w3c.dom.DocumentType: java.lang.String getSystemId()>();

        interfaceinvoke r4.<org.dom4j.Document: org.dom4j.Document addDocType(java.lang.String,java.lang.String,java.lang.String)>($r7, $r8, $r10);

        return;

     label10:
        $r7 = interfaceinvoke $r1.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        interfaceinvoke r3.<org.dom4j.Element: org.dom4j.Element addText(java.lang.String)>($r7);

        return;

     label11:
        $r7 = interfaceinvoke $r1.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        interfaceinvoke r3.<org.dom4j.Element: org.dom4j.Element addCDATA(java.lang.String)>($r7);

        return;

     label12:
        $r11 = interfaceinvoke $r1.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        if $r11 == null goto label13;

        $r7 = interfaceinvoke $r1.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r8 = interfaceinvoke $r11.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        interfaceinvoke r3.<org.dom4j.Element: org.dom4j.Element addEntity(java.lang.String,java.lang.String)>($r7, $r8);

        return;

     label13:
        $r7 = interfaceinvoke $r1.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        interfaceinvoke r3.<org.dom4j.Element: org.dom4j.Element addEntity(java.lang.String,java.lang.String)>($r7, "");

        return;

     label14:
        $r7 = interfaceinvoke $r1.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r8 = interfaceinvoke $r1.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        interfaceinvoke r3.<org.dom4j.Element: org.dom4j.Element addEntity(java.lang.String,java.lang.String)>($r7, $r8);

        return;
    }

    public void setDocumentFactory(org.dom4j.DocumentFactory)
    {
        org.dom4j.tree.NamespaceStack $r2;
        org.dom4j.io.DOMReader r0;
        org.dom4j.DocumentFactory $r1;

        r0 := @this: org.dom4j.io.DOMReader;

        $r1 := @parameter0: org.dom4j.DocumentFactory;

        r0.<org.dom4j.io.DOMReader: org.dom4j.DocumentFactory factory> = $r1;

        $r2 = r0.<org.dom4j.io.DOMReader: org.dom4j.tree.NamespaceStack namespaceStack>;

        $r1 = r0.<org.dom4j.io.DOMReader: org.dom4j.DocumentFactory factory>;

        virtualinvoke $r2.<org.dom4j.tree.NamespaceStack: void setDocumentFactory(org.dom4j.DocumentFactory)>($r1);

        return;
    }
}
