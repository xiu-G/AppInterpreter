public abstract class org.mozilla.universalchardet.prober.sequence.SequenceModel extends java.lang.Object
{
    protected short[] charToOrderMap;
    protected java.lang.String charsetName;
    protected boolean keepEnglishLetter;
    protected byte[] precedenceMatrix;
    protected float typicalPositiveRatio;

    public void <init>(short[], byte[], float, boolean, java.lang.String)
    {
        org.mozilla.universalchardet.prober.sequence.SequenceModel r0;
        byte[] $r2;
        float $f0;
        short[] $r1;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: org.mozilla.universalchardet.prober.sequence.SequenceModel;

        $r1 := @parameter0: short[];

        $r2 := @parameter1: byte[];

        $f0 := @parameter2: float;

        $z0 := @parameter3: boolean;

        $r3 := @parameter4: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.mozilla.universalchardet.prober.sequence.SequenceModel: short[] charToOrderMap> = $r1;

        r0.<org.mozilla.universalchardet.prober.sequence.SequenceModel: byte[] precedenceMatrix> = $r2;

        r0.<org.mozilla.universalchardet.prober.sequence.SequenceModel: float typicalPositiveRatio> = $f0;

        r0.<org.mozilla.universalchardet.prober.sequence.SequenceModel: boolean keepEnglishLetter> = 0;

        r0.<org.mozilla.universalchardet.prober.sequence.SequenceModel: java.lang.String charsetName> = $r3;

        return;
    }

    public java.lang.String getCharsetName()
    {
        org.mozilla.universalchardet.prober.sequence.SequenceModel r0;
        java.lang.String r1;

        r0 := @this: org.mozilla.universalchardet.prober.sequence.SequenceModel;

        r1 = r0.<org.mozilla.universalchardet.prober.sequence.SequenceModel: java.lang.String charsetName>;

        return r1;
    }

    public boolean getKeepEnglishLetter()
    {
        org.mozilla.universalchardet.prober.sequence.SequenceModel r0;
        boolean z0;

        r0 := @this: org.mozilla.universalchardet.prober.sequence.SequenceModel;

        z0 = r0.<org.mozilla.universalchardet.prober.sequence.SequenceModel: boolean keepEnglishLetter>;

        return z0;
    }

    public short getOrder(byte)
    {
        org.mozilla.universalchardet.prober.sequence.SequenceModel r0;
        short $s1;
        byte $b0;
        int $i2;
        short[] $r1;

        r0 := @this: org.mozilla.universalchardet.prober.sequence.SequenceModel;

        $b0 := @parameter0: byte;

        $s1 = (short) $b0;

        $s1 = $s1 & 255;

        $r1 = r0.<org.mozilla.universalchardet.prober.sequence.SequenceModel: short[] charToOrderMap>;

        $i2 = (int) $s1;

        $s1 = $r1[$i2];

        return $s1;
    }

    public byte getPrecedence(int)
    {
        org.mozilla.universalchardet.prober.sequence.SequenceModel r0;
        byte[] $r1;
        byte $b1;
        int $i0;

        r0 := @this: org.mozilla.universalchardet.prober.sequence.SequenceModel;

        $i0 := @parameter0: int;

        $r1 = r0.<org.mozilla.universalchardet.prober.sequence.SequenceModel: byte[] precedenceMatrix>;

        $b1 = $r1[$i0];

        return $b1;
    }

    public float getTypicalPositiveRatio()
    {
        org.mozilla.universalchardet.prober.sequence.SequenceModel r0;
        float f0;

        r0 := @this: org.mozilla.universalchardet.prober.sequence.SequenceModel;

        f0 = r0.<org.mozilla.universalchardet.prober.sequence.SequenceModel: float typicalPositiveRatio>;

        return f0;
    }
}
