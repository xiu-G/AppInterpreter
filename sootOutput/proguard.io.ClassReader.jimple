public class proguard.io.ClassReader extends java.lang.Object implements proguard.io.DataEntryReader
{
    private final proguard.classfile.visitor.ClassVisitor classVisitor;
    private final boolean isLibrary;
    private final boolean skipNonPublicLibraryClassMembers;
    private final boolean skipNonPublicLibraryClasses;
    private final proguard.classfile.util.WarningPrinter warningPrinter;

    public void <init>(boolean, boolean, boolean, proguard.classfile.util.WarningPrinter, proguard.classfile.visitor.ClassVisitor)
    {
        proguard.classfile.util.WarningPrinter $r1;
        proguard.classfile.visitor.ClassVisitor $r2;
        proguard.io.ClassReader r0;
        boolean $z0, $z1, $z2;

        r0 := @this: proguard.io.ClassReader;

        $z0 := @parameter0: boolean;

        $z1 := @parameter1: boolean;

        $z2 := @parameter2: boolean;

        $r1 := @parameter3: proguard.classfile.util.WarningPrinter;

        $r2 := @parameter4: proguard.classfile.visitor.ClassVisitor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<proguard.io.ClassReader: boolean isLibrary> = $z0;

        r0.<proguard.io.ClassReader: boolean skipNonPublicLibraryClasses> = $z1;

        r0.<proguard.io.ClassReader: boolean skipNonPublicLibraryClassMembers> = $z2;

        r0.<proguard.io.ClassReader: proguard.classfile.util.WarningPrinter warningPrinter> = $r1;

        r0.<proguard.io.ClassReader: proguard.classfile.visitor.ClassVisitor classVisitor> = $r2;

        return;
    }

    public void read(proguard.io.DataEntry) throws java.io.IOException
    {
        java.io.DataInputStream $r3, $r14;
        proguard.classfile.visitor.ClassVisitor $r11;
        proguard.classfile.ProgramClass $r18;
        proguard.classfile.LibraryClass $r15;
        proguard.classfile.Clazz $r4;
        java.lang.StringBuffer $r8, $r17;
        java.lang.String $r6, $r7, $r9;
        proguard.io.ClassReader r0;
        boolean $z0, $z1;
        proguard.classfile.io.ProgramClassReader $r12, $r19;
        proguard.classfile.util.WarningPrinter $r10;
        char $c0;
        java.io.IOException $r20;
        java.lang.Exception $r13;
        proguard.classfile.io.LibraryClassReader $r5, $r16;
        proguard.io.DataEntry $r1;
        java.io.InputStream $r2;

        r0 := @this: proguard.io.ClassReader;

        $r1 := @parameter0: proguard.io.DataEntry;

     label01:
        $r2 = interfaceinvoke $r1.<proguard.io.DataEntry: java.io.InputStream getInputStream()>();

     label02:
        $r14 = new java.io.DataInputStream;

        $r3 = $r14;

     label03:
        specialinvoke $r14.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r2);

        $z0 = r0.<proguard.io.ClassReader: boolean isLibrary>;

     label04:
        if $z0 == 0 goto label24;

        $r15 = new proguard.classfile.LibraryClass;

        $r4 = $r15;

     label05:
        specialinvoke $r15.<proguard.classfile.LibraryClass: void <init>()>();

     label06:
        $r16 = new proguard.classfile.io.LibraryClassReader;

        $r5 = $r16;

     label07:
        $z0 = r0.<proguard.io.ClassReader: boolean skipNonPublicLibraryClasses>;

        $z1 = r0.<proguard.io.ClassReader: boolean skipNonPublicLibraryClassMembers>;

        specialinvoke $r16.<proguard.classfile.io.LibraryClassReader: void <init>(java.io.DataInput,boolean,boolean)>($r3, $z0, $z1);

        interfaceinvoke $r4.<proguard.classfile.Clazz: void accept(proguard.classfile.visitor.ClassVisitor)>($r5);

     label08:
        $r6 = interfaceinvoke $r4.<proguard.classfile.Clazz: java.lang.String getName()>();

     label09:
        if $r6 == null goto label22;

     label10:
        $r7 = interfaceinvoke $r1.<proguard.io.DataEntry: java.lang.String getName()>();

     label11:
        $c0 = <java.io.File: char pathSeparatorChar>;

     label12:
        $r7 = virtualinvoke $r7.<java.lang.String: java.lang.String replace(char,char)>($c0, 47);

     label13:
        $r17 = new java.lang.StringBuffer;

        $r8 = $r17;

     label14:
        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".class");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r9);

     label15:
        if $z0 != 0 goto label21;

     label16:
        $r10 = r0.<proguard.io.ClassReader: proguard.classfile.util.WarningPrinter warningPrinter>;

     label17:
        if $r10 == null goto label21;

     label18:
        $r10 = r0.<proguard.io.ClassReader: proguard.classfile.util.WarningPrinter warningPrinter>;

     label19:
        $r17 = new java.lang.StringBuffer;

        $r8 = $r17;

     label20:
        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Warning: class [");

        $r7 = interfaceinvoke $r1.<proguard.io.DataEntry: java.lang.String getName()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] unexpectedly contains class [");

        $r7 = staticinvoke <proguard.classfile.util.ClassUtil: java.lang.String externalClassName(java.lang.String)>($r6);

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r7 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r10.<proguard.classfile.util.WarningPrinter: void print(java.lang.String,java.lang.String)>($r6, $r7);

     label21:
        $r11 = r0.<proguard.io.ClassReader: proguard.classfile.visitor.ClassVisitor classVisitor>;

        interfaceinvoke $r4.<proguard.classfile.Clazz: void accept(proguard.classfile.visitor.ClassVisitor)>($r11);

     label22:
        interfaceinvoke $r1.<proguard.io.DataEntry: void closeInputStream()>();

     label23:
        return;

     label24:
        $r18 = new proguard.classfile.ProgramClass;

        $r4 = $r18;

     label25:
        specialinvoke $r18.<proguard.classfile.ProgramClass: void <init>()>();

     label26:
        $r19 = new proguard.classfile.io.ProgramClassReader;

        $r12 = $r19;

     label27:
        specialinvoke $r19.<proguard.classfile.io.ProgramClassReader: void <init>(java.io.DataInput)>($r3);

        interfaceinvoke $r4.<proguard.classfile.Clazz: void accept(proguard.classfile.visitor.ClassVisitor)>($r12);

     label28:
        goto label08;

     label29:
        $r13 := @caughtexception;

        $r20 = new java.io.IOException;

        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Can\'t process class [");

        $r6 = interfaceinvoke $r1.<proguard.io.DataEntry: java.lang.String getName()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] (");

        $r6 = virtualinvoke $r13.<java.lang.Exception: java.lang.String getMessage()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r6 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r20.<java.io.IOException: void <init>(java.lang.String)>($r6);

        throw $r20;

        catch java.lang.Exception from label01 to label02 with label29;
        catch java.lang.Exception from label03 to label04 with label29;
        catch java.lang.Exception from label05 to label06 with label29;
        catch java.lang.Exception from label07 to label09 with label29;
        catch java.lang.Exception from label10 to label11 with label29;
        catch java.lang.Exception from label12 to label13 with label29;
        catch java.lang.Exception from label14 to label15 with label29;
        catch java.lang.Exception from label16 to label17 with label29;
        catch java.lang.Exception from label18 to label19 with label29;
        catch java.lang.Exception from label20 to label23 with label29;
        catch java.lang.Exception from label25 to label26 with label29;
        catch java.lang.Exception from label27 to label28 with label29;
    }
}
