public class com.nostra13.universalimageloader.core.decode.BaseImageDecoder extends java.lang.Object implements com.nostra13.universalimageloader.core.decode.ImageDecoder
{
    protected static final java.lang.String ERROR_CANT_DECODE_IMAGE;
    protected static final java.lang.String LOG_FLIP_IMAGE;
    protected static final java.lang.String LOG_ROTATE_IMAGE;
    protected static final java.lang.String LOG_SCALE_IMAGE;
    protected static final java.lang.String LOG_SUBSAMPLE_IMAGE;
    protected final boolean loggingEnabled;

    public void <init>(boolean)
    {
        com.nostra13.universalimageloader.core.decode.BaseImageDecoder r0;
        boolean $z0;

        r0 := @this: com.nostra13.universalimageloader.core.decode.BaseImageDecoder;

        $z0 := @parameter0: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.nostra13.universalimageloader.core.decode.BaseImageDecoder: boolean loggingEnabled> = $z0;

        return;
    }

    private boolean canDefineExifParams(java.lang.String, java.lang.String)
    {
        com.nostra13.universalimageloader.core.decode.BaseImageDecoder r0;
        java.lang.String $r1, $r2, $r4;
        com.nostra13.universalimageloader.core.download.ImageDownloader$Scheme $r3, $r5;
        boolean $z0;

        r0 := @this: com.nostra13.universalimageloader.core.decode.BaseImageDecoder;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r4 = "image/jpeg";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r2);

        if $z0 == 0 goto label1;

        $r5 = staticinvoke <com.nostra13.universalimageloader.core.download.ImageDownloader$Scheme: com.nostra13.universalimageloader.core.download.ImageDownloader$Scheme ofUri(java.lang.String)>($r1);

        $r3 = <com.nostra13.universalimageloader.core.download.ImageDownloader$Scheme: com.nostra13.universalimageloader.core.download.ImageDownloader$Scheme FILE>;

        if $r5 != $r3 goto label1;

        return 1;

     label1:
        return 0;
    }

    protected android.graphics.Bitmap considerExactScaleAndOrientatiton(android.graphics.Bitmap, com.nostra13.universalimageloader.core.decode.ImageDecodingInfo, int, boolean)
    {
        java.lang.Float $r10;
        java.lang.Object[] $r9;
        com.nostra13.universalimageloader.core.assist.ImageSize $r6, $r7;
        java.lang.Integer $r12;
        com.nostra13.universalimageloader.core.assist.ViewScaleType $r8;
        int $i0, $i1, $i2;
        com.nostra13.universalimageloader.core.decode.ImageDecodingInfo $r2;
        java.lang.String $r11;
        android.graphics.Matrix $r3;
        boolean $z0, $z1;
        com.nostra13.universalimageloader.core.decode.BaseImageDecoder r0;
        android.graphics.Bitmap $r1, $r13;
        float $f0;
        com.nostra13.universalimageloader.core.assist.ImageScaleType $r4, $r5;

        r0 := @this: com.nostra13.universalimageloader.core.decode.BaseImageDecoder;

        $r1 := @parameter0: android.graphics.Bitmap;

        $r2 := @parameter1: com.nostra13.universalimageloader.core.decode.ImageDecodingInfo;

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $r3 = new android.graphics.Matrix;

        specialinvoke $r3.<android.graphics.Matrix: void <init>()>();

        $r5 = virtualinvoke $r2.<com.nostra13.universalimageloader.core.decode.ImageDecodingInfo: com.nostra13.universalimageloader.core.assist.ImageScaleType getImageScaleType()>();

        $r4 = <com.nostra13.universalimageloader.core.assist.ImageScaleType: com.nostra13.universalimageloader.core.assist.ImageScaleType EXACTLY>;

        if $r5 == $r4 goto label1;

        $r4 = <com.nostra13.universalimageloader.core.assist.ImageScaleType: com.nostra13.universalimageloader.core.assist.ImageScaleType EXACTLY_STRETCHED>;

        if $r5 != $r4 goto label3;

     label1:
        $r6 = new com.nostra13.universalimageloader.core.assist.ImageSize;

        $i1 = virtualinvoke $r1.<android.graphics.Bitmap: int getWidth()>();

        $i2 = virtualinvoke $r1.<android.graphics.Bitmap: int getHeight()>();

        specialinvoke $r6.<com.nostra13.universalimageloader.core.assist.ImageSize: void <init>(int,int,int)>($i1, $i2, $i0);

        $r7 = virtualinvoke $r2.<com.nostra13.universalimageloader.core.decode.ImageDecodingInfo: com.nostra13.universalimageloader.core.assist.ImageSize getTargetSize()>();

        $r8 = virtualinvoke $r2.<com.nostra13.universalimageloader.core.decode.ImageDecodingInfo: com.nostra13.universalimageloader.core.assist.ViewScaleType getViewScaleType()>();

        $r4 = <com.nostra13.universalimageloader.core.assist.ImageScaleType: com.nostra13.universalimageloader.core.assist.ImageScaleType EXACTLY_STRETCHED>;

        if $r5 != $r4 goto label6;

        $z1 = 1;

     label2:
        $f0 = staticinvoke <com.nostra13.universalimageloader.utils.ImageSizeUtils: float computeImageScale(com.nostra13.universalimageloader.core.assist.ImageSize,com.nostra13.universalimageloader.core.assist.ImageSize,com.nostra13.universalimageloader.core.assist.ViewScaleType,boolean)>($r6, $r7, $r8, $z1);

        $i1 = staticinvoke <java.lang.Float: int compare(float,float)>($f0, 1.0F);

        if $i1 == 0 goto label3;

        virtualinvoke $r3.<android.graphics.Matrix: void setScale(float,float)>($f0, $f0);

        $z1 = r0.<com.nostra13.universalimageloader.core.decode.BaseImageDecoder: boolean loggingEnabled>;

        if $z1 == 0 goto label3;

        $r9 = newarray (java.lang.Object)[4];

        $r9[0] = $r6;

        $r6 = virtualinvoke $r6.<com.nostra13.universalimageloader.core.assist.ImageSize: com.nostra13.universalimageloader.core.assist.ImageSize scale(float)>($f0);

        $r9[1] = $r6;

        $r10 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        $r9[2] = $r10;

        $r11 = virtualinvoke $r2.<com.nostra13.universalimageloader.core.decode.ImageDecodingInfo: java.lang.String getImageKey()>();

        $r9[3] = $r11;

        staticinvoke <com.nostra13.universalimageloader.utils.L: void d(java.lang.String,java.lang.Object[])>("Scale subsampled image (%1$s) to %2$s (scale = %3$.5f) [%4$s]", $r9);

     label3:
        if $z0 == 0 goto label4;

        virtualinvoke $r3.<android.graphics.Matrix: boolean postScale(float,float)>(-1.0F, 1.0F);

        $z0 = r0.<com.nostra13.universalimageloader.core.decode.BaseImageDecoder: boolean loggingEnabled>;

        if $z0 == 0 goto label4;

        $r9 = newarray (java.lang.Object)[1];

        $r11 = virtualinvoke $r2.<com.nostra13.universalimageloader.core.decode.ImageDecodingInfo: java.lang.String getImageKey()>();

        $r9[0] = $r11;

        staticinvoke <com.nostra13.universalimageloader.utils.L: void d(java.lang.String,java.lang.Object[])>("Flip image horizontally [%s]", $r9);

     label4:
        if $i0 == 0 goto label5;

        $f0 = (float) $i0;

        virtualinvoke $r3.<android.graphics.Matrix: boolean postRotate(float)>($f0);

        $z0 = r0.<com.nostra13.universalimageloader.core.decode.BaseImageDecoder: boolean loggingEnabled>;

        if $z0 == 0 goto label5;

        $r9 = newarray (java.lang.Object)[2];

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r9[0] = $r12;

        $r11 = virtualinvoke $r2.<com.nostra13.universalimageloader.core.decode.ImageDecodingInfo: java.lang.String getImageKey()>();

        $r9[1] = $r11;

        staticinvoke <com.nostra13.universalimageloader.utils.L: void d(java.lang.String,java.lang.Object[])>("Rotate image on %1$d\u00b0 [%2$s]", $r9);

     label5:
        $i0 = virtualinvoke $r1.<android.graphics.Bitmap: int getWidth()>();

        $i1 = virtualinvoke $r1.<android.graphics.Bitmap: int getHeight()>();

        $r13 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int,android.graphics.Matrix,boolean)>($r1, 0, 0, $i0, $i1, $r3, 1);

        if $r13 == $r1 goto label7;

        virtualinvoke $r1.<android.graphics.Bitmap: void recycle()>();

        return $r13;

     label6:
        $z1 = 0;

        goto label2;

     label7:
        return $r13;
    }

    public android.graphics.Bitmap decode(com.nostra13.universalimageloader.core.decode.ImageDecodingInfo)
    {
        java.lang.Throwable $r10;
        java.lang.Object[] $r8;
        com.nostra13.universalimageloader.core.decode.BaseImageDecoder r0;
        com.nostra13.universalimageloader.core.assist.ImageSize $r5;
        com.nostra13.universalimageloader.core.decode.BaseImageDecoder$ImageFileInfo $r4;
        android.graphics.Bitmap $r7;
        int $i0;
        com.nostra13.universalimageloader.core.decode.ImageDecodingInfo $r1;
        java.lang.String $r9;
        com.nostra13.universalimageloader.core.decode.BaseImageDecoder$ExifInfo $r11;
        java.io.InputStream $r2, $r3;
        android.graphics.BitmapFactory$Options $r6;
        boolean $z0;

        r0 := @this: com.nostra13.universalimageloader.core.decode.BaseImageDecoder;

        $r1 := @parameter0: com.nostra13.universalimageloader.core.decode.ImageDecodingInfo;

        $r2 = virtualinvoke r0.<com.nostra13.universalimageloader.core.decode.BaseImageDecoder: java.io.InputStream getImageStream(com.nostra13.universalimageloader.core.decode.ImageDecodingInfo)>($r1);

        $r3 = $r2;

     label1:
        $r4 = virtualinvoke r0.<com.nostra13.universalimageloader.core.decode.BaseImageDecoder: com.nostra13.universalimageloader.core.decode.BaseImageDecoder$ImageFileInfo defineImageSizeAndRotation(java.io.InputStream,com.nostra13.universalimageloader.core.decode.ImageDecodingInfo)>($r2, $r1);

        $r2 = virtualinvoke r0.<com.nostra13.universalimageloader.core.decode.BaseImageDecoder: java.io.InputStream resetStream(java.io.InputStream,com.nostra13.universalimageloader.core.decode.ImageDecodingInfo)>($r2, $r1);

     label2:
        $r3 = $r2;

     label3:
        $r5 = $r4.<com.nostra13.universalimageloader.core.decode.BaseImageDecoder$ImageFileInfo: com.nostra13.universalimageloader.core.assist.ImageSize imageSize>;

        $r6 = virtualinvoke r0.<com.nostra13.universalimageloader.core.decode.BaseImageDecoder: android.graphics.BitmapFactory$Options prepareDecodingOptions(com.nostra13.universalimageloader.core.assist.ImageSize,com.nostra13.universalimageloader.core.decode.ImageDecodingInfo)>($r5, $r1);

        $r7 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>($r2, null, $r6);

     label4:
        staticinvoke <com.nostra13.universalimageloader.utils.IoUtils: void closeSilently(java.io.Closeable)>($r2);

        if $r7 != null goto label6;

        $r8 = newarray (java.lang.Object)[1];

        $r9 = virtualinvoke $r1.<com.nostra13.universalimageloader.core.decode.ImageDecodingInfo: java.lang.String getImageKey()>();

        $r8[0] = $r9;

        staticinvoke <com.nostra13.universalimageloader.utils.L: void e(java.lang.String,java.lang.Object[])>("Image can\'t be decoded [%s]", $r8);

        return $r7;

     label5:
        $r10 := @caughtexception;

        staticinvoke <com.nostra13.universalimageloader.utils.IoUtils: void closeSilently(java.io.Closeable)>($r3);

        throw $r10;

     label6:
        $r11 = $r4.<com.nostra13.universalimageloader.core.decode.BaseImageDecoder$ImageFileInfo: com.nostra13.universalimageloader.core.decode.BaseImageDecoder$ExifInfo exif>;

        $i0 = $r11.<com.nostra13.universalimageloader.core.decode.BaseImageDecoder$ExifInfo: int rotation>;

        $r11 = $r4.<com.nostra13.universalimageloader.core.decode.BaseImageDecoder$ImageFileInfo: com.nostra13.universalimageloader.core.decode.BaseImageDecoder$ExifInfo exif>;

        $z0 = $r11.<com.nostra13.universalimageloader.core.decode.BaseImageDecoder$ExifInfo: boolean flipHorizontal>;

        $r7 = virtualinvoke r0.<com.nostra13.universalimageloader.core.decode.BaseImageDecoder: android.graphics.Bitmap considerExactScaleAndOrientatiton(android.graphics.Bitmap,com.nostra13.universalimageloader.core.decode.ImageDecodingInfo,int,boolean)>($r7, $r1, $i0, $z0);

        return $r7;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    protected com.nostra13.universalimageloader.core.decode.BaseImageDecoder$ExifInfo defineExifOrientation(java.lang.String)
    {
        java.lang.Throwable $r6;
        java.lang.Object[] $r7;
        com.nostra13.universalimageloader.core.decode.BaseImageDecoder r0;
        android.media.ExifInterface $r2;
        com.nostra13.universalimageloader.core.download.ImageDownloader$Scheme $r3;
        short $s0;
        int $i1;
        java.lang.String $r1, $r4;
        com.nostra13.universalimageloader.core.decode.BaseImageDecoder$ExifInfo $r5;
        boolean $z0;

        r0 := @this: com.nostra13.universalimageloader.core.decode.BaseImageDecoder;

        $r1 := @parameter0: java.lang.String;

        $s0 = 0;

        $z0 = 1;

        $r2 = new android.media.ExifInterface;

        $r3 = <com.nostra13.universalimageloader.core.download.ImageDownloader$Scheme: com.nostra13.universalimageloader.core.download.ImageDownloader$Scheme FILE>;

     label01:
        $r4 = virtualinvoke $r3.<com.nostra13.universalimageloader.core.download.ImageDownloader$Scheme: java.lang.String crop(java.lang.String)>($r1);

        specialinvoke $r2.<android.media.ExifInterface: void <init>(java.lang.String)>($r4);

        $i1 = virtualinvoke $r2.<android.media.ExifInterface: int getAttributeInt(java.lang.String,int)>("Orientation", 1);

     label02:
        lookupswitch($i1)
        {
            case 1: goto label03;
            case 2: goto label04;
            case 3: goto label07;
            case 4: goto label08;
            case 5: goto label10;
            case 6: goto label05;
            case 7: goto label06;
            case 8: goto label09;
            default: goto label03;
        };

     label03:
        $z0 = 0;

     label04:
        $r5 = new com.nostra13.universalimageloader.core.decode.BaseImageDecoder$ExifInfo;

        specialinvoke $r5.<com.nostra13.universalimageloader.core.decode.BaseImageDecoder$ExifInfo: void <init>(int,boolean)>($s0, $z0);

        return $r5;

     label05:
        $z0 = 0;

     label06:
        $s0 = 90;

        goto label04;

     label07:
        $z0 = 0;

     label08:
        $s0 = 180;

        goto label04;

     label09:
        $z0 = 0;

     label10:
        $s0 = 270;

        goto label04;

     label11:
        $r6 := @caughtexception;

        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = $r1;

        staticinvoke <com.nostra13.universalimageloader.utils.L: void w(java.lang.String,java.lang.Object[])>("Can\'t read EXIF tags from file [%s]", $r7);

        goto label03;

        catch java.io.IOException from label01 to label02 with label11;
    }

    protected com.nostra13.universalimageloader.core.decode.BaseImageDecoder$ImageFileInfo defineImageSizeAndRotation(java.io.InputStream, com.nostra13.universalimageloader.core.decode.ImageDecodingInfo)
    {
        com.nostra13.universalimageloader.core.decode.BaseImageDecoder r0;
        com.nostra13.universalimageloader.core.assist.ImageSize $r3;
        com.nostra13.universalimageloader.core.decode.BaseImageDecoder$ImageFileInfo $r8;
        int $i0, $i1, $i2;
        com.nostra13.universalimageloader.core.decode.ImageDecodingInfo $r2;
        java.lang.String $r5, $r6;
        com.nostra13.universalimageloader.core.decode.BaseImageDecoder$ExifInfo $r7;
        java.io.InputStream $r1;
        android.graphics.BitmapFactory$Options $r4;
        boolean $z0;

        r0 := @this: com.nostra13.universalimageloader.core.decode.BaseImageDecoder;

        $r1 := @parameter0: java.io.InputStream;

        $r2 := @parameter1: com.nostra13.universalimageloader.core.decode.ImageDecodingInfo;

        $r4 = new android.graphics.BitmapFactory$Options;

        specialinvoke $r4.<android.graphics.BitmapFactory$Options: void <init>()>();

        $r4.<android.graphics.BitmapFactory$Options: boolean inJustDecodeBounds> = 1;

        staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>($r1, null, $r4);

        $r5 = virtualinvoke $r2.<com.nostra13.universalimageloader.core.decode.ImageDecodingInfo: java.lang.String getImageUri()>();

        $z0 = virtualinvoke $r2.<com.nostra13.universalimageloader.core.decode.ImageDecodingInfo: boolean shouldConsiderExifParams()>();

        if $z0 == 0 goto label2;

        $r6 = $r4.<android.graphics.BitmapFactory$Options: java.lang.String outMimeType>;

        $z0 = specialinvoke r0.<com.nostra13.universalimageloader.core.decode.BaseImageDecoder: boolean canDefineExifParams(java.lang.String,java.lang.String)>($r5, $r6);

        if $z0 == 0 goto label2;

        $r7 = virtualinvoke r0.<com.nostra13.universalimageloader.core.decode.BaseImageDecoder: com.nostra13.universalimageloader.core.decode.BaseImageDecoder$ExifInfo defineExifOrientation(java.lang.String)>($r5);

     label1:
        $r8 = new com.nostra13.universalimageloader.core.decode.BaseImageDecoder$ImageFileInfo;

        $r3 = new com.nostra13.universalimageloader.core.assist.ImageSize;

        $i0 = $r4.<android.graphics.BitmapFactory$Options: int outWidth>;

        $i2 = $r4.<android.graphics.BitmapFactory$Options: int outHeight>;

        $i1 = $r7.<com.nostra13.universalimageloader.core.decode.BaseImageDecoder$ExifInfo: int rotation>;

        specialinvoke $r3.<com.nostra13.universalimageloader.core.assist.ImageSize: void <init>(int,int,int)>($i0, $i2, $i1);

        specialinvoke $r8.<com.nostra13.universalimageloader.core.decode.BaseImageDecoder$ImageFileInfo: void <init>(com.nostra13.universalimageloader.core.assist.ImageSize,com.nostra13.universalimageloader.core.decode.BaseImageDecoder$ExifInfo)>($r3, $r7);

        return $r8;

     label2:
        $r7 = new com.nostra13.universalimageloader.core.decode.BaseImageDecoder$ExifInfo;

        specialinvoke $r7.<com.nostra13.universalimageloader.core.decode.BaseImageDecoder$ExifInfo: void <init>()>();

        goto label1;
    }

    protected java.io.InputStream getImageStream(com.nostra13.universalimageloader.core.decode.ImageDecodingInfo)
    {
        com.nostra13.universalimageloader.core.decode.BaseImageDecoder r0;
        com.nostra13.universalimageloader.core.decode.ImageDecodingInfo $r1;
        java.lang.Object $r4;
        java.lang.String $r3;
        com.nostra13.universalimageloader.core.download.ImageDownloader $r2;
        java.io.InputStream $r5;

        r0 := @this: com.nostra13.universalimageloader.core.decode.BaseImageDecoder;

        $r1 := @parameter0: com.nostra13.universalimageloader.core.decode.ImageDecodingInfo;

        $r2 = virtualinvoke $r1.<com.nostra13.universalimageloader.core.decode.ImageDecodingInfo: com.nostra13.universalimageloader.core.download.ImageDownloader getDownloader()>();

        $r3 = virtualinvoke $r1.<com.nostra13.universalimageloader.core.decode.ImageDecodingInfo: java.lang.String getImageUri()>();

        $r4 = virtualinvoke $r1.<com.nostra13.universalimageloader.core.decode.ImageDecodingInfo: java.lang.Object getExtraForDownloader()>();

        $r5 = interfaceinvoke $r2.<com.nostra13.universalimageloader.core.download.ImageDownloader: java.io.InputStream getStream(java.lang.String,java.lang.Object)>($r3, $r4);

        return $r5;
    }

    protected android.graphics.BitmapFactory$Options prepareDecodingOptions(com.nostra13.universalimageloader.core.assist.ImageSize, com.nostra13.universalimageloader.core.decode.ImageDecodingInfo)
    {
        java.lang.Object[] $r5;
        com.nostra13.universalimageloader.core.decode.BaseImageDecoder r0;
        com.nostra13.universalimageloader.core.assist.ImageSize $r1, $r9;
        java.lang.Integer $r6;
        com.nostra13.universalimageloader.core.assist.ViewScaleType $r10;
        int $i0;
        com.nostra13.universalimageloader.core.decode.ImageDecodingInfo $r2;
        java.lang.String $r7;
        com.nostra13.universalimageloader.core.assist.ImageScaleType $r3, $r4;
        boolean $z0;
        android.graphics.BitmapFactory$Options $r8;

        r0 := @this: com.nostra13.universalimageloader.core.decode.BaseImageDecoder;

        $r1 := @parameter0: com.nostra13.universalimageloader.core.assist.ImageSize;

        $r2 := @parameter1: com.nostra13.universalimageloader.core.decode.ImageDecodingInfo;

        $r3 = virtualinvoke $r2.<com.nostra13.universalimageloader.core.decode.ImageDecodingInfo: com.nostra13.universalimageloader.core.assist.ImageScaleType getImageScaleType()>();

        $r4 = <com.nostra13.universalimageloader.core.assist.ImageScaleType: com.nostra13.universalimageloader.core.assist.ImageScaleType NONE>;

        if $r3 != $r4 goto label3;

        $i0 = 1;

     label1:
        if $i0 <= 1 goto label2;

        $z0 = r0.<com.nostra13.universalimageloader.core.decode.BaseImageDecoder: boolean loggingEnabled>;

        if $z0 == 0 goto label2;

        $r5 = newarray (java.lang.Object)[4];

        $r5[0] = $r1;

        $r1 = virtualinvoke $r1.<com.nostra13.universalimageloader.core.assist.ImageSize: com.nostra13.universalimageloader.core.assist.ImageSize scaleDown(int)>($i0);

        $r5[1] = $r1;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r5[2] = $r6;

        $r7 = virtualinvoke $r2.<com.nostra13.universalimageloader.core.decode.ImageDecodingInfo: java.lang.String getImageKey()>();

        $r5[3] = $r7;

        staticinvoke <com.nostra13.universalimageloader.utils.L: void d(java.lang.String,java.lang.Object[])>("Subsample original image (%1$s) to %2$s (scale = %3$d) [%4$s]", $r5);

     label2:
        $r8 = virtualinvoke $r2.<com.nostra13.universalimageloader.core.decode.ImageDecodingInfo: android.graphics.BitmapFactory$Options getDecodingOptions()>();

        $r8.<android.graphics.BitmapFactory$Options: int inSampleSize> = $i0;

        return $r8;

     label3:
        $r4 = <com.nostra13.universalimageloader.core.assist.ImageScaleType: com.nostra13.universalimageloader.core.assist.ImageScaleType NONE_SAFE>;

        if $r3 != $r4 goto label4;

        $i0 = staticinvoke <com.nostra13.universalimageloader.utils.ImageSizeUtils: int computeMinImageSampleSize(com.nostra13.universalimageloader.core.assist.ImageSize)>($r1);

        goto label1;

     label4:
        $r9 = virtualinvoke $r2.<com.nostra13.universalimageloader.core.decode.ImageDecodingInfo: com.nostra13.universalimageloader.core.assist.ImageSize getTargetSize()>();

        $r4 = <com.nostra13.universalimageloader.core.assist.ImageScaleType: com.nostra13.universalimageloader.core.assist.ImageScaleType IN_SAMPLE_POWER_OF_2>;

        if $r3 != $r4 goto label6;

        $z0 = 1;

     label5:
        $r10 = virtualinvoke $r2.<com.nostra13.universalimageloader.core.decode.ImageDecodingInfo: com.nostra13.universalimageloader.core.assist.ViewScaleType getViewScaleType()>();

        $i0 = staticinvoke <com.nostra13.universalimageloader.utils.ImageSizeUtils: int computeImageSampleSize(com.nostra13.universalimageloader.core.assist.ImageSize,com.nostra13.universalimageloader.core.assist.ImageSize,com.nostra13.universalimageloader.core.assist.ViewScaleType,boolean)>($r1, $r9, $r10, $z0);

        goto label1;

     label6:
        $z0 = 0;

        goto label5;
    }

    protected java.io.InputStream resetStream(java.io.InputStream, com.nostra13.universalimageloader.core.decode.ImageDecodingInfo)
    {
        java.lang.Throwable $r2;
        com.nostra13.universalimageloader.core.decode.BaseImageDecoder r0;
        com.nostra13.universalimageloader.core.decode.ImageDecodingInfo $r1;
        java.io.InputStream $r3;

        r0 := @this: com.nostra13.universalimageloader.core.decode.BaseImageDecoder;

        $r3 := @parameter0: java.io.InputStream;

        $r1 := @parameter1: com.nostra13.universalimageloader.core.decode.ImageDecodingInfo;

     label1:
        virtualinvoke $r3.<java.io.InputStream: void reset()>();

     label2:
        return $r3;

     label3:
        $r2 := @caughtexception;

        staticinvoke <com.nostra13.universalimageloader.utils.IoUtils: void closeSilently(java.io.Closeable)>($r3);

        $r3 = virtualinvoke r0.<com.nostra13.universalimageloader.core.decode.BaseImageDecoder: java.io.InputStream getImageStream(com.nostra13.universalimageloader.core.decode.ImageDecodingInfo)>($r1);

        return $r3;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <com.nostra13.universalimageloader.core.decode.BaseImageDecoder: java.lang.String LOG_SUBSAMPLE_IMAGE> = "Subsample original image (%1$s) to %2$s (scale = %3$d) [%4$s]";

        <com.nostra13.universalimageloader.core.decode.BaseImageDecoder: java.lang.String LOG_SCALE_IMAGE> = "Scale subsampled image (%1$s) to %2$s (scale = %3$.5f) [%4$s]";

        <com.nostra13.universalimageloader.core.decode.BaseImageDecoder: java.lang.String LOG_ROTATE_IMAGE> = "Rotate image on %1$d\u00b0 [%2$s]";

        <com.nostra13.universalimageloader.core.decode.BaseImageDecoder: java.lang.String LOG_FLIP_IMAGE> = "Flip image horizontally [%s]";

        <com.nostra13.universalimageloader.core.decode.BaseImageDecoder: java.lang.String ERROR_CANT_DECODE_IMAGE> = "Image can\'t be decoded [%s]";

        return;
    }
}
