public class org.htmlparser.tags.LabelTag extends org.htmlparser.tags.CompositeTag
{
    private static final java.lang.String[] k;

    static void <clinit>()
    {
        java.lang.String[] $r0;

        $r0 = newarray (java.lang.String)[1];

        $r0[0] = "LABEL";

        <org.htmlparser.tags.LabelTag: java.lang.String[] k> = $r0;

        return;
    }

    public void <init>()
    {
        org.htmlparser.tags.LabelTag r0;

        r0 := @this: org.htmlparser.tags.LabelTag;

        specialinvoke r0.<org.htmlparser.tags.CompositeTag: void <init>()>();

        return;
    }

    public java.lang.String[] getEnders()
    {
        java.lang.String[] r1;
        org.htmlparser.tags.LabelTag r0;

        r0 := @this: org.htmlparser.tags.LabelTag;

        r1 = <org.htmlparser.tags.LabelTag: java.lang.String[] k>;

        return r1;
    }

    public java.lang.String[] getIds()
    {
        java.lang.String[] r1;
        org.htmlparser.tags.LabelTag r0;

        r0 := @this: org.htmlparser.tags.LabelTag;

        r1 = <org.htmlparser.tags.LabelTag: java.lang.String[] k>;

        return r1;
    }

    public java.lang.String getLabel()
    {
        org.htmlparser.tags.LabelTag r0;
        java.lang.String $r1;

        r0 := @this: org.htmlparser.tags.LabelTag;

        $r1 = virtualinvoke r0.<org.htmlparser.tags.LabelTag: java.lang.String toPlainTextString()>();

        return $r1;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r1;
        org.htmlparser.tags.LabelTag r0;
        java.lang.String $r2;

        r0 := @this: org.htmlparser.tags.LabelTag;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LABEL: ");

        $r2 = virtualinvoke r0.<org.htmlparser.tags.LabelTag: java.lang.String getLabel()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
}
