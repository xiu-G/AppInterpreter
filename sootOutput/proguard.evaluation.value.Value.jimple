public abstract class proguard.evaluation.value.Value extends java.lang.Object
{
    public static final int ALWAYS;
    public static final int MAYBE;
    public static final int NEVER;
    public static final int TYPE_DOUBLE;
    public static final int TYPE_FLOAT;
    public static final int TYPE_INSTRUCTION_OFFSET;
    public static final int TYPE_INTEGER;
    public static final int TYPE_LONG;
    public static final int TYPE_REFERENCE;
    public static final int TYPE_TOP;

    public void <init>()
    {
        proguard.evaluation.value.Value r0;

        r0 := @this: proguard.evaluation.value.Value;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public proguard.evaluation.value.Category1Value category1Value()
    {
        java.lang.StringBuffer $r2;
        java.lang.Class $r3;
        java.lang.String $r4;
        java.lang.IllegalArgumentException $r1;
        proguard.evaluation.value.Value r0;

        r0 := @this: proguard.evaluation.value.Value;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Value is not a Category 1 value [");

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r1;
    }

    public proguard.evaluation.value.Category2Value category2Value()
    {
        java.lang.StringBuffer $r2;
        java.lang.Class $r3;
        java.lang.String $r4;
        java.lang.IllegalArgumentException $r1;
        proguard.evaluation.value.Value r0;

        r0 := @this: proguard.evaluation.value.Value;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Value is not a Category 2 value [");

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r1;
    }

    public abstract int computationalType();

    public proguard.evaluation.value.DoubleValue doubleValue()
    {
        java.lang.StringBuffer $r2;
        java.lang.Class $r3;
        java.lang.String $r4;
        java.lang.IllegalArgumentException $r1;
        proguard.evaluation.value.Value r0;

        r0 := @this: proguard.evaluation.value.Value;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Value is not a double value [");

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r1;
    }

    public proguard.evaluation.value.FloatValue floatValue()
    {
        java.lang.StringBuffer $r2;
        java.lang.Class $r3;
        java.lang.String $r4;
        java.lang.IllegalArgumentException $r1;
        proguard.evaluation.value.Value r0;

        r0 := @this: proguard.evaluation.value.Value;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Value is not a float value [");

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r1;
    }

    public abstract proguard.evaluation.value.Value generalize(proguard.evaluation.value.Value);

    public proguard.evaluation.value.InstructionOffsetValue instructionOffsetValue()
    {
        java.lang.StringBuffer $r2;
        java.lang.Class $r3;
        java.lang.String $r4;
        java.lang.IllegalArgumentException $r1;
        proguard.evaluation.value.Value r0;

        r0 := @this: proguard.evaluation.value.Value;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Value is not an instruction offset value [");

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r1;
    }

    public proguard.evaluation.value.IntegerValue integerValue()
    {
        java.lang.StringBuffer $r2;
        java.lang.Class $r3;
        java.lang.String $r4;
        java.lang.IllegalArgumentException $r1;
        proguard.evaluation.value.Value r0;

        r0 := @this: proguard.evaluation.value.Value;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Value is not an integer value [");

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r1;
    }

    public abstract java.lang.String internalType();

    public abstract boolean isCategory2();

    public boolean isParticular()
    {
        proguard.evaluation.value.Value r0;

        r0 := @this: proguard.evaluation.value.Value;

        return 0;
    }

    public boolean isSpecific()
    {
        proguard.evaluation.value.Value r0;

        r0 := @this: proguard.evaluation.value.Value;

        return 0;
    }

    public proguard.evaluation.value.LongValue longValue()
    {
        java.lang.StringBuffer $r2;
        java.lang.Class $r3;
        java.lang.String $r4;
        java.lang.IllegalArgumentException $r1;
        proguard.evaluation.value.Value r0;

        r0 := @this: proguard.evaluation.value.Value;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Value is not a long value [");

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r1;
    }

    public proguard.evaluation.value.ReferenceValue referenceValue()
    {
        java.lang.StringBuffer $r2;
        java.lang.Class $r3;
        java.lang.String $r4;
        java.lang.IllegalArgumentException $r1;
        proguard.evaluation.value.Value r0;

        r0 := @this: proguard.evaluation.value.Value;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Value is not a reference value [");

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r1;
    }

    public static void <clinit>()
    {
        <proguard.evaluation.value.Value: int TYPE_TOP> = 7;

        <proguard.evaluation.value.Value: int TYPE_REFERENCE> = 5;

        <proguard.evaluation.value.Value: int TYPE_LONG> = 2;

        <proguard.evaluation.value.Value: int TYPE_INTEGER> = 1;

        <proguard.evaluation.value.Value: int TYPE_INSTRUCTION_OFFSET> = 6;

        <proguard.evaluation.value.Value: int TYPE_FLOAT> = 3;

        <proguard.evaluation.value.Value: int TYPE_DOUBLE> = 4;

        <proguard.evaluation.value.Value: int NEVER> = -1;

        <proguard.evaluation.value.Value: int MAYBE> = 0;

        <proguard.evaluation.value.Value: int ALWAYS> = 1;

        return;
    }
}
