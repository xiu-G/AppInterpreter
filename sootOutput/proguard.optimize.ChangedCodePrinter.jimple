public class proguard.optimize.ChangedCodePrinter extends java.lang.Object implements proguard.classfile.attribute.visitor.AttributeVisitor
{
    private final proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor;

    public void <init>(proguard.classfile.attribute.visitor.AttributeVisitor)
    {
        proguard.classfile.attribute.visitor.AttributeVisitor $r1;
        proguard.optimize.ChangedCodePrinter r0;

        r0 := @this: proguard.optimize.ChangedCodePrinter;

        $r1 := @parameter0: proguard.classfile.attribute.visitor.AttributeVisitor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<proguard.optimize.ChangedCodePrinter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor> = $r1;

        return;
    }

    private boolean codeHasChanged(proguard.classfile.attribute.CodeAttribute, byte[])
    {
        byte[] $r2, $r3;
        byte $b2, $b3;
        proguard.classfile.attribute.CodeAttribute $r1;
        int $i0, $i1, $i4;
        proguard.optimize.ChangedCodePrinter r0;

        r0 := @this: proguard.optimize.ChangedCodePrinter;

        $r1 := @parameter0: proguard.classfile.attribute.CodeAttribute;

        $r2 := @parameter1: byte[];

        $i0 = lengthof $r2;

        $i1 = $r1.<proguard.classfile.attribute.CodeAttribute: int u4codeLength>;

        if $i0 == $i1 goto label1;

        return 1;

     label1:
        $i0 = 0;

     label2:
        $i1 = $r1.<proguard.classfile.attribute.CodeAttribute: int u4codeLength>;

        if $i0 >= $i1 goto label4;

        $b2 = $r2[$i0];

        $r3 = $r1.<proguard.classfile.attribute.CodeAttribute: byte[] code>;

        $b3 = $r3[$i0];

        $i1 = (int) $b2;

        $i4 = (int) $b3;

        if $i1 == $i4 goto label3;

        return 1;

     label3:
        $i0 = $i0 + 1;

        goto label2;

     label4:
        return 0;
    }

    private void printChangedCode(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, byte[])
    {
        byte[] $r4, $r10;
        short $s4;
        byte $b2, $b3;
        proguard.classfile.Clazz $r1;
        java.lang.StringBuffer $r6, $r11;
        int $i0, $i1, $i5;
        java.lang.String $r7, $r8, $r9;
        proguard.optimize.ChangedCodePrinter r0;
        java.io.PrintStream $r5;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.optimize.ChangedCodePrinter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: byte[];

        $r5 = <java.lang.System: java.io.PrintStream out>;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Class ");

        $r7 = interfaceinvoke $r1.<proguard.classfile.Clazz: java.lang.String getName()>();

        $r7 = staticinvoke <proguard.classfile.util.ClassUtil: java.lang.String externalClassName(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r7);

        $r5 = <java.lang.System: java.io.PrintStream out>;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Method ");

        $r7 = interfaceinvoke $r1.<proguard.classfile.Clazz: java.lang.String getName()>();

        $r8 = interfaceinvoke $r2.<proguard.classfile.Method: java.lang.String getName(proguard.classfile.Clazz)>($r1);

        $r9 = interfaceinvoke $r2.<proguard.classfile.Method: java.lang.String getDescriptor(proguard.classfile.Clazz)>($r1);

        $r7 = staticinvoke <proguard.classfile.util.ClassUtil: java.lang.String externalFullMethodDescription(java.lang.String,int,java.lang.String,java.lang.String)>($r7, 0, $r8, $r9);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r7);

        $i0 = 0;

     label1:
        $i1 = $r3.<proguard.classfile.attribute.CodeAttribute: int u4codeLength>;

        if $i0 >= $i1 goto label4;

        $r5 = <java.lang.System: java.io.PrintStream out>;

        $r11 = new java.lang.StringBuffer;

        $r6 = $r11;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $b2 = $r4[$i0];

        $r10 = $r3.<proguard.classfile.attribute.CodeAttribute: byte[] code>;

        $b3 = $r10[$i0];

        $i1 = (int) $b2;

        $i5 = (int) $b3;

        if $i1 != $i5 goto label3;

        $r7 = "  -- ";

     label2:
        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");

        $b2 = $r4[$i0];

        $s4 = (short) $b2;

        $s4 = $s4 & 255;

        $s4 = $s4 | 256;

        $i1 = (int) $s4;

        $r7 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i1);

        $r7 = virtualinvoke $r7.<java.lang.String: java.lang.String substring(int)>(1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r10 = $r3.<proguard.classfile.attribute.CodeAttribute: byte[] code>;

        $b2 = $r10[$i0];

        $s4 = (short) $b2;

        $s4 = $s4 & 255;

        $s4 = $s4 | 256;

        $i1 = (int) $s4;

        $r7 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i1);

        $r7 = virtualinvoke $r7.<java.lang.String: java.lang.String substring(int)>(1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r7);

        $i0 = $i0 + 1;

        goto label1;

     label3:
        $r7 = "  => ";

        goto label2;

     label4:
        return;
    }

    public void visitAnnotationDefaultAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.'annotation'.AnnotationDefaultAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.visitor.AttributeVisitor $r4;
        proguard.classfile.attribute.'annotation'.AnnotationDefaultAttribute $r3;
        proguard.optimize.ChangedCodePrinter r0;

        r0 := @this: proguard.optimize.ChangedCodePrinter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.AnnotationDefaultAttribute;

        $r4 = r0.<proguard.optimize.ChangedCodePrinter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        interfaceinvoke $r4.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitAnnotationDefaultAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.'annotation'.AnnotationDefaultAttribute)>($r1, $r2, $r3);

        return;
    }

    public void visitCodeAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute)
    {
        byte[] $r4, $r5;
        proguard.classfile.attribute.visitor.AttributeVisitor $r6;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.Method $r2;
        proguard.optimize.ChangedCodePrinter r0;
        boolean $z0;

        r0 := @this: proguard.optimize.ChangedCodePrinter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 = $r3.<proguard.classfile.attribute.CodeAttribute: byte[] code>;

        $i0 = lengthof $r4;

        $r5 = newarray (byte)[$i0];

        $i0 = $r3.<proguard.classfile.attribute.CodeAttribute: int u4codeLength>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r5, 0, $i0);

        $r6 = r0.<proguard.optimize.ChangedCodePrinter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        interfaceinvoke $r6.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute)>($r1, $r2, $r3);

        $z0 = specialinvoke r0.<proguard.optimize.ChangedCodePrinter: boolean codeHasChanged(proguard.classfile.attribute.CodeAttribute,byte[])>($r3, $r5);

        if $z0 == 0 goto label1;

        specialinvoke r0.<proguard.optimize.ChangedCodePrinter: void printChangedCode(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,byte[])>($r1, $r2, $r3, $r5);

     label1:
        return;
    }

    public void visitConstantValueAttribute(proguard.classfile.Clazz, proguard.classfile.Field, proguard.classfile.attribute.ConstantValueAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.visitor.AttributeVisitor $r4;
        proguard.classfile.Field $r2;
        proguard.classfile.attribute.ConstantValueAttribute $r3;
        proguard.optimize.ChangedCodePrinter r0;

        r0 := @this: proguard.optimize.ChangedCodePrinter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Field;

        $r3 := @parameter2: proguard.classfile.attribute.ConstantValueAttribute;

        $r4 = r0.<proguard.optimize.ChangedCodePrinter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        interfaceinvoke $r4.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitConstantValueAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.ConstantValueAttribute)>($r1, $r2, $r3);

        return;
    }

    public void visitDeprecatedAttribute(proguard.classfile.Clazz, proguard.classfile.Field, proguard.classfile.attribute.DeprecatedAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.visitor.AttributeVisitor $r4;
        proguard.classfile.Field $r2;
        proguard.classfile.attribute.DeprecatedAttribute $r3;
        proguard.optimize.ChangedCodePrinter r0;

        r0 := @this: proguard.optimize.ChangedCodePrinter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Field;

        $r3 := @parameter2: proguard.classfile.attribute.DeprecatedAttribute;

        $r4 = r0.<proguard.optimize.ChangedCodePrinter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        interfaceinvoke $r4.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitDeprecatedAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.DeprecatedAttribute)>($r1, $r2, $r3);

        return;
    }

    public void visitDeprecatedAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.DeprecatedAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.visitor.AttributeVisitor $r4;
        proguard.classfile.attribute.DeprecatedAttribute $r3;
        proguard.optimize.ChangedCodePrinter r0;

        r0 := @this: proguard.optimize.ChangedCodePrinter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.DeprecatedAttribute;

        $r4 = r0.<proguard.optimize.ChangedCodePrinter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        interfaceinvoke $r4.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitDeprecatedAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.DeprecatedAttribute)>($r1, $r2, $r3);

        return;
    }

    public void visitDeprecatedAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.DeprecatedAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.visitor.AttributeVisitor $r3;
        proguard.classfile.attribute.DeprecatedAttribute $r2;
        proguard.optimize.ChangedCodePrinter r0;

        r0 := @this: proguard.optimize.ChangedCodePrinter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.DeprecatedAttribute;

        $r3 = r0.<proguard.optimize.ChangedCodePrinter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        interfaceinvoke $r3.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitDeprecatedAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.DeprecatedAttribute)>($r1, $r2);

        return;
    }

    public void visitEnclosingMethodAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.EnclosingMethodAttribute)
    {
        proguard.classfile.attribute.EnclosingMethodAttribute $r2;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.visitor.AttributeVisitor $r3;
        proguard.optimize.ChangedCodePrinter r0;

        r0 := @this: proguard.optimize.ChangedCodePrinter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.EnclosingMethodAttribute;

        $r3 = r0.<proguard.optimize.ChangedCodePrinter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        interfaceinvoke $r3.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitEnclosingMethodAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.EnclosingMethodAttribute)>($r1, $r2);

        return;
    }

    public void visitExceptionsAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.ExceptionsAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.ExceptionsAttribute $r3;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.visitor.AttributeVisitor $r4;
        proguard.optimize.ChangedCodePrinter r0;

        r0 := @this: proguard.optimize.ChangedCodePrinter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.ExceptionsAttribute;

        $r4 = r0.<proguard.optimize.ChangedCodePrinter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        interfaceinvoke $r4.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitExceptionsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.ExceptionsAttribute)>($r1, $r2, $r3);

        return;
    }

    public void visitInnerClassesAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.InnerClassesAttribute)
    {
        proguard.classfile.attribute.InnerClassesAttribute $r2;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.visitor.AttributeVisitor $r3;
        proguard.optimize.ChangedCodePrinter r0;

        r0 := @this: proguard.optimize.ChangedCodePrinter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.InnerClassesAttribute;

        $r3 = r0.<proguard.optimize.ChangedCodePrinter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        interfaceinvoke $r3.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitInnerClassesAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.InnerClassesAttribute)>($r1, $r2);

        return;
    }

    public void visitLineNumberTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LineNumberTableAttribute)
    {
        proguard.classfile.attribute.LineNumberTableAttribute $r4;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.visitor.AttributeVisitor $r5;
        proguard.optimize.ChangedCodePrinter r0;

        r0 := @this: proguard.optimize.ChangedCodePrinter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.LineNumberTableAttribute;

        $r5 = r0.<proguard.optimize.ChangedCodePrinter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        interfaceinvoke $r5.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitLineNumberTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LineNumberTableAttribute)>($r1, $r2, $r3, $r4);

        return;
    }

    public void visitLocalVariableTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LocalVariableTableAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.visitor.AttributeVisitor $r5;
        proguard.classfile.attribute.LocalVariableTableAttribute $r4;
        proguard.optimize.ChangedCodePrinter r0;

        r0 := @this: proguard.optimize.ChangedCodePrinter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.LocalVariableTableAttribute;

        $r5 = r0.<proguard.optimize.ChangedCodePrinter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        interfaceinvoke $r5.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitLocalVariableTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTableAttribute)>($r1, $r2, $r3, $r4);

        return;
    }

    public void visitLocalVariableTypeTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LocalVariableTypeTableAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.visitor.AttributeVisitor $r5;
        proguard.classfile.attribute.LocalVariableTypeTableAttribute $r4;
        proguard.optimize.ChangedCodePrinter r0;

        r0 := @this: proguard.optimize.ChangedCodePrinter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.LocalVariableTypeTableAttribute;

        $r5 = r0.<proguard.optimize.ChangedCodePrinter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        interfaceinvoke $r5.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitLocalVariableTypeTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTypeTableAttribute)>($r1, $r2, $r3, $r4);

        return;
    }

    public void visitRuntimeInvisibleAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.Field, proguard.classfile.attribute.'annotation'.RuntimeInvisibleAnnotationsAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.visitor.AttributeVisitor $r4;
        proguard.classfile.Field $r2;
        proguard.optimize.ChangedCodePrinter r0;
        proguard.classfile.attribute.'annotation'.RuntimeInvisibleAnnotationsAttribute $r3;

        r0 := @this: proguard.optimize.ChangedCodePrinter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Field;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.RuntimeInvisibleAnnotationsAttribute;

        $r4 = r0.<proguard.optimize.ChangedCodePrinter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        interfaceinvoke $r4.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitRuntimeInvisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.'annotation'.RuntimeInvisibleAnnotationsAttribute)>($r1, $r2, $r3);

        return;
    }

    public void visitRuntimeInvisibleAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.'annotation'.RuntimeInvisibleAnnotationsAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.visitor.AttributeVisitor $r4;
        proguard.optimize.ChangedCodePrinter r0;
        proguard.classfile.attribute.'annotation'.RuntimeInvisibleAnnotationsAttribute $r3;

        r0 := @this: proguard.optimize.ChangedCodePrinter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.RuntimeInvisibleAnnotationsAttribute;

        $r4 = r0.<proguard.optimize.ChangedCodePrinter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        interfaceinvoke $r4.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitRuntimeInvisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.'annotation'.RuntimeInvisibleAnnotationsAttribute)>($r1, $r2, $r3);

        return;
    }

    public void visitRuntimeInvisibleAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.'annotation'.RuntimeInvisibleAnnotationsAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.visitor.AttributeVisitor $r3;
        proguard.optimize.ChangedCodePrinter r0;
        proguard.classfile.attribute.'annotation'.RuntimeInvisibleAnnotationsAttribute $r2;

        r0 := @this: proguard.optimize.ChangedCodePrinter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.RuntimeInvisibleAnnotationsAttribute;

        $r3 = r0.<proguard.optimize.ChangedCodePrinter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        interfaceinvoke $r3.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitRuntimeInvisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.'annotation'.RuntimeInvisibleAnnotationsAttribute)>($r1, $r2);

        return;
    }

    public void visitRuntimeInvisibleParameterAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.'annotation'.RuntimeInvisibleParameterAnnotationsAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.visitor.AttributeVisitor $r4;
        proguard.classfile.attribute.'annotation'.RuntimeInvisibleParameterAnnotationsAttribute $r3;
        proguard.optimize.ChangedCodePrinter r0;

        r0 := @this: proguard.optimize.ChangedCodePrinter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.RuntimeInvisibleParameterAnnotationsAttribute;

        $r4 = r0.<proguard.optimize.ChangedCodePrinter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        interfaceinvoke $r4.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitRuntimeInvisibleParameterAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.'annotation'.RuntimeInvisibleParameterAnnotationsAttribute)>($r1, $r2, $r3);

        return;
    }

    public void visitRuntimeVisibleAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.Field, proguard.classfile.attribute.'annotation'.RuntimeVisibleAnnotationsAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.'annotation'.RuntimeVisibleAnnotationsAttribute $r3;
        proguard.classfile.attribute.visitor.AttributeVisitor $r4;
        proguard.classfile.Field $r2;
        proguard.optimize.ChangedCodePrinter r0;

        r0 := @this: proguard.optimize.ChangedCodePrinter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Field;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.RuntimeVisibleAnnotationsAttribute;

        $r4 = r0.<proguard.optimize.ChangedCodePrinter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        interfaceinvoke $r4.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitRuntimeVisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.'annotation'.RuntimeVisibleAnnotationsAttribute)>($r1, $r2, $r3);

        return;
    }

    public void visitRuntimeVisibleAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.'annotation'.RuntimeVisibleAnnotationsAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.'annotation'.RuntimeVisibleAnnotationsAttribute $r3;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.visitor.AttributeVisitor $r4;
        proguard.optimize.ChangedCodePrinter r0;

        r0 := @this: proguard.optimize.ChangedCodePrinter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.RuntimeVisibleAnnotationsAttribute;

        $r4 = r0.<proguard.optimize.ChangedCodePrinter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        interfaceinvoke $r4.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitRuntimeVisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.'annotation'.RuntimeVisibleAnnotationsAttribute)>($r1, $r2, $r3);

        return;
    }

    public void visitRuntimeVisibleAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.'annotation'.RuntimeVisibleAnnotationsAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.'annotation'.RuntimeVisibleAnnotationsAttribute $r2;
        proguard.classfile.attribute.visitor.AttributeVisitor $r3;
        proguard.optimize.ChangedCodePrinter r0;

        r0 := @this: proguard.optimize.ChangedCodePrinter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.RuntimeVisibleAnnotationsAttribute;

        $r3 = r0.<proguard.optimize.ChangedCodePrinter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        interfaceinvoke $r3.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitRuntimeVisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.'annotation'.RuntimeVisibleAnnotationsAttribute)>($r1, $r2);

        return;
    }

    public void visitRuntimeVisibleParameterAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.'annotation'.RuntimeVisibleParameterAnnotationsAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.'annotation'.RuntimeVisibleParameterAnnotationsAttribute $r3;
        proguard.classfile.attribute.visitor.AttributeVisitor $r4;
        proguard.optimize.ChangedCodePrinter r0;

        r0 := @this: proguard.optimize.ChangedCodePrinter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.RuntimeVisibleParameterAnnotationsAttribute;

        $r4 = r0.<proguard.optimize.ChangedCodePrinter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        interfaceinvoke $r4.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitRuntimeVisibleParameterAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.'annotation'.RuntimeVisibleParameterAnnotationsAttribute)>($r1, $r2, $r3);

        return;
    }

    public void visitSignatureAttribute(proguard.classfile.Clazz, proguard.classfile.Field, proguard.classfile.attribute.SignatureAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.visitor.AttributeVisitor $r4;
        proguard.classfile.attribute.SignatureAttribute $r3;
        proguard.classfile.Field $r2;
        proguard.optimize.ChangedCodePrinter r0;

        r0 := @this: proguard.optimize.ChangedCodePrinter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Field;

        $r3 := @parameter2: proguard.classfile.attribute.SignatureAttribute;

        $r4 = r0.<proguard.optimize.ChangedCodePrinter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        interfaceinvoke $r4.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitSignatureAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.SignatureAttribute)>($r1, $r2, $r3);

        return;
    }

    public void visitSignatureAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.SignatureAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.visitor.AttributeVisitor $r4;
        proguard.classfile.attribute.SignatureAttribute $r3;
        proguard.optimize.ChangedCodePrinter r0;

        r0 := @this: proguard.optimize.ChangedCodePrinter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.SignatureAttribute;

        $r4 = r0.<proguard.optimize.ChangedCodePrinter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        interfaceinvoke $r4.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitSignatureAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.SignatureAttribute)>($r1, $r2, $r3);

        return;
    }

    public void visitSignatureAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.SignatureAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.visitor.AttributeVisitor $r3;
        proguard.classfile.attribute.SignatureAttribute $r2;
        proguard.optimize.ChangedCodePrinter r0;

        r0 := @this: proguard.optimize.ChangedCodePrinter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.SignatureAttribute;

        $r3 = r0.<proguard.optimize.ChangedCodePrinter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        interfaceinvoke $r3.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitSignatureAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SignatureAttribute)>($r1, $r2);

        return;
    }

    public void visitSourceDirAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.SourceDirAttribute)
    {
        proguard.classfile.attribute.SourceDirAttribute $r2;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.visitor.AttributeVisitor $r3;
        proguard.optimize.ChangedCodePrinter r0;

        r0 := @this: proguard.optimize.ChangedCodePrinter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.SourceDirAttribute;

        $r3 = r0.<proguard.optimize.ChangedCodePrinter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        interfaceinvoke $r3.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitSourceDirAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SourceDirAttribute)>($r1, $r2);

        return;
    }

    public void visitSourceFileAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.SourceFileAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.SourceFileAttribute $r2;
        proguard.classfile.attribute.visitor.AttributeVisitor $r3;
        proguard.optimize.ChangedCodePrinter r0;

        r0 := @this: proguard.optimize.ChangedCodePrinter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.SourceFileAttribute;

        $r3 = r0.<proguard.optimize.ChangedCodePrinter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        interfaceinvoke $r3.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitSourceFileAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SourceFileAttribute)>($r1, $r2);

        return;
    }

    public void visitStackMapAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.preverification.StackMapAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.attribute.preverification.StackMapAttribute $r4;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.visitor.AttributeVisitor $r5;
        proguard.optimize.ChangedCodePrinter r0;

        r0 := @this: proguard.optimize.ChangedCodePrinter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.preverification.StackMapAttribute;

        $r5 = r0.<proguard.optimize.ChangedCodePrinter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        interfaceinvoke $r5.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitStackMapAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.preverification.StackMapAttribute)>($r1, $r2, $r3, $r4);

        return;
    }

    public void visitStackMapTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.preverification.StackMapTableAttribute)
    {
        proguard.classfile.attribute.preverification.StackMapTableAttribute $r4;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.visitor.AttributeVisitor $r5;
        proguard.optimize.ChangedCodePrinter r0;

        r0 := @this: proguard.optimize.ChangedCodePrinter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.preverification.StackMapTableAttribute;

        $r5 = r0.<proguard.optimize.ChangedCodePrinter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        interfaceinvoke $r5.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitStackMapTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.preverification.StackMapTableAttribute)>($r1, $r2, $r3, $r4);

        return;
    }

    public void visitSyntheticAttribute(proguard.classfile.Clazz, proguard.classfile.Field, proguard.classfile.attribute.SyntheticAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.SyntheticAttribute $r3;
        proguard.classfile.attribute.visitor.AttributeVisitor $r4;
        proguard.classfile.Field $r2;
        proguard.optimize.ChangedCodePrinter r0;

        r0 := @this: proguard.optimize.ChangedCodePrinter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Field;

        $r3 := @parameter2: proguard.classfile.attribute.SyntheticAttribute;

        $r4 = r0.<proguard.optimize.ChangedCodePrinter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        interfaceinvoke $r4.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitSyntheticAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.SyntheticAttribute)>($r1, $r2, $r3);

        return;
    }

    public void visitSyntheticAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.SyntheticAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.SyntheticAttribute $r3;
        proguard.classfile.attribute.visitor.AttributeVisitor $r4;
        proguard.optimize.ChangedCodePrinter r0;

        r0 := @this: proguard.optimize.ChangedCodePrinter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.SyntheticAttribute;

        $r4 = r0.<proguard.optimize.ChangedCodePrinter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        interfaceinvoke $r4.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitSyntheticAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.SyntheticAttribute)>($r1, $r2, $r3);

        return;
    }

    public void visitSyntheticAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.SyntheticAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.SyntheticAttribute $r2;
        proguard.classfile.attribute.visitor.AttributeVisitor $r3;
        proguard.optimize.ChangedCodePrinter r0;

        r0 := @this: proguard.optimize.ChangedCodePrinter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.SyntheticAttribute;

        $r3 = r0.<proguard.optimize.ChangedCodePrinter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        interfaceinvoke $r3.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitSyntheticAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SyntheticAttribute)>($r1, $r2);

        return;
    }

    public void visitUnknownAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.UnknownAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.visitor.AttributeVisitor $r3;
        proguard.classfile.attribute.UnknownAttribute $r2;
        proguard.optimize.ChangedCodePrinter r0;

        r0 := @this: proguard.optimize.ChangedCodePrinter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.UnknownAttribute;

        $r3 = r0.<proguard.optimize.ChangedCodePrinter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        interfaceinvoke $r3.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitUnknownAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.UnknownAttribute)>($r1, $r2);

        return;
    }
}
