public class proguard.io.ClassRewriter extends java.lang.Object implements proguard.io.DataEntryReader
{
    private final proguard.classfile.ClassPool classPool;
    private final proguard.io.DataEntryWriter dataEntryWriter;

    public void <init>(proguard.classfile.ClassPool, proguard.io.DataEntryWriter)
    {
        proguard.classfile.ClassPool $r1;
        proguard.io.ClassRewriter r0;
        proguard.io.DataEntryWriter $r2;

        r0 := @this: proguard.io.ClassRewriter;

        $r1 := @parameter0: proguard.classfile.ClassPool;

        $r2 := @parameter1: proguard.io.DataEntryWriter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<proguard.io.ClassRewriter: proguard.classfile.ClassPool classPool> = $r1;

        r0.<proguard.io.ClassRewriter: proguard.io.DataEntryWriter dataEntryWriter> = $r2;

        return;
    }

    public void read(proguard.io.DataEntry) throws java.io.IOException
    {
        proguard.io.ClassRewriter r0;
        proguard.classfile.io.ProgramClassWriter $r15;
        proguard.classfile.ProgramClass $r6;
        proguard.classfile.ClassPool $r4;
        proguard.io.RenamedDataEntry $r13;
        java.io.DataOutputStream $r11, $r14;
        proguard.classfile.Clazz $r5;
        java.lang.StringBuffer $r8, $r12;
        int $i0, $i1;
        java.lang.String $r2, $r3;
        boolean $z0;
        java.io.OutputStream $r10;
        proguard.io.DataEntryWriter $r9;
        proguard.io.DataEntry $r1, $r7;

        r0 := @this: proguard.io.ClassRewriter;

        $r1 := @parameter0: proguard.io.DataEntry;

        $r2 = interfaceinvoke $r1.<proguard.io.DataEntry: java.lang.String getName()>();

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        $r3 = ".class";

        $i1 = virtualinvoke $r3.<java.lang.String: int length()>();

        $i0 = $i0 - $i1;

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r4 = r0.<proguard.io.ClassRewriter: proguard.classfile.ClassPool classPool>;

        $r5 = virtualinvoke $r4.<proguard.classfile.ClassPool: proguard.classfile.Clazz getClass(java.lang.String)>($r2);

        $r6 = (proguard.classfile.ProgramClass) $r5;

        if $r6 == null goto label3;

        $r3 = virtualinvoke $r6.<proguard.classfile.ProgramClass: java.lang.String getName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label2;

        $r13 = new proguard.io.RenamedDataEntry;

        $r7 = $r13;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".class");

        $r2 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r13.<proguard.io.RenamedDataEntry: void <init>(proguard.io.DataEntry,java.lang.String)>($r1, $r2);

     label1:
        $r9 = r0.<proguard.io.ClassRewriter: proguard.io.DataEntryWriter dataEntryWriter>;

        $r10 = interfaceinvoke $r9.<proguard.io.DataEntryWriter: java.io.OutputStream getOutputStream(proguard.io.DataEntry)>($r7);

        if $r10 == null goto label3;

        $r14 = new java.io.DataOutputStream;

        $r11 = $r14;

        specialinvoke $r14.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r10);

        $r15 = new proguard.classfile.io.ProgramClassWriter;

        specialinvoke $r15.<proguard.classfile.io.ProgramClassWriter: void <init>(java.io.DataOutput)>($r11);

        virtualinvoke $r15.<proguard.classfile.io.ProgramClassWriter: void visitProgramClass(proguard.classfile.ProgramClass)>($r6);

        virtualinvoke $r11.<java.io.DataOutputStream: void flush()>();

        return;

     label2:
        $r7 = $r1;

        goto label1;

     label3:
        return;
    }
}
