public class com.altsoldev.util.CryptoHelper extends java.lang.Object
{
    private static java.lang.String cryptoPass;

    static void <clinit>()
    {
        <com.altsoldev.util.CryptoHelper: java.lang.String cryptoPass> = "altsoldev168";

        return;
    }

    public void <init>()
    {
        com.altsoldev.util.CryptoHelper r0;

        r0 := @this: com.altsoldev.util.CryptoHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String decryptGSPCPublicKey()
    {
        java.lang.String $r0;

        $r0 = staticinvoke <com.altsoldev.util.CryptoHelper: java.lang.String decryptIt(java.lang.String)>("X24k6u+iIVUljYjv/A1pIWeK/xqrhlsJhx+PC9JtYrXheJah1UR6vCJOBwkECmxXRsuB/nFbNYusrHug8emQBsDmLWFuirRUlTl5XbR1+3anQ9C8FH4HCbJgaZtjc/oybZI2S7lIzFrl/lVHhF0Zz0W4Wyx8LpvmnrpUBlivbJLIAmHkexui71kYxsVxquTNhmnc8hTSOfulj6yKRWo1EMZ3GnkrsDs1L9m/rcJGlW4QfUjRKr9jnWbE3HjqezPE5hjI/J2oRCVN6NmJ+FBk+gbRsr47/UXtGL7sRqghLqXyRv8zkzxLjZwRp52hvnYmg3+MRJCEzN4JR37txMR2RwU/IgmYrfAGlhiadq9A8q6zJZr5VW+Y3Gu1JHEq+HtG8kMvlfuMnzcCMMR7O937J1lDhOUSlMHBKFSBKzXy9UpORsRH6ySWCxkAMsFwMi/wQvUvE65bE+814yO1J5DNEZneGaRwR/cv06LpvGjim/PrcW+rwkQ77RZ4gv9SkGP5P1G0e2frz8fQ6whHZJH1AA==");

        return $r0;
    }

    public static java.lang.String decryptIt(java.lang.String)
    {
        java.lang.Throwable r7, r8, r9, r10, r11, r12, r13;
        byte[] $r3;
        java.security.spec.InvalidKeySpecException $r18;
        javax.crypto.spec.DESKeySpec r1, $r14;
        javax.crypto.Cipher $r6;
        javax.crypto.SecretKeyFactory $r4;
        javax.crypto.NoSuchPaddingException $r21;
        java.lang.String $r0, $r2, $r15;
        javax.crypto.IllegalBlockSizeException $r22;
        javax.crypto.BadPaddingException $r20;
        java.security.NoSuchAlgorithmException $r19;
        java.security.InvalidKeyException $r16;
        javax.crypto.SecretKey $r5;
        java.io.UnsupportedEncodingException $r17;

        $r0 := @parameter0: java.lang.String;

        $r14 = new javax.crypto.spec.DESKeySpec;

        r1 = $r14;

        $r2 = <com.altsoldev.util.CryptoHelper: java.lang.String cryptoPass>;

     label01:
        $r3 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF8");

        specialinvoke $r14.<javax.crypto.spec.DESKeySpec: void <init>(byte[])>($r3);

        $r4 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>("DES");

        $r5 = virtualinvoke $r4.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>(r1);

        $r3 = staticinvoke <android.util.Base64: byte[] decode(java.lang.String,int)>("X24k6u+iIVUljYjv/A1pIWeK/xqrhlsJhx+PC9JtYrXheJah1UR6vCJOBwkECmxXRsuB/nFbNYusrHug8emQBsDmLWFuirRUlTl5XbR1+3anQ9C8FH4HCbJgaZtjc/oybZI2S7lIzFrl/lVHhF0Zz0W4Wyx8LpvmnrpUBlivbJLIAmHkexui71kYxsVxquTNhmnc8hTSOfulj6yKRWo1EMZ3GnkrsDs1L9m/rcJGlW4QfUjRKr9jnWbE3HjqezPE5hjI/J2oRCVN6NmJ+FBk+gbRsr47/UXtGL7sRqghLqXyRv8zkzxLjZwRp52hvnYmg3+MRJCEzN4JR37txMR2RwU/IgmYrfAGlhiadq9A8q6zJZr5VW+Y3Gu1JHEq+HtG8kMvlfuMnzcCMMR7O937J1lDhOUSlMHBKFSBKzXy9UpORsRH6ySWCxkAMsFwMi/wQvUvE65bE+814yO1J5DNEZneGaRwR/cv06LpvGjim/PrcW+rwkQ77RZ4gv9SkGP5P1G0e2frz8fQ6whHZJH1AA==", 0);

        $r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("DES");

        virtualinvoke $r6.<javax.crypto.Cipher: void init(int,java.security.Key)>(2, $r5);

        $r3 = virtualinvoke $r6.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r3);

     label02:
        $r15 = new java.lang.String;

     label03:
        specialinvoke $r15.<java.lang.String: void <init>(byte[])>($r3);

     label04:
        return $r15;

     label05:
        r7 := @caughtexception;

        $r16 = (java.security.InvalidKeyException) r7;

        virtualinvoke $r16.<java.security.InvalidKeyException: void printStackTrace()>();

     label06:
        return "X24k6u+iIVUljYjv/A1pIWeK/xqrhlsJhx+PC9JtYrXheJah1UR6vCJOBwkECmxXRsuB/nFbNYusrHug8emQBsDmLWFuirRUlTl5XbR1+3anQ9C8FH4HCbJgaZtjc/oybZI2S7lIzFrl/lVHhF0Zz0W4Wyx8LpvmnrpUBlivbJLIAmHkexui71kYxsVxquTNhmnc8hTSOfulj6yKRWo1EMZ3GnkrsDs1L9m/rcJGlW4QfUjRKr9jnWbE3HjqezPE5hjI/J2oRCVN6NmJ+FBk+gbRsr47/UXtGL7sRqghLqXyRv8zkzxLjZwRp52hvnYmg3+MRJCEzN4JR37txMR2RwU/IgmYrfAGlhiadq9A8q6zJZr5VW+Y3Gu1JHEq+HtG8kMvlfuMnzcCMMR7O937J1lDhOUSlMHBKFSBKzXy9UpORsRH6ySWCxkAMsFwMi/wQvUvE65bE+814yO1J5DNEZneGaRwR/cv06LpvGjim/PrcW+rwkQ77RZ4gv9SkGP5P1G0e2frz8fQ6whHZJH1AA==";

     label07:
        r8 := @caughtexception;

        $r17 = (java.io.UnsupportedEncodingException) r8;

        virtualinvoke $r17.<java.io.UnsupportedEncodingException: void printStackTrace()>();

        goto label06;

     label08:
        r9 := @caughtexception;

        $r18 = (java.security.spec.InvalidKeySpecException) r9;

        virtualinvoke $r18.<java.security.spec.InvalidKeySpecException: void printStackTrace()>();

        goto label06;

     label09:
        r10 := @caughtexception;

        $r19 = (java.security.NoSuchAlgorithmException) r10;

        virtualinvoke $r19.<java.security.NoSuchAlgorithmException: void printStackTrace()>();

        goto label06;

     label10:
        r11 := @caughtexception;

        $r20 = (javax.crypto.BadPaddingException) r11;

        virtualinvoke $r20.<javax.crypto.BadPaddingException: void printStackTrace()>();

        goto label06;

     label11:
        r12 := @caughtexception;

        $r21 = (javax.crypto.NoSuchPaddingException) r12;

        virtualinvoke $r21.<javax.crypto.NoSuchPaddingException: void printStackTrace()>();

        goto label06;

     label12:
        r13 := @caughtexception;

        $r22 = (javax.crypto.IllegalBlockSizeException) r13;

        virtualinvoke $r22.<javax.crypto.IllegalBlockSizeException: void printStackTrace()>();

        goto label06;

        catch java.security.InvalidKeyException from label01 to label02 with label05;
        catch java.security.InvalidKeyException from label03 to label04 with label05;
        catch java.io.UnsupportedEncodingException from label01 to label02 with label07;
        catch java.io.UnsupportedEncodingException from label03 to label04 with label07;
        catch java.security.spec.InvalidKeySpecException from label01 to label02 with label08;
        catch java.security.spec.InvalidKeySpecException from label03 to label04 with label08;
        catch java.security.NoSuchAlgorithmException from label01 to label02 with label09;
        catch java.security.NoSuchAlgorithmException from label03 to label04 with label09;
        catch javax.crypto.BadPaddingException from label01 to label02 with label10;
        catch javax.crypto.BadPaddingException from label03 to label04 with label10;
        catch javax.crypto.NoSuchPaddingException from label01 to label02 with label11;
        catch javax.crypto.NoSuchPaddingException from label03 to label04 with label11;
        catch javax.crypto.IllegalBlockSizeException from label01 to label02 with label12;
        catch javax.crypto.IllegalBlockSizeException from label03 to label04 with label12;
    }

    public static java.lang.String encryptIt(java.lang.String)
    {
        java.lang.Throwable r7, r8, r9, r10, r11, r12, r13;
        byte[] $r3;
        java.security.spec.InvalidKeySpecException $r17;
        javax.crypto.spec.DESKeySpec r1, $r14;
        javax.crypto.Cipher $r6;
        javax.crypto.SecretKeyFactory $r4;
        javax.crypto.NoSuchPaddingException $r20;
        java.lang.String $r0, $r2;
        javax.crypto.IllegalBlockSizeException $r21;
        javax.crypto.BadPaddingException $r19;
        java.security.NoSuchAlgorithmException $r18;
        java.security.InvalidKeyException $r15;
        javax.crypto.SecretKey $r5;
        java.io.UnsupportedEncodingException $r16;

        $r0 := @parameter0: java.lang.String;

        $r14 = new javax.crypto.spec.DESKeySpec;

        r1 = $r14;

        $r2 = <com.altsoldev.util.CryptoHelper: java.lang.String cryptoPass>;

     label01:
        $r3 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF8");

        specialinvoke $r14.<javax.crypto.spec.DESKeySpec: void <init>(byte[])>($r3);

        $r4 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>("DES");

        $r5 = virtualinvoke $r4.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>(r1);

        $r3 = virtualinvoke $r0.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF8");

        $r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("DES");

        virtualinvoke $r6.<javax.crypto.Cipher: void init(int,java.security.Key)>(1, $r5);

        $r3 = virtualinvoke $r6.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r3);

        $r2 = staticinvoke <android.util.Base64: java.lang.String encodeToString(byte[],int)>($r3, 0);

     label02:
        return $r2;

     label03:
        r7 := @caughtexception;

        $r15 = (java.security.InvalidKeyException) r7;

        virtualinvoke $r15.<java.security.InvalidKeyException: void printStackTrace()>();

     label04:
        return $r0;

     label05:
        r8 := @caughtexception;

        $r16 = (java.io.UnsupportedEncodingException) r8;

        virtualinvoke $r16.<java.io.UnsupportedEncodingException: void printStackTrace()>();

        goto label04;

     label06:
        r9 := @caughtexception;

        $r17 = (java.security.spec.InvalidKeySpecException) r9;

        virtualinvoke $r17.<java.security.spec.InvalidKeySpecException: void printStackTrace()>();

        goto label04;

     label07:
        r10 := @caughtexception;

        $r18 = (java.security.NoSuchAlgorithmException) r10;

        virtualinvoke $r18.<java.security.NoSuchAlgorithmException: void printStackTrace()>();

        goto label04;

     label08:
        r11 := @caughtexception;

        $r19 = (javax.crypto.BadPaddingException) r11;

        virtualinvoke $r19.<javax.crypto.BadPaddingException: void printStackTrace()>();

        goto label04;

     label09:
        r12 := @caughtexception;

        $r20 = (javax.crypto.NoSuchPaddingException) r12;

        virtualinvoke $r20.<javax.crypto.NoSuchPaddingException: void printStackTrace()>();

        goto label04;

     label10:
        r13 := @caughtexception;

        $r21 = (javax.crypto.IllegalBlockSizeException) r13;

        virtualinvoke $r21.<javax.crypto.IllegalBlockSizeException: void printStackTrace()>();

        goto label04;

        catch java.security.InvalidKeyException from label01 to label02 with label03;
        catch java.io.UnsupportedEncodingException from label01 to label02 with label05;
        catch java.security.spec.InvalidKeySpecException from label01 to label02 with label06;
        catch java.security.NoSuchAlgorithmException from label01 to label02 with label07;
        catch javax.crypto.BadPaddingException from label01 to label02 with label08;
        catch javax.crypto.NoSuchPaddingException from label01 to label02 with label09;
        catch javax.crypto.IllegalBlockSizeException from label01 to label02 with label10;
    }
}
