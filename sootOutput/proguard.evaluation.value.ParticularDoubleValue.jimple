final class proguard.evaluation.value.ParticularDoubleValue extends proguard.evaluation.value.SpecificDoubleValue
{
    private final double value;

    public void <init>(double)
    {
        proguard.evaluation.value.ParticularDoubleValue r0;
        double $d0;

        r0 := @this: proguard.evaluation.value.ParticularDoubleValue;

        $d0 := @parameter0: double;

        specialinvoke r0.<proguard.evaluation.value.SpecificDoubleValue: void <init>()>();

        r0.<proguard.evaluation.value.ParticularDoubleValue: double value> = $d0;

        return;
    }

    public proguard.evaluation.value.DoubleValue add(proguard.evaluation.value.DoubleValue)
    {
        proguard.evaluation.value.ParticularDoubleValue r0;
        proguard.evaluation.value.DoubleValue $r1;

        r0 := @this: proguard.evaluation.value.ParticularDoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.DoubleValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.DoubleValue: proguard.evaluation.value.DoubleValue add(proguard.evaluation.value.ParticularDoubleValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.DoubleValue add(proguard.evaluation.value.ParticularDoubleValue)
    {
        proguard.evaluation.value.ParticularDoubleValue r0, $r1, $r2;
        double $d0, $d1;

        r0 := @this: proguard.evaluation.value.ParticularDoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularDoubleValue;

        $r2 = new proguard.evaluation.value.ParticularDoubleValue;

        $d1 = r0.<proguard.evaluation.value.ParticularDoubleValue: double value>;

        $d0 = $r1.<proguard.evaluation.value.ParticularDoubleValue: double value>;

        $d0 = $d1 + $d0;

        specialinvoke $r2.<proguard.evaluation.value.ParticularDoubleValue: void <init>(double)>($d0);

        return $r2;
    }

    public proguard.evaluation.value.IntegerValue compare(proguard.evaluation.value.DoubleValue)
    {
        proguard.evaluation.value.ParticularDoubleValue r0;
        proguard.evaluation.value.DoubleValue $r1;
        proguard.evaluation.value.IntegerValue $r2;

        r0 := @this: proguard.evaluation.value.ParticularDoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.DoubleValue;

        $r2 = virtualinvoke $r1.<proguard.evaluation.value.DoubleValue: proguard.evaluation.value.IntegerValue compareReverse(proguard.evaluation.value.ParticularDoubleValue)>(r0);

        return $r2;
    }

    public proguard.evaluation.value.IntegerValue compare(proguard.evaluation.value.ParticularDoubleValue)
    {
        proguard.evaluation.value.IntegerValue r2;
        byte $b0;
        proguard.evaluation.value.ParticularDoubleValue r0, $r1;
        int $i1;
        double $d0, $d1;

        r0 := @this: proguard.evaluation.value.ParticularDoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularDoubleValue;

        $d0 = r0.<proguard.evaluation.value.ParticularDoubleValue: double value>;

        $d1 = $r1.<proguard.evaluation.value.ParticularDoubleValue: double value>;

        $b0 = $d0 cmpg $d1;

        $i1 = (int) $b0;

        if $i1 >= 0 goto label1;

        r2 = <proguard.evaluation.value.SpecificValueFactory: proguard.evaluation.value.IntegerValue INTEGER_VALUE_M1>;

        return r2;

     label1:
        $d0 = r0.<proguard.evaluation.value.ParticularDoubleValue: double value>;

        $d1 = $r1.<proguard.evaluation.value.ParticularDoubleValue: double value>;

        $b0 = $d0 cmpl $d1;

        if $b0 != 0 goto label2;

        r2 = <proguard.evaluation.value.SpecificValueFactory: proguard.evaluation.value.IntegerValue INTEGER_VALUE_0>;

        return r2;

     label2:
        r2 = <proguard.evaluation.value.SpecificValueFactory: proguard.evaluation.value.IntegerValue INTEGER_VALUE_1>;

        return r2;
    }

    public proguard.evaluation.value.FloatValue convertToFloat()
    {
        proguard.evaluation.value.ParticularFloatValue $r1;
        proguard.evaluation.value.ParticularDoubleValue r0;
        float $f0;
        double $d0;

        r0 := @this: proguard.evaluation.value.ParticularDoubleValue;

        $r1 = new proguard.evaluation.value.ParticularFloatValue;

        $d0 = r0.<proguard.evaluation.value.ParticularDoubleValue: double value>;

        $f0 = (float) $d0;

        specialinvoke $r1.<proguard.evaluation.value.ParticularFloatValue: void <init>(float)>($f0);

        return $r1;
    }

    public proguard.evaluation.value.IntegerValue convertToInteger()
    {
        proguard.evaluation.value.ParticularDoubleValue r0;
        int $i0;
        proguard.evaluation.value.ParticularIntegerValue $r1;
        double $d0;

        r0 := @this: proguard.evaluation.value.ParticularDoubleValue;

        $r1 = new proguard.evaluation.value.ParticularIntegerValue;

        $d0 = r0.<proguard.evaluation.value.ParticularDoubleValue: double value>;

        $i0 = (int) $d0;

        specialinvoke $r1.<proguard.evaluation.value.ParticularIntegerValue: void <init>(int)>($i0);

        return $r1;
    }

    public proguard.evaluation.value.LongValue convertToLong()
    {
        proguard.evaluation.value.ParticularDoubleValue r0;
        proguard.evaluation.value.ParticularLongValue $r1;
        long $l0;
        double $d0;

        r0 := @this: proguard.evaluation.value.ParticularDoubleValue;

        $r1 = new proguard.evaluation.value.ParticularLongValue;

        $d0 = r0.<proguard.evaluation.value.ParticularDoubleValue: double value>;

        $l0 = (long) $d0;

        specialinvoke $r1.<proguard.evaluation.value.ParticularLongValue: void <init>(long)>($l0);

        return $r1;
    }

    public proguard.evaluation.value.DoubleValue divide(proguard.evaluation.value.DoubleValue)
    {
        proguard.evaluation.value.ParticularDoubleValue r0;
        proguard.evaluation.value.DoubleValue $r1;

        r0 := @this: proguard.evaluation.value.ParticularDoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.DoubleValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.DoubleValue: proguard.evaluation.value.DoubleValue divideOf(proguard.evaluation.value.ParticularDoubleValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.DoubleValue divide(proguard.evaluation.value.ParticularDoubleValue)
    {
        proguard.evaluation.value.ParticularDoubleValue r0, $r1, $r2;
        double $d0, $d1;

        r0 := @this: proguard.evaluation.value.ParticularDoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularDoubleValue;

        $r2 = new proguard.evaluation.value.ParticularDoubleValue;

        $d1 = r0.<proguard.evaluation.value.ParticularDoubleValue: double value>;

        $d0 = $r1.<proguard.evaluation.value.ParticularDoubleValue: double value>;

        $d0 = $d1 / $d0;

        specialinvoke $r2.<proguard.evaluation.value.ParticularDoubleValue: void <init>(double)>($d0);

        return $r2;
    }

    public proguard.evaluation.value.DoubleValue divideOf(proguard.evaluation.value.DoubleValue)
    {
        proguard.evaluation.value.ParticularDoubleValue r0;
        proguard.evaluation.value.DoubleValue $r1;

        r0 := @this: proguard.evaluation.value.ParticularDoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.DoubleValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.DoubleValue: proguard.evaluation.value.DoubleValue divide(proguard.evaluation.value.ParticularDoubleValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.DoubleValue divideOf(proguard.evaluation.value.ParticularDoubleValue)
    {
        proguard.evaluation.value.ParticularDoubleValue r0, $r1, $r2;
        double $d0, $d1;

        r0 := @this: proguard.evaluation.value.ParticularDoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularDoubleValue;

        $r2 = new proguard.evaluation.value.ParticularDoubleValue;

        $d1 = $r1.<proguard.evaluation.value.ParticularDoubleValue: double value>;

        $d0 = r0.<proguard.evaluation.value.ParticularDoubleValue: double value>;

        $d0 = $d1 / $d0;

        specialinvoke $r2.<proguard.evaluation.value.ParticularDoubleValue: void <init>(double)>($d0);

        return $r2;
    }

    public boolean equals(java.lang.Object)
    {
        byte $b0;
        proguard.evaluation.value.ParticularDoubleValue r0;
        java.lang.Object $r1;
        double $d0, $d1;
        boolean $z0;

        r0 := @this: proguard.evaluation.value.ParticularDoubleValue;

        $r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<proguard.evaluation.value.SpecificDoubleValue: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $d1 = r0.<proguard.evaluation.value.ParticularDoubleValue: double value>;

        r0 = (proguard.evaluation.value.ParticularDoubleValue) $r1;

        $d0 = r0.<proguard.evaluation.value.ParticularDoubleValue: double value>;

        $b0 = $d1 cmpl $d0;

        if $b0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public proguard.evaluation.value.DoubleValue generalize(proguard.evaluation.value.DoubleValue)
    {
        proguard.evaluation.value.ParticularDoubleValue r0;
        proguard.evaluation.value.DoubleValue $r1;

        r0 := @this: proguard.evaluation.value.ParticularDoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.DoubleValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.DoubleValue: proguard.evaluation.value.DoubleValue generalize(proguard.evaluation.value.ParticularDoubleValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.DoubleValue generalize(proguard.evaluation.value.ParticularDoubleValue)
    {
        byte $b0;
        proguard.evaluation.value.ParticularDoubleValue r0, $r1;
        proguard.evaluation.value.DoubleValue r2;
        double $d0, $d1;

        r0 := @this: proguard.evaluation.value.ParticularDoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularDoubleValue;

        $d1 = r0.<proguard.evaluation.value.ParticularDoubleValue: double value>;

        $d0 = $r1.<proguard.evaluation.value.ParticularDoubleValue: double value>;

        $b0 = $d1 cmpl $d0;

        if $b0 != 0 goto label1;

        return r0;

     label1:
        r2 = <proguard.evaluation.value.ValueFactory: proguard.evaluation.value.DoubleValue DOUBLE_VALUE>;

        return r2;
    }

    public int hashCode()
    {
        proguard.evaluation.value.ParticularDoubleValue r0;
        int $i0, $i2;
        long $l1;
        double $d0;

        r0 := @this: proguard.evaluation.value.ParticularDoubleValue;

        $i0 = specialinvoke r0.<proguard.evaluation.value.SpecificDoubleValue: int hashCode()>();

        $d0 = r0.<proguard.evaluation.value.ParticularDoubleValue: double value>;

        $l1 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $i2 = (int) $l1;

        $i0 = $i0 ^ $i2;

        return $i0;
    }

    public boolean isParticular()
    {
        proguard.evaluation.value.ParticularDoubleValue r0;

        r0 := @this: proguard.evaluation.value.ParticularDoubleValue;

        return 1;
    }

    public proguard.evaluation.value.DoubleValue multiply(proguard.evaluation.value.DoubleValue)
    {
        proguard.evaluation.value.ParticularDoubleValue r0;
        proguard.evaluation.value.DoubleValue $r1;

        r0 := @this: proguard.evaluation.value.ParticularDoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.DoubleValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.DoubleValue: proguard.evaluation.value.DoubleValue multiply(proguard.evaluation.value.ParticularDoubleValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.DoubleValue multiply(proguard.evaluation.value.ParticularDoubleValue)
    {
        proguard.evaluation.value.ParticularDoubleValue r0, $r1, $r2;
        double $d0, $d1;

        r0 := @this: proguard.evaluation.value.ParticularDoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularDoubleValue;

        $r2 = new proguard.evaluation.value.ParticularDoubleValue;

        $d1 = r0.<proguard.evaluation.value.ParticularDoubleValue: double value>;

        $d0 = $r1.<proguard.evaluation.value.ParticularDoubleValue: double value>;

        $d0 = $d1 * $d0;

        specialinvoke $r2.<proguard.evaluation.value.ParticularDoubleValue: void <init>(double)>($d0);

        return $r2;
    }

    public proguard.evaluation.value.DoubleValue negate()
    {
        proguard.evaluation.value.ParticularDoubleValue r0, $r1;
        double $d0;

        r0 := @this: proguard.evaluation.value.ParticularDoubleValue;

        $r1 = new proguard.evaluation.value.ParticularDoubleValue;

        $d0 = r0.<proguard.evaluation.value.ParticularDoubleValue: double value>;

        $d0 = neg $d0;

        specialinvoke $r1.<proguard.evaluation.value.ParticularDoubleValue: void <init>(double)>($d0);

        return $r1;
    }

    public proguard.evaluation.value.DoubleValue remainder(proguard.evaluation.value.DoubleValue)
    {
        proguard.evaluation.value.ParticularDoubleValue r0;
        proguard.evaluation.value.DoubleValue $r1;

        r0 := @this: proguard.evaluation.value.ParticularDoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.DoubleValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.DoubleValue: proguard.evaluation.value.DoubleValue remainderOf(proguard.evaluation.value.ParticularDoubleValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.DoubleValue remainder(proguard.evaluation.value.ParticularDoubleValue)
    {
        proguard.evaluation.value.ParticularDoubleValue r0, $r1, $r2;
        double $d0, $d1;

        r0 := @this: proguard.evaluation.value.ParticularDoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularDoubleValue;

        $r2 = new proguard.evaluation.value.ParticularDoubleValue;

        $d1 = r0.<proguard.evaluation.value.ParticularDoubleValue: double value>;

        $d0 = $r1.<proguard.evaluation.value.ParticularDoubleValue: double value>;

        $d0 = $d1 % $d0;

        specialinvoke $r2.<proguard.evaluation.value.ParticularDoubleValue: void <init>(double)>($d0);

        return $r2;
    }

    public proguard.evaluation.value.DoubleValue remainderOf(proguard.evaluation.value.DoubleValue)
    {
        proguard.evaluation.value.ParticularDoubleValue r0;
        proguard.evaluation.value.DoubleValue $r1;

        r0 := @this: proguard.evaluation.value.ParticularDoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.DoubleValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.DoubleValue: proguard.evaluation.value.DoubleValue remainder(proguard.evaluation.value.ParticularDoubleValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.DoubleValue remainderOf(proguard.evaluation.value.ParticularDoubleValue)
    {
        proguard.evaluation.value.ParticularDoubleValue r0, $r1, $r2;
        double $d0, $d1;

        r0 := @this: proguard.evaluation.value.ParticularDoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularDoubleValue;

        $r2 = new proguard.evaluation.value.ParticularDoubleValue;

        $d1 = $r1.<proguard.evaluation.value.ParticularDoubleValue: double value>;

        $d0 = r0.<proguard.evaluation.value.ParticularDoubleValue: double value>;

        $d0 = $d1 % $d0;

        specialinvoke $r2.<proguard.evaluation.value.ParticularDoubleValue: void <init>(double)>($d0);

        return $r2;
    }

    public proguard.evaluation.value.DoubleValue subtract(proguard.evaluation.value.DoubleValue)
    {
        proguard.evaluation.value.ParticularDoubleValue r0;
        proguard.evaluation.value.DoubleValue $r1;

        r0 := @this: proguard.evaluation.value.ParticularDoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.DoubleValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.DoubleValue: proguard.evaluation.value.DoubleValue subtractFrom(proguard.evaluation.value.ParticularDoubleValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.DoubleValue subtract(proguard.evaluation.value.ParticularDoubleValue)
    {
        proguard.evaluation.value.ParticularDoubleValue r0, $r1, $r2;
        double $d0, $d1;

        r0 := @this: proguard.evaluation.value.ParticularDoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularDoubleValue;

        $r2 = new proguard.evaluation.value.ParticularDoubleValue;

        $d1 = r0.<proguard.evaluation.value.ParticularDoubleValue: double value>;

        $d0 = $r1.<proguard.evaluation.value.ParticularDoubleValue: double value>;

        $d0 = $d1 - $d0;

        specialinvoke $r2.<proguard.evaluation.value.ParticularDoubleValue: void <init>(double)>($d0);

        return $r2;
    }

    public proguard.evaluation.value.DoubleValue subtractFrom(proguard.evaluation.value.DoubleValue)
    {
        proguard.evaluation.value.ParticularDoubleValue r0;
        proguard.evaluation.value.DoubleValue $r1;

        r0 := @this: proguard.evaluation.value.ParticularDoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.DoubleValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.DoubleValue: proguard.evaluation.value.DoubleValue subtract(proguard.evaluation.value.ParticularDoubleValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.DoubleValue subtractFrom(proguard.evaluation.value.ParticularDoubleValue)
    {
        proguard.evaluation.value.ParticularDoubleValue r0, $r1, $r2;
        double $d0, $d1;

        r0 := @this: proguard.evaluation.value.ParticularDoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularDoubleValue;

        $r2 = new proguard.evaluation.value.ParticularDoubleValue;

        $d1 = $r1.<proguard.evaluation.value.ParticularDoubleValue: double value>;

        $d0 = r0.<proguard.evaluation.value.ParticularDoubleValue: double value>;

        $d0 = $d1 - $d0;

        specialinvoke $r2.<proguard.evaluation.value.ParticularDoubleValue: void <init>(double)>($d0);

        return $r2;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuffer $r1;
        proguard.evaluation.value.ParticularDoubleValue r0;
        java.lang.String $r2;
        double $d0;

        r0 := @this: proguard.evaluation.value.ParticularDoubleValue;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $d0 = r0.<proguard.evaluation.value.ParticularDoubleValue: double value>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(double)>($d0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("d");

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    public double value()
    {
        proguard.evaluation.value.ParticularDoubleValue r0;
        double d0;

        r0 := @this: proguard.evaluation.value.ParticularDoubleValue;

        d0 = r0.<proguard.evaluation.value.ParticularDoubleValue: double value>;

        return d0;
    }
}
