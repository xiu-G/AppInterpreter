public class com.hp.hpl.sparta.xpath.Step extends java.lang.Object
{
    public static com.hp.hpl.sparta.xpath.Step DOT;
    private final boolean multiLevel_;
    private final com.hp.hpl.sparta.xpath.NodeTest nodeTest_;
    private final com.hp.hpl.sparta.xpath.BooleanExpr predicate_;

    static void <clinit>()
    {
        com.hp.hpl.sparta.xpath.Step $r0;
        com.hp.hpl.sparta.xpath.TrueExpr $r2;
        com.hp.hpl.sparta.xpath.ThisNodeTest $r1;

        $r0 = new com.hp.hpl.sparta.xpath.Step;

        $r1 = <com.hp.hpl.sparta.xpath.ThisNodeTest: com.hp.hpl.sparta.xpath.ThisNodeTest INSTANCE>;

        $r2 = <com.hp.hpl.sparta.xpath.TrueExpr: com.hp.hpl.sparta.xpath.TrueExpr INSTANCE>;

        specialinvoke $r0.<com.hp.hpl.sparta.xpath.Step: void <init>(com.hp.hpl.sparta.xpath.NodeTest,com.hp.hpl.sparta.xpath.BooleanExpr)>($r1, $r2);

        <com.hp.hpl.sparta.xpath.Step: com.hp.hpl.sparta.xpath.Step DOT> = $r0;

        return;
    }

    void <init>(com.hp.hpl.sparta.xpath.NodeTest, com.hp.hpl.sparta.xpath.BooleanExpr)
    {
        com.hp.hpl.sparta.xpath.NodeTest $r1;
        com.hp.hpl.sparta.xpath.BooleanExpr $r2;
        com.hp.hpl.sparta.xpath.Step r0;

        r0 := @this: com.hp.hpl.sparta.xpath.Step;

        $r1 := @parameter0: com.hp.hpl.sparta.xpath.NodeTest;

        $r2 := @parameter1: com.hp.hpl.sparta.xpath.BooleanExpr;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.sparta.xpath.Step: com.hp.hpl.sparta.xpath.NodeTest nodeTest_> = $r1;

        r0.<com.hp.hpl.sparta.xpath.Step: com.hp.hpl.sparta.xpath.BooleanExpr predicate_> = $r2;

        r0.<com.hp.hpl.sparta.xpath.Step: boolean multiLevel_> = 0;

        return;
    }

    void <init>(com.hp.hpl.sparta.xpath.XPath, boolean, com.hp.hpl.sparta.xpath.SimpleStreamTokenizer) throws com.hp.hpl.sparta.xpath.XPathException, java.io.IOException
    {
        com.hp.hpl.sparta.xpath.BooleanExpr $r4;
        com.hp.hpl.sparta.xpath.XPathException $r10;
        com.hp.hpl.sparta.xpath.ThisNodeTest $r5;
        com.hp.hpl.sparta.xpath.SimpleStreamTokenizer $r2;
        int $i0, $i1;
        java.lang.String $r7;
        com.hp.hpl.sparta.xpath.Step r0;
        com.hp.hpl.sparta.xpath.TrueExpr $r9;
        boolean $z0;
        com.hp.hpl.sparta.xpath.TextTest $r8;
        com.hp.hpl.sparta.xpath.ElementTest $r12;
        com.hp.hpl.sparta.xpath.AllElementTest $r6;
        com.hp.hpl.sparta.xpath.XPath $r1;
        com.hp.hpl.sparta.xpath.ParentNodeTest $r3;
        com.hp.hpl.sparta.xpath.AttrTest $r11;

        r0 := @this: com.hp.hpl.sparta.xpath.Step;

        $r1 := @parameter0: com.hp.hpl.sparta.xpath.XPath;

        $z0 := @parameter1: boolean;

        $r2 := @parameter2: com.hp.hpl.sparta.xpath.SimpleStreamTokenizer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.sparta.xpath.Step: boolean multiLevel_> = $z0;

        $i0 = $r2.<com.hp.hpl.sparta.xpath.SimpleStreamTokenizer: int ttype>;

        lookupswitch($i0)
        {
            case -3: goto label08;
            case 42: goto label05;
            case 46: goto label02;
            case 64: goto label06;
            default: goto label01;
        };

     label01:
        $r10 = new com.hp.hpl.sparta.xpath.XPathException;

        specialinvoke $r10.<com.hp.hpl.sparta.xpath.XPathException: void <init>(com.hp.hpl.sparta.xpath.XPath,java.lang.String,com.hp.hpl.sparta.xpath.SimpleStreamTokenizer,java.lang.String)>($r1, "at begininning of step", $r2, "\'.\' or \'*\' or name");

        throw $r10;

     label02:
        $i0 = virtualinvoke $r2.<com.hp.hpl.sparta.xpath.SimpleStreamTokenizer: int nextToken()>();

        if $i0 != 46 goto label04;

        $r3 = <com.hp.hpl.sparta.xpath.ParentNodeTest: com.hp.hpl.sparta.xpath.ParentNodeTest INSTANCE>;

        r0.<com.hp.hpl.sparta.xpath.Step: com.hp.hpl.sparta.xpath.NodeTest nodeTest_> = $r3;

     label03:
        $i0 = virtualinvoke $r2.<com.hp.hpl.sparta.xpath.SimpleStreamTokenizer: int nextToken()>();

        if $i0 != 91 goto label13;

        virtualinvoke $r2.<com.hp.hpl.sparta.xpath.SimpleStreamTokenizer: int nextToken()>();

        $r4 = staticinvoke <com.hp.hpl.sparta.xpath.ExprFactory: com.hp.hpl.sparta.xpath.BooleanExpr createExpr(com.hp.hpl.sparta.xpath.XPath,com.hp.hpl.sparta.xpath.SimpleStreamTokenizer)>($r1, $r2);

        r0.<com.hp.hpl.sparta.xpath.Step: com.hp.hpl.sparta.xpath.BooleanExpr predicate_> = $r4;

        $i0 = $r2.<com.hp.hpl.sparta.xpath.SimpleStreamTokenizer: int ttype>;

        if $i0 == 93 goto label12;

        $r10 = new com.hp.hpl.sparta.xpath.XPathException;

        specialinvoke $r10.<com.hp.hpl.sparta.xpath.XPathException: void <init>(com.hp.hpl.sparta.xpath.XPath,java.lang.String,com.hp.hpl.sparta.xpath.SimpleStreamTokenizer,java.lang.String)>($r1, "after predicate expression", $r2, "]");

        throw $r10;

     label04:
        virtualinvoke $r2.<com.hp.hpl.sparta.xpath.SimpleStreamTokenizer: void pushBack()>();

        $r5 = <com.hp.hpl.sparta.xpath.ThisNodeTest: com.hp.hpl.sparta.xpath.ThisNodeTest INSTANCE>;

        r0.<com.hp.hpl.sparta.xpath.Step: com.hp.hpl.sparta.xpath.NodeTest nodeTest_> = $r5;

        goto label03;

     label05:
        $r6 = <com.hp.hpl.sparta.xpath.AllElementTest: com.hp.hpl.sparta.xpath.AllElementTest INSTANCE>;

        r0.<com.hp.hpl.sparta.xpath.Step: com.hp.hpl.sparta.xpath.NodeTest nodeTest_> = $r6;

        goto label03;

     label06:
        $i0 = virtualinvoke $r2.<com.hp.hpl.sparta.xpath.SimpleStreamTokenizer: int nextToken()>();

        $i1 = -3;

        if $i0 == $i1 goto label07;

        $r10 = new com.hp.hpl.sparta.xpath.XPathException;

        specialinvoke $r10.<com.hp.hpl.sparta.xpath.XPathException: void <init>(com.hp.hpl.sparta.xpath.XPath,java.lang.String,com.hp.hpl.sparta.xpath.SimpleStreamTokenizer,java.lang.String)>($r1, "after @ in node test", $r2, "name");

        throw $r10;

     label07:
        $r11 = new com.hp.hpl.sparta.xpath.AttrTest;

        $r7 = $r2.<com.hp.hpl.sparta.xpath.SimpleStreamTokenizer: java.lang.String sval>;

        specialinvoke $r11.<com.hp.hpl.sparta.xpath.AttrTest: void <init>(java.lang.String)>($r7);

        r0.<com.hp.hpl.sparta.xpath.Step: com.hp.hpl.sparta.xpath.NodeTest nodeTest_> = $r11;

        goto label03;

     label08:
        $r7 = $r2.<com.hp.hpl.sparta.xpath.SimpleStreamTokenizer: java.lang.String sval>;

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("text");

        if $z0 == 0 goto label11;

        $i0 = virtualinvoke $r2.<com.hp.hpl.sparta.xpath.SimpleStreamTokenizer: int nextToken()>();

        if $i0 != 40 goto label09;

        $i0 = virtualinvoke $r2.<com.hp.hpl.sparta.xpath.SimpleStreamTokenizer: int nextToken()>();

        if $i0 == 41 goto label10;

     label09:
        $r10 = new com.hp.hpl.sparta.xpath.XPathException;

        specialinvoke $r10.<com.hp.hpl.sparta.xpath.XPathException: void <init>(com.hp.hpl.sparta.xpath.XPath,java.lang.String,com.hp.hpl.sparta.xpath.SimpleStreamTokenizer,java.lang.String)>($r1, "after text", $r2, "()");

        throw $r10;

     label10:
        $r8 = <com.hp.hpl.sparta.xpath.TextTest: com.hp.hpl.sparta.xpath.TextTest INSTANCE>;

        r0.<com.hp.hpl.sparta.xpath.Step: com.hp.hpl.sparta.xpath.NodeTest nodeTest_> = $r8;

        goto label03;

     label11:
        $r12 = new com.hp.hpl.sparta.xpath.ElementTest;

        $r7 = $r2.<com.hp.hpl.sparta.xpath.SimpleStreamTokenizer: java.lang.String sval>;

        specialinvoke $r12.<com.hp.hpl.sparta.xpath.ElementTest: void <init>(java.lang.String)>($r7);

        r0.<com.hp.hpl.sparta.xpath.Step: com.hp.hpl.sparta.xpath.NodeTest nodeTest_> = $r12;

        goto label03;

     label12:
        virtualinvoke $r2.<com.hp.hpl.sparta.xpath.SimpleStreamTokenizer: int nextToken()>();

        return;

     label13:
        $r9 = <com.hp.hpl.sparta.xpath.TrueExpr: com.hp.hpl.sparta.xpath.TrueExpr INSTANCE>;

        r0.<com.hp.hpl.sparta.xpath.Step: com.hp.hpl.sparta.xpath.BooleanExpr predicate_> = $r9;

        return;
    }

    public com.hp.hpl.sparta.xpath.NodeTest getNodeTest()
    {
        com.hp.hpl.sparta.xpath.NodeTest r1;
        com.hp.hpl.sparta.xpath.Step r0;

        r0 := @this: com.hp.hpl.sparta.xpath.Step;

        r1 = r0.<com.hp.hpl.sparta.xpath.Step: com.hp.hpl.sparta.xpath.NodeTest nodeTest_>;

        return r1;
    }

    public com.hp.hpl.sparta.xpath.BooleanExpr getPredicate()
    {
        com.hp.hpl.sparta.xpath.BooleanExpr r1;
        com.hp.hpl.sparta.xpath.Step r0;

        r0 := @this: com.hp.hpl.sparta.xpath.Step;

        r1 = r0.<com.hp.hpl.sparta.xpath.Step: com.hp.hpl.sparta.xpath.BooleanExpr predicate_>;

        return r1;
    }

    public boolean isMultiLevel()
    {
        com.hp.hpl.sparta.xpath.Step r0;
        boolean z0;

        r0 := @this: com.hp.hpl.sparta.xpath.Step;

        z0 = r0.<com.hp.hpl.sparta.xpath.Step: boolean multiLevel_>;

        return z0;
    }

    public boolean isStringValue()
    {
        com.hp.hpl.sparta.xpath.NodeTest $r1;
        com.hp.hpl.sparta.xpath.Step r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.xpath.Step;

        $r1 = r0.<com.hp.hpl.sparta.xpath.Step: com.hp.hpl.sparta.xpath.NodeTest nodeTest_>;

        $z0 = virtualinvoke $r1.<com.hp.hpl.sparta.xpath.NodeTest: boolean isStringValue()>();

        return $z0;
    }

    public java.lang.String toString()
    {
        com.hp.hpl.sparta.xpath.NodeTest $r2;
        com.hp.hpl.sparta.xpath.BooleanExpr $r4;
        java.lang.StringBuffer $r1;
        java.lang.String $r3;
        com.hp.hpl.sparta.xpath.Step r0;

        r0 := @this: com.hp.hpl.sparta.xpath.Step;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = r0.<com.hp.hpl.sparta.xpath.Step: com.hp.hpl.sparta.xpath.NodeTest nodeTest_>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r4 = r0.<com.hp.hpl.sparta.xpath.Step: com.hp.hpl.sparta.xpath.BooleanExpr predicate_>;

        $r3 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }
}
