public class org.jsoup.nodes.Entities extends java.lang.Object
{
    private static final java.util.Map base;
    private static final java.util.Map baseByVal;
    private static final java.util.Map full;
    private static final java.util.Map fullByVal;
    private static final java.util.regex.Pattern strictUnescapePattern;
    private static final java.util.regex.Pattern unescapePattern;
    private static final java.lang.Object[][] xhtmlArray;
    private static final java.util.Map xhtmlByVal;

    static void <clinit>()
    {
        java.lang.Object[] r1;
        java.util.HashMap $r4;
        char $c3;
        java.lang.Integer $r3;
        java.lang.Object[][] r0;
        java.lang.Character $r7;
        java.util.Map $r5;
        int i0, i1, $i2;
        java.lang.Object $r6;
        java.util.regex.Pattern $r2;
        java.lang.String $r8;

        $r2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("&(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+\\d*);?");

        <org.jsoup.nodes.Entities: java.util.regex.Pattern unescapePattern> = $r2;

        $r2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("&(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+\\d*);");

        <org.jsoup.nodes.Entities: java.util.regex.Pattern strictUnescapePattern> = $r2;

        r0 = newarray (java.lang.Object[])[5];

        r1 = newarray (java.lang.Object)[2];

        r1[0] = "quot";

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(34);

        r1[1] = $r3;

        r0[0] = r1;

        r1 = newarray (java.lang.Object)[2];

        r1[0] = "amp";

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(38);

        r1[1] = $r3;

        r0[1] = r1;

        r1 = newarray (java.lang.Object)[2];

        r1[0] = "apos";

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(39);

        r1[1] = $r3;

        r0[2] = r1;

        r1 = newarray (java.lang.Object)[2];

        r1[0] = "lt";

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(60);

        r1[1] = $r3;

        r0[3] = r1;

        r1 = newarray (java.lang.Object)[2];

        r1[0] = "gt";

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(62);

        r1[1] = $r3;

        r0[4] = r1;

        <org.jsoup.nodes.Entities: java.lang.Object[][] xhtmlArray> = r0;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        <org.jsoup.nodes.Entities: java.util.Map xhtmlByVal> = $r4;

        $r5 = staticinvoke <org.jsoup.nodes.Entities: java.util.Map loadEntities(java.lang.String)>("entities-base.properties");

        <org.jsoup.nodes.Entities: java.util.Map base> = $r5;

        $r5 = <org.jsoup.nodes.Entities: java.util.Map base>;

        $r5 = staticinvoke <org.jsoup.nodes.Entities: java.util.Map toCharacterKey(java.util.Map)>($r5);

        <org.jsoup.nodes.Entities: java.util.Map baseByVal> = $r5;

        $r5 = staticinvoke <org.jsoup.nodes.Entities: java.util.Map loadEntities(java.lang.String)>("entities-full.properties");

        <org.jsoup.nodes.Entities: java.util.Map full> = $r5;

        $r5 = <org.jsoup.nodes.Entities: java.util.Map full>;

        $r5 = staticinvoke <org.jsoup.nodes.Entities: java.util.Map toCharacterKey(java.util.Map)>($r5);

        <org.jsoup.nodes.Entities: java.util.Map fullByVal> = $r5;

        r0 = <org.jsoup.nodes.Entities: java.lang.Object[][] xhtmlArray>;

        i0 = lengthof r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r1 = r0[i1];

        $r6 = r1[1];

        $r3 = (java.lang.Integer) $r6;

        $i2 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        $c3 = (char) $i2;

        $r7 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c3);

        $r5 = <org.jsoup.nodes.Entities: java.util.Map xhtmlByVal>;

        $r6 = r1[0];

        $r8 = (java.lang.String) $r6;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r8);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private void <init>()
    {
        org.jsoup.nodes.Entities r0;

        r0 := @this: org.jsoup.nodes.Entities;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static java.util.Map access$000()
    {
        java.util.Map r0;

        r0 = <org.jsoup.nodes.Entities: java.util.Map xhtmlByVal>;

        return r0;
    }

    static java.util.Map access$100()
    {
        java.util.Map r0;

        r0 = <org.jsoup.nodes.Entities: java.util.Map baseByVal>;

        return r0;
    }

    static java.util.Map access$200()
    {
        java.util.Map r0;

        r0 = <org.jsoup.nodes.Entities: java.util.Map fullByVal>;

        return r0;
    }

    static java.lang.String escape(java.lang.String, java.nio.charset.CharsetEncoder, org.jsoup.nodes.Entities$EscapeMode)
    {
        org.jsoup.nodes.Entities$EscapeMode $r2;
        char c3;
        java.lang.Character $r5;
        java.nio.charset.CharsetEncoder $r1;
        java.util.Map $r4;
        int $i0, i1, $i2;
        char[] $r9;
        java.lang.StringBuilder r3, $r6;
        java.lang.Object $r7;
        java.lang.String $r0, $r8;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.nio.charset.CharsetEncoder;

        $r2 := @parameter2: org.jsoup.nodes.Entities$EscapeMode;

        r3 = new java.lang.StringBuilder;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i0 = $i0 * 2;

        specialinvoke r3.<java.lang.StringBuilder: void <init>(int)>($i0);

        $r4 = virtualinvoke $r2.<org.jsoup.nodes.Entities$EscapeMode: java.util.Map getMap()>();

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        i1 = 0;

     label1:
        if i1 >= $i0 goto label7;

        $i2 = virtualinvoke $r0.<java.lang.String: int codePointAt(int)>(i1);

        if $i2 >= 65536 goto label5;

        c3 = (char) $i2;

        $r5 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c3);

        $z0 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>($r5);

        if $z0 == 0 goto label3;

        $r6 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(38);

        $r5 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c3);

        $r7 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        $r8 = (java.lang.String) $r7;

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(59);

     label2:
        $i2 = staticinvoke <java.lang.Character: int charCount(int)>($i2);

        i1 = i1 + $i2;

        goto label1;

     label3:
        $z0 = virtualinvoke $r1.<java.nio.charset.CharsetEncoder: boolean canEncode(char)>(c3);

        if $z0 == 0 goto label4;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c3);

        goto label2;

     label4:
        $r6 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&#x");

        $r8 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i2);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(59);

        goto label2;

     label5:
        $r8 = new java.lang.String;

        $r9 = staticinvoke <java.lang.Character: char[] toChars(int)>($i2);

        specialinvoke $r8.<java.lang.String: void <init>(char[])>($r9);

        $z0 = virtualinvoke $r1.<java.nio.charset.CharsetEncoder: boolean canEncode(java.lang.CharSequence)>($r8);

        if $z0 == 0 goto label6;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        goto label2;

     label6:
        $r6 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&#x");

        $r8 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i2);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(59);

        goto label2;

     label7:
        $r0 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;
    }

    static java.lang.String escape(java.lang.String, org.jsoup.nodes.Document$OutputSettings)
    {
        org.jsoup.nodes.Document$OutputSettings $r1;
        java.nio.charset.CharsetEncoder $r2;
        org.jsoup.nodes.Entities$EscapeMode $r3;
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: org.jsoup.nodes.Document$OutputSettings;

        $r2 = virtualinvoke $r1.<org.jsoup.nodes.Document$OutputSettings: java.nio.charset.CharsetEncoder encoder()>();

        $r3 = virtualinvoke $r1.<org.jsoup.nodes.Document$OutputSettings: org.jsoup.nodes.Entities$EscapeMode escapeMode()>();

        $r0 = staticinvoke <org.jsoup.nodes.Entities: java.lang.String escape(java.lang.String,java.nio.charset.CharsetEncoder,org.jsoup.nodes.Entities$EscapeMode)>($r0, $r2, $r3);

        return $r0;
    }

    public static java.lang.Character getCharacterByName(java.lang.String)
    {
        java.lang.Character $r3;
        java.util.Map $r2;
        java.lang.Object $r1;
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        $r2 = <org.jsoup.nodes.Entities: java.util.Map full>;

        $r1 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        $r3 = (java.lang.Character) $r1;

        return $r3;
    }

    public static boolean isBaseNamedEntity(java.lang.String)
    {
        java.lang.String $r0;
        boolean $z0;
        java.util.Map $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = <org.jsoup.nodes.Entities: java.util.Map base>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r0);

        return $z0;
    }

    public static boolean isNamedEntity(java.lang.String)
    {
        java.lang.String $r0;
        boolean $z0;
        java.util.Map $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = <org.jsoup.nodes.Entities: java.util.Map full>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r0);

        return $z0;
    }

    private static java.util.Map loadEntities(java.lang.String)
    {
        java.lang.Throwable r1;
        java.util.HashMap r2, $r14;
        java.lang.Character $r10;
        int $i0;
        java.lang.String $r0, $r12;
        boolean $z0;
        java.util.Map$Entry r9;
        java.util.Properties r3, $r13;
        java.util.Iterator $r7;
        java.util.Set $r6;
        java.util.MissingResourceException $r16;
        char $c1;
        java.io.IOException $r17;
        java.lang.Class $r4;
        java.lang.Object $r8;
        java.lang.StringBuilder $r11, $r15;
        java.io.InputStream $r5;

        $r0 := @parameter0: java.lang.String;

        $r13 = new java.util.Properties;

        r3 = $r13;

        specialinvoke $r13.<java.util.Properties: void <init>()>();

        $r14 = new java.util.HashMap;

        r2 = $r14;

        specialinvoke $r14.<java.util.HashMap: void <init>()>();

        $r4 = class "Lorg/jsoup/nodes/Entities;";

     label1:
        $r5 = virtualinvoke $r4.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>($r0);

        virtualinvoke r3.<java.util.Properties: void load(java.io.InputStream)>($r5);

        virtualinvoke $r5.<java.io.InputStream: void close()>();

     label2:
        $r6 = virtualinvoke r3.<java.util.Properties: java.util.Set entrySet()>();

        $r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (java.util.Map$Entry) $r8;

        $r8 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r0 = (java.lang.String) $r8;

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r0, 16);

        $c1 = (char) $i0;

        $r10 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c1);

        $r8 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r0 = (java.lang.String) $r8;

        interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r0, $r10);

        goto label3;

     label4:
        r1 := @caughtexception;

        $r16 = new java.util.MissingResourceException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error loading entities resource: ");

        $r17 = (java.io.IOException) r1;

        $r12 = virtualinvoke $r17.<java.io.IOException: java.lang.String getMessage()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.util.MissingResourceException: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r12, "Entities", $r0);

        throw $r16;

     label5:
        return r2;

        catch java.io.IOException from label1 to label2 with label4;
    }

    private static java.util.Map toCharacterKey(java.util.Map)
    {
        java.util.Map$Entry r5;
        java.util.Iterator $r3;
        java.util.Set $r2;
        java.util.HashMap r1;
        java.lang.Character r6;
        java.util.Map r0;
        java.lang.Object $r4;
        java.lang.String r7, $r8;
        boolean $z0;

        r0 := @parameter0: java.util.Map;

        r1 = new java.util.HashMap;

        specialinvoke r1.<java.util.HashMap: void <init>()>();

        $r2 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r4 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        r6 = (java.lang.Character) $r4;

        $r4 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        r7 = (java.lang.String) $r4;

        $z0 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r6);

        if $z0 == 0 goto label2;

        $r8 = virtualinvoke r7.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r7);

        if $z0 == 0 goto label1;

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, r7);

        goto label1;

     label2:
        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, r7);

        goto label1;

     label3:
        return r1;
    }

    static java.lang.String unescape(java.lang.String)
    {
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        $r0 = staticinvoke <org.jsoup.nodes.Entities: java.lang.String unescape(java.lang.String,boolean)>($r0, 0);

        return $r0;
    }

    static java.lang.String unescape(java.lang.String, boolean)
    {
        java.lang.String $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $r0 = staticinvoke <org.jsoup.parser.Parser: java.lang.String unescapeEntities(java.lang.String,boolean)>($r0, $z0);

        return $r0;
    }
}
