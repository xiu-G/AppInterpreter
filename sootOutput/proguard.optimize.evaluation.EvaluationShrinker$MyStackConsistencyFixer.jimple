class proguard.optimize.evaluation.EvaluationShrinker$MyStackConsistencyFixer extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.instruction.visitor.InstructionVisitor
{
    private final proguard.optimize.evaluation.EvaluationShrinker this$0;

    private void <init>(proguard.optimize.evaluation.EvaluationShrinker)
    {
        proguard.optimize.evaluation.EvaluationShrinker $r1;
        proguard.optimize.evaluation.EvaluationShrinker$MyStackConsistencyFixer r0;

        r0 := @this: proguard.optimize.evaluation.EvaluationShrinker$MyStackConsistencyFixer;

        $r1 := @parameter0: proguard.optimize.evaluation.EvaluationShrinker;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        r0.<proguard.optimize.evaluation.EvaluationShrinker$MyStackConsistencyFixer: proguard.optimize.evaluation.EvaluationShrinker this$0> = $r1;

        return;
    }

    void <init>(proguard.optimize.evaluation.EvaluationShrinker, proguard.optimize.evaluation.EvaluationShrinker$1)
    {
        proguard.optimize.evaluation.EvaluationShrinker $r1;
        proguard.optimize.evaluation.EvaluationShrinker$1 $r2;
        proguard.optimize.evaluation.EvaluationShrinker$MyStackConsistencyFixer r0;

        r0 := @this: proguard.optimize.evaluation.EvaluationShrinker$MyStackConsistencyFixer;

        $r1 := @parameter0: proguard.optimize.evaluation.EvaluationShrinker;

        $r2 := @parameter1: proguard.optimize.evaluation.EvaluationShrinker$1;

        specialinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker$MyStackConsistencyFixer: void <init>(proguard.optimize.evaluation.EvaluationShrinker)>($r1);

        return;
    }

    public void visitAnyInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.Instruction)
    {
        proguard.optimize.evaluation.EvaluationShrinker $r5;
        proguard.optimize.evaluation.PartialEvaluator $r6;
        byte $b6;
        proguard.classfile.Clazz $r1;
        java.lang.StringBuffer $r11;
        proguard.evaluation.value.InstructionOffsetValue $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String $r12;
        proguard.evaluation.value.Value $r8;
        boolean $z0;
        proguard.evaluation.TracedStack $r7;
        java.lang.IllegalArgumentException $r10;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.instruction.Instruction $r4;
        proguard.classfile.Method $r2;
        proguard.optimize.evaluation.EvaluationShrinker$MyStackConsistencyFixer r0;

        r0 := @this: proguard.optimize.evaluation.EvaluationShrinker$MyStackConsistencyFixer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.Instruction;

        $r5 = r0.<proguard.optimize.evaluation.EvaluationShrinker$MyStackConsistencyFixer: proguard.optimize.evaluation.EvaluationShrinker this$0>;

        $z0 = staticinvoke <proguard.optimize.evaluation.EvaluationShrinker: boolean access$1500(proguard.optimize.evaluation.EvaluationShrinker,int)>($r5, $i0);

        if $z0 == 0 goto label11;

        $i1 = virtualinvoke $r4.<proguard.classfile.instruction.Instruction: int stackPopCount(proguard.classfile.Clazz)>($r1);

        if $i1 <= 0 goto label07;

        $r5 = r0.<proguard.optimize.evaluation.EvaluationShrinker$MyStackConsistencyFixer: proguard.optimize.evaluation.EvaluationShrinker this$0>;

        $r6 = staticinvoke <proguard.optimize.evaluation.EvaluationShrinker: proguard.optimize.evaluation.PartialEvaluator access$500(proguard.optimize.evaluation.EvaluationShrinker)>($r5);

        $r7 = virtualinvoke $r6.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedStack getStackBefore(int)>($i0);

        $i2 = virtualinvoke $r7.<proguard.evaluation.TracedStack: int size()>();

        $i2 = $i2 - 1;

        $i3 = 0;

        $i4 = 0;

     label01:
        if $i3 >= $i1 goto label03;

        $r5 = r0.<proguard.optimize.evaluation.EvaluationShrinker$MyStackConsistencyFixer: proguard.optimize.evaluation.EvaluationShrinker this$0>;

        $i5 = $i2 - $i3;

        $z0 = staticinvoke <proguard.optimize.evaluation.EvaluationShrinker: boolean access$1600(proguard.optimize.evaluation.EvaluationShrinker,int,int)>($r5, $i0, $i5);

        if $z0 != 0 goto label02;

        $r5 = r0.<proguard.optimize.evaluation.EvaluationShrinker$MyStackConsistencyFixer: proguard.optimize.evaluation.EvaluationShrinker this$0>;

        $r8 = virtualinvoke $r7.<proguard.evaluation.TracedStack: proguard.evaluation.value.Value getTopProducerValue(int)>($i3);

        $r9 = virtualinvoke $r8.<proguard.evaluation.value.Value: proguard.evaluation.value.InstructionOffsetValue instructionOffsetValue()>();

        $i5 = $i2 - $i3;

        $z0 = staticinvoke <proguard.optimize.evaluation.EvaluationShrinker: boolean access$1700(proguard.optimize.evaluation.EvaluationShrinker,proguard.evaluation.value.InstructionOffsetValue,int)>($r5, $r9, $i5);

        if $z0 != 0 goto label02;

        $i4 = $i4 + 1;

     label02:
        $i3 = $i3 + 1;

        goto label01;

     label03:
        if $i4 <= 0 goto label07;

        $z0 = virtualinvoke $r4.<proguard.classfile.instruction.Instruction: boolean isCategory2()>();

        if $z0 == 0 goto label05;

        $b6 = 2;

     label04:
        if $i4 <= $b6 goto label06;

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unsupported stack size increment [");

        $r11 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i4);

        $r11 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r10;

     label05:
        $b6 = 1;

        goto label04;

     label06:
        $r5 = r0.<proguard.optimize.evaluation.EvaluationShrinker$MyStackConsistencyFixer: proguard.optimize.evaluation.EvaluationShrinker this$0>;

        $r8 = virtualinvoke $r7.<proguard.evaluation.TracedStack: proguard.evaluation.value.Value getTop(int)>(0);

        $i1 = virtualinvoke $r8.<proguard.evaluation.value.Value: int computationalType()>();

        staticinvoke <proguard.optimize.evaluation.EvaluationShrinker: void access$1800(proguard.optimize.evaluation.EvaluationShrinker,int,boolean,int)>($r5, $i0, 0, $i1);

     label07:
        $i1 = virtualinvoke $r4.<proguard.classfile.instruction.Instruction: int stackPushCount(proguard.classfile.Clazz)>($r1);

        if $i1 <= 0 goto label19;

        $r5 = r0.<proguard.optimize.evaluation.EvaluationShrinker$MyStackConsistencyFixer: proguard.optimize.evaluation.EvaluationShrinker this$0>;

        $r6 = staticinvoke <proguard.optimize.evaluation.EvaluationShrinker: proguard.optimize.evaluation.PartialEvaluator access$500(proguard.optimize.evaluation.EvaluationShrinker)>($r5);

        $r7 = virtualinvoke $r6.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedStack getStackAfter(int)>($i0);

        $i2 = virtualinvoke $r7.<proguard.evaluation.TracedStack: int size()>();

        $i2 = $i2 - 1;

        $i3 = 0;

        $i4 = 0;

     label08:
        if $i3 >= $i1 goto label10;

        $r5 = r0.<proguard.optimize.evaluation.EvaluationShrinker$MyStackConsistencyFixer: proguard.optimize.evaluation.EvaluationShrinker this$0>;

        $i5 = $i2 - $i3;

        $z0 = staticinvoke <proguard.optimize.evaluation.EvaluationShrinker: boolean access$1900(proguard.optimize.evaluation.EvaluationShrinker,int,int)>($r5, $i0, $i5);

        if $z0 != 0 goto label09;

        $i4 = $i4 + 1;

     label09:
        $i3 = $i3 + 1;

        goto label08;

     label10:
        if $i4 <= 0 goto label19;

        $r5 = r0.<proguard.optimize.evaluation.EvaluationShrinker$MyStackConsistencyFixer: proguard.optimize.evaluation.EvaluationShrinker this$0>;

        staticinvoke <proguard.optimize.evaluation.EvaluationShrinker: void access$2000(proguard.optimize.evaluation.EvaluationShrinker,int,boolean,int)>($r5, $i0, 0, $i4);

        return;

     label11:
        $i1 = virtualinvoke $r4.<proguard.classfile.instruction.Instruction: int stackPopCount(proguard.classfile.Clazz)>($r1);

        if $i1 <= 0 goto label15;

        $r5 = r0.<proguard.optimize.evaluation.EvaluationShrinker$MyStackConsistencyFixer: proguard.optimize.evaluation.EvaluationShrinker this$0>;

        $r6 = staticinvoke <proguard.optimize.evaluation.EvaluationShrinker: proguard.optimize.evaluation.PartialEvaluator access$500(proguard.optimize.evaluation.EvaluationShrinker)>($r5);

        $r7 = virtualinvoke $r6.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedStack getStackBefore(int)>($i0);

        $i2 = virtualinvoke $r7.<proguard.evaluation.TracedStack: int size()>();

        $i2 = $i2 - 1;

        $i3 = 0;

        $i4 = 0;

     label12:
        if $i3 >= $i1 goto label14;

        $r5 = r0.<proguard.optimize.evaluation.EvaluationShrinker$MyStackConsistencyFixer: proguard.optimize.evaluation.EvaluationShrinker this$0>;

        $r8 = virtualinvoke $r7.<proguard.evaluation.TracedStack: proguard.evaluation.value.Value getTopProducerValue(int)>($i3);

        $r9 = virtualinvoke $r8.<proguard.evaluation.value.Value: proguard.evaluation.value.InstructionOffsetValue instructionOffsetValue()>();

        $i5 = $i2 - $i3;

        $z0 = staticinvoke <proguard.optimize.evaluation.EvaluationShrinker: boolean access$1700(proguard.optimize.evaluation.EvaluationShrinker,proguard.evaluation.value.InstructionOffsetValue,int)>($r5, $r9, $i5);

        if $z0 == 0 goto label13;

        $i4 = $i4 + 1;

     label13:
        $i3 = $i3 + 1;

        goto label12;

     label14:
        if $i4 <= 0 goto label15;

        $r5 = r0.<proguard.optimize.evaluation.EvaluationShrinker$MyStackConsistencyFixer: proguard.optimize.evaluation.EvaluationShrinker this$0>;

        staticinvoke <proguard.optimize.evaluation.EvaluationShrinker: void access$2000(proguard.optimize.evaluation.EvaluationShrinker,int,boolean,int)>($r5, $i0, 1, $i4);

     label15:
        $i1 = virtualinvoke $r4.<proguard.classfile.instruction.Instruction: int stackPushCount(proguard.classfile.Clazz)>($r1);

        if $i1 <= 0 goto label19;

        $r5 = r0.<proguard.optimize.evaluation.EvaluationShrinker$MyStackConsistencyFixer: proguard.optimize.evaluation.EvaluationShrinker this$0>;

        $r6 = staticinvoke <proguard.optimize.evaluation.EvaluationShrinker: proguard.optimize.evaluation.PartialEvaluator access$500(proguard.optimize.evaluation.EvaluationShrinker)>($r5);

        $r7 = virtualinvoke $r6.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedStack getStackAfter(int)>($i0);

        $i2 = virtualinvoke $r7.<proguard.evaluation.TracedStack: int size()>();

        $i2 = $i2 - 1;

        $i3 = 0;

        $i4 = 0;

     label16:
        if $i3 >= $i1 goto label18;

        $r5 = r0.<proguard.optimize.evaluation.EvaluationShrinker$MyStackConsistencyFixer: proguard.optimize.evaluation.EvaluationShrinker this$0>;

        $i5 = $i2 - $i3;

        $z0 = staticinvoke <proguard.optimize.evaluation.EvaluationShrinker: boolean access$1900(proguard.optimize.evaluation.EvaluationShrinker,int,int)>($r5, $i0, $i5);

        if $z0 == 0 goto label17;

        $i4 = $i4 + 1;

     label17:
        $i3 = $i3 + 1;

        goto label16;

     label18:
        if $i4 <= 0 goto label19;

        $r5 = r0.<proguard.optimize.evaluation.EvaluationShrinker$MyStackConsistencyFixer: proguard.optimize.evaluation.EvaluationShrinker this$0>;

        $r8 = virtualinvoke $r7.<proguard.evaluation.TracedStack: proguard.evaluation.value.Value getTop(int)>(0);

        $i1 = virtualinvoke $r8.<proguard.evaluation.value.Value: int computationalType()>();

        staticinvoke <proguard.optimize.evaluation.EvaluationShrinker: void access$1800(proguard.optimize.evaluation.EvaluationShrinker,int,boolean,int)>($r5, $i0, 1, $i1);

     label19:
        return;
    }

    public void visitSimpleInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.SimpleInstruction)
    {
        proguard.optimize.evaluation.EvaluationShrinker $r5;
        proguard.classfile.instruction.SimpleInstruction $r4;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.Method $r2;
        proguard.optimize.evaluation.EvaluationShrinker$MyStackConsistencyFixer r0;
        boolean $z0;

        r0 := @this: proguard.optimize.evaluation.EvaluationShrinker$MyStackConsistencyFixer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.SimpleInstruction;

        $r5 = r0.<proguard.optimize.evaluation.EvaluationShrinker$MyStackConsistencyFixer: proguard.optimize.evaluation.EvaluationShrinker this$0>;

        $z0 = staticinvoke <proguard.optimize.evaluation.EvaluationShrinker: boolean access$1500(proguard.optimize.evaluation.EvaluationShrinker,int)>($r5, $i0);

        if $z0 == 0 goto label1;

        $r5 = r0.<proguard.optimize.evaluation.EvaluationShrinker$MyStackConsistencyFixer: proguard.optimize.evaluation.EvaluationShrinker this$0>;

        $z0 = staticinvoke <proguard.optimize.evaluation.EvaluationShrinker: boolean access$2100(proguard.optimize.evaluation.EvaluationShrinker,proguard.classfile.instruction.Instruction)>($r5, $r4);

        if $z0 == 0 goto label1;

        $r5 = r0.<proguard.optimize.evaluation.EvaluationShrinker$MyStackConsistencyFixer: proguard.optimize.evaluation.EvaluationShrinker this$0>;

        staticinvoke <proguard.optimize.evaluation.EvaluationShrinker: void access$2200(proguard.optimize.evaluation.EvaluationShrinker,proguard.classfile.Clazz,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction)>($r5, $r1, $r3, $i0, $r4);

        return;

     label1:
        virtualinvoke r0.<proguard.optimize.evaluation.EvaluationShrinker$MyStackConsistencyFixer: void visitAnyInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction)>($r1, $r2, $r3, $i0, $r4);

        return;
    }
}
