public class proguard.optimize.evaluation.PartialEvaluator extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.attribute.visitor.AttributeVisitor, proguard.classfile.attribute.visitor.ExceptionInfoVisitor
{
    public static final int AT_CATCH_ENTRY;
    public static final int AT_METHOD_ENTRY;
    private static final boolean DEBUG;
    private static final boolean DEBUG_RESULTS;
    private static final int MAXIMUM_EVALUATION_COUNT;
    public static final int NONE;
    private proguard.evaluation.value.InstructionOffsetValue[] branchOriginValues;
    private final proguard.optimize.peephole.BranchTargetFinder branchTargetFinder;
    private proguard.evaluation.value.InstructionOffsetValue[] branchTargetValues;
    private final proguard.evaluation.BasicBranchUnit branchUnit;
    private final java.util.Stack callingInstructionBlockStack;
    private final boolean evaluateAllCode;
    private boolean evaluateExceptions;
    private int[] evaluationCounts;
    private boolean[] generalizedContexts;
    private final java.util.Stack instructionBlockStack;
    private final proguard.evaluation.InvocationUnit invocationUnit;
    private proguard.evaluation.TracedStack[] stacksAfter;
    private proguard.evaluation.TracedStack[] stacksBefore;
    private final proguard.evaluation.value.ValueFactory valueFactory;
    private proguard.evaluation.TracedVariables[] variablesAfter;
    private proguard.evaluation.TracedVariables[] variablesBefore;

    public void <init>()
    {
        proguard.optimize.evaluation.PartialEvaluator r0;
        proguard.evaluation.BasicInvocationUnit $r2;
        proguard.evaluation.value.ValueFactory $r1, $r3;

        r0 := @this: proguard.optimize.evaluation.PartialEvaluator;

        $r1 = new proguard.evaluation.value.ValueFactory;

        specialinvoke $r1.<proguard.evaluation.value.ValueFactory: void <init>()>();

        $r2 = new proguard.evaluation.BasicInvocationUnit;

        $r3 = new proguard.evaluation.value.ValueFactory;

        specialinvoke $r3.<proguard.evaluation.value.ValueFactory: void <init>()>();

        specialinvoke $r2.<proguard.evaluation.BasicInvocationUnit: void <init>(proguard.evaluation.value.ValueFactory)>($r3);

        specialinvoke r0.<proguard.optimize.evaluation.PartialEvaluator: void <init>(proguard.evaluation.value.ValueFactory,proguard.evaluation.InvocationUnit,boolean)>($r1, $r2, 1);

        return;
    }

    public void <init>(proguard.evaluation.value.ValueFactory, proguard.evaluation.InvocationUnit, boolean)
    {
        proguard.optimize.evaluation.PartialEvaluator r0;
        proguard.evaluation.BasicBranchUnit $r4;
        proguard.evaluation.value.ValueFactory $r1;
        proguard.evaluation.InvocationUnit $r2;
        boolean $z0;
        proguard.optimize.peephole.BranchTargetFinder $r3;
        proguard.optimize.evaluation.TracedBranchUnit $r5;

        r0 := @this: proguard.optimize.evaluation.PartialEvaluator;

        $r1 := @parameter0: proguard.evaluation.value.ValueFactory;

        $r2 := @parameter1: proguard.evaluation.InvocationUnit;

        $z0 := @parameter2: boolean;

        if $z0 == 0 goto label2;

        $r4 = new proguard.evaluation.BasicBranchUnit;

        specialinvoke $r4.<proguard.evaluation.BasicBranchUnit: void <init>()>();

     label1:
        $r3 = new proguard.optimize.peephole.BranchTargetFinder;

        specialinvoke $r3.<proguard.optimize.peephole.BranchTargetFinder: void <init>()>();

        specialinvoke r0.<proguard.optimize.evaluation.PartialEvaluator: void <init>(proguard.evaluation.value.ValueFactory,proguard.evaluation.InvocationUnit,boolean,proguard.evaluation.BasicBranchUnit,proguard.optimize.peephole.BranchTargetFinder,java.util.Stack)>($r1, $r2, $z0, $r4, $r3, null);

        return;

     label2:
        $r5 = new proguard.optimize.evaluation.TracedBranchUnit;

        specialinvoke $r5.<proguard.optimize.evaluation.TracedBranchUnit: void <init>()>();

        $r4 = $r5;

        goto label1;
    }

    private void <init>(proguard.evaluation.value.ValueFactory, proguard.evaluation.InvocationUnit, boolean, proguard.evaluation.BasicBranchUnit, proguard.optimize.peephole.BranchTargetFinder, java.util.Stack)
    {
        proguard.evaluation.value.InstructionOffsetValue[] $r6;
        proguard.evaluation.value.ValueFactory $r1;
        boolean[] $r9;
        java.util.Stack $r5, $r11;
        proguard.optimize.peephole.BranchTargetFinder $r4;
        proguard.optimize.evaluation.PartialEvaluator r0;
        proguard.evaluation.BasicBranchUnit $r3;
        proguard.evaluation.TracedVariables[] $r7;
        int[] $r10;
        proguard.evaluation.TracedStack[] $r8;
        proguard.evaluation.InvocationUnit $r2;
        boolean $z0;

        r0 := @this: proguard.optimize.evaluation.PartialEvaluator;

        $r1 := @parameter0: proguard.evaluation.value.ValueFactory;

        $r2 := @parameter1: proguard.evaluation.InvocationUnit;

        $z0 := @parameter2: boolean;

        $r3 := @parameter3: proguard.evaluation.BasicBranchUnit;

        $r4 := @parameter4: proguard.optimize.peephole.BranchTargetFinder;

        $r5 := @parameter5: java.util.Stack;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        $r6 = newarray (proguard.evaluation.value.InstructionOffsetValue)[1024];

        r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.value.InstructionOffsetValue[] branchOriginValues> = $r6;

        $r6 = newarray (proguard.evaluation.value.InstructionOffsetValue)[1024];

        r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.value.InstructionOffsetValue[] branchTargetValues> = $r6;

        $r7 = newarray (proguard.evaluation.TracedVariables)[1024];

        r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedVariables[] variablesBefore> = $r7;

        $r8 = newarray (proguard.evaluation.TracedStack)[1024];

        r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedStack[] stacksBefore> = $r8;

        $r7 = newarray (proguard.evaluation.TracedVariables)[1024];

        r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedVariables[] variablesAfter> = $r7;

        $r8 = newarray (proguard.evaluation.TracedStack)[1024];

        r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedStack[] stacksAfter> = $r8;

        $r9 = newarray (boolean)[1024];

        r0.<proguard.optimize.evaluation.PartialEvaluator: boolean[] generalizedContexts> = $r9;

        $r10 = newarray (int)[1024];

        r0.<proguard.optimize.evaluation.PartialEvaluator: int[] evaluationCounts> = $r10;

        $r11 = new java.util.Stack;

        specialinvoke $r11.<java.util.Stack: void <init>()>();

        r0.<proguard.optimize.evaluation.PartialEvaluator: java.util.Stack instructionBlockStack> = $r11;

        r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.value.ValueFactory valueFactory> = $r1;

        r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.InvocationUnit invocationUnit> = $r2;

        r0.<proguard.optimize.evaluation.PartialEvaluator: boolean evaluateAllCode> = $z0;

        r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.BasicBranchUnit branchUnit> = $r3;

        r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.optimize.peephole.BranchTargetFinder branchTargetFinder> = $r4;

        if $r5 != null goto label1;

        $r5 = r0.<proguard.optimize.evaluation.PartialEvaluator: java.util.Stack instructionBlockStack>;

     label1:
        r0.<proguard.optimize.evaluation.PartialEvaluator: java.util.Stack callingInstructionBlockStack> = $r5;

        return;
    }

    private void <init>(proguard.optimize.evaluation.PartialEvaluator)
    {
        proguard.evaluation.value.ValueFactory $r2;
        java.util.Stack $r6;
        proguard.optimize.peephole.BranchTargetFinder $r5;
        proguard.optimize.evaluation.PartialEvaluator r0, $r1;
        proguard.evaluation.BasicBranchUnit $r4;
        proguard.evaluation.InvocationUnit $r3;
        boolean $z0;

        r0 := @this: proguard.optimize.evaluation.PartialEvaluator;

        $r1 := @parameter0: proguard.optimize.evaluation.PartialEvaluator;

        $r2 = $r1.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.value.ValueFactory valueFactory>;

        $r3 = $r1.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.InvocationUnit invocationUnit>;

        $z0 = $r1.<proguard.optimize.evaluation.PartialEvaluator: boolean evaluateAllCode>;

        $r4 = $r1.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.BasicBranchUnit branchUnit>;

        $r5 = $r1.<proguard.optimize.evaluation.PartialEvaluator: proguard.optimize.peephole.BranchTargetFinder branchTargetFinder>;

        $r6 = $r1.<proguard.optimize.evaluation.PartialEvaluator: java.util.Stack instructionBlockStack>;

        specialinvoke r0.<proguard.optimize.evaluation.PartialEvaluator: void <init>(proguard.evaluation.value.ValueFactory,proguard.evaluation.InvocationUnit,boolean,proguard.evaluation.BasicBranchUnit,proguard.optimize.peephole.BranchTargetFinder,java.util.Stack)>($r2, $r3, $z0, $r4, $r5, $r6);

        return;
    }

    private void evaluateExceptionHandlers(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, int)
    {
        proguard.classfile.visitor.ExceptionHandlerFilter $r4;
        proguard.optimize.evaluation.PartialEvaluator r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0, $i1;
        proguard.classfile.Method $r2;
        boolean $z0;

        r0 := @this: proguard.optimize.evaluation.PartialEvaluator;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $r4 = new proguard.classfile.visitor.ExceptionHandlerFilter;

        specialinvoke $r4.<proguard.classfile.visitor.ExceptionHandlerFilter: void <init>(int,int,proguard.classfile.attribute.visitor.ExceptionInfoVisitor)>($i0, $i1, r0);

     label1:
        r0.<proguard.optimize.evaluation.PartialEvaluator: boolean evaluateExceptions> = 0;

        virtualinvoke $r3.<proguard.classfile.attribute.CodeAttribute: void exceptionsAccept(proguard.classfile.Clazz,proguard.classfile.Method,int,int,proguard.classfile.attribute.visitor.ExceptionInfoVisitor)>($r1, $r2, $i0, $i1, $r4);

        $z0 = r0.<proguard.optimize.evaluation.PartialEvaluator: boolean evaluateExceptions>;

        if $z0 != 0 goto label1;

        return;
    }

    private void evaluateInstructionBlock(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.evaluation.TracedVariables, proguard.evaluation.TracedStack, int)
    {
        proguard.evaluation.TracedVariables $r4;
        proguard.evaluation.TracedStack $r5;
        proguard.optimize.evaluation.PartialEvaluator$MyInstructionBlock $r8;
        java.util.Stack $r6;
        proguard.optimize.evaluation.PartialEvaluator r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.Method $r2;
        java.lang.Object $r7;
        boolean $z0;

        r0 := @this: proguard.optimize.evaluation.PartialEvaluator;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.evaluation.TracedVariables;

        $r5 := @parameter4: proguard.evaluation.TracedStack;

        $i0 := @parameter5: int;

        specialinvoke r0.<proguard.optimize.evaluation.PartialEvaluator: void evaluateSingleInstructionBlock(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.evaluation.TracedVariables,proguard.evaluation.TracedStack,int)>($r1, $r2, $r3, $r4, $r5, $i0);

     label1:
        $r6 = r0.<proguard.optimize.evaluation.PartialEvaluator: java.util.Stack instructionBlockStack>;

        $z0 = virtualinvoke $r6.<java.util.Stack: boolean empty()>();

        if $z0 != 0 goto label2;

        $r6 = r0.<proguard.optimize.evaluation.PartialEvaluator: java.util.Stack instructionBlockStack>;

        $r7 = virtualinvoke $r6.<java.util.Stack: java.lang.Object pop()>();

        $r8 = (proguard.optimize.evaluation.PartialEvaluator$MyInstructionBlock) $r7;

        $r4 = staticinvoke <proguard.optimize.evaluation.PartialEvaluator$MyInstructionBlock: proguard.evaluation.TracedVariables access$100(proguard.optimize.evaluation.PartialEvaluator$MyInstructionBlock)>($r8);

        $r5 = staticinvoke <proguard.optimize.evaluation.PartialEvaluator$MyInstructionBlock: proguard.evaluation.TracedStack access$200(proguard.optimize.evaluation.PartialEvaluator$MyInstructionBlock)>($r8);

        $i0 = staticinvoke <proguard.optimize.evaluation.PartialEvaluator$MyInstructionBlock: int access$300(proguard.optimize.evaluation.PartialEvaluator$MyInstructionBlock)>($r8);

        specialinvoke r0.<proguard.optimize.evaluation.PartialEvaluator: void evaluateSingleInstructionBlock(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.evaluation.TracedVariables,proguard.evaluation.TracedStack,int)>($r1, $r2, $r3, $r4, $r5, $i0);

        goto label1;

     label2:
        return;
    }

    private void evaluateInstructionBlockAndExceptionHandlers(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.evaluation.TracedVariables, proguard.evaluation.TracedStack, int, int)
    {
        proguard.evaluation.TracedVariables $r4;
        proguard.evaluation.TracedStack $r5;
        proguard.optimize.evaluation.PartialEvaluator r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0, $i1;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.optimize.evaluation.PartialEvaluator;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.evaluation.TracedVariables;

        $r5 := @parameter4: proguard.evaluation.TracedStack;

        $i0 := @parameter5: int;

        $i1 := @parameter6: int;

        specialinvoke r0.<proguard.optimize.evaluation.PartialEvaluator: void evaluateInstructionBlock(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.evaluation.TracedVariables,proguard.evaluation.TracedStack,int)>($r1, $r2, $r3, $r4, $r5, $i0);

        specialinvoke r0.<proguard.optimize.evaluation.PartialEvaluator: void evaluateExceptionHandlers(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,int)>($r1, $r2, $r3, $i0, $i1);

        return;
    }

    private void evaluateSingleInstructionBlock(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.evaluation.TracedVariables, proguard.evaluation.TracedStack, int)
    {
        byte[] $r6;
        proguard.evaluation.value.ValueFactory $r8;
        byte $b4;
        proguard.classfile.Clazz $r1;
        int[] $r11;
        proguard.evaluation.TracedStack[] $r14;
        boolean $z0, $z1;
        proguard.evaluation.TracedStack $r5, $r15, $r32;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.Method $r2;
        proguard.evaluation.value.InstructionOffsetValue[] $r20, $r21;
        java.util.Stack $r29;
        proguard.optimize.evaluation.PartialEvaluator r0;
        proguard.evaluation.BasicBranchUnit $r9;
        java.lang.StringBuffer $r24, $r33;
        proguard.evaluation.value.InstructionOffsetValue $r17, $r18, $r28;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r25;
        proguard.evaluation.value.Value $r27;
        java.io.PrintStream $r23;
        proguard.evaluation.TracedVariables $r4, $r13, $r31;
        boolean[] $r16;
        java.lang.RuntimeException $r22;
        proguard.evaluation.Processor $r7, $r30;
        proguard.evaluation.TracedVariables[] $r12;
        proguard.classfile.instruction.Instruction $r19;
        java.lang.Class $r26;
        proguard.evaluation.InvocationUnit $r10;

        r0 := @this: proguard.optimize.evaluation.PartialEvaluator;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.evaluation.TracedVariables;

        $r5 := @parameter4: proguard.evaluation.TracedStack;

        $i0 := @parameter5: int;

        $r6 = $r3.<proguard.classfile.attribute.CodeAttribute: byte[] code>;

        $r30 = new proguard.evaluation.Processor;

        $r7 = $r30;

        $r8 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.value.ValueFactory valueFactory>;

        $r9 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.BasicBranchUnit branchUnit>;

        $r10 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.InvocationUnit invocationUnit>;

        specialinvoke $r30.<proguard.evaluation.Processor: void <init>(proguard.evaluation.Variables,proguard.evaluation.Stack,proguard.evaluation.value.ValueFactory,proguard.evaluation.BranchUnit,proguard.evaluation.InvocationUnit)>($r4, $r5, $r8, $r9, $r10);

        $i1 = $i0;

        $i2 = $i0;

     label01:
        if $i1 >= $i2 goto label27;

        $i0 = $i2;

     label02:
        $r11 = r0.<proguard.optimize.evaluation.PartialEvaluator: int[] evaluationCounts>;

        $i1 = $r11[$i2];

        if $i1 != 0 goto label10;

        $r12 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedVariables[] variablesBefore>;

        $r13 = $r12[$i2];

        if $r13 != null goto label09;

        $r12 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedVariables[] variablesBefore>;

        $r31 = new proguard.evaluation.TracedVariables;

        specialinvoke $r31.<proguard.evaluation.TracedVariables: void <init>(proguard.evaluation.TracedVariables)>($r4);

        $r12[$i2] = $r31;

        $r14 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedStack[] stacksBefore>;

        $r32 = new proguard.evaluation.TracedStack;

        specialinvoke $r32.<proguard.evaluation.TracedStack: void <init>(proguard.evaluation.TracedStack)>($r5);

        $r14[$i2] = $r32;

     label03:
        $r16 = r0.<proguard.optimize.evaluation.PartialEvaluator: boolean[] generalizedContexts>;

        $r16[$i2] = 1;

     label04:
        $r11 = r0.<proguard.optimize.evaluation.PartialEvaluator: int[] evaluationCounts>;

        $i3 = $r11[$i2];

        $i3 = $i3 + 1;

        $r11[$i2] = $i3;

        $r18 = new proguard.evaluation.value.InstructionOffsetValue;

        $r17 = $r18;

        specialinvoke $r18.<proguard.evaluation.value.InstructionOffsetValue: void <init>(int)>($i2);

        virtualinvoke $r4.<proguard.evaluation.TracedVariables: void setProducerValue(proguard.evaluation.value.Value)>($r17);

        virtualinvoke $r5.<proguard.evaluation.TracedStack: void setProducerValue(proguard.evaluation.value.Value)>($r17);

        $r18 = <proguard.evaluation.value.InstructionOffsetValue: proguard.evaluation.value.InstructionOffsetValue EMPTY_VALUE>;

        $r19 = staticinvoke <proguard.classfile.instruction.InstructionFactory: proguard.classfile.instruction.Instruction create(byte[],int)>($r6, $i2);

        $i3 = virtualinvoke $r19.<proguard.classfile.instruction.Instruction: int length(int)>($i2);

        $i3 = $i3 + $i2;

        $r28 = new proguard.evaluation.value.InstructionOffsetValue;

        specialinvoke $r28.<proguard.evaluation.value.InstructionOffsetValue: void <init>(int)>($i3);

        $r9 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.BasicBranchUnit branchUnit>;

        virtualinvoke $r9.<proguard.evaluation.BasicBranchUnit: void resetCalled()>();

        $r9 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.BasicBranchUnit branchUnit>;

        virtualinvoke $r9.<proguard.evaluation.BasicBranchUnit: void setTraceBranchTargets(proguard.evaluation.value.InstructionOffsetValue)>($r28);

     label05:
        virtualinvoke $r19.<proguard.classfile.instruction.Instruction: void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.visitor.InstructionVisitor)>($r1, $r2, $r3, $i2, $r7);

     label06:
        $r9 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.BasicBranchUnit branchUnit>;

        $r17 = virtualinvoke $r9.<proguard.evaluation.BasicBranchUnit: proguard.evaluation.value.InstructionOffsetValue getTraceBranchTargets()>();

        $i3 = virtualinvoke $r17.<proguard.evaluation.value.InstructionOffsetValue: int instructionOffsetCount()>();

        $r9 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.BasicBranchUnit branchUnit>;

        virtualinvoke $r9.<proguard.evaluation.BasicBranchUnit: void setTraceBranchTargets(proguard.evaluation.value.InstructionOffsetValue)>($r18);

        if $i1 != 0 goto label15;

        $r12 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedVariables[] variablesAfter>;

        $r13 = $r12[$i2];

        if $r13 != null goto label14;

        $r12 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedVariables[] variablesAfter>;

        $r31 = new proguard.evaluation.TracedVariables;

        specialinvoke $r31.<proguard.evaluation.TracedVariables: void <init>(proguard.evaluation.TracedVariables)>($r4);

        $r12[$i2] = $r31;

        $r14 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedStack[] stacksAfter>;

        $r32 = new proguard.evaluation.TracedStack;

        specialinvoke $r32.<proguard.evaluation.TracedStack: void <init>(proguard.evaluation.TracedStack)>($r5);

        $r14[$i2] = $r32;

     label07:
        $r9 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.BasicBranchUnit branchUnit>;

        $z0 = virtualinvoke $r9.<proguard.evaluation.BasicBranchUnit: boolean wasCalled()>();

        if $z0 == 0 goto label23;

        $r20 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.value.InstructionOffsetValue[] branchTargetValues>;

        $r21 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.value.InstructionOffsetValue[] branchTargetValues>;

        $r18 = $r21[$i2];

        if $r18 != null goto label16;

        $r18 = $r17;

     label08:
        $r20[$i2] = $r18;

        if $i3 != 0 goto label17;

        return;

     label09:
        $r12 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedVariables[] variablesBefore>;

        $r13 = $r12[$i2];

        virtualinvoke $r13.<proguard.evaluation.TracedVariables: void initialize(proguard.evaluation.TracedVariables)>($r4);

        $r14 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedStack[] stacksBefore>;

        $r15 = $r14[$i2];

        virtualinvoke $r15.<proguard.evaluation.TracedStack: void copy(proguard.evaluation.TracedStack)>($r5);

        goto label03;

     label10:
        $r12 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedVariables[] variablesBefore>;

        $r13 = $r12[$i2];

        $z0 = virtualinvoke $r13.<proguard.evaluation.TracedVariables: boolean generalize(proguard.evaluation.TracedVariables,boolean)>($r4, 1);

        $r14 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedStack[] stacksBefore>;

        $r15 = $r14[$i2];

        $z1 = virtualinvoke $r15.<proguard.evaluation.TracedStack: boolean generalize(proguard.evaluation.TracedStack)>($r5);

        if $z0 != 0 goto label11;

        if $z1 != 0 goto label11;

        $r16 = r0.<proguard.optimize.evaluation.PartialEvaluator: boolean[] generalizedContexts>;

        $z0 = $r16[$i2];

        if $z0 != 0 goto label28;

     label11:
        if $i1 < 5 goto label12;

        $r12 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedVariables[] variablesBefore>;

        $r13 = $r12[$i2];

        virtualinvoke $r4.<proguard.evaluation.TracedVariables: boolean generalize(proguard.evaluation.TracedVariables,boolean)>($r13, 0);

        $r14 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedStack[] stacksBefore>;

        $r15 = $r14[$i2];

        virtualinvoke $r5.<proguard.evaluation.TracedStack: boolean generalize(proguard.evaluation.TracedStack)>($r15);

        $r16 = r0.<proguard.optimize.evaluation.PartialEvaluator: boolean[] generalizedContexts>;

        $r16[$i2] = 1;

        goto label04;

     label12:
        $r16 = r0.<proguard.optimize.evaluation.PartialEvaluator: boolean[] generalizedContexts>;

        $r16[$i2] = 0;

        goto label04;

     label13:
        $r22 := @caughtexception;

        $r23 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r23.<java.io.PrintStream: void println(java.lang.String)>("Unexpected error while evaluating instruction:");

        $r23 = <java.lang.System: java.io.PrintStream err>;

        $r33 = new java.lang.StringBuffer;

        specialinvoke $r33.<java.lang.StringBuffer: void <init>()>();

        $r24 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Class       = [");

        $r25 = interfaceinvoke $r1.<proguard.classfile.Clazz: java.lang.String getName()>();

        $r24 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r25);

        $r24 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r23.<java.io.PrintStream: void println(java.lang.String)>($r25);

        $r23 = <java.lang.System: java.io.PrintStream err>;

        $r33 = new java.lang.StringBuffer;

        specialinvoke $r33.<java.lang.StringBuffer: void <init>()>();

        $r24 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Method      = [");

        $r25 = interfaceinvoke $r2.<proguard.classfile.Method: java.lang.String getName(proguard.classfile.Clazz)>($r1);

        $r24 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r25);

        $r25 = interfaceinvoke $r2.<proguard.classfile.Method: java.lang.String getDescriptor(proguard.classfile.Clazz)>($r1);

        $r24 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r25);

        $r24 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r23.<java.io.PrintStream: void println(java.lang.String)>($r25);

        $r23 = <java.lang.System: java.io.PrintStream err>;

        $r33 = new java.lang.StringBuffer;

        specialinvoke $r33.<java.lang.StringBuffer: void <init>()>();

        $r24 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Instruction = ");

        $r25 = virtualinvoke $r19.<proguard.classfile.instruction.Instruction: java.lang.String toString(int)>($i2);

        $r24 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r25);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r23.<java.io.PrintStream: void println(java.lang.String)>($r25);

        $r23 = <java.lang.System: java.io.PrintStream err>;

        $r33 = new java.lang.StringBuffer;

        specialinvoke $r33.<java.lang.StringBuffer: void <init>()>();

        $r24 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Exception   = [");

        $r26 = virtualinvoke $r22.<java.lang.Object: java.lang.Class getClass()>();

        $r25 = virtualinvoke $r26.<java.lang.Class: java.lang.String getName()>();

        $r24 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r25);

        $r24 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] (");

        $r25 = virtualinvoke $r22.<java.lang.RuntimeException: java.lang.String getMessage()>();

        $r24 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r25);

        $r24 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r23.<java.io.PrintStream: void println(java.lang.String)>($r25);

        throw $r22;

     label14:
        $r12 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedVariables[] variablesAfter>;

        $r13 = $r12[$i2];

        virtualinvoke $r13.<proguard.evaluation.TracedVariables: void initialize(proguard.evaluation.TracedVariables)>($r4);

        $r14 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedStack[] stacksAfter>;

        $r15 = $r14[$i2];

        virtualinvoke $r15.<proguard.evaluation.TracedStack: void copy(proguard.evaluation.TracedStack)>($r5);

        goto label07;

     label15:
        $r12 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedVariables[] variablesAfter>;

        $r13 = $r12[$i2];

        virtualinvoke $r13.<proguard.evaluation.TracedVariables: boolean generalize(proguard.evaluation.TracedVariables,boolean)>($r4, 1);

        $r14 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedStack[] stacksAfter>;

        $r15 = $r14[$i2];

        virtualinvoke $r15.<proguard.evaluation.TracedStack: boolean generalize(proguard.evaluation.TracedStack)>($r5);

        goto label07;

     label16:
        $r21 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.value.InstructionOffsetValue[] branchTargetValues>;

        $r18 = $r21[$i2];

        $r27 = virtualinvoke $r18.<proguard.evaluation.value.InstructionOffsetValue: proguard.evaluation.value.Value generalize(proguard.evaluation.value.InstructionOffsetValue)>($r17);

        $r18 = virtualinvoke $r27.<proguard.evaluation.value.Value: proguard.evaluation.value.InstructionOffsetValue instructionOffsetValue()>();

        goto label08;

     label17:
        $r28 = new proguard.evaluation.value.InstructionOffsetValue;

        $r18 = $r28;

        specialinvoke $r28.<proguard.evaluation.value.InstructionOffsetValue: void <init>(int)>($i2);

        $i2 = 0;

     label18:
        if $i2 >= $i3 goto label21;

        $i1 = virtualinvoke $r17.<proguard.evaluation.value.InstructionOffsetValue: int instructionOffset(int)>($i2);

        $r20 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.value.InstructionOffsetValue[] branchOriginValues>;

        $r21 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.value.InstructionOffsetValue[] branchOriginValues>;

        $r28 = $r21[$i1];

        if $r28 != null goto label20;

        $r28 = $r18;

     label19:
        $r20[$i1] = $r28;

        $i2 = $i2 + 1;

        goto label18;

     label20:
        $r21 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.value.InstructionOffsetValue[] branchOriginValues>;

        $r28 = $r21[$i1];

        $r27 = virtualinvoke $r28.<proguard.evaluation.value.InstructionOffsetValue: proguard.evaluation.value.Value generalize(proguard.evaluation.value.InstructionOffsetValue)>($r18);

        $r28 = virtualinvoke $r27.<proguard.evaluation.value.Value: proguard.evaluation.value.InstructionOffsetValue instructionOffsetValue()>();

        goto label19;

     label21:
        if $i3 <= 1 goto label23;

        $i0 = 0;

     label22:
        if $i0 >= $i3 goto label28;

        $r31 = new proguard.evaluation.TracedVariables;

        specialinvoke $r31.<proguard.evaluation.TracedVariables: void <init>(proguard.evaluation.TracedVariables)>($r4);

        $r32 = new proguard.evaluation.TracedStack;

        specialinvoke $r32.<proguard.evaluation.TracedStack: void <init>(proguard.evaluation.TracedStack)>($r5);

        $i2 = virtualinvoke $r17.<proguard.evaluation.value.InstructionOffsetValue: int instructionOffset(int)>($i0);

        specialinvoke r0.<proguard.optimize.evaluation.PartialEvaluator: void pushInstructionBlock(proguard.evaluation.TracedVariables,proguard.evaluation.TracedStack,int)>($r31, $r32, $i2);

        $i0 = $i0 + 1;

        goto label22;

     label23:
        $i2 = virtualinvoke $r17.<proguard.evaluation.value.InstructionOffsetValue: int instructionOffset(int)>(0);

        $b4 = $r19.<proguard.classfile.instruction.Instruction: byte opcode>;

        $i1 = (int) $b4;

        if $i1 == -88 goto label24;

        $b4 = $r19.<proguard.classfile.instruction.Instruction: byte opcode>;

        $i1 = (int) $b4;

        if $i1 != -55 goto label25;

     label24:
        $r29 = r0.<proguard.optimize.evaluation.PartialEvaluator: java.util.Stack instructionBlockStack>;

        specialinvoke r0.<proguard.optimize.evaluation.PartialEvaluator: void evaluateSubroutine(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.evaluation.TracedVariables,proguard.evaluation.TracedStack,int,java.util.Stack)>($r1, $r2, $r3, $r4, $r5, $i2, $r29);

        return;

     label25:
        $b4 = $r19.<proguard.classfile.instruction.Instruction: byte opcode>;

        $i1 = (int) $b4;

        if $i1 != -87 goto label26;

        $r31 = new proguard.evaluation.TracedVariables;

        specialinvoke $r31.<proguard.evaluation.TracedVariables: void <init>(proguard.evaluation.TracedVariables)>($r4);

        $r32 = new proguard.evaluation.TracedStack;

        specialinvoke $r32.<proguard.evaluation.TracedStack: void <init>(proguard.evaluation.TracedStack)>($r5);

        specialinvoke r0.<proguard.optimize.evaluation.PartialEvaluator: void pushCallingInstructionBlock(proguard.evaluation.TracedVariables,proguard.evaluation.TracedStack,int)>($r31, $r32, $i2);

        return;

     label26:
        $i1 = $i0;

        goto label01;

     label27:
        $i0 = $i1;

        goto label02;

     label28:
        return;

        catch java.lang.RuntimeException from label05 to label06 with label13;
    }

    private void evaluateSubroutine(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.evaluation.TracedVariables, proguard.evaluation.TracedStack, int, java.util.Stack)
    {
        proguard.evaluation.TracedVariables $r4;
        proguard.evaluation.TracedStack $r5;
        java.util.Stack $r6;
        proguard.optimize.peephole.BranchTargetFinder $r7;
        proguard.optimize.evaluation.PartialEvaluator r0, $r9;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int[] $r8;
        int $i0, $i1, $i2;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.optimize.evaluation.PartialEvaluator;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.evaluation.TracedVariables;

        $r5 := @parameter4: proguard.evaluation.TracedStack;

        $i0 := @parameter5: int;

        $r6 := @parameter6: java.util.Stack;

        $r7 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.optimize.peephole.BranchTargetFinder branchTargetFinder>;

        $i1 = virtualinvoke $r7.<proguard.optimize.peephole.BranchTargetFinder: int subroutineEnd(int)>($i0);

        $r8 = r0.<proguard.optimize.evaluation.PartialEvaluator: int[] evaluationCounts>;

        $i2 = $r8[$i0];

        if $i2 <= 0 goto label2;

        $r9 = new proguard.optimize.evaluation.PartialEvaluator;

        specialinvoke $r9.<proguard.optimize.evaluation.PartialEvaluator: void <init>(proguard.optimize.evaluation.PartialEvaluator)>(r0);

        specialinvoke $r9.<proguard.optimize.evaluation.PartialEvaluator: void initializeArrays(proguard.classfile.attribute.CodeAttribute)>($r3);

     label1:
        specialinvoke $r9.<proguard.optimize.evaluation.PartialEvaluator: void evaluateInstructionBlockAndExceptionHandlers(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.evaluation.TracedVariables,proguard.evaluation.TracedStack,int,int)>($r1, $r2, $r3, $r4, $r5, $i0, $i1);

        if $r9 == r0 goto label3;

        $i0 = $r3.<proguard.classfile.attribute.CodeAttribute: int u4codeLength>;

        specialinvoke r0.<proguard.optimize.evaluation.PartialEvaluator: void generalize(proguard.optimize.evaluation.PartialEvaluator,int,int)>($r9, 0, $i0);

        return;

     label2:
        $r9 = r0;

        goto label1;

     label3:
        return;
    }

    private void generalize(proguard.optimize.evaluation.PartialEvaluator, int, int)
    {
        proguard.evaluation.value.InstructionOffsetValue[] $r2, $r4;
        proguard.optimize.evaluation.PartialEvaluator r0, $r1;
        int[] $r5, $r14;
        proguard.evaluation.value.InstructionOffsetValue $r3, $r15;
        int $i0, $i1, $i2, $i3;
        proguard.evaluation.TracedStack[] $r9, $r10;
        proguard.evaluation.value.Value $r16;
        boolean $z0;
        proguard.evaluation.TracedVariables $r8, $r17;
        boolean[] $r12, $r13;
        proguard.evaluation.TracedStack $r11, $r18;
        proguard.evaluation.TracedVariables[] $r6, $r7;

        r0 := @this: proguard.optimize.evaluation.PartialEvaluator;

        $r1 := @parameter0: proguard.optimize.evaluation.PartialEvaluator;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

     label01:
        if 0 >= $i1 goto label10;

        $r2 = $r1.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.value.InstructionOffsetValue[] branchOriginValues>;

        $r3 = $r2[0];

        if $r3 == null goto label03;

        $r2 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.value.InstructionOffsetValue[] branchOriginValues>;

        $r4 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.value.InstructionOffsetValue[] branchOriginValues>;

        $r3 = $r4[0];

        if $r3 != null goto label07;

        $r4 = $r1.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.value.InstructionOffsetValue[] branchOriginValues>;

        $r3 = $r4[0];

     label02:
        $r2[0] = $r3;

     label03:
        $z0 = virtualinvoke $r1.<proguard.optimize.evaluation.PartialEvaluator: boolean isTraced(int)>(0);

        if $z0 == 0 goto label06;

        $r2 = $r1.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.value.InstructionOffsetValue[] branchTargetValues>;

        $r3 = $r2[0];

        if $r3 == null goto label05;

        $r2 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.value.InstructionOffsetValue[] branchTargetValues>;

        $r4 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.value.InstructionOffsetValue[] branchTargetValues>;

        $r3 = $r4[0];

        if $r3 != null goto label08;

        $r4 = $r1.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.value.InstructionOffsetValue[] branchTargetValues>;

        $r3 = $r4[0];

     label04:
        $r2[0] = $r3;

     label05:
        $r5 = r0.<proguard.optimize.evaluation.PartialEvaluator: int[] evaluationCounts>;

        $i2 = $r5[0];

        if $i2 != 0 goto label09;

        $r6 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedVariables[] variablesBefore>;

        $r7 = $r1.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedVariables[] variablesBefore>;

        $r8 = $r7[0];

        $r6[0] = $r8;

        $r9 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedStack[] stacksBefore>;

        $r10 = $r1.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedStack[] stacksBefore>;

        $r11 = $r10[0];

        $r9[0] = $r11;

        $r6 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedVariables[] variablesAfter>;

        $r7 = $r1.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedVariables[] variablesAfter>;

        $r8 = $r7[0];

        $r6[0] = $r8;

        $r9 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedStack[] stacksAfter>;

        $r10 = $r1.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedStack[] stacksAfter>;

        $r11 = $r10[0];

        $r9[0] = $r11;

        $r12 = r0.<proguard.optimize.evaluation.PartialEvaluator: boolean[] generalizedContexts>;

        $r13 = $r1.<proguard.optimize.evaluation.PartialEvaluator: boolean[] generalizedContexts>;

        $z0 = $r13[0];

        $r12[0] = $z0;

        $r5 = r0.<proguard.optimize.evaluation.PartialEvaluator: int[] evaluationCounts>;

        $r14 = $r1.<proguard.optimize.evaluation.PartialEvaluator: int[] evaluationCounts>;

        $i2 = $r14[0];

        $r5[0] = $i2;

     label06:
        goto label01;

     label07:
        $r4 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.value.InstructionOffsetValue[] branchOriginValues>;

        $r3 = $r4[0];

        $r4 = $r1.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.value.InstructionOffsetValue[] branchOriginValues>;

        $r15 = $r4[0];

        $r16 = virtualinvoke $r3.<proguard.evaluation.value.InstructionOffsetValue: proguard.evaluation.value.Value generalize(proguard.evaluation.value.InstructionOffsetValue)>($r15);

        $r3 = virtualinvoke $r16.<proguard.evaluation.value.Value: proguard.evaluation.value.InstructionOffsetValue instructionOffsetValue()>();

        goto label02;

     label08:
        $r4 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.value.InstructionOffsetValue[] branchTargetValues>;

        $r3 = $r4[0];

        $r4 = $r1.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.value.InstructionOffsetValue[] branchTargetValues>;

        $r15 = $r4[0];

        $r16 = virtualinvoke $r3.<proguard.evaluation.value.InstructionOffsetValue: proguard.evaluation.value.Value generalize(proguard.evaluation.value.InstructionOffsetValue)>($r15);

        $r3 = virtualinvoke $r16.<proguard.evaluation.value.Value: proguard.evaluation.value.InstructionOffsetValue instructionOffsetValue()>();

        goto label04;

     label09:
        $r6 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedVariables[] variablesBefore>;

        $r8 = $r6[0];

        $r6 = $r1.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedVariables[] variablesBefore>;

        $r17 = $r6[0];

        virtualinvoke $r8.<proguard.evaluation.TracedVariables: boolean generalize(proguard.evaluation.TracedVariables,boolean)>($r17, 0);

        $r9 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedStack[] stacksBefore>;

        $r11 = $r9[0];

        $r9 = $r1.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedStack[] stacksBefore>;

        $r18 = $r9[0];

        virtualinvoke $r11.<proguard.evaluation.TracedStack: boolean generalize(proguard.evaluation.TracedStack)>($r18);

        $r6 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedVariables[] variablesAfter>;

        $r8 = $r6[0];

        $r6 = $r1.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedVariables[] variablesAfter>;

        $r17 = $r6[0];

        virtualinvoke $r8.<proguard.evaluation.TracedVariables: boolean generalize(proguard.evaluation.TracedVariables,boolean)>($r17, 0);

        $r9 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedStack[] stacksAfter>;

        $r11 = $r9[0];

        $r9 = $r1.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedStack[] stacksAfter>;

        $r18 = $r9[0];

        virtualinvoke $r11.<proguard.evaluation.TracedStack: boolean generalize(proguard.evaluation.TracedStack)>($r18);

        $r5 = r0.<proguard.optimize.evaluation.PartialEvaluator: int[] evaluationCounts>;

        $i2 = $r5[0];

        $r14 = $r1.<proguard.optimize.evaluation.PartialEvaluator: int[] evaluationCounts>;

        $i3 = $r14[0];

        $i2 = $i2 + $i3;

        $r5[0] = $i2;

        goto label06;

     label10:
        return;
    }

    private void generalizeVariables(int, int, boolean, proguard.evaluation.TracedVariables)
    {
        proguard.evaluation.TracedVariables $r1, $r3;
        proguard.optimize.evaluation.PartialEvaluator r0;
        proguard.evaluation.TracedVariables[] $r2;
        int $i0, $i1, $i2;
        boolean $z0, $z1, $z2;

        r0 := @this: proguard.optimize.evaluation.PartialEvaluator;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $z0 := @parameter2: boolean;

        $r1 := @parameter3: proguard.evaluation.TracedVariables;

        $i2 = -1;

        $z1 = 1;

     label1:
        if $i0 >= $i1 goto label5;

        $z2 = virtualinvoke r0.<proguard.optimize.evaluation.PartialEvaluator: boolean isTraced(int)>($i0);

        if $z2 == 0 goto label3;

        $r2 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedVariables[] variablesBefore>;

        $r3 = $r2[$i0];

        if $z1 == 0 goto label4;

        virtualinvoke $r1.<proguard.evaluation.TracedVariables: void initialize(proguard.evaluation.TracedVariables)>($r3);

        $z1 = 0;

     label2:
        $i2 = $i0;

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        virtualinvoke $r1.<proguard.evaluation.TracedVariables: boolean generalize(proguard.evaluation.TracedVariables,boolean)>($r3, 0);

        goto label2;

     label5:
        if $z0 == 0 goto label6;

        if $i2 < 0 goto label6;

        $r2 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedVariables[] variablesAfter>;

        $r3 = $r2[$i2];

        if $z1 == 0 goto label7;

        virtualinvoke $r1.<proguard.evaluation.TracedVariables: void initialize(proguard.evaluation.TracedVariables)>($r3);

     label6:
        if $z1 == 0 goto label8;

        $i0 = virtualinvoke $r1.<proguard.evaluation.TracedVariables: int size()>();

        virtualinvoke $r1.<proguard.evaluation.TracedVariables: void reset(int)>($i0);

        return;

     label7:
        virtualinvoke $r1.<proguard.evaluation.TracedVariables: boolean generalize(proguard.evaluation.TracedVariables,boolean)>($r3, 0);

        goto label6;

     label8:
        return;
    }

    private void initializeArrays(proguard.classfile.attribute.CodeAttribute)
    {
        proguard.evaluation.value.InstructionOffsetValue[] $r3;
        proguard.evaluation.TracedVariables $r7;
        boolean[] $r5;
        proguard.evaluation.TracedStack $r8;
        proguard.optimize.evaluation.PartialEvaluator r0;
        proguard.classfile.attribute.CodeAttribute $r1;
        proguard.evaluation.TracedVariables[] $r2;
        int[] $r6;
        int $i0, $i1, $i2;
        proguard.evaluation.TracedStack[] $r4;

        r0 := @this: proguard.optimize.evaluation.PartialEvaluator;

        $r1 := @parameter0: proguard.classfile.attribute.CodeAttribute;

        $i0 = $r1.<proguard.classfile.attribute.CodeAttribute: int u4codeLength>;

        $r2 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedVariables[] variablesAfter>;

        $i1 = lengthof $r2;

        if $i1 >= $i0 goto label1;

        $r3 = newarray (proguard.evaluation.value.InstructionOffsetValue)[$i0];

        r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.value.InstructionOffsetValue[] branchOriginValues> = $r3;

        $r3 = newarray (proguard.evaluation.value.InstructionOffsetValue)[$i0];

        r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.value.InstructionOffsetValue[] branchTargetValues> = $r3;

        $r2 = newarray (proguard.evaluation.TracedVariables)[$i0];

        r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedVariables[] variablesBefore> = $r2;

        $r4 = newarray (proguard.evaluation.TracedStack)[$i0];

        r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedStack[] stacksBefore> = $r4;

        $r2 = newarray (proguard.evaluation.TracedVariables)[$i0];

        r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedVariables[] variablesAfter> = $r2;

        $r4 = newarray (proguard.evaluation.TracedStack)[$i0];

        r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedStack[] stacksAfter> = $r4;

        $r5 = newarray (boolean)[$i0];

        r0.<proguard.optimize.evaluation.PartialEvaluator: boolean[] generalizedContexts> = $r5;

        $r6 = newarray (int)[$i0];

        r0.<proguard.optimize.evaluation.PartialEvaluator: int[] evaluationCounts> = $r6;

        return;

     label1:
        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label7;

        $r3 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.value.InstructionOffsetValue[] branchOriginValues>;

        $r3[$i1] = null;

        $r3 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.value.InstructionOffsetValue[] branchTargetValues>;

        $r3[$i1] = null;

        $r5 = r0.<proguard.optimize.evaluation.PartialEvaluator: boolean[] generalizedContexts>;

        $r5[$i1] = 0;

        $r6 = r0.<proguard.optimize.evaluation.PartialEvaluator: int[] evaluationCounts>;

        $r6[$i1] = 0;

        $r2 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedVariables[] variablesBefore>;

        $r7 = $r2[$i1];

        if $r7 == null goto label3;

        $r2 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedVariables[] variablesBefore>;

        $r7 = $r2[$i1];

        $i2 = $r1.<proguard.classfile.attribute.CodeAttribute: int u2maxLocals>;

        virtualinvoke $r7.<proguard.evaluation.TracedVariables: void reset(int)>($i2);

     label3:
        $r4 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedStack[] stacksBefore>;

        $r8 = $r4[$i1];

        if $r8 == null goto label4;

        $r4 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedStack[] stacksBefore>;

        $r8 = $r4[$i1];

        $i2 = $r1.<proguard.classfile.attribute.CodeAttribute: int u2maxStack>;

        virtualinvoke $r8.<proguard.evaluation.TracedStack: void reset(int)>($i2);

     label4:
        $r2 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedVariables[] variablesAfter>;

        $r7 = $r2[$i1];

        if $r7 == null goto label5;

        $r2 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedVariables[] variablesAfter>;

        $r7 = $r2[$i1];

        $i2 = $r1.<proguard.classfile.attribute.CodeAttribute: int u2maxLocals>;

        virtualinvoke $r7.<proguard.evaluation.TracedVariables: void reset(int)>($i2);

     label5:
        $r4 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedStack[] stacksAfter>;

        $r8 = $r4[$i1];

        if $r8 == null goto label6;

        $r4 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedStack[] stacksAfter>;

        $r8 = $r4[$i1];

        $i2 = $r1.<proguard.classfile.attribute.CodeAttribute: int u2maxStack>;

        virtualinvoke $r8.<proguard.evaluation.TracedStack: void reset(int)>($i2);

     label6:
        $i1 = $i1 + 1;

        goto label2;

     label7:
        return;
    }

    private void initializeParameters(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.evaluation.TracedVariables)
    {
        proguard.evaluation.TracedVariables $r4, $r5, $r8;
        proguard.optimize.evaluation.PartialEvaluator r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.evaluation.value.InstructionOffsetValue $r6, $r9;
        int $i0, $i1;
        proguard.classfile.Method $r2;
        proguard.evaluation.InvocationUnit $r7;

        r0 := @this: proguard.optimize.evaluation.PartialEvaluator;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.evaluation.TracedVariables;

        $r8 = new proguard.evaluation.TracedVariables;

        $r5 = $r8;

        $i0 = $r3.<proguard.classfile.attribute.CodeAttribute: int u2maxLocals>;

        specialinvoke $r8.<proguard.evaluation.TracedVariables: void <init>(int)>($i0);

        $r9 = new proguard.evaluation.value.InstructionOffsetValue;

        specialinvoke $r9.<proguard.evaluation.value.InstructionOffsetValue: void <init>(int)>(-1);

        virtualinvoke $r5.<proguard.evaluation.TracedVariables: void setProducerValue(proguard.evaluation.value.Value)>($r9);

        $r7 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.InvocationUnit invocationUnit>;

        interfaceinvoke $r7.<proguard.evaluation.InvocationUnit: void enterMethod(proguard.classfile.Clazz,proguard.classfile.Method,proguard.evaluation.Variables)>($r1, $r2, $r5);

        virtualinvoke $r4.<proguard.evaluation.TracedVariables: void initialize(proguard.evaluation.TracedVariables)>($r5);

        $r9 = new proguard.evaluation.value.InstructionOffsetValue;

        $r6 = $r9;

        specialinvoke $r9.<proguard.evaluation.value.InstructionOffsetValue: void <init>(int)>(-1);

        $i1 = 0;

     label1:
        $i0 = virtualinvoke $r5.<proguard.evaluation.TracedVariables: int size()>();

        if $i1 >= $i0 goto label2;

        virtualinvoke $r4.<proguard.evaluation.TracedVariables: void setProducerValue(int,proguard.evaluation.value.Value)>($i1, $r6);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return;
    }

    private void pushCallingInstructionBlock(proguard.evaluation.TracedVariables, proguard.evaluation.TracedStack, int)
    {
        proguard.optimize.evaluation.PartialEvaluator r0;
        proguard.evaluation.TracedVariables $r1;
        int $i0;
        proguard.evaluation.TracedStack $r2;
        proguard.optimize.evaluation.PartialEvaluator$MyInstructionBlock $r4;
        java.util.Stack $r3;

        r0 := @this: proguard.optimize.evaluation.PartialEvaluator;

        $r1 := @parameter0: proguard.evaluation.TracedVariables;

        $r2 := @parameter1: proguard.evaluation.TracedStack;

        $i0 := @parameter2: int;

        $r3 = r0.<proguard.optimize.evaluation.PartialEvaluator: java.util.Stack callingInstructionBlockStack>;

        $r4 = new proguard.optimize.evaluation.PartialEvaluator$MyInstructionBlock;

        specialinvoke $r4.<proguard.optimize.evaluation.PartialEvaluator$MyInstructionBlock: void <init>(proguard.evaluation.TracedVariables,proguard.evaluation.TracedStack,int,proguard.optimize.evaluation.PartialEvaluator$1)>($r1, $r2, $i0, null);

        virtualinvoke $r3.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r4);

        return;
    }

    private void pushInstructionBlock(proguard.evaluation.TracedVariables, proguard.evaluation.TracedStack, int)
    {
        proguard.optimize.evaluation.PartialEvaluator r0;
        proguard.evaluation.TracedVariables $r1;
        int $i0;
        proguard.evaluation.TracedStack $r2;
        proguard.optimize.evaluation.PartialEvaluator$MyInstructionBlock $r4;
        java.util.Stack $r3;

        r0 := @this: proguard.optimize.evaluation.PartialEvaluator;

        $r1 := @parameter0: proguard.evaluation.TracedVariables;

        $r2 := @parameter1: proguard.evaluation.TracedStack;

        $i0 := @parameter2: int;

        $r3 = r0.<proguard.optimize.evaluation.PartialEvaluator: java.util.Stack instructionBlockStack>;

        $r4 = new proguard.optimize.evaluation.PartialEvaluator$MyInstructionBlock;

        specialinvoke $r4.<proguard.optimize.evaluation.PartialEvaluator$MyInstructionBlock: void <init>(proguard.evaluation.TracedVariables,proguard.evaluation.TracedStack,int,proguard.optimize.evaluation.PartialEvaluator$1)>($r1, $r2, $i0, null);

        virtualinvoke $r3.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r4);

        return;
    }

    public proguard.evaluation.value.InstructionOffsetValue branchOrigins(int)
    {
        proguard.optimize.evaluation.PartialEvaluator r0;
        proguard.evaluation.value.InstructionOffsetValue[] $r1;
        proguard.evaluation.value.InstructionOffsetValue $r2;
        int $i0;

        r0 := @this: proguard.optimize.evaluation.PartialEvaluator;

        $i0 := @parameter0: int;

        $r1 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.value.InstructionOffsetValue[] branchOriginValues>;

        $r2 = $r1[$i0];

        return $r2;
    }

    public proguard.evaluation.value.InstructionOffsetValue branchTargets(int)
    {
        proguard.optimize.evaluation.PartialEvaluator r0;
        proguard.evaluation.value.InstructionOffsetValue[] $r1;
        proguard.evaluation.value.InstructionOffsetValue $r2;
        int $i0;

        r0 := @this: proguard.optimize.evaluation.PartialEvaluator;

        $i0 := @parameter0: int;

        $r1 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.value.InstructionOffsetValue[] branchTargetValues>;

        $r2 = $r1[$i0];

        return $r2;
    }

    public int creationOffset(int)
    {
        int $i0;
        proguard.optimize.evaluation.PartialEvaluator r0;
        proguard.optimize.peephole.BranchTargetFinder $r1;

        r0 := @this: proguard.optimize.evaluation.PartialEvaluator;

        $i0 := @parameter0: int;

        $r1 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.optimize.peephole.BranchTargetFinder branchTargetFinder>;

        $i0 = virtualinvoke $r1.<proguard.optimize.peephole.BranchTargetFinder: int creationOffset(int)>($i0);

        return $i0;
    }

    public proguard.evaluation.TracedStack getStackAfter(int)
    {
        proguard.optimize.evaluation.PartialEvaluator r0;
        int $i0;
        proguard.evaluation.TracedStack $r2;
        proguard.evaluation.TracedStack[] $r1;

        r0 := @this: proguard.optimize.evaluation.PartialEvaluator;

        $i0 := @parameter0: int;

        $r1 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedStack[] stacksAfter>;

        $r2 = $r1[$i0];

        return $r2;
    }

    public proguard.evaluation.TracedStack getStackBefore(int)
    {
        proguard.optimize.evaluation.PartialEvaluator r0;
        int $i0;
        proguard.evaluation.TracedStack $r2;
        proguard.evaluation.TracedStack[] $r1;

        r0 := @this: proguard.optimize.evaluation.PartialEvaluator;

        $i0 := @parameter0: int;

        $r1 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedStack[] stacksBefore>;

        $r2 = $r1[$i0];

        return $r2;
    }

    public proguard.evaluation.TracedVariables getVariablesAfter(int)
    {
        proguard.optimize.evaluation.PartialEvaluator r0;
        proguard.evaluation.TracedVariables[] $r1;
        proguard.evaluation.TracedVariables $r2;
        int $i0;

        r0 := @this: proguard.optimize.evaluation.PartialEvaluator;

        $i0 := @parameter0: int;

        $r1 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedVariables[] variablesAfter>;

        $r2 = $r1[$i0];

        return $r2;
    }

    public proguard.evaluation.TracedVariables getVariablesBefore(int)
    {
        proguard.optimize.evaluation.PartialEvaluator r0;
        proguard.evaluation.TracedVariables[] $r1;
        proguard.evaluation.TracedVariables $r2;
        int $i0;

        r0 := @this: proguard.optimize.evaluation.PartialEvaluator;

        $i0 := @parameter0: int;

        $r1 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedVariables[] variablesBefore>;

        $r2 = $r1[$i0];

        return $r2;
    }

    public int initializationOffset(int)
    {
        int $i0;
        proguard.optimize.evaluation.PartialEvaluator r0;
        proguard.optimize.peephole.BranchTargetFinder $r1;

        r0 := @this: proguard.optimize.evaluation.PartialEvaluator;

        $i0 := @parameter0: int;

        $r1 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.optimize.peephole.BranchTargetFinder branchTargetFinder>;

        $i0 = virtualinvoke $r1.<proguard.optimize.peephole.BranchTargetFinder: int initializationOffset(int)>($i0);

        return $i0;
    }

    public boolean isBranchOrExceptionTarget(int)
    {
        proguard.optimize.evaluation.PartialEvaluator r0;
        int $i0;
        proguard.optimize.peephole.BranchTargetFinder $r1;
        boolean $z0;

        r0 := @this: proguard.optimize.evaluation.PartialEvaluator;

        $i0 := @parameter0: int;

        $r1 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.optimize.peephole.BranchTargetFinder branchTargetFinder>;

        $z0 = virtualinvoke $r1.<proguard.optimize.peephole.BranchTargetFinder: boolean isBranchTarget(int)>($i0);

        if $z0 != 0 goto label1;

        $r1 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.optimize.peephole.BranchTargetFinder branchTargetFinder>;

        $z0 = virtualinvoke $r1.<proguard.optimize.peephole.BranchTargetFinder: boolean isExceptionHandler(int)>($i0);

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public boolean isInitializer()
    {
        proguard.optimize.evaluation.PartialEvaluator r0;
        boolean $z0;
        proguard.optimize.peephole.BranchTargetFinder $r1;

        r0 := @this: proguard.optimize.evaluation.PartialEvaluator;

        $r1 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.optimize.peephole.BranchTargetFinder branchTargetFinder>;

        $z0 = virtualinvoke $r1.<proguard.optimize.peephole.BranchTargetFinder: boolean isInitializer()>();

        return $z0;
    }

    public boolean isInstruction(int)
    {
        proguard.optimize.evaluation.PartialEvaluator r0;
        int $i0;
        boolean $z0;
        proguard.optimize.peephole.BranchTargetFinder $r1;

        r0 := @this: proguard.optimize.evaluation.PartialEvaluator;

        $i0 := @parameter0: int;

        $r1 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.optimize.peephole.BranchTargetFinder branchTargetFinder>;

        $z0 = virtualinvoke $r1.<proguard.optimize.peephole.BranchTargetFinder: boolean isInstruction(int)>($i0);

        return $z0;
    }

    public boolean isSubroutine(int)
    {
        proguard.optimize.evaluation.PartialEvaluator r0;
        int $i0;
        boolean $z0;
        proguard.optimize.peephole.BranchTargetFinder $r1;

        r0 := @this: proguard.optimize.evaluation.PartialEvaluator;

        $i0 := @parameter0: int;

        $r1 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.optimize.peephole.BranchTargetFinder branchTargetFinder>;

        $z0 = virtualinvoke $r1.<proguard.optimize.peephole.BranchTargetFinder: boolean isSubroutine(int)>($i0);

        return $z0;
    }

    public boolean isSubroutineInvocation(int)
    {
        proguard.optimize.evaluation.PartialEvaluator r0;
        int $i0;
        boolean $z0;
        proguard.optimize.peephole.BranchTargetFinder $r1;

        r0 := @this: proguard.optimize.evaluation.PartialEvaluator;

        $i0 := @parameter0: int;

        $r1 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.optimize.peephole.BranchTargetFinder branchTargetFinder>;

        $z0 = virtualinvoke $r1.<proguard.optimize.peephole.BranchTargetFinder: boolean isSubroutineInvocation(int)>($i0);

        return $z0;
    }

    public boolean isSubroutineReturning(int)
    {
        proguard.optimize.evaluation.PartialEvaluator r0;
        int $i0;
        boolean $z0;
        proguard.optimize.peephole.BranchTargetFinder $r1;

        r0 := @this: proguard.optimize.evaluation.PartialEvaluator;

        $i0 := @parameter0: int;

        $r1 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.optimize.peephole.BranchTargetFinder branchTargetFinder>;

        $z0 = virtualinvoke $r1.<proguard.optimize.peephole.BranchTargetFinder: boolean isSubroutineReturning(int)>($i0);

        return $z0;
    }

    public boolean isSubroutineStart(int)
    {
        proguard.optimize.evaluation.PartialEvaluator r0;
        int $i0;
        boolean $z0;
        proguard.optimize.peephole.BranchTargetFinder $r1;

        r0 := @this: proguard.optimize.evaluation.PartialEvaluator;

        $i0 := @parameter0: int;

        $r1 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.optimize.peephole.BranchTargetFinder branchTargetFinder>;

        $z0 = virtualinvoke $r1.<proguard.optimize.peephole.BranchTargetFinder: boolean isSubroutineStart(int)>($i0);

        return $z0;
    }

    public boolean isTraced(int)
    {
        int $i0;
        proguard.optimize.evaluation.PartialEvaluator r0;
        int[] $r1;

        r0 := @this: proguard.optimize.evaluation.PartialEvaluator;

        $i0 := @parameter0: int;

        $r1 = r0.<proguard.optimize.evaluation.PartialEvaluator: int[] evaluationCounts>;

        $i0 = $r1[$i0];

        if $i0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isTraced(int, int)
    {
        proguard.optimize.evaluation.PartialEvaluator r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: proguard.optimize.evaluation.PartialEvaluator;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

     label1:
        if $i0 >= $i1 goto label3;

        $z0 = virtualinvoke r0.<proguard.optimize.evaluation.PartialEvaluator: boolean isTraced(int)>($i0);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        return 0;
    }

    public int subroutineEnd(int)
    {
        int $i0;
        proguard.optimize.evaluation.PartialEvaluator r0;
        proguard.optimize.peephole.BranchTargetFinder $r1;

        r0 := @this: proguard.optimize.evaluation.PartialEvaluator;

        $i0 := @parameter0: int;

        $r1 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.optimize.peephole.BranchTargetFinder branchTargetFinder>;

        $i0 = virtualinvoke $r1.<proguard.optimize.peephole.BranchTargetFinder: int subroutineEnd(int)>($i0);

        return $i0;
    }

    public int superInitializationOffset()
    {
        int $i0;
        proguard.optimize.evaluation.PartialEvaluator r0;
        proguard.optimize.peephole.BranchTargetFinder $r1;

        r0 := @this: proguard.optimize.evaluation.PartialEvaluator;

        $r1 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.optimize.peephole.BranchTargetFinder branchTargetFinder>;

        $i0 = virtualinvoke $r1.<proguard.optimize.peephole.BranchTargetFinder: int superInitializationOffset()>();

        return $i0;
    }

    public void visitAnyAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.Attribute)
    {
        proguard.optimize.evaluation.PartialEvaluator r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.Attribute $r2;

        r0 := @this: proguard.optimize.evaluation.PartialEvaluator;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.Attribute;

        return;
    }

    public void visitCodeAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute)
    {
        byte[] $r15;
        proguard.evaluation.value.InstructionOffsetValue[] $r9;
        proguard.optimize.peephole.BranchTargetFinder $r17;
        proguard.optimize.evaluation.PartialEvaluator r0;
        proguard.classfile.Clazz $r1;
        java.lang.StringBuffer $r6, $r18;
        proguard.evaluation.value.InstructionOffsetValue $r10;
        int $i0, $i1;
        java.lang.String $r7;
        proguard.evaluation.TracedStack[] $r13;
        proguard.classfile.visitor.ClassPrinter $r19;
        boolean $z0;
        java.io.PrintStream $r5;
        proguard.evaluation.TracedVariables $r12;
        proguard.evaluation.TracedStack $r14;
        java.lang.RuntimeException $r4;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.evaluation.TracedVariables[] $r11;
        proguard.classfile.instruction.Instruction $r16;
        proguard.classfile.Method $r2;
        java.lang.Class $r8;

        r0 := @this: proguard.optimize.evaluation.PartialEvaluator;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

     label1:
        virtualinvoke r0.<proguard.optimize.evaluation.PartialEvaluator: void visitCodeAttribute0(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute)>($r1, $r2, $r3);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>("Unexpected error while performing partial evaluation:");

        $r5 = <java.lang.System: java.io.PrintStream err>;

        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Class       = [");

        $r7 = interfaceinvoke $r1.<proguard.classfile.Clazz: java.lang.String getName()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r7);

        $r5 = <java.lang.System: java.io.PrintStream err>;

        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Method      = [");

        $r7 = interfaceinvoke $r2.<proguard.classfile.Method: java.lang.String getName(proguard.classfile.Clazz)>($r1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r7 = interfaceinvoke $r2.<proguard.classfile.Method: java.lang.String getDescriptor(proguard.classfile.Clazz)>($r1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r7);

        $r5 = <java.lang.System: java.io.PrintStream err>;

        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Exception   = [");

        $r8 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] (");

        $r7 = virtualinvoke $r4.<java.lang.RuntimeException: java.lang.String getMessage()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r7);

        $r19 = new proguard.classfile.visitor.ClassPrinter;

        specialinvoke $r19.<proguard.classfile.visitor.ClassPrinter: void <init>()>();

        interfaceinvoke $r2.<proguard.classfile.Method: void accept(proguard.classfile.Clazz,proguard.classfile.visitor.MemberVisitor)>($r1, $r19);

        $r5 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>("Evaluation results:");

        $i0 = 0;

     label4:
        $z0 = virtualinvoke r0.<proguard.optimize.evaluation.PartialEvaluator: boolean isBranchOrExceptionTarget(int)>($i0);

        if $z0 == 0 goto label5;

        $r5 = <java.lang.System: java.io.PrintStream out>;

        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Branch target from [");

        $r9 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.value.InstructionOffsetValue[] branchOriginValues>;

        $r10 = $r9[$i0];

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r10);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]:");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r7);

        $z0 = virtualinvoke r0.<proguard.optimize.evaluation.PartialEvaluator: boolean isTraced(int)>($i0);

        if $z0 == 0 goto label5;

        $r5 = <java.lang.System: java.io.PrintStream out>;

        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Vars:  ");

        $r11 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedVariables[] variablesBefore>;

        $r12 = $r11[$i0];

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r12);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r7);

        $r5 = <java.lang.System: java.io.PrintStream out>;

        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Stack: ");

        $r13 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedStack[] stacksBefore>;

        $r14 = $r13[$i0];

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r14);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r7);

     label5:
        $r15 = $r3.<proguard.classfile.attribute.CodeAttribute: byte[] code>;

        $r16 = staticinvoke <proguard.classfile.instruction.InstructionFactory: proguard.classfile.instruction.Instruction create(byte[],int)>($r15, $i0);

        $r5 = <java.lang.System: java.io.PrintStream out>;

        $r7 = virtualinvoke $r16.<proguard.classfile.instruction.Instruction: java.lang.String toString(int)>($i0);

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r7);

        $z0 = virtualinvoke r0.<proguard.optimize.evaluation.PartialEvaluator: boolean isTraced(int)>($i0);

        if $z0 == 0 goto label8;

        $r17 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.optimize.peephole.BranchTargetFinder branchTargetFinder>;

        $i1 = virtualinvoke $r17.<proguard.optimize.peephole.BranchTargetFinder: int initializationOffset(int)>($i0);

        if $i1 == -2 goto label6;

        $r5 = <java.lang.System: java.io.PrintStream out>;

        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("     is to be initialized at [");

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r7);

     label6:
        $r10 = virtualinvoke r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.value.InstructionOffsetValue branchTargets(int)>($i0);

        if $r10 == null goto label7;

        $r5 = <java.lang.System: java.io.PrintStream out>;

        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("     has overall been branching to ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r10);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r7);

     label7:
        $r5 = <java.lang.System: java.io.PrintStream out>;

        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Vars:  ");

        $r11 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedVariables[] variablesAfter>;

        $r12 = $r11[$i0];

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r12);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r7);

        $r5 = <java.lang.System: java.io.PrintStream out>;

        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Stack: ");

        $r13 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedStack[] stacksAfter>;

        $r14 = $r13[$i0];

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r14);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r7);

     label8:
        $i1 = virtualinvoke $r16.<proguard.classfile.instruction.Instruction: int length(int)>($i0);

        $i0 = $i0 + $i1;

        $i1 = $r3.<proguard.classfile.attribute.CodeAttribute: int u4codeLength>;

        if $i0 < $i1 goto label4;

        throw $r4;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    public void visitCodeAttribute0(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute)
    {
        proguard.evaluation.TracedVariables $r4;
        proguard.evaluation.TracedStack $r5;
        proguard.optimize.peephole.BranchTargetFinder $r6;
        proguard.optimize.evaluation.PartialEvaluator r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.optimize.evaluation.PartialEvaluator;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 = new proguard.evaluation.TracedVariables;

        $i0 = $r3.<proguard.classfile.attribute.CodeAttribute: int u2maxLocals>;

        specialinvoke $r4.<proguard.evaluation.TracedVariables: void <init>(int)>($i0);

        $r5 = new proguard.evaluation.TracedStack;

        $i0 = $r3.<proguard.classfile.attribute.CodeAttribute: int u2maxStack>;

        specialinvoke $r5.<proguard.evaluation.TracedStack: void <init>(int)>($i0);

        specialinvoke r0.<proguard.optimize.evaluation.PartialEvaluator: void initializeArrays(proguard.classfile.attribute.CodeAttribute)>($r3);

        specialinvoke r0.<proguard.optimize.evaluation.PartialEvaluator: void initializeParameters(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.evaluation.TracedVariables)>($r1, $r2, $r3, $r4);

        $r6 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.optimize.peephole.BranchTargetFinder branchTargetFinder>;

        virtualinvoke $r3.<proguard.classfile.attribute.CodeAttribute: void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.visitor.AttributeVisitor)>($r1, $r2, $r6);

        $i0 = $r3.<proguard.classfile.attribute.CodeAttribute: int u4codeLength>;

        specialinvoke r0.<proguard.optimize.evaluation.PartialEvaluator: void evaluateInstructionBlockAndExceptionHandlers(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.evaluation.TracedVariables,proguard.evaluation.TracedStack,int,int)>($r1, $r2, $r3, $r4, $r5, 0, $i0);

        return;
    }

    public void visitExceptionInfo(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.ExceptionInfo)
    {
        proguard.evaluation.value.ValueFactory $r13;
        proguard.classfile.ProgramClass $r9;
        proguard.optimize.evaluation.PartialEvaluator r0;
        proguard.classfile.Clazz $r1, $r12;
        int[] $r15;
        proguard.evaluation.value.InstructionOffsetValue $r7, $r18;
        int $i0, $i1, $i2, $i3, $i4;
        proguard.classfile.attribute.ExceptionInfo $r4;
        java.lang.String $r8;
        boolean $z0;
        proguard.classfile.constant.ClassConstant $r11;
        proguard.evaluation.TracedVariables $r5, $r16;
        proguard.classfile.constant.Constant $r10;
        proguard.evaluation.TracedStack $r6, $r17;
        proguard.evaluation.value.ReferenceValue $r14;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.optimize.evaluation.PartialEvaluator;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.ExceptionInfo;

        $i1 = $r4.<proguard.classfile.attribute.ExceptionInfo: int u2startPC>;

        $i2 = $r4.<proguard.classfile.attribute.ExceptionInfo: int u2endPC>;

        $z0 = virtualinvoke r0.<proguard.optimize.evaluation.PartialEvaluator: boolean isTraced(int,int)>($i1, $i2);

        if $z0 == 0 goto label7;

        $i0 = $r4.<proguard.classfile.attribute.ExceptionInfo: int u2handlerPC>;

        $i3 = $r4.<proguard.classfile.attribute.ExceptionInfo: int u2catchType>;

        $r16 = new proguard.evaluation.TracedVariables;

        $r5 = $r16;

        $i4 = $r3.<proguard.classfile.attribute.CodeAttribute: int u2maxLocals>;

        specialinvoke $r16.<proguard.evaluation.TracedVariables: void <init>(int)>($i4);

        $r17 = new proguard.evaluation.TracedStack;

        $r6 = $r17;

        $i4 = $r3.<proguard.classfile.attribute.CodeAttribute: int u2maxStack>;

        specialinvoke $r17.<proguard.evaluation.TracedStack: void <init>(int)>($i4);

        $r18 = new proguard.evaluation.value.InstructionOffsetValue;

        $r7 = $r18;

        specialinvoke $r18.<proguard.evaluation.value.InstructionOffsetValue: void <init>(int)>(-1);

        virtualinvoke $r5.<proguard.evaluation.TracedVariables: void setProducerValue(proguard.evaluation.value.Value)>($r7);

        virtualinvoke $r6.<proguard.evaluation.TracedStack: void setProducerValue(proguard.evaluation.value.Value)>($r7);

        $z0 = r0.<proguard.optimize.evaluation.PartialEvaluator: boolean evaluateAllCode>;

        specialinvoke r0.<proguard.optimize.evaluation.PartialEvaluator: void generalizeVariables(int,int,boolean,proguard.evaluation.TracedVariables)>($i1, $i2, $z0, $r5);

        if $i3 == 0 goto label4;

        $r8 = interfaceinvoke $r1.<proguard.classfile.Clazz: java.lang.String getClassName(int)>($i3);

     label1:
        if $i3 == 0 goto label5;

        $r9 = (proguard.classfile.ProgramClass) $r1;

        $r10 = virtualinvoke $r9.<proguard.classfile.ProgramClass: proguard.classfile.constant.Constant getConstant(int)>($i3);

        $r11 = (proguard.classfile.constant.ClassConstant) $r10;

        $r12 = $r11.<proguard.classfile.constant.ClassConstant: proguard.classfile.Clazz referencedClass>;

     label2:
        $r13 = r0.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.value.ValueFactory valueFactory>;

        $r14 = virtualinvoke $r13.<proguard.evaluation.value.ValueFactory: proguard.evaluation.value.ReferenceValue createReferenceValue(java.lang.String,proguard.classfile.Clazz,boolean)>($r8, $r12, 0);

        virtualinvoke $r6.<proguard.evaluation.TracedStack: void push(proguard.evaluation.value.Value)>($r14);

        $r15 = r0.<proguard.optimize.evaluation.PartialEvaluator: int[] evaluationCounts>;

        $i1 = $r15[$i0];

        specialinvoke r0.<proguard.optimize.evaluation.PartialEvaluator: void evaluateInstructionBlock(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.evaluation.TracedVariables,proguard.evaluation.TracedStack,int)>($r1, $r2, $r3, $r5, $r6, $i0);

        $z0 = r0.<proguard.optimize.evaluation.PartialEvaluator: boolean evaluateExceptions>;

        if $z0 != 0 goto label7;

        $r15 = r0.<proguard.optimize.evaluation.PartialEvaluator: int[] evaluationCounts>;

        $i0 = $r15[$i0];

        if $i1 >= $i0 goto label6;

        $z0 = 1;

     label3:
        r0.<proguard.optimize.evaluation.PartialEvaluator: boolean evaluateExceptions> = $z0;

        return;

     label4:
        $r8 = "java/lang/Throwable";

        goto label1;

     label5:
        $r12 = null;

        goto label2;

     label6:
        $z0 = 0;

        goto label3;

     label7:
        return;
    }

    public static void <clinit>()
    {
        <proguard.optimize.evaluation.PartialEvaluator: int NONE> = -2;

        <proguard.optimize.evaluation.PartialEvaluator: int MAXIMUM_EVALUATION_COUNT> = 5;

        <proguard.optimize.evaluation.PartialEvaluator: boolean DEBUG_RESULTS> = 0;

        <proguard.optimize.evaluation.PartialEvaluator: boolean DEBUG> = 0;

        <proguard.optimize.evaluation.PartialEvaluator: int AT_METHOD_ENTRY> = -1;

        <proguard.optimize.evaluation.PartialEvaluator: int AT_CATCH_ENTRY> = -1;

        return;
    }
}
