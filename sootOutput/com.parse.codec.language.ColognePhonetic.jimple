public class com.parse.codec.language.ColognePhonetic extends java.lang.Object implements com.parse.codec.StringEncoder
{
    private static final char[][] PREPROCESS_MAP;

    static void <clinit>()
    {
        char[] $r1;
        char[][] $r0;

        $r0 = newarray (char[])[4];

        $r1 = newarray (char)[2];

        $r1[0] = 196;

        $r1[1] = 65;

        $r0[0] = $r1;

        $r1 = newarray (char)[2];

        $r1[0] = 220;

        $r1[1] = 85;

        $r0[1] = $r1;

        $r1 = newarray (char)[2];

        $r1[0] = 214;

        $r1[1] = 79;

        $r0[2] = $r1;

        $r1 = newarray (char)[2];

        $r1[0] = 223;

        $r1[1] = 83;

        $r0[3] = $r1;

        <com.parse.codec.language.ColognePhonetic: char[][] PREPROCESS_MAP> = $r0;

        return;
    }

    public void <init>()
    {
        com.parse.codec.language.ColognePhonetic r0;

        r0 := @this: com.parse.codec.language.ColognePhonetic;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static boolean arrayContains(char[], char)
    {
        int $i1, $i2, $i4;
        char[] $r0;
        char $c0, $c3;

        $r0 := @parameter0: char[];

        $c0 := @parameter1: char;

        $i1 = 0;

     label1:
        $i2 = lengthof $r0;

        if $i1 >= $i2 goto label3;

        $c3 = $r0[$i1];

        $i2 = (int) $c3;

        $i4 = (int) $c0;

        if $i2 != $i4 goto label2;

        return 1;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    private java.lang.String preprocess(java.lang.String)
    {
        com.parse.codec.language.ColognePhonetic r0;
        char $c2, $c4;
        char[][] $r4;
        java.util.Locale $r2;
        int $i0, $i1, $i3, $i5;
        char[] $r3, $r5;
        java.lang.String $r1, $r6;

        r0 := @this: com.parse.codec.language.ColognePhonetic;

        $r1 := @parameter0: java.lang.String;

        $r2 = <java.util.Locale: java.util.Locale GERMAN>;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r2);

        $r3 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>();

        $i0 = 0;

     label1:
        $i1 = lengthof $r3;

        if $i0 >= $i1 goto label5;

        $c2 = $r3[$i0];

        $i1 = (int) $c2;

        if $i1 <= 90 goto label3;

        $i1 = 0;

     label2:
        $r4 = <com.parse.codec.language.ColognePhonetic: char[][] PREPROCESS_MAP>;

        $i3 = lengthof $r4;

        if $i1 >= $i3 goto label3;

        $c2 = $r3[$i0];

        $r4 = <com.parse.codec.language.ColognePhonetic: char[][] PREPROCESS_MAP>;

        $r5 = $r4[$i1];

        $c4 = $r5[0];

        $i3 = (int) $c2;

        $i5 = (int) $c4;

        if $i3 != $i5 goto label4;

        $r4 = <com.parse.codec.language.ColognePhonetic: char[][] PREPROCESS_MAP>;

        $r5 = $r4[$i1];

        $c2 = $r5[1];

        $r3[$i0] = $c2;

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        $i1 = $i1 + 1;

        goto label2;

     label5:
        $r6 = new java.lang.String;

        specialinvoke $r6.<java.lang.String: void <init>(char[])>($r3);

        return $r6;
    }

    public java.lang.String colognePhonetic(java.lang.String)
    {
        com.parse.codec.language.ColognePhonetic r0;
        char $c2, $c3, $c5;
        com.parse.codec.language.b $r3, $r6;
        com.parse.codec.language.c $r2, $r5;
        int $i0, $i1, $i4, $i6;
        char[] $r4;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: com.parse.codec.language.ColognePhonetic;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label01;

        return null;

     label01:
        $r1 = specialinvoke r0.<com.parse.codec.language.ColognePhonetic: java.lang.String preprocess(java.lang.String)>($r1);

        $r5 = new com.parse.codec.language.c;

        $r2 = $r5;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i0 = $i0 * 2;

        specialinvoke $r5.<com.parse.codec.language.c: void <init>(com.parse.codec.language.ColognePhonetic,int)>(r0, $i0);

        $r6 = new com.parse.codec.language.b;

        $r3 = $r6;

        $r4 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>();

        specialinvoke $r6.<com.parse.codec.language.b: void <init>(com.parse.codec.language.ColognePhonetic,char[])>(r0, $r4);

        $i1 = virtualinvoke $r3.<com.parse.codec.language.b: int a()>();

        $i0 = 47;

        $c2 = 45;

     label02:
        if $i1 <= 0 goto label31;

        $c3 = virtualinvoke $r3.<com.parse.codec.language.b: char d()>();

        $i4 = virtualinvoke $r3.<com.parse.codec.language.b: int a()>();

        $i1 = $i4;

        if $i4 <= 0 goto label08;

        $c5 = virtualinvoke $r3.<com.parse.codec.language.b: char c()>();

     label03:
        $r4 = newarray (char)[7];

        $r4[0] = 65;

        $r4[1] = 69;

        $r4[2] = 73;

        $r4[3] = 74;

        $r4[4] = 79;

        $r4[5] = 85;

        $r4[6] = 89;

        $z0 = staticinvoke <com.parse.codec.language.ColognePhonetic: boolean arrayContains(char[],char)>($r4, $c3);

        if $z0 == 0 goto label09;

        $c2 = 48;

     label04:
        if $c2 == 45 goto label07;

        if $i0 == $c2 goto label05;

        if $c2 != 48 goto label06;

        if $i0 == 47 goto label06;

     label05:
        if $c2 < 48 goto label06;

        if $c2 <= 56 goto label07;

     label06:
        virtualinvoke $r2.<com.parse.codec.language.c: void a(char)>($c2);

     label07:
        $i0 = $c2;

        $c2 = $c3;

        $i1 = $i4;

        goto label02;

     label08:
        $c5 = 45;

        goto label03;

     label09:
        $i6 = (int) $c3;

        if $i6 == 72 goto label10;

        $i6 = (int) $c3;

        if $i6 < 65 goto label10;

        $i6 = (int) $c3;

        if $i6 <= 90 goto label11;

     label10:
        if $i0 == 47 goto label02;

        $c2 = 45;

        goto label04;

     label11:
        $i1 = (int) $c3;

        if $i1 == 66 goto label12;

        $i1 = (int) $c3;

        if $i1 != 80 goto label13;

        if $c5 == 72 goto label13;

     label12:
        $c2 = 49;

        goto label04;

     label13:
        $i1 = (int) $c3;

        if $i1 == 68 goto label14;

        $i1 = (int) $c3;

        if $i1 != 84 goto label15;

     label14:
        $r4 = newarray (char)[3];

        $r4[0] = 83;

        $r4[1] = 67;

        $r4[2] = 90;

        $z0 = staticinvoke <com.parse.codec.language.ColognePhonetic: boolean arrayContains(char[],char)>($r4, $c5);

        if $z0 != 0 goto label15;

        $c2 = 50;

        goto label04;

     label15:
        $r4 = newarray (char)[4];

        $r4[0] = 87;

        $r4[1] = 70;

        $r4[2] = 80;

        $r4[3] = 86;

        $z0 = staticinvoke <com.parse.codec.language.ColognePhonetic: boolean arrayContains(char[],char)>($r4, $c3);

        if $z0 == 0 goto label16;

        $c2 = 51;

        goto label04;

     label16:
        $r4 = newarray (char)[3];

        $r4[0] = 71;

        $r4[1] = 75;

        $r4[2] = 81;

        $z0 = staticinvoke <com.parse.codec.language.ColognePhonetic: boolean arrayContains(char[],char)>($r4, $c3);

        if $z0 == 0 goto label17;

        $c2 = 52;

        goto label04;

     label17:
        $i1 = (int) $c3;

        if $i1 != 88 goto label18;

        $r4 = newarray (char)[3];

        $r4[0] = 67;

        $r4[1] = 75;

        $r4[2] = 81;

        $z0 = staticinvoke <com.parse.codec.language.ColognePhonetic: boolean arrayContains(char[],char)>($r4, $c2);

        if $z0 != 0 goto label18;

        virtualinvoke $r3.<com.parse.codec.language.b: void b()>();

        $i4 = $i4 + 1;

        $c2 = 52;

        goto label04;

     label18:
        $i1 = (int) $c3;

        if $i1 == 83 goto label19;

        $i1 = (int) $c3;

        if $i1 != 90 goto label20;

     label19:
        $c2 = 56;

        goto label04;

     label20:
        $i1 = (int) $c3;

        if $i1 != 67 goto label25;

        if $i0 != 47 goto label22;

        $r4 = newarray (char)[9];

        $r4[0] = 65;

        $r4[1] = 72;

        $r4[2] = 75;

        $r4[3] = 76;

        $r4[4] = 79;

        $r4[5] = 81;

        $r4[6] = 82;

        $r4[7] = 85;

        $r4[8] = 88;

        $z0 = staticinvoke <com.parse.codec.language.ColognePhonetic: boolean arrayContains(char[],char)>($r4, $c5);

        if $z0 == 0 goto label21;

        $c2 = 52;

        goto label04;

     label21:
        $c2 = 56;

        goto label04;

     label22:
        $r4 = newarray (char)[2];

        $r4[0] = 83;

        $r4[1] = 90;

        $z0 = staticinvoke <com.parse.codec.language.ColognePhonetic: boolean arrayContains(char[],char)>($r4, $c2);

        if $z0 != 0 goto label23;

        $r4 = newarray (char)[7];

        $r4[0] = 65;

        $r4[1] = 72;

        $r4[2] = 79;

        $r4[3] = 85;

        $r4[4] = 75;

        $r4[5] = 81;

        $r4[6] = 88;

        $z0 = staticinvoke <com.parse.codec.language.ColognePhonetic: boolean arrayContains(char[],char)>($r4, $c5);

        if $z0 != 0 goto label24;

     label23:
        $c2 = 56;

        goto label04;

     label24:
        $c2 = 52;

        goto label04;

     label25:
        $r4 = newarray (char)[3];

        $r4[0] = 84;

        $r4[1] = 68;

        $r4[2] = 88;

        $z0 = staticinvoke <com.parse.codec.language.ColognePhonetic: boolean arrayContains(char[],char)>($r4, $c3);

        if $z0 == 0 goto label26;

        $c2 = 56;

        goto label04;

     label26:
        $i1 = (int) $c3;

        if $i1 != 82 goto label27;

        $c2 = 55;

        goto label04;

     label27:
        $i1 = (int) $c3;

        if $i1 != 76 goto label28;

        $c2 = 53;

        goto label04;

     label28:
        $i1 = (int) $c3;

        if $i1 == 77 goto label29;

        $i1 = (int) $c3;

        if $i1 != 78 goto label30;

     label29:
        $c2 = 54;

        goto label04;

     label30:
        $c2 = $c3;

        goto label04;

     label31:
        $r1 = virtualinvoke $r2.<com.parse.codec.language.c: java.lang.String toString()>();

        return $r1;
    }

    public java.lang.Object encode(java.lang.Object)
    {
        com.parse.codec.language.ColognePhonetic r0;
        java.lang.Object $r1;
        java.lang.StringBuilder $r3;
        java.lang.Class $r4;
        java.lang.String $r5;
        com.parse.codec.EncoderException $r2;
        boolean $z0;

        r0 := @this: com.parse.codec.language.ColognePhonetic;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof java.lang.String;

        if $z0 != 0 goto label1;

        $r2 = new com.parse.codec.EncoderException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("This method\u2019s parameter was expected to be of the type ");

        $r4 = class "Ljava/lang/String;";

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". But actually it was of the type ");

        $r4 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<com.parse.codec.EncoderException: void <init>(java.lang.String)>($r5);

        throw $r2;

     label1:
        $r5 = (java.lang.String) $r1;

        $r5 = virtualinvoke r0.<com.parse.codec.language.ColognePhonetic: java.lang.String encode(java.lang.String)>($r5);

        return $r5;
    }

    public java.lang.String encode(java.lang.String)
    {
        com.parse.codec.language.ColognePhonetic r0;
        java.lang.String $r1;

        r0 := @this: com.parse.codec.language.ColognePhonetic;

        $r1 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<com.parse.codec.language.ColognePhonetic: java.lang.String colognePhonetic(java.lang.String)>($r1);

        return $r1;
    }

    public boolean isEncodeEqual(java.lang.String, java.lang.String)
    {
        com.parse.codec.language.ColognePhonetic r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: com.parse.codec.language.ColognePhonetic;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<com.parse.codec.language.ColognePhonetic: java.lang.String colognePhonetic(java.lang.String)>($r1);

        $r2 = virtualinvoke r0.<com.parse.codec.language.ColognePhonetic: java.lang.String colognePhonetic(java.lang.String)>($r2);

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        return $z0;
    }
}
