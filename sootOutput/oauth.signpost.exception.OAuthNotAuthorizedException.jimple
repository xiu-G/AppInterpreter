public class oauth.signpost.exception.OAuthNotAuthorizedException extends oauth.signpost.exception.OAuthException
{
    private static final java.lang.String ERROR;
    private java.lang.String responseBody;

    public void <init>()
    {
        oauth.signpost.exception.OAuthNotAuthorizedException r0;

        r0 := @this: oauth.signpost.exception.OAuthNotAuthorizedException;

        specialinvoke r0.<oauth.signpost.exception.OAuthException: void <init>(java.lang.String)>("Authorization failed (server replied with a 401). This can happen if the consumer key was not correct or the signatures did not match.");

        return;
    }

    public void <init>(java.lang.String)
    {
        oauth.signpost.exception.OAuthNotAuthorizedException r0;
        java.lang.String $r1;

        r0 := @this: oauth.signpost.exception.OAuthNotAuthorizedException;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<oauth.signpost.exception.OAuthException: void <init>(java.lang.String)>("Authorization failed (server replied with a 401). This can happen if the consumer key was not correct or the signatures did not match.");

        r0.<oauth.signpost.exception.OAuthNotAuthorizedException: java.lang.String responseBody> = $r1;

        return;
    }

    public java.lang.String getResponseBody()
    {
        oauth.signpost.exception.OAuthNotAuthorizedException r0;
        java.lang.String r1;

        r0 := @this: oauth.signpost.exception.OAuthNotAuthorizedException;

        r1 = r0.<oauth.signpost.exception.OAuthNotAuthorizedException: java.lang.String responseBody>;

        return r1;
    }

    public static void <clinit>()
    {
        <oauth.signpost.exception.OAuthNotAuthorizedException: java.lang.String ERROR> = "Authorization failed (server replied with a 401). This can happen if the consumer key was not correct or the signatures did not match.";

        return;
    }
}
