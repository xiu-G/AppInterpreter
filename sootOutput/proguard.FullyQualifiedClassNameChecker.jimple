public class proguard.FullyQualifiedClassNameChecker extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.visitor.ClassVisitor
{
    private final proguard.classfile.ClassPool libraryClassPool;
    private final proguard.classfile.util.WarningPrinter notePrinter;
    private final proguard.classfile.ClassPool programClassPool;

    public void <init>(proguard.classfile.ClassPool, proguard.classfile.ClassPool, proguard.classfile.util.WarningPrinter)
    {
        proguard.classfile.ClassPool $r1, $r2;
        proguard.classfile.util.WarningPrinter $r3;
        proguard.FullyQualifiedClassNameChecker r0;

        r0 := @this: proguard.FullyQualifiedClassNameChecker;

        $r1 := @parameter0: proguard.classfile.ClassPool;

        $r2 := @parameter1: proguard.classfile.ClassPool;

        $r3 := @parameter2: proguard.classfile.util.WarningPrinter;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        r0.<proguard.FullyQualifiedClassNameChecker: proguard.classfile.ClassPool programClassPool> = $r1;

        r0.<proguard.FullyQualifiedClassNameChecker: proguard.classfile.ClassPool libraryClassPool> = $r2;

        r0.<proguard.FullyQualifiedClassNameChecker: proguard.classfile.util.WarningPrinter notePrinter> = $r3;

        return;
    }

    private void checkClassName(java.lang.String)
    {
        proguard.classfile.util.WarningPrinter $r4;
        proguard.FullyQualifiedClassNameChecker r0;
        proguard.classfile.ClassPool $r2;
        proguard.classfile.Clazz $r3;
        java.lang.StringBuffer $r5;
        int $i0;
        java.lang.String $r1, $r6;
        boolean $z0;
        proguard.classfile.visitor.ClassNameFilter $r7;

        r0 := @this: proguard.FullyQualifiedClassNameChecker;

        $r1 := @parameter0: java.lang.String;

        if $r1 == null goto label1;

        $z0 = staticinvoke <proguard.FullyQualifiedClassNameChecker: boolean containsWildCards(java.lang.String)>($r1);

        if $z0 != 0 goto label1;

        $r2 = r0.<proguard.FullyQualifiedClassNameChecker: proguard.classfile.ClassPool programClassPool>;

        $r3 = virtualinvoke $r2.<proguard.classfile.ClassPool: proguard.classfile.Clazz getClass(java.lang.String)>($r1);

        if $r3 != null goto label1;

        $r2 = r0.<proguard.FullyQualifiedClassNameChecker: proguard.classfile.ClassPool libraryClassPool>;

        $r3 = virtualinvoke $r2.<proguard.classfile.ClassPool: proguard.classfile.Clazz getClass(java.lang.String)>($r1);

        if $r3 != null goto label1;

        $r4 = r0.<proguard.FullyQualifiedClassNameChecker: proguard.classfile.util.WarningPrinter notePrinter>;

        $z0 = virtualinvoke $r4.<proguard.classfile.util.WarningPrinter: boolean accepts(java.lang.String)>($r1);

        if $z0 == 0 goto label1;

        $r4 = r0.<proguard.FullyQualifiedClassNameChecker: proguard.classfile.util.WarningPrinter notePrinter>;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Note: the configuration refers to the unknown class \'");

        $r6 = staticinvoke <proguard.classfile.util.ClassUtil: java.lang.String externalClassName(java.lang.String)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r4.<proguard.classfile.util.WarningPrinter: void print(java.lang.String,java.lang.String)>($r1, $r6);

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("**/");

        $i0 = virtualinvoke $r1.<java.lang.String: int lastIndexOf(int)>(47);

        $i0 = $i0 + 1;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        $r7 = new proguard.classfile.visitor.ClassNameFilter;

        specialinvoke $r7.<proguard.classfile.visitor.ClassNameFilter: void <init>(java.lang.String,proguard.classfile.visitor.ClassVisitor)>($r1, r0);

        $r2 = r0.<proguard.FullyQualifiedClassNameChecker: proguard.classfile.ClassPool programClassPool>;

        virtualinvoke $r2.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r7);

        $r2 = r0.<proguard.FullyQualifiedClassNameChecker: proguard.classfile.ClassPool libraryClassPool>;

        virtualinvoke $r2.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r7);

     label1:
        return;
    }

    private void checkDescriptor(java.lang.String)
    {
        proguard.classfile.util.InternalTypeEnumeration $r2;
        proguard.FullyQualifiedClassNameChecker r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: proguard.FullyQualifiedClassNameChecker;

        $r1 := @parameter0: java.lang.String;

        if $r1 == null goto label2;

        $r2 = new proguard.classfile.util.InternalTypeEnumeration;

        specialinvoke $r2.<proguard.classfile.util.InternalTypeEnumeration: void <init>(java.lang.String)>($r1);

        $r1 = virtualinvoke $r2.<proguard.classfile.util.InternalTypeEnumeration: java.lang.String returnType()>();

        specialinvoke r0.<proguard.FullyQualifiedClassNameChecker: void checkType(java.lang.String)>($r1);

     label1:
        $z0 = virtualinvoke $r2.<proguard.classfile.util.InternalTypeEnumeration: boolean hasMoreTypes()>();

        if $z0 == 0 goto label2;

        $r1 = virtualinvoke $r2.<proguard.classfile.util.InternalTypeEnumeration: java.lang.String nextType()>();

        specialinvoke r0.<proguard.FullyQualifiedClassNameChecker: void checkType(java.lang.String)>($r1);

        goto label1;

     label2:
        return;
    }

    private void checkMemberSpecifications(java.util.List, boolean)
    {
        proguard.FullyQualifiedClassNameChecker r0;
        java.util.List $r1;
        int $i0, $i1;
        java.lang.Object $r3;
        java.lang.String $r2;
        proguard.MemberSpecification $r4;
        boolean $z0;

        r0 := @this: proguard.FullyQualifiedClassNameChecker;

        $r1 := @parameter0: java.util.List;

        $z0 := @parameter1: boolean;

        if $r1 == null goto label4;

        $i0 = 0;

     label1:
        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 >= $i1 goto label4;

        $r3 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        $r4 = (proguard.MemberSpecification) $r3;

        $r2 = $r4.<proguard.MemberSpecification: java.lang.String annotationType>;

        specialinvoke r0.<proguard.FullyQualifiedClassNameChecker: void checkType(java.lang.String)>($r2);

        if $z0 == 0 goto label3;

        $r2 = $r4.<proguard.MemberSpecification: java.lang.String descriptor>;

        specialinvoke r0.<proguard.FullyQualifiedClassNameChecker: void checkType(java.lang.String)>($r2);

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        $r2 = $r4.<proguard.MemberSpecification: java.lang.String descriptor>;

        specialinvoke r0.<proguard.FullyQualifiedClassNameChecker: void checkDescriptor(java.lang.String)>($r2);

        goto label2;

     label4:
        return;
    }

    private void checkType(java.lang.String)
    {
        proguard.FullyQualifiedClassNameChecker r0;
        java.lang.String $r1;

        r0 := @this: proguard.FullyQualifiedClassNameChecker;

        $r1 := @parameter0: java.lang.String;

        if $r1 == null goto label1;

        $r1 = staticinvoke <proguard.classfile.util.ClassUtil: java.lang.String internalClassNameFromType(java.lang.String)>($r1);

        specialinvoke r0.<proguard.FullyQualifiedClassNameChecker: void checkClassName(java.lang.String)>($r1);

     label1:
        return;
    }

    private static boolean containsWildCards(java.lang.String)
    {
        int $i0;
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        if $r0 == null goto label2;

        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(int)>(33);

        if $i0 >= 0 goto label1;

        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(int)>(42);

        if $i0 >= 0 goto label1;

        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(int)>(63);

        if $i0 >= 0 goto label1;

        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(int)>(44);

        if $i0 >= 0 goto label1;

        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("///");

        if $i0 < 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public void checkClassSpecifications(java.util.List)
    {
        proguard.FullyQualifiedClassNameChecker r0;
        java.util.List $r1, $r5;
        proguard.ClassSpecification $r3;
        int $i0, $i1;
        java.lang.Object $r2;
        java.lang.String $r4;

        r0 := @this: proguard.FullyQualifiedClassNameChecker;

        $r1 := @parameter0: java.util.List;

        if $r1 == null goto label2;

        $i0 = 0;

     label1:
        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 >= $i1 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        $r3 = (proguard.ClassSpecification) $r2;

        $r4 = $r3.<proguard.ClassSpecification: java.lang.String annotationType>;

        specialinvoke r0.<proguard.FullyQualifiedClassNameChecker: void checkType(java.lang.String)>($r4);

        $r4 = $r3.<proguard.ClassSpecification: java.lang.String className>;

        specialinvoke r0.<proguard.FullyQualifiedClassNameChecker: void checkClassName(java.lang.String)>($r4);

        $r4 = $r3.<proguard.ClassSpecification: java.lang.String extendsAnnotationType>;

        specialinvoke r0.<proguard.FullyQualifiedClassNameChecker: void checkType(java.lang.String)>($r4);

        $r4 = $r3.<proguard.ClassSpecification: java.lang.String extendsClassName>;

        specialinvoke r0.<proguard.FullyQualifiedClassNameChecker: void checkClassName(java.lang.String)>($r4);

        $r5 = $r3.<proguard.ClassSpecification: java.util.List fieldSpecifications>;

        specialinvoke r0.<proguard.FullyQualifiedClassNameChecker: void checkMemberSpecifications(java.util.List,boolean)>($r5, 1);

        $r5 = $r3.<proguard.ClassSpecification: java.util.List methodSpecifications>;

        specialinvoke r0.<proguard.FullyQualifiedClassNameChecker: void checkMemberSpecifications(java.util.List,boolean)>($r5, 0);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void visitAnyClass(proguard.classfile.Clazz)
    {
        java.io.PrintStream $r2;
        proguard.classfile.Clazz $r1;
        java.lang.StringBuffer $r3;
        proguard.FullyQualifiedClassNameChecker r0;
        java.lang.String $r4;

        r0 := @this: proguard.FullyQualifiedClassNameChecker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("      Maybe you meant the fully qualified name \'");

        $r4 = interfaceinvoke $r1.<proguard.classfile.Clazz: java.lang.String getName()>();

        $r4 = staticinvoke <proguard.classfile.util.ClassUtil: java.lang.String externalClassName(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'?");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r4);

        return;
    }
}
