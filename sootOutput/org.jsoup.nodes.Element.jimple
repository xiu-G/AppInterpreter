public class org.jsoup.nodes.Element extends org.jsoup.nodes.Node
{
    private java.util.Set classNames;
    private org.jsoup.parser.Tag tag;

    public void <init>(org.jsoup.parser.Tag, java.lang.String)
    {
        org.jsoup.nodes.Attributes $r3;
        org.jsoup.nodes.Element r0;
        java.lang.String $r2;
        org.jsoup.parser.Tag $r1;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 := @parameter0: org.jsoup.parser.Tag;

        $r2 := @parameter1: java.lang.String;

        $r3 = new org.jsoup.nodes.Attributes;

        specialinvoke $r3.<org.jsoup.nodes.Attributes: void <init>()>();

        specialinvoke r0.<org.jsoup.nodes.Element: void <init>(org.jsoup.parser.Tag,java.lang.String,org.jsoup.nodes.Attributes)>($r1, $r2, $r3);

        return;
    }

    public void <init>(org.jsoup.parser.Tag, java.lang.String, org.jsoup.nodes.Attributes)
    {
        org.jsoup.nodes.Attributes $r3;
        org.jsoup.nodes.Element r0;
        java.lang.String $r2;
        org.jsoup.parser.Tag $r1;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 := @parameter0: org.jsoup.parser.Tag;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: org.jsoup.nodes.Attributes;

        specialinvoke r0.<org.jsoup.nodes.Node: void <init>(java.lang.String,org.jsoup.nodes.Attributes)>($r2, $r3);

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r1);

        r0.<org.jsoup.nodes.Element: org.jsoup.parser.Tag tag> = $r1;

        return;
    }

    static void access$000(java.lang.StringBuilder, org.jsoup.nodes.TextNode)
    {
        java.lang.StringBuilder $r0;
        org.jsoup.nodes.TextNode $r1;

        $r0 := @parameter0: java.lang.StringBuilder;

        $r1 := @parameter1: org.jsoup.nodes.TextNode;

        staticinvoke <org.jsoup.nodes.Element: void appendNormalisedText(java.lang.StringBuilder,org.jsoup.nodes.TextNode)>($r0, $r1);

        return;
    }

    static org.jsoup.parser.Tag access$100(org.jsoup.nodes.Element)
    {
        org.jsoup.parser.Tag r1;
        org.jsoup.nodes.Element $r0;

        $r0 := @parameter0: org.jsoup.nodes.Element;

        r1 = $r0.<org.jsoup.nodes.Element: org.jsoup.parser.Tag tag>;

        return r1;
    }

    private static void accumulateParents(org.jsoup.nodes.Element, org.jsoup.select.Elements)
    {
        org.jsoup.nodes.Element $r0;
        org.jsoup.select.Elements $r1;
        java.lang.String $r2;
        boolean $z0;

        $r0 := @parameter0: org.jsoup.nodes.Element;

        $r1 := @parameter1: org.jsoup.select.Elements;

        $r0 = virtualinvoke $r0.<org.jsoup.nodes.Element: org.jsoup.nodes.Element parent()>();

        if $r0 == null goto label1;

        $r2 = virtualinvoke $r0.<org.jsoup.nodes.Element: java.lang.String tagName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("#root");

        if $z0 != 0 goto label1;

        virtualinvoke $r1.<org.jsoup.select.Elements: boolean add(org.jsoup.nodes.Element)>($r0);

        staticinvoke <org.jsoup.nodes.Element: void accumulateParents(org.jsoup.nodes.Element,org.jsoup.select.Elements)>($r0, $r1);

     label1:
        return;
    }

    private static void appendNormalisedText(java.lang.StringBuilder, org.jsoup.nodes.TextNode)
    {
        org.jsoup.nodes.Node $r4;
        org.jsoup.nodes.TextNode $r1;
        java.lang.StringBuilder $r0;
        java.lang.String $r2, r3;
        boolean $z0;

        $r0 := @parameter0: java.lang.StringBuilder;

        $r1 := @parameter1: org.jsoup.nodes.TextNode;

        $r2 = virtualinvoke $r1.<org.jsoup.nodes.TextNode: java.lang.String getWholeText()>();

        r3 = $r2;

        $r4 = virtualinvoke $r1.<org.jsoup.nodes.TextNode: org.jsoup.nodes.Node parent()>();

        $z0 = staticinvoke <org.jsoup.nodes.Element: boolean preserveWhitespace(org.jsoup.nodes.Node)>($r4);

        if $z0 != 0 goto label1;

        $r2 = staticinvoke <org.jsoup.nodes.TextNode: java.lang.String normaliseWhitespace(java.lang.String)>($r2);

        r3 = $r2;

        $z0 = staticinvoke <org.jsoup.nodes.TextNode: boolean lastCharIsWhitespace(java.lang.StringBuilder)>($r0);

        if $z0 == 0 goto label1;

        r3 = staticinvoke <org.jsoup.nodes.TextNode: java.lang.String stripLeadingWhitespace(java.lang.String)>($r2);

     label1:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        return;
    }

    private static void appendWhitespaceIfBr(org.jsoup.nodes.Element, java.lang.StringBuilder)
    {
        org.jsoup.nodes.Element $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r3;
        org.jsoup.parser.Tag $r2;
        boolean $z0;

        $r0 := @parameter0: org.jsoup.nodes.Element;

        $r1 := @parameter1: java.lang.StringBuilder;

        $r2 = $r0.<org.jsoup.nodes.Element: org.jsoup.parser.Tag tag>;

        $r3 = virtualinvoke $r2.<org.jsoup.parser.Tag: java.lang.String getName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("br");

        if $z0 == 0 goto label1;

        $z0 = staticinvoke <org.jsoup.nodes.TextNode: boolean lastCharIsWhitespace(java.lang.StringBuilder)>($r1);

        if $z0 != 0 goto label1;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

     label1:
        return;
    }

    private void html(java.lang.StringBuilder)
    {
        org.jsoup.nodes.Node r5;
        java.util.List $r2;
        java.util.Iterator $r3;
        org.jsoup.nodes.Element r0;
        java.lang.StringBuilder $r1;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 := @parameter0: java.lang.StringBuilder;

        $r2 = r0.<org.jsoup.nodes.Element: java.util.List childNodes>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.jsoup.nodes.Node) $r4;

        virtualinvoke r5.<org.jsoup.nodes.Node: void outerHtml(java.lang.StringBuilder)>($r1);

        goto label1;

     label2:
        return;
    }

    private static java.lang.Integer indexInList(org.jsoup.nodes.Element, java.util.List)
    {
        java.lang.Integer $r4;
        java.util.List r1;
        org.jsoup.nodes.Element $r0, r3;
        int i0, $i1;
        java.lang.Object $r2;
        boolean $z0;

        $r0 := @parameter0: org.jsoup.nodes.Element;

        r1 := @parameter1: java.util.List;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r0);

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>(r1);

        i0 = 0;

     label1:
        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if i0 >= $i1 goto label3;

        $r2 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i0);

        r3 = (org.jsoup.nodes.Element) $r2;

        $z0 = virtualinvoke r3.<org.jsoup.nodes.Element: boolean equals(java.lang.Object)>($r0);

        if $z0 == 0 goto label2;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        return $r4;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return null;
    }

    private void ownText(java.lang.StringBuilder)
    {
        java.util.Iterator $r3;
        org.jsoup.nodes.TextNode r6;
        org.jsoup.nodes.Node r5;
        java.util.List $r2;
        org.jsoup.nodes.Element r0;
        java.lang.StringBuilder $r1;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 := @parameter0: java.lang.StringBuilder;

        $r2 = r0.<org.jsoup.nodes.Element: java.util.List childNodes>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.jsoup.nodes.Node) $r4;

        $z0 = r5 instanceof org.jsoup.nodes.TextNode;

        if $z0 == 0 goto label2;

        r6 = (org.jsoup.nodes.TextNode) r5;

        staticinvoke <org.jsoup.nodes.Element: void appendNormalisedText(java.lang.StringBuilder,org.jsoup.nodes.TextNode)>($r1, r6);

        goto label1;

     label2:
        $z0 = r5 instanceof org.jsoup.nodes.Element;

        if $z0 == 0 goto label1;

        r0 = (org.jsoup.nodes.Element) r5;

        staticinvoke <org.jsoup.nodes.Element: void appendWhitespaceIfBr(org.jsoup.nodes.Element,java.lang.StringBuilder)>(r0, $r1);

        goto label1;

     label3:
        return;
    }

    static boolean preserveWhitespace(org.jsoup.nodes.Node)
    {
        org.jsoup.nodes.Node $r0;
        org.jsoup.nodes.Element r1, $r3;
        org.jsoup.parser.Tag $r2;
        boolean $z0;

        $r0 := @parameter0: org.jsoup.nodes.Node;

        if $r0 == null goto label2;

        $z0 = $r0 instanceof org.jsoup.nodes.Element;

        if $z0 == 0 goto label2;

        r1 = (org.jsoup.nodes.Element) $r0;

        $r2 = r1.<org.jsoup.nodes.Element: org.jsoup.parser.Tag tag>;

        $z0 = virtualinvoke $r2.<org.jsoup.parser.Tag: boolean preserveWhitespace()>();

        if $z0 != 0 goto label1;

        $r3 = virtualinvoke r1.<org.jsoup.nodes.Element: org.jsoup.nodes.Element parent()>();

        if $r3 == null goto label2;

        r1 = virtualinvoke r1.<org.jsoup.nodes.Element: org.jsoup.nodes.Element parent()>();

        $r2 = r1.<org.jsoup.nodes.Element: org.jsoup.parser.Tag tag>;

        $z0 = virtualinvoke $r2.<org.jsoup.parser.Tag: boolean preserveWhitespace()>();

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public org.jsoup.nodes.Element addClass(java.lang.String)
    {
        java.util.Set $r2;
        java.lang.String $r1;
        org.jsoup.nodes.Element r0;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r1);

        $r2 = virtualinvoke r0.<org.jsoup.nodes.Element: java.util.Set classNames()>();

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r1);

        virtualinvoke r0.<org.jsoup.nodes.Element: org.jsoup.nodes.Element classNames(java.util.Set)>($r2);

        return r0;
    }

    public org.jsoup.nodes.Element after(java.lang.String)
    {
        org.jsoup.nodes.Node $r2;
        java.lang.String $r1;
        org.jsoup.nodes.Element r0;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node after(java.lang.String)>($r1);

        r0 = (org.jsoup.nodes.Element) $r2;

        return r0;
    }

    public org.jsoup.nodes.Element after(org.jsoup.nodes.Node)
    {
        org.jsoup.nodes.Node $r1;
        org.jsoup.nodes.Element r0;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 := @parameter0: org.jsoup.nodes.Node;

        $r1 = specialinvoke r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node after(org.jsoup.nodes.Node)>($r1);

        r0 = (org.jsoup.nodes.Element) $r1;

        return r0;
    }

    public volatile org.jsoup.nodes.Node after(java.lang.String)
    {
        java.lang.String $r1;
        org.jsoup.nodes.Element r0;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 := @parameter0: java.lang.String;

        r0 = virtualinvoke r0.<org.jsoup.nodes.Element: org.jsoup.nodes.Element after(java.lang.String)>($r1);

        return r0;
    }

    public volatile org.jsoup.nodes.Node after(org.jsoup.nodes.Node)
    {
        org.jsoup.nodes.Node $r1;
        org.jsoup.nodes.Element r0;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 := @parameter0: org.jsoup.nodes.Node;

        r0 = virtualinvoke r0.<org.jsoup.nodes.Element: org.jsoup.nodes.Element after(org.jsoup.nodes.Node)>($r1);

        return r0;
    }

    public org.jsoup.nodes.Element append(java.lang.String)
    {
        java.util.List $r3;
        org.jsoup.nodes.Node[] $r4;
        java.lang.Object[] $r5;
        org.jsoup.nodes.Element r0;
        int $i0;
        java.lang.String $r1, $r2;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r1);

        $r2 = virtualinvoke r0.<org.jsoup.nodes.Element: java.lang.String baseUri()>();

        $r3 = staticinvoke <org.jsoup.parser.Parser: java.util.List parseFragment(java.lang.String,org.jsoup.nodes.Element,java.lang.String)>($r1, r0, $r2);

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        $r4 = newarray (org.jsoup.nodes.Node)[$i0];

        $r5 = interfaceinvoke $r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r4 = (org.jsoup.nodes.Node[]) $r5;

        virtualinvoke r0.<org.jsoup.nodes.Element: void addChildren(org.jsoup.nodes.Node[])>($r4);

        return r0;
    }

    public org.jsoup.nodes.Element appendChild(org.jsoup.nodes.Node)
    {
        org.jsoup.nodes.Node $r1;
        org.jsoup.nodes.Node[] $r2;
        org.jsoup.nodes.Element r0;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 := @parameter0: org.jsoup.nodes.Node;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r1);

        $r2 = newarray (org.jsoup.nodes.Node)[1];

        $r2[0] = $r1;

        virtualinvoke r0.<org.jsoup.nodes.Element: void addChildren(org.jsoup.nodes.Node[])>($r2);

        return r0;
    }

    public org.jsoup.nodes.Element appendElement(java.lang.String)
    {
        org.jsoup.nodes.Element r0, r2;
        java.lang.String $r1;
        org.jsoup.parser.Tag $r3;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 := @parameter0: java.lang.String;

        r2 = new org.jsoup.nodes.Element;

        $r3 = staticinvoke <org.jsoup.parser.Tag: org.jsoup.parser.Tag valueOf(java.lang.String)>($r1);

        $r1 = virtualinvoke r0.<org.jsoup.nodes.Element: java.lang.String baseUri()>();

        specialinvoke r2.<org.jsoup.nodes.Element: void <init>(org.jsoup.parser.Tag,java.lang.String)>($r3, $r1);

        virtualinvoke r0.<org.jsoup.nodes.Element: org.jsoup.nodes.Element appendChild(org.jsoup.nodes.Node)>(r2);

        return r2;
    }

    public org.jsoup.nodes.Element appendText(java.lang.String)
    {
        org.jsoup.nodes.TextNode r2;
        org.jsoup.nodes.Element r0;
        java.lang.String $r1, $r3;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 := @parameter0: java.lang.String;

        r2 = new org.jsoup.nodes.TextNode;

        $r3 = virtualinvoke r0.<org.jsoup.nodes.Element: java.lang.String baseUri()>();

        specialinvoke r2.<org.jsoup.nodes.TextNode: void <init>(java.lang.String,java.lang.String)>($r1, $r3);

        virtualinvoke r0.<org.jsoup.nodes.Element: org.jsoup.nodes.Element appendChild(org.jsoup.nodes.Node)>(r2);

        return r0;
    }

    public org.jsoup.nodes.Element attr(java.lang.String, java.lang.String)
    {
        java.lang.String $r1, $r2;
        org.jsoup.nodes.Element r0;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node attr(java.lang.String,java.lang.String)>("action", $r2);

        return r0;
    }

    public volatile org.jsoup.nodes.Node attr(java.lang.String, java.lang.String)
    {
        java.lang.String $r1, $r2;
        org.jsoup.nodes.Element r0;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        r0 = virtualinvoke r0.<org.jsoup.nodes.Element: org.jsoup.nodes.Element attr(java.lang.String,java.lang.String)>($r1, $r2);

        return r0;
    }

    public org.jsoup.nodes.Element before(java.lang.String)
    {
        org.jsoup.nodes.Node $r2;
        java.lang.String $r1;
        org.jsoup.nodes.Element r0;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node before(java.lang.String)>($r1);

        r0 = (org.jsoup.nodes.Element) $r2;

        return r0;
    }

    public org.jsoup.nodes.Element before(org.jsoup.nodes.Node)
    {
        org.jsoup.nodes.Node $r1;
        org.jsoup.nodes.Element r0;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 := @parameter0: org.jsoup.nodes.Node;

        $r1 = specialinvoke r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node before(org.jsoup.nodes.Node)>($r1);

        r0 = (org.jsoup.nodes.Element) $r1;

        return r0;
    }

    public volatile org.jsoup.nodes.Node before(java.lang.String)
    {
        java.lang.String $r1;
        org.jsoup.nodes.Element r0;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 := @parameter0: java.lang.String;

        r0 = virtualinvoke r0.<org.jsoup.nodes.Element: org.jsoup.nodes.Element before(java.lang.String)>($r1);

        return r0;
    }

    public volatile org.jsoup.nodes.Node before(org.jsoup.nodes.Node)
    {
        org.jsoup.nodes.Node $r1;
        org.jsoup.nodes.Element r0;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 := @parameter0: org.jsoup.nodes.Node;

        r0 = virtualinvoke r0.<org.jsoup.nodes.Element: org.jsoup.nodes.Element before(org.jsoup.nodes.Node)>($r1);

        return r0;
    }

    public org.jsoup.nodes.Element child(int)
    {
        int $i0;
        org.jsoup.select.Elements $r1;
        org.jsoup.nodes.Element r0;

        r0 := @this: org.jsoup.nodes.Element;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.jsoup.nodes.Element: org.jsoup.select.Elements children()>();

        r0 = virtualinvoke $r1.<org.jsoup.select.Elements: org.jsoup.nodes.Element get(int)>(0);

        return r0;
    }

    public org.jsoup.select.Elements children()
    {
        java.util.Iterator $r3;
        java.util.ArrayList r1;
        org.jsoup.nodes.Node r5;
        java.util.List $r2;
        org.jsoup.nodes.Element r0;
        java.lang.Object $r4;
        org.jsoup.select.Elements $r6;
        boolean $z0;

        r0 := @this: org.jsoup.nodes.Element;

        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        $r2 = r0.<org.jsoup.nodes.Element: java.util.List childNodes>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.jsoup.nodes.Node) $r4;

        $z0 = r5 instanceof org.jsoup.nodes.Element;

        if $z0 == 0 goto label1;

        r0 = (org.jsoup.nodes.Element) r5;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r0);

        goto label1;

     label2:
        $r6 = new org.jsoup.select.Elements;

        specialinvoke $r6.<org.jsoup.select.Elements: void <init>(java.util.List)>(r1);

        return $r6;
    }

    public java.lang.String className()
    {
        java.lang.String $r1;
        org.jsoup.nodes.Element r0;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 = virtualinvoke r0.<org.jsoup.nodes.Element: java.lang.String attr(java.lang.String)>("class");

        return $r1;
    }

    public java.util.Set classNames()
    {
        java.util.List $r5;
        org.jsoup.nodes.Element r0;
        java.util.Set $r1;
        java.lang.String[] $r3;
        java.lang.String $r2;
        java.util.LinkedHashSet $r4;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 = r0.<org.jsoup.nodes.Element: java.util.Set classNames>;

        if $r1 != null goto label1;

        $r2 = virtualinvoke r0.<org.jsoup.nodes.Element: java.lang.String className()>();

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\s+");

        $r4 = new java.util.LinkedHashSet;

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        specialinvoke $r4.<java.util.LinkedHashSet: void <init>(java.util.Collection)>($r5);

        r0.<org.jsoup.nodes.Element: java.util.Set classNames> = $r4;

     label1:
        $r1 = r0.<org.jsoup.nodes.Element: java.util.Set classNames>;

        return $r1;
    }

    public org.jsoup.nodes.Element classNames(java.util.Set)
    {
        org.jsoup.nodes.Attributes $r2;
        org.jsoup.nodes.Element r0;
        java.util.Set r1;
        java.lang.String $r3;

        r0 := @this: org.jsoup.nodes.Element;

        r1 := @parameter0: java.util.Set;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>(r1);

        $r2 = r0.<org.jsoup.nodes.Element: org.jsoup.nodes.Attributes attributes>;

        $r3 = staticinvoke <org.jsoup.helper.StringUtil: java.lang.String join(java.util.Collection,java.lang.String)>(r1, " ");

        virtualinvoke $r2.<org.jsoup.nodes.Attributes: void put(java.lang.String,java.lang.String)>("class", $r3);

        return r0;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.jsoup.nodes.Element r0;

        r0 := @this: org.jsoup.nodes.Element;

        r0 = virtualinvoke r0.<org.jsoup.nodes.Element: org.jsoup.nodes.Element clone()>();

        return r0;
    }

    public org.jsoup.nodes.Element clone()
    {
        org.jsoup.nodes.Node $r1;
        org.jsoup.nodes.Element r0;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 = specialinvoke r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node clone()>();

        r0 = (org.jsoup.nodes.Element) $r1;

        r0.<org.jsoup.nodes.Element: java.util.Set classNames> = null;

        return r0;
    }

    public volatile org.jsoup.nodes.Node clone()
    {
        org.jsoup.nodes.Element r0;

        r0 := @this: org.jsoup.nodes.Element;

        r0 = virtualinvoke r0.<org.jsoup.nodes.Element: org.jsoup.nodes.Element clone()>();

        return r0;
    }

    public java.lang.String data()
    {
        java.util.Iterator $r3;
        org.jsoup.nodes.Node r5;
        java.util.List $r2;
        org.jsoup.nodes.Element r0;
        java.lang.StringBuilder r1;
        java.lang.Object $r4;
        org.jsoup.nodes.DataNode r6;
        java.lang.String $r7;
        boolean $z0;

        r0 := @this: org.jsoup.nodes.Element;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.jsoup.nodes.Element: java.util.List childNodes>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.jsoup.nodes.Node) $r4;

        $z0 = r5 instanceof org.jsoup.nodes.DataNode;

        if $z0 == 0 goto label2;

        r6 = (org.jsoup.nodes.DataNode) r5;

        $r7 = virtualinvoke r6.<org.jsoup.nodes.DataNode: java.lang.String getWholeData()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        goto label1;

     label2:
        $z0 = r5 instanceof org.jsoup.nodes.Element;

        if $z0 == 0 goto label1;

        r0 = (org.jsoup.nodes.Element) r5;

        $r7 = virtualinvoke r0.<org.jsoup.nodes.Element: java.lang.String data()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        goto label1;

     label3:
        $r7 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public java.util.List dataNodes()
    {
        java.util.Iterator $r3;
        java.util.ArrayList r1;
        org.jsoup.nodes.Node r5;
        java.util.List $r2;
        org.jsoup.nodes.Element r0;
        java.lang.Object $r4;
        org.jsoup.nodes.DataNode r6;
        boolean $z0;

        r0 := @this: org.jsoup.nodes.Element;

        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        $r2 = r0.<org.jsoup.nodes.Element: java.util.List childNodes>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.jsoup.nodes.Node) $r4;

        $z0 = r5 instanceof org.jsoup.nodes.DataNode;

        if $z0 == 0 goto label1;

        r6 = (org.jsoup.nodes.DataNode) r5;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r6);

        goto label1;

     label2:
        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r1);

        return $r2;
    }

    public java.util.Map dataset()
    {
        org.jsoup.nodes.Attributes $r2;
        org.jsoup.nodes.Element r0;
        java.util.Map $r1;

        r0 := @this: org.jsoup.nodes.Element;

        $r2 = r0.<org.jsoup.nodes.Element: org.jsoup.nodes.Attributes attributes>;

        $r1 = virtualinvoke $r2.<org.jsoup.nodes.Attributes: java.util.Map dataset()>();

        return $r1;
    }

    public java.lang.Integer elementSiblingIndex()
    {
        org.jsoup.nodes.Element r0, $r1;
        org.jsoup.select.Elements $r3;
        java.lang.Integer $r2;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 = virtualinvoke r0.<org.jsoup.nodes.Element: org.jsoup.nodes.Element parent()>();

        if $r1 != null goto label1;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        return $r2;

     label1:
        $r1 = virtualinvoke r0.<org.jsoup.nodes.Element: org.jsoup.nodes.Element parent()>();

        $r3 = virtualinvoke $r1.<org.jsoup.nodes.Element: org.jsoup.select.Elements children()>();

        $r2 = staticinvoke <org.jsoup.nodes.Element: java.lang.Integer indexInList(org.jsoup.nodes.Element,java.util.List)>(r0, $r3);

        return $r2;
    }

    public org.jsoup.nodes.Element empty()
    {
        java.util.List $r1;
        org.jsoup.nodes.Element r0;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 = r0.<org.jsoup.nodes.Element: java.util.List childNodes>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        return r0;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object $r1;
        org.jsoup.nodes.Element r0;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 := @parameter0: java.lang.Object;

        if r0 != $r1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public org.jsoup.nodes.Element firstElementSibling()
    {
        org.jsoup.nodes.Element r0;
        int $i0;
        java.lang.Object $r2;
        org.jsoup.select.Elements $r1;

        r0 := @this: org.jsoup.nodes.Element;

        r0 = virtualinvoke r0.<org.jsoup.nodes.Element: org.jsoup.nodes.Element parent()>();

        $r1 = virtualinvoke r0.<org.jsoup.nodes.Element: org.jsoup.select.Elements children()>();

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 <= 1 goto label1;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        r0 = (org.jsoup.nodes.Element) $r2;

        return r0;

     label1:
        return null;
    }

    public org.jsoup.select.Elements getAllElements()
    {
        org.jsoup.select.Elements $r1;
        org.jsoup.nodes.Element r0;
        org.jsoup.select.Evaluator$AllElements $r2;

        r0 := @this: org.jsoup.nodes.Element;

        $r2 = new org.jsoup.select.Evaluator$AllElements;

        specialinvoke $r2.<org.jsoup.select.Evaluator$AllElements: void <init>()>();

        $r1 = staticinvoke <org.jsoup.select.Collector: org.jsoup.select.Elements collect(org.jsoup.select.Evaluator,org.jsoup.nodes.Element)>($r2, r0);

        return $r1;
    }

    public org.jsoup.nodes.Element getElementById(java.lang.String)
    {
        org.jsoup.nodes.Element r0;
        int $i0;
        org.jsoup.select.Evaluator$Id $r2;
        java.lang.String $r1;
        org.jsoup.select.Elements $r3;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notEmpty(java.lang.String)>($r1);

        $r2 = new org.jsoup.select.Evaluator$Id;

        specialinvoke $r2.<org.jsoup.select.Evaluator$Id: void <init>(java.lang.String)>($r1);

        $r3 = staticinvoke <org.jsoup.select.Collector: org.jsoup.select.Elements collect(org.jsoup.select.Evaluator,org.jsoup.nodes.Element)>($r2, r0);

        $i0 = virtualinvoke $r3.<org.jsoup.select.Elements: int size()>();

        if $i0 <= 0 goto label1;

        r0 = virtualinvoke $r3.<org.jsoup.select.Elements: org.jsoup.nodes.Element get(int)>(0);

        return r0;

     label1:
        return null;
    }

    public org.jsoup.select.Elements getElementsByAttribute(java.lang.String)
    {
        org.jsoup.select.Evaluator$Attribute $r2;
        org.jsoup.nodes.Element r0;
        java.lang.String $r1;
        org.jsoup.select.Elements $r3;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notEmpty(java.lang.String)>($r1);

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>();

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        $r2 = new org.jsoup.select.Evaluator$Attribute;

        specialinvoke $r2.<org.jsoup.select.Evaluator$Attribute: void <init>(java.lang.String)>($r1);

        $r3 = staticinvoke <org.jsoup.select.Collector: org.jsoup.select.Elements collect(org.jsoup.select.Evaluator,org.jsoup.nodes.Element)>($r2, r0);

        return $r3;
    }

    public org.jsoup.select.Elements getElementsByAttributeStarting(java.lang.String)
    {
        org.jsoup.nodes.Element r0;
        org.jsoup.select.Evaluator$AttributeStarting $r2;
        java.lang.String $r1;
        org.jsoup.select.Elements $r3;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notEmpty(java.lang.String)>($r1);

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>();

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        $r2 = new org.jsoup.select.Evaluator$AttributeStarting;

        specialinvoke $r2.<org.jsoup.select.Evaluator$AttributeStarting: void <init>(java.lang.String)>($r1);

        $r3 = staticinvoke <org.jsoup.select.Collector: org.jsoup.select.Elements collect(org.jsoup.select.Evaluator,org.jsoup.nodes.Element)>($r2, r0);

        return $r3;
    }

    public org.jsoup.select.Elements getElementsByAttributeValue(java.lang.String, java.lang.String)
    {
        org.jsoup.select.Evaluator$AttributeWithValue $r4;
        org.jsoup.nodes.Element r0;
        java.lang.String $r1, $r2;
        org.jsoup.select.Elements $r3;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r4 = new org.jsoup.select.Evaluator$AttributeWithValue;

        specialinvoke $r4.<org.jsoup.select.Evaluator$AttributeWithValue: void <init>(java.lang.String,java.lang.String)>($r1, $r2);

        $r3 = staticinvoke <org.jsoup.select.Collector: org.jsoup.select.Elements collect(org.jsoup.select.Evaluator,org.jsoup.nodes.Element)>($r4, r0);

        return $r3;
    }

    public org.jsoup.select.Elements getElementsByAttributeValueContaining(java.lang.String, java.lang.String)
    {
        org.jsoup.nodes.Element r0;
        java.lang.String $r1, $r2;
        org.jsoup.select.Elements $r3;
        org.jsoup.select.Evaluator$AttributeWithValueContaining $r4;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r4 = new org.jsoup.select.Evaluator$AttributeWithValueContaining;

        specialinvoke $r4.<org.jsoup.select.Evaluator$AttributeWithValueContaining: void <init>(java.lang.String,java.lang.String)>($r1, $r2);

        $r3 = staticinvoke <org.jsoup.select.Collector: org.jsoup.select.Elements collect(org.jsoup.select.Evaluator,org.jsoup.nodes.Element)>($r4, r0);

        return $r3;
    }

    public org.jsoup.select.Elements getElementsByAttributeValueEnding(java.lang.String, java.lang.String)
    {
        org.jsoup.select.Evaluator$AttributeWithValueEnding $r4;
        org.jsoup.nodes.Element r0;
        java.lang.String $r1, $r2;
        org.jsoup.select.Elements $r3;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r4 = new org.jsoup.select.Evaluator$AttributeWithValueEnding;

        specialinvoke $r4.<org.jsoup.select.Evaluator$AttributeWithValueEnding: void <init>(java.lang.String,java.lang.String)>($r1, $r2);

        $r3 = staticinvoke <org.jsoup.select.Collector: org.jsoup.select.Elements collect(org.jsoup.select.Evaluator,org.jsoup.nodes.Element)>($r4, r0);

        return $r3;
    }

    public org.jsoup.select.Elements getElementsByAttributeValueMatching(java.lang.String, java.lang.String)
    {
        java.lang.Throwable r3;
        java.lang.IllegalArgumentException $r6;
        org.jsoup.nodes.Element r0;
        java.lang.StringBuilder $r7;
        java.lang.String $r1, $r2;
        java.util.regex.Pattern $r4;
        org.jsoup.select.Elements $r5;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

     label1:
        $r4 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r2);

     label2:
        $r5 = virtualinvoke r0.<org.jsoup.nodes.Element: org.jsoup.select.Elements getElementsByAttributeValueMatching(java.lang.String,java.util.regex.Pattern)>($r1, $r4);

        return $r5;

     label3:
        r3 := @caughtexception;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Pattern syntax error: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r1, r3);

        throw $r6;

        catch java.util.regex.PatternSyntaxException from label1 to label2 with label3;
    }

    public org.jsoup.select.Elements getElementsByAttributeValueMatching(java.lang.String, java.util.regex.Pattern)
    {
        org.jsoup.select.Evaluator$AttributeWithValueMatching $r4;
        org.jsoup.nodes.Element r0;
        java.lang.String $r1;
        java.util.regex.Pattern $r2;
        org.jsoup.select.Elements $r3;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.util.regex.Pattern;

        $r4 = new org.jsoup.select.Evaluator$AttributeWithValueMatching;

        specialinvoke $r4.<org.jsoup.select.Evaluator$AttributeWithValueMatching: void <init>(java.lang.String,java.util.regex.Pattern)>($r1, $r2);

        $r3 = staticinvoke <org.jsoup.select.Collector: org.jsoup.select.Elements collect(org.jsoup.select.Evaluator,org.jsoup.nodes.Element)>($r4, r0);

        return $r3;
    }

    public org.jsoup.select.Elements getElementsByAttributeValueNot(java.lang.String, java.lang.String)
    {
        org.jsoup.nodes.Element r0;
        org.jsoup.select.Evaluator$AttributeWithValueNot $r4;
        java.lang.String $r1, $r2;
        org.jsoup.select.Elements $r3;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r4 = new org.jsoup.select.Evaluator$AttributeWithValueNot;

        specialinvoke $r4.<org.jsoup.select.Evaluator$AttributeWithValueNot: void <init>(java.lang.String,java.lang.String)>($r1, $r2);

        $r3 = staticinvoke <org.jsoup.select.Collector: org.jsoup.select.Elements collect(org.jsoup.select.Evaluator,org.jsoup.nodes.Element)>($r4, r0);

        return $r3;
    }

    public org.jsoup.select.Elements getElementsByAttributeValueStarting(java.lang.String, java.lang.String)
    {
        org.jsoup.select.Evaluator$AttributeWithValueStarting $r4;
        org.jsoup.nodes.Element r0;
        java.lang.String $r1, $r2;
        org.jsoup.select.Elements $r3;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r4 = new org.jsoup.select.Evaluator$AttributeWithValueStarting;

        specialinvoke $r4.<org.jsoup.select.Evaluator$AttributeWithValueStarting: void <init>(java.lang.String,java.lang.String)>($r1, $r2);

        $r3 = staticinvoke <org.jsoup.select.Collector: org.jsoup.select.Elements collect(org.jsoup.select.Evaluator,org.jsoup.nodes.Element)>($r4, r0);

        return $r3;
    }

    public org.jsoup.select.Elements getElementsByClass(java.lang.String)
    {
        org.jsoup.nodes.Element r0;
        java.lang.String $r1;
        org.jsoup.select.Elements $r2;
        org.jsoup.select.Evaluator$Class $r3;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notEmpty(java.lang.String)>($r1);

        $r3 = new org.jsoup.select.Evaluator$Class;

        specialinvoke $r3.<org.jsoup.select.Evaluator$Class: void <init>(java.lang.String)>($r1);

        $r2 = staticinvoke <org.jsoup.select.Collector: org.jsoup.select.Elements collect(org.jsoup.select.Evaluator,org.jsoup.nodes.Element)>($r3, r0);

        return $r2;
    }

    public org.jsoup.select.Elements getElementsByIndexEquals(int)
    {
        org.jsoup.select.Evaluator$IndexEquals $r2;
        org.jsoup.nodes.Element r0;
        int $i0;
        org.jsoup.select.Elements $r1;

        r0 := @this: org.jsoup.nodes.Element;

        $i0 := @parameter0: int;

        $r2 = new org.jsoup.select.Evaluator$IndexEquals;

        specialinvoke $r2.<org.jsoup.select.Evaluator$IndexEquals: void <init>(int)>($i0);

        $r1 = staticinvoke <org.jsoup.select.Collector: org.jsoup.select.Elements collect(org.jsoup.select.Evaluator,org.jsoup.nodes.Element)>($r2, r0);

        return $r1;
    }

    public org.jsoup.select.Elements getElementsByIndexGreaterThan(int)
    {
        org.jsoup.nodes.Element r0;
        int $i0;
        org.jsoup.select.Elements $r1;
        org.jsoup.select.Evaluator$IndexGreaterThan $r2;

        r0 := @this: org.jsoup.nodes.Element;

        $i0 := @parameter0: int;

        $r2 = new org.jsoup.select.Evaluator$IndexGreaterThan;

        specialinvoke $r2.<org.jsoup.select.Evaluator$IndexGreaterThan: void <init>(int)>($i0);

        $r1 = staticinvoke <org.jsoup.select.Collector: org.jsoup.select.Elements collect(org.jsoup.select.Evaluator,org.jsoup.nodes.Element)>($r2, r0);

        return $r1;
    }

    public org.jsoup.select.Elements getElementsByIndexLessThan(int)
    {
        org.jsoup.select.Evaluator$IndexLessThan $r2;
        org.jsoup.nodes.Element r0;
        int $i0;
        org.jsoup.select.Elements $r1;

        r0 := @this: org.jsoup.nodes.Element;

        $i0 := @parameter0: int;

        $r2 = new org.jsoup.select.Evaluator$IndexLessThan;

        specialinvoke $r2.<org.jsoup.select.Evaluator$IndexLessThan: void <init>(int)>($i0);

        $r1 = staticinvoke <org.jsoup.select.Collector: org.jsoup.select.Elements collect(org.jsoup.select.Evaluator,org.jsoup.nodes.Element)>($r2, r0);

        return $r1;
    }

    public org.jsoup.select.Elements getElementsByTag(java.lang.String)
    {
        org.jsoup.nodes.Element r0;
        org.jsoup.select.Evaluator$Tag $r2;
        java.lang.String $r1;
        org.jsoup.select.Elements $r3;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notEmpty(java.lang.String)>($r1);

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>();

        $r2 = new org.jsoup.select.Evaluator$Tag;

        specialinvoke $r2.<org.jsoup.select.Evaluator$Tag: void <init>(java.lang.String)>($r1);

        $r3 = staticinvoke <org.jsoup.select.Collector: org.jsoup.select.Elements collect(org.jsoup.select.Evaluator,org.jsoup.nodes.Element)>($r2, r0);

        return $r3;
    }

    public org.jsoup.select.Elements getElementsContainingOwnText(java.lang.String)
    {
        org.jsoup.nodes.Element r0;
        org.jsoup.select.Evaluator$ContainsOwnText $r3;
        java.lang.String $r1;
        org.jsoup.select.Elements $r2;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 := @parameter0: java.lang.String;

        $r3 = new org.jsoup.select.Evaluator$ContainsOwnText;

        specialinvoke $r3.<org.jsoup.select.Evaluator$ContainsOwnText: void <init>(java.lang.String)>($r1);

        $r2 = staticinvoke <org.jsoup.select.Collector: org.jsoup.select.Elements collect(org.jsoup.select.Evaluator,org.jsoup.nodes.Element)>($r3, r0);

        return $r2;
    }

    public org.jsoup.select.Elements getElementsContainingText(java.lang.String)
    {
        org.jsoup.select.Evaluator$ContainsText $r3;
        org.jsoup.nodes.Element r0;
        java.lang.String $r1;
        org.jsoup.select.Elements $r2;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 := @parameter0: java.lang.String;

        $r3 = new org.jsoup.select.Evaluator$ContainsText;

        specialinvoke $r3.<org.jsoup.select.Evaluator$ContainsText: void <init>(java.lang.String)>($r1);

        $r2 = staticinvoke <org.jsoup.select.Collector: org.jsoup.select.Elements collect(org.jsoup.select.Evaluator,org.jsoup.nodes.Element)>($r3, r0);

        return $r2;
    }

    public org.jsoup.select.Elements getElementsMatchingOwnText(java.lang.String)
    {
        java.lang.Throwable r2;
        org.jsoup.nodes.Element r0;
        java.lang.StringBuilder $r6;
        java.lang.String $r1;
        java.util.regex.Pattern $r3;
        org.jsoup.select.Elements $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 := @parameter0: java.lang.String;

     label1:
        $r3 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r1);

     label2:
        $r4 = virtualinvoke r0.<org.jsoup.nodes.Element: org.jsoup.select.Elements getElementsMatchingOwnText(java.util.regex.Pattern)>($r3);

        return $r4;

     label3:
        r2 := @caughtexception;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Pattern syntax error: ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r1, r2);

        throw $r5;

        catch java.util.regex.PatternSyntaxException from label1 to label2 with label3;
    }

    public org.jsoup.select.Elements getElementsMatchingOwnText(java.util.regex.Pattern)
    {
        org.jsoup.nodes.Element r0;
        org.jsoup.select.Evaluator$MatchesOwn $r3;
        java.util.regex.Pattern $r1;
        org.jsoup.select.Elements $r2;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 := @parameter0: java.util.regex.Pattern;

        $r3 = new org.jsoup.select.Evaluator$MatchesOwn;

        specialinvoke $r3.<org.jsoup.select.Evaluator$MatchesOwn: void <init>(java.util.regex.Pattern)>($r1);

        $r2 = staticinvoke <org.jsoup.select.Collector: org.jsoup.select.Elements collect(org.jsoup.select.Evaluator,org.jsoup.nodes.Element)>($r3, r0);

        return $r2;
    }

    public org.jsoup.select.Elements getElementsMatchingText(java.lang.String)
    {
        java.lang.Throwable r2;
        org.jsoup.nodes.Element r0;
        java.lang.StringBuilder $r6;
        java.lang.String $r1;
        java.util.regex.Pattern $r3;
        org.jsoup.select.Elements $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 := @parameter0: java.lang.String;

     label1:
        $r3 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r1);

     label2:
        $r4 = virtualinvoke r0.<org.jsoup.nodes.Element: org.jsoup.select.Elements getElementsMatchingText(java.util.regex.Pattern)>($r3);

        return $r4;

     label3:
        r2 := @caughtexception;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Pattern syntax error: ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r1, r2);

        throw $r5;

        catch java.util.regex.PatternSyntaxException from label1 to label2 with label3;
    }

    public org.jsoup.select.Elements getElementsMatchingText(java.util.regex.Pattern)
    {
        org.jsoup.select.Evaluator$Matches $r3;
        org.jsoup.nodes.Element r0;
        java.util.regex.Pattern $r1;
        org.jsoup.select.Elements $r2;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 := @parameter0: java.util.regex.Pattern;

        $r3 = new org.jsoup.select.Evaluator$Matches;

        specialinvoke $r3.<org.jsoup.select.Evaluator$Matches: void <init>(java.util.regex.Pattern)>($r1);

        $r2 = staticinvoke <org.jsoup.select.Collector: org.jsoup.select.Elements collect(org.jsoup.select.Evaluator,org.jsoup.nodes.Element)>($r3, r0);

        return $r2;
    }

    public boolean hasClass(java.lang.String)
    {
        java.util.Iterator $r3;
        org.jsoup.nodes.Element r0;
        java.util.Set $r2;
        java.lang.Object $r4;
        java.lang.String $r1, r5;
        boolean $z0;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.jsoup.nodes.Element: java.util.Set classNames()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r4;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r5);

        if $z0 == 0 goto label1;

        return 1;

     label2:
        return 0;
    }

    public boolean hasText()
    {
        org.jsoup.nodes.Node r4;
        java.util.List $r1;
        java.util.Iterator $r2;
        org.jsoup.nodes.TextNode r5;
        org.jsoup.nodes.Element r0;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 = r0.<org.jsoup.nodes.Element: java.util.List childNodes>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.jsoup.nodes.Node) $r3;

        $z0 = r4 instanceof org.jsoup.nodes.TextNode;

        if $z0 == 0 goto label2;

        r5 = (org.jsoup.nodes.TextNode) r4;

        $z0 = virtualinvoke r5.<org.jsoup.nodes.TextNode: boolean isBlank()>();

        if $z0 != 0 goto label1;

        return 1;

     label2:
        $z0 = r4 instanceof org.jsoup.nodes.Element;

        if $z0 == 0 goto label1;

        r0 = (org.jsoup.nodes.Element) r4;

        $z0 = virtualinvoke r0.<org.jsoup.nodes.Element: boolean hasText()>();

        if $z0 == 0 goto label1;

        return 1;

     label3:
        return 0;
    }

    public int hashCode()
    {
        org.jsoup.nodes.Element r0;
        int $i0, $i1;
        org.jsoup.parser.Tag $r1;

        r0 := @this: org.jsoup.nodes.Element;

        $i0 = specialinvoke r0.<org.jsoup.nodes.Node: int hashCode()>();

        $i0 = $i0 * 31;

        $r1 = r0.<org.jsoup.nodes.Element: org.jsoup.parser.Tag tag>;

        if $r1 == null goto label2;

        $r1 = r0.<org.jsoup.nodes.Element: org.jsoup.parser.Tag tag>;

        $i1 = virtualinvoke $r1.<org.jsoup.parser.Tag: int hashCode()>();

     label1:
        $i0 = $i0 + $i1;

        return $i0;

     label2:
        $i1 = 0;

        goto label1;
    }

    public java.lang.String html()
    {
        java.lang.StringBuilder r1;
        java.lang.String $r2;
        org.jsoup.nodes.Element r0;

        r0 := @this: org.jsoup.nodes.Element;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        specialinvoke r0.<org.jsoup.nodes.Element: void html(java.lang.StringBuilder)>(r1);

        $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        return $r2;
    }

    public org.jsoup.nodes.Element html(java.lang.String)
    {
        java.lang.String $r1;
        org.jsoup.nodes.Element r0;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.jsoup.nodes.Element: org.jsoup.nodes.Element empty()>();

        virtualinvoke r0.<org.jsoup.nodes.Element: org.jsoup.nodes.Element append(java.lang.String)>($r1);

        return r0;
    }

    public java.lang.String id()
    {
        java.lang.String $r1;
        org.jsoup.nodes.Element r0;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 = virtualinvoke r0.<org.jsoup.nodes.Element: java.lang.String attr(java.lang.String)>("id");

        if $r1 != null goto label1;

        return "";

     label1:
        return $r1;
    }

    public org.jsoup.nodes.Element insertChildren(int, java.util.Collection)
    {
        org.jsoup.nodes.Node[] $r3;
        java.lang.Object[] $r4;
        java.util.Collection r1;
        java.util.ArrayList r2;
        org.jsoup.nodes.Element r0;
        int $i0, $i1, $i2;
        boolean $z0;

        r0 := @this: org.jsoup.nodes.Element;

        $i0 := @parameter0: int;

        r1 := @parameter1: java.util.Collection;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "Children collection to be inserted must not be null.");

        $i1 = virtualinvoke r0.<org.jsoup.nodes.Element: int childNodeSize()>();

        if $i0 >= 0 goto label1;

        $i2 = $i1 + 1;

        $i0 = $i0 + $i2;

     label1:
        if $i0 < 0 goto label3;

        if $i0 > $i1 goto label3;

        $z0 = 1;

     label2:
        staticinvoke <org.jsoup.helper.Validate: void isTrue(boolean,java.lang.String)>($z0, "Insert position out of bounds.");

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>(java.util.Collection)>(r1);

        $i1 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        $r3 = newarray (org.jsoup.nodes.Node)[$i1];

        $r4 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r3 = (org.jsoup.nodes.Node[]) $r4;

        virtualinvoke r0.<org.jsoup.nodes.Element: void addChildren(int,org.jsoup.nodes.Node[])>($i0, $r3);

        return r0;

     label3:
        $z0 = 0;

        goto label2;
    }

    public boolean isBlock()
    {
        org.jsoup.parser.Tag $r1;
        org.jsoup.nodes.Element r0;
        boolean $z0;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 = r0.<org.jsoup.nodes.Element: org.jsoup.parser.Tag tag>;

        $z0 = virtualinvoke $r1.<org.jsoup.parser.Tag: boolean isBlock()>();

        return $z0;
    }

    public org.jsoup.nodes.Element lastElementSibling()
    {
        org.jsoup.nodes.Element r0;
        int $i0, $i1;
        java.lang.Object $r2;
        org.jsoup.select.Elements $r1;

        r0 := @this: org.jsoup.nodes.Element;

        r0 = virtualinvoke r0.<org.jsoup.nodes.Element: org.jsoup.nodes.Element parent()>();

        $r1 = virtualinvoke r0.<org.jsoup.nodes.Element: org.jsoup.select.Elements children()>();

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 <= 1 goto label1;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = -1;

        $i0 = $i0 + $i1;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        r0 = (org.jsoup.nodes.Element) $r2;

        return r0;

     label1:
        return null;
    }

    public org.jsoup.nodes.Element nextElementSibling()
    {
        java.lang.Integer $r4;
        org.jsoup.nodes.Node $r1;
        org.jsoup.nodes.Element r0, $r2;
        int $i0, $i1;
        java.lang.Object $r5;
        org.jsoup.select.Elements $r3;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 = r0.<org.jsoup.nodes.Element: org.jsoup.nodes.Node parentNode>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r0.<org.jsoup.nodes.Element: org.jsoup.nodes.Element parent()>();

        $r3 = virtualinvoke $r2.<org.jsoup.nodes.Element: org.jsoup.select.Elements children()>();

        $r4 = staticinvoke <org.jsoup.nodes.Element: java.lang.Integer indexInList(org.jsoup.nodes.Element,java.util.List)>(r0, $r3);

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r4);

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        $i1 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $i1 = $i1 + 1;

        if $i0 <= $i1 goto label2;

        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $i0 = $i0 + 1;

        $r5 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i0);

        r0 = (org.jsoup.nodes.Element) $r5;

        return r0;

     label2:
        return null;
    }

    public java.lang.String nodeName()
    {
        java.lang.String $r1;
        org.jsoup.parser.Tag $r2;
        org.jsoup.nodes.Element r0;

        r0 := @this: org.jsoup.nodes.Element;

        $r2 = r0.<org.jsoup.nodes.Element: org.jsoup.parser.Tag tag>;

        $r1 = virtualinvoke $r2.<org.jsoup.parser.Tag: java.lang.String getName()>();

        return $r1;
    }

    void outerHtmlHead(java.lang.StringBuilder, int, org.jsoup.nodes.Document$OutputSettings)
    {
        org.jsoup.nodes.Attributes $r7;
        org.jsoup.parser.Tag $r3;
        java.util.List $r8;
        org.jsoup.nodes.Document$OutputSettings $r2;
        org.jsoup.nodes.Element r0, $r4;
        int $i0, $i1;
        java.lang.StringBuilder $r1, $r5;
        java.lang.String $r6;
        boolean $z0;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 := @parameter0: java.lang.StringBuilder;

        $i0 := @parameter1: int;

        $r2 := @parameter2: org.jsoup.nodes.Document$OutputSettings;

        $i1 = virtualinvoke $r1.<java.lang.StringBuilder: int length()>();

        if $i1 <= 0 goto label3;

        $z0 = virtualinvoke $r2.<org.jsoup.nodes.Document$OutputSettings: boolean prettyPrint()>();

        if $z0 == 0 goto label3;

        $r3 = r0.<org.jsoup.nodes.Element: org.jsoup.parser.Tag tag>;

        $z0 = virtualinvoke $r3.<org.jsoup.parser.Tag: boolean formatAsBlock()>();

        if $z0 != 0 goto label2;

        $r4 = virtualinvoke r0.<org.jsoup.nodes.Element: org.jsoup.nodes.Element parent()>();

        if $r4 == null goto label1;

        $r4 = virtualinvoke r0.<org.jsoup.nodes.Element: org.jsoup.nodes.Element parent()>();

        $r3 = virtualinvoke $r4.<org.jsoup.nodes.Element: org.jsoup.parser.Tag tag()>();

        $z0 = virtualinvoke $r3.<org.jsoup.parser.Tag: boolean formatAsBlock()>();

        if $z0 != 0 goto label2;

     label1:
        $z0 = virtualinvoke $r2.<org.jsoup.nodes.Document$OutputSettings: boolean outline()>();

        if $z0 == 0 goto label3;

     label2:
        virtualinvoke r0.<org.jsoup.nodes.Element: void indent(java.lang.StringBuilder,int,org.jsoup.nodes.Document$OutputSettings)>($r1, $i0, $r2);

     label3:
        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<");

        $r6 = virtualinvoke r0.<org.jsoup.nodes.Element: java.lang.String tagName()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r7 = r0.<org.jsoup.nodes.Element: org.jsoup.nodes.Attributes attributes>;

        virtualinvoke $r7.<org.jsoup.nodes.Attributes: void html(java.lang.StringBuilder,org.jsoup.nodes.Document$OutputSettings)>($r1, $r2);

        $r8 = r0.<org.jsoup.nodes.Element: java.util.List childNodes>;

        $z0 = interfaceinvoke $r8.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label4;

        $r3 = r0.<org.jsoup.nodes.Element: org.jsoup.parser.Tag tag>;

        $z0 = virtualinvoke $r3.<org.jsoup.parser.Tag: boolean isSelfClosing()>();

        if $z0 == 0 goto label4;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" />");

        return;

     label4:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        return;
    }

    void outerHtmlTail(java.lang.StringBuilder, int, org.jsoup.nodes.Document$OutputSettings)
    {
        org.jsoup.parser.Tag $r4;
        java.util.List $r3;
        org.jsoup.nodes.Document$OutputSettings $r2;
        org.jsoup.nodes.Element r0;
        int $i0, $i1;
        java.lang.StringBuilder $r1;
        java.lang.Object $r5;
        java.lang.String $r6;
        boolean $z0;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 := @parameter0: java.lang.StringBuilder;

        $i0 := @parameter1: int;

        $r2 := @parameter2: org.jsoup.nodes.Document$OutputSettings;

        $r3 = r0.<org.jsoup.nodes.Element: java.util.List childNodes>;

        $z0 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<org.jsoup.nodes.Element: org.jsoup.parser.Tag tag>;

        $z0 = virtualinvoke $r4.<org.jsoup.parser.Tag: boolean isSelfClosing()>();

        if $z0 != 0 goto label4;

     label1:
        $z0 = virtualinvoke $r2.<org.jsoup.nodes.Document$OutputSettings: boolean prettyPrint()>();

        if $z0 == 0 goto label3;

        $r3 = r0.<org.jsoup.nodes.Element: java.util.List childNodes>;

        $z0 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        $r4 = r0.<org.jsoup.nodes.Element: org.jsoup.parser.Tag tag>;

        $z0 = virtualinvoke $r4.<org.jsoup.parser.Tag: boolean formatAsBlock()>();

        if $z0 != 0 goto label2;

        $z0 = virtualinvoke $r2.<org.jsoup.nodes.Document$OutputSettings: boolean outline()>();

        if $z0 == 0 goto label3;

        $r3 = r0.<org.jsoup.nodes.Element: java.util.List childNodes>;

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i1 > 1 goto label2;

        $r3 = r0.<org.jsoup.nodes.Element: java.util.List childNodes>;

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i1 != 1 goto label3;

        $r3 = r0.<org.jsoup.nodes.Element: java.util.List childNodes>;

        $r5 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(0);

        $z0 = $r5 instanceof org.jsoup.nodes.TextNode;

        if $z0 != 0 goto label3;

     label2:
        virtualinvoke r0.<org.jsoup.nodes.Element: void indent(java.lang.StringBuilder,int,org.jsoup.nodes.Document$OutputSettings)>($r1, $i0, $r2);

     label3:
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</");

        $r6 = virtualinvoke r0.<org.jsoup.nodes.Element: java.lang.String tagName()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

     label4:
        return;
    }

    public java.lang.String ownText()
    {
        java.lang.StringBuilder r1;
        java.lang.String $r2;
        org.jsoup.nodes.Element r0;

        r0 := @this: org.jsoup.nodes.Element;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        specialinvoke r0.<org.jsoup.nodes.Element: void ownText(java.lang.StringBuilder)>(r1);

        $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        return $r2;
    }

    public final org.jsoup.nodes.Element parent()
    {
        org.jsoup.nodes.Node $r1;
        org.jsoup.nodes.Element r0;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 = r0.<org.jsoup.nodes.Element: org.jsoup.nodes.Node parentNode>;

        r0 = (org.jsoup.nodes.Element) $r1;

        return r0;
    }

    public volatile org.jsoup.nodes.Node parent()
    {
        org.jsoup.nodes.Element r0;

        r0 := @this: org.jsoup.nodes.Element;

        r0 = virtualinvoke r0.<org.jsoup.nodes.Element: org.jsoup.nodes.Element parent()>();

        return r0;
    }

    public org.jsoup.select.Elements parents()
    {
        org.jsoup.select.Elements r1;
        org.jsoup.nodes.Element r0;

        r0 := @this: org.jsoup.nodes.Element;

        r1 = new org.jsoup.select.Elements;

        specialinvoke r1.<org.jsoup.select.Elements: void <init>()>();

        staticinvoke <org.jsoup.nodes.Element: void accumulateParents(org.jsoup.nodes.Element,org.jsoup.select.Elements)>(r0, r1);

        return r1;
    }

    public org.jsoup.nodes.Element prepend(java.lang.String)
    {
        java.util.List $r3;
        org.jsoup.nodes.Node[] $r4;
        java.lang.Object[] $r5;
        org.jsoup.nodes.Element r0;
        int $i0;
        java.lang.String $r1, $r2;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r1);

        $r2 = virtualinvoke r0.<org.jsoup.nodes.Element: java.lang.String baseUri()>();

        $r3 = staticinvoke <org.jsoup.parser.Parser: java.util.List parseFragment(java.lang.String,org.jsoup.nodes.Element,java.lang.String)>($r1, r0, $r2);

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        $r4 = newarray (org.jsoup.nodes.Node)[$i0];

        $r5 = interfaceinvoke $r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r4 = (org.jsoup.nodes.Node[]) $r5;

        virtualinvoke r0.<org.jsoup.nodes.Element: void addChildren(int,org.jsoup.nodes.Node[])>(0, $r4);

        return r0;
    }

    public org.jsoup.nodes.Element prependChild(org.jsoup.nodes.Node)
    {
        org.jsoup.nodes.Node $r1;
        org.jsoup.nodes.Node[] $r2;
        org.jsoup.nodes.Element r0;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 := @parameter0: org.jsoup.nodes.Node;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r1);

        $r2 = newarray (org.jsoup.nodes.Node)[1];

        $r2[0] = $r1;

        virtualinvoke r0.<org.jsoup.nodes.Element: void addChildren(int,org.jsoup.nodes.Node[])>(0, $r2);

        return r0;
    }

    public org.jsoup.nodes.Element prependElement(java.lang.String)
    {
        org.jsoup.nodes.Element r0, r2;
        java.lang.String $r1;
        org.jsoup.parser.Tag $r3;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 := @parameter0: java.lang.String;

        r2 = new org.jsoup.nodes.Element;

        $r3 = staticinvoke <org.jsoup.parser.Tag: org.jsoup.parser.Tag valueOf(java.lang.String)>($r1);

        $r1 = virtualinvoke r0.<org.jsoup.nodes.Element: java.lang.String baseUri()>();

        specialinvoke r2.<org.jsoup.nodes.Element: void <init>(org.jsoup.parser.Tag,java.lang.String)>($r3, $r1);

        virtualinvoke r0.<org.jsoup.nodes.Element: org.jsoup.nodes.Element prependChild(org.jsoup.nodes.Node)>(r2);

        return r2;
    }

    public org.jsoup.nodes.Element prependText(java.lang.String)
    {
        org.jsoup.nodes.TextNode r2;
        org.jsoup.nodes.Element r0;
        java.lang.String $r1, $r3;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 := @parameter0: java.lang.String;

        r2 = new org.jsoup.nodes.TextNode;

        $r3 = virtualinvoke r0.<org.jsoup.nodes.Element: java.lang.String baseUri()>();

        specialinvoke r2.<org.jsoup.nodes.TextNode: void <init>(java.lang.String,java.lang.String)>($r1, $r3);

        virtualinvoke r0.<org.jsoup.nodes.Element: org.jsoup.nodes.Element prependChild(org.jsoup.nodes.Node)>(r2);

        return r0;
    }

    public org.jsoup.nodes.Element previousElementSibling()
    {
        org.jsoup.nodes.Node $r1;
        org.jsoup.nodes.Element r0, $r2;
        int $i0;
        java.lang.Object $r5;
        org.jsoup.select.Elements $r3;
        java.lang.Integer $r4;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 = r0.<org.jsoup.nodes.Element: org.jsoup.nodes.Node parentNode>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r0.<org.jsoup.nodes.Element: org.jsoup.nodes.Element parent()>();

        $r3 = virtualinvoke $r2.<org.jsoup.nodes.Element: org.jsoup.select.Elements children()>();

        $r4 = staticinvoke <org.jsoup.nodes.Element: java.lang.Integer indexInList(org.jsoup.nodes.Element,java.util.List)>(r0, $r3);

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r4);

        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        if $i0 <= 0 goto label2;

        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $i0 = $i0 + -1;

        $r5 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i0);

        r0 = (org.jsoup.nodes.Element) $r5;

        return r0;

     label2:
        return null;
    }

    public org.jsoup.nodes.Element removeClass(java.lang.String)
    {
        java.util.Set $r2;
        java.lang.String $r1;
        org.jsoup.nodes.Element r0;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r1);

        $r2 = virtualinvoke r0.<org.jsoup.nodes.Element: java.util.Set classNames()>();

        interfaceinvoke $r2.<java.util.Set: boolean remove(java.lang.Object)>($r1);

        virtualinvoke r0.<org.jsoup.nodes.Element: org.jsoup.nodes.Element classNames(java.util.Set)>($r2);

        return r0;
    }

    public org.jsoup.select.Elements select(java.lang.String)
    {
        java.lang.String $r1;
        org.jsoup.select.Elements $r2;
        org.jsoup.nodes.Element r0;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.jsoup.select.Selector: org.jsoup.select.Elements select(java.lang.String,org.jsoup.nodes.Element)>($r1, r0);

        return $r2;
    }

    public org.jsoup.select.Elements siblingElements()
    {
        java.util.Iterator $r5;
        org.jsoup.nodes.Node $r1;
        org.jsoup.nodes.Element r0, $r3;
        int $i0;
        java.lang.Object $r6;
        org.jsoup.select.Elements r2, r4, $r7;
        boolean $z0;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 = r0.<org.jsoup.nodes.Element: org.jsoup.nodes.Node parentNode>;

        if $r1 != null goto label1;

        r4 = new org.jsoup.select.Elements;

        specialinvoke r4.<org.jsoup.select.Elements: void <init>(int)>(0);

        return r4;

     label1:
        $r3 = virtualinvoke r0.<org.jsoup.nodes.Element: org.jsoup.nodes.Element parent()>();

        r2 = virtualinvoke $r3.<org.jsoup.nodes.Element: org.jsoup.select.Elements children()>();

        $r7 = new org.jsoup.select.Elements;

        r4 = $r7;

        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        $i0 = $i0 + -1;

        specialinvoke $r7.<org.jsoup.select.Elements: void <init>(int)>($i0);

        $r5 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (org.jsoup.nodes.Element) $r6;

        if $r3 == r0 goto label2;

        virtualinvoke r4.<org.jsoup.select.Elements: boolean add(org.jsoup.nodes.Element)>($r3);

        goto label2;

     label3:
        return r4;
    }

    public org.jsoup.parser.Tag tag()
    {
        org.jsoup.parser.Tag r1;
        org.jsoup.nodes.Element r0;

        r0 := @this: org.jsoup.nodes.Element;

        r1 = r0.<org.jsoup.nodes.Element: org.jsoup.parser.Tag tag>;

        return r1;
    }

    public java.lang.String tagName()
    {
        java.lang.String $r1;
        org.jsoup.parser.Tag $r2;
        org.jsoup.nodes.Element r0;

        r0 := @this: org.jsoup.nodes.Element;

        $r2 = r0.<org.jsoup.nodes.Element: org.jsoup.parser.Tag tag>;

        $r1 = virtualinvoke $r2.<org.jsoup.parser.Tag: java.lang.String getName()>();

        return $r1;
    }

    public org.jsoup.nodes.Element tagName(java.lang.String)
    {
        java.lang.String $r1;
        org.jsoup.parser.Tag $r2;
        org.jsoup.nodes.Element r0;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notEmpty(java.lang.String,java.lang.String)>($r1, "Tag name must not be empty.");

        $r2 = staticinvoke <org.jsoup.parser.Tag: org.jsoup.parser.Tag valueOf(java.lang.String)>($r1);

        r0.<org.jsoup.nodes.Element: org.jsoup.parser.Tag tag> = $r2;

        return r0;
    }

    public java.lang.String text()
    {
        org.jsoup.nodes.Element r0;
        java.lang.StringBuilder r1;
        java.lang.String $r4;
        org.jsoup.nodes.Element$1 $r2;
        org.jsoup.select.NodeTraversor $r3;

        r0 := @this: org.jsoup.nodes.Element;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = new org.jsoup.select.NodeTraversor;

        $r2 = new org.jsoup.nodes.Element$1;

        specialinvoke $r2.<org.jsoup.nodes.Element$1: void <init>(org.jsoup.nodes.Element,java.lang.StringBuilder)>(r0, r1);

        specialinvoke $r3.<org.jsoup.select.NodeTraversor: void <init>(org.jsoup.select.NodeVisitor)>($r2);

        virtualinvoke $r3.<org.jsoup.select.NodeTraversor: void traverse(org.jsoup.nodes.Node)>(r0);

        $r4 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String trim()>();

        return $r4;
    }

    public org.jsoup.nodes.Element text(java.lang.String)
    {
        org.jsoup.nodes.TextNode r2;
        org.jsoup.nodes.Element r0;
        java.lang.String $r1, $r3;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r1);

        virtualinvoke r0.<org.jsoup.nodes.Element: org.jsoup.nodes.Element empty()>();

        r2 = new org.jsoup.nodes.TextNode;

        $r3 = r0.<org.jsoup.nodes.Element: java.lang.String baseUri>;

        specialinvoke r2.<org.jsoup.nodes.TextNode: void <init>(java.lang.String,java.lang.String)>($r1, $r3);

        virtualinvoke r0.<org.jsoup.nodes.Element: org.jsoup.nodes.Element appendChild(org.jsoup.nodes.Node)>(r2);

        return r0;
    }

    public java.util.List textNodes()
    {
        java.util.Iterator $r3;
        org.jsoup.nodes.TextNode r6;
        java.util.ArrayList r1;
        org.jsoup.nodes.Node r5;
        java.util.List $r2;
        org.jsoup.nodes.Element r0;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: org.jsoup.nodes.Element;

        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        $r2 = r0.<org.jsoup.nodes.Element: java.util.List childNodes>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.jsoup.nodes.Node) $r4;

        $z0 = r5 instanceof org.jsoup.nodes.TextNode;

        if $z0 == 0 goto label1;

        r6 = (org.jsoup.nodes.TextNode) r5;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r6);

        goto label1;

     label2:
        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r1);

        return $r2;
    }

    public java.lang.String toString()
    {
        java.lang.String $r1;
        org.jsoup.nodes.Element r0;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 = virtualinvoke r0.<org.jsoup.nodes.Element: java.lang.String outerHtml()>();

        return $r1;
    }

    public org.jsoup.nodes.Element toggleClass(java.lang.String)
    {
        org.jsoup.nodes.Element r0;
        java.util.Set $r2;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r1);

        $r2 = virtualinvoke r0.<org.jsoup.nodes.Element: java.util.Set classNames()>();

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        interfaceinvoke $r2.<java.util.Set: boolean remove(java.lang.Object)>($r1);

     label1:
        virtualinvoke r0.<org.jsoup.nodes.Element: org.jsoup.nodes.Element classNames(java.util.Set)>($r2);

        return r0;

     label2:
        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r1);

        goto label1;
    }

    public java.lang.String val()
    {
        java.lang.String $r1;
        org.jsoup.nodes.Element r0;
        boolean $z0;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 = virtualinvoke r0.<org.jsoup.nodes.Element: java.lang.String tagName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("textarea");

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<org.jsoup.nodes.Element: java.lang.String text()>();

        return $r1;

     label1:
        $r1 = virtualinvoke r0.<org.jsoup.nodes.Element: java.lang.String attr(java.lang.String)>("value");

        return $r1;
    }

    public org.jsoup.nodes.Element val(java.lang.String)
    {
        org.jsoup.nodes.Element r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.jsoup.nodes.Element: java.lang.String tagName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("textarea");

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.jsoup.nodes.Element: org.jsoup.nodes.Element text(java.lang.String)>($r1);

        return r0;

     label1:
        virtualinvoke r0.<org.jsoup.nodes.Element: org.jsoup.nodes.Element attr(java.lang.String,java.lang.String)>("value", $r1);

        return r0;
    }

    public org.jsoup.nodes.Element wrap(java.lang.String)
    {
        org.jsoup.nodes.Node $r2;
        java.lang.String $r1;
        org.jsoup.nodes.Element r0;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node wrap(java.lang.String)>($r1);

        r0 = (org.jsoup.nodes.Element) $r2;

        return r0;
    }

    public volatile org.jsoup.nodes.Node wrap(java.lang.String)
    {
        java.lang.String $r1;
        org.jsoup.nodes.Element r0;

        r0 := @this: org.jsoup.nodes.Element;

        $r1 := @parameter0: java.lang.String;

        r0 = virtualinvoke r0.<org.jsoup.nodes.Element: org.jsoup.nodes.Element wrap(java.lang.String)>($r1);

        return r0;
    }
}
