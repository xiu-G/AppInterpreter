public class org.htmlparser.filters.AndFilter extends java.lang.Object implements org.htmlparser.NodeFilter
{
    protected org.htmlparser.NodeFilter[] a;

    public void <init>()
    {
        org.htmlparser.filters.AndFilter r0;

        r0 := @this: org.htmlparser.filters.AndFilter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        virtualinvoke r0.<org.htmlparser.filters.AndFilter: void setPredicates(org.htmlparser.NodeFilter[])>(null);

        return;
    }

    public void <init>(org.htmlparser.NodeFilter, org.htmlparser.NodeFilter)
    {
        org.htmlparser.NodeFilter[] $r3;
        org.htmlparser.NodeFilter $r1, $r2;
        org.htmlparser.filters.AndFilter r0;

        r0 := @this: org.htmlparser.filters.AndFilter;

        $r1 := @parameter0: org.htmlparser.NodeFilter;

        $r2 := @parameter1: org.htmlparser.NodeFilter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = newarray (org.htmlparser.NodeFilter)[2];

        $r3[0] = $r1;

        $r3[1] = $r2;

        virtualinvoke r0.<org.htmlparser.filters.AndFilter: void setPredicates(org.htmlparser.NodeFilter[])>($r3);

        return;
    }

    public void <init>(org.htmlparser.NodeFilter[])
    {
        org.htmlparser.NodeFilter[] $r1;
        org.htmlparser.filters.AndFilter r0;

        r0 := @this: org.htmlparser.filters.AndFilter;

        $r1 := @parameter0: org.htmlparser.NodeFilter[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        virtualinvoke r0.<org.htmlparser.filters.AndFilter: void setPredicates(org.htmlparser.NodeFilter[])>($r1);

        return;
    }

    public boolean accept(org.htmlparser.Node)
    {
        org.htmlparser.NodeFilter[] $r2;
        org.htmlparser.Node $r1;
        org.htmlparser.NodeFilter $r3;
        org.htmlparser.filters.AndFilter r0;
        int $i0, $i1;
        boolean $z0, $z1;

        r0 := @this: org.htmlparser.filters.AndFilter;

        $r1 := @parameter0: org.htmlparser.Node;

        $z1 = 1;

        $i0 = 0;

     label1:
        if $z1 == 0 goto label3;

        $r2 = r0.<org.htmlparser.filters.AndFilter: org.htmlparser.NodeFilter[] a>;

        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label3;

        $r2 = r0.<org.htmlparser.filters.AndFilter: org.htmlparser.NodeFilter[] a>;

        $r3 = $r2[$i0];

        $z0 = interfaceinvoke $r3.<org.htmlparser.NodeFilter: boolean accept(org.htmlparser.Node)>($r1);

        if $z0 != 0 goto label2;

        $z1 = 0;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        return $z1;
    }

    public org.htmlparser.NodeFilter[] getPredicates()
    {
        org.htmlparser.NodeFilter[] r1;
        org.htmlparser.filters.AndFilter r0;

        r0 := @this: org.htmlparser.filters.AndFilter;

        r1 = r0.<org.htmlparser.filters.AndFilter: org.htmlparser.NodeFilter[] a>;

        return r1;
    }

    public void setPredicates(org.htmlparser.NodeFilter[])
    {
        org.htmlparser.NodeFilter[] $r1;
        org.htmlparser.filters.AndFilter r0;

        r0 := @this: org.htmlparser.filters.AndFilter;

        $r1 := @parameter0: org.htmlparser.NodeFilter[];

        if $r1 != null goto label2;

        $r1 = newarray (org.htmlparser.NodeFilter)[0];

     label1:
        r0.<org.htmlparser.filters.AndFilter: org.htmlparser.NodeFilter[] a> = $r1;

        return;

     label2:
        goto label1;
    }
}
