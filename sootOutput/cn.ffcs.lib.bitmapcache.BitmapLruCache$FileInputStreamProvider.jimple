class cn.ffcs.lib.bitmapcache.BitmapLruCache$FileInputStreamProvider extends java.lang.Object implements cn.ffcs.lib.bitmapcache.BitmapLruCache$InputStreamProvider
{
    final java.io.File mFile;

    void <init>(java.io.File)
    {
        cn.ffcs.lib.bitmapcache.BitmapLruCache$FileInputStreamProvider r0;
        java.io.File $r1;

        r0 := @this: cn.ffcs.lib.bitmapcache.BitmapLruCache$FileInputStreamProvider;

        $r1 := @parameter0: java.io.File;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache$FileInputStreamProvider: java.io.File mFile> = $r1;

        return;
    }

    public java.io.InputStream getInputStream()
    {
        java.lang.Throwable r1;
        cn.ffcs.lib.bitmapcache.BitmapLruCache$FileInputStreamProvider r0;
        java.lang.StringBuilder $r5;
        java.io.FileInputStream $r2;
        java.lang.String $r4, $r6;
        java.io.File $r3;

        r0 := @this: cn.ffcs.lib.bitmapcache.BitmapLruCache$FileInputStreamProvider;

        $r2 = new java.io.FileInputStream;

        $r3 = r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache$FileInputStreamProvider: java.io.File mFile>;

     label1:
        specialinvoke $r2.<java.io.FileInputStream: void <init>(java.io.File)>($r3);

     label2:
        return $r2;

     label3:
        r1 := @caughtexception;

        $r4 = <cn.ffcs.lib.bitmapcache.Constants: java.lang.String LOG_TAG>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not decode file: ");

        $r3 = r0.<cn.ffcs.lib.bitmapcache.BitmapLruCache$FileInputStreamProvider: java.io.File mFile>;

        $r6 = virtualinvoke $r3.<java.io.File: java.lang.String getAbsolutePath()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, $r6, r1);

        return null;

        catch java.io.FileNotFoundException from label1 to label2 with label3;
    }
}
