public class org.dom4j.io.XMLWriter extends org.xml.sax.helpers.XMLFilterImpl implements org.xml.sax.ext.LexicalHandler
{
    protected static final org.dom4j.io.OutputFormat DEFAULT_FORMAT;
    protected static final java.lang.String[] LEXICAL_HANDLER_NAMES;
    private static final java.lang.String PAD_TEXT;
    private boolean autoFlush;
    private java.lang.StringBuffer buffer;
    private boolean charsAdded;
    private boolean escapeText;
    private org.dom4j.io.OutputFormat format;
    private boolean inDTD;
    private int indentLevel;
    private char lastChar;
    private boolean lastElementClosed;
    protected int lastOutputNodeType;
    private org.xml.sax.ext.LexicalHandler lexicalHandler;
    private int maximumAllowedCharacter;
    private org.dom4j.tree.NamespaceStack namespaceStack;
    private java.util.Map namespacesMap;
    protected boolean preserve;
    private boolean resolveEntityRefs;
    private boolean showCommentsInDTDs;
    protected java.io.Writer writer;

    static void <clinit>()
    {
        org.dom4j.io.OutputFormat $r1;
        java.lang.String[] $r0;

        <org.dom4j.io.XMLWriter: java.lang.String PAD_TEXT> = " ";

        $r0 = newarray (java.lang.String)[2];

        $r0[0] = "http://xml.org/sax/properties/lexical-handler";

        $r0[1] = "http://xml.org/sax/handlers/LexicalHandler";

        <org.dom4j.io.XMLWriter: java.lang.String[] LEXICAL_HANDLER_NAMES> = $r0;

        $r1 = new org.dom4j.io.OutputFormat;

        specialinvoke $r1.<org.dom4j.io.OutputFormat: void <init>()>();

        <org.dom4j.io.XMLWriter: org.dom4j.io.OutputFormat DEFAULT_FORMAT> = $r1;

        return;
    }

    public void <init>()
    {
        java.io.PrintStream $r1;
        org.dom4j.Namespace $r7;
        java.io.BufferedWriter $r5;
        org.dom4j.io.XMLWriter r0;
        org.dom4j.io.OutputFormat $r4;
        org.dom4j.tree.NamespaceStack $r2;
        java.lang.StringBuffer $r3;
        java.io.OutputStreamWriter $r6;

        r0 := @this: org.dom4j.io.XMLWriter;

        specialinvoke r0.<org.xml.sax.helpers.XMLFilterImpl: void <init>()>();

        r0.<org.dom4j.io.XMLWriter: boolean resolveEntityRefs> = 1;

        r0.<org.dom4j.io.XMLWriter: boolean lastElementClosed> = 0;

        r0.<org.dom4j.io.XMLWriter: boolean preserve> = 0;

        $r2 = new org.dom4j.tree.NamespaceStack;

        specialinvoke $r2.<org.dom4j.tree.NamespaceStack: void <init>()>();

        r0.<org.dom4j.io.XMLWriter: org.dom4j.tree.NamespaceStack namespaceStack> = $r2;

        r0.<org.dom4j.io.XMLWriter: boolean escapeText> = 1;

        r0.<org.dom4j.io.XMLWriter: int indentLevel> = 0;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        r0.<org.dom4j.io.XMLWriter: java.lang.StringBuffer buffer> = $r3;

        r0.<org.dom4j.io.XMLWriter: boolean charsAdded> = 0;

        $r4 = <org.dom4j.io.XMLWriter: org.dom4j.io.OutputFormat DEFAULT_FORMAT>;

        r0.<org.dom4j.io.XMLWriter: org.dom4j.io.OutputFormat format> = $r4;

        $r5 = new java.io.BufferedWriter;

        $r6 = new java.io.OutputStreamWriter;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        specialinvoke $r6.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>($r1);

        specialinvoke $r5.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r6);

        r0.<org.dom4j.io.XMLWriter: java.io.Writer writer> = $r5;

        r0.<org.dom4j.io.XMLWriter: boolean autoFlush> = 1;

        $r2 = r0.<org.dom4j.io.XMLWriter: org.dom4j.tree.NamespaceStack namespaceStack>;

        $r7 = <org.dom4j.Namespace: org.dom4j.Namespace NO_NAMESPACE>;

        virtualinvoke $r2.<org.dom4j.tree.NamespaceStack: void push(org.dom4j.Namespace)>($r7);

        return;
    }

    public void <init>(java.io.OutputStream) throws java.io.UnsupportedEncodingException
    {
        java.io.OutputStream $r1;
        org.dom4j.Namespace $r7;
        org.dom4j.io.XMLWriter r0;
        org.dom4j.io.OutputFormat $r4;
        org.dom4j.tree.NamespaceStack $r2;
        java.lang.StringBuffer $r3;
        java.io.Writer $r6;
        java.lang.String $r5;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: java.io.OutputStream;

        specialinvoke r0.<org.xml.sax.helpers.XMLFilterImpl: void <init>()>();

        r0.<org.dom4j.io.XMLWriter: boolean resolveEntityRefs> = 1;

        r0.<org.dom4j.io.XMLWriter: boolean lastElementClosed> = 0;

        r0.<org.dom4j.io.XMLWriter: boolean preserve> = 0;

        $r2 = new org.dom4j.tree.NamespaceStack;

        specialinvoke $r2.<org.dom4j.tree.NamespaceStack: void <init>()>();

        r0.<org.dom4j.io.XMLWriter: org.dom4j.tree.NamespaceStack namespaceStack> = $r2;

        r0.<org.dom4j.io.XMLWriter: boolean escapeText> = 1;

        r0.<org.dom4j.io.XMLWriter: int indentLevel> = 0;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        r0.<org.dom4j.io.XMLWriter: java.lang.StringBuffer buffer> = $r3;

        r0.<org.dom4j.io.XMLWriter: boolean charsAdded> = 0;

        $r4 = <org.dom4j.io.XMLWriter: org.dom4j.io.OutputFormat DEFAULT_FORMAT>;

        r0.<org.dom4j.io.XMLWriter: org.dom4j.io.OutputFormat format> = $r4;

        $r4 = r0.<org.dom4j.io.XMLWriter: org.dom4j.io.OutputFormat format>;

        $r5 = virtualinvoke $r4.<org.dom4j.io.OutputFormat: java.lang.String getEncoding()>();

        $r6 = virtualinvoke r0.<org.dom4j.io.XMLWriter: java.io.Writer createWriter(java.io.OutputStream,java.lang.String)>($r1, $r5);

        r0.<org.dom4j.io.XMLWriter: java.io.Writer writer> = $r6;

        r0.<org.dom4j.io.XMLWriter: boolean autoFlush> = 1;

        $r2 = r0.<org.dom4j.io.XMLWriter: org.dom4j.tree.NamespaceStack namespaceStack>;

        $r7 = <org.dom4j.Namespace: org.dom4j.Namespace NO_NAMESPACE>;

        virtualinvoke $r2.<org.dom4j.tree.NamespaceStack: void push(org.dom4j.Namespace)>($r7);

        return;
    }

    public void <init>(java.io.OutputStream, org.dom4j.io.OutputFormat) throws java.io.UnsupportedEncodingException
    {
        java.io.OutputStream $r1;
        org.dom4j.Namespace $r7;
        org.dom4j.io.XMLWriter r0;
        org.dom4j.io.OutputFormat $r2;
        org.dom4j.tree.NamespaceStack $r3;
        java.lang.StringBuffer $r4;
        java.io.Writer $r6;
        java.lang.String $r5;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: java.io.OutputStream;

        $r2 := @parameter1: org.dom4j.io.OutputFormat;

        specialinvoke r0.<org.xml.sax.helpers.XMLFilterImpl: void <init>()>();

        r0.<org.dom4j.io.XMLWriter: boolean resolveEntityRefs> = 1;

        r0.<org.dom4j.io.XMLWriter: boolean lastElementClosed> = 0;

        r0.<org.dom4j.io.XMLWriter: boolean preserve> = 0;

        $r3 = new org.dom4j.tree.NamespaceStack;

        specialinvoke $r3.<org.dom4j.tree.NamespaceStack: void <init>()>();

        r0.<org.dom4j.io.XMLWriter: org.dom4j.tree.NamespaceStack namespaceStack> = $r3;

        r0.<org.dom4j.io.XMLWriter: boolean escapeText> = 1;

        r0.<org.dom4j.io.XMLWriter: int indentLevel> = 0;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        r0.<org.dom4j.io.XMLWriter: java.lang.StringBuffer buffer> = $r4;

        r0.<org.dom4j.io.XMLWriter: boolean charsAdded> = 0;

        r0.<org.dom4j.io.XMLWriter: org.dom4j.io.OutputFormat format> = $r2;

        $r5 = virtualinvoke $r2.<org.dom4j.io.OutputFormat: java.lang.String getEncoding()>();

        $r6 = virtualinvoke r0.<org.dom4j.io.XMLWriter: java.io.Writer createWriter(java.io.OutputStream,java.lang.String)>($r1, $r5);

        r0.<org.dom4j.io.XMLWriter: java.io.Writer writer> = $r6;

        r0.<org.dom4j.io.XMLWriter: boolean autoFlush> = 1;

        $r3 = r0.<org.dom4j.io.XMLWriter: org.dom4j.tree.NamespaceStack namespaceStack>;

        $r7 = <org.dom4j.Namespace: org.dom4j.Namespace NO_NAMESPACE>;

        virtualinvoke $r3.<org.dom4j.tree.NamespaceStack: void push(org.dom4j.Namespace)>($r7);

        return;
    }

    public void <init>(java.io.Writer)
    {
        java.io.Writer $r1;
        org.dom4j.io.OutputFormat $r2;
        org.dom4j.io.XMLWriter r0;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: java.io.Writer;

        $r2 = <org.dom4j.io.XMLWriter: org.dom4j.io.OutputFormat DEFAULT_FORMAT>;

        specialinvoke r0.<org.dom4j.io.XMLWriter: void <init>(java.io.Writer,org.dom4j.io.OutputFormat)>($r1, $r2);

        return;
    }

    public void <init>(java.io.Writer, org.dom4j.io.OutputFormat)
    {
        org.dom4j.tree.NamespaceStack $r3;
        org.dom4j.Namespace $r5;
        java.lang.StringBuffer $r4;
        org.dom4j.io.XMLWriter r0;
        java.io.Writer $r1;
        org.dom4j.io.OutputFormat $r2;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: java.io.Writer;

        $r2 := @parameter1: org.dom4j.io.OutputFormat;

        specialinvoke r0.<org.xml.sax.helpers.XMLFilterImpl: void <init>()>();

        r0.<org.dom4j.io.XMLWriter: boolean resolveEntityRefs> = 1;

        r0.<org.dom4j.io.XMLWriter: boolean lastElementClosed> = 0;

        r0.<org.dom4j.io.XMLWriter: boolean preserve> = 0;

        $r3 = new org.dom4j.tree.NamespaceStack;

        specialinvoke $r3.<org.dom4j.tree.NamespaceStack: void <init>()>();

        r0.<org.dom4j.io.XMLWriter: org.dom4j.tree.NamespaceStack namespaceStack> = $r3;

        r0.<org.dom4j.io.XMLWriter: boolean escapeText> = 1;

        r0.<org.dom4j.io.XMLWriter: int indentLevel> = 0;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        r0.<org.dom4j.io.XMLWriter: java.lang.StringBuffer buffer> = $r4;

        r0.<org.dom4j.io.XMLWriter: boolean charsAdded> = 0;

        r0.<org.dom4j.io.XMLWriter: java.io.Writer writer> = $r1;

        r0.<org.dom4j.io.XMLWriter: org.dom4j.io.OutputFormat format> = $r2;

        $r3 = r0.<org.dom4j.io.XMLWriter: org.dom4j.tree.NamespaceStack namespaceStack>;

        $r5 = <org.dom4j.Namespace: org.dom4j.Namespace NO_NAMESPACE>;

        virtualinvoke $r3.<org.dom4j.tree.NamespaceStack: void push(org.dom4j.Namespace)>($r5);

        return;
    }

    public void <init>(org.dom4j.io.OutputFormat) throws java.io.UnsupportedEncodingException
    {
        java.io.PrintStream $r4;
        org.dom4j.Namespace $r7;
        org.dom4j.io.XMLWriter r0;
        org.dom4j.io.OutputFormat $r1;
        org.dom4j.tree.NamespaceStack $r2;
        java.lang.StringBuffer $r3;
        java.io.Writer $r6;
        java.lang.String $r5;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: org.dom4j.io.OutputFormat;

        specialinvoke r0.<org.xml.sax.helpers.XMLFilterImpl: void <init>()>();

        r0.<org.dom4j.io.XMLWriter: boolean resolveEntityRefs> = 1;

        r0.<org.dom4j.io.XMLWriter: boolean lastElementClosed> = 0;

        r0.<org.dom4j.io.XMLWriter: boolean preserve> = 0;

        $r2 = new org.dom4j.tree.NamespaceStack;

        specialinvoke $r2.<org.dom4j.tree.NamespaceStack: void <init>()>();

        r0.<org.dom4j.io.XMLWriter: org.dom4j.tree.NamespaceStack namespaceStack> = $r2;

        r0.<org.dom4j.io.XMLWriter: boolean escapeText> = 1;

        r0.<org.dom4j.io.XMLWriter: int indentLevel> = 0;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        r0.<org.dom4j.io.XMLWriter: java.lang.StringBuffer buffer> = $r3;

        r0.<org.dom4j.io.XMLWriter: boolean charsAdded> = 0;

        r0.<org.dom4j.io.XMLWriter: org.dom4j.io.OutputFormat format> = $r1;

        $r4 = <java.lang.System: java.io.PrintStream out>;

        $r5 = virtualinvoke $r1.<org.dom4j.io.OutputFormat: java.lang.String getEncoding()>();

        $r6 = virtualinvoke r0.<org.dom4j.io.XMLWriter: java.io.Writer createWriter(java.io.OutputStream,java.lang.String)>($r4, $r5);

        r0.<org.dom4j.io.XMLWriter: java.io.Writer writer> = $r6;

        r0.<org.dom4j.io.XMLWriter: boolean autoFlush> = 1;

        $r2 = r0.<org.dom4j.io.XMLWriter: org.dom4j.tree.NamespaceStack namespaceStack>;

        $r7 = <org.dom4j.Namespace: org.dom4j.Namespace NO_NAMESPACE>;

        virtualinvoke $r2.<org.dom4j.tree.NamespaceStack: void push(org.dom4j.Namespace)>($r7);

        return;
    }

    public void characters(char[], int, int) throws org.xml.sax.SAXException
    {
        java.lang.Throwable r2;
        org.dom4j.io.XMLWriter r0;
        org.dom4j.io.OutputFormat $r6;
        char $c3;
        java.io.IOException $r9;
        java.util.StringTokenizer r3, $r8;
        int $i0, $i1, $i2;
        java.io.Writer $r7;
        char[] $r1;
        java.lang.String $r4, r5;
        boolean $z0;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: char[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $r1 == null goto label33;

        $i2 = lengthof $r1;

        if $i2 == 0 goto label33;

        if $i1 > 0 goto label01;

        return;

     label01:
        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(char[],int,int)>($r1, 0, $i1);

     label02:
        r5 = $r4;

        $z0 = r0.<org.dom4j.io.XMLWriter: boolean escapeText>;

        if $z0 == 0 goto label04;

     label03:
        r5 = virtualinvoke r0.<org.dom4j.io.XMLWriter: java.lang.String escapeElementEntities(java.lang.String)>($r4);

     label04:
        $r6 = r0.<org.dom4j.io.XMLWriter: org.dom4j.io.OutputFormat format>;

     label05:
        $z0 = virtualinvoke $r6.<org.dom4j.io.OutputFormat: boolean isTrimText()>();

     label06:
        if $z0 == 0 goto label29;

        $i2 = r0.<org.dom4j.io.XMLWriter: int lastOutputNodeType>;

        if $i2 != 3 goto label16;

        $z0 = r0.<org.dom4j.io.XMLWriter: boolean charsAdded>;

        if $z0 != 0 goto label16;

        $r7 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

     label07:
        virtualinvoke $r7.<java.io.Writer: void write(int)>(32);

     label08:
        $r4 = "";

        $r8 = new java.util.StringTokenizer;

        r3 = $r8;

     label09:
        specialinvoke $r8.<java.util.StringTokenizer: void <init>(java.lang.String)>(r5);

     label10:
        $z0 = virtualinvoke r3.<java.util.StringTokenizer: boolean hasMoreTokens()>();

     label11:
        if $z0 == 0 goto label31;

        $r7 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

     label12:
        virtualinvoke $r7.<java.io.Writer: void write(java.lang.String)>($r4);

     label13:
        $r7 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

     label14:
        r5 = virtualinvoke r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

        virtualinvoke $r7.<java.io.Writer: void write(java.lang.String)>(r5);

     label15:
        $r4 = " ";

        goto label10;

     label16:
        $z0 = r0.<org.dom4j.io.XMLWriter: boolean charsAdded>;

        if $z0 == 0 goto label22;

        $c3 = r0.<org.dom4j.io.XMLWriter: char lastChar>;

     label17:
        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c3);

     label18:
        if $z0 == 0 goto label22;

        $r7 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

     label19:
        virtualinvoke $r7.<java.io.Writer: void write(int)>(32);

     label20:
        goto label08;

     label21:
        r2 := @caughtexception;

        $r9 = (java.io.IOException) r2;

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void handleException(java.io.IOException)>($r9);

        return;

     label22:
        $i2 = r0.<org.dom4j.io.XMLWriter: int lastOutputNodeType>;

        if $i2 != 1 goto label08;

        $r6 = r0.<org.dom4j.io.XMLWriter: org.dom4j.io.OutputFormat format>;

     label23:
        $z0 = virtualinvoke $r6.<org.dom4j.io.OutputFormat: boolean isPadText()>();

     label24:
        if $z0 == 0 goto label08;

        $z0 = r0.<org.dom4j.io.XMLWriter: boolean lastElementClosed>;

        if $z0 == 0 goto label08;

        $c3 = $r1[0];

     label25:
        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c3);

     label26:
        if $z0 == 0 goto label08;

        $r7 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

     label27:
        virtualinvoke $r7.<java.io.Writer: void write(java.lang.String)>(" ");

     label28:
        goto label08;

     label29:
        $r7 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

     label30:
        virtualinvoke $r7.<java.io.Writer: void write(java.lang.String)>(r5);

     label31:
        r0.<org.dom4j.io.XMLWriter: boolean charsAdded> = 1;

        $i2 = 0 + $i1;

        $i2 = $i2 + -1;

        $c3 = $r1[$i2];

        r0.<org.dom4j.io.XMLWriter: char lastChar> = $c3;

        r0.<org.dom4j.io.XMLWriter: int lastOutputNodeType> = 3;

     label32:
        specialinvoke r0.<org.xml.sax.helpers.XMLFilterImpl: void characters(char[],int,int)>($r1, 0, $i1);

     label33:
        return;

        catch java.io.IOException from label01 to label02 with label21;
        catch java.io.IOException from label03 to label04 with label21;
        catch java.io.IOException from label05 to label06 with label21;
        catch java.io.IOException from label07 to label08 with label21;
        catch java.io.IOException from label09 to label11 with label21;
        catch java.io.IOException from label12 to label13 with label21;
        catch java.io.IOException from label14 to label15 with label21;
        catch java.io.IOException from label17 to label18 with label21;
        catch java.io.IOException from label19 to label20 with label21;
        catch java.io.IOException from label23 to label24 with label21;
        catch java.io.IOException from label25 to label26 with label21;
        catch java.io.IOException from label27 to label28 with label21;
        catch java.io.IOException from label30 to label31 with label21;
        catch java.io.IOException from label32 to label33 with label21;
    }

    public void close() throws java.io.IOException
    {
        java.io.Writer $r1;
        org.dom4j.io.XMLWriter r0;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r1.<java.io.Writer: void close()>();

        return;
    }

    public void comment(char[], int, int) throws org.xml.sax.SAXException
    {
        java.lang.Throwable r2;
        org.dom4j.io.XMLWriter r0;
        java.io.IOException $r6;
        org.xml.sax.ext.LexicalHandler $r4;
        int $i0, $i1;
        char[] $r1;
        java.lang.String $r3, $r5;
        boolean $z0;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: char[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 = r0.<org.dom4j.io.XMLWriter: boolean showCommentsInDTDs>;

        if $z0 != 0 goto label1;

        $z0 = r0.<org.dom4j.io.XMLWriter: boolean inDTD>;

        if $z0 != 0 goto label3;

     label1:
        r0.<org.dom4j.io.XMLWriter: boolean charsAdded> = 0;

        $r5 = new java.lang.String;

        $r3 = $r5;

     label2:
        specialinvoke $r5.<java.lang.String: void <init>(char[],int,int)>($r1, $i0, $i1);

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writeComment(java.lang.String)>($r3);

     label3:
        $r4 = r0.<org.dom4j.io.XMLWriter: org.xml.sax.ext.LexicalHandler lexicalHandler>;

        if $r4 == null goto label5;

        $r4 = r0.<org.dom4j.io.XMLWriter: org.xml.sax.ext.LexicalHandler lexicalHandler>;

        interfaceinvoke $r4.<org.xml.sax.ext.LexicalHandler: void comment(char[],int,int)>($r1, $i0, $i1);

        return;

     label4:
        r2 := @caughtexception;

        $r6 = (java.io.IOException) r2;

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void handleException(java.io.IOException)>($r6);

        goto label3;

     label5:
        return;

        catch java.io.IOException from label2 to label3 with label4;
    }

    protected java.io.Writer createWriter(java.io.OutputStream, java.lang.String) throws java.io.UnsupportedEncodingException
    {
        java.io.OutputStream $r1;
        java.io.BufferedWriter $r3;
        org.dom4j.io.XMLWriter r0;
        java.io.OutputStreamWriter $r4;
        java.lang.String $r2;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: java.io.OutputStream;

        $r2 := @parameter1: java.lang.String;

        $r3 = new java.io.BufferedWriter;

        $r4 = new java.io.OutputStreamWriter;

        specialinvoke $r4.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>($r1, $r2);

        specialinvoke $r3.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r4);

        return $r3;
    }

    protected int defaultMaximumAllowedCharacter()
    {
        org.dom4j.io.XMLWriter r0;
        org.dom4j.io.OutputFormat $r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 = r0.<org.dom4j.io.XMLWriter: org.dom4j.io.OutputFormat format>;

        $r2 = virtualinvoke $r1.<org.dom4j.io.OutputFormat: java.lang.String getEncoding()>();

        if $r2 == null goto label1;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("US-ASCII");

        if $z0 == 0 goto label1;

        return 127;

     label1:
        return -1;
    }

    public void endCDATA() throws org.xml.sax.SAXException
    {
        java.lang.Throwable r1;
        org.xml.sax.ext.LexicalHandler $r3;
        org.dom4j.io.XMLWriter r0;
        java.io.Writer $r2;
        java.io.IOException $r4;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r2 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

     label1:
        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>("]]>");

     label2:
        $r3 = r0.<org.dom4j.io.XMLWriter: org.xml.sax.ext.LexicalHandler lexicalHandler>;

        if $r3 == null goto label4;

        $r3 = r0.<org.dom4j.io.XMLWriter: org.xml.sax.ext.LexicalHandler lexicalHandler>;

        interfaceinvoke $r3.<org.xml.sax.ext.LexicalHandler: void endCDATA()>();

        return;

     label3:
        r1 := @caughtexception;

        $r4 = (java.io.IOException) r1;

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void handleException(java.io.IOException)>($r4);

        goto label2;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void endDTD() throws org.xml.sax.SAXException
    {
        org.xml.sax.ext.LexicalHandler $r1;
        org.dom4j.io.XMLWriter r0;

        r0 := @this: org.dom4j.io.XMLWriter;

        r0.<org.dom4j.io.XMLWriter: boolean inDTD> = 0;

        $r1 = r0.<org.dom4j.io.XMLWriter: org.xml.sax.ext.LexicalHandler lexicalHandler>;

        if $r1 == null goto label1;

        $r1 = r0.<org.dom4j.io.XMLWriter: org.xml.sax.ext.LexicalHandler lexicalHandler>;

        interfaceinvoke $r1.<org.xml.sax.ext.LexicalHandler: void endDTD()>();

     label1:
        return;
    }

    public void endDocument() throws org.xml.sax.SAXException
    {
        java.lang.Throwable $r1;
        org.dom4j.io.XMLWriter r0;
        boolean $z0;

        r0 := @this: org.dom4j.io.XMLWriter;

        specialinvoke r0.<org.xml.sax.helpers.XMLFilterImpl: void endDocument()>();

        $z0 = r0.<org.dom4j.io.XMLWriter: boolean autoFlush>;

        if $z0 == 0 goto label4;

     label1:
        virtualinvoke r0.<org.dom4j.io.XMLWriter: void flush()>();

     label2:
        return;

     label3:
        $r1 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void endElement(java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        java.lang.Throwable r4;
        org.dom4j.io.XMLWriter r0;
        java.io.IOException $r5;
        int $i0;
        java.lang.String $r1, $r2, $r3;
        boolean $z0;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        r0.<org.dom4j.io.XMLWriter: boolean charsAdded> = 0;

        $i0 = r0.<org.dom4j.io.XMLWriter: int indentLevel>;

        $i0 = $i0 + -1;

        r0.<org.dom4j.io.XMLWriter: int indentLevel> = $i0;

        $z0 = r0.<org.dom4j.io.XMLWriter: boolean lastElementClosed>;

        if $z0 == 0 goto label2;

     label1:
        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writePrintln()>();

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void indent()>();

     label2:
        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writeClose(java.lang.String)>($r3);

     label3:
        r0.<org.dom4j.io.XMLWriter: int lastOutputNodeType> = 1;

        r0.<org.dom4j.io.XMLWriter: boolean lastElementClosed> = 1;

     label4:
        specialinvoke r0.<org.xml.sax.helpers.XMLFilterImpl: void endElement(java.lang.String,java.lang.String,java.lang.String)>($r1, $r2, $r3);

     label5:
        return;

     label6:
        r4 := @caughtexception;

        $r5 = (java.io.IOException) r4;

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void handleException(java.io.IOException)>($r5);

        return;

        catch java.io.IOException from label1 to label2 with label6;
        catch java.io.IOException from label2 to label3 with label6;
        catch java.io.IOException from label4 to label5 with label6;
    }

    public void endEntity(java.lang.String) throws org.xml.sax.SAXException
    {
        org.xml.sax.ext.LexicalHandler $r2;
        java.lang.String $r1;
        org.dom4j.io.XMLWriter r0;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.dom4j.io.XMLWriter: org.xml.sax.ext.LexicalHandler lexicalHandler>;

        if $r2 == null goto label1;

        $r2 = r0.<org.dom4j.io.XMLWriter: org.xml.sax.ext.LexicalHandler lexicalHandler>;

        interfaceinvoke $r2.<org.xml.sax.ext.LexicalHandler: void endEntity(java.lang.String)>($r1);

     label1:
        return;
    }

    public void endPrefixMapping(java.lang.String) throws org.xml.sax.SAXException
    {
        java.lang.String $r1;
        org.dom4j.io.XMLWriter r0;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.xml.sax.helpers.XMLFilterImpl: void endPrefixMapping(java.lang.String)>($r1);

        return;
    }

    protected java.lang.String escapeAttributeEntities(java.lang.String)
    {
        org.dom4j.io.XMLWriter r0;
        org.dom4j.io.OutputFormat $r2;
        char $c0, $c4;
        java.lang.StringBuffer $r5, $r6;
        int i1, $i2, i3, $i5;
        char[] r3;
        java.lang.String r1, r4;
        boolean $z0;

        r0 := @this: org.dom4j.io.XMLWriter;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.dom4j.io.XMLWriter: org.dom4j.io.OutputFormat format>;

        $c0 = virtualinvoke $r2.<org.dom4j.io.OutputFormat: char getAttributeQuoteCharacter()>();

        r3 = null;

        i1 = 0;

        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        i3 = 0;

     label01:
        if i3 >= $i2 goto label12;

        r4 = null;

        $c4 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i3);

        $i5 = (int) $c4;

        lookupswitch($i5)
        {
            case 9: goto label04;
            case 10: goto label04;
            case 13: goto label04;
            case 34: goto label10;
            case 38: goto label11;
            case 39: goto label09;
            case 60: goto label07;
            case 62: goto label08;
            default: goto label02;
        };

     label02:
        $i5 = (int) $c4;

        if $i5 < 32 goto label03;

        $z0 = virtualinvoke r0.<org.dom4j.io.XMLWriter: boolean shouldEncodeChar(char)>($c4);

        if $z0 == 0 goto label04;

     label03:
        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&#");

        $i5 = (int) $c4;

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i5);

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        r4 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

     label04:
        if r4 == null goto label06;

        if r3 != null goto label05;

        r3 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>();

     label05:
        $r5 = r0.<org.dom4j.io.XMLWriter: java.lang.StringBuffer buffer>;

        $i5 = i3 - i1;

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>(r3, i1, $i5);

        $r5 = r0.<org.dom4j.io.XMLWriter: java.lang.StringBuffer buffer>;

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        i1 = i3 + 1;

     label06:
        i3 = i3 + 1;

        goto label01;

     label07:
        r4 = "&lt;";

        goto label04;

     label08:
        r4 = "&gt;";

        goto label04;

     label09:
        $i5 = (int) $c0;

        if $i5 != 39 goto label04;

        r4 = "&apos;";

        goto label04;

     label10:
        $i5 = (int) $c0;

        if $i5 != 34 goto label04;

        r4 = "&quot;";

        goto label04;

     label11:
        r4 = "&amp;";

        goto label04;

     label12:
        if i1 != 0 goto label13;

        return r1;

     label13:
        if i1 >= $i2 goto label15;

        if r3 != null goto label14;

        r3 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>();

     label14:
        $r5 = r0.<org.dom4j.io.XMLWriter: java.lang.StringBuffer buffer>;

        $i2 = i3 - i1;

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>(r3, i1, $i2);

     label15:
        $r5 = r0.<org.dom4j.io.XMLWriter: java.lang.StringBuffer buffer>;

        r1 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        $r5 = r0.<org.dom4j.io.XMLWriter: java.lang.StringBuffer buffer>;

        virtualinvoke $r5.<java.lang.StringBuffer: void setLength(int)>(0);

        return r1;
    }

    protected java.lang.String escapeElementEntities(java.lang.String)
    {
        org.dom4j.io.XMLWriter r0;
        char $c3;
        java.lang.StringBuffer $r4, $r5;
        int i0, $i1, i2, $i4;
        char[] r2;
        java.lang.String r1, r3;
        boolean $z0;

        r0 := @this: org.dom4j.io.XMLWriter;

        r1 := @parameter0: java.lang.String;

        r2 = null;

        i0 = 0;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        i2 = 0;

     label01:
        if i2 >= $i1 goto label11;

        r3 = null;

        $c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i2);

        $i4 = (int) $c3;

        lookupswitch($i4)
        {
            case 9: goto label10;
            case 10: goto label10;
            case 13: goto label10;
            case 38: goto label09;
            case 60: goto label07;
            case 62: goto label08;
            default: goto label02;
        };

     label02:
        $i4 = (int) $c3;

        if $i4 < 32 goto label03;

        $z0 = virtualinvoke r0.<org.dom4j.io.XMLWriter: boolean shouldEncodeChar(char)>($c3);

        if $z0 == 0 goto label04;

     label03:
        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&#");

        $i4 = (int) $c3;

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i4);

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        r3 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

     label04:
        if r3 == null goto label06;

        if r2 != null goto label05;

        r2 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>();

     label05:
        $r4 = r0.<org.dom4j.io.XMLWriter: java.lang.StringBuffer buffer>;

        $i4 = i2 - i0;

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>(r2, i0, $i4);

        $r4 = r0.<org.dom4j.io.XMLWriter: java.lang.StringBuffer buffer>;

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        i0 = i2 + 1;

     label06:
        i2 = i2 + 1;

        goto label01;

     label07:
        r3 = "&lt;";

        goto label04;

     label08:
        r3 = "&gt;";

        goto label04;

     label09:
        r3 = "&amp;";

        goto label04;

     label10:
        $z0 = r0.<org.dom4j.io.XMLWriter: boolean preserve>;

        if $z0 == 0 goto label04;

        r3 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($c3);

        goto label04;

     label11:
        if i0 != 0 goto label12;

        return r1;

     label12:
        if i0 >= $i1 goto label14;

        if r2 != null goto label13;

        r2 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>();

     label13:
        $r4 = r0.<org.dom4j.io.XMLWriter: java.lang.StringBuffer buffer>;

        $i1 = i2 - i0;

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>(r2, i0, $i1);

     label14:
        $r4 = r0.<org.dom4j.io.XMLWriter: java.lang.StringBuffer buffer>;

        r1 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        $r4 = r0.<org.dom4j.io.XMLWriter: java.lang.StringBuffer buffer>;

        virtualinvoke $r4.<java.lang.StringBuffer: void setLength(int)>(0);

        return r1;
    }

    public void flush() throws java.io.IOException
    {
        java.io.Writer $r1;
        org.dom4j.io.XMLWriter r0;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r1.<java.io.Writer: void flush()>();

        return;
    }

    public org.xml.sax.ext.LexicalHandler getLexicalHandler()
    {
        org.xml.sax.ext.LexicalHandler r1;
        org.dom4j.io.XMLWriter r0;

        r0 := @this: org.dom4j.io.XMLWriter;

        r1 = r0.<org.dom4j.io.XMLWriter: org.xml.sax.ext.LexicalHandler lexicalHandler>;

        return r1;
    }

    public int getMaximumAllowedCharacter()
    {
        int $i0;
        org.dom4j.io.XMLWriter r0;

        r0 := @this: org.dom4j.io.XMLWriter;

        $i0 = r0.<org.dom4j.io.XMLWriter: int maximumAllowedCharacter>;

        if $i0 != 0 goto label1;

        $i0 = virtualinvoke r0.<org.dom4j.io.XMLWriter: int defaultMaximumAllowedCharacter()>();

        r0.<org.dom4j.io.XMLWriter: int maximumAllowedCharacter> = $i0;

     label1:
        $i0 = r0.<org.dom4j.io.XMLWriter: int maximumAllowedCharacter>;

        return $i0;
    }

    protected org.dom4j.io.OutputFormat getOutputFormat()
    {
        org.dom4j.io.OutputFormat r1;
        org.dom4j.io.XMLWriter r0;

        r0 := @this: org.dom4j.io.XMLWriter;

        r1 = r0.<org.dom4j.io.XMLWriter: org.dom4j.io.OutputFormat format>;

        return r1;
    }

    public java.lang.Object getProperty(java.lang.String) throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
    {
        org.dom4j.io.XMLWriter r0;
        java.lang.String[] $r2;
        org.xml.sax.ext.LexicalHandler $r4;
        int i0, $i1;
        java.lang.Object $r5;
        java.lang.String $r1, $r3;
        boolean $z0;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: java.lang.String;

        i0 = 0;

     label1:
        $r2 = <org.dom4j.io.XMLWriter: java.lang.String[] LEXICAL_HANDLER_NAMES>;

        $i1 = lengthof $r2;

        if i0 >= $i1 goto label3;

        $r2 = <org.dom4j.io.XMLWriter: java.lang.String[] LEXICAL_HANDLER_NAMES>;

        $r3 = $r2[i0];

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        $r4 = virtualinvoke r0.<org.dom4j.io.XMLWriter: org.xml.sax.ext.LexicalHandler getLexicalHandler()>();

        return $r4;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        $r5 = specialinvoke r0.<org.xml.sax.helpers.XMLFilterImpl: java.lang.Object getProperty(java.lang.String)>($r1);

        return $r5;
    }

    protected void handleException(java.io.IOException) throws org.xml.sax.SAXException
    {
        java.io.IOException $r1;
        org.dom4j.io.XMLWriter r0;
        org.xml.sax.SAXException $r2;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: java.io.IOException;

        $r2 = new org.xml.sax.SAXException;

        specialinvoke $r2.<org.xml.sax.SAXException: void <init>(java.lang.Exception)>($r1);

        throw $r2;
    }

    public void ignorableWhitespace(char[], int, int) throws org.xml.sax.SAXException
    {
        org.dom4j.io.XMLWriter r0;
        int $i0, $i1;
        char[] $r1;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: char[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        specialinvoke r0.<org.xml.sax.helpers.XMLFilterImpl: void ignorableWhitespace(char[],int,int)>($r1, $i0, $i1);

        return;
    }

    protected void indent() throws java.io.IOException
    {
        org.dom4j.io.XMLWriter r0;
        int $i0, $i1;
        java.io.Writer $r3;
        org.dom4j.io.OutputFormat $r1;
        java.lang.String $r2;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 = r0.<org.dom4j.io.XMLWriter: org.dom4j.io.OutputFormat format>;

        $r2 = virtualinvoke $r1.<org.dom4j.io.OutputFormat: java.lang.String getIndent()>();

        if $r2 == null goto label2;

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 <= 0 goto label2;

        $i0 = 0;

     label1:
        $i1 = r0.<org.dom4j.io.XMLWriter: int indentLevel>;

        if $i0 >= $i1 goto label2;

        $r3 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r3.<java.io.Writer: void write(java.lang.String)>($r2);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    protected void installLexicalHandler()
    {
        java.lang.Throwable $r5, $r6;
        org.dom4j.io.XMLWriter r0;
        java.lang.String[] $r3;
        java.lang.NullPointerException $r2;
        org.xml.sax.XMLReader $r1;
        int i0, $i1;
        java.lang.String $r4;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 = virtualinvoke r0.<org.dom4j.io.XMLWriter: org.xml.sax.XMLReader getParent()>();

        if $r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("No parent for filter");

        throw $r2;

     label1:
        i0 = 0;

     label2:
        $r3 = <org.dom4j.io.XMLWriter: java.lang.String[] LEXICAL_HANDLER_NAMES>;

        $i1 = lengthof $r3;

        if i0 >= $i1 goto label8;

        $r3 = <org.dom4j.io.XMLWriter: java.lang.String[] LEXICAL_HANDLER_NAMES>;

        $r4 = $r3[i0];

     label3:
        interfaceinvoke $r1.<org.xml.sax.XMLReader: void setProperty(java.lang.String,java.lang.Object)>($r4, r0);

     label4:
        return;

     label5:
        $r5 := @caughtexception;

     label6:
        i0 = i0 + 1;

        goto label2;

     label7:
        $r6 := @caughtexception;

        goto label6;

     label8:
        return;

        catch org.xml.sax.SAXNotRecognizedException from label3 to label4 with label7;
        catch org.xml.sax.SAXNotSupportedException from label3 to label4 with label5;
    }

    protected final boolean isElementSpacePreserved(org.dom4j.Element)
    {
        org.dom4j.io.XMLWriter r0;
        org.dom4j.Element $r1;
        java.lang.String $r3, $r4;
        org.dom4j.Attribute $r2;
        boolean $z0;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: org.dom4j.Element;

        $r2 = interfaceinvoke $r1.<org.dom4j.Element: org.dom4j.Attribute attribute(java.lang.String)>("space");

        $z0 = r0.<org.dom4j.io.XMLWriter: boolean preserve>;

        if $r2 == null goto label2;

        $r3 = "xml";

        $r4 = interfaceinvoke $r2.<org.dom4j.Attribute: java.lang.String getNamespacePrefix()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label1;

        $r3 = "preserve";

        $r4 = interfaceinvoke $r2.<org.dom4j.Attribute: java.lang.String getText()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;

     label2:
        return $z0;
    }

    public boolean isEscapeText()
    {
        org.dom4j.io.XMLWriter r0;
        boolean z0;

        r0 := @this: org.dom4j.io.XMLWriter;

        z0 = r0.<org.dom4j.io.XMLWriter: boolean escapeText>;

        return z0;
    }

    protected boolean isExpandEmptyElements()
    {
        org.dom4j.io.OutputFormat $r1;
        org.dom4j.io.XMLWriter r0;
        boolean $z0;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 = r0.<org.dom4j.io.XMLWriter: org.dom4j.io.OutputFormat format>;

        $z0 = virtualinvoke $r1.<org.dom4j.io.OutputFormat: boolean isExpandEmptyElements()>();

        return $z0;
    }

    protected boolean isNamespaceDeclaration(org.dom4j.Namespace)
    {
        org.dom4j.tree.NamespaceStack $r4;
        org.dom4j.Namespace $r1, $r2;
        org.dom4j.io.XMLWriter r0;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: org.dom4j.Namespace;

        if $r1 == null goto label1;

        $r2 = <org.dom4j.Namespace: org.dom4j.Namespace XML_NAMESPACE>;

        if $r1 == $r2 goto label1;

        $r3 = virtualinvoke $r1.<org.dom4j.Namespace: java.lang.String getURI()>();

        if $r3 == null goto label1;

        $r4 = r0.<org.dom4j.io.XMLWriter: org.dom4j.tree.NamespaceStack namespaceStack>;

        $z0 = virtualinvoke $r4.<org.dom4j.tree.NamespaceStack: boolean contains(org.dom4j.Namespace)>($r1);

        if $z0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void notationDecl(java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        org.dom4j.io.XMLWriter r0;
        java.lang.String $r1, $r2, $r3;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        specialinvoke r0.<org.xml.sax.helpers.XMLFilterImpl: void notationDecl(java.lang.String,java.lang.String,java.lang.String)>($r1, $r2, $r3);

        return;
    }

    public void parse(org.xml.sax.InputSource) throws java.io.IOException, org.xml.sax.SAXException
    {
        org.xml.sax.InputSource $r1;
        org.dom4j.io.XMLWriter r0;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: org.xml.sax.InputSource;

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void installLexicalHandler()>();

        specialinvoke r0.<org.xml.sax.helpers.XMLFilterImpl: void parse(org.xml.sax.InputSource)>($r1);

        return;
    }

    public void println() throws java.io.IOException
    {
        org.dom4j.io.XMLWriter r0;
        java.io.Writer $r1;
        org.dom4j.io.OutputFormat $r3;
        java.lang.String $r2;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        $r3 = r0.<org.dom4j.io.XMLWriter: org.dom4j.io.OutputFormat format>;

        $r2 = virtualinvoke $r3.<org.dom4j.io.OutputFormat: java.lang.String getLineSeparator()>();

        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>($r2);

        return;
    }

    public void processingInstruction(java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        java.lang.Throwable r3;
        org.dom4j.io.XMLWriter r0;
        java.io.Writer $r4;
        java.io.IOException $r5;
        java.lang.String $r1, $r2;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

     label01:
        virtualinvoke r0.<org.dom4j.io.XMLWriter: void indent()>();

     label02:
        $r4 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

     label03:
        virtualinvoke $r4.<java.io.Writer: void write(java.lang.String)>("<?");

     label04:
        $r4 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

     label05:
        virtualinvoke $r4.<java.io.Writer: void write(java.lang.String)>($r1);

     label06:
        $r4 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

     label07:
        virtualinvoke $r4.<java.io.Writer: void write(java.lang.String)>(" ");

     label08:
        $r4 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

     label09:
        virtualinvoke $r4.<java.io.Writer: void write(java.lang.String)>($r2);

     label10:
        $r4 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

     label11:
        virtualinvoke $r4.<java.io.Writer: void write(java.lang.String)>("?>");

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writePrintln()>();

     label12:
        r0.<org.dom4j.io.XMLWriter: int lastOutputNodeType> = 7;

     label13:
        specialinvoke r0.<org.xml.sax.helpers.XMLFilterImpl: void processingInstruction(java.lang.String,java.lang.String)>($r1, $r2);

     label14:
        return;

     label15:
        r3 := @caughtexception;

        $r5 = (java.io.IOException) r3;

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void handleException(java.io.IOException)>($r5);

        return;

        catch java.io.IOException from label01 to label02 with label15;
        catch java.io.IOException from label03 to label04 with label15;
        catch java.io.IOException from label05 to label06 with label15;
        catch java.io.IOException from label07 to label08 with label15;
        catch java.io.IOException from label09 to label10 with label15;
        catch java.io.IOException from label11 to label12 with label15;
        catch java.io.IOException from label13 to label14 with label15;
    }

    public boolean resolveEntityRefs()
    {
        org.dom4j.io.XMLWriter r0;
        boolean z0;

        r0 := @this: org.dom4j.io.XMLWriter;

        z0 = r0.<org.dom4j.io.XMLWriter: boolean resolveEntityRefs>;

        return z0;
    }

    public void setDocumentLocator(org.xml.sax.Locator)
    {
        org.xml.sax.Locator $r1;
        org.dom4j.io.XMLWriter r0;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: org.xml.sax.Locator;

        specialinvoke r0.<org.xml.sax.helpers.XMLFilterImpl: void setDocumentLocator(org.xml.sax.Locator)>($r1);

        return;
    }

    public void setEscapeText(boolean)
    {
        org.dom4j.io.XMLWriter r0;
        boolean $z0;

        r0 := @this: org.dom4j.io.XMLWriter;

        $z0 := @parameter0: boolean;

        r0.<org.dom4j.io.XMLWriter: boolean escapeText> = $z0;

        return;
    }

    public void setIndentLevel(int)
    {
        int $i0;
        org.dom4j.io.XMLWriter r0;

        r0 := @this: org.dom4j.io.XMLWriter;

        $i0 := @parameter0: int;

        r0.<org.dom4j.io.XMLWriter: int indentLevel> = $i0;

        return;
    }

    public void setLexicalHandler(org.xml.sax.ext.LexicalHandler)
    {
        org.xml.sax.ext.LexicalHandler $r1;
        java.lang.NullPointerException $r2;
        org.dom4j.io.XMLWriter r0;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: org.xml.sax.ext.LexicalHandler;

        if $r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null lexical handler");

        throw $r2;

     label1:
        r0.<org.dom4j.io.XMLWriter: org.xml.sax.ext.LexicalHandler lexicalHandler> = $r1;

        return;
    }

    public void setMaximumAllowedCharacter(int)
    {
        int $i0;
        org.dom4j.io.XMLWriter r0;

        r0 := @this: org.dom4j.io.XMLWriter;

        $i0 := @parameter0: int;

        r0.<org.dom4j.io.XMLWriter: int maximumAllowedCharacter> = $i0;

        return;
    }

    public void setOutputStream(java.io.OutputStream) throws java.io.UnsupportedEncodingException
    {
        java.io.OutputStream $r1;
        org.dom4j.io.XMLWriter r0;
        java.io.Writer $r4;
        org.dom4j.io.OutputFormat $r2;
        java.lang.String $r3;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: java.io.OutputStream;

        $r2 = r0.<org.dom4j.io.XMLWriter: org.dom4j.io.OutputFormat format>;

        $r3 = virtualinvoke $r2.<org.dom4j.io.OutputFormat: java.lang.String getEncoding()>();

        $r4 = virtualinvoke r0.<org.dom4j.io.XMLWriter: java.io.Writer createWriter(java.io.OutputStream,java.lang.String)>($r1, $r3);

        r0.<org.dom4j.io.XMLWriter: java.io.Writer writer> = $r4;

        r0.<org.dom4j.io.XMLWriter: boolean autoFlush> = 1;

        return;
    }

    public void setProperty(java.lang.String, java.lang.Object) throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
    {
        org.dom4j.io.XMLWriter r0;
        java.lang.String[] $r3;
        org.xml.sax.ext.LexicalHandler r5;
        int i0, $i1;
        java.lang.Object r2;
        java.lang.String $r1, $r4;
        boolean $z0;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        i0 = 0;

     label1:
        $r3 = <org.dom4j.io.XMLWriter: java.lang.String[] LEXICAL_HANDLER_NAMES>;

        $i1 = lengthof $r3;

        if i0 >= $i1 goto label3;

        $r3 = <org.dom4j.io.XMLWriter: java.lang.String[] LEXICAL_HANDLER_NAMES>;

        $r4 = $r3[i0];

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        r5 = (org.xml.sax.ext.LexicalHandler) r2;

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void setLexicalHandler(org.xml.sax.ext.LexicalHandler)>(r5);

        return;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        specialinvoke r0.<org.xml.sax.helpers.XMLFilterImpl: void setProperty(java.lang.String,java.lang.Object)>($r1, r2);

        return;
    }

    public void setResolveEntityRefs(boolean)
    {
        org.dom4j.io.XMLWriter r0;
        boolean $z0;

        r0 := @this: org.dom4j.io.XMLWriter;

        $z0 := @parameter0: boolean;

        r0.<org.dom4j.io.XMLWriter: boolean resolveEntityRefs> = $z0;

        return;
    }

    public void setWriter(java.io.Writer)
    {
        java.io.Writer $r1;
        org.dom4j.io.XMLWriter r0;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: java.io.Writer;

        r0.<org.dom4j.io.XMLWriter: java.io.Writer writer> = $r1;

        r0.<org.dom4j.io.XMLWriter: boolean autoFlush> = 0;

        return;
    }

    protected boolean shouldEncodeChar(char)
    {
        org.dom4j.io.XMLWriter r0;
        int $i1, $i2;
        char $c0;

        r0 := @this: org.dom4j.io.XMLWriter;

        $c0 := @parameter0: char;

        $i1 = virtualinvoke r0.<org.dom4j.io.XMLWriter: int getMaximumAllowedCharacter()>();

        if $i1 <= 0 goto label1;

        $i2 = (int) $c0;

        if $i2 <= $i1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void startCDATA() throws org.xml.sax.SAXException
    {
        java.lang.Throwable r1;
        org.xml.sax.ext.LexicalHandler $r3;
        org.dom4j.io.XMLWriter r0;
        java.io.Writer $r2;
        java.io.IOException $r4;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r2 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

     label1:
        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>("<![CDATA[");

     label2:
        $r3 = r0.<org.dom4j.io.XMLWriter: org.xml.sax.ext.LexicalHandler lexicalHandler>;

        if $r3 == null goto label4;

        $r3 = r0.<org.dom4j.io.XMLWriter: org.xml.sax.ext.LexicalHandler lexicalHandler>;

        interfaceinvoke $r3.<org.xml.sax.ext.LexicalHandler: void startCDATA()>();

        return;

     label3:
        r1 := @caughtexception;

        $r4 = (java.io.IOException) r1;

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void handleException(java.io.IOException)>($r4);

        goto label2;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void startDTD(java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        java.lang.Throwable r4;
        org.xml.sax.ext.LexicalHandler $r5;
        org.dom4j.io.XMLWriter r0;
        java.io.IOException $r6;
        java.lang.String $r1, $r2, $r3;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        r0.<org.dom4j.io.XMLWriter: boolean inDTD> = 1;

     label1:
        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writeDocType(java.lang.String,java.lang.String,java.lang.String)>($r1, $r2, $r3);

     label2:
        $r5 = r0.<org.dom4j.io.XMLWriter: org.xml.sax.ext.LexicalHandler lexicalHandler>;

        if $r5 == null goto label4;

        $r5 = r0.<org.dom4j.io.XMLWriter: org.xml.sax.ext.LexicalHandler lexicalHandler>;

        interfaceinvoke $r5.<org.xml.sax.ext.LexicalHandler: void startDTD(java.lang.String,java.lang.String,java.lang.String)>($r1, $r2, $r3);

        return;

     label3:
        r4 := @caughtexception;

        $r6 = (java.io.IOException) r4;

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void handleException(java.io.IOException)>($r6);

        goto label2;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void startDocument() throws org.xml.sax.SAXException
    {
        java.lang.Throwable r1;
        java.io.IOException $r2;
        org.dom4j.io.XMLWriter r0;

        r0 := @this: org.dom4j.io.XMLWriter;

     label1:
        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writeDeclaration()>();

        specialinvoke r0.<org.xml.sax.helpers.XMLFilterImpl: void startDocument()>();

     label2:
        return;

     label3:
        r1 := @caughtexception;

        $r2 = (java.io.IOException) r1;

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void handleException(java.io.IOException)>($r2);

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes) throws org.xml.sax.SAXException
    {
        java.lang.Throwable r5;
        org.dom4j.io.XMLWriter r0;
        java.io.IOException $r7;
        org.xml.sax.Attributes $r4;
        java.io.Writer $r6;
        int $i0;
        java.lang.String $r1, $r2, $r3;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: org.xml.sax.Attributes;

        r0.<org.dom4j.io.XMLWriter: boolean charsAdded> = 0;

     label01:
        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writePrintln()>();

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void indent()>();

     label02:
        $r6 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

     label03:
        virtualinvoke $r6.<java.io.Writer: void write(java.lang.String)>("<");

     label04:
        $r6 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

     label05:
        virtualinvoke $r6.<java.io.Writer: void write(java.lang.String)>($r3);

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writeNamespaces()>();

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writeAttributes(org.xml.sax.Attributes)>($r4);

     label06:
        $r6 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

     label07:
        virtualinvoke $r6.<java.io.Writer: void write(java.lang.String)>(">");

     label08:
        $i0 = r0.<org.dom4j.io.XMLWriter: int indentLevel>;

        $i0 = $i0 + 1;

        r0.<org.dom4j.io.XMLWriter: int indentLevel> = $i0;

        r0.<org.dom4j.io.XMLWriter: int lastOutputNodeType> = 1;

        r0.<org.dom4j.io.XMLWriter: boolean lastElementClosed> = 0;

     label09:
        specialinvoke r0.<org.xml.sax.helpers.XMLFilterImpl: void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)>($r1, $r2, $r3, $r4);

     label10:
        return;

     label11:
        r5 := @caughtexception;

        $r7 = (java.io.IOException) r5;

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void handleException(java.io.IOException)>($r7);

        return;

        catch java.io.IOException from label01 to label02 with label11;
        catch java.io.IOException from label03 to label04 with label11;
        catch java.io.IOException from label05 to label06 with label11;
        catch java.io.IOException from label07 to label08 with label11;
        catch java.io.IOException from label09 to label10 with label11;
    }

    public void startEntity(java.lang.String) throws org.xml.sax.SAXException
    {
        java.lang.Throwable r2;
        org.xml.sax.ext.LexicalHandler $r3;
        org.dom4j.io.XMLWriter r0;
        java.io.IOException $r4;
        java.lang.String $r1;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: java.lang.String;

     label1:
        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writeEntityRef(java.lang.String)>($r1);

     label2:
        $r3 = r0.<org.dom4j.io.XMLWriter: org.xml.sax.ext.LexicalHandler lexicalHandler>;

        if $r3 == null goto label4;

        $r3 = r0.<org.dom4j.io.XMLWriter: org.xml.sax.ext.LexicalHandler lexicalHandler>;

        interfaceinvoke $r3.<org.xml.sax.ext.LexicalHandler: void startEntity(java.lang.String)>($r1);

        return;

     label3:
        r2 := @caughtexception;

        $r4 = (java.io.IOException) r2;

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void handleException(java.io.IOException)>($r4);

        goto label2;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void startPrefixMapping(java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        org.dom4j.io.XMLWriter r0;
        java.util.Map $r3;
        java.util.HashMap $r4;
        java.lang.String $r1, $r2;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.dom4j.io.XMLWriter: java.util.Map namespacesMap>;

        if $r3 != null goto label1;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<org.dom4j.io.XMLWriter: java.util.Map namespacesMap> = $r4;

     label1:
        $r3 = r0.<org.dom4j.io.XMLWriter: java.util.Map namespacesMap>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        specialinvoke r0.<org.xml.sax.helpers.XMLFilterImpl: void startPrefixMapping(java.lang.String,java.lang.String)>($r1, $r2);

        return;
    }

    public void unparsedEntityDecl(java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        org.dom4j.io.XMLWriter r0;
        java.lang.String $r1, $r2, $r3, $r4;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.lang.String;

        specialinvoke r0.<org.xml.sax.helpers.XMLFilterImpl: void unparsedEntityDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r1, $r2, $r3, $r4);

        return;
    }

    public void write(java.lang.Object) throws java.io.IOException
    {
        org.dom4j.Node r2;
        org.dom4j.io.XMLWriter r0;
        java.io.IOException $r5;
        java.util.List r4;
        java.lang.StringBuffer $r6;
        int i0, $i1;
        java.lang.Object r1;
        java.lang.String r3;
        boolean $z0;

        r0 := @this: org.dom4j.io.XMLWriter;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.dom4j.Node;

        if $z0 == 0 goto label1;

        r2 = (org.dom4j.Node) r1;

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void write(org.dom4j.Node)>(r2);

        return;

     label1:
        $z0 = r1 instanceof java.lang.String;

        if $z0 == 0 goto label2;

        r3 = (java.lang.String) r1;

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void write(java.lang.String)>(r3);

        return;

     label2:
        $z0 = r1 instanceof java.util.List;

        if $z0 == 0 goto label4;

        r4 = (java.util.List) r1;

        i0 = 0;

        $i1 = interfaceinvoke r4.<java.util.List: int size()>();

     label3:
        if i0 >= $i1 goto label5;

        r1 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i0);

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void write(java.lang.Object)>(r1);

        i0 = i0 + 1;

        goto label3;

     label4:
        if r1 == null goto label5;

        $r5 = new java.io.IOException;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid object: ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        r3 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>(r3);

        throw $r5;

     label5:
        return;
    }

    public void write(java.lang.String) throws java.io.IOException
    {
        java.lang.String $r1;
        org.dom4j.io.XMLWriter r0;
        boolean $z0;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writeString(java.lang.String)>($r1);

        $z0 = r0.<org.dom4j.io.XMLWriter: boolean autoFlush>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void flush()>();

     label1:
        return;
    }

    public void write(org.dom4j.Attribute) throws java.io.IOException
    {
        org.dom4j.Attribute $r1;
        org.dom4j.io.XMLWriter r0;
        boolean $z0;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: org.dom4j.Attribute;

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writeAttribute(org.dom4j.Attribute)>($r1);

        $z0 = r0.<org.dom4j.io.XMLWriter: boolean autoFlush>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void flush()>();

     label1:
        return;
    }

    public void write(org.dom4j.CDATA) throws java.io.IOException
    {
        org.dom4j.CDATA $r1;
        org.dom4j.io.XMLWriter r0;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: org.dom4j.CDATA;

        $r2 = interfaceinvoke $r1.<org.dom4j.CDATA: java.lang.String getText()>();

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writeCDATA(java.lang.String)>($r2);

        $z0 = r0.<org.dom4j.io.XMLWriter: boolean autoFlush>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void flush()>();

     label1:
        return;
    }

    public void write(org.dom4j.Comment) throws java.io.IOException
    {
        org.dom4j.io.XMLWriter r0;
        org.dom4j.Comment $r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: org.dom4j.Comment;

        $r2 = interfaceinvoke $r1.<org.dom4j.Comment: java.lang.String getText()>();

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writeComment(java.lang.String)>($r2);

        $z0 = r0.<org.dom4j.io.XMLWriter: boolean autoFlush>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void flush()>();

     label1:
        return;
    }

    public void write(org.dom4j.Document) throws java.io.IOException
    {
        org.dom4j.Document $r1;
        org.dom4j.DocumentType $r2;
        org.dom4j.Node $r3;
        org.dom4j.io.XMLWriter r0;
        int i0, $i1;
        boolean $z0;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: org.dom4j.Document;

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writeDeclaration()>();

        $r2 = interfaceinvoke $r1.<org.dom4j.Document: org.dom4j.DocumentType getDocType()>();

        if $r2 == null goto label1;

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void indent()>();

        $r2 = interfaceinvoke $r1.<org.dom4j.Document: org.dom4j.DocumentType getDocType()>();

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writeDocType(org.dom4j.DocumentType)>($r2);

     label1:
        i0 = 0;

        $i1 = interfaceinvoke $r1.<org.dom4j.Document: int nodeCount()>();

     label2:
        if i0 >= $i1 goto label3;

        $r3 = interfaceinvoke $r1.<org.dom4j.Document: org.dom4j.Node node(int)>(i0);

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writeNode(org.dom4j.Node)>($r3);

        i0 = i0 + 1;

        goto label2;

     label3:
        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writePrintln()>();

        $z0 = r0.<org.dom4j.io.XMLWriter: boolean autoFlush>;

        if $z0 == 0 goto label4;

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void flush()>();

     label4:
        return;
    }

    public void write(org.dom4j.DocumentType) throws java.io.IOException
    {
        org.dom4j.DocumentType $r1;
        org.dom4j.io.XMLWriter r0;
        boolean $z0;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: org.dom4j.DocumentType;

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writeDocType(org.dom4j.DocumentType)>($r1);

        $z0 = r0.<org.dom4j.io.XMLWriter: boolean autoFlush>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void flush()>();

     label1:
        return;
    }

    public void write(org.dom4j.Element) throws java.io.IOException
    {
        org.dom4j.Element $r1;
        org.dom4j.io.XMLWriter r0;
        boolean $z0;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: org.dom4j.Element;

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writeElement(org.dom4j.Element)>($r1);

        $z0 = r0.<org.dom4j.io.XMLWriter: boolean autoFlush>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void flush()>();

     label1:
        return;
    }

    public void write(org.dom4j.Entity) throws java.io.IOException
    {
        org.dom4j.Entity $r1;
        org.dom4j.io.XMLWriter r0;
        boolean $z0;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: org.dom4j.Entity;

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writeEntity(org.dom4j.Entity)>($r1);

        $z0 = r0.<org.dom4j.io.XMLWriter: boolean autoFlush>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void flush()>();

     label1:
        return;
    }

    public void write(org.dom4j.Namespace) throws java.io.IOException
    {
        org.dom4j.Namespace $r1;
        org.dom4j.io.XMLWriter r0;
        boolean $z0;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: org.dom4j.Namespace;

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writeNamespace(org.dom4j.Namespace)>($r1);

        $z0 = r0.<org.dom4j.io.XMLWriter: boolean autoFlush>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void flush()>();

     label1:
        return;
    }

    public void write(org.dom4j.Node) throws java.io.IOException
    {
        org.dom4j.Node $r1;
        org.dom4j.io.XMLWriter r0;
        boolean $z0;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: org.dom4j.Node;

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writeNode(org.dom4j.Node)>($r1);

        $z0 = r0.<org.dom4j.io.XMLWriter: boolean autoFlush>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void flush()>();

     label1:
        return;
    }

    public void write(org.dom4j.ProcessingInstruction) throws java.io.IOException
    {
        org.dom4j.ProcessingInstruction $r1;
        org.dom4j.io.XMLWriter r0;
        boolean $z0;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: org.dom4j.ProcessingInstruction;

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writeProcessingInstruction(org.dom4j.ProcessingInstruction)>($r1);

        $z0 = r0.<org.dom4j.io.XMLWriter: boolean autoFlush>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void flush()>();

     label1:
        return;
    }

    public void write(org.dom4j.Text) throws java.io.IOException
    {
        org.dom4j.io.XMLWriter r0;
        org.dom4j.Text $r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: org.dom4j.Text;

        $r2 = interfaceinvoke $r1.<org.dom4j.Text: java.lang.String getText()>();

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writeString(java.lang.String)>($r2);

        $z0 = r0.<org.dom4j.io.XMLWriter: boolean autoFlush>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void flush()>();

     label1:
        return;
    }

    protected void writeAttribute(org.dom4j.Attribute) throws java.io.IOException
    {
        org.dom4j.io.XMLWriter r0;
        java.io.Writer $r2;
        int $i1;
        org.dom4j.io.OutputFormat $r4;
        char $c0;
        java.lang.String $r3;
        org.dom4j.Attribute $r1;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: org.dom4j.Attribute;

        $r2 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>(" ");

        $r2 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        $r3 = interfaceinvoke $r1.<org.dom4j.Attribute: java.lang.String getQualifiedName()>();

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>($r3);

        $r2 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>("=");

        $r4 = r0.<org.dom4j.io.XMLWriter: org.dom4j.io.OutputFormat format>;

        $c0 = virtualinvoke $r4.<org.dom4j.io.OutputFormat: char getAttributeQuoteCharacter()>();

        $r2 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        $i1 = (int) $c0;

        virtualinvoke $r2.<java.io.Writer: void write(int)>($i1);

        $r3 = interfaceinvoke $r1.<org.dom4j.Attribute: java.lang.String getValue()>();

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writeEscapeAttributeEntities(java.lang.String)>($r3);

        $r2 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        $i1 = (int) $c0;

        virtualinvoke $r2.<java.io.Writer: void write(int)>($i1);

        r0.<org.dom4j.io.XMLWriter: int lastOutputNodeType> = 2;

        return;
    }

    protected void writeAttribute(org.xml.sax.Attributes, int) throws java.io.IOException
    {
        org.dom4j.io.XMLWriter r0;
        org.dom4j.io.OutputFormat $r2;
        char $c1;
        org.xml.sax.Attributes $r1;
        int $i0, $i2;
        java.io.Writer $r3;
        java.lang.String $r4;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: org.xml.sax.Attributes;

        $i0 := @parameter1: int;

        $r2 = r0.<org.dom4j.io.XMLWriter: org.dom4j.io.OutputFormat format>;

        $c1 = virtualinvoke $r2.<org.dom4j.io.OutputFormat: char getAttributeQuoteCharacter()>();

        $r3 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r3.<java.io.Writer: void write(java.lang.String)>(" ");

        $r3 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        $r4 = interfaceinvoke $r1.<org.xml.sax.Attributes: java.lang.String getQName(int)>($i0);

        virtualinvoke $r3.<java.io.Writer: void write(java.lang.String)>($r4);

        $r3 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r3.<java.io.Writer: void write(java.lang.String)>("=");

        $r3 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        $i2 = (int) $c1;

        virtualinvoke $r3.<java.io.Writer: void write(int)>($i2);

        $r4 = interfaceinvoke $r1.<org.xml.sax.Attributes: java.lang.String getValue(int)>($i0);

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writeEscapeAttributeEntities(java.lang.String)>($r4);

        $r3 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        $i0 = (int) $c1;

        virtualinvoke $r3.<java.io.Writer: void write(int)>($i0);

        return;
    }

    protected void writeAttributes(org.dom4j.Element) throws java.io.IOException
    {
        org.dom4j.Namespace $r3, $r4;
        org.dom4j.io.XMLWriter r0;
        org.dom4j.io.OutputFormat $r8;
        char $c2;
        org.dom4j.tree.NamespaceStack $r6;
        int i0, $i1, $i3;
        java.io.Writer $r9;
        org.dom4j.Element $r1;
        java.lang.String $r5, $r7;
        org.dom4j.Attribute $r2;
        boolean $z0;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: org.dom4j.Element;

        i0 = 0;

        $i1 = interfaceinvoke $r1.<org.dom4j.Element: int attributeCount()>();

     label1:
        if i0 >= $i1 goto label6;

        $r2 = interfaceinvoke $r1.<org.dom4j.Element: org.dom4j.Attribute attribute(int)>(i0);

        $r3 = interfaceinvoke $r2.<org.dom4j.Attribute: org.dom4j.Namespace getNamespace()>();

        if $r3 == null goto label2;

        $r4 = <org.dom4j.Namespace: org.dom4j.Namespace NO_NAMESPACE>;

        if $r3 == $r4 goto label2;

        $r4 = <org.dom4j.Namespace: org.dom4j.Namespace XML_NAMESPACE>;

        if $r3 == $r4 goto label2;

        $r5 = virtualinvoke $r3.<org.dom4j.Namespace: java.lang.String getPrefix()>();

        $r6 = r0.<org.dom4j.io.XMLWriter: org.dom4j.tree.NamespaceStack namespaceStack>;

        $r5 = virtualinvoke $r6.<org.dom4j.tree.NamespaceStack: java.lang.String getURI(java.lang.String)>($r5);

        $r7 = virtualinvoke $r3.<org.dom4j.Namespace: java.lang.String getURI()>();

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label2;

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writeNamespace(org.dom4j.Namespace)>($r3);

        $r6 = r0.<org.dom4j.io.XMLWriter: org.dom4j.tree.NamespaceStack namespaceStack>;

        virtualinvoke $r6.<org.dom4j.tree.NamespaceStack: void push(org.dom4j.Namespace)>($r3);

     label2:
        $r5 = interfaceinvoke $r2.<org.dom4j.Attribute: java.lang.String getName()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean startsWith(java.lang.String)>("xmlns:");

        if $z0 == 0 goto label4;

        $r5 = virtualinvoke $r5.<java.lang.String: java.lang.String substring(int)>(6);

        $r6 = r0.<org.dom4j.io.XMLWriter: org.dom4j.tree.NamespaceStack namespaceStack>;

        $r3 = virtualinvoke $r6.<org.dom4j.tree.NamespaceStack: org.dom4j.Namespace getNamespaceForPrefix(java.lang.String)>($r5);

        if $r3 != null goto label3;

        $r7 = interfaceinvoke $r2.<org.dom4j.Attribute: java.lang.String getValue()>();

        $r6 = r0.<org.dom4j.io.XMLWriter: org.dom4j.tree.NamespaceStack namespaceStack>;

        virtualinvoke $r6.<org.dom4j.tree.NamespaceStack: void push(java.lang.String,java.lang.String)>($r5, $r7);

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writeNamespace(java.lang.String,java.lang.String)>($r5, $r7);

     label3:
        i0 = i0 + 1;

        goto label1;

     label4:
        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("xmlns");

        if $z0 == 0 goto label5;

        $r6 = r0.<org.dom4j.io.XMLWriter: org.dom4j.tree.NamespaceStack namespaceStack>;

        $r3 = virtualinvoke $r6.<org.dom4j.tree.NamespaceStack: org.dom4j.Namespace getDefaultNamespace()>();

        if $r3 != null goto label3;

        $r5 = interfaceinvoke $r2.<org.dom4j.Attribute: java.lang.String getValue()>();

        $r6 = r0.<org.dom4j.io.XMLWriter: org.dom4j.tree.NamespaceStack namespaceStack>;

        virtualinvoke $r6.<org.dom4j.tree.NamespaceStack: void push(java.lang.String,java.lang.String)>(null, $r5);

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writeNamespace(java.lang.String,java.lang.String)>(null, $r5);

        goto label3;

     label5:
        $r8 = r0.<org.dom4j.io.XMLWriter: org.dom4j.io.OutputFormat format>;

        $c2 = virtualinvoke $r8.<org.dom4j.io.OutputFormat: char getAttributeQuoteCharacter()>();

        $r9 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r9.<java.io.Writer: void write(java.lang.String)>(" ");

        $r9 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        $r5 = interfaceinvoke $r2.<org.dom4j.Attribute: java.lang.String getQualifiedName()>();

        virtualinvoke $r9.<java.io.Writer: void write(java.lang.String)>($r5);

        $r9 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r9.<java.io.Writer: void write(java.lang.String)>("=");

        $r9 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        $i3 = (int) $c2;

        virtualinvoke $r9.<java.io.Writer: void write(int)>($i3);

        $r5 = interfaceinvoke $r2.<org.dom4j.Attribute: java.lang.String getValue()>();

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writeEscapeAttributeEntities(java.lang.String)>($r5);

        $r9 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        $i3 = (int) $c2;

        virtualinvoke $r9.<java.io.Writer: void write(int)>($i3);

        goto label3;

     label6:
        return;
    }

    protected void writeAttributes(org.xml.sax.Attributes) throws java.io.IOException
    {
        org.dom4j.io.XMLWriter r0;
        org.xml.sax.Attributes $r1;
        int $i0, i1;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: org.xml.sax.Attributes;

        i1 = 0;

        $i0 = interfaceinvoke $r1.<org.xml.sax.Attributes: int getLength()>();

     label1:
        if i1 >= $i0 goto label2;

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writeAttribute(org.xml.sax.Attributes,int)>($r1, i1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    protected void writeCDATA(java.lang.String) throws java.io.IOException
    {
        java.io.Writer $r2;
        java.lang.String $r1;
        org.dom4j.io.XMLWriter r0;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>("<![CDATA[");

        if $r1 == null goto label1;

        $r2 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>($r1);

     label1:
        $r2 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>("]]>");

        r0.<org.dom4j.io.XMLWriter: int lastOutputNodeType> = 4;

        return;
    }

    protected void writeClose(java.lang.String) throws java.io.IOException
    {
        java.io.Writer $r2;
        java.lang.String $r1;
        org.dom4j.io.XMLWriter r0;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>("</");

        $r2 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>($r1);

        $r2 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>(">");

        return;
    }

    public void writeClose(org.dom4j.Element) throws java.io.IOException
    {
        org.dom4j.Element $r1;
        java.lang.String $r2;
        org.dom4j.io.XMLWriter r0;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: org.dom4j.Element;

        $r2 = interfaceinvoke $r1.<org.dom4j.Element: java.lang.String getQualifiedName()>();

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writeClose(java.lang.String)>($r2);

        return;
    }

    protected void writeComment(java.lang.String) throws java.io.IOException
    {
        org.dom4j.io.XMLWriter r0;
        java.io.Writer $r3;
        org.dom4j.io.OutputFormat $r2;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.dom4j.io.XMLWriter: org.dom4j.io.OutputFormat format>;

        $z0 = virtualinvoke $r2.<org.dom4j.io.OutputFormat: boolean isNewlines()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void println()>();

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void indent()>();

     label1:
        $r3 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r3.<java.io.Writer: void write(java.lang.String)>("<!--");

        $r3 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r3.<java.io.Writer: void write(java.lang.String)>($r1);

        $r3 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r3.<java.io.Writer: void write(java.lang.String)>("-->");

        r0.<org.dom4j.io.XMLWriter: int lastOutputNodeType> = 8;

        return;
    }

    protected void writeDeclaration() throws java.io.IOException
    {
        java.lang.StringBuffer $r4;
        org.dom4j.io.XMLWriter r0;
        java.io.Writer $r3;
        org.dom4j.io.OutputFormat $r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 = r0.<org.dom4j.io.XMLWriter: org.dom4j.io.OutputFormat format>;

        $r2 = virtualinvoke $r1.<org.dom4j.io.OutputFormat: java.lang.String getEncoding()>();

        $r1 = r0.<org.dom4j.io.XMLWriter: org.dom4j.io.OutputFormat format>;

        $z0 = virtualinvoke $r1.<org.dom4j.io.OutputFormat: boolean isSuppressDeclaration()>();

        if $z0 != 0 goto label5;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("UTF8");

        if $z0 == 0 goto label3;

        $r3 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r3.<java.io.Writer: void write(java.lang.String)>("<?xml version=\"1.0\"");

        $r1 = r0.<org.dom4j.io.XMLWriter: org.dom4j.io.OutputFormat format>;

        $z0 = virtualinvoke $r1.<org.dom4j.io.OutputFormat: boolean isOmitEncoding()>();

        if $z0 != 0 goto label1;

        $r3 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r3.<java.io.Writer: void write(java.lang.String)>(" encoding=\"UTF-8\"");

     label1:
        $r3 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r3.<java.io.Writer: void write(java.lang.String)>("?>");

     label2:
        $r1 = r0.<org.dom4j.io.XMLWriter: org.dom4j.io.OutputFormat format>;

        $z0 = virtualinvoke $r1.<org.dom4j.io.OutputFormat: boolean isNewLineAfterDeclaration()>();

        if $z0 == 0 goto label5;

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void println()>();

        return;

     label3:
        $r3 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r3.<java.io.Writer: void write(java.lang.String)>("<?xml version=\"1.0\"");

        $r1 = r0.<org.dom4j.io.XMLWriter: org.dom4j.io.OutputFormat format>;

        $z0 = virtualinvoke $r1.<org.dom4j.io.OutputFormat: boolean isOmitEncoding()>();

        if $z0 != 0 goto label4;

        $r3 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" encoding=\"");

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

        $r2 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.Writer: void write(java.lang.String)>($r2);

     label4:
        $r3 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r3.<java.io.Writer: void write(java.lang.String)>("?>");

        goto label2;

     label5:
        return;
    }

    protected void writeDocType(java.lang.String, java.lang.String, java.lang.String) throws java.io.IOException
    {
        org.dom4j.io.XMLWriter r0;
        java.io.Writer $r4;
        java.lang.String $r1, $r2, $r3;
        boolean z0, $z1;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        z0 = 0;

        $r4 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r4.<java.io.Writer: void write(java.lang.String)>("<!DOCTYPE ");

        $r4 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r4.<java.io.Writer: void write(java.lang.String)>($r1);

        if $r2 == null goto label1;

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z1 != 0 goto label1;

        $r4 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r4.<java.io.Writer: void write(java.lang.String)>(" PUBLIC \"");

        $r4 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r4.<java.io.Writer: void write(java.lang.String)>($r2);

        $r4 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r4.<java.io.Writer: void write(java.lang.String)>("\"");

        z0 = 1;

     label1:
        if $r3 == null goto label3;

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z1 != 0 goto label3;

        if z0 != 0 goto label2;

        $r4 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r4.<java.io.Writer: void write(java.lang.String)>(" SYSTEM");

     label2:
        $r4 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r4.<java.io.Writer: void write(java.lang.String)>(" \"");

        $r4 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r4.<java.io.Writer: void write(java.lang.String)>($r3);

        $r4 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r4.<java.io.Writer: void write(java.lang.String)>("\"");

     label3:
        $r4 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r4.<java.io.Writer: void write(java.lang.String)>(">");

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writePrintln()>();

        return;
    }

    protected void writeDocType(org.dom4j.DocumentType) throws java.io.IOException
    {
        java.io.Writer $r2;
        org.dom4j.DocumentType $r1;
        org.dom4j.io.XMLWriter r0;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: org.dom4j.DocumentType;

        if $r1 == null goto label1;

        $r2 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        interfaceinvoke $r1.<org.dom4j.DocumentType: void write(java.io.Writer)>($r2);

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writePrintln()>();

     label1:
        return;
    }

    protected void writeElement(org.dom4j.Element) throws java.io.IOException
    {
        org.dom4j.Namespace $r5;
        org.dom4j.Node $r6;
        org.dom4j.io.XMLWriter r0;
        org.dom4j.tree.NamespaceStack $r4;
        int $i0, $i1, i2;
        java.io.Writer $r3;
        org.dom4j.Element $r1;
        java.lang.String $r2;
        boolean $z0, $z1;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: org.dom4j.Element;

        $i0 = interfaceinvoke $r1.<org.dom4j.Element: int nodeCount()>();

        $r2 = interfaceinvoke $r1.<org.dom4j.Element: java.lang.String getQualifiedName()>();

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writePrintln()>();

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void indent()>();

        $r3 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r3.<java.io.Writer: void write(java.lang.String)>("<");

        $r3 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r3.<java.io.Writer: void write(java.lang.String)>($r2);

        $r4 = r0.<org.dom4j.io.XMLWriter: org.dom4j.tree.NamespaceStack namespaceStack>;

        $i1 = virtualinvoke $r4.<org.dom4j.tree.NamespaceStack: int size()>();

        $r5 = interfaceinvoke $r1.<org.dom4j.Element: org.dom4j.Namespace getNamespace()>();

        $z0 = virtualinvoke r0.<org.dom4j.io.XMLWriter: boolean isNamespaceDeclaration(org.dom4j.Namespace)>($r5);

        if $z0 == 0 goto label01;

        $r4 = r0.<org.dom4j.io.XMLWriter: org.dom4j.tree.NamespaceStack namespaceStack>;

        virtualinvoke $r4.<org.dom4j.tree.NamespaceStack: void push(org.dom4j.Namespace)>($r5);

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writeNamespace(org.dom4j.Namespace)>($r5);

     label01:
        $z0 = 1;

        i2 = 0;

     label02:
        if i2 >= $i0 goto label06;

        $r6 = interfaceinvoke $r1.<org.dom4j.Element: org.dom4j.Node node(int)>(i2);

        $z1 = $r6 instanceof org.dom4j.Namespace;

        if $z1 == 0 goto label04;

        $r5 = (org.dom4j.Namespace) $r6;

        $z1 = virtualinvoke r0.<org.dom4j.io.XMLWriter: boolean isNamespaceDeclaration(org.dom4j.Namespace)>($r5);

        if $z1 == 0 goto label03;

        $r4 = r0.<org.dom4j.io.XMLWriter: org.dom4j.tree.NamespaceStack namespaceStack>;

        virtualinvoke $r4.<org.dom4j.tree.NamespaceStack: void push(org.dom4j.Namespace)>($r5);

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writeNamespace(org.dom4j.Namespace)>($r5);

     label03:
        i2 = i2 + 1;

        goto label02;

     label04:
        $z1 = $r6 instanceof org.dom4j.Element;

        if $z1 == 0 goto label05;

        $z0 = 0;

        goto label03;

     label05:
        $z1 = $r6 instanceof org.dom4j.Comment;

        if $z1 == 0 goto label03;

        $z0 = 0;

        goto label03;

     label06:
        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writeAttributes(org.dom4j.Element)>($r1);

        r0.<org.dom4j.io.XMLWriter: int lastOutputNodeType> = 1;

        if $i0 > 0 goto label08;

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writeEmptyElementClose(java.lang.String)>($r2);

     label07:
        $r4 = r0.<org.dom4j.io.XMLWriter: org.dom4j.tree.NamespaceStack namespaceStack>;

        $i0 = virtualinvoke $r4.<org.dom4j.tree.NamespaceStack: int size()>();

        if $i0 <= $i1 goto label11;

        $r4 = r0.<org.dom4j.io.XMLWriter: org.dom4j.tree.NamespaceStack namespaceStack>;

        virtualinvoke $r4.<org.dom4j.tree.NamespaceStack: org.dom4j.Namespace pop()>();

        goto label07;

     label08:
        $r3 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r3.<java.io.Writer: void write(java.lang.String)>(">");

        if $z0 == 0 goto label10;

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writeElementContent(org.dom4j.Element)>($r1);

     label09:
        $r3 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r3.<java.io.Writer: void write(java.lang.String)>("</");

        $r3 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r3.<java.io.Writer: void write(java.lang.String)>($r2);

        $r3 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r3.<java.io.Writer: void write(java.lang.String)>(">");

        goto label07;

     label10:
        $i0 = r0.<org.dom4j.io.XMLWriter: int indentLevel>;

        $i0 = $i0 + 1;

        r0.<org.dom4j.io.XMLWriter: int indentLevel> = $i0;

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writeElementContent(org.dom4j.Element)>($r1);

        $i0 = r0.<org.dom4j.io.XMLWriter: int indentLevel>;

        $i0 = $i0 + -1;

        r0.<org.dom4j.io.XMLWriter: int indentLevel> = $i0;

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writePrintln()>();

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void indent()>();

        goto label09;

     label11:
        r0.<org.dom4j.io.XMLWriter: int lastOutputNodeType> = 1;

        return;
    }

    protected void writeElementContent(org.dom4j.Element) throws java.io.IOException
    {
        org.dom4j.Node $r5, $r9;
        org.dom4j.io.XMLWriter r0;
        org.dom4j.io.OutputFormat $r2;
        java.lang.StringBuffer r4, $r10;
        int i0, $i1, $i3;
        java.lang.String $r6;
        boolean z0, $z1, z2;
        org.dom4j.Text r3, r7;
        char c2;
        java.io.Writer $r8;
        org.dom4j.Element $r1;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: org.dom4j.Element;

        $r2 = r0.<org.dom4j.io.XMLWriter: org.dom4j.io.OutputFormat format>;

        $z1 = virtualinvoke $r2.<org.dom4j.io.OutputFormat: boolean isTrimText()>();

        z2 = $z1;

        z0 = r0.<org.dom4j.io.XMLWriter: boolean preserve>;

        if $z1 == 0 goto label01;

        $z1 = virtualinvoke r0.<org.dom4j.io.XMLWriter: boolean isElementSpacePreserved(org.dom4j.Element)>($r1);

        r0.<org.dom4j.io.XMLWriter: boolean preserve> = $z1;

        $z1 = r0.<org.dom4j.io.XMLWriter: boolean preserve>;

        if $z1 != 0 goto label04;

        z2 = 1;

     label01:
        if z2 == 0 goto label23;

        r3 = null;

        r4 = null;

        $z1 = 1;

        i0 = 0;

        $i1 = interfaceinvoke $r1.<org.dom4j.Element: int nodeCount()>();

     label02:
        if i0 >= $i1 goto label17;

        $r5 = interfaceinvoke $r1.<org.dom4j.Element: org.dom4j.Node node(int)>(i0);

        z2 = $r5 instanceof org.dom4j.Text;

        if z2 == 0 goto label07;

        if r3 != null goto label05;

        r3 = (org.dom4j.Text) $r5;

     label03:
        i0 = i0 + 1;

        goto label02;

     label04:
        z2 = 0;

        goto label01;

     label05:
        if r4 != null goto label06;

        $r10 = new java.lang.StringBuffer;

        r4 = $r10;

        $r6 = interfaceinvoke r3.<org.dom4j.Text: java.lang.String getText()>();

        specialinvoke $r10.<java.lang.StringBuffer: void <init>(java.lang.String)>($r6);

     label06:
        r7 = (org.dom4j.Text) $r5;

        $r6 = interfaceinvoke r7.<org.dom4j.Text: java.lang.String getText()>();

        virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        goto label03;

     label07:
        if $z1 != 0 goto label09;

        $r2 = r0.<org.dom4j.io.XMLWriter: org.dom4j.io.OutputFormat format>;

        $z1 = virtualinvoke $r2.<org.dom4j.io.OutputFormat: boolean isPadText()>();

        if $z1 == 0 goto label09;

        c2 = 97;

        if r4 == null goto label14;

        c2 = virtualinvoke r4.<java.lang.StringBuffer: char charAt(int)>(0);

     label08:
        $z1 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(c2);

        if $z1 == 0 goto label09;

        $r8 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r8.<java.io.Writer: void write(java.lang.String)>(" ");

     label09:
        if r3 == null goto label13;

        if r4 == null goto label15;

        $r6 = virtualinvoke r4.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writeString(java.lang.String)>($r6);

        r4 = null;

     label10:
        $r2 = r0.<org.dom4j.io.XMLWriter: org.dom4j.io.OutputFormat format>;

        $z1 = virtualinvoke $r2.<org.dom4j.io.OutputFormat: boolean isPadText()>();

        if $z1 == 0 goto label12;

        c2 = 97;

        if r4 == null goto label16;

        $i3 = virtualinvoke r4.<java.lang.StringBuffer: int length()>();

        $i3 = $i3 + -1;

        c2 = virtualinvoke r4.<java.lang.StringBuffer: char charAt(int)>($i3);

     label11:
        $z1 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(c2);

        if $z1 == 0 goto label12;

        $r8 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r8.<java.io.Writer: void write(java.lang.String)>(" ");

     label12:
        r3 = null;

     label13:
        $z1 = 0;

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writeNode(org.dom4j.Node)>($r5);

        goto label03;

     label14:
        if r3 == null goto label08;

        $r6 = interfaceinvoke r3.<org.dom4j.Text: java.lang.String getText()>();

        c2 = virtualinvoke $r6.<java.lang.String: char charAt(int)>(0);

        goto label08;

     label15:
        $r6 = interfaceinvoke r3.<org.dom4j.Text: java.lang.String getText()>();

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writeString(java.lang.String)>($r6);

        goto label10;

     label16:
        if r3 == null goto label11;

        $r6 = interfaceinvoke r3.<org.dom4j.Text: java.lang.String getText()>();

        $i3 = virtualinvoke $r6.<java.lang.String: int length()>();

        $i3 = $i3 + -1;

        c2 = virtualinvoke $r6.<java.lang.String: char charAt(int)>($i3);

        goto label11;

     label17:
        if r3 == null goto label20;

        if $z1 != 0 goto label19;

        $r2 = r0.<org.dom4j.io.XMLWriter: org.dom4j.io.OutputFormat format>;

        $z1 = virtualinvoke $r2.<org.dom4j.io.OutputFormat: boolean isPadText()>();

        if $z1 == 0 goto label19;

        if r4 == null goto label21;

        c2 = virtualinvoke r4.<java.lang.StringBuffer: char charAt(int)>(0);

     label18:
        $z1 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(c2);

        if $z1 == 0 goto label19;

        $r8 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r8.<java.io.Writer: void write(java.lang.String)>(" ");

     label19:
        if r4 == null goto label22;

        $r6 = virtualinvoke r4.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writeString(java.lang.String)>($r6);

     label20:
        r0.<org.dom4j.io.XMLWriter: boolean preserve> = z0;

        return;

     label21:
        $r6 = interfaceinvoke r3.<org.dom4j.Text: java.lang.String getText()>();

        c2 = virtualinvoke $r6.<java.lang.String: char charAt(int)>(0);

        goto label18;

     label22:
        $r6 = interfaceinvoke r3.<org.dom4j.Text: java.lang.String getText()>();

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writeString(java.lang.String)>($r6);

        goto label20;

     label23:
        $r5 = null;

        i0 = 0;

        $i1 = interfaceinvoke $r1.<org.dom4j.Element: int nodeCount()>();

     label24:
        if i0 >= $i1 goto label20;

        $r9 = interfaceinvoke $r1.<org.dom4j.Element: org.dom4j.Node node(int)>(i0);

        $z1 = $r9 instanceof org.dom4j.Text;

        if $z1 == 0 goto label26;

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writeNode(org.dom4j.Node)>($r9);

        $r5 = $r9;

     label25:
        i0 = i0 + 1;

        goto label24;

     label26:
        if $r5 == null goto label27;

        $r2 = r0.<org.dom4j.io.XMLWriter: org.dom4j.io.OutputFormat format>;

        $z1 = virtualinvoke $r2.<org.dom4j.io.OutputFormat: boolean isPadText()>();

        if $z1 == 0 goto label27;

        $r6 = interfaceinvoke $r5.<org.dom4j.Node: java.lang.String getText()>();

        $i3 = virtualinvoke $r6.<java.lang.String: int length()>();

        $i3 = $i3 + -1;

        c2 = virtualinvoke $r6.<java.lang.String: char charAt(int)>($i3);

        $z1 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(c2);

        if $z1 == 0 goto label27;

        $r8 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r8.<java.io.Writer: void write(java.lang.String)>(" ");

     label27:
        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writeNode(org.dom4j.Node)>($r9);

        $r5 = null;

        goto label25;
    }

    protected void writeEmptyElementClose(java.lang.String) throws java.io.IOException
    {
        org.dom4j.io.XMLWriter r0;
        java.io.Writer $r3;
        org.dom4j.io.OutputFormat $r2;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.dom4j.io.XMLWriter: org.dom4j.io.OutputFormat format>;

        $z0 = virtualinvoke $r2.<org.dom4j.io.OutputFormat: boolean isExpandEmptyElements()>();

        if $z0 != 0 goto label1;

        $r3 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r3.<java.io.Writer: void write(java.lang.String)>("/>");

        return;

     label1:
        $r3 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r3.<java.io.Writer: void write(java.lang.String)>("></");

        $r3 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r3.<java.io.Writer: void write(java.lang.String)>($r1);

        $r3 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r3.<java.io.Writer: void write(java.lang.String)>(">");

        return;
    }

    protected void writeEntity(org.dom4j.Entity) throws java.io.IOException
    {
        org.dom4j.Entity $r1;
        org.dom4j.io.XMLWriter r0;
        java.io.Writer $r3;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: org.dom4j.Entity;

        $z0 = virtualinvoke r0.<org.dom4j.io.XMLWriter: boolean resolveEntityRefs()>();

        if $z0 != 0 goto label1;

        $r2 = interfaceinvoke $r1.<org.dom4j.Entity: java.lang.String getName()>();

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writeEntityRef(java.lang.String)>($r2);

        return;

     label1:
        $r3 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        $r2 = interfaceinvoke $r1.<org.dom4j.Entity: java.lang.String getText()>();

        virtualinvoke $r3.<java.io.Writer: void write(java.lang.String)>($r2);

        return;
    }

    protected void writeEntityRef(java.lang.String) throws java.io.IOException
    {
        java.io.Writer $r2;
        java.lang.String $r1;
        org.dom4j.io.XMLWriter r0;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>("&");

        $r2 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>($r1);

        $r2 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>(";");

        r0.<org.dom4j.io.XMLWriter: int lastOutputNodeType> = 5;

        return;
    }

    protected void writeEscapeAttributeEntities(java.lang.String) throws java.io.IOException
    {
        java.io.Writer $r2;
        java.lang.String $r1;
        org.dom4j.io.XMLWriter r0;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: java.lang.String;

        if $r1 == null goto label1;

        $r1 = virtualinvoke r0.<org.dom4j.io.XMLWriter: java.lang.String escapeAttributeEntities(java.lang.String)>($r1);

        $r2 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>($r1);

     label1:
        return;
    }

    protected void writeNamespace(java.lang.String, java.lang.String) throws java.io.IOException
    {
        org.dom4j.io.XMLWriter r0;
        int $i0;
        java.io.Writer $r3;
        java.lang.String $r1, $r2;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        if $r1 == null goto label2;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 <= 0 goto label2;

        $r3 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r3.<java.io.Writer: void write(java.lang.String)>(" xmlns:");

        $r3 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r3.<java.io.Writer: void write(java.lang.String)>($r1);

        $r3 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r3.<java.io.Writer: void write(java.lang.String)>("=\"");

     label1:
        $r3 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r3.<java.io.Writer: void write(java.lang.String)>($r2);

        $r3 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r3.<java.io.Writer: void write(java.lang.String)>("\"");

        return;

     label2:
        $r3 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r3.<java.io.Writer: void write(java.lang.String)>(" xmlns=\"");

        goto label1;
    }

    protected void writeNamespace(org.dom4j.Namespace) throws java.io.IOException
    {
        org.dom4j.Namespace $r1;
        org.dom4j.io.XMLWriter r0;
        java.lang.String $r2, $r3;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: org.dom4j.Namespace;

        if $r1 == null goto label1;

        $r2 = virtualinvoke $r1.<org.dom4j.Namespace: java.lang.String getPrefix()>();

        $r3 = virtualinvoke $r1.<org.dom4j.Namespace: java.lang.String getURI()>();

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writeNamespace(java.lang.String,java.lang.String)>($r2, $r3);

     label1:
        return;
    }

    protected void writeNamespaces() throws java.io.IOException
    {
        java.util.Map$Entry r5;
        java.util.Iterator $r3;
        org.dom4j.io.XMLWriter r0;
        java.util.Set $r2;
        java.util.Map $r1;
        java.lang.Object $r4;
        java.lang.String r6, r7;
        boolean $z0;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 = r0.<org.dom4j.io.XMLWriter: java.util.Map namespacesMap>;

        if $r1 == null goto label3;

        $r1 = r0.<org.dom4j.io.XMLWriter: java.util.Map namespacesMap>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r4 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        r6 = (java.lang.String) $r4;

        $r4 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        r7 = (java.lang.String) $r4;

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writeNamespace(java.lang.String,java.lang.String)>(r6, r7);

        goto label1;

     label2:
        r0.<org.dom4j.io.XMLWriter: java.util.Map namespacesMap> = null;

     label3:
        return;
    }

    protected void writeNode(org.dom4j.Node) throws java.io.IOException
    {
        org.dom4j.Document r8;
        org.dom4j.Node r1;
        org.dom4j.io.XMLWriter r0;
        java.io.IOException $r11;
        org.dom4j.Entity r6;
        short $s0;
        org.dom4j.DocumentType r9;
        java.lang.StringBuffer $r2, $r10;
        int $i1;
        org.dom4j.Element r4;
        java.lang.String $r3;
        org.dom4j.Attribute r5;
        org.dom4j.ProcessingInstruction r7;

        r0 := @this: org.dom4j.io.XMLWriter;

        r1 := @parameter0: org.dom4j.Node;

        $s0 = interfaceinvoke r1.<org.dom4j.Node: short getNodeType()>();

        $i1 = (int) $s0;

        lookupswitch($i1)
        {
            case 1: goto label02;
            case 2: goto label04;
            case 3: goto label05;
            case 4: goto label06;
            case 5: goto label07;
            case 6: goto label01;
            case 7: goto label08;
            case 8: goto label09;
            case 9: goto label10;
            case 10: goto label11;
            case 11: goto label01;
            case 12: goto label01;
            case 13: goto label03;
            default: goto label01;
        };

     label01:
        $r11 = new java.io.IOException;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid node type: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>($r3);

        throw $r11;

     label02:
        r4 = (org.dom4j.Element) r1;

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writeElement(org.dom4j.Element)>(r4);

     label03:
        return;

     label04:
        r5 = (org.dom4j.Attribute) r1;

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writeAttribute(org.dom4j.Attribute)>(r5);

        return;

     label05:
        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writeNodeText(org.dom4j.Node)>(r1);

        return;

     label06:
        $r3 = interfaceinvoke r1.<org.dom4j.Node: java.lang.String getText()>();

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writeCDATA(java.lang.String)>($r3);

        return;

     label07:
        r6 = (org.dom4j.Entity) r1;

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writeEntity(org.dom4j.Entity)>(r6);

        return;

     label08:
        r7 = (org.dom4j.ProcessingInstruction) r1;

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writeProcessingInstruction(org.dom4j.ProcessingInstruction)>(r7);

        return;

     label09:
        $r3 = interfaceinvoke r1.<org.dom4j.Node: java.lang.String getText()>();

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writeComment(java.lang.String)>($r3);

        return;

     label10:
        r8 = (org.dom4j.Document) r1;

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void write(org.dom4j.Document)>(r8);

        return;

     label11:
        r9 = (org.dom4j.DocumentType) r1;

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writeDocType(org.dom4j.DocumentType)>(r9);

        return;
    }

    protected void writeNodeText(org.dom4j.Node) throws java.io.IOException
    {
        org.dom4j.Node $r1;
        org.dom4j.io.XMLWriter r0;
        char $c1;
        int $i0;
        java.io.Writer $r4;
        java.lang.String $r2, r3;
        boolean $z0;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: org.dom4j.Node;

        $r2 = interfaceinvoke $r1.<org.dom4j.Node: java.lang.String getText()>();

        r3 = $r2;

        if $r2 == null goto label2;

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 <= 0 goto label2;

        $z0 = r0.<org.dom4j.io.XMLWriter: boolean escapeText>;

        if $z0 == 0 goto label1;

        r3 = virtualinvoke r0.<org.dom4j.io.XMLWriter: java.lang.String escapeElementEntities(java.lang.String)>($r2);

     label1:
        r0.<org.dom4j.io.XMLWriter: int lastOutputNodeType> = 3;

        $r4 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r4.<java.io.Writer: void write(java.lang.String)>(r3);

        $i0 = virtualinvoke r3.<java.lang.String: int length()>();

        $i0 = $i0 + -1;

        $c1 = virtualinvoke r3.<java.lang.String: char charAt(int)>($i0);

        r0.<org.dom4j.io.XMLWriter: char lastChar> = $c1;

     label2:
        return;
    }

    public void writeOpen(org.dom4j.Element) throws java.io.IOException
    {
        org.dom4j.io.XMLWriter r0;
        java.io.Writer $r3;
        org.dom4j.Element $r1;
        java.lang.String $r2;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: org.dom4j.Element;

        $r3 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r3.<java.io.Writer: void write(java.lang.String)>("<");

        $r3 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        $r2 = interfaceinvoke $r1.<org.dom4j.Element: java.lang.String getQualifiedName()>();

        virtualinvoke $r3.<java.io.Writer: void write(java.lang.String)>($r2);

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writeAttributes(org.dom4j.Element)>($r1);

        $r3 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r3.<java.io.Writer: void write(java.lang.String)>(">");

        return;
    }

    protected void writePrintln() throws java.io.IOException
    {
        org.dom4j.io.XMLWriter r0;
        org.dom4j.io.OutputFormat $r1;
        char $c0, $c2;
        int $i1, $i3;
        java.io.Writer $r3;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 = r0.<org.dom4j.io.XMLWriter: org.dom4j.io.OutputFormat format>;

        $z0 = virtualinvoke $r1.<org.dom4j.io.OutputFormat: boolean isNewlines()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.dom4j.io.XMLWriter: org.dom4j.io.OutputFormat format>;

        $r2 = virtualinvoke $r1.<org.dom4j.io.OutputFormat: java.lang.String getLineSeparator()>();

        $c0 = r0.<org.dom4j.io.XMLWriter: char lastChar>;

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i1 = $i1 + -1;

        $c2 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i1);

        $i1 = (int) $c0;

        $i3 = (int) $c2;

        if $i1 == $i3 goto label1;

        $r3 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        $r1 = r0.<org.dom4j.io.XMLWriter: org.dom4j.io.OutputFormat format>;

        $r2 = virtualinvoke $r1.<org.dom4j.io.OutputFormat: java.lang.String getLineSeparator()>();

        virtualinvoke $r3.<java.io.Writer: void write(java.lang.String)>($r2);

     label1:
        return;
    }

    protected void writeProcessingInstruction(org.dom4j.ProcessingInstruction) throws java.io.IOException
    {
        org.dom4j.io.XMLWriter r0;
        java.io.Writer $r2;
        java.lang.String $r3;
        org.dom4j.ProcessingInstruction $r1;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r1 := @parameter0: org.dom4j.ProcessingInstruction;

        $r2 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>("<?");

        $r2 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        $r3 = interfaceinvoke $r1.<org.dom4j.ProcessingInstruction: java.lang.String getName()>();

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>($r3);

        $r2 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>(" ");

        $r2 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        $r3 = interfaceinvoke $r1.<org.dom4j.ProcessingInstruction: java.lang.String getText()>();

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>($r3);

        $r2 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>("?>");

        virtualinvoke r0.<org.dom4j.io.XMLWriter: void writePrintln()>();

        r0.<org.dom4j.io.XMLWriter: int lastOutputNodeType> = 7;

        return;
    }

    protected void writeString(java.lang.String) throws java.io.IOException
    {
        org.dom4j.io.XMLWriter r0;
        org.dom4j.io.OutputFormat $r3;
        char $c1;
        java.util.StringTokenizer r1, $r5;
        int $i0;
        java.io.Writer $r4;
        java.lang.String $r2;
        boolean $z0, $z1;

        r0 := @this: org.dom4j.io.XMLWriter;

        $r2 := @parameter0: java.lang.String;

        if $r2 == null goto label6;

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 <= 0 goto label6;

        $z0 = r0.<org.dom4j.io.XMLWriter: boolean escapeText>;

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<org.dom4j.io.XMLWriter: java.lang.String escapeElementEntities(java.lang.String)>($r2);

     label1:
        $r3 = r0.<org.dom4j.io.XMLWriter: org.dom4j.io.OutputFormat format>;

        $z0 = virtualinvoke $r3.<org.dom4j.io.OutputFormat: boolean isTrimText()>();

        if $z0 == 0 goto label5;

        $z0 = 1;

        $r5 = new java.util.StringTokenizer;

        r1 = $r5;

        specialinvoke $r5.<java.util.StringTokenizer: void <init>(java.lang.String)>($r2);

     label2:
        $z1 = virtualinvoke r1.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z1 == 0 goto label6;

        $r2 = virtualinvoke r1.<java.util.StringTokenizer: java.lang.String nextToken()>();

        if $z0 == 0 goto label4;

        $z0 = 0;

        $i0 = r0.<org.dom4j.io.XMLWriter: int lastOutputNodeType>;

        if $i0 != 3 goto label3;

        $r4 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r4.<java.io.Writer: void write(java.lang.String)>(" ");

     label3:
        $r4 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r4.<java.io.Writer: void write(java.lang.String)>($r2);

        r0.<org.dom4j.io.XMLWriter: int lastOutputNodeType> = 3;

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i0 = $i0 + -1;

        $c1 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i0);

        r0.<org.dom4j.io.XMLWriter: char lastChar> = $c1;

        goto label2;

     label4:
        $r4 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r4.<java.io.Writer: void write(java.lang.String)>(" ");

        goto label3;

     label5:
        r0.<org.dom4j.io.XMLWriter: int lastOutputNodeType> = 3;

        $r4 = r0.<org.dom4j.io.XMLWriter: java.io.Writer writer>;

        virtualinvoke $r4.<java.io.Writer: void write(java.lang.String)>($r2);

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i0 = $i0 + -1;

        $c1 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i0);

        r0.<org.dom4j.io.XMLWriter: char lastChar> = $c1;

     label6:
        return;
    }
}
