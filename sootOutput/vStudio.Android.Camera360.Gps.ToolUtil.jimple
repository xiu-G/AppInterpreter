public class vStudio.Android.Camera360.Gps.ToolUtil extends java.lang.Object
{

    public void <init>()
    {
        vStudio.Android.Camera360.Gps.ToolUtil r0;

        r0 := @this: vStudio.Android.Camera360.Gps.ToolUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static android.graphics.Bitmap getBitmap(java.lang.String, int, int)
    {
        android.graphics.Bitmap$Config $r2;
        android.graphics.Bitmap $r3;
        int $i0, $i1, i2, i3;
        float f0;
        java.lang.String $r0;
        android.graphics.BitmapFactory$Options r1;
        double $d0, $d1;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        r1 = new android.graphics.BitmapFactory$Options;

        specialinvoke r1.<android.graphics.BitmapFactory$Options: void <init>()>();

        r1.<android.graphics.BitmapFactory$Options: boolean inJustDecodeBounds> = 1;

        staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>($r0, r1);

        i3 = r1.<android.graphics.BitmapFactory$Options: int outWidth>;

        i2 = r1.<android.graphics.BitmapFactory$Options: int outHeight>;

        i2 = i3 * i2;

        $i0 = $i0 * $i1;

        $d0 = (double) i2;

        $d0 = $d0 * 1.0;

        $d1 = (double) $i0;

        $d0 = $d0 / $d1;

        $d0 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        f0 = (float) $d0;

        $d0 = (double) f0;

        $d0 = $d0 + 0.8;

        $i0 = (int) $d0;

        r1.<android.graphics.BitmapFactory$Options: int inSampleSize> = $i0;

        r1.<android.graphics.BitmapFactory$Options: boolean inJustDecodeBounds> = 0;

        r1.<android.graphics.BitmapFactory$Options: boolean inDither> = 0;

        $r2 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        r1.<android.graphics.BitmapFactory$Options: android.graphics.Bitmap$Config inPreferredConfig> = $r2;

        $r3 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>($r0, r1);

        return $r3;
    }

    public static android.graphics.Bitmap getBitmap(byte[], int, int)
    {
        byte[] $r0;
        android.graphics.Bitmap$Config $r2;
        android.graphics.Bitmap $r3;
        int $i0, $i1, i2, i3;
        float f0;
        android.graphics.BitmapFactory$Options r1;
        double $d0, $d1;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        r1 = new android.graphics.BitmapFactory$Options;

        specialinvoke r1.<android.graphics.BitmapFactory$Options: void <init>()>();

        r1.<android.graphics.BitmapFactory$Options: boolean inJustDecodeBounds> = 1;

        i2 = lengthof $r0;

        staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeByteArray(byte[],int,int,android.graphics.BitmapFactory$Options)>($r0, 0, i2, r1);

        i3 = r1.<android.graphics.BitmapFactory$Options: int outWidth>;

        i2 = r1.<android.graphics.BitmapFactory$Options: int outHeight>;

        i2 = i3 * i2;

        $i0 = $i0 * $i1;

        $d0 = (double) i2;

        $d0 = $d0 * 1.0;

        $d1 = (double) $i0;

        $d0 = $d0 / $d1;

        $d0 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        f0 = (float) $d0;

        $d0 = (double) f0;

        $d0 = $d0 + 0.8;

        $i0 = (int) $d0;

        r1.<android.graphics.BitmapFactory$Options: int inSampleSize> = $i0;

        r1.<android.graphics.BitmapFactory$Options: boolean inJustDecodeBounds> = 0;

        r1.<android.graphics.BitmapFactory$Options: boolean inDither> = 0;

        $r2 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        r1.<android.graphics.BitmapFactory$Options: android.graphics.Bitmap$Config inPreferredConfig> = $r2;

        $i0 = lengthof $r0;

        $r3 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeByteArray(byte[],int,int,android.graphics.BitmapFactory$Options)>($r0, 0, $i0, r1);

        return $r3;
    }

    public static void getResult(org.xml.sax.helpers.DefaultHandler, java.lang.String)
    {
        org.xml.sax.InputSource $r6;
        javax.xml.parsers.SAXParserFactory $r3;
        java.lang.Exception $r7;
        org.xml.sax.helpers.DefaultHandler $r0;
        org.xml.sax.XMLReader $r5;
        java.io.StringReader $r2;
        javax.xml.parsers.SAXParser $r4;
        java.lang.String $r1;

        $r0 := @parameter0: org.xml.sax.helpers.DefaultHandler;

        $r1 := @parameter1: java.lang.String;

     label1:
        $r3 = staticinvoke <javax.xml.parsers.SAXParserFactory: javax.xml.parsers.SAXParserFactory newInstance()>();

        $r4 = virtualinvoke $r3.<javax.xml.parsers.SAXParserFactory: javax.xml.parsers.SAXParser newSAXParser()>();

        $r5 = virtualinvoke $r4.<javax.xml.parsers.SAXParser: org.xml.sax.XMLReader getXMLReader()>();

        interfaceinvoke $r5.<org.xml.sax.XMLReader: void setContentHandler(org.xml.sax.ContentHandler)>($r0);

     label2:
        $r6 = new org.xml.sax.InputSource;

        $r2 = new java.io.StringReader;

     label3:
        specialinvoke $r2.<java.io.StringReader: void <init>(java.lang.String)>($r1);

        specialinvoke $r6.<org.xml.sax.InputSource: void <init>(java.io.Reader)>($r2);

        interfaceinvoke $r5.<org.xml.sax.XMLReader: void parse(org.xml.sax.InputSource)>($r6);

     label4:
        return;

     label5:
        $r7 := @caughtexception;

        virtualinvoke $r7.<java.lang.Exception: void printStackTrace()>();

        return;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }

    public static boolean hasNet(android.content.Context)
    {
        android.net.ConnectivityManager r2;
        android.content.Context $r0;
        android.net.NetworkInfo $r3;
        java.lang.Object $r1;
        boolean $z0;

        $r0 := @parameter0: android.content.Context;

        $r1 = virtualinvoke $r0.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("connectivity");

        r2 = (android.net.ConnectivityManager) $r1;

        $r3 = virtualinvoke r2.<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>();

        if $r3 == null goto label1;

        $z0 = virtualinvoke $r3.<android.net.NetworkInfo: boolean isAvailable()>();

        return $z0;

     label1:
        return 0;
    }
}
