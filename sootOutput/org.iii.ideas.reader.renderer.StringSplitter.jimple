public class org.iii.ideas.reader.renderer.StringSplitter extends java.lang.Object
{
    java.util.ArrayList a;
    java.util.HashMap b;

    public void <init>()
    {
        org.iii.ideas.reader.renderer.StringSplitter r0;
        java.util.HashMap $r2;
        java.util.ArrayList $r1;

        r0 := @this: org.iii.ideas.reader.renderer.StringSplitter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.iii.ideas.reader.renderer.StringSplitter: java.util.ArrayList a> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.iii.ideas.reader.renderer.StringSplitter: java.util.HashMap b> = $r2;

        return;
    }

    private void addWord(java.lang.String, int)
    {
        org.iii.ideas.reader.renderer.StringSplitter r0;
        java.util.HashMap $r3;
        java.lang.Integer $r4, $r5;
        java.util.ArrayList $r2;
        int $i0, $i1;
        java.lang.String $r1;

        r0 := @this: org.iii.ideas.reader.renderer.StringSplitter;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 = r0.<org.iii.ideas.reader.renderer.StringSplitter: java.util.ArrayList a>;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r1);

        $r3 = r0.<org.iii.ideas.reader.renderer.StringSplitter: java.util.HashMap b>;

        $r2 = r0.<org.iii.ideas.reader.renderer.StringSplitter: java.util.ArrayList a>;

        $i1 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        $i1 = $i1 - 1;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r5);

        return;
    }

    public int getCharIdxFromWordIdx(int)
    {
        org.iii.ideas.reader.renderer.StringSplitter r0;
        int $i0;
        java.util.HashMap $r1;
        java.lang.Object $r3;
        java.lang.Integer $r2;

        r0 := @this: org.iii.ideas.reader.renderer.StringSplitter;

        $i0 := @parameter0: int;

        $r1 = r0.<org.iii.ideas.reader.renderer.StringSplitter: java.util.HashMap b>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r2);

        $r2 = (java.lang.Integer) $r3;

        $i0 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();

        return $i0;
    }

    public java.util.HashMap getMap()
    {
        org.iii.ideas.reader.renderer.StringSplitter r0;
        java.util.HashMap r1;

        r0 := @this: org.iii.ideas.reader.renderer.StringSplitter;

        r1 = r0.<org.iii.ideas.reader.renderer.StringSplitter: java.util.HashMap b>;

        return r1;
    }

    public java.util.ArrayList getWordsList()
    {
        org.iii.ideas.reader.renderer.StringSplitter r0;
        java.util.ArrayList r1;

        r0 := @this: org.iii.ideas.reader.renderer.StringSplitter;

        r1 = r0.<org.iii.ideas.reader.renderer.StringSplitter: java.util.ArrayList a>;

        return r1;
    }

    public void split(java.lang.String)
    {
        org.iii.ideas.reader.renderer.StringSplitter r0;
        char $c2;
        java.util.HashMap $r4;
        java.lang.Integer $r5, $r6;
        java.util.ArrayList $r3;
        int $i0, $i1, $i3;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: org.iii.ideas.reader.renderer.StringSplitter;

        $r1 := @parameter0: java.lang.String;

        $i0 = 0;

     label1:
        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 >= $i1 goto label2;

        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i0);

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c2);

        if $z0 == 0 goto label2;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 >= $i1 goto label5;

        $i1 = $i0;

     label3:
        $i3 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i1 >= $i3 goto label4;

        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i1);

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c2);

        if $z0 != 0 goto label4;

        $i1 = $i1 + 1;

        goto label3;

     label4:
        if $i1 <= $i0 goto label6;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>($i0, $i1);

        $r3 = r0.<org.iii.ideas.reader.renderer.StringSplitter: java.util.ArrayList a>;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        $r4 = r0.<org.iii.ideas.reader.renderer.StringSplitter: java.util.HashMap b>;

        $r3 = r0.<org.iii.ideas.reader.renderer.StringSplitter: java.util.ArrayList a>;

        $i3 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        $i3 = $i3 - 1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r6);

        $i0 = $i1;

        goto label1;

     label5:
        return;

     label6:
        $i0 = $i1;

        goto label1;
    }
}
