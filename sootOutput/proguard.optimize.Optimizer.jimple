public class proguard.optimize.Optimizer extends java.lang.Object
{
    private static final java.lang.String CLASS_MARKING_FINAL;
    private static final java.lang.String CLASS_MERGING_HORIZONTAL;
    private static final java.lang.String CLASS_MERGING_VERTICAL;
    private static final java.lang.String CODE_ALLOCATION_VARIABLE;
    private static final java.lang.String CODE_MERGING;
    private static final java.lang.String CODE_REMOVAL_ADVANCED;
    private static final java.lang.String CODE_REMOVAL_EXCEPTION;
    private static final java.lang.String CODE_REMOVAL_SIMPLE;
    private static final java.lang.String CODE_REMOVAL_VARIABLE;
    private static final java.lang.String CODE_SIMPLIFICATION_ADVANCED;
    private static final java.lang.String CODE_SIMPLIFICATION_ARITHMETIC;
    private static final java.lang.String CODE_SIMPLIFICATION_BRANCH;
    private static final java.lang.String CODE_SIMPLIFICATION_CAST;
    private static final java.lang.String CODE_SIMPLIFICATION_FIELD;
    private static final java.lang.String CODE_SIMPLIFICATION_VARIABLE;
    private static final java.lang.String FIELD_MARKING_PRIVATE;
    private static final java.lang.String FIELD_PROPAGATION_VALUE;
    private static final java.lang.String FIELD_REMOVAL_WRITEONLY;
    private static final java.lang.String METHOD_INLINING_SHORT;
    private static final java.lang.String METHOD_INLINING_TAILRECURSION;
    private static final java.lang.String METHOD_INLINING_UNIQUE;
    private static final java.lang.String METHOD_MARKING_FINAL;
    private static final java.lang.String METHOD_MARKING_PRIVATE;
    private static final java.lang.String METHOD_MARKING_STATIC;
    private static final java.lang.String METHOD_PROPAGATION_PARAMETER;
    private static final java.lang.String METHOD_PROPAGATION_RETURNVALUE;
    private static final java.lang.String METHOD_REMOVAL_PARAMETER;
    public static final java.lang.String[] OPTIMIZATION_NAMES;
    private final proguard.Configuration configuration;

    static void <clinit>()
    {
        java.lang.String[] $r0;

        <proguard.optimize.Optimizer: java.lang.String METHOD_REMOVAL_PARAMETER> = "method/removal/parameter";

        <proguard.optimize.Optimizer: java.lang.String METHOD_PROPAGATION_RETURNVALUE> = "method/propagation/returnvalue";

        <proguard.optimize.Optimizer: java.lang.String METHOD_PROPAGATION_PARAMETER> = "method/propagation/parameter";

        <proguard.optimize.Optimizer: java.lang.String METHOD_MARKING_STATIC> = "method/marking/static";

        <proguard.optimize.Optimizer: java.lang.String METHOD_MARKING_PRIVATE> = "method/marking/private";

        <proguard.optimize.Optimizer: java.lang.String METHOD_MARKING_FINAL> = "method/marking/final";

        <proguard.optimize.Optimizer: java.lang.String METHOD_INLINING_UNIQUE> = "method/inlining/unique";

        <proguard.optimize.Optimizer: java.lang.String METHOD_INLINING_TAILRECURSION> = "method/inlining/tailrecursion";

        <proguard.optimize.Optimizer: java.lang.String METHOD_INLINING_SHORT> = "method/inlining/short";

        <proguard.optimize.Optimizer: java.lang.String FIELD_REMOVAL_WRITEONLY> = "field/removal/writeonly";

        <proguard.optimize.Optimizer: java.lang.String FIELD_PROPAGATION_VALUE> = "field/propagation/value";

        <proguard.optimize.Optimizer: java.lang.String FIELD_MARKING_PRIVATE> = "field/marking/private";

        <proguard.optimize.Optimizer: java.lang.String CODE_SIMPLIFICATION_VARIABLE> = "code/simplification/variable";

        <proguard.optimize.Optimizer: java.lang.String CODE_SIMPLIFICATION_FIELD> = "code/simplification/field";

        <proguard.optimize.Optimizer: java.lang.String CODE_SIMPLIFICATION_CAST> = "code/simplification/cast";

        <proguard.optimize.Optimizer: java.lang.String CODE_SIMPLIFICATION_BRANCH> = "code/simplification/branch";

        <proguard.optimize.Optimizer: java.lang.String CODE_SIMPLIFICATION_ARITHMETIC> = "code/simplification/arithmetic";

        <proguard.optimize.Optimizer: java.lang.String CODE_SIMPLIFICATION_ADVANCED> = "code/simplification/advanced";

        <proguard.optimize.Optimizer: java.lang.String CODE_REMOVAL_VARIABLE> = "code/removal/variable";

        <proguard.optimize.Optimizer: java.lang.String CODE_REMOVAL_SIMPLE> = "code/removal/simple";

        <proguard.optimize.Optimizer: java.lang.String CODE_REMOVAL_EXCEPTION> = "code/removal/exception";

        <proguard.optimize.Optimizer: java.lang.String CODE_REMOVAL_ADVANCED> = "code/removal/advanced";

        <proguard.optimize.Optimizer: java.lang.String CODE_MERGING> = "code/merging";

        <proguard.optimize.Optimizer: java.lang.String CODE_ALLOCATION_VARIABLE> = "code/allocation/variable";

        <proguard.optimize.Optimizer: java.lang.String CLASS_MERGING_VERTICAL> = "class/merging/vertical";

        <proguard.optimize.Optimizer: java.lang.String CLASS_MERGING_HORIZONTAL> = "class/merging/horizontal";

        <proguard.optimize.Optimizer: java.lang.String CLASS_MARKING_FINAL> = "class/marking/final";

        $r0 = newarray (java.lang.String)[27];

        $r0[0] = "class/marking/final";

        $r0[1] = "class/merging/vertical";

        $r0[2] = "class/merging/horizontal";

        $r0[3] = "field/removal/writeonly";

        $r0[4] = "field/marking/private";

        $r0[5] = "field/propagation/value";

        $r0[6] = "method/marking/private";

        $r0[7] = "method/marking/static";

        $r0[8] = "method/marking/final";

        $r0[9] = "method/removal/parameter";

        $r0[10] = "method/propagation/parameter";

        $r0[11] = "method/propagation/returnvalue";

        $r0[12] = "method/inlining/short";

        $r0[13] = "method/inlining/unique";

        $r0[14] = "method/inlining/tailrecursion";

        $r0[15] = "code/merging";

        $r0[16] = "code/simplification/variable";

        $r0[17] = "code/simplification/arithmetic";

        $r0[18] = "code/simplification/cast";

        $r0[19] = "code/simplification/field";

        $r0[20] = "code/simplification/branch";

        $r0[21] = "code/simplification/advanced";

        $r0[22] = "code/removal/advanced";

        $r0[23] = "code/removal/simple";

        $r0[24] = "code/removal/variable";

        $r0[25] = "code/removal/exception";

        $r0[26] = "code/allocation/variable";

        <proguard.optimize.Optimizer: java.lang.String[] OPTIMIZATION_NAMES> = $r0;

        return;
    }

    public void <init>(proguard.Configuration)
    {
        proguard.Configuration $r1;
        proguard.optimize.Optimizer r0;

        r0 := @this: proguard.optimize.Optimizer;

        $r1 := @parameter0: proguard.Configuration;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<proguard.optimize.Optimizer: proguard.Configuration configuration> = $r1;

        return;
    }

    private java.lang.String disabled(boolean)
    {
        proguard.optimize.Optimizer r0;
        boolean $z0;

        r0 := @this: proguard.optimize.Optimizer;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label1;

        return "";

     label1:
        return "   (disabled)";
    }

    private java.lang.String disabled(boolean, boolean)
    {
        proguard.optimize.Optimizer r0;
        boolean $z0, $z1;

        r0 := @this: proguard.optimize.Optimizer;

        $z0 := @parameter0: boolean;

        $z1 := @parameter1: boolean;

        if $z0 == 0 goto label1;

        if $z1 == 0 goto label1;

        return "";

     label1:
        if $z0 != 0 goto label2;

        if $z1 == 0 goto label3;

     label2:
        return "   (partially disabled)";

     label3:
        return "   (disabled)";
    }

    public boolean execute(proguard.classfile.ClassPool, proguard.classfile.ClassPool) throws java.io.IOException
    {
        proguard.classfile.visitor.ExceptionCounter $r5, $r62;
        proguard.optimize.info.DotClassMarker $r105;
        proguard.optimize.peephole.UnreachableCodeRemover $r142;
        proguard.classfile.attribute.visitor.AllAttributeVisitor $r38, $r71;
        proguard.classfile.visitor.ClassForNameClassVisitor $r73;
        proguard.optimize.peephole.VerticalClassMerger $r117;
        proguard.classfile.ClassPool $r1, $r2;
        proguard.classfile.visitor.ClassCounter $r12, $r13, $r14, $r60;
        proguard.optimize.info.InstantiationClassMarker $r103;
        proguard.classfile.instruction.visitor.AllInstructionVisitor $r70;
        proguard.classfile.constant.visitor.AllConstantVisitor $r74;
        proguard.classfile.visitor.ClassVisitor[] $r43;
        proguard.optimize.info.AccessMethodMarker $r109;
        proguard.optimize.info.ReadWriteFieldMarker $r80;
        proguard.classfile.visitor.ClassPoolVisitor $r36;
        proguard.classfile.visitor.MultiClassVisitor $r91;
        proguard.Configuration $r8;
        proguard.optimize.peephole.ClassFinalizer $r78;
        proguard.optimize.TailRecursionSimplifier $r128;
        proguard.optimize.evaluation.EvaluationShrinker $r45, $r94;
        proguard.util.ListParser $r59;
        proguard.optimize.info.CaughtClassMarker $r111;
        java.lang.StringBuffer $r55, $r145;
        proguard.classfile.visitor.MemberVisitor[] $r46;
        proguard.optimize.peephole.InstructionSequencesReplacer $r137;
        proguard.classfile.editor.CodeAttributeEditor $r50, $r135;
        java.io.IOException $r57;
        proguard.optimize.evaluation.LoadingInvocationUnit $r44, $r92;
        proguard.optimize.peephole.TargetClassChanger $r120;
        proguard.optimize.info.ClassOptimizationInfoSetter $r75;
        proguard.optimize.DuplicateInitializerFixer $r125;
        proguard.optimize.Optimizer r0;
        proguard.classfile.editor.AccessFixer $r122;
        proguard.classfile.visitor.BottomClassFilter $r66;
        proguard.optimize.MethodStaticizer $r96;
        proguard.optimize.WriteOnlyFieldFilter $r81;
        proguard.optimize.DuplicateInitializerInvocationFixer $r126;
        proguard.classfile.editor.StackSizeUpdater $r147;
        proguard.optimize.ParameterShrinker $r99;
        proguard.classfile.attribute.visitor.MultiAttributeVisitor $r115;
        proguard.classfile.editor.ClassReferenceFixer $r121;
        proguard.optimize.KeepMarker $r35, $r67;
        proguard.optimize.info.InstanceofClassMarker $r104;
        proguard.classfile.instruction.visitor.MultiInstructionVisitor $r110;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25;
        proguard.classfile.visitor.AllFieldVisitor $r82;
        proguard.evaluation.value.IdentifiedValueFactory $r41, $r86;
        java.io.PrintStream $r54;
        proguard.optimize.peephole.UnreachableExceptionRemover $r141;
        proguard.classfile.constant.Constant[] $r52;
        proguard.classfile.visitor.MemberAccessFilter $r97;
        proguard.classfile.editor.MethodInvocationFixer $r132;
        proguard.classfile.visitor.AllMemberVisitor $r68;
        proguard.optimize.peephole.MethodInliner $r127;
        proguard.classfile.attribute.visitor.AllInnerClassesInfoVisitor $r124;
        proguard.optimize.peephole.RetargetedInnerClassAttributeRemover $r119;
        proguard.optimize.peephole.GotoReturnReplacer $r139;
        proguard.classfile.attribute.visitor.AttributeVisitor[] $r47;
        proguard.optimize.OptimizationInfoMemberFilter $r39, $r84;
        proguard.util.ConstantMatcher $r146;
        proguard.optimize.peephole.MemberPrivatizer $r130;
        proguard.classfile.util.MethodLinker $r65;
        proguard.optimize.evaluation.StoringInvocationUnit $r87;
        proguard.optimize.peephole.GotoCommonCodeReplacer $r133;
        proguard.util.StringMatcher $r11;
        proguard.classfile.visitor.ClassCleaner $r64;
        proguard.optimize.info.MethodInvocationMarker $r106;
        proguard.classfile.visitor.DotClassClassVisitor $r69;
        proguard.classfile.attribute.visitor.AllExceptionInfoVisitor $r114;
        proguard.optimize.peephole.BranchTargetFinder $r49, $r134;
        java.util.ArrayList $r51, $r136;
        proguard.optimize.evaluation.PartialEvaluator $r42, $r88;
        proguard.optimize.peephole.PeepholeOptimizer $r140;
        proguard.optimize.info.PackageVisibleMemberInvokingClassMarker $r100;
        proguard.classfile.instruction.visitor.InstructionCounter $r3, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r61;
        java.lang.String $r56;
        proguard.optimize.info.MemberOptimizationInfoSetter $r76;
        proguard.optimize.info.BackwardBranchMarker $r108;
        proguard.optimize.info.CatchExceptionMarker $r102;
        proguard.optimize.peephole.VariableShrinker $r143;
        proguard.optimize.info.PackageVisibleMemberContainingClassMarker $r101;
        proguard.classfile.visitor.ReferencedClassVisitor $r112;
        java.io.File $r10;
        proguard.classfile.visitor.ClassAccessFilter $r131;
        proguard.classfile.editor.MemberReferenceFixer $r98;
        proguard.optimize.evaluation.EvaluationSimplifier $r93;
        proguard.optimize.evaluation.VariableOptimizer $r144;
        proguard.classfile.visitor.AllMethodVisitor $r37, $r72;
        proguard.optimize.peephole.HorizontalClassMerger $r118;
        proguard.optimize.ConstantParameterFilter $r90;
        proguard.optimize.info.SuperInvocationMarker $r107;
        proguard.optimize.peephole.MethodFinalizer $r79;
        proguard.classfile.editor.InnerClassesAccessFixer $r123;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28;
        proguard.classfile.visitor.MemberCounter $r4, $r6, $r7, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r63;
        java.util.List $r9;
        proguard.util.NameParser $r58;
        proguard.classfile.instruction.Instruction[][][] $r53;
        proguard.optimize.info.NoSideEffectMethodMarker $r77;
        proguard.classfile.visitor.ExceptionHandlerConstantVisitor $r113;
        proguard.optimize.info.NonPrivateMemberMarker $r129;
        proguard.optimize.peephole.GotoGotoReplacer $r138;
        proguard.classfile.visitor.MultiMemberVisitor $r116;
        proguard.optimize.info.ParameterUsageMarker $r40, $r83;
        proguard.optimize.info.SideEffectMethodMarker $r85;
        proguard.optimize.MethodDescriptorShrinker $r95;
        proguard.classfile.instruction.visitor.InstructionVisitor[] $r48;
        proguard.optimize.ConstantMemberFilter $r89;

        r0 := @this: proguard.optimize.Optimizer;

        $r1 := @parameter0: proguard.classfile.ClassPool;

        $r2 := @parameter1: proguard.classfile.ClassPool;

        $r8 = r0.<proguard.optimize.Optimizer: proguard.Configuration configuration>;

        $r9 = $r8.<proguard.Configuration: java.util.List keep>;

        if $r9 != null goto label01;

        $r8 = r0.<proguard.optimize.Optimizer: proguard.Configuration configuration>;

        $r10 = $r8.<proguard.Configuration: java.io.File applyMapping>;

        if $r10 != null goto label01;

        $r8 = r0.<proguard.optimize.Optimizer: proguard.Configuration configuration>;

        $r10 = $r8.<proguard.Configuration: java.io.File printMapping>;

        if $r10 != null goto label01;

        $r57 = new java.io.IOException;

        specialinvoke $r57.<java.io.IOException: void <init>(java.lang.String)>("You have to specify \'-keep\' options for the optimization step.");

        throw $r57;

     label01:
        $r8 = r0.<proguard.optimize.Optimizer: proguard.Configuration configuration>;

        $r9 = $r8.<proguard.Configuration: java.util.List optimizations>;

        if $r9 == null goto label58;

        $r59 = new proguard.util.ListParser;

        $r58 = new proguard.util.NameParser;

        specialinvoke $r58.<proguard.util.NameParser: void <init>()>();

        specialinvoke $r59.<proguard.util.ListParser: void <init>(proguard.util.StringParser)>($r58);

        $r8 = r0.<proguard.optimize.Optimizer: proguard.Configuration configuration>;

        $r9 = $r8.<proguard.Configuration: java.util.List optimizations>;

        $r11 = virtualinvoke $r59.<proguard.util.ListParser: proguard.util.StringMatcher parse(java.util.List)>($r9);

     label02:
        $z0 = interfaceinvoke $r11.<proguard.util.StringMatcher: boolean matches(java.lang.String)>("class/marking/final");

        $z1 = interfaceinvoke $r11.<proguard.util.StringMatcher: boolean matches(java.lang.String)>("class/merging/vertical");

        $z2 = interfaceinvoke $r11.<proguard.util.StringMatcher: boolean matches(java.lang.String)>("class/merging/horizontal");

        $z3 = interfaceinvoke $r11.<proguard.util.StringMatcher: boolean matches(java.lang.String)>("field/removal/writeonly");

        $z4 = interfaceinvoke $r11.<proguard.util.StringMatcher: boolean matches(java.lang.String)>("field/marking/private");

        $z5 = interfaceinvoke $r11.<proguard.util.StringMatcher: boolean matches(java.lang.String)>("field/propagation/value");

        $z6 = interfaceinvoke $r11.<proguard.util.StringMatcher: boolean matches(java.lang.String)>("method/marking/private");

        $z7 = interfaceinvoke $r11.<proguard.util.StringMatcher: boolean matches(java.lang.String)>("method/marking/static");

        $z8 = interfaceinvoke $r11.<proguard.util.StringMatcher: boolean matches(java.lang.String)>("method/marking/final");

        $z9 = interfaceinvoke $r11.<proguard.util.StringMatcher: boolean matches(java.lang.String)>("method/removal/parameter");

        $z10 = interfaceinvoke $r11.<proguard.util.StringMatcher: boolean matches(java.lang.String)>("method/propagation/parameter");

        $z11 = interfaceinvoke $r11.<proguard.util.StringMatcher: boolean matches(java.lang.String)>("method/propagation/returnvalue");

        $z12 = interfaceinvoke $r11.<proguard.util.StringMatcher: boolean matches(java.lang.String)>("method/inlining/short");

        $z13 = interfaceinvoke $r11.<proguard.util.StringMatcher: boolean matches(java.lang.String)>("method/inlining/unique");

        $z14 = interfaceinvoke $r11.<proguard.util.StringMatcher: boolean matches(java.lang.String)>("method/inlining/tailrecursion");

        $z15 = interfaceinvoke $r11.<proguard.util.StringMatcher: boolean matches(java.lang.String)>("code/merging");

        $z16 = interfaceinvoke $r11.<proguard.util.StringMatcher: boolean matches(java.lang.String)>("code/simplification/variable");

        $z17 = interfaceinvoke $r11.<proguard.util.StringMatcher: boolean matches(java.lang.String)>("code/simplification/arithmetic");

        $z18 = interfaceinvoke $r11.<proguard.util.StringMatcher: boolean matches(java.lang.String)>("code/simplification/cast");

        $z19 = interfaceinvoke $r11.<proguard.util.StringMatcher: boolean matches(java.lang.String)>("code/simplification/field");

        $z20 = interfaceinvoke $r11.<proguard.util.StringMatcher: boolean matches(java.lang.String)>("code/simplification/branch");

        $z21 = interfaceinvoke $r11.<proguard.util.StringMatcher: boolean matches(java.lang.String)>("code/simplification/advanced");

        $z22 = interfaceinvoke $r11.<proguard.util.StringMatcher: boolean matches(java.lang.String)>("code/removal/advanced");

        $z23 = interfaceinvoke $r11.<proguard.util.StringMatcher: boolean matches(java.lang.String)>("code/removal/simple");

        $z24 = interfaceinvoke $r11.<proguard.util.StringMatcher: boolean matches(java.lang.String)>("code/removal/variable");

        $z25 = interfaceinvoke $r11.<proguard.util.StringMatcher: boolean matches(java.lang.String)>("code/removal/exception");

        $z26 = interfaceinvoke $r11.<proguard.util.StringMatcher: boolean matches(java.lang.String)>("code/allocation/variable");

        $r13 = new proguard.classfile.visitor.ClassCounter;

        $r12 = $r13;

        specialinvoke $r13.<proguard.classfile.visitor.ClassCounter: void <init>()>();

        $r14 = new proguard.classfile.visitor.ClassCounter;

        $r13 = $r14;

        specialinvoke $r14.<proguard.classfile.visitor.ClassCounter: void <init>()>();

        $r60 = new proguard.classfile.visitor.ClassCounter;

        $r14 = $r60;

        specialinvoke $r60.<proguard.classfile.visitor.ClassCounter: void <init>()>();

        $r16 = new proguard.classfile.visitor.MemberCounter;

        $r15 = $r16;

        specialinvoke $r16.<proguard.classfile.visitor.MemberCounter: void <init>()>();

        $r17 = new proguard.classfile.visitor.MemberCounter;

        $r16 = $r17;

        specialinvoke $r17.<proguard.classfile.visitor.MemberCounter: void <init>()>();

        $r18 = new proguard.classfile.visitor.MemberCounter;

        $r17 = $r18;

        specialinvoke $r18.<proguard.classfile.visitor.MemberCounter: void <init>()>();

        $r19 = new proguard.classfile.visitor.MemberCounter;

        $r18 = $r19;

        specialinvoke $r19.<proguard.classfile.visitor.MemberCounter: void <init>()>();

        $r20 = new proguard.classfile.visitor.MemberCounter;

        $r19 = $r20;

        specialinvoke $r20.<proguard.classfile.visitor.MemberCounter: void <init>()>();

        $r21 = new proguard.classfile.visitor.MemberCounter;

        $r20 = $r21;

        specialinvoke $r21.<proguard.classfile.visitor.MemberCounter: void <init>()>();

        $r22 = new proguard.classfile.visitor.MemberCounter;

        $r21 = $r22;

        specialinvoke $r22.<proguard.classfile.visitor.MemberCounter: void <init>()>();

        $r23 = new proguard.classfile.visitor.MemberCounter;

        $r22 = $r23;

        specialinvoke $r23.<proguard.classfile.visitor.MemberCounter: void <init>()>();

        $r4 = new proguard.classfile.visitor.MemberCounter;

        $r23 = $r4;

        specialinvoke $r4.<proguard.classfile.visitor.MemberCounter: void <init>()>();

        $r25 = new proguard.classfile.instruction.visitor.InstructionCounter;

        $r24 = $r25;

        specialinvoke $r25.<proguard.classfile.instruction.visitor.InstructionCounter: void <init>()>();

        $r26 = new proguard.classfile.instruction.visitor.InstructionCounter;

        $r25 = $r26;

        specialinvoke $r26.<proguard.classfile.instruction.visitor.InstructionCounter: void <init>()>();

        $r27 = new proguard.classfile.instruction.visitor.InstructionCounter;

        $r26 = $r27;

        specialinvoke $r27.<proguard.classfile.instruction.visitor.InstructionCounter: void <init>()>();

        $r28 = new proguard.classfile.instruction.visitor.InstructionCounter;

        $r27 = $r28;

        specialinvoke $r28.<proguard.classfile.instruction.visitor.InstructionCounter: void <init>()>();

        $r29 = new proguard.classfile.instruction.visitor.InstructionCounter;

        $r28 = $r29;

        specialinvoke $r29.<proguard.classfile.instruction.visitor.InstructionCounter: void <init>()>();

        $r30 = new proguard.classfile.instruction.visitor.InstructionCounter;

        $r29 = $r30;

        specialinvoke $r30.<proguard.classfile.instruction.visitor.InstructionCounter: void <init>()>();

        $r31 = new proguard.classfile.instruction.visitor.InstructionCounter;

        $r30 = $r31;

        specialinvoke $r31.<proguard.classfile.instruction.visitor.InstructionCounter: void <init>()>();

        $r32 = new proguard.classfile.instruction.visitor.InstructionCounter;

        $r31 = $r32;

        specialinvoke $r32.<proguard.classfile.instruction.visitor.InstructionCounter: void <init>()>();

        $r33 = new proguard.classfile.instruction.visitor.InstructionCounter;

        $r32 = $r33;

        specialinvoke $r33.<proguard.classfile.instruction.visitor.InstructionCounter: void <init>()>();

        $r34 = new proguard.classfile.instruction.visitor.InstructionCounter;

        $r33 = $r34;

        specialinvoke $r34.<proguard.classfile.instruction.visitor.InstructionCounter: void <init>()>();

        $r3 = new proguard.classfile.instruction.visitor.InstructionCounter;

        $r34 = $r3;

        specialinvoke $r3.<proguard.classfile.instruction.visitor.InstructionCounter: void <init>()>();

        $r61 = new proguard.classfile.instruction.visitor.InstructionCounter;

        $r3 = $r61;

        specialinvoke $r61.<proguard.classfile.instruction.visitor.InstructionCounter: void <init>()>();

        $r6 = new proguard.classfile.visitor.MemberCounter;

        $r4 = $r6;

        specialinvoke $r6.<proguard.classfile.visitor.MemberCounter: void <init>()>();

        $r62 = new proguard.classfile.visitor.ExceptionCounter;

        $r5 = $r62;

        specialinvoke $r62.<proguard.classfile.visitor.ExceptionCounter: void <init>()>();

        $r7 = new proguard.classfile.visitor.MemberCounter;

        $r6 = $r7;

        specialinvoke $r7.<proguard.classfile.visitor.MemberCounter: void <init>()>();

        $r63 = new proguard.classfile.visitor.MemberCounter;

        $r7 = $r63;

        specialinvoke $r63.<proguard.classfile.visitor.MemberCounter: void <init>()>();

        if $z21 != 0 goto label03;

        if $z5 != 0 goto label03;

        if $z10 != 0 goto label03;

        if $z11 == 0 goto label59;

     label03:
        $z21 = 1;

     label04:
        if $z22 != 0 goto label05;

        if $z3 != 0 goto label05;

        if $z7 != 0 goto label05;

        if $z9 == 0 goto label60;

     label05:
        $z22 = 1;

     label06:
        if $z23 != 0 goto label07;

        if $z20 == 0 goto label61;

     label07:
        $z23 = 1;

     label08:
        if $z25 != 0 goto label09;

        if $z22 != 0 goto label09;

        if $z23 == 0 goto label62;

     label09:
        $z25 = 1;

     label10:
        $r64 = new proguard.classfile.visitor.ClassCleaner;

        specialinvoke $r64.<proguard.classfile.visitor.ClassCleaner: void <init>()>();

        virtualinvoke $r1.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r64);

        $r64 = new proguard.classfile.visitor.ClassCleaner;

        specialinvoke $r64.<proguard.classfile.visitor.ClassCleaner: void <init>()>();

        virtualinvoke $r2.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r64);

        $r66 = new proguard.classfile.visitor.BottomClassFilter;

        $r65 = new proguard.classfile.util.MethodLinker;

        specialinvoke $r65.<proguard.classfile.util.MethodLinker: void <init>()>();

        specialinvoke $r66.<proguard.classfile.visitor.BottomClassFilter: void <init>(proguard.classfile.visitor.ClassVisitor)>($r65);

        virtualinvoke $r1.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r66);

        $r66 = new proguard.classfile.visitor.BottomClassFilter;

        $r65 = new proguard.classfile.util.MethodLinker;

        specialinvoke $r65.<proguard.classfile.util.MethodLinker: void <init>()>();

        specialinvoke $r66.<proguard.classfile.visitor.BottomClassFilter: void <init>(proguard.classfile.visitor.ClassVisitor)>($r65);

        virtualinvoke $r2.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r66);

        $r67 = new proguard.optimize.KeepMarker;

        $r35 = $r67;

        specialinvoke $r67.<proguard.optimize.KeepMarker: void <init>()>();

        $r8 = r0.<proguard.optimize.Optimizer: proguard.Configuration configuration>;

        $r9 = $r8.<proguard.Configuration: java.util.List keep>;

        $r36 = staticinvoke <proguard.ClassSpecificationVisitorFactory: proguard.classfile.visitor.ClassPoolVisitor createClassPoolVisitor(java.util.List,proguard.classfile.visitor.ClassVisitor,proguard.classfile.visitor.MemberVisitor,boolean,boolean,boolean)>($r9, $r35, $r35, 0, 1, 0);

        virtualinvoke $r1.<proguard.classfile.ClassPool: void accept(proguard.classfile.visitor.ClassPoolVisitor)>($r36);

        virtualinvoke $r2.<proguard.classfile.ClassPool: void accept(proguard.classfile.visitor.ClassPoolVisitor)>($r36);

        virtualinvoke $r2.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r35);

        $r68 = new proguard.classfile.visitor.AllMemberVisitor;

        specialinvoke $r68.<proguard.classfile.visitor.AllMemberVisitor: void <init>(proguard.classfile.visitor.MemberVisitor)>($r35);

        virtualinvoke $r2.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r68);

        $r72 = new proguard.classfile.visitor.AllMethodVisitor;

        $r71 = new proguard.classfile.attribute.visitor.AllAttributeVisitor;

        $r70 = new proguard.classfile.instruction.visitor.AllInstructionVisitor;

        $r69 = new proguard.classfile.visitor.DotClassClassVisitor;

        specialinvoke $r69.<proguard.classfile.visitor.DotClassClassVisitor: void <init>(proguard.classfile.visitor.ClassVisitor)>($r35);

        specialinvoke $r70.<proguard.classfile.instruction.visitor.AllInstructionVisitor: void <init>(proguard.classfile.instruction.visitor.InstructionVisitor)>($r69);

        specialinvoke $r71.<proguard.classfile.attribute.visitor.AllAttributeVisitor: void <init>(proguard.classfile.attribute.visitor.AttributeVisitor)>($r70);

        specialinvoke $r72.<proguard.classfile.visitor.AllMethodVisitor: void <init>(proguard.classfile.visitor.MemberVisitor)>($r71);

        virtualinvoke $r1.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r72);

        $r74 = new proguard.classfile.constant.visitor.AllConstantVisitor;

        $r73 = new proguard.classfile.visitor.ClassForNameClassVisitor;

        specialinvoke $r73.<proguard.classfile.visitor.ClassForNameClassVisitor: void <init>(proguard.classfile.visitor.ClassVisitor)>($r35);

        specialinvoke $r74.<proguard.classfile.constant.visitor.AllConstantVisitor: void <init>(proguard.classfile.constant.visitor.ConstantVisitor)>($r73);

        virtualinvoke $r1.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r74);

        $r75 = new proguard.optimize.info.ClassOptimizationInfoSetter;

        specialinvoke $r75.<proguard.optimize.info.ClassOptimizationInfoSetter: void <init>()>();

        virtualinvoke $r1.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r75);

        $r68 = new proguard.classfile.visitor.AllMemberVisitor;

        $r76 = new proguard.optimize.info.MemberOptimizationInfoSetter;

        specialinvoke $r76.<proguard.optimize.info.MemberOptimizationInfoSetter: void <init>()>();

        specialinvoke $r68.<proguard.classfile.visitor.AllMemberVisitor: void <init>(proguard.classfile.visitor.MemberVisitor)>($r76);

        virtualinvoke $r1.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r68);

        $r8 = r0.<proguard.optimize.Optimizer: proguard.Configuration configuration>;

        $r9 = $r8.<proguard.Configuration: java.util.List assumeNoSideEffects>;

        if $r9 == null goto label11;

        $r77 = new proguard.optimize.info.NoSideEffectMethodMarker;

        specialinvoke $r77.<proguard.optimize.info.NoSideEffectMethodMarker: void <init>()>();

        $r8 = r0.<proguard.optimize.Optimizer: proguard.Configuration configuration>;

        $r9 = $r8.<proguard.Configuration: java.util.List assumeNoSideEffects>;

        $r36 = staticinvoke <proguard.ClassSpecificationVisitorFactory: proguard.classfile.visitor.ClassPoolVisitor createClassPoolVisitor(java.util.List,proguard.classfile.visitor.ClassVisitor,proguard.classfile.visitor.MemberVisitor)>($r9, null, $r77);

        virtualinvoke $r1.<proguard.classfile.ClassPool: void accept(proguard.classfile.visitor.ClassPoolVisitor)>($r36);

        virtualinvoke $r2.<proguard.classfile.ClassPool: void accept(proguard.classfile.visitor.ClassPoolVisitor)>($r36);

     label11:
        if $z0 == 0 goto label12;

        $r78 = new proguard.optimize.peephole.ClassFinalizer;

        specialinvoke $r78.<proguard.optimize.peephole.ClassFinalizer: void <init>(proguard.classfile.visitor.ClassVisitor)>($r12);

        virtualinvoke $r1.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r78);

     label12:
        if $z8 == 0 goto label13;

        $r72 = new proguard.classfile.visitor.AllMethodVisitor;

        $r79 = new proguard.optimize.peephole.MethodFinalizer;

        specialinvoke $r79.<proguard.optimize.peephole.MethodFinalizer: void <init>(proguard.classfile.visitor.MemberVisitor)>($r20);

        specialinvoke $r72.<proguard.classfile.visitor.AllMethodVisitor: void <init>(proguard.classfile.visitor.MemberVisitor)>($r79);

        virtualinvoke $r1.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r72);

     label13:
        if $z3 == 0 goto label63;

        $r72 = new proguard.classfile.visitor.AllMethodVisitor;

        $r71 = new proguard.classfile.attribute.visitor.AllAttributeVisitor;

        $r70 = new proguard.classfile.instruction.visitor.AllInstructionVisitor;

        $r80 = new proguard.optimize.info.ReadWriteFieldMarker;

        specialinvoke $r80.<proguard.optimize.info.ReadWriteFieldMarker: void <init>()>();

        specialinvoke $r70.<proguard.classfile.instruction.visitor.AllInstructionVisitor: void <init>(proguard.classfile.instruction.visitor.InstructionVisitor)>($r80);

        specialinvoke $r71.<proguard.classfile.attribute.visitor.AllAttributeVisitor: void <init>(proguard.classfile.attribute.visitor.AttributeVisitor)>($r70);

        specialinvoke $r72.<proguard.classfile.visitor.AllMethodVisitor: void <init>(proguard.classfile.visitor.MemberVisitor)>($r71);

        virtualinvoke $r1.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r72);

        $r82 = new proguard.classfile.visitor.AllFieldVisitor;

        $r81 = new proguard.optimize.WriteOnlyFieldFilter;

        specialinvoke $r81.<proguard.optimize.WriteOnlyFieldFilter: void <init>(proguard.classfile.visitor.MemberVisitor)>($r15);

        specialinvoke $r82.<proguard.classfile.visitor.AllFieldVisitor: void <init>(proguard.classfile.visitor.MemberVisitor)>($r81);

        virtualinvoke $r1.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r82);

     label14:
        $r72 = new proguard.classfile.visitor.AllMethodVisitor;

        $r37 = $r72;

        $r84 = new proguard.optimize.OptimizationInfoMemberFilter;

        $r39 = $r84;

        $r83 = new proguard.optimize.info.ParameterUsageMarker;

        $r40 = $r83;

        if $z7 != 0 goto label64;

        $z27 = 1;

     label15:
        if $z9 != 0 goto label65;

        $z28 = 1;

     label16:
        specialinvoke $r83.<proguard.optimize.info.ParameterUsageMarker: void <init>(boolean,boolean)>($z27, $z28);

        specialinvoke $r84.<proguard.optimize.OptimizationInfoMemberFilter: void <init>(proguard.classfile.visitor.MemberVisitor)>($r40);

        specialinvoke $r72.<proguard.classfile.visitor.AllMethodVisitor: void <init>(proguard.classfile.visitor.MemberVisitor)>($r39);

        virtualinvoke $r1.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r37);

        $r85 = new proguard.optimize.info.SideEffectMethodMarker;

        specialinvoke $r85.<proguard.optimize.info.SideEffectMethodMarker: void <init>()>();

        virtualinvoke $r1.<proguard.classfile.ClassPool: void accept(proguard.classfile.visitor.ClassPoolVisitor)>($r85);

        $r86 = new proguard.evaluation.value.IdentifiedValueFactory;

        $r41 = $r86;

        specialinvoke $r86.<proguard.evaluation.value.IdentifiedValueFactory: void <init>()>();

        if $z5 != 0 goto label17;

        if $z10 != 0 goto label17;

        if $z11 == 0 goto label18;

     label17:
        $r87 = new proguard.optimize.evaluation.StoringInvocationUnit;

        specialinvoke $r87.<proguard.optimize.evaluation.StoringInvocationUnit: void <init>(proguard.evaluation.value.ValueFactory,boolean,boolean,boolean)>($r41, $z5, $z10, $z11);

        $r72 = new proguard.classfile.visitor.AllMethodVisitor;

        $r71 = new proguard.classfile.attribute.visitor.AllAttributeVisitor;

        $r88 = new proguard.optimize.evaluation.PartialEvaluator;

        specialinvoke $r88.<proguard.optimize.evaluation.PartialEvaluator: void <init>(proguard.evaluation.value.ValueFactory,proguard.evaluation.InvocationUnit,boolean)>($r41, $r87, 0);

        specialinvoke $r71.<proguard.classfile.attribute.visitor.AllAttributeVisitor: void <init>(proguard.classfile.attribute.visitor.AttributeVisitor)>($r88);

        specialinvoke $r72.<proguard.classfile.visitor.AllMethodVisitor: void <init>(proguard.classfile.visitor.MemberVisitor)>($r71);

        virtualinvoke $r1.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r72);

        $r91 = new proguard.classfile.visitor.MultiClassVisitor;

        $r43 = newarray (proguard.classfile.visitor.ClassVisitor)[3];

        $r82 = new proguard.classfile.visitor.AllFieldVisitor;

        $r89 = new proguard.optimize.ConstantMemberFilter;

        specialinvoke $r89.<proguard.optimize.ConstantMemberFilter: void <init>(proguard.classfile.visitor.MemberVisitor)>($r17);

        specialinvoke $r82.<proguard.classfile.visitor.AllFieldVisitor: void <init>(proguard.classfile.visitor.MemberVisitor)>($r89);

        $r43[0] = $r82;

        $r72 = new proguard.classfile.visitor.AllMethodVisitor;

        $r90 = new proguard.optimize.ConstantParameterFilter;

        specialinvoke $r90.<proguard.optimize.ConstantParameterFilter: void <init>(proguard.classfile.visitor.MemberVisitor)>($r22);

        specialinvoke $r72.<proguard.classfile.visitor.AllMethodVisitor: void <init>(proguard.classfile.visitor.MemberVisitor)>($r90);

        $r43[1] = $r72;

        $r72 = new proguard.classfile.visitor.AllMethodVisitor;

        $r89 = new proguard.optimize.ConstantMemberFilter;

        specialinvoke $r89.<proguard.optimize.ConstantMemberFilter: void <init>(proguard.classfile.visitor.MemberVisitor)>($r23);

        specialinvoke $r72.<proguard.classfile.visitor.AllMethodVisitor: void <init>(proguard.classfile.visitor.MemberVisitor)>($r89);

        $r43[2] = $r72;

        specialinvoke $r91.<proguard.classfile.visitor.MultiClassVisitor: void <init>(proguard.classfile.visitor.ClassVisitor[])>($r43);

        virtualinvoke $r1.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r91);

     label18:
        $r92 = new proguard.optimize.evaluation.LoadingInvocationUnit;

        $r44 = $r92;

        specialinvoke $r92.<proguard.optimize.evaluation.LoadingInvocationUnit: void <init>(proguard.evaluation.value.ValueFactory,boolean,boolean,boolean)>($r41, $z5, $z10, $z11);

        if $z21 == 0 goto label19;

        $r72 = new proguard.classfile.visitor.AllMethodVisitor;

        $r71 = new proguard.classfile.attribute.visitor.AllAttributeVisitor;

        $r93 = new proguard.optimize.evaluation.EvaluationSimplifier;

        $r88 = new proguard.optimize.evaluation.PartialEvaluator;

        specialinvoke $r88.<proguard.optimize.evaluation.PartialEvaluator: void <init>(proguard.evaluation.value.ValueFactory,proguard.evaluation.InvocationUnit,boolean)>($r41, $r44, 0);

        specialinvoke $r93.<proguard.optimize.evaluation.EvaluationSimplifier: void <init>(proguard.optimize.evaluation.PartialEvaluator,proguard.classfile.instruction.visitor.InstructionVisitor)>($r88, $r33);

        specialinvoke $r71.<proguard.classfile.attribute.visitor.AllAttributeVisitor: void <init>(proguard.classfile.attribute.visitor.AttributeVisitor)>($r93);

        specialinvoke $r72.<proguard.classfile.visitor.AllMethodVisitor: void <init>(proguard.classfile.visitor.MemberVisitor)>($r71);

        virtualinvoke $r1.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r72);

     label19:
        if $z22 == 0 goto label21;

        $r72 = new proguard.classfile.visitor.AllMethodVisitor;

        $r37 = $r72;

        $r71 = new proguard.classfile.attribute.visitor.AllAttributeVisitor;

        $r38 = $r71;

        $r94 = new proguard.optimize.evaluation.EvaluationShrinker;

        $r45 = $r94;

        $r88 = new proguard.optimize.evaluation.PartialEvaluator;

        $r42 = $r88;

        if $z21 != 0 goto label66;

        $z27 = 1;

     label20:
        specialinvoke $r88.<proguard.optimize.evaluation.PartialEvaluator: void <init>(proguard.evaluation.value.ValueFactory,proguard.evaluation.InvocationUnit,boolean)>($r41, $r44, $z27);

        specialinvoke $r94.<proguard.optimize.evaluation.EvaluationShrinker: void <init>(proguard.optimize.evaluation.PartialEvaluator,proguard.classfile.instruction.visitor.InstructionVisitor,proguard.classfile.instruction.visitor.InstructionVisitor)>($r42, $r34, $r3);

        specialinvoke $r71.<proguard.classfile.attribute.visitor.AllAttributeVisitor: void <init>(proguard.classfile.attribute.visitor.AttributeVisitor)>($r45);

        specialinvoke $r72.<proguard.classfile.visitor.AllMethodVisitor: void <init>(proguard.classfile.visitor.MemberVisitor)>($r38);

        virtualinvoke $r1.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r37);

     label21:
        if $z9 == 0 goto label22;

        $r72 = new proguard.classfile.visitor.AllMethodVisitor;

        $r84 = new proguard.optimize.OptimizationInfoMemberFilter;

        $r95 = new proguard.optimize.MethodDescriptorShrinker;

        specialinvoke $r95.<proguard.optimize.MethodDescriptorShrinker: void <init>()>();

        specialinvoke $r84.<proguard.optimize.OptimizationInfoMemberFilter: void <init>(proguard.classfile.visitor.MemberVisitor)>($r95);

        specialinvoke $r72.<proguard.classfile.visitor.AllMethodVisitor: void <init>(proguard.classfile.visitor.MemberVisitor)>($r84);

        virtualinvoke $r1.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r72);

     label22:
        if $z7 == 0 goto label23;

        $r72 = new proguard.classfile.visitor.AllMethodVisitor;

        $r84 = new proguard.optimize.OptimizationInfoMemberFilter;

        $r97 = new proguard.classfile.visitor.MemberAccessFilter;

        $r96 = new proguard.optimize.MethodStaticizer;

        specialinvoke $r96.<proguard.optimize.MethodStaticizer: void <init>(proguard.classfile.visitor.MemberVisitor)>($r19);

        specialinvoke $r97.<proguard.classfile.visitor.MemberAccessFilter: void <init>(int,int,proguard.classfile.visitor.MemberVisitor)>(0, 8, $r96);

        specialinvoke $r84.<proguard.optimize.OptimizationInfoMemberFilter: void <init>(proguard.classfile.visitor.MemberVisitor)>($r97);

        specialinvoke $r72.<proguard.classfile.visitor.AllMethodVisitor: void <init>(proguard.classfile.visitor.MemberVisitor)>($r84);

        virtualinvoke $r1.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r72);

     label23:
        if $z9 == 0 goto label24;

        $r98 = new proguard.classfile.editor.MemberReferenceFixer;

        specialinvoke $r98.<proguard.classfile.editor.MemberReferenceFixer: void <init>()>();

        virtualinvoke $r1.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r98);

     label24:
        if $z9 != 0 goto label25;

        if $z6 != 0 goto label25;

        if $z7 == 0 goto label67;

     label25:
        $r72 = new proguard.classfile.visitor.AllMethodVisitor;

        $r71 = new proguard.classfile.attribute.visitor.AllAttributeVisitor;

        $r99 = new proguard.optimize.ParameterShrinker;

        specialinvoke $r99.<proguard.optimize.ParameterShrinker: void <init>(proguard.classfile.visitor.MemberVisitor)>($r21);

        specialinvoke $r71.<proguard.classfile.attribute.visitor.AllAttributeVisitor: void <init>(proguard.classfile.attribute.visitor.AttributeVisitor)>($r99);

        specialinvoke $r72.<proguard.classfile.visitor.AllMethodVisitor: void <init>(proguard.classfile.visitor.MemberVisitor)>($r71);

        virtualinvoke $r1.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r72);

     label26:
        $r91 = new proguard.classfile.visitor.MultiClassVisitor;

        $r43 = newarray (proguard.classfile.visitor.ClassVisitor)[2];

        $r74 = new proguard.classfile.constant.visitor.AllConstantVisitor;

        $r100 = new proguard.optimize.info.PackageVisibleMemberInvokingClassMarker;

        specialinvoke $r100.<proguard.optimize.info.PackageVisibleMemberInvokingClassMarker: void <init>()>();

        specialinvoke $r74.<proguard.classfile.constant.visitor.AllConstantVisitor: void <init>(proguard.classfile.constant.visitor.ConstantVisitor)>($r100);

        $r43[0] = $r74;

        $r72 = new proguard.classfile.visitor.AllMethodVisitor;

        $r116 = new proguard.classfile.visitor.MultiMemberVisitor;

        $r46 = newarray (proguard.classfile.visitor.MemberVisitor)[2];

        $r101 = new proguard.optimize.info.PackageVisibleMemberContainingClassMarker;

        specialinvoke $r101.<proguard.optimize.info.PackageVisibleMemberContainingClassMarker: void <init>()>();

        $r46[0] = $r101;

        $r71 = new proguard.classfile.attribute.visitor.AllAttributeVisitor;

        $r115 = new proguard.classfile.attribute.visitor.MultiAttributeVisitor;

        $r47 = newarray (proguard.classfile.attribute.visitor.AttributeVisitor)[3];

        $r102 = new proguard.optimize.info.CatchExceptionMarker;

        specialinvoke $r102.<proguard.optimize.info.CatchExceptionMarker: void <init>()>();

        $r47[0] = $r102;

        $r70 = new proguard.classfile.instruction.visitor.AllInstructionVisitor;

        $r110 = new proguard.classfile.instruction.visitor.MultiInstructionVisitor;

        $r48 = newarray (proguard.classfile.instruction.visitor.InstructionVisitor)[7];

        $r103 = new proguard.optimize.info.InstantiationClassMarker;

        specialinvoke $r103.<proguard.optimize.info.InstantiationClassMarker: void <init>()>();

        $r48[0] = $r103;

        $r104 = new proguard.optimize.info.InstanceofClassMarker;

        specialinvoke $r104.<proguard.optimize.info.InstanceofClassMarker: void <init>()>();

        $r48[1] = $r104;

        $r105 = new proguard.optimize.info.DotClassMarker;

        specialinvoke $r105.<proguard.optimize.info.DotClassMarker: void <init>()>();

        $r48[2] = $r105;

        $r106 = new proguard.optimize.info.MethodInvocationMarker;

        specialinvoke $r106.<proguard.optimize.info.MethodInvocationMarker: void <init>()>();

        $r48[3] = $r106;

        $r107 = new proguard.optimize.info.SuperInvocationMarker;

        specialinvoke $r107.<proguard.optimize.info.SuperInvocationMarker: void <init>()>();

        $r48[4] = $r107;

        $r108 = new proguard.optimize.info.BackwardBranchMarker;

        specialinvoke $r108.<proguard.optimize.info.BackwardBranchMarker: void <init>()>();

        $r48[5] = $r108;

        $r109 = new proguard.optimize.info.AccessMethodMarker;

        specialinvoke $r109.<proguard.optimize.info.AccessMethodMarker: void <init>()>();

        $r48[6] = $r109;

        specialinvoke $r110.<proguard.classfile.instruction.visitor.MultiInstructionVisitor: void <init>(proguard.classfile.instruction.visitor.InstructionVisitor[])>($r48);

        specialinvoke $r70.<proguard.classfile.instruction.visitor.AllInstructionVisitor: void <init>(proguard.classfile.instruction.visitor.InstructionVisitor)>($r110);

        $r47[1] = $r70;

        $r114 = new proguard.classfile.attribute.visitor.AllExceptionInfoVisitor;

        $r113 = new proguard.classfile.visitor.ExceptionHandlerConstantVisitor;

        $r112 = new proguard.classfile.visitor.ReferencedClassVisitor;

        $r111 = new proguard.optimize.info.CaughtClassMarker;

        specialinvoke $r111.<proguard.optimize.info.CaughtClassMarker: void <init>()>();

        specialinvoke $r112.<proguard.classfile.visitor.ReferencedClassVisitor: void <init>(proguard.classfile.visitor.ClassVisitor)>($r111);

        specialinvoke $r113.<proguard.classfile.visitor.ExceptionHandlerConstantVisitor: void <init>(proguard.classfile.constant.visitor.ConstantVisitor)>($r112);

        specialinvoke $r114.<proguard.classfile.attribute.visitor.AllExceptionInfoVisitor: void <init>(proguard.classfile.attribute.visitor.ExceptionInfoVisitor)>($r113);

        $r47[2] = $r114;

        specialinvoke $r115.<proguard.classfile.attribute.visitor.MultiAttributeVisitor: void <init>(proguard.classfile.attribute.visitor.AttributeVisitor[])>($r47);

        specialinvoke $r71.<proguard.classfile.attribute.visitor.AllAttributeVisitor: void <init>(proguard.classfile.attribute.visitor.AttributeVisitor)>($r115);

        $r46[1] = $r71;

        specialinvoke $r116.<proguard.classfile.visitor.MultiMemberVisitor: void <init>(proguard.classfile.visitor.MemberVisitor[])>($r46);

        specialinvoke $r72.<proguard.classfile.visitor.AllMethodVisitor: void <init>(proguard.classfile.visitor.MemberVisitor)>($r116);

        $r43[1] = $r72;

        specialinvoke $r91.<proguard.classfile.visitor.MultiClassVisitor: void <init>(proguard.classfile.visitor.ClassVisitor[])>($r43);

        virtualinvoke $r1.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r91);

        if $z1 == 0 goto label27;

        $r117 = new proguard.optimize.peephole.VerticalClassMerger;

        $r8 = r0.<proguard.optimize.Optimizer: proguard.Configuration configuration>;

        $z27 = $r8.<proguard.Configuration: boolean allowAccessModification>;

        $r8 = r0.<proguard.optimize.Optimizer: proguard.Configuration configuration>;

        $z28 = $r8.<proguard.Configuration: boolean mergeInterfacesAggressively>;

        specialinvoke $r117.<proguard.optimize.peephole.VerticalClassMerger: void <init>(boolean,boolean,proguard.classfile.visitor.ClassVisitor)>($z27, $z28, $r13);

        virtualinvoke $r1.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r117);

     label27:
        if $z2 == 0 goto label28;

        $r118 = new proguard.optimize.peephole.HorizontalClassMerger;

        $r8 = r0.<proguard.optimize.Optimizer: proguard.Configuration configuration>;

        $z27 = $r8.<proguard.Configuration: boolean allowAccessModification>;

        $r8 = r0.<proguard.optimize.Optimizer: proguard.Configuration configuration>;

        $z28 = $r8.<proguard.Configuration: boolean mergeInterfacesAggressively>;

        specialinvoke $r118.<proguard.optimize.peephole.HorizontalClassMerger: void <init>(boolean,boolean,proguard.classfile.visitor.ClassVisitor)>($z27, $z28, $r14);

        virtualinvoke $r1.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r118);

     label28:
        if $z1 != 0 goto label29;

        if $z2 == 0 goto label31;

     label29:
        $r119 = new proguard.optimize.peephole.RetargetedInnerClassAttributeRemover;

        specialinvoke $r119.<proguard.optimize.peephole.RetargetedInnerClassAttributeRemover: void <init>()>();

        virtualinvoke $r1.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r119);

        $r120 = new proguard.optimize.peephole.TargetClassChanger;

        specialinvoke $r120.<proguard.optimize.peephole.TargetClassChanger: void <init>()>();

        virtualinvoke $r1.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r120);

        $r121 = new proguard.classfile.editor.ClassReferenceFixer;

        specialinvoke $r121.<proguard.classfile.editor.ClassReferenceFixer: void <init>(boolean)>(1);

        virtualinvoke $r1.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r121);

        $r98 = new proguard.classfile.editor.MemberReferenceFixer;

        specialinvoke $r98.<proguard.classfile.editor.MemberReferenceFixer: void <init>()>();

        virtualinvoke $r1.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r98);

        $r8 = r0.<proguard.optimize.Optimizer: proguard.Configuration configuration>;

        $z27 = $r8.<proguard.Configuration: boolean allowAccessModification>;

        if $z27 == 0 goto label30;

        $r74 = new proguard.classfile.constant.visitor.AllConstantVisitor;

        $r122 = new proguard.classfile.editor.AccessFixer;

        specialinvoke $r122.<proguard.classfile.editor.AccessFixer: void <init>()>();

        specialinvoke $r74.<proguard.classfile.constant.visitor.AllConstantVisitor: void <init>(proguard.classfile.constant.visitor.ConstantVisitor)>($r122);

        virtualinvoke $r1.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r74);

     label30:
        $r71 = new proguard.classfile.attribute.visitor.AllAttributeVisitor;

        $r124 = new proguard.classfile.attribute.visitor.AllInnerClassesInfoVisitor;

        $r123 = new proguard.classfile.editor.InnerClassesAccessFixer;

        specialinvoke $r123.<proguard.classfile.editor.InnerClassesAccessFixer: void <init>()>();

        specialinvoke $r124.<proguard.classfile.attribute.visitor.AllInnerClassesInfoVisitor: void <init>(proguard.classfile.attribute.visitor.InnerClassesInfoVisitor)>($r123);

        specialinvoke $r71.<proguard.classfile.attribute.visitor.AllAttributeVisitor: void <init>(proguard.classfile.attribute.visitor.AttributeVisitor)>($r124);

        virtualinvoke $r1.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r71);

     label31:
        if $z9 != 0 goto label32;

        if $z1 != 0 goto label32;

        if $z2 == 0 goto label33;

     label32:
        $r72 = new proguard.classfile.visitor.AllMethodVisitor;

        $r125 = new proguard.optimize.DuplicateInitializerFixer;

        specialinvoke $r125.<proguard.optimize.DuplicateInitializerFixer: void <init>(proguard.classfile.visitor.MemberVisitor)>($r7);

        specialinvoke $r72.<proguard.classfile.visitor.AllMethodVisitor: void <init>(proguard.classfile.visitor.MemberVisitor)>($r125);

        virtualinvoke $r1.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r72);

        $i0 = virtualinvoke $r7.<proguard.classfile.visitor.MemberCounter: int getCount()>();

        if $i0 <= 0 goto label33;

        $r72 = new proguard.classfile.visitor.AllMethodVisitor;

        $r71 = new proguard.classfile.attribute.visitor.AllAttributeVisitor;

        $r126 = new proguard.optimize.DuplicateInitializerInvocationFixer;

        specialinvoke $r126.<proguard.optimize.DuplicateInitializerInvocationFixer: void <init>(proguard.classfile.instruction.visitor.InstructionVisitor)>($r3);

        specialinvoke $r71.<proguard.classfile.attribute.visitor.AllAttributeVisitor: void <init>(proguard.classfile.attribute.visitor.AttributeVisitor)>($r126);

        specialinvoke $r72.<proguard.classfile.visitor.AllMethodVisitor: void <init>(proguard.classfile.visitor.MemberVisitor)>($r71);

        virtualinvoke $r1.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r72);

        $r98 = new proguard.classfile.editor.MemberReferenceFixer;

        specialinvoke $r98.<proguard.classfile.editor.MemberReferenceFixer: void <init>()>();

        virtualinvoke $r1.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r98);

     label33:
        if $z13 == 0 goto label34;

        $r72 = new proguard.classfile.visitor.AllMethodVisitor;

        $r71 = new proguard.classfile.attribute.visitor.AllAttributeVisitor;

        $r127 = new proguard.optimize.peephole.MethodInliner;

        $r8 = r0.<proguard.optimize.Optimizer: proguard.Configuration configuration>;

        $z27 = $r8.<proguard.Configuration: boolean microEdition>;

        $r8 = r0.<proguard.optimize.Optimizer: proguard.Configuration configuration>;

        $z28 = $r8.<proguard.Configuration: boolean allowAccessModification>;

        specialinvoke $r127.<proguard.optimize.peephole.MethodInliner: void <init>(boolean,boolean,boolean,proguard.classfile.instruction.visitor.InstructionVisitor)>($z27, $z28, 1, $r25);

        specialinvoke $r71.<proguard.classfile.attribute.visitor.AllAttributeVisitor: void <init>(proguard.classfile.attribute.visitor.AttributeVisitor)>($r127);

        specialinvoke $r72.<proguard.classfile.visitor.AllMethodVisitor: void <init>(proguard.classfile.visitor.MemberVisitor)>($r71);

        virtualinvoke $r1.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r72);

     label34:
        if $z12 == 0 goto label35;

        $r72 = new proguard.classfile.visitor.AllMethodVisitor;

        $r71 = new proguard.classfile.attribute.visitor.AllAttributeVisitor;

        $r127 = new proguard.optimize.peephole.MethodInliner;

        $r8 = r0.<proguard.optimize.Optimizer: proguard.Configuration configuration>;

        $z27 = $r8.<proguard.Configuration: boolean microEdition>;

        $r8 = r0.<proguard.optimize.Optimizer: proguard.Configuration configuration>;

        $z28 = $r8.<proguard.Configuration: boolean allowAccessModification>;

        specialinvoke $r127.<proguard.optimize.peephole.MethodInliner: void <init>(boolean,boolean,boolean,proguard.classfile.instruction.visitor.InstructionVisitor)>($z27, $z28, 0, $r24);

        specialinvoke $r71.<proguard.classfile.attribute.visitor.AllAttributeVisitor: void <init>(proguard.classfile.attribute.visitor.AttributeVisitor)>($r127);

        specialinvoke $r72.<proguard.classfile.visitor.AllMethodVisitor: void <init>(proguard.classfile.visitor.MemberVisitor)>($r71);

        virtualinvoke $r1.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r72);

     label35:
        if $z14 == 0 goto label36;

        $r72 = new proguard.classfile.visitor.AllMethodVisitor;

        $r71 = new proguard.classfile.attribute.visitor.AllAttributeVisitor;

        $r128 = new proguard.optimize.TailRecursionSimplifier;

        specialinvoke $r128.<proguard.optimize.TailRecursionSimplifier: void <init>(proguard.classfile.instruction.visitor.InstructionVisitor)>($r26);

        specialinvoke $r71.<proguard.classfile.attribute.visitor.AllAttributeVisitor: void <init>(proguard.classfile.attribute.visitor.AttributeVisitor)>($r128);

        specialinvoke $r72.<proguard.classfile.visitor.AllMethodVisitor: void <init>(proguard.classfile.visitor.MemberVisitor)>($r71);

        virtualinvoke $r1.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r72);

     label36:
        if $z4 != 0 goto label37;

        if $z6 == 0 goto label38;

     label37:
        $r129 = new proguard.optimize.info.NonPrivateMemberMarker;

        specialinvoke $r129.<proguard.optimize.info.NonPrivateMemberMarker: void <init>()>();

        virtualinvoke $r1.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r129);

     label38:
        if $z4 == 0 goto label39;

        $r131 = new proguard.classfile.visitor.ClassAccessFilter;

        $r82 = new proguard.classfile.visitor.AllFieldVisitor;

        $r97 = new proguard.classfile.visitor.MemberAccessFilter;

        $r130 = new proguard.optimize.peephole.MemberPrivatizer;

        specialinvoke $r130.<proguard.optimize.peephole.MemberPrivatizer: void <init>(proguard.classfile.visitor.MemberVisitor)>($r16);

        specialinvoke $r97.<proguard.classfile.visitor.MemberAccessFilter: void <init>(int,int,proguard.classfile.visitor.MemberVisitor)>(0, 2, $r130);

        specialinvoke $r82.<proguard.classfile.visitor.AllFieldVisitor: void <init>(proguard.classfile.visitor.MemberVisitor)>($r97);

        specialinvoke $r131.<proguard.classfile.visitor.ClassAccessFilter: void <init>(int,int,proguard.classfile.visitor.ClassVisitor)>(0, 512, $r82);

        virtualinvoke $r1.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r131);

     label39:
        if $z6 == 0 goto label40;

        $r131 = new proguard.classfile.visitor.ClassAccessFilter;

        $r72 = new proguard.classfile.visitor.AllMethodVisitor;

        $r97 = new proguard.classfile.visitor.MemberAccessFilter;

        $r130 = new proguard.optimize.peephole.MemberPrivatizer;

        specialinvoke $r130.<proguard.optimize.peephole.MemberPrivatizer: void <init>(proguard.classfile.visitor.MemberVisitor)>($r18);

        specialinvoke $r97.<proguard.classfile.visitor.MemberAccessFilter: void <init>(int,int,proguard.classfile.visitor.MemberVisitor)>(0, 2, $r130);

        specialinvoke $r72.<proguard.classfile.visitor.AllMethodVisitor: void <init>(proguard.classfile.visitor.MemberVisitor)>($r97);

        specialinvoke $r131.<proguard.classfile.visitor.ClassAccessFilter: void <init>(int,int,proguard.classfile.visitor.ClassVisitor)>(0, 512, $r72);

        virtualinvoke $r1.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r131);

     label40:
        if $z13 != 0 goto label41;

        if $z12 != 0 goto label41;

        if $z14 == 0 goto label42;

     label41:
        $r8 = r0.<proguard.optimize.Optimizer: proguard.Configuration configuration>;

        $z27 = $r8.<proguard.Configuration: boolean allowAccessModification>;

        if $z27 == 0 goto label42;

        $r74 = new proguard.classfile.constant.visitor.AllConstantVisitor;

        $r122 = new proguard.classfile.editor.AccessFixer;

        specialinvoke $r122.<proguard.classfile.editor.AccessFixer: void <init>()>();

        specialinvoke $r74.<proguard.classfile.constant.visitor.AllConstantVisitor: void <init>(proguard.classfile.constant.visitor.ConstantVisitor)>($r122);

        virtualinvoke $r1.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r74);

     label42:
        if $z9 != 0 goto label43;

        if $z1 != 0 goto label43;

        if $z2 != 0 goto label43;

        if $z6 == 0 goto label44;

     label43:
        $r68 = new proguard.classfile.visitor.AllMemberVisitor;

        $r71 = new proguard.classfile.attribute.visitor.AllAttributeVisitor;

        $r132 = new proguard.classfile.editor.MethodInvocationFixer;

        specialinvoke $r132.<proguard.classfile.editor.MethodInvocationFixer: void <init>()>();

        specialinvoke $r71.<proguard.classfile.attribute.visitor.AllAttributeVisitor: void <init>(proguard.classfile.attribute.visitor.AttributeVisitor)>($r132);

        specialinvoke $r68.<proguard.classfile.visitor.AllMemberVisitor: void <init>(proguard.classfile.visitor.MemberVisitor)>($r71);

        virtualinvoke $r1.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r68);

     label44:
        if $z15 == 0 goto label45;

        $r72 = new proguard.classfile.visitor.AllMethodVisitor;

        $r71 = new proguard.classfile.attribute.visitor.AllAttributeVisitor;

        $r133 = new proguard.optimize.peephole.GotoCommonCodeReplacer;

        specialinvoke $r133.<proguard.optimize.peephole.GotoCommonCodeReplacer: void <init>(proguard.classfile.instruction.visitor.InstructionVisitor)>($r27);

        specialinvoke $r71.<proguard.classfile.attribute.visitor.AllAttributeVisitor: void <init>(proguard.classfile.attribute.visitor.AttributeVisitor)>($r133);

        specialinvoke $r72.<proguard.classfile.visitor.AllMethodVisitor: void <init>(proguard.classfile.visitor.MemberVisitor)>($r71);

        virtualinvoke $r1.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r72);

     label45:
        $r134 = new proguard.optimize.peephole.BranchTargetFinder;

        $r49 = $r134;

        specialinvoke $r134.<proguard.optimize.peephole.BranchTargetFinder: void <init>()>();

        $r135 = new proguard.classfile.editor.CodeAttributeEditor;

        $r50 = $r135;

        specialinvoke $r135.<proguard.classfile.editor.CodeAttributeEditor: void <init>()>();

        $r136 = new java.util.ArrayList;

        $r51 = $r136;

        specialinvoke $r136.<java.util.ArrayList: void <init>()>();

        if $z16 == 0 goto label46;

        $r137 = new proguard.optimize.peephole.InstructionSequencesReplacer;

        $r52 = <proguard.optimize.peephole.InstructionSequenceConstants: proguard.classfile.constant.Constant[] CONSTANTS>;

        $r53 = <proguard.optimize.peephole.InstructionSequenceConstants: proguard.classfile.instruction.Instruction[][][] VARIABLE>;

        specialinvoke $r137.<proguard.optimize.peephole.InstructionSequencesReplacer: void <init>(proguard.classfile.constant.Constant[],proguard.classfile.instruction.Instruction[][][],proguard.optimize.peephole.BranchTargetFinder,proguard.classfile.editor.CodeAttributeEditor,proguard.classfile.instruction.visitor.InstructionVisitor)>($r52, $r53, $r49, $r50, $r28);

        interfaceinvoke $r51.<java.util.List: boolean add(java.lang.Object)>($r137);

     label46:
        if $z17 == 0 goto label47;

        $r137 = new proguard.optimize.peephole.InstructionSequencesReplacer;

        $r52 = <proguard.optimize.peephole.InstructionSequenceConstants: proguard.classfile.constant.Constant[] CONSTANTS>;

        $r53 = <proguard.optimize.peephole.InstructionSequenceConstants: proguard.classfile.instruction.Instruction[][][] ARITHMETIC>;

        specialinvoke $r137.<proguard.optimize.peephole.InstructionSequencesReplacer: void <init>(proguard.classfile.constant.Constant[],proguard.classfile.instruction.Instruction[][][],proguard.optimize.peephole.BranchTargetFinder,proguard.classfile.editor.CodeAttributeEditor,proguard.classfile.instruction.visitor.InstructionVisitor)>($r52, $r53, $r49, $r50, $r29);

        interfaceinvoke $r51.<java.util.List: boolean add(java.lang.Object)>($r137);

     label47:
        if $z18 == 0 goto label48;

        $r137 = new proguard.optimize.peephole.InstructionSequencesReplacer;

        $r52 = <proguard.optimize.peephole.InstructionSequenceConstants: proguard.classfile.constant.Constant[] CONSTANTS>;

        $r53 = <proguard.optimize.peephole.InstructionSequenceConstants: proguard.classfile.instruction.Instruction[][][] CAST>;

        specialinvoke $r137.<proguard.optimize.peephole.InstructionSequencesReplacer: void <init>(proguard.classfile.constant.Constant[],proguard.classfile.instruction.Instruction[][][],proguard.optimize.peephole.BranchTargetFinder,proguard.classfile.editor.CodeAttributeEditor,proguard.classfile.instruction.visitor.InstructionVisitor)>($r52, $r53, $r49, $r50, $r30);

        interfaceinvoke $r51.<java.util.List: boolean add(java.lang.Object)>($r137);

     label48:
        if $z19 == 0 goto label49;

        $r137 = new proguard.optimize.peephole.InstructionSequencesReplacer;

        $r52 = <proguard.optimize.peephole.InstructionSequenceConstants: proguard.classfile.constant.Constant[] CONSTANTS>;

        $r53 = <proguard.optimize.peephole.InstructionSequenceConstants: proguard.classfile.instruction.Instruction[][][] FIELD>;

        specialinvoke $r137.<proguard.optimize.peephole.InstructionSequencesReplacer: void <init>(proguard.classfile.constant.Constant[],proguard.classfile.instruction.Instruction[][][],proguard.optimize.peephole.BranchTargetFinder,proguard.classfile.editor.CodeAttributeEditor,proguard.classfile.instruction.visitor.InstructionVisitor)>($r52, $r53, $r49, $r50, $r31);

        interfaceinvoke $r51.<java.util.List: boolean add(java.lang.Object)>($r137);

     label49:
        if $z20 == 0 goto label50;

        $r137 = new proguard.optimize.peephole.InstructionSequencesReplacer;

        $r52 = <proguard.optimize.peephole.InstructionSequenceConstants: proguard.classfile.constant.Constant[] CONSTANTS>;

        $r53 = <proguard.optimize.peephole.InstructionSequenceConstants: proguard.classfile.instruction.Instruction[][][] BRANCH>;

        specialinvoke $r137.<proguard.optimize.peephole.InstructionSequencesReplacer: void <init>(proguard.classfile.constant.Constant[],proguard.classfile.instruction.Instruction[][][],proguard.optimize.peephole.BranchTargetFinder,proguard.classfile.editor.CodeAttributeEditor,proguard.classfile.instruction.visitor.InstructionVisitor)>($r52, $r53, $r49, $r50, $r32);

        interfaceinvoke $r51.<java.util.List: boolean add(java.lang.Object)>($r137);

        $r138 = new proguard.optimize.peephole.GotoGotoReplacer;

        specialinvoke $r138.<proguard.optimize.peephole.GotoGotoReplacer: void <init>(proguard.classfile.editor.CodeAttributeEditor,proguard.classfile.instruction.visitor.InstructionVisitor)>($r50, $r32);

        interfaceinvoke $r51.<java.util.List: boolean add(java.lang.Object)>($r138);

        $r139 = new proguard.optimize.peephole.GotoReturnReplacer;

        specialinvoke $r139.<proguard.optimize.peephole.GotoReturnReplacer: void <init>(proguard.classfile.editor.CodeAttributeEditor,proguard.classfile.instruction.visitor.InstructionVisitor)>($r50, $r32);

        interfaceinvoke $r51.<java.util.List: boolean add(java.lang.Object)>($r139);

     label50:
        $z27 = interfaceinvoke $r51.<java.util.List: boolean isEmpty()>();

        if $z27 != 0 goto label51;

        $i0 = interfaceinvoke $r51.<java.util.List: int size()>();

        $r48 = newarray (proguard.classfile.instruction.visitor.InstructionVisitor)[$i0];

        interfaceinvoke $r51.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r48);

        $r72 = new proguard.classfile.visitor.AllMethodVisitor;

        $r71 = new proguard.classfile.attribute.visitor.AllAttributeVisitor;

        $r140 = new proguard.optimize.peephole.PeepholeOptimizer;

        $r110 = new proguard.classfile.instruction.visitor.MultiInstructionVisitor;

        specialinvoke $r110.<proguard.classfile.instruction.visitor.MultiInstructionVisitor: void <init>(proguard.classfile.instruction.visitor.InstructionVisitor[])>($r48);

        specialinvoke $r140.<proguard.optimize.peephole.PeepholeOptimizer: void <init>(proguard.optimize.peephole.BranchTargetFinder,proguard.classfile.editor.CodeAttributeEditor,proguard.classfile.instruction.visitor.InstructionVisitor)>($r49, $r50, $r110);

        specialinvoke $r71.<proguard.classfile.attribute.visitor.AllAttributeVisitor: void <init>(proguard.classfile.attribute.visitor.AttributeVisitor)>($r140);

        specialinvoke $r72.<proguard.classfile.visitor.AllMethodVisitor: void <init>(proguard.classfile.visitor.MemberVisitor)>($r71);

        virtualinvoke $r1.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r72);

     label51:
        if $z25 == 0 goto label52;

        $r72 = new proguard.classfile.visitor.AllMethodVisitor;

        $r71 = new proguard.classfile.attribute.visitor.AllAttributeVisitor;

        $r141 = new proguard.optimize.peephole.UnreachableExceptionRemover;

        specialinvoke $r141.<proguard.optimize.peephole.UnreachableExceptionRemover: void <init>(proguard.classfile.attribute.visitor.ExceptionInfoVisitor)>($r5);

        specialinvoke $r71.<proguard.classfile.attribute.visitor.AllAttributeVisitor: void <init>(proguard.classfile.attribute.visitor.AttributeVisitor)>($r141);

        specialinvoke $r72.<proguard.classfile.visitor.AllMethodVisitor: void <init>(proguard.classfile.visitor.MemberVisitor)>($r71);

        virtualinvoke $r1.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r72);

     label52:
        if $z23 == 0 goto label53;

        $r72 = new proguard.classfile.visitor.AllMethodVisitor;

        $r71 = new proguard.classfile.attribute.visitor.AllAttributeVisitor;

        $r142 = new proguard.optimize.peephole.UnreachableCodeRemover;

        specialinvoke $r142.<proguard.optimize.peephole.UnreachableCodeRemover: void <init>(proguard.classfile.instruction.visitor.InstructionVisitor)>($r34);

        specialinvoke $r71.<proguard.classfile.attribute.visitor.AllAttributeVisitor: void <init>(proguard.classfile.attribute.visitor.AttributeVisitor)>($r142);

        specialinvoke $r72.<proguard.classfile.visitor.AllMethodVisitor: void <init>(proguard.classfile.visitor.MemberVisitor)>($r71);

        virtualinvoke $r1.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r72);

     label53:
        if $z24 == 0 goto label54;

        $r72 = new proguard.classfile.visitor.AllMethodVisitor;

        $r71 = new proguard.classfile.attribute.visitor.AllAttributeVisitor;

        $r143 = new proguard.optimize.peephole.VariableShrinker;

        specialinvoke $r143.<proguard.optimize.peephole.VariableShrinker: void <init>(proguard.classfile.visitor.MemberVisitor)>($r4);

        specialinvoke $r71.<proguard.classfile.attribute.visitor.AllAttributeVisitor: void <init>(proguard.classfile.attribute.visitor.AttributeVisitor)>($r143);

        specialinvoke $r72.<proguard.classfile.visitor.AllMethodVisitor: void <init>(proguard.classfile.visitor.MemberVisitor)>($r71);

        virtualinvoke $r1.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r72);

     label54:
        if $z26 == 0 goto label55;

        $r72 = new proguard.classfile.visitor.AllMethodVisitor;

        $r71 = new proguard.classfile.attribute.visitor.AllAttributeVisitor;

        $r144 = new proguard.optimize.evaluation.VariableOptimizer;

        specialinvoke $r144.<proguard.optimize.evaluation.VariableOptimizer: void <init>(boolean,proguard.classfile.visitor.MemberVisitor)>(0, $r6);

        specialinvoke $r71.<proguard.classfile.attribute.visitor.AllAttributeVisitor: void <init>(proguard.classfile.attribute.visitor.AttributeVisitor)>($r144);

        specialinvoke $r72.<proguard.classfile.visitor.AllMethodVisitor: void <init>(proguard.classfile.visitor.MemberVisitor)>($r71);

        virtualinvoke $r1.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r72);

     label55:
        $i0 = virtualinvoke $r12.<proguard.classfile.visitor.ClassCounter: int getCount()>();

        $i1 = virtualinvoke $r13.<proguard.classfile.visitor.ClassCounter: int getCount()>();

        $i2 = virtualinvoke $r14.<proguard.classfile.visitor.ClassCounter: int getCount()>();

        $i3 = virtualinvoke $r15.<proguard.classfile.visitor.MemberCounter: int getCount()>();

        $i4 = virtualinvoke $r16.<proguard.classfile.visitor.MemberCounter: int getCount()>();

        $i5 = virtualinvoke $r17.<proguard.classfile.visitor.MemberCounter: int getCount()>();

        $i6 = virtualinvoke $r18.<proguard.classfile.visitor.MemberCounter: int getCount()>();

        $i7 = virtualinvoke $r19.<proguard.classfile.visitor.MemberCounter: int getCount()>();

        $i8 = virtualinvoke $r20.<proguard.classfile.visitor.MemberCounter: int getCount()>();

        $i9 = virtualinvoke $r21.<proguard.classfile.visitor.MemberCounter: int getCount()>();

        $i10 = virtualinvoke $r19.<proguard.classfile.visitor.MemberCounter: int getCount()>();

        $i9 = $i9 - $i10;

        $i10 = virtualinvoke $r7.<proguard.classfile.visitor.MemberCounter: int getCount()>();

        $i9 = $i9 - $i10;

        $i10 = virtualinvoke $r22.<proguard.classfile.visitor.MemberCounter: int getCount()>();

        $i11 = virtualinvoke $r23.<proguard.classfile.visitor.MemberCounter: int getCount()>();

        $i12 = virtualinvoke $r24.<proguard.classfile.instruction.visitor.InstructionCounter: int getCount()>();

        $i13 = virtualinvoke $r25.<proguard.classfile.instruction.visitor.InstructionCounter: int getCount()>();

        $i14 = virtualinvoke $r26.<proguard.classfile.instruction.visitor.InstructionCounter: int getCount()>();

        $i15 = virtualinvoke $r27.<proguard.classfile.instruction.visitor.InstructionCounter: int getCount()>();

        $i16 = virtualinvoke $r28.<proguard.classfile.instruction.visitor.InstructionCounter: int getCount()>();

        $i17 = virtualinvoke $r29.<proguard.classfile.instruction.visitor.InstructionCounter: int getCount()>();

        $i18 = virtualinvoke $r30.<proguard.classfile.instruction.visitor.InstructionCounter: int getCount()>();

        $i19 = virtualinvoke $r31.<proguard.classfile.instruction.visitor.InstructionCounter: int getCount()>();

        $i20 = virtualinvoke $r32.<proguard.classfile.instruction.visitor.InstructionCounter: int getCount()>();

        $i21 = virtualinvoke $r33.<proguard.classfile.instruction.visitor.InstructionCounter: int getCount()>();

        $i22 = virtualinvoke $r34.<proguard.classfile.instruction.visitor.InstructionCounter: int getCount()>();

        $i23 = virtualinvoke $r3.<proguard.classfile.instruction.visitor.InstructionCounter: int getCount()>();

        $i22 = $i22 - $i23;

        $i23 = virtualinvoke $r4.<proguard.classfile.visitor.MemberCounter: int getCount()>();

        $i24 = virtualinvoke $r5.<proguard.classfile.visitor.ExceptionCounter: int getCount()>();

        $i25 = virtualinvoke $r6.<proguard.classfile.visitor.MemberCounter: int getCount()>();

        $r8 = r0.<proguard.optimize.Optimizer: proguard.Configuration configuration>;

        $z23 = $r8.<proguard.Configuration: boolean verbose>;

        if $z23 == 0 goto label56;

        $r54 = <java.lang.System: java.io.PrintStream out>;

        $r145 = new java.lang.StringBuffer;

        specialinvoke $r145.<java.lang.StringBuffer: void <init>()>();

        $r55 = virtualinvoke $r145.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Number of finalized classes:                 ");

        $r55 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r56 = specialinvoke r0.<proguard.optimize.Optimizer: java.lang.String disabled(boolean)>($z0);

        $r55 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r56);

        $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r54.<java.io.PrintStream: void println(java.lang.String)>($r56);

        $r54 = <java.lang.System: java.io.PrintStream out>;

        $r145 = new java.lang.StringBuffer;

        specialinvoke $r145.<java.lang.StringBuffer: void <init>()>();

        $r55 = virtualinvoke $r145.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Number of vertically merged classes:         ");

        $r55 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r56 = specialinvoke r0.<proguard.optimize.Optimizer: java.lang.String disabled(boolean)>($z1);

        $r55 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r56);

        $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r54.<java.io.PrintStream: void println(java.lang.String)>($r56);

        $r54 = <java.lang.System: java.io.PrintStream out>;

        $r145 = new java.lang.StringBuffer;

        specialinvoke $r145.<java.lang.StringBuffer: void <init>()>();

        $r55 = virtualinvoke $r145.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Number of horizontally merged classes:       ");

        $r55 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        $r56 = specialinvoke r0.<proguard.optimize.Optimizer: java.lang.String disabled(boolean)>($z2);

        $r55 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r56);

        $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r54.<java.io.PrintStream: void println(java.lang.String)>($r56);

        $r54 = <java.lang.System: java.io.PrintStream out>;

        $r145 = new java.lang.StringBuffer;

        specialinvoke $r145.<java.lang.StringBuffer: void <init>()>();

        $r55 = virtualinvoke $r145.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Number of removed write-only fields:         ");

        $r55 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3);

        $r56 = specialinvoke r0.<proguard.optimize.Optimizer: java.lang.String disabled(boolean)>($z3);

        $r55 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r56);

        $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r54.<java.io.PrintStream: void println(java.lang.String)>($r56);

        $r54 = <java.lang.System: java.io.PrintStream out>;

        $r145 = new java.lang.StringBuffer;

        specialinvoke $r145.<java.lang.StringBuffer: void <init>()>();

        $r55 = virtualinvoke $r145.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Number of privatized fields:                 ");

        $r55 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i4);

        $r56 = specialinvoke r0.<proguard.optimize.Optimizer: java.lang.String disabled(boolean)>($z4);

        $r55 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r56);

        $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r54.<java.io.PrintStream: void println(java.lang.String)>($r56);

        $r54 = <java.lang.System: java.io.PrintStream out>;

        $r145 = new java.lang.StringBuffer;

        specialinvoke $r145.<java.lang.StringBuffer: void <init>()>();

        $r55 = virtualinvoke $r145.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Number of inlined constant fields:           ");

        $r55 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i5);

        $r56 = specialinvoke r0.<proguard.optimize.Optimizer: java.lang.String disabled(boolean)>($z5);

        $r55 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r56);

        $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r54.<java.io.PrintStream: void println(java.lang.String)>($r56);

        $r54 = <java.lang.System: java.io.PrintStream out>;

        $r145 = new java.lang.StringBuffer;

        specialinvoke $r145.<java.lang.StringBuffer: void <init>()>();

        $r55 = virtualinvoke $r145.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Number of privatized methods:                ");

        $r55 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i6);

        $r56 = specialinvoke r0.<proguard.optimize.Optimizer: java.lang.String disabled(boolean)>($z6);

        $r55 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r56);

        $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r54.<java.io.PrintStream: void println(java.lang.String)>($r56);

        $r54 = <java.lang.System: java.io.PrintStream out>;

        $r145 = new java.lang.StringBuffer;

        specialinvoke $r145.<java.lang.StringBuffer: void <init>()>();

        $r55 = virtualinvoke $r145.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Number of staticized methods:                ");

        $r55 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i7);

        $r56 = specialinvoke r0.<proguard.optimize.Optimizer: java.lang.String disabled(boolean)>($z7);

        $r55 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r56);

        $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r54.<java.io.PrintStream: void println(java.lang.String)>($r56);

        $r54 = <java.lang.System: java.io.PrintStream out>;

        $r145 = new java.lang.StringBuffer;

        specialinvoke $r145.<java.lang.StringBuffer: void <init>()>();

        $r55 = virtualinvoke $r145.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Number of finalized methods:                 ");

        $r55 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i8);

        $r56 = specialinvoke r0.<proguard.optimize.Optimizer: java.lang.String disabled(boolean)>($z8);

        $r55 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r56);

        $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r54.<java.io.PrintStream: void println(java.lang.String)>($r56);

        $r54 = <java.lang.System: java.io.PrintStream out>;

        $r145 = new java.lang.StringBuffer;

        specialinvoke $r145.<java.lang.StringBuffer: void <init>()>();

        $r55 = virtualinvoke $r145.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Number of removed method parameters:         ");

        $r55 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i9);

        $r56 = specialinvoke r0.<proguard.optimize.Optimizer: java.lang.String disabled(boolean)>($z9);

        $r55 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r56);

        $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r54.<java.io.PrintStream: void println(java.lang.String)>($r56);

        $r54 = <java.lang.System: java.io.PrintStream out>;

        $r145 = new java.lang.StringBuffer;

        specialinvoke $r145.<java.lang.StringBuffer: void <init>()>();

        $r55 = virtualinvoke $r145.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Number of inlined constant parameters:       ");

        $r55 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i10);

        $r56 = specialinvoke r0.<proguard.optimize.Optimizer: java.lang.String disabled(boolean)>($z10);

        $r55 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r56);

        $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r54.<java.io.PrintStream: void println(java.lang.String)>($r56);

        $r54 = <java.lang.System: java.io.PrintStream out>;

        $r145 = new java.lang.StringBuffer;

        specialinvoke $r145.<java.lang.StringBuffer: void <init>()>();

        $r55 = virtualinvoke $r145.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Number of inlined constant return values:    ");

        $r55 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i11);

        $r56 = specialinvoke r0.<proguard.optimize.Optimizer: java.lang.String disabled(boolean)>($z11);

        $r55 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r56);

        $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r54.<java.io.PrintStream: void println(java.lang.String)>($r56);

        $r54 = <java.lang.System: java.io.PrintStream out>;

        $r145 = new java.lang.StringBuffer;

        specialinvoke $r145.<java.lang.StringBuffer: void <init>()>();

        $r55 = virtualinvoke $r145.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Number of inlined short method calls:        ");

        $r55 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i12);

        $r56 = specialinvoke r0.<proguard.optimize.Optimizer: java.lang.String disabled(boolean)>($z12);

        $r55 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r56);

        $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r54.<java.io.PrintStream: void println(java.lang.String)>($r56);

        $r54 = <java.lang.System: java.io.PrintStream out>;

        $r145 = new java.lang.StringBuffer;

        specialinvoke $r145.<java.lang.StringBuffer: void <init>()>();

        $r55 = virtualinvoke $r145.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Number of inlined unique method calls:       ");

        $r55 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i13);

        $r56 = specialinvoke r0.<proguard.optimize.Optimizer: java.lang.String disabled(boolean)>($z13);

        $r55 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r56);

        $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r54.<java.io.PrintStream: void println(java.lang.String)>($r56);

        $r54 = <java.lang.System: java.io.PrintStream out>;

        $r145 = new java.lang.StringBuffer;

        specialinvoke $r145.<java.lang.StringBuffer: void <init>()>();

        $r55 = virtualinvoke $r145.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Number of inlined tail recursion calls:      ");

        $r55 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i14);

        $r56 = specialinvoke r0.<proguard.optimize.Optimizer: java.lang.String disabled(boolean)>($z14);

        $r55 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r56);

        $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r54.<java.io.PrintStream: void println(java.lang.String)>($r56);

        $r54 = <java.lang.System: java.io.PrintStream out>;

        $r145 = new java.lang.StringBuffer;

        specialinvoke $r145.<java.lang.StringBuffer: void <init>()>();

        $r55 = virtualinvoke $r145.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Number of merged code blocks:                ");

        $r55 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i15);

        $r56 = specialinvoke r0.<proguard.optimize.Optimizer: java.lang.String disabled(boolean)>($z15);

        $r55 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r56);

        $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r54.<java.io.PrintStream: void println(java.lang.String)>($r56);

        $r54 = <java.lang.System: java.io.PrintStream out>;

        $r145 = new java.lang.StringBuffer;

        specialinvoke $r145.<java.lang.StringBuffer: void <init>()>();

        $r55 = virtualinvoke $r145.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Number of variable peephole optimizations:   ");

        $r55 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i16);

        $r56 = specialinvoke r0.<proguard.optimize.Optimizer: java.lang.String disabled(boolean)>($z16);

        $r55 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r56);

        $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r54.<java.io.PrintStream: void println(java.lang.String)>($r56);

        $r54 = <java.lang.System: java.io.PrintStream out>;

        $r145 = new java.lang.StringBuffer;

        specialinvoke $r145.<java.lang.StringBuffer: void <init>()>();

        $r55 = virtualinvoke $r145.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Number of arithmetic peephole optimizations: ");

        $r55 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i17);

        $r56 = specialinvoke r0.<proguard.optimize.Optimizer: java.lang.String disabled(boolean)>($z17);

        $r55 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r56);

        $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r54.<java.io.PrintStream: void println(java.lang.String)>($r56);

        $r54 = <java.lang.System: java.io.PrintStream out>;

        $r145 = new java.lang.StringBuffer;

        specialinvoke $r145.<java.lang.StringBuffer: void <init>()>();

        $r55 = virtualinvoke $r145.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Number of cast peephole optimizations:       ");

        $r55 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i18);

        $r56 = specialinvoke r0.<proguard.optimize.Optimizer: java.lang.String disabled(boolean)>($z18);

        $r55 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r56);

        $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r54.<java.io.PrintStream: void println(java.lang.String)>($r56);

        $r54 = <java.lang.System: java.io.PrintStream out>;

        $r145 = new java.lang.StringBuffer;

        specialinvoke $r145.<java.lang.StringBuffer: void <init>()>();

        $r55 = virtualinvoke $r145.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Number of field peephole optimizations:      ");

        $r55 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i19);

        $r56 = specialinvoke r0.<proguard.optimize.Optimizer: java.lang.String disabled(boolean)>($z19);

        $r55 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r56);

        $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r54.<java.io.PrintStream: void println(java.lang.String)>($r56);

        $r54 = <java.lang.System: java.io.PrintStream out>;

        $r145 = new java.lang.StringBuffer;

        specialinvoke $r145.<java.lang.StringBuffer: void <init>()>();

        $r55 = virtualinvoke $r145.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Number of branch peephole optimizations:     ");

        $r55 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i20);

        $r56 = specialinvoke r0.<proguard.optimize.Optimizer: java.lang.String disabled(boolean)>($z20);

        $r55 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r56);

        $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r54.<java.io.PrintStream: void println(java.lang.String)>($r56);

        $r54 = <java.lang.System: java.io.PrintStream out>;

        $r145 = new java.lang.StringBuffer;

        specialinvoke $r145.<java.lang.StringBuffer: void <init>()>();

        $r55 = virtualinvoke $r145.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Number of simplified instructions:           ");

        $r55 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i21);

        $r56 = specialinvoke r0.<proguard.optimize.Optimizer: java.lang.String disabled(boolean)>($z21);

        $r55 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r56);

        $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r54.<java.io.PrintStream: void println(java.lang.String)>($r56);

        $r54 = <java.lang.System: java.io.PrintStream out>;

        $r145 = new java.lang.StringBuffer;

        specialinvoke $r145.<java.lang.StringBuffer: void <init>()>();

        $r55 = virtualinvoke $r145.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Number of removed instructions:              ");

        $r55 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i22);

        $r56 = specialinvoke r0.<proguard.optimize.Optimizer: java.lang.String disabled(boolean)>($z22);

        $r55 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r56);

        $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r54.<java.io.PrintStream: void println(java.lang.String)>($r56);

        $r54 = <java.lang.System: java.io.PrintStream out>;

        $r145 = new java.lang.StringBuffer;

        specialinvoke $r145.<java.lang.StringBuffer: void <init>()>();

        $r55 = virtualinvoke $r145.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Number of removed local variables:           ");

        $r55 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i23);

        $r56 = specialinvoke r0.<proguard.optimize.Optimizer: java.lang.String disabled(boolean)>($z24);

        $r55 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r56);

        $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r54.<java.io.PrintStream: void println(java.lang.String)>($r56);

        $r54 = <java.lang.System: java.io.PrintStream out>;

        $r145 = new java.lang.StringBuffer;

        specialinvoke $r145.<java.lang.StringBuffer: void <init>()>();

        $r55 = virtualinvoke $r145.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Number of removed exception blocks:          ");

        $r55 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i24);

        $r56 = specialinvoke r0.<proguard.optimize.Optimizer: java.lang.String disabled(boolean)>($z25);

        $r55 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r56);

        $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r54.<java.io.PrintStream: void println(java.lang.String)>($r56);

        $r54 = <java.lang.System: java.io.PrintStream out>;

        $r145 = new java.lang.StringBuffer;

        specialinvoke $r145.<java.lang.StringBuffer: void <init>()>();

        $r55 = virtualinvoke $r145.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Number of optimized local variable frames:   ");

        $r55 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i25);

        $r56 = specialinvoke r0.<proguard.optimize.Optimizer: java.lang.String disabled(boolean)>($z26);

        $r55 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r56);

        $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r54.<java.io.PrintStream: void println(java.lang.String)>($r56);

     label56:
        if $i0 > 0 goto label57;

        if $i1 > 0 goto label57;

        if $i2 > 0 goto label57;

        if $i3 > 0 goto label57;

        if $i4 > 0 goto label57;

        if $i6 > 0 goto label57;

        if $i7 > 0 goto label57;

        if $i8 > 0 goto label57;

        if $i5 > 0 goto label57;

        if $i9 > 0 goto label57;

        if $i10 > 0 goto label57;

        if $i11 > 0 goto label57;

        if $i12 > 0 goto label57;

        if $i13 > 0 goto label57;

        if $i14 > 0 goto label57;

        if $i15 > 0 goto label57;

        if $i16 > 0 goto label57;

        if $i17 > 0 goto label57;

        if $i18 > 0 goto label57;

        if $i19 > 0 goto label57;

        if $i20 > 0 goto label57;

        if $i21 > 0 goto label57;

        if $i22 > 0 goto label57;

        if $i23 > 0 goto label57;

        if $i24 > 0 goto label57;

        if $i25 <= 0 goto label68;

     label57:
        return 1;

     label58:
        $r146 = new proguard.util.ConstantMatcher;

        $r11 = $r146;

        specialinvoke $r146.<proguard.util.ConstantMatcher: void <init>(boolean)>(1);

        goto label02;

     label59:
        $z21 = 0;

        goto label04;

     label60:
        $z22 = 0;

        goto label06;

     label61:
        $z23 = 0;

        goto label08;

     label62:
        $z25 = 0;

        goto label10;

     label63:
        $r82 = new proguard.classfile.visitor.AllFieldVisitor;

        $r80 = new proguard.optimize.info.ReadWriteFieldMarker;

        specialinvoke $r80.<proguard.optimize.info.ReadWriteFieldMarker: void <init>()>();

        specialinvoke $r82.<proguard.classfile.visitor.AllFieldVisitor: void <init>(proguard.classfile.visitor.MemberVisitor)>($r80);

        virtualinvoke $r1.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r82);

        goto label14;

     label64:
        $z27 = 0;

        goto label15;

     label65:
        $z28 = 0;

        goto label16;

     label66:
        $z27 = 0;

        goto label20;

     label67:
        if $z22 == 0 goto label26;

        $r72 = new proguard.classfile.visitor.AllMethodVisitor;

        $r71 = new proguard.classfile.attribute.visitor.AllAttributeVisitor;

        $r147 = new proguard.classfile.editor.StackSizeUpdater;

        specialinvoke $r147.<proguard.classfile.editor.StackSizeUpdater: void <init>()>();

        specialinvoke $r71.<proguard.classfile.attribute.visitor.AllAttributeVisitor: void <init>(proguard.classfile.attribute.visitor.AttributeVisitor)>($r147);

        specialinvoke $r72.<proguard.classfile.visitor.AllMethodVisitor: void <init>(proguard.classfile.visitor.MemberVisitor)>($r71);

        virtualinvoke $r1.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r72);

        goto label26;

     label68:
        return 0;
    }
}
