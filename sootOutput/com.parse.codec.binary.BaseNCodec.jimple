public abstract class com.parse.codec.binary.BaseNCodec extends java.lang.Object implements com.parse.codec.BinaryDecoder, com.parse.codec.BinaryEncoder
{
    private static final int DEFAULT_BUFFER_RESIZE_FACTOR;
    private static final int DEFAULT_BUFFER_SIZE;
    protected static final int MASK_8BITS;
    public static final int MIME_CHUNK_SIZE;
    protected static final byte PAD_DEFAULT;
    public static final int PEM_CHUNK_SIZE;
    protected final byte PAD;
    protected byte[] buffer;
    private final int chunkSeparatorLength;
    protected int currentLinePos;
    private final int encodedBlockSize;
    protected boolean eof;
    protected final int lineLength;
    protected int modulus;
    protected int pos;
    private int readPos;
    private final int unencodedBlockSize;

    protected void <init>(int, int, int, int)
    {
        int $i0, $i1, $i2, $i3;
        com.parse.codec.binary.BaseNCodec r0;

        r0 := @this: com.parse.codec.binary.BaseNCodec;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.parse.codec.binary.BaseNCodec: byte PAD> = 61;

        r0.<com.parse.codec.binary.BaseNCodec: int unencodedBlockSize> = 3;

        r0.<com.parse.codec.binary.BaseNCodec: int encodedBlockSize> = 4;

        if $i2 <= 0 goto label2;

        if $i3 <= 0 goto label2;

        $i0 = $i2 / 4;

        $i0 = $i0 * 4;

     label1:
        r0.<com.parse.codec.binary.BaseNCodec: int lineLength> = $i0;

        r0.<com.parse.codec.binary.BaseNCodec: int chunkSeparatorLength> = $i3;

        return;

     label2:
        $i0 = 0;

        goto label1;
    }

    protected static boolean isWhiteSpace(byte)
    {
        int $i1;
        byte $b0;

        $b0 := @parameter0: byte;

        $i1 = (int) $b0;

        lookupswitch($i1)
        {
            case 9: goto label2;
            case 10: goto label2;
            case 13: goto label2;
            case 32: goto label2;
            default: goto label1;
        };

     label1:
        return 0;

     label2:
        return 1;
    }

    private void reset()
    {
        com.parse.codec.binary.BaseNCodec r0;

        r0 := @this: com.parse.codec.binary.BaseNCodec;

        r0.<com.parse.codec.binary.BaseNCodec: byte[] buffer> = null;

        r0.<com.parse.codec.binary.BaseNCodec: int pos> = 0;

        r0.<com.parse.codec.binary.BaseNCodec: int readPos> = 0;

        r0.<com.parse.codec.binary.BaseNCodec: int currentLinePos> = 0;

        r0.<com.parse.codec.binary.BaseNCodec: int modulus> = 0;

        r0.<com.parse.codec.binary.BaseNCodec: boolean eof> = 0;

        return;
    }

    private void resizeBuffer()
    {
        byte[] $r1, $r2, $r3;
        int $i0;
        com.parse.codec.binary.BaseNCodec r0;

        r0 := @this: com.parse.codec.binary.BaseNCodec;

        $r1 = r0.<com.parse.codec.binary.BaseNCodec: byte[] buffer>;

        if $r1 != null goto label1;

        $r1 = newarray (byte)[8192];

        r0.<com.parse.codec.binary.BaseNCodec: byte[] buffer> = $r1;

        r0.<com.parse.codec.binary.BaseNCodec: int pos> = 0;

        r0.<com.parse.codec.binary.BaseNCodec: int readPos> = 0;

        return;

     label1:
        $r1 = r0.<com.parse.codec.binary.BaseNCodec: byte[] buffer>;

        $i0 = lengthof $r1;

        $i0 = $i0 * 2;

        $r2 = newarray (byte)[$i0];

        $r1 = r0.<com.parse.codec.binary.BaseNCodec: byte[] buffer>;

        $r3 = r0.<com.parse.codec.binary.BaseNCodec: byte[] buffer>;

        $i0 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, 0, $i0);

        r0.<com.parse.codec.binary.BaseNCodec: byte[] buffer> = $r2;

        return;
    }

    int available()
    {
        byte[] $r1;
        int $i0, $i1;
        com.parse.codec.binary.BaseNCodec r0;

        r0 := @this: com.parse.codec.binary.BaseNCodec;

        $r1 = r0.<com.parse.codec.binary.BaseNCodec: byte[] buffer>;

        if $r1 == null goto label1;

        $i1 = r0.<com.parse.codec.binary.BaseNCodec: int pos>;

        $i0 = r0.<com.parse.codec.binary.BaseNCodec: int readPos>;

        $i0 = $i1 - $i0;

        return $i0;

     label1:
        return 0;
    }

    protected boolean containsAlphabetOrPad(byte[])
    {
        byte[] $r1;
        byte $b0;
        int $i1, $i2;
        com.parse.codec.binary.BaseNCodec r0;
        boolean $z0;

        r0 := @this: com.parse.codec.binary.BaseNCodec;

        $r1 := @parameter0: byte[];

        if $r1 != null goto label1;

        return 0;

     label1:
        $i1 = 0;

     label2:
        $i2 = lengthof $r1;

        if $i1 >= $i2 goto label5;

        $b0 = $r1[$i1];

        $i2 = (int) $b0;

        if 61 == $i2 goto label3;

        $b0 = $r1[$i1];

        $z0 = virtualinvoke r0.<com.parse.codec.binary.BaseNCodec: boolean isInAlphabet(byte)>($b0);

        if $z0 == 0 goto label4;

     label3:
        return 1;

     label4:
        $i1 = $i1 + 1;

        goto label2;

     label5:
        return 0;
    }

    public java.lang.Object decode(java.lang.Object)
    {
        byte[] $r2;
        com.parse.codec.binary.BaseNCodec r0;
        java.lang.Object $r1;
        java.lang.String $r3;
        com.parse.codec.DecoderException $r4;
        boolean $z0;

        r0 := @this: com.parse.codec.binary.BaseNCodec;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof byte[];

        if $z0 == 0 goto label1;

        $r2 = (byte[]) $r1;

        $r2 = virtualinvoke r0.<com.parse.codec.binary.BaseNCodec: byte[] decode(byte[])>($r2);

        return $r2;

     label1:
        $z0 = $r1 instanceof java.lang.String;

        if $z0 == 0 goto label2;

        $r3 = (java.lang.String) $r1;

        $r2 = virtualinvoke r0.<com.parse.codec.binary.BaseNCodec: byte[] decode(java.lang.String)>($r3);

        return $r2;

     label2:
        $r4 = new com.parse.codec.DecoderException;

        specialinvoke $r4.<com.parse.codec.DecoderException: void <init>(java.lang.String)>("Parameter supplied to Base-N decode is not a byte[] or a String");

        throw $r4;
    }

    abstract void decode(byte[], int, int);

    public byte[] decode(java.lang.String)
    {
        com.parse.codec.binary.BaseNCodec r0;
        byte[] $r2;
        java.lang.String $r1;

        r0 := @this: com.parse.codec.binary.BaseNCodec;

        $r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <com.parse.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>($r1);

        $r2 = virtualinvoke r0.<com.parse.codec.binary.BaseNCodec: byte[] decode(byte[])>($r2);

        return $r2;
    }

    public byte[] decode(byte[])
    {
        int $i0;
        com.parse.codec.binary.BaseNCodec r0;
        byte[] $r1;

        r0 := @this: com.parse.codec.binary.BaseNCodec;

        $r1 := @parameter0: byte[];

        specialinvoke r0.<com.parse.codec.binary.BaseNCodec: void reset()>();

        if $r1 == null goto label2;

        $i0 = lengthof $r1;

        if $i0 != 0 goto label1;

        return $r1;

     label1:
        $i0 = lengthof $r1;

        virtualinvoke r0.<com.parse.codec.binary.BaseNCodec: void decode(byte[],int,int)>($r1, 0, $i0);

        virtualinvoke r0.<com.parse.codec.binary.BaseNCodec: void decode(byte[],int,int)>($r1, 0, -1);

        $i0 = r0.<com.parse.codec.binary.BaseNCodec: int pos>;

        $r1 = newarray (byte)[$i0];

        $i0 = lengthof $r1;

        virtualinvoke r0.<com.parse.codec.binary.BaseNCodec: int readResults(byte[],int,int)>($r1, 0, $i0);

     label2:
        return $r1;
    }

    public java.lang.Object encode(java.lang.Object)
    {
        byte[] $r1;
        com.parse.codec.binary.BaseNCodec r0;
        java.lang.Object $r2;
        com.parse.codec.EncoderException $r3;
        boolean $z0;

        r0 := @this: com.parse.codec.binary.BaseNCodec;

        $r2 := @parameter0: java.lang.Object;

        $z0 = $r2 instanceof byte[];

        if $z0 != 0 goto label1;

        $r3 = new com.parse.codec.EncoderException;

        specialinvoke $r3.<com.parse.codec.EncoderException: void <init>(java.lang.String)>("Parameter supplied to Base-N encode is not a byte[]");

        throw $r3;

     label1:
        $r1 = (byte[]) $r2;

        $r1 = virtualinvoke r0.<com.parse.codec.binary.BaseNCodec: byte[] encode(byte[])>($r1);

        return $r1;
    }

    abstract void encode(byte[], int, int);

    public byte[] encode(byte[])
    {
        byte[] $r1;
        int $i0, $i1;
        com.parse.codec.binary.BaseNCodec r0;

        r0 := @this: com.parse.codec.binary.BaseNCodec;

        $r1 := @parameter0: byte[];

        specialinvoke r0.<com.parse.codec.binary.BaseNCodec: void reset()>();

        if $r1 == null goto label2;

        $i0 = lengthof $r1;

        if $i0 != 0 goto label1;

        return $r1;

     label1:
        $i0 = lengthof $r1;

        virtualinvoke r0.<com.parse.codec.binary.BaseNCodec: void encode(byte[],int,int)>($r1, 0, $i0);

        virtualinvoke r0.<com.parse.codec.binary.BaseNCodec: void encode(byte[],int,int)>($r1, 0, -1);

        $i1 = r0.<com.parse.codec.binary.BaseNCodec: int pos>;

        $i0 = r0.<com.parse.codec.binary.BaseNCodec: int readPos>;

        $i0 = $i1 - $i0;

        $r1 = newarray (byte)[$i0];

        $i0 = lengthof $r1;

        virtualinvoke r0.<com.parse.codec.binary.BaseNCodec: int readResults(byte[],int,int)>($r1, 0, $i0);

     label2:
        return $r1;
    }

    public java.lang.String encodeAsString(byte[])
    {
        com.parse.codec.binary.BaseNCodec r0;
        byte[] $r1;
        java.lang.String $r2;

        r0 := @this: com.parse.codec.binary.BaseNCodec;

        $r1 := @parameter0: byte[];

        $r1 = virtualinvoke r0.<com.parse.codec.binary.BaseNCodec: byte[] encode(byte[])>($r1);

        $r2 = staticinvoke <com.parse.codec.binary.StringUtils: java.lang.String newStringUtf8(byte[])>($r1);

        return $r2;
    }

    public java.lang.String encodeToString(byte[])
    {
        com.parse.codec.binary.BaseNCodec r0;
        byte[] $r1;
        java.lang.String $r2;

        r0 := @this: com.parse.codec.binary.BaseNCodec;

        $r1 := @parameter0: byte[];

        $r1 = virtualinvoke r0.<com.parse.codec.binary.BaseNCodec: byte[] encode(byte[])>($r1);

        $r2 = staticinvoke <com.parse.codec.binary.StringUtils: java.lang.String newStringUtf8(byte[])>($r1);

        return $r2;
    }

    protected void ensureBufferSize(int)
    {
        byte[] $r1;
        int $i0, $i1, $i2;
        com.parse.codec.binary.BaseNCodec r0;

        r0 := @this: com.parse.codec.binary.BaseNCodec;

        $i0 := @parameter0: int;

        $r1 = r0.<com.parse.codec.binary.BaseNCodec: byte[] buffer>;

        if $r1 == null goto label1;

        $r1 = r0.<com.parse.codec.binary.BaseNCodec: byte[] buffer>;

        $i1 = lengthof $r1;

        $i2 = r0.<com.parse.codec.binary.BaseNCodec: int pos>;

        $i0 = $i2 + $i0;

        if $i1 >= $i0 goto label2;

     label1:
        specialinvoke r0.<com.parse.codec.binary.BaseNCodec: void resizeBuffer()>();

     label2:
        return;
    }

    protected int getDefaultBufferSize()
    {
        com.parse.codec.binary.BaseNCodec r0;

        r0 := @this: com.parse.codec.binary.BaseNCodec;

        return 8192;
    }

    public long getEncodedLength(byte[])
    {
        byte[] $r1;
        int $i0, $i1;
        com.parse.codec.binary.BaseNCodec r0;
        long $l2, $l3, $l4;

        r0 := @this: com.parse.codec.binary.BaseNCodec;

        $r1 := @parameter0: byte[];

        $i0 = lengthof $r1;

        $i1 = r0.<com.parse.codec.binary.BaseNCodec: int unencodedBlockSize>;

        $i0 = $i0 + $i1;

        $i0 = $i0 + -1;

        $i1 = r0.<com.parse.codec.binary.BaseNCodec: int unencodedBlockSize>;

        $i0 = $i0 / $i1;

        $l2 = (long) $i0;

        $i0 = r0.<com.parse.codec.binary.BaseNCodec: int encodedBlockSize>;

        $l3 = (long) $i0;

        $l2 = $l2 * $l3;

        $i0 = r0.<com.parse.codec.binary.BaseNCodec: int lineLength>;

        if $i0 <= 0 goto label1;

        $i0 = r0.<com.parse.codec.binary.BaseNCodec: int lineLength>;

        $l3 = (long) $i0;

        $l3 = $l3 + $l2;

        $l3 = $l3 - 1L;

        $i0 = r0.<com.parse.codec.binary.BaseNCodec: int lineLength>;

        $l4 = (long) $i0;

        $l3 = $l3 / $l4;

        $i0 = r0.<com.parse.codec.binary.BaseNCodec: int chunkSeparatorLength>;

        $l4 = (long) $i0;

        $l3 = $l3 * $l4;

        $l2 = $l2 + $l3;

     label1:
        return $l2;
    }

    boolean hasData()
    {
        com.parse.codec.binary.BaseNCodec r0;
        byte[] $r1;

        r0 := @this: com.parse.codec.binary.BaseNCodec;

        $r1 = r0.<com.parse.codec.binary.BaseNCodec: byte[] buffer>;

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    protected abstract boolean isInAlphabet(byte);

    public boolean isInAlphabet(java.lang.String)
    {
        byte[] $r2;
        com.parse.codec.binary.BaseNCodec r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: com.parse.codec.binary.BaseNCodec;

        $r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <com.parse.codec.binary.StringUtils: byte[] getBytesUtf8(java.lang.String)>($r1);

        $z0 = virtualinvoke r0.<com.parse.codec.binary.BaseNCodec: boolean isInAlphabet(byte[],boolean)>($r2, 1);

        return $z0;
    }

    public boolean isInAlphabet(byte[], boolean)
    {
        byte[] $r1;
        byte $b2;
        int $i0, $i1;
        com.parse.codec.binary.BaseNCodec r0;
        boolean $z0, $z1;

        r0 := @this: com.parse.codec.binary.BaseNCodec;

        $r1 := @parameter0: byte[];

        $z0 := @parameter1: boolean;

        $i0 = 0;

     label1:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label3;

        $b2 = $r1[$i0];

        $z1 = virtualinvoke r0.<com.parse.codec.binary.BaseNCodec: boolean isInAlphabet(byte)>($b2);

        if $z1 != 0 goto label2;

        if $z0 == 0 goto label4;

        $b2 = $r1[$i0];

        $i1 = (int) $b2;

        if $i1 == 61 goto label2;

        $b2 = $r1[$i0];

        $z1 = staticinvoke <com.parse.codec.binary.BaseNCodec: boolean isWhiteSpace(byte)>($b2);

        if $z1 != 0 goto label2;

        return 0;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        return 1;

     label4:
        return 0;
    }

    int readResults(byte[], int, int)
    {
        byte[] $r1, $r2;
        int $i0, $i1, $i2;
        com.parse.codec.binary.BaseNCodec r0;
        boolean $z0;

        r0 := @this: com.parse.codec.binary.BaseNCodec;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = r0.<com.parse.codec.binary.BaseNCodec: byte[] buffer>;

        if $r2 == null goto label1;

        $i2 = virtualinvoke r0.<com.parse.codec.binary.BaseNCodec: int available()>();

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i1);

        $r2 = r0.<com.parse.codec.binary.BaseNCodec: byte[] buffer>;

        $i2 = r0.<com.parse.codec.binary.BaseNCodec: int readPos>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i2, $r1, $i0, $i1);

        $i0 = r0.<com.parse.codec.binary.BaseNCodec: int readPos>;

        $i0 = $i0 + $i1;

        r0.<com.parse.codec.binary.BaseNCodec: int readPos> = $i0;

        $i0 = r0.<com.parse.codec.binary.BaseNCodec: int readPos>;

        $i2 = r0.<com.parse.codec.binary.BaseNCodec: int pos>;

        if $i0 < $i2 goto label3;

        r0.<com.parse.codec.binary.BaseNCodec: byte[] buffer> = null;

        return $i1;

     label1:
        $z0 = r0.<com.parse.codec.binary.BaseNCodec: boolean eof>;

        if $z0 == 0 goto label2;

        return -1;

     label2:
        return 0;

     label3:
        return $i1;
    }

    public static void <clinit>()
    {
        <com.parse.codec.binary.BaseNCodec: int PEM_CHUNK_SIZE> = 64;

        <com.parse.codec.binary.BaseNCodec: byte PAD_DEFAULT> = 61;

        <com.parse.codec.binary.BaseNCodec: int MIME_CHUNK_SIZE> = 76;

        <com.parse.codec.binary.BaseNCodec: int MASK_8BITS> = 255;

        <com.parse.codec.binary.BaseNCodec: int DEFAULT_BUFFER_SIZE> = 8192;

        <com.parse.codec.binary.BaseNCodec: int DEFAULT_BUFFER_RESIZE_FACTOR> = 2;

        return;
    }
}
