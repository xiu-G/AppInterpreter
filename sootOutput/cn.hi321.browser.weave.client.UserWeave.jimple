public class cn.hi321.browser.weave.client.UserWeave extends java.lang.Object
{
    private final java.net.URI m_authUri;
    private final java.util.concurrent.atomic.AtomicReference m_clusterUri;
    private final java.lang.String m_legalUsername;
    private final java.lang.String m_password;
    private final cn.hi321.browser.weave.client.WeaveTransport m_transport;
    private final java.lang.String m_userId;

    void <init>(cn.hi321.browser.weave.client.WeaveTransport, java.net.URI, java.lang.String, java.lang.String)
    {
        cn.hi321.browser.weave.client.UserWeave r0;
        cn.hi321.browser.weave.client.WeaveTransport $r1;
        java.net.URI $r2;
        java.lang.String $r3, $r4;

        r0 := @this: cn.hi321.browser.weave.client.UserWeave;

        $r1 := @parameter0: cn.hi321.browser.weave.client.WeaveTransport;

        $r2 := @parameter1: java.net.URI;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.lang.String;

        specialinvoke r0.<cn.hi321.browser.weave.client.UserWeave: void <init>(cn.hi321.browser.weave.client.WeaveTransport,java.net.URI,java.lang.String,java.lang.String,java.net.URI)>($r1, $r2, $r3, $r4, null);

        return;
    }

    protected void <init>(cn.hi321.browser.weave.client.WeaveTransport, java.net.URI, java.lang.String, java.lang.String, java.net.URI)
    {
        cn.hi321.browser.weave.client.UserWeave r0;
        cn.hi321.browser.weave.client.WeaveTransport $r1;
        cn.hi321.browser.weave.client.WeaveCryptoUtil $r6;
        java.util.concurrent.atomic.AtomicReference $r7;
        java.net.URI $r2, $r5;
        java.lang.String $r3, $r4;

        r0 := @this: cn.hi321.browser.weave.client.UserWeave;

        $r1 := @parameter0: cn.hi321.browser.weave.client.WeaveTransport;

        $r2 := @parameter1: java.net.URI;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.lang.String;

        $r5 := @parameter4: java.net.URI;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<cn.hi321.browser.weave.client.UserWeave: java.net.URI m_authUri> = $r2;

        r0.<cn.hi321.browser.weave.client.UserWeave: java.lang.String m_userId> = $r3;

        $r6 = staticinvoke <cn.hi321.browser.weave.client.WeaveCryptoUtil: cn.hi321.browser.weave.client.WeaveCryptoUtil getInstance()>();

        $r3 = virtualinvoke $r6.<cn.hi321.browser.weave.client.WeaveCryptoUtil: java.lang.String legalizeUsername(java.lang.String)>($r3);

        r0.<cn.hi321.browser.weave.client.UserWeave: java.lang.String m_legalUsername> = $r3;

        r0.<cn.hi321.browser.weave.client.UserWeave: java.lang.String m_password> = $r4;

        r0.<cn.hi321.browser.weave.client.UserWeave: cn.hi321.browser.weave.client.WeaveTransport m_transport> = $r1;

        $r7 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r7.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>(null);

        r0.<cn.hi321.browser.weave.client.UserWeave: java.util.concurrent.atomic.AtomicReference m_clusterUri> = $r7;

        return;
    }

    protected static java.net.URI buildSyncUriFromSubpath(java.net.URI, java.lang.String, cn.hi321.browser.weave.client.QueryParams, java.lang.String)
    {
        cn.hi321.browser.weave.client.WeaveUtil$UriBuilder $r6;
        cn.hi321.browser.weave.client.QueryParams $r2;
        java.lang.StringBuilder $r5;
        java.net.URI $r0;
        java.lang.String $r1, $r3, r4;
        boolean $z0;

        $r0 := @parameter0: java.net.URI;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: cn.hi321.browser.weave.client.QueryParams;

        $r3 := @parameter3: java.lang.String;

        r4 = $r3;

        goto label1;

     label1:
        staticinvoke <cn.hi321.browser.weave.client.WeaveUtil: void checkNull(java.net.URI)>($r0);

        $r6 = staticinvoke <cn.hi321.browser.weave.client.WeaveUtil: cn.hi321.browser.weave.client.WeaveUtil$UriBuilder buildUpon(java.net.URI)>($r0);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("1.0/");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<cn.hi321.browser.weave.client.WeaveUtil$UriBuilder: void appendEncodedPath(java.lang.String)>($r1);

     label2:
        $z0 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("/");

        if $z0 != 0 goto label3;

        virtualinvoke $r6.<cn.hi321.browser.weave.client.WeaveUtil$UriBuilder: void appendEncodedPath(java.lang.String)>(r4);

        $r0 = virtualinvoke $r6.<cn.hi321.browser.weave.client.WeaveUtil$UriBuilder: java.net.URI build()>();

        return $r0;

     label3:
        r4 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int)>(1);

        goto label2;
    }

    protected static java.net.URI buildSyncUriFromSubpath(java.net.URI, java.lang.String, java.lang.String)
    {
        java.net.URI $r0;
        java.lang.String $r1, $r2;

        $r0 := @parameter0: java.net.URI;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r0 = staticinvoke <cn.hi321.browser.weave.client.UserWeave: java.net.URI buildSyncUriFromSubpath(java.net.URI,java.lang.String,cn.hi321.browser.weave.client.QueryParams,java.lang.String)>($r0, $r1, null, $r2);

        return $r0;
    }

    protected static java.net.URI buildUserUriFromSubpath(java.net.URI, java.lang.String, java.lang.String)
    {
        cn.hi321.browser.weave.client.WeaveUtil$UriBuilder $r3;
        java.lang.StringBuilder $r4;
        java.net.URI $r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        $r0 := @parameter0: java.net.URI;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        staticinvoke <cn.hi321.browser.weave.client.WeaveUtil: void checkNull(java.net.URI)>($r0);

        $r3 = staticinvoke <cn.hi321.browser.weave.client.WeaveUtil: cn.hi321.browser.weave.client.WeaveUtil$UriBuilder buildUpon(java.net.URI)>($r0);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("user/1.0/");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<cn.hi321.browser.weave.client.WeaveUtil$UriBuilder: void appendEncodedPath(java.lang.String)>($r1);

     label1:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("/");

        if $z0 != 0 goto label2;

        virtualinvoke $r3.<cn.hi321.browser.weave.client.WeaveUtil$UriBuilder: void appendEncodedPath(java.lang.String)>($r2);

        $r0 = virtualinvoke $r3.<cn.hi321.browser.weave.client.WeaveUtil$UriBuilder: java.net.URI build()>();

        return $r0;

     label2:
        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>(1);

        goto label1;
    }

    private java.net.URI getClusterUriSafe()
    {
        cn.hi321.browser.weave.client.UserWeave r0;
        java.net.URI $r2, r3;
        java.lang.Exception $r1;

        r0 := @this: cn.hi321.browser.weave.client.UserWeave;

        r3 = r0.<cn.hi321.browser.weave.client.UserWeave: java.net.URI m_authUri>;

     label1:
        $r2 = specialinvoke r0.<cn.hi321.browser.weave.client.UserWeave: java.net.URI getClusterUriUnsafe()>();

     label2:
        if $r2 == null goto label4;

        return $r2;

     label3:
        $r1 := @caughtexception;

     label4:
        return r3;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private java.net.URI getClusterUriUnsafe() throws cn.hi321.browser.weave.client.WeaveException
    {
        java.lang.Throwable r1;
        cn.hi321.browser.weave.client.UserWeave r0;
        java.lang.String $r3;
        java.net.URI $r4;
        cn.hi321.browser.weave.client.WeaveResponse $r2;
        cn.hi321.browser.weave.client.WeaveException $r5;

        r0 := @this: cn.hi321.browser.weave.client.UserWeave;

     label1:
        $r2 = virtualinvoke r0.<cn.hi321.browser.weave.client.UserWeave: cn.hi321.browser.weave.client.WeaveResponse getUserNode(java.lang.String)>("/node/weave");

        $r3 = virtualinvoke $r2.<cn.hi321.browser.weave.client.WeaveResponse: java.lang.String getBody()>();

     label2:
        $r4 = new java.net.URI;

     label3:
        specialinvoke $r4.<java.net.URI: void <init>(java.lang.String)>($r3);

     label4:
        return $r4;

     label5:
        r1 := @caughtexception;

        $r5 = new cn.hi321.browser.weave.client.WeaveException;

        specialinvoke $r5.<cn.hi321.browser.weave.client.WeaveException: void <init>(java.lang.Throwable)>(r1);

        throw $r5;

        catch java.net.URISyntaxException from label1 to label2 with label5;
        catch java.net.URISyntaxException from label3 to label4 with label5;
    }

    public void authenticate() throws cn.hi321.browser.weave.client.WeaveException
    {
        cn.hi321.browser.weave.client.QueryResult $r2;
        org.json.JSONObject r4;
        cn.hi321.browser.weave.client.UserWeave r0;
        java.lang.Object $r3;
        cn.hi321.browser.weave.client.UserWeave$HashNode $r1;

        r0 := @this: cn.hi321.browser.weave.client.UserWeave;

        $r1 = <cn.hi321.browser.weave.client.UserWeave$HashNode: cn.hi321.browser.weave.client.UserWeave$HashNode INFO_COLLECTIONS>;

        $r2 = virtualinvoke r0.<cn.hi321.browser.weave.client.UserWeave: cn.hi321.browser.weave.client.QueryResult getNode(cn.hi321.browser.weave.client.UserWeave$HashNode)>($r1);

        $r3 = virtualinvoke $r2.<cn.hi321.browser.weave.client.QueryResult: java.lang.Object getValue()>();

        r4 = (org.json.JSONObject) $r3;

        virtualinvoke r4.<org.json.JSONObject: boolean has(java.lang.String)>("foo");

        return;
    }

    public void authenticateSecret(char[]) throws cn.hi321.browser.weave.client.WeaveException
    {
        char[] $r1;
        cn.hi321.browser.weave.client.UserWeave r0;

        r0 := @this: cn.hi321.browser.weave.client.UserWeave;

        $r1 := @parameter0: char[];

        virtualinvoke r0.<cn.hi321.browser.weave.client.UserWeave: void authenticate()>();

        return;
    }

    public java.net.URI buildSyncUriFromSubpath(java.lang.String) throws cn.hi321.browser.weave.client.WeaveException
    {
        cn.hi321.browser.weave.client.UserWeave r0;
        java.lang.String $r1, $r3;
        java.net.URI $r2;

        r0 := @this: cn.hi321.browser.weave.client.UserWeave;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<cn.hi321.browser.weave.client.UserWeave: java.net.URI getClusterUri()>();

        $r3 = virtualinvoke r0.<cn.hi321.browser.weave.client.UserWeave: java.lang.String getLegalUsername()>();

        $r2 = staticinvoke <cn.hi321.browser.weave.client.UserWeave: java.net.URI buildSyncUriFromSubpath(java.net.URI,java.lang.String,java.lang.String)>($r2, $r3, $r1);

        return $r2;
    }

    public java.net.URI buildUserUriFromSubpath(java.lang.String)
    {
        cn.hi321.browser.weave.client.UserWeave r0;
        java.lang.String $r1, $r3;
        java.net.URI $r2;

        r0 := @this: cn.hi321.browser.weave.client.UserWeave;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<cn.hi321.browser.weave.client.UserWeave: java.net.URI m_authUri>;

        $r3 = virtualinvoke r0.<cn.hi321.browser.weave.client.UserWeave: java.lang.String getLegalUsername()>();

        $r2 = staticinvoke <cn.hi321.browser.weave.client.UserWeave: java.net.URI buildUserUriFromSubpath(java.net.URI,java.lang.String,java.lang.String)>($r2, $r3, $r1);

        return $r2;
    }

    public boolean checkUsernameAvailable() throws cn.hi321.browser.weave.client.WeaveException
    {
        java.lang.Throwable r1;
        cn.hi321.browser.weave.client.UserWeave r0;
        int $i0;
        java.lang.String $r3;
        cn.hi321.browser.weave.client.WeaveResponse $r2;
        cn.hi321.browser.weave.client.WeaveException $r4;

        r0 := @this: cn.hi321.browser.weave.client.UserWeave;

     label1:
        $r2 = virtualinvoke r0.<cn.hi321.browser.weave.client.UserWeave: cn.hi321.browser.weave.client.WeaveResponse getUserNode(java.lang.String)>("/");

        $r3 = virtualinvoke $r2.<cn.hi321.browser.weave.client.WeaveResponse: java.lang.String getBody()>();

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

     label2:
        if $i0 != 0 goto label3;

        return 1;

     label3:
        return 0;

     label4:
        r1 := @caughtexception;

        $r4 = new cn.hi321.browser.weave.client.WeaveException;

        specialinvoke $r4.<cn.hi321.browser.weave.client.WeaveException: void <init>(java.lang.Throwable)>(r1);

        throw $r4;

        catch java.lang.NumberFormatException from label1 to label2 with label4;
    }

    protected cn.hi321.browser.weave.client.BulkKeyCouplet getBulkKeyPair(byte[]) throws java.security.GeneralSecurityException, cn.hi321.browser.weave.client.WeaveException
    {
        byte[] $r1, $r7;
        cn.hi321.browser.weave.client.WeaveBasicObject$WeaveEncryptedObject r5;
        cn.hi321.browser.weave.client.UserWeave r0;
        javax.crypto.spec.SecretKeySpec r2, r3;
        cn.hi321.browser.weave.client.BulkKeyCouplet $r11;
        org.json.JSONException r4;
        org.json.JSONObject $r8;
        java.lang.String $r6, $r10;
        org.json.JSONArray $r9;
        cn.hi321.browser.weave.client.WeaveException $r12;

        r0 := @this: cn.hi321.browser.weave.client.UserWeave;

        $r1 := @parameter0: byte[];

     label01:
        $r6 = virtualinvoke r0.<cn.hi321.browser.weave.client.UserWeave: java.lang.String getLegalUsername()>();

        $r7 = staticinvoke <cn.hi321.browser.weave.client.WeaveCryptoUtil: byte[] deriveSyncKey(byte[],java.lang.String)>($r1, $r6);

     label02:
        r2 = new javax.crypto.spec.SecretKeySpec;

     label03:
        specialinvoke r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r7, "AES");

        $r6 = virtualinvoke r0.<cn.hi321.browser.weave.client.UserWeave: java.lang.String getLegalUsername()>();

        $r1 = staticinvoke <cn.hi321.browser.weave.client.WeaveCryptoUtil: byte[] deriveSyncHmacKey(byte[],byte[],java.lang.String)>($r1, $r7, $r6);

     label04:
        r3 = new javax.crypto.spec.SecretKeySpec;

     label05:
        specialinvoke r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, "AES");

        $r8 = virtualinvoke r0.<cn.hi321.browser.weave.client.UserWeave: org.json.JSONObject getCryptoKeys()>();

     label06:
        r5 = new cn.hi321.browser.weave.client.WeaveBasicObject$WeaveEncryptedObject;

     label07:
        specialinvoke r5.<cn.hi321.browser.weave.client.WeaveBasicObject$WeaveEncryptedObject: void <init>(org.json.JSONObject)>($r8);

        $r8 = virtualinvoke r5.<cn.hi321.browser.weave.client.WeaveBasicObject$WeaveEncryptedObject: org.json.JSONObject decryptObject(java.security.Key,java.security.Key)>(r2, r3);

        $r9 = virtualinvoke $r8.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("default");

        $r6 = virtualinvoke $r9.<org.json.JSONArray: java.lang.String getString(int)>(0);

        $r10 = virtualinvoke $r9.<org.json.JSONArray: java.lang.String getString(int)>(1);

        $r1 = staticinvoke <cn.hi321.browser.weave.client.Base64: byte[] decode(java.lang.String)>($r6);

     label08:
        r3 = new javax.crypto.spec.SecretKeySpec;

     label09:
        specialinvoke r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, "AES");

        $r1 = staticinvoke <cn.hi321.browser.weave.client.Base64: byte[] decode(java.lang.String)>($r10);

     label10:
        r2 = new javax.crypto.spec.SecretKeySpec;

     label11:
        specialinvoke r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, "AES");

     label12:
        $r11 = new cn.hi321.browser.weave.client.BulkKeyCouplet;

     label13:
        specialinvoke $r11.<cn.hi321.browser.weave.client.BulkKeyCouplet: void <init>(java.security.Key,java.security.Key)>(r3, r2);

     label14:
        return $r11;

     label15:
        r4 := @caughtexception;

        $r12 = new cn.hi321.browser.weave.client.WeaveException;

        specialinvoke $r12.<cn.hi321.browser.weave.client.WeaveException: void <init>(java.lang.Throwable)>(r4);

        throw $r12;

        catch org.json.JSONException from label01 to label02 with label15;
        catch org.json.JSONException from label03 to label04 with label15;
        catch org.json.JSONException from label05 to label06 with label15;
        catch org.json.JSONException from label07 to label08 with label15;
        catch org.json.JSONException from label09 to label10 with label15;
        catch org.json.JSONException from label11 to label12 with label15;
        catch org.json.JSONException from label13 to label14 with label15;
    }

    public final java.net.URI getClusterUri() throws cn.hi321.browser.weave.client.WeaveException
    {
        java.net.URI $r1;
        cn.hi321.browser.weave.client.UserWeave r0;

        r0 := @this: cn.hi321.browser.weave.client.UserWeave;

        $r1 = virtualinvoke r0.<cn.hi321.browser.weave.client.UserWeave: java.net.URI getClusterUri(boolean)>(1);

        return $r1;
    }

    public final java.net.URI getClusterUri(boolean) throws cn.hi321.browser.weave.client.WeaveException
    {
        cn.hi321.browser.weave.client.UserWeave r0;
        java.lang.Object $r3;
        java.net.URI r1, $r4;
        java.util.concurrent.atomic.AtomicReference $r2;
        boolean $z0;

        r0 := @this: cn.hi321.browser.weave.client.UserWeave;

        $z0 := @parameter0: boolean;

        $r2 = r0.<cn.hi321.browser.weave.client.UserWeave: java.util.concurrent.atomic.AtomicReference m_clusterUri>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r1 = (java.net.URI) $r3;

        if r1 == null goto label1;

        return r1;

     label1:
        $r4 = specialinvoke r0.<cn.hi321.browser.weave.client.UserWeave: java.net.URI getClusterUriSafe()>();

        $r2 = r0.<cn.hi321.browser.weave.client.UserWeave: java.util.concurrent.atomic.AtomicReference m_clusterUri>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(r1, $r4);

        return $r4;
    }

    protected org.json.JSONObject getCryptoKeys() throws cn.hi321.browser.weave.client.WeaveException
    {
        cn.hi321.browser.weave.client.UserWeave r0;
        cn.hi321.browser.weave.client.WeaveResponse $r5;
        org.json.JSONException r1;
        org.json.JSONObject $r4;
        cn.hi321.browser.weave.client.WeaveBasicObject r2;
        java.net.URI $r3;
        java.lang.String $r6;
        cn.hi321.browser.weave.client.WeaveException $r7;

        r0 := @this: cn.hi321.browser.weave.client.UserWeave;

     label1:
        $r3 = virtualinvoke r0.<cn.hi321.browser.weave.client.UserWeave: java.net.URI buildSyncUriFromSubpath(java.lang.String)>("/storage/crypto/keys");

     label2:
        r2 = new cn.hi321.browser.weave.client.WeaveBasicObject;

        $r4 = new org.json.JSONObject;

     label3:
        $r5 = virtualinvoke r0.<cn.hi321.browser.weave.client.UserWeave: cn.hi321.browser.weave.client.WeaveResponse getNode(java.net.URI)>($r3);

        $r6 = virtualinvoke $r5.<cn.hi321.browser.weave.client.WeaveResponse: java.lang.String getBody()>();

        specialinvoke $r4.<org.json.JSONObject: void <init>(java.lang.String)>($r6);

        specialinvoke r2.<cn.hi321.browser.weave.client.WeaveBasicObject: void <init>(java.net.URI,org.json.JSONObject)>($r3, $r4);

        $r4 = virtualinvoke r2.<cn.hi321.browser.weave.client.WeaveBasicObject: org.json.JSONObject getPayload()>();

     label4:
        return $r4;

     label5:
        r1 := @caughtexception;

        $r7 = new cn.hi321.browser.weave.client.WeaveException;

        specialinvoke $r7.<cn.hi321.browser.weave.client.WeaveException: void <init>(java.lang.Throwable)>(r1);

        throw $r7;

        catch org.json.JSONException from label1 to label2 with label5;
        catch org.json.JSONException from label3 to label4 with label5;
    }

    public java.lang.String getLegalUsername()
    {
        java.lang.String r1;
        cn.hi321.browser.weave.client.UserWeave r0;

        r0 := @this: cn.hi321.browser.weave.client.UserWeave;

        r1 = r0.<cn.hi321.browser.weave.client.UserWeave: java.lang.String m_legalUsername>;

        return r1;
    }

    public cn.hi321.browser.weave.client.QueryResult getNode(cn.hi321.browser.weave.client.UserWeave$HashNode) throws cn.hi321.browser.weave.client.WeaveException
    {
        cn.hi321.browser.weave.client.QueryResult $r7;
        cn.hi321.browser.weave.client.UserWeave r0;
        cn.hi321.browser.weave.client.WeaveResponse $r6;
        org.json.JSONException r2;
        org.json.JSONObject $r3;
        java.lang.String $r4;
        java.net.URI $r5;
        cn.hi321.browser.weave.client.UserWeave$HashNode $r1;
        cn.hi321.browser.weave.client.WeaveException $r8;
        boolean $z0;

        r0 := @this: cn.hi321.browser.weave.client.UserWeave;

        $r1 := @parameter0: cn.hi321.browser.weave.client.UserWeave$HashNode;

        $z0 = $r1.<cn.hi321.browser.weave.client.UserWeave$HashNode: boolean userServer>;

        if $z0 == 0 goto label6;

        $r4 = $r1.<cn.hi321.browser.weave.client.UserWeave$HashNode: java.lang.String nodePath>;

     label1:
        $r5 = virtualinvoke r0.<cn.hi321.browser.weave.client.UserWeave: java.net.URI buildUserUriFromSubpath(java.lang.String)>($r4);

     label2:
        $r6 = virtualinvoke r0.<cn.hi321.browser.weave.client.UserWeave: cn.hi321.browser.weave.client.WeaveResponse getNode(java.net.URI)>($r5);

     label3:
        $r7 = new cn.hi321.browser.weave.client.QueryResult;

        $r3 = new org.json.JSONObject;

     label4:
        $r4 = virtualinvoke $r6.<cn.hi321.browser.weave.client.WeaveResponse: java.lang.String getBody()>();

        specialinvoke $r3.<org.json.JSONObject: void <init>(java.lang.String)>($r4);

        specialinvoke $r7.<cn.hi321.browser.weave.client.QueryResult: void <init>(cn.hi321.browser.weave.client.WeaveResponse,java.lang.Object)>($r6, $r3);

     label5:
        return $r7;

     label6:
        $r4 = $r1.<cn.hi321.browser.weave.client.UserWeave$HashNode: java.lang.String nodePath>;

     label7:
        $r5 = virtualinvoke r0.<cn.hi321.browser.weave.client.UserWeave: java.net.URI buildSyncUriFromSubpath(java.lang.String)>($r4);

     label8:
        goto label2;

     label9:
        r2 := @caughtexception;

        $r8 = new cn.hi321.browser.weave.client.WeaveException;

        specialinvoke $r8.<cn.hi321.browser.weave.client.WeaveException: void <init>(java.lang.Throwable)>(r2);

        throw $r8;

        catch org.json.JSONException from label1 to label2 with label9;
        catch org.json.JSONException from label2 to label3 with label9;
        catch org.json.JSONException from label4 to label5 with label9;
        catch org.json.JSONException from label7 to label8 with label9;
    }

    protected final cn.hi321.browser.weave.client.WeaveResponse getNode(java.net.URI) throws cn.hi321.browser.weave.client.WeaveException
    {
        java.lang.Throwable r2;
        cn.hi321.browser.weave.client.UserWeave r0;
        cn.hi321.browser.weave.client.WeaveTransport $r4;
        cn.hi321.browser.weave.client.WeaveResponse $r6;
        java.net.URI $r1;
        java.lang.String $r3, $r5;
        cn.hi321.browser.weave.client.WeaveException $r7;

        r0 := @this: cn.hi321.browser.weave.client.UserWeave;

        $r1 := @parameter0: java.net.URI;

        $r4 = r0.<cn.hi321.browser.weave.client.UserWeave: cn.hi321.browser.weave.client.WeaveTransport m_transport>;

     label1:
        $r5 = virtualinvoke r0.<cn.hi321.browser.weave.client.UserWeave: java.lang.String getLegalUsername()>();

     label2:
        $r3 = r0.<cn.hi321.browser.weave.client.UserWeave: java.lang.String m_password>;

     label3:
        $r6 = virtualinvoke $r4.<cn.hi321.browser.weave.client.WeaveTransport: cn.hi321.browser.weave.client.WeaveResponse execGetMethod(java.lang.String,java.lang.String,java.net.URI)>($r5, $r3, $r1);

     label4:
        return $r6;

     label5:
        r2 := @caughtexception;

        $r7 = new cn.hi321.browser.weave.client.WeaveException;

        specialinvoke $r7.<cn.hi321.browser.weave.client.WeaveException: void <init>(java.lang.Throwable)>(r2);

        throw $r7;

        catch java.io.IOException from label1 to label2 with label5;
        catch java.io.IOException from label3 to label4 with label5;
    }

    protected java.security.interfaces.RSAPublicKey getPublicKey() throws cn.hi321.browser.weave.client.WeaveException
    {
        java.lang.Throwable r8;
        cn.hi321.browser.weave.client.UserWeave r0;
        cn.hi321.browser.weave.client.WeaveCryptoUtil $r6;
        cn.hi321.browser.weave.client.WeaveResponse $r4;
        org.json.JSONException r10;
        org.json.JSONObject $r3;
        java.security.interfaces.RSAPublicKey $r7;
        cn.hi321.browser.weave.client.WeaveBasicObject r1;
        java.net.URI $r2;
        java.lang.String $r5;
        cn.hi321.browser.weave.client.WeaveException $r9;

        r0 := @this: cn.hi321.browser.weave.client.UserWeave;

     label1:
        $r2 = virtualinvoke r0.<cn.hi321.browser.weave.client.UserWeave: java.net.URI buildSyncUriFromSubpath(java.lang.String)>("/storage/keys/pubkey");

     label2:
        r1 = new cn.hi321.browser.weave.client.WeaveBasicObject;

        $r3 = new org.json.JSONObject;

     label3:
        $r4 = virtualinvoke r0.<cn.hi321.browser.weave.client.UserWeave: cn.hi321.browser.weave.client.WeaveResponse getNode(java.net.URI)>($r2);

        $r5 = virtualinvoke $r4.<cn.hi321.browser.weave.client.WeaveResponse: java.lang.String getBody()>();

        specialinvoke $r3.<org.json.JSONObject: void <init>(java.lang.String)>($r5);

        specialinvoke r1.<cn.hi321.browser.weave.client.WeaveBasicObject: void <init>(java.net.URI,org.json.JSONObject)>($r2, $r3);

        $r3 = virtualinvoke r1.<cn.hi321.browser.weave.client.WeaveBasicObject: org.json.JSONObject getPayload()>();

        $r5 = virtualinvoke $r3.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("keyData");

        $r6 = staticinvoke <cn.hi321.browser.weave.client.WeaveCryptoUtil: cn.hi321.browser.weave.client.WeaveCryptoUtil getInstance()>();

        $r7 = virtualinvoke $r6.<cn.hi321.browser.weave.client.WeaveCryptoUtil: java.security.interfaces.RSAPublicKey readCertificatePubKey(java.lang.String)>($r5);

     label4:
        return $r7;

     label5:
        r8 := @caughtexception;

        $r9 = new cn.hi321.browser.weave.client.WeaveException;

        specialinvoke $r9.<cn.hi321.browser.weave.client.WeaveException: void <init>(java.lang.Throwable)>(r8);

        throw $r9;

     label6:
        r10 := @caughtexception;

        $r9 = new cn.hi321.browser.weave.client.WeaveException;

        specialinvoke $r9.<cn.hi321.browser.weave.client.WeaveException: void <init>(java.lang.Throwable)>(r10);

        throw $r9;

        catch java.security.GeneralSecurityException from label1 to label2 with label5;
        catch java.security.GeneralSecurityException from label3 to label4 with label5;
        catch org.json.JSONException from label1 to label2 with label6;
        catch org.json.JSONException from label3 to label4 with label6;
    }

    protected final cn.hi321.browser.weave.client.WeaveResponse getUserNode(java.lang.String) throws cn.hi321.browser.weave.client.WeaveException
    {
        cn.hi321.browser.weave.client.UserWeave r0;
        java.lang.String $r1;
        java.net.URI $r2;
        cn.hi321.browser.weave.client.WeaveResponse $r3;

        r0 := @this: cn.hi321.browser.weave.client.UserWeave;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<cn.hi321.browser.weave.client.UserWeave: java.net.URI buildUserUriFromSubpath(java.lang.String)>("/node/weave");

        $r3 = virtualinvoke r0.<cn.hi321.browser.weave.client.UserWeave: cn.hi321.browser.weave.client.WeaveResponse getNode(java.net.URI)>($r2);

        return $r3;
    }

    public cn.hi321.browser.weave.client.QueryResult getWboCollection(java.net.URI) throws cn.hi321.browser.weave.client.WeaveException
    {
        cn.hi321.browser.weave.client.QueryResult r5;
        cn.hi321.browser.weave.client.UserWeave r0;
        cn.hi321.browser.weave.client.WeaveResponse $r7;
        java.util.ArrayList r4;
        org.json.JSONException r2;
        org.json.JSONObject $r9;
        int i0, $i1;
        java.net.URI $r1;
        cn.hi321.browser.weave.client.WeaveBasicObject r6;
        java.lang.String $r8;
        org.json.JSONArray r3;
        cn.hi321.browser.weave.client.WeaveException $r10;

        r0 := @this: cn.hi321.browser.weave.client.UserWeave;

        $r1 := @parameter0: java.net.URI;

     label01:
        $r7 = virtualinvoke r0.<cn.hi321.browser.weave.client.UserWeave: cn.hi321.browser.weave.client.WeaveResponse getNode(java.net.URI)>($r1);

     label02:
        r5 = new cn.hi321.browser.weave.client.QueryResult;

     label03:
        specialinvoke r5.<cn.hi321.browser.weave.client.QueryResult: void <init>(cn.hi321.browser.weave.client.WeaveResponse)>($r7);

     label04:
        r3 = new org.json.JSONArray;

     label05:
        $r8 = virtualinvoke $r7.<cn.hi321.browser.weave.client.WeaveResponse: java.lang.String getBody()>();

        specialinvoke r3.<org.json.JSONArray: void <init>(java.lang.String)>($r8);

     label06:
        r4 = new java.util.ArrayList;

     label07:
        specialinvoke r4.<java.util.ArrayList: void <init>()>();

     label08:
        i0 = 0;

     label09:
        $i1 = virtualinvoke r3.<org.json.JSONArray: int length()>();

     label10:
        if i0 < $i1 goto label13;

     label11:
        virtualinvoke r5.<cn.hi321.browser.weave.client.QueryResult: void setValue(java.lang.Object)>(r4);

     label12:
        return r5;

     label13:
        $r9 = virtualinvoke r3.<org.json.JSONArray: org.json.JSONObject getJSONObject(int)>(i0);

     label14:
        r6 = new cn.hi321.browser.weave.client.WeaveBasicObject;

     label15:
        specialinvoke r6.<cn.hi321.browser.weave.client.WeaveBasicObject: void <init>(java.net.URI,org.json.JSONObject)>($r1, $r9);

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(r6);

     label16:
        i0 = i0 + 1;

        goto label09;

     label17:
        r2 := @caughtexception;

        $r10 = new cn.hi321.browser.weave.client.WeaveException;

        specialinvoke $r10.<cn.hi321.browser.weave.client.WeaveException: void <init>(java.lang.Throwable)>(r2);

        throw $r10;

        catch org.json.JSONException from label01 to label02 with label17;
        catch org.json.JSONException from label03 to label04 with label17;
        catch org.json.JSONException from label05 to label06 with label17;
        catch org.json.JSONException from label07 to label08 with label17;
        catch org.json.JSONException from label09 to label10 with label17;
        catch org.json.JSONException from label11 to label12 with label17;
        catch org.json.JSONException from label13 to label14 with label17;
        catch org.json.JSONException from label15 to label16 with label17;
    }

    public final java.net.URI setClusterUri(java.net.URI)
    {
        cn.hi321.browser.weave.client.UserWeave r0;
        java.lang.Object $r2;
        java.net.URI $r1;
        java.util.concurrent.atomic.AtomicReference $r3;

        r0 := @this: cn.hi321.browser.weave.client.UserWeave;

        $r1 := @parameter0: java.net.URI;

        $r3 = r0.<cn.hi321.browser.weave.client.UserWeave: java.util.concurrent.atomic.AtomicReference m_clusterUri>;

        $r2 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>($r1);

        $r1 = (java.net.URI) $r2;

        return $r1;
    }

    public void shutdown()
    {
        cn.hi321.browser.weave.client.WeaveTransport $r1;
        cn.hi321.browser.weave.client.UserWeave r0;

        r0 := @this: cn.hi321.browser.weave.client.UserWeave;

        $r1 = r0.<cn.hi321.browser.weave.client.UserWeave: cn.hi321.browser.weave.client.WeaveTransport m_transport>;

        virtualinvoke $r1.<cn.hi321.browser.weave.client.WeaveTransport: void shutdown()>();

        return;
    }
}
