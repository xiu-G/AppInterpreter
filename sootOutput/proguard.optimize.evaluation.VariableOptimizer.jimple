public class proguard.optimize.evaluation.VariableOptimizer extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.attribute.visitor.AttributeVisitor
{
    private static final boolean DEBUG;
    private static final int MAX_VARIABLES_SIZE;
    private final proguard.classfile.visitor.MemberVisitor extraVariableMemberVisitor;
    private final proguard.optimize.evaluation.LivenessAnalyzer livenessAnalyzer;
    private final boolean reuseThis;
    private int[] variableMap;
    private final proguard.classfile.editor.VariableRemapper variableRemapper;

    public void <init>(boolean)
    {
        proguard.optimize.evaluation.VariableOptimizer r0;
        boolean $z0;

        r0 := @this: proguard.optimize.evaluation.VariableOptimizer;

        $z0 := @parameter0: boolean;

        specialinvoke r0.<proguard.optimize.evaluation.VariableOptimizer: void <init>(boolean,proguard.classfile.visitor.MemberVisitor)>($z0, null);

        return;
    }

    public void <init>(boolean, proguard.classfile.visitor.MemberVisitor)
    {
        proguard.optimize.evaluation.VariableOptimizer r0;
        proguard.classfile.editor.VariableRemapper $r3;
        proguard.optimize.evaluation.LivenessAnalyzer $r2;
        int[] $r4;
        proguard.classfile.visitor.MemberVisitor $r1;
        boolean $z0;

        r0 := @this: proguard.optimize.evaluation.VariableOptimizer;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: proguard.classfile.visitor.MemberVisitor;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        $r2 = new proguard.optimize.evaluation.LivenessAnalyzer;

        specialinvoke $r2.<proguard.optimize.evaluation.LivenessAnalyzer: void <init>()>();

        r0.<proguard.optimize.evaluation.VariableOptimizer: proguard.optimize.evaluation.LivenessAnalyzer livenessAnalyzer> = $r2;

        $r3 = new proguard.classfile.editor.VariableRemapper;

        specialinvoke $r3.<proguard.classfile.editor.VariableRemapper: void <init>()>();

        r0.<proguard.optimize.evaluation.VariableOptimizer: proguard.classfile.editor.VariableRemapper variableRemapper> = $r3;

        $r4 = newarray (int)[64];

        r0.<proguard.optimize.evaluation.VariableOptimizer: int[] variableMap> = $r4;

        r0.<proguard.optimize.evaluation.VariableOptimizer: boolean reuseThis> = $z0;

        r0.<proguard.optimize.evaluation.VariableOptimizer: proguard.classfile.visitor.MemberVisitor extraVariableMemberVisitor> = $r1;

        return;
    }

    private boolean areNonOverlapping(int, int, int)
    {
        proguard.optimize.evaluation.VariableOptimizer r0;
        proguard.optimize.evaluation.LivenessAnalyzer $r1;
        int $i0, $i1, $i2, $i3;
        boolean $z0;

        r0 := @this: proguard.optimize.evaluation.VariableOptimizer;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 = 0;

     label1:
        if $i3 >= $i2 goto label6;

        $r1 = r0.<proguard.optimize.evaluation.VariableOptimizer: proguard.optimize.evaluation.LivenessAnalyzer livenessAnalyzer>;

        $z0 = virtualinvoke $r1.<proguard.optimize.evaluation.LivenessAnalyzer: boolean isAliveBefore(int,int)>($i3, $i0);

        if $z0 == 0 goto label2;

        $r1 = r0.<proguard.optimize.evaluation.VariableOptimizer: proguard.optimize.evaluation.LivenessAnalyzer livenessAnalyzer>;

        $z0 = virtualinvoke $r1.<proguard.optimize.evaluation.LivenessAnalyzer: boolean isAliveBefore(int,int)>($i3, $i1);

        if $z0 != 0 goto label4;

     label2:
        $r1 = r0.<proguard.optimize.evaluation.VariableOptimizer: proguard.optimize.evaluation.LivenessAnalyzer livenessAnalyzer>;

        $z0 = virtualinvoke $r1.<proguard.optimize.evaluation.LivenessAnalyzer: boolean isAliveAfter(int,int)>($i3, $i0);

        if $z0 == 0 goto label3;

        $r1 = r0.<proguard.optimize.evaluation.VariableOptimizer: proguard.optimize.evaluation.LivenessAnalyzer livenessAnalyzer>;

        $z0 = virtualinvoke $r1.<proguard.optimize.evaluation.LivenessAnalyzer: boolean isAliveAfter(int,int)>($i3, $i1);

        if $z0 != 0 goto label4;

     label3:
        $r1 = r0.<proguard.optimize.evaluation.VariableOptimizer: proguard.optimize.evaluation.LivenessAnalyzer livenessAnalyzer>;

        $z0 = virtualinvoke $r1.<proguard.optimize.evaluation.LivenessAnalyzer: boolean isCategory2(int,int)>($i3, $i0);

        if $z0 == 0 goto label5;

     label4:
        return 0;

     label5:
        $i3 = $i3 + 1;

        goto label1;

     label6:
        return 1;
    }

    private void initializeArrays(proguard.classfile.attribute.CodeAttribute)
    {
        proguard.optimize.evaluation.VariableOptimizer r0;
        proguard.classfile.attribute.CodeAttribute $r1;
        int[] $r2;
        int $i0, $i1;

        r0 := @this: proguard.optimize.evaluation.VariableOptimizer;

        $r1 := @parameter0: proguard.classfile.attribute.CodeAttribute;

        $i0 = $r1.<proguard.classfile.attribute.CodeAttribute: int u4codeLength>;

        $r2 = r0.<proguard.optimize.evaluation.VariableOptimizer: int[] variableMap>;

        $i1 = lengthof $r2;

        if $i1 >= $i0 goto label1;

        $r2 = newarray (int)[$i0];

        r0.<proguard.optimize.evaluation.VariableOptimizer: int[] variableMap> = $r2;

     label1:
        return;
    }

    private void updateLiveness(int, int, int)
    {
        proguard.optimize.evaluation.VariableOptimizer r0;
        proguard.optimize.evaluation.LivenessAnalyzer $r1;
        int $i0, $i1, $i2, $i3;
        boolean $z0;

        r0 := @this: proguard.optimize.evaluation.VariableOptimizer;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 = 0;

     label1:
        if $i3 >= $i2 goto label4;

        $r1 = r0.<proguard.optimize.evaluation.VariableOptimizer: proguard.optimize.evaluation.LivenessAnalyzer livenessAnalyzer>;

        $z0 = virtualinvoke $r1.<proguard.optimize.evaluation.LivenessAnalyzer: boolean isAliveBefore(int,int)>($i3, $i0);

        if $z0 == 0 goto label2;

        $r1 = r0.<proguard.optimize.evaluation.VariableOptimizer: proguard.optimize.evaluation.LivenessAnalyzer livenessAnalyzer>;

        virtualinvoke $r1.<proguard.optimize.evaluation.LivenessAnalyzer: void setAliveBefore(int,int,boolean)>($i3, $i0, 0);

        $r1 = r0.<proguard.optimize.evaluation.VariableOptimizer: proguard.optimize.evaluation.LivenessAnalyzer livenessAnalyzer>;

        virtualinvoke $r1.<proguard.optimize.evaluation.LivenessAnalyzer: void setAliveBefore(int,int,boolean)>($i3, $i1, 1);

     label2:
        $r1 = r0.<proguard.optimize.evaluation.VariableOptimizer: proguard.optimize.evaluation.LivenessAnalyzer livenessAnalyzer>;

        $z0 = virtualinvoke $r1.<proguard.optimize.evaluation.LivenessAnalyzer: boolean isAliveAfter(int,int)>($i3, $i0);

        if $z0 == 0 goto label3;

        $r1 = r0.<proguard.optimize.evaluation.VariableOptimizer: proguard.optimize.evaluation.LivenessAnalyzer livenessAnalyzer>;

        virtualinvoke $r1.<proguard.optimize.evaluation.LivenessAnalyzer: void setAliveAfter(int,int,boolean)>($i3, $i0, 0);

        $r1 = r0.<proguard.optimize.evaluation.VariableOptimizer: proguard.optimize.evaluation.LivenessAnalyzer livenessAnalyzer>;

        virtualinvoke $r1.<proguard.optimize.evaluation.LivenessAnalyzer: void setAliveAfter(int,int,boolean)>($i3, $i1, 1);

     label3:
        $i3 = $i3 + 1;

        goto label1;

     label4:
        return;
    }

    public void visitAnyAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.Attribute)
    {
        proguard.optimize.evaluation.VariableOptimizer r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.Attribute $r2;

        r0 := @this: proguard.optimize.evaluation.VariableOptimizer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.Attribute;

        return;
    }

    public void visitCodeAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute)
    {
        proguard.optimize.evaluation.VariableOptimizer r0;
        proguard.optimize.evaluation.LivenessAnalyzer $r4;
        proguard.classfile.editor.VariableRemapper $r7;
        byte $b2;
        proguard.classfile.Clazz $r1;
        int[] $r6;
        int $i0, $i1, $i3, $i4, $i5;
        java.lang.String $r5;
        boolean $z0, $z1;
        proguard.classfile.visitor.MemberVisitor $r8;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.optimize.evaluation.VariableOptimizer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i1 = 0;

        specialinvoke r0.<proguard.optimize.evaluation.VariableOptimizer: void initializeArrays(proguard.classfile.attribute.CodeAttribute)>($r3);

        $r4 = r0.<proguard.optimize.evaluation.VariableOptimizer: proguard.optimize.evaluation.LivenessAnalyzer livenessAnalyzer>;

        virtualinvoke $r4.<proguard.optimize.evaluation.LivenessAnalyzer: void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute)>($r1, $r2, $r3);

        $i0 = interfaceinvoke $r2.<proguard.classfile.Method: int getAccessFlags()>();

        $i0 = $i0 & 8;

        if $i0 != 0 goto label1;

        $z0 = r0.<proguard.optimize.evaluation.VariableOptimizer: boolean reuseThis>;

        if $z0 == 0 goto label6;

     label1:
        $b2 = 0;

     label2:
        $r5 = interfaceinvoke $r2.<proguard.classfile.Method: java.lang.String getDescriptor(proguard.classfile.Clazz)>($r1);

        $i0 = interfaceinvoke $r2.<proguard.classfile.Method: int getAccessFlags()>();

        $i3 = staticinvoke <proguard.classfile.util.ClassUtil: int internalMethodParameterSize(java.lang.String,int)>($r5, $i0);

        $i4 = $r3.<proguard.classfile.attribute.CodeAttribute: int u2maxLocals>;

        $i0 = $r3.<proguard.classfile.attribute.CodeAttribute: int u4codeLength>;

        $z0 = 0;

     label3:
        if $i1 >= $i4 goto label8;

        $r6 = r0.<proguard.optimize.evaluation.VariableOptimizer: int[] variableMap>;

        $r6[$i1] = $i1;

        if $i1 < $i3 goto label5;

        if $i1 >= 64 goto label5;

        $i5 = $b2;

     label4:
        if $i5 >= $i1 goto label5;

        $z1 = specialinvoke r0.<proguard.optimize.evaluation.VariableOptimizer: boolean areNonOverlapping(int,int,int)>($i1, $i5, $i0);

        if $z1 == 0 goto label7;

        $r6 = r0.<proguard.optimize.evaluation.VariableOptimizer: int[] variableMap>;

        $r6[$i1] = $i5;

        specialinvoke r0.<proguard.optimize.evaluation.VariableOptimizer: void updateLiveness(int,int,int)>($i1, $i5, $i0);

        $z0 = 1;

     label5:
        $i1 = $i1 + 1;

        goto label3;

     label6:
        $b2 = 1;

        goto label2;

     label7:
        $i5 = $i5 + 1;

        goto label4;

     label8:
        if $z0 == 0 goto label9;

        $r7 = r0.<proguard.optimize.evaluation.VariableOptimizer: proguard.classfile.editor.VariableRemapper variableRemapper>;

        $r6 = r0.<proguard.optimize.evaluation.VariableOptimizer: int[] variableMap>;

        virtualinvoke $r7.<proguard.classfile.editor.VariableRemapper: void setVariableMap(int[])>($r6);

        $r7 = r0.<proguard.optimize.evaluation.VariableOptimizer: proguard.classfile.editor.VariableRemapper variableRemapper>;

        virtualinvoke $r7.<proguard.classfile.editor.VariableRemapper: void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute)>($r1, $r2, $r3);

        $r8 = r0.<proguard.optimize.evaluation.VariableOptimizer: proguard.classfile.visitor.MemberVisitor extraVariableMemberVisitor>;

        if $r8 == null goto label9;

        $r8 = r0.<proguard.optimize.evaluation.VariableOptimizer: proguard.classfile.visitor.MemberVisitor extraVariableMemberVisitor>;

        interfaceinvoke $r2.<proguard.classfile.Method: void accept(proguard.classfile.Clazz,proguard.classfile.visitor.MemberVisitor)>($r1, $r8);

     label9:
        return;
    }

    public static void <clinit>()
    {
        <proguard.optimize.evaluation.VariableOptimizer: int MAX_VARIABLES_SIZE> = 64;

        <proguard.optimize.evaluation.VariableOptimizer: boolean DEBUG> = 0;

        return;
    }
}
