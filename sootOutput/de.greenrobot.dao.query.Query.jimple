public class de.greenrobot.dao.query.Query extends de.greenrobot.dao.query.AbstractQuery
{
    private final int limitPosition;
    private final int offsetPosition;
    private final de.greenrobot.dao.query.Query$QueryData queryData;

    private void <init>(de.greenrobot.dao.query.Query$QueryData, de.greenrobot.dao.AbstractDao, java.lang.String, java.lang.String[], int, int)
    {
        de.greenrobot.dao.query.Query r0;
        de.greenrobot.dao.AbstractDao $r2;
        de.greenrobot.dao.query.Query$QueryData $r1;
        int $i0, $i1;
        java.lang.String[] $r4;
        java.lang.String $r3;

        r0 := @this: de.greenrobot.dao.query.Query;

        $r1 := @parameter0: de.greenrobot.dao.query.Query$QueryData;

        $r2 := @parameter1: de.greenrobot.dao.AbstractDao;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.lang.String[];

        $i0 := @parameter4: int;

        $i1 := @parameter5: int;

        specialinvoke r0.<de.greenrobot.dao.query.AbstractQuery: void <init>(de.greenrobot.dao.AbstractDao,java.lang.String,java.lang.String[])>($r2, $r3, $r4);

        r0.<de.greenrobot.dao.query.Query: de.greenrobot.dao.query.Query$QueryData queryData> = $r1;

        r0.<de.greenrobot.dao.query.Query: int limitPosition> = $i0;

        r0.<de.greenrobot.dao.query.Query: int offsetPosition> = $i1;

        return;
    }

    void <init>(de.greenrobot.dao.query.Query$QueryData, de.greenrobot.dao.AbstractDao, java.lang.String, java.lang.String[], int, int, de.greenrobot.dao.query.Query$1)
    {
        de.greenrobot.dao.query.Query r0;
        de.greenrobot.dao.query.Query$1 $r5;
        java.lang.String[] $r4;
        de.greenrobot.dao.AbstractDao $r2;
        de.greenrobot.dao.query.Query$QueryData $r1;
        int $i0, $i1;
        java.lang.String $r3;

        r0 := @this: de.greenrobot.dao.query.Query;

        $r1 := @parameter0: de.greenrobot.dao.query.Query$QueryData;

        $r2 := @parameter1: de.greenrobot.dao.AbstractDao;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.lang.String[];

        $i0 := @parameter4: int;

        $i1 := @parameter5: int;

        $r5 := @parameter6: de.greenrobot.dao.query.Query$1;

        specialinvoke r0.<de.greenrobot.dao.query.Query: void <init>(de.greenrobot.dao.query.Query$QueryData,de.greenrobot.dao.AbstractDao,java.lang.String,java.lang.String[],int,int)>($r1, $r2, $r3, $r4, $i0, $i1);

        return;
    }

    static de.greenrobot.dao.query.Query create(de.greenrobot.dao.AbstractDao, java.lang.String, java.lang.Object[], int, int)
    {
        java.lang.Object[] $r2;
        de.greenrobot.dao.query.Query $r6;
        java.lang.String[] $r4;
        de.greenrobot.dao.query.AbstractQuery $r5;
        de.greenrobot.dao.AbstractDao $r0;
        int $i0, $i1;
        de.greenrobot.dao.query.Query$QueryData $r3;
        java.lang.String $r1;

        $r0 := @parameter0: de.greenrobot.dao.AbstractDao;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.Object[];

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $r3 = new de.greenrobot.dao.query.Query$QueryData;

        $r4 = staticinvoke <de.greenrobot.dao.query.Query: java.lang.String[] toStringArray(java.lang.Object[])>($r2);

        specialinvoke $r3.<de.greenrobot.dao.query.Query$QueryData: void <init>(de.greenrobot.dao.AbstractDao,java.lang.String,java.lang.String[],int,int)>($r0, $r1, $r4, $i0, $i1);

        $r5 = virtualinvoke $r3.<de.greenrobot.dao.query.Query$QueryData: de.greenrobot.dao.query.AbstractQuery forCurrentThread()>();

        $r6 = (de.greenrobot.dao.query.Query) $r5;

        return $r6;
    }

    public static de.greenrobot.dao.query.Query internalCreate(de.greenrobot.dao.AbstractDao, java.lang.String, java.lang.Object[])
    {
        java.lang.Object[] $r2;
        de.greenrobot.dao.query.Query $r3;
        de.greenrobot.dao.AbstractDao $r0;
        int $i0, $i1;
        java.lang.String $r1;

        $r0 := @parameter0: de.greenrobot.dao.AbstractDao;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.Object[];

        $i0 = -1;

        $i1 = -1;

        $r3 = staticinvoke <de.greenrobot.dao.query.Query: de.greenrobot.dao.query.Query create(de.greenrobot.dao.AbstractDao,java.lang.String,java.lang.Object[],int,int)>($r0, $r1, $r2, $i0, $i1);

        return $r3;
    }

    public de.greenrobot.dao.query.Query forCurrentThread()
    {
        de.greenrobot.dao.query.AbstractQuery $r1;
        de.greenrobot.dao.query.Query$QueryData $r2;
        de.greenrobot.dao.query.Query r0;

        r0 := @this: de.greenrobot.dao.query.Query;

        $r2 = r0.<de.greenrobot.dao.query.Query: de.greenrobot.dao.query.Query$QueryData queryData>;

        $r1 = virtualinvoke $r2.<de.greenrobot.dao.query.Query$QueryData: de.greenrobot.dao.query.AbstractQuery forCurrentThread(de.greenrobot.dao.query.AbstractQuery)>(r0);

        r0 = (de.greenrobot.dao.query.Query) $r1;

        return r0;
    }

    public java.util.List list()
    {
        de.greenrobot.dao.query.Query r0;
        java.lang.String[] $r1;
        android.database.sqlite.SQLiteDatabase $r3;
        java.util.List $r7;
        de.greenrobot.dao.AbstractDao $r2;
        de.greenrobot.dao.InternalQueryDaoAccess $r6;
        java.lang.String $r4;
        android.database.Cursor $r5;

        r0 := @this: de.greenrobot.dao.query.Query;

        virtualinvoke r0.<de.greenrobot.dao.query.Query: void checkThread()>();

        $r2 = r0.<de.greenrobot.dao.query.Query: de.greenrobot.dao.AbstractDao dao>;

        $r3 = virtualinvoke $r2.<de.greenrobot.dao.AbstractDao: android.database.sqlite.SQLiteDatabase getDatabase()>();

        $r4 = r0.<de.greenrobot.dao.query.Query: java.lang.String sql>;

        $r1 = r0.<de.greenrobot.dao.query.Query: java.lang.String[] parameters>;

        $r5 = virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])>($r4, $r1);

        $r6 = r0.<de.greenrobot.dao.query.Query: de.greenrobot.dao.InternalQueryDaoAccess daoAccess>;

        $r7 = virtualinvoke $r6.<de.greenrobot.dao.InternalQueryDaoAccess: java.util.List loadAllAndCloseCursor(android.database.Cursor)>($r5);

        return $r7;
    }

    public de.greenrobot.dao.query.CloseableListIterator listIterator()
    {
        de.greenrobot.dao.query.CloseableListIterator $r2;
        de.greenrobot.dao.query.LazyList $r1;
        de.greenrobot.dao.query.Query r0;

        r0 := @this: de.greenrobot.dao.query.Query;

        $r1 = virtualinvoke r0.<de.greenrobot.dao.query.Query: de.greenrobot.dao.query.LazyList listLazyUncached()>();

        $r2 = virtualinvoke $r1.<de.greenrobot.dao.query.LazyList: de.greenrobot.dao.query.CloseableListIterator listIteratorAutoClose()>();

        return $r2;
    }

    public de.greenrobot.dao.query.LazyList listLazy()
    {
        de.greenrobot.dao.query.Query r0;
        java.lang.String[] $r4;
        de.greenrobot.dao.query.LazyList $r6;
        android.database.sqlite.SQLiteDatabase $r2;
        de.greenrobot.dao.AbstractDao $r1;
        de.greenrobot.dao.InternalQueryDaoAccess $r7;
        java.lang.String $r3;
        android.database.Cursor $r5;

        r0 := @this: de.greenrobot.dao.query.Query;

        virtualinvoke r0.<de.greenrobot.dao.query.Query: void checkThread()>();

        $r1 = r0.<de.greenrobot.dao.query.Query: de.greenrobot.dao.AbstractDao dao>;

        $r2 = virtualinvoke $r1.<de.greenrobot.dao.AbstractDao: android.database.sqlite.SQLiteDatabase getDatabase()>();

        $r3 = r0.<de.greenrobot.dao.query.Query: java.lang.String sql>;

        $r4 = r0.<de.greenrobot.dao.query.Query: java.lang.String[] parameters>;

        $r5 = virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])>($r3, $r4);

        $r6 = new de.greenrobot.dao.query.LazyList;

        $r7 = r0.<de.greenrobot.dao.query.Query: de.greenrobot.dao.InternalQueryDaoAccess daoAccess>;

        specialinvoke $r6.<de.greenrobot.dao.query.LazyList: void <init>(de.greenrobot.dao.InternalQueryDaoAccess,android.database.Cursor,boolean)>($r7, $r5, 1);

        return $r6;
    }

    public de.greenrobot.dao.query.LazyList listLazyUncached()
    {
        de.greenrobot.dao.query.Query r0;
        java.lang.String[] $r4;
        de.greenrobot.dao.query.LazyList $r6;
        android.database.sqlite.SQLiteDatabase $r2;
        de.greenrobot.dao.AbstractDao $r1;
        de.greenrobot.dao.InternalQueryDaoAccess $r7;
        java.lang.String $r3;
        android.database.Cursor $r5;

        r0 := @this: de.greenrobot.dao.query.Query;

        virtualinvoke r0.<de.greenrobot.dao.query.Query: void checkThread()>();

        $r1 = r0.<de.greenrobot.dao.query.Query: de.greenrobot.dao.AbstractDao dao>;

        $r2 = virtualinvoke $r1.<de.greenrobot.dao.AbstractDao: android.database.sqlite.SQLiteDatabase getDatabase()>();

        $r3 = r0.<de.greenrobot.dao.query.Query: java.lang.String sql>;

        $r4 = r0.<de.greenrobot.dao.query.Query: java.lang.String[] parameters>;

        $r5 = virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])>($r3, $r4);

        $r6 = new de.greenrobot.dao.query.LazyList;

        $r7 = r0.<de.greenrobot.dao.query.Query: de.greenrobot.dao.InternalQueryDaoAccess daoAccess>;

        specialinvoke $r6.<de.greenrobot.dao.query.LazyList: void <init>(de.greenrobot.dao.InternalQueryDaoAccess,android.database.Cursor,boolean)>($r7, $r5, 0);

        return $r6;
    }

    public void setLimit(int)
    {
        java.lang.IllegalStateException $r3;
        de.greenrobot.dao.query.Query r0;
        int $i0, $i1, $i2;
        java.lang.String[] $r2;
        java.lang.String $r1;

        r0 := @this: de.greenrobot.dao.query.Query;

        $i0 := @parameter0: int;

        virtualinvoke r0.<de.greenrobot.dao.query.Query: void checkThread()>();

        $i1 = r0.<de.greenrobot.dao.query.Query: int limitPosition>;

        $i2 = -1;

        if $i1 != $i2 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Limit must be set with QueryBuilder before it can be used here");

        throw $r3;

     label1:
        $r2 = r0.<de.greenrobot.dao.query.Query: java.lang.String[] parameters>;

        $i1 = r0.<de.greenrobot.dao.query.Query: int limitPosition>;

        $r1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        $r2[$i1] = $r1;

        return;
    }

    public void setOffset(int)
    {
        java.lang.IllegalStateException $r3;
        de.greenrobot.dao.query.Query r0;
        int $i0, $i1, $i2;
        java.lang.String[] $r2;
        java.lang.String $r1;

        r0 := @this: de.greenrobot.dao.query.Query;

        $i0 := @parameter0: int;

        virtualinvoke r0.<de.greenrobot.dao.query.Query: void checkThread()>();

        $i1 = r0.<de.greenrobot.dao.query.Query: int offsetPosition>;

        $i2 = -1;

        if $i1 != $i2 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Offset must be set with QueryBuilder before it can be used here");

        throw $r3;

     label1:
        $r2 = r0.<de.greenrobot.dao.query.Query: java.lang.String[] parameters>;

        $i1 = r0.<de.greenrobot.dao.query.Query: int offsetPosition>;

        $r1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        $r2[$i1] = $r1;

        return;
    }

    public void setParameter(int, java.lang.Object)
    {
        de.greenrobot.dao.query.Query r0;
        int $i0, $i1;
        java.lang.Object $r1;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: de.greenrobot.dao.query.Query;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.Object;

        if $i0 < 0 goto label2;

        $i1 = r0.<de.greenrobot.dao.query.Query: int limitPosition>;

        if $i0 == $i1 goto label1;

        $i1 = r0.<de.greenrobot.dao.query.Query: int offsetPosition>;

        if $i0 != $i1 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Illegal parameter index: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label2:
        specialinvoke r0.<de.greenrobot.dao.query.AbstractQuery: void setParameter(int,java.lang.Object)>($i0, $r1);

        return;
    }

    public java.lang.Object unique()
    {
        de.greenrobot.dao.query.Query r0;
        java.lang.String[] $r1;
        android.database.sqlite.SQLiteDatabase $r3;
        de.greenrobot.dao.AbstractDao $r2;
        de.greenrobot.dao.InternalQueryDaoAccess $r6;
        java.lang.Object $r7;
        java.lang.String $r4;
        android.database.Cursor $r5;

        r0 := @this: de.greenrobot.dao.query.Query;

        virtualinvoke r0.<de.greenrobot.dao.query.Query: void checkThread()>();

        $r2 = r0.<de.greenrobot.dao.query.Query: de.greenrobot.dao.AbstractDao dao>;

        $r3 = virtualinvoke $r2.<de.greenrobot.dao.AbstractDao: android.database.sqlite.SQLiteDatabase getDatabase()>();

        $r4 = r0.<de.greenrobot.dao.query.Query: java.lang.String sql>;

        $r1 = r0.<de.greenrobot.dao.query.Query: java.lang.String[] parameters>;

        $r5 = virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])>($r4, $r1);

        $r6 = r0.<de.greenrobot.dao.query.Query: de.greenrobot.dao.InternalQueryDaoAccess daoAccess>;

        $r7 = virtualinvoke $r6.<de.greenrobot.dao.InternalQueryDaoAccess: java.lang.Object loadUniqueAndCloseCursor(android.database.Cursor)>($r5);

        return $r7;
    }

    public java.lang.Object uniqueOrThrow()
    {
        java.lang.Object $r1;
        de.greenrobot.dao.DaoException $r2;
        de.greenrobot.dao.query.Query r0;

        r0 := @this: de.greenrobot.dao.query.Query;

        $r1 = virtualinvoke r0.<de.greenrobot.dao.query.Query: java.lang.Object unique()>();

        if $r1 != null goto label1;

        $r2 = new de.greenrobot.dao.DaoException;

        specialinvoke $r2.<de.greenrobot.dao.DaoException: void <init>(java.lang.String)>("No entity found for query");

        throw $r2;

     label1:
        return $r1;
    }
}
