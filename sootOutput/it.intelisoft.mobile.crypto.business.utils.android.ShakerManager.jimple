public class it.intelisoft.mobile.crypto.business.utils.android.ShakerManager extends java.lang.Object
{
    public static final int IS_SHAKING;
    private static final int MAX_CHECKS;
    public static final int NOT_SHAKING;
    public static final int NO_CHANGING;
    private it.intelisoft.mobile.crypto.business.utils.android.ShakerManager$Callback cb_;
    private long gap_;
    private long lastShakeTimestamp_;
    private int lastShakingStatus_;
    private android.hardware.SensorEventListener listener_;
    private android.hardware.SensorManager mgr_;
    private int msShakingTimeDuration_;
    private int percentage_;
    private int queueIndex_;
    private java.lang.Integer[] shakingTypeQueue_;
    private double threshold_;

    public void <init>(android.content.Context, double, it.intelisoft.mobile.crypto.business.utils.android.ShakerManager$Callback)
    {
        it.intelisoft.mobile.crypto.business.utils.android.ShakerManager r0;
        android.content.Context $r1;
        android.hardware.SensorManager $r7, $r8;
        it.intelisoft.mobile.crypto.business.utils.android.ShakerManager$Callback $r2;
        android.hardware.SensorEventListener $r3;
        java.lang.Object $r6;
        android.hardware.Sensor $r9;
        it.intelisoft.mobile.crypto.business.utils.android.ShakerManager$1 $r5;
        java.lang.Integer[] $r4;
        double $d0, $d1;

        r0 := @this: it.intelisoft.mobile.crypto.business.utils.android.ShakerManager;

        $r1 := @parameter0: android.content.Context;

        $d0 := @parameter1: double;

        $r2 := @parameter2: it.intelisoft.mobile.crypto.business.utils.android.ShakerManager$Callback;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<it.intelisoft.mobile.crypto.business.utils.android.ShakerManager: android.hardware.SensorManager mgr_> = null;

        r0.<it.intelisoft.mobile.crypto.business.utils.android.ShakerManager: long lastShakeTimestamp_> = 0L;

        r0.<it.intelisoft.mobile.crypto.business.utils.android.ShakerManager: double threshold_> = 1.0;

        r0.<it.intelisoft.mobile.crypto.business.utils.android.ShakerManager: long gap_> = 50L;

        r0.<it.intelisoft.mobile.crypto.business.utils.android.ShakerManager: it.intelisoft.mobile.crypto.business.utils.android.ShakerManager$Callback cb_> = null;

        $r4 = newarray (java.lang.Integer)[20];

        r0.<it.intelisoft.mobile.crypto.business.utils.android.ShakerManager: java.lang.Integer[] shakingTypeQueue_> = $r4;

        r0.<it.intelisoft.mobile.crypto.business.utils.android.ShakerManager: int queueIndex_> = 0;

        r0.<it.intelisoft.mobile.crypto.business.utils.android.ShakerManager: int lastShakingStatus_> = 0;

        r0.<it.intelisoft.mobile.crypto.business.utils.android.ShakerManager: int percentage_> = 0;

        r0.<it.intelisoft.mobile.crypto.business.utils.android.ShakerManager: int msShakingTimeDuration_> = 0;

        $r5 = new it.intelisoft.mobile.crypto.business.utils.android.ShakerManager$1;

        specialinvoke $r5.<it.intelisoft.mobile.crypto.business.utils.android.ShakerManager$1: void <init>(it.intelisoft.mobile.crypto.business.utils.android.ShakerManager)>(r0);

        r0.<it.intelisoft.mobile.crypto.business.utils.android.ShakerManager: android.hardware.SensorEventListener listener_> = $r5;

        specialinvoke r0.<it.intelisoft.mobile.crypto.business.utils.android.ShakerManager: void queueReset()>();

        $d1 = $d0 * $d0;

        r0.<it.intelisoft.mobile.crypto.business.utils.android.ShakerManager: double threshold_> = $d1;

        $d0 = $d0 * 9.806650161743164;

        $d0 = $d0 * 9.806650161743164;

        r0.<it.intelisoft.mobile.crypto.business.utils.android.ShakerManager: double threshold_> = $d0;

        r0.<it.intelisoft.mobile.crypto.business.utils.android.ShakerManager: it.intelisoft.mobile.crypto.business.utils.android.ShakerManager$Callback cb_> = $r2;

        $r6 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("sensor");

        $r7 = (android.hardware.SensorManager) $r6;

        r0.<it.intelisoft.mobile.crypto.business.utils.android.ShakerManager: android.hardware.SensorManager mgr_> = $r7;

        $r7 = r0.<it.intelisoft.mobile.crypto.business.utils.android.ShakerManager: android.hardware.SensorManager mgr_>;

        $r3 = r0.<it.intelisoft.mobile.crypto.business.utils.android.ShakerManager: android.hardware.SensorEventListener listener_>;

        $r8 = r0.<it.intelisoft.mobile.crypto.business.utils.android.ShakerManager: android.hardware.SensorManager mgr_>;

        $r9 = virtualinvoke $r8.<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>(1);

        virtualinvoke $r7.<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>($r3, $r9, 2);

        return;
    }

    static it.intelisoft.mobile.crypto.business.utils.android.ShakerManager$Callback access$0(it.intelisoft.mobile.crypto.business.utils.android.ShakerManager)
    {
        it.intelisoft.mobile.crypto.business.utils.android.ShakerManager $r0;
        it.intelisoft.mobile.crypto.business.utils.android.ShakerManager$Callback r1;

        $r0 := @parameter0: it.intelisoft.mobile.crypto.business.utils.android.ShakerManager;

        r1 = $r0.<it.intelisoft.mobile.crypto.business.utils.android.ShakerManager: it.intelisoft.mobile.crypto.business.utils.android.ShakerManager$Callback cb_>;

        return r1;
    }

    static long access$1(it.intelisoft.mobile.crypto.business.utils.android.ShakerManager)
    {
        it.intelisoft.mobile.crypto.business.utils.android.ShakerManager $r0;
        long l0;

        $r0 := @parameter0: it.intelisoft.mobile.crypto.business.utils.android.ShakerManager;

        l0 = $r0.<it.intelisoft.mobile.crypto.business.utils.android.ShakerManager: long lastShakeTimestamp_>;

        return l0;
    }

    static long access$2(it.intelisoft.mobile.crypto.business.utils.android.ShakerManager)
    {
        it.intelisoft.mobile.crypto.business.utils.android.ShakerManager $r0;
        long l0;

        $r0 := @parameter0: it.intelisoft.mobile.crypto.business.utils.android.ShakerManager;

        l0 = $r0.<it.intelisoft.mobile.crypto.business.utils.android.ShakerManager: long gap_>;

        return l0;
    }

    static void access$3(it.intelisoft.mobile.crypto.business.utils.android.ShakerManager, long)
    {
        it.intelisoft.mobile.crypto.business.utils.android.ShakerManager $r0;
        long $l0;

        $r0 := @parameter0: it.intelisoft.mobile.crypto.business.utils.android.ShakerManager;

        $l0 := @parameter1: long;

        $r0.<it.intelisoft.mobile.crypto.business.utils.android.ShakerManager: long lastShakeTimestamp_> = $l0;

        return;
    }

    static double access$4(it.intelisoft.mobile.crypto.business.utils.android.ShakerManager)
    {
        it.intelisoft.mobile.crypto.business.utils.android.ShakerManager $r0;
        double d0;

        $r0 := @parameter0: it.intelisoft.mobile.crypto.business.utils.android.ShakerManager;

        d0 = $r0.<it.intelisoft.mobile.crypto.business.utils.android.ShakerManager: double threshold_>;

        return d0;
    }

    static void access$5(it.intelisoft.mobile.crypto.business.utils.android.ShakerManager, int)
    {
        it.intelisoft.mobile.crypto.business.utils.android.ShakerManager $r0;
        int $i0;

        $r0 := @parameter0: it.intelisoft.mobile.crypto.business.utils.android.ShakerManager;

        $i0 := @parameter1: int;

        specialinvoke $r0.<it.intelisoft.mobile.crypto.business.utils.android.ShakerManager: void addStatusToQueue(int)>($i0);

        return;
    }

    static int access$6(it.intelisoft.mobile.crypto.business.utils.android.ShakerManager)
    {
        it.intelisoft.mobile.crypto.business.utils.android.ShakerManager $r0;
        int $i0;

        $r0 := @parameter0: it.intelisoft.mobile.crypto.business.utils.android.ShakerManager;

        $i0 = specialinvoke $r0.<it.intelisoft.mobile.crypto.business.utils.android.ShakerManager: int getShakingStatus()>();

        return $i0;
    }

    static int access$7(it.intelisoft.mobile.crypto.business.utils.android.ShakerManager)
    {
        it.intelisoft.mobile.crypto.business.utils.android.ShakerManager $r0;
        int i0;

        $r0 := @parameter0: it.intelisoft.mobile.crypto.business.utils.android.ShakerManager;

        i0 = $r0.<it.intelisoft.mobile.crypto.business.utils.android.ShakerManager: int percentage_>;

        return i0;
    }

    static int access$8(it.intelisoft.mobile.crypto.business.utils.android.ShakerManager)
    {
        it.intelisoft.mobile.crypto.business.utils.android.ShakerManager $r0;
        int i0;

        $r0 := @parameter0: it.intelisoft.mobile.crypto.business.utils.android.ShakerManager;

        i0 = $r0.<it.intelisoft.mobile.crypto.business.utils.android.ShakerManager: int msShakingTimeDuration_>;

        return i0;
    }

    private void addStatusToQueue(int)
    {
        it.intelisoft.mobile.crypto.business.utils.android.ShakerManager r0;
        int $i0, $i1;
        java.lang.Integer $r1;
        java.lang.Integer[] $r2;

        r0 := @this: it.intelisoft.mobile.crypto.business.utils.android.ShakerManager;

        $i0 := @parameter0: int;

        $r2 = r0.<it.intelisoft.mobile.crypto.business.utils.android.ShakerManager: java.lang.Integer[] shakingTypeQueue_>;

        $i1 = r0.<it.intelisoft.mobile.crypto.business.utils.android.ShakerManager: int queueIndex_>;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r2[$i1] = $r1;

        $i0 = r0.<it.intelisoft.mobile.crypto.business.utils.android.ShakerManager: int queueIndex_>;

        $i0 = $i0 + 1;

        r0.<it.intelisoft.mobile.crypto.business.utils.android.ShakerManager: int queueIndex_> = $i0;

        $i0 = r0.<it.intelisoft.mobile.crypto.business.utils.android.ShakerManager: int queueIndex_>;

        if $i0 != 20 goto label1;

        r0.<it.intelisoft.mobile.crypto.business.utils.android.ShakerManager: int queueIndex_> = 0;

     label1:
        return;
    }

    private int getShakingStatus()
    {
        it.intelisoft.mobile.crypto.business.utils.android.ShakerManager r0;
        long $l5, $l6;
        java.lang.Integer $r2;
        byte b2;
        int i0, $i1, $i3, i4;
        java.lang.Integer[] $r1;
        double d0;
        boolean z0;

        r0 := @this: it.intelisoft.mobile.crypto.business.utils.android.ShakerManager;

        b2 = 0;

        $r1 = r0.<it.intelisoft.mobile.crypto.business.utils.android.ShakerManager: java.lang.Integer[] shakingTypeQueue_>;

        $i3 = lengthof $r1;

        i0 = $i3 - 1;

        $i3 = 0;

        i4 = 0;

        z0 = 1;

     label1:
        if i0 >= 0 goto label5;

     label2:
        d0 = (double) $i3;

        d0 = d0 / 20.0;

        d0 = d0 * 100.0;

        i4 = (int) d0;

        r0.<it.intelisoft.mobile.crypto.business.utils.android.ShakerManager: int percentage_> = i4;

        if $i3 <= 0 goto label3;

        b2 = 2;

     label3:
        $i3 = r0.<it.intelisoft.mobile.crypto.business.utils.android.ShakerManager: int lastShakingStatus_>;

        if b2 != $i3 goto label9;

        if b2 != 2 goto label8;

        $i3 = r0.<it.intelisoft.mobile.crypto.business.utils.android.ShakerManager: int msShakingTimeDuration_>;

        $l5 = (long) $i3;

        $l6 = r0.<it.intelisoft.mobile.crypto.business.utils.android.ShakerManager: long gap_>;

        $l5 = $l5 + $l6;

        $i3 = (int) $l5;

        r0.<it.intelisoft.mobile.crypto.business.utils.android.ShakerManager: int msShakingTimeDuration_> = $i3;

     label4:
        $i3 = -1;

        return $i3;

     label5:
        $r1 = r0.<it.intelisoft.mobile.crypto.business.utils.android.ShakerManager: java.lang.Integer[] shakingTypeQueue_>;

        $r2 = $r1[i0];

        $i1 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();

        if $i1 != 2 goto label7;

        $i3 = $i3 + 1;

        z0 = 0;

     label6:
        $i1 = -1;

        i0 = i0 + $i1;

        goto label1;

     label7:
        if z0 == 0 goto label6;

        i4 = i4 + 1;

        if i4 != 5 goto label6;

        r0.<it.intelisoft.mobile.crypto.business.utils.android.ShakerManager: int percentage_> = 0;

        $i3 = 0;

        goto label2;

     label8:
        r0.<it.intelisoft.mobile.crypto.business.utils.android.ShakerManager: int msShakingTimeDuration_> = 0;

        goto label4;

     label9:
        r0.<it.intelisoft.mobile.crypto.business.utils.android.ShakerManager: int msShakingTimeDuration_> = 0;

        r0.<it.intelisoft.mobile.crypto.business.utils.android.ShakerManager: int lastShakingStatus_> = b2;

        return b2;
    }

    private void queueReset()
    {
        it.intelisoft.mobile.crypto.business.utils.android.ShakerManager r0;
        int i0, i1;
        java.lang.Integer $r1;
        java.lang.Integer[] $r2;

        r0 := @this: it.intelisoft.mobile.crypto.business.utils.android.ShakerManager;

        $r2 = r0.<it.intelisoft.mobile.crypto.business.utils.android.ShakerManager: java.lang.Integer[] shakingTypeQueue_>;

        i0 = lengthof $r2;

        i1 = 0;

     label1:
        if i1 < i0 goto label2;

        return;

     label2:
        $r2 = r0.<it.intelisoft.mobile.crypto.business.utils.android.ShakerManager: java.lang.Integer[] shakingTypeQueue_>;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r2[i1] = $r1;

        i1 = i1 + 1;

        goto label1;
    }

    public void stopShaking()
    {
        it.intelisoft.mobile.crypto.business.utils.android.ShakerManager r0;
        android.hardware.SensorManager $r1;
        android.hardware.SensorEventListener $r2;

        r0 := @this: it.intelisoft.mobile.crypto.business.utils.android.ShakerManager;

        $r1 = r0.<it.intelisoft.mobile.crypto.business.utils.android.ShakerManager: android.hardware.SensorManager mgr_>;

        $r2 = r0.<it.intelisoft.mobile.crypto.business.utils.android.ShakerManager: android.hardware.SensorEventListener listener_>;

        virtualinvoke $r1.<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener)>($r2);

        return;
    }

    public static void <clinit>()
    {
        <it.intelisoft.mobile.crypto.business.utils.android.ShakerManager: int NO_CHANGING> = -1;

        <it.intelisoft.mobile.crypto.business.utils.android.ShakerManager: int NOT_SHAKING> = 0;

        <it.intelisoft.mobile.crypto.business.utils.android.ShakerManager: int MAX_CHECKS> = 20;

        <it.intelisoft.mobile.crypto.business.utils.android.ShakerManager: int IS_SHAKING> = 2;

        return;
    }
}
