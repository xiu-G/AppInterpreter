public class org.mozilla.universalchardet.prober.EscCharsetProber extends org.mozilla.universalchardet.prober.CharsetProber
{
    private static final org.mozilla.universalchardet.prober.statemachine.HZSMModel hzsModel;
    private static final org.mozilla.universalchardet.prober.statemachine.ISO2022CNSMModel iso2022cnModel;
    private static final org.mozilla.universalchardet.prober.statemachine.ISO2022JPSMModel iso2022jpModel;
    private static final org.mozilla.universalchardet.prober.statemachine.ISO2022KRSMModel iso2022krModel;
    private int activeSM;
    private org.mozilla.universalchardet.prober.statemachine.CodingStateMachine[] codingSM;
    private java.lang.String detectedCharset;
    private org.mozilla.universalchardet.prober.CharsetProber$ProbingState state;

    static void <clinit>()
    {
        org.mozilla.universalchardet.prober.statemachine.ISO2022CNSMModel $r1;
        org.mozilla.universalchardet.prober.statemachine.ISO2022JPSMModel $r2;
        org.mozilla.universalchardet.prober.statemachine.HZSMModel $r0;
        org.mozilla.universalchardet.prober.statemachine.ISO2022KRSMModel $r3;

        $r0 = new org.mozilla.universalchardet.prober.statemachine.HZSMModel;

        specialinvoke $r0.<org.mozilla.universalchardet.prober.statemachine.HZSMModel: void <init>()>();

        <org.mozilla.universalchardet.prober.EscCharsetProber: org.mozilla.universalchardet.prober.statemachine.HZSMModel hzsModel> = $r0;

        $r1 = new org.mozilla.universalchardet.prober.statemachine.ISO2022CNSMModel;

        specialinvoke $r1.<org.mozilla.universalchardet.prober.statemachine.ISO2022CNSMModel: void <init>()>();

        <org.mozilla.universalchardet.prober.EscCharsetProber: org.mozilla.universalchardet.prober.statemachine.ISO2022CNSMModel iso2022cnModel> = $r1;

        $r2 = new org.mozilla.universalchardet.prober.statemachine.ISO2022JPSMModel;

        specialinvoke $r2.<org.mozilla.universalchardet.prober.statemachine.ISO2022JPSMModel: void <init>()>();

        <org.mozilla.universalchardet.prober.EscCharsetProber: org.mozilla.universalchardet.prober.statemachine.ISO2022JPSMModel iso2022jpModel> = $r2;

        $r3 = new org.mozilla.universalchardet.prober.statemachine.ISO2022KRSMModel;

        specialinvoke $r3.<org.mozilla.universalchardet.prober.statemachine.ISO2022KRSMModel: void <init>()>();

        <org.mozilla.universalchardet.prober.EscCharsetProber: org.mozilla.universalchardet.prober.statemachine.ISO2022KRSMModel iso2022krModel> = $r3;

        return;
    }

    public void <init>()
    {
        org.mozilla.universalchardet.prober.statemachine.ISO2022CNSMModel $r4;
        org.mozilla.universalchardet.prober.statemachine.CodingStateMachine[] $r1;
        org.mozilla.universalchardet.prober.statemachine.ISO2022JPSMModel $r5;
        org.mozilla.universalchardet.prober.EscCharsetProber r0;
        org.mozilla.universalchardet.prober.statemachine.CodingStateMachine $r2;
        org.mozilla.universalchardet.prober.statemachine.HZSMModel $r3;
        org.mozilla.universalchardet.prober.statemachine.ISO2022KRSMModel $r6;

        r0 := @this: org.mozilla.universalchardet.prober.EscCharsetProber;

        specialinvoke r0.<org.mozilla.universalchardet.prober.CharsetProber: void <init>()>();

        $r1 = newarray (org.mozilla.universalchardet.prober.statemachine.CodingStateMachine)[4];

        r0.<org.mozilla.universalchardet.prober.EscCharsetProber: org.mozilla.universalchardet.prober.statemachine.CodingStateMachine[] codingSM> = $r1;

        $r1 = r0.<org.mozilla.universalchardet.prober.EscCharsetProber: org.mozilla.universalchardet.prober.statemachine.CodingStateMachine[] codingSM>;

        $r2 = new org.mozilla.universalchardet.prober.statemachine.CodingStateMachine;

        $r3 = <org.mozilla.universalchardet.prober.EscCharsetProber: org.mozilla.universalchardet.prober.statemachine.HZSMModel hzsModel>;

        specialinvoke $r2.<org.mozilla.universalchardet.prober.statemachine.CodingStateMachine: void <init>(org.mozilla.universalchardet.prober.statemachine.SMModel)>($r3);

        $r1[0] = $r2;

        $r1 = r0.<org.mozilla.universalchardet.prober.EscCharsetProber: org.mozilla.universalchardet.prober.statemachine.CodingStateMachine[] codingSM>;

        $r2 = new org.mozilla.universalchardet.prober.statemachine.CodingStateMachine;

        $r4 = <org.mozilla.universalchardet.prober.EscCharsetProber: org.mozilla.universalchardet.prober.statemachine.ISO2022CNSMModel iso2022cnModel>;

        specialinvoke $r2.<org.mozilla.universalchardet.prober.statemachine.CodingStateMachine: void <init>(org.mozilla.universalchardet.prober.statemachine.SMModel)>($r4);

        $r1[1] = $r2;

        $r1 = r0.<org.mozilla.universalchardet.prober.EscCharsetProber: org.mozilla.universalchardet.prober.statemachine.CodingStateMachine[] codingSM>;

        $r2 = new org.mozilla.universalchardet.prober.statemachine.CodingStateMachine;

        $r5 = <org.mozilla.universalchardet.prober.EscCharsetProber: org.mozilla.universalchardet.prober.statemachine.ISO2022JPSMModel iso2022jpModel>;

        specialinvoke $r2.<org.mozilla.universalchardet.prober.statemachine.CodingStateMachine: void <init>(org.mozilla.universalchardet.prober.statemachine.SMModel)>($r5);

        $r1[2] = $r2;

        $r1 = r0.<org.mozilla.universalchardet.prober.EscCharsetProber: org.mozilla.universalchardet.prober.statemachine.CodingStateMachine[] codingSM>;

        $r2 = new org.mozilla.universalchardet.prober.statemachine.CodingStateMachine;

        $r6 = <org.mozilla.universalchardet.prober.EscCharsetProber: org.mozilla.universalchardet.prober.statemachine.ISO2022KRSMModel iso2022krModel>;

        specialinvoke $r2.<org.mozilla.universalchardet.prober.statemachine.CodingStateMachine: void <init>(org.mozilla.universalchardet.prober.statemachine.SMModel)>($r6);

        $r1[3] = $r2;

        virtualinvoke r0.<org.mozilla.universalchardet.prober.EscCharsetProber: void reset()>();

        return;
    }

    public java.lang.String getCharSetName()
    {
        java.lang.String r1;
        org.mozilla.universalchardet.prober.EscCharsetProber r0;

        r0 := @this: org.mozilla.universalchardet.prober.EscCharsetProber;

        r1 = r0.<org.mozilla.universalchardet.prober.EscCharsetProber: java.lang.String detectedCharset>;

        return r1;
    }

    public float getConfidence()
    {
        org.mozilla.universalchardet.prober.EscCharsetProber r0;

        r0 := @this: org.mozilla.universalchardet.prober.EscCharsetProber;

        return 0.99F;
    }

    public org.mozilla.universalchardet.prober.CharsetProber$ProbingState getState()
    {
        org.mozilla.universalchardet.prober.CharsetProber$ProbingState r1;
        org.mozilla.universalchardet.prober.EscCharsetProber r0;

        r0 := @this: org.mozilla.universalchardet.prober.EscCharsetProber;

        r1 = r0.<org.mozilla.universalchardet.prober.EscCharsetProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state>;

        return r1;
    }

    public org.mozilla.universalchardet.prober.CharsetProber$ProbingState handleData(byte[], int, int)
    {
        byte[] $r1;
        org.mozilla.universalchardet.prober.CharsetProber$ProbingState $r2, $r3;
        org.mozilla.universalchardet.prober.EscCharsetProber r0;
        org.mozilla.universalchardet.prober.statemachine.CodingStateMachine $r5, $r7;
        byte $b4;
        org.mozilla.universalchardet.prober.statemachine.CodingStateMachine[] $r4, $r6;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r8;

        r0 := @this: org.mozilla.universalchardet.prober.EscCharsetProber;

        $r1 := @parameter0: byte[];

        $i2 := @parameter1: int;

        $i0 := @parameter2: int;

        $i0 = 0 + $i0;

     label1:
        if $i2 >= $i0 goto label7;

        $r2 = r0.<org.mozilla.universalchardet.prober.EscCharsetProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state>;

        $r3 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState DETECTING>;

        if $r2 != $r3 goto label7;

        $i3 = r0.<org.mozilla.universalchardet.prober.EscCharsetProber: int activeSM>;

        $i3 = $i3 + -1;

     label2:
        if $i3 < 0 goto label6;

        $r4 = r0.<org.mozilla.universalchardet.prober.EscCharsetProber: org.mozilla.universalchardet.prober.statemachine.CodingStateMachine[] codingSM>;

        $r5 = $r4[$i3];

        $b4 = $r1[$i2];

        $i1 = virtualinvoke $r5.<org.mozilla.universalchardet.prober.statemachine.CodingStateMachine: int nextState(byte)>($b4);

        if $i1 != 1 goto label5;

        $i1 = r0.<org.mozilla.universalchardet.prober.EscCharsetProber: int activeSM>;

        $i1 = $i1 + -1;

        r0.<org.mozilla.universalchardet.prober.EscCharsetProber: int activeSM> = $i1;

        $i1 = r0.<org.mozilla.universalchardet.prober.EscCharsetProber: int activeSM>;

        if $i1 > 0 goto label3;

        $r2 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState NOT_ME>;

        r0.<org.mozilla.universalchardet.prober.EscCharsetProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state> = $r2;

        $r2 = r0.<org.mozilla.universalchardet.prober.EscCharsetProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state>;

        return $r2;

     label3:
        $i1 = r0.<org.mozilla.universalchardet.prober.EscCharsetProber: int activeSM>;

        if $i3 == $i1 goto label4;

        $r4 = r0.<org.mozilla.universalchardet.prober.EscCharsetProber: org.mozilla.universalchardet.prober.statemachine.CodingStateMachine[] codingSM>;

        $i1 = r0.<org.mozilla.universalchardet.prober.EscCharsetProber: int activeSM>;

        $r5 = $r4[$i1];

        $r4 = r0.<org.mozilla.universalchardet.prober.EscCharsetProber: org.mozilla.universalchardet.prober.statemachine.CodingStateMachine[] codingSM>;

        $i1 = r0.<org.mozilla.universalchardet.prober.EscCharsetProber: int activeSM>;

        $r6 = r0.<org.mozilla.universalchardet.prober.EscCharsetProber: org.mozilla.universalchardet.prober.statemachine.CodingStateMachine[] codingSM>;

        $r7 = $r6[$i3];

        $r4[$i1] = $r7;

        $r4 = r0.<org.mozilla.universalchardet.prober.EscCharsetProber: org.mozilla.universalchardet.prober.statemachine.CodingStateMachine[] codingSM>;

        $r4[$i3] = $r5;

     label4:
        $i3 = $i3 + -1;

        goto label2;

     label5:
        if $i1 != 2 goto label4;

        $r2 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState FOUND_IT>;

        r0.<org.mozilla.universalchardet.prober.EscCharsetProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state> = $r2;

        $r4 = r0.<org.mozilla.universalchardet.prober.EscCharsetProber: org.mozilla.universalchardet.prober.statemachine.CodingStateMachine[] codingSM>;

        $r5 = $r4[$i3];

        $r8 = virtualinvoke $r5.<org.mozilla.universalchardet.prober.statemachine.CodingStateMachine: java.lang.String getCodingStateMachine()>();

        r0.<org.mozilla.universalchardet.prober.EscCharsetProber: java.lang.String detectedCharset> = $r8;

        $r2 = r0.<org.mozilla.universalchardet.prober.EscCharsetProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state>;

        return $r2;

     label6:
        $i2 = $i2 + 1;

        goto label1;

     label7:
        $r2 = r0.<org.mozilla.universalchardet.prober.EscCharsetProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state>;

        return $r2;
    }

    public void reset()
    {
        org.mozilla.universalchardet.prober.CharsetProber$ProbingState $r1;
        org.mozilla.universalchardet.prober.statemachine.CodingStateMachine[] $r2;
        org.mozilla.universalchardet.prober.EscCharsetProber r0;
        org.mozilla.universalchardet.prober.statemachine.CodingStateMachine $r3;
        int $i0, $i1;

        r0 := @this: org.mozilla.universalchardet.prober.EscCharsetProber;

        $r1 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState DETECTING>;

        r0.<org.mozilla.universalchardet.prober.EscCharsetProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state> = $r1;

        $i0 = 0;

     label1:
        $r2 = r0.<org.mozilla.universalchardet.prober.EscCharsetProber: org.mozilla.universalchardet.prober.statemachine.CodingStateMachine[] codingSM>;

        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label2;

        $r2 = r0.<org.mozilla.universalchardet.prober.EscCharsetProber: org.mozilla.universalchardet.prober.statemachine.CodingStateMachine[] codingSM>;

        $r3 = $r2[$i0];

        virtualinvoke $r3.<org.mozilla.universalchardet.prober.statemachine.CodingStateMachine: void reset()>();

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r2 = r0.<org.mozilla.universalchardet.prober.EscCharsetProber: org.mozilla.universalchardet.prober.statemachine.CodingStateMachine[] codingSM>;

        $i0 = lengthof $r2;

        r0.<org.mozilla.universalchardet.prober.EscCharsetProber: int activeSM> = $i0;

        r0.<org.mozilla.universalchardet.prober.EscCharsetProber: java.lang.String detectedCharset> = null;

        return;
    }

    public void setOption()
    {
        org.mozilla.universalchardet.prober.EscCharsetProber r0;

        r0 := @this: org.mozilla.universalchardet.prober.EscCharsetProber;

        return;
    }
}
