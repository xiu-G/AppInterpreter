public final class twitter4j.json.DataObjectFactory extends java.lang.Object
{
    private static int[] $SWITCH_TABLE$twitter4j$json$JSONObjectType$Type;
    private static final java.lang.reflect.Constructor IDsConstructor;
    private static final java.lang.reflect.Constructor accountTotalsConstructor;
    private static final java.lang.reflect.Constructor categoryConstructor;
    private static final java.lang.reflect.Constructor directMessageConstructor;
    private static final java.lang.reflect.Constructor locationConstructor;
    private static final java.lang.reflect.Constructor oembedConstructor;
    private static final java.lang.reflect.Constructor placeConstructor;
    private static final java.lang.reflect.Method rateLimitStatusConstructor;
    private static final java.lang.ThreadLocal rawJsonMap;
    private static final java.lang.reflect.Constructor relationshipConstructor;
    private static final java.lang.reflect.Constructor savedSearchConstructor;
    private static final java.lang.reflect.Constructor statusConstructor;
    private static final java.lang.reflect.Constructor statusDeletionNoticeConstructor;
    private static final java.lang.reflect.Constructor trendConstructor;
    private static final java.lang.reflect.Constructor trendsConstructor;
    private static final java.lang.reflect.Constructor userConstructor;
    private static final java.lang.reflect.Constructor userListConstructor;

    static int[] $SWITCH_TABLE$twitter4j$json$JSONObjectType$Type()
    {
        twitter4j.json.JSONObjectType$Type $r2;
        java.lang.NoSuchFieldError $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26;
        int[] $r0;
        int $i0;
        twitter4j.json.JSONObjectType$Type[] $r1;

        $r0 = <twitter4j.json.DataObjectFactory: int[] $SWITCH_TABLE$twitter4j$json$JSONObjectType$Type>;

        if $r0 == null goto label01;

        return $r0;

     label01:
        $r1 = staticinvoke <twitter4j.json.JSONObjectType$Type: twitter4j.json.JSONObjectType$Type[] values()>();

        $i0 = lengthof $r1;

        $r0 = newarray (int)[$i0];

     label02:
        $r2 = <twitter4j.json.JSONObjectType$Type: twitter4j.json.JSONObjectType$Type BLOCK>;

        $i0 = virtualinvoke $r2.<twitter4j.json.JSONObjectType$Type: int ordinal()>();

     label03:
        $r0[$i0] = 21;

     label04:
        $r2 = <twitter4j.json.JSONObjectType$Type: twitter4j.json.JSONObjectType$Type DELETE>;

        $i0 = virtualinvoke $r2.<twitter4j.json.JSONObjectType$Type: int ordinal()>();

     label05:
        $r0[$i0] = 4;

     label06:
        $r2 = <twitter4j.json.JSONObjectType$Type: twitter4j.json.JSONObjectType$Type DIRECT_MESSAGE>;

        $i0 = virtualinvoke $r2.<twitter4j.json.JSONObjectType$Type: int ordinal()>();

     label07:
        $r0[$i0] = 3;

     label08:
        $r2 = <twitter4j.json.JSONObjectType$Type: twitter4j.json.JSONObjectType$Type DISCONNECTION>;

        $i0 = virtualinvoke $r2.<twitter4j.json.JSONObjectType$Type: int ordinal()>();

     label09:
        $r0[$i0] = 23;

     label10:
        $r2 = <twitter4j.json.JSONObjectType$Type: twitter4j.json.JSONObjectType$Type FAVORITE>;

        $i0 = virtualinvoke $r2.<twitter4j.json.JSONObjectType$Type: int ordinal()>();

     label11:
        $r0[$i0] = 9;

     label12:
        $r2 = <twitter4j.json.JSONObjectType$Type: twitter4j.json.JSONObjectType$Type FOLLOW>;

        $i0 = virtualinvoke $r2.<twitter4j.json.JSONObjectType$Type: int ordinal()>();

     label13:
        $r0[$i0] = 11;

     label14:
        $r2 = <twitter4j.json.JSONObjectType$Type: twitter4j.json.JSONObjectType$Type FRIENDS>;

        $i0 = virtualinvoke $r2.<twitter4j.json.JSONObjectType$Type: int ordinal()>();

     label15:
        $r0[$i0] = 8;

     label16:
        $r2 = <twitter4j.json.JSONObjectType$Type: twitter4j.json.JSONObjectType$Type LIMIT>;

        $i0 = virtualinvoke $r2.<twitter4j.json.JSONObjectType$Type: int ordinal()>();

     label17:
        $r0[$i0] = 5;

     label18:
        $r2 = <twitter4j.json.JSONObjectType$Type: twitter4j.json.JSONObjectType$Type SCRUB_GEO>;

        $i0 = virtualinvoke $r2.<twitter4j.json.JSONObjectType$Type: int ordinal()>();

     label19:
        $r0[$i0] = 7;

     label20:
        $r2 = <twitter4j.json.JSONObjectType$Type: twitter4j.json.JSONObjectType$Type SENDER>;

        $i0 = virtualinvoke $r2.<twitter4j.json.JSONObjectType$Type: int ordinal()>();

     label21:
        $r0[$i0] = 1;

     label22:
        $r2 = <twitter4j.json.JSONObjectType$Type: twitter4j.json.JSONObjectType$Type STALL_WARNING>;

        $i0 = virtualinvoke $r2.<twitter4j.json.JSONObjectType$Type: int ordinal()>();

     label23:
        $r0[$i0] = 6;

     label24:
        $r2 = <twitter4j.json.JSONObjectType$Type: twitter4j.json.JSONObjectType$Type STATUS>;

        $i0 = virtualinvoke $r2.<twitter4j.json.JSONObjectType$Type: int ordinal()>();

     label25:
        $r0[$i0] = 2;

     label26:
        $r2 = <twitter4j.json.JSONObjectType$Type: twitter4j.json.JSONObjectType$Type UNBLOCK>;

        $i0 = virtualinvoke $r2.<twitter4j.json.JSONObjectType$Type: int ordinal()>();

     label27:
        $r0[$i0] = 22;

     label28:
        $r2 = <twitter4j.json.JSONObjectType$Type: twitter4j.json.JSONObjectType$Type UNFAVORITE>;

        $i0 = virtualinvoke $r2.<twitter4j.json.JSONObjectType$Type: int ordinal()>();

     label29:
        $r0[$i0] = 10;

     label30:
        $r2 = <twitter4j.json.JSONObjectType$Type: twitter4j.json.JSONObjectType$Type UNFOLLOW>;

        $i0 = virtualinvoke $r2.<twitter4j.json.JSONObjectType$Type: int ordinal()>();

     label31:
        $r0[$i0] = 12;

     label32:
        $r2 = <twitter4j.json.JSONObjectType$Type: twitter4j.json.JSONObjectType$Type UNKNOWN>;

        $i0 = virtualinvoke $r2.<twitter4j.json.JSONObjectType$Type: int ordinal()>();

     label33:
        $r0[$i0] = 24;

     label34:
        $r2 = <twitter4j.json.JSONObjectType$Type: twitter4j.json.JSONObjectType$Type USER_LIST_CREATED>;

        $i0 = virtualinvoke $r2.<twitter4j.json.JSONObjectType$Type: int ordinal()>();

     label35:
        $r0[$i0] = 17;

     label36:
        $r2 = <twitter4j.json.JSONObjectType$Type: twitter4j.json.JSONObjectType$Type USER_LIST_DESTROYED>;

        $i0 = virtualinvoke $r2.<twitter4j.json.JSONObjectType$Type: int ordinal()>();

     label37:
        $r0[$i0] = 19;

     label38:
        $r2 = <twitter4j.json.JSONObjectType$Type: twitter4j.json.JSONObjectType$Type USER_LIST_MEMBER_ADDED>;

        $i0 = virtualinvoke $r2.<twitter4j.json.JSONObjectType$Type: int ordinal()>();

     label39:
        $r0[$i0] = 13;

     label40:
        $r2 = <twitter4j.json.JSONObjectType$Type: twitter4j.json.JSONObjectType$Type USER_LIST_MEMBER_DELETED>;

        $i0 = virtualinvoke $r2.<twitter4j.json.JSONObjectType$Type: int ordinal()>();

     label41:
        $r0[$i0] = 14;

     label42:
        $r2 = <twitter4j.json.JSONObjectType$Type: twitter4j.json.JSONObjectType$Type USER_LIST_SUBSCRIBED>;

        $i0 = virtualinvoke $r2.<twitter4j.json.JSONObjectType$Type: int ordinal()>();

     label43:
        $r0[$i0] = 15;

     label44:
        $r2 = <twitter4j.json.JSONObjectType$Type: twitter4j.json.JSONObjectType$Type USER_LIST_UNSUBSCRIBED>;

        $i0 = virtualinvoke $r2.<twitter4j.json.JSONObjectType$Type: int ordinal()>();

     label45:
        $r0[$i0] = 16;

     label46:
        $r2 = <twitter4j.json.JSONObjectType$Type: twitter4j.json.JSONObjectType$Type USER_LIST_UPDATED>;

        $i0 = virtualinvoke $r2.<twitter4j.json.JSONObjectType$Type: int ordinal()>();

     label47:
        $r0[$i0] = 18;

     label48:
        $r2 = <twitter4j.json.JSONObjectType$Type: twitter4j.json.JSONObjectType$Type USER_UPDATE>;

        $i0 = virtualinvoke $r2.<twitter4j.json.JSONObjectType$Type: int ordinal()>();

     label49:
        $r0[$i0] = 20;

     label50:
        <twitter4j.json.DataObjectFactory: int[] $SWITCH_TABLE$twitter4j$json$JSONObjectType$Type> = $r0;

        return $r0;

     label51:
        $r3 := @caughtexception;

        goto label50;

     label52:
        $r4 := @caughtexception;

        goto label48;

     label53:
        $r5 := @caughtexception;

        goto label46;

     label54:
        $r6 := @caughtexception;

        goto label44;

     label55:
        $r7 := @caughtexception;

        goto label42;

     label56:
        $r8 := @caughtexception;

        goto label40;

     label57:
        $r9 := @caughtexception;

        goto label38;

     label58:
        $r10 := @caughtexception;

        goto label36;

     label59:
        $r11 := @caughtexception;

        goto label34;

     label60:
        $r12 := @caughtexception;

        goto label32;

     label61:
        $r13 := @caughtexception;

        goto label30;

     label62:
        $r14 := @caughtexception;

        goto label28;

     label63:
        $r15 := @caughtexception;

        goto label26;

     label64:
        $r16 := @caughtexception;

        goto label24;

     label65:
        $r17 := @caughtexception;

        goto label22;

     label66:
        $r18 := @caughtexception;

        goto label20;

     label67:
        $r19 := @caughtexception;

        goto label18;

     label68:
        $r20 := @caughtexception;

        goto label16;

     label69:
        $r21 := @caughtexception;

        goto label14;

     label70:
        $r22 := @caughtexception;

        goto label12;

     label71:
        $r23 := @caughtexception;

        goto label10;

     label72:
        $r24 := @caughtexception;

        goto label08;

     label73:
        $r25 := @caughtexception;

        goto label06;

     label74:
        $r26 := @caughtexception;

        goto label04;

        catch java.lang.NoSuchFieldError from label02 to label03 with label74;
        catch java.lang.NoSuchFieldError from label04 to label05 with label73;
        catch java.lang.NoSuchFieldError from label06 to label07 with label72;
        catch java.lang.NoSuchFieldError from label08 to label09 with label71;
        catch java.lang.NoSuchFieldError from label10 to label11 with label70;
        catch java.lang.NoSuchFieldError from label12 to label13 with label69;
        catch java.lang.NoSuchFieldError from label14 to label15 with label68;
        catch java.lang.NoSuchFieldError from label16 to label17 with label67;
        catch java.lang.NoSuchFieldError from label18 to label19 with label66;
        catch java.lang.NoSuchFieldError from label20 to label21 with label65;
        catch java.lang.NoSuchFieldError from label22 to label23 with label64;
        catch java.lang.NoSuchFieldError from label24 to label25 with label63;
        catch java.lang.NoSuchFieldError from label26 to label27 with label62;
        catch java.lang.NoSuchFieldError from label28 to label29 with label61;
        catch java.lang.NoSuchFieldError from label30 to label31 with label60;
        catch java.lang.NoSuchFieldError from label32 to label33 with label59;
        catch java.lang.NoSuchFieldError from label34 to label35 with label58;
        catch java.lang.NoSuchFieldError from label36 to label37 with label57;
        catch java.lang.NoSuchFieldError from label38 to label39 with label56;
        catch java.lang.NoSuchFieldError from label40 to label41 with label55;
        catch java.lang.NoSuchFieldError from label42 to label43 with label54;
        catch java.lang.NoSuchFieldError from label44 to label45 with label53;
        catch java.lang.NoSuchFieldError from label46 to label47 with label52;
        catch java.lang.NoSuchFieldError from label48 to label49 with label51;
    }

    static void <clinit>()
    {
        java.lang.Throwable $r5;
        twitter4j.json.DataObjectFactory$1 $r4;
        java.lang.Class[] $r1;
        java.lang.reflect.Constructor $r2;
        java.lang.Class $r0;
        java.lang.ClassNotFoundException $r7;
        java.lang.reflect.Method $r3;
        java.lang.ExceptionInInitializerError $r6;

     label01:
        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("twitter4j.internal.json.StatusJSONImpl");

     label02:
        $r1 = newarray (java.lang.Class)[1];

        $r1[0] = class "Ltwitter4j/internal/org/json/JSONObject;";

     label03:
        $r2 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r1);

     label04:
        <twitter4j.json.DataObjectFactory: java.lang.reflect.Constructor statusConstructor> = $r2;

     label05:
        virtualinvoke $r2.<java.lang.reflect.Constructor: void setAccessible(boolean)>(1);

        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("twitter4j.internal.json.UserJSONImpl");

     label06:
        $r1 = newarray (java.lang.Class)[1];

        $r1[0] = class "Ltwitter4j/internal/org/json/JSONObject;";

     label07:
        $r2 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r1);

     label08:
        <twitter4j.json.DataObjectFactory: java.lang.reflect.Constructor userConstructor> = $r2;

     label09:
        virtualinvoke $r2.<java.lang.reflect.Constructor: void setAccessible(boolean)>(1);

        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("twitter4j.internal.json.RelationshipJSONImpl");

     label10:
        $r1 = newarray (java.lang.Class)[1];

        $r1[0] = class "Ltwitter4j/internal/org/json/JSONObject;";

     label11:
        $r2 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r1);

     label12:
        <twitter4j.json.DataObjectFactory: java.lang.reflect.Constructor relationshipConstructor> = $r2;

     label13:
        virtualinvoke $r2.<java.lang.reflect.Constructor: void setAccessible(boolean)>(1);

        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("twitter4j.internal.json.PlaceJSONImpl");

     label14:
        $r1 = newarray (java.lang.Class)[1];

        $r1[0] = class "Ltwitter4j/internal/org/json/JSONObject;";

     label15:
        $r2 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r1);

     label16:
        <twitter4j.json.DataObjectFactory: java.lang.reflect.Constructor placeConstructor> = $r2;

     label17:
        virtualinvoke $r2.<java.lang.reflect.Constructor: void setAccessible(boolean)>(1);

        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("twitter4j.internal.json.SavedSearchJSONImpl");

     label18:
        $r1 = newarray (java.lang.Class)[1];

        $r1[0] = class "Ltwitter4j/internal/org/json/JSONObject;";

     label19:
        $r2 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r1);

     label20:
        <twitter4j.json.DataObjectFactory: java.lang.reflect.Constructor savedSearchConstructor> = $r2;

     label21:
        virtualinvoke $r2.<java.lang.reflect.Constructor: void setAccessible(boolean)>(1);

        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("twitter4j.internal.json.TrendJSONImpl");

     label22:
        $r1 = newarray (java.lang.Class)[1];

        $r1[0] = class "Ltwitter4j/internal/org/json/JSONObject;";

     label23:
        $r2 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r1);

     label24:
        <twitter4j.json.DataObjectFactory: java.lang.reflect.Constructor trendConstructor> = $r2;

     label25:
        virtualinvoke $r2.<java.lang.reflect.Constructor: void setAccessible(boolean)>(1);

        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("twitter4j.internal.json.TrendsJSONImpl");

     label26:
        $r1 = newarray (java.lang.Class)[1];

        $r1[0] = class "Ljava/lang/String;";

     label27:
        $r2 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r1);

     label28:
        <twitter4j.json.DataObjectFactory: java.lang.reflect.Constructor trendsConstructor> = $r2;

     label29:
        virtualinvoke $r2.<java.lang.reflect.Constructor: void setAccessible(boolean)>(1);

        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("twitter4j.internal.json.IDsJSONImpl");

     label30:
        $r1 = newarray (java.lang.Class)[1];

        $r1[0] = class "Ljava/lang/String;";

     label31:
        $r2 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r1);

     label32:
        <twitter4j.json.DataObjectFactory: java.lang.reflect.Constructor IDsConstructor> = $r2;

     label33:
        virtualinvoke $r2.<java.lang.reflect.Constructor: void setAccessible(boolean)>(1);

        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("twitter4j.internal.json.RateLimitStatusJSONImpl");

     label34:
        $r1 = newarray (java.lang.Class)[1];

        $r1[0] = class "Ltwitter4j/internal/org/json/JSONObject;";

     label35:
        $r3 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("createRateLimitStatuses", $r1);

     label36:
        <twitter4j.json.DataObjectFactory: java.lang.reflect.Method rateLimitStatusConstructor> = $r3;

     label37:
        virtualinvoke $r3.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("twitter4j.internal.json.CategoryJSONImpl");

     label38:
        $r1 = newarray (java.lang.Class)[1];

        $r1[0] = class "Ltwitter4j/internal/org/json/JSONObject;";

     label39:
        $r2 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r1);

     label40:
        <twitter4j.json.DataObjectFactory: java.lang.reflect.Constructor categoryConstructor> = $r2;

     label41:
        virtualinvoke $r2.<java.lang.reflect.Constructor: void setAccessible(boolean)>(1);

        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("twitter4j.internal.json.DirectMessageJSONImpl");

     label42:
        $r1 = newarray (java.lang.Class)[1];

        $r1[0] = class "Ltwitter4j/internal/org/json/JSONObject;";

     label43:
        $r2 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r1);

     label44:
        <twitter4j.json.DataObjectFactory: java.lang.reflect.Constructor directMessageConstructor> = $r2;

     label45:
        virtualinvoke $r2.<java.lang.reflect.Constructor: void setAccessible(boolean)>(1);

        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("twitter4j.internal.json.LocationJSONImpl");

     label46:
        $r1 = newarray (java.lang.Class)[1];

        $r1[0] = class "Ltwitter4j/internal/org/json/JSONObject;";

     label47:
        $r2 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r1);

     label48:
        <twitter4j.json.DataObjectFactory: java.lang.reflect.Constructor locationConstructor> = $r2;

     label49:
        virtualinvoke $r2.<java.lang.reflect.Constructor: void setAccessible(boolean)>(1);

        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("twitter4j.internal.json.UserListJSONImpl");

     label50:
        $r1 = newarray (java.lang.Class)[1];

        $r1[0] = class "Ltwitter4j/internal/org/json/JSONObject;";

     label51:
        $r2 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r1);

     label52:
        <twitter4j.json.DataObjectFactory: java.lang.reflect.Constructor userListConstructor> = $r2;

     label53:
        virtualinvoke $r2.<java.lang.reflect.Constructor: void setAccessible(boolean)>(1);

        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("twitter4j.StatusDeletionNoticeImpl");

     label54:
        $r1 = newarray (java.lang.Class)[1];

        $r1[0] = class "Ltwitter4j/internal/org/json/JSONObject;";

     label55:
        $r2 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r1);

     label56:
        <twitter4j.json.DataObjectFactory: java.lang.reflect.Constructor statusDeletionNoticeConstructor> = $r2;

     label57:
        virtualinvoke $r2.<java.lang.reflect.Constructor: void setAccessible(boolean)>(1);

        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("twitter4j.internal.json.AccountTotalsJSONImpl");

     label58:
        $r1 = newarray (java.lang.Class)[1];

        $r1[0] = class "Ltwitter4j/internal/org/json/JSONObject;";

     label59:
        $r2 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r1);

     label60:
        <twitter4j.json.DataObjectFactory: java.lang.reflect.Constructor accountTotalsConstructor> = $r2;

     label61:
        virtualinvoke $r2.<java.lang.reflect.Constructor: void setAccessible(boolean)>(1);

        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("twitter4j.internal.json.OEmbedJSONImpl");

     label62:
        $r1 = newarray (java.lang.Class)[1];

        $r1[0] = class "Ltwitter4j/internal/org/json/JSONObject;";

     label63:
        $r2 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r1);

     label64:
        <twitter4j.json.DataObjectFactory: java.lang.reflect.Constructor oembedConstructor> = $r2;

     label65:
        virtualinvoke $r2.<java.lang.reflect.Constructor: void setAccessible(boolean)>(1);

     label66:
        $r4 = new twitter4j.json.DataObjectFactory$1;

        specialinvoke $r4.<twitter4j.json.DataObjectFactory$1: void <init>()>();

        <twitter4j.json.DataObjectFactory: java.lang.ThreadLocal rawJsonMap> = $r4;

        return;

     label67:
        $r5 := @caughtexception;

        $r6 = new java.lang.ExceptionInInitializerError;

        specialinvoke $r6.<java.lang.ExceptionInInitializerError: void <init>(java.lang.Throwable)>($r5);

        throw $r6;

     label68:
        $r7 := @caughtexception;

        $r6 = new java.lang.ExceptionInInitializerError;

        specialinvoke $r6.<java.lang.ExceptionInInitializerError: void <init>(java.lang.Throwable)>($r7);

        throw $r6;

        catch java.lang.NoSuchMethodException from label01 to label02 with label67;
        catch java.lang.NoSuchMethodException from label03 to label04 with label67;
        catch java.lang.NoSuchMethodException from label05 to label06 with label67;
        catch java.lang.NoSuchMethodException from label07 to label08 with label67;
        catch java.lang.NoSuchMethodException from label09 to label10 with label67;
        catch java.lang.NoSuchMethodException from label11 to label12 with label67;
        catch java.lang.NoSuchMethodException from label13 to label14 with label67;
        catch java.lang.NoSuchMethodException from label15 to label16 with label67;
        catch java.lang.NoSuchMethodException from label17 to label18 with label67;
        catch java.lang.NoSuchMethodException from label19 to label20 with label67;
        catch java.lang.NoSuchMethodException from label21 to label22 with label67;
        catch java.lang.NoSuchMethodException from label23 to label24 with label67;
        catch java.lang.NoSuchMethodException from label25 to label26 with label67;
        catch java.lang.NoSuchMethodException from label27 to label28 with label67;
        catch java.lang.NoSuchMethodException from label29 to label30 with label67;
        catch java.lang.NoSuchMethodException from label31 to label32 with label67;
        catch java.lang.NoSuchMethodException from label33 to label34 with label67;
        catch java.lang.NoSuchMethodException from label35 to label36 with label67;
        catch java.lang.NoSuchMethodException from label37 to label38 with label67;
        catch java.lang.NoSuchMethodException from label39 to label40 with label67;
        catch java.lang.NoSuchMethodException from label41 to label42 with label67;
        catch java.lang.NoSuchMethodException from label43 to label44 with label67;
        catch java.lang.NoSuchMethodException from label45 to label46 with label67;
        catch java.lang.NoSuchMethodException from label47 to label48 with label67;
        catch java.lang.NoSuchMethodException from label49 to label50 with label67;
        catch java.lang.NoSuchMethodException from label51 to label52 with label67;
        catch java.lang.NoSuchMethodException from label53 to label54 with label67;
        catch java.lang.NoSuchMethodException from label55 to label56 with label67;
        catch java.lang.NoSuchMethodException from label57 to label58 with label67;
        catch java.lang.NoSuchMethodException from label59 to label60 with label67;
        catch java.lang.NoSuchMethodException from label61 to label62 with label67;
        catch java.lang.NoSuchMethodException from label63 to label64 with label67;
        catch java.lang.NoSuchMethodException from label65 to label66 with label67;
        catch java.lang.ClassNotFoundException from label01 to label02 with label68;
        catch java.lang.ClassNotFoundException from label03 to label04 with label68;
        catch java.lang.ClassNotFoundException from label05 to label06 with label68;
        catch java.lang.ClassNotFoundException from label07 to label08 with label68;
        catch java.lang.ClassNotFoundException from label09 to label10 with label68;
        catch java.lang.ClassNotFoundException from label11 to label12 with label68;
        catch java.lang.ClassNotFoundException from label13 to label14 with label68;
        catch java.lang.ClassNotFoundException from label15 to label16 with label68;
        catch java.lang.ClassNotFoundException from label17 to label18 with label68;
        catch java.lang.ClassNotFoundException from label19 to label20 with label68;
        catch java.lang.ClassNotFoundException from label21 to label22 with label68;
        catch java.lang.ClassNotFoundException from label23 to label24 with label68;
        catch java.lang.ClassNotFoundException from label25 to label26 with label68;
        catch java.lang.ClassNotFoundException from label27 to label28 with label68;
        catch java.lang.ClassNotFoundException from label29 to label30 with label68;
        catch java.lang.ClassNotFoundException from label31 to label32 with label68;
        catch java.lang.ClassNotFoundException from label33 to label34 with label68;
        catch java.lang.ClassNotFoundException from label35 to label36 with label68;
        catch java.lang.ClassNotFoundException from label37 to label38 with label68;
        catch java.lang.ClassNotFoundException from label39 to label40 with label68;
        catch java.lang.ClassNotFoundException from label41 to label42 with label68;
        catch java.lang.ClassNotFoundException from label43 to label44 with label68;
        catch java.lang.ClassNotFoundException from label45 to label46 with label68;
        catch java.lang.ClassNotFoundException from label47 to label48 with label68;
        catch java.lang.ClassNotFoundException from label49 to label50 with label68;
        catch java.lang.ClassNotFoundException from label51 to label52 with label68;
        catch java.lang.ClassNotFoundException from label53 to label54 with label68;
        catch java.lang.ClassNotFoundException from label55 to label56 with label68;
        catch java.lang.ClassNotFoundException from label57 to label58 with label68;
        catch java.lang.ClassNotFoundException from label59 to label60 with label68;
        catch java.lang.ClassNotFoundException from label61 to label62 with label68;
        catch java.lang.ClassNotFoundException from label63 to label64 with label68;
        catch java.lang.ClassNotFoundException from label65 to label66 with label68;
    }

    private void <init>()
    {
        java.lang.AssertionError $r1;
        twitter4j.json.DataObjectFactory r0;

        r0 := @this: twitter4j.json.DataObjectFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>(java.lang.Object)>("not intended to be instantiated.");

        throw $r1;
    }

    static void clearThreadLocalMap()
    {
        java.lang.Object $r0;
        java.lang.ThreadLocal $r1;
        java.util.Map $r2;

        $r1 = <twitter4j.json.DataObjectFactory: java.lang.ThreadLocal rawJsonMap>;

        $r0 = virtualinvoke $r1.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r2 = (java.util.Map) $r0;

        interfaceinvoke $r2.<java.util.Map: void clear()>();

        return;
    }

    public static twitter4j.AccountTotals createAccountTotals(java.lang.String)
    {
        java.lang.Throwable $r5, $r6, $r7;
        twitter4j.AccountTotals $r4;
        java.lang.Object[] $r3;
        twitter4j.internal.org.json.JSONException $r8;
        java.lang.AssertionError $r11;
        java.lang.reflect.Constructor $r2;
        java.lang.Exception $r12;
        twitter4j.TwitterException $r10;
        java.lang.Object $r1;
        java.lang.String $r0;
        twitter4j.internal.org.json.JSONObject $r9;

        $r0 := @parameter0: java.lang.String;

        $r9 = new twitter4j.internal.org.json.JSONObject;

     label1:
        specialinvoke $r9.<twitter4j.internal.org.json.JSONObject: void <init>(java.lang.String)>($r0);

     label2:
        $r2 = <twitter4j.json.DataObjectFactory: java.lang.reflect.Constructor accountTotalsConstructor>;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = $r9;

     label3:
        $r1 = virtualinvoke $r2.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r3);

     label4:
        $r4 = (twitter4j.AccountTotals) $r1;

        return $r4;

     label5:
        $r5 := @caughtexception;

        $r10 = new twitter4j.TwitterException;

        $r12 = (java.lang.Exception) $r5;

        specialinvoke $r10.<twitter4j.TwitterException: void <init>(java.lang.Exception)>($r12);

        throw $r10;

     label6:
        $r6 := @caughtexception;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>(java.lang.Object)>($r6);

        throw $r11;

     label7:
        $r7 := @caughtexception;

        $r10 = new twitter4j.TwitterException;

        $r12 = (java.lang.Exception) $r7;

        specialinvoke $r10.<twitter4j.TwitterException: void <init>(java.lang.Exception)>($r12);

        throw $r10;

     label8:
        $r8 := @caughtexception;

        $r10 = new twitter4j.TwitterException;

        specialinvoke $r10.<twitter4j.TwitterException: void <init>(java.lang.Exception)>($r8);

        throw $r10;

        catch java.lang.InstantiationException from label1 to label2 with label5;
        catch java.lang.InstantiationException from label3 to label4 with label5;
        catch java.lang.IllegalAccessException from label1 to label2 with label6;
        catch java.lang.IllegalAccessException from label3 to label4 with label6;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label7;
        catch java.lang.reflect.InvocationTargetException from label3 to label4 with label7;
        catch twitter4j.internal.org.json.JSONException from label1 to label2 with label8;
        catch twitter4j.internal.org.json.JSONException from label3 to label4 with label8;
    }

    public static twitter4j.Category createCategory(java.lang.String)
    {
        twitter4j.Category $r4;
        java.lang.Throwable $r5, $r6, $r7;
        java.lang.Object[] $r3;
        twitter4j.internal.org.json.JSONException $r8;
        java.lang.AssertionError $r11;
        java.lang.reflect.Constructor $r2;
        java.lang.Exception $r12;
        twitter4j.TwitterException $r10;
        java.lang.Object $r1;
        java.lang.String $r0;
        twitter4j.internal.org.json.JSONObject $r9;

        $r0 := @parameter0: java.lang.String;

        $r9 = new twitter4j.internal.org.json.JSONObject;

     label1:
        specialinvoke $r9.<twitter4j.internal.org.json.JSONObject: void <init>(java.lang.String)>($r0);

     label2:
        $r2 = <twitter4j.json.DataObjectFactory: java.lang.reflect.Constructor categoryConstructor>;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = $r9;

     label3:
        $r1 = virtualinvoke $r2.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r3);

     label4:
        $r4 = (twitter4j.Category) $r1;

        return $r4;

     label5:
        $r5 := @caughtexception;

        $r10 = new twitter4j.TwitterException;

        $r12 = (java.lang.Exception) $r5;

        specialinvoke $r10.<twitter4j.TwitterException: void <init>(java.lang.Exception)>($r12);

        throw $r10;

     label6:
        $r6 := @caughtexception;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>(java.lang.Object)>($r6);

        throw $r11;

     label7:
        $r7 := @caughtexception;

        $r10 = new twitter4j.TwitterException;

        $r12 = (java.lang.Exception) $r7;

        specialinvoke $r10.<twitter4j.TwitterException: void <init>(java.lang.Exception)>($r12);

        throw $r10;

     label8:
        $r8 := @caughtexception;

        $r10 = new twitter4j.TwitterException;

        specialinvoke $r10.<twitter4j.TwitterException: void <init>(java.lang.Exception)>($r8);

        throw $r10;

        catch java.lang.InstantiationException from label1 to label2 with label5;
        catch java.lang.InstantiationException from label3 to label4 with label5;
        catch java.lang.IllegalAccessException from label1 to label2 with label6;
        catch java.lang.IllegalAccessException from label3 to label4 with label6;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label7;
        catch java.lang.reflect.InvocationTargetException from label3 to label4 with label7;
        catch twitter4j.internal.org.json.JSONException from label1 to label2 with label8;
        catch twitter4j.internal.org.json.JSONException from label3 to label4 with label8;
    }

    public static twitter4j.DirectMessage createDirectMessage(java.lang.String)
    {
        java.lang.Throwable $r5, $r6, $r7;
        java.lang.Object[] $r3;
        twitter4j.internal.org.json.JSONException $r8;
        twitter4j.DirectMessage $r4;
        java.lang.AssertionError $r11;
        java.lang.reflect.Constructor $r2;
        java.lang.Exception $r12;
        twitter4j.TwitterException $r10;
        java.lang.Object $r1;
        java.lang.String $r0;
        twitter4j.internal.org.json.JSONObject $r9;

        $r0 := @parameter0: java.lang.String;

        $r9 = new twitter4j.internal.org.json.JSONObject;

     label1:
        specialinvoke $r9.<twitter4j.internal.org.json.JSONObject: void <init>(java.lang.String)>($r0);

     label2:
        $r2 = <twitter4j.json.DataObjectFactory: java.lang.reflect.Constructor directMessageConstructor>;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = $r9;

     label3:
        $r1 = virtualinvoke $r2.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r3);

     label4:
        $r4 = (twitter4j.DirectMessage) $r1;

        return $r4;

     label5:
        $r5 := @caughtexception;

        $r10 = new twitter4j.TwitterException;

        $r12 = (java.lang.Exception) $r5;

        specialinvoke $r10.<twitter4j.TwitterException: void <init>(java.lang.Exception)>($r12);

        throw $r10;

     label6:
        $r6 := @caughtexception;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>(java.lang.Object)>($r6);

        throw $r11;

     label7:
        $r7 := @caughtexception;

        $r10 = new twitter4j.TwitterException;

        $r12 = (java.lang.Exception) $r7;

        specialinvoke $r10.<twitter4j.TwitterException: void <init>(java.lang.Exception)>($r12);

        throw $r10;

     label8:
        $r8 := @caughtexception;

        $r10 = new twitter4j.TwitterException;

        specialinvoke $r10.<twitter4j.TwitterException: void <init>(java.lang.Exception)>($r8);

        throw $r10;

        catch java.lang.InstantiationException from label1 to label2 with label5;
        catch java.lang.InstantiationException from label3 to label4 with label5;
        catch java.lang.IllegalAccessException from label1 to label2 with label6;
        catch java.lang.IllegalAccessException from label3 to label4 with label6;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label7;
        catch java.lang.reflect.InvocationTargetException from label3 to label4 with label7;
        catch twitter4j.internal.org.json.JSONException from label1 to label2 with label8;
        catch twitter4j.internal.org.json.JSONException from label3 to label4 with label8;
    }

    public static twitter4j.IDs createIDs(java.lang.String)
    {
        java.lang.Throwable $r5, $r6, $r7;
        java.lang.Object[] $r3;
        java.lang.AssertionError $r9;
        java.lang.reflect.Constructor $r2;
        java.lang.Exception $r10;
        twitter4j.TwitterException $r8;
        java.lang.Object $r1;
        java.lang.String $r0;
        twitter4j.IDs $r4;

        $r0 := @parameter0: java.lang.String;

        $r2 = <twitter4j.json.DataObjectFactory: java.lang.reflect.Constructor IDsConstructor>;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = $r0;

     label1:
        $r1 = virtualinvoke $r2.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r3);

     label2:
        $r4 = (twitter4j.IDs) $r1;

        return $r4;

     label3:
        $r5 := @caughtexception;

        $r8 = new twitter4j.TwitterException;

        $r10 = (java.lang.Exception) $r5;

        specialinvoke $r8.<twitter4j.TwitterException: void <init>(java.lang.Exception)>($r10);

        throw $r8;

     label4:
        $r6 := @caughtexception;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>(java.lang.Object)>($r6);

        throw $r9;

     label5:
        $r7 := @caughtexception;

        $r8 = new twitter4j.TwitterException;

        $r10 = (java.lang.Exception) $r7;

        specialinvoke $r8.<twitter4j.TwitterException: void <init>(java.lang.Exception)>($r10);

        throw $r8;

        catch java.lang.InstantiationException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label1 to label2 with label4;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label5;
    }

    public static twitter4j.Location createLocation(java.lang.String)
    {
        java.lang.Throwable $r5, $r6, $r7;
        java.lang.Object[] $r3;
        twitter4j.internal.org.json.JSONException $r8;
        twitter4j.Location $r4;
        java.lang.AssertionError $r11;
        java.lang.reflect.Constructor $r2;
        java.lang.Exception $r12;
        twitter4j.TwitterException $r10;
        java.lang.Object $r1;
        java.lang.String $r0;
        twitter4j.internal.org.json.JSONObject $r9;

        $r0 := @parameter0: java.lang.String;

        $r9 = new twitter4j.internal.org.json.JSONObject;

     label1:
        specialinvoke $r9.<twitter4j.internal.org.json.JSONObject: void <init>(java.lang.String)>($r0);

     label2:
        $r2 = <twitter4j.json.DataObjectFactory: java.lang.reflect.Constructor locationConstructor>;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = $r9;

     label3:
        $r1 = virtualinvoke $r2.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r3);

     label4:
        $r4 = (twitter4j.Location) $r1;

        return $r4;

     label5:
        $r5 := @caughtexception;

        $r10 = new twitter4j.TwitterException;

        $r12 = (java.lang.Exception) $r5;

        specialinvoke $r10.<twitter4j.TwitterException: void <init>(java.lang.Exception)>($r12);

        throw $r10;

     label6:
        $r6 := @caughtexception;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>(java.lang.Object)>($r6);

        throw $r11;

     label7:
        $r7 := @caughtexception;

        $r10 = new twitter4j.TwitterException;

        $r12 = (java.lang.Exception) $r7;

        specialinvoke $r10.<twitter4j.TwitterException: void <init>(java.lang.Exception)>($r12);

        throw $r10;

     label8:
        $r8 := @caughtexception;

        $r10 = new twitter4j.TwitterException;

        specialinvoke $r10.<twitter4j.TwitterException: void <init>(java.lang.Exception)>($r8);

        throw $r10;

        catch java.lang.InstantiationException from label1 to label2 with label5;
        catch java.lang.InstantiationException from label3 to label4 with label5;
        catch java.lang.IllegalAccessException from label1 to label2 with label6;
        catch java.lang.IllegalAccessException from label3 to label4 with label6;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label7;
        catch java.lang.reflect.InvocationTargetException from label3 to label4 with label7;
        catch twitter4j.internal.org.json.JSONException from label1 to label2 with label8;
        catch twitter4j.internal.org.json.JSONException from label3 to label4 with label8;
    }

    public static twitter4j.OEmbed createOEmbed(java.lang.String)
    {
        java.lang.Throwable $r5, $r6, $r7;
        java.lang.Object[] $r3;
        twitter4j.OEmbed $r4;
        twitter4j.internal.org.json.JSONException $r8;
        java.lang.AssertionError $r11;
        java.lang.reflect.Constructor $r2;
        java.lang.Exception $r12;
        twitter4j.TwitterException $r10;
        java.lang.Object $r1;
        java.lang.String $r0;
        twitter4j.internal.org.json.JSONObject $r9;

        $r0 := @parameter0: java.lang.String;

        $r9 = new twitter4j.internal.org.json.JSONObject;

     label1:
        specialinvoke $r9.<twitter4j.internal.org.json.JSONObject: void <init>(java.lang.String)>($r0);

     label2:
        $r2 = <twitter4j.json.DataObjectFactory: java.lang.reflect.Constructor oembedConstructor>;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = $r9;

     label3:
        $r1 = virtualinvoke $r2.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r3);

     label4:
        $r4 = (twitter4j.OEmbed) $r1;

        return $r4;

     label5:
        $r5 := @caughtexception;

        $r10 = new twitter4j.TwitterException;

        $r12 = (java.lang.Exception) $r5;

        specialinvoke $r10.<twitter4j.TwitterException: void <init>(java.lang.Exception)>($r12);

        throw $r10;

     label6:
        $r6 := @caughtexception;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>(java.lang.Object)>($r6);

        throw $r11;

     label7:
        $r7 := @caughtexception;

        $r10 = new twitter4j.TwitterException;

        $r12 = (java.lang.Exception) $r7;

        specialinvoke $r10.<twitter4j.TwitterException: void <init>(java.lang.Exception)>($r12);

        throw $r10;

     label8:
        $r8 := @caughtexception;

        $r10 = new twitter4j.TwitterException;

        specialinvoke $r10.<twitter4j.TwitterException: void <init>(java.lang.Exception)>($r8);

        throw $r10;

        catch java.lang.InstantiationException from label1 to label2 with label5;
        catch java.lang.InstantiationException from label3 to label4 with label5;
        catch java.lang.IllegalAccessException from label1 to label2 with label6;
        catch java.lang.IllegalAccessException from label3 to label4 with label6;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label7;
        catch java.lang.reflect.InvocationTargetException from label3 to label4 with label7;
        catch twitter4j.internal.org.json.JSONException from label1 to label2 with label8;
        catch twitter4j.internal.org.json.JSONException from label3 to label4 with label8;
    }

    public static java.lang.Object createObject(java.lang.String)
    {
        java.lang.Throwable $r11, $r12, $r13;
        java.lang.Object[] $r5;
        twitter4j.internal.org.json.JSONException $r14;
        java.lang.AssertionError $r16;
        java.lang.reflect.Constructor $r4;
        twitter4j.json.JSONObjectType$Type $r2;
        int[] $r3;
        int $i0;
        twitter4j.StatusDeletionNotice $r10;
        twitter4j.TwitterException $r15;
        java.lang.String $r0;
        twitter4j.internal.org.json.JSONObject $r1, $r6;
        twitter4j.DirectMessage $r8;
        java.lang.Exception $r17;
        twitter4j.Status $r9;
        java.lang.Object $r7;

        $r0 := @parameter0: java.lang.String;

        $r6 = new twitter4j.internal.org.json.JSONObject;

        $r1 = $r6;

     label01:
        specialinvoke $r6.<twitter4j.internal.org.json.JSONObject: void <init>(java.lang.String)>($r0);

        $r2 = staticinvoke <twitter4j.json.JSONObjectType: twitter4j.json.JSONObjectType$Type determine(twitter4j.internal.org.json.JSONObject)>($r1);

        $r3 = staticinvoke <twitter4j.json.DataObjectFactory: int[] $SWITCH_TABLE$twitter4j$json$JSONObjectType$Type()>();

        $i0 = virtualinvoke $r2.<twitter4j.json.JSONObjectType$Type: int ordinal()>();

     label02:
        $i0 = $r3[$i0];

        lookupswitch($i0)
        {
            case 1: goto label04;
            case 2: goto label11;
            case 3: goto label16;
            case 4: goto label23;
            case 5: goto label30;
            case 6: goto label03;
            case 7: goto label30;
            default: goto label03;
        };

     label03:
        return $r1;

     label04:
        $r4 = <twitter4j.json.DataObjectFactory: java.lang.reflect.Constructor directMessageConstructor>;

        $r5 = newarray (java.lang.Object)[1];

     label05:
        $r6 = virtualinvoke $r1.<twitter4j.internal.org.json.JSONObject: twitter4j.internal.org.json.JSONObject getJSONObject(java.lang.String)>("direct_message");

     label06:
        $r5[0] = $r6;

     label07:
        $r7 = virtualinvoke $r4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r5);

     label08:
        $r8 = (twitter4j.DirectMessage) $r7;

     label09:
        $r7 = staticinvoke <twitter4j.json.DataObjectFactory: java.lang.Object registerJSONObject(java.lang.Object,java.lang.Object)>($r8, $r1);

     label10:
        return $r7;

     label11:
        $r4 = <twitter4j.json.DataObjectFactory: java.lang.reflect.Constructor statusConstructor>;

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = $r1;

     label12:
        $r7 = virtualinvoke $r4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r5);

     label13:
        $r9 = (twitter4j.Status) $r7;

     label14:
        $r7 = staticinvoke <twitter4j.json.DataObjectFactory: java.lang.Object registerJSONObject(java.lang.Object,java.lang.Object)>($r9, $r1);

     label15:
        return $r7;

     label16:
        $r4 = <twitter4j.json.DataObjectFactory: java.lang.reflect.Constructor directMessageConstructor>;

        $r5 = newarray (java.lang.Object)[1];

     label17:
        $r6 = virtualinvoke $r1.<twitter4j.internal.org.json.JSONObject: twitter4j.internal.org.json.JSONObject getJSONObject(java.lang.String)>("direct_message");

     label18:
        $r5[0] = $r6;

     label19:
        $r7 = virtualinvoke $r4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r5);

     label20:
        $r8 = (twitter4j.DirectMessage) $r7;

     label21:
        $r7 = staticinvoke <twitter4j.json.DataObjectFactory: java.lang.Object registerJSONObject(java.lang.Object,java.lang.Object)>($r8, $r1);

     label22:
        return $r7;

     label23:
        $r4 = <twitter4j.json.DataObjectFactory: java.lang.reflect.Constructor statusDeletionNoticeConstructor>;

        $r5 = newarray (java.lang.Object)[1];

     label24:
        $r6 = virtualinvoke $r1.<twitter4j.internal.org.json.JSONObject: twitter4j.internal.org.json.JSONObject getJSONObject(java.lang.String)>("delete");

        $r6 = virtualinvoke $r6.<twitter4j.internal.org.json.JSONObject: twitter4j.internal.org.json.JSONObject getJSONObject(java.lang.String)>("status");

     label25:
        $r5[0] = $r6;

     label26:
        $r7 = virtualinvoke $r4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r5);

     label27:
        $r10 = (twitter4j.StatusDeletionNotice) $r7;

     label28:
        $r7 = staticinvoke <twitter4j.json.DataObjectFactory: java.lang.Object registerJSONObject(java.lang.Object,java.lang.Object)>($r10, $r1);

     label29:
        return $r7;

     label30:
        return $r1;

     label31:
        $r11 := @caughtexception;

        $r15 = new twitter4j.TwitterException;

        $r17 = (java.lang.Exception) $r11;

        specialinvoke $r15.<twitter4j.TwitterException: void <init>(java.lang.Exception)>($r17);

        throw $r15;

     label32:
        $r12 := @caughtexception;

        $r16 = new java.lang.AssertionError;

        specialinvoke $r16.<java.lang.AssertionError: void <init>(java.lang.Object)>($r12);

        throw $r16;

     label33:
        $r13 := @caughtexception;

        $r15 = new twitter4j.TwitterException;

        $r17 = (java.lang.Exception) $r13;

        specialinvoke $r15.<twitter4j.TwitterException: void <init>(java.lang.Exception)>($r17);

        throw $r15;

     label34:
        $r14 := @caughtexception;

        $r15 = new twitter4j.TwitterException;

        specialinvoke $r15.<twitter4j.TwitterException: void <init>(java.lang.Exception)>($r14);

        throw $r15;

        catch java.lang.InstantiationException from label01 to label02 with label31;
        catch java.lang.InstantiationException from label05 to label06 with label31;
        catch java.lang.InstantiationException from label07 to label08 with label31;
        catch java.lang.InstantiationException from label09 to label10 with label31;
        catch java.lang.InstantiationException from label12 to label13 with label31;
        catch java.lang.InstantiationException from label14 to label15 with label31;
        catch java.lang.InstantiationException from label17 to label18 with label31;
        catch java.lang.InstantiationException from label19 to label20 with label31;
        catch java.lang.InstantiationException from label21 to label22 with label31;
        catch java.lang.InstantiationException from label24 to label25 with label31;
        catch java.lang.InstantiationException from label26 to label27 with label31;
        catch java.lang.InstantiationException from label28 to label29 with label31;
        catch java.lang.IllegalAccessException from label01 to label02 with label32;
        catch java.lang.IllegalAccessException from label05 to label06 with label32;
        catch java.lang.IllegalAccessException from label07 to label08 with label32;
        catch java.lang.IllegalAccessException from label09 to label10 with label32;
        catch java.lang.IllegalAccessException from label12 to label13 with label32;
        catch java.lang.IllegalAccessException from label14 to label15 with label32;
        catch java.lang.IllegalAccessException from label17 to label18 with label32;
        catch java.lang.IllegalAccessException from label19 to label20 with label32;
        catch java.lang.IllegalAccessException from label21 to label22 with label32;
        catch java.lang.IllegalAccessException from label24 to label25 with label32;
        catch java.lang.IllegalAccessException from label26 to label27 with label32;
        catch java.lang.IllegalAccessException from label28 to label29 with label32;
        catch java.lang.reflect.InvocationTargetException from label01 to label02 with label33;
        catch java.lang.reflect.InvocationTargetException from label05 to label06 with label33;
        catch java.lang.reflect.InvocationTargetException from label07 to label08 with label33;
        catch java.lang.reflect.InvocationTargetException from label09 to label10 with label33;
        catch java.lang.reflect.InvocationTargetException from label12 to label13 with label33;
        catch java.lang.reflect.InvocationTargetException from label14 to label15 with label33;
        catch java.lang.reflect.InvocationTargetException from label17 to label18 with label33;
        catch java.lang.reflect.InvocationTargetException from label19 to label20 with label33;
        catch java.lang.reflect.InvocationTargetException from label21 to label22 with label33;
        catch java.lang.reflect.InvocationTargetException from label24 to label25 with label33;
        catch java.lang.reflect.InvocationTargetException from label26 to label27 with label33;
        catch java.lang.reflect.InvocationTargetException from label28 to label29 with label33;
        catch twitter4j.internal.org.json.JSONException from label01 to label02 with label34;
        catch twitter4j.internal.org.json.JSONException from label05 to label06 with label34;
        catch twitter4j.internal.org.json.JSONException from label07 to label08 with label34;
        catch twitter4j.internal.org.json.JSONException from label09 to label10 with label34;
        catch twitter4j.internal.org.json.JSONException from label12 to label13 with label34;
        catch twitter4j.internal.org.json.JSONException from label14 to label15 with label34;
        catch twitter4j.internal.org.json.JSONException from label17 to label18 with label34;
        catch twitter4j.internal.org.json.JSONException from label19 to label20 with label34;
        catch twitter4j.internal.org.json.JSONException from label21 to label22 with label34;
        catch twitter4j.internal.org.json.JSONException from label24 to label25 with label34;
        catch twitter4j.internal.org.json.JSONException from label26 to label27 with label34;
        catch twitter4j.internal.org.json.JSONException from label28 to label29 with label34;
    }

    public static twitter4j.Place createPlace(java.lang.String)
    {
        java.lang.Throwable $r5, $r6, $r7;
        twitter4j.Place $r4;
        java.lang.Object[] $r3;
        twitter4j.internal.org.json.JSONException $r8;
        java.lang.AssertionError $r11;
        java.lang.reflect.Constructor $r2;
        java.lang.Exception $r12;
        twitter4j.TwitterException $r10;
        java.lang.Object $r1;
        java.lang.String $r0;
        twitter4j.internal.org.json.JSONObject $r9;

        $r0 := @parameter0: java.lang.String;

        $r9 = new twitter4j.internal.org.json.JSONObject;

     label1:
        specialinvoke $r9.<twitter4j.internal.org.json.JSONObject: void <init>(java.lang.String)>($r0);

     label2:
        $r2 = <twitter4j.json.DataObjectFactory: java.lang.reflect.Constructor placeConstructor>;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = $r9;

     label3:
        $r1 = virtualinvoke $r2.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r3);

     label4:
        $r4 = (twitter4j.Place) $r1;

        return $r4;

     label5:
        $r5 := @caughtexception;

        $r10 = new twitter4j.TwitterException;

        $r12 = (java.lang.Exception) $r5;

        specialinvoke $r10.<twitter4j.TwitterException: void <init>(java.lang.Exception)>($r12);

        throw $r10;

     label6:
        $r6 := @caughtexception;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>(java.lang.Object)>($r6);

        throw $r11;

     label7:
        $r7 := @caughtexception;

        $r10 = new twitter4j.TwitterException;

        $r12 = (java.lang.Exception) $r7;

        specialinvoke $r10.<twitter4j.TwitterException: void <init>(java.lang.Exception)>($r12);

        throw $r10;

     label8:
        $r8 := @caughtexception;

        $r10 = new twitter4j.TwitterException;

        specialinvoke $r10.<twitter4j.TwitterException: void <init>(java.lang.Exception)>($r8);

        throw $r10;

        catch java.lang.InstantiationException from label1 to label2 with label5;
        catch java.lang.InstantiationException from label3 to label4 with label5;
        catch java.lang.IllegalAccessException from label1 to label2 with label6;
        catch java.lang.IllegalAccessException from label3 to label4 with label6;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label7;
        catch java.lang.reflect.InvocationTargetException from label3 to label4 with label7;
        catch twitter4j.internal.org.json.JSONException from label1 to label2 with label8;
        catch twitter4j.internal.org.json.JSONException from label3 to label4 with label8;
    }

    public static java.util.Map createRateLimitStatus(java.lang.String)
    {
        java.lang.Throwable $r7, $r8;
        java.lang.Object[] $r3;
        twitter4j.internal.org.json.JSONException $r9;
        java.lang.AssertionError $r12;
        java.lang.Exception $r13;
        java.util.Map $r5;
        twitter4j.TwitterException $r11;
        java.lang.Class $r2;
        java.lang.Object $r4;
        java.lang.ClassNotFoundException $r6;
        java.lang.String $r0;
        twitter4j.internal.org.json.JSONObject $r10;
        java.lang.reflect.Method $r1;

        $r0 := @parameter0: java.lang.String;

        $r10 = new twitter4j.internal.org.json.JSONObject;

     label01:
        specialinvoke $r10.<twitter4j.internal.org.json.JSONObject: void <init>(java.lang.String)>($r0);

     label02:
        $r1 = <twitter4j.json.DataObjectFactory: java.lang.reflect.Method rateLimitStatusConstructor>;

     label03:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("twitter4j.internal.json.RateLimitStatusJSONImpl");

     label04:
        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = $r10;

     label05:
        $r4 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r2, $r3);

     label06:
        $r5 = (java.util.Map) $r4;

        return $r5;

     label07:
        $r6 := @caughtexception;

        $r11 = new twitter4j.TwitterException;

        specialinvoke $r11.<twitter4j.TwitterException: void <init>(java.lang.Exception)>($r6);

        throw $r11;

     label08:
        $r7 := @caughtexception;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>(java.lang.Object)>($r7);

        throw $r12;

     label09:
        $r8 := @caughtexception;

        $r11 = new twitter4j.TwitterException;

        $r13 = (java.lang.Exception) $r8;

        specialinvoke $r11.<twitter4j.TwitterException: void <init>(java.lang.Exception)>($r13);

        throw $r11;

     label10:
        $r9 := @caughtexception;

        $r11 = new twitter4j.TwitterException;

        specialinvoke $r11.<twitter4j.TwitterException: void <init>(java.lang.Exception)>($r9);

        throw $r11;

        catch java.lang.ClassNotFoundException from label01 to label02 with label07;
        catch java.lang.ClassNotFoundException from label03 to label04 with label07;
        catch java.lang.ClassNotFoundException from label05 to label06 with label07;
        catch java.lang.IllegalAccessException from label01 to label02 with label08;
        catch java.lang.IllegalAccessException from label03 to label04 with label08;
        catch java.lang.IllegalAccessException from label05 to label06 with label08;
        catch java.lang.reflect.InvocationTargetException from label01 to label02 with label09;
        catch java.lang.reflect.InvocationTargetException from label03 to label04 with label09;
        catch java.lang.reflect.InvocationTargetException from label05 to label06 with label09;
        catch twitter4j.internal.org.json.JSONException from label01 to label02 with label10;
        catch twitter4j.internal.org.json.JSONException from label03 to label04 with label10;
        catch twitter4j.internal.org.json.JSONException from label05 to label06 with label10;
    }

    public static twitter4j.Relationship createRelationship(java.lang.String)
    {
        twitter4j.Relationship $r4;
        java.lang.Throwable $r5, $r6, $r7;
        java.lang.Object[] $r3;
        twitter4j.internal.org.json.JSONException $r8;
        java.lang.AssertionError $r11;
        java.lang.reflect.Constructor $r2;
        java.lang.Exception $r12;
        twitter4j.TwitterException $r10;
        java.lang.Object $r1;
        java.lang.String $r0;
        twitter4j.internal.org.json.JSONObject $r9;

        $r0 := @parameter0: java.lang.String;

        $r9 = new twitter4j.internal.org.json.JSONObject;

     label1:
        specialinvoke $r9.<twitter4j.internal.org.json.JSONObject: void <init>(java.lang.String)>($r0);

     label2:
        $r2 = <twitter4j.json.DataObjectFactory: java.lang.reflect.Constructor relationshipConstructor>;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = $r9;

     label3:
        $r1 = virtualinvoke $r2.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r3);

     label4:
        $r4 = (twitter4j.Relationship) $r1;

        return $r4;

     label5:
        $r5 := @caughtexception;

        $r10 = new twitter4j.TwitterException;

        $r12 = (java.lang.Exception) $r5;

        specialinvoke $r10.<twitter4j.TwitterException: void <init>(java.lang.Exception)>($r12);

        throw $r10;

     label6:
        $r6 := @caughtexception;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>(java.lang.Object)>($r6);

        throw $r11;

     label7:
        $r7 := @caughtexception;

        $r10 = new twitter4j.TwitterException;

        $r12 = (java.lang.Exception) $r7;

        specialinvoke $r10.<twitter4j.TwitterException: void <init>(java.lang.Exception)>($r12);

        throw $r10;

     label8:
        $r8 := @caughtexception;

        $r10 = new twitter4j.TwitterException;

        specialinvoke $r10.<twitter4j.TwitterException: void <init>(java.lang.Exception)>($r8);

        throw $r10;

        catch java.lang.InstantiationException from label1 to label2 with label5;
        catch java.lang.InstantiationException from label3 to label4 with label5;
        catch java.lang.IllegalAccessException from label1 to label2 with label6;
        catch java.lang.IllegalAccessException from label3 to label4 with label6;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label7;
        catch java.lang.reflect.InvocationTargetException from label3 to label4 with label7;
        catch twitter4j.internal.org.json.JSONException from label1 to label2 with label8;
        catch twitter4j.internal.org.json.JSONException from label3 to label4 with label8;
    }

    public static twitter4j.SavedSearch createSavedSearch(java.lang.String)
    {
        java.lang.Throwable $r5, $r6, $r7;
        java.lang.Object[] $r3;
        twitter4j.internal.org.json.JSONException $r8;
        java.lang.AssertionError $r11;
        java.lang.reflect.Constructor $r2;
        twitter4j.SavedSearch $r4;
        java.lang.Exception $r12;
        twitter4j.TwitterException $r10;
        java.lang.Object $r1;
        java.lang.String $r0;
        twitter4j.internal.org.json.JSONObject $r9;

        $r0 := @parameter0: java.lang.String;

        $r9 = new twitter4j.internal.org.json.JSONObject;

     label1:
        specialinvoke $r9.<twitter4j.internal.org.json.JSONObject: void <init>(java.lang.String)>($r0);

     label2:
        $r2 = <twitter4j.json.DataObjectFactory: java.lang.reflect.Constructor savedSearchConstructor>;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = $r9;

     label3:
        $r1 = virtualinvoke $r2.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r3);

     label4:
        $r4 = (twitter4j.SavedSearch) $r1;

        return $r4;

     label5:
        $r5 := @caughtexception;

        $r10 = new twitter4j.TwitterException;

        $r12 = (java.lang.Exception) $r5;

        specialinvoke $r10.<twitter4j.TwitterException: void <init>(java.lang.Exception)>($r12);

        throw $r10;

     label6:
        $r6 := @caughtexception;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>(java.lang.Object)>($r6);

        throw $r11;

     label7:
        $r7 := @caughtexception;

        $r10 = new twitter4j.TwitterException;

        $r12 = (java.lang.Exception) $r7;

        specialinvoke $r10.<twitter4j.TwitterException: void <init>(java.lang.Exception)>($r12);

        throw $r10;

     label8:
        $r8 := @caughtexception;

        $r10 = new twitter4j.TwitterException;

        specialinvoke $r10.<twitter4j.TwitterException: void <init>(java.lang.Exception)>($r8);

        throw $r10;

        catch java.lang.InstantiationException from label1 to label2 with label5;
        catch java.lang.InstantiationException from label3 to label4 with label5;
        catch java.lang.IllegalAccessException from label1 to label2 with label6;
        catch java.lang.IllegalAccessException from label3 to label4 with label6;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label7;
        catch java.lang.reflect.InvocationTargetException from label3 to label4 with label7;
        catch twitter4j.internal.org.json.JSONException from label1 to label2 with label8;
        catch twitter4j.internal.org.json.JSONException from label3 to label4 with label8;
    }

    public static twitter4j.Status createStatus(java.lang.String)
    {
        java.lang.Throwable $r5, $r6, $r7;
        java.lang.Object[] $r3;
        twitter4j.internal.org.json.JSONException $r8;
        java.lang.AssertionError $r11;
        java.lang.reflect.Constructor $r2;
        java.lang.Exception $r12;
        twitter4j.Status $r4;
        twitter4j.TwitterException $r10;
        java.lang.Object $r1;
        java.lang.String $r0;
        twitter4j.internal.org.json.JSONObject $r9;

        $r0 := @parameter0: java.lang.String;

        $r9 = new twitter4j.internal.org.json.JSONObject;

     label1:
        specialinvoke $r9.<twitter4j.internal.org.json.JSONObject: void <init>(java.lang.String)>($r0);

     label2:
        $r2 = <twitter4j.json.DataObjectFactory: java.lang.reflect.Constructor statusConstructor>;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = $r9;

     label3:
        $r1 = virtualinvoke $r2.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r3);

     label4:
        $r4 = (twitter4j.Status) $r1;

        return $r4;

     label5:
        $r5 := @caughtexception;

        $r10 = new twitter4j.TwitterException;

        $r12 = (java.lang.Exception) $r5;

        specialinvoke $r10.<twitter4j.TwitterException: void <init>(java.lang.Exception)>($r12);

        throw $r10;

     label6:
        $r6 := @caughtexception;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>(java.lang.Object)>($r6);

        throw $r11;

     label7:
        $r7 := @caughtexception;

        $r10 = new twitter4j.TwitterException;

        $r12 = (java.lang.Exception) $r7;

        specialinvoke $r10.<twitter4j.TwitterException: void <init>(java.lang.Exception)>($r12);

        throw $r10;

     label8:
        $r8 := @caughtexception;

        $r10 = new twitter4j.TwitterException;

        specialinvoke $r10.<twitter4j.TwitterException: void <init>(java.lang.Exception)>($r8);

        throw $r10;

        catch java.lang.InstantiationException from label1 to label2 with label5;
        catch java.lang.InstantiationException from label3 to label4 with label5;
        catch java.lang.IllegalAccessException from label1 to label2 with label6;
        catch java.lang.IllegalAccessException from label3 to label4 with label6;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label7;
        catch java.lang.reflect.InvocationTargetException from label3 to label4 with label7;
        catch twitter4j.internal.org.json.JSONException from label1 to label2 with label8;
        catch twitter4j.internal.org.json.JSONException from label3 to label4 with label8;
    }

    public static twitter4j.Trend createTrend(java.lang.String)
    {
        java.lang.Throwable $r5, $r6, $r7;
        java.lang.Object[] $r3;
        twitter4j.Trend $r4;
        twitter4j.internal.org.json.JSONException $r8;
        java.lang.AssertionError $r11;
        java.lang.reflect.Constructor $r2;
        java.lang.Exception $r12;
        twitter4j.TwitterException $r10;
        java.lang.Object $r1;
        java.lang.String $r0;
        twitter4j.internal.org.json.JSONObject $r9;

        $r0 := @parameter0: java.lang.String;

        $r9 = new twitter4j.internal.org.json.JSONObject;

     label1:
        specialinvoke $r9.<twitter4j.internal.org.json.JSONObject: void <init>(java.lang.String)>($r0);

     label2:
        $r2 = <twitter4j.json.DataObjectFactory: java.lang.reflect.Constructor trendConstructor>;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = $r9;

     label3:
        $r1 = virtualinvoke $r2.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r3);

     label4:
        $r4 = (twitter4j.Trend) $r1;

        return $r4;

     label5:
        $r5 := @caughtexception;

        $r10 = new twitter4j.TwitterException;

        $r12 = (java.lang.Exception) $r5;

        specialinvoke $r10.<twitter4j.TwitterException: void <init>(java.lang.Exception)>($r12);

        throw $r10;

     label6:
        $r6 := @caughtexception;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>(java.lang.Object)>($r6);

        throw $r11;

     label7:
        $r7 := @caughtexception;

        $r10 = new twitter4j.TwitterException;

        $r12 = (java.lang.Exception) $r7;

        specialinvoke $r10.<twitter4j.TwitterException: void <init>(java.lang.Exception)>($r12);

        throw $r10;

     label8:
        $r8 := @caughtexception;

        $r10 = new twitter4j.TwitterException;

        specialinvoke $r10.<twitter4j.TwitterException: void <init>(java.lang.Exception)>($r8);

        throw $r10;

        catch java.lang.InstantiationException from label1 to label2 with label5;
        catch java.lang.InstantiationException from label3 to label4 with label5;
        catch java.lang.IllegalAccessException from label1 to label2 with label6;
        catch java.lang.IllegalAccessException from label3 to label4 with label6;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label7;
        catch java.lang.reflect.InvocationTargetException from label3 to label4 with label7;
        catch twitter4j.internal.org.json.JSONException from label1 to label2 with label8;
        catch twitter4j.internal.org.json.JSONException from label3 to label4 with label8;
    }

    public static twitter4j.Trends createTrends(java.lang.String)
    {
        java.lang.Throwable $r5, $r6, $r7;
        java.lang.Object[] $r3;
        java.lang.AssertionError $r9;
        java.lang.reflect.Constructor $r2;
        java.lang.Exception $r10;
        twitter4j.Trends $r4;
        twitter4j.TwitterException $r8;
        java.lang.Object $r1;
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        $r2 = <twitter4j.json.DataObjectFactory: java.lang.reflect.Constructor trendsConstructor>;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = $r0;

     label1:
        $r1 = virtualinvoke $r2.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r3);

     label2:
        $r4 = (twitter4j.Trends) $r1;

        return $r4;

     label3:
        $r5 := @caughtexception;

        $r8 = new twitter4j.TwitterException;

        $r10 = (java.lang.Exception) $r5;

        specialinvoke $r8.<twitter4j.TwitterException: void <init>(java.lang.Exception)>($r10);

        throw $r8;

     label4:
        $r6 := @caughtexception;

        $r8 = new twitter4j.TwitterException;

        $r10 = (java.lang.Exception) $r6;

        specialinvoke $r8.<twitter4j.TwitterException: void <init>(java.lang.Exception)>($r10);

        throw $r8;

     label5:
        $r7 := @caughtexception;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>(java.lang.Object)>($r7);

        throw $r9;

        catch java.lang.InstantiationException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label1 to label2 with label4;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label5;
    }

    public static twitter4j.User createUser(java.lang.String)
    {
        java.lang.Throwable $r5, $r6, $r7;
        java.lang.Object[] $r3;
        twitter4j.internal.org.json.JSONException $r8;
        java.lang.AssertionError $r11;
        java.lang.reflect.Constructor $r2;
        java.lang.Exception $r12;
        twitter4j.User $r4;
        twitter4j.TwitterException $r10;
        java.lang.Object $r1;
        java.lang.String $r0;
        twitter4j.internal.org.json.JSONObject $r9;

        $r0 := @parameter0: java.lang.String;

        $r9 = new twitter4j.internal.org.json.JSONObject;

     label1:
        specialinvoke $r9.<twitter4j.internal.org.json.JSONObject: void <init>(java.lang.String)>($r0);

     label2:
        $r2 = <twitter4j.json.DataObjectFactory: java.lang.reflect.Constructor userConstructor>;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = $r9;

     label3:
        $r1 = virtualinvoke $r2.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r3);

     label4:
        $r4 = (twitter4j.User) $r1;

        return $r4;

     label5:
        $r5 := @caughtexception;

        $r10 = new twitter4j.TwitterException;

        $r12 = (java.lang.Exception) $r5;

        specialinvoke $r10.<twitter4j.TwitterException: void <init>(java.lang.Exception)>($r12);

        throw $r10;

     label6:
        $r6 := @caughtexception;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>(java.lang.Object)>($r6);

        throw $r11;

     label7:
        $r7 := @caughtexception;

        $r10 = new twitter4j.TwitterException;

        $r12 = (java.lang.Exception) $r7;

        specialinvoke $r10.<twitter4j.TwitterException: void <init>(java.lang.Exception)>($r12);

        throw $r10;

     label8:
        $r8 := @caughtexception;

        $r10 = new twitter4j.TwitterException;

        specialinvoke $r10.<twitter4j.TwitterException: void <init>(java.lang.Exception)>($r8);

        throw $r10;

        catch java.lang.InstantiationException from label1 to label2 with label5;
        catch java.lang.InstantiationException from label3 to label4 with label5;
        catch java.lang.IllegalAccessException from label1 to label2 with label6;
        catch java.lang.IllegalAccessException from label3 to label4 with label6;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label7;
        catch java.lang.reflect.InvocationTargetException from label3 to label4 with label7;
        catch twitter4j.internal.org.json.JSONException from label1 to label2 with label8;
        catch twitter4j.internal.org.json.JSONException from label3 to label4 with label8;
    }

    public static twitter4j.UserList createUserList(java.lang.String)
    {
        java.lang.Throwable $r5, $r6, $r7;
        java.lang.Object[] $r3;
        twitter4j.internal.org.json.JSONException $r8;
        java.lang.AssertionError $r11;
        java.lang.reflect.Constructor $r2;
        java.lang.Exception $r12;
        twitter4j.UserList $r4;
        twitter4j.TwitterException $r10;
        java.lang.Object $r1;
        java.lang.String $r0;
        twitter4j.internal.org.json.JSONObject $r9;

        $r0 := @parameter0: java.lang.String;

        $r9 = new twitter4j.internal.org.json.JSONObject;

     label1:
        specialinvoke $r9.<twitter4j.internal.org.json.JSONObject: void <init>(java.lang.String)>($r0);

     label2:
        $r2 = <twitter4j.json.DataObjectFactory: java.lang.reflect.Constructor userListConstructor>;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = $r9;

     label3:
        $r1 = virtualinvoke $r2.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r3);

     label4:
        $r4 = (twitter4j.UserList) $r1;

        return $r4;

     label5:
        $r5 := @caughtexception;

        $r10 = new twitter4j.TwitterException;

        $r12 = (java.lang.Exception) $r5;

        specialinvoke $r10.<twitter4j.TwitterException: void <init>(java.lang.Exception)>($r12);

        throw $r10;

     label6:
        $r6 := @caughtexception;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>(java.lang.Object)>($r6);

        throw $r11;

     label7:
        $r7 := @caughtexception;

        $r10 = new twitter4j.TwitterException;

        $r12 = (java.lang.Exception) $r7;

        specialinvoke $r10.<twitter4j.TwitterException: void <init>(java.lang.Exception)>($r12);

        throw $r10;

     label8:
        $r8 := @caughtexception;

        $r10 = new twitter4j.TwitterException;

        specialinvoke $r10.<twitter4j.TwitterException: void <init>(java.lang.Exception)>($r8);

        throw $r10;

        catch java.lang.InstantiationException from label1 to label2 with label5;
        catch java.lang.InstantiationException from label3 to label4 with label5;
        catch java.lang.IllegalAccessException from label1 to label2 with label6;
        catch java.lang.IllegalAccessException from label3 to label4 with label6;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label7;
        catch java.lang.reflect.InvocationTargetException from label3 to label4 with label7;
        catch twitter4j.internal.org.json.JSONException from label1 to label2 with label8;
        catch twitter4j.internal.org.json.JSONException from label3 to label4 with label8;
    }

    public static java.lang.String getRawJSON(java.lang.Object)
    {
        java.lang.ThreadLocal $r1;
        java.util.Map $r3;
        java.lang.Object $r0, $r2;
        java.lang.String $r4;
        boolean $z0;

        $r0 := @parameter0: java.lang.Object;

        $r1 = <twitter4j.json.DataObjectFactory: java.lang.ThreadLocal rawJsonMap>;

        $r2 = virtualinvoke $r1.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r3 = (java.util.Map) $r2;

        $r0 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        $z0 = $r0 instanceof java.lang.String;

        if $z0 == 0 goto label1;

        $r4 = (java.lang.String) $r0;

        return $r4;

     label1:
        if $r0 == null goto label2;

        $r4 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>();

        return $r4;

     label2:
        return null;
    }

    static java.lang.Object registerJSONObject(java.lang.Object, java.lang.Object)
    {
        java.lang.ThreadLocal $r3;
        java.util.Map $r4;
        java.lang.Object $r0, $r1, $r2;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $r3 = <twitter4j.json.DataObjectFactory: java.lang.ThreadLocal rawJsonMap>;

        $r2 = virtualinvoke $r3.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r4 = (java.util.Map) $r2;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r0, $r1);

        return $r0;
    }
}
