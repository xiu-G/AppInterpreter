public class proguard.classfile.attribute.CodeAttribute extends proguard.classfile.attribute.Attribute
{
    public proguard.classfile.attribute.Attribute[] attributes;
    public byte[] code;
    public proguard.classfile.attribute.ExceptionInfo[] exceptionTable;
    public int u2attributesCount;
    public int u2exceptionTableLength;
    public int u2maxLocals;
    public int u2maxStack;
    public int u4codeLength;

    public void <init>()
    {
        proguard.classfile.attribute.CodeAttribute r0;

        r0 := @this: proguard.classfile.attribute.CodeAttribute;

        specialinvoke r0.<proguard.classfile.attribute.Attribute: void <init>()>();

        return;
    }

    public void <init>(int, int, int, int, byte[], int, proguard.classfile.attribute.ExceptionInfo[], int, proguard.classfile.attribute.Attribute[])
    {
        byte[] $r1;
        proguard.classfile.attribute.Attribute[] $r3;
        proguard.classfile.attribute.ExceptionInfo[] $r2;
        proguard.classfile.attribute.CodeAttribute r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $r1 := @parameter4: byte[];

        $i4 := @parameter5: int;

        $r2 := @parameter6: proguard.classfile.attribute.ExceptionInfo[];

        $i5 := @parameter7: int;

        $r3 := @parameter8: proguard.classfile.attribute.Attribute[];

        specialinvoke r0.<proguard.classfile.attribute.Attribute: void <init>(int)>($i0);

        r0.<proguard.classfile.attribute.CodeAttribute: int u2maxStack> = $i1;

        r0.<proguard.classfile.attribute.CodeAttribute: int u2maxLocals> = $i2;

        r0.<proguard.classfile.attribute.CodeAttribute: int u4codeLength> = 0;

        r0.<proguard.classfile.attribute.CodeAttribute: byte[] code> = $r1;

        r0.<proguard.classfile.attribute.CodeAttribute: int u2exceptionTableLength> = 0;

        r0.<proguard.classfile.attribute.CodeAttribute: proguard.classfile.attribute.ExceptionInfo[] exceptionTable> = $r2;

        r0.<proguard.classfile.attribute.CodeAttribute: int u2attributesCount> = 0;

        r0.<proguard.classfile.attribute.CodeAttribute: proguard.classfile.attribute.Attribute[] attributes> = $r3;

        return;
    }

    public void accept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.visitor.AttributeVisitor)
    {
        proguard.classfile.attribute.CodeAttribute r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.visitor.AttributeVisitor $r3;

        r0 := @this: proguard.classfile.attribute.CodeAttribute;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.visitor.AttributeVisitor;

        interfaceinvoke $r3.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute)>($r1, $r2, r0);

        return;
    }

    public void attributesAccept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.visitor.AttributeVisitor)
    {
        proguard.classfile.attribute.Attribute[] $r4;
        proguard.classfile.attribute.visitor.AttributeVisitor $r3;
        proguard.classfile.attribute.CodeAttribute r0;
        proguard.classfile.Clazz $r1;
        int $i0, $i1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.Attribute $r5;

        r0 := @this: proguard.classfile.attribute.CodeAttribute;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.visitor.AttributeVisitor;

        $i0 = 0;

     label1:
        $i1 = r0.<proguard.classfile.attribute.CodeAttribute: int u2attributesCount>;

        if $i0 >= $i1 goto label2;

        $r4 = r0.<proguard.classfile.attribute.CodeAttribute: proguard.classfile.attribute.Attribute[] attributes>;

        $r5 = $r4[$i0];

        virtualinvoke $r5.<proguard.classfile.attribute.Attribute: void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.visitor.AttributeVisitor)>($r1, $r2, r0, $r3);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void exceptionsAccept(proguard.classfile.Clazz, proguard.classfile.Method, int, int, proguard.classfile.attribute.visitor.ExceptionInfoVisitor)
    {
        proguard.classfile.attribute.visitor.ExceptionInfoVisitor $r3;
        proguard.classfile.attribute.ExceptionInfo[] $r4;
        proguard.classfile.attribute.CodeAttribute r0;
        proguard.classfile.Clazz $r1;
        int $i0, $i1, $i2, $i3;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.ExceptionInfo $r5;
        boolean $z0;

        r0 := @this: proguard.classfile.attribute.CodeAttribute;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $r3 := @parameter4: proguard.classfile.attribute.visitor.ExceptionInfoVisitor;

        $i2 = 0;

     label1:
        $i3 = r0.<proguard.classfile.attribute.CodeAttribute: int u2exceptionTableLength>;

        if $i2 >= $i3 goto label3;

        $r4 = r0.<proguard.classfile.attribute.CodeAttribute: proguard.classfile.attribute.ExceptionInfo[] exceptionTable>;

        $r5 = $r4[$i2];

        $z0 = virtualinvoke $r5.<proguard.classfile.attribute.ExceptionInfo: boolean isApplicable(int,int)>($i0, $i1);

        if $z0 == 0 goto label2;

        interfaceinvoke $r3.<proguard.classfile.attribute.visitor.ExceptionInfoVisitor: void visitExceptionInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.ExceptionInfo)>($r1, $r2, r0, $r5);

     label2:
        $i2 = $i2 + 1;

        goto label1;

     label3:
        return;
    }

    public void exceptionsAccept(proguard.classfile.Clazz, proguard.classfile.Method, int, proguard.classfile.attribute.visitor.ExceptionInfoVisitor)
    {
        proguard.classfile.attribute.visitor.ExceptionInfoVisitor $r3;
        proguard.classfile.attribute.ExceptionInfo[] $r4;
        proguard.classfile.attribute.CodeAttribute r0;
        proguard.classfile.Clazz $r1;
        int $i0, $i1, $i2;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.ExceptionInfo $r5;
        boolean $z0;

        r0 := @this: proguard.classfile.attribute.CodeAttribute;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $i0 := @parameter2: int;

        $r3 := @parameter3: proguard.classfile.attribute.visitor.ExceptionInfoVisitor;

        $i1 = 0;

     label1:
        $i2 = r0.<proguard.classfile.attribute.CodeAttribute: int u2exceptionTableLength>;

        if $i1 >= $i2 goto label3;

        $r4 = r0.<proguard.classfile.attribute.CodeAttribute: proguard.classfile.attribute.ExceptionInfo[] exceptionTable>;

        $r5 = $r4[$i1];

        $z0 = virtualinvoke $r5.<proguard.classfile.attribute.ExceptionInfo: boolean isApplicable(int)>($i0);

        if $z0 == 0 goto label2;

        interfaceinvoke $r3.<proguard.classfile.attribute.visitor.ExceptionInfoVisitor: void visitExceptionInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.ExceptionInfo)>($r1, $r2, r0, $r5);

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return;
    }

    public void exceptionsAccept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.visitor.ExceptionInfoVisitor)
    {
        proguard.classfile.attribute.visitor.ExceptionInfoVisitor $r3;
        proguard.classfile.attribute.ExceptionInfo[] $r4;
        proguard.classfile.attribute.CodeAttribute r0;
        proguard.classfile.Clazz $r1;
        int $i0, $i1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.ExceptionInfo $r5;

        r0 := @this: proguard.classfile.attribute.CodeAttribute;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.visitor.ExceptionInfoVisitor;

        $i0 = 0;

     label1:
        $i1 = r0.<proguard.classfile.attribute.CodeAttribute: int u2exceptionTableLength>;

        if $i0 >= $i1 goto label2;

        $r4 = r0.<proguard.classfile.attribute.CodeAttribute: proguard.classfile.attribute.ExceptionInfo[] exceptionTable>;

        $r5 = $r4[$i0];

        interfaceinvoke $r3.<proguard.classfile.attribute.visitor.ExceptionInfoVisitor: void visitExceptionInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.ExceptionInfo)>($r1, $r2, r0, $r5);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    public proguard.classfile.attribute.Attribute getAttribute(proguard.classfile.Clazz, java.lang.String)
    {
        proguard.classfile.attribute.Attribute[] $r3;
        proguard.classfile.attribute.CodeAttribute r0;
        proguard.classfile.Clazz $r1;
        int $i0, $i1;
        java.lang.String $r2, $r5;
        proguard.classfile.attribute.Attribute $r4;
        boolean $z0;

        r0 := @this: proguard.classfile.attribute.CodeAttribute;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: java.lang.String;

        $i0 = 0;

     label1:
        $i1 = r0.<proguard.classfile.attribute.CodeAttribute: int u2attributesCount>;

        if $i0 >= $i1 goto label3;

        $r3 = r0.<proguard.classfile.attribute.CodeAttribute: proguard.classfile.attribute.Attribute[] attributes>;

        $r4 = $r3[$i0];

        $r5 = virtualinvoke $r4.<proguard.classfile.attribute.Attribute: java.lang.String getAttributeName(proguard.classfile.Clazz)>($r1);

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("LineNumberTable");

        if $z0 == 0 goto label2;

        return $r4;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        return null;
    }

    public void instructionAccept(proguard.classfile.Clazz, proguard.classfile.Method, int, proguard.classfile.instruction.visitor.InstructionVisitor)
    {
        byte[] $r5;
        proguard.classfile.attribute.CodeAttribute r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.instruction.Instruction $r4;
        int $i0;
        proguard.classfile.Method $r2;
        proguard.classfile.instruction.visitor.InstructionVisitor $r3;

        r0 := @this: proguard.classfile.attribute.CodeAttribute;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $i0 := @parameter2: int;

        $r3 := @parameter3: proguard.classfile.instruction.visitor.InstructionVisitor;

        $r5 = r0.<proguard.classfile.attribute.CodeAttribute: byte[] code>;

        $r4 = staticinvoke <proguard.classfile.instruction.InstructionFactory: proguard.classfile.instruction.Instruction create(byte[],int)>($r5, $i0);

        virtualinvoke $r4.<proguard.classfile.instruction.Instruction: void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.visitor.InstructionVisitor)>($r1, $r2, r0, $i0, $r3);

        return;
    }

    public void instructionsAccept(proguard.classfile.Clazz, proguard.classfile.Method, int, int, proguard.classfile.instruction.visitor.InstructionVisitor)
    {
        byte[] $r4;
        proguard.classfile.instruction.visitor.InstructionVisitor $r3;
        proguard.classfile.attribute.CodeAttribute r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.instruction.Instruction $r5;
        int $i0, $i1, $i2;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.classfile.attribute.CodeAttribute;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $r3 := @parameter4: proguard.classfile.instruction.visitor.InstructionVisitor;

     label1:
        if $i0 >= $i1 goto label2;

        $r4 = r0.<proguard.classfile.attribute.CodeAttribute: byte[] code>;

        $r5 = staticinvoke <proguard.classfile.instruction.InstructionFactory: proguard.classfile.instruction.Instruction create(byte[],int)>($r4, $i0);

        $i2 = virtualinvoke $r5.<proguard.classfile.instruction.Instruction: int length(int)>($i0);

        virtualinvoke $r5.<proguard.classfile.instruction.Instruction: void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.visitor.InstructionVisitor)>($r1, $r2, r0, $i0, $r3);

        $i0 = $i0 + $i2;

        goto label1;

     label2:
        return;
    }

    public void instructionsAccept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.instruction.visitor.InstructionVisitor)
    {
        proguard.classfile.attribute.CodeAttribute r0;
        proguard.classfile.Clazz $r1;
        int $i0;
        proguard.classfile.Method $r2;
        proguard.classfile.instruction.visitor.InstructionVisitor $r3;

        r0 := @this: proguard.classfile.attribute.CodeAttribute;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.instruction.visitor.InstructionVisitor;

        $i0 = r0.<proguard.classfile.attribute.CodeAttribute: int u4codeLength>;

        virtualinvoke r0.<proguard.classfile.attribute.CodeAttribute: void instructionsAccept(proguard.classfile.Clazz,proguard.classfile.Method,int,int,proguard.classfile.instruction.visitor.InstructionVisitor)>($r1, $r2, 0, $i0, $r3);

        return;
    }
}
