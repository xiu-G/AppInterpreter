class cn.hi321.browser.weave.client.WeaveCryptoUtil extends java.lang.Object
{
    private static final byte[] HMAC_INPUT;
    private static final java.util.regex.Pattern ILLEGAL_USERNAME_PATTERN;
    private static final java.lang.String PROVIDER_CLASS;
    private static final java.lang.String PROVIDER_NAME;
    private static final cn.hi321.browser.weave.client.WeaveCryptoUtil sm_instance;

    static void <clinit>()
    {
        byte[] $r0;
        java.util.regex.Pattern $r1;
        cn.hi321.browser.weave.client.WeaveCryptoUtil $r2;

        <cn.hi321.browser.weave.client.WeaveCryptoUtil: java.lang.String PROVIDER_NAME> = "BC";

        <cn.hi321.browser.weave.client.WeaveCryptoUtil: java.lang.String PROVIDER_CLASS> = "org.bouncycastle.jce.provider.BouncyCastleProvider";

        $r0 = staticinvoke <cn.hi321.browser.weave.client.WeaveUtil: byte[] toAsciiBytes(java.lang.String)>("Sync-AES_256_CBC-HMAC256");

        <cn.hi321.browser.weave.client.WeaveCryptoUtil: byte[] HMAC_INPUT> = $r0;

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>("[^A-Z0-9._-]", 2);

        <cn.hi321.browser.weave.client.WeaveCryptoUtil: java.util.regex.Pattern ILLEGAL_USERNAME_PATTERN> = $r1;

        $r2 = new cn.hi321.browser.weave.client.WeaveCryptoUtil;

        specialinvoke $r2.<cn.hi321.browser.weave.client.WeaveCryptoUtil: void <init>()>();

        <cn.hi321.browser.weave.client.WeaveCryptoUtil: cn.hi321.browser.weave.client.WeaveCryptoUtil sm_instance> = $r2;

        staticinvoke <cn.hi321.browser.weave.client.WeaveCryptoUtil: boolean initProvider(java.lang.String,java.lang.String)>("BC", "org.bouncycastle.jce.provider.BouncyCastleProvider");

        return;
    }

    private void <init>()
    {
        cn.hi321.browser.weave.client.WeaveCryptoUtil r0;

        r0 := @this: cn.hi321.browser.weave.client.WeaveCryptoUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private void checkMac(java.security.Key, java.lang.String, java.lang.String) throws java.security.GeneralSecurityException
    {
        java.security.Key $r1;
        java.security.GeneralSecurityException $r4;
        cn.hi321.browser.weave.client.WeaveCryptoUtil r0;
        java.lang.String $r2, $r3;
        boolean $z0;

        r0 := @this: cn.hi321.browser.weave.client.WeaveCryptoUtil;

        $r1 := @parameter0: java.security.Key;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r2 = specialinvoke r0.<cn.hi321.browser.weave.client.WeaveCryptoUtil: java.lang.String createMac(java.security.Key,java.lang.String)>($r1, $r2);

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r2);

        if $z0 != 0 goto label1;

        $r4 = new java.security.GeneralSecurityException;

        specialinvoke $r4.<java.security.GeneralSecurityException: void <init>(java.lang.String)>("mac failed");

        throw $r4;

     label1:
        return;
    }

    private java.lang.String createMac(java.security.Key, java.lang.String) throws java.security.GeneralSecurityException
    {
        java.security.Key $r1;
        byte[] $r4;
        javax.crypto.Mac $r3;
        cn.hi321.browser.weave.client.WeaveCryptoUtil r0;
        java.lang.String $r2;

        r0 := @this: cn.hi321.browser.weave.client.WeaveCryptoUtil;

        $r1 := @parameter0: java.security.Key;

        $r2 := @parameter1: java.lang.String;

        $r3 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String,java.lang.String)>("HMACSHA256", "BC");

        virtualinvoke $r3.<javax.crypto.Mac: void init(java.security.Key)>($r1);

        $r4 = staticinvoke <cn.hi321.browser.weave.client.WeaveUtil: byte[] toAsciiBytes(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<javax.crypto.Mac: byte[] doFinal(byte[])>($r4);

        $r4 = staticinvoke <cn.hi321.browser.weave.client.Hex: byte[] encode(byte[])>($r4);

        $r2 = staticinvoke <cn.hi321.browser.weave.client.WeaveUtil: java.lang.String toAsciiString(byte[])>($r4);

        return $r2;
    }

    private static byte[] derivePKCS5S2(char[], byte[]) throws java.security.GeneralSecurityException
    {
        byte[] $r1, r2, r3, $r4;
        javax.crypto.Mac $r5;
        int $i0, i1, $i2, $i3;
        char[] $r0;

        $r0 := @parameter0: char[];

        $r1 := @parameter1: byte[];

        $r4 = staticinvoke <cn.hi321.browser.weave.client.WeaveCryptoUtil: byte[] passwordPKCS5ToBytes(char[])>($r0);

        $r5 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>("HMACSHA1");

        $i2 = virtualinvoke $r5.<javax.crypto.Mac: int getMacLength()>();

        i1 = 32 + $i2;

        $i3 = -1;

        i1 = i1 + $i3;

        i1 = i1 / $i2;

        r2 = newarray (byte)[4];

        $i3 = i1 * $i2;

        r3 = newarray (byte)[$i3];

        $i3 = 1;

     label1:
        if $i3 <= i1 goto label2;

        $r1 = newarray (byte)[32];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, $r1, 0, 32);

        return $r1;

     label2:
        staticinvoke <cn.hi321.browser.weave.client.WeaveCryptoUtil: void intToOctet(byte[],int)>(r2, $i3);

        $i0 = -1;

        $i0 = $i3 + $i0;

        $i0 = $i0 * $i2;

        staticinvoke <cn.hi321.browser.weave.client.WeaveCryptoUtil: void derivePKCS5S2Helper(javax.crypto.Mac,byte[],byte[],int,byte[],byte[],int)>($r5, $r4, $r1, 4096, r2, r3, $i0);

        $i3 = $i3 + 1;

        goto label1;
    }

    private static void derivePKCS5S2Helper(javax.crypto.Mac, byte[], byte[], int, byte[], byte[], int) throws java.security.GeneralSecurityException
    {
        byte[] $r1, $r2, $r3, $r4, r6;
        javax.crypto.Mac $r0;
        javax.crypto.spec.SecretKeySpec r5;
        java.lang.IllegalArgumentException $r7;
        byte $b2, $b6;
        int $i0, $i1, $i3, $i4, $i5;

        $r0 := @parameter0: javax.crypto.Mac;

        $r1 := @parameter1: byte[];

        $r2 := @parameter2: byte[];

        $i0 := @parameter3: int;

        $r3 := @parameter4: byte[];

        $r4 := @parameter5: byte[];

        $i1 := @parameter6: int;

        $i3 = virtualinvoke $r0.<javax.crypto.Mac: int getMacLength()>();

        r6 = newarray (byte)[$i3];

        r5 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke r5.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, "SHA1");

        virtualinvoke $r0.<javax.crypto.Mac: void init(java.security.Key)>(r5);

        if $r2 == null goto label1;

        $i3 = lengthof $r2;

        virtualinvoke $r0.<javax.crypto.Mac: void update(byte[],int,int)>($r2, 0, $i3);

     label1:
        $i3 = lengthof $r3;

        virtualinvoke $r0.<javax.crypto.Mac: void update(byte[],int,int)>($r3, 0, $i3);

        virtualinvoke $r0.<javax.crypto.Mac: void doFinal(byte[],int)>(r6, 0);

        $i3 = lengthof r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r6, 0, $r4, $i1, $i3);

        if $i0 != 0 goto label2;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("iteration count must be at least 1.");

        throw $r7;

     label2:
        $i3 = 1;

     label3:
        if $i3 < $i0 goto label4;

        return;

     label4:
        virtualinvoke $r0.<javax.crypto.Mac: void init(java.security.Key)>(r5);

        $i4 = lengthof r6;

        virtualinvoke $r0.<javax.crypto.Mac: void update(byte[],int,int)>(r6, 0, $i4);

        virtualinvoke $r0.<javax.crypto.Mac: void doFinal(byte[],int)>(r6, 0);

        $i4 = 0;

     label5:
        $i5 = lengthof r6;

        if $i4 != $i5 goto label6;

        $i3 = $i3 + 1;

        goto label3;

     label6:
        $i5 = $i1 + $i4;

        $b6 = $r4[$i5];

        $b2 = r6[$i4];

        $b2 = $b6 ^ $b2;

        $r4[$i5] = $b2;

        $i4 = $i4 + 1;

        goto label5;
    }

    public static byte[] deriveSyncHmacKey(byte[], byte[], java.lang.String) throws java.security.GeneralSecurityException
    {
        byte[] $r0, $r1, r4;
        int $i0;
        javax.crypto.spec.SecretKeySpec r3;
        javax.crypto.Mac $r5;
        java.lang.String $r2;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $r2 := @parameter2: java.lang.String;

        $r5 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>("HMACSHA256");

        $i0 = virtualinvoke $r5.<javax.crypto.Mac: int getMacLength()>();

        r4 = newarray (byte)[$i0];

        r3 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, "SHA256");

        virtualinvoke $r5.<javax.crypto.Mac: void init(java.security.Key)>(r3);

        virtualinvoke $r5.<javax.crypto.Mac: void update(byte[])>($r1);

        $r0 = <cn.hi321.browser.weave.client.WeaveCryptoUtil: byte[] HMAC_INPUT>;

        virtualinvoke $r5.<javax.crypto.Mac: void update(byte[])>($r0);

        $r0 = staticinvoke <cn.hi321.browser.weave.client.WeaveUtil: byte[] toAsciiBytes(java.lang.String)>($r2);

        virtualinvoke $r5.<javax.crypto.Mac: void update(byte[])>($r0);

        virtualinvoke $r5.<javax.crypto.Mac: void update(byte)>(2);

        virtualinvoke $r5.<javax.crypto.Mac: void doFinal(byte[],int)>(r4, 0);

        $r0 = newarray (byte)[32];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, $r0, 0, 32);

        return $r0;
    }

    public static byte[] deriveSyncKey(byte[], java.lang.String) throws java.security.GeneralSecurityException
    {
        byte[] $r0, r3;
        int $i0;
        javax.crypto.spec.SecretKeySpec r2;
        javax.crypto.Mac $r4;
        java.lang.String $r1;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.lang.String;

        $r4 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>("HMACSHA256");

        $i0 = virtualinvoke $r4.<javax.crypto.Mac: int getMacLength()>();

        r3 = newarray (byte)[$i0];

        r2 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r0, "SHA256");

        virtualinvoke $r4.<javax.crypto.Mac: void init(java.security.Key)>(r2);

        $r0 = <cn.hi321.browser.weave.client.WeaveCryptoUtil: byte[] HMAC_INPUT>;

        virtualinvoke $r4.<javax.crypto.Mac: void update(byte[])>($r0);

        $r0 = staticinvoke <cn.hi321.browser.weave.client.WeaveUtil: byte[] toAsciiBytes(java.lang.String)>($r1);

        virtualinvoke $r4.<javax.crypto.Mac: void update(byte[])>($r0);

        virtualinvoke $r4.<javax.crypto.Mac: void update(byte)>(1);

        virtualinvoke $r4.<javax.crypto.Mac: void doFinal(byte[],int)>(r3, 0);

        $r0 = newarray (byte)[32];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, $r0, 0, 32);

        return $r0;
    }

    private byte[] encrypt(java.security.Key, java.lang.String, java.lang.String) throws java.security.GeneralSecurityException
    {
        java.security.Key $r1;
        byte[] $r4;
        cn.hi321.browser.weave.client.WeaveCryptoUtil r0;
        java.lang.String $r2, $r3;

        r0 := @this: cn.hi321.browser.weave.client.WeaveCryptoUtil;

        $r1 := @parameter0: java.security.Key;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 = staticinvoke <cn.hi321.browser.weave.client.Base64: byte[] decode(java.lang.String)>($r2);

        $r4 = specialinvoke r0.<cn.hi321.browser.weave.client.WeaveCryptoUtil: byte[] encrypt(java.security.Key,byte[],java.lang.String)>($r1, $r4, $r3);

        return $r4;
    }

    private byte[] encrypt(java.security.Key, byte[], java.lang.String) throws java.security.GeneralSecurityException
    {
        java.security.Key $r1;
        byte[] $r2, $r6;
        javax.crypto.spec.IvParameterSpec $r5;
        cn.hi321.browser.weave.client.WeaveCryptoUtil r0;
        java.lang.String $r3;
        javax.crypto.Cipher $r4;

        r0 := @this: cn.hi321.browser.weave.client.WeaveCryptoUtil;

        $r1 := @parameter0: java.security.Key;

        $r2 := @parameter1: byte[];

        $r3 := @parameter2: java.lang.String;

        $r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>("AES/CBC/PKCS5PADDING", "BC");

        $r5 = new javax.crypto.spec.IvParameterSpec;

        $r6 = staticinvoke <cn.hi321.browser.weave.client.Base64: byte[] decode(java.lang.String)>($r3);

        specialinvoke $r5.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r6);

        virtualinvoke $r4.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(1, $r1, $r5);

        $r2 = virtualinvoke $r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r2);

        return $r2;
    }

    public static cn.hi321.browser.weave.client.WeaveCryptoUtil getInstance()
    {
        cn.hi321.browser.weave.client.WeaveCryptoUtil r0;

        r0 = <cn.hi321.browser.weave.client.WeaveCryptoUtil: cn.hi321.browser.weave.client.WeaveCryptoUtil sm_instance>;

        return r0;
    }

    protected static boolean initProvider(java.lang.String, java.lang.String)
    {
        java.lang.Throwable $r5;
        java.lang.Class $r3;
        java.lang.Object $r4;
        java.lang.String $r0, $r1;
        java.security.Provider $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

     label1:
        $r2 = staticinvoke <java.security.Security: java.security.Provider getProvider(java.lang.String)>("BC");

     label2:
        if $r2 != null goto label4;

     label3:
        $r3 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.bouncycastle.jce.provider.BouncyCastleProvider");

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.Object newInstance()>();

        $r2 = (java.security.Provider) $r4;

        staticinvoke <java.security.Security: int addProvider(java.security.Provider)>($r2);

     label4:
        return 1;

     label5:
        $r5 := @caughtexception;

        return 0;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    private static void intToOctet(byte[], int)
    {
        byte[] $r0;
        byte $b2;
        int $i0, $i1;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 = $i0 >>> 24;

        $b2 = (byte) $i1;

        $r0[0] = $b2;

        $i1 = $i0 >>> 16;

        $b2 = (byte) $i1;

        $r0[1] = $b2;

        $i1 = $i0 >>> 8;

        $b2 = (byte) $i1;

        $r0[2] = $b2;

        $b2 = (byte) $i0;

        $r0[3] = $b2;

        return;
    }

    private static byte[] passwordPKCS5ToBytes(char[])
    {
        byte[] r1;
        byte $b3;
        int $i0, $i1;
        char[] $r0;
        char $c2;

        $r0 := @parameter0: char[];

        $i0 = lengthof $r0;

        r1 = newarray (byte)[$i0];

        $i0 = 0;

     label1:
        $i1 = lengthof r1;

        if $i0 != $i1 goto label2;

        return r1;

     label2:
        $c2 = $r0[$i0];

        $b3 = (byte) $c2;

        r1[$i0] = $b3;

        $i0 = $i0 + 1;

        goto label1;
    }

    public java.security.interfaces.RSAPrivateKey decodePrivateKeyFromPKCSBytes(byte[]) throws java.security.GeneralSecurityException
    {
        byte[] $r1;
        java.security.spec.PKCS8EncodedKeySpec r2;
        java.security.PrivateKey $r4;
        java.security.interfaces.RSAPrivateKey $r5;
        cn.hi321.browser.weave.client.WeaveCryptoUtil r0;
        java.security.KeyFactory $r3;

        r0 := @this: cn.hi321.browser.weave.client.WeaveCryptoUtil;

        $r1 := @parameter0: byte[];

        r2 = new java.security.spec.PKCS8EncodedKeySpec;

        specialinvoke r2.<java.security.spec.PKCS8EncodedKeySpec: void <init>(byte[])>($r1);

        $r3 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String,java.lang.String)>("RSA", "BC");

        $r4 = virtualinvoke $r3.<java.security.KeyFactory: java.security.PrivateKey generatePrivate(java.security.spec.KeySpec)>(r2);

        $r5 = (java.security.interfaces.RSAPrivateKey) $r4;

        return $r5;
    }

    public byte[] decrypt(java.security.Key, java.lang.String, java.lang.String, java.lang.String) throws java.security.GeneralSecurityException
    {
        byte[] $r5, $r6;
        cn.hi321.browser.weave.client.WeaveCryptoUtil r0;
        javax.crypto.Cipher $r7;
        java.security.Key $r1;
        javax.crypto.spec.IvParameterSpec $r8;
        java.lang.String $r2, $r3, $r4;

        r0 := @this: cn.hi321.browser.weave.client.WeaveCryptoUtil;

        $r1 := @parameter0: java.security.Key;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.lang.String;

        $r5 = staticinvoke <cn.hi321.browser.weave.client.Base64: byte[] decode(java.lang.String)>($r2);

        $r6 = staticinvoke <cn.hi321.browser.weave.client.Base64: byte[] decode(java.lang.String)>($r3);

        $r7 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>("AES/CBC/PKCS5PADDING", "BC");

        $r8 = new javax.crypto.spec.IvParameterSpec;

        specialinvoke $r8.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r6);

        virtualinvoke $r7.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(2, $r1, $r8);

        $r5 = virtualinvoke $r7.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r5);

        return $r5;
    }

    public byte[] decrypt(java.security.Key, java.security.Key, java.lang.String, java.lang.String, java.lang.String) throws java.security.GeneralSecurityException
    {
        byte[] $r6, $r7;
        cn.hi321.browser.weave.client.WeaveCryptoUtil r0;
        javax.crypto.Cipher $r8;
        java.security.Key $r1, $r2;
        javax.crypto.spec.IvParameterSpec $r9;
        java.lang.String $r3, $r4, $r5;

        r0 := @this: cn.hi321.browser.weave.client.WeaveCryptoUtil;

        $r1 := @parameter0: java.security.Key;

        $r2 := @parameter1: java.security.Key;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.lang.String;

        $r5 := @parameter4: java.lang.String;

        specialinvoke r0.<cn.hi321.browser.weave.client.WeaveCryptoUtil: void checkMac(java.security.Key,java.lang.String,java.lang.String)>($r2, $r3, $r5);

        $r6 = staticinvoke <cn.hi321.browser.weave.client.Base64: byte[] decode(java.lang.String)>($r3);

        $r7 = staticinvoke <cn.hi321.browser.weave.client.Base64: byte[] decode(java.lang.String)>($r4);

        $r8 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>("AES/CBC/PKCS5PADDING", "BC");

        $r9 = new javax.crypto.spec.IvParameterSpec;

        specialinvoke $r9.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r7);

        virtualinvoke $r8.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(2, $r1, $r9);

        $r6 = virtualinvoke $r8.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r6);

        return $r6;
    }

    protected java.security.Key getKeyDecryptionKey(char[], byte[]) throws java.security.GeneralSecurityException
    {
        byte[] $r2;
        char[] $r1;
        javax.crypto.spec.SecretKeySpec $r3;
        cn.hi321.browser.weave.client.WeaveCryptoUtil r0;

        r0 := @this: cn.hi321.browser.weave.client.WeaveCryptoUtil;

        $r1 := @parameter0: char[];

        $r2 := @parameter1: byte[];

        $r2 = staticinvoke <cn.hi321.browser.weave.client.WeaveCryptoUtil: byte[] derivePKCS5S2(char[],byte[])>($r1, $r2);

        $r3 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, "AES");

        return $r3;
    }

    public java.lang.String legalizeUsername(java.lang.String)
    {
        java.lang.Throwable r1;
        byte[] $r6;
        java.security.MessageDigest $r5;
        java.lang.Error $r7;
        cn.hi321.browser.weave.client.WeaveCryptoUtil r0;
        java.util.regex.Matcher $r4;
        java.lang.String r2;
        java.util.regex.Pattern $r3;
        boolean $z0;

        r0 := @this: cn.hi321.browser.weave.client.WeaveCryptoUtil;

        r2 := @parameter0: java.lang.String;

        $r3 = <cn.hi321.browser.weave.client.WeaveCryptoUtil: java.util.regex.Pattern ILLEGAL_USERNAME_PATTERN>;

     label1:
        $r4 = virtualinvoke $r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r2);

        $z0 = virtualinvoke $r4.<java.util.regex.Matcher: boolean find()>();

     label2:
        if $z0 != 0 goto label3;

        return r2;

     label3:
        $r5 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA1");

        r2 = virtualinvoke r2.<java.lang.String: java.lang.String toLowerCase()>();

        $r6 = staticinvoke <cn.hi321.browser.weave.client.WeaveUtil: byte[] toAsciiBytes(java.lang.String)>(r2);

        virtualinvoke $r5.<java.security.MessageDigest: void update(byte[])>($r6);

        $r6 = virtualinvoke $r5.<java.security.MessageDigest: byte[] digest()>();

        $r6 = staticinvoke <cn.hi321.browser.weave.client.Base32: byte[] encode(byte[])>($r6);

        r2 = staticinvoke <cn.hi321.browser.weave.client.WeaveUtil: java.lang.String toAsciiString(byte[])>($r6);

     label4:
        return r2;

     label5:
        r1 := @caughtexception;

        $r7 = new java.lang.Error;

        specialinvoke $r7.<java.lang.Error: void <init>(java.lang.Throwable)>(r1);

        throw $r7;

        catch java.security.GeneralSecurityException from label1 to label2 with label5;
        catch java.security.GeneralSecurityException from label3 to label4 with label5;
    }

    public java.security.cert.X509Certificate readCertificate(byte[]) throws java.security.GeneralSecurityException
    {
        java.security.cert.X509Certificate $r5;
        byte[] $r1;
        java.security.cert.Certificate $r4;
        java.security.cert.CertificateFactory $r2;
        java.io.ByteArrayInputStream $r3;
        cn.hi321.browser.weave.client.WeaveCryptoUtil r0;

        r0 := @this: cn.hi321.browser.weave.client.WeaveCryptoUtil;

        $r1 := @parameter0: byte[];

        $r2 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String,java.lang.String)>("X.509", "BC");

        $r3 = new java.io.ByteArrayInputStream;

        specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[])>($r1);

        $r4 = virtualinvoke $r2.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>($r3);

        $r5 = (java.security.cert.X509Certificate) $r4;

        return $r5;
    }

    public java.security.interfaces.RSAPublicKey readCertificatePubKey(java.lang.String) throws java.security.GeneralSecurityException
    {
        java.security.cert.X509Certificate $r3;
        byte[] $r2;
        java.security.interfaces.RSAPublicKey $r4;
        cn.hi321.browser.weave.client.WeaveCryptoUtil r0;
        java.lang.String $r1;

        r0 := @this: cn.hi321.browser.weave.client.WeaveCryptoUtil;

        $r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <cn.hi321.browser.weave.client.Base64: byte[] decode(java.lang.String)>($r1);

        $r3 = virtualinvoke r0.<cn.hi321.browser.weave.client.WeaveCryptoUtil: java.security.cert.X509Certificate readCertificate(byte[])>($r2);

        $r4 = (java.security.interfaces.RSAPublicKey) $r3;

        return $r4;
    }

    public byte[] readPrivateKeyToPKCSBytes(char[], java.lang.String, java.lang.String, java.lang.String) throws java.security.GeneralSecurityException
    {
        byte[] $r5;
        cn.hi321.browser.weave.client.WeaveCryptoUtil r0;
        javax.crypto.Cipher $r7;
        java.security.Key $r6;
        javax.crypto.spec.IvParameterSpec $r8;
        char[] $r1;
        java.lang.String $r2, $r3, $r4;

        r0 := @this: cn.hi321.browser.weave.client.WeaveCryptoUtil;

        $r1 := @parameter0: char[];

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.lang.String;

        $r5 = staticinvoke <cn.hi321.browser.weave.client.Base64: byte[] decode(java.lang.String)>($r2);

        $r6 = virtualinvoke r0.<cn.hi321.browser.weave.client.WeaveCryptoUtil: java.security.Key getKeyDecryptionKey(char[],byte[])>($r1, $r5);

        $r7 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>("AES/CBC/PKCS5PADDING", "BC");

        $r8 = new javax.crypto.spec.IvParameterSpec;

        $r5 = staticinvoke <cn.hi321.browser.weave.client.Base64: byte[] decode(java.lang.String)>($r3);

        specialinvoke $r8.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r5);

        virtualinvoke $r7.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(2, $r6, $r8);

        $r5 = staticinvoke <cn.hi321.browser.weave.client.Base64: byte[] decode(java.lang.String)>($r4);

        $r5 = virtualinvoke $r7.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r5);

        return $r5;
    }

    public java.security.Key unwrapSecretKey(java.security.interfaces.RSAPrivateKey, java.lang.String) throws java.security.GeneralSecurityException
    {
        java.security.Key $r5;
        byte[] $r3;
        java.security.interfaces.RSAPrivateKey $r1;
        cn.hi321.browser.weave.client.WeaveCryptoUtil r0;
        java.lang.String $r2;
        javax.crypto.Cipher $r4;

        r0 := @this: cn.hi321.browser.weave.client.WeaveCryptoUtil;

        $r1 := @parameter0: java.security.interfaces.RSAPrivateKey;

        $r2 := @parameter1: java.lang.String;

        $r3 = staticinvoke <cn.hi321.browser.weave.client.Base64: byte[] decode(java.lang.String)>($r2);

        $r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>("RSA/ECB/PKCS1Padding", "BC");

        virtualinvoke $r4.<javax.crypto.Cipher: void init(int,java.security.Key)>(4, $r1);

        $r5 = virtualinvoke $r4.<javax.crypto.Cipher: java.security.Key unwrap(byte[],java.lang.String,int)>($r3, "AES", 3);

        return $r5;
    }
}
