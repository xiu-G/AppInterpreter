public abstract class com.hp.hpl.sparta.Node extends java.lang.Object
{
    private java.lang.Object annotation_;
    private com.hp.hpl.sparta.Document doc_;
    private int hash_;
    private com.hp.hpl.sparta.Node nextSibling_;
    private com.hp.hpl.sparta.Element parentNode_;
    private com.hp.hpl.sparta.Node previousSibling_;

    public void <init>()
    {
        com.hp.hpl.sparta.Node r0;

        r0 := @this: com.hp.hpl.sparta.Node;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Document doc_> = null;

        r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Element parentNode_> = null;

        r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node previousSibling_> = null;

        r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node nextSibling_> = null;

        r0.<com.hp.hpl.sparta.Node: java.lang.Object annotation_> = null;

        r0.<com.hp.hpl.sparta.Node: int hash_> = 0;

        return;
    }

    protected static void htmlEncode(java.io.Writer, java.lang.String) throws java.io.IOException
    {
        char $c3;
        java.lang.StringBuffer $r2, $r4;
        java.io.Writer $r0;
        int $i0, $i1, $i2, $i4;
        java.lang.String $r1, $r3;

        $r0 := @parameter0: java.io.Writer;

        $r1 := @parameter1: java.lang.String;

        $i0 = 0;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i2 = 0;

     label01:
        if $i2 < $i1 goto label02;

        if $i0 >= $i1 goto label12;

        $i1 = $i1 - $i0;

        virtualinvoke $r0.<java.io.Writer: void write(java.lang.String,int,int)>($r1, $i0, $i1);

        return;

     label02:
        $c3 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i2);

        $i4 = (int) $c3;

        if $i4 < 128 goto label05;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&#");

        $i4 = (int) $c3;

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i4);

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

     label03:
        if $r3 == null goto label04;

        $i4 = $i2 - $i0;

        virtualinvoke $r0.<java.io.Writer: void write(java.lang.String,int,int)>($r1, $i0, $i4);

        virtualinvoke $r0.<java.io.Writer: void write(java.lang.String)>($r3);

        $i0 = $i2 + 1;

     label04:
        $i2 = $i2 + 1;

        goto label01;

     label05:
        $i4 = (int) $c3;

        lookupswitch($i4)
        {
            case 34: goto label10;
            case 38: goto label09;
            case 39: goto label11;
            case 60: goto label07;
            case 62: goto label08;
            default: goto label06;
        };

     label06:
        $r3 = null;

        goto label03;

     label07:
        $r3 = "&lt;";

        goto label03;

     label08:
        $r3 = "&gt;";

        goto label03;

     label09:
        $r3 = "&amp;";

        goto label03;

     label10:
        $r3 = "&quot;";

        goto label03;

     label11:
        $r3 = "&#39;";

        goto label03;

     label12:
        return;
    }

    public abstract java.lang.Object clone();

    protected abstract int computeHashCode();

    public java.lang.Object getAnnotation()
    {
        com.hp.hpl.sparta.Node r0;
        java.lang.Object r1;

        r0 := @this: com.hp.hpl.sparta.Node;

        r1 = r0.<com.hp.hpl.sparta.Node: java.lang.Object annotation_>;

        return r1;
    }

    public com.hp.hpl.sparta.Node getNextSibling()
    {
        com.hp.hpl.sparta.Node r0;

        r0 := @this: com.hp.hpl.sparta.Node;

        r0 = r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node nextSibling_>;

        return r0;
    }

    public com.hp.hpl.sparta.Document getOwnerDocument()
    {
        com.hp.hpl.sparta.Node r0;
        com.hp.hpl.sparta.Document r1;

        r0 := @this: com.hp.hpl.sparta.Node;

        r1 = r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Document doc_>;

        return r1;
    }

    public com.hp.hpl.sparta.Element getParentNode()
    {
        com.hp.hpl.sparta.Node r0;
        com.hp.hpl.sparta.Element r1;

        r0 := @this: com.hp.hpl.sparta.Node;

        r1 = r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Element parentNode_>;

        return r1;
    }

    public com.hp.hpl.sparta.Node getPreviousSibling()
    {
        com.hp.hpl.sparta.Node r0;

        r0 := @this: com.hp.hpl.sparta.Node;

        r0 = r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node previousSibling_>;

        return r0;
    }

    public int hashCode()
    {
        int $i0;
        com.hp.hpl.sparta.Node r0;

        r0 := @this: com.hp.hpl.sparta.Node;

        $i0 = r0.<com.hp.hpl.sparta.Node: int hash_>;

        if $i0 != 0 goto label1;

        $i0 = virtualinvoke r0.<com.hp.hpl.sparta.Node: int computeHashCode()>();

        r0.<com.hp.hpl.sparta.Node: int hash_> = $i0;

     label1:
        $i0 = r0.<com.hp.hpl.sparta.Node: int hash_>;

        return $i0;
    }

    void insertAtEndOfLinkedList(com.hp.hpl.sparta.Node)
    {
        com.hp.hpl.sparta.Node r0, $r1;

        r0 := @this: com.hp.hpl.sparta.Node;

        $r1 := @parameter0: com.hp.hpl.sparta.Node;

        r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node previousSibling_> = $r1;

        if $r1 == null goto label1;

        $r1.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node nextSibling_> = r0;

     label1:
        return;
    }

    com.hp.hpl.sparta.Element makeMatching(com.hp.hpl.sparta.Element, com.hp.hpl.sparta.xpath.Step, java.lang.String) throws com.hp.hpl.sparta.ParseException, com.hp.hpl.sparta.xpath.XPathException
    {
        com.hp.hpl.sparta.xpath.BooleanExpr $r10;
        com.hp.hpl.sparta.Node r0;
        com.hp.hpl.sparta.xpath.ElementTest $r7;
        com.hp.hpl.sparta.ParseException $r5;
        com.hp.hpl.sparta.Node$1 $r11;
        com.hp.hpl.sparta.xpath.NodeTest $r4;
        com.hp.hpl.sparta.Element $r1, $r9;
        java.lang.StringBuffer $r6;
        java.lang.String $r3, $r8;
        com.hp.hpl.sparta.xpath.Step $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.Node;

        $r1 := @parameter0: com.hp.hpl.sparta.Element;

        $r2 := @parameter1: com.hp.hpl.sparta.xpath.Step;

        $r3 := @parameter2: java.lang.String;

        $r4 = virtualinvoke $r2.<com.hp.hpl.sparta.xpath.Step: com.hp.hpl.sparta.xpath.NodeTest getNodeTest()>();

        $z0 = $r4 instanceof com.hp.hpl.sparta.xpath.ElementTest;

        if $z0 != 0 goto label1;

        $r5 = new com.hp.hpl.sparta.ParseException;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\" in \"");

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\" is not an element test");

        $r3 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r5.<com.hp.hpl.sparta.ParseException: void <init>(java.lang.String)>($r3);

        throw $r5;

     label1:
        $r7 = (com.hp.hpl.sparta.xpath.ElementTest) $r4;

        $r8 = virtualinvoke $r7.<com.hp.hpl.sparta.xpath.ElementTest: java.lang.String getTagName()>();

        $r9 = new com.hp.hpl.sparta.Element;

        specialinvoke $r9.<com.hp.hpl.sparta.Element: void <init>(java.lang.String)>($r8);

        $r10 = virtualinvoke $r2.<com.hp.hpl.sparta.xpath.Step: com.hp.hpl.sparta.xpath.BooleanExpr getPredicate()>();

        $r11 = new com.hp.hpl.sparta.Node$1;

        specialinvoke $r11.<com.hp.hpl.sparta.Node$1: void <init>(com.hp.hpl.sparta.Node,com.hp.hpl.sparta.Element,com.hp.hpl.sparta.Element,java.lang.String,java.lang.String)>(r0, $r9, $r1, $r3, $r8);

        virtualinvoke $r10.<com.hp.hpl.sparta.xpath.BooleanExpr: void accept(com.hp.hpl.sparta.xpath.BooleanExprVisitor)>($r11);

        return $r9;
    }

    void notifyObservers()
    {
        com.hp.hpl.sparta.Node r0;
        com.hp.hpl.sparta.Document $r1;

        r0 := @this: com.hp.hpl.sparta.Node;

        r0.<com.hp.hpl.sparta.Node: int hash_> = 0;

        $r1 = r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Document doc_>;

        if $r1 == null goto label1;

        $r1 = r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Document doc_>;

        virtualinvoke $r1.<com.hp.hpl.sparta.Document: void notifyObservers()>();

     label1:
        return;
    }

    void removeFromLinkedList()
    {
        com.hp.hpl.sparta.Node r0, $r1, $r2;

        r0 := @this: com.hp.hpl.sparta.Node;

        $r1 = r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node previousSibling_>;

        if $r1 == null goto label1;

        $r1 = r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node previousSibling_>;

        $r2 = r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node nextSibling_>;

        $r1.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node nextSibling_> = $r2;

     label1:
        $r1 = r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node nextSibling_>;

        if $r1 == null goto label2;

        $r1 = r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node nextSibling_>;

        $r2 = r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node previousSibling_>;

        $r1.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node previousSibling_> = $r2;

     label2:
        r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node nextSibling_> = null;

        r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node previousSibling_> = null;

        return;
    }

    void replaceInLinkedList(com.hp.hpl.sparta.Node)
    {
        com.hp.hpl.sparta.Node r0, $r1, $r2;

        r0 := @this: com.hp.hpl.sparta.Node;

        $r1 := @parameter0: com.hp.hpl.sparta.Node;

        $r2 = r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node previousSibling_>;

        if $r2 == null goto label1;

        $r2 = r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node previousSibling_>;

        $r2.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node nextSibling_> = $r1;

     label1:
        $r2 = r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node nextSibling_>;

        if $r2 == null goto label2;

        $r2 = r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node nextSibling_>;

        $r2.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node previousSibling_> = $r1;

     label2:
        $r2 = r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node nextSibling_>;

        $r1.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node nextSibling_> = $r2;

        $r2 = r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node previousSibling_>;

        $r1.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node previousSibling_> = $r2;

        r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node nextSibling_> = null;

        r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node previousSibling_> = null;

        return;
    }

    public void setAnnotation(java.lang.Object)
    {
        com.hp.hpl.sparta.Node r0;
        java.lang.Object $r1;

        r0 := @this: com.hp.hpl.sparta.Node;

        $r1 := @parameter0: java.lang.Object;

        r0.<com.hp.hpl.sparta.Node: java.lang.Object annotation_> = $r1;

        return;
    }

    void setOwnerDocument(com.hp.hpl.sparta.Document)
    {
        com.hp.hpl.sparta.Node r0;
        com.hp.hpl.sparta.Document $r1;

        r0 := @this: com.hp.hpl.sparta.Node;

        $r1 := @parameter0: com.hp.hpl.sparta.Document;

        r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Document doc_> = $r1;

        return;
    }

    void setParentNode(com.hp.hpl.sparta.Element)
    {
        com.hp.hpl.sparta.Node r0;
        com.hp.hpl.sparta.Element $r1;

        r0 := @this: com.hp.hpl.sparta.Node;

        $r1 := @parameter0: com.hp.hpl.sparta.Element;

        r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Element parentNode_> = $r1;

        return;
    }

    public java.lang.String toString()
    {
        java.lang.Throwable $r5;
        byte[] $r4;
        com.hp.hpl.sparta.Node r0;
        java.io.ByteArrayOutputStream $r1;
        java.io.OutputStreamWriter $r2;
        java.lang.String $r3;

        r0 := @this: com.hp.hpl.sparta.Node;

        $r1 = new java.io.ByteArrayOutputStream;

     label1:
        specialinvoke $r1.<java.io.ByteArrayOutputStream: void <init>()>();

     label2:
        $r2 = new java.io.OutputStreamWriter;

     label3:
        specialinvoke $r2.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>($r1);

        virtualinvoke r0.<com.hp.hpl.sparta.Node: void toString(java.io.Writer)>($r2);

        virtualinvoke $r2.<java.io.Writer: void flush()>();

     label4:
        $r3 = new java.lang.String;

     label5:
        $r4 = virtualinvoke $r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r3.<java.lang.String: void <init>(byte[])>($r4);

     label6:
        return $r3;

     label7:
        $r5 := @caughtexception;

        $r3 = specialinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r3;

        catch java.io.IOException from label1 to label2 with label7;
        catch java.io.IOException from label3 to label4 with label7;
        catch java.io.IOException from label5 to label6 with label7;
    }

    abstract void toString(java.io.Writer) throws java.io.IOException;

    public java.lang.String toXml() throws java.io.IOException
    {
        byte[] $r1;
        com.hp.hpl.sparta.Node r0;
        java.io.ByteArrayOutputStream $r2;
        java.io.OutputStreamWriter $r3;
        java.lang.String $r4;

        r0 := @this: com.hp.hpl.sparta.Node;

        $r2 = new java.io.ByteArrayOutputStream;

        specialinvoke $r2.<java.io.ByteArrayOutputStream: void <init>()>();

        $r3 = new java.io.OutputStreamWriter;

        specialinvoke $r3.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>($r2);

        virtualinvoke r0.<com.hp.hpl.sparta.Node: void toXml(java.io.Writer)>($r3);

        virtualinvoke $r3.<java.io.Writer: void flush()>();

        $r4 = new java.lang.String;

        $r1 = virtualinvoke $r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r4.<java.lang.String: void <init>(byte[])>($r1);

        return $r4;
    }

    abstract void toXml(java.io.Writer) throws java.io.IOException;

    public abstract com.hp.hpl.sparta.Element xpathSelectElement(java.lang.String) throws com.hp.hpl.sparta.ParseException;

    public abstract java.util.Enumeration xpathSelectElements(java.lang.String) throws com.hp.hpl.sparta.ParseException;

    public abstract java.lang.String xpathSelectString(java.lang.String) throws com.hp.hpl.sparta.ParseException;

    public abstract java.util.Enumeration xpathSelectStrings(java.lang.String) throws com.hp.hpl.sparta.ParseException;

    public boolean xpathSetStrings(java.lang.String, java.lang.String) throws com.hp.hpl.sparta.ParseException
    {
        java.lang.IndexOutOfBoundsException $r8;
        com.hp.hpl.sparta.Node r0;
        com.hp.hpl.sparta.DOMException $r6;
        java.util.Enumeration $r9;
        com.hp.hpl.sparta.ParseException $r14;
        java.lang.Error $r15;
        com.hp.hpl.sparta.Element $r11;
        java.util.Vector $r3, $r16;
        java.lang.StringBuffer $r5, $r13;
        int $i0, $i1;
        java.lang.String $r1, $r2, $r4, $r7;
        boolean $z0, $z1;
        char $c2;
        com.hp.hpl.sparta.Text $r12, $r17;
        java.lang.Object $r10;

        r0 := @this: com.hp.hpl.sparta.Node;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

     label01:
        $i0 = virtualinvoke $r1.<java.lang.String: int lastIndexOf(int)>(47);

     label02:
        $i1 = $i0 + 1;

     label03:
        $r4 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i1);

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("text()");

     label04:
        if $z0 != 0 goto label12;

        $i1 = $i0 + 1;

     label05:
        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i1);

     label06:
        $i1 = (int) $c2;

        if $i1 == 64 goto label12;

        $r14 = new com.hp.hpl.sparta.ParseException;

        $r13 = new java.lang.StringBuffer;

        $r5 = $r13;

     label07:
        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Last step of Xpath expression \"");

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\" is not \"text()\" and does not start with a \'@\'. It starts with a \'");

     label08:
        $i0 = $i0 + 1;

     label09:
        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2);

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r2 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r14.<com.hp.hpl.sparta.ParseException: void <init>(java.lang.String)>($r2);

     label10:
        throw $r14;

     label11:
        $r6 := @caughtexception;

        $r15 = new java.lang.Error;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Assertion failed ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r6);

        $r1 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.Error: void <init>(java.lang.String)>($r1);

        throw $r15;

     label12:
        $r7 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

     label13:
        $i1 = $i0 + 1;

     label14:
        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i1);

     label15:
        $i1 = (int) $c2;

        if $i1 != 64 goto label31;

        $i0 = $i0 + 2;

     label16:
        $r4 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i0);

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

     label17:
        if $i0 != 0 goto label21;

        $r14 = new com.hp.hpl.sparta.ParseException;

        $r13 = new java.lang.StringBuffer;

        $r5 = $r13;

     label18:
        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Xpath expression \"");

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\" specifies zero-length attribute name\"");

        $r2 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r14.<com.hp.hpl.sparta.ParseException: void <init>(java.lang.String)>($r2);

     label19:
        throw $r14;

     label20:
        $r8 := @caughtexception;

        $r14 = new com.hp.hpl.sparta.ParseException;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Xpath expression \"");

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\" is not in the form \"xpathExpression/@attributeName\"");

        $r1 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r14.<com.hp.hpl.sparta.ParseException: void <init>(java.lang.String)>($r1);

        throw $r14;

     label21:
        $r9 = virtualinvoke r0.<com.hp.hpl.sparta.Node: java.util.Enumeration xpathSelectElements(java.lang.String)>($r7);

     label22:
        $z0 = 0;

     label23:
        $z1 = interfaceinvoke $r9.<java.util.Enumeration: boolean hasMoreElements()>();

     label24:
        if $z1 != 0 goto label25;

        return $z0;

     label25:
        $r10 = interfaceinvoke $r9.<java.util.Enumeration: java.lang.Object nextElement()>();

     label26:
        $r11 = (com.hp.hpl.sparta.Element) $r10;

     label27:
        $r7 = virtualinvoke $r11.<com.hp.hpl.sparta.Element: java.lang.String getAttribute(java.lang.String)>($r4);

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r7);

     label28:
        if $z1 != 0 goto label23;

     label29:
        virtualinvoke $r11.<com.hp.hpl.sparta.Element: void setAttribute(java.lang.String,java.lang.String)>($r4, $r2);

     label30:
        $z0 = 1;

        goto label23;

     label31:
        $r9 = virtualinvoke r0.<com.hp.hpl.sparta.Node: java.util.Enumeration xpathSelectElements(java.lang.String)>($r7);

        $z0 = interfaceinvoke $r9.<java.util.Enumeration: boolean hasMoreElements()>();

     label32:
        $z1 = interfaceinvoke $r9.<java.util.Enumeration: boolean hasMoreElements()>();

     label33:
        if $z1 == 0 goto label62;

     label34:
        $r10 = interfaceinvoke $r9.<java.util.Enumeration: java.lang.Object nextElement()>();

     label35:
        $r11 = (com.hp.hpl.sparta.Element) $r10;

        $r16 = new java.util.Vector;

        $r3 = $r16;

     label36:
        specialinvoke $r16.<java.util.Vector: void <init>()>();

        r0 = virtualinvoke $r11.<com.hp.hpl.sparta.Element: com.hp.hpl.sparta.Node getFirstChild()>();

     label37:
        if r0 != null goto label44;

     label38:
        $i0 = virtualinvoke $r3.<java.util.Vector: int size()>();

     label39:
        if $i0 != 0 goto label48;

        $r17 = new com.hp.hpl.sparta.Text;

        $r12 = $r17;

     label40:
        specialinvoke $r17.<com.hp.hpl.sparta.Text: void <init>(java.lang.String)>($r2);

        $r4 = virtualinvoke $r12.<com.hp.hpl.sparta.Text: java.lang.String getData()>();

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

     label41:
        if $i0 <= 0 goto label32;

     label42:
        virtualinvoke $r11.<com.hp.hpl.sparta.Element: void appendChild(com.hp.hpl.sparta.Node)>($r12);

     label43:
        $z0 = 1;

        goto label32;

     label44:
        $z1 = r0 instanceof com.hp.hpl.sparta.Text;

        if $z1 == 0 goto label46;

        $r12 = (com.hp.hpl.sparta.Text) r0;

     label45:
        virtualinvoke $r3.<java.util.Vector: void addElement(java.lang.Object)>($r12);

     label46:
        r0 = virtualinvoke r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node getNextSibling()>();

     label47:
        goto label37;

     label48:
        $r10 = virtualinvoke $r3.<java.util.Vector: java.lang.Object elementAt(int)>(0);

     label49:
        $r12 = (com.hp.hpl.sparta.Text) $r10;

     label50:
        $r4 = virtualinvoke $r12.<com.hp.hpl.sparta.Text: java.lang.String getData()>();

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r2);

     label51:
        if $z1 != 0 goto label61;

     label52:
        virtualinvoke $r3.<java.util.Vector: void removeElementAt(int)>(0);

        virtualinvoke $r12.<com.hp.hpl.sparta.Text: void setData(java.lang.String)>($r2);

     label53:
        $z0 = 1;

     label54:
        $i0 = 0;

     label55:
        $i1 = virtualinvoke $r3.<java.util.Vector: int size()>();

     label56:
        if $i0 < $i1 goto label57;

        goto label32;

     label57:
        $r10 = virtualinvoke $r3.<java.util.Vector: java.lang.Object elementAt(int)>($i0);

     label58:
        $r12 = (com.hp.hpl.sparta.Text) $r10;

     label59:
        virtualinvoke $r11.<com.hp.hpl.sparta.Element: void removeChild(com.hp.hpl.sparta.Node)>($r12);

     label60:
        $i0 = $i0 + 1;

        $z0 = 1;

        goto label55;

     label61:
        goto label54;

     label62:
        return $z0;

        catch com.hp.hpl.sparta.DOMException from label01 to label02 with label11;
        catch com.hp.hpl.sparta.DOMException from label03 to label04 with label11;
        catch com.hp.hpl.sparta.DOMException from label05 to label06 with label11;
        catch com.hp.hpl.sparta.DOMException from label07 to label08 with label11;
        catch com.hp.hpl.sparta.DOMException from label09 to label10 with label11;
        catch java.lang.IndexOutOfBoundsException from label01 to label02 with label20;
        catch java.lang.IndexOutOfBoundsException from label03 to label04 with label20;
        catch java.lang.IndexOutOfBoundsException from label05 to label06 with label20;
        catch java.lang.IndexOutOfBoundsException from label07 to label08 with label20;
        catch java.lang.IndexOutOfBoundsException from label09 to label10 with label20;
        catch com.hp.hpl.sparta.DOMException from label12 to label13 with label11;
        catch com.hp.hpl.sparta.DOMException from label14 to label15 with label11;
        catch com.hp.hpl.sparta.DOMException from label16 to label17 with label11;
        catch com.hp.hpl.sparta.DOMException from label18 to label19 with label11;
        catch java.lang.IndexOutOfBoundsException from label12 to label13 with label20;
        catch java.lang.IndexOutOfBoundsException from label14 to label15 with label20;
        catch java.lang.IndexOutOfBoundsException from label16 to label17 with label20;
        catch java.lang.IndexOutOfBoundsException from label18 to label19 with label20;
        catch com.hp.hpl.sparta.DOMException from label21 to label22 with label11;
        catch com.hp.hpl.sparta.DOMException from label23 to label24 with label11;
        catch com.hp.hpl.sparta.DOMException from label25 to label26 with label11;
        catch com.hp.hpl.sparta.DOMException from label27 to label28 with label11;
        catch com.hp.hpl.sparta.DOMException from label29 to label30 with label11;
        catch com.hp.hpl.sparta.DOMException from label31 to label32 with label11;
        catch com.hp.hpl.sparta.DOMException from label32 to label33 with label11;
        catch com.hp.hpl.sparta.DOMException from label34 to label35 with label11;
        catch com.hp.hpl.sparta.DOMException from label36 to label37 with label11;
        catch com.hp.hpl.sparta.DOMException from label38 to label39 with label11;
        catch com.hp.hpl.sparta.DOMException from label40 to label41 with label11;
        catch com.hp.hpl.sparta.DOMException from label42 to label43 with label11;
        catch com.hp.hpl.sparta.DOMException from label45 to label47 with label11;
        catch com.hp.hpl.sparta.DOMException from label48 to label49 with label11;
        catch com.hp.hpl.sparta.DOMException from label50 to label51 with label11;
        catch com.hp.hpl.sparta.DOMException from label52 to label53 with label11;
        catch com.hp.hpl.sparta.DOMException from label55 to label56 with label11;
        catch com.hp.hpl.sparta.DOMException from label57 to label58 with label11;
        catch com.hp.hpl.sparta.DOMException from label59 to label60 with label11;
        catch java.lang.IndexOutOfBoundsException from label21 to label22 with label20;
        catch java.lang.IndexOutOfBoundsException from label23 to label24 with label20;
        catch java.lang.IndexOutOfBoundsException from label25 to label26 with label20;
        catch java.lang.IndexOutOfBoundsException from label27 to label28 with label20;
        catch java.lang.IndexOutOfBoundsException from label29 to label30 with label20;
        catch java.lang.IndexOutOfBoundsException from label31 to label32 with label20;
        catch java.lang.IndexOutOfBoundsException from label32 to label33 with label20;
        catch java.lang.IndexOutOfBoundsException from label34 to label35 with label20;
        catch java.lang.IndexOutOfBoundsException from label36 to label37 with label20;
        catch java.lang.IndexOutOfBoundsException from label38 to label39 with label20;
        catch java.lang.IndexOutOfBoundsException from label40 to label41 with label20;
        catch java.lang.IndexOutOfBoundsException from label42 to label43 with label20;
        catch java.lang.IndexOutOfBoundsException from label45 to label47 with label20;
        catch java.lang.IndexOutOfBoundsException from label48 to label49 with label20;
        catch java.lang.IndexOutOfBoundsException from label50 to label51 with label20;
        catch java.lang.IndexOutOfBoundsException from label52 to label53 with label20;
        catch java.lang.IndexOutOfBoundsException from label55 to label56 with label20;
        catch java.lang.IndexOutOfBoundsException from label57 to label58 with label20;
        catch java.lang.IndexOutOfBoundsException from label59 to label60 with label20;
    }
}
