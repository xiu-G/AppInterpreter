public class org.dom4j.QName extends java.lang.Object implements java.io.Serializable
{
    static java.lang.Class class$org$dom4j$tree$QNameCache;
    private static org.dom4j.util.SingletonStrategy singleton;
    private org.dom4j.DocumentFactory documentFactory;
    private int hashCode;
    private java.lang.String name;
    private transient org.dom4j.Namespace namespace;
    private java.lang.String qualifiedName;

    static void <clinit>()
    {
        org.dom4j.util.SingletonStrategy $r1;
        java.lang.Exception r0, $r6, $r7;
        java.lang.Class r2, $r4;
        java.lang.Object $r5;
        java.lang.String $r3;

        <org.dom4j.QName: org.dom4j.util.SingletonStrategy singleton> = null;

        r2 = null;

     label01:
        $r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("org.dom4j.QName.singleton.strategy", "org.dom4j.util.SimpleSingleton");

        $r4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r3);

     label02:
        r2 = $r4;

     label03:
        $r5 = virtualinvoke r2.<java.lang.Class: java.lang.Object newInstance()>();

        $r1 = (org.dom4j.util.SingletonStrategy) $r5;

     label04:
        <org.dom4j.QName: org.dom4j.util.SingletonStrategy singleton> = $r1;

        $r1 = <org.dom4j.QName: org.dom4j.util.SingletonStrategy singleton>;

        r2 = <org.dom4j.QName: java.lang.Class class$org$dom4j$tree$QNameCache>;

        if r2 != null goto label12;

     label05:
        r2 = staticinvoke <org.dom4j.QName: java.lang.Class class$(java.lang.String)>("org.dom4j.tree.QNameCache");

     label06:
        $r4 = r2;

        <org.dom4j.QName: java.lang.Class class$org$dom4j$tree$QNameCache> = r2;

     label07:
        $r3 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        interfaceinvoke $r1.<org.dom4j.util.SingletonStrategy: void setSingletonClassName(java.lang.String)>($r3);

     label08:
        return;

     label09:
        r0 := @caughtexception;

     label10:
        $r4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.dom4j.util.SimpleSingleton");

     label11:
        r2 = $r4;

        goto label03;

     label12:
        $r4 = <org.dom4j.QName: java.lang.Class class$org$dom4j$tree$QNameCache>;

        goto label07;

     label13:
        $r6 := @caughtexception;

        goto label03;

     label14:
        $r7 := @caughtexception;

        return;

        catch java.lang.Exception from label01 to label02 with label09;
        catch java.lang.Exception from label03 to label04 with label14;
        catch java.lang.Exception from label05 to label06 with label14;
        catch java.lang.Exception from label07 to label08 with label14;
        catch java.lang.Exception from label10 to label11 with label13;
    }

    public void <init>(java.lang.String)
    {
        org.dom4j.QName r0;
        java.lang.String $r1;
        org.dom4j.Namespace $r2;

        r0 := @this: org.dom4j.QName;

        $r1 := @parameter0: java.lang.String;

        $r2 = <org.dom4j.Namespace: org.dom4j.Namespace NO_NAMESPACE>;

        specialinvoke r0.<org.dom4j.QName: void <init>(java.lang.String,org.dom4j.Namespace)>($r1, $r2);

        return;
    }

    public void <init>(java.lang.String, org.dom4j.Namespace)
    {
        org.dom4j.QName r0;
        java.lang.String $r1;
        org.dom4j.Namespace $r2;

        r0 := @this: org.dom4j.QName;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.dom4j.Namespace;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $r1 != null goto label1;

        $r1 = "";

     label1:
        r0.<org.dom4j.QName: java.lang.String name> = $r1;

        if $r2 != null goto label2;

        $r2 = <org.dom4j.Namespace: org.dom4j.Namespace NO_NAMESPACE>;

     label2:
        r0.<org.dom4j.QName: org.dom4j.Namespace namespace> = $r2;

        return;
    }

    public void <init>(java.lang.String, org.dom4j.Namespace, java.lang.String)
    {
        org.dom4j.Namespace $r3;
        org.dom4j.QName r0;
        java.lang.String $r1, $r2;

        r0 := @this: org.dom4j.QName;

        $r2 := @parameter0: java.lang.String;

        $r3 := @parameter1: org.dom4j.Namespace;

        $r1 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $r2 != null goto label1;

        $r2 = "";

     label1:
        r0.<org.dom4j.QName: java.lang.String name> = $r2;

        r0.<org.dom4j.QName: java.lang.String qualifiedName> = $r1;

        if $r3 != null goto label2;

        $r3 = <org.dom4j.Namespace: org.dom4j.Namespace NO_NAMESPACE>;

     label2:
        r0.<org.dom4j.QName: org.dom4j.Namespace namespace> = $r3;

        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.ClassNotFoundException r1;
        java.lang.Class $r2;
        java.lang.String $r0;
        java.lang.NoClassDefFoundError $r3;

        $r0 := @parameter0: java.lang.String;

     label1:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.dom4j.tree.QNameCache");

     label2:
        return $r2;

     label3:
        r1 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r0 = virtualinvoke r1.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r0);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    public static org.dom4j.QName get(java.lang.String)
    {
        org.dom4j.QName $r2;
        java.lang.String $r0;
        org.dom4j.tree.QNameCache $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.dom4j.QName: org.dom4j.tree.QNameCache getCache()>();

        $r2 = virtualinvoke $r1.<org.dom4j.tree.QNameCache: org.dom4j.QName get(java.lang.String)>($r0);

        return $r2;
    }

    public static org.dom4j.QName get(java.lang.String, java.lang.String)
    {
        org.dom4j.QName $r3;
        java.lang.String $r0, $r1;
        org.dom4j.tree.QNameCache $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        if $r1 != null goto label1;

        $r2 = staticinvoke <org.dom4j.QName: org.dom4j.tree.QNameCache getCache()>();

        $r3 = virtualinvoke $r2.<org.dom4j.tree.QNameCache: org.dom4j.QName get(java.lang.String)>($r0);

        return $r3;

     label1:
        $r2 = staticinvoke <org.dom4j.QName: org.dom4j.tree.QNameCache getCache()>();

        $r3 = virtualinvoke $r2.<org.dom4j.tree.QNameCache: org.dom4j.QName get(java.lang.String,java.lang.String)>($r0, $r1);

        return $r3;
    }

    public static org.dom4j.QName get(java.lang.String, java.lang.String, java.lang.String)
    {
        org.dom4j.Namespace $r5;
        int $i0;
        org.dom4j.QName $r3;
        java.lang.String $r0, $r1, $r2;
        org.dom4j.tree.QNameCache $r4;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        if $r1 == null goto label1;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        if $r2 != null goto label2;

        $r3 = staticinvoke <org.dom4j.QName: org.dom4j.QName get(java.lang.String)>($r0);

        return $r3;

     label2:
        if $r1 == null goto label3;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label4;

     label3:
        $r4 = staticinvoke <org.dom4j.QName: org.dom4j.tree.QNameCache getCache()>();

        $r5 = staticinvoke <org.dom4j.Namespace: org.dom4j.Namespace get(java.lang.String)>($r2);

        $r3 = virtualinvoke $r4.<org.dom4j.tree.QNameCache: org.dom4j.QName get(java.lang.String,org.dom4j.Namespace)>($r0, $r5);

        return $r3;

     label4:
        if $r2 != null goto label5;

        $r3 = staticinvoke <org.dom4j.QName: org.dom4j.QName get(java.lang.String)>($r0);

        return $r3;

     label5:
        $r4 = staticinvoke <org.dom4j.QName: org.dom4j.tree.QNameCache getCache()>();

        $r5 = staticinvoke <org.dom4j.Namespace: org.dom4j.Namespace get(java.lang.String,java.lang.String)>($r1, $r2);

        $r3 = virtualinvoke $r4.<org.dom4j.tree.QNameCache: org.dom4j.QName get(java.lang.String,org.dom4j.Namespace)>($r0, $r5);

        return $r3;
    }

    public static org.dom4j.QName get(java.lang.String, org.dom4j.Namespace)
    {
        org.dom4j.Namespace $r1;
        org.dom4j.QName $r3;
        java.lang.String $r0;
        org.dom4j.tree.QNameCache $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: org.dom4j.Namespace;

        $r2 = staticinvoke <org.dom4j.QName: org.dom4j.tree.QNameCache getCache()>();

        $r3 = virtualinvoke $r2.<org.dom4j.tree.QNameCache: org.dom4j.QName get(java.lang.String,org.dom4j.Namespace)>($r0, $r1);

        return $r3;
    }

    public static org.dom4j.QName get(java.lang.String, org.dom4j.Namespace, java.lang.String)
    {
        org.dom4j.Namespace $r1;
        org.dom4j.QName $r4;
        java.lang.String $r0, $r2;
        org.dom4j.tree.QNameCache $r3;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: org.dom4j.Namespace;

        $r2 := @parameter2: java.lang.String;

        $r3 = staticinvoke <org.dom4j.QName: org.dom4j.tree.QNameCache getCache()>();

        $r4 = virtualinvoke $r3.<org.dom4j.tree.QNameCache: org.dom4j.QName get(java.lang.String,org.dom4j.Namespace,java.lang.String)>($r0, $r1, $r2);

        return $r4;
    }

    private static org.dom4j.tree.QNameCache getCache()
    {
        java.lang.Object $r1;
        org.dom4j.tree.QNameCache r2;
        org.dom4j.util.SingletonStrategy $r0;

        $r0 = <org.dom4j.QName: org.dom4j.util.SingletonStrategy singleton>;

        $r1 = interfaceinvoke $r0.<org.dom4j.util.SingletonStrategy: java.lang.Object instance()>();

        r2 = (org.dom4j.tree.QNameCache) $r1;

        return r2;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.dom4j.Namespace $r5;
        java.io.ObjectInputStream $r1;
        org.dom4j.QName r0;
        java.lang.Object $r2;
        java.lang.String r3, r4;

        r0 := @this: org.dom4j.QName;

        $r1 := @parameter0: java.io.ObjectInputStream;

        $r2 = virtualinvoke $r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        r3 = (java.lang.String) $r2;

        $r2 = virtualinvoke $r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        r4 = (java.lang.String) $r2;

        virtualinvoke $r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        $r5 = staticinvoke <org.dom4j.Namespace: org.dom4j.Namespace get(java.lang.String,java.lang.String)>(r3, r4);

        r0.<org.dom4j.QName: org.dom4j.Namespace namespace> = $r5;

        return;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        org.dom4j.Namespace $r2;
        org.dom4j.QName r0;
        java.io.ObjectOutputStream $r1;
        java.lang.String $r3;

        r0 := @this: org.dom4j.QName;

        $r1 := @parameter0: java.io.ObjectOutputStream;

        $r2 = r0.<org.dom4j.QName: org.dom4j.Namespace namespace>;

        $r3 = virtualinvoke $r2.<org.dom4j.Namespace: java.lang.String getPrefix()>();

        virtualinvoke $r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r3);

        $r2 = r0.<org.dom4j.QName: org.dom4j.Namespace namespace>;

        $r3 = virtualinvoke $r2.<org.dom4j.Namespace: java.lang.String getURI()>();

        virtualinvoke $r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r3);

        virtualinvoke $r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        return;
    }

    public boolean equals(java.lang.Object)
    {
        int $i0, $i1;
        org.dom4j.QName r0, r2;
        java.lang.Object $r1;
        java.lang.String $r3, $r4;
        boolean $z0;

        r0 := @this: org.dom4j.QName;

        $r1 := @parameter0: java.lang.Object;

        if r0 != $r1 goto label1;

        return 1;

     label1:
        $z0 = $r1 instanceof org.dom4j.QName;

        if $z0 == 0 goto label2;

        r2 = (org.dom4j.QName) $r1;

        $i0 = virtualinvoke r0.<org.dom4j.QName: int hashCode()>();

        $i1 = virtualinvoke r2.<org.dom4j.QName: int hashCode()>();

        if $i0 != $i1 goto label2;

        $r3 = virtualinvoke r0.<org.dom4j.QName: java.lang.String getName()>();

        $r4 = virtualinvoke r2.<org.dom4j.QName: java.lang.String getName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        $r3 = virtualinvoke r0.<org.dom4j.QName: java.lang.String getNamespaceURI()>();

        $r4 = virtualinvoke r2.<org.dom4j.QName: java.lang.String getNamespaceURI()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label3;

     label2:
        return 0;

     label3:
        return 1;
    }

    public org.dom4j.DocumentFactory getDocumentFactory()
    {
        org.dom4j.QName r0;
        org.dom4j.DocumentFactory r1;

        r0 := @this: org.dom4j.QName;

        r1 = r0.<org.dom4j.QName: org.dom4j.DocumentFactory documentFactory>;

        return r1;
    }

    public java.lang.String getName()
    {
        org.dom4j.QName r0;
        java.lang.String r1;

        r0 := @this: org.dom4j.QName;

        r1 = r0.<org.dom4j.QName: java.lang.String name>;

        return r1;
    }

    public org.dom4j.Namespace getNamespace()
    {
        org.dom4j.QName r0;
        org.dom4j.Namespace r1;

        r0 := @this: org.dom4j.QName;

        r1 = r0.<org.dom4j.QName: org.dom4j.Namespace namespace>;

        return r1;
    }

    public java.lang.String getNamespacePrefix()
    {
        org.dom4j.QName r0;
        java.lang.String $r1;
        org.dom4j.Namespace $r2;

        r0 := @this: org.dom4j.QName;

        $r2 = r0.<org.dom4j.QName: org.dom4j.Namespace namespace>;

        if $r2 != null goto label1;

        return "";

     label1:
        $r2 = r0.<org.dom4j.QName: org.dom4j.Namespace namespace>;

        $r1 = virtualinvoke $r2.<org.dom4j.Namespace: java.lang.String getPrefix()>();

        return $r1;
    }

    public java.lang.String getNamespaceURI()
    {
        org.dom4j.QName r0;
        java.lang.String $r1;
        org.dom4j.Namespace $r2;

        r0 := @this: org.dom4j.QName;

        $r2 = r0.<org.dom4j.QName: org.dom4j.Namespace namespace>;

        if $r2 != null goto label1;

        return "";

     label1:
        $r2 = r0.<org.dom4j.QName: org.dom4j.Namespace namespace>;

        $r1 = virtualinvoke $r2.<org.dom4j.Namespace: java.lang.String getURI()>();

        return $r1;
    }

    public java.lang.String getQualifiedName()
    {
        java.lang.StringBuffer $r2;
        int $i0;
        org.dom4j.QName r0;
        java.lang.String $r1;

        r0 := @this: org.dom4j.QName;

        $r1 = r0.<org.dom4j.QName: java.lang.String qualifiedName>;

        if $r1 != null goto label1;

        $r1 = virtualinvoke r0.<org.dom4j.QName: java.lang.String getNamespacePrefix()>();

        if $r1 == null goto label2;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 <= 0 goto label2;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $r1 = r0.<org.dom4j.QName: java.lang.String name>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        r0.<org.dom4j.QName: java.lang.String qualifiedName> = $r1;

     label1:
        $r1 = r0.<org.dom4j.QName: java.lang.String qualifiedName>;

        return $r1;

     label2:
        $r1 = r0.<org.dom4j.QName: java.lang.String name>;

        r0.<org.dom4j.QName: java.lang.String qualifiedName> = $r1;

        goto label1;
    }

    public int hashCode()
    {
        int $i0, $i1;
        org.dom4j.QName r0;
        java.lang.String $r1;

        r0 := @this: org.dom4j.QName;

        $i0 = r0.<org.dom4j.QName: int hashCode>;

        if $i0 != 0 goto label1;

        $r1 = virtualinvoke r0.<org.dom4j.QName: java.lang.String getName()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        $r1 = virtualinvoke r0.<org.dom4j.QName: java.lang.String getNamespaceURI()>();

        $i1 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        $i0 = $i0 ^ $i1;

        r0.<org.dom4j.QName: int hashCode> = $i0;

        $i0 = r0.<org.dom4j.QName: int hashCode>;

        if $i0 != 0 goto label1;

        r0.<org.dom4j.QName: int hashCode> = 47806;

     label1:
        $i0 = r0.<org.dom4j.QName: int hashCode>;

        return $i0;
    }

    public void setDocumentFactory(org.dom4j.DocumentFactory)
    {
        org.dom4j.QName r0;
        org.dom4j.DocumentFactory $r1;

        r0 := @this: org.dom4j.QName;

        $r1 := @parameter0: org.dom4j.DocumentFactory;

        r0.<org.dom4j.QName: org.dom4j.DocumentFactory documentFactory> = $r1;

        return;
    }

    public java.lang.String toString()
    {
        org.dom4j.Namespace $r3;
        java.lang.StringBuffer $r1;
        org.dom4j.QName r0;
        java.lang.String $r2;

        r0 := @this: org.dom4j.QName;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = specialinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" [name: ");

        $r2 = virtualinvoke r0.<org.dom4j.QName: java.lang.String getName()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" namespace: \"");

        $r3 = virtualinvoke r0.<org.dom4j.QName: org.dom4j.Namespace getNamespace()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"]");

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }
}
