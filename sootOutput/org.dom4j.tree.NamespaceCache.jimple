public class org.dom4j.tree.NamespaceCache extends java.lang.Object
{
    private static final java.lang.String CONCURRENTREADERHASHMAP_CLASS;
    protected static java.util.Map cache;
    protected static java.util.Map noPrefixCache;

    static void <clinit>()
    {
        java.lang.Throwable r0, r1;
        java.lang.Float $r8;
        java.lang.Object[] $r6;
        org.dom4j.tree.ConcurrentReaderHashMap $r11;
        java.lang.Class[] $r3;
        java.lang.reflect.Constructor $r5;
        java.lang.Integer $r7;
        java.util.Map $r10;
        java.lang.Class $r2, $r4;
        java.lang.Object $r9;

        <org.dom4j.tree.NamespaceCache: java.lang.String CONCURRENTREADERHASHMAP_CLASS> = "EDU.oswego.cs.dl.util.concurrent.ConcurrentReaderHashMap";

     label1:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("java.util.concurrent.ConcurrentHashMap");

        $r3 = newarray (java.lang.Class)[3];

        $r4 = <java.lang.Integer: java.lang.Class TYPE>;

        $r3[0] = $r4;

        $r4 = <java.lang.Float: java.lang.Class TYPE>;

        $r3[1] = $r4;

        $r4 = <java.lang.Integer: java.lang.Class TYPE>;

        $r3[2] = $r4;

        $r5 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r3);

        $r6 = newarray (java.lang.Object)[3];

        $r7 = new java.lang.Integer;

        specialinvoke $r7.<java.lang.Integer: void <init>(int)>(11);

        $r6[0] = $r7;

        $r8 = new java.lang.Float;

        specialinvoke $r8.<java.lang.Float: void <init>(float)>(0.75F);

        $r6[1] = $r8;

        $r7 = new java.lang.Integer;

        specialinvoke $r7.<java.lang.Integer: void <init>(int)>(1);

        $r6[2] = $r7;

        $r9 = virtualinvoke $r5.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r6);

        $r10 = (java.util.Map) $r9;

        <org.dom4j.tree.NamespaceCache: java.util.Map cache> = $r10;

        $r6 = newarray (java.lang.Object)[3];

        $r7 = new java.lang.Integer;

        specialinvoke $r7.<java.lang.Integer: void <init>(int)>(11);

        $r6[0] = $r7;

        $r8 = new java.lang.Float;

        specialinvoke $r8.<java.lang.Float: void <init>(float)>(0.75F);

        $r6[1] = $r8;

        $r7 = new java.lang.Integer;

        specialinvoke $r7.<java.lang.Integer: void <init>(int)>(1);

        $r6[2] = $r7;

        $r9 = virtualinvoke $r5.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r6);

        $r10 = (java.util.Map) $r9;

        <org.dom4j.tree.NamespaceCache: java.util.Map noPrefixCache> = $r10;

     label2:
        return;

     label3:
        r0 := @caughtexception;

     label4:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("EDU.oswego.cs.dl.util.concurrent.ConcurrentReaderHashMap");

        $r9 = virtualinvoke $r2.<java.lang.Class: java.lang.Object newInstance()>();

        $r10 = (java.util.Map) $r9;

        <org.dom4j.tree.NamespaceCache: java.util.Map cache> = $r10;

        $r9 = virtualinvoke $r2.<java.lang.Class: java.lang.Object newInstance()>();

        $r10 = (java.util.Map) $r9;

        <org.dom4j.tree.NamespaceCache: java.util.Map noPrefixCache> = $r10;

     label5:
        return;

     label6:
        r1 := @caughtexception;

        $r11 = new org.dom4j.tree.ConcurrentReaderHashMap;

        specialinvoke $r11.<org.dom4j.tree.ConcurrentReaderHashMap: void <init>()>();

        <org.dom4j.tree.NamespaceCache: java.util.Map cache> = $r11;

        $r11 = new org.dom4j.tree.ConcurrentReaderHashMap;

        specialinvoke $r11.<org.dom4j.tree.ConcurrentReaderHashMap: void <init>()>();

        <org.dom4j.tree.NamespaceCache: java.util.Map noPrefixCache> = $r11;

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    public void <init>()
    {
        org.dom4j.tree.NamespaceCache r0;

        r0 := @this: org.dom4j.tree.NamespaceCache;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    protected org.dom4j.Namespace createNamespace(java.lang.String, java.lang.String)
    {
        org.dom4j.Namespace $r3;
        org.dom4j.tree.NamespaceCache r0;
        java.lang.String $r1, $r2;

        r0 := @this: org.dom4j.tree.NamespaceCache;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = new org.dom4j.Namespace;

        specialinvoke $r3.<org.dom4j.Namespace: void <init>(java.lang.String,java.lang.String)>($r1, $r2);

        return $r3;
    }

    public org.dom4j.Namespace get(java.lang.String)
    {
        java.lang.Throwable $r8;
        org.dom4j.Namespace r5, $r7;
        org.dom4j.tree.NamespaceCache r0;
        java.util.Map $r2, $r6;
        java.lang.Object $r4;
        java.lang.String $r1;
        java.lang.ref.WeakReference $r3;

        r0 := @this: org.dom4j.tree.NamespaceCache;

        $r1 := @parameter0: java.lang.String;

        $r2 = <org.dom4j.tree.NamespaceCache: java.util.Map noPrefixCache>;

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r3 = (java.lang.ref.WeakReference) $r4;

        r5 = null;

        if $r3 == null goto label1;

        $r4 = virtualinvoke $r3.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r5 = (org.dom4j.Namespace) $r4;

     label1:
        if r5 != null goto label8;

        $r2 = <org.dom4j.tree.NamespaceCache: java.util.Map noPrefixCache>;

        entermonitor $r2;

     label2:
        $r6 = <org.dom4j.tree.NamespaceCache: java.util.Map noPrefixCache>;

        $r4 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r3 = (java.lang.ref.WeakReference) $r4;

        if $r3 == null goto label3;

        $r4 = virtualinvoke $r3.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r5 = (org.dom4j.Namespace) $r4;

     label3:
        if r5 != null goto label4;

        $r7 = virtualinvoke r0.<org.dom4j.tree.NamespaceCache: org.dom4j.Namespace createNamespace(java.lang.String,java.lang.String)>("", $r1);

        r5 = $r7;

        $r6 = <org.dom4j.tree.NamespaceCache: java.util.Map noPrefixCache>;

        $r3 = new java.lang.ref.WeakReference;

        specialinvoke $r3.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>($r7);

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r3);

     label4:
        exitmonitor $r2;

     label5:
        return r5;

     label6:
        $r8 := @caughtexception;

        exitmonitor $r2;

     label7:
        throw $r8;

     label8:
        return r5;

        catch java.lang.Throwable from label2 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public org.dom4j.Namespace get(java.lang.String, java.lang.String)
    {
        java.lang.Throwable $r8;
        org.dom4j.Namespace r6, $r7;
        org.dom4j.tree.NamespaceCache r0;
        java.util.Map $r3;
        java.lang.Object $r4;
        java.lang.String $r1, $r2;
        java.lang.ref.WeakReference r5;

        r0 := @this: org.dom4j.tree.NamespaceCache;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.dom4j.tree.NamespaceCache: java.util.Map getURICache(java.lang.String)>($r2);

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r5 = (java.lang.ref.WeakReference) $r4;

        r6 = null;

        if r5 == null goto label1;

        $r4 = virtualinvoke r5.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r6 = (org.dom4j.Namespace) $r4;

     label1:
        if r6 != null goto label8;

        entermonitor $r3;

     label2:
        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r5 = (java.lang.ref.WeakReference) $r4;

        if r5 == null goto label3;

        $r4 = virtualinvoke r5.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r6 = (org.dom4j.Namespace) $r4;

     label3:
        if r6 != null goto label4;

        $r7 = virtualinvoke r0.<org.dom4j.tree.NamespaceCache: org.dom4j.Namespace createNamespace(java.lang.String,java.lang.String)>($r1, $r2);

        r6 = $r7;

        r5 = new java.lang.ref.WeakReference;

        specialinvoke r5.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>($r7);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, r5);

     label4:
        exitmonitor $r3;

     label5:
        return r6;

     label6:
        $r8 := @caughtexception;

        exitmonitor $r3;

     label7:
        throw $r8;

     label8:
        return r6;

        catch java.lang.Throwable from label2 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    protected java.util.Map getURICache(java.lang.String)
    {
        java.lang.Throwable $r6;
        org.dom4j.tree.ConcurrentReaderHashMap r2, $r7;
        org.dom4j.tree.NamespaceCache r0;
        java.util.Map $r3, $r5;
        java.lang.Object $r4;
        java.lang.String $r1;

        r0 := @this: org.dom4j.tree.NamespaceCache;

        $r1 := @parameter0: java.lang.String;

        $r3 = <org.dom4j.tree.NamespaceCache: java.util.Map cache>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r3 = (java.util.Map) $r4;

        if $r3 != null goto label10;

        $r3 = <org.dom4j.tree.NamespaceCache: java.util.Map cache>;

        entermonitor $r3;

     label01:
        $r5 = <org.dom4j.tree.NamespaceCache: java.util.Map cache>;

        $r4 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r5 = (java.util.Map) $r4;

        $r4 = $r5;

        if $r5 != null goto label04;

        $r7 = new org.dom4j.tree.ConcurrentReaderHashMap;

        r2 = $r7;

        specialinvoke $r7.<org.dom4j.tree.ConcurrentReaderHashMap: void <init>()>();

     label02:
        $r5 = <org.dom4j.tree.NamespaceCache: java.util.Map cache>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, r2);

     label03:
        $r4 = r2;

     label04:
        exitmonitor $r3;

        $r5 = (java.util.Map) $r4;

     label05:
        return $r5;

     label06:
        $r6 := @caughtexception;

     label07:
        exitmonitor $r3;

     label08:
        throw $r6;

     label09:
        $r6 := @caughtexception;

        goto label07;

     label10:
        return $r3;

        catch java.lang.Throwable from label01 to label02 with label06;
        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label08 with label06;
    }
}
