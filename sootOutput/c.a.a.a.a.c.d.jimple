final class c.a.a.a.a.c.d extends java.util.concurrent.FutureTask
{
    final c.a.a.a.a.c.a a;

    void <init>(c.a.a.a.a.c.a, java.util.concurrent.Callable)
    {
        c.a.a.a.a.c.a $r1;
        java.util.concurrent.Callable $r2;
        c.a.a.a.a.c.d r0;

        r0 := @this: c.a.a.a.a.c.d;

        $r1 := @parameter0: c.a.a.a.a.c.a;

        $r2 := @parameter1: java.util.concurrent.Callable;

        r0.<c.a.a.a.a.c.d: c.a.a.a.a.c.a a> = $r1;

        specialinvoke r0.<java.util.concurrent.FutureTask: void <init>(java.util.concurrent.Callable)>($r2);

        return;
    }

    protected final void done()
    {
        java.lang.Throwable $r3, $r4, $r5;
        c.a.a.a.a.c.d r0;
        c.a.a.a.a.c.a $r1;
        java.lang.RuntimeException $r6;
        java.util.concurrent.ExecutionException $r7;
        java.lang.Object $r2;

        r0 := @this: c.a.a.a.a.c.d;

        $r1 = r0.<c.a.a.a.a.c.d: c.a.a.a.a.c.a a>;

     label1:
        $r2 = virtualinvoke r0.<c.a.a.a.a.c.d: java.lang.Object get()>();

        staticinvoke <c.a.a.a.a.c.a: void b(c.a.a.a.a.c.a,java.lang.Object)>($r1, $r2);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.Throwable)>("AsyncTask", $r3);

        return;

     label4:
        $r4 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        $r7 = (java.util.concurrent.ExecutionException) $r4;

        $r3 = virtualinvoke $r7.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("An error occured while executing doInBackground()", $r3);

        throw $r6;

     label5:
        $r5 := @caughtexception;

        $r1 = r0.<c.a.a.a.a.c.d: c.a.a.a.a.c.a a>;

        staticinvoke <c.a.a.a.a.c.a: void b(c.a.a.a.a.c.a,java.lang.Object)>($r1, null);

        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
        catch java.util.concurrent.ExecutionException from label1 to label2 with label4;
        catch java.util.concurrent.CancellationException from label1 to label2 with label5;
    }
}
