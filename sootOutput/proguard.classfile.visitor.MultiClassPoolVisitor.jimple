public class proguard.classfile.visitor.MultiClassPoolVisitor extends java.lang.Object implements proguard.classfile.visitor.ClassPoolVisitor
{
    private static final int ARRAY_SIZE_INCREMENT;
    private int classPoolVisitorCount;
    private proguard.classfile.visitor.ClassPoolVisitor[] classPoolVisitors;

    public void <init>()
    {
        proguard.classfile.visitor.MultiClassPoolVisitor r0;

        r0 := @this: proguard.classfile.visitor.MultiClassPoolVisitor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(proguard.classfile.visitor.ClassPoolVisitor[])
    {
        int $i0;
        proguard.classfile.visitor.MultiClassPoolVisitor r0;
        proguard.classfile.visitor.ClassPoolVisitor[] $r1;

        r0 := @this: proguard.classfile.visitor.MultiClassPoolVisitor;

        $r1 := @parameter0: proguard.classfile.visitor.ClassPoolVisitor[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<proguard.classfile.visitor.MultiClassPoolVisitor: proguard.classfile.visitor.ClassPoolVisitor[] classPoolVisitors> = $r1;

        $i0 = lengthof $r1;

        r0.<proguard.classfile.visitor.MultiClassPoolVisitor: int classPoolVisitorCount> = $i0;

        return;
    }

    private void ensureArraySize()
    {
        proguard.classfile.visitor.ClassPoolVisitor[] $r1, $r2;
        int $i0, $i1;
        proguard.classfile.visitor.MultiClassPoolVisitor r0;

        r0 := @this: proguard.classfile.visitor.MultiClassPoolVisitor;

        $r1 = r0.<proguard.classfile.visitor.MultiClassPoolVisitor: proguard.classfile.visitor.ClassPoolVisitor[] classPoolVisitors>;

        if $r1 != null goto label1;

        $r1 = newarray (proguard.classfile.visitor.ClassPoolVisitor)[5];

        r0.<proguard.classfile.visitor.MultiClassPoolVisitor: proguard.classfile.visitor.ClassPoolVisitor[] classPoolVisitors> = $r1;

        return;

     label1:
        $r1 = r0.<proguard.classfile.visitor.MultiClassPoolVisitor: proguard.classfile.visitor.ClassPoolVisitor[] classPoolVisitors>;

        $i0 = lengthof $r1;

        $i1 = r0.<proguard.classfile.visitor.MultiClassPoolVisitor: int classPoolVisitorCount>;

        if $i0 != $i1 goto label2;

        $i0 = r0.<proguard.classfile.visitor.MultiClassPoolVisitor: int classPoolVisitorCount>;

        $i0 = $i0 + 5;

        $r1 = newarray (proguard.classfile.visitor.ClassPoolVisitor)[$i0];

        $r2 = r0.<proguard.classfile.visitor.MultiClassPoolVisitor: proguard.classfile.visitor.ClassPoolVisitor[] classPoolVisitors>;

        $i0 = r0.<proguard.classfile.visitor.MultiClassPoolVisitor: int classPoolVisitorCount>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r1, 0, $i0);

        r0.<proguard.classfile.visitor.MultiClassPoolVisitor: proguard.classfile.visitor.ClassPoolVisitor[] classPoolVisitors> = $r1;

     label2:
        return;
    }

    public void addClassPoolVisitor(proguard.classfile.visitor.ClassPoolVisitor)
    {
        proguard.classfile.visitor.ClassPoolVisitor $r1;
        proguard.classfile.visitor.ClassPoolVisitor[] $r2;
        int $i0, $i1;
        proguard.classfile.visitor.MultiClassPoolVisitor r0;

        r0 := @this: proguard.classfile.visitor.MultiClassPoolVisitor;

        $r1 := @parameter0: proguard.classfile.visitor.ClassPoolVisitor;

        specialinvoke r0.<proguard.classfile.visitor.MultiClassPoolVisitor: void ensureArraySize()>();

        $r2 = r0.<proguard.classfile.visitor.MultiClassPoolVisitor: proguard.classfile.visitor.ClassPoolVisitor[] classPoolVisitors>;

        $i0 = r0.<proguard.classfile.visitor.MultiClassPoolVisitor: int classPoolVisitorCount>;

        $i1 = $i0 + 1;

        r0.<proguard.classfile.visitor.MultiClassPoolVisitor: int classPoolVisitorCount> = $i1;

        $r2[$i0] = $r1;

        return;
    }

    public void visitClassPool(proguard.classfile.ClassPool)
    {
        proguard.classfile.ClassPool $r1;
        proguard.classfile.visitor.ClassPoolVisitor $r3;
        proguard.classfile.visitor.ClassPoolVisitor[] $r2;
        int $i0, $i1;
        proguard.classfile.visitor.MultiClassPoolVisitor r0;

        r0 := @this: proguard.classfile.visitor.MultiClassPoolVisitor;

        $r1 := @parameter0: proguard.classfile.ClassPool;

        $i0 = 0;

     label1:
        $i1 = r0.<proguard.classfile.visitor.MultiClassPoolVisitor: int classPoolVisitorCount>;

        if $i0 >= $i1 goto label2;

        $r2 = r0.<proguard.classfile.visitor.MultiClassPoolVisitor: proguard.classfile.visitor.ClassPoolVisitor[] classPoolVisitors>;

        $r3 = $r2[$i0];

        interfaceinvoke $r3.<proguard.classfile.visitor.ClassPoolVisitor: void visitClassPool(proguard.classfile.ClassPool)>($r1);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    public static void <clinit>()
    {
        <proguard.classfile.visitor.MultiClassPoolVisitor: int ARRAY_SIZE_INCREMENT> = 5;

        return;
    }
}
