abstract class proguard.evaluation.value.SpecificDoubleValue extends proguard.evaluation.value.DoubleValue
{

    void <init>()
    {
        proguard.evaluation.value.SpecificDoubleValue r0;

        r0 := @this: proguard.evaluation.value.SpecificDoubleValue;

        specialinvoke r0.<proguard.evaluation.value.DoubleValue: void <init>()>();

        return;
    }

    public proguard.evaluation.value.DoubleValue add(proguard.evaluation.value.DoubleValue)
    {
        proguard.evaluation.value.DoubleValue $r1;
        proguard.evaluation.value.SpecificDoubleValue r0;

        r0 := @this: proguard.evaluation.value.SpecificDoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.DoubleValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.DoubleValue: proguard.evaluation.value.DoubleValue add(proguard.evaluation.value.SpecificDoubleValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.DoubleValue add(proguard.evaluation.value.SpecificDoubleValue)
    {
        proguard.evaluation.value.SpecificDoubleValue r0, $r1;
        proguard.evaluation.value.CompositeDoubleValue $r2;

        r0 := @this: proguard.evaluation.value.SpecificDoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificDoubleValue;

        $r2 = new proguard.evaluation.value.CompositeDoubleValue;

        specialinvoke $r2.<proguard.evaluation.value.CompositeDoubleValue: void <init>(proguard.evaluation.value.DoubleValue,byte,proguard.evaluation.value.DoubleValue)>(r0, 43, $r1);

        return $r2;
    }

    public proguard.evaluation.value.IntegerValue compare(proguard.evaluation.value.DoubleValue)
    {
        proguard.evaluation.value.DoubleValue $r1;
        proguard.evaluation.value.IntegerValue $r2;
        proguard.evaluation.value.SpecificDoubleValue r0;

        r0 := @this: proguard.evaluation.value.SpecificDoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.DoubleValue;

        $r2 = virtualinvoke $r1.<proguard.evaluation.value.DoubleValue: proguard.evaluation.value.IntegerValue compareReverse(proguard.evaluation.value.SpecificDoubleValue)>(r0);

        return $r2;
    }

    public proguard.evaluation.value.IntegerValue compare(proguard.evaluation.value.SpecificDoubleValue)
    {
        proguard.evaluation.value.IntegerValue r2;
        proguard.evaluation.value.SpecificDoubleValue r0, $r1;

        r0 := @this: proguard.evaluation.value.SpecificDoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificDoubleValue;

        r2 = <proguard.evaluation.value.ValueFactory: proguard.evaluation.value.IntegerValue INTEGER_VALUE>;

        return r2;
    }

    public proguard.evaluation.value.FloatValue convertToFloat()
    {
        proguard.evaluation.value.SpecificDoubleValue r0;
        proguard.evaluation.value.ConvertedFloatValue $r1;

        r0 := @this: proguard.evaluation.value.SpecificDoubleValue;

        $r1 = new proguard.evaluation.value.ConvertedFloatValue;

        specialinvoke $r1.<proguard.evaluation.value.ConvertedFloatValue: void <init>(proguard.evaluation.value.Value)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.IntegerValue convertToInteger()
    {
        proguard.evaluation.value.SpecificDoubleValue r0;
        proguard.evaluation.value.ConvertedIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.SpecificDoubleValue;

        $r1 = new proguard.evaluation.value.ConvertedIntegerValue;

        specialinvoke $r1.<proguard.evaluation.value.ConvertedIntegerValue: void <init>(proguard.evaluation.value.Value)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.LongValue convertToLong()
    {
        proguard.evaluation.value.SpecificDoubleValue r0;
        proguard.evaluation.value.ConvertedLongValue $r1;

        r0 := @this: proguard.evaluation.value.SpecificDoubleValue;

        $r1 = new proguard.evaluation.value.ConvertedLongValue;

        specialinvoke $r1.<proguard.evaluation.value.ConvertedLongValue: void <init>(proguard.evaluation.value.Value)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.DoubleValue divide(proguard.evaluation.value.DoubleValue)
    {
        proguard.evaluation.value.DoubleValue $r1;
        proguard.evaluation.value.SpecificDoubleValue r0;

        r0 := @this: proguard.evaluation.value.SpecificDoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.DoubleValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.DoubleValue: proguard.evaluation.value.DoubleValue divideOf(proguard.evaluation.value.SpecificDoubleValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.DoubleValue divide(proguard.evaluation.value.SpecificDoubleValue)
    {
        proguard.evaluation.value.SpecificDoubleValue r0, $r1;
        proguard.evaluation.value.CompositeDoubleValue $r2;

        r0 := @this: proguard.evaluation.value.SpecificDoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificDoubleValue;

        $r2 = new proguard.evaluation.value.CompositeDoubleValue;

        specialinvoke $r2.<proguard.evaluation.value.CompositeDoubleValue: void <init>(proguard.evaluation.value.DoubleValue,byte,proguard.evaluation.value.DoubleValue)>(r0, 47, $r1);

        return $r2;
    }

    public proguard.evaluation.value.DoubleValue divideOf(proguard.evaluation.value.DoubleValue)
    {
        proguard.evaluation.value.DoubleValue $r1;
        proguard.evaluation.value.SpecificDoubleValue r0;

        r0 := @this: proguard.evaluation.value.SpecificDoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.DoubleValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.DoubleValue: proguard.evaluation.value.DoubleValue divide(proguard.evaluation.value.SpecificDoubleValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.DoubleValue divideOf(proguard.evaluation.value.SpecificDoubleValue)
    {
        proguard.evaluation.value.SpecificDoubleValue r0, $r1;
        proguard.evaluation.value.CompositeDoubleValue $r2;

        r0 := @this: proguard.evaluation.value.SpecificDoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificDoubleValue;

        $r2 = new proguard.evaluation.value.CompositeDoubleValue;

        specialinvoke $r2.<proguard.evaluation.value.CompositeDoubleValue: void <init>(proguard.evaluation.value.DoubleValue,byte,proguard.evaluation.value.DoubleValue)>($r1, 47, r0);

        return $r2;
    }

    public boolean equals(java.lang.Object)
    {
        proguard.evaluation.value.SpecificDoubleValue r0;
        java.lang.Object $r1;
        java.lang.Class $r2, $r3;

        r0 := @this: proguard.evaluation.value.SpecificDoubleValue;

        $r1 := @parameter0: java.lang.Object;

        if $r1 == null goto label1;

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 != $r3 goto label1;

        return 1;

     label1:
        return 0;
    }

    public proguard.evaluation.value.DoubleValue generalize(proguard.evaluation.value.DoubleValue)
    {
        proguard.evaluation.value.DoubleValue $r1;
        proguard.evaluation.value.SpecificDoubleValue r0;

        r0 := @this: proguard.evaluation.value.SpecificDoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.DoubleValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.DoubleValue: proguard.evaluation.value.DoubleValue generalize(proguard.evaluation.value.SpecificDoubleValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.DoubleValue generalize(proguard.evaluation.value.SpecificDoubleValue)
    {
        proguard.evaluation.value.DoubleValue r2;
        proguard.evaluation.value.SpecificDoubleValue r0, $r1;
        boolean $z0;

        r0 := @this: proguard.evaluation.value.SpecificDoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificDoubleValue;

        $z0 = virtualinvoke r0.<proguard.evaluation.value.SpecificDoubleValue: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        return r0;

     label1:
        r2 = <proguard.evaluation.value.ValueFactory: proguard.evaluation.value.DoubleValue DOUBLE_VALUE>;

        return r2;
    }

    public int hashCode()
    {
        int $i0;
        proguard.evaluation.value.SpecificDoubleValue r0;
        java.lang.Class $r1;

        r0 := @this: proguard.evaluation.value.SpecificDoubleValue;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    public boolean isSpecific()
    {
        proguard.evaluation.value.SpecificDoubleValue r0;

        r0 := @this: proguard.evaluation.value.SpecificDoubleValue;

        return 1;
    }

    public proguard.evaluation.value.DoubleValue multiply(proguard.evaluation.value.DoubleValue)
    {
        proguard.evaluation.value.DoubleValue $r1;
        proguard.evaluation.value.SpecificDoubleValue r0;

        r0 := @this: proguard.evaluation.value.SpecificDoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.DoubleValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.DoubleValue: proguard.evaluation.value.DoubleValue multiply(proguard.evaluation.value.SpecificDoubleValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.DoubleValue multiply(proguard.evaluation.value.SpecificDoubleValue)
    {
        proguard.evaluation.value.SpecificDoubleValue r0, $r1;
        proguard.evaluation.value.CompositeDoubleValue $r2;

        r0 := @this: proguard.evaluation.value.SpecificDoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificDoubleValue;

        $r2 = new proguard.evaluation.value.CompositeDoubleValue;

        specialinvoke $r2.<proguard.evaluation.value.CompositeDoubleValue: void <init>(proguard.evaluation.value.DoubleValue,byte,proguard.evaluation.value.DoubleValue)>(r0, 42, $r1);

        return $r2;
    }

    public proguard.evaluation.value.DoubleValue negate()
    {
        proguard.evaluation.value.SpecificDoubleValue r0;
        proguard.evaluation.value.NegatedDoubleValue $r1;

        r0 := @this: proguard.evaluation.value.SpecificDoubleValue;

        $r1 = new proguard.evaluation.value.NegatedDoubleValue;

        specialinvoke $r1.<proguard.evaluation.value.NegatedDoubleValue: void <init>(proguard.evaluation.value.DoubleValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.DoubleValue remainder(proguard.evaluation.value.DoubleValue)
    {
        proguard.evaluation.value.DoubleValue $r1;
        proguard.evaluation.value.SpecificDoubleValue r0;

        r0 := @this: proguard.evaluation.value.SpecificDoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.DoubleValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.DoubleValue: proguard.evaluation.value.DoubleValue remainderOf(proguard.evaluation.value.SpecificDoubleValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.DoubleValue remainder(proguard.evaluation.value.SpecificDoubleValue)
    {
        proguard.evaluation.value.SpecificDoubleValue r0, $r1;
        proguard.evaluation.value.CompositeDoubleValue $r2;

        r0 := @this: proguard.evaluation.value.SpecificDoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificDoubleValue;

        $r2 = new proguard.evaluation.value.CompositeDoubleValue;

        specialinvoke $r2.<proguard.evaluation.value.CompositeDoubleValue: void <init>(proguard.evaluation.value.DoubleValue,byte,proguard.evaluation.value.DoubleValue)>(r0, 37, $r1);

        return $r2;
    }

    public proguard.evaluation.value.DoubleValue remainderOf(proguard.evaluation.value.DoubleValue)
    {
        proguard.evaluation.value.DoubleValue $r1;
        proguard.evaluation.value.SpecificDoubleValue r0;

        r0 := @this: proguard.evaluation.value.SpecificDoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.DoubleValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.DoubleValue: proguard.evaluation.value.DoubleValue remainder(proguard.evaluation.value.SpecificDoubleValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.DoubleValue remainderOf(proguard.evaluation.value.SpecificDoubleValue)
    {
        proguard.evaluation.value.SpecificDoubleValue r0, $r1;
        proguard.evaluation.value.CompositeDoubleValue $r2;

        r0 := @this: proguard.evaluation.value.SpecificDoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificDoubleValue;

        $r2 = new proguard.evaluation.value.CompositeDoubleValue;

        specialinvoke $r2.<proguard.evaluation.value.CompositeDoubleValue: void <init>(proguard.evaluation.value.DoubleValue,byte,proguard.evaluation.value.DoubleValue)>($r1, 37, r0);

        return $r2;
    }

    public proguard.evaluation.value.DoubleValue subtract(proguard.evaluation.value.DoubleValue)
    {
        proguard.evaluation.value.DoubleValue $r1;
        proguard.evaluation.value.SpecificDoubleValue r0;

        r0 := @this: proguard.evaluation.value.SpecificDoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.DoubleValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.DoubleValue: proguard.evaluation.value.DoubleValue subtractFrom(proguard.evaluation.value.SpecificDoubleValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.DoubleValue subtract(proguard.evaluation.value.SpecificDoubleValue)
    {
        proguard.evaluation.value.SpecificDoubleValue r0, $r1;
        proguard.evaluation.value.CompositeDoubleValue $r2;

        r0 := @this: proguard.evaluation.value.SpecificDoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificDoubleValue;

        $r2 = new proguard.evaluation.value.CompositeDoubleValue;

        specialinvoke $r2.<proguard.evaluation.value.CompositeDoubleValue: void <init>(proguard.evaluation.value.DoubleValue,byte,proguard.evaluation.value.DoubleValue)>(r0, 45, $r1);

        return $r2;
    }

    public proguard.evaluation.value.DoubleValue subtractFrom(proguard.evaluation.value.DoubleValue)
    {
        proguard.evaluation.value.DoubleValue $r1;
        proguard.evaluation.value.SpecificDoubleValue r0;

        r0 := @this: proguard.evaluation.value.SpecificDoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.DoubleValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.DoubleValue: proguard.evaluation.value.DoubleValue subtract(proguard.evaluation.value.SpecificDoubleValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.DoubleValue subtractFrom(proguard.evaluation.value.SpecificDoubleValue)
    {
        proguard.evaluation.value.SpecificDoubleValue r0, $r1;
        proguard.evaluation.value.CompositeDoubleValue $r2;

        r0 := @this: proguard.evaluation.value.SpecificDoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificDoubleValue;

        $r2 = new proguard.evaluation.value.CompositeDoubleValue;

        specialinvoke $r2.<proguard.evaluation.value.CompositeDoubleValue: void <init>(proguard.evaluation.value.DoubleValue,byte,proguard.evaluation.value.DoubleValue)>($r1, 45, r0);

        return $r2;
    }
}
