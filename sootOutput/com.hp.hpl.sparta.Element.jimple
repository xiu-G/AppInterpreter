public class com.hp.hpl.sparta.Element extends com.hp.hpl.sparta.Node
{
    private static final boolean DEBUG;
    private java.util.Vector attributeNames_;
    private java.util.Hashtable attributes_;
    private com.hp.hpl.sparta.Node firstChild_;
    private com.hp.hpl.sparta.Node lastChild_;
    private java.lang.String tagName_;

    void <init>()
    {
        com.hp.hpl.sparta.Element r0;

        r0 := @this: com.hp.hpl.sparta.Element;

        specialinvoke r0.<com.hp.hpl.sparta.Node: void <init>()>();

        r0.<com.hp.hpl.sparta.Element: com.hp.hpl.sparta.Node firstChild_> = null;

        r0.<com.hp.hpl.sparta.Element: com.hp.hpl.sparta.Node lastChild_> = null;

        r0.<com.hp.hpl.sparta.Element: java.util.Hashtable attributes_> = null;

        r0.<com.hp.hpl.sparta.Element: java.util.Vector attributeNames_> = null;

        r0.<com.hp.hpl.sparta.Element: java.lang.String tagName_> = null;

        return;
    }

    public void <init>(java.lang.String)
    {
        com.hp.hpl.sparta.Element r0;
        java.lang.String $r1;

        r0 := @this: com.hp.hpl.sparta.Element;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.hp.hpl.sparta.Node: void <init>()>();

        r0.<com.hp.hpl.sparta.Element: com.hp.hpl.sparta.Node firstChild_> = null;

        r0.<com.hp.hpl.sparta.Element: com.hp.hpl.sparta.Node lastChild_> = null;

        r0.<com.hp.hpl.sparta.Element: java.util.Hashtable attributes_> = null;

        r0.<com.hp.hpl.sparta.Element: java.util.Vector attributeNames_> = null;

        r0.<com.hp.hpl.sparta.Element: java.lang.String tagName_> = null;

        $r1 = staticinvoke <com.hp.hpl.sparta.Sparta: java.lang.String intern(java.lang.String)>($r1);

        r0.<com.hp.hpl.sparta.Element: java.lang.String tagName_> = $r1;

        return;
    }

    private void checkInvariant()
    {
        com.hp.hpl.sparta.Element r0;

        r0 := @this: com.hp.hpl.sparta.Element;

        return;
    }

    private boolean removeChildNoChecking(com.hp.hpl.sparta.Node)
    {
        com.hp.hpl.sparta.Element r0;
        com.hp.hpl.sparta.Node $r1, $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.Element;

        $r1 := @parameter0: com.hp.hpl.sparta.Node;

        $r2 = r0.<com.hp.hpl.sparta.Element: com.hp.hpl.sparta.Node firstChild_>;

     label1:
        if $r2 != null goto label2;

        return 0;

     label2:
        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label5;

        $r1 = r0.<com.hp.hpl.sparta.Element: com.hp.hpl.sparta.Node firstChild_>;

        if $r1 != $r2 goto label3;

        $r1 = virtualinvoke $r2.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node getNextSibling()>();

        r0.<com.hp.hpl.sparta.Element: com.hp.hpl.sparta.Node firstChild_> = $r1;

     label3:
        $r1 = r0.<com.hp.hpl.sparta.Element: com.hp.hpl.sparta.Node lastChild_>;

        if $r1 != $r2 goto label4;

        $r1 = virtualinvoke $r2.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node getPreviousSibling()>();

        r0.<com.hp.hpl.sparta.Element: com.hp.hpl.sparta.Node lastChild_> = $r1;

     label4:
        virtualinvoke $r2.<com.hp.hpl.sparta.Node: void removeFromLinkedList()>();

        virtualinvoke $r2.<com.hp.hpl.sparta.Node: void setParentNode(com.hp.hpl.sparta.Element)>(null);

        virtualinvoke $r2.<com.hp.hpl.sparta.Node: void setOwnerDocument(com.hp.hpl.sparta.Document)>(null);

        return 1;

     label5:
        $r2 = virtualinvoke $r2.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node getNextSibling()>();

        goto label1;
    }

    private void replaceChild_(com.hp.hpl.sparta.Node, com.hp.hpl.sparta.Node) throws com.hp.hpl.sparta.DOMException
    {
        com.hp.hpl.sparta.Element r0;
        com.hp.hpl.sparta.Node $r1, $r2, $r3;
        com.hp.hpl.sparta.DOMException $r4;
        java.lang.StringBuffer $r5;
        java.lang.String $r6;

        r0 := @this: com.hp.hpl.sparta.Element;

        $r1 := @parameter0: com.hp.hpl.sparta.Node;

        $r2 := @parameter1: com.hp.hpl.sparta.Node;

        $r3 = r0.<com.hp.hpl.sparta.Element: com.hp.hpl.sparta.Node firstChild_>;

     label1:
        if $r3 != null goto label2;

        $r4 = new com.hp.hpl.sparta.DOMException;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot find ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r2);

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" in ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r4.<com.hp.hpl.sparta.DOMException: void <init>(short,java.lang.String)>(8, $r6);

        throw $r4;

     label2:
        if $r3 != $r2 goto label5;

        $r3 = r0.<com.hp.hpl.sparta.Element: com.hp.hpl.sparta.Node firstChild_>;

        if $r3 != $r2 goto label3;

        r0.<com.hp.hpl.sparta.Element: com.hp.hpl.sparta.Node firstChild_> = $r1;

     label3:
        $r3 = r0.<com.hp.hpl.sparta.Element: com.hp.hpl.sparta.Node lastChild_>;

        if $r3 != $r2 goto label4;

        r0.<com.hp.hpl.sparta.Element: com.hp.hpl.sparta.Node lastChild_> = $r1;

     label4:
        virtualinvoke $r2.<com.hp.hpl.sparta.Node: void replaceInLinkedList(com.hp.hpl.sparta.Node)>($r1);

        virtualinvoke $r1.<com.hp.hpl.sparta.Node: void setParentNode(com.hp.hpl.sparta.Element)>(r0);

        virtualinvoke $r2.<com.hp.hpl.sparta.Node: void setParentNode(com.hp.hpl.sparta.Element)>(null);

        return;

     label5:
        $r3 = virtualinvoke $r3.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node getNextSibling()>();

        goto label1;
    }

    private com.hp.hpl.sparta.XPathVisitor visitor(java.lang.String, boolean) throws com.hp.hpl.sparta.xpath.XPathException
    {
        com.hp.hpl.sparta.xpath.XPathException $r2;
        com.hp.hpl.sparta.XPathVisitor $r5;
        com.hp.hpl.sparta.Element r0;
        com.hp.hpl.sparta.xpath.XPath $r3;
        java.lang.StringBuffer $r4;
        java.lang.String $r1;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.sparta.Element;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $r3 = staticinvoke <com.hp.hpl.sparta.xpath.XPath: com.hp.hpl.sparta.xpath.XPath get(java.lang.String)>($r1);

        $z1 = virtualinvoke $r3.<com.hp.hpl.sparta.xpath.XPath: boolean isStringValue()>();

        if $z1 == $z0 goto label3;

        if $z0 == 0 goto label2;

        $r1 = "evaluates to element not string";

     label1:
        $r2 = new com.hp.hpl.sparta.xpath.XPathException;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r3);

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\" evaluates to ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<com.hp.hpl.sparta.xpath.XPathException: void <init>(com.hp.hpl.sparta.xpath.XPath,java.lang.String)>($r3, $r1);

        throw $r2;

     label2:
        $r1 = "evaluates to string not element";

        goto label1;

     label3:
        $r5 = new com.hp.hpl.sparta.XPathVisitor;

        specialinvoke $r5.<com.hp.hpl.sparta.XPathVisitor: void <init>(com.hp.hpl.sparta.Element,com.hp.hpl.sparta.xpath.XPath)>(r0, $r3);

        return $r5;
    }

    public void appendChild(com.hp.hpl.sparta.Node)
    {
        com.hp.hpl.sparta.Element r0;
        com.hp.hpl.sparta.Node $r1;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.Element;

        $r1 := @parameter0: com.hp.hpl.sparta.Node;

        $z0 = virtualinvoke r0.<com.hp.hpl.sparta.Element: boolean canHaveAsDescendent(com.hp.hpl.sparta.Node)>($r1);

        if $z0 != 0 goto label1;

        $r2 = virtualinvoke $r1.<com.hp.hpl.sparta.Node: java.lang.Object clone()>();

        $r1 = (com.hp.hpl.sparta.Element) $r2;

     label1:
        virtualinvoke r0.<com.hp.hpl.sparta.Element: void appendChildNoChecking(com.hp.hpl.sparta.Node)>($r1);

        virtualinvoke r0.<com.hp.hpl.sparta.Node: void notifyObservers()>();

        return;
    }

    void appendChildNoChecking(com.hp.hpl.sparta.Node)
    {
        com.hp.hpl.sparta.Element r0, $r2;
        com.hp.hpl.sparta.Node $r1, $r3;
        com.hp.hpl.sparta.Document $r4;

        r0 := @this: com.hp.hpl.sparta.Element;

        $r1 := @parameter0: com.hp.hpl.sparta.Node;

        $r2 = virtualinvoke $r1.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Element getParentNode()>();

        if $r2 == null goto label1;

        specialinvoke $r2.<com.hp.hpl.sparta.Element: boolean removeChildNoChecking(com.hp.hpl.sparta.Node)>($r1);

     label1:
        $r3 = r0.<com.hp.hpl.sparta.Element: com.hp.hpl.sparta.Node lastChild_>;

        virtualinvoke $r1.<com.hp.hpl.sparta.Node: void insertAtEndOfLinkedList(com.hp.hpl.sparta.Node)>($r3);

        $r3 = r0.<com.hp.hpl.sparta.Element: com.hp.hpl.sparta.Node firstChild_>;

        if $r3 != null goto label2;

        r0.<com.hp.hpl.sparta.Element: com.hp.hpl.sparta.Node firstChild_> = $r1;

     label2:
        virtualinvoke $r1.<com.hp.hpl.sparta.Node: void setParentNode(com.hp.hpl.sparta.Element)>(r0);

        r0.<com.hp.hpl.sparta.Element: com.hp.hpl.sparta.Node lastChild_> = $r1;

        $r4 = virtualinvoke r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Document getOwnerDocument()>();

        virtualinvoke $r1.<com.hp.hpl.sparta.Node: void setOwnerDocument(com.hp.hpl.sparta.Document)>($r4);

        return;
    }

    boolean canHaveAsDescendent(com.hp.hpl.sparta.Node)
    {
        com.hp.hpl.sparta.Element r0;
        com.hp.hpl.sparta.Node $r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.Element;

        $r1 := @parameter0: com.hp.hpl.sparta.Node;

        if $r1 != r0 goto label1;

        return 0;

     label1:
        r0 = virtualinvoke r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Element getParentNode()>();

        if r0 != null goto label2;

        return 1;

     label2:
        $z0 = virtualinvoke r0.<com.hp.hpl.sparta.Element: boolean canHaveAsDescendent(com.hp.hpl.sparta.Node)>($r1);

        return $z0;
    }

    public java.lang.Object clone()
    {
        com.hp.hpl.sparta.Element r0;

        r0 := @this: com.hp.hpl.sparta.Element;

        r0 = virtualinvoke r0.<com.hp.hpl.sparta.Element: com.hp.hpl.sparta.Element cloneElement(boolean)>(1);

        return r0;
    }

    public com.hp.hpl.sparta.Element cloneElement(boolean)
    {
        com.hp.hpl.sparta.Node $r5, $r9;
        java.util.Enumeration $r4;
        com.hp.hpl.sparta.Element r0, $r1;
        java.util.Vector $r3;
        java.lang.Object $r6;
        java.lang.String $r2, $r8;
        java.util.Hashtable $r7;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.sparta.Element;

        $z0 := @parameter0: boolean;

        $r1 = new com.hp.hpl.sparta.Element;

        $r2 = r0.<com.hp.hpl.sparta.Element: java.lang.String tagName_>;

        specialinvoke $r1.<com.hp.hpl.sparta.Element: void <init>(java.lang.String)>($r2);

        $r3 = r0.<com.hp.hpl.sparta.Element: java.util.Vector attributeNames_>;

        if $r3 == null goto label2;

        $r3 = r0.<com.hp.hpl.sparta.Element: java.util.Vector attributeNames_>;

        $r4 = virtualinvoke $r3.<java.util.Vector: java.util.Enumeration elements()>();

     label1:
        $z1 = interfaceinvoke $r4.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z1 != 0 goto label4;

     label2:
        $r5 = r0.<com.hp.hpl.sparta.Element: com.hp.hpl.sparta.Node firstChild_>;

     label3:
        if $r5 != null goto label5;

        return $r1;

     label4:
        $r6 = interfaceinvoke $r4.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r2 = (java.lang.String) $r6;

        $r7 = r0.<com.hp.hpl.sparta.Element: java.util.Hashtable attributes_>;

        $r6 = virtualinvoke $r7.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r2);

        $r8 = (java.lang.String) $r6;

        virtualinvoke $r1.<com.hp.hpl.sparta.Element: void setAttribute(java.lang.String,java.lang.String)>($r2, $r8);

        goto label1;

     label5:
        $r6 = virtualinvoke $r5.<com.hp.hpl.sparta.Node: java.lang.Object clone()>();

        $r9 = (com.hp.hpl.sparta.Node) $r6;

        virtualinvoke $r1.<com.hp.hpl.sparta.Element: void appendChild(com.hp.hpl.sparta.Node)>($r9);

        $r5 = virtualinvoke $r5.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node getNextSibling()>();

        goto label3;
    }

    public com.hp.hpl.sparta.Element cloneShallow()
    {
        com.hp.hpl.sparta.Element r0;

        r0 := @this: com.hp.hpl.sparta.Element;

        r0 = virtualinvoke r0.<com.hp.hpl.sparta.Element: com.hp.hpl.sparta.Element cloneElement(boolean)>(0);

        return r0;
    }

    protected int computeHashCode()
    {
        com.hp.hpl.sparta.Node $r4;
        java.util.Enumeration $r3;
        com.hp.hpl.sparta.Element r0;
        int $i0, $i1;
        java.lang.Object $r5;
        java.lang.String $r1;
        java.util.Hashtable $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.Element;

        $r1 = r0.<com.hp.hpl.sparta.Element: java.lang.String tagName_>;

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        $r2 = r0.<com.hp.hpl.sparta.Element: java.util.Hashtable attributes_>;

        if $r2 == null goto label6;

        $r2 = r0.<com.hp.hpl.sparta.Element: java.util.Hashtable attributes_>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.util.Enumeration keys()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 != 0 goto label4;

     label2:
        $r4 = r0.<com.hp.hpl.sparta.Element: com.hp.hpl.sparta.Node firstChild_>;

     label3:
        if $r4 != null goto label5;

        return $i0;

     label4:
        $r5 = interfaceinvoke $r3.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r1 = (java.lang.String) $r5;

        $i0 = $i0 * 31;

        $i1 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        $i0 = $i0 + $i1;

        $r2 = r0.<com.hp.hpl.sparta.Element: java.util.Hashtable attributes_>;

        $r5 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r1);

        $r1 = (java.lang.String) $r5;

        $i0 = $i0 * 31;

        $i1 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        $i0 = $i1 + $i0;

        goto label1;

     label5:
        $i0 = $i0 * 31;

        $i1 = virtualinvoke $r4.<com.hp.hpl.sparta.Node: int hashCode()>();

        $i0 = $i0 + $i1;

        $r4 = virtualinvoke $r4.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node getNextSibling()>();

        goto label3;

     label6:
        goto label2;
    }

    public boolean equals(java.lang.Object)
    {
        com.hp.hpl.sparta.Node $r7, $r8;
        java.util.Enumeration $r6;
        com.hp.hpl.sparta.Element r0, $r3;
        int $i0, $i1;
        java.lang.Object $r2;
        java.lang.String $r4, $r5;
        java.util.Hashtable $r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.Element;

        $r2 := @parameter0: java.lang.Object;

        if r0 != $r2 goto label01;

        return 1;

     label01:
        $z0 = $r2 instanceof com.hp.hpl.sparta.Element;

        if $z0 == 0 goto label11;

        $r3 = (com.hp.hpl.sparta.Element) $r2;

        $r4 = r0.<com.hp.hpl.sparta.Element: java.lang.String tagName_>;

        $r5 = $r3.<com.hp.hpl.sparta.Element: java.lang.String tagName_>;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label11;

        $r1 = r0.<com.hp.hpl.sparta.Element: java.util.Hashtable attributes_>;

        if $r1 != null goto label07;

        $i0 = 0;

     label02:
        $r1 = $r3.<com.hp.hpl.sparta.Element: java.util.Hashtable attributes_>;

        if $r1 != null goto label08;

        $i1 = 0;

     label03:
        if $i0 != $i1 goto label11;

        $r1 = r0.<com.hp.hpl.sparta.Element: java.util.Hashtable attributes_>;

        if $r1 == null goto label05;

        $r1 = r0.<com.hp.hpl.sparta.Element: java.util.Hashtable attributes_>;

        $r6 = virtualinvoke $r1.<java.util.Hashtable: java.util.Enumeration keys()>();

     label04:
        $z0 = interfaceinvoke $r6.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 != 0 goto label09;

     label05:
        $r7 = r0.<com.hp.hpl.sparta.Element: com.hp.hpl.sparta.Node firstChild_>;

        $r8 = $r3.<com.hp.hpl.sparta.Element: com.hp.hpl.sparta.Node firstChild_>;

     label06:
        if $r7 != null goto label10;

        return 1;

     label07:
        $r1 = r0.<com.hp.hpl.sparta.Element: java.util.Hashtable attributes_>;

        $i0 = virtualinvoke $r1.<java.util.Hashtable: int size()>();

        goto label02;

     label08:
        $r1 = $r3.<com.hp.hpl.sparta.Element: java.util.Hashtable attributes_>;

        $i1 = virtualinvoke $r1.<java.util.Hashtable: int size()>();

        goto label03;

     label09:
        $r2 = interfaceinvoke $r6.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r5 = (java.lang.String) $r2;

        $r1 = r0.<com.hp.hpl.sparta.Element: java.util.Hashtable attributes_>;

        $r2 = virtualinvoke $r1.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r5);

        $r4 = (java.lang.String) $r2;

        $r1 = $r3.<com.hp.hpl.sparta.Element: java.util.Hashtable attributes_>;

        $r2 = virtualinvoke $r1.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r5);

        $r5 = (java.lang.String) $r2;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label04;

        return 0;

     label10:
        $z0 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r8);

        if $z0 == 0 goto label11;

        $r7 = virtualinvoke $r7.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node getNextSibling()>();

        $r8 = virtualinvoke $r8.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node getNextSibling()>();

        goto label06;

     label11:
        return 0;
    }

    public java.lang.String getAttribute(java.lang.String)
    {
        com.hp.hpl.sparta.Element r0;
        java.lang.Object $r2;
        java.lang.String $r1;
        java.util.Hashtable $r3;

        r0 := @this: com.hp.hpl.sparta.Element;

        $r1 := @parameter0: java.lang.String;

        $r3 = r0.<com.hp.hpl.sparta.Element: java.util.Hashtable attributes_>;

        if $r3 != null goto label1;

        return null;

     label1:
        $r3 = r0.<com.hp.hpl.sparta.Element: java.util.Hashtable attributes_>;

        $r2 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r1);

        $r1 = (java.lang.String) $r2;

        return $r1;
    }

    public java.util.Enumeration getAttributeNames()
    {
        com.hp.hpl.sparta.Element r0;
        java.util.Vector $r2;
        java.util.Enumeration $r1;

        r0 := @this: com.hp.hpl.sparta.Element;

        $r2 = r0.<com.hp.hpl.sparta.Element: java.util.Vector attributeNames_>;

        if $r2 != null goto label1;

        $r1 = <com.hp.hpl.sparta.Document: java.util.Enumeration EMPTY>;

        return $r1;

     label1:
        $r2 = r0.<com.hp.hpl.sparta.Element: java.util.Vector attributeNames_>;

        $r1 = virtualinvoke $r2.<java.util.Vector: java.util.Enumeration elements()>();

        return $r1;
    }

    public com.hp.hpl.sparta.Node getFirstChild()
    {
        com.hp.hpl.sparta.Element r0;
        com.hp.hpl.sparta.Node r1;

        r0 := @this: com.hp.hpl.sparta.Element;

        r1 = r0.<com.hp.hpl.sparta.Element: com.hp.hpl.sparta.Node firstChild_>;

        return r1;
    }

    public com.hp.hpl.sparta.Node getLastChild()
    {
        com.hp.hpl.sparta.Element r0;
        com.hp.hpl.sparta.Node r1;

        r0 := @this: com.hp.hpl.sparta.Element;

        r1 = r0.<com.hp.hpl.sparta.Element: com.hp.hpl.sparta.Node lastChild_>;

        return r1;
    }

    public java.lang.String getTagName()
    {
        com.hp.hpl.sparta.Element r0;
        java.lang.String r1;

        r0 := @this: com.hp.hpl.sparta.Element;

        r1 = r0.<com.hp.hpl.sparta.Element: java.lang.String tagName_>;

        return r1;
    }

    public void removeAttribute(java.lang.String)
    {
        com.hp.hpl.sparta.Element r0;
        java.util.Vector $r3;
        java.lang.String $r1;
        java.util.Hashtable $r2;

        r0 := @this: com.hp.hpl.sparta.Element;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.hp.hpl.sparta.Element: java.util.Hashtable attributes_>;

        if $r2 != null goto label1;

        return;

     label1:
        $r2 = r0.<com.hp.hpl.sparta.Element: java.util.Hashtable attributes_>;

        virtualinvoke $r2.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>($r1);

        $r3 = r0.<com.hp.hpl.sparta.Element: java.util.Vector attributeNames_>;

        virtualinvoke $r3.<java.util.Vector: boolean removeElement(java.lang.Object)>($r1);

        virtualinvoke r0.<com.hp.hpl.sparta.Node: void notifyObservers()>();

        return;
    }

    public void removeChild(com.hp.hpl.sparta.Node) throws com.hp.hpl.sparta.DOMException
    {
        com.hp.hpl.sparta.Element r0;
        com.hp.hpl.sparta.Node $r1;
        com.hp.hpl.sparta.DOMException $r2;
        java.lang.StringBuffer $r3;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.Element;

        $r1 := @parameter0: com.hp.hpl.sparta.Node;

        $z0 = specialinvoke r0.<com.hp.hpl.sparta.Element: boolean removeChildNoChecking(com.hp.hpl.sparta.Node)>($r1);

        if $z0 != 0 goto label1;

        $r2 = new com.hp.hpl.sparta.DOMException;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot find ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" in ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<com.hp.hpl.sparta.DOMException: void <init>(short,java.lang.String)>(8, $r4);

        throw $r2;

     label1:
        virtualinvoke r0.<com.hp.hpl.sparta.Node: void notifyObservers()>();

        return;
    }

    public void replaceChild(com.hp.hpl.sparta.Element, com.hp.hpl.sparta.Node) throws com.hp.hpl.sparta.DOMException
    {
        com.hp.hpl.sparta.Element r0, $r1;
        com.hp.hpl.sparta.Node $r2;

        r0 := @this: com.hp.hpl.sparta.Element;

        $r1 := @parameter0: com.hp.hpl.sparta.Element;

        $r2 := @parameter1: com.hp.hpl.sparta.Node;

        specialinvoke r0.<com.hp.hpl.sparta.Element: void replaceChild_(com.hp.hpl.sparta.Node,com.hp.hpl.sparta.Node)>($r1, $r2);

        virtualinvoke r0.<com.hp.hpl.sparta.Node: void notifyObservers()>();

        return;
    }

    public void replaceChild(com.hp.hpl.sparta.Text, com.hp.hpl.sparta.Node) throws com.hp.hpl.sparta.DOMException
    {
        com.hp.hpl.sparta.Element r0;
        com.hp.hpl.sparta.Node $r2;
        com.hp.hpl.sparta.Text $r1;

        r0 := @this: com.hp.hpl.sparta.Element;

        $r1 := @parameter0: com.hp.hpl.sparta.Text;

        $r2 := @parameter1: com.hp.hpl.sparta.Node;

        specialinvoke r0.<com.hp.hpl.sparta.Element: void replaceChild_(com.hp.hpl.sparta.Node,com.hp.hpl.sparta.Node)>($r1, $r2);

        virtualinvoke r0.<com.hp.hpl.sparta.Node: void notifyObservers()>();

        return;
    }

    public void setAttribute(java.lang.String, java.lang.String)
    {
        com.hp.hpl.sparta.Element r0;
        java.util.Vector $r5;
        java.lang.Object $r3;
        java.lang.String $r1, $r2;
        java.util.Hashtable $r4;

        r0 := @this: com.hp.hpl.sparta.Element;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r4 = r0.<com.hp.hpl.sparta.Element: java.util.Hashtable attributes_>;

        if $r4 != null goto label1;

        $r4 = new java.util.Hashtable;

        specialinvoke $r4.<java.util.Hashtable: void <init>()>();

        r0.<com.hp.hpl.sparta.Element: java.util.Hashtable attributes_> = $r4;

        $r5 = new java.util.Vector;

        specialinvoke $r5.<java.util.Vector: void <init>()>();

        r0.<com.hp.hpl.sparta.Element: java.util.Vector attributeNames_> = $r5;

     label1:
        $r4 = r0.<com.hp.hpl.sparta.Element: java.util.Hashtable attributes_>;

        $r3 = virtualinvoke $r4.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r1);

        if $r3 != null goto label2;

        $r5 = r0.<com.hp.hpl.sparta.Element: java.util.Vector attributeNames_>;

        virtualinvoke $r5.<java.util.Vector: void addElement(java.lang.Object)>($r1);

     label2:
        $r4 = r0.<com.hp.hpl.sparta.Element: java.util.Hashtable attributes_>;

        virtualinvoke $r4.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        virtualinvoke r0.<com.hp.hpl.sparta.Node: void notifyObservers()>();

        return;
    }

    public void setTagName(java.lang.String)
    {
        com.hp.hpl.sparta.Element r0;
        java.lang.String $r1;

        r0 := @this: com.hp.hpl.sparta.Element;

        $r1 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.hp.hpl.sparta.Sparta: java.lang.String intern(java.lang.String)>($r1);

        r0.<com.hp.hpl.sparta.Element: java.lang.String tagName_> = $r1;

        virtualinvoke r0.<com.hp.hpl.sparta.Node: void notifyObservers()>();

        return;
    }

    void toString(java.io.Writer) throws java.io.IOException
    {
        java.io.Writer $r1;
        com.hp.hpl.sparta.Element r0;
        com.hp.hpl.sparta.Node $r2;

        r0 := @this: com.hp.hpl.sparta.Element;

        $r1 := @parameter0: java.io.Writer;

        $r2 = r0.<com.hp.hpl.sparta.Element: com.hp.hpl.sparta.Node firstChild_>;

     label1:
        if $r2 != null goto label2;

        return;

     label2:
        virtualinvoke $r2.<com.hp.hpl.sparta.Node: void toString(java.io.Writer)>($r1);

        $r2 = virtualinvoke $r2.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node getNextSibling()>();

        goto label1;
    }

    public void toXml(java.io.Writer) throws java.io.IOException
    {
        com.hp.hpl.sparta.Node $r6;
        java.util.Enumeration $r5;
        com.hp.hpl.sparta.Element r0;
        java.util.Vector $r4;
        java.lang.StringBuffer $r2;
        java.io.Writer $r1;
        java.lang.Object $r7;
        java.lang.String $r3, $r8;
        java.util.Hashtable $r9;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.Element;

        $r1 := @parameter0: java.io.Writer;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("<");

        $r3 = r0.<com.hp.hpl.sparta.Element: java.lang.String tagName_>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>($r3);

        $r4 = r0.<com.hp.hpl.sparta.Element: java.util.Vector attributeNames_>;

        if $r4 == null goto label2;

        $r4 = r0.<com.hp.hpl.sparta.Element: java.util.Vector attributeNames_>;

        $r5 = virtualinvoke $r4.<java.util.Vector: java.util.Enumeration elements()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 != 0 goto label3;

     label2:
        $r6 = r0.<com.hp.hpl.sparta.Element: com.hp.hpl.sparta.Node firstChild_>;

        if $r6 != null goto label4;

        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>("/>");

        return;

     label3:
        $r7 = interfaceinvoke $r5.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r8 = (java.lang.String) $r7;

        $r9 = r0.<com.hp.hpl.sparta.Element: java.util.Hashtable attributes_>;

        $r7 = virtualinvoke $r9.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r8);

        $r3 = (java.lang.String) $r7;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("=\"");

        $r8 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>($r8);

        staticinvoke <com.hp.hpl.sparta.Node: void htmlEncode(java.io.Writer,java.lang.String)>($r1, $r3);

        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>("\"");

        goto label1;

     label4:
        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>(">");

        $r6 = r0.<com.hp.hpl.sparta.Element: com.hp.hpl.sparta.Node firstChild_>;

     label5:
        if $r6 != null goto label6;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("</");

        $r3 = r0.<com.hp.hpl.sparta.Element: java.lang.String tagName_>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(">");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>($r3);

        return;

     label6:
        virtualinvoke $r6.<com.hp.hpl.sparta.Node: void toXml(java.io.Writer)>($r1);

        $r6 = virtualinvoke $r6.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node getNextSibling()>();

        goto label5;
    }

    public boolean xpathEnsure(java.lang.String) throws com.hp.hpl.sparta.ParseException
    {
        java.util.Enumeration $r4;
        com.hp.hpl.sparta.xpath.XPathException $r10;
        com.hp.hpl.sparta.ParseException $r11;
        com.hp.hpl.sparta.xpath.Step[] $r5;
        com.hp.hpl.sparta.Element r0, $r2;
        com.hp.hpl.sparta.xpath.XPath $r3;
        int $i0, $i1;
        java.lang.Object $r6;
        java.lang.String $r1, $r8, $r9;
        com.hp.hpl.sparta.xpath.Step $r7;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.Element;

        $r1 := @parameter0: java.lang.String;

     label01:
        $r2 = virtualinvoke r0.<com.hp.hpl.sparta.Element: com.hp.hpl.sparta.Element xpathSelectElement(java.lang.String)>($r1);

     label02:
        if $r2 == null goto label03;

        return 0;

     label03:
        $r3 = staticinvoke <com.hp.hpl.sparta.xpath.XPath: com.hp.hpl.sparta.xpath.XPath get(java.lang.String)>($r1);

        $r4 = virtualinvoke $r3.<com.hp.hpl.sparta.xpath.XPath: java.util.Enumeration getSteps()>();

     label04:
        $i0 = 0;

     label05:
        $z0 = interfaceinvoke $r4.<java.util.Enumeration: boolean hasMoreElements()>();

     label06:
        if $z0 != 0 goto label14;

        $i1 = -1;

        $i0 = $i0 + $i1;

        $r5 = newarray (com.hp.hpl.sparta.xpath.Step)[$i0];

     label07:
        $r4 = virtualinvoke $r3.<com.hp.hpl.sparta.xpath.XPath: java.util.Enumeration getSteps()>();

     label08:
        $i0 = 0;

     label09:
        $i1 = lengthof $r5;

        if $i0 < $i1 goto label16;

     label10:
        $r6 = interfaceinvoke $r4.<java.util.Enumeration: java.lang.Object nextElement()>();

     label11:
        $r7 = (com.hp.hpl.sparta.xpath.Step) $r6;

        $i0 = lengthof $r5;

        if $i0 != 0 goto label18;

        $r2 = r0;

     label12:
        r0 = virtualinvoke r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Element makeMatching(com.hp.hpl.sparta.Element,com.hp.hpl.sparta.xpath.Step,java.lang.String)>($r2, $r7, $r1);

        virtualinvoke $r2.<com.hp.hpl.sparta.Element: void appendChildNoChecking(com.hp.hpl.sparta.Node)>(r0);

     label13:
        return 1;

     label14:
        interfaceinvoke $r4.<java.util.Enumeration: java.lang.Object nextElement()>();

     label15:
        $i0 = $i0 + 1;

        goto label05;

     label16:
        $r6 = interfaceinvoke $r4.<java.util.Enumeration: java.lang.Object nextElement()>();

     label17:
        $r7 = (com.hp.hpl.sparta.xpath.Step) $r6;

        $r5[$i0] = $r7;

        $i0 = $i0 + 1;

        goto label09;

     label18:
        $z0 = virtualinvoke $r3.<com.hp.hpl.sparta.xpath.XPath: boolean isAbsolute()>();

        $r3 = staticinvoke <com.hp.hpl.sparta.xpath.XPath: com.hp.hpl.sparta.xpath.XPath get(boolean,com.hp.hpl.sparta.xpath.Step[])>($z0, $r5);

        $r8 = virtualinvoke $r3.<com.hp.hpl.sparta.xpath.XPath: java.lang.String toString()>();

        $r9 = virtualinvoke $r8.<java.lang.String: java.lang.String toString()>();

        virtualinvoke r0.<com.hp.hpl.sparta.Element: boolean xpathEnsure(java.lang.String)>($r9);

        $r2 = virtualinvoke r0.<com.hp.hpl.sparta.Element: com.hp.hpl.sparta.Element xpathSelectElement(java.lang.String)>($r8);

     label19:
        goto label12;

     label20:
        $r10 := @caughtexception;

        $r11 = new com.hp.hpl.sparta.ParseException;

        specialinvoke $r11.<com.hp.hpl.sparta.ParseException: void <init>(java.lang.String,java.lang.Throwable)>($r1, $r10);

        throw $r11;

        catch com.hp.hpl.sparta.xpath.XPathException from label01 to label02 with label20;
        catch com.hp.hpl.sparta.xpath.XPathException from label03 to label04 with label20;
        catch com.hp.hpl.sparta.xpath.XPathException from label05 to label06 with label20;
        catch com.hp.hpl.sparta.xpath.XPathException from label07 to label08 with label20;
        catch com.hp.hpl.sparta.xpath.XPathException from label10 to label11 with label20;
        catch com.hp.hpl.sparta.xpath.XPathException from label12 to label13 with label20;
        catch com.hp.hpl.sparta.xpath.XPathException from label14 to label15 with label20;
        catch com.hp.hpl.sparta.xpath.XPathException from label16 to label17 with label20;
        catch com.hp.hpl.sparta.xpath.XPathException from label18 to label19 with label20;
    }

    public com.hp.hpl.sparta.Element xpathSelectElement(java.lang.String) throws com.hp.hpl.sparta.ParseException
    {
        com.hp.hpl.sparta.Element r0;
        com.hp.hpl.sparta.xpath.XPathException $r4;
        com.hp.hpl.sparta.XPathVisitor $r3;
        com.hp.hpl.sparta.ParseException $r2;
        java.lang.String $r1;

        r0 := @this: com.hp.hpl.sparta.Element;

        $r1 := @parameter0: java.lang.String;

     label1:
        $r3 = specialinvoke r0.<com.hp.hpl.sparta.Element: com.hp.hpl.sparta.XPathVisitor visitor(java.lang.String,boolean)>($r1, 0);

        r0 = virtualinvoke $r3.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.Element getFirstResultElement()>();

     label2:
        return r0;

     label3:
        $r4 := @caughtexception;

        $r2 = new com.hp.hpl.sparta.ParseException;

        specialinvoke $r2.<com.hp.hpl.sparta.ParseException: void <init>(java.lang.String,java.lang.Throwable)>("XPath problem", $r4);

        throw $r2;

        catch com.hp.hpl.sparta.xpath.XPathException from label1 to label2 with label3;
    }

    public java.util.Enumeration xpathSelectElements(java.lang.String) throws com.hp.hpl.sparta.ParseException
    {
        com.hp.hpl.sparta.Element r0;
        java.util.Enumeration $r4;
        com.hp.hpl.sparta.xpath.XPathException $r5;
        com.hp.hpl.sparta.XPathVisitor $r3;
        com.hp.hpl.sparta.ParseException $r2;
        java.lang.String $r1;

        r0 := @this: com.hp.hpl.sparta.Element;

        $r1 := @parameter0: java.lang.String;

     label1:
        $r3 = specialinvoke r0.<com.hp.hpl.sparta.Element: com.hp.hpl.sparta.XPathVisitor visitor(java.lang.String,boolean)>($r1, 0);

        $r4 = virtualinvoke $r3.<com.hp.hpl.sparta.XPathVisitor: java.util.Enumeration getResultEnumeration()>();

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r2 = new com.hp.hpl.sparta.ParseException;

        specialinvoke $r2.<com.hp.hpl.sparta.ParseException: void <init>(java.lang.String,java.lang.Throwable)>("XPath problem", $r5);

        throw $r2;

        catch com.hp.hpl.sparta.xpath.XPathException from label1 to label2 with label3;
    }

    public java.lang.String xpathSelectString(java.lang.String) throws com.hp.hpl.sparta.ParseException
    {
        com.hp.hpl.sparta.Element r0;
        com.hp.hpl.sparta.xpath.XPathException $r4;
        com.hp.hpl.sparta.XPathVisitor $r3;
        com.hp.hpl.sparta.ParseException $r2;
        java.lang.String $r1;

        r0 := @this: com.hp.hpl.sparta.Element;

        $r1 := @parameter0: java.lang.String;

     label1:
        $r3 = specialinvoke r0.<com.hp.hpl.sparta.Element: com.hp.hpl.sparta.XPathVisitor visitor(java.lang.String,boolean)>($r1, 1);

        $r1 = virtualinvoke $r3.<com.hp.hpl.sparta.XPathVisitor: java.lang.String getFirstResultString()>();

     label2:
        return $r1;

     label3:
        $r4 := @caughtexception;

        $r2 = new com.hp.hpl.sparta.ParseException;

        specialinvoke $r2.<com.hp.hpl.sparta.ParseException: void <init>(java.lang.String,java.lang.Throwable)>("XPath problem", $r4);

        throw $r2;

        catch com.hp.hpl.sparta.xpath.XPathException from label1 to label2 with label3;
    }

    public java.util.Enumeration xpathSelectStrings(java.lang.String) throws com.hp.hpl.sparta.ParseException
    {
        com.hp.hpl.sparta.Element r0;
        java.util.Enumeration $r4;
        com.hp.hpl.sparta.xpath.XPathException $r5;
        com.hp.hpl.sparta.XPathVisitor $r3;
        com.hp.hpl.sparta.ParseException $r2;
        java.lang.String $r1;

        r0 := @this: com.hp.hpl.sparta.Element;

        $r1 := @parameter0: java.lang.String;

     label1:
        $r3 = specialinvoke r0.<com.hp.hpl.sparta.Element: com.hp.hpl.sparta.XPathVisitor visitor(java.lang.String,boolean)>($r1, 1);

        $r4 = virtualinvoke $r3.<com.hp.hpl.sparta.XPathVisitor: java.util.Enumeration getResultEnumeration()>();

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r2 = new com.hp.hpl.sparta.ParseException;

        specialinvoke $r2.<com.hp.hpl.sparta.ParseException: void <init>(java.lang.String,java.lang.Throwable)>("XPath problem", $r5);

        throw $r2;

        catch com.hp.hpl.sparta.xpath.XPathException from label1 to label2 with label3;
    }
}
