public class proguard.optimize.peephole.UnreachableExceptionRemover extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.attribute.visitor.AttributeVisitor, proguard.classfile.attribute.visitor.ExceptionInfoVisitor
{
    private final proguard.optimize.info.ExceptionInstructionChecker exceptionInstructionChecker;
    private final proguard.classfile.attribute.visitor.ExceptionInfoVisitor extraExceptionInfoVisitor;

    public void <init>()
    {
        proguard.optimize.peephole.UnreachableExceptionRemover r0;

        r0 := @this: proguard.optimize.peephole.UnreachableExceptionRemover;

        specialinvoke r0.<proguard.optimize.peephole.UnreachableExceptionRemover: void <init>(proguard.classfile.attribute.visitor.ExceptionInfoVisitor)>(null);

        return;
    }

    public void <init>(proguard.classfile.attribute.visitor.ExceptionInfoVisitor)
    {
        proguard.optimize.peephole.UnreachableExceptionRemover r0;
        proguard.optimize.info.ExceptionInstructionChecker $r2;
        proguard.classfile.attribute.visitor.ExceptionInfoVisitor $r1;

        r0 := @this: proguard.optimize.peephole.UnreachableExceptionRemover;

        $r1 := @parameter0: proguard.classfile.attribute.visitor.ExceptionInfoVisitor;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        $r2 = new proguard.optimize.info.ExceptionInstructionChecker;

        specialinvoke $r2.<proguard.optimize.info.ExceptionInstructionChecker: void <init>()>();

        r0.<proguard.optimize.peephole.UnreachableExceptionRemover: proguard.optimize.info.ExceptionInstructionChecker exceptionInstructionChecker> = $r2;

        r0.<proguard.optimize.peephole.UnreachableExceptionRemover: proguard.classfile.attribute.visitor.ExceptionInfoVisitor extraExceptionInfoVisitor> = $r1;

        return;
    }

    private boolean mayThrowExceptions(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, int)
    {
        byte[] $r4;
        proguard.optimize.info.ExceptionInstructionChecker $r6;
        proguard.optimize.peephole.UnreachableExceptionRemover r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.instruction.Instruction $r5;
        int $i0, $i1, $i2;
        proguard.classfile.Method $r2;
        boolean $z0;

        r0 := @this: proguard.optimize.peephole.UnreachableExceptionRemover;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $r4 = $r3.<proguard.classfile.attribute.CodeAttribute: byte[] code>;

     label1:
        if $i0 >= $i1 goto label3;

        $r5 = staticinvoke <proguard.classfile.instruction.InstructionFactory: proguard.classfile.instruction.Instruction create(byte[],int)>($r4, $i0);

        $r6 = r0.<proguard.optimize.peephole.UnreachableExceptionRemover: proguard.optimize.info.ExceptionInstructionChecker exceptionInstructionChecker>;

        $z0 = virtualinvoke $r6.<proguard.optimize.info.ExceptionInstructionChecker: boolean mayThrowExceptions(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction)>($r1, $r2, $r3, $i0, $r5);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $i2 = virtualinvoke $r5.<proguard.classfile.instruction.Instruction: int length(int)>($i0);

        $i0 = $i2 + $i0;

        goto label1;

     label3:
        return 0;
    }

    private int removeEmptyExceptions(proguard.classfile.attribute.ExceptionInfo[], int)
    {
        proguard.optimize.peephole.UnreachableExceptionRemover r0;
        proguard.classfile.attribute.ExceptionInfo[] $r1;
        int $i0, $i1, $i2, $i3, $i4;
        proguard.classfile.attribute.ExceptionInfo $r2;

        r0 := @this: proguard.optimize.peephole.UnreachableExceptionRemover;

        $r1 := @parameter0: proguard.classfile.attribute.ExceptionInfo[];

        $i0 := @parameter1: int;

        $i2 = 0;

        $i3 = 0;

     label1:
        if $i2 >= $i0 goto label3;

        $r2 = $r1[$i2];

        $i4 = $r2.<proguard.classfile.attribute.ExceptionInfo: int u2startPC>;

        $i1 = $r2.<proguard.classfile.attribute.ExceptionInfo: int u2endPC>;

        if $i4 >= $i1 goto label2;

        $r1[$i3] = $r2;

        $i3 = $i3 + 1;

     label2:
        $i2 = $i2 + 1;

        goto label1;

     label3:
        return $i3;
    }

    public void visitAnyAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.Attribute)
    {
        proguard.optimize.peephole.UnreachableExceptionRemover r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.Attribute $r2;

        r0 := @this: proguard.optimize.peephole.UnreachableExceptionRemover;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.Attribute;

        return;
    }

    public void visitCodeAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute)
    {
        proguard.optimize.peephole.UnreachableExceptionRemover r0;
        proguard.classfile.attribute.ExceptionInfo[] $r4;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.optimize.peephole.UnreachableExceptionRemover;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        virtualinvoke $r3.<proguard.classfile.attribute.CodeAttribute: void exceptionsAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.visitor.ExceptionInfoVisitor)>($r1, $r2, r0);

        $r4 = $r3.<proguard.classfile.attribute.CodeAttribute: proguard.classfile.attribute.ExceptionInfo[] exceptionTable>;

        $i0 = $r3.<proguard.classfile.attribute.CodeAttribute: int u2exceptionTableLength>;

        $i0 = specialinvoke r0.<proguard.optimize.peephole.UnreachableExceptionRemover: int removeEmptyExceptions(proguard.classfile.attribute.ExceptionInfo[],int)>($r4, $i0);

        $r3.<proguard.classfile.attribute.CodeAttribute: int u2exceptionTableLength> = $i0;

        return;
    }

    public void visitExceptionInfo(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.ExceptionInfo)
    {
        proguard.classfile.attribute.visitor.ExceptionInfoVisitor $r5;
        proguard.optimize.peephole.UnreachableExceptionRemover r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0, $i1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.ExceptionInfo $r4;
        boolean $z0;

        r0 := @this: proguard.optimize.peephole.UnreachableExceptionRemover;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.ExceptionInfo;

        $i0 = $r4.<proguard.classfile.attribute.ExceptionInfo: int u2startPC>;

        $i1 = $r4.<proguard.classfile.attribute.ExceptionInfo: int u2endPC>;

        $z0 = specialinvoke r0.<proguard.optimize.peephole.UnreachableExceptionRemover: boolean mayThrowExceptions(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,int)>($r1, $r2, $r3, $i0, $i1);

        if $z0 != 0 goto label1;

        $i0 = $r4.<proguard.classfile.attribute.ExceptionInfo: int u2startPC>;

        $r4.<proguard.classfile.attribute.ExceptionInfo: int u2endPC> = $i0;

        $r5 = r0.<proguard.optimize.peephole.UnreachableExceptionRemover: proguard.classfile.attribute.visitor.ExceptionInfoVisitor extraExceptionInfoVisitor>;

        if $r5 == null goto label1;

        $r5 = r0.<proguard.optimize.peephole.UnreachableExceptionRemover: proguard.classfile.attribute.visitor.ExceptionInfoVisitor extraExceptionInfoVisitor>;

        interfaceinvoke $r5.<proguard.classfile.attribute.visitor.ExceptionInfoVisitor: void visitExceptionInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.ExceptionInfo)>($r1, $r2, $r3, $r4);

     label1:
        return;
    }
}
