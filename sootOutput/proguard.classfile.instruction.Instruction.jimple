public abstract class proguard.classfile.instruction.Instruction extends java.lang.Object
{
    private static final boolean[] IS_CATEGORY2;
    private static final int[] STACK_POP_COUNTS;
    private static final int[] STACK_PUSH_COUNTS;
    public byte opcode;

    static void <clinit>()
    {
        boolean[] $r0;
        int[] $r1;

        $r0 = newarray (boolean)[202];

        $r0[0] = 0;

        $r0[1] = 0;

        $r0[2] = 0;

        $r0[3] = 0;

        $r0[4] = 0;

        $r0[5] = 0;

        $r0[6] = 0;

        $r0[7] = 0;

        $r0[8] = 0;

        $r0[9] = 1;

        $r0[10] = 1;

        $r0[11] = 0;

        $r0[12] = 0;

        $r0[13] = 0;

        $r0[14] = 1;

        $r0[15] = 1;

        $r0[16] = 0;

        $r0[17] = 0;

        $r0[18] = 0;

        $r0[19] = 0;

        $r0[20] = 1;

        $r0[21] = 0;

        $r0[22] = 1;

        $r0[23] = 0;

        $r0[24] = 1;

        $r0[25] = 0;

        $r0[26] = 0;

        $r0[27] = 0;

        $r0[28] = 0;

        $r0[29] = 0;

        $r0[30] = 1;

        $r0[31] = 1;

        $r0[32] = 1;

        $r0[33] = 1;

        $r0[34] = 0;

        $r0[35] = 0;

        $r0[36] = 0;

        $r0[37] = 0;

        $r0[38] = 1;

        $r0[39] = 1;

        $r0[40] = 1;

        $r0[41] = 1;

        $r0[42] = 0;

        $r0[43] = 0;

        $r0[44] = 0;

        $r0[45] = 0;

        $r0[46] = 0;

        $r0[47] = 1;

        $r0[48] = 0;

        $r0[49] = 1;

        $r0[50] = 0;

        $r0[51] = 0;

        $r0[52] = 0;

        $r0[53] = 0;

        $r0[54] = 0;

        $r0[55] = 1;

        $r0[56] = 0;

        $r0[57] = 1;

        $r0[58] = 0;

        $r0[59] = 0;

        $r0[60] = 0;

        $r0[61] = 0;

        $r0[62] = 0;

        $r0[63] = 1;

        $r0[64] = 1;

        $r0[65] = 1;

        $r0[66] = 1;

        $r0[67] = 0;

        $r0[68] = 0;

        $r0[69] = 0;

        $r0[70] = 0;

        $r0[71] = 1;

        $r0[72] = 1;

        $r0[73] = 1;

        $r0[74] = 1;

        $r0[75] = 0;

        $r0[76] = 0;

        $r0[77] = 0;

        $r0[78] = 0;

        $r0[79] = 0;

        $r0[80] = 1;

        $r0[81] = 0;

        $r0[82] = 1;

        $r0[83] = 0;

        $r0[84] = 0;

        $r0[85] = 0;

        $r0[86] = 0;

        $r0[87] = 0;

        $r0[88] = 1;

        $r0[89] = 0;

        $r0[90] = 0;

        $r0[91] = 0;

        $r0[92] = 1;

        $r0[93] = 1;

        $r0[94] = 1;

        $r0[95] = 0;

        $r0[96] = 0;

        $r0[97] = 1;

        $r0[98] = 0;

        $r0[99] = 1;

        $r0[100] = 0;

        $r0[101] = 1;

        $r0[102] = 0;

        $r0[103] = 1;

        $r0[104] = 0;

        $r0[105] = 1;

        $r0[106] = 0;

        $r0[107] = 1;

        $r0[108] = 0;

        $r0[109] = 1;

        $r0[110] = 0;

        $r0[111] = 1;

        $r0[112] = 0;

        $r0[113] = 1;

        $r0[114] = 0;

        $r0[115] = 1;

        $r0[116] = 0;

        $r0[117] = 1;

        $r0[118] = 0;

        $r0[119] = 1;

        $r0[120] = 0;

        $r0[121] = 1;

        $r0[122] = 0;

        $r0[123] = 1;

        $r0[124] = 0;

        $r0[125] = 1;

        $r0[126] = 0;

        $r0[127] = 1;

        $r0[128] = 0;

        $r0[129] = 1;

        $r0[130] = 0;

        $r0[131] = 1;

        $r0[132] = 0;

        $r0[133] = 0;

        $r0[134] = 0;

        $r0[135] = 0;

        $r0[136] = 1;

        $r0[137] = 1;

        $r0[138] = 1;

        $r0[139] = 0;

        $r0[140] = 0;

        $r0[141] = 0;

        $r0[142] = 1;

        $r0[143] = 1;

        $r0[144] = 1;

        $r0[145] = 0;

        $r0[146] = 0;

        $r0[147] = 0;

        $r0[148] = 1;

        $r0[149] = 0;

        $r0[150] = 0;

        $r0[151] = 1;

        $r0[152] = 1;

        $r0[153] = 0;

        $r0[154] = 0;

        $r0[155] = 0;

        $r0[156] = 0;

        $r0[157] = 0;

        $r0[158] = 0;

        $r0[159] = 0;

        $r0[160] = 0;

        $r0[161] = 0;

        $r0[162] = 0;

        $r0[163] = 0;

        $r0[164] = 0;

        $r0[165] = 0;

        $r0[166] = 0;

        $r0[167] = 0;

        $r0[168] = 0;

        $r0[169] = 0;

        $r0[170] = 0;

        $r0[171] = 0;

        $r0[172] = 0;

        $r0[173] = 1;

        $r0[174] = 0;

        $r0[175] = 1;

        $r0[176] = 0;

        $r0[177] = 0;

        $r0[178] = 0;

        $r0[179] = 0;

        $r0[180] = 0;

        $r0[181] = 0;

        $r0[182] = 0;

        $r0[183] = 0;

        $r0[184] = 0;

        $r0[185] = 0;

        $r0[186] = 0;

        $r0[187] = 0;

        $r0[188] = 0;

        $r0[189] = 0;

        $r0[190] = 0;

        $r0[191] = 0;

        $r0[192] = 0;

        $r0[193] = 0;

        $r0[194] = 0;

        $r0[195] = 0;

        $r0[196] = 0;

        $r0[197] = 0;

        $r0[198] = 0;

        $r0[199] = 0;

        $r0[200] = 0;

        $r0[201] = 0;

        <proguard.classfile.instruction.Instruction: boolean[] IS_CATEGORY2> = $r0;

        $r1 = newarray (int)[202];

        $r1[0] = 0;

        $r1[1] = 0;

        $r1[2] = 0;

        $r1[3] = 0;

        $r1[4] = 0;

        $r1[5] = 0;

        $r1[6] = 0;

        $r1[7] = 0;

        $r1[8] = 0;

        $r1[9] = 0;

        $r1[10] = 0;

        $r1[11] = 0;

        $r1[12] = 0;

        $r1[13] = 0;

        $r1[14] = 0;

        $r1[15] = 0;

        $r1[16] = 0;

        $r1[17] = 0;

        $r1[18] = 0;

        $r1[19] = 0;

        $r1[20] = 0;

        $r1[21] = 0;

        $r1[22] = 0;

        $r1[23] = 0;

        $r1[24] = 0;

        $r1[25] = 0;

        $r1[26] = 0;

        $r1[27] = 0;

        $r1[28] = 0;

        $r1[29] = 0;

        $r1[30] = 0;

        $r1[31] = 0;

        $r1[32] = 0;

        $r1[33] = 0;

        $r1[34] = 0;

        $r1[35] = 0;

        $r1[36] = 0;

        $r1[37] = 0;

        $r1[38] = 0;

        $r1[39] = 0;

        $r1[40] = 0;

        $r1[41] = 0;

        $r1[42] = 0;

        $r1[43] = 0;

        $r1[44] = 0;

        $r1[45] = 0;

        $r1[46] = 2;

        $r1[47] = 2;

        $r1[48] = 2;

        $r1[49] = 2;

        $r1[50] = 2;

        $r1[51] = 2;

        $r1[52] = 2;

        $r1[53] = 2;

        $r1[54] = 1;

        $r1[55] = 2;

        $r1[56] = 1;

        $r1[57] = 2;

        $r1[58] = 1;

        $r1[59] = 1;

        $r1[60] = 1;

        $r1[61] = 1;

        $r1[62] = 1;

        $r1[63] = 2;

        $r1[64] = 2;

        $r1[65] = 2;

        $r1[66] = 2;

        $r1[67] = 1;

        $r1[68] = 1;

        $r1[69] = 1;

        $r1[70] = 1;

        $r1[71] = 2;

        $r1[72] = 2;

        $r1[73] = 2;

        $r1[74] = 2;

        $r1[75] = 1;

        $r1[76] = 1;

        $r1[77] = 1;

        $r1[78] = 1;

        $r1[79] = 3;

        $r1[80] = 4;

        $r1[81] = 3;

        $r1[82] = 4;

        $r1[83] = 3;

        $r1[84] = 3;

        $r1[85] = 3;

        $r1[86] = 3;

        $r1[87] = 1;

        $r1[88] = 2;

        $r1[89] = 1;

        $r1[90] = 2;

        $r1[91] = 3;

        $r1[92] = 2;

        $r1[93] = 3;

        $r1[94] = 4;

        $r1[95] = 2;

        $r1[96] = 2;

        $r1[97] = 4;

        $r1[98] = 2;

        $r1[99] = 4;

        $r1[100] = 2;

        $r1[101] = 4;

        $r1[102] = 2;

        $r1[103] = 4;

        $r1[104] = 2;

        $r1[105] = 4;

        $r1[106] = 2;

        $r1[107] = 4;

        $r1[108] = 2;

        $r1[109] = 4;

        $r1[110] = 2;

        $r1[111] = 4;

        $r1[112] = 2;

        $r1[113] = 4;

        $r1[114] = 2;

        $r1[115] = 4;

        $r1[116] = 1;

        $r1[117] = 2;

        $r1[118] = 1;

        $r1[119] = 2;

        $r1[120] = 2;

        $r1[121] = 3;

        $r1[122] = 2;

        $r1[123] = 3;

        $r1[124] = 2;

        $r1[125] = 3;

        $r1[126] = 2;

        $r1[127] = 4;

        $r1[128] = 2;

        $r1[129] = 4;

        $r1[130] = 2;

        $r1[131] = 4;

        $r1[132] = 0;

        $r1[133] = 1;

        $r1[134] = 1;

        $r1[135] = 1;

        $r1[136] = 2;

        $r1[137] = 2;

        $r1[138] = 2;

        $r1[139] = 1;

        $r1[140] = 1;

        $r1[141] = 1;

        $r1[142] = 2;

        $r1[143] = 2;

        $r1[144] = 2;

        $r1[145] = 1;

        $r1[146] = 1;

        $r1[147] = 1;

        $r1[148] = 4;

        $r1[149] = 2;

        $r1[150] = 2;

        $r1[151] = 4;

        $r1[152] = 4;

        $r1[153] = 1;

        $r1[154] = 1;

        $r1[155] = 1;

        $r1[156] = 1;

        $r1[157] = 1;

        $r1[158] = 1;

        $r1[159] = 2;

        $r1[160] = 2;

        $r1[161] = 2;

        $r1[162] = 2;

        $r1[163] = 2;

        $r1[164] = 2;

        $r1[165] = 2;

        $r1[166] = 2;

        $r1[167] = 0;

        $r1[168] = 0;

        $r1[169] = 0;

        $r1[170] = 1;

        $r1[171] = 1;

        $r1[172] = 1;

        $r1[173] = 2;

        $r1[174] = 1;

        $r1[175] = 2;

        $r1[176] = 1;

        $r1[177] = 0;

        $r1[178] = 0;

        $r1[179] = 0;

        $r1[180] = 1;

        $r1[181] = 1;

        $r1[182] = 1;

        $r1[183] = 1;

        $r1[184] = 0;

        $r1[185] = 1;

        $r1[186] = 0;

        $r1[187] = 0;

        $r1[188] = 1;

        $r1[189] = 1;

        $r1[190] = 1;

        $r1[191] = 1;

        $r1[192] = 1;

        $r1[193] = 1;

        $r1[194] = 1;

        $r1[195] = 1;

        $r1[196] = 0;

        $r1[197] = 0;

        $r1[198] = 1;

        $r1[199] = 1;

        $r1[200] = 0;

        $r1[201] = 0;

        <proguard.classfile.instruction.Instruction: int[] STACK_POP_COUNTS> = $r1;

        $r1 = newarray (int)[202];

        $r1[0] = 0;

        $r1[1] = 1;

        $r1[2] = 1;

        $r1[3] = 1;

        $r1[4] = 1;

        $r1[5] = 1;

        $r1[6] = 1;

        $r1[7] = 1;

        $r1[8] = 1;

        $r1[9] = 2;

        $r1[10] = 2;

        $r1[11] = 1;

        $r1[12] = 1;

        $r1[13] = 1;

        $r1[14] = 2;

        $r1[15] = 2;

        $r1[16] = 1;

        $r1[17] = 1;

        $r1[18] = 1;

        $r1[19] = 1;

        $r1[20] = 2;

        $r1[21] = 1;

        $r1[22] = 2;

        $r1[23] = 1;

        $r1[24] = 2;

        $r1[25] = 1;

        $r1[26] = 1;

        $r1[27] = 1;

        $r1[28] = 1;

        $r1[29] = 1;

        $r1[30] = 2;

        $r1[31] = 2;

        $r1[32] = 2;

        $r1[33] = 2;

        $r1[34] = 1;

        $r1[35] = 1;

        $r1[36] = 1;

        $r1[37] = 1;

        $r1[38] = 2;

        $r1[39] = 2;

        $r1[40] = 2;

        $r1[41] = 2;

        $r1[42] = 1;

        $r1[43] = 1;

        $r1[44] = 1;

        $r1[45] = 1;

        $r1[46] = 1;

        $r1[47] = 2;

        $r1[48] = 1;

        $r1[49] = 2;

        $r1[50] = 1;

        $r1[51] = 1;

        $r1[52] = 1;

        $r1[53] = 1;

        $r1[54] = 0;

        $r1[55] = 0;

        $r1[56] = 0;

        $r1[57] = 0;

        $r1[58] = 0;

        $r1[59] = 0;

        $r1[60] = 0;

        $r1[61] = 0;

        $r1[62] = 0;

        $r1[63] = 0;

        $r1[64] = 0;

        $r1[65] = 0;

        $r1[66] = 0;

        $r1[67] = 0;

        $r1[68] = 0;

        $r1[69] = 0;

        $r1[70] = 0;

        $r1[71] = 0;

        $r1[72] = 0;

        $r1[73] = 0;

        $r1[74] = 0;

        $r1[75] = 0;

        $r1[76] = 0;

        $r1[77] = 0;

        $r1[78] = 0;

        $r1[79] = 0;

        $r1[80] = 0;

        $r1[81] = 0;

        $r1[82] = 0;

        $r1[83] = 0;

        $r1[84] = 0;

        $r1[85] = 0;

        $r1[86] = 0;

        $r1[87] = 0;

        $r1[88] = 0;

        $r1[89] = 2;

        $r1[90] = 3;

        $r1[91] = 4;

        $r1[92] = 4;

        $r1[93] = 5;

        $r1[94] = 6;

        $r1[95] = 2;

        $r1[96] = 1;

        $r1[97] = 2;

        $r1[98] = 1;

        $r1[99] = 2;

        $r1[100] = 1;

        $r1[101] = 2;

        $r1[102] = 1;

        $r1[103] = 2;

        $r1[104] = 1;

        $r1[105] = 2;

        $r1[106] = 1;

        $r1[107] = 2;

        $r1[108] = 1;

        $r1[109] = 2;

        $r1[110] = 1;

        $r1[111] = 2;

        $r1[112] = 1;

        $r1[113] = 2;

        $r1[114] = 1;

        $r1[115] = 2;

        $r1[116] = 1;

        $r1[117] = 2;

        $r1[118] = 1;

        $r1[119] = 2;

        $r1[120] = 1;

        $r1[121] = 2;

        $r1[122] = 1;

        $r1[123] = 2;

        $r1[124] = 1;

        $r1[125] = 2;

        $r1[126] = 1;

        $r1[127] = 2;

        $r1[128] = 1;

        $r1[129] = 2;

        $r1[130] = 1;

        $r1[131] = 2;

        $r1[132] = 0;

        $r1[133] = 2;

        $r1[134] = 1;

        $r1[135] = 2;

        $r1[136] = 1;

        $r1[137] = 1;

        $r1[138] = 2;

        $r1[139] = 1;

        $r1[140] = 2;

        $r1[141] = 2;

        $r1[142] = 1;

        $r1[143] = 2;

        $r1[144] = 1;

        $r1[145] = 1;

        $r1[146] = 1;

        $r1[147] = 1;

        $r1[148] = 1;

        $r1[149] = 1;

        $r1[150] = 1;

        $r1[151] = 1;

        $r1[152] = 1;

        $r1[153] = 0;

        $r1[154] = 0;

        $r1[155] = 0;

        $r1[156] = 0;

        $r1[157] = 0;

        $r1[158] = 0;

        $r1[159] = 0;

        $r1[160] = 0;

        $r1[161] = 0;

        $r1[162] = 0;

        $r1[163] = 0;

        $r1[164] = 0;

        $r1[165] = 0;

        $r1[166] = 0;

        $r1[167] = 0;

        $r1[168] = 1;

        $r1[169] = 0;

        $r1[170] = 0;

        $r1[171] = 0;

        $r1[172] = 0;

        $r1[173] = 0;

        $r1[174] = 0;

        $r1[175] = 0;

        $r1[176] = 0;

        $r1[177] = 0;

        $r1[178] = 0;

        $r1[179] = 0;

        $r1[180] = 0;

        $r1[181] = 0;

        $r1[182] = 0;

        $r1[183] = 0;

        $r1[184] = 0;

        $r1[185] = 0;

        $r1[186] = 0;

        $r1[187] = 1;

        $r1[188] = 1;

        $r1[189] = 1;

        $r1[190] = 1;

        $r1[191] = 0;

        $r1[192] = 1;

        $r1[193] = 1;

        $r1[194] = 0;

        $r1[195] = 0;

        $r1[196] = 0;

        $r1[197] = 1;

        $r1[198] = 0;

        $r1[199] = 0;

        $r1[200] = 0;

        $r1[201] = 1;

        <proguard.classfile.instruction.Instruction: int[] STACK_PUSH_COUNTS> = $r1;

        return;
    }

    public void <init>()
    {
        proguard.classfile.instruction.Instruction r0;

        r0 := @this: proguard.classfile.instruction.Instruction;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    protected static int readByte(byte[], int)
    {
        byte[] $r0;
        short $s2;
        byte $b1;
        int $i0;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $b1 = $r0[$i0];

        $s2 = (short) $b1;

        $s2 = $s2 & 255;

        $i0 = (int) $s2;

        return $i0;
    }

    protected static int readInt(byte[], int)
    {
        byte[] $r0;
        short $s4;
        byte $b2;
        int $i0, $i1, $i3;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 = $i0 + 1;

        $b2 = $r0[$i0];

        $i0 = (int) $b2;

        $i3 = $i0 << 24;

        $i0 = $i1 + 1;

        $b2 = $r0[$i1];

        $s4 = (short) $b2;

        $s4 = $s4 & 255;

        $i1 = (int) $s4;

        $i1 = $i1 << 16;

        $i3 = $i1 | $i3;

        $i1 = $i0 + 1;

        $b2 = $r0[$i0];

        $s4 = (short) $b2;

        $s4 = $s4 & 255;

        $i0 = (int) $s4;

        $i0 = $i0 << 8;

        $i0 = $i3 | $i0;

        $b2 = $r0[$i1];

        $s4 = (short) $b2;

        $s4 = $s4 & 255;

        $i1 = (int) $s4;

        $i0 = $i0 | $i1;

        return $i0;
    }

    protected static int readShort(byte[], int)
    {
        byte[] $r0;
        short $s3;
        byte $b2;
        int $i0, $i1;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 = $i0 + 1;

        $b2 = $r0[$i0];

        $s3 = (short) $b2;

        $s3 = $s3 & 255;

        $i0 = (int) $s3;

        $i0 = $i0 << 8;

        $b2 = $r0[$i1];

        $s3 = (short) $b2;

        $s3 = $s3 & 255;

        $i1 = (int) $s3;

        $i0 = $i1 | $i0;

        return $i0;
    }

    protected static int readSignedByte(byte[], int)
    {
        int $i0;
        byte[] $r0;
        byte $b1;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $b1 = $r0[$i0];

        $i0 = (int) $b1;

        return $i0;
    }

    protected static int readSignedShort(byte[], int)
    {
        byte[] $r0;
        short $s3;
        byte $b2;
        int $i0, $i1;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 = $i0 + 1;

        $b2 = $r0[$i0];

        $i0 = (int) $b2;

        $i0 = $i0 << 8;

        $b2 = $r0[$i1];

        $s3 = (short) $b2;

        $s3 = $s3 & 255;

        $i1 = (int) $s3;

        $i0 = $i1 | $i0;

        return $i0;
    }

    protected static int readSignedValue(byte[], int, int)
    {
        byte[] $r0;
        java.lang.StringBuffer $r2;
        int $i0, $i1;
        java.lang.String $r3;
        java.lang.IllegalArgumentException $r1;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        lookupswitch($i1)
        {
            case 0: goto label2;
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label1;
            case 4: goto label5;
            default: goto label1;
        };

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unsupported value size [");

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label2:
        return 0;

     label3:
        $i0 = staticinvoke <proguard.classfile.instruction.Instruction: int readSignedByte(byte[],int)>($r0, $i0);

        return $i0;

     label4:
        $i0 = staticinvoke <proguard.classfile.instruction.Instruction: int readSignedShort(byte[],int)>($r0, $i0);

        return $i0;

     label5:
        $i0 = staticinvoke <proguard.classfile.instruction.Instruction: int readInt(byte[],int)>($r0, $i0);

        return $i0;
    }

    protected static int readValue(byte[], int, int)
    {
        byte[] $r0;
        java.lang.StringBuffer $r2;
        int $i0, $i1;
        java.lang.String $r3;
        java.lang.IllegalArgumentException $r1;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        lookupswitch($i1)
        {
            case 0: goto label2;
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label1;
            case 4: goto label5;
            default: goto label1;
        };

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unsupported value size [");

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label2:
        return 0;

     label3:
        $i0 = staticinvoke <proguard.classfile.instruction.Instruction: int readByte(byte[],int)>($r0, $i0);

        return $i0;

     label4:
        $i0 = staticinvoke <proguard.classfile.instruction.Instruction: int readShort(byte[],int)>($r0, $i0);

        return $i0;

     label5:
        $i0 = staticinvoke <proguard.classfile.instruction.Instruction: int readInt(byte[],int)>($r0, $i0);

        return $i0;
    }

    protected static void writeByte(byte[], int, int)
    {
        byte[] $r0;
        byte $b2;
        java.lang.StringBuffer $r2;
        int $i0, $i1;
        java.lang.String $r3;
        java.lang.IllegalArgumentException $r1;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $i1 <= 255 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unsigned byte value larger than 0xff [");

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label1:
        $b2 = (byte) $i1;

        $r0[$i0] = $b2;

        return;
    }

    protected static void writeInt(byte[], int, int)
    {
        byte[] $r0;
        byte $b4;
        int $i0, $i1, $i2, $i3;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 = $i0 + 1;

        $i3 = $i1 >> 24;

        $b4 = (byte) $i3;

        $r0[$i0] = $b4;

        $i0 = $i2 + 1;

        $i3 = $i1 >> 16;

        $b4 = (byte) $i3;

        $r0[$i2] = $b4;

        $i2 = $i0 + 1;

        $i3 = $i1 >> 8;

        $b4 = (byte) $i3;

        $r0[$i0] = $b4;

        $b4 = (byte) $i1;

        $r0[$i2] = $b4;

        return;
    }

    protected static void writeShort(byte[], int, int)
    {
        byte[] $r0;
        java.lang.IllegalArgumentException $r4;
        byte $b4;
        java.lang.StringBuffer $r1, $r3;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r2;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $i1 <= 65535 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unsigned short value larger than 0xffff [");

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r4;

     label1:
        $i2 = $i0 + 1;

        $i3 = $i1 >> 8;

        $b4 = (byte) $i3;

        $r0[$i0] = $b4;

        $b4 = (byte) $i1;

        $r0[$i2] = $b4;

        return;
    }

    protected static void writeSignedByte(byte[], int, int)
    {
        byte[] $r0;
        java.lang.IllegalArgumentException $r1;
        byte $b3;
        java.lang.StringBuffer $r2;
        int $i0, $i1, $i2;
        java.lang.String $r3;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 = $i1 << 24;

        $i2 = $i2 >> 24;

        if $i2 == $i1 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Signed byte value out of range [");

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label1:
        $b3 = (byte) $i1;

        $r0[$i0] = $b3;

        return;
    }

    protected static void writeSignedShort(byte[], int, int)
    {
        byte[] $r0;
        java.lang.IllegalArgumentException $r1;
        byte $b4;
        java.lang.StringBuffer $r2;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r3;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 = $i1 << 16;

        $i2 = $i2 >> 16;

        if $i2 == $i1 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Signed short value out of range [");

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label1:
        $i2 = $i0 + 1;

        $i3 = $i1 >> 8;

        $b4 = (byte) $i3;

        $r0[$i0] = $b4;

        $b4 = (byte) $i1;

        $r0[$i2] = $b4;

        return;
    }

    protected static void writeSignedValue(byte[], int, int, int)
    {
        byte[] $r0;
        java.lang.StringBuffer $r2;
        int $i0, $i1, $i2;
        java.lang.String $r3;
        java.lang.IllegalArgumentException $r1;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        lookupswitch($i2)
        {
            case 0: goto label3;
            case 1: goto label2;
            case 2: goto label4;
            case 3: goto label1;
            case 4: goto label5;
            default: goto label1;
        };

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unsupported value size [");

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label2:
        staticinvoke <proguard.classfile.instruction.Instruction: void writeSignedByte(byte[],int,int)>($r0, $i0, $i1);

     label3:
        return;

     label4:
        staticinvoke <proguard.classfile.instruction.Instruction: void writeSignedShort(byte[],int,int)>($r0, $i0, $i1);

        return;

     label5:
        staticinvoke <proguard.classfile.instruction.Instruction: void writeInt(byte[],int,int)>($r0, $i0, $i1);

        return;
    }

    protected static void writeValue(byte[], int, int, int)
    {
        byte[] $r0;
        java.lang.StringBuffer $r2;
        int $i0, $i1, $i2;
        java.lang.String $r3;
        java.lang.IllegalArgumentException $r1;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        lookupswitch($i2)
        {
            case 0: goto label3;
            case 1: goto label2;
            case 2: goto label4;
            case 3: goto label1;
            case 4: goto label5;
            default: goto label1;
        };

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unsupported value size [");

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label2:
        staticinvoke <proguard.classfile.instruction.Instruction: void writeByte(byte[],int,int)>($r0, $i0, $i1);

     label3:
        return;

     label4:
        staticinvoke <proguard.classfile.instruction.Instruction: void writeShort(byte[],int,int)>($r0, $i0, $i1);

        return;

     label5:
        staticinvoke <proguard.classfile.instruction.Instruction: void writeInt(byte[],int,int)>($r0, $i0, $i1);

        return;
    }

    public abstract void accept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.visitor.InstructionVisitor);

    public byte canonicalOpcode()
    {
        byte b0;
        proguard.classfile.instruction.Instruction r0;

        r0 := @this: proguard.classfile.instruction.Instruction;

        b0 = r0.<proguard.classfile.instruction.Instruction: byte opcode>;

        return b0;
    }

    public java.lang.String getName()
    {
        short $s1;
        byte $b0;
        proguard.classfile.instruction.Instruction r0;
        int $i2;
        java.lang.String[] $r1;
        java.lang.String $r2;

        r0 := @this: proguard.classfile.instruction.Instruction;

        $r1 = <proguard.classfile.instruction.InstructionConstants: java.lang.String[] NAMES>;

        $b0 = r0.<proguard.classfile.instruction.Instruction: byte opcode>;

        $s1 = (short) $b0;

        $s1 = $s1 & 255;

        $i2 = (int) $s1;

        $r2 = $r1[$i2];

        return $r2;
    }

    public boolean isCategory2()
    {
        short $s1;
        byte $b0;
        proguard.classfile.instruction.Instruction r0;
        boolean[] $r1;
        int $i2;
        boolean $z0;

        r0 := @this: proguard.classfile.instruction.Instruction;

        $r1 = <proguard.classfile.instruction.Instruction: boolean[] IS_CATEGORY2>;

        $b0 = r0.<proguard.classfile.instruction.Instruction: byte opcode>;

        $s1 = (short) $b0;

        $s1 = $s1 & 255;

        $i2 = (int) $s1;

        $z0 = $r1[$i2];

        return $z0;
    }

    protected boolean isWide()
    {
        proguard.classfile.instruction.Instruction r0;

        r0 := @this: proguard.classfile.instruction.Instruction;

        return 0;
    }

    public abstract int length(int);

    protected abstract void readInfo(byte[], int);

    public abstract proguard.classfile.instruction.Instruction shrink();

    public int stackPopCount(proguard.classfile.Clazz)
    {
        short $s1;
        byte $b0;
        proguard.classfile.instruction.Instruction r0;
        proguard.classfile.Clazz $r1;
        int[] $r2;
        int $i2;

        r0 := @this: proguard.classfile.instruction.Instruction;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 = <proguard.classfile.instruction.Instruction: int[] STACK_POP_COUNTS>;

        $b0 = r0.<proguard.classfile.instruction.Instruction: byte opcode>;

        $s1 = (short) $b0;

        $s1 = $s1 & 255;

        $i2 = (int) $s1;

        $i2 = $r2[$i2];

        return $i2;
    }

    public int stackPushCount(proguard.classfile.Clazz)
    {
        short $s1;
        byte $b0;
        proguard.classfile.instruction.Instruction r0;
        proguard.classfile.Clazz $r1;
        int[] $r2;
        int $i2;

        r0 := @this: proguard.classfile.instruction.Instruction;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 = <proguard.classfile.instruction.Instruction: int[] STACK_PUSH_COUNTS>;

        $b0 = r0.<proguard.classfile.instruction.Instruction: byte opcode>;

        $s1 = (short) $b0;

        $s1 = $s1 & 255;

        $i2 = (int) $s1;

        $i2 = $r2[$i2];

        return $i2;
    }

    public java.lang.String toString(int)
    {
        proguard.classfile.instruction.Instruction r0;
        java.lang.StringBuffer $r1;
        int $i0;
        java.lang.String $r2;

        r0 := @this: proguard.classfile.instruction.Instruction;

        $i0 := @parameter0: int;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[");

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] ");

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    public final void write(proguard.classfile.attribute.CodeAttribute, int)
    {
        byte[] $r2;
        proguard.classfile.instruction.Instruction r0;
        proguard.classfile.attribute.CodeAttribute $r1;
        int $i0;

        r0 := @this: proguard.classfile.instruction.Instruction;

        $r1 := @parameter0: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter1: int;

        $r2 = $r1.<proguard.classfile.attribute.CodeAttribute: byte[] code>;

        virtualinvoke r0.<proguard.classfile.instruction.Instruction: void write(byte[],int)>($r2, $i0);

        return;
    }

    public void write(byte[], int)
    {
        byte[] $r1;
        byte $b1;
        proguard.classfile.instruction.Instruction r0;
        int $i0, $i2;
        boolean $z0;

        r0 := @this: proguard.classfile.instruction.Instruction;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $z0 = virtualinvoke r0.<proguard.classfile.instruction.Instruction: boolean isWide()>();

        if $z0 == 0 goto label2;

        $i2 = $i0 + 1;

        $r1[$i0] = -60;

     label1:
        $i0 = $i2 + 1;

        $b1 = r0.<proguard.classfile.instruction.Instruction: byte opcode>;

        $r1[$i2] = $b1;

        virtualinvoke r0.<proguard.classfile.instruction.Instruction: void writeInfo(byte[],int)>($r1, $i0);

        return;

     label2:
        $i2 = $i0;

        goto label1;
    }

    protected abstract void writeInfo(byte[], int);
}
