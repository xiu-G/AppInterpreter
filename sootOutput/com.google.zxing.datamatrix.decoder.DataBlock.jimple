final class com.google.zxing.datamatrix.decoder.DataBlock extends java.lang.Object
{
    private final byte[] codewords;
    private final int numDataCodewords;

    private void <init>(int, byte[])
    {
        int $i0;
        byte[] $r1;
        com.google.zxing.datamatrix.decoder.DataBlock r0;

        r0 := @this: com.google.zxing.datamatrix.decoder.DataBlock;

        $i0 := @parameter0: int;

        $r1 := @parameter1: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.google.zxing.datamatrix.decoder.DataBlock: int numDataCodewords> = $i0;

        r0.<com.google.zxing.datamatrix.decoder.DataBlock: byte[] codewords> = $r1;

        return;
    }

    static com.google.zxing.datamatrix.decoder.DataBlock[] getDataBlocks(byte[], com.google.zxing.datamatrix.decoder.Version)
    {
        byte[] $r0, $r7;
        com.google.zxing.datamatrix.decoder.Version$ECBlocks $r4;
        byte $b7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        com.google.zxing.datamatrix.decoder.Version$ECB $r6;
        com.google.zxing.datamatrix.decoder.Version $r1;
        boolean $z0;
        com.google.zxing.datamatrix.decoder.DataBlock[] $r2;
        com.google.zxing.datamatrix.decoder.Version$ECB[] $r5;
        java.lang.IllegalArgumentException $r9;
        com.google.zxing.datamatrix.decoder.DataBlock $r3, $r8;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: com.google.zxing.datamatrix.decoder.Version;

        $r4 = virtualinvoke $r1.<com.google.zxing.datamatrix.decoder.Version: com.google.zxing.datamatrix.decoder.Version$ECBlocks getECBlocks()>();

        $r5 = virtualinvoke $r4.<com.google.zxing.datamatrix.decoder.Version$ECBlocks: com.google.zxing.datamatrix.decoder.Version$ECB[] getECBlocks()>();

        $i0 = 0;

        $i1 = 0;

     label01:
        $i2 = lengthof $r5;

        if $i0 >= $i2 goto label02;

        $r6 = $r5[$i0];

        $i2 = virtualinvoke $r6.<com.google.zxing.datamatrix.decoder.Version$ECB: int getCount()>();

        $i1 = $i1 + $i2;

        $i0 = $i0 + 1;

        goto label01;

     label02:
        $r2 = newarray (com.google.zxing.datamatrix.decoder.DataBlock)[$i1];

        $i1 = 0;

        $i0 = 0;

     label03:
        $i2 = lengthof $r5;

        if $i1 >= $i2 goto label06;

        $r6 = $r5[$i1];

        $i2 = 0;

     label04:
        $i3 = virtualinvoke $r6.<com.google.zxing.datamatrix.decoder.Version$ECB: int getCount()>();

        if $i2 >= $i3 goto label05;

        $i3 = virtualinvoke $r6.<com.google.zxing.datamatrix.decoder.Version$ECB: int getDataCodewords()>();

        $i4 = virtualinvoke $r4.<com.google.zxing.datamatrix.decoder.Version$ECBlocks: int getECCodewords()>();

        $i5 = $i4 + $i3;

        $r8 = new com.google.zxing.datamatrix.decoder.DataBlock;

        $r7 = newarray (byte)[$i5];

        specialinvoke $r8.<com.google.zxing.datamatrix.decoder.DataBlock: void <init>(int,byte[])>($i3, $r7);

        $r2[$i0] = $r8;

        $i2 = $i2 + 1;

        $i0 = $i0 + 1;

        goto label04;

     label05:
        $i1 = $i1 + 1;

        goto label03;

     label06:
        $r3 = $r2[0];

        $r7 = $r3.<com.google.zxing.datamatrix.decoder.DataBlock: byte[] codewords>;

        $i1 = lengthof $r7;

        $i2 = virtualinvoke $r4.<com.google.zxing.datamatrix.decoder.Version$ECBlocks: int getECCodewords()>();

        $i1 = $i1 - $i2;

        $i3 = $i1 + -1;

        $i4 = 0;

        $i2 = 0;

     label07:
        if $i4 >= $i3 goto label10;

        $i5 = 0;

     label08:
        if $i5 >= $i0 goto label09;

        $r3 = $r2[$i5];

        $r7 = $r3.<com.google.zxing.datamatrix.decoder.DataBlock: byte[] codewords>;

        $b7 = $r0[$i2];

        $r7[$i4] = $b7;

        $i5 = $i5 + 1;

        $i2 = $i2 + 1;

        goto label08;

     label09:
        $i4 = $i4 + 1;

        goto label07;

     label10:
        $i3 = virtualinvoke $r1.<com.google.zxing.datamatrix.decoder.Version: int getVersionNumber()>();

        if $i3 != 24 goto label14;

        $z0 = 1;

     label11:
        if $z0 == 0 goto label15;

        $i3 = 8;

     label12:
        $i4 = 0;

     label13:
        if $i4 >= $i3 goto label16;

        $r3 = $r2[$i4];

        $r7 = $r3.<com.google.zxing.datamatrix.decoder.DataBlock: byte[] codewords>;

        $i5 = $i1 + -1;

        $b7 = $r0[$i2];

        $r7[$i5] = $b7;

        $i4 = $i4 + 1;

        $i2 = $i2 + 1;

        goto label13;

     label14:
        $z0 = 0;

        goto label11;

     label15:
        $i3 = $i0;

        goto label12;

     label16:
        $r3 = $r2[0];

        $r7 = $r3.<com.google.zxing.datamatrix.decoder.DataBlock: byte[] codewords>;

        $i3 = lengthof $r7;

        $i4 = $i2;

     label17:
        if $i1 >= $i3 goto label22;

        $i2 = 0;

     label18:
        if $i2 >= $i0 goto label21;

        if $z0 == 0 goto label20;

        if $i2 <= 7 goto label20;

        $i6 = $i1 + -1;

     label19:
        $r3 = $r2[$i2];

        $r7 = $r3.<com.google.zxing.datamatrix.decoder.DataBlock: byte[] codewords>;

        $b7 = $r0[$i4];

        $r7[$i6] = $b7;

        $i2 = $i2 + 1;

        $i4 = $i4 + 1;

        goto label18;

     label20:
        $i6 = $i1;

        goto label19;

     label21:
        $i1 = $i1 + 1;

        goto label17;

     label22:
        $i0 = lengthof $r0;

        if $i4 == $i0 goto label23;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r9;

     label23:
        return $r2;
    }

    byte[] getCodewords()
    {
        byte[] r1;
        com.google.zxing.datamatrix.decoder.DataBlock r0;

        r0 := @this: com.google.zxing.datamatrix.decoder.DataBlock;

        r1 = r0.<com.google.zxing.datamatrix.decoder.DataBlock: byte[] codewords>;

        return r1;
    }

    int getNumDataCodewords()
    {
        int i0;
        com.google.zxing.datamatrix.decoder.DataBlock r0;

        r0 := @this: com.google.zxing.datamatrix.decoder.DataBlock;

        i0 = r0.<com.google.zxing.datamatrix.decoder.DataBlock: int numDataCodewords>;

        return i0;
    }
}
