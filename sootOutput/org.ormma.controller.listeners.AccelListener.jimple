public class org.ormma.controller.listeners.AccelListener extends java.lang.Object implements android.hardware.SensorEventListener
{
    private static final int FORCE_THRESHOLD;
    private static final int SHAKE_COUNT;
    private static final int SHAKE_DURATION;
    private static final int SHAKE_TIMEOUT;
    private static final int TIME_THRESHOLD;
    private boolean bAccReady;
    private boolean bMagReady;
    private float[] mAccVals;
    private float[] mActualOrientation;
    java.lang.String mKey;
    private float[] mLastAccVals;
    private long mLastForce;
    private long mLastShake;
    private long mLastTime;
    private float[] mMagVals;
    org.ormma.controller.OrmmaSensorController mSensorController;
    private int mSensorDelay;
    private int mShakeCount;
    int registeredHeadingListeners;
    int registeredShakeListeners;
    int registeredTiltListeners;
    private android.hardware.SensorManager sensorManager;

    public void <init>(android.content.Context, org.ormma.controller.OrmmaSensorController)
    {
        android.content.Context $r1;
        org.ormma.controller.OrmmaSensorController $r2;
        android.hardware.SensorManager $r5;
        java.lang.Object $r3;
        float[] $r4;
        org.ormma.controller.listeners.AccelListener r0;

        r0 := @this: org.ormma.controller.listeners.AccelListener;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: org.ormma.controller.OrmmaSensorController;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.ormma.controller.listeners.AccelListener: int registeredTiltListeners> = 0;

        r0.<org.ormma.controller.listeners.AccelListener: int registeredShakeListeners> = 0;

        r0.<org.ormma.controller.listeners.AccelListener: int registeredHeadingListeners> = 0;

        r0.<org.ormma.controller.listeners.AccelListener: int mSensorDelay> = 3;

        $r4 = newarray (float)[3];

        $r4[0] = 0.0F;

        $r4[1] = 0.0F;

        $r4[2] = 0.0F;

        r0.<org.ormma.controller.listeners.AccelListener: float[] mAccVals> = $r4;

        $r4 = newarray (float)[3];

        $r4[0] = 0.0F;

        $r4[1] = 0.0F;

        $r4[2] = 0.0F;

        r0.<org.ormma.controller.listeners.AccelListener: float[] mLastAccVals> = $r4;

        $r4 = newarray (float)[3];

        $r4[0] = -1.0F;

        $r4[1] = -1.0F;

        $r4[2] = -1.0F;

        r0.<org.ormma.controller.listeners.AccelListener: float[] mActualOrientation> = $r4;

        r0.<org.ormma.controller.listeners.AccelListener: org.ormma.controller.OrmmaSensorController mSensorController> = $r2;

        $r3 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("sensor");

        $r5 = (android.hardware.SensorManager) $r3;

        r0.<org.ormma.controller.listeners.AccelListener: android.hardware.SensorManager sensorManager> = $r5;

        return;
    }

    private void start()
    {
        android.hardware.SensorManager $r1;
        java.util.List $r2;
        int $i0;
        java.lang.Object $r3;
        android.hardware.Sensor $r4;
        org.ormma.controller.listeners.AccelListener r0;

        r0 := @this: org.ormma.controller.listeners.AccelListener;

        $r1 = r0.<org.ormma.controller.listeners.AccelListener: android.hardware.SensorManager sensorManager>;

        $r2 = virtualinvoke $r1.<android.hardware.SensorManager: java.util.List getSensorList(int)>(1);

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 <= 0 goto label1;

        $r1 = r0.<org.ormma.controller.listeners.AccelListener: android.hardware.SensorManager sensorManager>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(0);

        $r4 = (android.hardware.Sensor) $r3;

        $i0 = r0.<org.ormma.controller.listeners.AccelListener: int mSensorDelay>;

        virtualinvoke $r1.<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>(r0, $r4, $i0);

     label1:
        return;
    }

    private void startMag()
    {
        android.hardware.SensorManager $r1;
        java.util.List $r2;
        int $i0;
        java.lang.Object $r3;
        android.hardware.Sensor $r4;
        org.ormma.controller.listeners.AccelListener r0;

        r0 := @this: org.ormma.controller.listeners.AccelListener;

        $r1 = r0.<org.ormma.controller.listeners.AccelListener: android.hardware.SensorManager sensorManager>;

        $r2 = virtualinvoke $r1.<android.hardware.SensorManager: java.util.List getSensorList(int)>(2);

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 <= 0 goto label1;

        $r1 = r0.<org.ormma.controller.listeners.AccelListener: android.hardware.SensorManager sensorManager>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(0);

        $r4 = (android.hardware.Sensor) $r3;

        $i0 = r0.<org.ormma.controller.listeners.AccelListener: int mSensorDelay>;

        virtualinvoke $r1.<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>(r0, $r4, $i0);

        specialinvoke r0.<org.ormma.controller.listeners.AccelListener: void start()>();

     label1:
        return;
    }

    public float getHeading()
    {
        float $f0;
        float[] $r1;
        org.ormma.controller.listeners.AccelListener r0;

        r0 := @this: org.ormma.controller.listeners.AccelListener;

        $r1 = r0.<org.ormma.controller.listeners.AccelListener: float[] mActualOrientation>;

        $f0 = $r1[0];

        return $f0;
    }

    public void onAccuracyChanged(android.hardware.Sensor, int)
    {
        int $i0;
        android.hardware.Sensor $r1;
        org.ormma.controller.listeners.AccelListener r0;

        r0 := @this: org.ormma.controller.listeners.AccelListener;

        $r1 := @parameter0: android.hardware.Sensor;

        $i0 := @parameter1: int;

        return;
    }

    public void onSensorChanged(android.hardware.SensorEvent)
    {
        float[] r2, r3, $r5, $r6;
        long l0, $l2;
        android.hardware.SensorEvent $r1;
        byte $b3;
        int $i1;
        android.hardware.Sensor $r4;
        org.ormma.controller.listeners.AccelListener r0;
        boolean $z0;
        org.ormma.controller.OrmmaSensorController $r7;
        float f0, $f1, $f2;
        java.lang.Object $r8;

        r0 := @this: org.ormma.controller.listeners.AccelListener;

        $r1 := @parameter0: android.hardware.SensorEvent;

        $r4 = $r1.<android.hardware.SensorEvent: android.hardware.Sensor sensor>;

        $i1 = virtualinvoke $r4.<android.hardware.Sensor: int getType()>();

        lookupswitch($i1)
        {
            case 1: goto label7;
            case 2: goto label6;
            default: goto label1;
        };

     label1:
        r3 = r0.<org.ormma.controller.listeners.AccelListener: float[] mMagVals>;

        if r3 == null goto label2;

        r3 = r0.<org.ormma.controller.listeners.AccelListener: float[] mAccVals>;

        if r3 == null goto label2;

        $z0 = r0.<org.ormma.controller.listeners.AccelListener: boolean bAccReady>;

        if $z0 == 0 goto label2;

        $z0 = r0.<org.ormma.controller.listeners.AccelListener: boolean bMagReady>;

        if $z0 == 0 goto label2;

        r0.<org.ormma.controller.listeners.AccelListener: boolean bAccReady> = 0;

        r0.<org.ormma.controller.listeners.AccelListener: boolean bMagReady> = 0;

        r3 = newarray (float)[9];

        r2 = newarray (float)[9];

        $r5 = r0.<org.ormma.controller.listeners.AccelListener: float[] mAccVals>;

        $r6 = r0.<org.ormma.controller.listeners.AccelListener: float[] mMagVals>;

        staticinvoke <android.hardware.SensorManager: boolean getRotationMatrix(float[],float[],float[],float[])>(r3, r2, $r5, $r6);

        r2 = newarray (float)[3];

        r0.<org.ormma.controller.listeners.AccelListener: float[] mActualOrientation> = r2;

        r2 = r0.<org.ormma.controller.listeners.AccelListener: float[] mActualOrientation>;

        staticinvoke <android.hardware.SensorManager: float[] getOrientation(float[],float[])>(r3, r2);

        $r7 = r0.<org.ormma.controller.listeners.AccelListener: org.ormma.controller.OrmmaSensorController mSensorController>;

        r3 = r0.<org.ormma.controller.listeners.AccelListener: float[] mActualOrientation>;

        f0 = r3[0];

        virtualinvoke $r7.<org.ormma.controller.OrmmaSensorController: void onHeadingChange(float)>(f0);

     label2:
        $r4 = $r1.<android.hardware.SensorEvent: android.hardware.Sensor sensor>;

        $i1 = virtualinvoke $r4.<android.hardware.Sensor: int getType()>();

        if $i1 != 1 goto label8;

        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        l0 = r0.<org.ormma.controller.listeners.AccelListener: long mLastForce>;

        l0 = $l2 - l0;

        $b3 = l0 cmp 500L;

        $i1 = (int) $b3;

        if $i1 <= 0 goto label3;

        r0.<org.ormma.controller.listeners.AccelListener: int mShakeCount> = 0;

     label3:
        l0 = r0.<org.ormma.controller.listeners.AccelListener: long mLastTime>;

        l0 = $l2 - l0;

        $b3 = l0 cmp 100L;

        $i1 = (int) $b3;

        if $i1 <= 0 goto label8;

        l0 = r0.<org.ormma.controller.listeners.AccelListener: long mLastTime>;

        l0 = $l2 - l0;

        r3 = r0.<org.ormma.controller.listeners.AccelListener: float[] mAccVals>;

        f0 = r3[0];

        r3 = r0.<org.ormma.controller.listeners.AccelListener: float[] mAccVals>;

        $f1 = r3[1];

        f0 = f0 + $f1;

        r3 = r0.<org.ormma.controller.listeners.AccelListener: float[] mAccVals>;

        $f1 = r3[2];

        f0 = f0 + $f1;

        r3 = r0.<org.ormma.controller.listeners.AccelListener: float[] mLastAccVals>;

        $f1 = r3[0];

        f0 = f0 - $f1;

        r3 = r0.<org.ormma.controller.listeners.AccelListener: float[] mLastAccVals>;

        $f1 = r3[1];

        f0 = f0 - $f1;

        r3 = r0.<org.ormma.controller.listeners.AccelListener: float[] mLastAccVals>;

        $f1 = r3[2];

        f0 = f0 - $f1;

        f0 = staticinvoke <java.lang.Math: float abs(float)>(f0);

        $f1 = (float) l0;

        f0 = f0 / $f1;

        f0 = f0 * 10000.0F;

        $b3 = f0 cmpl 1000.0F;

        $i1 = (int) $b3;

        if $i1 <= 0 goto label5;

        $i1 = r0.<org.ormma.controller.listeners.AccelListener: int mShakeCount>;

        $i1 = $i1 + 1;

        r0.<org.ormma.controller.listeners.AccelListener: int mShakeCount> = $i1;

        if $i1 < 2 goto label4;

        l0 = r0.<org.ormma.controller.listeners.AccelListener: long mLastShake>;

        l0 = $l2 - l0;

        $b3 = l0 cmp 2000L;

        $i1 = (int) $b3;

        if $i1 <= 0 goto label4;

        r0.<org.ormma.controller.listeners.AccelListener: long mLastShake> = $l2;

        r0.<org.ormma.controller.listeners.AccelListener: int mShakeCount> = 0;

        $r7 = r0.<org.ormma.controller.listeners.AccelListener: org.ormma.controller.OrmmaSensorController mSensorController>;

        virtualinvoke $r7.<org.ormma.controller.OrmmaSensorController: void onShake()>();

     label4:
        r0.<org.ormma.controller.listeners.AccelListener: long mLastForce> = $l2;

     label5:
        r0.<org.ormma.controller.listeners.AccelListener: long mLastTime> = $l2;

        $r7 = r0.<org.ormma.controller.listeners.AccelListener: org.ormma.controller.OrmmaSensorController mSensorController>;

        r3 = r0.<org.ormma.controller.listeners.AccelListener: float[] mAccVals>;

        f0 = r3[0];

        r3 = r0.<org.ormma.controller.listeners.AccelListener: float[] mAccVals>;

        $f1 = r3[1];

        r3 = r0.<org.ormma.controller.listeners.AccelListener: float[] mAccVals>;

        $f2 = r3[2];

        virtualinvoke $r7.<org.ormma.controller.OrmmaSensorController: void onTilt(float,float,float)>(f0, $f1, $f2);

        return;

     label6:
        r3 = $r1.<android.hardware.SensorEvent: float[] values>;

        $r8 = virtualinvoke r3.<java.lang.Object: java.lang.Object clone()>();

        r3 = (float[]) $r8;

        r0.<org.ormma.controller.listeners.AccelListener: float[] mMagVals> = r3;

        r0.<org.ormma.controller.listeners.AccelListener: boolean bMagReady> = 1;

        goto label1;

     label7:
        r3 = r0.<org.ormma.controller.listeners.AccelListener: float[] mAccVals>;

        r0.<org.ormma.controller.listeners.AccelListener: float[] mLastAccVals> = r3;

        r3 = $r1.<android.hardware.SensorEvent: float[] values>;

        $r8 = virtualinvoke r3.<java.lang.Object: java.lang.Object clone()>();

        r3 = (float[]) $r8;

        r0.<org.ormma.controller.listeners.AccelListener: float[] mAccVals> = r3;

        r0.<org.ormma.controller.listeners.AccelListener: boolean bAccReady> = 1;

        goto label1;

     label8:
        return;
    }

    public void setSensorDelay(int)
    {
        int $i0;
        org.ormma.controller.listeners.AccelListener r0;

        r0 := @this: org.ormma.controller.listeners.AccelListener;

        $i0 := @parameter0: int;

        r0.<org.ormma.controller.listeners.AccelListener: int mSensorDelay> = $i0;

        $i0 = r0.<org.ormma.controller.listeners.AccelListener: int registeredTiltListeners>;

        if $i0 > 0 goto label1;

        $i0 = r0.<org.ormma.controller.listeners.AccelListener: int registeredShakeListeners>;

        if $i0 <= 0 goto label2;

     label1:
        virtualinvoke r0.<org.ormma.controller.listeners.AccelListener: void stop()>();

        specialinvoke r0.<org.ormma.controller.listeners.AccelListener: void start()>();

     label2:
        return;
    }

    public void startTrackingHeading()
    {
        int $i0;
        org.ormma.controller.listeners.AccelListener r0;

        r0 := @this: org.ormma.controller.listeners.AccelListener;

        $i0 = r0.<org.ormma.controller.listeners.AccelListener: int registeredHeadingListeners>;

        if $i0 != 0 goto label1;

        specialinvoke r0.<org.ormma.controller.listeners.AccelListener: void startMag()>();

     label1:
        $i0 = r0.<org.ormma.controller.listeners.AccelListener: int registeredHeadingListeners>;

        $i0 = $i0 + 1;

        r0.<org.ormma.controller.listeners.AccelListener: int registeredHeadingListeners> = $i0;

        return;
    }

    public void startTrackingShake()
    {
        int $i0;
        org.ormma.controller.listeners.AccelListener r0;

        r0 := @this: org.ormma.controller.listeners.AccelListener;

        $i0 = r0.<org.ormma.controller.listeners.AccelListener: int registeredShakeListeners>;

        if $i0 != 0 goto label1;

        virtualinvoke r0.<org.ormma.controller.listeners.AccelListener: void setSensorDelay(int)>(1);

        specialinvoke r0.<org.ormma.controller.listeners.AccelListener: void start()>();

     label1:
        $i0 = r0.<org.ormma.controller.listeners.AccelListener: int registeredShakeListeners>;

        $i0 = $i0 + 1;

        r0.<org.ormma.controller.listeners.AccelListener: int registeredShakeListeners> = $i0;

        return;
    }

    public void startTrackingTilt()
    {
        int $i0;
        org.ormma.controller.listeners.AccelListener r0;

        r0 := @this: org.ormma.controller.listeners.AccelListener;

        $i0 = r0.<org.ormma.controller.listeners.AccelListener: int registeredTiltListeners>;

        if $i0 != 0 goto label1;

        specialinvoke r0.<org.ormma.controller.listeners.AccelListener: void start()>();

     label1:
        $i0 = r0.<org.ormma.controller.listeners.AccelListener: int registeredTiltListeners>;

        $i0 = $i0 + 1;

        r0.<org.ormma.controller.listeners.AccelListener: int registeredTiltListeners> = $i0;

        return;
    }

    public void stop()
    {
        int $i0;
        android.hardware.SensorManager $r1;
        org.ormma.controller.listeners.AccelListener r0;

        r0 := @this: org.ormma.controller.listeners.AccelListener;

        $i0 = r0.<org.ormma.controller.listeners.AccelListener: int registeredHeadingListeners>;

        if $i0 != 0 goto label1;

        $i0 = r0.<org.ormma.controller.listeners.AccelListener: int registeredShakeListeners>;

        if $i0 != 0 goto label1;

        $i0 = r0.<org.ormma.controller.listeners.AccelListener: int registeredTiltListeners>;

        if $i0 != 0 goto label1;

        $r1 = r0.<org.ormma.controller.listeners.AccelListener: android.hardware.SensorManager sensorManager>;

        virtualinvoke $r1.<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener)>(r0);

     label1:
        return;
    }

    public void stopAllListeners()
    {
        org.ormma.controller.listeners.AccelListener r0;
        java.lang.Exception $r1;

        r0 := @this: org.ormma.controller.listeners.AccelListener;

        r0.<org.ormma.controller.listeners.AccelListener: int registeredTiltListeners> = 0;

        r0.<org.ormma.controller.listeners.AccelListener: int registeredShakeListeners> = 0;

        r0.<org.ormma.controller.listeners.AccelListener: int registeredHeadingListeners> = 0;

     label1:
        virtualinvoke r0.<org.ormma.controller.listeners.AccelListener: void stop()>();

     label2:
        return;

     label3:
        $r1 := @caughtexception;

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void stopTrackingHeading()
    {
        int $i0, $i1;
        org.ormma.controller.listeners.AccelListener r0;

        r0 := @this: org.ormma.controller.listeners.AccelListener;

        $i0 = r0.<org.ormma.controller.listeners.AccelListener: int registeredHeadingListeners>;

        if $i0 <= 0 goto label1;

        $i0 = r0.<org.ormma.controller.listeners.AccelListener: int registeredHeadingListeners>;

        $i1 = -1;

        $i0 = $i0 + $i1;

        r0.<org.ormma.controller.listeners.AccelListener: int registeredHeadingListeners> = $i0;

        if $i0 != 0 goto label1;

        virtualinvoke r0.<org.ormma.controller.listeners.AccelListener: void stop()>();

     label1:
        return;
    }

    public void stopTrackingShake()
    {
        int $i0, $i1;
        org.ormma.controller.listeners.AccelListener r0;

        r0 := @this: org.ormma.controller.listeners.AccelListener;

        $i0 = r0.<org.ormma.controller.listeners.AccelListener: int registeredShakeListeners>;

        if $i0 <= 0 goto label1;

        $i0 = r0.<org.ormma.controller.listeners.AccelListener: int registeredShakeListeners>;

        $i1 = -1;

        $i0 = $i0 + $i1;

        r0.<org.ormma.controller.listeners.AccelListener: int registeredShakeListeners> = $i0;

        if $i0 != 0 goto label1;

        virtualinvoke r0.<org.ormma.controller.listeners.AccelListener: void setSensorDelay(int)>(3);

        virtualinvoke r0.<org.ormma.controller.listeners.AccelListener: void stop()>();

     label1:
        return;
    }

    public void stopTrackingTilt()
    {
        int $i0, $i1;
        org.ormma.controller.listeners.AccelListener r0;

        r0 := @this: org.ormma.controller.listeners.AccelListener;

        $i0 = r0.<org.ormma.controller.listeners.AccelListener: int registeredTiltListeners>;

        if $i0 <= 0 goto label1;

        $i0 = r0.<org.ormma.controller.listeners.AccelListener: int registeredTiltListeners>;

        $i1 = -1;

        $i0 = $i0 + $i1;

        r0.<org.ormma.controller.listeners.AccelListener: int registeredTiltListeners> = $i0;

        if $i0 != 0 goto label1;

        virtualinvoke r0.<org.ormma.controller.listeners.AccelListener: void stop()>();

     label1:
        return;
    }

    public static void <clinit>()
    {
        <org.ormma.controller.listeners.AccelListener: int TIME_THRESHOLD> = 100;

        <org.ormma.controller.listeners.AccelListener: int SHAKE_TIMEOUT> = 500;

        <org.ormma.controller.listeners.AccelListener: int SHAKE_DURATION> = 2000;

        <org.ormma.controller.listeners.AccelListener: int SHAKE_COUNT> = 2;

        <org.ormma.controller.listeners.AccelListener: int FORCE_THRESHOLD> = 1000;

        return;
    }
}
