public class org.dom4j.tree.ContentListFacade extends java.util.AbstractList
{
    private org.dom4j.tree.AbstractBranch branch;
    private java.util.List branchContent;

    public void <init>(org.dom4j.tree.AbstractBranch, java.util.List)
    {
        org.dom4j.tree.ContentListFacade r0;
        java.util.List $r2;
        org.dom4j.tree.AbstractBranch $r1;

        r0 := @this: org.dom4j.tree.ContentListFacade;

        $r1 := @parameter0: org.dom4j.tree.AbstractBranch;

        $r2 := @parameter1: java.util.List;

        specialinvoke r0.<java.util.AbstractList: void <init>()>();

        r0.<org.dom4j.tree.ContentListFacade: org.dom4j.tree.AbstractBranch branch> = $r1;

        r0.<org.dom4j.tree.ContentListFacade: java.util.List branchContent> = $r2;

        return;
    }

    public void add(int, java.lang.Object)
    {
        org.dom4j.tree.ContentListFacade r0;
        java.util.List $r4;
        org.dom4j.Node $r2;
        int $i0;
        java.lang.Object $r1;
        org.dom4j.tree.AbstractBranch $r3;

        r0 := @this: org.dom4j.tree.ContentListFacade;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.Object;

        $r3 = r0.<org.dom4j.tree.ContentListFacade: org.dom4j.tree.AbstractBranch branch>;

        $r2 = virtualinvoke r0.<org.dom4j.tree.ContentListFacade: org.dom4j.Node asNode(java.lang.Object)>($r1);

        virtualinvoke $r3.<org.dom4j.tree.AbstractBranch: void childAdded(org.dom4j.Node)>($r2);

        $r4 = r0.<org.dom4j.tree.ContentListFacade: java.util.List branchContent>;

        interfaceinvoke $r4.<java.util.List: void add(int,java.lang.Object)>($i0, $r1);

        return;
    }

    public boolean add(java.lang.Object)
    {
        org.dom4j.tree.ContentListFacade r0;
        java.util.List $r4;
        org.dom4j.Node $r3;
        java.lang.Object $r1;
        org.dom4j.tree.AbstractBranch $r2;
        boolean $z0;

        r0 := @this: org.dom4j.tree.ContentListFacade;

        $r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.dom4j.tree.ContentListFacade: org.dom4j.tree.AbstractBranch branch>;

        $r3 = virtualinvoke r0.<org.dom4j.tree.ContentListFacade: org.dom4j.Node asNode(java.lang.Object)>($r1);

        virtualinvoke $r2.<org.dom4j.tree.AbstractBranch: void childAdded(org.dom4j.Node)>($r3);

        $r4 = r0.<org.dom4j.tree.ContentListFacade: java.util.List branchContent>;

        $z0 = interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r1);

        return $z0;
    }

    public boolean addAll(int, java.util.Collection)
    {
        java.util.Iterator $r3;
        java.util.Collection $r1;
        org.dom4j.tree.ContentListFacade r0;
        java.util.List $r2;
        int i0, i1, $i2;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: org.dom4j.tree.ContentListFacade;

        i1 := @parameter0: int;

        $r1 := @parameter1: java.util.Collection;

        $r2 = r0.<org.dom4j.tree.ContentListFacade: java.util.List branchContent>;

        $i2 = interfaceinvoke $r2.<java.util.List: int size()>();

        $r3 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        i0 = i1 + 1;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke r0.<org.dom4j.tree.ContentListFacade: void add(int,java.lang.Object)>(i1, $r4);

        i1 = -1;

        $i2 = $i2 + i1;

        i1 = i0;

        goto label1;

     label2:
        $r2 = r0.<org.dom4j.tree.ContentListFacade: java.util.List branchContent>;

        i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i2 != i1 goto label3;

        return 1;

     label3:
        return 0;
    }

    public boolean addAll(java.util.Collection)
    {
        java.util.Iterator $r3;
        java.util.Collection $r1;
        org.dom4j.tree.ContentListFacade r0;
        java.util.List $r2;
        int $i0, $i1;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: org.dom4j.tree.ContentListFacade;

        $r1 := @parameter0: java.util.Collection;

        $r2 = r0.<org.dom4j.tree.ContentListFacade: java.util.List branchContent>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $r3 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke r0.<org.dom4j.tree.ContentListFacade: boolean add(java.lang.Object)>($r4);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r2 = r0.<org.dom4j.tree.ContentListFacade: java.util.List branchContent>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 != $i1 goto label3;

        return 1;

     label3:
        return 0;
    }

    protected org.dom4j.Node asNode(java.lang.Object)
    {
        org.dom4j.tree.ContentListFacade r0;
        org.dom4j.Node r2;
        java.lang.StringBuffer $r4;
        org.dom4j.IllegalAddException $r3;
        java.lang.Object r1;
        java.lang.String $r5;
        boolean $z0;

        r0 := @this: org.dom4j.tree.ContentListFacade;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.dom4j.Node;

        if $z0 == 0 goto label1;

        r2 = (org.dom4j.Node) r1;

        return r2;

     label1:
        $r3 = new org.dom4j.IllegalAddException;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("This list must contain instances of Node. Invalid type: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<org.dom4j.IllegalAddException: void <init>(java.lang.String)>($r5);

        throw $r3;
    }

    public void clear()
    {
        org.dom4j.tree.ContentListFacade r0;
        java.util.List $r5;
        java.util.Iterator $r1;
        org.dom4j.Node $r4;
        java.lang.Object $r2;
        org.dom4j.tree.AbstractBranch $r3;
        boolean $z0;

        r0 := @this: org.dom4j.tree.ContentListFacade;

        $r1 = virtualinvoke r0.<org.dom4j.tree.ContentListFacade: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r3 = r0.<org.dom4j.tree.ContentListFacade: org.dom4j.tree.AbstractBranch branch>;

        $r4 = virtualinvoke r0.<org.dom4j.tree.ContentListFacade: org.dom4j.Node asNode(java.lang.Object)>($r2);

        virtualinvoke $r3.<org.dom4j.tree.AbstractBranch: void childRemoved(org.dom4j.Node)>($r4);

        goto label1;

     label2:
        $r5 = r0.<org.dom4j.tree.ContentListFacade: java.util.List branchContent>;

        interfaceinvoke $r5.<java.util.List: void clear()>();

        return;
    }

    public boolean contains(java.lang.Object)
    {
        org.dom4j.tree.ContentListFacade r0;
        java.util.List $r2;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: org.dom4j.tree.ContentListFacade;

        $r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.dom4j.tree.ContentListFacade: java.util.List branchContent>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>($r1);

        return $z0;
    }

    public boolean containsAll(java.util.Collection)
    {
        org.dom4j.tree.ContentListFacade r0;
        java.util.List $r2;
        java.util.Collection $r1;
        boolean $z0;

        r0 := @this: org.dom4j.tree.ContentListFacade;

        $r1 := @parameter0: java.util.Collection;

        $r2 = r0.<org.dom4j.tree.ContentListFacade: java.util.List branchContent>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean containsAll(java.util.Collection)>($r1);

        return $z0;
    }

    public java.lang.Object get(int)
    {
        org.dom4j.tree.ContentListFacade r0;
        java.util.List $r2;
        int $i0;
        java.lang.Object $r1;

        r0 := @this: org.dom4j.tree.ContentListFacade;

        $i0 := @parameter0: int;

        $r2 = r0.<org.dom4j.tree.ContentListFacade: java.util.List branchContent>;

        $r1 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i0);

        return $r1;
    }

    protected java.util.List getBackingList()
    {
        org.dom4j.tree.ContentListFacade r0;
        java.util.List r1;

        r0 := @this: org.dom4j.tree.ContentListFacade;

        r1 = r0.<org.dom4j.tree.ContentListFacade: java.util.List branchContent>;

        return r1;
    }

    public int indexOf(java.lang.Object)
    {
        org.dom4j.tree.ContentListFacade r0;
        java.util.List $r2;
        int $i0;
        java.lang.Object $r1;

        r0 := @this: org.dom4j.tree.ContentListFacade;

        $r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.dom4j.tree.ContentListFacade: java.util.List branchContent>;

        $i0 = interfaceinvoke $r2.<java.util.List: int indexOf(java.lang.Object)>($r1);

        return $i0;
    }

    public boolean isEmpty()
    {
        org.dom4j.tree.ContentListFacade r0;
        java.util.List $r1;
        boolean $z0;

        r0 := @this: org.dom4j.tree.ContentListFacade;

        $r1 = r0.<org.dom4j.tree.ContentListFacade: java.util.List branchContent>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        return $z0;
    }

    public int lastIndexOf(java.lang.Object)
    {
        org.dom4j.tree.ContentListFacade r0;
        java.util.List $r2;
        int $i0;
        java.lang.Object $r1;

        r0 := @this: org.dom4j.tree.ContentListFacade;

        $r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.dom4j.tree.ContentListFacade: java.util.List branchContent>;

        $i0 = interfaceinvoke $r2.<java.util.List: int lastIndexOf(java.lang.Object)>($r1);

        return $i0;
    }

    public java.lang.Object remove(int)
    {
        org.dom4j.tree.ContentListFacade r0;
        java.util.List $r1;
        org.dom4j.Node $r4;
        int $i0;
        java.lang.Object $r2;
        org.dom4j.tree.AbstractBranch $r3;

        r0 := @this: org.dom4j.tree.ContentListFacade;

        $i0 := @parameter0: int;

        $r1 = r0.<org.dom4j.tree.ContentListFacade: java.util.List branchContent>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object remove(int)>($i0);

        if $r2 == null goto label1;

        $r3 = r0.<org.dom4j.tree.ContentListFacade: org.dom4j.tree.AbstractBranch branch>;

        $r4 = virtualinvoke r0.<org.dom4j.tree.ContentListFacade: org.dom4j.Node asNode(java.lang.Object)>($r2);

        virtualinvoke $r3.<org.dom4j.tree.AbstractBranch: void childRemoved(org.dom4j.Node)>($r4);

     label1:
        return $r2;
    }

    public boolean remove(java.lang.Object)
    {
        org.dom4j.tree.ContentListFacade r0;
        java.util.List $r4;
        org.dom4j.Node $r3;
        java.lang.Object $r1;
        org.dom4j.tree.AbstractBranch $r2;
        boolean $z0;

        r0 := @this: org.dom4j.tree.ContentListFacade;

        $r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.dom4j.tree.ContentListFacade: org.dom4j.tree.AbstractBranch branch>;

        $r3 = virtualinvoke r0.<org.dom4j.tree.ContentListFacade: org.dom4j.Node asNode(java.lang.Object)>($r1);

        virtualinvoke $r2.<org.dom4j.tree.AbstractBranch: void childRemoved(org.dom4j.Node)>($r3);

        $r4 = r0.<org.dom4j.tree.ContentListFacade: java.util.List branchContent>;

        $z0 = interfaceinvoke $r4.<java.util.List: boolean remove(java.lang.Object)>($r1);

        return $z0;
    }

    public boolean removeAll(java.util.Collection)
    {
        java.util.Iterator $r2;
        org.dom4j.Node $r5;
        java.util.Collection $r1;
        org.dom4j.tree.ContentListFacade r0;
        java.util.List $r6;
        java.lang.Object $r3;
        org.dom4j.tree.AbstractBranch $r4;
        boolean $z0;

        r0 := @this: org.dom4j.tree.ContentListFacade;

        $r1 := @parameter0: java.util.Collection;

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = r0.<org.dom4j.tree.ContentListFacade: org.dom4j.tree.AbstractBranch branch>;

        $r5 = virtualinvoke r0.<org.dom4j.tree.ContentListFacade: org.dom4j.Node asNode(java.lang.Object)>($r3);

        virtualinvoke $r4.<org.dom4j.tree.AbstractBranch: void childRemoved(org.dom4j.Node)>($r5);

        goto label1;

     label2:
        $r6 = r0.<org.dom4j.tree.ContentListFacade: java.util.List branchContent>;

        $z0 = interfaceinvoke $r6.<java.util.List: boolean removeAll(java.util.Collection)>($r1);

        return $z0;
    }

    public java.lang.Object set(int, java.lang.Object)
    {
        org.dom4j.tree.ContentListFacade r0;
        java.util.List $r4;
        org.dom4j.Node $r3;
        int $i0;
        java.lang.Object $r1;
        org.dom4j.tree.AbstractBranch $r2;

        r0 := @this: org.dom4j.tree.ContentListFacade;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.Object;

        $r2 = r0.<org.dom4j.tree.ContentListFacade: org.dom4j.tree.AbstractBranch branch>;

        $r3 = virtualinvoke r0.<org.dom4j.tree.ContentListFacade: org.dom4j.Node asNode(java.lang.Object)>($r1);

        virtualinvoke $r2.<org.dom4j.tree.AbstractBranch: void childAdded(org.dom4j.Node)>($r3);

        $r4 = r0.<org.dom4j.tree.ContentListFacade: java.util.List branchContent>;

        $r1 = interfaceinvoke $r4.<java.util.List: java.lang.Object set(int,java.lang.Object)>($i0, $r1);

        return $r1;
    }

    public int size()
    {
        int $i0;
        org.dom4j.tree.ContentListFacade r0;
        java.util.List $r1;

        r0 := @this: org.dom4j.tree.ContentListFacade;

        $r1 = r0.<org.dom4j.tree.ContentListFacade: java.util.List branchContent>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public java.lang.Object[] toArray()
    {
        org.dom4j.tree.ContentListFacade r0;
        java.util.List $r2;
        java.lang.Object[] $r1;

        r0 := @this: org.dom4j.tree.ContentListFacade;

        $r2 = r0.<org.dom4j.tree.ContentListFacade: java.util.List branchContent>;

        $r1 = interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray()>();

        return $r1;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        org.dom4j.tree.ContentListFacade r0;
        java.util.List $r2;
        java.lang.Object[] $r1;

        r0 := @this: org.dom4j.tree.ContentListFacade;

        $r1 := @parameter0: java.lang.Object[];

        $r2 = r0.<org.dom4j.tree.ContentListFacade: java.util.List branchContent>;

        $r1 = interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r1);

        return $r1;
    }
}
