class proguard.optimize.evaluation.TracedBranchUnit extends proguard.evaluation.BasicBranchUnit
{

    void <init>()
    {
        proguard.optimize.evaluation.TracedBranchUnit r0;

        r0 := @this: proguard.optimize.evaluation.TracedBranchUnit;

        specialinvoke r0.<proguard.evaluation.BasicBranchUnit: void <init>()>();

        return;
    }

    public void branchConditionally(proguard.classfile.Clazz, proguard.classfile.attribute.CodeAttribute, int, int, int)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r2;
        int $i0, $i1, $i2;
        proguard.optimize.evaluation.TracedBranchUnit r0;

        r0 := @this: proguard.optimize.evaluation.TracedBranchUnit;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        if $i2 != 1 goto label1;

        specialinvoke r0.<proguard.evaluation.BasicBranchUnit: void branch(proguard.classfile.Clazz,proguard.classfile.attribute.CodeAttribute,int,int)>($r1, $r2, $i0, $i1);

        return;

     label1:
        if $i2 == -1 goto label2;

        specialinvoke r0.<proguard.evaluation.BasicBranchUnit: void branchConditionally(proguard.classfile.Clazz,proguard.classfile.attribute.CodeAttribute,int,int,int)>($r1, $r2, $i0, $i1, $i2);

        return;

     label2:
        specialinvoke r0.<proguard.evaluation.BasicBranchUnit: void setCalled()>();

        return;
    }
}
