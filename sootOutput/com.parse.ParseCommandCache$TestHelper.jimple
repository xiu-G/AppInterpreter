public class com.parse.ParseCommandCache$TestHelper extends java.lang.Object
{
    public static final int COMMAND_ENQUEUED;
    public static final int COMMAND_FAILED;
    public static final int COMMAND_NOT_ENQUEUED;
    public static final int COMMAND_SUCCESSFUL;
    private static final int MAX_EVENTS;
    private java.util.HashMap events;
    final com.parse.ParseCommandCache this$0;

    private void <init>(com.parse.ParseCommandCache)
    {
        com.parse.ParseCommandCache $r1;
        java.util.HashMap $r2;
        com.parse.ParseCommandCache$TestHelper r0;

        r0 := @this: com.parse.ParseCommandCache$TestHelper;

        $r1 := @parameter0: com.parse.ParseCommandCache;

        r0.<com.parse.ParseCommandCache$TestHelper: com.parse.ParseCommandCache this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<com.parse.ParseCommandCache$TestHelper: java.util.HashMap events> = $r2;

        virtualinvoke r0.<com.parse.ParseCommandCache$TestHelper: void clear()>();

        return;
    }

    void <init>(com.parse.ParseCommandCache, com.parse.n)
    {
        com.parse.n $r2;
        com.parse.ParseCommandCache $r1;
        com.parse.ParseCommandCache$TestHelper r0;

        r0 := @this: com.parse.ParseCommandCache$TestHelper;

        $r1 := @parameter0: com.parse.ParseCommandCache;

        $r2 := @parameter1: com.parse.n;

        specialinvoke r0.<com.parse.ParseCommandCache$TestHelper: void <init>(com.parse.ParseCommandCache)>($r1);

        return;
    }

    public void clear()
    {
        java.util.Iterator $r5;
        java.util.concurrent.Semaphore $r3;
        java.util.Set $r4;
        java.util.HashMap $r1;
        java.lang.Integer $r2;
        int $i0;
        java.lang.Object $r6;
        com.parse.ParseCommandCache$TestHelper r0;
        boolean $z0;

        r0 := @this: com.parse.ParseCommandCache$TestHelper;

        $r1 = r0.<com.parse.ParseCommandCache$TestHelper: java.util.HashMap events>;

        virtualinvoke $r1.<java.util.HashMap: void clear()>();

        $r1 = r0.<com.parse.ParseCommandCache$TestHelper: java.util.HashMap events>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r3 = new java.util.concurrent.Semaphore;

        specialinvoke $r3.<java.util.concurrent.Semaphore: void <init>(int)>(1000);

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r3);

        $r1 = r0.<com.parse.ParseCommandCache$TestHelper: java.util.HashMap events>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r3 = new java.util.concurrent.Semaphore;

        specialinvoke $r3.<java.util.concurrent.Semaphore: void <init>(int)>(1000);

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r3);

        $r1 = r0.<com.parse.ParseCommandCache$TestHelper: java.util.HashMap events>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r3 = new java.util.concurrent.Semaphore;

        specialinvoke $r3.<java.util.concurrent.Semaphore: void <init>(int)>(1000);

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r3);

        $r1 = r0.<com.parse.ParseCommandCache$TestHelper: java.util.HashMap events>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r3 = new java.util.concurrent.Semaphore;

        specialinvoke $r3.<java.util.concurrent.Semaphore: void <init>(int)>(1000);

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r3);

        $r1 = r0.<com.parse.ParseCommandCache$TestHelper: java.util.HashMap events>;

        $r4 = virtualinvoke $r1.<java.util.HashMap: java.util.Set keySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r2 = (java.lang.Integer) $r6;

        $i0 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();

        $r1 = r0.<com.parse.ParseCommandCache$TestHelper: java.util.HashMap events>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r6 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r2);

        $r3 = (java.util.concurrent.Semaphore) $r6;

        virtualinvoke $r3.<java.util.concurrent.Semaphore: void acquireUninterruptibly(int)>(1000);

        goto label1;

     label2:
        return;
    }

    public void notify(int)
    {
        java.util.concurrent.Semaphore $r4;
        int $i0;
        java.util.HashMap $r1;
        java.lang.Object $r3;
        java.lang.Integer $r2;
        com.parse.ParseCommandCache$TestHelper r0;

        r0 := @this: com.parse.ParseCommandCache$TestHelper;

        $i0 := @parameter0: int;

        $r1 = r0.<com.parse.ParseCommandCache$TestHelper: java.util.HashMap events>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r2);

        $r4 = (java.util.concurrent.Semaphore) $r3;

        virtualinvoke $r4.<java.util.concurrent.Semaphore: void release()>();

        return;
    }

    public int unexpectedEvents()
    {
        java.util.Iterator $r3;
        java.util.concurrent.Semaphore $r6;
        java.util.Set $r2;
        java.util.HashMap $r1;
        java.lang.Integer $r5;
        int $i0, $i1;
        java.lang.Object $r4;
        com.parse.ParseCommandCache$TestHelper r0;
        boolean $z0;

        r0 := @this: com.parse.ParseCommandCache$TestHelper;

        $r1 = r0.<com.parse.ParseCommandCache$TestHelper: java.util.HashMap events>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        $i0 = 0;

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.lang.Integer) $r4;

        $i1 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        $r1 = r0.<com.parse.ParseCommandCache$TestHelper: java.util.HashMap events>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r4 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r5);

        $r6 = (java.util.concurrent.Semaphore) $r4;

        $i1 = virtualinvoke $r6.<java.util.concurrent.Semaphore: int availablePermits()>();

        $i0 = $i1 + $i0;

        goto label1;

     label2:
        return $i0;
    }

    public boolean waitFor(int)
    {
        java.lang.Throwable $r6;
        java.util.concurrent.Semaphore $r5;
        java.util.HashMap $r2;
        java.lang.Integer $r3;
        java.util.concurrent.TimeUnit $r1;
        java.lang.InterruptedException $r7;
        int $i0;
        java.lang.Object $r4;
        com.parse.ParseCommandCache$TestHelper r0;
        boolean $z0;

        r0 := @this: com.parse.ParseCommandCache$TestHelper;

        $i0 := @parameter0: int;

        $r2 = r0.<com.parse.ParseCommandCache$TestHelper: java.util.HashMap events>;

     label1:
        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r3);

     label2:
        $r5 = (java.util.concurrent.Semaphore) $r4;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

     label3:
        $z0 = virtualinvoke $r5.<java.util.concurrent.Semaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)>(5000L, $r1);

     label4:
        return $z0;

     label5:
        $r6 := @caughtexception;

        $r7 = (java.lang.InterruptedException) $r6;

        virtualinvoke $r7.<java.lang.InterruptedException: void printStackTrace()>();

        return 0;

        catch java.lang.InterruptedException from label1 to label2 with label5;
        catch java.lang.InterruptedException from label3 to label4 with label5;
    }

    public static void <clinit>()
    {
        <com.parse.ParseCommandCache$TestHelper: int MAX_EVENTS> = 1000;

        <com.parse.ParseCommandCache$TestHelper: int COMMAND_SUCCESSFUL> = 1;

        <com.parse.ParseCommandCache$TestHelper: int COMMAND_NOT_ENQUEUED> = 4;

        <com.parse.ParseCommandCache$TestHelper: int COMMAND_FAILED> = 2;

        <com.parse.ParseCommandCache$TestHelper: int COMMAND_ENQUEUED> = 3;

        return;
    }
}
