public class com.qitu.app.QituApp extends android.app.Application
{
    public static int a;
    public static boolean b;
    private static android.content.Context c;

    static void <clinit>()
    {
        <com.qitu.app.QituApp: int a> = 0;

        <com.qitu.app.QituApp: boolean b> = 0;

        return;
    }

    public void <init>()
    {
        com.qitu.app.QituApp r0;

        r0 := @this: com.qitu.app.QituApp;

        specialinvoke r0.<android.app.Application: void <init>()>();

        return;
    }

    public static android.content.Context a()
    {
        android.content.Context r0;

        r0 = <com.qitu.app.QituApp: android.content.Context c>;

        return r0;
    }

    public void onCreate()
    {
        android.content.Context $r1;
        com.nostra13.universalimageloader.core.ImageLoaderConfiguration$Builder $r2;
        com.nostra13.universalimageloader.cache.disc.naming.Md5FileNameGenerator $r3;
        com.qitu.app.QituApp r0;
        com.nostra13.universalimageloader.core.ImageLoaderConfiguration $r5;
        com.nostra13.universalimageloader.core.ImageLoader $r6;
        com.nostra13.universalimageloader.core.assist.QueueProcessingType $r4;

        r0 := @this: com.qitu.app.QituApp;

        $r1 = virtualinvoke r0.<com.qitu.app.QituApp: android.content.Context getApplicationContext()>();

        $r2 = new com.nostra13.universalimageloader.core.ImageLoaderConfiguration$Builder;

        specialinvoke $r2.<com.nostra13.universalimageloader.core.ImageLoaderConfiguration$Builder: void <init>(android.content.Context)>($r1);

        $r2 = virtualinvoke $r2.<com.nostra13.universalimageloader.core.ImageLoaderConfiguration$Builder: com.nostra13.universalimageloader.core.ImageLoaderConfiguration$Builder threadPriority(int)>(3);

        $r2 = virtualinvoke $r2.<com.nostra13.universalimageloader.core.ImageLoaderConfiguration$Builder: com.nostra13.universalimageloader.core.ImageLoaderConfiguration$Builder denyCacheImageMultipleSizesInMemory()>();

        $r3 = new com.nostra13.universalimageloader.cache.disc.naming.Md5FileNameGenerator;

        specialinvoke $r3.<com.nostra13.universalimageloader.cache.disc.naming.Md5FileNameGenerator: void <init>()>();

        $r2 = virtualinvoke $r2.<com.nostra13.universalimageloader.core.ImageLoaderConfiguration$Builder: com.nostra13.universalimageloader.core.ImageLoaderConfiguration$Builder diskCacheFileNameGenerator(com.nostra13.universalimageloader.cache.disc.naming.FileNameGenerator)>($r3);

        $r2 = virtualinvoke $r2.<com.nostra13.universalimageloader.core.ImageLoaderConfiguration$Builder: com.nostra13.universalimageloader.core.ImageLoaderConfiguration$Builder diskCacheSize(int)>(52428800);

        $r4 = <com.nostra13.universalimageloader.core.assist.QueueProcessingType: com.nostra13.universalimageloader.core.assist.QueueProcessingType LIFO>;

        $r2 = virtualinvoke $r2.<com.nostra13.universalimageloader.core.ImageLoaderConfiguration$Builder: com.nostra13.universalimageloader.core.ImageLoaderConfiguration$Builder tasksProcessingOrder(com.nostra13.universalimageloader.core.assist.QueueProcessingType)>($r4);

        $r2 = virtualinvoke $r2.<com.nostra13.universalimageloader.core.ImageLoaderConfiguration$Builder: com.nostra13.universalimageloader.core.ImageLoaderConfiguration$Builder writeDebugLogs()>();

        $r5 = virtualinvoke $r2.<com.nostra13.universalimageloader.core.ImageLoaderConfiguration$Builder: com.nostra13.universalimageloader.core.ImageLoaderConfiguration build()>();

        $r6 = staticinvoke <com.nostra13.universalimageloader.core.ImageLoader: com.nostra13.universalimageloader.core.ImageLoader getInstance()>();

        virtualinvoke $r6.<com.nostra13.universalimageloader.core.ImageLoader: void init(com.nostra13.universalimageloader.core.ImageLoaderConfiguration)>($r5);

        <com.qitu.app.QituApp: android.content.Context c> = r0;

        return;
    }

    public void onTerminate()
    {
        com.qitu.app.QituApp r0;

        r0 := @this: com.qitu.app.QituApp;

        specialinvoke r0.<android.app.Application: void onTerminate()>();

        return;
    }
}
