public class com.parse.entity.mime.HttpMultipart extends java.lang.Object
{
    private static final org.apache.http.util.ByteArrayBuffer CR_LF;
    private static final org.apache.http.util.ByteArrayBuffer FIELD_SEP;
    private static final org.apache.http.util.ByteArrayBuffer TWO_DASHES;
    private final java.lang.String boundary;
    private final java.nio.charset.Charset charset;
    private final com.parse.entity.mime.HttpMultipartMode mode;
    private final java.util.List parts;
    private final java.lang.String subType;

    static void <clinit>()
    {
        java.nio.charset.Charset $r0;
        org.apache.http.util.ByteArrayBuffer $r1;

        $r0 = <com.parse.entity.mime.MIME: java.nio.charset.Charset DEFAULT_CHARSET>;

        $r1 = staticinvoke <com.parse.entity.mime.HttpMultipart: org.apache.http.util.ByteArrayBuffer encode(java.nio.charset.Charset,java.lang.String)>($r0, ": ");

        <com.parse.entity.mime.HttpMultipart: org.apache.http.util.ByteArrayBuffer FIELD_SEP> = $r1;

        $r0 = <com.parse.entity.mime.MIME: java.nio.charset.Charset DEFAULT_CHARSET>;

        $r1 = staticinvoke <com.parse.entity.mime.HttpMultipart: org.apache.http.util.ByteArrayBuffer encode(java.nio.charset.Charset,java.lang.String)>($r0, "\r\n");

        <com.parse.entity.mime.HttpMultipart: org.apache.http.util.ByteArrayBuffer CR_LF> = $r1;

        $r0 = <com.parse.entity.mime.MIME: java.nio.charset.Charset DEFAULT_CHARSET>;

        $r1 = staticinvoke <com.parse.entity.mime.HttpMultipart: org.apache.http.util.ByteArrayBuffer encode(java.nio.charset.Charset,java.lang.String)>($r0, "--");

        <com.parse.entity.mime.HttpMultipart: org.apache.http.util.ByteArrayBuffer TWO_DASHES> = $r1;

        return;
    }

    public void <init>(java.lang.String, java.lang.String)
    {
        com.parse.entity.mime.HttpMultipart r0;
        java.lang.String $r1, $r2;

        r0 := @this: com.parse.entity.mime.HttpMultipart;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        specialinvoke r0.<com.parse.entity.mime.HttpMultipart: void <init>(java.lang.String,java.nio.charset.Charset,java.lang.String)>($r1, null, $r2);

        return;
    }

    public void <init>(java.lang.String, java.nio.charset.Charset, java.lang.String)
    {
        java.nio.charset.Charset $r2;
        com.parse.entity.mime.HttpMultipart r0;
        java.lang.String $r1, $r3;
        com.parse.entity.mime.HttpMultipartMode $r4;

        r0 := @this: com.parse.entity.mime.HttpMultipart;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.nio.charset.Charset;

        $r3 := @parameter2: java.lang.String;

        $r4 = <com.parse.entity.mime.HttpMultipartMode: com.parse.entity.mime.HttpMultipartMode STRICT>;

        specialinvoke r0.<com.parse.entity.mime.HttpMultipart: void <init>(java.lang.String,java.nio.charset.Charset,java.lang.String,com.parse.entity.mime.HttpMultipartMode)>($r1, $r2, $r3, $r4);

        return;
    }

    public void <init>(java.lang.String, java.nio.charset.Charset, java.lang.String, com.parse.entity.mime.HttpMultipartMode)
    {
        java.nio.charset.Charset $r4;
        com.parse.entity.mime.HttpMultipart r0;
        java.lang.String $r1, $r2;
        java.lang.IllegalArgumentException $r5;
        com.parse.entity.mime.HttpMultipartMode $r3;
        java.util.ArrayList $r6;

        r0 := @this: com.parse.entity.mime.HttpMultipart;

        $r1 := @parameter0: java.lang.String;

        $r4 := @parameter1: java.nio.charset.Charset;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: com.parse.entity.mime.HttpMultipartMode;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        goto label1;

     label1:
        if $r2 != null goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Multipart boundary may not be null");

        throw $r5;

     label2:
        r0.<com.parse.entity.mime.HttpMultipart: java.lang.String subType> = "form-data";

        goto label4;

     label3:
        r0.<com.parse.entity.mime.HttpMultipart: java.nio.charset.Charset charset> = $r4;

        r0.<com.parse.entity.mime.HttpMultipart: java.lang.String boundary> = $r2;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r0.<com.parse.entity.mime.HttpMultipart: java.util.List parts> = $r6;

        r0.<com.parse.entity.mime.HttpMultipart: com.parse.entity.mime.HttpMultipartMode mode> = $r3;

        return;

     label4:
        $r4 = <com.parse.entity.mime.MIME: java.nio.charset.Charset DEFAULT_CHARSET>;

        goto label3;
    }

    private void doWriteTo(com.parse.entity.mime.HttpMultipartMode, java.io.OutputStream, boolean)
    {
        com.parse.entity.mime.content.ContentBody $r13;
        com.parse.entity.mime.Header $r11;
        java.nio.charset.Charset $r3;
        int[] $r12;
        int $i0;
        java.lang.String $r4;
        com.parse.entity.mime.FormBodyPart $r9;
        boolean $z0, $z1;
        org.apache.http.util.ByteArrayBuffer $r5, $r10;
        java.io.OutputStream $r2;
        java.util.Iterator $r7, $r14;
        com.parse.entity.mime.MinimalField $r15;
        java.util.List $r6;
        com.parse.entity.mime.HttpMultipart r0;
        java.lang.Object $r8;
        com.parse.entity.mime.HttpMultipartMode $r1;

        r0 := @this: com.parse.entity.mime.HttpMultipart;

        $r1 := @parameter0: com.parse.entity.mime.HttpMultipartMode;

        $r2 := @parameter1: java.io.OutputStream;

        $z0 := @parameter2: boolean;

        $r3 = r0.<com.parse.entity.mime.HttpMultipart: java.nio.charset.Charset charset>;

        $r4 = virtualinvoke r0.<com.parse.entity.mime.HttpMultipart: java.lang.String getBoundary()>();

        $r5 = staticinvoke <com.parse.entity.mime.HttpMultipart: org.apache.http.util.ByteArrayBuffer encode(java.nio.charset.Charset,java.lang.String)>($r3, $r4);

        $r6 = r0.<com.parse.entity.mime.HttpMultipart: java.util.List parts>;

        $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (com.parse.entity.mime.FormBodyPart) $r8;

        $r10 = <com.parse.entity.mime.HttpMultipart: org.apache.http.util.ByteArrayBuffer TWO_DASHES>;

        staticinvoke <com.parse.entity.mime.HttpMultipart: void writeBytes(org.apache.http.util.ByteArrayBuffer,java.io.OutputStream)>($r10, $r2);

        staticinvoke <com.parse.entity.mime.HttpMultipart: void writeBytes(org.apache.http.util.ByteArrayBuffer,java.io.OutputStream)>($r5, $r2);

        $r10 = <com.parse.entity.mime.HttpMultipart: org.apache.http.util.ByteArrayBuffer CR_LF>;

        staticinvoke <com.parse.entity.mime.HttpMultipart: void writeBytes(org.apache.http.util.ByteArrayBuffer,java.io.OutputStream)>($r10, $r2);

        $r11 = virtualinvoke $r9.<com.parse.entity.mime.FormBodyPart: com.parse.entity.mime.Header getHeader()>();

        $r12 = <com.parse.entity.mime.a: int[] a>;

        $i0 = virtualinvoke $r1.<com.parse.entity.mime.HttpMultipartMode: int ordinal()>();

        $i0 = $r12[$i0];

        lookupswitch($i0)
        {
            case 1: goto label4;
            case 2: goto label6;
            default: goto label2;
        };

     label2:
        $r10 = <com.parse.entity.mime.HttpMultipart: org.apache.http.util.ByteArrayBuffer CR_LF>;

        staticinvoke <com.parse.entity.mime.HttpMultipart: void writeBytes(org.apache.http.util.ByteArrayBuffer,java.io.OutputStream)>($r10, $r2);

        if $z0 == 0 goto label3;

        $r13 = virtualinvoke $r9.<com.parse.entity.mime.FormBodyPart: com.parse.entity.mime.content.ContentBody getBody()>();

        interfaceinvoke $r13.<com.parse.entity.mime.content.ContentBody: void writeTo(java.io.OutputStream)>($r2);

     label3:
        $r10 = <com.parse.entity.mime.HttpMultipart: org.apache.http.util.ByteArrayBuffer CR_LF>;

        staticinvoke <com.parse.entity.mime.HttpMultipart: void writeBytes(org.apache.http.util.ByteArrayBuffer,java.io.OutputStream)>($r10, $r2);

        goto label1;

     label4:
        $r14 = virtualinvoke $r11.<com.parse.entity.mime.Header: java.util.Iterator iterator()>();

     label5:
        $z1 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r8 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        $r15 = (com.parse.entity.mime.MinimalField) $r8;

        staticinvoke <com.parse.entity.mime.HttpMultipart: void writeField(com.parse.entity.mime.MinimalField,java.io.OutputStream)>($r15, $r2);

        goto label5;

     label6:
        $r11 = virtualinvoke $r9.<com.parse.entity.mime.FormBodyPart: com.parse.entity.mime.Header getHeader()>();

        $r15 = virtualinvoke $r11.<com.parse.entity.mime.Header: com.parse.entity.mime.MinimalField getField(java.lang.String)>("Content-Disposition");

        $r3 = r0.<com.parse.entity.mime.HttpMultipart: java.nio.charset.Charset charset>;

        staticinvoke <com.parse.entity.mime.HttpMultipart: void writeField(com.parse.entity.mime.MinimalField,java.nio.charset.Charset,java.io.OutputStream)>($r15, $r3, $r2);

        $r13 = virtualinvoke $r9.<com.parse.entity.mime.FormBodyPart: com.parse.entity.mime.content.ContentBody getBody()>();

        $r4 = interfaceinvoke $r13.<com.parse.entity.mime.content.ContentBody: java.lang.String getFilename()>();

        if $r4 == null goto label2;

        $r11 = virtualinvoke $r9.<com.parse.entity.mime.FormBodyPart: com.parse.entity.mime.Header getHeader()>();

        $r15 = virtualinvoke $r11.<com.parse.entity.mime.Header: com.parse.entity.mime.MinimalField getField(java.lang.String)>("Content-Type");

        $r3 = r0.<com.parse.entity.mime.HttpMultipart: java.nio.charset.Charset charset>;

        staticinvoke <com.parse.entity.mime.HttpMultipart: void writeField(com.parse.entity.mime.MinimalField,java.nio.charset.Charset,java.io.OutputStream)>($r15, $r3, $r2);

        goto label2;

     label7:
        $r10 = <com.parse.entity.mime.HttpMultipart: org.apache.http.util.ByteArrayBuffer TWO_DASHES>;

        staticinvoke <com.parse.entity.mime.HttpMultipart: void writeBytes(org.apache.http.util.ByteArrayBuffer,java.io.OutputStream)>($r10, $r2);

        staticinvoke <com.parse.entity.mime.HttpMultipart: void writeBytes(org.apache.http.util.ByteArrayBuffer,java.io.OutputStream)>($r5, $r2);

        $r5 = <com.parse.entity.mime.HttpMultipart: org.apache.http.util.ByteArrayBuffer TWO_DASHES>;

        staticinvoke <com.parse.entity.mime.HttpMultipart: void writeBytes(org.apache.http.util.ByteArrayBuffer,java.io.OutputStream)>($r5, $r2);

        $r5 = <com.parse.entity.mime.HttpMultipart: org.apache.http.util.ByteArrayBuffer CR_LF>;

        staticinvoke <com.parse.entity.mime.HttpMultipart: void writeBytes(org.apache.http.util.ByteArrayBuffer,java.io.OutputStream)>($r5, $r2);

        return;
    }

    private static org.apache.http.util.ByteArrayBuffer encode(java.nio.charset.Charset, java.lang.String)
    {
        byte[] $r5;
        java.nio.CharBuffer $r3;
        java.nio.ByteBuffer $r4;
        java.nio.charset.Charset $r0;
        int $i0, $i1;
        java.lang.String $r1;
        org.apache.http.util.ByteArrayBuffer $r2;

        $r0 := @parameter0: java.nio.charset.Charset;

        $r1 := @parameter1: java.lang.String;

        $r3 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence)>($r1);

        $r4 = virtualinvoke $r0.<java.nio.charset.Charset: java.nio.ByteBuffer encode(java.nio.CharBuffer)>($r3);

        $r2 = new org.apache.http.util.ByteArrayBuffer;

        $i0 = virtualinvoke $r4.<java.nio.ByteBuffer: int remaining()>();

        specialinvoke $r2.<org.apache.http.util.ByteArrayBuffer: void <init>(int)>($i0);

        $r5 = virtualinvoke $r4.<java.nio.ByteBuffer: byte[] array()>();

        $i0 = virtualinvoke $r4.<java.nio.ByteBuffer: int position()>();

        $i1 = virtualinvoke $r4.<java.nio.ByteBuffer: int remaining()>();

        virtualinvoke $r2.<org.apache.http.util.ByteArrayBuffer: void append(byte[],int,int)>($r5, $i0, $i1);

        return $r2;
    }

    private static void writeBytes(java.lang.String, java.io.OutputStream)
    {
        java.io.OutputStream $r1;
        java.nio.charset.Charset $r3;
        java.lang.String $r0;
        org.apache.http.util.ByteArrayBuffer $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.io.OutputStream;

        $r3 = <com.parse.entity.mime.MIME: java.nio.charset.Charset DEFAULT_CHARSET>;

        $r2 = staticinvoke <com.parse.entity.mime.HttpMultipart: org.apache.http.util.ByteArrayBuffer encode(java.nio.charset.Charset,java.lang.String)>($r3, $r0);

        staticinvoke <com.parse.entity.mime.HttpMultipart: void writeBytes(org.apache.http.util.ByteArrayBuffer,java.io.OutputStream)>($r2, $r1);

        return;
    }

    private static void writeBytes(java.lang.String, java.nio.charset.Charset, java.io.OutputStream)
    {
        java.io.OutputStream $r2;
        java.nio.charset.Charset $r1;
        java.lang.String $r0;
        org.apache.http.util.ByteArrayBuffer $r3;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.nio.charset.Charset;

        $r2 := @parameter2: java.io.OutputStream;

        $r3 = staticinvoke <com.parse.entity.mime.HttpMultipart: org.apache.http.util.ByteArrayBuffer encode(java.nio.charset.Charset,java.lang.String)>($r1, $r0);

        staticinvoke <com.parse.entity.mime.HttpMultipart: void writeBytes(org.apache.http.util.ByteArrayBuffer,java.io.OutputStream)>($r3, $r2);

        return;
    }

    private static void writeBytes(org.apache.http.util.ByteArrayBuffer, java.io.OutputStream)
    {
        java.io.OutputStream $r1;
        byte[] $r2;
        int $i0;
        org.apache.http.util.ByteArrayBuffer $r0;

        $r0 := @parameter0: org.apache.http.util.ByteArrayBuffer;

        $r1 := @parameter1: java.io.OutputStream;

        $r2 = virtualinvoke $r0.<org.apache.http.util.ByteArrayBuffer: byte[] buffer()>();

        $i0 = virtualinvoke $r0.<org.apache.http.util.ByteArrayBuffer: int length()>();

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>($r2, 0, $i0);

        return;
    }

    private static void writeField(com.parse.entity.mime.MinimalField, java.io.OutputStream)
    {
        java.io.OutputStream $r1;
        com.parse.entity.mime.MinimalField $r0;
        java.lang.String $r2;
        org.apache.http.util.ByteArrayBuffer $r3;

        $r0 := @parameter0: com.parse.entity.mime.MinimalField;

        $r1 := @parameter1: java.io.OutputStream;

        $r2 = virtualinvoke $r0.<com.parse.entity.mime.MinimalField: java.lang.String getName()>();

        staticinvoke <com.parse.entity.mime.HttpMultipart: void writeBytes(java.lang.String,java.io.OutputStream)>($r2, $r1);

        $r3 = <com.parse.entity.mime.HttpMultipart: org.apache.http.util.ByteArrayBuffer FIELD_SEP>;

        staticinvoke <com.parse.entity.mime.HttpMultipart: void writeBytes(org.apache.http.util.ByteArrayBuffer,java.io.OutputStream)>($r3, $r1);

        $r2 = virtualinvoke $r0.<com.parse.entity.mime.MinimalField: java.lang.String getBody()>();

        staticinvoke <com.parse.entity.mime.HttpMultipart: void writeBytes(java.lang.String,java.io.OutputStream)>($r2, $r1);

        $r3 = <com.parse.entity.mime.HttpMultipart: org.apache.http.util.ByteArrayBuffer CR_LF>;

        staticinvoke <com.parse.entity.mime.HttpMultipart: void writeBytes(org.apache.http.util.ByteArrayBuffer,java.io.OutputStream)>($r3, $r1);

        return;
    }

    private static void writeField(com.parse.entity.mime.MinimalField, java.nio.charset.Charset, java.io.OutputStream)
    {
        java.io.OutputStream $r2;
        com.parse.entity.mime.MinimalField $r0;
        java.nio.charset.Charset $r1;
        java.lang.String $r3;
        org.apache.http.util.ByteArrayBuffer $r4;

        $r0 := @parameter0: com.parse.entity.mime.MinimalField;

        $r1 := @parameter1: java.nio.charset.Charset;

        $r2 := @parameter2: java.io.OutputStream;

        $r3 = virtualinvoke $r0.<com.parse.entity.mime.MinimalField: java.lang.String getName()>();

        staticinvoke <com.parse.entity.mime.HttpMultipart: void writeBytes(java.lang.String,java.nio.charset.Charset,java.io.OutputStream)>($r3, $r1, $r2);

        $r4 = <com.parse.entity.mime.HttpMultipart: org.apache.http.util.ByteArrayBuffer FIELD_SEP>;

        staticinvoke <com.parse.entity.mime.HttpMultipart: void writeBytes(org.apache.http.util.ByteArrayBuffer,java.io.OutputStream)>($r4, $r2);

        $r3 = virtualinvoke $r0.<com.parse.entity.mime.MinimalField: java.lang.String getBody()>();

        staticinvoke <com.parse.entity.mime.HttpMultipart: void writeBytes(java.lang.String,java.nio.charset.Charset,java.io.OutputStream)>($r3, $r1, $r2);

        $r4 = <com.parse.entity.mime.HttpMultipart: org.apache.http.util.ByteArrayBuffer CR_LF>;

        staticinvoke <com.parse.entity.mime.HttpMultipart: void writeBytes(org.apache.http.util.ByteArrayBuffer,java.io.OutputStream)>($r4, $r2);

        return;
    }

    public void addBodyPart(com.parse.entity.mime.FormBodyPart)
    {
        com.parse.entity.mime.HttpMultipart r0;
        java.util.List $r2;
        com.parse.entity.mime.FormBodyPart $r1;

        r0 := @this: com.parse.entity.mime.HttpMultipart;

        $r1 := @parameter0: com.parse.entity.mime.FormBodyPart;

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = r0.<com.parse.entity.mime.HttpMultipart: java.util.List parts>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;
    }

    public java.util.List getBodyParts()
    {
        com.parse.entity.mime.HttpMultipart r0;
        java.util.List r1;

        r0 := @this: com.parse.entity.mime.HttpMultipart;

        r1 = r0.<com.parse.entity.mime.HttpMultipart: java.util.List parts>;

        return r1;
    }

    public java.lang.String getBoundary()
    {
        com.parse.entity.mime.HttpMultipart r0;
        java.lang.String r1;

        r0 := @this: com.parse.entity.mime.HttpMultipart;

        r1 = r0.<com.parse.entity.mime.HttpMultipart: java.lang.String boundary>;

        return r1;
    }

    public java.nio.charset.Charset getCharset()
    {
        com.parse.entity.mime.HttpMultipart r0;
        java.nio.charset.Charset r1;

        r0 := @this: com.parse.entity.mime.HttpMultipart;

        r1 = r0.<com.parse.entity.mime.HttpMultipart: java.nio.charset.Charset charset>;

        return r1;
    }

    public com.parse.entity.mime.HttpMultipartMode getMode()
    {
        com.parse.entity.mime.HttpMultipart r0;
        com.parse.entity.mime.HttpMultipartMode r1;

        r0 := @this: com.parse.entity.mime.HttpMultipart;

        r1 = r0.<com.parse.entity.mime.HttpMultipart: com.parse.entity.mime.HttpMultipartMode mode>;

        return r1;
    }

    public java.lang.String getSubType()
    {
        com.parse.entity.mime.HttpMultipart r0;
        java.lang.String r1;

        r0 := @this: com.parse.entity.mime.HttpMultipart;

        r1 = r0.<com.parse.entity.mime.HttpMultipart: java.lang.String subType>;

        return r1;
    }

    public long getTotalLength()
    {
        java.lang.Throwable $r9;
        byte[] $r8;
        com.parse.entity.mime.content.ContentBody $r5;
        java.io.ByteArrayOutputStream $r6, $r10;
        long $l0, $l1;
        byte $b2;
        int $i3;
        com.parse.entity.mime.FormBodyPart $r4;
        boolean $z0;
        java.util.Iterator $r2;
        java.util.List $r1;
        com.parse.entity.mime.HttpMultipart r0;
        java.lang.Object $r3;
        com.parse.entity.mime.HttpMultipartMode $r7;

        r0 := @this: com.parse.entity.mime.HttpMultipart;

        $r1 = r0.<com.parse.entity.mime.HttpMultipart: java.util.List parts>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        $l0 = 0L;

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (com.parse.entity.mime.FormBodyPart) $r3;

        $r5 = virtualinvoke $r4.<com.parse.entity.mime.FormBodyPart: com.parse.entity.mime.content.ContentBody getBody()>();

        $l1 = interfaceinvoke $r5.<com.parse.entity.mime.content.ContentBody: long getContentLength()>();

        $b2 = $l1 cmp 0L;

        $i3 = (int) $b2;

        if $i3 < 0 goto label2;

        $l0 = $l0 + $l1;

        goto label1;

     label2:
        return -1L;

     label3:
        $r10 = new java.io.ByteArrayOutputStream;

        $r6 = $r10;

        specialinvoke $r10.<java.io.ByteArrayOutputStream: void <init>()>();

        $r7 = r0.<com.parse.entity.mime.HttpMultipart: com.parse.entity.mime.HttpMultipartMode mode>;

     label4:
        specialinvoke r0.<com.parse.entity.mime.HttpMultipart: void doWriteTo(com.parse.entity.mime.HttpMultipartMode,java.io.OutputStream,boolean)>($r7, $r6, 0);

        $r8 = virtualinvoke $r6.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label5:
        $i3 = lengthof $r8;

        $l1 = (long) $i3;

        $l0 = $l0 + $l1;

        return $l0;

     label6:
        $r9 := @caughtexception;

        return -1L;

        catch java.io.IOException from label4 to label5 with label6;
    }

    public void writeTo(java.io.OutputStream)
    {
        java.io.OutputStream $r1;
        com.parse.entity.mime.HttpMultipart r0;
        com.parse.entity.mime.HttpMultipartMode $r2;

        r0 := @this: com.parse.entity.mime.HttpMultipart;

        $r1 := @parameter0: java.io.OutputStream;

        $r2 = r0.<com.parse.entity.mime.HttpMultipart: com.parse.entity.mime.HttpMultipartMode mode>;

        specialinvoke r0.<com.parse.entity.mime.HttpMultipart: void doWriteTo(com.parse.entity.mime.HttpMultipartMode,java.io.OutputStream,boolean)>($r2, $r1, 1);

        return;
    }
}
