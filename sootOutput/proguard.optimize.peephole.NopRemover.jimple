public class proguard.optimize.peephole.NopRemover extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.instruction.visitor.InstructionVisitor
{
    private final proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor;
    private final proguard.classfile.instruction.visitor.InstructionVisitor extraInstructionVisitor;

    public void <init>(proguard.classfile.editor.CodeAttributeEditor)
    {
        proguard.optimize.peephole.NopRemover r0;
        proguard.classfile.editor.CodeAttributeEditor $r1;

        r0 := @this: proguard.optimize.peephole.NopRemover;

        $r1 := @parameter0: proguard.classfile.editor.CodeAttributeEditor;

        specialinvoke r0.<proguard.optimize.peephole.NopRemover: void <init>(proguard.classfile.editor.CodeAttributeEditor,proguard.classfile.instruction.visitor.InstructionVisitor)>($r1, null);

        return;
    }

    public void <init>(proguard.classfile.editor.CodeAttributeEditor, proguard.classfile.instruction.visitor.InstructionVisitor)
    {
        proguard.optimize.peephole.NopRemover r0;
        proguard.classfile.editor.CodeAttributeEditor $r1;
        proguard.classfile.instruction.visitor.InstructionVisitor $r2;

        r0 := @this: proguard.optimize.peephole.NopRemover;

        $r1 := @parameter0: proguard.classfile.editor.CodeAttributeEditor;

        $r2 := @parameter1: proguard.classfile.instruction.visitor.InstructionVisitor;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        r0.<proguard.optimize.peephole.NopRemover: proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor> = $r1;

        r0.<proguard.optimize.peephole.NopRemover: proguard.classfile.instruction.visitor.InstructionVisitor extraInstructionVisitor> = $r2;

        return;
    }

    public void visitAnyInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.Instruction)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.instruction.Instruction $r4;
        proguard.optimize.peephole.NopRemover r0;
        int $i0;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.optimize.peephole.NopRemover;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.Instruction;

        return;
    }

    public void visitSimpleInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.SimpleInstruction)
    {
        proguard.classfile.editor.CodeAttributeEditor $r5;
        proguard.classfile.instruction.SimpleInstruction $r4;
        proguard.classfile.instruction.visitor.InstructionVisitor $r6;
        byte $b1;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.optimize.peephole.NopRemover r0;
        int $i0;
        proguard.classfile.Method $r2;
        boolean $z0;

        r0 := @this: proguard.optimize.peephole.NopRemover;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.SimpleInstruction;

        $b1 = $r4.<proguard.classfile.instruction.SimpleInstruction: byte opcode>;

        if $b1 != 0 goto label1;

        $r5 = r0.<proguard.optimize.peephole.NopRemover: proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor>;

        $z0 = virtualinvoke $r5.<proguard.classfile.editor.CodeAttributeEditor: boolean isModified(int)>($i0);

        if $z0 != 0 goto label1;

        $r5 = r0.<proguard.optimize.peephole.NopRemover: proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor>;

        virtualinvoke $r5.<proguard.classfile.editor.CodeAttributeEditor: void deleteInstruction(int)>($i0);

        $r6 = r0.<proguard.optimize.peephole.NopRemover: proguard.classfile.instruction.visitor.InstructionVisitor extraInstructionVisitor>;

        if $r6 == null goto label1;

        $r6 = r0.<proguard.optimize.peephole.NopRemover: proguard.classfile.instruction.visitor.InstructionVisitor extraInstructionVisitor>;

        interfaceinvoke $r6.<proguard.classfile.instruction.visitor.InstructionVisitor: void visitSimpleInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.SimpleInstruction)>($r1, $r2, $r3, $i0, $r4);

     label1:
        return;
    }
}
