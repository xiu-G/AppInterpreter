public class proguard.classfile.visitor.MethodImplementationTraveler extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.visitor.MemberVisitor
{
    private final proguard.classfile.visitor.MemberVisitor memberVisitor;
    private final boolean visitInterfaceMethods;
    private final boolean visitOverridingMethods;
    private final boolean visitSuperMethods;
    private final boolean visitThisMethod;

    public void <init>(boolean, boolean, boolean, boolean, proguard.classfile.visitor.MemberVisitor)
    {
        proguard.classfile.visitor.MemberVisitor $r1;
        proguard.classfile.visitor.MethodImplementationTraveler r0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: proguard.classfile.visitor.MethodImplementationTraveler;

        $z0 := @parameter0: boolean;

        $z1 := @parameter1: boolean;

        $z2 := @parameter2: boolean;

        $z3 := @parameter3: boolean;

        $r1 := @parameter4: proguard.classfile.visitor.MemberVisitor;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        r0.<proguard.classfile.visitor.MethodImplementationTraveler: boolean visitThisMethod> = $z0;

        r0.<proguard.classfile.visitor.MethodImplementationTraveler: boolean visitSuperMethods> = $z1;

        r0.<proguard.classfile.visitor.MethodImplementationTraveler: boolean visitInterfaceMethods> = $z2;

        r0.<proguard.classfile.visitor.MethodImplementationTraveler: boolean visitOverridingMethods> = $z3;

        r0.<proguard.classfile.visitor.MethodImplementationTraveler: proguard.classfile.visitor.MemberVisitor memberVisitor> = $r1;

        return;
    }

    private boolean isSpecial(proguard.classfile.Clazz, proguard.classfile.Method)
    {
        proguard.classfile.Clazz $r1;
        int $i0;
        proguard.classfile.Method $r2;
        java.lang.String $r3;
        proguard.classfile.visitor.MethodImplementationTraveler r0;
        boolean $z0;

        r0 := @this: proguard.classfile.visitor.MethodImplementationTraveler;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $i0 = interfaceinvoke $r2.<proguard.classfile.Method: int getAccessFlags()>();

        $i0 = $i0 & 10;

        if $i0 != 0 goto label1;

        $r3 = interfaceinvoke $r2.<proguard.classfile.Method: java.lang.String getName(proguard.classfile.Clazz)>($r1);

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("<init>");

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public void visitLibraryMethod(proguard.classfile.LibraryClass, proguard.classfile.LibraryMethod)
    {
        proguard.classfile.visitor.MemberVisitor $r5;
        proguard.classfile.visitor.MethodImplementationTraveler r0;
        proguard.classfile.LibraryClass $r1;
        proguard.classfile.visitor.NamedMethodVisitor $r3;
        proguard.classfile.LibraryMethod $r2;
        java.lang.String $r6, $r7;
        proguard.classfile.visitor.MemberAccessFilter $r4;
        boolean $z0, $z1, $z2;

        r0 := @this: proguard.classfile.visitor.MethodImplementationTraveler;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        $r2 := @parameter1: proguard.classfile.LibraryMethod;

        $z0 = r0.<proguard.classfile.visitor.MethodImplementationTraveler: boolean visitThisMethod>;

        if $z0 == 0 goto label1;

        $r5 = r0.<proguard.classfile.visitor.MethodImplementationTraveler: proguard.classfile.visitor.MemberVisitor memberVisitor>;

        virtualinvoke $r2.<proguard.classfile.LibraryMethod: void accept(proguard.classfile.LibraryClass,proguard.classfile.visitor.MemberVisitor)>($r1, $r5);

     label1:
        $z0 = specialinvoke r0.<proguard.classfile.visitor.MethodImplementationTraveler: boolean isSpecial(proguard.classfile.Clazz,proguard.classfile.Method)>($r1, $r2);

        if $z0 != 0 goto label2;

        $z0 = r0.<proguard.classfile.visitor.MethodImplementationTraveler: boolean visitSuperMethods>;

        $z1 = r0.<proguard.classfile.visitor.MethodImplementationTraveler: boolean visitInterfaceMethods>;

        $z2 = r0.<proguard.classfile.visitor.MethodImplementationTraveler: boolean visitOverridingMethods>;

        $r3 = new proguard.classfile.visitor.NamedMethodVisitor;

        $r6 = virtualinvoke $r2.<proguard.classfile.LibraryMethod: java.lang.String getName(proguard.classfile.Clazz)>($r1);

        $r7 = virtualinvoke $r2.<proguard.classfile.LibraryMethod: java.lang.String getDescriptor(proguard.classfile.Clazz)>($r1);

        $r4 = new proguard.classfile.visitor.MemberAccessFilter;

        $r5 = r0.<proguard.classfile.visitor.MethodImplementationTraveler: proguard.classfile.visitor.MemberVisitor memberVisitor>;

        specialinvoke $r4.<proguard.classfile.visitor.MemberAccessFilter: void <init>(int,int,proguard.classfile.visitor.MemberVisitor)>(0, 10, $r5);

        specialinvoke $r3.<proguard.classfile.visitor.NamedMethodVisitor: void <init>(java.lang.String,java.lang.String,proguard.classfile.visitor.MemberVisitor)>($r6, $r7, $r4);

        virtualinvoke $r1.<proguard.classfile.LibraryClass: void hierarchyAccept(boolean,boolean,boolean,boolean,proguard.classfile.visitor.ClassVisitor)>(0, $z0, $z1, $z2, $r3);

     label2:
        return;
    }

    public void visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod)
    {
        proguard.classfile.visitor.MemberVisitor $r5;
        proguard.classfile.visitor.MethodImplementationTraveler r0;
        proguard.classfile.ProgramClass $r1;
        proguard.classfile.visitor.NamedMethodVisitor $r3;
        proguard.classfile.ProgramMethod $r2;
        java.lang.String $r6, $r7;
        proguard.classfile.visitor.MemberAccessFilter $r4;
        boolean $z0, $z1, $z2;

        r0 := @this: proguard.classfile.visitor.MethodImplementationTraveler;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.ProgramMethod;

        $z0 = r0.<proguard.classfile.visitor.MethodImplementationTraveler: boolean visitThisMethod>;

        if $z0 == 0 goto label1;

        $r5 = r0.<proguard.classfile.visitor.MethodImplementationTraveler: proguard.classfile.visitor.MemberVisitor memberVisitor>;

        virtualinvoke $r2.<proguard.classfile.ProgramMethod: void accept(proguard.classfile.ProgramClass,proguard.classfile.visitor.MemberVisitor)>($r1, $r5);

     label1:
        $z0 = specialinvoke r0.<proguard.classfile.visitor.MethodImplementationTraveler: boolean isSpecial(proguard.classfile.Clazz,proguard.classfile.Method)>($r1, $r2);

        if $z0 != 0 goto label2;

        $z0 = r0.<proguard.classfile.visitor.MethodImplementationTraveler: boolean visitSuperMethods>;

        $z1 = r0.<proguard.classfile.visitor.MethodImplementationTraveler: boolean visitInterfaceMethods>;

        $z2 = r0.<proguard.classfile.visitor.MethodImplementationTraveler: boolean visitOverridingMethods>;

        $r3 = new proguard.classfile.visitor.NamedMethodVisitor;

        $r6 = virtualinvoke $r2.<proguard.classfile.ProgramMethod: java.lang.String getName(proguard.classfile.Clazz)>($r1);

        $r7 = virtualinvoke $r2.<proguard.classfile.ProgramMethod: java.lang.String getDescriptor(proguard.classfile.Clazz)>($r1);

        $r4 = new proguard.classfile.visitor.MemberAccessFilter;

        $r5 = r0.<proguard.classfile.visitor.MethodImplementationTraveler: proguard.classfile.visitor.MemberVisitor memberVisitor>;

        specialinvoke $r4.<proguard.classfile.visitor.MemberAccessFilter: void <init>(int,int,proguard.classfile.visitor.MemberVisitor)>(0, 10, $r5);

        specialinvoke $r3.<proguard.classfile.visitor.NamedMethodVisitor: void <init>(java.lang.String,java.lang.String,proguard.classfile.visitor.MemberVisitor)>($r6, $r7, $r4);

        virtualinvoke $r1.<proguard.classfile.ProgramClass: void hierarchyAccept(boolean,boolean,boolean,boolean,proguard.classfile.visitor.ClassVisitor)>(0, $z0, $z1, $z2, $r3);

     label2:
        return;
    }
}
