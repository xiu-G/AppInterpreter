final class proguard.evaluation.value.ParticularLongValue extends proguard.evaluation.value.SpecificLongValue
{
    private final long value;

    public void <init>(long)
    {
        proguard.evaluation.value.ParticularLongValue r0;
        long $l0;

        r0 := @this: proguard.evaluation.value.ParticularLongValue;

        $l0 := @parameter0: long;

        specialinvoke r0.<proguard.evaluation.value.SpecificLongValue: void <init>()>();

        r0.<proguard.evaluation.value.ParticularLongValue: long value> = $l0;

        return;
    }

    public proguard.evaluation.value.LongValue add(proguard.evaluation.value.LongValue)
    {
        proguard.evaluation.value.ParticularLongValue r0;
        proguard.evaluation.value.LongValue $r1;

        r0 := @this: proguard.evaluation.value.ParticularLongValue;

        $r1 := @parameter0: proguard.evaluation.value.LongValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue add(proguard.evaluation.value.ParticularLongValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.LongValue add(proguard.evaluation.value.ParticularLongValue)
    {
        proguard.evaluation.value.ParticularLongValue r0, $r1, $r2;
        long $l0, $l1;

        r0 := @this: proguard.evaluation.value.ParticularLongValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularLongValue;

        $r2 = new proguard.evaluation.value.ParticularLongValue;

        $l1 = r0.<proguard.evaluation.value.ParticularLongValue: long value>;

        $l0 = $r1.<proguard.evaluation.value.ParticularLongValue: long value>;

        $l0 = $l1 + $l0;

        specialinvoke $r2.<proguard.evaluation.value.ParticularLongValue: void <init>(long)>($l0);

        return $r2;
    }

    public proguard.evaluation.value.LongValue and(proguard.evaluation.value.LongValue)
    {
        proguard.evaluation.value.ParticularLongValue r0;
        proguard.evaluation.value.LongValue $r1;

        r0 := @this: proguard.evaluation.value.ParticularLongValue;

        $r1 := @parameter0: proguard.evaluation.value.LongValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue and(proguard.evaluation.value.ParticularLongValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.LongValue and(proguard.evaluation.value.ParticularLongValue)
    {
        proguard.evaluation.value.ParticularLongValue r0, $r1, $r2;
        long $l0, $l1;

        r0 := @this: proguard.evaluation.value.ParticularLongValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularLongValue;

        $r2 = new proguard.evaluation.value.ParticularLongValue;

        $l1 = r0.<proguard.evaluation.value.ParticularLongValue: long value>;

        $l0 = $r1.<proguard.evaluation.value.ParticularLongValue: long value>;

        $l0 = $l1 & $l0;

        specialinvoke $r2.<proguard.evaluation.value.ParticularLongValue: void <init>(long)>($l0);

        return $r2;
    }

    public proguard.evaluation.value.IntegerValue compare(proguard.evaluation.value.LongValue)
    {
        proguard.evaluation.value.ParticularLongValue r0;
        proguard.evaluation.value.IntegerValue $r2;
        proguard.evaluation.value.LongValue $r1;

        r0 := @this: proguard.evaluation.value.ParticularLongValue;

        $r1 := @parameter0: proguard.evaluation.value.LongValue;

        $r2 = virtualinvoke $r1.<proguard.evaluation.value.LongValue: proguard.evaluation.value.IntegerValue compareReverse(proguard.evaluation.value.ParticularLongValue)>(r0);

        return $r2;
    }

    public proguard.evaluation.value.DoubleValue convertToDouble()
    {
        proguard.evaluation.value.ParticularLongValue r0;
        proguard.evaluation.value.ParticularDoubleValue $r1;
        long $l0;
        double $d0;

        r0 := @this: proguard.evaluation.value.ParticularLongValue;

        $r1 = new proguard.evaluation.value.ParticularDoubleValue;

        $l0 = r0.<proguard.evaluation.value.ParticularLongValue: long value>;

        $d0 = (double) $l0;

        specialinvoke $r1.<proguard.evaluation.value.ParticularDoubleValue: void <init>(double)>($d0);

        return $r1;
    }

    public proguard.evaluation.value.FloatValue convertToFloat()
    {
        proguard.evaluation.value.ParticularFloatValue $r1;
        proguard.evaluation.value.ParticularLongValue r0;
        float $f0;
        long $l0;

        r0 := @this: proguard.evaluation.value.ParticularLongValue;

        $r1 = new proguard.evaluation.value.ParticularFloatValue;

        $l0 = r0.<proguard.evaluation.value.ParticularLongValue: long value>;

        $f0 = (float) $l0;

        specialinvoke $r1.<proguard.evaluation.value.ParticularFloatValue: void <init>(float)>($f0);

        return $r1;
    }

    public proguard.evaluation.value.IntegerValue convertToInteger()
    {
        proguard.evaluation.value.ParticularLongValue r0;
        int $i1;
        proguard.evaluation.value.ParticularIntegerValue $r1;
        long $l0;

        r0 := @this: proguard.evaluation.value.ParticularLongValue;

        $r1 = new proguard.evaluation.value.ParticularIntegerValue;

        $l0 = r0.<proguard.evaluation.value.ParticularLongValue: long value>;

        $i1 = (int) $l0;

        specialinvoke $r1.<proguard.evaluation.value.ParticularIntegerValue: void <init>(int)>($i1);

        return $r1;
    }

    public proguard.evaluation.value.LongValue divide(proguard.evaluation.value.LongValue) throws java.lang.ArithmeticException
    {
        proguard.evaluation.value.ParticularLongValue r0;
        proguard.evaluation.value.LongValue $r1;

        r0 := @this: proguard.evaluation.value.ParticularLongValue;

        $r1 := @parameter0: proguard.evaluation.value.LongValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue divideOf(proguard.evaluation.value.ParticularLongValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.LongValue divide(proguard.evaluation.value.ParticularLongValue) throws java.lang.ArithmeticException
    {
        proguard.evaluation.value.ParticularLongValue r0, $r1, $r2;
        long $l0, $l1;

        r0 := @this: proguard.evaluation.value.ParticularLongValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularLongValue;

        $r2 = new proguard.evaluation.value.ParticularLongValue;

        $l1 = r0.<proguard.evaluation.value.ParticularLongValue: long value>;

        $l0 = $r1.<proguard.evaluation.value.ParticularLongValue: long value>;

        $l0 = $l1 / $l0;

        specialinvoke $r2.<proguard.evaluation.value.ParticularLongValue: void <init>(long)>($l0);

        return $r2;
    }

    public proguard.evaluation.value.LongValue divideOf(proguard.evaluation.value.LongValue) throws java.lang.ArithmeticException
    {
        proguard.evaluation.value.ParticularLongValue r0;
        proguard.evaluation.value.LongValue $r1;

        r0 := @this: proguard.evaluation.value.ParticularLongValue;

        $r1 := @parameter0: proguard.evaluation.value.LongValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue divide(proguard.evaluation.value.ParticularLongValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.LongValue divideOf(proguard.evaluation.value.ParticularLongValue) throws java.lang.ArithmeticException
    {
        proguard.evaluation.value.ParticularLongValue r0, $r1, $r2;
        long $l0, $l1;

        r0 := @this: proguard.evaluation.value.ParticularLongValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularLongValue;

        $r2 = new proguard.evaluation.value.ParticularLongValue;

        $l1 = $r1.<proguard.evaluation.value.ParticularLongValue: long value>;

        $l0 = r0.<proguard.evaluation.value.ParticularLongValue: long value>;

        $l0 = $l1 / $l0;

        specialinvoke $r2.<proguard.evaluation.value.ParticularLongValue: void <init>(long)>($l0);

        return $r2;
    }

    public boolean equals(java.lang.Object)
    {
        byte $b2;
        proguard.evaluation.value.ParticularLongValue r0;
        long $l0, $l1;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: proguard.evaluation.value.ParticularLongValue;

        $r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<proguard.evaluation.value.SpecificLongValue: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $l1 = r0.<proguard.evaluation.value.ParticularLongValue: long value>;

        r0 = (proguard.evaluation.value.ParticularLongValue) $r1;

        $l0 = r0.<proguard.evaluation.value.ParticularLongValue: long value>;

        $b2 = $l1 cmp $l0;

        if $b2 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public proguard.evaluation.value.LongValue generalize(proguard.evaluation.value.LongValue)
    {
        proguard.evaluation.value.ParticularLongValue r0;
        proguard.evaluation.value.LongValue $r1;

        r0 := @this: proguard.evaluation.value.ParticularLongValue;

        $r1 := @parameter0: proguard.evaluation.value.LongValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue generalize(proguard.evaluation.value.ParticularLongValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.LongValue generalize(proguard.evaluation.value.ParticularLongValue)
    {
        proguard.evaluation.value.ParticularLongValue r0, $r1;
        proguard.evaluation.value.LongValue $r2;

        r0 := @this: proguard.evaluation.value.ParticularLongValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularLongValue;

        $r2 = virtualinvoke r0.<proguard.evaluation.value.ParticularLongValue: proguard.evaluation.value.LongValue generalize(proguard.evaluation.value.SpecificLongValue)>($r1);

        return $r2;
    }

    public int hashCode()
    {
        proguard.evaluation.value.ParticularLongValue r0;
        int $i0, $i2;
        java.lang.Class $r1;
        long $l1;

        r0 := @this: proguard.evaluation.value.ParticularLongValue;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $l1 = r0.<proguard.evaluation.value.ParticularLongValue: long value>;

        $i2 = (int) $l1;

        $i0 = $i0 ^ $i2;

        return $i0;
    }

    public boolean isParticular()
    {
        proguard.evaluation.value.ParticularLongValue r0;

        r0 := @this: proguard.evaluation.value.ParticularLongValue;

        return 1;
    }

    public proguard.evaluation.value.LongValue multiply(proguard.evaluation.value.LongValue)
    {
        proguard.evaluation.value.ParticularLongValue r0;
        proguard.evaluation.value.LongValue $r1;

        r0 := @this: proguard.evaluation.value.ParticularLongValue;

        $r1 := @parameter0: proguard.evaluation.value.LongValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue multiply(proguard.evaluation.value.ParticularLongValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.LongValue multiply(proguard.evaluation.value.ParticularLongValue)
    {
        proguard.evaluation.value.ParticularLongValue r0, $r1, $r2;
        long $l0, $l1;

        r0 := @this: proguard.evaluation.value.ParticularLongValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularLongValue;

        $r2 = new proguard.evaluation.value.ParticularLongValue;

        $l1 = r0.<proguard.evaluation.value.ParticularLongValue: long value>;

        $l0 = $r1.<proguard.evaluation.value.ParticularLongValue: long value>;

        $l0 = $l1 * $l0;

        specialinvoke $r2.<proguard.evaluation.value.ParticularLongValue: void <init>(long)>($l0);

        return $r2;
    }

    public proguard.evaluation.value.LongValue negate()
    {
        proguard.evaluation.value.ParticularLongValue r0, $r1;
        long $l0;

        r0 := @this: proguard.evaluation.value.ParticularLongValue;

        $r1 = new proguard.evaluation.value.ParticularLongValue;

        $l0 = r0.<proguard.evaluation.value.ParticularLongValue: long value>;

        $l0 = neg $l0;

        specialinvoke $r1.<proguard.evaluation.value.ParticularLongValue: void <init>(long)>($l0);

        return $r1;
    }

    public proguard.evaluation.value.LongValue or(proguard.evaluation.value.LongValue)
    {
        proguard.evaluation.value.ParticularLongValue r0;
        proguard.evaluation.value.LongValue $r1;

        r0 := @this: proguard.evaluation.value.ParticularLongValue;

        $r1 := @parameter0: proguard.evaluation.value.LongValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue or(proguard.evaluation.value.ParticularLongValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.LongValue or(proguard.evaluation.value.ParticularLongValue)
    {
        proguard.evaluation.value.ParticularLongValue r0, $r1, $r2;
        long $l0, $l1;

        r0 := @this: proguard.evaluation.value.ParticularLongValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularLongValue;

        $r2 = new proguard.evaluation.value.ParticularLongValue;

        $l1 = r0.<proguard.evaluation.value.ParticularLongValue: long value>;

        $l0 = $r1.<proguard.evaluation.value.ParticularLongValue: long value>;

        $l0 = $l1 | $l0;

        specialinvoke $r2.<proguard.evaluation.value.ParticularLongValue: void <init>(long)>($l0);

        return $r2;
    }

    public proguard.evaluation.value.LongValue remainder(proguard.evaluation.value.LongValue) throws java.lang.ArithmeticException
    {
        proguard.evaluation.value.ParticularLongValue r0;
        proguard.evaluation.value.LongValue $r1;

        r0 := @this: proguard.evaluation.value.ParticularLongValue;

        $r1 := @parameter0: proguard.evaluation.value.LongValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue remainderOf(proguard.evaluation.value.ParticularLongValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.LongValue remainder(proguard.evaluation.value.ParticularLongValue) throws java.lang.ArithmeticException
    {
        proguard.evaluation.value.ParticularLongValue r0, $r1, $r2;
        long $l0, $l1;

        r0 := @this: proguard.evaluation.value.ParticularLongValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularLongValue;

        $r2 = new proguard.evaluation.value.ParticularLongValue;

        $l1 = r0.<proguard.evaluation.value.ParticularLongValue: long value>;

        $l0 = $r1.<proguard.evaluation.value.ParticularLongValue: long value>;

        $l0 = $l1 % $l0;

        specialinvoke $r2.<proguard.evaluation.value.ParticularLongValue: void <init>(long)>($l0);

        return $r2;
    }

    public proguard.evaluation.value.LongValue remainderOf(proguard.evaluation.value.LongValue) throws java.lang.ArithmeticException
    {
        proguard.evaluation.value.ParticularLongValue r0;
        proguard.evaluation.value.LongValue $r1;

        r0 := @this: proguard.evaluation.value.ParticularLongValue;

        $r1 := @parameter0: proguard.evaluation.value.LongValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue remainder(proguard.evaluation.value.ParticularLongValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.LongValue remainderOf(proguard.evaluation.value.ParticularLongValue) throws java.lang.ArithmeticException
    {
        proguard.evaluation.value.ParticularLongValue r0, $r1, $r2;
        long $l0, $l1;

        r0 := @this: proguard.evaluation.value.ParticularLongValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularLongValue;

        $r2 = new proguard.evaluation.value.ParticularLongValue;

        $l1 = $r1.<proguard.evaluation.value.ParticularLongValue: long value>;

        $l0 = r0.<proguard.evaluation.value.ParticularLongValue: long value>;

        $l0 = $l1 % $l0;

        specialinvoke $r2.<proguard.evaluation.value.ParticularLongValue: void <init>(long)>($l0);

        return $r2;
    }

    public proguard.evaluation.value.LongValue shiftLeft(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.ParticularLongValue r0;
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.LongValue $r2;

        r0 := @this: proguard.evaluation.value.ParticularLongValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        $r2 = virtualinvoke $r1.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.LongValue shiftLeftOf(proguard.evaluation.value.ParticularLongValue)>(r0);

        return $r2;
    }

    public proguard.evaluation.value.LongValue shiftLeft(proguard.evaluation.value.ParticularIntegerValue)
    {
        proguard.evaluation.value.ParticularLongValue r0, $r2;
        int $i0;
        proguard.evaluation.value.ParticularIntegerValue $r1;
        long $l1;

        r0 := @this: proguard.evaluation.value.ParticularLongValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularIntegerValue;

        $r2 = new proguard.evaluation.value.ParticularLongValue;

        $l1 = r0.<proguard.evaluation.value.ParticularLongValue: long value>;

        $i0 = virtualinvoke $r1.<proguard.evaluation.value.ParticularIntegerValue: int value()>();

        $l1 = $l1 << $i0;

        specialinvoke $r2.<proguard.evaluation.value.ParticularLongValue: void <init>(long)>($l1);

        return $r2;
    }

    public proguard.evaluation.value.LongValue shiftRight(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.ParticularLongValue r0;
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.LongValue $r2;

        r0 := @this: proguard.evaluation.value.ParticularLongValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        $r2 = virtualinvoke $r1.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.LongValue shiftRightOf(proguard.evaluation.value.ParticularLongValue)>(r0);

        return $r2;
    }

    public proguard.evaluation.value.LongValue shiftRight(proguard.evaluation.value.ParticularIntegerValue)
    {
        proguard.evaluation.value.ParticularLongValue r0, $r2;
        int $i0;
        proguard.evaluation.value.ParticularIntegerValue $r1;
        long $l1;

        r0 := @this: proguard.evaluation.value.ParticularLongValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularIntegerValue;

        $r2 = new proguard.evaluation.value.ParticularLongValue;

        $l1 = r0.<proguard.evaluation.value.ParticularLongValue: long value>;

        $i0 = virtualinvoke $r1.<proguard.evaluation.value.ParticularIntegerValue: int value()>();

        $l1 = $l1 >> $i0;

        specialinvoke $r2.<proguard.evaluation.value.ParticularLongValue: void <init>(long)>($l1);

        return $r2;
    }

    public proguard.evaluation.value.LongValue subtract(proguard.evaluation.value.LongValue)
    {
        proguard.evaluation.value.ParticularLongValue r0;
        proguard.evaluation.value.LongValue $r1;

        r0 := @this: proguard.evaluation.value.ParticularLongValue;

        $r1 := @parameter0: proguard.evaluation.value.LongValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue subtractFrom(proguard.evaluation.value.ParticularLongValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.LongValue subtract(proguard.evaluation.value.ParticularLongValue)
    {
        proguard.evaluation.value.ParticularLongValue r0, $r1, $r2;
        long $l0, $l1;

        r0 := @this: proguard.evaluation.value.ParticularLongValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularLongValue;

        $r2 = new proguard.evaluation.value.ParticularLongValue;

        $l1 = r0.<proguard.evaluation.value.ParticularLongValue: long value>;

        $l0 = $r1.<proguard.evaluation.value.ParticularLongValue: long value>;

        $l0 = $l1 - $l0;

        specialinvoke $r2.<proguard.evaluation.value.ParticularLongValue: void <init>(long)>($l0);

        return $r2;
    }

    public proguard.evaluation.value.LongValue subtractFrom(proguard.evaluation.value.LongValue)
    {
        proguard.evaluation.value.ParticularLongValue r0;
        proguard.evaluation.value.LongValue $r1;

        r0 := @this: proguard.evaluation.value.ParticularLongValue;

        $r1 := @parameter0: proguard.evaluation.value.LongValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue subtract(proguard.evaluation.value.ParticularLongValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.LongValue subtractFrom(proguard.evaluation.value.ParticularLongValue)
    {
        proguard.evaluation.value.ParticularLongValue r0, $r1, $r2;
        long $l0, $l1;

        r0 := @this: proguard.evaluation.value.ParticularLongValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularLongValue;

        $r2 = new proguard.evaluation.value.ParticularLongValue;

        $l1 = $r1.<proguard.evaluation.value.ParticularLongValue: long value>;

        $l0 = r0.<proguard.evaluation.value.ParticularLongValue: long value>;

        $l0 = $l1 - $l0;

        specialinvoke $r2.<proguard.evaluation.value.ParticularLongValue: void <init>(long)>($l0);

        return $r2;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuffer $r1;
        proguard.evaluation.value.ParticularLongValue r0;
        long $l0;
        java.lang.String $r2;

        r0 := @this: proguard.evaluation.value.ParticularLongValue;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $l0 = r0.<proguard.evaluation.value.ParticularLongValue: long value>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>($l0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("L");

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    public proguard.evaluation.value.LongValue unsignedShiftRight(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.ParticularLongValue r0;
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.LongValue $r2;

        r0 := @this: proguard.evaluation.value.ParticularLongValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        $r2 = virtualinvoke $r1.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.LongValue unsignedShiftRightOf(proguard.evaluation.value.ParticularLongValue)>(r0);

        return $r2;
    }

    public proguard.evaluation.value.LongValue unsignedShiftRight(proguard.evaluation.value.ParticularIntegerValue)
    {
        proguard.evaluation.value.ParticularLongValue r0, $r2;
        int $i0;
        proguard.evaluation.value.ParticularIntegerValue $r1;
        long $l1;

        r0 := @this: proguard.evaluation.value.ParticularLongValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularIntegerValue;

        $r2 = new proguard.evaluation.value.ParticularLongValue;

        $l1 = r0.<proguard.evaluation.value.ParticularLongValue: long value>;

        $i0 = virtualinvoke $r1.<proguard.evaluation.value.ParticularIntegerValue: int value()>();

        $l1 = $l1 >>> $i0;

        specialinvoke $r2.<proguard.evaluation.value.ParticularLongValue: void <init>(long)>($l1);

        return $r2;
    }

    public long value()
    {
        proguard.evaluation.value.ParticularLongValue r0;
        long l0;

        r0 := @this: proguard.evaluation.value.ParticularLongValue;

        l0 = r0.<proguard.evaluation.value.ParticularLongValue: long value>;

        return l0;
    }

    public proguard.evaluation.value.LongValue xor(proguard.evaluation.value.LongValue)
    {
        proguard.evaluation.value.ParticularLongValue r0;
        proguard.evaluation.value.LongValue $r1;

        r0 := @this: proguard.evaluation.value.ParticularLongValue;

        $r1 := @parameter0: proguard.evaluation.value.LongValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue xor(proguard.evaluation.value.ParticularLongValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.LongValue xor(proguard.evaluation.value.ParticularLongValue)
    {
        proguard.evaluation.value.ParticularLongValue r0, $r1, $r2;
        long $l0, $l1;

        r0 := @this: proguard.evaluation.value.ParticularLongValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularLongValue;

        $r2 = new proguard.evaluation.value.ParticularLongValue;

        $l1 = r0.<proguard.evaluation.value.ParticularLongValue: long value>;

        $l0 = $r1.<proguard.evaluation.value.ParticularLongValue: long value>;

        $l0 = $l1 ^ $l0;

        specialinvoke $r2.<proguard.evaluation.value.ParticularLongValue: void <init>(long)>($l0);

        return $r2;
    }
}
