public abstract class proguard.classfile.instruction.SwitchInstruction extends proguard.classfile.instruction.Instruction
{
    public int defaultOffset;
    public int[] jumpOffsets;

    public void <init>()
    {
        proguard.classfile.instruction.SwitchInstruction r0;

        r0 := @this: proguard.classfile.instruction.SwitchInstruction;

        specialinvoke r0.<proguard.classfile.instruction.Instruction: void <init>()>();

        return;
    }

    public void <init>(byte, int, int[])
    {
        byte $b0;
        int[] $r1;
        int $i1;
        proguard.classfile.instruction.SwitchInstruction r0;

        r0 := @this: proguard.classfile.instruction.SwitchInstruction;

        $b0 := @parameter0: byte;

        $i1 := @parameter1: int;

        $r1 := @parameter2: int[];

        specialinvoke r0.<proguard.classfile.instruction.Instruction: void <init>()>();

        r0.<proguard.classfile.instruction.SwitchInstruction: byte opcode> = $b0;

        r0.<proguard.classfile.instruction.SwitchInstruction: int defaultOffset> = $i1;

        r0.<proguard.classfile.instruction.SwitchInstruction: int[] jumpOffsets> = $r1;

        return;
    }

    public proguard.classfile.instruction.SwitchInstruction copy(proguard.classfile.instruction.SwitchInstruction)
    {
        byte $b0;
        int[] $r2;
        int $i1;
        proguard.classfile.instruction.SwitchInstruction r0, $r1;

        r0 := @this: proguard.classfile.instruction.SwitchInstruction;

        $r1 := @parameter0: proguard.classfile.instruction.SwitchInstruction;

        $b0 = $r1.<proguard.classfile.instruction.SwitchInstruction: byte opcode>;

        r0.<proguard.classfile.instruction.SwitchInstruction: byte opcode> = $b0;

        $i1 = $r1.<proguard.classfile.instruction.SwitchInstruction: int defaultOffset>;

        r0.<proguard.classfile.instruction.SwitchInstruction: int defaultOffset> = $i1;

        $r2 = $r1.<proguard.classfile.instruction.SwitchInstruction: int[] jumpOffsets>;

        r0.<proguard.classfile.instruction.SwitchInstruction: int[] jumpOffsets> = $r2;

        return r0;
    }

    public java.lang.String toString()
    {
        int[] $r3;
        java.lang.StringBuffer $r1;
        int $i0;
        java.lang.String $r2;
        proguard.classfile.instruction.SwitchInstruction r0;

        r0 := @this: proguard.classfile.instruction.SwitchInstruction;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke r0.<proguard.classfile.instruction.SwitchInstruction: java.lang.String getName()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" (");

        $r3 = r0.<proguard.classfile.instruction.SwitchInstruction: int[] jumpOffsets>;

        $i0 = lengthof $r3;

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" offsets, default=");

        $i0 = r0.<proguard.classfile.instruction.SwitchInstruction: int defaultOffset>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    public java.lang.String toString(int)
    {
        java.lang.StringBuffer $r1;
        int $i0, $i1;
        java.lang.String $r2;
        proguard.classfile.instruction.SwitchInstruction r0;

        r0 := @this: proguard.classfile.instruction.SwitchInstruction;

        $i0 := @parameter0: int;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[");

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] ");

        $r2 = virtualinvoke r0.<proguard.classfile.instruction.SwitchInstruction: java.lang.String toString()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" (target=");

        $i1 = r0.<proguard.classfile.instruction.SwitchInstruction: int defaultOffset>;

        $i0 = $i1 + $i0;

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }
}
