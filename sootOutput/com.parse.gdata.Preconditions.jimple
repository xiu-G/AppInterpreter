public final class com.parse.gdata.Preconditions extends java.lang.Object
{

    private void <init>()
    {
        com.parse.gdata.Preconditions r0;

        r0 := @this: com.parse.gdata.Preconditions;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void checkArgument(boolean)
    {
        java.lang.IllegalArgumentException $r0;
        boolean $z0;

        $z0 := @parameter0: boolean;

        if $z0 != 0 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r0;

     label1:
        return;
    }

    public static void checkArgument(boolean, java.lang.Object)
    {
        java.lang.Object $r0;
        java.lang.String $r2;
        java.lang.IllegalArgumentException $r1;
        boolean $z0;

        $z0 := @parameter0: boolean;

        $r0 := @parameter1: java.lang.Object;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r0);

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r1;

     label1:
        return;
    }

    public static transient void checkArgument(boolean, java.lang.String, java.lang.Object[])
    {
        java.lang.Object[] $r1;
        java.lang.String $r0;
        java.lang.IllegalArgumentException $r2;
        boolean $z0;

        $z0 := @parameter0: boolean;

        $r0 := @parameter1: java.lang.String;

        $r1 := @parameter2: java.lang.Object[];

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r0 = staticinvoke <com.parse.gdata.Preconditions: java.lang.String format(java.lang.String,java.lang.Object[])>($r0, $r1);

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r2;

     label1:
        return;
    }

    public static void checkElementIndex(int, int)
    {
        int $i0, $i1;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        staticinvoke <com.parse.gdata.Preconditions: void checkElementIndex(int,int,java.lang.String)>($i0, $i1, "index");

        return;
    }

    public static void checkElementIndex(int, int, java.lang.String)
    {
        java.lang.IndexOutOfBoundsException $r3;
        java.lang.Object[] $r1;
        int $i0, $i1;
        java.lang.String $r0;
        java.lang.Integer $r2;
        boolean $z0;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0 := @parameter2: java.lang.String;

        if $i1 < 0 goto label2;

        $z0 = 1;

     label1:
        $r1 = newarray (java.lang.Object)[1];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r1[0] = $r2;

        staticinvoke <com.parse.gdata.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "negative size: %s", $r1);

        if $i0 >= 0 goto label3;

        $r3 = new java.lang.IndexOutOfBoundsException;

        $r1 = newarray (java.lang.Object)[2];

        $r1[0] = $r0;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r1[1] = $r2;

        $r0 = staticinvoke <com.parse.gdata.Preconditions: java.lang.String format(java.lang.String,java.lang.Object[])>("%s (%s) must not be negative", $r1);

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r0);

        throw $r3;

     label2:
        $z0 = 0;

        goto label1;

     label3:
        if $i0 < $i1 goto label4;

        $r3 = new java.lang.IndexOutOfBoundsException;

        $r1 = newarray (java.lang.Object)[3];

        $r1[0] = $r0;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r1[1] = $r2;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r1[2] = $r2;

        $r0 = staticinvoke <com.parse.gdata.Preconditions: java.lang.String format(java.lang.String,java.lang.Object[])>("%s (%s) must be less than size (%s)", $r1);

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r0);

        throw $r3;

     label4:
        return;
    }

    public static java.lang.Object checkNotNull(java.lang.Object)
    {
        java.lang.Object $r0;
        java.lang.NullPointerException $r1;

        $r0 := @parameter0: java.lang.Object;

        if $r0 != null goto label1;

        $r1 = new java.lang.NullPointerException;

        specialinvoke $r1.<java.lang.NullPointerException: void <init>()>();

        throw $r1;

     label1:
        return $r0;
    }

    public static java.lang.Object checkNotNull(java.lang.Object, java.lang.Object)
    {
        java.lang.Object $r0, $r1;
        java.lang.String $r3;
        java.lang.NullPointerException $r2;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        if $r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label1:
        return $r0;
    }

    public static transient java.lang.Object checkNotNull(java.lang.Object, java.lang.String, java.lang.Object[])
    {
        java.lang.Object[] $r2;
        java.lang.Object $r0;
        java.lang.String $r1;
        java.lang.NullPointerException $r3;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.Object[];

        if $r0 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        $r1 = staticinvoke <com.parse.gdata.Preconditions: java.lang.String format(java.lang.String,java.lang.Object[])>($r1, $r2);

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>($r1);

        throw $r3;

     label1:
        return $r0;
    }

    public static void checkPositionIndex(int, int)
    {
        int $i0, $i1;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        staticinvoke <com.parse.gdata.Preconditions: void checkPositionIndex(int,int,java.lang.String)>($i0, $i1, "index");

        return;
    }

    public static void checkPositionIndex(int, int, java.lang.String)
    {
        java.lang.IndexOutOfBoundsException $r3;
        java.lang.Object[] $r1;
        int $i0, $i1;
        java.lang.String $r0;
        java.lang.Integer $r2;
        boolean $z0;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0 := @parameter2: java.lang.String;

        if $i1 < 0 goto label2;

        $z0 = 1;

     label1:
        $r1 = newarray (java.lang.Object)[1];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r1[0] = $r2;

        staticinvoke <com.parse.gdata.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "negative size: %s", $r1);

        if $i0 >= 0 goto label3;

        $r3 = new java.lang.IndexOutOfBoundsException;

        $r1 = newarray (java.lang.Object)[2];

        $r1[0] = $r0;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r1[1] = $r2;

        $r0 = staticinvoke <com.parse.gdata.Preconditions: java.lang.String format(java.lang.String,java.lang.Object[])>("%s (%s) must not be negative", $r1);

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r0);

        throw $r3;

     label2:
        $z0 = 0;

        goto label1;

     label3:
        if $i0 <= $i1 goto label4;

        $r3 = new java.lang.IndexOutOfBoundsException;

        $r1 = newarray (java.lang.Object)[3];

        $r1[0] = $r0;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r1[1] = $r2;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r1[2] = $r2;

        $r0 = staticinvoke <com.parse.gdata.Preconditions: java.lang.String format(java.lang.String,java.lang.Object[])>("%s (%s) must not be greater than size (%s)", $r1);

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r0);

        throw $r3;

     label4:
        return;
    }

    public static void checkPositionIndexes(int, int, int)
    {
        java.lang.IndexOutOfBoundsException $r0;
        java.lang.Object[] $r1;
        int $i0, $i1, $i2;
        java.lang.String $r3;
        java.lang.Integer $r2;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        staticinvoke <com.parse.gdata.Preconditions: void checkPositionIndex(int,int,java.lang.String)>($i0, $i2, "start index");

        staticinvoke <com.parse.gdata.Preconditions: void checkPositionIndex(int,int,java.lang.String)>($i1, $i2, "end index");

        if $i1 >= $i0 goto label1;

        $r0 = new java.lang.IndexOutOfBoundsException;

        $r1 = newarray (java.lang.Object)[2];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r1[0] = $r2;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r1[1] = $r2;

        $r3 = staticinvoke <com.parse.gdata.Preconditions: java.lang.String format(java.lang.String,java.lang.Object[])>("end index (%s) must not be less than start index (%s)", $r1);

        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r3);

        throw $r0;

     label1:
        return;
    }

    public static void checkState(boolean)
    {
        java.lang.IllegalStateException $r0;
        boolean $z0;

        $z0 := @parameter0: boolean;

        if $z0 != 0 goto label1;

        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>()>();

        throw $r0;

     label1:
        return;
    }

    public static void checkState(boolean, java.lang.Object)
    {
        java.lang.IllegalStateException $r1;
        java.lang.Object $r0;
        java.lang.String $r2;
        boolean $z0;

        $z0 := @parameter0: boolean;

        $r0 := @parameter1: java.lang.Object;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r0);

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r2);

        throw $r1;

     label1:
        return;
    }

    public static transient void checkState(boolean, java.lang.String, java.lang.Object[])
    {
        java.lang.IllegalStateException $r2;
        java.lang.Object[] $r1;
        java.lang.String $r0;
        boolean $z0;

        $z0 := @parameter0: boolean;

        $r0 := @parameter1: java.lang.String;

        $r1 := @parameter2: java.lang.Object[];

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        $r0 = staticinvoke <com.parse.gdata.Preconditions: java.lang.String format(java.lang.String,java.lang.Object[])>($r0, $r1);

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r0);

        throw $r2;

     label1:
        return;
    }

    static transient java.lang.String format(java.lang.String, java.lang.Object[])
    {
        java.lang.Object[] $r1;
        int $i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r2, $r5;
        java.lang.Object $r4;
        java.lang.String $r0, $r3;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object[];

        $i0 = 0;

        $r5 = new java.lang.StringBuilder;

        $r2 = $r5;

        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i2 = lengthof $r1;

        $i2 = $i2 * 16;

        $i1 = $i1 + $i2;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(int)>($i1);

        $i1 = 0;

     label1:
        $i2 = lengthof $r1;

        if $i0 >= $i2 goto label2;

        $i2 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String,int)>("%s", $i1);

        $i3 = -1;

        if $i2 == $i3 goto label2;

        $r3 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>($i1, $i2);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r4 = $r1[$i0];

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $i1 = $i2 + 2;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int)>($i1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label5;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [");

        $r4 = $r1[$i0];

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $i0 = $i0 + 1;

     label3:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label4;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r4 = $r1[$i0];

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $i0 = $i0 + 1;

        goto label3;

     label4:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

     label5:
        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;
    }
}
