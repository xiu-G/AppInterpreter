abstract class twitter4j.TwitterBaseImpl extends java.lang.Object implements java.io.Serializable, twitter4j.TwitterBase, twitter4j.auth.OAuth2Support, twitter4j.auth.OAuthSupport, twitter4j.internal.http.HttpResponseListener
{
    private static final long serialVersionUID;
    protected twitter4j.auth.Authorization auth;
    protected twitter4j.conf.Configuration conf;
    protected twitter4j.internal.json.z_T4JInternalFactory factory;
    protected transient twitter4j.internal.http.HttpClientWrapper http;
    protected transient long id;
    private java.util.List rateLimitStatusListeners;
    protected transient java.lang.String screenName;

    void <init>(twitter4j.conf.Configuration, twitter4j.auth.Authorization)
    {
        twitter4j.auth.Authorization $r2;
        twitter4j.conf.Configuration $r1;
        twitter4j.TwitterBaseImpl r0;
        java.util.ArrayList $r3;

        r0 := @this: twitter4j.TwitterBaseImpl;

        $r1 := @parameter0: twitter4j.conf.Configuration;

        $r2 := @parameter1: twitter4j.auth.Authorization;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<twitter4j.TwitterBaseImpl: java.lang.String screenName> = null;

        r0.<twitter4j.TwitterBaseImpl: long id> = 0L;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>(0);

        r0.<twitter4j.TwitterBaseImpl: java.util.List rateLimitStatusListeners> = $r3;

        r0.<twitter4j.TwitterBaseImpl: twitter4j.conf.Configuration conf> = $r1;

        r0.<twitter4j.TwitterBaseImpl: twitter4j.auth.Authorization auth> = $r2;

        specialinvoke r0.<twitter4j.TwitterBaseImpl: void init()>();

        return;
    }

    private twitter4j.auth.OAuthSupport getOAuth()
    {
        twitter4j.auth.Authorization $r1;
        java.lang.IllegalStateException $r2;
        twitter4j.TwitterBaseImpl r0;
        boolean $z0;
        twitter4j.auth.OAuthSupport $r3;

        r0 := @this: twitter4j.TwitterBaseImpl;

        $r1 = r0.<twitter4j.TwitterBaseImpl: twitter4j.auth.Authorization auth>;

        $z0 = $r1 instanceof twitter4j.auth.OAuthSupport;

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("OAuth consumer key/secret combination not supplied");

        throw $r2;

     label1:
        $r1 = r0.<twitter4j.TwitterBaseImpl: twitter4j.auth.Authorization auth>;

        $r3 = (twitter4j.auth.OAuthSupport) $r1;

        return $r3;
    }

    private twitter4j.auth.OAuth2Support getOAuth2()
    {
        twitter4j.auth.Authorization $r1;
        java.lang.IllegalStateException $r2;
        twitter4j.auth.OAuth2Support $r3;
        twitter4j.TwitterBaseImpl r0;
        boolean $z0;

        r0 := @this: twitter4j.TwitterBaseImpl;

        $r1 = r0.<twitter4j.TwitterBaseImpl: twitter4j.auth.Authorization auth>;

        $z0 = $r1 instanceof twitter4j.auth.OAuth2Support;

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("OAuth consumer key/secret combination not supplied");

        throw $r2;

     label1:
        $r1 = r0.<twitter4j.TwitterBaseImpl: twitter4j.auth.Authorization auth>;

        $r3 = (twitter4j.auth.OAuth2Support) $r1;

        return $r3;
    }

    private void init()
    {
        twitter4j.auth.Authorization $r1;
        twitter4j.auth.OAuth2Token $r6;
        twitter4j.internal.http.HttpClientWrapper $r7;
        twitter4j.auth.OAuth2Authorization $r5;
        twitter4j.auth.OAuthAuthorization $r8;
        twitter4j.auth.NullAuthorization $r10;
        twitter4j.conf.Configuration $r2;
        twitter4j.auth.AccessToken $r9;
        twitter4j.TwitterBaseImpl r0;
        java.lang.String $r3, $r4;
        boolean $z0;

        r0 := @this: twitter4j.TwitterBaseImpl;

        $r1 = r0.<twitter4j.TwitterBaseImpl: twitter4j.auth.Authorization auth>;

        if $r1 != null goto label2;

        $r2 = r0.<twitter4j.TwitterBaseImpl: twitter4j.conf.Configuration conf>;

        $r3 = interfaceinvoke $r2.<twitter4j.conf.Configuration: java.lang.String getOAuthConsumerKey()>();

        $r2 = r0.<twitter4j.TwitterBaseImpl: twitter4j.conf.Configuration conf>;

        $r4 = interfaceinvoke $r2.<twitter4j.conf.Configuration: java.lang.String getOAuthConsumerSecret()>();

        if $r3 == null goto label5;

        if $r4 == null goto label5;

        $r2 = r0.<twitter4j.TwitterBaseImpl: twitter4j.conf.Configuration conf>;

        $z0 = interfaceinvoke $r2.<twitter4j.conf.Configuration: boolean isApplicationOnlyAuthEnabled()>();

        if $z0 == 0 goto label3;

        $r5 = new twitter4j.auth.OAuth2Authorization;

        $r2 = r0.<twitter4j.TwitterBaseImpl: twitter4j.conf.Configuration conf>;

        specialinvoke $r5.<twitter4j.auth.OAuth2Authorization: void <init>(twitter4j.conf.Configuration)>($r2);

        $r2 = r0.<twitter4j.TwitterBaseImpl: twitter4j.conf.Configuration conf>;

        $r3 = interfaceinvoke $r2.<twitter4j.conf.Configuration: java.lang.String getOAuth2TokenType()>();

        $r2 = r0.<twitter4j.TwitterBaseImpl: twitter4j.conf.Configuration conf>;

        $r4 = interfaceinvoke $r2.<twitter4j.conf.Configuration: java.lang.String getOAuth2AccessToken()>();

        if $r3 == null goto label1;

        if $r4 == null goto label1;

        $r6 = new twitter4j.auth.OAuth2Token;

        specialinvoke $r6.<twitter4j.auth.OAuth2Token: void <init>(java.lang.String,java.lang.String)>($r3, $r4);

        virtualinvoke $r5.<twitter4j.auth.OAuth2Authorization: void setOAuth2Token(twitter4j.auth.OAuth2Token)>($r6);

     label1:
        r0.<twitter4j.TwitterBaseImpl: twitter4j.auth.Authorization auth> = $r5;

     label2:
        $r7 = new twitter4j.internal.http.HttpClientWrapper;

        $r2 = r0.<twitter4j.TwitterBaseImpl: twitter4j.conf.Configuration conf>;

        specialinvoke $r7.<twitter4j.internal.http.HttpClientWrapper: void <init>(twitter4j.internal.http.HttpClientWrapperConfiguration)>($r2);

        r0.<twitter4j.TwitterBaseImpl: twitter4j.internal.http.HttpClientWrapper http> = $r7;

        $r7 = r0.<twitter4j.TwitterBaseImpl: twitter4j.internal.http.HttpClientWrapper http>;

        virtualinvoke $r7.<twitter4j.internal.http.HttpClientWrapper: void setHttpResponseListener(twitter4j.internal.http.HttpResponseListener)>(r0);

        virtualinvoke r0.<twitter4j.TwitterBaseImpl: void setFactory()>();

        return;

     label3:
        $r8 = new twitter4j.auth.OAuthAuthorization;

        $r2 = r0.<twitter4j.TwitterBaseImpl: twitter4j.conf.Configuration conf>;

        specialinvoke $r8.<twitter4j.auth.OAuthAuthorization: void <init>(twitter4j.conf.Configuration)>($r2);

        $r2 = r0.<twitter4j.TwitterBaseImpl: twitter4j.conf.Configuration conf>;

        $r3 = interfaceinvoke $r2.<twitter4j.conf.Configuration: java.lang.String getOAuthAccessToken()>();

        $r2 = r0.<twitter4j.TwitterBaseImpl: twitter4j.conf.Configuration conf>;

        $r4 = interfaceinvoke $r2.<twitter4j.conf.Configuration: java.lang.String getOAuthAccessTokenSecret()>();

        if $r3 == null goto label4;

        if $r4 == null goto label4;

        $r9 = new twitter4j.auth.AccessToken;

        specialinvoke $r9.<twitter4j.auth.AccessToken: void <init>(java.lang.String,java.lang.String)>($r3, $r4);

        virtualinvoke $r8.<twitter4j.auth.OAuthAuthorization: void setOAuthAccessToken(twitter4j.auth.AccessToken)>($r9);

     label4:
        r0.<twitter4j.TwitterBaseImpl: twitter4j.auth.Authorization auth> = $r8;

        goto label2;

     label5:
        $r10 = staticinvoke <twitter4j.auth.NullAuthorization: twitter4j.auth.NullAuthorization getInstance()>();

        r0.<twitter4j.TwitterBaseImpl: twitter4j.auth.Authorization auth> = $r10;

        goto label2;
    }

    private void readObject(java.io.ObjectInputStream)
    {
        twitter4j.auth.Authorization $r4;
        java.util.List $r5;
        java.io.ObjectInputStream $r1;
        twitter4j.conf.Configuration $r2;
        java.lang.Object $r3;
        twitter4j.internal.http.HttpClientWrapper $r6;
        twitter4j.TwitterBaseImpl r0;

        r0 := @this: twitter4j.TwitterBaseImpl;

        $r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke $r1.<java.io.ObjectInputStream: java.io.ObjectInputStream$GetField readFields()>();

        $r3 = virtualinvoke $r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        $r2 = (twitter4j.conf.Configuration) $r3;

        r0.<twitter4j.TwitterBaseImpl: twitter4j.conf.Configuration conf> = $r2;

        $r3 = virtualinvoke $r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        $r4 = (twitter4j.auth.Authorization) $r3;

        r0.<twitter4j.TwitterBaseImpl: twitter4j.auth.Authorization auth> = $r4;

        $r3 = virtualinvoke $r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        $r5 = (java.util.List) $r3;

        r0.<twitter4j.TwitterBaseImpl: java.util.List rateLimitStatusListeners> = $r5;

        $r6 = new twitter4j.internal.http.HttpClientWrapper;

        $r2 = r0.<twitter4j.TwitterBaseImpl: twitter4j.conf.Configuration conf>;

        specialinvoke $r6.<twitter4j.internal.http.HttpClientWrapper: void <init>(twitter4j.internal.http.HttpClientWrapperConfiguration)>($r2);

        r0.<twitter4j.TwitterBaseImpl: twitter4j.internal.http.HttpClientWrapper http> = $r6;

        $r6 = r0.<twitter4j.TwitterBaseImpl: twitter4j.internal.http.HttpClientWrapper http>;

        virtualinvoke $r6.<twitter4j.internal.http.HttpClientWrapper: void setHttpResponseListener(twitter4j.internal.http.HttpResponseListener)>(r0);

        virtualinvoke r0.<twitter4j.TwitterBaseImpl: void setFactory()>();

        return;
    }

    private void writeObject(java.io.ObjectOutputStream)
    {
        twitter4j.auth.Authorization $r4;
        java.util.Iterator $r6;
        java.util.ArrayList $r2;
        java.util.List $r5;
        twitter4j.RateLimitStatusListener $r8;
        twitter4j.conf.Configuration $r3;
        java.io.ObjectOutputStream $r1;
        java.lang.Object $r7;
        twitter4j.TwitterBaseImpl r0;
        boolean $z0;

        r0 := @this: twitter4j.TwitterBaseImpl;

        $r1 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke $r1.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$PutField putFields()>();

        virtualinvoke $r1.<java.io.ObjectOutputStream: void writeFields()>();

        $r3 = r0.<twitter4j.TwitterBaseImpl: twitter4j.conf.Configuration conf>;

        virtualinvoke $r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r3);

        $r4 = r0.<twitter4j.TwitterBaseImpl: twitter4j.auth.Authorization auth>;

        virtualinvoke $r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r4);

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>(0);

        $r5 = r0.<twitter4j.TwitterBaseImpl: java.util.List rateLimitStatusListeners>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        virtualinvoke $r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r2);

        return;

     label2:
        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (twitter4j.RateLimitStatusListener) $r7;

        $z0 = $r8 instanceof java.io.Serializable;

        if $z0 == 0 goto label1;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r8);

        goto label1;
    }

    public void addRateLimitStatusListener(twitter4j.RateLimitStatusListener)
    {
        java.util.List $r2;
        twitter4j.TwitterBaseImpl r0;
        twitter4j.RateLimitStatusListener $r1;

        r0 := @this: twitter4j.TwitterBaseImpl;

        $r1 := @parameter0: twitter4j.RateLimitStatusListener;

        $r2 = r0.<twitter4j.TwitterBaseImpl: java.util.List rateLimitStatusListeners>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;
    }

    protected final void ensureAuthorizationEnabled()
    {
        twitter4j.auth.Authorization $r1;
        java.lang.IllegalStateException $r2;
        twitter4j.TwitterBaseImpl r0;
        boolean $z0;

        r0 := @this: twitter4j.TwitterBaseImpl;

        $r1 = r0.<twitter4j.TwitterBaseImpl: twitter4j.auth.Authorization auth>;

        $z0 = interfaceinvoke $r1.<twitter4j.auth.Authorization: boolean isEnabled()>();

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Authentication credentials are missing. See http://twitter4j.org/en/configuration.html for the detail.");

        throw $r2;

     label1:
        return;
    }

    protected final void ensureOAuthEnabled()
    {
        twitter4j.auth.Authorization $r1;
        java.lang.IllegalStateException $r2;
        twitter4j.TwitterBaseImpl r0;
        boolean $z0;

        r0 := @this: twitter4j.TwitterBaseImpl;

        $r1 = r0.<twitter4j.TwitterBaseImpl: twitter4j.auth.Authorization auth>;

        $z0 = $r1 instanceof twitter4j.auth.OAuthAuthorization;

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("OAuth required. Authentication credentials are missing. See http://twitter4j.org/en/configuration.html for the detail.");

        throw $r2;

     label1:
        return;
    }

    public boolean equals(java.lang.Object)
    {
        twitter4j.auth.Authorization $r3, $r4;
        twitter4j.internal.http.HttpClientWrapper $r7, $r8;
        java.util.List $r9, $r10;
        twitter4j.conf.Configuration $r5, $r6;
        java.lang.Object $r1;
        twitter4j.TwitterBaseImpl r0, $r2;
        boolean $z0;

        r0 := @this: twitter4j.TwitterBaseImpl;

        $r1 := @parameter0: java.lang.Object;

        if r0 != $r1 goto label01;

        return 1;

     label01:
        $z0 = $r1 instanceof twitter4j.TwitterBaseImpl;

        if $z0 != 0 goto label02;

        return 0;

     label02:
        $r2 = (twitter4j.TwitterBaseImpl) $r1;

        $r3 = r0.<twitter4j.TwitterBaseImpl: twitter4j.auth.Authorization auth>;

        if $r3 == null goto label04;

        $r3 = r0.<twitter4j.TwitterBaseImpl: twitter4j.auth.Authorization auth>;

        $r4 = $r2.<twitter4j.TwitterBaseImpl: twitter4j.auth.Authorization auth>;

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label05;

     label03:
        return 0;

     label04:
        $r3 = $r2.<twitter4j.TwitterBaseImpl: twitter4j.auth.Authorization auth>;

        if $r3 != null goto label03;

     label05:
        $r5 = r0.<twitter4j.TwitterBaseImpl: twitter4j.conf.Configuration conf>;

        $r6 = $r2.<twitter4j.TwitterBaseImpl: twitter4j.conf.Configuration conf>;

        $z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label06;

        return 0;

     label06:
        $r7 = r0.<twitter4j.TwitterBaseImpl: twitter4j.internal.http.HttpClientWrapper http>;

        if $r7 == null goto label08;

        $r7 = r0.<twitter4j.TwitterBaseImpl: twitter4j.internal.http.HttpClientWrapper http>;

        $r8 = $r2.<twitter4j.TwitterBaseImpl: twitter4j.internal.http.HttpClientWrapper http>;

        $z0 = virtualinvoke $r7.<twitter4j.internal.http.HttpClientWrapper: boolean equals(java.lang.Object)>($r8);

        if $z0 != 0 goto label09;

     label07:
        return 0;

     label08:
        $r7 = $r2.<twitter4j.TwitterBaseImpl: twitter4j.internal.http.HttpClientWrapper http>;

        if $r7 != null goto label07;

     label09:
        $r9 = r0.<twitter4j.TwitterBaseImpl: java.util.List rateLimitStatusListeners>;

        $r10 = $r2.<twitter4j.TwitterBaseImpl: java.util.List rateLimitStatusListeners>;

        $z0 = interfaceinvoke $r9.<java.util.List: boolean equals(java.lang.Object)>($r10);

        if $z0 != 0 goto label10;

        return 0;

     label10:
        return 1;
    }

    protected twitter4j.User fillInIDAndScreenName()
    {
        twitter4j.internal.json.z_T4JInternalFactory $r1;
        twitter4j.auth.Authorization $r6;
        twitter4j.internal.http.HttpClientWrapper $r2;
        long $l0;
        twitter4j.internal.http.HttpResponse $r7;
        twitter4j.conf.Configuration $r4;
        twitter4j.User $r8;
        java.lang.StringBuilder $r3;
        twitter4j.TwitterBaseImpl r0;
        java.lang.String $r5;

        r0 := @this: twitter4j.TwitterBaseImpl;

        virtualinvoke r0.<twitter4j.TwitterBaseImpl: void ensureAuthorizationEnabled()>();

        $r1 = r0.<twitter4j.TwitterBaseImpl: twitter4j.internal.json.z_T4JInternalFactory factory>;

        $r2 = r0.<twitter4j.TwitterBaseImpl: twitter4j.internal.http.HttpClientWrapper http>;

        $r3 = new java.lang.StringBuilder;

        $r4 = r0.<twitter4j.TwitterBaseImpl: twitter4j.conf.Configuration conf>;

        $r5 = interfaceinvoke $r4.<twitter4j.conf.Configuration: java.lang.String getRestBaseURL()>();

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r5);

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>($r5);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("account/verify_credentials.json");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = r0.<twitter4j.TwitterBaseImpl: twitter4j.auth.Authorization auth>;

        $r7 = virtualinvoke $r2.<twitter4j.internal.http.HttpClientWrapper: twitter4j.internal.http.HttpResponse get(java.lang.String,twitter4j.auth.Authorization)>($r5, $r6);

        $r8 = interfaceinvoke $r1.<twitter4j.internal.json.z_T4JInternalFactory: twitter4j.User createUser(twitter4j.internal.http.HttpResponse)>($r7);

        $r5 = interfaceinvoke $r8.<twitter4j.User: java.lang.String getScreenName()>();

        r0.<twitter4j.TwitterBaseImpl: java.lang.String screenName> = $r5;

        $l0 = interfaceinvoke $r8.<twitter4j.User: long getId()>();

        r0.<twitter4j.TwitterBaseImpl: long id> = $l0;

        return $r8;
    }

    public final twitter4j.auth.Authorization getAuthorization()
    {
        twitter4j.auth.Authorization r1;
        twitter4j.TwitterBaseImpl r0;

        r0 := @this: twitter4j.TwitterBaseImpl;

        r1 = r0.<twitter4j.TwitterBaseImpl: twitter4j.auth.Authorization auth>;

        return r1;
    }

    public twitter4j.conf.Configuration getConfiguration()
    {
        twitter4j.conf.Configuration r1;
        twitter4j.TwitterBaseImpl r0;

        r0 := @this: twitter4j.TwitterBaseImpl;

        r1 = r0.<twitter4j.TwitterBaseImpl: twitter4j.conf.Configuration conf>;

        return r1;
    }

    public long getId()
    {
        twitter4j.auth.Authorization $r1;
        java.lang.IllegalStateException $r2;
        byte $b1;
        long $l0;
        twitter4j.TwitterBaseImpl r0;
        boolean $z0;

        r0 := @this: twitter4j.TwitterBaseImpl;

        $r1 = r0.<twitter4j.TwitterBaseImpl: twitter4j.auth.Authorization auth>;

        $z0 = interfaceinvoke $r1.<twitter4j.auth.Authorization: boolean isEnabled()>();

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Neither user ID/password combination nor OAuth consumer key/secret combination supplied");

        throw $r2;

     label1:
        $l0 = r0.<twitter4j.TwitterBaseImpl: long id>;

        $b1 = 0L cmp $l0;

        if $b1 != 0 goto label2;

        virtualinvoke r0.<twitter4j.TwitterBaseImpl: twitter4j.User fillInIDAndScreenName()>();

     label2:
        $l0 = r0.<twitter4j.TwitterBaseImpl: long id>;

        return $l0;
    }

    public twitter4j.auth.OAuth2Token getOAuth2Token()
    {
        java.lang.Throwable $r3;
        twitter4j.auth.OAuth2Token $r2;
        twitter4j.auth.OAuth2Support $r1;
        twitter4j.TwitterBaseImpl r0;

        r0 := @this: twitter4j.TwitterBaseImpl;

        entermonitor r0;

     label1:
        $r1 = specialinvoke r0.<twitter4j.TwitterBaseImpl: twitter4j.auth.OAuth2Support getOAuth2()>();

        $r2 = interfaceinvoke $r1.<twitter4j.auth.OAuth2Support: twitter4j.auth.OAuth2Token getOAuth2Token()>();

     label2:
        exitmonitor r0;

        return $r2;

     label3:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public twitter4j.auth.AccessToken getOAuthAccessToken()
    {
        java.lang.Throwable $r9;
        twitter4j.auth.Authorization $r1;
        java.lang.IllegalStateException $r8;
        long $l0;
        twitter4j.internal.http.XAuthAuthorization $r10;
        twitter4j.auth.OAuthAuthorization $r4;
        twitter4j.auth.OAuthSupport $r11;
        twitter4j.auth.BasicAuthorization $r2;
        twitter4j.conf.Configuration $r3;
        twitter4j.auth.AccessToken $r7;
        twitter4j.TwitterBaseImpl r0;
        java.lang.String $r5, $r6;
        boolean $z0;

        r0 := @this: twitter4j.TwitterBaseImpl;

        entermonitor r0;

     label1:
        $r1 = virtualinvoke r0.<twitter4j.TwitterBaseImpl: twitter4j.auth.Authorization getAuthorization()>();

        $z0 = $r1 instanceof twitter4j.auth.BasicAuthorization;

        if $z0 == 0 goto label6;

        $r2 = (twitter4j.auth.BasicAuthorization) $r1;

        $r3 = r0.<twitter4j.TwitterBaseImpl: twitter4j.conf.Configuration conf>;

        $r1 = staticinvoke <twitter4j.auth.AuthorizationFactory: twitter4j.auth.Authorization getInstance(twitter4j.conf.Configuration)>($r3);

        $z0 = $r1 instanceof twitter4j.auth.OAuthAuthorization;

        if $z0 == 0 goto label4;

        r0.<twitter4j.TwitterBaseImpl: twitter4j.auth.Authorization auth> = $r1;

        $r4 = (twitter4j.auth.OAuthAuthorization) $r1;

        $r5 = virtualinvoke $r2.<twitter4j.auth.BasicAuthorization: java.lang.String getUserId()>();

        $r6 = virtualinvoke $r2.<twitter4j.auth.BasicAuthorization: java.lang.String getPassword()>();

        $r7 = virtualinvoke $r4.<twitter4j.auth.OAuthAuthorization: twitter4j.auth.AccessToken getOAuthAccessToken(java.lang.String,java.lang.String)>($r5, $r6);

     label2:
        $r5 = virtualinvoke $r7.<twitter4j.auth.AccessToken: java.lang.String getScreenName()>();

        r0.<twitter4j.TwitterBaseImpl: java.lang.String screenName> = $r5;

        $l0 = virtualinvoke $r7.<twitter4j.auth.AccessToken: long getUserId()>();

        r0.<twitter4j.TwitterBaseImpl: long id> = $l0;

     label3:
        exitmonitor r0;

        return $r7;

     label4:
        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("consumer key / secret combination not supplied.");

        throw $r8;

     label5:
        $r9 := @caughtexception;

        exitmonitor r0;

        throw $r9;

     label6:
        $z0 = $r1 instanceof twitter4j.internal.http.XAuthAuthorization;

        if $z0 == 0 goto label7;

        $r10 = (twitter4j.internal.http.XAuthAuthorization) $r1;

        r0.<twitter4j.TwitterBaseImpl: twitter4j.auth.Authorization auth> = $r10;

        $r4 = new twitter4j.auth.OAuthAuthorization;

        $r3 = r0.<twitter4j.TwitterBaseImpl: twitter4j.conf.Configuration conf>;

        specialinvoke $r4.<twitter4j.auth.OAuthAuthorization: void <init>(twitter4j.conf.Configuration)>($r3);

        $r5 = virtualinvoke $r10.<twitter4j.internal.http.XAuthAuthorization: java.lang.String getConsumerKey()>();

        $r6 = virtualinvoke $r10.<twitter4j.internal.http.XAuthAuthorization: java.lang.String getConsumerSecret()>();

        virtualinvoke $r4.<twitter4j.auth.OAuthAuthorization: void setOAuthConsumer(java.lang.String,java.lang.String)>($r5, $r6);

        $r5 = virtualinvoke $r10.<twitter4j.internal.http.XAuthAuthorization: java.lang.String getUserId()>();

        $r6 = virtualinvoke $r10.<twitter4j.internal.http.XAuthAuthorization: java.lang.String getPassword()>();

        $r7 = virtualinvoke $r4.<twitter4j.auth.OAuthAuthorization: twitter4j.auth.AccessToken getOAuthAccessToken(java.lang.String,java.lang.String)>($r5, $r6);

        goto label2;

     label7:
        $r11 = specialinvoke r0.<twitter4j.TwitterBaseImpl: twitter4j.auth.OAuthSupport getOAuth()>();

        $r7 = interfaceinvoke $r11.<twitter4j.auth.OAuthSupport: twitter4j.auth.AccessToken getOAuthAccessToken()>();

     label8:
        goto label2;

        catch java.lang.Throwable from label1 to label3 with label5;
        catch java.lang.Throwable from label4 to label5 with label5;
        catch java.lang.Throwable from label6 to label8 with label5;
    }

    public twitter4j.auth.AccessToken getOAuthAccessToken(java.lang.String)
    {
        java.lang.Throwable $r4;
        twitter4j.auth.AccessToken $r3;
        twitter4j.TwitterBaseImpl r0;
        java.lang.String $r1;
        twitter4j.auth.OAuthSupport $r2;

        r0 := @this: twitter4j.TwitterBaseImpl;

        $r1 := @parameter0: java.lang.String;

        entermonitor r0;

     label1:
        $r2 = specialinvoke r0.<twitter4j.TwitterBaseImpl: twitter4j.auth.OAuthSupport getOAuth()>();

        $r3 = interfaceinvoke $r2.<twitter4j.auth.OAuthSupport: twitter4j.auth.AccessToken getOAuthAccessToken(java.lang.String)>($r1);

        $r1 = virtualinvoke $r3.<twitter4j.auth.AccessToken: java.lang.String getScreenName()>();

        r0.<twitter4j.TwitterBaseImpl: java.lang.String screenName> = $r1;

     label2:
        exitmonitor r0;

        return $r3;

     label3:
        $r4 := @caughtexception;

        exitmonitor r0;

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public twitter4j.auth.AccessToken getOAuthAccessToken(java.lang.String, java.lang.String)
    {
        java.lang.Throwable $r5;
        twitter4j.auth.AccessToken $r4;
        twitter4j.TwitterBaseImpl r0;
        java.lang.String $r1, $r2;
        twitter4j.auth.OAuthSupport $r3;

        r0 := @this: twitter4j.TwitterBaseImpl;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        entermonitor r0;

     label1:
        $r3 = specialinvoke r0.<twitter4j.TwitterBaseImpl: twitter4j.auth.OAuthSupport getOAuth()>();

        $r4 = interfaceinvoke $r3.<twitter4j.auth.OAuthSupport: twitter4j.auth.AccessToken getOAuthAccessToken(java.lang.String,java.lang.String)>($r1, $r2);

     label2:
        exitmonitor r0;

        return $r4;

     label3:
        $r5 := @caughtexception;

        exitmonitor r0;

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public twitter4j.auth.AccessToken getOAuthAccessToken(twitter4j.auth.RequestToken)
    {
        java.lang.Throwable $r5;
        twitter4j.auth.AccessToken $r3;
        twitter4j.TwitterBaseImpl r0;
        java.lang.String $r4;
        twitter4j.auth.RequestToken $r1;
        twitter4j.auth.OAuthSupport $r2;

        r0 := @this: twitter4j.TwitterBaseImpl;

        $r1 := @parameter0: twitter4j.auth.RequestToken;

        entermonitor r0;

     label1:
        $r2 = specialinvoke r0.<twitter4j.TwitterBaseImpl: twitter4j.auth.OAuthSupport getOAuth()>();

        $r3 = interfaceinvoke $r2.<twitter4j.auth.OAuthSupport: twitter4j.auth.AccessToken getOAuthAccessToken(twitter4j.auth.RequestToken)>($r1);

        $r4 = virtualinvoke $r3.<twitter4j.auth.AccessToken: java.lang.String getScreenName()>();

        r0.<twitter4j.TwitterBaseImpl: java.lang.String screenName> = $r4;

     label2:
        exitmonitor r0;

        return $r3;

     label3:
        $r5 := @caughtexception;

        exitmonitor r0;

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public twitter4j.auth.AccessToken getOAuthAccessToken(twitter4j.auth.RequestToken, java.lang.String)
    {
        java.lang.Throwable $r5;
        twitter4j.auth.AccessToken $r4;
        twitter4j.TwitterBaseImpl r0;
        java.lang.String $r2;
        twitter4j.auth.RequestToken $r1;
        twitter4j.auth.OAuthSupport $r3;

        r0 := @this: twitter4j.TwitterBaseImpl;

        $r1 := @parameter0: twitter4j.auth.RequestToken;

        $r2 := @parameter1: java.lang.String;

        entermonitor r0;

     label1:
        $r3 = specialinvoke r0.<twitter4j.TwitterBaseImpl: twitter4j.auth.OAuthSupport getOAuth()>();

        $r4 = interfaceinvoke $r3.<twitter4j.auth.OAuthSupport: twitter4j.auth.AccessToken getOAuthAccessToken(twitter4j.auth.RequestToken,java.lang.String)>($r1, $r2);

     label2:
        exitmonitor r0;

        return $r4;

     label3:
        $r5 := @caughtexception;

        exitmonitor r0;

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public twitter4j.auth.RequestToken getOAuthRequestToken()
    {
        twitter4j.TwitterBaseImpl r0;
        twitter4j.auth.RequestToken $r1;

        r0 := @this: twitter4j.TwitterBaseImpl;

        $r1 = virtualinvoke r0.<twitter4j.TwitterBaseImpl: twitter4j.auth.RequestToken getOAuthRequestToken(java.lang.String)>(null);

        return $r1;
    }

    public twitter4j.auth.RequestToken getOAuthRequestToken(java.lang.String)
    {
        twitter4j.TwitterBaseImpl r0;
        java.lang.String $r1;
        twitter4j.auth.RequestToken $r3;
        twitter4j.auth.OAuthSupport $r2;

        r0 := @this: twitter4j.TwitterBaseImpl;

        $r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<twitter4j.TwitterBaseImpl: twitter4j.auth.OAuthSupport getOAuth()>();

        $r3 = interfaceinvoke $r2.<twitter4j.auth.OAuthSupport: twitter4j.auth.RequestToken getOAuthRequestToken(java.lang.String)>($r1);

        return $r3;
    }

    public twitter4j.auth.RequestToken getOAuthRequestToken(java.lang.String, java.lang.String)
    {
        twitter4j.TwitterBaseImpl r0;
        java.lang.String $r1, $r2;
        twitter4j.auth.RequestToken $r4;
        twitter4j.auth.OAuthSupport $r3;

        r0 := @this: twitter4j.TwitterBaseImpl;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = specialinvoke r0.<twitter4j.TwitterBaseImpl: twitter4j.auth.OAuthSupport getOAuth()>();

        $r4 = interfaceinvoke $r3.<twitter4j.auth.OAuthSupport: twitter4j.auth.RequestToken getOAuthRequestToken(java.lang.String,java.lang.String)>($r1, $r2);

        return $r4;
    }

    public java.lang.String getScreenName()
    {
        twitter4j.auth.Authorization $r1;
        java.lang.IllegalStateException $r4;
        twitter4j.auth.BasicAuthorization $r3;
        int $i0, $i1;
        twitter4j.TwitterBaseImpl r0;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: twitter4j.TwitterBaseImpl;

        $r1 = r0.<twitter4j.TwitterBaseImpl: twitter4j.auth.Authorization auth>;

        $z0 = interfaceinvoke $r1.<twitter4j.auth.Authorization: boolean isEnabled()>();

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Neither user ID/password combination nor OAuth consumer key/secret combination supplied");

        throw $r4;

     label1:
        $r2 = r0.<twitter4j.TwitterBaseImpl: java.lang.String screenName>;

        if $r2 != null goto label3;

        $r1 = r0.<twitter4j.TwitterBaseImpl: twitter4j.auth.Authorization auth>;

        $z0 = $r1 instanceof twitter4j.auth.BasicAuthorization;

        if $z0 == 0 goto label2;

        $r1 = r0.<twitter4j.TwitterBaseImpl: twitter4j.auth.Authorization auth>;

        $r3 = (twitter4j.auth.BasicAuthorization) $r1;

        $r2 = virtualinvoke $r3.<twitter4j.auth.BasicAuthorization: java.lang.String getUserId()>();

        r0.<twitter4j.TwitterBaseImpl: java.lang.String screenName> = $r2;

        $r2 = r0.<twitter4j.TwitterBaseImpl: java.lang.String screenName>;

        $i0 = virtualinvoke $r2.<java.lang.String: int indexOf(java.lang.String)>("@");

        $i1 = -1;

        if $i1 == $i0 goto label2;

        r0.<twitter4j.TwitterBaseImpl: java.lang.String screenName> = null;

     label2:
        $r2 = r0.<twitter4j.TwitterBaseImpl: java.lang.String screenName>;

        if $r2 != null goto label3;

        virtualinvoke r0.<twitter4j.TwitterBaseImpl: twitter4j.User fillInIDAndScreenName()>();

     label3:
        $r2 = r0.<twitter4j.TwitterBaseImpl: java.lang.String screenName>;

        return $r2;
    }

    public int hashCode()
    {
        twitter4j.auth.Authorization $r4;
        twitter4j.internal.http.HttpClientWrapper $r2;
        java.util.List $r3;
        int $i0, $i1, $i2;
        twitter4j.conf.Configuration $r1;
        twitter4j.TwitterBaseImpl r0;

        r0 := @this: twitter4j.TwitterBaseImpl;

        $i0 = 0;

        $r1 = r0.<twitter4j.TwitterBaseImpl: twitter4j.conf.Configuration conf>;

        $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i1 = $i1 * 31;

        $r2 = r0.<twitter4j.TwitterBaseImpl: twitter4j.internal.http.HttpClientWrapper http>;

        if $r2 == null goto label3;

        $r2 = r0.<twitter4j.TwitterBaseImpl: twitter4j.internal.http.HttpClientWrapper http>;

        $i2 = virtualinvoke $r2.<twitter4j.internal.http.HttpClientWrapper: int hashCode()>();

     label1:
        $i1 = $i2 + $i1;

        $i1 = $i1 * 31;

        $r3 = r0.<twitter4j.TwitterBaseImpl: java.util.List rateLimitStatusListeners>;

        $i2 = interfaceinvoke $r3.<java.util.List: int hashCode()>();

        $i1 = $i1 + $i2;

        $i1 = $i1 * 31;

        $r4 = r0.<twitter4j.TwitterBaseImpl: twitter4j.auth.Authorization auth>;

        if $r4 == null goto label2;

        $r4 = r0.<twitter4j.TwitterBaseImpl: twitter4j.auth.Authorization auth>;

        $i0 = virtualinvoke $r4.<java.lang.Object: int hashCode()>();

     label2:
        $i0 = $i1 + $i0;

        return $i0;

     label3:
        $i2 = 0;

        goto label1;
    }

    public void httpResponseReceived(twitter4j.internal.http.HttpResponseEvent)
    {
        java.util.Iterator $r7;
        twitter4j.RateLimitStatusEvent $r6;
        java.util.List $r2;
        twitter4j.internal.http.HttpResponse $r3;
        twitter4j.RateLimitStatusListener $r9;
        int $i0;
        twitter4j.TwitterException $r4;
        twitter4j.RateLimitStatus $r5;
        java.lang.Object $r8;
        twitter4j.TwitterBaseImpl r0;
        twitter4j.internal.http.HttpResponseEvent $r1;
        boolean $z0;

        r0 := @this: twitter4j.TwitterBaseImpl;

        $r1 := @parameter0: twitter4j.internal.http.HttpResponseEvent;

        $r2 = r0.<twitter4j.TwitterBaseImpl: java.util.List rateLimitStatusListeners>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 == 0 goto label8;

        $r3 = virtualinvoke $r1.<twitter4j.internal.http.HttpResponseEvent: twitter4j.internal.http.HttpResponse getResponse()>();

        $r4 = virtualinvoke $r1.<twitter4j.internal.http.HttpResponseEvent: twitter4j.TwitterException getTwitterException()>();

        if $r4 == null goto label4;

        $r5 = virtualinvoke $r4.<twitter4j.TwitterException: twitter4j.RateLimitStatus getRateLimitStatus()>();

        $i0 = virtualinvoke $r4.<twitter4j.TwitterException: int getStatusCode()>();

     label1:
        if $r5 == null goto label8;

        $r6 = new twitter4j.RateLimitStatusEvent;

        $z0 = virtualinvoke $r1.<twitter4j.internal.http.HttpResponseEvent: boolean isAuthenticated()>();

        specialinvoke $r6.<twitter4j.RateLimitStatusEvent: void <init>(java.lang.Object,twitter4j.RateLimitStatus,boolean)>(r0, $r5, $z0);

        if $i0 == 420 goto label2;

        if $i0 != 503 goto label6;

     label2:
        $r2 = r0.<twitter4j.TwitterBaseImpl: java.util.List rateLimitStatusListeners>;

        $r7 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label5;

        return;

     label4:
        $r5 = staticinvoke <twitter4j.internal.json.z_T4JInternalJSONImplFactory: twitter4j.RateLimitStatus createRateLimitStatusFromResponseHeader(twitter4j.internal.http.HttpResponse)>($r3);

        $i0 = virtualinvoke $r3.<twitter4j.internal.http.HttpResponse: int getStatusCode()>();

        goto label1;

     label5:
        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (twitter4j.RateLimitStatusListener) $r8;

        interfaceinvoke $r9.<twitter4j.RateLimitStatusListener: void onRateLimitStatus(twitter4j.RateLimitStatusEvent)>($r6);

        interfaceinvoke $r9.<twitter4j.RateLimitStatusListener: void onRateLimitReached(twitter4j.RateLimitStatusEvent)>($r6);

        goto label3;

     label6:
        $r2 = r0.<twitter4j.TwitterBaseImpl: java.util.List rateLimitStatusListeners>;

        $r7 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label7:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (twitter4j.RateLimitStatusListener) $r8;

        interfaceinvoke $r9.<twitter4j.RateLimitStatusListener: void onRateLimitStatus(twitter4j.RateLimitStatusEvent)>($r6);

        goto label7;

     label8:
        return;
    }

    public void invalidateOAuth2Token()
    {
        java.lang.Throwable $r2;
        twitter4j.auth.OAuth2Support $r1;
        twitter4j.TwitterBaseImpl r0;

        r0 := @this: twitter4j.TwitterBaseImpl;

        entermonitor r0;

     label1:
        $r1 = specialinvoke r0.<twitter4j.TwitterBaseImpl: twitter4j.auth.OAuth2Support getOAuth2()>();

        interfaceinvoke $r1.<twitter4j.auth.OAuth2Support: void invalidateOAuth2Token()>();

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    protected void setFactory()
    {
        twitter4j.conf.Configuration $r2;
        twitter4j.internal.json.z_T4JInternalJSONImplFactory $r1;
        twitter4j.TwitterBaseImpl r0;

        r0 := @this: twitter4j.TwitterBaseImpl;

        $r1 = new twitter4j.internal.json.z_T4JInternalJSONImplFactory;

        $r2 = r0.<twitter4j.TwitterBaseImpl: twitter4j.conf.Configuration conf>;

        specialinvoke $r1.<twitter4j.internal.json.z_T4JInternalJSONImplFactory: void <init>(twitter4j.conf.Configuration)>($r2);

        r0.<twitter4j.TwitterBaseImpl: twitter4j.internal.json.z_T4JInternalFactory factory> = $r1;

        return;
    }

    public void setOAuth2Token(twitter4j.auth.OAuth2Token)
    {
        twitter4j.auth.OAuth2Support $r2;
        twitter4j.auth.OAuth2Token $r1;
        twitter4j.TwitterBaseImpl r0;

        r0 := @this: twitter4j.TwitterBaseImpl;

        $r1 := @parameter0: twitter4j.auth.OAuth2Token;

        $r2 = specialinvoke r0.<twitter4j.TwitterBaseImpl: twitter4j.auth.OAuth2Support getOAuth2()>();

        interfaceinvoke $r2.<twitter4j.auth.OAuth2Support: void setOAuth2Token(twitter4j.auth.OAuth2Token)>($r1);

        return;
    }

    public void setOAuthAccessToken(twitter4j.auth.AccessToken)
    {
        java.lang.Throwable $r3;
        twitter4j.auth.AccessToken $r1;
        twitter4j.TwitterBaseImpl r0;
        twitter4j.auth.OAuthSupport $r2;

        r0 := @this: twitter4j.TwitterBaseImpl;

        $r1 := @parameter0: twitter4j.auth.AccessToken;

        entermonitor r0;

     label1:
        $r2 = specialinvoke r0.<twitter4j.TwitterBaseImpl: twitter4j.auth.OAuthSupport getOAuth()>();

        interfaceinvoke $r2.<twitter4j.auth.OAuthSupport: void setOAuthAccessToken(twitter4j.auth.AccessToken)>($r1);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setOAuthConsumer(java.lang.String, java.lang.String)
    {
        java.lang.Throwable $r4;
        twitter4j.auth.Authorization $r5;
        java.lang.IllegalStateException $r11;
        twitter4j.auth.OAuth2Authorization $r7;
        twitter4j.internal.http.XAuthAuthorization $r9;
        java.lang.NullPointerException $r3;
        twitter4j.auth.OAuthAuthorization $r8;
        twitter4j.auth.BasicAuthorization $r10;
        twitter4j.conf.Configuration $r6;
        twitter4j.TwitterBaseImpl r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: twitter4j.TwitterBaseImpl;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        entermonitor r0;

        if $r1 != null goto label03;

     label01:
        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("consumer key is null");

        throw $r3;

     label02:
        $r4 := @caughtexception;

        exitmonitor r0;

        throw $r4;

     label03:
        if $r2 != null goto label05;

     label04:
        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("consumer secret is null");

        throw $r3;

     label05:
        $r5 = r0.<twitter4j.TwitterBaseImpl: twitter4j.auth.Authorization auth>;

        $z0 = $r5 instanceof twitter4j.auth.NullAuthorization;

        if $z0 == 0 goto label08;

        $r6 = r0.<twitter4j.TwitterBaseImpl: twitter4j.conf.Configuration conf>;

        $z0 = interfaceinvoke $r6.<twitter4j.conf.Configuration: boolean isApplicationOnlyAuthEnabled()>();

        if $z0 == 0 goto label07;

        $r7 = new twitter4j.auth.OAuth2Authorization;

        $r6 = r0.<twitter4j.TwitterBaseImpl: twitter4j.conf.Configuration conf>;

        specialinvoke $r7.<twitter4j.auth.OAuth2Authorization: void <init>(twitter4j.conf.Configuration)>($r6);

        virtualinvoke $r7.<twitter4j.auth.OAuth2Authorization: void setOAuthConsumer(java.lang.String,java.lang.String)>($r1, $r2);

        r0.<twitter4j.TwitterBaseImpl: twitter4j.auth.Authorization auth> = $r7;

     label06:
        exitmonitor r0;

        return;

     label07:
        $r8 = new twitter4j.auth.OAuthAuthorization;

        $r6 = r0.<twitter4j.TwitterBaseImpl: twitter4j.conf.Configuration conf>;

        specialinvoke $r8.<twitter4j.auth.OAuthAuthorization: void <init>(twitter4j.conf.Configuration)>($r6);

        virtualinvoke $r8.<twitter4j.auth.OAuthAuthorization: void setOAuthConsumer(java.lang.String,java.lang.String)>($r1, $r2);

        r0.<twitter4j.TwitterBaseImpl: twitter4j.auth.Authorization auth> = $r8;

        goto label06;

     label08:
        $r5 = r0.<twitter4j.TwitterBaseImpl: twitter4j.auth.Authorization auth>;

        $z0 = $r5 instanceof twitter4j.auth.BasicAuthorization;

        if $z0 == 0 goto label09;

        $r9 = new twitter4j.internal.http.XAuthAuthorization;

        $r5 = r0.<twitter4j.TwitterBaseImpl: twitter4j.auth.Authorization auth>;

        $r10 = (twitter4j.auth.BasicAuthorization) $r5;

        specialinvoke $r9.<twitter4j.internal.http.XAuthAuthorization: void <init>(twitter4j.auth.BasicAuthorization)>($r10);

        virtualinvoke $r9.<twitter4j.internal.http.XAuthAuthorization: void setOAuthConsumer(java.lang.String,java.lang.String)>($r1, $r2);

        r0.<twitter4j.TwitterBaseImpl: twitter4j.auth.Authorization auth> = $r9;

        goto label06;

     label09:
        $r5 = r0.<twitter4j.TwitterBaseImpl: twitter4j.auth.Authorization auth>;

        $z0 = $r5 instanceof twitter4j.auth.OAuthAuthorization;

        if $z0 != 0 goto label10;

        $r5 = r0.<twitter4j.TwitterBaseImpl: twitter4j.auth.Authorization auth>;

        $z0 = $r5 instanceof twitter4j.auth.OAuth2Authorization;

        if $z0 == 0 goto label06;

     label10:
        $r11 = new java.lang.IllegalStateException;

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>("consumer key/secret pair already set.");

        throw $r11;

     label11:
        nop;

        catch java.lang.Throwable from label01 to label02 with label02;
        catch java.lang.Throwable from label04 to label06 with label02;
        catch java.lang.Throwable from label07 to label11 with label02;
    }

    public void shutdown()
    {
        twitter4j.internal.http.HttpClientWrapper $r1;
        twitter4j.TwitterBaseImpl r0;

        r0 := @this: twitter4j.TwitterBaseImpl;

        $r1 = r0.<twitter4j.TwitterBaseImpl: twitter4j.internal.http.HttpClientWrapper http>;

        if $r1 == null goto label1;

        $r1 = r0.<twitter4j.TwitterBaseImpl: twitter4j.internal.http.HttpClientWrapper http>;

        virtualinvoke $r1.<twitter4j.internal.http.HttpClientWrapper: void shutdown()>();

     label1:
        return;
    }

    public java.lang.String toString()
    {
        twitter4j.auth.Authorization $r5;
        java.util.List $r4;
        twitter4j.conf.Configuration $r2;
        java.lang.StringBuilder $r1;
        twitter4j.internal.http.HttpClientWrapper $r3;
        twitter4j.TwitterBaseImpl r0;
        java.lang.String $r6;

        r0 := @this: twitter4j.TwitterBaseImpl;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("TwitterBase{conf=");

        $r2 = r0.<twitter4j.TwitterBaseImpl: twitter4j.conf.Configuration conf>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", http=");

        $r3 = r0.<twitter4j.TwitterBaseImpl: twitter4j.internal.http.HttpClientWrapper http>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", rateLimitStatusListeners=");

        $r4 = r0.<twitter4j.TwitterBaseImpl: java.util.List rateLimitStatusListeners>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", auth=");

        $r5 = r0.<twitter4j.TwitterBaseImpl: twitter4j.auth.Authorization auth>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public static void <clinit>()
    {
        <twitter4j.TwitterBaseImpl: long serialVersionUID> = -3812176145960812140L;

        return;
    }
}
