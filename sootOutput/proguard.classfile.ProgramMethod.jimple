public class proguard.classfile.ProgramMethod extends proguard.classfile.ProgramMember implements proguard.classfile.Method
{
    public proguard.classfile.Clazz[] referencedClasses;

    public void <init>()
    {
        proguard.classfile.ProgramMethod r0;

        r0 := @this: proguard.classfile.ProgramMethod;

        specialinvoke r0.<proguard.classfile.ProgramMember: void <init>()>();

        return;
    }

    public void <init>(int, int, int, int, proguard.classfile.attribute.Attribute[], proguard.classfile.Clazz[])
    {
        proguard.classfile.Clazz[] $r2;
        proguard.classfile.ProgramMethod r0;
        int $i0, $i1, $i2, $i3;
        proguard.classfile.attribute.Attribute[] $r1;

        r0 := @this: proguard.classfile.ProgramMethod;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $r1 := @parameter4: proguard.classfile.attribute.Attribute[];

        $r2 := @parameter5: proguard.classfile.Clazz[];

        specialinvoke r0.<proguard.classfile.ProgramMember: void <init>(int,int,int,int,proguard.classfile.attribute.Attribute[])>($i0, $i1, $i2, 0, $r1);

        r0.<proguard.classfile.ProgramMethod: proguard.classfile.Clazz[] referencedClasses> = $r2;

        return;
    }

    public void accept(proguard.classfile.ProgramClass, proguard.classfile.visitor.MemberVisitor)
    {
        proguard.classfile.visitor.MemberVisitor $r2;
        proguard.classfile.ProgramClass $r1;
        proguard.classfile.ProgramMethod r0;

        r0 := @this: proguard.classfile.ProgramMethod;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.visitor.MemberVisitor;

        interfaceinvoke $r2.<proguard.classfile.visitor.MemberVisitor: void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod)>($r1, r0);

        return;
    }

    public void attributesAccept(proguard.classfile.ProgramClass, proguard.classfile.attribute.visitor.AttributeVisitor)
    {
        proguard.classfile.ProgramMethod r0;
        int $i0, $i1;
        proguard.classfile.attribute.Attribute[] $r3;
        proguard.classfile.attribute.visitor.AttributeVisitor $r2;
        proguard.classfile.ProgramClass $r1;
        proguard.classfile.attribute.Attribute $r4;

        r0 := @this: proguard.classfile.ProgramMethod;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.attribute.visitor.AttributeVisitor;

        $i0 = 0;

     label1:
        $i1 = r0.<proguard.classfile.ProgramMethod: int u2attributesCount>;

        if $i0 >= $i1 goto label2;

        $r3 = r0.<proguard.classfile.ProgramMethod: proguard.classfile.attribute.Attribute[] attributes>;

        $r4 = $r3[$i0];

        virtualinvoke $r4.<proguard.classfile.attribute.Attribute: void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.visitor.AttributeVisitor)>($r1, r0, $r2);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void referencedClassesAccept(proguard.classfile.visitor.ClassVisitor)
    {
        proguard.classfile.Clazz[] $r2;
        proguard.classfile.Clazz $r3;
        proguard.classfile.visitor.ClassVisitor $r1;
        proguard.classfile.ProgramMethod r0;
        int $i0, $i1;

        r0 := @this: proguard.classfile.ProgramMethod;

        $r1 := @parameter0: proguard.classfile.visitor.ClassVisitor;

        $r2 = r0.<proguard.classfile.ProgramMethod: proguard.classfile.Clazz[] referencedClasses>;

        if $r2 == null goto label3;

        $i0 = 0;

     label1:
        $r2 = r0.<proguard.classfile.ProgramMethod: proguard.classfile.Clazz[] referencedClasses>;

        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label3;

        $r2 = r0.<proguard.classfile.ProgramMethod: proguard.classfile.Clazz[] referencedClasses>;

        $r3 = $r2[$i0];

        if $r3 == null goto label2;

        $r2 = r0.<proguard.classfile.ProgramMethod: proguard.classfile.Clazz[] referencedClasses>;

        $r3 = $r2[$i0];

        interfaceinvoke $r3.<proguard.classfile.Clazz: void accept(proguard.classfile.visitor.ClassVisitor)>($r1);

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        return;
    }
}
