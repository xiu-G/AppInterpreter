public class com.yang.longrubblishclear.util.Uitils extends java.lang.Object
{
    public static final java.lang.String ACTION_INSTALL_SHORTCUT;
    private static final java.lang.String APP_DETAILS_CLASS_NAME;
    private static final java.lang.String APP_DETAILS_PACKAGE_NAME;
    public static final int APP_INSTALL_EXTERNAL;
    private static final java.lang.String APP_PKG_NAME_21;
    private static final java.lang.String APP_PKG_NAME_22;
    public static final java.lang.String EXTRA_SHORTCUT_DUPLICATE;
    public static final int FLAG_EXTERNAL_STORAGE;
    public static final int FLAG_FORWARD_LOCK;
    public static final int INSTALL_LOCATION_AUTO;
    public static final int INSTALL_LOCATION_PREFER_EXTERNAL;
    public static final int INSTALL_LOCATION_UNSPECIFIED;
    public static final int MOVE_EXTERNAL_MEDIA;
    public static final int MOVE_INTERNAL;
    private static final java.lang.String SCHEME;
    private static java.lang.Object iPackageManager;

    static void <clinit>()
    {
        <com.yang.longrubblishclear.util.Uitils: java.lang.String SCHEME> = "package";

        <com.yang.longrubblishclear.util.Uitils: int MOVE_INTERNAL> = 1;

        <com.yang.longrubblishclear.util.Uitils: int MOVE_EXTERNAL_MEDIA> = 2;

        <com.yang.longrubblishclear.util.Uitils: int INSTALL_LOCATION_UNSPECIFIED> = -1;

        <com.yang.longrubblishclear.util.Uitils: int INSTALL_LOCATION_PREFER_EXTERNAL> = 2;

        <com.yang.longrubblishclear.util.Uitils: int INSTALL_LOCATION_AUTO> = 0;

        <com.yang.longrubblishclear.util.Uitils: int FLAG_FORWARD_LOCK> = 1048576;

        <com.yang.longrubblishclear.util.Uitils: int FLAG_EXTERNAL_STORAGE> = 262144;

        <com.yang.longrubblishclear.util.Uitils: java.lang.String EXTRA_SHORTCUT_DUPLICATE> = "duplicate";

        <com.yang.longrubblishclear.util.Uitils: java.lang.String APP_PKG_NAME_22> = "pkg";

        <com.yang.longrubblishclear.util.Uitils: java.lang.String APP_PKG_NAME_21> = "com.android.settings.ApplicationPkgName";

        <com.yang.longrubblishclear.util.Uitils: int APP_INSTALL_EXTERNAL> = 2;

        <com.yang.longrubblishclear.util.Uitils: java.lang.String APP_DETAILS_PACKAGE_NAME> = "com.android.settings";

        <com.yang.longrubblishclear.util.Uitils: java.lang.String APP_DETAILS_CLASS_NAME> = "com.android.settings.InstalledAppDetails";

        <com.yang.longrubblishclear.util.Uitils: java.lang.String ACTION_INSTALL_SHORTCUT> = "com.android.launcher.action.INSTALL_SHORTCUT";

        <com.yang.longrubblishclear.util.Uitils: java.lang.Object iPackageManager> = null;

        return;
    }

    public void <init>()
    {
        com.yang.longrubblishclear.util.Uitils r0;

        r0 := @this: com.yang.longrubblishclear.util.Uitils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean canBeOnSdCard(android.content.pm.PackageManager, android.content.pm.ApplicationInfo)
    {
        android.content.pm.PackageManager $r0;
        int $i0;
        android.content.pm.ApplicationInfo $r1;
        boolean $z0;

        $r0 := @parameter0: android.content.pm.PackageManager;

        $r1 := @parameter1: android.content.pm.ApplicationInfo;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 >= 8 goto label1;

        return 0;

     label1:
        $i0 = $r1.<android.content.pm.ApplicationInfo: int flags>;

        $i0 = $i0 & 262144;

        if $i0 == 0 goto label3;

        $z0 = 0;

     label2:
        if $z0 != 0 goto label5;

        return 1;

     label3:
        $z0 = staticinvoke <com.yang.longrubblishclear.util.Uitils: boolean canBeOnSdCardChecker(android.content.pm.PackageManager,android.content.pm.ApplicationInfo)>($r0, $r1);

        if $z0 == 0 goto label4;

        $z0 = 0;

        goto label2;

     label4:
        $z0 = 1;

        goto label2;

     label5:
        return 0;
    }

    private static boolean canBeOnSdCardChecker(android.content.pm.PackageManager, android.content.pm.ApplicationInfo)
    {
        android.content.pm.PackageManager $r0;
        java.lang.reflect.Field $r4;
        java.lang.Integer $r6;
        android.content.pm.PackageInfo $r8;
        java.lang.Exception r2;
        int i0, $i1;
        java.lang.Class $r3;
        java.lang.Object $r5;
        java.lang.String $r7;
        android.content.pm.ApplicationInfo $r1;

        $r0 := @parameter0: android.content.pm.PackageManager;

        $r1 := @parameter1: android.content.pm.ApplicationInfo;

        i0 = <android.os.Build$VERSION: int SDK_INT>;

        if i0 < 9 goto label07;

     label01:
        $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>("installLocation");

        virtualinvoke $r4.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        $r5 = virtualinvoke $r4.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>($r1);

        $r6 = (java.lang.Integer) $r5;

        i0 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

     label02:
        $i1 = $r1.<android.content.pm.ApplicationInfo: int flags>;

     label03:
        $i1 = $i1 & 1048576;

        if $i1 != 0 goto label13;

     label04:
        $i1 = $r1.<android.content.pm.ApplicationInfo: int flags>;

     label05:
        $i1 = $i1 & 1;

        if $i1 != 0 goto label13;

        if i0 == 2 goto label06;

        if i0 != 0 goto label09;

     label06:
        return 1;

     label07:
        $r7 = $r1.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $r8 = virtualinvoke $r0.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>($r7, 8192);

        $r3 = virtualinvoke $r8.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>("installLocation");

        virtualinvoke $r4.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        $r5 = virtualinvoke $r4.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>($r8);

        $r6 = (java.lang.Integer) $r5;

        i0 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

     label08:
        goto label02;

     label09:
        $i1 = -1;

        if i0 != $i1 goto label13;

     label10:
        i0 = staticinvoke <com.yang.longrubblishclear.util.Uitils: int getInstallLocation()>();

     label11:
        if i0 != 2 goto label13;

        return 1;

     label12:
        r2 := @caughtexception;

        virtualinvoke r2.<java.lang.Exception: void printStackTrace()>();

     label13:
        return 0;

        catch java.lang.Exception from label01 to label02 with label12;
        catch java.lang.Exception from label02 to label03 with label12;
        catch java.lang.Exception from label04 to label05 with label12;
        catch java.lang.Exception from label07 to label08 with label12;
        catch java.lang.Exception from label10 to label11 with label12;
    }

    public static com.yang.longrubblishclear.util.APKInfo createApkInfo(android.content.pm.PackageManager, android.content.pm.PackageInfo, android.graphics.drawable.Drawable)
    {
        com.yang.longrubblishclear.util.ApkCacheHelper $r8;
        android.content.pm.PackageManager $r0;
        long $l1;
        android.content.pm.PackageInfo $r1;
        android.graphics.drawable.Drawable $r2, $r10, r11;
        com.yang.longrubblishclear.util.SystemUninstallerApp $r7;
        int $i0;
        java.lang.String $r4, $r13;
        com.yang.longrubblishclear.util.ApkCacheHelper$ApkCache $r9;
        boolean $z0, $z1;
        com.yang.longrubblishclear.util.APKInfo r3;
        java.lang.CharSequence $r12;
        java.io.File $r6;
        android.content.pm.ApplicationInfo $r5;

        $r0 := @parameter0: android.content.pm.PackageManager;

        $r1 := @parameter1: android.content.pm.PackageInfo;

        $r2 := @parameter2: android.graphics.drawable.Drawable;

        $z0 = 0;

        r3 = new com.yang.longrubblishclear.util.APKInfo;

        $r4 = $r1.<android.content.pm.PackageInfo: java.lang.String packageName>;

        specialinvoke r3.<com.yang.longrubblishclear.util.APKInfo: void <init>(java.lang.String)>($r4);

        $r5 = $r1.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r4 = $r5.<android.content.pm.ApplicationInfo: java.lang.String dataDir>;

        r3.<com.yang.longrubblishclear.util.APKInfo: java.lang.String dataDir> = $r4;

        $r4 = <com.yang.longrubblishclear.util.SystemUninstallerApp: java.lang.String DATA_DIR>;

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r4);

        if $z1 == 0 goto label01;

        $r4 = r3.<com.yang.longrubblishclear.util.APKInfo: java.lang.String dataDir>;

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r4);

        if $z1 != 0 goto label01;

        $r6 = new java.io.File;

        $r4 = r3.<com.yang.longrubblishclear.util.APKInfo: java.lang.String dataDir>;

        specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>($r4);

        $r4 = virtualinvoke $r6.<java.io.File: java.lang.String getParent()>();

        <com.yang.longrubblishclear.util.SystemUninstallerApp: java.lang.String DATA_DIR> = $r4;

     label01:
        $r4 = $r1.<android.content.pm.PackageInfo: java.lang.String versionName>;

        r3.<com.yang.longrubblishclear.util.APKInfo: java.lang.String versionName> = $r4;

        $r5 = $r1.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i0 = $r5.<android.content.pm.ApplicationInfo: int uid>;

        r3.<com.yang.longrubblishclear.util.APKInfo: int uid> = $i0;

        $r5 = $r1.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i0 = $r5.<android.content.pm.ApplicationInfo: int flags>;

        $i0 = $i0 & 1;

        if $i0 != 1 goto label06;

        $z1 = 1;

     label02:
        r3.<com.yang.longrubblishclear.util.APKInfo: boolean systemApp> = $z1;

        $r5 = $r1.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i0 = $r5.<android.content.pm.ApplicationInfo: int flags>;

        $i0 = $i0 & 262144;

        if $i0 != 262144 goto label07;

        $z1 = 1;

     label03:
        r3.<com.yang.longrubblishclear.util.APKInfo: boolean onSDCard> = $z1;

        $z1 = r3.<com.yang.longrubblishclear.util.APKInfo: boolean systemApp>;

        if $z1 != 0 goto label04;

        $z1 = r3.<com.yang.longrubblishclear.util.APKInfo: boolean onSDCard>;

        if $z1 == 0 goto label08;

        r3.<com.yang.longrubblishclear.util.APKInfo: boolean canMove> = 1;

     label04:
        $r7 = staticinvoke <com.yang.longrubblishclear.util.SystemUninstallerApp: com.yang.longrubblishclear.util.SystemUninstallerApp getInstance()>();

        $r8 = virtualinvoke $r7.<com.yang.longrubblishclear.util.SystemUninstallerApp: com.yang.longrubblishclear.util.ApkCacheHelper getApkCacheHelper()>();

        $r4 = $r1.<android.content.pm.PackageInfo: java.lang.String packageName>;

        $r9 = virtualinvoke $r8.<com.yang.longrubblishclear.util.ApkCacheHelper: com.yang.longrubblishclear.util.ApkCacheHelper$ApkCache load(java.lang.String)>($r4);

        if $r9 == null goto label11;

        $r4 = $r9.<com.yang.longrubblishclear.util.ApkCacheHelper$ApkCache: java.lang.String appName>;

        r3.<com.yang.longrubblishclear.util.APKInfo: java.lang.String name> = $r4;

        $r2 = $r9.<com.yang.longrubblishclear.util.ApkCacheHelper$ApkCache: android.graphics.drawable.Drawable icon>;

        r3.<com.yang.longrubblishclear.util.APKInfo: android.graphics.drawable.Drawable icon> = $r2;

     label05:
        $r4 = $r1.<android.content.pm.PackageInfo: java.lang.String versionName>;

        r3.<com.yang.longrubblishclear.util.APKInfo: java.lang.String versionName> = $r4;

        $r5 = $r1.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r4 = $r5.<android.content.pm.ApplicationInfo: java.lang.String publicSourceDir>;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r4);

        if $z0 != 0 goto label13;

        $r6 = new java.io.File;

        $r5 = $r1.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r4 = $r5.<android.content.pm.ApplicationInfo: java.lang.String publicSourceDir>;

        specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>($r4);

        $l1 = virtualinvoke $r6.<java.io.File: long length()>();

        r3.<com.yang.longrubblishclear.util.APKInfo: long fileSize> = $l1;

        $l1 = virtualinvoke $r6.<java.io.File: long lastModified()>();

        r3.<com.yang.longrubblishclear.util.APKInfo: long date> = $l1;

        $r5 = $r1.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r4 = $r5.<android.content.pm.ApplicationInfo: java.lang.String publicSourceDir>;

        r3.<com.yang.longrubblishclear.util.APKInfo: java.lang.String sourceDir> = $r4;

        return r3;

     label06:
        $z1 = 0;

        goto label02;

     label07:
        $z1 = 0;

        goto label03;

     label08:
        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 >= 8 goto label10;

     label09:
        r3.<com.yang.longrubblishclear.util.APKInfo: boolean canMove> = $z0;

        goto label04;

     label10:
        $z0 = 1;

        goto label09;

     label11:
        $r5 = $r1.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r10 = virtualinvoke $r0.<android.content.pm.PackageManager: android.graphics.drawable.Drawable getApplicationIcon(android.content.pm.ApplicationInfo)>($r5);

        r11 = $r10;

        if $r10 != null goto label12;

        r11 = null;

     label12:
        $r5 = $r1.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r12 = virtualinvoke $r0.<android.content.pm.PackageManager: java.lang.CharSequence getApplicationLabel(android.content.pm.ApplicationInfo)>($r5);

        $r4 = interfaceinvoke $r12.<java.lang.CharSequence: java.lang.String toString()>();

        r3.<com.yang.longrubblishclear.util.APKInfo: java.lang.String name> = $r4;

        r3.<com.yang.longrubblishclear.util.APKInfo: android.graphics.drawable.Drawable icon> = r11;

        $r7 = staticinvoke <com.yang.longrubblishclear.util.SystemUninstallerApp: com.yang.longrubblishclear.util.SystemUninstallerApp getInstance()>();

        $r8 = virtualinvoke $r7.<com.yang.longrubblishclear.util.SystemUninstallerApp: com.yang.longrubblishclear.util.ApkCacheHelper getApkCacheHelper()>();

        $r4 = $r1.<android.content.pm.PackageInfo: java.lang.String packageName>;

        $r2 = r3.<com.yang.longrubblishclear.util.APKInfo: android.graphics.drawable.Drawable icon>;

        $r13 = r3.<com.yang.longrubblishclear.util.APKInfo: java.lang.String name>;

        virtualinvoke $r8.<com.yang.longrubblishclear.util.ApkCacheHelper: boolean save(java.lang.String,android.graphics.drawable.Drawable,java.lang.String)>($r4, $r2, $r13);

        goto label05;

     label13:
        $r5 = $r1.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r4 = $r5.<android.content.pm.ApplicationInfo: java.lang.String sourceDir>;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r4);

        if $z0 != 0 goto label14;

        $r6 = new java.io.File;

        $r5 = $r1.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r4 = $r5.<android.content.pm.ApplicationInfo: java.lang.String sourceDir>;

        specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>($r4);

        $l1 = virtualinvoke $r6.<java.io.File: long length()>();

        r3.<com.yang.longrubblishclear.util.APKInfo: long fileSize> = $l1;

        $l1 = virtualinvoke $r6.<java.io.File: long lastModified()>();

        r3.<com.yang.longrubblishclear.util.APKInfo: long date> = $l1;

        $r5 = $r1.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r4 = $r5.<android.content.pm.ApplicationInfo: java.lang.String sourceDir>;

        r3.<com.yang.longrubblishclear.util.APKInfo: java.lang.String sourceDir> = $r4;

     label14:
        return r3;
    }

    public static android.graphics.Bitmap drawableToBitmap(android.graphics.drawable.Drawable)
    {
        android.graphics.Bitmap $r2;
        int $i0, $i1, $i2;
        android.graphics.Canvas $r3;
        android.graphics.drawable.Drawable $r0;
        android.graphics.Bitmap$Config $r1;

        $r0 := @parameter0: android.graphics.drawable.Drawable;

        $i0 = virtualinvoke $r0.<android.graphics.drawable.Drawable: int getIntrinsicWidth()>();

        $i1 = virtualinvoke $r0.<android.graphics.drawable.Drawable: int getIntrinsicHeight()>();

        $i2 = virtualinvoke $r0.<android.graphics.drawable.Drawable: int getOpacity()>();

        if $i2 == -1 goto label2;

        $r1 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

     label1:
        $r2 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>($i0, $i1, $r1);

        $r3 = new android.graphics.Canvas;

        specialinvoke $r3.<android.graphics.Canvas: void <init>(android.graphics.Bitmap)>($r2);

        $i0 = virtualinvoke $r0.<android.graphics.drawable.Drawable: int getIntrinsicWidth()>();

        $i1 = virtualinvoke $r0.<android.graphics.drawable.Drawable: int getIntrinsicHeight()>();

        virtualinvoke $r0.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>(0, 0, $i0, $i1);

        virtualinvoke $r0.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>($r3);

        return $r2;

     label2:
        $r1 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config RGB_565>;

        goto label1;
    }

    private static int getInstallLocation()
    {
        java.lang.Object[] $r5;
        java.lang.Class[] $r3;
        java.lang.Integer $r6;
        java.lang.Exception r0;
        int $i0;
        java.lang.Object $r1;
        java.lang.Class $r2;
        java.lang.reflect.Method $r4;

        $r1 = <com.yang.longrubblishclear.util.Uitils: java.lang.Object iPackageManager>;

        if $r1 != null goto label07;

     label01:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("android.app.ActivityThread");

     label02:
        $r3 = newarray (java.lang.Class)[0];

     label03:
        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getPackageManager", $r3);

     label04:
        $r5 = newarray (java.lang.Object)[0];

     label05:
        $r1 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r2, $r5);

     label06:
        <com.yang.longrubblishclear.util.Uitils: java.lang.Object iPackageManager> = $r1;

     label07:
        $r1 = <com.yang.longrubblishclear.util.Uitils: java.lang.Object iPackageManager>;

     label08:
        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

     label09:
        $r3 = newarray (java.lang.Class)[0];

     label10:
        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getInstallLocation", $r3);

     label11:
        $r1 = <com.yang.longrubblishclear.util.Uitils: java.lang.Object iPackageManager>;

        $r5 = newarray (java.lang.Object)[0];

     label12:
        $r1 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r1, $r5);

        $r6 = (java.lang.Integer) $r1;

        $i0 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

     label13:
        return $i0;

     label14:
        r0 := @caughtexception;

        virtualinvoke r0.<java.lang.Exception: void printStackTrace()>();

        return 0;

        catch java.lang.Exception from label01 to label02 with label14;
        catch java.lang.Exception from label03 to label04 with label14;
        catch java.lang.Exception from label05 to label06 with label14;
        catch java.lang.Exception from label08 to label09 with label14;
        catch java.lang.Exception from label10 to label11 with label14;
        catch java.lang.Exception from label12 to label13 with label14;
    }

    public static android.content.Intent getInstalledAppDetailsIntent(java.lang.String)
    {
        int i0;
        android.net.Uri $r1;
        android.content.Intent r2;
        java.lang.String $r0, r3;

        $r0 := @parameter0: java.lang.String;

        r2 = new android.content.Intent;

        specialinvoke r2.<android.content.Intent: void <init>()>();

        i0 = <android.os.Build$VERSION: int SDK_INT>;

        if i0 < 9 goto label1;

        r2 = new android.content.Intent;

        specialinvoke r2.<android.content.Intent: void <init>(java.lang.String)>("android.settings.APPLICATION_DETAILS_SETTINGS");

        $r1 = staticinvoke <android.net.Uri: android.net.Uri fromParts(java.lang.String,java.lang.String,java.lang.String)>("package", $r0, null);

        virtualinvoke r2.<android.content.Intent: android.content.Intent setData(android.net.Uri)>($r1);

        return r2;

     label1:
        if i0 != 8 goto label3;

        r3 = "pkg";

     label2:
        virtualinvoke r2.<android.content.Intent: android.content.Intent setAction(java.lang.String)>("android.intent.action.VIEW");

        virtualinvoke r2.<android.content.Intent: android.content.Intent setClassName(java.lang.String,java.lang.String)>("com.android.settings", "com.android.settings.InstalledAppDetails");

        virtualinvoke r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>(r3, $r0);

        return r2;

     label3:
        r3 = "com.android.settings.ApplicationPkgName";

        goto label2;
    }

    public static android.content.Intent getLaunchIntentForPackage(android.content.pm.PackageManager, java.lang.String)
    {
        android.content.Intent $r2;
        java.lang.String $r1;
        android.content.pm.PackageManager $r0;

        $r0 := @parameter0: android.content.pm.PackageManager;

        $r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke $r0.<android.content.pm.PackageManager: android.content.Intent getLaunchIntentForPackage(java.lang.String)>($r1);

        return $r2;
    }

    public static void installShortcut(android.content.Context, android.content.Intent, java.lang.String, int)
    {
        android.content.Context $r0;
        int $i0;
        android.content.Intent$ShortcutIconResource $r4;
        android.content.Intent $r1, r3;
        java.lang.String $r2;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: android.content.Intent;

        $r2 := @parameter2: java.lang.String;

        $i0 := @parameter3: int;

        r3 = new android.content.Intent;

        specialinvoke r3.<android.content.Intent: void <init>(java.lang.String)>("com.android.launcher.action.INSTALL_SHORTCUT");

        virtualinvoke r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("android.intent.extra.shortcut.NAME", $r2);

        virtualinvoke r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("duplicate", 0);

        virtualinvoke r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("android.intent.extra.shortcut.INTENT", $r1);

        $r4 = staticinvoke <android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>($r0, $i0);

        virtualinvoke r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("android.intent.extra.shortcut.ICON_RESOURCE", $r4);

        virtualinvoke $r0.<android.content.Context: void sendBroadcast(android.content.Intent)>(r3);

        return;
    }

    public static void saveMyBitmap(android.graphics.Bitmap, java.io.File) throws java.io.IOException
    {
        java.lang.Throwable r5, r6, r7;
        java.io.FileOutputStream r3, $r8;
        java.io.IOException $r10;
        java.io.File $r1, $r2;
        java.io.FileNotFoundException $r9;
        android.graphics.Bitmap $r0;
        android.graphics.Bitmap$CompressFormat $r4;
        boolean $z0;

        $r0 := @parameter0: android.graphics.Bitmap;

        $r1 := @parameter1: java.io.File;

        $r2 = virtualinvoke $r1.<java.io.File: java.io.File getParentFile()>();

        $z0 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label01;

        $r2 = virtualinvoke $r1.<java.io.File: java.io.File getParentFile()>();

        virtualinvoke $r2.<java.io.File: boolean mkdirs()>();

     label01:
        virtualinvoke $r1.<java.io.File: boolean createNewFile()>();

        r3 = null;

        $r8 = new java.io.FileOutputStream;

     label02:
        specialinvoke $r8.<java.io.FileOutputStream: void <init>(java.io.File)>($r1);

     label03:
        r3 = $r8;

     label04:
        $r4 = <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat PNG>;

        virtualinvoke $r0.<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>($r4, 100, r3);

     label05:
        virtualinvoke r3.<java.io.FileOutputStream: void flush()>();

     label06:
        virtualinvoke r3.<java.io.FileOutputStream: void close()>();

     label07:
        return;

     label08:
        r5 := @caughtexception;

        $r9 = (java.io.FileNotFoundException) r5;

        virtualinvoke $r9.<java.io.FileNotFoundException: void printStackTrace()>();

        goto label04;

     label09:
        r6 := @caughtexception;

        $r10 = (java.io.IOException) r6;

        virtualinvoke $r10.<java.io.IOException: void printStackTrace()>();

        goto label06;

     label10:
        r7 := @caughtexception;

        $r10 = (java.io.IOException) r7;

        virtualinvoke $r10.<java.io.IOException: void printStackTrace()>();

        return;

        catch java.io.FileNotFoundException from label02 to label03 with label08;
        catch java.io.IOException from label05 to label06 with label09;
        catch java.io.IOException from label06 to label07 with label10;
    }

    public static void shareFriends(android.content.Context, java.lang.String, java.lang.String)
    {
        android.content.Context $r0;
        android.content.Intent r3;
        java.lang.String $r1, $r2;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        r3 = new android.content.Intent;

        specialinvoke r3.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.SEND");

        virtualinvoke r3.<android.content.Intent: android.content.Intent setType(java.lang.String)>("text/plain");

        virtualinvoke r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("android.intent.extra.SUBJECT", $r1);

        virtualinvoke r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("android.intent.extra.TEXT", $r2);

        virtualinvoke r3.<android.content.Intent: android.content.Intent setFlags(int)>(268435456);

        $r1 = virtualinvoke $r0.<android.content.Context: java.lang.String getString(int)>(2131230773);

        r3 = staticinvoke <android.content.Intent: android.content.Intent createChooser(android.content.Intent,java.lang.CharSequence)>(r3, $r1);

        virtualinvoke $r0.<android.content.Context: void startActivity(android.content.Intent)>(r3);

        return;
    }

    public static void showInstalledAppDetails(android.content.Context, java.lang.String)
    {
        android.content.Context $r0;
        android.content.Intent $r2;
        java.lang.String $r1;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <com.yang.longrubblishclear.util.Uitils: android.content.Intent getInstalledAppDetailsIntent(java.lang.String)>($r1);

        virtualinvoke $r0.<android.content.Context: void startActivity(android.content.Intent)>($r2);

        return;
    }

    public static boolean tryLaunchActivity(android.content.Context, java.lang.String)
    {
        android.content.Context $r0;
        android.content.pm.PackageManager $r2;
        android.content.Intent $r3;
        java.lang.String $r1;
        java.lang.Exception $r4;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke $r0.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r3 = staticinvoke <com.yang.longrubblishclear.util.Uitils: android.content.Intent getLaunchIntentForPackage(android.content.pm.PackageManager,java.lang.String)>($r2, $r1);

        if $r3 == null goto label4;

     label1:
        virtualinvoke $r0.<android.content.Context: void startActivity(android.content.Intent)>($r3);

     label2:
        return 1;

     label3:
        $r4 := @caughtexception;

     label4:
        return 0;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static void unInstallAppNormal(android.content.Context, java.lang.String)
    {
        android.content.Context $r0;
        android.net.Uri $r4;
        android.content.Intent r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r1;
        java.lang.Exception $r5;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: java.lang.String;

        r2 = new android.content.Intent;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("package:");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>($r1);

        specialinvoke r2.<android.content.Intent: void <init>(java.lang.String,android.net.Uri)>("android.intent.action.DELETE", $r4);

     label1:
        virtualinvoke $r0.<android.content.Context: void startActivity(android.content.Intent)>(r2);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }
}
