public class org.achartengine.util.MathHelper extends java.lang.Object
{
    public static final int ANGLE;
    public static final double[] COS;
    private static final java.text.NumberFormat FORMAT;
    public static final double NULL_VALUE;
    public static final double[] RADIANS;
    public static final double[] SIN;

    static void <clinit>()
    {
        double[] $r1;
        java.text.NumberFormat $r0;

        <org.achartengine.util.MathHelper: double NULL_VALUE> = 1.7976931348623157E308;

        <org.achartengine.util.MathHelper: int ANGLE> = 360;

        $r1 = newarray (double)[361];

        <org.achartengine.util.MathHelper: double[] RADIANS> = $r1;

        $r1 = newarray (double)[361];

        <org.achartengine.util.MathHelper: double[] SIN> = $r1;

        $r1 = newarray (double)[361];

        <org.achartengine.util.MathHelper: double[] COS> = $r1;

        $r0 = staticinvoke <java.text.NumberFormat: java.text.NumberFormat getNumberInstance()>();

        <org.achartengine.util.MathHelper: java.text.NumberFormat FORMAT> = $r0;

        staticinvoke <org.achartengine.util.MathHelper: void calculateValues()>();

        return;
    }

    private void <init>()
    {
        org.achartengine.util.MathHelper r0;

        r0 := @this: org.achartengine.util.MathHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void calculateValues()
    {
        int $i0;
        double[] $r0;
        double $d0, $d1;

        $i0 = 0;

     label1:
        if $i0 > 360 goto label2;

        $d0 = (double) $i0;

        $d0 = staticinvoke <java.lang.Math: double toRadians(double)>($d0);

        $r0 = <org.achartengine.util.MathHelper: double[] RADIANS>;

        $r0[$i0] = $d0;

        $r0 = <org.achartengine.util.MathHelper: double[] SIN>;

        $d1 = staticinvoke <java.lang.Math: double sin(double)>($d0);

        $r0[$i0] = $d1;

        $r0 = <org.achartengine.util.MathHelper: double[] COS>;

        $d0 = staticinvoke <java.lang.Math: double cos(double)>($d0);

        $r0[$i0] = $d0;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    private static double[] computeLabels(double, double, int)
    {
        double[] $r0;
        byte $b1;
        int $i0, $i2;
        double $d0, $d1, $d2, $d3;
        boolean $z0;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $i0 := @parameter2: int;

        $d2 = $d0 - $d1;

        $d2 = staticinvoke <java.lang.Math: double abs(double)>($d2);

        $b1 = $d2 cmpg 1.0000000116860974E-7;

        $i2 = (int) $b1;

        if $i2 >= 0 goto label1;

        $r0 = newarray (double)[3];

        $r0[0] = $d0;

        $r0[1] = $d0;

        $d0 = (double) 0L;

        $r0[2] = $d0;

        return $r0;

     label1:
        $b1 = $d0 cmpl $d1;

        $i2 = (int) $b1;

        if $i2 <= 0 goto label4;

        $d2 = $d1;

        $z0 = 1;

     label2:
        $d1 = $d2 - $d0;

        $d1 = staticinvoke <java.lang.Math: double abs(double)>($d1);

        $d3 = (double) $i0;

        $d1 = $d1 / $d3;

        $d1 = staticinvoke <org.achartengine.util.MathHelper: double roundUp(double)>($d1);

        $d2 = $d2 / $d1;

        $d2 = staticinvoke <java.lang.Math: double ceil(double)>($d2);

        $d2 = $d2 * $d1;

        $d0 = $d0 / $d1;

        $d0 = staticinvoke <java.lang.Math: double floor(double)>($d0);

        $d0 = $d0 * $d1;

        if $z0 == 0 goto label3;

        $r0 = newarray (double)[3];

        $r0[0] = $d0;

        $r0[1] = $d2;

        $d0 = -1.0 * $d1;

        $r0[2] = $d0;

        return $r0;

     label3:
        $r0 = newarray (double)[3];

        $r0[0] = $d2;

        $r0[1] = $d0;

        $r0[2] = $d1;

        return $r0;

     label4:
        $d2 = $d0;

        $z0 = 0;

        $d0 = $d1;

        goto label2;
    }

    public static int getAngle(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        if $i0 >= 0 goto label1;

        $i0 = $i0 + 360;

        return $i0;

     label1:
        if $i0 <= 360 goto label2;

        $i0 = $i0 - 360;

     label2:
        return $i0;
    }

    public static double[] getDoubles(java.lang.Object[])
    {
        java.lang.Object[] $r0;
        java.lang.Double $r3;
        int $i0, $i1;
        double[] $r1;
        java.lang.Object $r2;
        double $d0;

        $r0 := @parameter0: java.lang.Object[];

        $i0 = lengthof $r0;

        $r1 = newarray (double)[$i0];

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r2 = $r0[$i1];

        $r3 = (java.lang.Double) $r2;

        $d0 = virtualinvoke $r3.<java.lang.Double: double doubleValue()>();

        $r1[$i1] = $d0;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $r1;
    }

    public static float[] getFloats(java.lang.Object[])
    {
        java.lang.Float $r3;
        java.lang.Object[] $r0;
        int $i0, $i1;
        float $f0;
        float[] $r1;
        java.lang.Object $r2;

        $r0 := @parameter0: java.lang.Object[];

        $i0 = lengthof $r0;

        $r1 = newarray (float)[$i0];

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r2 = $r0[$i1];

        $r3 = (java.lang.Float) $r2;

        $f0 = virtualinvoke $r3.<java.lang.Float: float floatValue()>();

        $r1[$i1] = $f0;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $r1;
    }

    public static java.util.List getLabels(double, double, int)
    {
        java.lang.Throwable $r7;
        java.lang.Double $r6;
        double[] $r2;
        java.text.NumberFormat $r0, $r3;
        java.util.ArrayList $r1;
        int $i0, $i1;
        java.lang.String $r4;
        java.lang.Number $r5;
        double $d0, $d1, $d2;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $i0 := @parameter2: int;

        $r0 = <org.achartengine.util.MathHelper: java.text.NumberFormat FORMAT>;

        virtualinvoke $r0.<java.text.NumberFormat: void setMaximumFractionDigits(int)>(5);

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r2 = staticinvoke <org.achartengine.util.MathHelper: double[] computeLabels(double,double,int)>($d0, $d1, $i0);

        $d0 = $r2[1];

        $d1 = $r2[0];

        $d0 = $d0 - $d1;

        $d1 = $r2[2];

        $d0 = $d0 / $d1;

        $i0 = (int) $d0;

        $i0 = $i0 + 1;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label5;

        $d0 = $r2[0];

        $d1 = (double) $i1;

        $d2 = $r2[2];

        $d1 = $d1 * $d2;

        $d0 = $d0 + $d1;

        $r0 = <org.achartengine.util.MathHelper: java.text.NumberFormat FORMAT>;

        $r3 = <org.achartengine.util.MathHelper: java.text.NumberFormat FORMAT>;

     label2:
        $r4 = virtualinvoke $r3.<java.text.NumberFormat: java.lang.String format(double)>($d0);

        $r5 = virtualinvoke $r0.<java.text.NumberFormat: java.lang.Number parse(java.lang.String)>($r4);

        $d1 = virtualinvoke $r5.<java.lang.Number: double doubleValue()>();

     label3:
        $d0 = $d1;

     label4:
        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r6);

        $i1 = $i1 + 1;

        goto label1;

     label5:
        return $r1;

     label6:
        $r7 := @caughtexception;

        goto label4;

        catch java.text.ParseException from label2 to label3 with label6;
    }

    public static double[] minmax(java.util.List)
    {
        java.lang.Double $r3;
        double[] $r1;
        java.util.List $r0;
        int $i0, $i1;
        java.lang.Object $r2;
        double $d0, $d1, $d2;

        $r0 := @parameter0: java.util.List;

        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        $r1 = newarray (double)[2];

        return $r1;

     label1:
        $r2 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (java.lang.Double) $r2;

        $d0 = virtualinvoke $r3.<java.lang.Double: double doubleValue()>();

        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        $d1 = $d0;

        $i1 = 1;

     label2:
        if $i1 >= $i0 goto label3;

        $r2 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>($i1);

        $r3 = (java.lang.Double) $r2;

        $d2 = virtualinvoke $r3.<java.lang.Double: double doubleValue()>();

        $d0 = staticinvoke <java.lang.Math: double min(double,double)>($d0, $d2);

        $d1 = staticinvoke <java.lang.Math: double max(double,double)>($d1, $d2);

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $r1 = newarray (double)[2];

        $r1[0] = $d0;

        $r1[1] = $d1;

        return $r1;
    }

    private static double roundUp(double)
    {
        byte $b2;
        int $i0, $i1;
        double $d0, $d1;

        $d0 := @parameter0: double;

        $d1 = staticinvoke <java.lang.Math: double log10(double)>($d0);

        $d1 = staticinvoke <java.lang.Math: double floor(double)>($d1);

        $i0 = (int) $d1;

        $i1 = neg $i0;

        $d1 = (double) $i1;

        $d1 = staticinvoke <java.lang.Math: double pow(double,double)>(10.0, $d1);

        $d0 = $d1 * $d0;

        $b2 = $d0 cmpl 5.0;

        $i1 = (int) $b2;

        if $i1 <= 0 goto label2;

        $d0 = 10.0;

     label1:
        $d1 = (double) $i0;

        $d1 = staticinvoke <java.lang.Math: double pow(double,double)>(10.0, $d1);

        $d0 = $d0 * $d1;

        return $d0;

     label2:
        $b2 = $d0 cmpl 2.0;

        $i1 = (int) $b2;

        if $i1 <= 0 goto label3;

        $d0 = 5.0;

        goto label1;

     label3:
        $b2 = $d0 cmpl 1.0;

        $i1 = (int) $b2;

        if $i1 <= 0 goto label1;

        $d0 = 2.0;

        goto label1;
    }

    public static double sum(java.util.List)
    {
        java.util.List $r0;
        java.lang.Double $r2;
        int $i0, $i1;
        java.lang.Object $r1;
        double $d0, $d1;

        $r0 := @parameter0: java.util.List;

        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        $d0 = 0.0;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r1 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>($i1);

        $r2 = (java.lang.Double) $r1;

        $d1 = virtualinvoke $r2.<java.lang.Double: double doubleValue()>();

        $d0 = $d0 + $d1;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $d0;
    }
}
