class com.hp.hpl.sparta.XPathVisitor extends java.lang.Object implements com.hp.hpl.sparta.xpath.Visitor
{
    private static final java.lang.Boolean FALSE;
    private static final java.lang.Boolean TRUE;
    private com.hp.hpl.sparta.Node contextNode_;
    private final com.hp.hpl.sparta.XPathVisitor$BooleanStack exprStack_;
    private boolean multiLevel_;
    private java.lang.Object node_;
    private java.util.Vector nodelistFiltered_;
    private final com.hp.hpl.sparta.NodeListWithPosition nodelistRaw_;
    private java.util.Enumeration nodesetIterator_;
    private com.hp.hpl.sparta.xpath.XPath xpath_;

    static void <clinit>()
    {
        java.lang.Boolean $r0;

        $r0 = new java.lang.Boolean;

        specialinvoke $r0.<java.lang.Boolean: void <init>(boolean)>(1);

        <com.hp.hpl.sparta.XPathVisitor: java.lang.Boolean TRUE> = $r0;

        $r0 = new java.lang.Boolean;

        specialinvoke $r0.<java.lang.Boolean: void <init>(boolean)>(0);

        <com.hp.hpl.sparta.XPathVisitor: java.lang.Boolean FALSE> = $r0;

        return;
    }

    public void <init>(com.hp.hpl.sparta.Document, com.hp.hpl.sparta.xpath.XPath) throws com.hp.hpl.sparta.xpath.XPathException
    {
        com.hp.hpl.sparta.Document $r1;
        com.hp.hpl.sparta.xpath.XPath $r2;
        com.hp.hpl.sparta.XPathVisitor r0;

        r0 := @this: com.hp.hpl.sparta.XPathVisitor;

        $r1 := @parameter0: com.hp.hpl.sparta.Document;

        $r2 := @parameter1: com.hp.hpl.sparta.xpath.XPath;

        specialinvoke r0.<com.hp.hpl.sparta.XPathVisitor: void <init>(com.hp.hpl.sparta.xpath.XPath,com.hp.hpl.sparta.Node)>($r2, $r1);

        return;
    }

    public void <init>(com.hp.hpl.sparta.Element, com.hp.hpl.sparta.xpath.XPath) throws com.hp.hpl.sparta.xpath.XPathException
    {
        com.hp.hpl.sparta.Element $r1;
        com.hp.hpl.sparta.xpath.XPath $r2;
        com.hp.hpl.sparta.xpath.XPathException $r3;
        com.hp.hpl.sparta.XPathVisitor r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.XPathVisitor;

        $r1 := @parameter0: com.hp.hpl.sparta.Element;

        $r2 := @parameter1: com.hp.hpl.sparta.xpath.XPath;

        specialinvoke r0.<com.hp.hpl.sparta.XPathVisitor: void <init>(com.hp.hpl.sparta.xpath.XPath,com.hp.hpl.sparta.Node)>($r2, $r1);

        $z0 = virtualinvoke $r2.<com.hp.hpl.sparta.xpath.XPath: boolean isAbsolute()>();

        if $z0 == 0 goto label1;

        $r3 = new com.hp.hpl.sparta.xpath.XPathException;

        specialinvoke $r3.<com.hp.hpl.sparta.xpath.XPathException: void <init>(com.hp.hpl.sparta.xpath.XPath,java.lang.String)>($r2, "Cannot use element as context node for absolute xpath");

        throw $r3;

     label1:
        return;
    }

    private void <init>(com.hp.hpl.sparta.xpath.XPath, com.hp.hpl.sparta.Node) throws com.hp.hpl.sparta.xpath.XPathException
    {
        com.hp.hpl.sparta.xpath.BooleanExpr $r11;
        com.hp.hpl.sparta.Node $r2;
        java.util.Enumeration $r7, $r10;
        com.hp.hpl.sparta.XPathVisitor r0;
        com.hp.hpl.sparta.NodeListWithPosition $r4;
        com.hp.hpl.sparta.xpath.NodeTest $r9;
        java.util.Vector $r5;
        com.hp.hpl.sparta.xpath.XPath $r1;
        java.lang.Boolean $r12;
        java.lang.Object $r3;
        com.hp.hpl.sparta.XPathVisitor$BooleanStack $r6;
        com.hp.hpl.sparta.xpath.Step $r8;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.XPathVisitor;

        $r1 := @parameter0: com.hp.hpl.sparta.xpath.XPath;

        $r2 := @parameter1: com.hp.hpl.sparta.Node;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new com.hp.hpl.sparta.NodeListWithPosition;

        specialinvoke $r4.<com.hp.hpl.sparta.NodeListWithPosition: void <init>()>();

        r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.NodeListWithPosition nodelistRaw_> = $r4;

        $r5 = new java.util.Vector;

        specialinvoke $r5.<java.util.Vector: void <init>()>();

        r0.<com.hp.hpl.sparta.XPathVisitor: java.util.Vector nodelistFiltered_> = $r5;

        r0.<com.hp.hpl.sparta.XPathVisitor: java.util.Enumeration nodesetIterator_> = null;

        r0.<com.hp.hpl.sparta.XPathVisitor: java.lang.Object node_> = null;

        $r6 = new com.hp.hpl.sparta.XPathVisitor$BooleanStack;

        specialinvoke $r6.<com.hp.hpl.sparta.XPathVisitor$BooleanStack: void <init>(com.hp.hpl.sparta.XPathVisitor$1)>(null);

        r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.XPathVisitor$BooleanStack exprStack_> = $r6;

        r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.xpath.XPath xpath_> = $r1;

        r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.Node contextNode_> = $r2;

        $r5 = new java.util.Vector;

        specialinvoke $r5.<java.util.Vector: void <init>(int)>(1);

        r0.<com.hp.hpl.sparta.XPathVisitor: java.util.Vector nodelistFiltered_> = $r5;

        $r5 = r0.<com.hp.hpl.sparta.XPathVisitor: java.util.Vector nodelistFiltered_>;

        $r2 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.Node contextNode_>;

        virtualinvoke $r5.<java.util.Vector: void addElement(java.lang.Object)>($r2);

        $r7 = virtualinvoke $r1.<com.hp.hpl.sparta.xpath.XPath: java.util.Enumeration getSteps()>();

     label1:
        $z0 = interfaceinvoke $r7.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 != 0 goto label2;

        return;

     label2:
        $r3 = interfaceinvoke $r7.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r8 = (com.hp.hpl.sparta.xpath.Step) $r3;

        $z0 = virtualinvoke $r8.<com.hp.hpl.sparta.xpath.Step: boolean isMultiLevel()>();

        r0.<com.hp.hpl.sparta.XPathVisitor: boolean multiLevel_> = $z0;

        r0.<com.hp.hpl.sparta.XPathVisitor: java.util.Enumeration nodesetIterator_> = null;

        $r9 = virtualinvoke $r8.<com.hp.hpl.sparta.xpath.Step: com.hp.hpl.sparta.xpath.NodeTest getNodeTest()>();

        virtualinvoke $r9.<com.hp.hpl.sparta.xpath.NodeTest: void accept(com.hp.hpl.sparta.xpath.Visitor)>(r0);

        $r4 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.NodeListWithPosition nodelistRaw_>;

        $r10 = virtualinvoke $r4.<com.hp.hpl.sparta.NodeListWithPosition: java.util.Enumeration iterator()>();

        r0.<com.hp.hpl.sparta.XPathVisitor: java.util.Enumeration nodesetIterator_> = $r10;

        $r5 = r0.<com.hp.hpl.sparta.XPathVisitor: java.util.Vector nodelistFiltered_>;

        virtualinvoke $r5.<java.util.Vector: void removeAllElements()>();

        $r11 = virtualinvoke $r8.<com.hp.hpl.sparta.xpath.Step: com.hp.hpl.sparta.xpath.BooleanExpr getPredicate()>();

     label3:
        $r10 = r0.<com.hp.hpl.sparta.XPathVisitor: java.util.Enumeration nodesetIterator_>;

        $z0 = interfaceinvoke $r10.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label1;

        $r10 = r0.<com.hp.hpl.sparta.XPathVisitor: java.util.Enumeration nodesetIterator_>;

        $r3 = interfaceinvoke $r10.<java.util.Enumeration: java.lang.Object nextElement()>();

        r0.<com.hp.hpl.sparta.XPathVisitor: java.lang.Object node_> = $r3;

        virtualinvoke $r11.<com.hp.hpl.sparta.xpath.BooleanExpr: void accept(com.hp.hpl.sparta.xpath.BooleanExprVisitor)>(r0);

        $r6 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.XPathVisitor$BooleanStack exprStack_>;

        $r12 = virtualinvoke $r6.<com.hp.hpl.sparta.XPathVisitor$BooleanStack: java.lang.Boolean pop()>();

        $z0 = virtualinvoke $r12.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label3;

        $r5 = r0.<com.hp.hpl.sparta.XPathVisitor: java.util.Vector nodelistFiltered_>;

        $r3 = r0.<com.hp.hpl.sparta.XPathVisitor: java.lang.Object node_>;

        virtualinvoke $r5.<java.util.Vector: void addElement(java.lang.Object)>($r3);

        goto label3;
    }

    private void accumulateElements(com.hp.hpl.sparta.Document)
    {
        com.hp.hpl.sparta.Element $r2;
        com.hp.hpl.sparta.Document $r1;
        com.hp.hpl.sparta.XPathVisitor r0;
        com.hp.hpl.sparta.NodeListWithPosition $r3;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.XPathVisitor;

        $r1 := @parameter0: com.hp.hpl.sparta.Document;

        $r2 = virtualinvoke $r1.<com.hp.hpl.sparta.Document: com.hp.hpl.sparta.Element getDocumentElement()>();

        $r3 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.NodeListWithPosition nodelistRaw_>;

        virtualinvoke $r3.<com.hp.hpl.sparta.NodeListWithPosition: void add(com.hp.hpl.sparta.Node,int)>($r2, 1);

        $z0 = r0.<com.hp.hpl.sparta.XPathVisitor: boolean multiLevel_>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.hp.hpl.sparta.XPathVisitor: void accumulateElements(com.hp.hpl.sparta.Element)>($r2);

     label1:
        return;
    }

    private void accumulateElements(com.hp.hpl.sparta.Element)
    {
        com.hp.hpl.sparta.Element $r1;
        com.hp.hpl.sparta.Node $r3;
        com.hp.hpl.sparta.XPathVisitor r0;
        int $i0;
        com.hp.hpl.sparta.NodeListWithPosition $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.XPathVisitor;

        $r1 := @parameter0: com.hp.hpl.sparta.Element;

        $i0 = 0;

        $r3 = virtualinvoke $r1.<com.hp.hpl.sparta.Element: com.hp.hpl.sparta.Node getFirstChild()>();

     label1:
        if $r3 != null goto label2;

        return;

     label2:
        $z0 = $r3 instanceof com.hp.hpl.sparta.Element;

        if $z0 == 0 goto label3;

        $r2 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.NodeListWithPosition nodelistRaw_>;

        $i0 = $i0 + 1;

        virtualinvoke $r2.<com.hp.hpl.sparta.NodeListWithPosition: void add(com.hp.hpl.sparta.Node,int)>($r3, $i0);

        $z0 = r0.<com.hp.hpl.sparta.XPathVisitor: boolean multiLevel_>;

        if $z0 == 0 goto label3;

        $r1 = (com.hp.hpl.sparta.Element) $r3;

        specialinvoke r0.<com.hp.hpl.sparta.XPathVisitor: void accumulateElements(com.hp.hpl.sparta.Element)>($r1);

     label3:
        $r3 = virtualinvoke $r3.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node getNextSibling()>();

        goto label1;
    }

    private void accumulateMatchingElements(com.hp.hpl.sparta.Document, java.lang.String)
    {
        com.hp.hpl.sparta.Element $r3;
        com.hp.hpl.sparta.Document $r1;
        com.hp.hpl.sparta.XPathVisitor r0;
        java.lang.String $r2, $r4;
        com.hp.hpl.sparta.NodeListWithPosition $r5;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.XPathVisitor;

        $r1 := @parameter0: com.hp.hpl.sparta.Document;

        $r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke $r1.<com.hp.hpl.sparta.Document: com.hp.hpl.sparta.Element getDocumentElement()>();

        if $r3 != null goto label1;

        return;

     label1:
        $r4 = virtualinvoke $r3.<com.hp.hpl.sparta.Element: java.lang.String getTagName()>();

        if $r4 != $r2 goto label2;

        $r5 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.NodeListWithPosition nodelistRaw_>;

        virtualinvoke $r5.<com.hp.hpl.sparta.NodeListWithPosition: void add(com.hp.hpl.sparta.Node,int)>($r3, 1);

     label2:
        $z0 = r0.<com.hp.hpl.sparta.XPathVisitor: boolean multiLevel_>;

        if $z0 == 0 goto label3;

        specialinvoke r0.<com.hp.hpl.sparta.XPathVisitor: void accumulateMatchingElements(com.hp.hpl.sparta.Element,java.lang.String)>($r3, $r2);

     label3:
        return;
    }

    private void accumulateMatchingElements(com.hp.hpl.sparta.Element, java.lang.String)
    {
        com.hp.hpl.sparta.Node $r3;
        com.hp.hpl.sparta.XPathVisitor r0;
        com.hp.hpl.sparta.NodeListWithPosition $r5;
        com.hp.hpl.sparta.Element $r1;
        int $i0;
        java.lang.String $r2, $r4;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.XPathVisitor;

        $r1 := @parameter0: com.hp.hpl.sparta.Element;

        $r2 := @parameter1: java.lang.String;

        $i0 = 0;

        $r3 = virtualinvoke $r1.<com.hp.hpl.sparta.Element: com.hp.hpl.sparta.Node getFirstChild()>();

     label1:
        if $r3 != null goto label2;

        return;

     label2:
        $z0 = $r3 instanceof com.hp.hpl.sparta.Element;

        if $z0 == 0 goto label4;

        $r1 = (com.hp.hpl.sparta.Element) $r3;

        $r4 = virtualinvoke $r1.<com.hp.hpl.sparta.Element: java.lang.String getTagName()>();

        if $r4 != $r2 goto label3;

        $r5 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.NodeListWithPosition nodelistRaw_>;

        $i0 = $i0 + 1;

        virtualinvoke $r5.<com.hp.hpl.sparta.NodeListWithPosition: void add(com.hp.hpl.sparta.Node,int)>($r1, $i0);

     label3:
        $z0 = r0.<com.hp.hpl.sparta.XPathVisitor: boolean multiLevel_>;

        if $z0 == 0 goto label4;

        specialinvoke r0.<com.hp.hpl.sparta.XPathVisitor: void accumulateMatchingElements(com.hp.hpl.sparta.Element,java.lang.String)>($r1, $r2);

     label4:
        $r3 = virtualinvoke $r3.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node getNextSibling()>();

        goto label1;
    }

    public com.hp.hpl.sparta.Element getFirstResultElement()
    {
        com.hp.hpl.sparta.Element $r3;
        java.util.Vector $r1;
        com.hp.hpl.sparta.XPathVisitor r0;
        int $i0;
        java.lang.Object $r2;

        r0 := @this: com.hp.hpl.sparta.XPathVisitor;

        $r1 = r0.<com.hp.hpl.sparta.XPathVisitor: java.util.Vector nodelistFiltered_>;

        $i0 = virtualinvoke $r1.<java.util.Vector: int size()>();

        if $i0 != 0 goto label1;

        return null;

     label1:
        $r1 = r0.<com.hp.hpl.sparta.XPathVisitor: java.util.Vector nodelistFiltered_>;

        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>(0);

        $r3 = (com.hp.hpl.sparta.Element) $r2;

        return $r3;
    }

    public java.lang.String getFirstResultString()
    {
        java.util.Vector $r1;
        com.hp.hpl.sparta.XPathVisitor r0;
        int $i0;
        java.lang.Object $r2;
        java.lang.String $r3;

        r0 := @this: com.hp.hpl.sparta.XPathVisitor;

        $r1 = r0.<com.hp.hpl.sparta.XPathVisitor: java.util.Vector nodelistFiltered_>;

        $i0 = virtualinvoke $r1.<java.util.Vector: int size()>();

        if $i0 != 0 goto label1;

        return null;

     label1:
        $r1 = r0.<com.hp.hpl.sparta.XPathVisitor: java.util.Vector nodelistFiltered_>;

        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>(0);

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        return $r3;
    }

    public java.util.Enumeration getResultEnumeration()
    {
        java.util.Vector $r2;
        java.util.Enumeration $r1;
        com.hp.hpl.sparta.XPathVisitor r0;

        r0 := @this: com.hp.hpl.sparta.XPathVisitor;

        $r2 = r0.<com.hp.hpl.sparta.XPathVisitor: java.util.Vector nodelistFiltered_>;

        $r1 = virtualinvoke $r2.<java.util.Vector: java.util.Enumeration elements()>();

        return $r1;
    }

    public void visit(com.hp.hpl.sparta.xpath.AllElementTest)
    {
        java.util.Enumeration $r4;
        com.hp.hpl.sparta.XPathVisitor r0;
        com.hp.hpl.sparta.NodeListWithPosition $r3;
        com.hp.hpl.sparta.xpath.AllElementTest $r1;
        com.hp.hpl.sparta.Element $r6;
        java.util.Vector $r2;
        com.hp.hpl.sparta.Document $r7;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.XPathVisitor;

        $r1 := @parameter0: com.hp.hpl.sparta.xpath.AllElementTest;

        $r2 = r0.<com.hp.hpl.sparta.XPathVisitor: java.util.Vector nodelistFiltered_>;

        $r3 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.NodeListWithPosition nodelistRaw_>;

        virtualinvoke $r3.<com.hp.hpl.sparta.NodeListWithPosition: void removeAllElements()>();

        $r4 = virtualinvoke $r2.<java.util.Vector: java.util.Enumeration elements()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 != 0 goto label2;

        return;

     label2:
        $r5 = interfaceinvoke $r4.<java.util.Enumeration: java.lang.Object nextElement()>();

        $z0 = $r5 instanceof com.hp.hpl.sparta.Element;

        if $z0 == 0 goto label3;

        $r6 = (com.hp.hpl.sparta.Element) $r5;

        specialinvoke r0.<com.hp.hpl.sparta.XPathVisitor: void accumulateElements(com.hp.hpl.sparta.Element)>($r6);

        goto label1;

     label3:
        $z0 = $r5 instanceof com.hp.hpl.sparta.Document;

        if $z0 == 0 goto label1;

        $r7 = (com.hp.hpl.sparta.Document) $r5;

        specialinvoke r0.<com.hp.hpl.sparta.XPathVisitor: void accumulateElements(com.hp.hpl.sparta.Document)>($r7);

        goto label1;
    }

    public void visit(com.hp.hpl.sparta.xpath.AttrEqualsExpr) throws com.hp.hpl.sparta.xpath.XPathException
    {
        com.hp.hpl.sparta.xpath.XPathException $r3;
        com.hp.hpl.sparta.XPathVisitor r0;
        com.hp.hpl.sparta.xpath.AttrEqualsExpr $r1;
        com.hp.hpl.sparta.Element $r5;
        com.hp.hpl.sparta.xpath.XPath $r4;
        java.lang.Boolean $r9;
        java.lang.Object $r2;
        java.lang.String $r6, $r7;
        com.hp.hpl.sparta.XPathVisitor$BooleanStack $r8;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.XPathVisitor;

        $r1 := @parameter0: com.hp.hpl.sparta.xpath.AttrEqualsExpr;

        $r2 = r0.<com.hp.hpl.sparta.XPathVisitor: java.lang.Object node_>;

        $z0 = $r2 instanceof com.hp.hpl.sparta.Element;

        if $z0 != 0 goto label1;

        $r3 = new com.hp.hpl.sparta.xpath.XPathException;

        $r4 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.xpath.XPath xpath_>;

        specialinvoke $r3.<com.hp.hpl.sparta.xpath.XPathException: void <init>(com.hp.hpl.sparta.xpath.XPath,java.lang.String)>($r4, "Cannot test attribute of document");

        throw $r3;

     label1:
        $r2 = r0.<com.hp.hpl.sparta.XPathVisitor: java.lang.Object node_>;

        $r5 = (com.hp.hpl.sparta.Element) $r2;

        $r6 = virtualinvoke $r1.<com.hp.hpl.sparta.xpath.AttrExpr: java.lang.String getAttrName()>();

        $r6 = virtualinvoke $r5.<com.hp.hpl.sparta.Element: java.lang.String getAttribute(java.lang.String)>($r6);

        $r7 = virtualinvoke $r1.<com.hp.hpl.sparta.xpath.AttrCompareExpr: java.lang.String getAttrValue()>();

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        $r8 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.XPathVisitor$BooleanStack exprStack_>;

        if $z0 == 0 goto label3;

        $r9 = <com.hp.hpl.sparta.XPathVisitor: java.lang.Boolean TRUE>;

     label2:
        virtualinvoke $r8.<com.hp.hpl.sparta.XPathVisitor$BooleanStack: void push(java.lang.Boolean)>($r9);

        return;

     label3:
        $r9 = <com.hp.hpl.sparta.XPathVisitor: java.lang.Boolean FALSE>;

        goto label2;
    }

    public void visit(com.hp.hpl.sparta.xpath.AttrExistsExpr) throws com.hp.hpl.sparta.xpath.XPathException
    {
        com.hp.hpl.sparta.xpath.XPathException $r3;
        com.hp.hpl.sparta.XPathVisitor r0;
        com.hp.hpl.sparta.Element $r5;
        com.hp.hpl.sparta.xpath.XPath $r4;
        com.hp.hpl.sparta.xpath.AttrExistsExpr $r1;
        int $i0;
        java.lang.Boolean $r8;
        java.lang.Object $r2;
        java.lang.String $r6;
        com.hp.hpl.sparta.XPathVisitor$BooleanStack $r7;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.XPathVisitor;

        $r1 := @parameter0: com.hp.hpl.sparta.xpath.AttrExistsExpr;

        $r2 = r0.<com.hp.hpl.sparta.XPathVisitor: java.lang.Object node_>;

        $z0 = $r2 instanceof com.hp.hpl.sparta.Element;

        if $z0 != 0 goto label1;

        $r3 = new com.hp.hpl.sparta.xpath.XPathException;

        $r4 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.xpath.XPath xpath_>;

        specialinvoke $r3.<com.hp.hpl.sparta.xpath.XPathException: void <init>(com.hp.hpl.sparta.xpath.XPath,java.lang.String)>($r4, "Cannot test attribute of document");

        throw $r3;

     label1:
        $r2 = r0.<com.hp.hpl.sparta.XPathVisitor: java.lang.Object node_>;

        $r5 = (com.hp.hpl.sparta.Element) $r2;

        $r6 = virtualinvoke $r1.<com.hp.hpl.sparta.xpath.AttrExpr: java.lang.String getAttrName()>();

        $r6 = virtualinvoke $r5.<com.hp.hpl.sparta.Element: java.lang.String getAttribute(java.lang.String)>($r6);

        if $r6 == null goto label4;

        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i0 <= 0 goto label4;

        $z0 = 1;

     label2:
        $r7 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.XPathVisitor$BooleanStack exprStack_>;

        if $z0 == 0 goto label5;

        $r8 = <com.hp.hpl.sparta.XPathVisitor: java.lang.Boolean TRUE>;

     label3:
        virtualinvoke $r7.<com.hp.hpl.sparta.XPathVisitor$BooleanStack: void push(java.lang.Boolean)>($r8);

        return;

     label4:
        $z0 = 0;

        goto label2;

     label5:
        $r8 = <com.hp.hpl.sparta.XPathVisitor: java.lang.Boolean FALSE>;

        goto label3;
    }

    public void visit(com.hp.hpl.sparta.xpath.AttrGreaterExpr) throws com.hp.hpl.sparta.xpath.XPathException
    {
        com.hp.hpl.sparta.xpath.AttrGreaterExpr $r1;
        com.hp.hpl.sparta.xpath.XPathException $r8;
        com.hp.hpl.sparta.XPathVisitor r0;
        long $l0;
        com.hp.hpl.sparta.Element $r4;
        com.hp.hpl.sparta.xpath.XPath $r3;
        byte $b1;
        int $i2;
        java.lang.Boolean $r7;
        java.lang.Object $r2;
        java.lang.String $r5;
        com.hp.hpl.sparta.XPathVisitor$BooleanStack $r6;
        boolean $z0;
        double $d0, $d1;

        r0 := @this: com.hp.hpl.sparta.XPathVisitor;

        $r1 := @parameter0: com.hp.hpl.sparta.xpath.AttrGreaterExpr;

        $r2 = r0.<com.hp.hpl.sparta.XPathVisitor: java.lang.Object node_>;

        $z0 = $r2 instanceof com.hp.hpl.sparta.Element;

        if $z0 != 0 goto label1;

        $r8 = new com.hp.hpl.sparta.xpath.XPathException;

        $r3 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.xpath.XPath xpath_>;

        specialinvoke $r8.<com.hp.hpl.sparta.xpath.XPathException: void <init>(com.hp.hpl.sparta.xpath.XPath,java.lang.String)>($r3, "Cannot test attribute of document");

        throw $r8;

     label1:
        $r2 = r0.<com.hp.hpl.sparta.XPathVisitor: java.lang.Object node_>;

        $r4 = (com.hp.hpl.sparta.Element) $r2;

        $r5 = virtualinvoke $r1.<com.hp.hpl.sparta.xpath.AttrExpr: java.lang.String getAttrName()>();

        $r5 = virtualinvoke $r4.<com.hp.hpl.sparta.Element: java.lang.String getAttribute(java.lang.String)>($r5);

        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r5);

        $d0 = (double) $l0;

        $d1 = virtualinvoke $r1.<com.hp.hpl.sparta.xpath.AttrRelationalExpr: double getAttrValue()>();

        $b1 = $d0 cmpl $d1;

        $i2 = (int) $b1;

        if $i2 <= 0 goto label4;

        $z0 = 1;

     label2:
        $r6 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.XPathVisitor$BooleanStack exprStack_>;

        if $z0 == 0 goto label5;

        $r7 = <com.hp.hpl.sparta.XPathVisitor: java.lang.Boolean TRUE>;

     label3:
        virtualinvoke $r6.<com.hp.hpl.sparta.XPathVisitor$BooleanStack: void push(java.lang.Boolean)>($r7);

        return;

     label4:
        $z0 = 0;

        goto label2;

     label5:
        $r7 = <com.hp.hpl.sparta.XPathVisitor: java.lang.Boolean FALSE>;

        goto label3;
    }

    public void visit(com.hp.hpl.sparta.xpath.AttrLessExpr) throws com.hp.hpl.sparta.xpath.XPathException
    {
        com.hp.hpl.sparta.xpath.XPathException $r8;
        com.hp.hpl.sparta.XPathVisitor r0;
        long $l0;
        com.hp.hpl.sparta.Element $r4;
        com.hp.hpl.sparta.xpath.XPath $r3;
        byte $b1;
        com.hp.hpl.sparta.xpath.AttrLessExpr $r1;
        int $i2;
        java.lang.Boolean $r7;
        java.lang.Object $r2;
        java.lang.String $r5;
        com.hp.hpl.sparta.XPathVisitor$BooleanStack $r6;
        boolean $z0;
        double $d0, $d1;

        r0 := @this: com.hp.hpl.sparta.XPathVisitor;

        $r1 := @parameter0: com.hp.hpl.sparta.xpath.AttrLessExpr;

        $r2 = r0.<com.hp.hpl.sparta.XPathVisitor: java.lang.Object node_>;

        $z0 = $r2 instanceof com.hp.hpl.sparta.Element;

        if $z0 != 0 goto label1;

        $r8 = new com.hp.hpl.sparta.xpath.XPathException;

        $r3 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.xpath.XPath xpath_>;

        specialinvoke $r8.<com.hp.hpl.sparta.xpath.XPathException: void <init>(com.hp.hpl.sparta.xpath.XPath,java.lang.String)>($r3, "Cannot test attribute of document");

        throw $r8;

     label1:
        $r2 = r0.<com.hp.hpl.sparta.XPathVisitor: java.lang.Object node_>;

        $r4 = (com.hp.hpl.sparta.Element) $r2;

        $r5 = virtualinvoke $r1.<com.hp.hpl.sparta.xpath.AttrExpr: java.lang.String getAttrName()>();

        $r5 = virtualinvoke $r4.<com.hp.hpl.sparta.Element: java.lang.String getAttribute(java.lang.String)>($r5);

        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r5);

        $d0 = (double) $l0;

        $d1 = virtualinvoke $r1.<com.hp.hpl.sparta.xpath.AttrRelationalExpr: double getAttrValue()>();

        $b1 = $d0 cmpg $d1;

        $i2 = (int) $b1;

        if $i2 >= 0 goto label4;

        $z0 = 1;

     label2:
        $r6 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.XPathVisitor$BooleanStack exprStack_>;

        if $z0 == 0 goto label5;

        $r7 = <com.hp.hpl.sparta.XPathVisitor: java.lang.Boolean TRUE>;

     label3:
        virtualinvoke $r6.<com.hp.hpl.sparta.XPathVisitor$BooleanStack: void push(java.lang.Boolean)>($r7);

        return;

     label4:
        $z0 = 0;

        goto label2;

     label5:
        $r7 = <com.hp.hpl.sparta.XPathVisitor: java.lang.Boolean FALSE>;

        goto label3;
    }

    public void visit(com.hp.hpl.sparta.xpath.AttrNotEqualsExpr) throws com.hp.hpl.sparta.xpath.XPathException
    {
        com.hp.hpl.sparta.xpath.XPathException $r3;
        com.hp.hpl.sparta.XPathVisitor r0;
        com.hp.hpl.sparta.Element $r5;
        com.hp.hpl.sparta.xpath.XPath $r4;
        java.lang.Boolean $r9;
        com.hp.hpl.sparta.xpath.AttrNotEqualsExpr $r1;
        java.lang.Object $r2;
        java.lang.String $r6, $r7;
        com.hp.hpl.sparta.XPathVisitor$BooleanStack $r8;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.XPathVisitor;

        $r1 := @parameter0: com.hp.hpl.sparta.xpath.AttrNotEqualsExpr;

        $r2 = r0.<com.hp.hpl.sparta.XPathVisitor: java.lang.Object node_>;

        $z0 = $r2 instanceof com.hp.hpl.sparta.Element;

        if $z0 != 0 goto label1;

        $r3 = new com.hp.hpl.sparta.xpath.XPathException;

        $r4 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.xpath.XPath xpath_>;

        specialinvoke $r3.<com.hp.hpl.sparta.xpath.XPathException: void <init>(com.hp.hpl.sparta.xpath.XPath,java.lang.String)>($r4, "Cannot test attribute of document");

        throw $r3;

     label1:
        $r2 = r0.<com.hp.hpl.sparta.XPathVisitor: java.lang.Object node_>;

        $r5 = (com.hp.hpl.sparta.Element) $r2;

        $r6 = virtualinvoke $r1.<com.hp.hpl.sparta.xpath.AttrExpr: java.lang.String getAttrName()>();

        $r6 = virtualinvoke $r5.<com.hp.hpl.sparta.Element: java.lang.String getAttribute(java.lang.String)>($r6);

        $r7 = virtualinvoke $r1.<com.hp.hpl.sparta.xpath.AttrCompareExpr: java.lang.String getAttrValue()>();

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label4;

        $z0 = 1;

     label2:
        $r8 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.XPathVisitor$BooleanStack exprStack_>;

        if $z0 == 0 goto label5;

        $r9 = <com.hp.hpl.sparta.XPathVisitor: java.lang.Boolean TRUE>;

     label3:
        virtualinvoke $r8.<com.hp.hpl.sparta.XPathVisitor$BooleanStack: void push(java.lang.Boolean)>($r9);

        return;

     label4:
        $z0 = 0;

        goto label2;

     label5:
        $r9 = <com.hp.hpl.sparta.XPathVisitor: java.lang.Boolean FALSE>;

        goto label3;
    }

    public void visit(com.hp.hpl.sparta.xpath.AttrTest)
    {
        com.hp.hpl.sparta.Node $r6;
        java.util.Enumeration $r4;
        com.hp.hpl.sparta.XPathVisitor r0;
        com.hp.hpl.sparta.NodeListWithPosition $r3;
        com.hp.hpl.sparta.Element $r7;
        java.util.Vector $r2;
        java.lang.Object $r5;
        java.lang.String $r8;
        com.hp.hpl.sparta.xpath.AttrTest $r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.XPathVisitor;

        $r1 := @parameter0: com.hp.hpl.sparta.xpath.AttrTest;

        $r2 = r0.<com.hp.hpl.sparta.XPathVisitor: java.util.Vector nodelistFiltered_>;

        $r3 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.NodeListWithPosition nodelistRaw_>;

        virtualinvoke $r3.<com.hp.hpl.sparta.NodeListWithPosition: void removeAllElements()>();

        $r4 = virtualinvoke $r2.<java.util.Vector: java.util.Enumeration elements()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 != 0 goto label2;

        return;

     label2:
        $r5 = interfaceinvoke $r4.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r6 = (com.hp.hpl.sparta.Node) $r5;

        $z0 = $r6 instanceof com.hp.hpl.sparta.Element;

        if $z0 == 0 goto label1;

        $r7 = (com.hp.hpl.sparta.Element) $r6;

        $r8 = virtualinvoke $r1.<com.hp.hpl.sparta.xpath.AttrTest: java.lang.String getAttrName()>();

        $r8 = virtualinvoke $r7.<com.hp.hpl.sparta.Element: java.lang.String getAttribute(java.lang.String)>($r8);

        if $r8 == null goto label1;

        $r3 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.NodeListWithPosition nodelistRaw_>;

        virtualinvoke $r3.<com.hp.hpl.sparta.NodeListWithPosition: void add(java.lang.String)>($r8);

        goto label1;
    }

    public void visit(com.hp.hpl.sparta.xpath.ElementTest)
    {
        com.hp.hpl.sparta.xpath.ElementTest $r1;
        com.hp.hpl.sparta.XPathVisitor r0;
        com.hp.hpl.sparta.NodeListWithPosition $r4;
        com.hp.hpl.sparta.Element $r6;
        java.util.Vector $r2;
        com.hp.hpl.sparta.Document $r7;
        int $i0, $i1;
        java.lang.Object $r5;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.XPathVisitor;

        $r1 := @parameter0: com.hp.hpl.sparta.xpath.ElementTest;

        $r3 = virtualinvoke $r1.<com.hp.hpl.sparta.xpath.ElementTest: java.lang.String getTagName()>();

        $r2 = r0.<com.hp.hpl.sparta.XPathVisitor: java.util.Vector nodelistFiltered_>;

        $i0 = virtualinvoke $r2.<java.util.Vector: int size()>();

        $r4 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.NodeListWithPosition nodelistRaw_>;

        virtualinvoke $r4.<com.hp.hpl.sparta.NodeListWithPosition: void removeAllElements()>();

        $i1 = 0;

     label1:
        if $i1 < $i0 goto label2;

        return;

     label2:
        $r5 = virtualinvoke $r2.<java.util.Vector: java.lang.Object elementAt(int)>($i1);

        $z0 = $r5 instanceof com.hp.hpl.sparta.Element;

        if $z0 == 0 goto label4;

        $r6 = (com.hp.hpl.sparta.Element) $r5;

        specialinvoke r0.<com.hp.hpl.sparta.XPathVisitor: void accumulateMatchingElements(com.hp.hpl.sparta.Element,java.lang.String)>($r6, $r3);

     label3:
        $i1 = $i1 + 1;

        goto label1;

     label4:
        $z0 = $r5 instanceof com.hp.hpl.sparta.Document;

        if $z0 == 0 goto label3;

        $r7 = (com.hp.hpl.sparta.Document) $r5;

        specialinvoke r0.<com.hp.hpl.sparta.XPathVisitor: void accumulateMatchingElements(com.hp.hpl.sparta.Document,java.lang.String)>($r7, $r3);

        goto label3;
    }

    public void visit(com.hp.hpl.sparta.xpath.ParentNodeTest) throws com.hp.hpl.sparta.xpath.XPathException
    {
        com.hp.hpl.sparta.Element $r2;
        com.hp.hpl.sparta.Node $r4;
        com.hp.hpl.sparta.xpath.XPath $r6;
        com.hp.hpl.sparta.xpath.XPathException $r5;
        com.hp.hpl.sparta.XPathVisitor r0;
        com.hp.hpl.sparta.xpath.ParentNodeTest $r1;
        com.hp.hpl.sparta.NodeListWithPosition $r3;

        r0 := @this: com.hp.hpl.sparta.XPathVisitor;

        $r1 := @parameter0: com.hp.hpl.sparta.xpath.ParentNodeTest;

        $r3 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.NodeListWithPosition nodelistRaw_>;

        virtualinvoke $r3.<com.hp.hpl.sparta.NodeListWithPosition: void removeAllElements()>();

        $r4 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.Node contextNode_>;

        $r2 = virtualinvoke $r4.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Element getParentNode()>();

        if $r2 != null goto label1;

        $r5 = new com.hp.hpl.sparta.xpath.XPathException;

        $r6 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.xpath.XPath xpath_>;

        specialinvoke $r5.<com.hp.hpl.sparta.xpath.XPathException: void <init>(com.hp.hpl.sparta.xpath.XPath,java.lang.String)>($r6, "Illegal attempt to apply \"..\" to node with no parent.");

        throw $r5;

     label1:
        $r3 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.NodeListWithPosition nodelistRaw_>;

        virtualinvoke $r3.<com.hp.hpl.sparta.NodeListWithPosition: void add(com.hp.hpl.sparta.Node,int)>($r2, 1);

        return;
    }

    public void visit(com.hp.hpl.sparta.xpath.PositionEqualsExpr) throws com.hp.hpl.sparta.xpath.XPathException
    {
        com.hp.hpl.sparta.xpath.XPathException $r3;
        com.hp.hpl.sparta.XPathVisitor r0;
        com.hp.hpl.sparta.NodeListWithPosition $r6;
        com.hp.hpl.sparta.xpath.PositionEqualsExpr $r1;
        com.hp.hpl.sparta.Element $r5;
        com.hp.hpl.sparta.xpath.XPath $r4;
        int $i0, $i1;
        java.lang.Boolean $r8;
        java.lang.Object $r2;
        com.hp.hpl.sparta.XPathVisitor$BooleanStack $r7;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.XPathVisitor;

        $r1 := @parameter0: com.hp.hpl.sparta.xpath.PositionEqualsExpr;

        $r2 = r0.<com.hp.hpl.sparta.XPathVisitor: java.lang.Object node_>;

        $z0 = $r2 instanceof com.hp.hpl.sparta.Element;

        if $z0 != 0 goto label1;

        $r3 = new com.hp.hpl.sparta.xpath.XPathException;

        $r4 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.xpath.XPath xpath_>;

        specialinvoke $r3.<com.hp.hpl.sparta.xpath.XPathException: void <init>(com.hp.hpl.sparta.xpath.XPath,java.lang.String)>($r4, "Cannot test position of document");

        throw $r3;

     label1:
        $r2 = r0.<com.hp.hpl.sparta.XPathVisitor: java.lang.Object node_>;

        $r5 = (com.hp.hpl.sparta.Element) $r2;

        $r6 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.NodeListWithPosition nodelistRaw_>;

        $i0 = virtualinvoke $r6.<com.hp.hpl.sparta.NodeListWithPosition: int position(com.hp.hpl.sparta.Node)>($r5);

        $i1 = virtualinvoke $r1.<com.hp.hpl.sparta.xpath.PositionEqualsExpr: int getPosition()>();

        if $i0 != $i1 goto label4;

        $z0 = 1;

     label2:
        $r7 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.XPathVisitor$BooleanStack exprStack_>;

        if $z0 == 0 goto label5;

        $r8 = <com.hp.hpl.sparta.XPathVisitor: java.lang.Boolean TRUE>;

     label3:
        virtualinvoke $r7.<com.hp.hpl.sparta.XPathVisitor$BooleanStack: void push(java.lang.Boolean)>($r8);

        return;

     label4:
        $z0 = 0;

        goto label2;

     label5:
        $r8 = <com.hp.hpl.sparta.XPathVisitor: java.lang.Boolean FALSE>;

        goto label3;
    }

    public void visit(com.hp.hpl.sparta.xpath.TextEqualsExpr) throws com.hp.hpl.sparta.xpath.XPathException
    {
        com.hp.hpl.sparta.Node $r6;
        com.hp.hpl.sparta.xpath.XPathException $r3;
        com.hp.hpl.sparta.xpath.TextEqualsExpr $r1;
        com.hp.hpl.sparta.XPathVisitor r0;
        com.hp.hpl.sparta.Text $r9;
        com.hp.hpl.sparta.Element $r5;
        com.hp.hpl.sparta.xpath.XPath $r4;
        java.lang.Boolean $r8;
        java.lang.Object $r2;
        java.lang.String $r10, $r11;
        com.hp.hpl.sparta.XPathVisitor$BooleanStack $r7;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.XPathVisitor;

        $r1 := @parameter0: com.hp.hpl.sparta.xpath.TextEqualsExpr;

        $r2 = r0.<com.hp.hpl.sparta.XPathVisitor: java.lang.Object node_>;

        $z0 = $r2 instanceof com.hp.hpl.sparta.Element;

        if $z0 != 0 goto label1;

        $r3 = new com.hp.hpl.sparta.xpath.XPathException;

        $r4 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.xpath.XPath xpath_>;

        specialinvoke $r3.<com.hp.hpl.sparta.xpath.XPathException: void <init>(com.hp.hpl.sparta.xpath.XPath,java.lang.String)>($r4, "Cannot test attribute of document");

        throw $r3;

     label1:
        $r2 = r0.<com.hp.hpl.sparta.XPathVisitor: java.lang.Object node_>;

        $r5 = (com.hp.hpl.sparta.Element) $r2;

        $r6 = virtualinvoke $r5.<com.hp.hpl.sparta.Element: com.hp.hpl.sparta.Node getFirstChild()>();

     label2:
        if $r6 != null goto label3;

        $r7 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.XPathVisitor$BooleanStack exprStack_>;

        $r8 = <com.hp.hpl.sparta.XPathVisitor: java.lang.Boolean FALSE>;

        virtualinvoke $r7.<com.hp.hpl.sparta.XPathVisitor$BooleanStack: void push(java.lang.Boolean)>($r8);

        return;

     label3:
        $z0 = $r6 instanceof com.hp.hpl.sparta.Text;

        if $z0 == 0 goto label4;

        $r9 = (com.hp.hpl.sparta.Text) $r6;

        $r10 = virtualinvoke $r9.<com.hp.hpl.sparta.Text: java.lang.String getData()>();

        $r11 = virtualinvoke $r1.<com.hp.hpl.sparta.xpath.TextCompareExpr: java.lang.String getValue()>();

        $z0 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z0 == 0 goto label4;

        $r7 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.XPathVisitor$BooleanStack exprStack_>;

        $r8 = <com.hp.hpl.sparta.XPathVisitor: java.lang.Boolean TRUE>;

        virtualinvoke $r7.<com.hp.hpl.sparta.XPathVisitor$BooleanStack: void push(java.lang.Boolean)>($r8);

        return;

     label4:
        $r6 = virtualinvoke $r6.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node getNextSibling()>();

        goto label2;
    }

    public void visit(com.hp.hpl.sparta.xpath.TextExistsExpr) throws com.hp.hpl.sparta.xpath.XPathException
    {
        com.hp.hpl.sparta.Node $r6;
        com.hp.hpl.sparta.xpath.XPathException $r3;
        com.hp.hpl.sparta.XPathVisitor r0;
        com.hp.hpl.sparta.Element $r5;
        com.hp.hpl.sparta.xpath.TextExistsExpr $r1;
        com.hp.hpl.sparta.xpath.XPath $r4;
        java.lang.Boolean $r8;
        java.lang.Object $r2;
        com.hp.hpl.sparta.XPathVisitor$BooleanStack $r7;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.XPathVisitor;

        $r1 := @parameter0: com.hp.hpl.sparta.xpath.TextExistsExpr;

        $r2 = r0.<com.hp.hpl.sparta.XPathVisitor: java.lang.Object node_>;

        $z0 = $r2 instanceof com.hp.hpl.sparta.Element;

        if $z0 != 0 goto label1;

        $r3 = new com.hp.hpl.sparta.xpath.XPathException;

        $r4 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.xpath.XPath xpath_>;

        specialinvoke $r3.<com.hp.hpl.sparta.xpath.XPathException: void <init>(com.hp.hpl.sparta.xpath.XPath,java.lang.String)>($r4, "Cannot test attribute of document");

        throw $r3;

     label1:
        $r2 = r0.<com.hp.hpl.sparta.XPathVisitor: java.lang.Object node_>;

        $r5 = (com.hp.hpl.sparta.Element) $r2;

        $r6 = virtualinvoke $r5.<com.hp.hpl.sparta.Element: com.hp.hpl.sparta.Node getFirstChild()>();

     label2:
        if $r6 != null goto label3;

        $r7 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.XPathVisitor$BooleanStack exprStack_>;

        $r8 = <com.hp.hpl.sparta.XPathVisitor: java.lang.Boolean FALSE>;

        virtualinvoke $r7.<com.hp.hpl.sparta.XPathVisitor$BooleanStack: void push(java.lang.Boolean)>($r8);

        return;

     label3:
        $z0 = $r6 instanceof com.hp.hpl.sparta.Text;

        if $z0 == 0 goto label4;

        $r7 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.XPathVisitor$BooleanStack exprStack_>;

        $r8 = <com.hp.hpl.sparta.XPathVisitor: java.lang.Boolean TRUE>;

        virtualinvoke $r7.<com.hp.hpl.sparta.XPathVisitor$BooleanStack: void push(java.lang.Boolean)>($r8);

        return;

     label4:
        $r6 = virtualinvoke $r6.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node getNextSibling()>();

        goto label2;
    }

    public void visit(com.hp.hpl.sparta.xpath.TextNotEqualsExpr) throws com.hp.hpl.sparta.xpath.XPathException
    {
        com.hp.hpl.sparta.Node $r6;
        com.hp.hpl.sparta.xpath.XPathException $r3;
        com.hp.hpl.sparta.XPathVisitor r0;
        com.hp.hpl.sparta.Text $r9;
        com.hp.hpl.sparta.xpath.TextNotEqualsExpr $r1;
        com.hp.hpl.sparta.Element $r5;
        com.hp.hpl.sparta.xpath.XPath $r4;
        java.lang.Boolean $r8;
        java.lang.Object $r2;
        java.lang.String $r10, $r11;
        com.hp.hpl.sparta.XPathVisitor$BooleanStack $r7;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.XPathVisitor;

        $r1 := @parameter0: com.hp.hpl.sparta.xpath.TextNotEqualsExpr;

        $r2 = r0.<com.hp.hpl.sparta.XPathVisitor: java.lang.Object node_>;

        $z0 = $r2 instanceof com.hp.hpl.sparta.Element;

        if $z0 != 0 goto label1;

        $r3 = new com.hp.hpl.sparta.xpath.XPathException;

        $r4 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.xpath.XPath xpath_>;

        specialinvoke $r3.<com.hp.hpl.sparta.xpath.XPathException: void <init>(com.hp.hpl.sparta.xpath.XPath,java.lang.String)>($r4, "Cannot test attribute of document");

        throw $r3;

     label1:
        $r2 = r0.<com.hp.hpl.sparta.XPathVisitor: java.lang.Object node_>;

        $r5 = (com.hp.hpl.sparta.Element) $r2;

        $r6 = virtualinvoke $r5.<com.hp.hpl.sparta.Element: com.hp.hpl.sparta.Node getFirstChild()>();

     label2:
        if $r6 != null goto label3;

        $r7 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.XPathVisitor$BooleanStack exprStack_>;

        $r8 = <com.hp.hpl.sparta.XPathVisitor: java.lang.Boolean FALSE>;

        virtualinvoke $r7.<com.hp.hpl.sparta.XPathVisitor$BooleanStack: void push(java.lang.Boolean)>($r8);

        return;

     label3:
        $z0 = $r6 instanceof com.hp.hpl.sparta.Text;

        if $z0 == 0 goto label4;

        $r9 = (com.hp.hpl.sparta.Text) $r6;

        $r10 = virtualinvoke $r9.<com.hp.hpl.sparta.Text: java.lang.String getData()>();

        $r11 = virtualinvoke $r1.<com.hp.hpl.sparta.xpath.TextCompareExpr: java.lang.String getValue()>();

        $z0 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z0 != 0 goto label4;

        $r7 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.XPathVisitor$BooleanStack exprStack_>;

        $r8 = <com.hp.hpl.sparta.XPathVisitor: java.lang.Boolean TRUE>;

        virtualinvoke $r7.<com.hp.hpl.sparta.XPathVisitor$BooleanStack: void push(java.lang.Boolean)>($r8);

        return;

     label4:
        $r6 = virtualinvoke $r6.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node getNextSibling()>();

        goto label2;
    }

    public void visit(com.hp.hpl.sparta.xpath.TextTest)
    {
        com.hp.hpl.sparta.xpath.TextTest $r1;
        com.hp.hpl.sparta.Node $r7;
        java.util.Enumeration $r4;
        com.hp.hpl.sparta.XPathVisitor r0;
        com.hp.hpl.sparta.NodeListWithPosition $r2;
        com.hp.hpl.sparta.Text $r8;
        com.hp.hpl.sparta.Element $r6;
        java.util.Vector $r3;
        java.lang.Object $r5;
        java.lang.String $r9;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.XPathVisitor;

        $r1 := @parameter0: com.hp.hpl.sparta.xpath.TextTest;

        $r3 = r0.<com.hp.hpl.sparta.XPathVisitor: java.util.Vector nodelistFiltered_>;

        $r2 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.NodeListWithPosition nodelistRaw_>;

        virtualinvoke $r2.<com.hp.hpl.sparta.NodeListWithPosition: void removeAllElements()>();

        $r4 = virtualinvoke $r3.<java.util.Vector: java.util.Enumeration elements()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 != 0 goto label2;

        return;

     label2:
        $r5 = interfaceinvoke $r4.<java.util.Enumeration: java.lang.Object nextElement()>();

        $z0 = $r5 instanceof com.hp.hpl.sparta.Element;

        if $z0 == 0 goto label1;

        $r6 = (com.hp.hpl.sparta.Element) $r5;

        $r7 = virtualinvoke $r6.<com.hp.hpl.sparta.Element: com.hp.hpl.sparta.Node getFirstChild()>();

     label3:
        if $r7 == null goto label1;

        $z0 = $r7 instanceof com.hp.hpl.sparta.Text;

        if $z0 == 0 goto label4;

        $r2 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.NodeListWithPosition nodelistRaw_>;

        $r8 = (com.hp.hpl.sparta.Text) $r7;

        $r9 = virtualinvoke $r8.<com.hp.hpl.sparta.Text: java.lang.String getData()>();

        virtualinvoke $r2.<com.hp.hpl.sparta.NodeListWithPosition: void add(java.lang.String)>($r9);

     label4:
        $r7 = virtualinvoke $r7.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node getNextSibling()>();

        goto label3;
    }

    public void visit(com.hp.hpl.sparta.xpath.ThisNodeTest)
    {
        com.hp.hpl.sparta.Node $r2;
        com.hp.hpl.sparta.xpath.ThisNodeTest $r1;
        com.hp.hpl.sparta.XPathVisitor r0;
        com.hp.hpl.sparta.NodeListWithPosition $r3;

        r0 := @this: com.hp.hpl.sparta.XPathVisitor;

        $r1 := @parameter0: com.hp.hpl.sparta.xpath.ThisNodeTest;

        $r3 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.NodeListWithPosition nodelistRaw_>;

        virtualinvoke $r3.<com.hp.hpl.sparta.NodeListWithPosition: void removeAllElements()>();

        $r3 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.NodeListWithPosition nodelistRaw_>;

        $r2 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.Node contextNode_>;

        virtualinvoke $r3.<com.hp.hpl.sparta.NodeListWithPosition: void add(com.hp.hpl.sparta.Node,int)>($r2, 1);

        return;
    }

    public void visit(com.hp.hpl.sparta.xpath.TrueExpr)
    {
        com.hp.hpl.sparta.XPathVisitor r0;
        java.lang.Boolean $r3;
        com.hp.hpl.sparta.XPathVisitor$BooleanStack $r2;
        com.hp.hpl.sparta.xpath.TrueExpr $r1;

        r0 := @this: com.hp.hpl.sparta.XPathVisitor;

        $r1 := @parameter0: com.hp.hpl.sparta.xpath.TrueExpr;

        $r2 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.XPathVisitor$BooleanStack exprStack_>;

        $r3 = <com.hp.hpl.sparta.XPathVisitor: java.lang.Boolean TRUE>;

        virtualinvoke $r2.<com.hp.hpl.sparta.XPathVisitor$BooleanStack: void push(java.lang.Boolean)>($r3);

        return;
    }
}
