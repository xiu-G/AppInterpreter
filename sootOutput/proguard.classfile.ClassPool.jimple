public class proguard.classfile.ClassPool extends java.lang.Object
{
    private final java.util.Map classes;

    public void <init>()
    {
        proguard.classfile.ClassPool r0;
        java.util.TreeMap $r1;

        r0 := @this: proguard.classfile.ClassPool;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.TreeMap;

        specialinvoke $r1.<java.util.TreeMap: void <init>()>();

        r0.<proguard.classfile.ClassPool: java.util.Map classes> = $r1;

        return;
    }

    public void accept(proguard.classfile.visitor.ClassPoolVisitor)
    {
        proguard.classfile.ClassPool r0;
        proguard.classfile.visitor.ClassPoolVisitor $r1;

        r0 := @this: proguard.classfile.ClassPool;

        $r1 := @parameter0: proguard.classfile.visitor.ClassPoolVisitor;

        interfaceinvoke $r1.<proguard.classfile.visitor.ClassPoolVisitor: void visitClassPool(proguard.classfile.ClassPool)>(r0);

        return;
    }

    public void addClass(proguard.classfile.Clazz)
    {
        proguard.classfile.ClassPool r0;
        proguard.classfile.Clazz $r1;
        java.util.Map $r2;
        java.lang.String $r3;

        r0 := @this: proguard.classfile.ClassPool;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 = r0.<proguard.classfile.ClassPool: java.util.Map classes>;

        $r3 = interfaceinvoke $r1.<proguard.classfile.Clazz: java.lang.String getName()>();

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r1);

        return;
    }

    public void classAccept(java.lang.String, proguard.classfile.visitor.ClassVisitor)
    {
        proguard.classfile.ClassPool r0;
        proguard.classfile.Clazz $r3;
        proguard.classfile.visitor.ClassVisitor $r2;
        java.lang.String $r1;

        r0 := @this: proguard.classfile.ClassPool;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: proguard.classfile.visitor.ClassVisitor;

        $r3 = virtualinvoke r0.<proguard.classfile.ClassPool: proguard.classfile.Clazz getClass(java.lang.String)>($r1);

        if $r3 == null goto label1;

        interfaceinvoke $r3.<proguard.classfile.Clazz: void accept(proguard.classfile.visitor.ClassVisitor)>($r2);

     label1:
        return;
    }

    public java.util.Iterator classNames()
    {
        proguard.classfile.ClassPool r0;
        java.util.Iterator $r3;
        java.util.Map $r1;
        java.util.Set $r2;

        r0 := @this: proguard.classfile.ClassPool;

        $r1 = r0.<proguard.classfile.ClassPool: java.util.Map classes>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        return $r3;
    }

    public void classesAccept(proguard.classfile.visitor.ClassVisitor)
    {
        java.util.Iterator $r4;
        proguard.classfile.visitor.ClassVisitor $r0;
        java.util.Collection $r3;
        proguard.classfile.ClassPool r1;
        proguard.classfile.Clazz r6;
        java.util.Map $r2;
        java.lang.Object $r5;
        boolean $z0;

        r1 := @this: proguard.classfile.ClassPool;

        $r0 := @parameter0: proguard.classfile.visitor.ClassVisitor;

        $r2 = r1.<proguard.classfile.ClassPool: java.util.Map classes>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (proguard.classfile.Clazz) $r5;

        interfaceinvoke r6.<proguard.classfile.Clazz: void accept(proguard.classfile.visitor.ClassVisitor)>($r0);

        goto label1;

     label2:
        return;
    }

    public void classesAcceptAlphabetically(proguard.classfile.visitor.ClassVisitor)
    {
        java.util.Iterator $r4;
        proguard.classfile.visitor.ClassVisitor $r0;
        java.util.Collection $r3;
        proguard.classfile.ClassPool r1;
        proguard.classfile.Clazz r6;
        java.util.Map $r2;
        java.lang.Object $r5;
        boolean $z0;

        r1 := @this: proguard.classfile.ClassPool;

        $r0 := @parameter0: proguard.classfile.visitor.ClassVisitor;

        $r2 = r1.<proguard.classfile.ClassPool: java.util.Map classes>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (proguard.classfile.Clazz) $r5;

        interfaceinvoke r6.<proguard.classfile.Clazz: void accept(proguard.classfile.visitor.ClassVisitor)>($r0);

        goto label1;

     label2:
        return;
    }

    public void clear()
    {
        proguard.classfile.ClassPool r0;
        java.util.Map $r1;

        r0 := @this: proguard.classfile.ClassPool;

        $r1 = r0.<proguard.classfile.ClassPool: java.util.Map classes>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        return;
    }

    public proguard.classfile.Clazz getClass(java.lang.String)
    {
        proguard.classfile.ClassPool r2;
        proguard.classfile.Clazz r4;
        java.util.Map $r1;
        java.lang.Object $r3;
        java.lang.String $r0;

        r2 := @this: proguard.classfile.ClassPool;

        $r0 := @parameter0: java.lang.String;

        $r1 = r2.<proguard.classfile.ClassPool: java.util.Map classes>;

        $r0 = staticinvoke <proguard.classfile.util.ClassUtil: java.lang.String internalClassNameFromClassType(java.lang.String)>($r0);

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        r4 = (proguard.classfile.Clazz) $r3;

        return r4;
    }

    public void removeClass(proguard.classfile.Clazz)
    {
        proguard.classfile.ClassPool r0;
        proguard.classfile.Clazz $r1;
        java.util.Map $r2;
        java.lang.String $r3;

        r0 := @this: proguard.classfile.ClassPool;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 = r0.<proguard.classfile.ClassPool: java.util.Map classes>;

        $r3 = interfaceinvoke $r1.<proguard.classfile.Clazz: java.lang.String getName()>();

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r3);

        return;
    }

    public int size()
    {
        proguard.classfile.ClassPool r0;
        int $i0;
        java.util.Map $r1;

        r0 := @this: proguard.classfile.ClassPool;

        $r1 = r0.<proguard.classfile.ClassPool: java.util.Map classes>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        return $i0;
    }
}
