public class proguard.shrink.ClassShrinker extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.visitor.ClassVisitor, proguard.classfile.visitor.MemberVisitor, proguard.classfile.attribute.visitor.AttributeVisitor, proguard.classfile.attribute.'annotation'.visitor.AnnotationVisitor, proguard.classfile.attribute.'annotation'.visitor.ElementValueVisitor
{
    private int[] constantIndexMap;
    private final proguard.classfile.editor.ConstantPoolRemapper constantPoolRemapper;
    private final proguard.shrink.UsageMarker usageMarker;

    public void <init>(proguard.shrink.UsageMarker)
    {
        proguard.shrink.UsageMarker $r1;
        proguard.classfile.editor.ConstantPoolRemapper $r3;
        int[] $r2;
        proguard.shrink.ClassShrinker r0;

        r0 := @this: proguard.shrink.ClassShrinker;

        $r1 := @parameter0: proguard.shrink.UsageMarker;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        $r2 = newarray (int)[256];

        r0.<proguard.shrink.ClassShrinker: int[] constantIndexMap> = $r2;

        $r3 = new proguard.classfile.editor.ConstantPoolRemapper;

        specialinvoke $r3.<proguard.classfile.editor.ConstantPoolRemapper: void <init>()>();

        r0.<proguard.shrink.ClassShrinker: proguard.classfile.editor.ConstantPoolRemapper constantPoolRemapper> = $r3;

        r0.<proguard.shrink.ClassShrinker: proguard.shrink.UsageMarker usageMarker> = $r1;

        return;
    }

    static proguard.shrink.UsageMarker access$100(proguard.shrink.ClassShrinker)
    {
        proguard.shrink.UsageMarker r1;
        proguard.shrink.ClassShrinker $r0;

        $r0 := @parameter0: proguard.shrink.ClassShrinker;

        r1 = $r0.<proguard.shrink.ClassShrinker: proguard.shrink.UsageMarker usageMarker>;

        return r1;
    }

    private int shrinkArray(proguard.classfile.VisitorAccepter[], int)
    {
        proguard.shrink.UsageMarker $r2;
        proguard.classfile.VisitorAccepter $r3;
        proguard.shrink.ClassShrinker r0;
        proguard.classfile.VisitorAccepter[] $r1;
        int $i0, $i1, $i2;
        boolean $z0;

        r0 := @this: proguard.shrink.ClassShrinker;

        $r1 := @parameter0: proguard.classfile.VisitorAccepter[];

        $i0 := @parameter1: int;

        $i1 = 0;

        $i2 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $r2 = r0.<proguard.shrink.ClassShrinker: proguard.shrink.UsageMarker usageMarker>;

        $r3 = $r1[$i1];

        $z0 = virtualinvoke $r2.<proguard.shrink.UsageMarker: boolean isUsed(proguard.classfile.VisitorAccepter)>($r3);

        if $z0 == 0 goto label2;

        $r3 = $r1[$i1];

        $r1[$i2] = $r3;

        $i2 = $i2 + 1;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        $i1 = $i2;

     label4:
        if $i1 >= $i0 goto label5;

        $r1[$i1] = null;

        $i1 = $i1 + 1;

        goto label4;

     label5:
        return $i2;
    }

    private int shrinkConstantIndexArray(proguard.classfile.constant.Constant[], int[], int)
    {
        proguard.shrink.UsageMarker $r3;
        proguard.classfile.constant.Constant $r4;
        proguard.shrink.ClassShrinker r0;
        int[] $r2;
        int $i0, $i1, $i2, $i3, $i4;
        proguard.classfile.constant.Constant[] $r1;
        boolean $z0;

        r0 := @this: proguard.shrink.ClassShrinker;

        $r1 := @parameter0: proguard.classfile.constant.Constant[];

        $r2 := @parameter1: int[];

        $i0 := @parameter2: int;

        $i1 = 0;

        $i2 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $r3 = r0.<proguard.shrink.ClassShrinker: proguard.shrink.UsageMarker usageMarker>;

        $i3 = $r2[$i1];

        $r4 = $r1[$i3];

        $z0 = virtualinvoke $r3.<proguard.shrink.UsageMarker: boolean isUsed(proguard.classfile.VisitorAccepter)>($r4);

        if $z0 == 0 goto label2;

        $i4 = $r2[$i1];

        $r2[$i2] = $i4;

        $i2 = $i2 + 1;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        $i1 = $i2;

     label4:
        if $i1 >= $i0 goto label5;

        $r2[$i1] = 0;

        $i1 = $i1 + 1;

        goto label4;

     label5:
        return $i2;
    }

    private int shrinkConstantPool(proguard.classfile.constant.Constant[], int)
    {
        proguard.shrink.UsageMarker $r4;
        proguard.classfile.constant.Constant $r3;
        proguard.shrink.ClassShrinker r0;
        int[] $r2;
        int $i0, $i1, $i2, $i3;
        proguard.classfile.constant.Constant[] $r1;
        boolean $z0;

        r0 := @this: proguard.shrink.ClassShrinker;

        $r1 := @parameter0: proguard.classfile.constant.Constant[];

        $i0 := @parameter1: int;

        $r2 = r0.<proguard.shrink.ClassShrinker: int[] constantIndexMap>;

        $i2 = lengthof $r2;

        if $i2 >= $i0 goto label1;

        $r2 = newarray (int)[$i0];

        r0.<proguard.shrink.ClassShrinker: int[] constantIndexMap> = $r2;

     label1:
        $i2 = 1;

        $i3 = 1;

        $z0 = 0;

     label2:
        if $i3 >= $i0 goto label5;

        $r2 = r0.<proguard.shrink.ClassShrinker: int[] constantIndexMap>;

        $r2[$i3] = $i2;

        $r3 = $r1[$i3];

        if $r3 == null goto label3;

        $r4 = r0.<proguard.shrink.ClassShrinker: proguard.shrink.UsageMarker usageMarker>;

        $z0 = virtualinvoke $r4.<proguard.shrink.UsageMarker: boolean isUsed(proguard.classfile.VisitorAccepter)>($r3);

     label3:
        if $z0 == 0 goto label4;

        $r1[$i2] = $r3;

        $i2 = $i2 + 1;

     label4:
        $i3 = $i3 + 1;

        goto label2;

     label5:
        $i1 = $i2;

     label6:
        if $i1 >= $i0 goto label7;

        $r1[$i1] = null;

        $i1 = $i1 + 1;

        goto label6;

     label7:
        return $i2;
    }

    private proguard.classfile.Clazz[] shrinkToNewArray(proguard.classfile.Clazz[])
    {
        proguard.classfile.Clazz[] $r1, $r2;
        int $i0, $i1;
        proguard.shrink.ClassShrinker r0;

        r0 := @this: proguard.shrink.ClassShrinker;

        $r1 := @parameter0: proguard.classfile.Clazz[];

        if $r1 != null goto label1;

        return null;

     label1:
        $i0 = lengthof $r1;

        $i0 = specialinvoke r0.<proguard.shrink.ClassShrinker: int shrinkArray(proguard.classfile.VisitorAccepter[],int)>($r1, $i0);

        if $i0 != 0 goto label2;

        return null;

     label2:
        $i1 = lengthof $r1;

        if $i0 != $i1 goto label3;

        return $r1;

     label3:
        $r2 = newarray (proguard.classfile.Clazz)[$i0];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, 0, $i0);

        return $r2;
    }

    public void visitAnnotation(proguard.classfile.Clazz, proguard.classfile.attribute.'annotation'.Annotation)
    {
        proguard.classfile.attribute.'annotation'.Annotation $r2;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.'annotation'.ElementValue[] $r3;
        int $i0;
        proguard.shrink.ClassShrinker r0;

        r0 := @this: proguard.shrink.ClassShrinker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.Annotation;

        $r3 = $r2.<proguard.classfile.attribute.'annotation'.Annotation: proguard.classfile.attribute.'annotation'.ElementValue[] elementValues>;

        $i0 = $r2.<proguard.classfile.attribute.'annotation'.Annotation: int u2elementValuesCount>;

        $i0 = specialinvoke r0.<proguard.shrink.ClassShrinker: int shrinkArray(proguard.classfile.VisitorAccepter[],int)>($r3, $i0);

        $r2.<proguard.classfile.attribute.'annotation'.Annotation: int u2elementValuesCount> = $i0;

        virtualinvoke $r2.<proguard.classfile.attribute.'annotation'.Annotation: void elementValuesAccept(proguard.classfile.Clazz,proguard.classfile.attribute.'annotation'.visitor.ElementValueVisitor)>($r1, r0);

        return;
    }

    public void visitAnnotationElementValue(proguard.classfile.Clazz, proguard.classfile.attribute.'annotation'.Annotation, proguard.classfile.attribute.'annotation'.AnnotationElementValue)
    {
        proguard.classfile.attribute.'annotation'.Annotation $r2;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.'annotation'.AnnotationElementValue $r3;
        proguard.shrink.ClassShrinker r0;

        r0 := @this: proguard.shrink.ClassShrinker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.Annotation;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.AnnotationElementValue;

        virtualinvoke $r3.<proguard.classfile.attribute.'annotation'.AnnotationElementValue: void annotationAccept(proguard.classfile.Clazz,proguard.classfile.attribute.'annotation'.visitor.AnnotationVisitor)>($r1, r0);

        return;
    }

    public void visitAnyAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.'annotation'.AnnotationsAttribute)
    {
        proguard.classfile.attribute.'annotation'.Annotation[] $r3;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.'annotation'.AnnotationsAttribute $r2;
        int $i0;
        proguard.shrink.ClassShrinker r0;

        r0 := @this: proguard.shrink.ClassShrinker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.AnnotationsAttribute;

        $r3 = $r2.<proguard.classfile.attribute.'annotation'.AnnotationsAttribute: proguard.classfile.attribute.'annotation'.Annotation[] annotations>;

        $i0 = $r2.<proguard.classfile.attribute.'annotation'.AnnotationsAttribute: int u2annotationsCount>;

        $i0 = specialinvoke r0.<proguard.shrink.ClassShrinker: int shrinkArray(proguard.classfile.VisitorAccepter[],int)>($r3, $i0);

        $r2.<proguard.classfile.attribute.'annotation'.AnnotationsAttribute: int u2annotationsCount> = $i0;

        virtualinvoke $r2.<proguard.classfile.attribute.'annotation'.AnnotationsAttribute: void annotationsAccept(proguard.classfile.Clazz,proguard.classfile.attribute.'annotation'.visitor.AnnotationVisitor)>($r1, r0);

        return;
    }

    public void visitAnyAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.Attribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.shrink.ClassShrinker r0;
        proguard.classfile.attribute.Attribute $r2;

        r0 := @this: proguard.shrink.ClassShrinker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.Attribute;

        return;
    }

    public void visitAnyElementValue(proguard.classfile.Clazz, proguard.classfile.attribute.'annotation'.Annotation, proguard.classfile.attribute.'annotation'.ElementValue)
    {
        proguard.classfile.attribute.'annotation'.Annotation $r2;
        proguard.classfile.attribute.'annotation'.ElementValue $r3;
        proguard.classfile.Clazz $r1;
        proguard.shrink.ClassShrinker r0;

        r0 := @this: proguard.shrink.ClassShrinker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.Annotation;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.ElementValue;

        return;
    }

    public void visitAnyParameterAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute)
    {
        proguard.classfile.attribute.'annotation'.Annotation[][] $r5;
        proguard.shrink.ClassShrinker r0;
        proguard.classfile.attribute.'annotation'.Annotation[] $r6;
        proguard.classfile.Clazz $r1;
        int[] $r4, $r7;
        int $i0, $i1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute $r3;

        r0 := @this: proguard.shrink.ClassShrinker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute;

        $i1 = 0;

     label1:
        $i0 = $r3.<proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute: int u2parametersCount>;

        if $i1 >= $i0 goto label2;

        $r4 = $r3.<proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute: int[] u2parameterAnnotationsCount>;

        $r5 = $r3.<proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute: proguard.classfile.attribute.'annotation'.Annotation[][] parameterAnnotations>;

        $r6 = $r5[$i1];

        $r7 = $r3.<proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute: int[] u2parameterAnnotationsCount>;

        $i0 = $r7[$i1];

        $i0 = specialinvoke r0.<proguard.shrink.ClassShrinker: int shrinkArray(proguard.classfile.VisitorAccepter[],int)>($r6, $i0);

        $r4[$i1] = $i0;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        virtualinvoke $r3.<proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute: void annotationsAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.'annotation'.visitor.AnnotationVisitor)>($r1, $r2, r0);

        return;
    }

    public void visitArrayElementValue(proguard.classfile.Clazz, proguard.classfile.attribute.'annotation'.Annotation, proguard.classfile.attribute.'annotation'.ArrayElementValue)
    {
        proguard.classfile.attribute.'annotation'.Annotation $r2;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.'annotation'.ArrayElementValue $r3;
        proguard.classfile.attribute.'annotation'.ElementValue[] $r4;
        int $i0;
        proguard.shrink.ClassShrinker r0;

        r0 := @this: proguard.shrink.ClassShrinker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.Annotation;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.ArrayElementValue;

        $r4 = $r3.<proguard.classfile.attribute.'annotation'.ArrayElementValue: proguard.classfile.attribute.'annotation'.ElementValue[] elementValues>;

        $i0 = $r3.<proguard.classfile.attribute.'annotation'.ArrayElementValue: int u2elementValuesCount>;

        $i0 = specialinvoke r0.<proguard.shrink.ClassShrinker: int shrinkArray(proguard.classfile.VisitorAccepter[],int)>($r4, $i0);

        $r3.<proguard.classfile.attribute.'annotation'.ArrayElementValue: int u2elementValuesCount> = $i0;

        virtualinvoke $r3.<proguard.classfile.attribute.'annotation'.ArrayElementValue: void elementValuesAccept(proguard.classfile.Clazz,proguard.classfile.attribute.'annotation'.Annotation,proguard.classfile.attribute.'annotation'.visitor.ElementValueVisitor)>($r1, $r2, r0);

        return;
    }

    public void visitCodeAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.attribute.Attribute[] $r4;
        proguard.classfile.Method $r2;
        proguard.shrink.ClassShrinker r0;

        r0 := @this: proguard.shrink.ClassShrinker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 = $r3.<proguard.classfile.attribute.CodeAttribute: proguard.classfile.attribute.Attribute[] attributes>;

        $i0 = $r3.<proguard.classfile.attribute.CodeAttribute: int u2attributesCount>;

        $i0 = specialinvoke r0.<proguard.shrink.ClassShrinker: int shrinkArray(proguard.classfile.VisitorAccepter[],int)>($r4, $i0);

        $r3.<proguard.classfile.attribute.CodeAttribute: int u2attributesCount> = $i0;

        return;
    }

    public void visitEnclosingMethodAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.EnclosingMethodAttribute)
    {
        proguard.classfile.attribute.EnclosingMethodAttribute $r2;
        proguard.shrink.UsageMarker $r4;
        proguard.classfile.Clazz $r1;
        proguard.classfile.Method $r3;
        proguard.shrink.ClassShrinker r0;
        boolean $z0;

        r0 := @this: proguard.shrink.ClassShrinker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.EnclosingMethodAttribute;

        $r3 = $r2.<proguard.classfile.attribute.EnclosingMethodAttribute: proguard.classfile.Method referencedMethod>;

        if $r3 == null goto label1;

        $r4 = r0.<proguard.shrink.ClassShrinker: proguard.shrink.UsageMarker usageMarker>;

        $r3 = $r2.<proguard.classfile.attribute.EnclosingMethodAttribute: proguard.classfile.Method referencedMethod>;

        $z0 = virtualinvoke $r4.<proguard.shrink.UsageMarker: boolean isUsed(proguard.classfile.VisitorAccepter)>($r3);

        if $z0 != 0 goto label1;

        $r2.<proguard.classfile.attribute.EnclosingMethodAttribute: int u2nameAndTypeIndex> = 0;

        $r2.<proguard.classfile.attribute.EnclosingMethodAttribute: proguard.classfile.Method referencedMethod> = null;

     label1:
        return;
    }

    public void visitInnerClassesAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.InnerClassesAttribute)
    {
        proguard.classfile.attribute.InnerClassesAttribute $r2;
        proguard.classfile.Clazz $r1;
        int $i0;
        proguard.classfile.attribute.InnerClassesInfo[] $r3;
        proguard.shrink.ClassShrinker r0;

        r0 := @this: proguard.shrink.ClassShrinker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.InnerClassesAttribute;

        $r3 = $r2.<proguard.classfile.attribute.InnerClassesAttribute: proguard.classfile.attribute.InnerClassesInfo[] classes>;

        $i0 = $r2.<proguard.classfile.attribute.InnerClassesAttribute: int u2classesCount>;

        $i0 = specialinvoke r0.<proguard.shrink.ClassShrinker: int shrinkArray(proguard.classfile.VisitorAccepter[],int)>($r3, $i0);

        $r2.<proguard.classfile.attribute.InnerClassesAttribute: int u2classesCount> = $i0;

        return;
    }

    public void visitLibraryClass(proguard.classfile.LibraryClass)
    {
        proguard.classfile.LibraryClass $r1;
        proguard.classfile.Clazz[] $r2;
        proguard.shrink.ClassShrinker r0;

        r0 := @this: proguard.shrink.ClassShrinker;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        $r2 = $r1.<proguard.classfile.LibraryClass: proguard.classfile.Clazz[] subClasses>;

        $r2 = specialinvoke r0.<proguard.shrink.ClassShrinker: proguard.classfile.Clazz[] shrinkToNewArray(proguard.classfile.Clazz[])>($r2);

        $r1.<proguard.classfile.LibraryClass: proguard.classfile.Clazz[] subClasses> = $r2;

        return;
    }

    public void visitProgramClass(proguard.classfile.ProgramClass)
    {
        proguard.classfile.Clazz[] $r9;
        proguard.shrink.ClassShrinker$SignatureShrinker $r8;
        proguard.classfile.ProgramField[] $r4;
        proguard.classfile.ProgramMethod[] $r5;
        proguard.classfile.attribute.Attribute[] $r6;
        proguard.shrink.ClassShrinker r0;
        proguard.classfile.ProgramClass $r1;
        proguard.classfile.editor.ConstantPoolRemapper $r7;
        int[] $r3;
        int $i0;
        proguard.classfile.constant.Constant[] $r2;

        r0 := @this: proguard.shrink.ClassShrinker;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 = $r1.<proguard.classfile.ProgramClass: proguard.classfile.constant.Constant[] constantPool>;

        $r3 = $r1.<proguard.classfile.ProgramClass: int[] u2interfaces>;

        $i0 = $r1.<proguard.classfile.ProgramClass: int u2interfacesCount>;

        $i0 = specialinvoke r0.<proguard.shrink.ClassShrinker: int shrinkConstantIndexArray(proguard.classfile.constant.Constant[],int[],int)>($r2, $r3, $i0);

        $r1.<proguard.classfile.ProgramClass: int u2interfacesCount> = $i0;

        $r2 = $r1.<proguard.classfile.ProgramClass: proguard.classfile.constant.Constant[] constantPool>;

        $i0 = $r1.<proguard.classfile.ProgramClass: int u2constantPoolCount>;

        $i0 = specialinvoke r0.<proguard.shrink.ClassShrinker: int shrinkConstantPool(proguard.classfile.constant.Constant[],int)>($r2, $i0);

        $r1.<proguard.classfile.ProgramClass: int u2constantPoolCount> = $i0;

        $r4 = $r1.<proguard.classfile.ProgramClass: proguard.classfile.ProgramField[] fields>;

        $i0 = $r1.<proguard.classfile.ProgramClass: int u2fieldsCount>;

        $i0 = specialinvoke r0.<proguard.shrink.ClassShrinker: int shrinkArray(proguard.classfile.VisitorAccepter[],int)>($r4, $i0);

        $r1.<proguard.classfile.ProgramClass: int u2fieldsCount> = $i0;

        $r5 = $r1.<proguard.classfile.ProgramClass: proguard.classfile.ProgramMethod[] methods>;

        $i0 = $r1.<proguard.classfile.ProgramClass: int u2methodsCount>;

        $i0 = specialinvoke r0.<proguard.shrink.ClassShrinker: int shrinkArray(proguard.classfile.VisitorAccepter[],int)>($r5, $i0);

        $r1.<proguard.classfile.ProgramClass: int u2methodsCount> = $i0;

        $r6 = $r1.<proguard.classfile.ProgramClass: proguard.classfile.attribute.Attribute[] attributes>;

        $i0 = $r1.<proguard.classfile.ProgramClass: int u2attributesCount>;

        $i0 = specialinvoke r0.<proguard.shrink.ClassShrinker: int shrinkArray(proguard.classfile.VisitorAccepter[],int)>($r6, $i0);

        $r1.<proguard.classfile.ProgramClass: int u2attributesCount> = $i0;

        virtualinvoke $r1.<proguard.classfile.ProgramClass: void fieldsAccept(proguard.classfile.visitor.MemberVisitor)>(r0);

        virtualinvoke $r1.<proguard.classfile.ProgramClass: void methodsAccept(proguard.classfile.visitor.MemberVisitor)>(r0);

        virtualinvoke $r1.<proguard.classfile.ProgramClass: void attributesAccept(proguard.classfile.attribute.visitor.AttributeVisitor)>(r0);

        $r7 = r0.<proguard.shrink.ClassShrinker: proguard.classfile.editor.ConstantPoolRemapper constantPoolRemapper>;

        $r3 = r0.<proguard.shrink.ClassShrinker: int[] constantIndexMap>;

        virtualinvoke $r7.<proguard.classfile.editor.ConstantPoolRemapper: void setConstantIndexMap(int[])>($r3);

        $r7 = r0.<proguard.shrink.ClassShrinker: proguard.classfile.editor.ConstantPoolRemapper constantPoolRemapper>;

        virtualinvoke $r7.<proguard.classfile.editor.ConstantPoolRemapper: void visitProgramClass(proguard.classfile.ProgramClass)>($r1);

        $r8 = new proguard.shrink.ClassShrinker$SignatureShrinker;

        specialinvoke $r8.<proguard.shrink.ClassShrinker$SignatureShrinker: void <init>(proguard.shrink.ClassShrinker,proguard.shrink.ClassShrinker$1)>(r0, null);

        virtualinvoke $r1.<proguard.classfile.ProgramClass: void attributesAccept(proguard.classfile.attribute.visitor.AttributeVisitor)>($r8);

        $r9 = $r1.<proguard.classfile.ProgramClass: proguard.classfile.Clazz[] subClasses>;

        $r9 = specialinvoke r0.<proguard.shrink.ClassShrinker: proguard.classfile.Clazz[] shrinkToNewArray(proguard.classfile.Clazz[])>($r9);

        $r1.<proguard.classfile.ProgramClass: proguard.classfile.Clazz[] subClasses> = $r9;

        return;
    }

    public void visitProgramMember(proguard.classfile.ProgramClass, proguard.classfile.ProgramMember)
    {
        proguard.classfile.ProgramMember $r2;
        int $i0;
        proguard.classfile.attribute.Attribute[] $r3;
        proguard.shrink.ClassShrinker r0;
        proguard.classfile.ProgramClass $r1;

        r0 := @this: proguard.shrink.ClassShrinker;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.ProgramMember;

        $r3 = $r2.<proguard.classfile.ProgramMember: proguard.classfile.attribute.Attribute[] attributes>;

        $i0 = $r2.<proguard.classfile.ProgramMember: int u2attributesCount>;

        $i0 = specialinvoke r0.<proguard.shrink.ClassShrinker: int shrinkArray(proguard.classfile.VisitorAccepter[],int)>($r3, $i0);

        $r2.<proguard.classfile.ProgramMember: int u2attributesCount> = $i0;

        virtualinvoke $r2.<proguard.classfile.ProgramMember: void attributesAccept(proguard.classfile.ProgramClass,proguard.classfile.attribute.visitor.AttributeVisitor)>($r1, r0);

        return;
    }
}
