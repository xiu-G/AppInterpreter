class proguard.optimize.TailRecursionSimplifier$MyRecursionChecker extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.constant.visitor.ConstantVisitor, proguard.classfile.attribute.visitor.ExceptionInfoVisitor
{
    private boolean recursive;
    private final proguard.optimize.TailRecursionSimplifier this$0;

    private void <init>(proguard.optimize.TailRecursionSimplifier)
    {
        proguard.optimize.TailRecursionSimplifier $r1;
        proguard.optimize.TailRecursionSimplifier$MyRecursionChecker r0;

        r0 := @this: proguard.optimize.TailRecursionSimplifier$MyRecursionChecker;

        $r1 := @parameter0: proguard.optimize.TailRecursionSimplifier;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        r0.<proguard.optimize.TailRecursionSimplifier$MyRecursionChecker: proguard.optimize.TailRecursionSimplifier this$0> = $r1;

        return;
    }

    void <init>(proguard.optimize.TailRecursionSimplifier, proguard.optimize.TailRecursionSimplifier$1)
    {
        proguard.optimize.TailRecursionSimplifier$1 $r2;
        proguard.optimize.TailRecursionSimplifier $r1;
        proguard.optimize.TailRecursionSimplifier$MyRecursionChecker r0;

        r0 := @this: proguard.optimize.TailRecursionSimplifier$MyRecursionChecker;

        $r1 := @parameter0: proguard.optimize.TailRecursionSimplifier;

        $r2 := @parameter1: proguard.optimize.TailRecursionSimplifier$1;

        specialinvoke r0.<proguard.optimize.TailRecursionSimplifier$MyRecursionChecker: void <init>(proguard.optimize.TailRecursionSimplifier)>($r1);

        return;
    }

    public boolean isRecursive()
    {
        proguard.optimize.TailRecursionSimplifier$MyRecursionChecker r0;
        boolean z0;

        r0 := @this: proguard.optimize.TailRecursionSimplifier$MyRecursionChecker;

        z0 = r0.<proguard.optimize.TailRecursionSimplifier$MyRecursionChecker: boolean recursive>;

        return z0;
    }

    public void visitExceptionInfo(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.ExceptionInfo)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.Method $r2;
        proguard.optimize.TailRecursionSimplifier$MyRecursionChecker r0;
        proguard.classfile.attribute.ExceptionInfo $r4;

        r0 := @this: proguard.optimize.TailRecursionSimplifier$MyRecursionChecker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.ExceptionInfo;

        r0.<proguard.optimize.TailRecursionSimplifier$MyRecursionChecker: boolean recursive> = 0;

        return;
    }

    public void visitMethodrefConstant(proguard.classfile.Clazz, proguard.classfile.constant.MethodrefConstant)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.Method $r5;
        proguard.classfile.constant.MethodrefConstant $r2;
        proguard.optimize.TailRecursionSimplifier $r4;
        proguard.optimize.TailRecursionSimplifier$MyRecursionChecker r0;
        proguard.classfile.Member $r3;
        boolean $z0;

        r0 := @this: proguard.optimize.TailRecursionSimplifier$MyRecursionChecker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.MethodrefConstant;

        $r4 = r0.<proguard.optimize.TailRecursionSimplifier$MyRecursionChecker: proguard.optimize.TailRecursionSimplifier this$0>;

        $r5 = staticinvoke <proguard.optimize.TailRecursionSimplifier: proguard.classfile.Method access$100(proguard.optimize.TailRecursionSimplifier)>($r4);

        $r3 = $r2.<proguard.classfile.constant.MethodrefConstant: proguard.classfile.Member referencedMember>;

        $z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        r0.<proguard.optimize.TailRecursionSimplifier$MyRecursionChecker: boolean recursive> = $z0;

        return;
    }
}
