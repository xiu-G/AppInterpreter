public final class org.jsoup.helper.Validate extends java.lang.Object
{

    private void <init>()
    {
        org.jsoup.helper.Validate r0;

        r0 := @this: org.jsoup.helper.Validate;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void fail(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.IllegalArgumentException $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r1;
    }

    public static void isFalse(boolean)
    {
        java.lang.IllegalArgumentException $r0;
        boolean $z0;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Must be false");

        throw $r0;

     label1:
        return;
    }

    public static void isFalse(boolean, java.lang.String)
    {
        java.lang.String $r0;
        java.lang.IllegalArgumentException $r1;
        boolean $z0;

        $z0 := @parameter0: boolean;

        $r0 := @parameter1: java.lang.String;

        if $z0 == 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r1;

     label1:
        return;
    }

    public static void isTrue(boolean)
    {
        java.lang.IllegalArgumentException $r0;
        boolean $z0;

        $z0 := @parameter0: boolean;

        if $z0 != 0 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Must be true");

        throw $r0;

     label1:
        return;
    }

    public static void isTrue(boolean, java.lang.String)
    {
        java.lang.String $r0;
        java.lang.IllegalArgumentException $r1;
        boolean $z0;

        $z0 := @parameter0: boolean;

        $r0 := @parameter1: java.lang.String;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Index must be numeric");

        throw $r1;

     label1:
        return;
    }

    public static void noNullElements(java.lang.Object[])
    {
        java.lang.Object[] $r0;

        $r0 := @parameter0: java.lang.Object[];

        staticinvoke <org.jsoup.helper.Validate: void noNullElements(java.lang.Object[],java.lang.String)>($r0, "Array must not contain any null objects");

        return;
    }

    public static void noNullElements(java.lang.Object[], java.lang.String)
    {
        java.lang.Object[] $r0;
        int i0, i1;
        java.lang.Object r2;
        java.lang.String $r1;
        java.lang.IllegalArgumentException $r3;

        $r0 := @parameter0: java.lang.Object[];

        $r1 := @parameter1: java.lang.String;

        i0 = lengthof $r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r2 = $r0[i1];

        if r2 != null goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Array must not contain any null objects");

        throw $r3;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    public static void notEmpty(java.lang.String)
    {
        int $i0;
        java.lang.String $r0;
        java.lang.IllegalArgumentException $r1;

        $r0 := @parameter0: java.lang.String;

        if $r0 == null goto label1;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("String must not be empty");

        throw $r1;

     label2:
        return;
    }

    public static void notEmpty(java.lang.String, java.lang.String)
    {
        int $i0;
        java.lang.String $r0, $r1;
        java.lang.IllegalArgumentException $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        if $r0 == null goto label1;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r2;

     label2:
        return;
    }

    public static void notNull(java.lang.Object)
    {
        java.lang.Object $r0;
        java.lang.IllegalArgumentException $r1;

        $r0 := @parameter0: java.lang.Object;

        if $r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Object must not be null");

        throw $r1;

     label1:
        return;
    }

    public static void notNull(java.lang.Object, java.lang.String)
    {
        java.lang.Object $r0;
        java.lang.String $r1;
        java.lang.IllegalArgumentException $r2;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.String;

        if $r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r2;

     label1:
        return;
    }
}
