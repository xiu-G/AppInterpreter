public final class cs.gson.internal.bind.ReflectiveTypeAdapterFactory extends java.lang.Object implements cs.gson.TypeAdapterFactory
{
    private final cs.gson.internal.ConstructorConstructor constructorConstructor;
    private final cs.gson.internal.Excluder excluder;
    private final cs.gson.FieldNamingStrategy fieldNamingPolicy;

    public void <init>(cs.gson.internal.ConstructorConstructor, cs.gson.FieldNamingStrategy, cs.gson.internal.Excluder)
    {
        cs.gson.internal.Excluder $r3;
        cs.gson.internal.ConstructorConstructor $r1;
        cs.gson.FieldNamingStrategy $r2;
        cs.gson.internal.bind.ReflectiveTypeAdapterFactory r0;

        r0 := @this: cs.gson.internal.bind.ReflectiveTypeAdapterFactory;

        $r1 := @parameter0: cs.gson.internal.ConstructorConstructor;

        $r2 := @parameter1: cs.gson.FieldNamingStrategy;

        $r3 := @parameter2: cs.gson.internal.Excluder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<cs.gson.internal.bind.ReflectiveTypeAdapterFactory: cs.gson.internal.ConstructorConstructor constructorConstructor> = $r1;

        r0.<cs.gson.internal.bind.ReflectiveTypeAdapterFactory: cs.gson.FieldNamingStrategy fieldNamingPolicy> = $r2;

        r0.<cs.gson.internal.bind.ReflectiveTypeAdapterFactory: cs.gson.internal.Excluder excluder> = $r3;

        return;
    }

    private cs.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField createBoundField(cs.gson.Gson, java.lang.reflect.Field, java.lang.String, cs.gson.reflect.TypeToken, boolean, boolean)
    {
        java.lang.reflect.Field $r2;
        cs.gson.internal.bind.ReflectiveTypeAdapterFactory$1 $r6;
        cs.gson.Gson $r1;
        java.lang.Class $r5;
        java.lang.String $r3;
        cs.gson.internal.bind.ReflectiveTypeAdapterFactory r0;
        cs.gson.reflect.TypeToken r4;
        boolean $z0, $z1, $z2;

        r0 := @this: cs.gson.internal.bind.ReflectiveTypeAdapterFactory;

        $r1 := @parameter0: cs.gson.Gson;

        $r2 := @parameter1: java.lang.reflect.Field;

        $r3 := @parameter2: java.lang.String;

        r4 := @parameter3: cs.gson.reflect.TypeToken;

        $z0 := @parameter4: boolean;

        $z1 := @parameter5: boolean;

        $r5 = virtualinvoke r4.<cs.gson.reflect.TypeToken: java.lang.Class getRawType()>();

        $z2 = staticinvoke <cs.gson.internal.Primitives: boolean isPrimitive(java.lang.reflect.Type)>($r5);

        $r6 = new cs.gson.internal.bind.ReflectiveTypeAdapterFactory$1;

        specialinvoke $r6.<cs.gson.internal.bind.ReflectiveTypeAdapterFactory$1: void <init>(cs.gson.internal.bind.ReflectiveTypeAdapterFactory,java.lang.String,boolean,boolean,cs.gson.Gson,cs.gson.reflect.TypeToken,java.lang.reflect.Field,boolean)>(r0, $r3, $z0, $z1, $r1, r4, $r2, $z2);

        return $r6;
    }

    private java.util.Map getBoundFields(cs.gson.Gson, cs.gson.reflect.TypeToken, java.lang.Class)
    {
        java.util.LinkedHashMap r3;
        int $i0, $i1;
        java.lang.String $r11;
        cs.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField $r12;
        cs.gson.internal.bind.ReflectiveTypeAdapterFactory r0;
        boolean $z0, $z1;
        java.lang.reflect.Field r2;
        java.lang.IllegalArgumentException $r14;
        java.lang.reflect.Field[] $r7;
        cs.gson.Gson $r1;
        java.lang.reflect.Type $r6, $r8, $r9;
        java.lang.Class r5;
        java.lang.Object $r13;
        java.lang.StringBuilder $r15;
        cs.gson.reflect.TypeToken r4, $r10;

        r0 := @this: cs.gson.internal.bind.ReflectiveTypeAdapterFactory;

        $r1 := @parameter0: cs.gson.Gson;

        r4 := @parameter1: cs.gson.reflect.TypeToken;

        r5 := @parameter2: java.lang.Class;

        r3 = new java.util.LinkedHashMap;

        specialinvoke r3.<java.util.LinkedHashMap: void <init>()>();

        $z0 = virtualinvoke r5.<java.lang.Class: boolean isInterface()>();

        if $z0 == 0 goto label1;

        return r3;

     label1:
        $r6 = virtualinvoke r4.<cs.gson.reflect.TypeToken: java.lang.reflect.Type getType()>();

     label2:
        if r5 == class "Ljava/lang/Object;" goto label7;

        $r7 = virtualinvoke r5.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        $i0 = lengthof $r7;

        $i1 = 0;

     label3:
        if $i1 < $i0 goto label4;

        $r8 = virtualinvoke r4.<cs.gson.reflect.TypeToken: java.lang.reflect.Type getType()>();

        $r9 = virtualinvoke r5.<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>();

        $r8 = staticinvoke <cs.gson.internal.$Gson$Types: java.lang.reflect.Type resolve(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type)>($r8, r5, $r9);

        $r10 = staticinvoke <cs.gson.reflect.TypeToken: cs.gson.reflect.TypeToken get(java.lang.reflect.Type)>($r8);

        r4 = $r10;

        r5 = virtualinvoke $r10.<cs.gson.reflect.TypeToken: java.lang.Class getRawType()>();

        goto label2;

     label4:
        r2 = $r7[$i1];

        $z0 = virtualinvoke r0.<cs.gson.internal.bind.ReflectiveTypeAdapterFactory: boolean excludeField(java.lang.reflect.Field,boolean)>(r2, 1);

        $z1 = virtualinvoke r0.<cs.gson.internal.bind.ReflectiveTypeAdapterFactory: boolean excludeField(java.lang.reflect.Field,boolean)>(r2, 0);

        if $z0 != 0 goto label6;

        if $z1 != 0 goto label6;

     label5:
        $i1 = $i1 + 1;

        goto label3;

     label6:
        virtualinvoke r2.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        $r8 = virtualinvoke r4.<cs.gson.reflect.TypeToken: java.lang.reflect.Type getType()>();

        $r9 = virtualinvoke r2.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();

        $r8 = staticinvoke <cs.gson.internal.$Gson$Types: java.lang.reflect.Type resolve(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type)>($r8, r5, $r9);

        $r11 = specialinvoke r0.<cs.gson.internal.bind.ReflectiveTypeAdapterFactory: java.lang.String getFieldName(java.lang.reflect.Field)>(r2);

        $r10 = staticinvoke <cs.gson.reflect.TypeToken: cs.gson.reflect.TypeToken get(java.lang.reflect.Type)>($r8);

        $r12 = specialinvoke r0.<cs.gson.internal.bind.ReflectiveTypeAdapterFactory: cs.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField createBoundField(cs.gson.Gson,java.lang.reflect.Field,java.lang.String,cs.gson.reflect.TypeToken,boolean,boolean)>($r1, r2, $r11, $r10, $z0, $z1);

        $r11 = $r12.<cs.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField: java.lang.String name>;

        $r13 = interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, $r12);

        $r12 = (cs.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField) $r13;

        if $r12 == null goto label5;

        $r14 = new java.lang.IllegalArgumentException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" declares multiple JSON fields named ");

        $r11 = $r12.<cs.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField: java.lang.String name>;

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r11 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r14;

     label7:
        return r3;
    }

    private java.lang.String getFieldName(java.lang.reflect.Field)
    {
        cs.gson.FieldNamingStrategy $r4;
        java.lang.'annotation'.Annotation $r2;
        java.lang.String $r5;
        java.lang.reflect.Field $r1;
        cs.gson.internal.bind.ReflectiveTypeAdapterFactory r0;
        cs.gson.annotations.SerializedName r3;

        r0 := @this: cs.gson.internal.bind.ReflectiveTypeAdapterFactory;

        $r1 := @parameter0: java.lang.reflect.Field;

        $r2 = virtualinvoke $r1.<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lcs/gson/annotations/SerializedName;");

        r3 = (cs.gson.annotations.SerializedName) $r2;

        if r3 != null goto label1;

        $r4 = r0.<cs.gson.internal.bind.ReflectiveTypeAdapterFactory: cs.gson.FieldNamingStrategy fieldNamingPolicy>;

        $r5 = interfaceinvoke $r4.<cs.gson.FieldNamingStrategy: java.lang.String translateName(java.lang.reflect.Field)>($r1);

        return $r5;

     label1:
        $r5 = interfaceinvoke r3.<cs.gson.annotations.SerializedName: java.lang.String value()>();

        return $r5;
    }

    public cs.gson.TypeAdapter create(cs.gson.Gson, cs.gson.reflect.TypeToken)
    {
        cs.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter $r7;
        cs.gson.internal.ObjectConstructor $r6;
        cs.gson.Gson $r1;
        cs.gson.internal.ConstructorConstructor $r5;
        java.util.Map $r8;
        java.lang.Class $r3, $r4;
        cs.gson.internal.bind.ReflectiveTypeAdapterFactory r0;
        cs.gson.reflect.TypeToken r2;
        boolean $z0;

        r0 := @this: cs.gson.internal.bind.ReflectiveTypeAdapterFactory;

        $r1 := @parameter0: cs.gson.Gson;

        r2 := @parameter1: cs.gson.reflect.TypeToken;

        $r3 = virtualinvoke r2.<cs.gson.reflect.TypeToken: java.lang.Class getRawType()>();

        $r4 = class "Ljava/lang/Object;";

        $z0 = virtualinvoke $r4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r3);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r5 = r0.<cs.gson.internal.bind.ReflectiveTypeAdapterFactory: cs.gson.internal.ConstructorConstructor constructorConstructor>;

        $r6 = virtualinvoke $r5.<cs.gson.internal.ConstructorConstructor: cs.gson.internal.ObjectConstructor get(cs.gson.reflect.TypeToken)>(r2);

        $r7 = new cs.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter;

        $r8 = specialinvoke r0.<cs.gson.internal.bind.ReflectiveTypeAdapterFactory: java.util.Map getBoundFields(cs.gson.Gson,cs.gson.reflect.TypeToken,java.lang.Class)>($r1, r2, $r3);

        specialinvoke $r7.<cs.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter: void <init>(cs.gson.internal.ObjectConstructor,java.util.Map,cs.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter)>($r6, $r8, null);

        return $r7;
    }

    public boolean excludeField(java.lang.reflect.Field, boolean)
    {
        cs.gson.internal.Excluder $r2;
        java.lang.Class $r3;
        java.lang.reflect.Field $r1;
        cs.gson.internal.bind.ReflectiveTypeAdapterFactory r0;
        boolean $z0, $z1;

        r0 := @this: cs.gson.internal.bind.ReflectiveTypeAdapterFactory;

        $r1 := @parameter0: java.lang.reflect.Field;

        $z0 := @parameter1: boolean;

        $r2 = r0.<cs.gson.internal.bind.ReflectiveTypeAdapterFactory: cs.gson.internal.Excluder excluder>;

        $r3 = virtualinvoke $r1.<java.lang.reflect.Field: java.lang.Class getType()>();

        $z1 = virtualinvoke $r2.<cs.gson.internal.Excluder: boolean excludeClass(java.lang.Class,boolean)>($r3, $z0);

        if $z1 != 0 goto label1;

        $r2 = r0.<cs.gson.internal.bind.ReflectiveTypeAdapterFactory: cs.gson.internal.Excluder excluder>;

        $z0 = virtualinvoke $r2.<cs.gson.internal.Excluder: boolean excludeField(java.lang.reflect.Field,boolean)>($r1, $z0);

        if $z0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }
}
