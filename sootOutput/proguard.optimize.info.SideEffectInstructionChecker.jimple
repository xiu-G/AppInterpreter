public class proguard.optimize.info.SideEffectInstructionChecker extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.instruction.visitor.InstructionVisitor, proguard.classfile.constant.visitor.ConstantVisitor, proguard.classfile.visitor.MemberVisitor
{
    private boolean hasSideEffects;
    private final boolean includeReturnInstructions;

    public void <init>(boolean)
    {
        proguard.optimize.info.SideEffectInstructionChecker r0;
        boolean $z0;

        r0 := @this: proguard.optimize.info.SideEffectInstructionChecker;

        $z0 := @parameter0: boolean;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        r0.<proguard.optimize.info.SideEffectInstructionChecker: boolean includeReturnInstructions> = $z0;

        return;
    }

    public boolean hasSideEffects(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.Instruction)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.instruction.Instruction $r4;
        int $i0;
        proguard.optimize.info.SideEffectInstructionChecker r0;
        proguard.classfile.Method $r2;
        boolean z0;

        r0 := @this: proguard.optimize.info.SideEffectInstructionChecker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.Instruction;

        r0.<proguard.optimize.info.SideEffectInstructionChecker: boolean hasSideEffects> = 0;

        virtualinvoke $r4.<proguard.classfile.instruction.Instruction: void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.visitor.InstructionVisitor)>($r1, $r2, $r3, $i0, r0);

        z0 = r0.<proguard.optimize.info.SideEffectInstructionChecker: boolean hasSideEffects>;

        return z0;
    }

    public void visitAnyInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.Instruction)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.instruction.Instruction $r4;
        int $i0;
        proguard.optimize.info.SideEffectInstructionChecker r0;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.optimize.info.SideEffectInstructionChecker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.Instruction;

        return;
    }

    public void visitAnyMethodrefConstant(proguard.classfile.Clazz, proguard.classfile.constant.RefConstant)
    {
        proguard.optimize.info.SideEffectInstructionChecker r0;
        proguard.classfile.constant.RefConstant $r2;
        proguard.classfile.Member $r4;
        proguard.classfile.visitor.NamedMethodVisitor $r3;
        proguard.classfile.Clazz $r1, $r5;
        int $i0;
        proguard.classfile.Method $r6;
        java.lang.String $r7, $r8;
        boolean $z0;

        r0 := @this: proguard.optimize.info.SideEffectInstructionChecker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.RefConstant;

        $r4 = $r2.<proguard.classfile.constant.RefConstant: proguard.classfile.Member referencedMember>;

        if $r4 != null goto label1;

        r0.<proguard.optimize.info.SideEffectInstructionChecker: boolean hasSideEffects> = 1;

        return;

     label1:
        virtualinvoke $r2.<proguard.classfile.constant.RefConstant: void referencedMemberAccept(proguard.classfile.visitor.MemberVisitor)>(r0);

        $z0 = r0.<proguard.optimize.info.SideEffectInstructionChecker: boolean hasSideEffects>;

        if $z0 != 0 goto label2;

        $r5 = $r2.<proguard.classfile.constant.RefConstant: proguard.classfile.Clazz referencedClass>;

        $r6 = (proguard.classfile.Method) $r4;

        $i0 = interfaceinvoke $r6.<proguard.classfile.Method: int getAccessFlags()>();

        $i0 = $i0 & 2;

        if $i0 != 0 goto label2;

        $r3 = new proguard.classfile.visitor.NamedMethodVisitor;

        $r7 = interfaceinvoke $r6.<proguard.classfile.Method: java.lang.String getName(proguard.classfile.Clazz)>($r5);

        $r8 = interfaceinvoke $r6.<proguard.classfile.Method: java.lang.String getDescriptor(proguard.classfile.Clazz)>($r5);

        specialinvoke $r3.<proguard.classfile.visitor.NamedMethodVisitor: void <init>(java.lang.String,java.lang.String,proguard.classfile.visitor.MemberVisitor)>($r7, $r8, r0);

        interfaceinvoke $r1.<proguard.classfile.Clazz: void hierarchyAccept(boolean,boolean,boolean,boolean,proguard.classfile.visitor.ClassVisitor)>(0, 0, 0, 1, $r3);

     label2:
        return;
    }

    public void visitBranchInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.BranchInstruction)
    {
        proguard.optimize.info.SideEffectInstructionChecker r0;
        proguard.classfile.instruction.BranchInstruction $r4;
        byte $b1;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.Method $r2;
        boolean $z0;

        r0 := @this: proguard.optimize.info.SideEffectInstructionChecker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.BranchInstruction;

        $b1 = $r4.<proguard.classfile.instruction.BranchInstruction: byte opcode>;

        $z0 = r0.<proguard.optimize.info.SideEffectInstructionChecker: boolean includeReturnInstructions>;

        if $z0 == 0 goto label2;

        $i0 = (int) $b1;

        if $i0 == -88 goto label1;

        $i0 = (int) $b1;

        if $i0 != -55 goto label2;

     label1:
        r0.<proguard.optimize.info.SideEffectInstructionChecker: boolean hasSideEffects> = 1;

     label2:
        return;
    }

    public void visitConstantInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.ConstantInstruction)
    {
        byte $b1;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.instruction.ConstantInstruction $r4;
        proguard.optimize.info.SideEffectInstructionChecker r0;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.optimize.info.SideEffectInstructionChecker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.ConstantInstruction;

        $b1 = $r4.<proguard.classfile.instruction.ConstantInstruction: byte opcode>;

        $i0 = (int) $b1;

        if $i0 == -77 goto label1;

        $i0 = (int) $b1;

        if $i0 == -75 goto label1;

        $i0 = (int) $b1;

        if $i0 == -74 goto label1;

        $i0 = (int) $b1;

        if $i0 == -73 goto label1;

        $i0 = (int) $b1;

        if $i0 == -72 goto label1;

        $i0 = (int) $b1;

        if $i0 != -71 goto label2;

     label1:
        $i0 = $r4.<proguard.classfile.instruction.ConstantInstruction: int constantIndex>;

        interfaceinvoke $r1.<proguard.classfile.Clazz: void constantPoolEntryAccept(int,proguard.classfile.constant.visitor.ConstantVisitor)>($i0, r0);

     label2:
        return;
    }

    public void visitFieldrefConstant(proguard.classfile.Clazz, proguard.classfile.constant.FieldrefConstant)
    {
        proguard.optimize.info.SideEffectInstructionChecker r0;
        proguard.classfile.constant.FieldrefConstant $r2;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.optimize.info.SideEffectInstructionChecker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.FieldrefConstant;

        r0.<proguard.optimize.info.SideEffectInstructionChecker: boolean hasSideEffects> = 1;

        virtualinvoke $r2.<proguard.classfile.constant.FieldrefConstant: void referencedMemberAccept(proguard.classfile.visitor.MemberVisitor)>(r0);

        return;
    }

    public void visitLibraryField(proguard.classfile.LibraryClass, proguard.classfile.LibraryField)
    {
        proguard.optimize.info.SideEffectInstructionChecker r0;
        proguard.classfile.LibraryClass $r1;
        proguard.classfile.LibraryField $r2;

        r0 := @this: proguard.optimize.info.SideEffectInstructionChecker;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        $r2 := @parameter1: proguard.classfile.LibraryField;

        r0.<proguard.optimize.info.SideEffectInstructionChecker: boolean hasSideEffects> = 1;

        return;
    }

    public void visitLibraryMethod(proguard.classfile.LibraryClass, proguard.classfile.LibraryMethod)
    {
        proguard.classfile.LibraryClass $r1;
        proguard.optimize.info.SideEffectInstructionChecker r0;
        proguard.classfile.LibraryMethod $r2;
        boolean $z0;

        r0 := @this: proguard.optimize.info.SideEffectInstructionChecker;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        $r2 := @parameter1: proguard.classfile.LibraryMethod;

        $z0 = r0.<proguard.optimize.info.SideEffectInstructionChecker: boolean hasSideEffects>;

        if $z0 != 0 goto label1;

        $z0 = staticinvoke <proguard.optimize.info.NoSideEffectMethodMarker: boolean hasNoSideEffects(proguard.classfile.Method)>($r2);

        if $z0 != 0 goto label3;

     label1:
        $z0 = 1;

     label2:
        r0.<proguard.optimize.info.SideEffectInstructionChecker: boolean hasSideEffects> = $z0;

        return;

     label3:
        $z0 = 0;

        goto label2;
    }

    public void visitProgramField(proguard.classfile.ProgramClass, proguard.classfile.ProgramField)
    {
        proguard.classfile.ProgramField $r2;
        proguard.optimize.info.SideEffectInstructionChecker r0;
        proguard.classfile.ProgramClass $r1;
        boolean $z0;

        r0 := @this: proguard.optimize.info.SideEffectInstructionChecker;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.ProgramField;

        $z0 = staticinvoke <proguard.optimize.info.ReadWriteFieldMarker: boolean isRead(proguard.classfile.Field)>($r2);

        r0.<proguard.optimize.info.SideEffectInstructionChecker: boolean hasSideEffects> = $z0;

        return;
    }

    public void visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod)
    {
        proguard.classfile.ProgramMethod $r2;
        proguard.optimize.info.SideEffectInstructionChecker r0;
        proguard.classfile.ProgramClass $r1;
        boolean $z0;

        r0 := @this: proguard.optimize.info.SideEffectInstructionChecker;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.ProgramMethod;

        $z0 = r0.<proguard.optimize.info.SideEffectInstructionChecker: boolean hasSideEffects>;

        if $z0 != 0 goto label1;

        $z0 = staticinvoke <proguard.optimize.info.SideEffectMethodMarker: boolean hasSideEffects(proguard.classfile.Method)>($r2);

        if $z0 == 0 goto label3;

     label1:
        $z0 = 1;

     label2:
        r0.<proguard.optimize.info.SideEffectInstructionChecker: boolean hasSideEffects> = $z0;

        return;

     label3:
        $z0 = 0;

        goto label2;
    }

    public void visitSimpleInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.SimpleInstruction)
    {
        proguard.optimize.info.SideEffectInstructionChecker r0;
        proguard.classfile.instruction.SimpleInstruction $r4;
        byte $b1;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.Method $r2;
        boolean $z0;

        r0 := @this: proguard.optimize.info.SideEffectInstructionChecker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.SimpleInstruction;

        $b1 = $r4.<proguard.classfile.instruction.SimpleInstruction: byte opcode>;

        $i0 = (int) $b1;

        if $i0 == 79 goto label1;

        $i0 = (int) $b1;

        if $i0 == 80 goto label1;

        $i0 = (int) $b1;

        if $i0 == 81 goto label1;

        $i0 = (int) $b1;

        if $i0 == 82 goto label1;

        $i0 = (int) $b1;

        if $i0 == 83 goto label1;

        $i0 = (int) $b1;

        if $i0 == 84 goto label1;

        $i0 = (int) $b1;

        if $i0 == 85 goto label1;

        $i0 = (int) $b1;

        if $i0 == 86 goto label1;

        $i0 = (int) $b1;

        if $i0 == -65 goto label1;

        $i0 = (int) $b1;

        if $i0 == -62 goto label1;

        $i0 = (int) $b1;

        if $i0 == -61 goto label1;

        $z0 = r0.<proguard.optimize.info.SideEffectInstructionChecker: boolean includeReturnInstructions>;

        if $z0 == 0 goto label2;

        $i0 = (int) $b1;

        if $i0 == -84 goto label1;

        $i0 = (int) $b1;

        if $i0 == -83 goto label1;

        $i0 = (int) $b1;

        if $i0 == -82 goto label1;

        $i0 = (int) $b1;

        if $i0 == -81 goto label1;

        $i0 = (int) $b1;

        if $i0 == -80 goto label1;

        $i0 = (int) $b1;

        if $i0 != -79 goto label2;

     label1:
        r0.<proguard.optimize.info.SideEffectInstructionChecker: boolean hasSideEffects> = 1;

     label2:
        return;
    }

    public void visitVariableInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.VariableInstruction)
    {
        proguard.optimize.info.SideEffectInstructionChecker r0;
        proguard.classfile.instruction.VariableInstruction $r4;
        byte $b1;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.Method $r2;
        boolean $z0;

        r0 := @this: proguard.optimize.info.SideEffectInstructionChecker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.VariableInstruction;

        $b1 = $r4.<proguard.classfile.instruction.VariableInstruction: byte opcode>;

        $z0 = r0.<proguard.optimize.info.SideEffectInstructionChecker: boolean includeReturnInstructions>;

        if $z0 == 0 goto label1;

        $i0 = (int) $b1;

        if $i0 != -87 goto label1;

        r0.<proguard.optimize.info.SideEffectInstructionChecker: boolean hasSideEffects> = 1;

     label1:
        return;
    }
}
