public class proguard.evaluation.ConstantValueFactory extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.constant.visitor.ConstantVisitor
{
    protected proguard.evaluation.value.Value value;
    protected final proguard.evaluation.value.ValueFactory valueFactory;

    public void <init>(proguard.evaluation.value.ValueFactory)
    {
        proguard.evaluation.value.ValueFactory $r1;
        proguard.evaluation.ConstantValueFactory r0;

        r0 := @this: proguard.evaluation.ConstantValueFactory;

        $r1 := @parameter0: proguard.evaluation.value.ValueFactory;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        r0.<proguard.evaluation.ConstantValueFactory: proguard.evaluation.value.ValueFactory valueFactory> = $r1;

        return;
    }

    public proguard.evaluation.value.Value constantValue(proguard.classfile.Clazz, int)
    {
        proguard.classfile.Clazz $r1;
        int $i0;
        proguard.evaluation.ConstantValueFactory r0;
        proguard.evaluation.value.Value r2;

        r0 := @this: proguard.evaluation.ConstantValueFactory;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $i0 := @parameter1: int;

        interfaceinvoke $r1.<proguard.classfile.Clazz: void constantPoolEntryAccept(int,proguard.classfile.constant.visitor.ConstantVisitor)>($i0, r0);

        r2 = r0.<proguard.evaluation.ConstantValueFactory: proguard.evaluation.value.Value value>;

        return r2;
    }

    public void visitClassConstant(proguard.classfile.Clazz, proguard.classfile.constant.ClassConstant)
    {
        proguard.classfile.constant.ClassConstant $r2;
        proguard.evaluation.value.ReferenceValue $r5;
        proguard.classfile.Clazz $r1;
        proguard.evaluation.value.ValueFactory $r3;
        proguard.evaluation.ConstantValueFactory r0;
        java.lang.String $r4;

        r0 := @this: proguard.evaluation.ConstantValueFactory;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.ClassConstant;

        $r3 = r0.<proguard.evaluation.ConstantValueFactory: proguard.evaluation.value.ValueFactory valueFactory>;

        $r4 = virtualinvoke $r2.<proguard.classfile.constant.ClassConstant: java.lang.String getName(proguard.classfile.Clazz)>($r1);

        $r1 = $r2.<proguard.classfile.constant.ClassConstant: proguard.classfile.Clazz referencedClass>;

        $r5 = virtualinvoke $r3.<proguard.evaluation.value.ValueFactory: proguard.evaluation.value.ReferenceValue createReferenceValue(java.lang.String,proguard.classfile.Clazz,boolean)>($r4, $r1, 0);

        r0.<proguard.evaluation.ConstantValueFactory: proguard.evaluation.value.Value value> = $r5;

        return;
    }

    public void visitDoubleConstant(proguard.classfile.Clazz, proguard.classfile.constant.DoubleConstant)
    {
        proguard.classfile.Clazz $r1;
        proguard.evaluation.value.ValueFactory $r3;
        proguard.evaluation.value.DoubleValue $r4;
        proguard.evaluation.ConstantValueFactory r0;
        proguard.classfile.constant.DoubleConstant $r2;
        double $d0;

        r0 := @this: proguard.evaluation.ConstantValueFactory;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.DoubleConstant;

        $r3 = r0.<proguard.evaluation.ConstantValueFactory: proguard.evaluation.value.ValueFactory valueFactory>;

        $d0 = virtualinvoke $r2.<proguard.classfile.constant.DoubleConstant: double getValue()>();

        $r4 = virtualinvoke $r3.<proguard.evaluation.value.ValueFactory: proguard.evaluation.value.DoubleValue createDoubleValue(double)>($d0);

        r0.<proguard.evaluation.ConstantValueFactory: proguard.evaluation.value.Value value> = $r4;

        return;
    }

    public void visitFloatConstant(proguard.classfile.Clazz, proguard.classfile.constant.FloatConstant)
    {
        proguard.classfile.constant.FloatConstant $r2;
        proguard.classfile.Clazz $r1;
        proguard.evaluation.value.ValueFactory $r3;
        proguard.evaluation.ConstantValueFactory r0;
        float $f0;
        proguard.evaluation.value.FloatValue $r4;

        r0 := @this: proguard.evaluation.ConstantValueFactory;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.FloatConstant;

        $r3 = r0.<proguard.evaluation.ConstantValueFactory: proguard.evaluation.value.ValueFactory valueFactory>;

        $f0 = virtualinvoke $r2.<proguard.classfile.constant.FloatConstant: float getValue()>();

        $r4 = virtualinvoke $r3.<proguard.evaluation.value.ValueFactory: proguard.evaluation.value.FloatValue createFloatValue(float)>($f0);

        r0.<proguard.evaluation.ConstantValueFactory: proguard.evaluation.value.Value value> = $r4;

        return;
    }

    public void visitIntegerConstant(proguard.classfile.Clazz, proguard.classfile.constant.IntegerConstant)
    {
        proguard.evaluation.value.IntegerValue $r4;
        proguard.classfile.Clazz $r1;
        proguard.classfile.constant.IntegerConstant $r2;
        proguard.evaluation.value.ValueFactory $r3;
        int $i0;
        proguard.evaluation.ConstantValueFactory r0;

        r0 := @this: proguard.evaluation.ConstantValueFactory;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.IntegerConstant;

        $r3 = r0.<proguard.evaluation.ConstantValueFactory: proguard.evaluation.value.ValueFactory valueFactory>;

        $i0 = virtualinvoke $r2.<proguard.classfile.constant.IntegerConstant: int getValue()>();

        $r4 = virtualinvoke $r3.<proguard.evaluation.value.ValueFactory: proguard.evaluation.value.IntegerValue createIntegerValue(int)>($i0);

        r0.<proguard.evaluation.ConstantValueFactory: proguard.evaluation.value.Value value> = $r4;

        return;
    }

    public void visitLongConstant(proguard.classfile.Clazz, proguard.classfile.constant.LongConstant)
    {
        proguard.classfile.constant.LongConstant $r2;
        proguard.classfile.Clazz $r1;
        proguard.evaluation.value.LongValue $r4;
        proguard.evaluation.value.ValueFactory $r3;
        proguard.evaluation.ConstantValueFactory r0;
        long $l0;

        r0 := @this: proguard.evaluation.ConstantValueFactory;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.LongConstant;

        $r3 = r0.<proguard.evaluation.ConstantValueFactory: proguard.evaluation.value.ValueFactory valueFactory>;

        $l0 = virtualinvoke $r2.<proguard.classfile.constant.LongConstant: long getValue()>();

        $r4 = virtualinvoke $r3.<proguard.evaluation.value.ValueFactory: proguard.evaluation.value.LongValue createLongValue(long)>($l0);

        r0.<proguard.evaluation.ConstantValueFactory: proguard.evaluation.value.Value value> = $r4;

        return;
    }

    public void visitStringConstant(proguard.classfile.Clazz, proguard.classfile.constant.StringConstant)
    {
        proguard.evaluation.value.ReferenceValue $r3;
        proguard.classfile.Clazz $r1;
        proguard.classfile.constant.StringConstant $r2;
        proguard.evaluation.value.ValueFactory $r4;
        proguard.evaluation.ConstantValueFactory r0;

        r0 := @this: proguard.evaluation.ConstantValueFactory;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.StringConstant;

        $r4 = r0.<proguard.evaluation.ConstantValueFactory: proguard.evaluation.value.ValueFactory valueFactory>;

        $r1 = $r2.<proguard.classfile.constant.StringConstant: proguard.classfile.Clazz javaLangStringClass>;

        $r3 = virtualinvoke $r4.<proguard.evaluation.value.ValueFactory: proguard.evaluation.value.ReferenceValue createReferenceValue(java.lang.String,proguard.classfile.Clazz,boolean)>("java/lang/String", $r1, 0);

        r0.<proguard.evaluation.ConstantValueFactory: proguard.evaluation.value.Value value> = $r3;

        return;
    }
}
