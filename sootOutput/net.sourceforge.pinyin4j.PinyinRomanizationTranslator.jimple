class net.sourceforge.pinyin4j.PinyinRomanizationTranslator extends java.lang.Object
{

    void <init>()
    {
        net.sourceforge.pinyin4j.PinyinRomanizationTranslator r0;

        r0 := @this: net.sourceforge.pinyin4j.PinyinRomanizationTranslator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static java.lang.String convertRomanizationSystem(java.lang.String, net.sourceforge.pinyin4j.PinyinRomanizationType, net.sourceforge.pinyin4j.PinyinRomanizationType)
    {
        com.hp.hpl.sparta.ParseException $r9;
        net.sourceforge.pinyin4j.PinyinRomanizationType $r1, $r2;
        com.hp.hpl.sparta.Element $r8;
        com.hp.hpl.sparta.Document $r7;
        java.lang.StringBuffer $r4;
        java.lang.String $r0, $r3, $r5;
        net.sourceforge.pinyin4j.PinyinRomanizationResource $r6;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: net.sourceforge.pinyin4j.PinyinRomanizationType;

        $r2 := @parameter2: net.sourceforge.pinyin4j.PinyinRomanizationType;

        $r3 = staticinvoke <net.sourceforge.pinyin4j.TextHelper: java.lang.String extractPinyinString(java.lang.String)>($r0);

        $r0 = staticinvoke <net.sourceforge.pinyin4j.TextHelper: java.lang.String extractToneNumber(java.lang.String)>($r0);

        $r4 = new java.lang.StringBuffer;

     label1:
        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("//");

        $r5 = virtualinvoke $r1.<net.sourceforge.pinyin4j.PinyinRomanizationType: java.lang.String getTagName()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[text()=\'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\']");

        $r3 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        $r6 = staticinvoke <net.sourceforge.pinyin4j.PinyinRomanizationResource: net.sourceforge.pinyin4j.PinyinRomanizationResource getInstance()>();

        $r7 = virtualinvoke $r6.<net.sourceforge.pinyin4j.PinyinRomanizationResource: com.hp.hpl.sparta.Document getPinyinMappingDoc()>();

        $r8 = virtualinvoke $r7.<com.hp.hpl.sparta.Document: com.hp.hpl.sparta.Element xpathSelectElement(java.lang.String)>($r3);

     label2:
        if $r8 == null goto label8;

        $r4 = new java.lang.StringBuffer;

     label3:
        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("../");

        $r3 = virtualinvoke $r2.<net.sourceforge.pinyin4j.PinyinRomanizationType: java.lang.String getTagName()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("/text()");

        $r3 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        $r3 = virtualinvoke $r8.<com.hp.hpl.sparta.Element: java.lang.String xpathSelectString(java.lang.String)>($r3);

     label4:
        $r4 = new java.lang.StringBuffer;

     label5:
        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

     label6:
        return $r0;

     label7:
        $r9 := @caughtexception;

        virtualinvoke $r9.<com.hp.hpl.sparta.ParseException: void printStackTrace()>();

     label8:
        return null;

        catch com.hp.hpl.sparta.ParseException from label1 to label2 with label7;
        catch com.hp.hpl.sparta.ParseException from label3 to label4 with label7;
        catch com.hp.hpl.sparta.ParseException from label5 to label6 with label7;
    }
}
