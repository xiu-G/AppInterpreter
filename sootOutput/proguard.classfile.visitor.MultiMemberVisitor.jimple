public class proguard.classfile.visitor.MultiMemberVisitor extends java.lang.Object implements proguard.classfile.visitor.MemberVisitor
{
    private static final int ARRAY_SIZE_INCREMENT;
    private int memberVisitorCount;
    private proguard.classfile.visitor.MemberVisitor[] memberVisitors;

    public void <init>()
    {
        proguard.classfile.visitor.MultiMemberVisitor r0;

        r0 := @this: proguard.classfile.visitor.MultiMemberVisitor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(proguard.classfile.visitor.MemberVisitor[])
    {
        int $i0;
        proguard.classfile.visitor.MemberVisitor[] $r1;
        proguard.classfile.visitor.MultiMemberVisitor r0;

        r0 := @this: proguard.classfile.visitor.MultiMemberVisitor;

        $r1 := @parameter0: proguard.classfile.visitor.MemberVisitor[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<proguard.classfile.visitor.MultiMemberVisitor: proguard.classfile.visitor.MemberVisitor[] memberVisitors> = $r1;

        $i0 = lengthof $r1;

        r0.<proguard.classfile.visitor.MultiMemberVisitor: int memberVisitorCount> = $i0;

        return;
    }

    private void ensureArraySize()
    {
        proguard.classfile.visitor.MultiMemberVisitor r0;
        int $i0, $i1;
        proguard.classfile.visitor.MemberVisitor[] $r1, $r2;

        r0 := @this: proguard.classfile.visitor.MultiMemberVisitor;

        $r1 = r0.<proguard.classfile.visitor.MultiMemberVisitor: proguard.classfile.visitor.MemberVisitor[] memberVisitors>;

        if $r1 != null goto label1;

        $r1 = newarray (proguard.classfile.visitor.MemberVisitor)[5];

        r0.<proguard.classfile.visitor.MultiMemberVisitor: proguard.classfile.visitor.MemberVisitor[] memberVisitors> = $r1;

        return;

     label1:
        $r1 = r0.<proguard.classfile.visitor.MultiMemberVisitor: proguard.classfile.visitor.MemberVisitor[] memberVisitors>;

        $i0 = lengthof $r1;

        $i1 = r0.<proguard.classfile.visitor.MultiMemberVisitor: int memberVisitorCount>;

        if $i0 != $i1 goto label2;

        $i0 = r0.<proguard.classfile.visitor.MultiMemberVisitor: int memberVisitorCount>;

        $i0 = $i0 + 5;

        $r1 = newarray (proguard.classfile.visitor.MemberVisitor)[$i0];

        $r2 = r0.<proguard.classfile.visitor.MultiMemberVisitor: proguard.classfile.visitor.MemberVisitor[] memberVisitors>;

        $i0 = r0.<proguard.classfile.visitor.MultiMemberVisitor: int memberVisitorCount>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r1, 0, $i0);

        r0.<proguard.classfile.visitor.MultiMemberVisitor: proguard.classfile.visitor.MemberVisitor[] memberVisitors> = $r1;

     label2:
        return;
    }

    public void addMemberVisitor(proguard.classfile.visitor.MemberVisitor)
    {
        proguard.classfile.visitor.MultiMemberVisitor r0;
        int $i0, $i1;
        proguard.classfile.visitor.MemberVisitor $r1;
        proguard.classfile.visitor.MemberVisitor[] $r2;

        r0 := @this: proguard.classfile.visitor.MultiMemberVisitor;

        $r1 := @parameter0: proguard.classfile.visitor.MemberVisitor;

        specialinvoke r0.<proguard.classfile.visitor.MultiMemberVisitor: void ensureArraySize()>();

        $r2 = r0.<proguard.classfile.visitor.MultiMemberVisitor: proguard.classfile.visitor.MemberVisitor[] memberVisitors>;

        $i0 = r0.<proguard.classfile.visitor.MultiMemberVisitor: int memberVisitorCount>;

        $i1 = $i0 + 1;

        r0.<proguard.classfile.visitor.MultiMemberVisitor: int memberVisitorCount> = $i1;

        $r2[$i0] = $r1;

        return;
    }

    public void visitLibraryField(proguard.classfile.LibraryClass, proguard.classfile.LibraryField)
    {
        proguard.classfile.LibraryClass $r1;
        proguard.classfile.visitor.MultiMemberVisitor r0;
        proguard.classfile.LibraryField $r2;
        int $i0, $i1;
        proguard.classfile.visitor.MemberVisitor $r4;
        proguard.classfile.visitor.MemberVisitor[] $r3;

        r0 := @this: proguard.classfile.visitor.MultiMemberVisitor;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        $r2 := @parameter1: proguard.classfile.LibraryField;

        $i0 = 0;

     label1:
        $i1 = r0.<proguard.classfile.visitor.MultiMemberVisitor: int memberVisitorCount>;

        if $i0 >= $i1 goto label2;

        $r3 = r0.<proguard.classfile.visitor.MultiMemberVisitor: proguard.classfile.visitor.MemberVisitor[] memberVisitors>;

        $r4 = $r3[$i0];

        interfaceinvoke $r4.<proguard.classfile.visitor.MemberVisitor: void visitLibraryField(proguard.classfile.LibraryClass,proguard.classfile.LibraryField)>($r1, $r2);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void visitLibraryMethod(proguard.classfile.LibraryClass, proguard.classfile.LibraryMethod)
    {
        proguard.classfile.LibraryClass $r1;
        proguard.classfile.visitor.MultiMemberVisitor r0;
        int $i0, $i1;
        proguard.classfile.LibraryMethod $r2;
        proguard.classfile.visitor.MemberVisitor $r4;
        proguard.classfile.visitor.MemberVisitor[] $r3;

        r0 := @this: proguard.classfile.visitor.MultiMemberVisitor;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        $r2 := @parameter1: proguard.classfile.LibraryMethod;

        $i0 = 0;

     label1:
        $i1 = r0.<proguard.classfile.visitor.MultiMemberVisitor: int memberVisitorCount>;

        if $i0 >= $i1 goto label2;

        $r3 = r0.<proguard.classfile.visitor.MultiMemberVisitor: proguard.classfile.visitor.MemberVisitor[] memberVisitors>;

        $r4 = $r3[$i0];

        interfaceinvoke $r4.<proguard.classfile.visitor.MemberVisitor: void visitLibraryMethod(proguard.classfile.LibraryClass,proguard.classfile.LibraryMethod)>($r1, $r2);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void visitProgramField(proguard.classfile.ProgramClass, proguard.classfile.ProgramField)
    {
        proguard.classfile.ProgramField $r2;
        proguard.classfile.visitor.MultiMemberVisitor r0;
        int $i0, $i1;
        proguard.classfile.visitor.MemberVisitor $r4;
        proguard.classfile.ProgramClass $r1;
        proguard.classfile.visitor.MemberVisitor[] $r3;

        r0 := @this: proguard.classfile.visitor.MultiMemberVisitor;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.ProgramField;

        $i0 = 0;

     label1:
        $i1 = r0.<proguard.classfile.visitor.MultiMemberVisitor: int memberVisitorCount>;

        if $i0 >= $i1 goto label2;

        $r3 = r0.<proguard.classfile.visitor.MultiMemberVisitor: proguard.classfile.visitor.MemberVisitor[] memberVisitors>;

        $r4 = $r3[$i0];

        interfaceinvoke $r4.<proguard.classfile.visitor.MemberVisitor: void visitProgramField(proguard.classfile.ProgramClass,proguard.classfile.ProgramField)>($r1, $r2);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod)
    {
        proguard.classfile.visitor.MultiMemberVisitor r0;
        proguard.classfile.ProgramMethod $r2;
        int $i0, $i1;
        proguard.classfile.visitor.MemberVisitor $r4;
        proguard.classfile.ProgramClass $r1;
        proguard.classfile.visitor.MemberVisitor[] $r3;

        r0 := @this: proguard.classfile.visitor.MultiMemberVisitor;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.ProgramMethod;

        $i0 = 0;

     label1:
        $i1 = r0.<proguard.classfile.visitor.MultiMemberVisitor: int memberVisitorCount>;

        if $i0 >= $i1 goto label2;

        $r3 = r0.<proguard.classfile.visitor.MultiMemberVisitor: proguard.classfile.visitor.MemberVisitor[] memberVisitors>;

        $r4 = $r3[$i0];

        interfaceinvoke $r4.<proguard.classfile.visitor.MemberVisitor: void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod)>($r1, $r2);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    public static void <clinit>()
    {
        <proguard.classfile.visitor.MultiMemberVisitor: int ARRAY_SIZE_INCREMENT> = 5;

        return;
    }
}
