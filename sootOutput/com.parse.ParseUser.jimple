public class com.parse.ParseUser extends com.parse.ParseObject
{
    static final java.lang.String CLASS_NAME;
    private static final java.lang.String CURRENT_USER_FILENAME;
    private static java.util.Map authenticationProviders;
    private static boolean autoUserEnabled;
    private static com.parse.ParseUser currentUser;
    private static boolean currentUserMatchesDisk;
    private final org.json.JSONObject authData;
    private boolean isCurrentUser;
    private boolean isLazy;
    private boolean isNew;
    private final java.util.Set linkedServiceNames;
    private java.lang.String password;
    private final java.util.Set readOnlyLinkedServiceNames;
    private java.lang.String sessionToken;

    static void <clinit>()
    {
        java.util.HashMap $r0;

        <com.parse.ParseUser: java.lang.String CURRENT_USER_FILENAME> = "currentUser";

        <com.parse.ParseUser: java.lang.String CLASS_NAME> = "_User";

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <com.parse.ParseUser: java.util.Map authenticationProviders> = $r0;

        <com.parse.ParseUser: boolean currentUserMatchesDisk> = 0;

        return;
    }

    public void <init>()
    {
        java.util.HashSet $r3;
        org.json.JSONObject $r2;
        java.util.Set $r1;
        com.parse.ParseUser r0;

        r0 := @this: com.parse.ParseUser;

        specialinvoke r0.<com.parse.ParseObject: void <init>(java.lang.String)>("_User");

        r0.<com.parse.ParseUser: boolean isLazy> = 0;

        r0.<com.parse.ParseUser: boolean isCurrentUser> = 0;

        $r2 = new org.json.JSONObject;

        specialinvoke $r2.<org.json.JSONObject: void <init>()>();

        r0.<com.parse.ParseUser: org.json.JSONObject authData> = $r2;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        r0.<com.parse.ParseUser: java.util.Set linkedServiceNames> = $r3;

        $r1 = r0.<com.parse.ParseUser: java.util.Set linkedServiceNames>;

        $r1 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r1);

        r0.<com.parse.ParseUser: java.util.Set readOnlyLinkedServiceNames> = $r1;

        return;
    }

    static org.json.JSONObject access$000(com.parse.ParseUser)
    {
        org.json.JSONObject r1;
        com.parse.ParseUser $r0;

        $r0 := @parameter0: com.parse.ParseUser;

        r1 = $r0.<com.parse.ParseUser: org.json.JSONObject authData>;

        return r1;
    }

    static java.util.Set access$100(com.parse.ParseUser)
    {
        java.util.Set r1;
        com.parse.ParseUser $r0;

        $r0 := @parameter0: com.parse.ParseUser;

        r1 = $r0.<com.parse.ParseUser: java.util.Set linkedServiceNames>;

        return r1;
    }

    static java.util.Map access$200()
    {
        java.util.Map r0;

        r0 = <com.parse.ParseUser: java.util.Map authenticationProviders>;

        return r0;
    }

    static com.parse.l access$300(com.parse.ParseUser)
    {
        com.parse.l $r1;
        com.parse.ParseUser $r0;

        $r0 := @parameter0: com.parse.ParseUser;

        $r1 = specialinvoke $r0.<com.parse.ParseUser: com.parse.l constructSignUpOrLoginCommand()>();

        return $r1;
    }

    static void access$400(com.parse.ParseUser, java.lang.String)
    {
        java.lang.String $r1;
        com.parse.ParseUser $r0;

        $r0 := @parameter0: com.parse.ParseUser;

        $r1 := @parameter1: java.lang.String;

        specialinvoke $r0.<com.parse.ParseUser: void synchronizeAuthData(java.lang.String)>($r1);

        return;
    }

    static void access$500(com.parse.ParseUser)
    {
        com.parse.ParseUser $r0;

        $r0 := @parameter0: com.parse.ParseUser;

        staticinvoke <com.parse.ParseUser: void saveCurrentUser(com.parse.ParseUser)>($r0);

        return;
    }

    static void access$600(com.parse.ParseUser)
    {
        com.parse.ParseUser $r0;

        $r0 := @parameter0: com.parse.ParseUser;

        specialinvoke $r0.<com.parse.ParseUser: void stripAnonymity()>();

        return;
    }

    static void access$700(com.parse.ParseUser, boolean)
    {
        com.parse.ParseUser $r0;
        boolean $z0;

        $r0 := @parameter0: com.parse.ParseUser;

        $z0 := @parameter1: boolean;

        specialinvoke $r0.<com.parse.ParseUser: void resolveLaziness(boolean)>(1);

        return;
    }

    static void access$800(com.parse.ParseUser, org.json.JSONObject)
    {
        org.json.JSONObject $r1;
        com.parse.ParseUser $r0;

        $r0 := @parameter0: com.parse.ParseUser;

        $r1 := @parameter1: org.json.JSONObject;

        specialinvoke $r0.<com.parse.ParseUser: void restoreAnonymity(org.json.JSONObject)>($r1);

        return;
    }

    private static void checkApplicationContext()
    {
        android.content.Context $r0;
        java.lang.RuntimeException $r1;

        $r0 = <com.parse.Parse: android.content.Context applicationContext>;

        if $r0 != null goto label1;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("You must call Parse.initialize(context, oauthKey, oauthSecret) before using the Parse library.");

        throw $r1;

     label1:
        return;
    }

    private static com.parse.l constructLogInCommand(java.lang.String, java.lang.String)
    {
        com.parse.l $r2;
        java.lang.String $r0, $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 = new com.parse.l;

        specialinvoke $r2.<com.parse.l: void <init>(java.lang.String)>("user_login");

        virtualinvoke $r2.<com.parse.l: void a(java.lang.String,java.lang.String)>("username", $r0);

        virtualinvoke $r2.<com.parse.l: void a(java.lang.String,java.lang.String)>("user_password", $r1);

        return $r2;
    }

    private static com.parse.l constructPasswordResetCommand(java.lang.String)
    {
        com.parse.l $r1;
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        $r1 = new com.parse.l;

        specialinvoke $r1.<com.parse.l: void <init>(java.lang.String)>("user_request_password_reset");

        virtualinvoke $r1.<com.parse.l: void a(java.lang.String,java.lang.String)>("email", $r0);

        return $r1;
    }

    private com.parse.l constructSignUpCommand()
    {
        com.parse.l $r1;
        com.parse.ParseUser r0;

        r0 := @this: com.parse.ParseUser;

        $r1 = virtualinvoke r0.<com.parse.ParseUser: com.parse.l constructSaveCommand()>();

        virtualinvoke $r1.<com.parse.l: void a(java.lang.String)>("user_signup");

        return $r1;
    }

    private com.parse.l constructSignUpOrLoginCommand()
    {
        java.util.Iterator $r3;
        com.parse.ParseUser r0;
        org.json.JSONException $r7;
        org.json.JSONObject $r2, $r6;
        int $i0;
        com.parse.l $r1;
        java.lang.Object $r4;
        java.lang.String $r5, $r9;
        org.json.JSONArray $r8;
        boolean $z0;

        r0 := @this: com.parse.ParseUser;

        $r1 = new com.parse.l;

        specialinvoke $r1.<com.parse.l: void <init>(java.lang.String)>("user_signup_or_login");

        $r2 = virtualinvoke r0.<com.parse.ParseUser: org.json.JSONObject toJSONObject(boolean,boolean)>(0, 0);

        $r3 = virtualinvoke $r2.<org.json.JSONObject: java.util.Iterator keys()>();

     label01:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label15;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.lang.String) $r4;

     label02:
        $r4 = virtualinvoke $r2.<org.json.JSONObject: java.lang.Object get(java.lang.String)>($r5);

     label03:
        $z0 = $r4 instanceof org.json.JSONObject;

        if $z0 == 0 goto label07;

        $r6 = (org.json.JSONObject) $r4;

     label04:
        virtualinvoke $r1.<com.parse.l: void a(java.lang.String,org.json.JSONObject)>($r5, $r6);

     label05:
        goto label01;

     label06:
        $r7 := @caughtexception;

        goto label01;

     label07:
        $z0 = $r4 instanceof org.json.JSONArray;

        if $z0 == 0 goto label10;

        $r8 = (org.json.JSONArray) $r4;

     label08:
        virtualinvoke $r1.<com.parse.l: void a(java.lang.String,org.json.JSONArray)>($r5, $r8);

     label09:
        goto label01;

     label10:
        $z0 = $r4 instanceof java.lang.String;

        if $z0 == 0 goto label13;

        $r9 = (java.lang.String) $r4;

     label11:
        virtualinvoke $r1.<com.parse.l: void a(java.lang.String,java.lang.String)>($r5, $r9);

     label12:
        goto label01;

     label13:
        $i0 = virtualinvoke $r2.<org.json.JSONObject: int getInt(java.lang.String)>($r5);

        virtualinvoke $r1.<com.parse.l: void a(java.lang.String,int)>($r5, $i0);

     label14:
        goto label01;

     label15:
        $r5 = r0.<com.parse.ParseUser: java.lang.String password>;

        if $r5 == null goto label16;

        $r5 = r0.<com.parse.ParseUser: java.lang.String password>;

        virtualinvoke $r1.<com.parse.l: void a(java.lang.String,java.lang.String)>("user_password", $r5);

     label16:
        return $r1;

        catch org.json.JSONException from label02 to label03 with label06;
        catch org.json.JSONException from label04 to label05 with label06;
        catch org.json.JSONException from label08 to label09 with label06;
        catch org.json.JSONException from label11 to label12 with label06;
        catch org.json.JSONException from label13 to label14 with label06;
    }

    static void disableAutomaticUser()
    {
        <com.parse.ParseUser: boolean autoUserEnabled> = 0;

        return;
    }

    public static void enableAutomaticUser()
    {
        <com.parse.ParseUser: boolean autoUserEnabled> = 1;

        return;
    }

    public static com.parse.ParseUser getCurrentUser()
    {
        android.content.Context $r1;
        com.parse.ParseObject $r2;
        com.parse.ParseUser $r0;
        boolean $z0;

        staticinvoke <com.parse.ParseUser: void checkApplicationContext()>();

        $r0 = <com.parse.ParseUser: com.parse.ParseUser currentUser>;

        if $r0 == null goto label1;

        $r0 = <com.parse.ParseUser: com.parse.ParseUser currentUser>;

        return $r0;

     label1:
        $z0 = <com.parse.ParseUser: boolean currentUserMatchesDisk>;

        if $z0 == 0 goto label3;

        $z0 = staticinvoke <com.parse.ParseUser: boolean isAutomaticUserEnabled()>();

        if $z0 == 0 goto label2;

        staticinvoke <com.parse.ParseAnonymousUtils: void lazyLogIn()>();

     label2:
        $r0 = <com.parse.ParseUser: com.parse.ParseUser currentUser>;

        return $r0;

     label3:
        <com.parse.ParseUser: boolean currentUserMatchesDisk> = 1;

        $r1 = <com.parse.Parse: android.content.Context applicationContext>;

        $r2 = staticinvoke <com.parse.ParseUser: com.parse.ParseObject getFromDisk(android.content.Context,java.lang.String)>($r1, "currentUser");

        if $r2 != null goto label5;

        $z0 = staticinvoke <com.parse.ParseUser: boolean isAutomaticUserEnabled()>();

        if $z0 == 0 goto label4;

        staticinvoke <com.parse.ParseAnonymousUtils: void lazyLogIn()>();

     label4:
        $r0 = <com.parse.ParseUser: com.parse.ParseUser currentUser>;

        return $r0;

     label5:
        $r0 = (com.parse.ParseUser) $r2;

        <com.parse.ParseUser: com.parse.ParseUser currentUser> = $r0;

        $r0.<com.parse.ParseUser: boolean isCurrentUser> = 1;

        $r0 = <com.parse.ParseUser: com.parse.ParseUser currentUser>;

        return $r0;
    }

    public static com.parse.ParseQuery getQuery()
    {
        com.parse.ParseQuery $r0;

        $r0 = new com.parse.ParseQuery;

        specialinvoke $r0.<com.parse.ParseQuery: void <init>(java.lang.String)>("_User");

        return $r0;
    }

    static boolean isAutomaticUserEnabled()
    {
        boolean z0;

        z0 = <com.parse.ParseUser: boolean autoUserEnabled>;

        return z0;
    }

    private void linkWith(com.parse.auth.ParseAuthenticationProvider, com.parse.SaveCallback)
    {
        com.parse.be $r3;
        com.parse.SaveCallback $r2;
        com.parse.auth.ParseAuthenticationProvider $r1;
        com.parse.ParseUser r0;

        r0 := @this: com.parse.ParseUser;

        $r1 := @parameter0: com.parse.auth.ParseAuthenticationProvider;

        $r2 := @parameter1: com.parse.SaveCallback;

        $r3 = new com.parse.be;

        specialinvoke $r3.<com.parse.be: void <init>(com.parse.ParseUser,com.parse.auth.ParseAuthenticationProvider,com.parse.SaveCallback)>(r0, $r1, $r2);

        interfaceinvoke $r1.<com.parse.auth.ParseAuthenticationProvider: void authenticate(com.parse.auth.ParseAuthenticationProvider$ParseAuthenticationCallback)>($r3);

        return;
    }

    public static com.parse.ParseUser logIn(java.lang.String, java.lang.String)
    {
        com.parse.ParseException $r6;
        java.lang.IllegalArgumentException $r2;
        com.parse.ParseUser $r7;
        org.json.JSONObject $r8;
        com.parse.l $r3;
        java.lang.Object $r4, $r5;
        java.lang.String $r0, $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        if $r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Must specify a username for the user to log in with");

        throw $r2;

     label1:
        if $r1 != null goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Must specify a password for the user to log in with");

        throw $r2;

     label2:
        $r3 = staticinvoke <com.parse.ParseUser: com.parse.l constructLogInCommand(java.lang.String,java.lang.String)>($r0, $r1);

        $r4 = virtualinvoke $r3.<com.parse.l: java.lang.Object c()>();

        $r5 = <org.json.JSONObject: java.lang.Object NULL>;

        if $r4 != $r5 goto label3;

        $r6 = new com.parse.ParseException;

        specialinvoke $r6.<com.parse.ParseException: void <init>(int,java.lang.String)>(101, "invalid login credentials");

        throw $r6;

     label3:
        $r7 = new com.parse.ParseUser;

        specialinvoke $r7.<com.parse.ParseUser: void <init>()>();

        $r0 = $r3.<com.parse.l: java.lang.String a>;

        $r8 = (org.json.JSONObject) $r4;

        virtualinvoke $r7.<com.parse.ParseUser: void handleSaveResult(java.lang.String,org.json.JSONObject)>($r0, $r8);

        staticinvoke <com.parse.ParseUser: void saveCurrentUser(com.parse.ParseUser)>($r7);

        return $r7;
    }

    public static void logInInBackground(java.lang.String, java.lang.String, com.parse.LogInCallback)
    {
        com.parse.LogInCallback $r2;
        com.parse.bf $r3;
        java.lang.String $r0, $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: com.parse.LogInCallback;

        $r3 = new com.parse.bf;

        specialinvoke $r3.<com.parse.bf: void <init>(com.parse.k,java.lang.String,java.lang.String)>($r2, $r0, $r1);

        staticinvoke <com.parse.a: int a(com.parse.a)>($r3);

        return;
    }

    static com.parse.ParseUser logInLazyUser(java.lang.String, org.json.JSONObject)
    {
        org.json.JSONException $r5;
        org.json.JSONObject $r1, $r3;
        java.util.Set $r4;
        java.lang.String $r0;
        java.lang.RuntimeException $r6;
        com.parse.ParseUser $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: org.json.JSONObject;

        $r2 = new com.parse.ParseUser;

        specialinvoke $r2.<com.parse.ParseUser: void <init>()>();

        $r2.<com.parse.ParseUser: boolean isCurrentUser> = 1;

        $r2.<com.parse.ParseUser: boolean isLazy> = 1;

        $r3 = $r2.<com.parse.ParseUser: org.json.JSONObject authData>;

     label1:
        virtualinvoke $r3.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>($r0, $r1);

     label2:
        $r4 = $r2.<com.parse.ParseUser: java.util.Set linkedServiceNames>;

     label3:
        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>($r0);

     label4:
        <com.parse.ParseUser: com.parse.ParseUser currentUser> = $r2;

        <com.parse.ParseUser: boolean currentUserMatchesDisk> = 0;

        return $r2;

     label5:
        $r5 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r5);

        throw $r6;

        catch org.json.JSONException from label1 to label2 with label5;
        catch org.json.JSONException from label3 to label4 with label5;
    }

    private static void logInWith(com.parse.auth.ParseAuthenticationProvider, com.parse.LogInCallback)
    {
        com.parse.LogInCallback $r1;
        com.parse.bl $r2;
        com.parse.auth.ParseAuthenticationProvider $r0;

        $r0 := @parameter0: com.parse.auth.ParseAuthenticationProvider;

        $r1 := @parameter1: com.parse.LogInCallback;

        $r2 = new com.parse.bl;

        specialinvoke $r2.<com.parse.bl: void <init>(com.parse.auth.ParseAuthenticationProvider,com.parse.LogInCallback)>($r0, $r1);

        interfaceinvoke $r0.<com.parse.auth.ParseAuthenticationProvider: void authenticate(com.parse.auth.ParseAuthenticationProvider$ParseAuthenticationCallback)>($r2);

        return;
    }

    static void logInWith(java.lang.String, com.parse.LogInCallback)
    {
        com.parse.LogInCallback $r1;
        java.util.Map $r2;
        java.lang.Object $r4;
        java.lang.String $r0;
        java.lang.IllegalArgumentException $r3;
        com.parse.auth.ParseAuthenticationProvider $r5;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: com.parse.LogInCallback;

        $r2 = <com.parse.ParseUser: java.util.Map authenticationProviders>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r0);

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No authentication provider could be found for the provided authType");

        throw $r3;

     label1:
        $r2 = <com.parse.ParseUser: java.util.Map authenticationProviders>;

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        $r5 = (com.parse.auth.ParseAuthenticationProvider) $r4;

        staticinvoke <com.parse.ParseUser: void logInWith(com.parse.auth.ParseAuthenticationProvider,com.parse.LogInCallback)>($r5, $r1);

        return;
    }

    static void logInWith(java.lang.String, org.json.JSONObject, com.parse.LogInCallback)
    {
        com.parse.LogInCallback $r2;
        com.parse.bk $r3;
        com.parse.bj $r6;
        com.parse.ParseUser $r5;
        org.json.JSONObject $r1;
        com.parse.bi $r4;
        java.lang.String $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: org.json.JSONObject;

        $r2 := @parameter2: com.parse.LogInCallback;

        $r4 = new com.parse.bi;

        specialinvoke $r4.<com.parse.bi: void <init>(com.parse.k,java.lang.String,org.json.JSONObject)>($r2, $r0, $r1);

        $r5 = staticinvoke <com.parse.ParseUser: com.parse.ParseUser getCurrentUser()>();

        if $r5 == null goto label2;

        $r5 = staticinvoke <com.parse.ParseUser: com.parse.ParseUser getCurrentUser()>();

        $z0 = staticinvoke <com.parse.ParseAnonymousUtils: boolean isLinked(com.parse.ParseUser)>($r5);

        if $z0 == 0 goto label2;

        $r5 = staticinvoke <com.parse.ParseUser: com.parse.ParseUser getCurrentUser()>();

        $z0 = virtualinvoke $r5.<com.parse.ParseUser: boolean isLazy()>();

        if $z0 == 0 goto label1;

        $r6 = new com.parse.bj;

        specialinvoke $r6.<com.parse.bj: void <init>(com.parse.k,java.lang.String,org.json.JSONObject)>($r2, $r0, $r1);

        staticinvoke <com.parse.a: int a(com.parse.a)>($r6);

        return;

     label1:
        $r5 = staticinvoke <com.parse.ParseUser: com.parse.ParseUser getCurrentUser()>();

        $r3 = new com.parse.bk;

        specialinvoke $r3.<com.parse.bk: void <init>(com.parse.a,com.parse.LogInCallback)>($r4, $r2);

        virtualinvoke $r5.<com.parse.ParseUser: void linkWith(java.lang.String,org.json.JSONObject,com.parse.SaveCallback)>($r0, $r1, $r3);

        return;

     label2:
        staticinvoke <com.parse.a: int a(com.parse.a)>($r4);

        return;
    }

    public static void logOut()
    {
        java.util.Iterator $r2;
        java.util.Set $r1;
        java.io.File $r5, $r6;
        com.parse.ParseUser $r0;
        java.lang.Object $r3;
        java.lang.String $r4;
        boolean $z0;

        staticinvoke <com.parse.ParseUser: void checkApplicationContext()>();

        $r0 = <com.parse.ParseUser: com.parse.ParseUser currentUser>;

        if $r0 == null goto label3;

        $r0 = <com.parse.ParseUser: com.parse.ParseUser currentUser>;

        $r1 = virtualinvoke $r0.<com.parse.ParseUser: java.util.Set getLinkedServiceNames()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.lang.String) $r3;

        $r0 = <com.parse.ParseUser: com.parse.ParseUser currentUser>;

        virtualinvoke $r0.<com.parse.ParseUser: void logOutWith(java.lang.String)>($r4);

        goto label1;

     label2:
        $r0 = <com.parse.ParseUser: com.parse.ParseUser currentUser>;

        $r0.<com.parse.ParseUser: boolean isCurrentUser> = 0;

        $r0 = <com.parse.ParseUser: com.parse.ParseUser currentUser>;

        $r0.<com.parse.ParseUser: java.lang.String sessionToken> = null;

     label3:
        <com.parse.ParseUser: boolean currentUserMatchesDisk> = 1;

        <com.parse.ParseUser: com.parse.ParseUser currentUser> = null;

        $r5 = new java.io.File;

        $r6 = staticinvoke <com.parse.Parse: java.io.File getParseDir()>();

        specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, "currentUser");

        virtualinvoke $r5.<java.io.File: boolean delete()>();

        return;
    }

    private void logOutWith(com.parse.auth.ParseAuthenticationProvider)
    {
        com.parse.auth.ParseAuthenticationProvider $r1;
        com.parse.ParseUser r0;

        r0 := @this: com.parse.ParseUser;

        $r1 := @parameter0: com.parse.auth.ParseAuthenticationProvider;

        interfaceinvoke $r1.<com.parse.auth.ParseAuthenticationProvider: void deauthenticate()>();

        return;
    }

    static void registerAuthenticationProvider(com.parse.auth.ParseAuthenticationProvider)
    {
        java.util.Map $r1;
        java.lang.String $r2;
        com.parse.auth.ParseAuthenticationProvider $r0;
        com.parse.ParseUser $r3;

        $r0 := @parameter0: com.parse.auth.ParseAuthenticationProvider;

        $r1 = <com.parse.ParseUser: java.util.Map authenticationProviders>;

        $r2 = interfaceinvoke $r0.<com.parse.auth.ParseAuthenticationProvider: java.lang.String getAuthType()>();

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r0);

        $r3 = staticinvoke <com.parse.ParseUser: com.parse.ParseUser getCurrentUser()>();

        if $r3 == null goto label1;

        $r3 = staticinvoke <com.parse.ParseUser: com.parse.ParseUser getCurrentUser()>();

        $r2 = interfaceinvoke $r0.<com.parse.auth.ParseAuthenticationProvider: java.lang.String getAuthType()>();

        specialinvoke $r3.<com.parse.ParseUser: void synchronizeAuthData(java.lang.String)>($r2);

     label1:
        return;
    }

    public static void requestPasswordReset(java.lang.String)
    {
        com.parse.l $r1;
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.parse.ParseUser: com.parse.l constructPasswordResetCommand(java.lang.String)>($r0);

        virtualinvoke $r1.<com.parse.l: java.lang.Object c()>();

        return;
    }

    public static void requestPasswordResetInBackground(java.lang.String, com.parse.RequestPasswordResetCallback)
    {
        java.lang.String $r0;
        com.parse.bg $r2;
        com.parse.RequestPasswordResetCallback $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: com.parse.RequestPasswordResetCallback;

        $r2 = new com.parse.bg;

        specialinvoke $r2.<com.parse.bg: void <init>(com.parse.k,java.lang.String)>($r1, $r0);

        staticinvoke <com.parse.a: int a(com.parse.a)>($r2);

        return;
    }

    private void resolveLaziness(boolean)
    {
        java.lang.Throwable $r7;
        java.util.Set $r1;
        com.parse.ParseUser r0, $r6;
        java.util.HashSet $r5;
        org.json.JSONObject $r4;
        int $i0;
        com.parse.l $r2;
        java.lang.Object $r3;
        boolean $z0, $z1;

        r0 := @this: com.parse.ParseUser;

        $z0 := @parameter0: boolean;

        $z1 = virtualinvoke r0.<com.parse.ParseUser: boolean isLazy()>();

        if $z1 != 0 goto label1;

        return;

     label1:
        $r1 = r0.<com.parse.ParseUser: java.util.Set linkedServiceNames>;

        $i0 = interfaceinvoke $r1.<java.util.Set: int size()>();

        if $i0 != 0 goto label2;

        virtualinvoke r0.<com.parse.ParseUser: void signUp(boolean)>($z0);

        r0.<com.parse.ParseUser: boolean isLazy> = 0;

        return;

     label2:
        if $z0 == 0 goto label3;

        virtualinvoke r0.<com.parse.ParseUser: void checkIfRunning(boolean)>(1);

     label3:
        $r2 = specialinvoke r0.<com.parse.ParseUser: com.parse.l constructSignUpOrLoginCommand()>();

        $r3 = virtualinvoke $r2.<com.parse.l: java.lang.Object c()>();

        $r4 = (org.json.JSONObject) $r3;

        $z0 = virtualinvoke $r4.<org.json.JSONObject: boolean optBoolean(java.lang.String)>("is_new");

     label4:
        if $z0 == 0 goto label7;

     label5:
        virtualinvoke r0.<com.parse.ParseUser: void handleSaveResult(java.lang.String,org.json.JSONObject)>("create", $r4);

        r0.<com.parse.ParseUser: boolean dirty> = 0;

        $r5 = r0.<com.parse.ParseUser: java.util.HashSet dirtyKeys>;

        virtualinvoke $r5.<java.util.HashSet: void clear()>();

        staticinvoke <com.parse.ParseUser: void saveCurrentUser(com.parse.ParseUser)>(r0);

        r0.<com.parse.ParseUser: boolean isLazy> = 0;

     label6:
        virtualinvoke r0.<com.parse.ParseUser: void finishedRunning()>();

        return;

     label7:
        $r6 = new com.parse.ParseUser;

        specialinvoke $r6.<com.parse.ParseUser: void <init>()>();

        virtualinvoke $r6.<com.parse.ParseUser: void handleSaveResult(java.lang.String,org.json.JSONObject)>("create", $r4);

        staticinvoke <com.parse.ParseUser: void saveCurrentUser(com.parse.ParseUser)>($r6);

     label8:
        goto label6;

     label9:
        $r7 := @caughtexception;

        virtualinvoke r0.<com.parse.ParseUser: void finishedRunning()>();

        throw $r7;

        catch java.lang.Throwable from label3 to label4 with label9;
        catch java.lang.Throwable from label5 to label6 with label9;
        catch java.lang.Throwable from label7 to label8 with label9;
    }

    private void restoreAnonymity(org.json.JSONObject)
    {
        org.json.JSONException $r4;
        org.json.JSONObject $r1, $r3;
        java.util.Set $r2;
        java.lang.RuntimeException $r5;
        com.parse.ParseUser r0;

        r0 := @this: com.parse.ParseUser;

        $r1 := @parameter0: org.json.JSONObject;

        if $r1 == null goto label4;

        $r2 = r0.<com.parse.ParseUser: java.util.Set linkedServiceNames>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>("anonymous");

        $r3 = r0.<com.parse.ParseUser: org.json.JSONObject authData>;

     label1:
        virtualinvoke $r3.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("anonymous", $r1);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

     label4:
        return;

        catch org.json.JSONException from label1 to label2 with label3;
    }

    private static void saveCurrentUser(com.parse.ParseUser)
    {
        android.content.Context $r2;
        com.parse.ParseUser $r0, $r1;

        $r0 := @parameter0: com.parse.ParseUser;

        staticinvoke <com.parse.ParseUser: void checkApplicationContext()>();

        $r1 = <com.parse.ParseUser: com.parse.ParseUser currentUser>;

        if $r1 == $r0 goto label1;

        staticinvoke <com.parse.ParseUser: void logOut()>();

     label1:
        $r0.<com.parse.ParseUser: boolean isCurrentUser> = 1;

        specialinvoke $r0.<com.parse.ParseUser: void synchronizeAllAuthData()>();

        $r2 = <com.parse.Parse: android.content.Context applicationContext>;

        virtualinvoke $r0.<com.parse.ParseUser: void saveToDisk(android.content.Context,java.lang.String)>($r2, "currentUser");

        <com.parse.ParseUser: boolean currentUserMatchesDisk> = 1;

        <com.parse.ParseUser: com.parse.ParseUser currentUser> = $r0;

        return;
    }

    private void stripAnonymity()
    {
        org.json.JSONException $r4;
        org.json.JSONObject $r3;
        java.util.Set $r2;
        java.lang.Object $r1;
        java.lang.RuntimeException $r5;
        com.parse.ParseUser r0;
        boolean $z0;

        r0 := @this: com.parse.ParseUser;

        $z0 = staticinvoke <com.parse.ParseAnonymousUtils: boolean isLinked(com.parse.ParseUser)>(r0);

        if $z0 == 0 goto label4;

        $r2 = r0.<com.parse.ParseUser: java.util.Set linkedServiceNames>;

        interfaceinvoke $r2.<java.util.Set: boolean remove(java.lang.Object)>("anonymous");

        $r3 = r0.<com.parse.ParseUser: org.json.JSONObject authData>;

        $r1 = <org.json.JSONObject: java.lang.Object NULL>;

     label1:
        virtualinvoke $r3.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("anonymous", $r1);

     label2:
        r0.<com.parse.ParseUser: boolean dirty> = 1;

        return;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

     label4:
        return;

        catch org.json.JSONException from label1 to label2 with label3;
    }

    private void synchronizeAllAuthData()
    {
        org.json.JSONObject $r1;
        java.util.Iterator $r2;
        java.lang.Object $r3;
        java.lang.String $r4;
        com.parse.ParseUser r0;
        boolean $z0;

        r0 := @this: com.parse.ParseUser;

        $r1 = r0.<com.parse.ParseUser: org.json.JSONObject authData>;

        if $r1 == null goto label2;

        $r1 = r0.<com.parse.ParseUser: org.json.JSONObject authData>;

        $r2 = virtualinvoke $r1.<org.json.JSONObject: java.util.Iterator keys()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.lang.String) $r3;

        specialinvoke r0.<com.parse.ParseUser: void synchronizeAuthData(java.lang.String)>($r4);

        goto label1;

     label2:
        return;
    }

    private void synchronizeAuthData(java.lang.String)
    {
        com.parse.auth.ParseAuthenticationProvider $r4;
        com.parse.ParseUser r0;
        org.json.JSONObject $r5;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String $r1, $r6;
        boolean $z0;

        r0 := @this: com.parse.ParseUser;

        $r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<com.parse.ParseUser: boolean isCurrentUser()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = <com.parse.ParseUser: java.util.Map authenticationProviders>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        $r2 = <com.parse.ParseUser: java.util.Map authenticationProviders>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (com.parse.auth.ParseAuthenticationProvider) $r3;

        $r5 = r0.<com.parse.ParseUser: org.json.JSONObject authData>;

        $r6 = interfaceinvoke $r4.<com.parse.auth.ParseAuthenticationProvider: java.lang.String getAuthType()>();

        $r5 = virtualinvoke $r5.<org.json.JSONObject: org.json.JSONObject optJSONObject(java.lang.String)>($r6);

        $z0 = interfaceinvoke $r4.<com.parse.auth.ParseAuthenticationProvider: boolean restoreAuthentication(org.json.JSONObject)>($r5);

        if $z0 != 0 goto label2;

        virtualinvoke r0.<com.parse.ParseUser: void unlinkFromInBackground(java.lang.String)>($r1);

     label2:
        return;
    }

    void cleanUpAuthData()
    {
        java.util.Iterator $r2;
        java.util.Set $r5;
        com.parse.auth.ParseAuthenticationProvider $r7;
        com.parse.ParseUser r0;
        org.json.JSONObject $r1;
        java.util.Map $r6;
        java.lang.Object $r3;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: com.parse.ParseUser;

        $z0 = virtualinvoke r0.<com.parse.ParseUser: boolean isCurrentUser()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = r0.<com.parse.ParseUser: org.json.JSONObject authData>;

        $r2 = virtualinvoke $r1.<org.json.JSONObject: java.util.Iterator keys()>();

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.lang.String) $r3;

        $r1 = r0.<com.parse.ParseUser: org.json.JSONObject authData>;

        $z0 = virtualinvoke $r1.<org.json.JSONObject: boolean isNull(java.lang.String)>($r4);

        if $z0 == 0 goto label2;

        interfaceinvoke $r2.<java.util.Iterator: void remove()>();

        $r5 = r0.<com.parse.ParseUser: java.util.Set linkedServiceNames>;

        interfaceinvoke $r5.<java.util.Set: boolean remove(java.lang.Object)>($r4);

        $r6 = <com.parse.ParseUser: java.util.Map authenticationProviders>;

        $z0 = interfaceinvoke $r6.<java.util.Map: boolean containsKey(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        $r6 = <com.parse.ParseUser: java.util.Map authenticationProviders>;

        $r3 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        $r7 = (com.parse.auth.ParseAuthenticationProvider) $r3;

        interfaceinvoke $r7.<com.parse.auth.ParseAuthenticationProvider: boolean restoreAuthentication(org.json.JSONObject)>(null);

        goto label2;

     label3:
        return;
    }

    void clearData()
    {
        org.json.JSONObject $r1;
        java.util.Iterator $r2;
        java.util.Set $r3;
        com.parse.ParseUser r0;
        boolean $z0;

        r0 := @this: com.parse.ParseUser;

        $r1 = r0.<com.parse.ParseUser: org.json.JSONObject authData>;

        $r2 = virtualinvoke $r1.<org.json.JSONObject: java.util.Iterator keys()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r2.<java.util.Iterator: void remove()>();

        goto label1;

     label2:
        $r3 = r0.<com.parse.ParseUser: java.util.Set linkedServiceNames>;

        interfaceinvoke $r3.<java.util.Set: void clear()>();

        r0.<com.parse.ParseUser: java.lang.String password> = null;

        r0.<com.parse.ParseUser: java.lang.String sessionToken> = null;

        specialinvoke r0.<com.parse.ParseObject: void clearData()>();

        return;
    }

    com.parse.l constructSaveCommand()
    {
        org.json.JSONObject $r3;
        int $i0;
        com.parse.l $r1;
        java.lang.String $r2;
        com.parse.ParseUser r0;

        r0 := @this: com.parse.ParseUser;

        $r1 = specialinvoke r0.<com.parse.ParseObject: com.parse.l constructSaveCommand()>();

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<com.parse.ParseUser: java.lang.String password>;

        if $r2 == null goto label2;

        $r2 = r0.<com.parse.ParseUser: java.lang.String password>;

        virtualinvoke $r1.<com.parse.l: void a(java.lang.String,java.lang.String)>("user_password", $r2);

     label2:
        $r3 = r0.<com.parse.ParseUser: org.json.JSONObject authData>;

        $i0 = virtualinvoke $r3.<org.json.JSONObject: int length()>();

        if $i0 <= 0 goto label3;

        $r3 = r0.<com.parse.ParseUser: org.json.JSONObject authData>;

        virtualinvoke $r1.<com.parse.l: void a(java.lang.String,org.json.JSONObject)>("auth_data", $r3);

     label3:
        return $r1;
    }

    public volatile com.parse.ParseObject fetch()
    {
        com.parse.ParseUser r0;

        r0 := @this: com.parse.ParseUser;

        r0 = virtualinvoke r0.<com.parse.ParseUser: com.parse.ParseUser fetch()>();

        return r0;
    }

    public com.parse.ParseUser fetch()
    {
        com.parse.ParseUser r0;
        boolean $z0;

        r0 := @this: com.parse.ParseUser;

        $z0 = virtualinvoke r0.<com.parse.ParseUser: boolean isLazy()>();

        if $z0 == 0 goto label1;

        return r0;

     label1:
        specialinvoke r0.<com.parse.ParseObject: com.parse.ParseObject fetch()>();

        virtualinvoke r0.<com.parse.ParseUser: void cleanUpAuthData()>();

        $z0 = virtualinvoke r0.<com.parse.ParseUser: boolean isCurrentUser()>();

        if $z0 == 0 goto label2;

        staticinvoke <com.parse.ParseUser: void saveCurrentUser(com.parse.ParseUser)>(r0);

     label2:
        return r0;
    }

    public volatile com.parse.ParseObject fetchIfNeeded()
    {
        com.parse.ParseUser r0;

        r0 := @this: com.parse.ParseUser;

        r0 = virtualinvoke r0.<com.parse.ParseUser: com.parse.ParseUser fetchIfNeeded()>();

        return r0;
    }

    public com.parse.ParseUser fetchIfNeeded()
    {
        com.parse.ParseObject $r1;
        com.parse.ParseUser r0;

        r0 := @this: com.parse.ParseUser;

        $r1 = specialinvoke r0.<com.parse.ParseObject: com.parse.ParseObject fetchIfNeeded()>();

        r0 = (com.parse.ParseUser) $r1;

        return r0;
    }

    public java.lang.String getEmail()
    {
        java.lang.String $r1;
        com.parse.ParseUser r0;

        r0 := @this: com.parse.ParseUser;

        $r1 = virtualinvoke r0.<com.parse.ParseUser: java.lang.String getString(java.lang.String)>("email");

        return $r1;
    }

    java.util.Set getLinkedServiceNames()
    {
        java.util.Set r1;
        com.parse.ParseUser r0;

        r0 := @this: com.parse.ParseUser;

        r1 = r0.<com.parse.ParseUser: java.util.Set readOnlyLinkedServiceNames>;

        return r1;
    }

    public java.lang.String getSessionToken()
    {
        java.lang.String r1;
        com.parse.ParseUser r0;

        r0 := @this: com.parse.ParseUser;

        r1 = r0.<com.parse.ParseUser: java.lang.String sessionToken>;

        return r1;
    }

    public java.lang.String getUsername()
    {
        java.lang.String $r1;
        com.parse.ParseUser r0;

        r0 := @this: com.parse.ParseUser;

        $r1 = virtualinvoke r0.<com.parse.ParseUser: java.lang.String getString(java.lang.String)>("username");

        return $r1;
    }

    public boolean isAuthenticated()
    {
        java.lang.String $r1, $r3;
        com.parse.ParseUser r0, $r2;
        boolean $z0;

        r0 := @this: com.parse.ParseUser;

        $z0 = virtualinvoke r0.<com.parse.ParseUser: boolean isLazy()>();

        if $z0 != 0 goto label1;

        $r1 = r0.<com.parse.ParseUser: java.lang.String sessionToken>;

        if $r1 == null goto label2;

        $r2 = staticinvoke <com.parse.ParseUser: com.parse.ParseUser getCurrentUser()>();

        if $r2 == null goto label2;

        $r1 = virtualinvoke r0.<com.parse.ParseUser: java.lang.String getObjectId()>();

        r0 = staticinvoke <com.parse.ParseUser: com.parse.ParseUser getCurrentUser()>();

        $r3 = virtualinvoke r0.<com.parse.ParseUser: java.lang.String getObjectId()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    boolean isCurrentUser()
    {
        com.parse.ParseUser r0;
        boolean z0;

        r0 := @this: com.parse.ParseUser;

        z0 = r0.<com.parse.ParseUser: boolean isCurrentUser>;

        return z0;
    }

    boolean isLazy()
    {
        com.parse.ParseUser r0;
        boolean z0;

        r0 := @this: com.parse.ParseUser;

        z0 = r0.<com.parse.ParseUser: boolean isLazy>;

        return z0;
    }

    public boolean isNew()
    {
        com.parse.ParseUser r0;
        boolean z0;

        r0 := @this: com.parse.ParseUser;

        z0 = r0.<com.parse.ParseUser: boolean isNew>;

        return z0;
    }

    void linkWith(java.lang.String, com.parse.SaveCallback)
    {
        com.parse.SaveCallback $r2;
        java.lang.IllegalArgumentException $r4;
        com.parse.auth.ParseAuthenticationProvider $r6;
        com.parse.ParseUser r0;
        java.util.Map $r3;
        java.lang.Object $r5;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: com.parse.ParseUser;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: com.parse.SaveCallback;

        $r3 = <com.parse.ParseUser: java.util.Map authenticationProviders>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No authentication provider could be found for the provided authType");

        throw $r4;

     label1:
        $r3 = <com.parse.ParseUser: java.util.Map authenticationProviders>;

        $r5 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r6 = (com.parse.auth.ParseAuthenticationProvider) $r5;

        specialinvoke r0.<com.parse.ParseUser: void linkWith(com.parse.auth.ParseAuthenticationProvider,com.parse.SaveCallback)>($r6, $r2);

        return;
    }

    void linkWith(java.lang.String, org.json.JSONObject, com.parse.SaveCallback)
    {
        org.json.JSONObject $r2;
        com.parse.bm $r4;
        java.lang.String $r1;
        com.parse.SaveCallback $r3;
        com.parse.ParseUser r0;

        r0 := @this: com.parse.ParseUser;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.json.JSONObject;

        $r3 := @parameter2: com.parse.SaveCallback;

        $r4 = new com.parse.bm;

        specialinvoke $r4.<com.parse.bm: void <init>(com.parse.ParseUser,com.parse.k,java.lang.String,org.json.JSONObject)>(r0, $r3, $r1, $r2);

        staticinvoke <com.parse.a: int a(com.parse.a)>($r4);

        return;
    }

    void logOutWith(java.lang.String)
    {
        java.util.Map $r2;
        java.util.Set $r3;
        java.lang.Object $r4;
        java.lang.String $r1;
        com.parse.auth.ParseAuthenticationProvider $r5;
        com.parse.ParseUser r0;
        boolean $z0;

        r0 := @this: com.parse.ParseUser;

        $r1 := @parameter0: java.lang.String;

        $r2 = <com.parse.ParseUser: java.util.Map authenticationProviders>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r3 = r0.<com.parse.ParseUser: java.util.Set linkedServiceNames>;

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r2 = <com.parse.ParseUser: java.util.Map authenticationProviders>;

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r5 = (com.parse.auth.ParseAuthenticationProvider) $r4;

        interfaceinvoke $r5.<com.parse.auth.ParseAuthenticationProvider: void deauthenticate()>();

     label1:
        return;
    }

    void mergeObject(org.json.JSONObject, boolean)
    {
        java.util.Iterator $r4;
        java.util.Set $r7;
        java.lang.RuntimeException $r9;
        com.parse.ParseUser r0;
        org.json.JSONException $r8, $r10, $r11;
        org.json.JSONObject $r1, $r3, $r6;
        java.lang.Object $r5;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: com.parse.ParseUser;

        $r1 := @parameter0: org.json.JSONObject;

        $z0 := @parameter1: boolean;

        specialinvoke r0.<com.parse.ParseObject: void mergeObject(org.json.JSONObject,boolean)>($r1, $z0);

        $z0 = virtualinvoke $r1.<org.json.JSONObject: boolean has(java.lang.String)>("session_token");

        if $z0 == 0 goto label03;

     label01:
        $r2 = virtualinvoke $r1.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("session_token");

     label02:
        r0.<com.parse.ParseUser: java.lang.String sessionToken> = $r2;

     label03:
        $z0 = virtualinvoke $r1.<org.json.JSONObject: boolean has(java.lang.String)>("auth_data");

        if $z0 == 0 goto label16;

     label04:
        $r3 = virtualinvoke $r1.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>("auth_data");

        $r4 = virtualinvoke $r3.<org.json.JSONObject: java.util.Iterator keys()>();

     label05:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

     label06:
        if $z0 == 0 goto label16;

     label07:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

     label08:
        $r2 = (java.lang.String) $r5;

        $r6 = r0.<com.parse.ParseUser: org.json.JSONObject authData>;

     label09:
        $r5 = virtualinvoke $r3.<org.json.JSONObject: java.lang.Object get(java.lang.String)>($r2);

        virtualinvoke $r6.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>($r2, $r5);

        $z0 = virtualinvoke $r3.<org.json.JSONObject: boolean isNull(java.lang.String)>($r2);

     label10:
        if $z0 != 0 goto label12;

        $r7 = r0.<com.parse.ParseUser: java.util.Set linkedServiceNames>;

     label11:
        interfaceinvoke $r7.<java.util.Set: boolean add(java.lang.Object)>($r2);

     label12:
        specialinvoke r0.<com.parse.ParseUser: void synchronizeAuthData(java.lang.String)>($r2);

     label13:
        goto label05;

     label14:
        $r8 := @caughtexception;

        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r8);

        throw $r9;

     label15:
        $r10 := @caughtexception;

        $r9 = new java.lang.RuntimeException;

        $r2 = virtualinvoke $r10.<org.json.JSONException: java.lang.String getMessage()>();

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String)>($r2);

        throw $r9;

     label16:
        $z0 = virtualinvoke $r1.<org.json.JSONObject: boolean has(java.lang.String)>("is_new");

        if $z0 == 0 goto label20;

     label17:
        $z0 = virtualinvoke $r1.<org.json.JSONObject: boolean getBoolean(java.lang.String)>("is_new");

     label18:
        r0.<com.parse.ParseUser: boolean isNew> = $z0;

        return;

     label19:
        $r11 := @caughtexception;

        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r11);

        throw $r9;

     label20:
        return;

        catch org.json.JSONException from label01 to label02 with label15;
        catch org.json.JSONException from label04 to label06 with label14;
        catch org.json.JSONException from label07 to label08 with label14;
        catch org.json.JSONException from label09 to label10 with label14;
        catch org.json.JSONException from label11 to label13 with label14;
        catch org.json.JSONException from label17 to label18 with label19;
    }

    public void put(java.lang.String, java.lang.Object)
    {
        java.lang.Object $r2;
        java.lang.String $r1;
        com.parse.ParseUser r0;
        boolean $z0;

        r0 := @this: com.parse.ParseUser;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("username");

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.parse.ParseUser: void stripAnonymity()>();

     label1:
        specialinvoke r0.<com.parse.ParseObject: void put(java.lang.String,java.lang.Object)>($r1, $r2);

        return;
    }

    public void remove(java.lang.String)
    {
        java.lang.String $r1;
        java.lang.IllegalArgumentException $r2;
        com.parse.ParseUser r0;

        r0 := @this: com.parse.ParseUser;

        $r1 := @parameter0: java.lang.String;

        if $r1 != "username" goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can\'t remove the username key.");

        throw $r2;

     label1:
        specialinvoke r0.<com.parse.ParseObject: void remove(java.lang.String)>($r1);

        return;
    }

    public void save(boolean)
    {
        com.parse.ParseUser r0;
        boolean $z0, $z1;

        r0 := @this: com.parse.ParseUser;

        $z0 := @parameter0: boolean;

        $z1 = virtualinvoke r0.<com.parse.ParseUser: boolean isLazy()>();

        if $z1 == 0 goto label1;

        specialinvoke r0.<com.parse.ParseUser: void resolveLaziness(boolean)>($z0);

        return;

     label1:
        specialinvoke r0.<com.parse.ParseObject: void save(boolean)>($z0);

        virtualinvoke r0.<com.parse.ParseUser: void cleanUpAuthData()>();

        $z0 = virtualinvoke r0.<com.parse.ParseUser: boolean isCurrentUser()>();

        if $z0 == 0 goto label2;

        staticinvoke <com.parse.ParseUser: void saveCurrentUser(com.parse.ParseUser)>(r0);

     label2:
        return;
    }

    public void setEmail(java.lang.String)
    {
        java.lang.String $r1;
        com.parse.ParseUser r0;

        r0 := @this: com.parse.ParseUser;

        $r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<com.parse.ParseUser: void checkIfRunning()>();

        virtualinvoke r0.<com.parse.ParseUser: void put(java.lang.String,java.lang.Object)>("email", $r1);

        return;
    }

    public void setPassword(java.lang.String)
    {
        java.lang.String $r1;
        com.parse.ParseUser r0;

        r0 := @this: com.parse.ParseUser;

        $r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<com.parse.ParseUser: void checkIfRunning()>();

        r0.<com.parse.ParseUser: java.lang.String password> = $r1;

        r0.<com.parse.ParseUser: boolean dirty> = 1;

        return;
    }

    public void setUsername(java.lang.String)
    {
        java.lang.String $r1;
        com.parse.ParseUser r0;

        r0 := @this: com.parse.ParseUser;

        $r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<com.parse.ParseUser: void checkIfRunning()>();

        virtualinvoke r0.<com.parse.ParseUser: void put(java.lang.String,java.lang.Object)>("username", $r1);

        return;
    }

    public void signUp()
    {
        com.parse.ParseUser r0;

        r0 := @this: com.parse.ParseUser;

        virtualinvoke r0.<com.parse.ParseUser: void signUp(boolean)>(1);

        return;
    }

    protected void signUp(boolean)
    {
        java.lang.Throwable $r3;
        com.parse.ParseException $r8;
        java.lang.IllegalArgumentException $r2;
        com.parse.ParseUser r0, $r9;
        java.util.HashSet $r10, $r11;
        org.json.JSONException $r7;
        org.json.JSONObject $r4;
        int $i0;
        java.lang.Object $r5, $r6;
        com.parse.l $r12;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: com.parse.ParseUser;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label01;

        virtualinvoke r0.<com.parse.ParseUser: void checkIfRunning(boolean)>(1);

     label01:
        $r1 = virtualinvoke r0.<com.parse.ParseUser: java.lang.String getUsername()>();

     label02:
        if $r1 == null goto label05;

     label03:
        $r1 = virtualinvoke r0.<com.parse.ParseUser: java.lang.String getUsername()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

     label04:
        if $i0 != 0 goto label07;

     label05:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Username cannot be missing or blank");

        throw $r2;

     label06:
        $r3 := @caughtexception;

        virtualinvoke r0.<com.parse.ParseUser: void finishedRunning()>();

        throw $r3;

     label07:
        $r1 = r0.<com.parse.ParseUser: java.lang.String password>;

     label08:
        if $r1 != null goto label10;

     label09:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Password cannot be missing or blank");

        throw $r2;

     label10:
        $r1 = virtualinvoke r0.<com.parse.ParseUser: java.lang.String getObjectId()>();

     label11:
        if $r1 == null goto label24;

     label12:
        $r4 = r0.<com.parse.ParseUser: org.json.JSONObject authData>;

     label13:
        $z0 = virtualinvoke $r4.<org.json.JSONObject: boolean has(java.lang.String)>("anonymous");

     label14:
        if $z0 == 0 goto label23;

     label15:
        $r4 = r0.<com.parse.ParseUser: org.json.JSONObject authData>;

     label16:
        $r5 = virtualinvoke $r4.<org.json.JSONObject: java.lang.Object get(java.lang.String)>("anonymous");

     label17:
        $r6 = <org.json.JSONObject: java.lang.Object NULL>;

     label18:
        if $r5 != $r6 goto label23;

     label19:
        virtualinvoke r0.<com.parse.ParseUser: void save(boolean)>(0);

     label20:
        virtualinvoke r0.<com.parse.ParseUser: void finishedRunning()>();

        return;

     label21:
        $r7 := @caughtexception;

     label22:
        $r8 = new com.parse.ParseException;

        specialinvoke $r8.<com.parse.ParseException: void <init>(java.lang.Throwable)>($r7);

        throw $r8;

     label23:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot sign up a user that has already signed up.");

        throw $r2;

     label24:
        $r9 = staticinvoke <com.parse.ParseUser: com.parse.ParseUser getCurrentUser()>();

     label25:
        if $r9 == null goto label30;

     label26:
        $r9 = staticinvoke <com.parse.ParseUser: com.parse.ParseUser getCurrentUser()>();

        $z0 = staticinvoke <com.parse.ParseAnonymousUtils: boolean isLinked(com.parse.ParseUser)>($r9);

     label27:
        if $z0 == 0 goto label30;

     label28:
        $r9 = staticinvoke <com.parse.ParseUser: com.parse.ParseUser getCurrentUser()>();

        $r4 = virtualinvoke r0.<com.parse.ParseUser: org.json.JSONObject toJSONObject(boolean,boolean)>(1, 1);

        virtualinvoke $r9.<com.parse.ParseUser: void mergeObject(org.json.JSONObject,boolean)>($r4, 0);

        $r9 = staticinvoke <com.parse.ParseUser: com.parse.ParseUser getCurrentUser()>();

        $r10 = $r9.<com.parse.ParseUser: java.util.HashSet dirtyKeys>;

        $r11 = r0.<com.parse.ParseUser: java.util.HashSet dirtyKeys>;

        virtualinvoke $r10.<java.util.HashSet: boolean addAll(java.util.Collection)>($r11);

        $r9 = staticinvoke <com.parse.ParseUser: com.parse.ParseUser getCurrentUser()>();

        $r9.<com.parse.ParseUser: boolean dirty> = 1;

        $r9 = staticinvoke <com.parse.ParseUser: com.parse.ParseUser getCurrentUser()>();

        $r1 = r0.<com.parse.ParseUser: java.lang.String password>;

        virtualinvoke $r9.<com.parse.ParseUser: void setPassword(java.lang.String)>($r1);

        $r9 = staticinvoke <com.parse.ParseUser: com.parse.ParseUser getCurrentUser()>();

        $r1 = virtualinvoke r0.<com.parse.ParseUser: java.lang.String getUsername()>();

        virtualinvoke $r9.<com.parse.ParseUser: void setUsername(java.lang.String)>($r1);

        $r9 = staticinvoke <com.parse.ParseUser: com.parse.ParseUser getCurrentUser()>();

        virtualinvoke $r9.<com.parse.ParseUser: void save()>();

        $r9 = staticinvoke <com.parse.ParseUser: com.parse.ParseUser getCurrentUser()>();

        $r4 = virtualinvoke $r9.<com.parse.ParseUser: org.json.JSONObject toJSONObject(boolean,boolean)>(1, 1);

        virtualinvoke r0.<com.parse.ParseUser: void handleSaveResult(java.lang.String,org.json.JSONObject)>("create", $r4);

        staticinvoke <com.parse.ParseUser: void saveCurrentUser(com.parse.ParseUser)>(r0);

     label29:
        virtualinvoke r0.<com.parse.ParseUser: void finishedRunning()>();

        return;

     label30:
        $r12 = specialinvoke r0.<com.parse.ParseUser: com.parse.l constructSignUpCommand()>();

     label31:
        if $r12 != null goto label32;

        virtualinvoke r0.<com.parse.ParseUser: void finishedRunning()>();

        return;

     label32:
        $r5 = virtualinvoke $r12.<com.parse.l: java.lang.Object c()>();

        $r4 = (org.json.JSONObject) $r5;

        $r1 = $r12.<com.parse.l: java.lang.String a>;

        virtualinvoke r0.<com.parse.ParseUser: void handleSaveResult(java.lang.String,org.json.JSONObject)>($r1, $r4);

        staticinvoke <com.parse.ParseUser: void saveCurrentUser(com.parse.ParseUser)>(r0);

        r0.<com.parse.ParseUser: boolean isNew> = 1;

     label33:
        virtualinvoke r0.<com.parse.ParseUser: void finishedRunning()>();

        return;

        catch java.lang.Throwable from label01 to label02 with label06;
        catch java.lang.Throwable from label03 to label04 with label06;
        catch java.lang.Throwable from label05 to label06 with label06;
        catch java.lang.Throwable from label07 to label08 with label06;
        catch java.lang.Throwable from label09 to label11 with label06;
        catch org.json.JSONException from label13 to label14 with label21;
        catch org.json.JSONException from label16 to label17 with label21;
        catch org.json.JSONException from label19 to label20 with label21;
        catch java.lang.Throwable from label12 to label14 with label06;
        catch java.lang.Throwable from label15 to label18 with label06;
        catch java.lang.Throwable from label19 to label20 with label06;
        catch java.lang.Throwable from label22 to label25 with label06;
        catch java.lang.Throwable from label26 to label27 with label06;
        catch java.lang.Throwable from label28 to label29 with label06;
        catch java.lang.Throwable from label30 to label31 with label06;
        catch java.lang.Throwable from label32 to label33 with label06;
    }

    public void signUpInBackground(com.parse.SignUpCallback)
    {
        com.parse.bd $r2;
        com.parse.ParseUser r0;
        com.parse.SignUpCallback $r1;

        r0 := @this: com.parse.ParseUser;

        $r1 := @parameter0: com.parse.SignUpCallback;

        virtualinvoke r0.<com.parse.ParseUser: void checkIfRunning(boolean)>(1);

        $r2 = new com.parse.bd;

        specialinvoke $r2.<com.parse.bd: void <init>(com.parse.ParseUser,com.parse.k)>(r0, $r1);

        staticinvoke <com.parse.a: int a(com.parse.a)>($r2);

        return;
    }

    org.json.JSONObject toJSONObject(boolean, boolean)
    {
        java.lang.RuntimeException $r5;
        com.parse.ParseUser r0;
        org.json.JSONException $r4, $r6;
        org.json.JSONObject $r1, $r3;
        int $i0;
        java.lang.String $r2;
        boolean $z0, $z1;

        r0 := @this: com.parse.ParseUser;

        $z0 := @parameter0: boolean;

        $z1 := @parameter1: boolean;

        $r1 = specialinvoke r0.<com.parse.ParseObject: org.json.JSONObject toJSONObject(boolean,boolean)>($z0, $z1);

        $r2 = r0.<com.parse.ParseUser: java.lang.String sessionToken>;

        if $r2 == null goto label2;

        $r2 = r0.<com.parse.ParseUser: java.lang.String sessionToken>;

     label1:
        virtualinvoke $r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("session_token", $r2);

     label2:
        $r3 = r0.<com.parse.ParseUser: org.json.JSONObject authData>;

        $i0 = virtualinvoke $r3.<org.json.JSONObject: int length()>();

        if $i0 <= 0 goto label7;

        $r3 = r0.<com.parse.ParseUser: org.json.JSONObject authData>;

     label3:
        virtualinvoke $r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("auth_data", $r3);

     label4:
        return $r1;

     label5:
        $r4 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>("could not encode value for key: sessionToken");

        throw $r5;

     label6:
        $r6 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>("could not attach key: auth_data");

        throw $r5;

     label7:
        return $r1;

        catch org.json.JSONException from label1 to label2 with label5;
        catch org.json.JSONException from label3 to label4 with label6;
    }

    boolean unlinkFrom(java.lang.String)
    {
        org.json.JSONException $r4;
        org.json.JSONObject $r2;
        java.lang.Object $r3;
        java.lang.String $r1;
        com.parse.ParseUser r0;
        boolean $z0;

        r0 := @this: com.parse.ParseUser;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r2 = r0.<com.parse.ParseUser: org.json.JSONObject authData>;

        $z0 = virtualinvoke $r2.<org.json.JSONObject: boolean has(java.lang.String)>($r1);

        if $z0 == 0 goto label6;

        $r2 = r0.<com.parse.ParseUser: org.json.JSONObject authData>;

        $r3 = <org.json.JSONObject: java.lang.Object NULL>;

     label2:
        virtualinvoke $r2.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>($r1, $r3);

     label3:
        r0.<com.parse.ParseUser: boolean dirty> = 1;

     label4:
        virtualinvoke r0.<com.parse.ParseUser: void save()>();

        return 1;

     label5:
        $r4 := @caughtexception;

        goto label4;

     label6:
        return 0;

        catch org.json.JSONException from label2 to label3 with label5;
    }

    void unlinkFromInBackground(java.lang.String)
    {
        java.lang.String $r1;
        com.parse.ParseUser r0;

        r0 := @this: com.parse.ParseUser;

        $r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<com.parse.ParseUser: void unlinkFromInBackground(java.lang.String,com.parse.SaveCallback)>($r1, null);

        return;
    }

    void unlinkFromInBackground(java.lang.String, com.parse.SaveCallback)
    {
        com.parse.SaveCallback $r2;
        com.parse.ParseUser r0;
        org.json.JSONException $r6;
        org.json.JSONObject $r3;
        com.parse.bh $r5;
        java.lang.Object $r4;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: com.parse.ParseUser;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: com.parse.SaveCallback;

        if $r1 == null goto label5;

        $r3 = r0.<com.parse.ParseUser: org.json.JSONObject authData>;

        $z0 = virtualinvoke $r3.<org.json.JSONObject: boolean has(java.lang.String)>($r1);

        if $z0 == 0 goto label5;

        $r3 = r0.<com.parse.ParseUser: org.json.JSONObject authData>;

        $r4 = <org.json.JSONObject: java.lang.Object NULL>;

     label1:
        virtualinvoke $r3.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>($r1, $r4);

     label2:
        r0.<com.parse.ParseUser: boolean dirty> = 1;

     label3:
        $r5 = new com.parse.bh;

        specialinvoke $r5.<com.parse.bh: void <init>(com.parse.ParseUser,java.lang.String,com.parse.SaveCallback)>(r0, $r1, null);

        virtualinvoke r0.<com.parse.ParseUser: void saveInBackground(com.parse.SaveCallback)>($r5);

        return;

     label4:
        $r6 := @caughtexception;

        goto label3;

     label5:
        return;

        catch org.json.JSONException from label1 to label2 with label4;
    }

    void validateDelete()
    {
        java.lang.IllegalArgumentException $r1;
        com.parse.ParseUser r0;
        boolean $z0;

        r0 := @this: com.parse.ParseUser;

        $z0 = virtualinvoke r0.<com.parse.ParseUser: boolean isAuthenticated()>();

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke r0.<com.parse.ParseUser: boolean isDirty()>();

        if $z0 == 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot delete a ParseUser that is not authenticated.");

        throw $r1;

     label1:
        return;
    }

    void validateSave()
    {
        java.lang.String $r1, $r3;
        java.lang.IllegalArgumentException $r2;
        com.parse.ParseUser r0;
        boolean $z0;

        r0 := @this: com.parse.ParseUser;

        $r1 = virtualinvoke r0.<com.parse.ParseUser: java.lang.String getObjectId()>();

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot save a ParseUser until it has been signed up. Call signUp first.");

        throw $r2;

     label1:
        $z0 = virtualinvoke r0.<com.parse.ParseUser: boolean isAuthenticated()>();

        if $z0 != 0 goto label2;

        $z0 = virtualinvoke r0.<com.parse.ParseUser: boolean isDirty()>();

        if $z0 == 0 goto label2;

        $r1 = virtualinvoke r0.<com.parse.ParseUser: java.lang.String getObjectId()>();

        r0 = staticinvoke <com.parse.ParseUser: com.parse.ParseUser getCurrentUser()>();

        $r3 = virtualinvoke r0.<com.parse.ParseUser: java.lang.String getObjectId()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot save a ParseUser that is not authenticated.");

        throw $r2;

     label2:
        return;
    }
}
