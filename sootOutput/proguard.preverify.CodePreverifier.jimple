public class proguard.preverify.CodePreverifier extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.visitor.MemberVisitor, proguard.classfile.attribute.visitor.AttributeVisitor
{
    private static final boolean DEBUG;
    private final proguard.optimize.evaluation.LivenessAnalyzer livenessAnalyzer;
    private final boolean microEdition;
    private final proguard.optimize.evaluation.PartialEvaluator partialEvaluator;

    public void <init>(boolean)
    {
        proguard.preverify.CodePreverifier r0;
        proguard.optimize.evaluation.PartialEvaluator $r1;
        proguard.optimize.evaluation.LivenessAnalyzer $r2;
        boolean $z0;

        r0 := @this: proguard.preverify.CodePreverifier;

        $z0 := @parameter0: boolean;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        $r1 = new proguard.optimize.evaluation.PartialEvaluator;

        specialinvoke $r1.<proguard.optimize.evaluation.PartialEvaluator: void <init>()>();

        r0.<proguard.preverify.CodePreverifier: proguard.optimize.evaluation.PartialEvaluator partialEvaluator> = $r1;

        $r2 = new proguard.optimize.evaluation.LivenessAnalyzer;

        $r1 = r0.<proguard.preverify.CodePreverifier: proguard.optimize.evaluation.PartialEvaluator partialEvaluator>;

        specialinvoke $r2.<proguard.optimize.evaluation.LivenessAnalyzer: void <init>(proguard.optimize.evaluation.PartialEvaluator)>($r1);

        r0.<proguard.preverify.CodePreverifier: proguard.optimize.evaluation.LivenessAnalyzer livenessAnalyzer> = $r2;

        r0.<proguard.preverify.CodePreverifier: boolean microEdition> = $z0;

        return;
    }

    private void compressStackMapFrames(proguard.classfile.attribute.preverification.VerificationType[], java.util.List)
    {
        proguard.classfile.attribute.preverification.FullFrame $r5;
        proguard.classfile.attribute.preverification.MoreZeroFrame $r12;
        proguard.classfile.attribute.preverification.VerificationType[] $r1, $r3, $r6;
        proguard.classfile.attribute.preverification.StackMapFrame $r7;
        byte $b5;
        proguard.classfile.attribute.preverification.SameOneFrame $r10;
        int $i0, $i1, $i2, $i3, $i4;
        proguard.classfile.attribute.preverification.SameZeroFrame $r9;
        proguard.classfile.attribute.preverification.LessZeroFrame $r11;
        boolean $z0;
        proguard.preverify.CodePreverifier r0;
        proguard.classfile.attribute.preverification.VerificationType $r8;
        java.util.List $r2;
        java.lang.Object $r4;

        r0 := @this: proguard.preverify.CodePreverifier;

        $r1 := @parameter0: proguard.classfile.attribute.preverification.VerificationType[];

        $r2 := @parameter1: java.util.List;

        $i2 = -1;

        $r3 = $r1;

        $i3 = lengthof $r1;

        $i1 = 0;

     label1:
        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i1 >= $i0 goto label6;

        $r4 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i1);

        $r5 = (proguard.classfile.attribute.preverification.FullFrame) $r4;

        $i0 = $r5.<proguard.classfile.attribute.preverification.FullFrame: int variablesCount>;

        $r1 = $r5.<proguard.classfile.attribute.preverification.FullFrame: proguard.classfile.attribute.preverification.VerificationType[] variables>;

        $i4 = $r5.<proguard.classfile.attribute.preverification.FullFrame: int stackCount>;

        $r6 = $r5.<proguard.classfile.attribute.preverification.FullFrame: proguard.classfile.attribute.preverification.VerificationType[] stack>;

        if $i0 != $i3 goto label4;

        $z0 = specialinvoke r0.<proguard.preverify.CodePreverifier: boolean equalVerificationTypes(proguard.classfile.attribute.preverification.VerificationType[],proguard.classfile.attribute.preverification.VerificationType[],int)>($r1, $r3, $i0);

        if $z0 == 0 goto label4;

        if $i4 != 0 goto label3;

        $r9 = new proguard.classfile.attribute.preverification.SameZeroFrame;

        $r7 = $r9;

        specialinvoke $r9.<proguard.classfile.attribute.preverification.SameZeroFrame: void <init>()>();

     label2:
        $i0 = $r5.<proguard.classfile.attribute.preverification.FullFrame: int u2offsetDelta>;

        $i2 = $i0 - $i2;

        $i2 = $i2 - 1;

        $r7.<proguard.classfile.attribute.preverification.StackMapFrame: int u2offsetDelta> = $i2;

        $i2 = $r5.<proguard.classfile.attribute.preverification.FullFrame: int variablesCount>;

        $r1 = $r5.<proguard.classfile.attribute.preverification.FullFrame: proguard.classfile.attribute.preverification.VerificationType[] variables>;

        interfaceinvoke $r2.<java.util.List: java.lang.Object set(int,java.lang.Object)>($i1, $r7);

        $i1 = $i1 + 1;

        $r3 = $r1;

        $i3 = $i2;

        $i2 = $i0;

        goto label1;

     label3:
        if $i4 != 1 goto label7;

        $r10 = new proguard.classfile.attribute.preverification.SameOneFrame;

        $r7 = $r10;

        $r8 = $r6[0];

        specialinvoke $r10.<proguard.classfile.attribute.preverification.SameOneFrame: void <init>(proguard.classfile.attribute.preverification.VerificationType)>($r8);

        goto label2;

     label4:
        if $i4 != 0 goto label7;

        $i4 = $i0 - $i3;

        if $i4 >= 0 goto label5;

        if $i4 <= -4 goto label5;

        $z0 = specialinvoke r0.<proguard.preverify.CodePreverifier: boolean equalVerificationTypes(proguard.classfile.attribute.preverification.VerificationType[],proguard.classfile.attribute.preverification.VerificationType[],int)>($r1, $r3, $i0);

        if $z0 == 0 goto label5;

        $r11 = new proguard.classfile.attribute.preverification.LessZeroFrame;

        $r7 = $r11;

        $i3 = neg $i4;

        $b5 = (byte) $i3;

        specialinvoke $r11.<proguard.classfile.attribute.preverification.LessZeroFrame: void <init>(byte)>($b5);

        goto label2;

     label5:
        if $i4 <= 0 goto label7;

        if $i4 >= 4 goto label7;

        $z0 = specialinvoke r0.<proguard.preverify.CodePreverifier: boolean equalVerificationTypes(proguard.classfile.attribute.preverification.VerificationType[],proguard.classfile.attribute.preverification.VerificationType[],int)>($r1, $r3, $i3);

        if $z0 == 0 goto label7;

        $r3 = newarray (proguard.classfile.attribute.preverification.VerificationType)[$i4];

        $i3 = $i0 - $i4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i3, $r3, 0, $i4);

        $r12 = new proguard.classfile.attribute.preverification.MoreZeroFrame;

        specialinvoke $r12.<proguard.classfile.attribute.preverification.MoreZeroFrame: void <init>(proguard.classfile.attribute.preverification.VerificationType[])>($r3);

        $r7 = $r12;

        goto label2;

     label6:
        return;

     label7:
        $r7 = $r5;

        goto label2;
    }

    private proguard.classfile.attribute.preverification.VerificationType correspondingVerificationType(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod, proguard.classfile.attribute.CodeAttribute, int, boolean, proguard.evaluation.value.Value, proguard.evaluation.value.Value)
    {
        byte[] $r16;
        proguard.classfile.ProgramClass $r1;
        proguard.optimize.evaluation.PartialEvaluator $r17;
        byte $b2;
        java.lang.StringBuffer $r7, $r22;
        proguard.classfile.ProgramMethod $r2;
        proguard.evaluation.value.InstructionOffsetValue $r15;
        int $i0, $i1, $i3;
        java.lang.String $r8;
        proguard.classfile.attribute.preverification.DoubleType $r12;
        proguard.evaluation.value.Value $r4, $r5;
        boolean $z0, $z1;
        proguard.preverify.CodePreverifier r0;
        proguard.classfile.attribute.preverification.FloatType $r11;
        proguard.evaluation.TracedStack $r18;
        proguard.classfile.attribute.preverification.NullType $r14;
        java.lang.IllegalArgumentException $r23;
        proguard.evaluation.value.ReferenceValue $r13;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.attribute.preverification.IntegerType $r9;
        proguard.classfile.attribute.preverification.UninitializedType $r20;
        proguard.classfile.attribute.preverification.ObjectType $r21;
        proguard.classfile.attribute.preverification.LongType $r10;
        proguard.classfile.attribute.preverification.TopType $r6;
        proguard.classfile.attribute.preverification.UninitializedThisType $r19;

        r0 := @this: proguard.preverify.CodePreverifier;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.ProgramMethod;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $z0 := @parameter4: boolean;

        $r4 := @parameter5: proguard.evaluation.value.Value;

        $r5 := @parameter6: proguard.evaluation.value.Value;

        if $r4 != null goto label01;

        $r6 = staticinvoke <proguard.classfile.attribute.preverification.VerificationTypeFactory: proguard.classfile.attribute.preverification.TopType createTopType()>();

        return $r6;

     label01:
        $i1 = virtualinvoke $r4.<proguard.evaluation.value.Value: int computationalType()>();

        lookupswitch($i1)
        {
            case 1: goto label03;
            case 2: goto label04;
            case 3: goto label05;
            case 4: goto label06;
            case 5: goto label08;
            case 6: goto label03;
            case 7: goto label07;
            default: goto label02;
        };

     label02:
        $r23 = new java.lang.IllegalArgumentException;

        $r22 = new java.lang.StringBuffer;

        specialinvoke $r22.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unknown computational type [");

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r23;

     label03:
        $r9 = staticinvoke <proguard.classfile.attribute.preverification.VerificationTypeFactory: proguard.classfile.attribute.preverification.IntegerType createIntegerType()>();

        return $r9;

     label04:
        $r10 = staticinvoke <proguard.classfile.attribute.preverification.VerificationTypeFactory: proguard.classfile.attribute.preverification.LongType createLongType()>();

        return $r10;

     label05:
        $r11 = staticinvoke <proguard.classfile.attribute.preverification.VerificationTypeFactory: proguard.classfile.attribute.preverification.FloatType createFloatType()>();

        return $r11;

     label06:
        $r12 = staticinvoke <proguard.classfile.attribute.preverification.VerificationTypeFactory: proguard.classfile.attribute.preverification.DoubleType createDoubleType()>();

        return $r12;

     label07:
        $r6 = staticinvoke <proguard.classfile.attribute.preverification.VerificationTypeFactory: proguard.classfile.attribute.preverification.TopType createTopType()>();

        return $r6;

     label08:
        $r13 = virtualinvoke $r4.<proguard.evaluation.value.Value: proguard.evaluation.value.ReferenceValue referenceValue()>();

        $i1 = virtualinvoke $r13.<proguard.evaluation.value.ReferenceValue: int isNull()>();

        if $i1 != 1 goto label09;

        $r14 = staticinvoke <proguard.classfile.attribute.preverification.VerificationTypeFactory: proguard.classfile.attribute.preverification.NullType createNullType()>();

        return $r14;

     label09:
        if $i0 == -1 goto label14;

        $r15 = virtualinvoke $r5.<proguard.evaluation.value.Value: proguard.evaluation.value.InstructionOffsetValue instructionOffsetValue()>();

        $i1 = virtualinvoke $r15.<proguard.evaluation.value.InstructionOffsetValue: int instructionOffsetCount()>();

        if $i1 != 1 goto label14;

        $i1 = virtualinvoke $r15.<proguard.evaluation.value.InstructionOffsetValue: int instructionOffset(int)>(0);

     label10:
        if $i1 == -1 goto label11;

        $r16 = $r3.<proguard.classfile.attribute.CodeAttribute: byte[] code>;

        $b2 = $r16[$i1];

        $i3 = (int) $b2;

        $z1 = specialinvoke r0.<proguard.preverify.CodePreverifier: boolean isDupOrSwap(int)>($i3);

        if $z1 == 0 goto label11;

        $r17 = r0.<proguard.preverify.CodePreverifier: proguard.optimize.evaluation.PartialEvaluator partialEvaluator>;

        $r18 = virtualinvoke $r17.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedStack getStackBefore(int)>($i1);

        $r4 = virtualinvoke $r18.<proguard.evaluation.TracedStack: proguard.evaluation.value.Value getTopProducerValue(int)>(0);

        $r15 = virtualinvoke $r4.<proguard.evaluation.value.Value: proguard.evaluation.value.InstructionOffsetValue instructionOffsetValue()>();

        $i1 = virtualinvoke $r15.<proguard.evaluation.value.InstructionOffsetValue: int instructionOffset(int)>(0);

        goto label10;

     label11:
        $r17 = r0.<proguard.preverify.CodePreverifier: proguard.optimize.evaluation.PartialEvaluator partialEvaluator>;

        $z1 = virtualinvoke $r17.<proguard.optimize.evaluation.PartialEvaluator: boolean isInitializer()>();

        if $z1 == 0 goto label13;

        $r17 = r0.<proguard.preverify.CodePreverifier: proguard.optimize.evaluation.PartialEvaluator partialEvaluator>;

        $i3 = virtualinvoke $r17.<proguard.optimize.evaluation.PartialEvaluator: int superInitializationOffset()>();

        if $i0 > $i3 goto label13;

        if $z0 != 0 goto label12;

        if $i1 <= -1 goto label14;

        $r16 = $r3.<proguard.classfile.attribute.CodeAttribute: byte[] code>;

        $b2 = $r16[$i1];

        $i3 = (int) $b2;

        if $i3 != 42 goto label13;

     label12:
        $r19 = staticinvoke <proguard.classfile.attribute.preverification.VerificationTypeFactory: proguard.classfile.attribute.preverification.UninitializedThisType createUninitializedThisType()>();

        return $r19;

     label13:
        if $i1 <= -1 goto label14;

        $r17 = r0.<proguard.preverify.CodePreverifier: proguard.optimize.evaluation.PartialEvaluator partialEvaluator>;

        $i3 = virtualinvoke $r17.<proguard.optimize.evaluation.PartialEvaluator: int initializationOffset(int)>($i1);

        if $i0 > $i3 goto label14;

        $r20 = staticinvoke <proguard.classfile.attribute.preverification.VerificationTypeFactory: proguard.classfile.attribute.preverification.UninitializedType createUninitializedType(int)>($i1);

        return $r20;

     label14:
        $i0 = specialinvoke r0.<proguard.preverify.CodePreverifier: int createClassConstant(proguard.classfile.ProgramClass,proguard.evaluation.value.ReferenceValue)>($r1, $r13);

        $r21 = staticinvoke <proguard.classfile.attribute.preverification.VerificationTypeFactory: proguard.classfile.attribute.preverification.ObjectType createObjectType(int)>($i0);

        return $r21;
    }

    private proguard.classfile.attribute.preverification.VerificationType[] correspondingVerificationTypes(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod, proguard.classfile.attribute.CodeAttribute, int, proguard.evaluation.TracedStack)
    {
        proguard.preverify.CodePreverifier r0;
        proguard.evaluation.TracedStack $r4;
        proguard.classfile.attribute.preverification.VerificationType $r8;
        proguard.classfile.ProgramClass $r1;
        proguard.classfile.attribute.preverification.VerificationType[] $r5;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.ProgramMethod $r2;
        int $i0, $i1, $i2, $i3;
        proguard.evaluation.value.Value $r6, $r7;
        boolean $z0;

        r0 := @this: proguard.preverify.CodePreverifier;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.ProgramMethod;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.evaluation.TracedStack;

        $i2 = virtualinvoke $r4.<proguard.evaluation.TracedStack: int size()>();

        $i1 = 0;

        $i3 = 0;

     label1:
        if $i3 >= $i2 goto label3;

        $r6 = virtualinvoke $r4.<proguard.evaluation.TracedStack: proguard.evaluation.value.Value getTop(int)>($i3);

        $i1 = $i1 + 1;

        $z0 = virtualinvoke $r6.<proguard.evaluation.value.Value: boolean isCategory2()>();

        if $z0 == 0 goto label2;

        $i3 = $i3 + 1;

     label2:
        $i3 = $i3 + 1;

        goto label1;

     label3:
        $r5 = newarray (proguard.classfile.attribute.preverification.VerificationType)[$i1];

        $i3 = 0;

     label4:
        if $i3 >= $i2 goto label6;

        $r6 = virtualinvoke $r4.<proguard.evaluation.TracedStack: proguard.evaluation.value.Value getTop(int)>($i3);

        $r7 = virtualinvoke $r4.<proguard.evaluation.TracedStack: proguard.evaluation.value.Value getTopProducerValue(int)>($i3);

        $i1 = $i1 + -1;

        $r8 = specialinvoke r0.<proguard.preverify.CodePreverifier: proguard.classfile.attribute.preverification.VerificationType correspondingVerificationType(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod,proguard.classfile.attribute.CodeAttribute,int,boolean,proguard.evaluation.value.Value,proguard.evaluation.value.Value)>($r1, $r2, $r3, $i0, 0, $r6, $r7);

        $r5[$i1] = $r8;

        $z0 = virtualinvoke $r6.<proguard.evaluation.value.Value: boolean isCategory2()>();

        if $z0 == 0 goto label5;

        $i3 = $i3 + 1;

     label5:
        $i3 = $i3 + 1;

        goto label4;

     label6:
        return $r5;
    }

    private proguard.classfile.attribute.preverification.VerificationType[] correspondingVerificationTypes(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod, proguard.classfile.attribute.CodeAttribute, int, proguard.evaluation.TracedVariables)
    {
        proguard.optimize.evaluation.LivenessAnalyzer $r7;
        proguard.classfile.ProgramClass $r1;
        proguard.classfile.attribute.preverification.VerificationType[] $r5;
        proguard.classfile.ProgramMethod $r2;
        int $i0, $i1, $i2, $i3, $i4;
        proguard.evaluation.value.Value $r6, $r8;
        boolean $z0;
        proguard.preverify.CodePreverifier r0;
        proguard.evaluation.TracedVariables $r4;
        proguard.classfile.attribute.preverification.VerificationType $r9;
        proguard.classfile.attribute.CodeAttribute $r3;

        r0 := @this: proguard.preverify.CodePreverifier;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.ProgramMethod;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.evaluation.TracedVariables;

        $i1 = virtualinvoke $r4.<proguard.evaluation.TracedVariables: int size()>();

        $i2 = 0;

        $i3 = 0;

        $i4 = 0;

     label01:
        if $i4 >= $i1 goto label04;

        $r6 = virtualinvoke $r4.<proguard.evaluation.TracedVariables: proguard.evaluation.value.Value getValue(int)>($i4);

        $i2 = $i2 + 1;

        if $r6 == null goto label03;

        if $i0 == -1 goto label02;

        $r7 = r0.<proguard.preverify.CodePreverifier: proguard.optimize.evaluation.LivenessAnalyzer livenessAnalyzer>;

        $z0 = virtualinvoke $r7.<proguard.optimize.evaluation.LivenessAnalyzer: boolean isAliveBefore(int,int)>($i0, $i4);

        if $z0 == 0 goto label03;

     label02:
        $z0 = virtualinvoke $r6.<proguard.evaluation.value.Value: boolean isCategory2()>();

        if $z0 == 0 goto label12;

        $i4 = $i4 + 1;

        $i3 = $i2;

     label03:
        $i4 = $i4 + 1;

        goto label01;

     label04:
        $r5 = newarray (proguard.classfile.attribute.preverification.VerificationType)[$i3];

        $i4 = 0;

        $i1 = 0;

     label05:
        if $i1 >= $i3 goto label11;

        $r6 = virtualinvoke $r4.<proguard.evaluation.TracedVariables: proguard.evaluation.value.Value getValue(int)>($i4);

        $r8 = virtualinvoke $r4.<proguard.evaluation.TracedVariables: proguard.evaluation.value.Value getProducerValue(int)>($i4);

        if $r6 == null goto label10;

        if $i0 == -1 goto label06;

        $r7 = r0.<proguard.preverify.CodePreverifier: proguard.optimize.evaluation.LivenessAnalyzer livenessAnalyzer>;

        $z0 = virtualinvoke $r7.<proguard.optimize.evaluation.LivenessAnalyzer: boolean isAliveBefore(int,int)>($i0, $i4);

        if $z0 == 0 goto label10;

     label06:
        if $i4 != 0 goto label09;

        $z0 = 1;

     label07:
        $r9 = specialinvoke r0.<proguard.preverify.CodePreverifier: proguard.classfile.attribute.preverification.VerificationType correspondingVerificationType(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod,proguard.classfile.attribute.CodeAttribute,int,boolean,proguard.evaluation.value.Value,proguard.evaluation.value.Value)>($r1, $r2, $r3, $i0, $z0, $r6, $r8);

        $z0 = virtualinvoke $r6.<proguard.evaluation.value.Value: boolean isCategory2()>();

        if $z0 == 0 goto label08;

        $i4 = $i4 + 1;

     label08:
        $r5[$i1] = $r9;

        $i4 = $i4 + 1;

        $i1 = $i1 + 1;

        goto label05;

     label09:
        $z0 = 0;

        goto label07;

     label10:
        $r9 = staticinvoke <proguard.classfile.attribute.preverification.VerificationTypeFactory: proguard.classfile.attribute.preverification.TopType createTopType()>();

        goto label08;

     label11:
        return $r5;

     label12:
        $i3 = $i2;

        goto label03;
    }

    private int createClassConstant(proguard.classfile.ProgramClass, proguard.evaluation.value.ReferenceValue)
    {
        proguard.preverify.CodePreverifier r0;
        proguard.evaluation.value.ReferenceValue $r2;
        proguard.classfile.Clazz $r5;
        int $i0;
        java.lang.String $r4;
        proguard.classfile.editor.ConstantPoolEditor $r3;
        proguard.classfile.ProgramClass $r1;

        r0 := @this: proguard.preverify.CodePreverifier;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.evaluation.value.ReferenceValue;

        $r3 = new proguard.classfile.editor.ConstantPoolEditor;

        specialinvoke $r3.<proguard.classfile.editor.ConstantPoolEditor: void <init>(proguard.classfile.ProgramClass)>($r1);

        $r4 = virtualinvoke $r2.<proguard.evaluation.value.ReferenceValue: java.lang.String getType()>();

        $r5 = virtualinvoke $r2.<proguard.evaluation.value.ReferenceValue: proguard.classfile.Clazz getReferencedClass()>();

        $i0 = virtualinvoke $r3.<proguard.classfile.editor.ConstantPoolEditor: int addClassConstant(java.lang.String,proguard.classfile.Clazz)>($r4, $r5);

        return $i0;
    }

    private boolean equalVerificationTypes(proguard.classfile.attribute.preverification.VerificationType[], proguard.classfile.attribute.preverification.VerificationType[], int)
    {
        proguard.preverify.CodePreverifier r0;
        proguard.classfile.attribute.preverification.VerificationType $r3, $r4;
        proguard.classfile.attribute.preverification.VerificationType[] $r1, $r2;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: proguard.preverify.CodePreverifier;

        $r1 := @parameter0: proguard.classfile.attribute.preverification.VerificationType[];

        $r2 := @parameter1: proguard.classfile.attribute.preverification.VerificationType[];

        $i0 := @parameter2: int;

        if $i0 <= 0 goto label2;

        $i1 = lengthof $r1;

        if $i1 < $i0 goto label1;

        $i1 = lengthof $r2;

        if $i1 >= $i0 goto label2;

     label1:
        return 0;

     label2:
        $i1 = 0;

     label3:
        if $i1 >= $i0 goto label5;

        $r4 = $r1[$i1];

        $r3 = $r2[$i1];

        $z0 = virtualinvoke $r4.<proguard.classfile.attribute.preverification.VerificationType: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label4;

        return 0;

     label4:
        $i1 = $i1 + 1;

        goto label3;

     label5:
        return 1;
    }

    private boolean isDupOrSwap(int)
    {
        int $i0;
        proguard.preverify.CodePreverifier r0;

        r0 := @this: proguard.preverify.CodePreverifier;

        $i0 := @parameter0: int;

        if $i0 < 89 goto label1;

        if $i0 > 95 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void visitAnyAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.Attribute)
    {
        proguard.preverify.CodePreverifier r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.Attribute $r2;

        r0 := @this: proguard.preverify.CodePreverifier;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.Attribute;

        return;
    }

    public void visitCodeAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute)
    {
        java.io.PrintStream $r5;
        proguard.preverify.CodePreverifier r0;
        java.lang.RuntimeException $r4;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        java.lang.StringBuffer $r6;
        proguard.classfile.Method $r2;
        java.lang.Class $r8;
        java.lang.String $r7;

        r0 := @this: proguard.preverify.CodePreverifier;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

     label1:
        virtualinvoke r0.<proguard.preverify.CodePreverifier: void visitCodeAttribute0(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute)>($r1, $r2, $r3);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>("Unexpected error while preverifying:");

        $r5 = <java.lang.System: java.io.PrintStream err>;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Class       = [");

        $r7 = interfaceinvoke $r1.<proguard.classfile.Clazz: java.lang.String getName()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r7);

        $r5 = <java.lang.System: java.io.PrintStream err>;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Method      = [");

        $r7 = interfaceinvoke $r2.<proguard.classfile.Method: java.lang.String getName(proguard.classfile.Clazz)>($r1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r7 = interfaceinvoke $r2.<proguard.classfile.Method: java.lang.String getDescriptor(proguard.classfile.Clazz)>($r1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r7);

        $r5 = <java.lang.System: java.io.PrintStream err>;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Exception   = [");

        $r8 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] (");

        $r7 = virtualinvoke $r4.<java.lang.RuntimeException: java.lang.String getMessage()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r7);

        throw $r4;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    public void visitCodeAttribute0(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute)
    {
        proguard.classfile.editor.AttributesEditor $r20;
        proguard.optimize.evaluation.LivenessAnalyzer $r7;
        proguard.classfile.attribute.preverification.StackMapAttribute $r21;
        proguard.classfile.attribute.preverification.FullFrame $r19;
        proguard.classfile.attribute.preverification.StackMapFrame[] $r17;
        proguard.classfile.ProgramClass $r5;
        java.util.ArrayList $r4, $r18;
        proguard.optimize.evaluation.PartialEvaluator $r8;
        proguard.classfile.attribute.preverification.VerificationType[] $r10, $r12;
        proguard.classfile.attribute.preverification.StackMapTableAttribute $r23;
        proguard.classfile.Clazz $r1;
        proguard.classfile.ProgramMethod $r6;
        int $i0, $i1;
        java.lang.String $r13;
        proguard.classfile.editor.ConstantPoolEditor $r22;
        boolean $z0;
        proguard.preverify.CodePreverifier r0;
        proguard.evaluation.TracedVariables $r9;
        proguard.evaluation.TracedStack $r11;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.preverification.UninitializedThisType $r14;
        proguard.classfile.attribute.preverification.FullFrame[] $r15;
        proguard.classfile.attribute.Attribute $r16;

        r0 := @this: proguard.preverify.CodePreverifier;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r5 = (proguard.classfile.ProgramClass) $r1;

        $r6 = (proguard.classfile.ProgramMethod) $r2;

        $r7 = r0.<proguard.preverify.CodePreverifier: proguard.optimize.evaluation.LivenessAnalyzer livenessAnalyzer>;

        virtualinvoke $r7.<proguard.optimize.evaluation.LivenessAnalyzer: void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute)>($r1, $r2, $r3);

        $r18 = new java.util.ArrayList;

        $r4 = $r18;

        specialinvoke $r18.<java.util.ArrayList: void <init>()>();

        $i0 = 0;

     label01:
        $i1 = $r3.<proguard.classfile.attribute.CodeAttribute: int u4codeLength>;

        if $i0 >= $i1 goto label03;

        $r8 = r0.<proguard.preverify.CodePreverifier: proguard.optimize.evaluation.PartialEvaluator partialEvaluator>;

        $z0 = virtualinvoke $r8.<proguard.optimize.evaluation.PartialEvaluator: boolean isTraced(int)>($i0);

        if $z0 == 0 goto label02;

        $r8 = r0.<proguard.preverify.CodePreverifier: proguard.optimize.evaluation.PartialEvaluator partialEvaluator>;

        $z0 = virtualinvoke $r8.<proguard.optimize.evaluation.PartialEvaluator: boolean isBranchOrExceptionTarget(int)>($i0);

        if $z0 == 0 goto label02;

        $r8 = r0.<proguard.preverify.CodePreverifier: proguard.optimize.evaluation.PartialEvaluator partialEvaluator>;

        $r9 = virtualinvoke $r8.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedVariables getVariablesBefore(int)>($i0);

        $r10 = specialinvoke r0.<proguard.preverify.CodePreverifier: proguard.classfile.attribute.preverification.VerificationType[] correspondingVerificationTypes(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod,proguard.classfile.attribute.CodeAttribute,int,proguard.evaluation.TracedVariables)>($r5, $r6, $r3, $i0, $r9);

        $r8 = r0.<proguard.preverify.CodePreverifier: proguard.optimize.evaluation.PartialEvaluator partialEvaluator>;

        $r11 = virtualinvoke $r8.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedStack getStackBefore(int)>($i0);

        $r12 = specialinvoke r0.<proguard.preverify.CodePreverifier: proguard.classfile.attribute.preverification.VerificationType[] correspondingVerificationTypes(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod,proguard.classfile.attribute.CodeAttribute,int,proguard.evaluation.TracedStack)>($r5, $r6, $r3, $i0, $r11);

        $r19 = new proguard.classfile.attribute.preverification.FullFrame;

        specialinvoke $r19.<proguard.classfile.attribute.preverification.FullFrame: void <init>(int,proguard.classfile.attribute.preverification.VerificationType[],proguard.classfile.attribute.preverification.VerificationType[])>($i0, $r10, $r12);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r19);

     label02:
        $i0 = $i0 + 1;

        goto label01;

     label03:
        $z0 = r0.<proguard.preverify.CodePreverifier: boolean microEdition>;

        if $z0 != 0 goto label05;

        $z0 = interfaceinvoke $r4.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label05;

        $r8 = r0.<proguard.preverify.CodePreverifier: proguard.optimize.evaluation.PartialEvaluator partialEvaluator>;

        $r9 = virtualinvoke $r8.<proguard.optimize.evaluation.PartialEvaluator: proguard.evaluation.TracedVariables getVariablesBefore(int)>(0);

        $r10 = specialinvoke r0.<proguard.preverify.CodePreverifier: proguard.classfile.attribute.preverification.VerificationType[] correspondingVerificationTypes(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod,proguard.classfile.attribute.CodeAttribute,int,proguard.evaluation.TracedVariables)>($r5, $r6, $r3, -1, $r9);

        $r13 = interfaceinvoke $r2.<proguard.classfile.Method: java.lang.String getName(proguard.classfile.Clazz)>($r5);

        $z0 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>("<init>");

        if $z0 == 0 goto label04;

        $r14 = staticinvoke <proguard.classfile.attribute.preverification.VerificationTypeFactory: proguard.classfile.attribute.preverification.UninitializedThisType createUninitializedThisType()>();

        $r10[0] = $r14;

     label04:
        specialinvoke r0.<proguard.preverify.CodePreverifier: void compressStackMapFrames(proguard.classfile.attribute.preverification.VerificationType[],java.util.List)>($r10, $r4);

     label05:
        $z0 = r0.<proguard.preverify.CodePreverifier: boolean microEdition>;

        if $z0 == 0 goto label07;

        $r13 = "StackMap";

     label06:
        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        if $i0 != 0 goto label08;

        $r20 = new proguard.classfile.editor.AttributesEditor;

        specialinvoke $r20.<proguard.classfile.editor.AttributesEditor: void <init>(proguard.classfile.ProgramClass,proguard.classfile.ProgramMember,proguard.classfile.attribute.CodeAttribute,boolean)>($r5, $r6, $r3, 1);

        virtualinvoke $r20.<proguard.classfile.editor.AttributesEditor: void deleteAttribute(java.lang.String)>($r13);

        return;

     label07:
        $r13 = "StackMapTable";

        goto label06;

     label08:
        $z0 = r0.<proguard.preverify.CodePreverifier: boolean microEdition>;

        if $z0 == 0 goto label10;

        $r15 = newarray (proguard.classfile.attribute.preverification.FullFrame)[$i0];

        interfaceinvoke $r4.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r15);

        $r21 = new proguard.classfile.attribute.preverification.StackMapAttribute;

        specialinvoke $r21.<proguard.classfile.attribute.preverification.StackMapAttribute: void <init>(proguard.classfile.attribute.preverification.FullFrame[])>($r15);

        $r16 = $r21;

     label09:
        $r22 = new proguard.classfile.editor.ConstantPoolEditor;

        specialinvoke $r22.<proguard.classfile.editor.ConstantPoolEditor: void <init>(proguard.classfile.ProgramClass)>($r5);

        $i0 = virtualinvoke $r22.<proguard.classfile.editor.ConstantPoolEditor: int addUtf8Constant(java.lang.String)>($r13);

        $r16.<proguard.classfile.attribute.Attribute: int u2attributeNameIndex> = $i0;

        $r20 = new proguard.classfile.editor.AttributesEditor;

        specialinvoke $r20.<proguard.classfile.editor.AttributesEditor: void <init>(proguard.classfile.ProgramClass,proguard.classfile.ProgramMember,proguard.classfile.attribute.CodeAttribute,boolean)>($r5, $r6, $r3, 1);

        virtualinvoke $r20.<proguard.classfile.editor.AttributesEditor: void addAttribute(proguard.classfile.attribute.Attribute)>($r16);

        return;

     label10:
        $r17 = newarray (proguard.classfile.attribute.preverification.StackMapFrame)[$i0];

        interfaceinvoke $r4.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r17);

        $r23 = new proguard.classfile.attribute.preverification.StackMapTableAttribute;

        specialinvoke $r23.<proguard.classfile.attribute.preverification.StackMapTableAttribute: void <init>(proguard.classfile.attribute.preverification.StackMapFrame[])>($r17);

        $r16 = $r23;

        goto label09;
    }
}
