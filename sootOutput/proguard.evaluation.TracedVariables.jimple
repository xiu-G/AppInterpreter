public class proguard.evaluation.TracedVariables extends proguard.evaluation.Variables
{
    public static final int NONE;
    private proguard.evaluation.value.Value producerValue;
    private proguard.evaluation.Variables producerVariables;

    public void <init>(int)
    {
        int $i0;
        proguard.evaluation.TracedVariables r0;
        proguard.evaluation.Variables $r1;

        r0 := @this: proguard.evaluation.TracedVariables;

        $i0 := @parameter0: int;

        specialinvoke r0.<proguard.evaluation.Variables: void <init>(int)>($i0);

        $r1 = new proguard.evaluation.Variables;

        specialinvoke $r1.<proguard.evaluation.Variables: void <init>(int)>($i0);

        r0.<proguard.evaluation.TracedVariables: proguard.evaluation.Variables producerVariables> = $r1;

        return;
    }

    public void <init>(proguard.evaluation.TracedVariables)
    {
        proguard.evaluation.TracedVariables r0, $r1;
        proguard.evaluation.Variables $r2, $r3;

        r0 := @this: proguard.evaluation.TracedVariables;

        $r1 := @parameter0: proguard.evaluation.TracedVariables;

        specialinvoke r0.<proguard.evaluation.Variables: void <init>(proguard.evaluation.Variables)>($r1);

        $r2 = new proguard.evaluation.Variables;

        $r3 = $r1.<proguard.evaluation.TracedVariables: proguard.evaluation.Variables producerVariables>;

        specialinvoke $r2.<proguard.evaluation.Variables: void <init>(proguard.evaluation.Variables)>($r3);

        r0.<proguard.evaluation.TracedVariables: proguard.evaluation.Variables producerVariables> = $r2;

        return;
    }

    public boolean equals(java.lang.Object)
    {
        proguard.evaluation.TracedVariables r0, $r4;
        proguard.evaluation.Variables $r5, $r6;
        java.lang.Object $r1;
        java.lang.Class $r2, $r3;
        boolean $z0;

        r0 := @this: proguard.evaluation.TracedVariables;

        $r1 := @parameter0: java.lang.Object;

        if $r1 == null goto label1;

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 == $r3 goto label2;

     label1:
        return 0;

     label2:
        $r4 = (proguard.evaluation.TracedVariables) $r1;

        $z0 = specialinvoke r0.<proguard.evaluation.Variables: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label3;

        $r5 = r0.<proguard.evaluation.TracedVariables: proguard.evaluation.Variables producerVariables>;

        $r6 = $r4.<proguard.evaluation.TracedVariables: proguard.evaluation.Variables producerVariables>;

        $z0 = virtualinvoke $r5.<proguard.evaluation.Variables: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    public boolean generalize(proguard.evaluation.TracedVariables, boolean)
    {
        proguard.evaluation.TracedVariables r0, $r1;
        proguard.evaluation.Variables $r2, $r3;
        proguard.evaluation.value.Value[] $r4;
        int $i0, $i1;
        proguard.evaluation.value.Value $r5;
        boolean $z0, $z1, $z2;

        r0 := @this: proguard.evaluation.TracedVariables;

        $r1 := @parameter0: proguard.evaluation.TracedVariables;

        $z0 := @parameter1: boolean;

        $z1 = specialinvoke r0.<proguard.evaluation.Variables: boolean generalize(proguard.evaluation.Variables,boolean)>($r1, $z0);

        $r2 = r0.<proguard.evaluation.TracedVariables: proguard.evaluation.Variables producerVariables>;

        $r3 = $r1.<proguard.evaluation.TracedVariables: proguard.evaluation.Variables producerVariables>;

        $z2 = virtualinvoke $r2.<proguard.evaluation.Variables: boolean generalize(proguard.evaluation.Variables,boolean)>($r3, $z0);

        if $z1 == 0 goto label3;

        $i0 = 0;

     label1:
        $i1 = r0.<proguard.evaluation.TracedVariables: int size>;

        if $i0 >= $i1 goto label3;

        $r4 = r0.<proguard.evaluation.TracedVariables: proguard.evaluation.value.Value[] values>;

        $r5 = $r4[$i0];

        if $r5 != null goto label2;

        $r2 = r0.<proguard.evaluation.TracedVariables: proguard.evaluation.Variables producerVariables>;

        $r4 = $r2.<proguard.evaluation.Variables: proguard.evaluation.value.Value[] values>;

        $r4[$i0] = null;

        if $z0 == 0 goto label2;

        $r2 = $r1.<proguard.evaluation.TracedVariables: proguard.evaluation.Variables producerVariables>;

        $r4 = $r2.<proguard.evaluation.Variables: proguard.evaluation.value.Value[] values>;

        $r4[$i0] = null;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        if $z1 != 0 goto label4;

        if $z2 == 0 goto label5;

     label4:
        return 1;

     label5:
        return 0;
    }

    public proguard.evaluation.value.Value getProducerValue(int)
    {
        proguard.evaluation.TracedVariables r0;
        proguard.evaluation.Variables $r2;
        int $i0;
        proguard.evaluation.value.Value $r1;

        r0 := @this: proguard.evaluation.TracedVariables;

        $i0 := @parameter0: int;

        $r2 = r0.<proguard.evaluation.TracedVariables: proguard.evaluation.Variables producerVariables>;

        $r1 = virtualinvoke $r2.<proguard.evaluation.Variables: proguard.evaluation.value.Value getValue(int)>($i0);

        return $r1;
    }

    public int hashCode()
    {
        proguard.evaluation.TracedVariables r0;
        proguard.evaluation.Variables $r1;
        int $i0, $i1;

        r0 := @this: proguard.evaluation.TracedVariables;

        $i0 = specialinvoke r0.<proguard.evaluation.Variables: int hashCode()>();

        $r1 = r0.<proguard.evaluation.TracedVariables: proguard.evaluation.Variables producerVariables>;

        $i1 = virtualinvoke $r1.<proguard.evaluation.Variables: int hashCode()>();

        $i0 = $i0 ^ $i1;

        return $i0;
    }

    public void initialize(proguard.evaluation.TracedVariables)
    {
        proguard.evaluation.TracedVariables r0, $r1;
        proguard.evaluation.Variables $r2, $r3;

        r0 := @this: proguard.evaluation.TracedVariables;

        $r1 := @parameter0: proguard.evaluation.TracedVariables;

        specialinvoke r0.<proguard.evaluation.Variables: void initialize(proguard.evaluation.Variables)>($r1);

        $r2 = r0.<proguard.evaluation.TracedVariables: proguard.evaluation.Variables producerVariables>;

        $r3 = $r1.<proguard.evaluation.TracedVariables: proguard.evaluation.Variables producerVariables>;

        virtualinvoke $r2.<proguard.evaluation.Variables: void initialize(proguard.evaluation.Variables)>($r3);

        return;
    }

    public void reset(int)
    {
        int $i0;
        proguard.evaluation.TracedVariables r0;
        proguard.evaluation.Variables $r1;

        r0 := @this: proguard.evaluation.TracedVariables;

        $i0 := @parameter0: int;

        specialinvoke r0.<proguard.evaluation.Variables: void reset(int)>($i0);

        $r1 = r0.<proguard.evaluation.TracedVariables: proguard.evaluation.Variables producerVariables>;

        virtualinvoke $r1.<proguard.evaluation.Variables: void reset(int)>($i0);

        return;
    }

    public void setProducerValue(int, proguard.evaluation.value.Value)
    {
        proguard.evaluation.TracedVariables r0;
        proguard.evaluation.Variables $r2;
        int $i0;
        proguard.evaluation.value.Value $r1;

        r0 := @this: proguard.evaluation.TracedVariables;

        $i0 := @parameter0: int;

        $r1 := @parameter1: proguard.evaluation.value.Value;

        $r2 = r0.<proguard.evaluation.TracedVariables: proguard.evaluation.Variables producerVariables>;

        virtualinvoke $r2.<proguard.evaluation.Variables: void store(int,proguard.evaluation.value.Value)>($i0, $r1);

        return;
    }

    public void setProducerValue(proguard.evaluation.value.Value)
    {
        proguard.evaluation.TracedVariables r0;
        proguard.evaluation.value.Value $r1;

        r0 := @this: proguard.evaluation.TracedVariables;

        $r1 := @parameter0: proguard.evaluation.value.Value;

        r0.<proguard.evaluation.TracedVariables: proguard.evaluation.value.Value producerValue> = $r1;

        return;
    }

    public void store(int, proguard.evaluation.value.Value)
    {
        proguard.evaluation.TracedVariables r0;
        proguard.evaluation.Variables $r2;
        int $i0;
        proguard.evaluation.value.Value $r1, $r3;
        boolean $z0;

        r0 := @this: proguard.evaluation.TracedVariables;

        $i0 := @parameter0: int;

        $r1 := @parameter1: proguard.evaluation.value.Value;

        specialinvoke r0.<proguard.evaluation.Variables: void store(int,proguard.evaluation.value.Value)>($i0, $r1);

        $r2 = r0.<proguard.evaluation.TracedVariables: proguard.evaluation.Variables producerVariables>;

        $r3 = r0.<proguard.evaluation.TracedVariables: proguard.evaluation.value.Value producerValue>;

        virtualinvoke $r2.<proguard.evaluation.Variables: void store(int,proguard.evaluation.value.Value)>($i0, $r3);

        $z0 = virtualinvoke $r1.<proguard.evaluation.value.Value: boolean isCategory2()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<proguard.evaluation.TracedVariables: proguard.evaluation.Variables producerVariables>;

        $i0 = $i0 + 1;

        $r1 = r0.<proguard.evaluation.TracedVariables: proguard.evaluation.value.Value producerValue>;

        virtualinvoke $r2.<proguard.evaluation.Variables: void store(int,proguard.evaluation.value.Value)>($i0, $r1);

     label1:
        return;
    }

    public java.lang.String toString()
    {
        proguard.evaluation.TracedVariables r0;
        proguard.evaluation.Variables $r4;
        proguard.evaluation.value.Value[] $r2;
        java.lang.StringBuffer $r1;
        int $i0, $i1;
        java.lang.String $r6;
        proguard.evaluation.value.Value $r3, $r5;

        r0 := @this: proguard.evaluation.TracedVariables;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $i0 = 0;

     label1:
        $i1 = virtualinvoke r0.<proguard.evaluation.TracedVariables: int size()>();

        if $i0 >= $i1 goto label6;

        $r2 = r0.<proguard.evaluation.TracedVariables: proguard.evaluation.value.Value[] values>;

        $r3 = $r2[$i0];

        $r4 = r0.<proguard.evaluation.TracedVariables: proguard.evaluation.Variables producerVariables>;

        $r5 = virtualinvoke $r4.<proguard.evaluation.Variables: proguard.evaluation.value.Value getValue(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(91);

        if $r5 != null goto label4;

        $r6 = "empty:";

     label2:
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        if $r3 != null goto label5;

        $r6 = "empty";

     label3:
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);

        $i0 = $i0 + 1;

        goto label1;

     label4:
        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        goto label2;

     label5:
        $r6 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        goto label3;

     label6:
        $r6 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r6;
    }

    public static void <clinit>()
    {
        <proguard.evaluation.TracedVariables: int NONE> = -1;

        return;
    }
}
