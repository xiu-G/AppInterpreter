class proguard.classfile.editor.CodeAttributeEditor$CompositeInstruction extends proguard.classfile.instruction.Instruction
{
    private proguard.classfile.instruction.Instruction[] instructions;
    private final proguard.classfile.editor.CodeAttributeEditor this$0;

    private void <init>(proguard.classfile.editor.CodeAttributeEditor, proguard.classfile.instruction.Instruction[])
    {
        proguard.classfile.editor.CodeAttributeEditor $r1;
        proguard.classfile.editor.CodeAttributeEditor$CompositeInstruction r0;
        proguard.classfile.instruction.Instruction[] $r2;

        r0 := @this: proguard.classfile.editor.CodeAttributeEditor$CompositeInstruction;

        $r1 := @parameter0: proguard.classfile.editor.CodeAttributeEditor;

        $r2 := @parameter1: proguard.classfile.instruction.Instruction[];

        specialinvoke r0.<proguard.classfile.instruction.Instruction: void <init>()>();

        r0.<proguard.classfile.editor.CodeAttributeEditor$CompositeInstruction: proguard.classfile.editor.CodeAttributeEditor this$0> = $r1;

        r0.<proguard.classfile.editor.CodeAttributeEditor$CompositeInstruction: proguard.classfile.instruction.Instruction[] instructions> = $r2;

        return;
    }

    void <init>(proguard.classfile.editor.CodeAttributeEditor, proguard.classfile.instruction.Instruction[], proguard.classfile.editor.CodeAttributeEditor$1)
    {
        proguard.classfile.instruction.Instruction[] $r2;
        proguard.classfile.editor.CodeAttributeEditor $r1;
        proguard.classfile.editor.CodeAttributeEditor$CompositeInstruction r0;
        proguard.classfile.editor.CodeAttributeEditor$1 $r3;

        r0 := @this: proguard.classfile.editor.CodeAttributeEditor$CompositeInstruction;

        $r1 := @parameter0: proguard.classfile.editor.CodeAttributeEditor;

        $r2 := @parameter1: proguard.classfile.instruction.Instruction[];

        $r3 := @parameter2: proguard.classfile.editor.CodeAttributeEditor$1;

        specialinvoke r0.<proguard.classfile.editor.CodeAttributeEditor$CompositeInstruction: void <init>(proguard.classfile.editor.CodeAttributeEditor,proguard.classfile.instruction.Instruction[])>($r1, $r2);

        return;
    }

    public void accept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.visitor.InstructionVisitor)
    {
        java.lang.UnsupportedOperationException $r6;
        proguard.classfile.instruction.Instruction[] $r9;
        proguard.classfile.editor.CodeAttributeEditor $r5;
        proguard.classfile.instruction.visitor.InstructionVisitor $r4;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.instruction.Instruction $r10;
        java.lang.StringBuffer $r7;
        int $i0, $i1, $i2;
        proguard.classfile.Method $r2;
        java.lang.String $r8;
        proguard.classfile.editor.CodeAttributeEditor$CompositeInstruction r0;

        r0 := @this: proguard.classfile.editor.CodeAttributeEditor$CompositeInstruction;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.visitor.InstructionVisitor;

        $r5 = r0.<proguard.classfile.editor.CodeAttributeEditor$CompositeInstruction: proguard.classfile.editor.CodeAttributeEditor this$0>;

        if $r4 == $r5 goto label1;

        $r6 = new java.lang.UnsupportedOperationException;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unexpected visitor [");

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r4);

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r8);

        throw $r6;

     label1:
        $i1 = 0;

     label2:
        $r9 = r0.<proguard.classfile.editor.CodeAttributeEditor$CompositeInstruction: proguard.classfile.instruction.Instruction[] instructions>;

        $i2 = lengthof $r9;

        if $i1 >= $i2 goto label3;

        $r9 = r0.<proguard.classfile.editor.CodeAttributeEditor$CompositeInstruction: proguard.classfile.instruction.Instruction[] instructions>;

        $r10 = $r9[$i1];

        $r5 = r0.<proguard.classfile.editor.CodeAttributeEditor$CompositeInstruction: proguard.classfile.editor.CodeAttributeEditor this$0>;

        virtualinvoke $r10.<proguard.classfile.instruction.Instruction: void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.visitor.InstructionVisitor)>($r1, $r2, $r3, $i0, $r5);

        $i2 = virtualinvoke $r10.<proguard.classfile.instruction.Instruction: int length(int)>($i0);

        $i1 = $i1 + 1;

        $i0 = $i2 + $i0;

        goto label2;

     label3:
        return;
    }

    public int length(int)
    {
        proguard.classfile.instruction.Instruction $r2;
        proguard.classfile.instruction.Instruction[] $r1;
        int $i0, $i1, $i2, $i3;
        proguard.classfile.editor.CodeAttributeEditor$CompositeInstruction r0;

        r0 := @this: proguard.classfile.editor.CodeAttributeEditor$CompositeInstruction;

        $i0 := @parameter0: int;

        $i2 = 0;

        $i3 = $i0;

     label1:
        $r1 = r0.<proguard.classfile.editor.CodeAttributeEditor$CompositeInstruction: proguard.classfile.instruction.Instruction[] instructions>;

        $i1 = lengthof $r1;

        if $i2 >= $i1 goto label2;

        $r1 = r0.<proguard.classfile.editor.CodeAttributeEditor$CompositeInstruction: proguard.classfile.instruction.Instruction[] instructions>;

        $r2 = $r1[$i2];

        $i1 = virtualinvoke $r2.<proguard.classfile.instruction.Instruction: int length(int)>($i3);

        $i3 = $i3 + $i1;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        $i0 = $i3 - $i0;

        return $i0;
    }

    protected void readInfo(byte[], int)
    {
        byte[] $r1;
        java.lang.UnsupportedOperationException $r2;
        int $i0;
        proguard.classfile.editor.CodeAttributeEditor$CompositeInstruction r0;

        r0 := @this: proguard.classfile.editor.CodeAttributeEditor$CompositeInstruction;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Can\'t read composite instruction");

        throw $r2;
    }

    public proguard.classfile.instruction.Instruction shrink()
    {
        proguard.classfile.instruction.Instruction $r1;
        proguard.classfile.instruction.Instruction[] $r2, $r3;
        int $i0, $i1;
        proguard.classfile.editor.CodeAttributeEditor$CompositeInstruction r0;

        r0 := @this: proguard.classfile.editor.CodeAttributeEditor$CompositeInstruction;

        $i0 = 0;

     label1:
        $r2 = r0.<proguard.classfile.editor.CodeAttributeEditor$CompositeInstruction: proguard.classfile.instruction.Instruction[] instructions>;

        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label2;

        $r2 = r0.<proguard.classfile.editor.CodeAttributeEditor$CompositeInstruction: proguard.classfile.instruction.Instruction[] instructions>;

        $r3 = r0.<proguard.classfile.editor.CodeAttributeEditor$CompositeInstruction: proguard.classfile.instruction.Instruction[] instructions>;

        $r1 = $r3[$i0];

        $r1 = virtualinvoke $r1.<proguard.classfile.instruction.Instruction: proguard.classfile.instruction.Instruction shrink()>();

        $r2[$i0] = $r1;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return r0;
    }

    public java.lang.String toString()
    {
        proguard.classfile.instruction.Instruction[] $r2;
        proguard.classfile.instruction.Instruction $r3;
        java.lang.StringBuffer $r1, $r5;
        int $i0, $i1;
        java.lang.String $r4;
        proguard.classfile.editor.CodeAttributeEditor$CompositeInstruction r0;

        r0 := @this: proguard.classfile.editor.CodeAttributeEditor$CompositeInstruction;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $i0 = 0;

     label1:
        $r2 = r0.<proguard.classfile.editor.CodeAttributeEditor$CompositeInstruction: proguard.classfile.instruction.Instruction[] instructions>;

        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label2;

        $r2 = r0.<proguard.classfile.editor.CodeAttributeEditor$CompositeInstruction: proguard.classfile.instruction.Instruction[] instructions>;

        $r3 = $r2[$i0];

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        $r5 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("; ");

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    public void write(byte[], int)
    {
        byte[] $r1;
        proguard.classfile.instruction.Instruction $r3;
        proguard.classfile.instruction.Instruction[] $r2;
        int $i0, $i1, $i2;
        proguard.classfile.editor.CodeAttributeEditor$CompositeInstruction r0;

        r0 := @this: proguard.classfile.editor.CodeAttributeEditor$CompositeInstruction;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i2 = 0;

     label1:
        $r2 = r0.<proguard.classfile.editor.CodeAttributeEditor$CompositeInstruction: proguard.classfile.instruction.Instruction[] instructions>;

        $i1 = lengthof $r2;

        if $i2 >= $i1 goto label2;

        $r2 = r0.<proguard.classfile.editor.CodeAttributeEditor$CompositeInstruction: proguard.classfile.instruction.Instruction[] instructions>;

        $r3 = $r2[$i2];

        virtualinvoke $r3.<proguard.classfile.instruction.Instruction: void write(byte[],int)>($r1, $i0);

        $i1 = virtualinvoke $r3.<proguard.classfile.instruction.Instruction: int length(int)>($i0);

        $i0 = $i0 + $i1;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return;
    }

    protected void writeInfo(byte[], int)
    {
        byte[] $r1;
        java.lang.UnsupportedOperationException $r2;
        int $i0;
        proguard.classfile.editor.CodeAttributeEditor$CompositeInstruction r0;

        r0 := @this: proguard.classfile.editor.CodeAttributeEditor$CompositeInstruction;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Can\'t write composite instruction");

        throw $r2;
    }
}
