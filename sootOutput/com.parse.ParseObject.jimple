public class com.parse.ParseObject extends java.lang.Object
{
    static final java.lang.String API_VERSION;
    private static final java.lang.String TAG;
    static final java.lang.String VERSION_NAME;
    private static final java.text.DateFormat impreciseDateFormat;
    private static final java.util.Map objectFactories;
    static java.lang.String server;
    private java.lang.String className;
    private java.util.Date createdAt;
    private final java.util.Map data;
    private final java.util.Map dataAvailability;
    boolean dirty;
    final java.util.HashSet dirtyKeys;
    private boolean hasBeenFetched;
    private final java.util.Map hashedObjects;
    private java.lang.Boolean isRunning;
    private java.lang.String objectId;
    private final java.util.Map operations;
    private final com.parse.y saveEvent;
    private java.util.Date updatedAt;

    static void <clinit>()
    {
        com.parse.af $r2;
        com.parse.ag $r3;
        java.text.SimpleDateFormat $r4;
        java.util.HashMap $r0;
        com.parse.z $r1;
        java.util.SimpleTimeZone $r5;

        <com.parse.ParseObject: java.lang.String VERSION_NAME> = "1.0.28";

        <com.parse.ParseObject: java.lang.String TAG> = "com.parse.ParseObject";

        <com.parse.ParseObject: java.lang.String API_VERSION> = "2";

        <com.parse.ParseObject: java.lang.String server> = "https://api.parse.com";

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <com.parse.ParseObject: java.util.Map objectFactories> = $r0;

        $r1 = new com.parse.z;

        specialinvoke $r1.<com.parse.z: void <init>()>();

        staticinvoke <com.parse.ParseObject: void registerFactory(java.lang.String,com.parse.an)>("_User", $r1);

        $r2 = new com.parse.af;

        specialinvoke $r2.<com.parse.af: void <init>()>();

        staticinvoke <com.parse.ParseObject: void registerFactory(java.lang.String,com.parse.an)>("_Role", $r2);

        $r3 = new com.parse.ag;

        specialinvoke $r3.<com.parse.ag: void <init>()>();

        staticinvoke <com.parse.ParseObject: void registerFactory(java.lang.String,com.parse.an)>("_Installation", $r3);

        $r4 = new java.text.SimpleDateFormat;

        specialinvoke $r4.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy-MM-dd\'T\'HH:mm:ss\'Z\'");

        $r5 = new java.util.SimpleTimeZone;

        specialinvoke $r5.<java.util.SimpleTimeZone: void <init>(int,java.lang.String)>(0, "GMT");

        virtualinvoke $r4.<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>($r5);

        <com.parse.ParseObject: java.text.DateFormat impreciseDateFormat> = $r4;

        return;
    }

    public void <init>(java.lang.String)
    {
        java.util.HashMap $r9;
        com.parse.ParseObject r0;
        com.parse.an $r7;
        java.lang.IllegalArgumentException $r8;
        com.parse.y $r2;
        java.util.HashSet $r10;
        com.parse.ParseACL $r11;
        java.util.Map $r5;
        java.lang.Boolean $r3;
        java.lang.Class $r4;
        java.lang.Object $r6;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: com.parse.ParseObject;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new com.parse.y;

        specialinvoke $r2.<com.parse.y: void <init>()>();

        r0.<com.parse.ParseObject: com.parse.y saveEvent> = $r2;

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        r0.<com.parse.ParseObject: java.lang.Boolean isRunning> = $r3;

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lcom/parse/ParseObject;");

        if $z0 == 0 goto label1;

        $r5 = <com.parse.ParseObject: java.util.Map objectFactories>;

        $z0 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r5 = <com.parse.ParseObject: java.util.Map objectFactories>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r7 = (com.parse.an) $r6;

        $r4 = interfaceinvoke $r7.<com.parse.an: java.lang.Class a()>();

        $z0 = virtualinvoke $r4.<java.lang.Class: boolean isInstance(java.lang.Object)>(r0);

        if $z0 != 0 goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("You must create this type of ParseObject using ParseObject.create()");

        throw $r8;

     label1:
        $r9 = new java.util.HashMap;

        specialinvoke $r9.<java.util.HashMap: void <init>()>();

        r0.<com.parse.ParseObject: java.util.Map data> = $r9;

        $r9 = new java.util.HashMap;

        specialinvoke $r9.<java.util.HashMap: void <init>()>();

        r0.<com.parse.ParseObject: java.util.Map operations> = $r9;

        $r9 = new java.util.HashMap;

        specialinvoke $r9.<java.util.HashMap: void <init>()>();

        r0.<com.parse.ParseObject: java.util.Map hashedObjects> = $r9;

        $r9 = new java.util.HashMap;

        specialinvoke $r9.<java.util.HashMap: void <init>()>();

        r0.<com.parse.ParseObject: java.util.Map dataAvailability> = $r9;

        r0.<com.parse.ParseObject: boolean hasBeenFetched> = 1;

        $r10 = new java.util.HashSet;

        specialinvoke $r10.<java.util.HashSet: void <init>()>();

        r0.<com.parse.ParseObject: java.util.HashSet dirtyKeys> = $r10;

        r0.<com.parse.ParseObject: java.lang.String className> = $r1;

        r0.<com.parse.ParseObject: boolean dirty> = 1;

        $z0 = r0 instanceof com.parse.ParseUser;

        if $z0 != 0 goto label2;

        $r11 = staticinvoke <com.parse.ParseACL: com.parse.ParseACL getDefaultACL()>();

        if $r11 == null goto label2;

        $r11 = staticinvoke <com.parse.ParseACL: com.parse.ParseACL getDefaultACL()>();

        virtualinvoke r0.<com.parse.ParseObject: void setACL(com.parse.ParseACL)>($r11);

     label2:
        return;
    }

    static com.parse.ParseObject access$000(com.parse.ParseObject, boolean)
    {
        com.parse.ParseObject $r0;
        boolean $z0;

        $r0 := @parameter0: com.parse.ParseObject;

        $z0 := @parameter1: boolean;

        $r0 = specialinvoke $r0.<com.parse.ParseObject: com.parse.ParseObject fetchIfNeeded(boolean)>(0);

        return $r0;
    }

    private boolean canBeSerialized()
    {
        com.parse.ParseACL $r2;
        java.util.Map $r1;
        com.parse.ParseObject r0;
        boolean $z0;

        r0 := @this: com.parse.ParseObject;

        $r1 = r0.<com.parse.ParseObject: java.util.Map data>;

        $z0 = staticinvoke <com.parse.ParseObject: boolean canBeSerializedAsValue(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $z0 = specialinvoke r0.<com.parse.ParseObject: boolean isDataAvailable(java.lang.String)>("ACL");

        if $z0 == 0 goto label2;

        $r2 = specialinvoke r0.<com.parse.ParseObject: com.parse.ParseACL getACL(boolean)>(0);

        if $r2 == null goto label2;

        $r2 = specialinvoke r0.<com.parse.ParseObject: com.parse.ParseACL getACL(boolean)>(0);

        $z0 = virtualinvoke $r2.<com.parse.ParseACL: boolean hasUnresolvedUser()>();

        if $z0 != 0 goto label3;

     label2:
        return 1;

     label3:
        return 0;
    }

    private static boolean canBeSerializedAsValue(java.lang.Object)
    {
        com.parse.ParseObject $r1;
        org.json.JSONException $r7, $r10;
        org.json.JSONObject $r9;
        com.parse.ParseACL $r11;
        java.util.Map $r3;
        int $i0, $i1;
        java.lang.String $r2;
        boolean $z0;
        java.util.Iterator $r5;
        java.util.Collection $r4;
        java.lang.RuntimeException $r8;
        com.parse.ParseUser $r12;
        java.lang.Object $r0;
        org.json.JSONArray $r6;

        $r0 := @parameter0: java.lang.Object;

        $z0 = $r0 instanceof com.parse.ParseObject;

        if $z0 == 0 goto label01;

        $r1 = (com.parse.ParseObject) $r0;

        $r2 = virtualinvoke $r1.<com.parse.ParseObject: java.lang.String getObjectId()>();

        if $r2 == null goto label17;

        return 1;

     label01:
        $z0 = $r0 instanceof java.util.Map;

        if $z0 == 0 goto label03;

        $r3 = (java.util.Map) $r0;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Collection values()>();

        $r5 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label16;

        $r0 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $z0 = staticinvoke <com.parse.ParseObject: boolean canBeSerializedAsValue(java.lang.Object)>($r0);

        if $z0 != 0 goto label02;

        return 0;

     label03:
        $z0 = $r0 instanceof org.json.JSONArray;

        if $z0 == 0 goto label08;

        $r6 = (org.json.JSONArray) $r0;

        $i0 = 0;

     label04:
        $i1 = virtualinvoke $r6.<org.json.JSONArray: int length()>();

        if $i0 >= $i1 goto label16;

     label05:
        $r0 = virtualinvoke $r6.<org.json.JSONArray: java.lang.Object get(int)>($i0);

        $z0 = staticinvoke <com.parse.ParseObject: boolean canBeSerializedAsValue(java.lang.Object)>($r0);

     label06:
        if $z0 == 0 goto label17;

        $i0 = $i0 + 1;

        goto label04;

     label07:
        $r7 := @caughtexception;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to find related objects for saving.", $r7);

        throw $r8;

     label08:
        $z0 = $r0 instanceof org.json.JSONObject;

        if $z0 == 0 goto label15;

        $r9 = (org.json.JSONObject) $r0;

        $r5 = virtualinvoke $r9.<org.json.JSONObject: java.util.Iterator keys()>();

     label09:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label16;

     label10:
        $r0 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

     label11:
        $r2 = (java.lang.String) $r0;

     label12:
        $r0 = virtualinvoke $r9.<org.json.JSONObject: java.lang.Object get(java.lang.String)>($r2);

        $z0 = staticinvoke <com.parse.ParseObject: boolean canBeSerializedAsValue(java.lang.Object)>($r0);

     label13:
        if $z0 != 0 goto label09;

        return 0;

     label14:
        $r10 := @caughtexception;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to find related objects for saving.", $r10);

        throw $r8;

     label15:
        $z0 = $r0 instanceof com.parse.ParseACL;

        if $z0 == 0 goto label16;

        $r11 = (com.parse.ParseACL) $r0;

        $z0 = virtualinvoke $r11.<com.parse.ParseACL: boolean hasUnresolvedUser()>();

        if $z0 == 0 goto label16;

        $r12 = staticinvoke <com.parse.ParseUser: com.parse.ParseUser getCurrentUser()>();

        $z0 = staticinvoke <com.parse.ParseObject: boolean canBeSerializedAsValue(java.lang.Object)>($r12);

        if $z0 == 0 goto label17;

     label16:
        return 1;

     label17:
        return 0;

        catch org.json.JSONException from label05 to label06 with label07;
        catch org.json.JSONException from label10 to label11 with label14;
        catch org.json.JSONException from label12 to label13 with label14;
    }

    private void checkGetAccess(java.lang.String)
    {
        java.lang.IllegalStateException $r2;
        java.lang.String $r1;
        com.parse.ParseObject r0;
        boolean $z0;

        r0 := @this: com.parse.ParseObject;

        $r1 := @parameter0: java.lang.String;

        $z0 = specialinvoke r0.<com.parse.ParseObject: boolean isDataAvailable(java.lang.String)>($r1);

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("ParseObject has no data for this key.  Call fetchIfNeeded() to get the data.");

        throw $r2;

     label1:
        return;
    }

    private static void collectDirtyChildren(java.lang.Object, java.util.List, java.util.List)
    {
        java.util.List $r1, $r2;
        java.util.IdentityHashMap $r3, $r4;
        java.lang.Object $r0;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.util.List;

        $r2 := @parameter2: java.util.List;

        $r3 = new java.util.IdentityHashMap;

        specialinvoke $r3.<java.util.IdentityHashMap: void <init>()>();

        $r4 = new java.util.IdentityHashMap;

        specialinvoke $r4.<java.util.IdentityHashMap: void <init>()>();

        staticinvoke <com.parse.ParseObject: void collectDirtyChildren(java.lang.Object,java.util.List,java.util.List,java.util.IdentityHashMap,java.util.IdentityHashMap)>($r0, $r1, $r2, $r3, $r4);

        return;
    }

    private static void collectDirtyChildren(java.lang.Object, java.util.List, java.util.List, java.util.IdentityHashMap, java.util.IdentityHashMap)
    {
        com.parse.ParseObject $r16;
        org.json.JSONException $r10, $r14;
        org.json.JSONObject $r12;
        com.parse.ParseACL $r15;
        java.util.Map $r5;
        int $i0, $i1;
        java.lang.String $r13;
        boolean $z0;
        java.util.IdentityHashMap $r3, $r4, $r17;
        java.util.Iterator $r7;
        java.util.Collection $r8;
        java.lang.RuntimeException $r11;
        java.util.List $r1, $r2, $r6;
        com.parse.ParseFile $r18;
        java.lang.Object $r0;
        org.json.JSONArray $r9;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.util.List;

        $r2 := @parameter2: java.util.List;

        $r3 := @parameter3: java.util.IdentityHashMap;

        $r4 := @parameter4: java.util.IdentityHashMap;

        $i0 = 0;

     label01:
        $z0 = $r0 instanceof java.util.List;

        if $z0 == 0 goto label03;

        $r6 = (java.util.List) $r0;

        $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label24;

        $r0 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <com.parse.ParseObject: void collectDirtyChildren(java.lang.Object,java.util.List,java.util.List,java.util.IdentityHashMap,java.util.IdentityHashMap)>($r0, $r1, $r2, $r3, $r4);

        goto label02;

     label03:
        $z0 = $r0 instanceof java.util.Map;

        if $z0 == 0 goto label05;

        $r5 = (java.util.Map) $r0;

        $r8 = interfaceinvoke $r5.<java.util.Map: java.util.Collection values()>();

        $r7 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();

     label04:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label24;

        $r0 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <com.parse.ParseObject: void collectDirtyChildren(java.lang.Object,java.util.List,java.util.List,java.util.IdentityHashMap,java.util.IdentityHashMap)>($r0, $r1, $r2, $r3, $r4);

        goto label04;

     label05:
        $z0 = $r0 instanceof org.json.JSONArray;

        if $z0 == 0 goto label10;

        $r9 = (org.json.JSONArray) $r0;

     label06:
        $i1 = virtualinvoke $r9.<org.json.JSONArray: int length()>();

        if $i0 >= $i1 goto label24;

     label07:
        $r0 = virtualinvoke $r9.<org.json.JSONArray: java.lang.Object get(int)>($i0);

        staticinvoke <com.parse.ParseObject: void collectDirtyChildren(java.lang.Object,java.util.List,java.util.List,java.util.IdentityHashMap,java.util.IdentityHashMap)>($r0, $r1, $r2, $r3, $r4);

     label08:
        $i0 = $i0 + 1;

        goto label06;

     label09:
        $r10 := @caughtexception;

        $r11 = new java.lang.RuntimeException;

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Invalid JSONArray on object.", $r10);

        throw $r11;

     label10:
        $z0 = $r0 instanceof org.json.JSONObject;

        if $z0 == 0 goto label17;

        $r12 = (org.json.JSONObject) $r0;

        $r7 = virtualinvoke $r12.<org.json.JSONObject: java.util.Iterator keys()>();

     label11:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label24;

     label12:
        $r0 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

     label13:
        $r13 = (java.lang.String) $r0;

     label14:
        $r0 = virtualinvoke $r12.<org.json.JSONObject: java.lang.Object get(java.lang.String)>($r13);

        staticinvoke <com.parse.ParseObject: void collectDirtyChildren(java.lang.Object,java.util.List,java.util.List,java.util.IdentityHashMap,java.util.IdentityHashMap)>($r0, $r1, $r2, $r3, $r4);

     label15:
        goto label11;

     label16:
        $r14 := @caughtexception;

        $r11 = new java.lang.RuntimeException;

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Invalid JSONDictionary on object.", $r14);

        throw $r11;

     label17:
        $z0 = $r0 instanceof com.parse.ParseACL;

        if $z0 == 0 goto label18;

        $r15 = (com.parse.ParseACL) $r0;

        $z0 = virtualinvoke $r15.<com.parse.ParseACL: boolean hasUnresolvedUser()>();

        if $z0 == 0 goto label24;

        $r0 = staticinvoke <com.parse.ParseUser: com.parse.ParseUser getCurrentUser()>();

        goto label01;

     label18:
        $z0 = $r0 instanceof com.parse.ParseObject;

        if $z0 == 0 goto label23;

        $r16 = (com.parse.ParseObject) $r0;

        $r13 = virtualinvoke $r16.<com.parse.ParseObject: java.lang.String getObjectId()>();

        if $r13 == null goto label20;

        $r17 = new java.util.IdentityHashMap;

        specialinvoke $r17.<java.util.IdentityHashMap: void <init>()>();

     label19:
        $z0 = virtualinvoke $r3.<java.util.IdentityHashMap: boolean containsKey(java.lang.Object)>($r16);

        if $z0 == 0 goto label22;

        return;

     label20:
        $z0 = virtualinvoke $r4.<java.util.IdentityHashMap: boolean containsKey(java.lang.Object)>($r16);

        if $z0 == 0 goto label21;

        $r11 = new java.lang.RuntimeException;

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String)>("Found a circular dependency while saving.");

        throw $r11;

     label21:
        $r17 = new java.util.IdentityHashMap;

        specialinvoke $r17.<java.util.IdentityHashMap: void <init>(java.util.Map)>($r4);

        virtualinvoke $r17.<java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, $r16);

        goto label19;

     label22:
        $r4 = new java.util.IdentityHashMap;

        specialinvoke $r4.<java.util.IdentityHashMap: void <init>(java.util.Map)>($r3);

        virtualinvoke $r4.<java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, $r16);

        $r5 = $r16.<com.parse.ParseObject: java.util.Map data>;

        staticinvoke <com.parse.ParseObject: void collectDirtyChildren(java.lang.Object,java.util.List,java.util.List,java.util.IdentityHashMap,java.util.IdentityHashMap)>($r5, $r1, $r2, $r4, $r17);

        $z0 = virtualinvoke $r16.<com.parse.ParseObject: boolean isDirty(boolean)>(0);

        if $z0 == 0 goto label24;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r16);

        return;

     label23:
        $z0 = $r0 instanceof com.parse.ParseFile;

        if $z0 == 0 goto label24;

        $r18 = (com.parse.ParseFile) $r0;

        $r13 = virtualinvoke $r18.<com.parse.ParseFile: java.lang.String getUrl()>();

        if $r13 != null goto label24;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r18);

     label24:
        return;

        catch org.json.JSONException from label07 to label08 with label09;
        catch org.json.JSONException from label12 to label13 with label16;
        catch org.json.JSONException from label14 to label15 with label16;
    }

    public static com.parse.ParseObject create(java.lang.String)
    {
        java.util.Map $r1;
        java.lang.Object $r2;
        java.lang.String $r0;
        com.parse.an $r3;
        com.parse.ParseObject $r4;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 = <com.parse.ParseObject: java.util.Map objectFactories>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r0);

        if $z0 == 0 goto label1;

        $r1 = <com.parse.ParseObject: java.util.Map objectFactories>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        $r3 = (com.parse.an) $r2;

        $r4 = interfaceinvoke $r3.<com.parse.an: com.parse.ParseObject b()>();

        return $r4;

     label1:
        $r4 = new com.parse.ParseObject;

        specialinvoke $r4.<com.parse.ParseObject: void <init>(java.lang.String)>($r0);

        return $r4;
    }

    public static com.parse.ParseObject createWithoutData(java.lang.String, java.lang.String)
    {
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String $r0, $r1;
        com.parse.an $r4;
        com.parse.ParseObject $r5;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 = <com.parse.ParseObject: java.util.Map objectFactories>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r0);

        if $z0 == 0 goto label2;

        $r2 = <com.parse.ParseObject: java.util.Map objectFactories>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        $r4 = (com.parse.an) $r3;

        $r5 = interfaceinvoke $r4.<com.parse.an: com.parse.ParseObject b()>();

     label1:
        virtualinvoke $r5.<com.parse.ParseObject: void clearData()>();

        virtualinvoke $r5.<com.parse.ParseObject: void setObjectId(java.lang.String)>($r1);

        $r5.<com.parse.ParseObject: boolean hasBeenFetched> = 0;

        $r5.<com.parse.ParseObject: boolean dirty> = 0;

        return $r5;

     label2:
        $r5 = new com.parse.ParseObject;

        specialinvoke $r5.<com.parse.ParseObject: void <init>(java.lang.String)>($r0);

        goto label1;
    }

    private static void deepSave(java.lang.Object)
    {
        com.parse.ParseObject $r7;
        java.util.ArrayList $r1, $r2, $r3;
        org.json.JSONException $r16;
        org.json.JSONObject $r14;
        int $i0, $i1;
        java.lang.Boolean $r8;
        com.parse.l $r13;
        java.lang.String $r15;
        boolean $z0;
        java.util.IdentityHashMap $r6;
        java.util.Iterator $r4;
        java.util.Set $r9;
        java.lang.RuntimeException $r10;
        com.parse.ParseUser $r11;
        com.parse.ParseFile $r5;
        java.lang.Object $r0;
        org.json.JSONArray $r12;

        $r0 := @parameter0: java.lang.Object;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        staticinvoke <com.parse.ParseObject: void collectDirtyChildren(java.lang.Object,java.util.List,java.util.List)>($r0, $r1, $r3);

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label02;

        $r0 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (com.parse.ParseFile) $r0;

        virtualinvoke $r5.<com.parse.ParseFile: void save()>();

        goto label01;

     label02:
        $r6 = new java.util.IdentityHashMap;

        specialinvoke $r6.<java.util.IdentityHashMap: void <init>()>();

        $r4 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label04;

        $r0 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (com.parse.ParseObject) $r0;

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke $r6.<java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r8);

        goto label03;

     label04:
        $r2 = new java.util.ArrayList;

        $r9 = virtualinvoke $r6.<java.util.IdentityHashMap: java.util.Set keySet()>();

        specialinvoke $r2.<java.util.ArrayList: void <init>(java.util.Collection)>($r9);

     label05:
        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 <= 0 goto label20;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r0 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (com.parse.ParseObject) $r0;

        $z0 = specialinvoke $r7.<com.parse.ParseObject: boolean canBeSerialized()>();

        if $z0 == 0 goto label07;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label06;

     label07:
        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label06;

     label08:
        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 != 0 goto label09;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String)>("Unable to save a PFObject with a relation to a cycle.");

        throw $r10;

     label09:
        $r11 = staticinvoke <com.parse.ParseUser: com.parse.ParseUser getCurrentUser()>();

        if $r11 == null goto label10;

        $r11 = staticinvoke <com.parse.ParseUser: com.parse.ParseUser getCurrentUser()>();

        $z0 = virtualinvoke $r11.<com.parse.ParseUser: boolean isLazy()>();

        if $z0 == 0 goto label10;

        $r11 = staticinvoke <com.parse.ParseUser: com.parse.ParseUser getCurrentUser()>();

        $z0 = interfaceinvoke $r1.<java.util.List: boolean contains(java.lang.Object)>($r11);

        if $z0 == 0 goto label10;

        $r11 = staticinvoke <com.parse.ParseUser: com.parse.ParseUser getCurrentUser()>();

        virtualinvoke $r11.<com.parse.ParseUser: void save()>();

        $r11 = staticinvoke <com.parse.ParseUser: com.parse.ParseUser getCurrentUser()>();

        interfaceinvoke $r1.<java.util.List: boolean remove(java.lang.Object)>($r11);

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 == 0 goto label21;

     label10:
        $r12 = new org.json.JSONArray;

        specialinvoke $r12.<org.json.JSONArray: void <init>()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r4 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label11:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label12;

        $r0 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (com.parse.ParseObject) $r0;

        virtualinvoke $r7.<com.parse.ParseObject: void validateSave()>();

        $r13 = virtualinvoke $r7.<com.parse.ParseObject: com.parse.l constructSaveCommand()>();

        if $r13 == null goto label11;

        $r14 = virtualinvoke $r13.<com.parse.l: org.json.JSONObject a()>();

        virtualinvoke $r12.<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>($r14);

        $r15 = $r13.<com.parse.l: java.lang.String a>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r15);

        goto label11;

     label12:
        $r13 = new com.parse.l;

        specialinvoke $r13.<com.parse.l: void <init>(java.lang.String)>("multi");

        virtualinvoke $r13.<com.parse.l: void a(java.lang.String,org.json.JSONArray)>("commands", $r12);

        $r0 = virtualinvoke $r13.<com.parse.l: java.lang.Object c()>();

        $r12 = (org.json.JSONArray) $r0;

        $i0 = 0;

     label13:
        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 >= $i1 goto label19;

        $r0 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i0);

        $r15 = (java.lang.String) $r0;

     label14:
        $r14 = virtualinvoke $r12.<org.json.JSONArray: org.json.JSONObject getJSONObject(int)>($i0);

        $r0 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

     label15:
        $r7 = (com.parse.ParseObject) $r0;

     label16:
        virtualinvoke $r7.<com.parse.ParseObject: void handleSaveResult(java.lang.String,org.json.JSONObject)>($r15, $r14);

     label17:
        $i0 = $i0 + 1;

        goto label13;

     label18:
        $r16 := @caughtexception;

        $r10 = new java.lang.RuntimeException;

        $r15 = virtualinvoke $r16.<org.json.JSONException: java.lang.String getMessage()>();

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String)>($r15);

        throw $r10;

     label19:
        $r2 = $r3;

        goto label05;

     label20:
        return;

     label21:
        $r2 = $r3;

        goto label05;

        catch org.json.JSONException from label14 to label15 with label18;
        catch org.json.JSONException from label16 to label17 with label18;
    }

    static void deleteDiskObject(android.content.Context, java.lang.String)
    {
        java.lang.Throwable $r4;
        android.content.Context $r0;
        java.lang.String $r1;
        java.io.File $r2, $r3;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: java.lang.String;

        entermonitor class "Lcom/parse/ParseObject;";

     label1:
        staticinvoke <com.parse.Parse: void setContextIfNeeded(android.content.Context)>($r0);

        $r3 = new java.io.File;

        $r2 = staticinvoke <com.parse.Parse: java.io.File getParseDir()>();

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, "persistentCallbacks");

        virtualinvoke $r3.<java.io.File: boolean delete()>();

     label2:
        exitmonitor class "Lcom/parse/ParseObject;";

        return;

     label3:
        $r4 := @caughtexception;

        exitmonitor class "Lcom/parse/ParseObject;";

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static java.util.List fetchAll(java.util.List)
    {
        java.util.HashMap $r9;
        com.parse.ParseObject $r3, $r13;
        java.util.ArrayList $r1;
        org.json.JSONObject $r14;
        int $i0, $i1;
        java.lang.String $r4, $r5;
        boolean $z0;
        java.util.Iterator $r10;
        com.parse.ParseQuery $r7;
        java.lang.RuntimeException $r11;
        java.lang.IllegalArgumentException $r6;
        java.util.List $r0, $r8;
        java.lang.Object $r2;
        java.lang.StringBuilder $r12;

        $r0 := @parameter0: java.util.List;

        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        if $i0 != 0 goto label01;

        return $r0;

     label01:
        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r2 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (com.parse.ParseObject) $r2;

        $r4 = virtualinvoke $r3.<com.parse.ParseObject: java.lang.String getClassName()>();

        $i0 = 0;

     label02:
        $i1 = interfaceinvoke $r0.<java.util.List: int size()>();

        if $i0 >= $i1 goto label05;

        $r2 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>($i0);

        $r3 = (com.parse.ParseObject) $r2;

        $r5 = virtualinvoke $r3.<com.parse.ParseObject: java.lang.String getClassName()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label03;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("All objects should have the same class");

        throw $r6;

     label03:
        $r2 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>($i0);

        $r3 = (com.parse.ParseObject) $r2;

        $r5 = virtualinvoke $r3.<com.parse.ParseObject: java.lang.String getObjectId()>();

        if $r5 != null goto label04;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("All objects must exist on the server");

        throw $r6;

     label04:
        $r2 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>($i0);

        $r3 = (com.parse.ParseObject) $r2;

        $r5 = virtualinvoke $r3.<com.parse.ParseObject: java.lang.String getObjectId()>();

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r5);

        $i0 = $i0 + 1;

        goto label02;

     label05:
        $r7 = new com.parse.ParseQuery;

        specialinvoke $r7.<com.parse.ParseQuery: void <init>(java.lang.String)>($r4);

        virtualinvoke $r7.<com.parse.ParseQuery: com.parse.ParseQuery whereContainedIn(java.lang.String,java.util.Collection)>("objectId", $r1);

        $r8 = virtualinvoke $r7.<com.parse.ParseQuery: java.util.List find()>();

        $r9 = new java.util.HashMap;

        specialinvoke $r9.<java.util.HashMap: void <init>()>();

        $r10 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label07;

        $r2 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (com.parse.ParseObject) $r2;

        $r4 = virtualinvoke $r3.<com.parse.ParseObject: java.lang.String getObjectId()>();

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r3);

        goto label06;

     label07:
        $i0 = 0;

     label08:
        $i1 = interfaceinvoke $r0.<java.util.List: int size()>();

        if $i0 >= $i1 goto label10;

        $r2 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>($i0);

        $r3 = (com.parse.ParseObject) $r2;

        $r4 = virtualinvoke $r3.<com.parse.ParseObject: java.lang.String getObjectId()>();

        $r2 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        $r3 = (com.parse.ParseObject) $r2;

        if $r3 != null goto label09;

        $r11 = new java.lang.RuntimeException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("Object id ");

        $r2 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>($i0);

        $r3 = (com.parse.ParseObject) $r2;

        $r4 = virtualinvoke $r3.<com.parse.ParseObject: java.lang.String getObjectId()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exist");

        $r4 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String)>($r4);

        throw $r11;

     label09:
        $r2 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>($i0);

        $r13 = (com.parse.ParseObject) $r2;

        $r14 = virtualinvoke $r3.<com.parse.ParseObject: org.json.JSONObject toJSONObject(boolean,boolean)>(1, 1);

        virtualinvoke $r13.<com.parse.ParseObject: void mergeObject(org.json.JSONObject,boolean)>($r14, 0);

        $r2 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>($i0);

        $r3 = (com.parse.ParseObject) $r2;

        $r3.<com.parse.ParseObject: boolean hasBeenFetched> = 1;

        $i0 = $i0 + 1;

        goto label08;

     label10:
        return $r0;
    }

    public static java.util.List fetchAllIfNeeded(java.util.List)
    {
        java.util.HashMap $r10;
        com.parse.ParseObject $r5, $r13;
        java.util.ArrayList $r1;
        org.json.JSONObject $r14;
        int $i0, $i1;
        java.lang.String $r2, $r6;
        boolean $z0;
        java.util.Iterator $r3;
        com.parse.ParseQuery $r8;
        java.lang.RuntimeException $r11;
        java.lang.IllegalArgumentException $r7;
        java.util.List $r0, $r9;
        java.lang.Object $r4;
        java.lang.StringBuilder $r12;

        $r0 := @parameter0: java.util.List;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r2 = null;

        $r3 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label03;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (com.parse.ParseObject) $r4;

        $z0 = virtualinvoke $r5.<com.parse.ParseObject: boolean isDataAvailable()>();

        if $z0 != 0 goto label01;

        if $r2 == null goto label02;

        $r6 = virtualinvoke $r5.<com.parse.ParseObject: java.lang.String getClassName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label02;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("All objects should have the same class");

        throw $r7;

     label02:
        $r2 = virtualinvoke $r5.<com.parse.ParseObject: java.lang.String getClassName()>();

        $r6 = virtualinvoke $r5.<com.parse.ParseObject: java.lang.String getObjectId()>();

        if $r6 == null goto label01;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r6);

        goto label01;

     label03:
        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 != 0 goto label04;

        return $r0;

     label04:
        $r8 = new com.parse.ParseQuery;

        specialinvoke $r8.<com.parse.ParseQuery: void <init>(java.lang.String)>($r2);

        virtualinvoke $r8.<com.parse.ParseQuery: com.parse.ParseQuery whereContainedIn(java.lang.String,java.util.Collection)>("objectId", $r1);

        $r9 = virtualinvoke $r8.<com.parse.ParseQuery: java.util.List find()>();

        $r10 = new java.util.HashMap;

        specialinvoke $r10.<java.util.HashMap: void <init>()>();

        $r3 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label06;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (com.parse.ParseObject) $r4;

        $r2 = virtualinvoke $r5.<com.parse.ParseObject: java.lang.String getObjectId()>();

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r5);

        goto label05;

     label06:
        $i0 = 0;

     label07:
        $i1 = interfaceinvoke $r0.<java.util.List: int size()>();

        if $i0 >= $i1 goto label10;

        $r4 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>($i0);

        $r5 = (com.parse.ParseObject) $r4;

        $z0 = virtualinvoke $r5.<com.parse.ParseObject: boolean isDataAvailable()>();

        if $z0 != 0 goto label09;

        $r4 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>($i0);

        $r5 = (com.parse.ParseObject) $r4;

        $r2 = virtualinvoke $r5.<com.parse.ParseObject: java.lang.String getObjectId()>();

        $r4 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        $r5 = (com.parse.ParseObject) $r4;

        if $r5 != null goto label08;

        $r11 = new java.lang.RuntimeException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("Object id ");

        $r4 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>($i0);

        $r5 = (com.parse.ParseObject) $r4;

        $r2 = virtualinvoke $r5.<com.parse.ParseObject: java.lang.String getObjectId()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exist");

        $r2 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String)>($r2);

        throw $r11;

     label08:
        $r4 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>($i0);

        $r13 = (com.parse.ParseObject) $r4;

        $r14 = virtualinvoke $r5.<com.parse.ParseObject: org.json.JSONObject toJSONObject(boolean,boolean)>(1, 1);

        virtualinvoke $r13.<com.parse.ParseObject: void mergeObject(org.json.JSONObject,boolean)>($r14, 0);

        $r4 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>($i0);

        $r5 = (com.parse.ParseObject) $r4;

        $r5.<com.parse.ParseObject: boolean hasBeenFetched> = 1;

     label09:
        $i0 = $i0 + 1;

        goto label07;

     label10:
        return $r0;
    }

    public static void fetchAllIfNeededInBackground(java.util.List, com.parse.FindCallback)
    {
        java.util.List $r0;
        com.parse.ac $r2;
        com.parse.FindCallback $r1;

        $r0 := @parameter0: java.util.List;

        $r1 := @parameter1: com.parse.FindCallback;

        $r2 = new com.parse.ac;

        specialinvoke $r2.<com.parse.ac: void <init>(com.parse.k,java.util.List)>($r1, $r0);

        staticinvoke <com.parse.a: int a(com.parse.a)>($r2);

        return;
    }

    public static void fetchAllInBackground(java.util.List, com.parse.FindCallback)
    {
        java.util.List $r0;
        com.parse.ad $r2;
        com.parse.FindCallback $r1;

        $r0 := @parameter0: java.util.List;

        $r1 := @parameter1: com.parse.FindCallback;

        $r2 = new com.parse.ad;

        specialinvoke $r2.<com.parse.ad: void <init>(com.parse.k,java.util.List)>($r1, $r0);

        staticinvoke <com.parse.a: int a(com.parse.a)>($r2);

        return;
    }

    private com.parse.ParseObject fetchIfNeeded(boolean)
    {
        com.parse.ParseObject r0;
        boolean $z0, $z1;

        r0 := @this: com.parse.ParseObject;

        $z0 := @parameter0: boolean;

        $z1 = virtualinvoke r0.<com.parse.ParseObject: boolean isDataAvailable()>();

        if $z1 == 0 goto label1;

        return r0;

     label1:
        virtualinvoke r0.<com.parse.ParseObject: com.parse.ParseObject fetch(boolean)>(0);

        return r0;
    }

    static void findUnsavedChildren(java.lang.Object, java.util.List)
    {
        java.util.Iterator $r3;
        java.util.Collection $r5;
        com.parse.ParseObject $r6;
        java.util.List $r0, $r2;
        java.util.Map $r4;
        java.lang.Object $r1;
        boolean $z0;

        $r1 := @parameter0: java.lang.Object;

        $r0 := @parameter1: java.util.List;

        $z0 = $r1 instanceof java.util.List;

        if $z0 == 0 goto label2;

        $r2 = (java.util.List) $r1;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r1 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <com.parse.ParseObject: void findUnsavedChildren(java.lang.Object,java.util.List)>($r1, $r0);

        goto label1;

     label2:
        $z0 = $r1 instanceof java.util.Map;

        if $z0 == 0 goto label4;

        $r4 = (java.util.Map) $r1;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Collection values()>();

        $r3 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r1 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <com.parse.ParseObject: void findUnsavedChildren(java.lang.Object,java.util.List)>($r1, $r0);

        goto label3;

     label4:
        $z0 = $r1 instanceof com.parse.ParseObject;

        if $z0 == 0 goto label5;

        $r6 = (com.parse.ParseObject) $r1;

        $z0 = virtualinvoke $r6.<com.parse.ParseObject: boolean isDirty()>();

        if $z0 == 0 goto label5;

        virtualinvoke $r6.<com.parse.ParseObject: void checkIfRunning(boolean)>(1);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r6);

     label5:
        return;
    }

    private com.parse.ParseACL getACL(boolean)
    {
        com.parse.ParseACL $r4;
        java.util.Map $r1;
        java.lang.Object $r2;
        java.lang.RuntimeException $r3;
        com.parse.ParseObject r0;
        boolean $z0, $z1;

        r0 := @this: com.parse.ParseObject;

        $z0 := @parameter0: boolean;

        specialinvoke r0.<com.parse.ParseObject: void checkGetAccess(java.lang.String)>("ACL");

        $r1 = r0.<com.parse.ParseObject: java.util.Map data>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("ACL");

        if $r2 != null goto label1;

        return null;

     label1:
        $z1 = $r2 instanceof com.parse.ParseACL;

        if $z1 != 0 goto label2;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("only ACLs can be stored in the ACL key");

        throw $r3;

     label2:
        $r4 = (com.parse.ParseACL) $r2;

        return $r4;
    }

    static java.lang.String getApplicationId()
    {
        java.lang.String r0;

        staticinvoke <com.parse.Parse: void checkInit()>();

        r0 = <com.parse.Parse: java.lang.String applicationId>;

        return r0;
    }

    static org.json.JSONObject getDiskObject(android.content.Context, java.lang.String)
    {
        java.lang.Throwable $r9, $r11;
        android.content.Context $r0;
        java.io.RandomAccessFile $r5;
        byte[] $r6;
        org.json.JSONTokener $r7;
        long $l0;
        java.io.File $r3, $r4;
        org.json.JSONException $r10;
        org.json.JSONObject $r2, $r8;
        int $i1;
        java.lang.String $r1;
        boolean $z0;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: java.lang.String;

        $r2 = null;

        entermonitor class "Lcom/parse/ParseObject;";

     label01:
        staticinvoke <com.parse.Parse: void setContextIfNeeded(android.content.Context)>($r0);

        $r3 = new java.io.File;

        $r4 = staticinvoke <com.parse.Parse: java.io.File getParseDir()>();

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, $r1);

        $z0 = virtualinvoke $r3.<java.io.File: boolean exists()>();

     label02:
        if $z0 != 0 goto label04;

     label03:
        exitmonitor class "Lcom/parse/ParseObject;";

        return $r2;

     label04:
        $r5 = new java.io.RandomAccessFile;

     label05:
        specialinvoke $r5.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>($r3, "r");

        $l0 = virtualinvoke $r5.<java.io.RandomAccessFile: long length()>();

     label06:
        $i1 = (int) $l0;

        $r6 = newarray (byte)[$i1];

     label07:
        virtualinvoke $r5.<java.io.RandomAccessFile: void readFully(byte[])>($r6);

        virtualinvoke $r5.<java.io.RandomAccessFile: void close()>();

     label08:
        $r1 = new java.lang.String;

     label09:
        specialinvoke $r1.<java.lang.String: void <init>(byte[],java.lang.String)>($r6, "UTF-8");

     label10:
        $r7 = new org.json.JSONTokener;

        specialinvoke $r7.<org.json.JSONTokener: void <init>(java.lang.String)>($r1);

     label11:
        $r8 = new org.json.JSONObject;

     label12:
        specialinvoke $r8.<org.json.JSONObject: void <init>(org.json.JSONTokener)>($r7);

     label13:
        $r2 = $r8;

        goto label03;

     label14:
        $r9 := @caughtexception;

        exitmonitor class "Lcom/parse/ParseObject;";

        throw $r9;

     label15:
        $r10 := @caughtexception;

        goto label03;

     label16:
        $r11 := @caughtexception;

        goto label03;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.io.IOException from label05 to label06 with label16;
        catch java.io.IOException from label07 to label08 with label16;
        catch java.io.IOException from label09 to label10 with label16;
        catch java.lang.Throwable from label04 to label10 with label14;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch org.json.JSONException from label12 to label13 with label15;
        catch java.lang.Throwable from label11 to label13 with label14;
    }

    static com.parse.ParseObject getFromDisk(android.content.Context, java.lang.String)
    {
        android.content.Context $r0;
        org.json.JSONException $r4;
        org.json.JSONObject $r2;
        java.lang.String $r1;
        com.parse.ParseObject $r3;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <com.parse.ParseObject: org.json.JSONObject getDiskObject(android.content.Context,java.lang.String)>($r0, $r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $r1 = virtualinvoke $r2.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("classname");

        $r3 = staticinvoke <com.parse.ParseObject: com.parse.ParseObject create(java.lang.String)>($r1);

        virtualinvoke $r3.<com.parse.ParseObject: void clearData()>();

        virtualinvoke $r3.<com.parse.ParseObject: void mergeObject(org.json.JSONObject,boolean)>($r2, 0);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        return null;

        catch org.json.JSONException from label1 to label2 with label3;
    }

    private static java.util.Date impreciseParseDate(java.lang.String)
    {
        java.lang.Throwable $r3, $r5;
        java.util.Date $r2;
        java.lang.StringBuilder $r4;
        java.lang.String $r0;
        java.text.DateFormat $r1;

        $r0 := @parameter0: java.lang.String;

        entermonitor class "Lcom/parse/ParseObject;";

     label1:
        $r1 = <com.parse.ParseObject: java.text.DateFormat impreciseDateFormat>;

     label2:
        $r2 = virtualinvoke $r1.<java.text.DateFormat: java.util.Date parse(java.lang.String)>($r0);

     label3:
        exitmonitor class "Lcom/parse/ParseObject;";

        return $r2;

     label4:
        $r3 := @caughtexception;

     label5:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("could not parse date: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.parse.Parse: void logE(java.lang.String,java.lang.String,java.lang.Throwable)>("com.parse.ParseObject", $r0, $r3);

     label6:
        $r2 = null;

        goto label3;

     label7:
        $r5 := @caughtexception;

        exitmonitor class "Lcom/parse/ParseObject;";

        throw $r5;

        catch java.text.ParseException from label2 to label3 with label4;
        catch java.lang.Throwable from label1 to label3 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    private boolean isDataAvailable(java.lang.String)
    {
        java.util.Map $r2;
        java.lang.Boolean $r4;
        java.lang.Object $r3;
        java.lang.String $r1;
        com.parse.ParseObject r0;
        boolean $z0;

        r0 := @this: com.parse.ParseObject;

        $r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<com.parse.ParseObject: boolean isDataAvailable()>();

        if $z0 != 0 goto label1;

        $r2 = r0.<com.parse.ParseObject: java.util.Map dataAvailability>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        $r2 = r0.<com.parse.ParseObject: java.util.Map dataAvailability>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    private static void registerFactory(java.lang.String, com.parse.an)
    {
        java.lang.String $r0;
        com.parse.an $r1;
        java.util.Map $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: com.parse.an;

        $r2 = <com.parse.ParseObject: java.util.Map objectFactories>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r0, $r1);

        return;
    }

    public static void saveAll(java.util.List)
    {
        java.util.List $r0;

        $r0 := @parameter0: java.util.List;

        staticinvoke <com.parse.ParseObject: void deepSave(java.lang.Object)>($r0);

        return;
    }

    public static void saveAllInBackground(java.util.List)
    {
        java.util.List $r0;

        $r0 := @parameter0: java.util.List;

        staticinvoke <com.parse.ParseObject: void saveAllInBackground(java.util.List,com.parse.SaveCallback)>($r0, null);

        return;
    }

    public static void saveAllInBackground(java.util.List, com.parse.SaveCallback)
    {
        java.util.List $r0;
        com.parse.SaveCallback $r1;
        com.parse.ae $r2;

        $r0 := @parameter0: java.util.List;

        $r1 := @parameter1: com.parse.SaveCallback;

        $r2 = new com.parse.ae;

        specialinvoke $r2.<com.parse.ae: void <init>(com.parse.k,java.util.List)>($r1, $r0);

        staticinvoke <com.parse.a: int a(com.parse.a)>($r2);

        return;
    }

    static void saveDiskObject(android.content.Context, java.lang.String, org.json.JSONObject)
    {
        java.lang.Throwable $r7, $r8, $r9;
        android.content.Context $r0;
        byte[] $r6;
        java.io.FileOutputStream $r5;
        java.io.File $r3, $r4;
        org.json.JSONObject $r2;
        java.lang.String $r1;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: org.json.JSONObject;

        entermonitor class "Lcom/parse/ParseObject;";

     label1:
        staticinvoke <com.parse.Parse: void setContextIfNeeded(android.content.Context)>($r0);

        $r3 = new java.io.File;

        $r4 = staticinvoke <com.parse.Parse: java.io.File getParseDir()>();

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, $r1);

     label2:
        $r5 = new java.io.FileOutputStream;

     label3:
        specialinvoke $r5.<java.io.FileOutputStream: void <init>(java.io.File)>($r3);

        $r1 = virtualinvoke $r2.<org.json.JSONObject: java.lang.String toString()>();

        $r6 = virtualinvoke $r1.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        virtualinvoke $r5.<java.io.FileOutputStream: void write(byte[])>($r6);

        virtualinvoke $r5.<java.io.FileOutputStream: void close()>();

     label4:
        exitmonitor class "Lcom/parse/ParseObject;";

        return;

     label5:
        $r7 := @caughtexception;

        exitmonitor class "Lcom/parse/ParseObject;";

        throw $r7;

     label6:
        $r8 := @caughtexception;

        goto label4;

     label7:
        $r9 := @caughtexception;

        goto label4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.io.UnsupportedEncodingException from label3 to label4 with label7;
        catch java.io.IOException from label3 to label4 with label6;
        catch java.lang.Throwable from label2 to label4 with label5;
    }

    public void add(java.lang.String, java.lang.Object)
    {
        java.util.List $r3;
        java.lang.Object[] $r4;
        java.lang.Object $r2;
        java.lang.String $r1;
        com.parse.ParseObject r0;

        r0 := @this: com.parse.ParseObject;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = $r2;

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        virtualinvoke r0.<com.parse.ParseObject: void addAll(java.lang.String,java.util.Collection)>($r1, $r3);

        return;
    }

    public void addAll(java.lang.String, java.util.Collection)
    {
        java.util.Collection $r2;
        com.parse.ParseObject r0;
        java.lang.IllegalArgumentException $r6;
        java.util.HashSet $r10;
        java.util.List $r11;
        com.parse.r $r8;
        java.util.Map $r4;
        java.lang.Object $r5, $r7;
        java.lang.String $r1;
        java.util.LinkedList $r3;
        com.parse.h $r9;
        boolean $z0;

        r0 := @this: com.parse.ParseObject;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.util.Collection;

        virtualinvoke r0.<com.parse.ParseObject: void checkIfRunning()>();

        $r4 = r0.<com.parse.ParseObject: java.util.Map data>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        if $r5 == null goto label1;

        $z0 = $r5 instanceof java.util.List;

        if $z0 != 0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can\'t add objects to a key that isn\'t a list.");

        throw $r6;

     label1:
        $r4 = r0.<com.parse.ParseObject: java.util.Map operations>;

        $r7 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r8 = (com.parse.r) $r7;

        if $r8 == null goto label4;

        $z0 = $r8 instanceof com.parse.h;

        if $z0 != 0 goto label2;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can\'t add objects to a key that has another pending operation.");

        throw $r6;

     label2:
        $r9 = (com.parse.h) $r8;

        virtualinvoke $r9.<com.parse.h: void a(java.util.Collection)>($r2);

     label3:
        $r4 = r0.<com.parse.ParseObject: java.util.Map operations>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r9);

        $r10 = r0.<com.parse.ParseObject: java.util.HashSet dirtyKeys>;

        virtualinvoke $r10.<java.util.HashSet: boolean add(java.lang.Object)>($r1);

        return;

     label4:
        $r10 = r0.<com.parse.ParseObject: java.util.HashSet dirtyKeys>;

        $z0 = virtualinvoke $r10.<java.util.HashSet: boolean contains(java.lang.Object)>($r1);

        if $z0 == 0 goto label5;

        $r3 = new java.util.LinkedList;

        $r11 = (java.util.List) $r5;

        specialinvoke $r3.<java.util.LinkedList: void <init>(java.util.Collection)>($r11);

        interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>($r2);

        $r4 = r0.<com.parse.ParseObject: java.util.Map data>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r3);

        return;

     label5:
        $r9 = new com.parse.h;

        specialinvoke $r9.<com.parse.h: void <init>()>();

        virtualinvoke $r9.<com.parse.h: void a(java.util.Collection)>($r2);

        goto label3;
    }

    public void addAllUnique(java.lang.String, java.util.Collection)
    {
        java.util.Collection $r2;
        com.parse.ParseObject r0;
        java.lang.IllegalArgumentException $r7;
        java.util.HashSet $r3;
        java.util.List $r11;
        com.parse.r $r9;
        java.util.Map $r5;
        java.lang.Object $r6, $r8;
        java.lang.String $r1;
        java.util.LinkedList $r4;
        boolean $z0;
        com.parse.i $r10;

        r0 := @this: com.parse.ParseObject;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.util.Collection;

        virtualinvoke r0.<com.parse.ParseObject: void checkIfRunning()>();

        $r5 = r0.<com.parse.ParseObject: java.util.Map data>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        if $r6 == null goto label1;

        $z0 = $r6 instanceof java.util.List;

        if $z0 != 0 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can\'t add unique objects to a key that isn\'t a list.");

        throw $r7;

     label1:
        $r5 = r0.<com.parse.ParseObject: java.util.Map operations>;

        $r8 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r9 = (com.parse.r) $r8;

        if $r9 == null goto label4;

        $z0 = $r9 instanceof com.parse.i;

        if $z0 != 0 goto label2;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can\'t add unique objects to a key that has another pending operation.");

        throw $r7;

     label2:
        $r10 = (com.parse.i) $r9;

        virtualinvoke $r10.<com.parse.i: void a(java.util.Collection)>($r2);

     label3:
        $r5 = r0.<com.parse.ParseObject: java.util.Map operations>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r10);

        $r3 = r0.<com.parse.ParseObject: java.util.HashSet dirtyKeys>;

        virtualinvoke $r3.<java.util.HashSet: boolean add(java.lang.Object)>($r1);

        return;

     label4:
        $r3 = r0.<com.parse.ParseObject: java.util.HashSet dirtyKeys>;

        $z0 = virtualinvoke $r3.<java.util.HashSet: boolean contains(java.lang.Object)>($r1);

        if $z0 == 0 goto label5;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>(java.util.Collection)>($r2);

        $r4 = new java.util.LinkedList;

        $r11 = (java.util.List) $r6;

        specialinvoke $r4.<java.util.LinkedList: void <init>(java.util.Collection)>($r11);

        interfaceinvoke $r3.<java.util.Set: boolean removeAll(java.util.Collection)>($r4);

        interfaceinvoke $r4.<java.util.List: boolean addAll(java.util.Collection)>($r3);

        $r5 = r0.<com.parse.ParseObject: java.util.Map data>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r4);

        return;

     label5:
        $r10 = new com.parse.i;

        specialinvoke $r10.<com.parse.i: void <init>()>();

        virtualinvoke $r10.<com.parse.i: void a(java.util.Collection)>($r2);

        goto label3;
    }

    void addToHashedObjects(java.lang.Object)
    {
        org.json.JSONException $r4;
        java.util.Map $r2;
        java.lang.Object $r1;
        com.parse.ParseObject r0;
        java.lang.IllegalArgumentException $r5;
        com.parse.x $r3;

        r0 := @this: com.parse.ParseObject;

        $r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.parse.ParseObject: java.util.Map hashedObjects>;

        $r3 = new com.parse.x;

     label1:
        specialinvoke $r3.<com.parse.x: void <init>(java.lang.Object)>($r1);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r3);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Couldn\'t serialize container value to JSON.");

        throw $r5;

        catch org.json.JSONException from label1 to label2 with label3;
    }

    public void addUnique(java.lang.String, java.lang.Object)
    {
        java.util.List $r3;
        java.lang.Object[] $r4;
        java.lang.Object $r2;
        java.lang.String $r1;
        com.parse.ParseObject r0;

        r0 := @this: com.parse.ParseObject;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = $r2;

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        virtualinvoke r0.<com.parse.ParseObject: void addAllUnique(java.lang.String,java.util.Collection)>($r1, $r3);

        return;
    }

    protected void checkIfRunning()
    {
        com.parse.ParseObject r0;

        r0 := @this: com.parse.ParseObject;

        virtualinvoke r0.<com.parse.ParseObject: void checkIfRunning(boolean)>(0);

        return;
    }

    protected void checkIfRunning(boolean)
    {
        java.lang.Throwable $r4;
        java.lang.Boolean $r1, $r2;
        java.lang.RuntimeException $r3;
        com.parse.ParseObject r0;
        boolean $z0, $z1;

        r0 := @this: com.parse.ParseObject;

        $z0 := @parameter0: boolean;

        $r1 = r0.<com.parse.ParseObject: java.lang.Boolean isRunning>;

        entermonitor $r1;

     label1:
        $r2 = r0.<com.parse.ParseObject: java.lang.Boolean isRunning>;

        $z1 = virtualinvoke $r2.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 == 0 goto label3;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("This query has an outstanding network connection. You have to wait until it\'s done.");

        throw $r3;

     label2:
        $r4 := @caughtexception;

        exitmonitor $r1;

        throw $r4;

     label3:
        if $z0 == 0 goto label5;

     label4:
        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        r0.<com.parse.ParseObject: java.lang.Boolean isRunning> = $r2;

     label5:
        exitmonitor $r1;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label4 to label6 with label2;
    }

    void clearData()
    {
        java.util.HashSet $r2;
        com.parse.ParseObject r0;
        java.util.Map $r1;

        r0 := @this: com.parse.ParseObject;

        r0.<com.parse.ParseObject: java.util.Date createdAt> = null;

        $r1 = r0.<com.parse.ParseObject: java.util.Map data>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        $r1 = r0.<com.parse.ParseObject: java.util.Map dataAvailability>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        r0.<com.parse.ParseObject: boolean dirty> = 0;

        $r2 = r0.<com.parse.ParseObject: java.util.HashSet dirtyKeys>;

        virtualinvoke $r2.<java.util.HashSet: void clear()>();

        $r1 = r0.<com.parse.ParseObject: java.util.Map hashedObjects>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        r0.<com.parse.ParseObject: java.lang.String objectId> = null;

        $r1 = r0.<com.parse.ParseObject: java.util.Map operations>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        r0.<com.parse.ParseObject: java.util.Date updatedAt> = null;

        return;
    }

    com.parse.l constructDeleteCommand()
    {
        org.json.JSONException $r4;
        org.json.JSONObject $r3;
        com.parse.l $r2;
        java.lang.String $r1;
        java.lang.RuntimeException $r5;
        com.parse.ParseObject r0;

        r0 := @this: com.parse.ParseObject;

        $r2 = new com.parse.l;

        specialinvoke $r2.<com.parse.l: void <init>(java.lang.String)>("delete");

        virtualinvoke $r2.<com.parse.l: void d()>();

        $r1 = r0.<com.parse.ParseObject: java.lang.String className>;

        virtualinvoke $r2.<com.parse.l: void a(java.lang.String,java.lang.String)>("classname", $r1);

        $r3 = new org.json.JSONObject;

        specialinvoke $r3.<org.json.JSONObject: void <init>()>();

        $r1 = r0.<com.parse.ParseObject: java.lang.String objectId>;

     label1:
        virtualinvoke $r3.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("objectId", $r1);

     label2:
        virtualinvoke $r2.<com.parse.l: void a(java.lang.String,org.json.JSONObject)>("data", $r3);

        return $r2;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        $r1 = virtualinvoke $r4.<org.json.JSONException: java.lang.String getMessage()>();

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>($r1);

        throw $r5;

        catch org.json.JSONException from label1 to label2 with label3;
    }

    com.parse.l constructSaveCommand()
    {
        org.json.JSONException $r4;
        org.json.JSONObject $r1;
        com.parse.l $r3;
        java.lang.String $r2;
        java.lang.RuntimeException $r5;
        com.parse.ParseObject r0;
        boolean $z0;

        r0 := @this: com.parse.ParseObject;

        $z0 = virtualinvoke r0.<com.parse.ParseObject: boolean isDirty()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<com.parse.ParseObject: org.json.JSONObject toJSONObject(boolean,boolean)>(0, 0);

        $r2 = r0.<com.parse.ParseObject: java.lang.String objectId>;

        if $r2 != null goto label5;

        $r2 = "create";

     label2:
        $r3 = new com.parse.l;

        specialinvoke $r3.<com.parse.l: void <init>(java.lang.String)>($r2);

        virtualinvoke $r3.<com.parse.l: void d()>();

        $r2 = r0.<com.parse.ParseObject: java.lang.String className>;

        virtualinvoke $r3.<com.parse.l: void a(java.lang.String,java.lang.String)>("classname", $r2);

     label3:
        $r1 = virtualinvoke $r1.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>("data");

        virtualinvoke $r3.<com.parse.l: void a(java.lang.String,org.json.JSONObject)>("data", $r1);

     label4:
        return $r3;

     label5:
        $r2 = "update";

        goto label2;

     label6:
        $r4 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>("could not decode data");

        throw $r5;

        catch org.json.JSONException from label3 to label4 with label6;
    }

    public boolean containsKey(java.lang.String)
    {
        java.util.Map $r2;
        java.lang.String $r1;
        com.parse.ParseObject r0;
        boolean $z0;

        r0 := @this: com.parse.ParseObject;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.parse.ParseObject: java.util.Map data>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        return $z0;
    }

    public void delete()
    {
        com.parse.ParseObject r0;

        r0 := @this: com.parse.ParseObject;

        virtualinvoke r0.<com.parse.ParseObject: void delete(boolean)>(1);

        return;
    }

    protected void delete(boolean)
    {
        java.lang.Throwable $r3;
        com.parse.l $r1;
        java.lang.String $r2;
        com.parse.ParseObject r0;
        boolean $z0;

        r0 := @this: com.parse.ParseObject;

        $z0 := @parameter0: boolean;

        goto label1;

     label1:
        virtualinvoke r0.<com.parse.ParseObject: void validateDelete()>();

        $r2 = r0.<com.parse.ParseObject: java.lang.String objectId>;

     label2:
        if $r2 != null goto label3;

        virtualinvoke r0.<com.parse.ParseObject: void finishedRunning()>();

        return;

     label3:
        $r1 = virtualinvoke r0.<com.parse.ParseObject: com.parse.l constructDeleteCommand()>();

        virtualinvoke $r1.<com.parse.l: java.lang.Object c()>();

        r0.<com.parse.ParseObject: boolean dirty> = 1;

     label4:
        virtualinvoke r0.<com.parse.ParseObject: void finishedRunning()>();

        return;

     label5:
        $r3 := @caughtexception;

        virtualinvoke r0.<com.parse.ParseObject: void finishedRunning()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void deleteEventually()
    {
        com.parse.ak $r1;
        com.parse.ParseObject r0;

        r0 := @this: com.parse.ParseObject;

        $r1 = new com.parse.ak;

        specialinvoke $r1.<com.parse.ak: void <init>(com.parse.ParseObject)>(r0);

        staticinvoke <com.parse.a: int a(com.parse.a)>($r1);

        r0.<com.parse.ParseObject: boolean dirty> = 1;

        return;
    }

    public void deleteInBackground()
    {
        com.parse.ParseObject r0;

        r0 := @this: com.parse.ParseObject;

        virtualinvoke r0.<com.parse.ParseObject: void deleteInBackground(com.parse.DeleteCallback)>(null);

        return;
    }

    public void deleteInBackground(com.parse.DeleteCallback)
    {
        com.parse.ab $r2;
        com.parse.DeleteCallback $r1;
        com.parse.ParseObject r0;

        r0 := @this: com.parse.ParseObject;

        $r1 := @parameter0: com.parse.DeleteCallback;

        virtualinvoke r0.<com.parse.ParseObject: void checkIfRunning(boolean)>(1);

        virtualinvoke r0.<com.parse.ParseObject: void validateDelete()>();

        $r2 = new com.parse.ab;

        specialinvoke $r2.<com.parse.ab: void <init>(com.parse.ParseObject,com.parse.k)>(r0, $r1);

        staticinvoke <com.parse.a: int a(com.parse.a)>($r2);

        return;
    }

    public com.parse.ParseObject fetch()
    {
        com.parse.ParseObject r0;

        r0 := @this: com.parse.ParseObject;

        r0 = virtualinvoke r0.<com.parse.ParseObject: com.parse.ParseObject fetch(boolean)>(1);

        return r0;
    }

    protected com.parse.ParseObject fetch(boolean)
    {
        java.lang.Throwable $r3;
        java.lang.RuntimeException $r8;
        com.parse.ParseObject r0;
        java.lang.IllegalArgumentException $r2;
        org.json.JSONException $r7;
        org.json.JSONObject $r5;
        com.parse.l $r4;
        java.lang.Object $r6;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: com.parse.ParseObject;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label01;

        virtualinvoke r0.<com.parse.ParseObject: void checkIfRunning(boolean)>(1);

     label01:
        $r1 = r0.<com.parse.ParseObject: java.lang.String objectId>;

     label02:
        if $r1 != null goto label05;

     label03:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot refresh an object that hasn\'t been saved to the server.");

        throw $r2;

     label04:
        $r3 := @caughtexception;

        virtualinvoke r0.<com.parse.ParseObject: void finishedRunning()>();

        throw $r3;

     label05:
        $r4 = new com.parse.l;

        specialinvoke $r4.<com.parse.l: void <init>(java.lang.String)>("get");

        virtualinvoke $r4.<com.parse.l: void d()>();

        $r1 = r0.<com.parse.ParseObject: java.lang.String className>;

        virtualinvoke $r4.<com.parse.l: void a(java.lang.String,java.lang.String)>("classname", $r1);

        $r5 = new org.json.JSONObject;

        specialinvoke $r5.<org.json.JSONObject: void <init>()>();

     label06:
        $r1 = r0.<com.parse.ParseObject: java.lang.String objectId>;

     label07:
        virtualinvoke $r5.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("objectId", $r1);

     label08:
        virtualinvoke $r4.<com.parse.l: void a(java.lang.String,org.json.JSONObject)>("data", $r5);

        $r6 = virtualinvoke $r4.<com.parse.l: java.lang.Object c()>();

        $r5 = (org.json.JSONObject) $r6;

        virtualinvoke r0.<com.parse.ParseObject: void mergeObject(org.json.JSONObject,boolean)>($r5, 0);

        r0.<com.parse.ParseObject: boolean hasBeenFetched> = 1;

     label09:
        virtualinvoke r0.<com.parse.ParseObject: void finishedRunning()>();

        return r0;

     label10:
        $r7 := @caughtexception;

     label11:
        $r8 = new java.lang.RuntimeException;

        $r1 = virtualinvoke $r7.<org.json.JSONException: java.lang.String getMessage()>();

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>($r1);

        throw $r8;

     label12:
        nop;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label03 to label04 with label04;
        catch java.lang.Throwable from label05 to label06 with label04;
        catch org.json.JSONException from label07 to label08 with label10;
        catch java.lang.Throwable from label06 to label08 with label04;
        catch java.lang.Throwable from label08 to label09 with label04;
        catch java.lang.Throwable from label11 to label12 with label04;
    }

    public com.parse.ParseObject fetchIfNeeded()
    {
        com.parse.ParseObject r0;

        r0 := @this: com.parse.ParseObject;

        r0 = specialinvoke r0.<com.parse.ParseObject: com.parse.ParseObject fetchIfNeeded(boolean)>(1);

        return r0;
    }

    public void fetchIfNeededInBackground(com.parse.GetCallback)
    {
        com.parse.aa $r2;
        com.parse.ParseObject r0;
        com.parse.GetCallback $r1;
        boolean $z0;

        r0 := @this: com.parse.ParseObject;

        $r1 := @parameter0: com.parse.GetCallback;

        $z0 = virtualinvoke r0.<com.parse.ParseObject: boolean isDataAvailable()>();

        if $z0 == 0 goto label1;

        virtualinvoke $r1.<com.parse.GetCallback: void internalDone(com.parse.ParseObject,com.parse.ParseException)>(r0, null);

     label1:
        virtualinvoke r0.<com.parse.ParseObject: void checkIfRunning(boolean)>(1);

        $r2 = new com.parse.aa;

        specialinvoke $r2.<com.parse.aa: void <init>(com.parse.ParseObject,com.parse.k)>(r0, $r1);

        staticinvoke <com.parse.a: int a(com.parse.a)>($r2);

        return;
    }

    public void fetchInBackground(com.parse.GetCallback)
    {
        com.parse.ParseObject r0;
        com.parse.GetCallback $r1;
        com.parse.am $r2;

        r0 := @this: com.parse.ParseObject;

        $r1 := @parameter0: com.parse.GetCallback;

        virtualinvoke r0.<com.parse.ParseObject: void checkIfRunning(boolean)>(1);

        $r2 = new com.parse.am;

        specialinvoke $r2.<com.parse.am: void <init>(com.parse.ParseObject,com.parse.k)>(r0, $r1);

        staticinvoke <com.parse.a: int a(com.parse.a)>($r2);

        return;
    }

    protected void finishedRunning()
    {
        java.lang.Throwable $r3;
        java.lang.Boolean $r1, $r2;
        com.parse.ParseObject r0;

        r0 := @this: com.parse.ParseObject;

        $r1 = r0.<com.parse.ParseObject: java.lang.Boolean isRunning>;

        entermonitor $r1;

     label1:
        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        r0.<com.parse.ParseObject: java.lang.Boolean isRunning> = $r2;

        exitmonitor $r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r1;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.lang.Object get(java.lang.String)
    {
        com.parse.ParseACL $r4;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String $r1;
        com.parse.ParseObject r0;
        boolean $z0;

        r0 := @this: com.parse.ParseObject;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.parse.ParseObject: void checkGetAccess(java.lang.String)>($r1);

        $r2 = r0.<com.parse.ParseObject: java.util.Map data>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r2 = r0.<com.parse.ParseObject: java.util.Map data>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $z0 = $r3 instanceof com.parse.ParseACL;

        if $z0 == 0 goto label2;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("ACL");

        if $z0 == 0 goto label2;

        $r4 = (com.parse.ParseACL) $r3;

        $z0 = virtualinvoke $r4.<com.parse.ParseACL: boolean isShared()>();

        if $z0 == 0 goto label2;

        $r4 = virtualinvoke $r4.<com.parse.ParseACL: com.parse.ParseACL copy()>();

        $r2 = r0.<com.parse.ParseObject: java.util.Map data>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ACL", $r4);

        virtualinvoke r0.<com.parse.ParseObject: void addToHashedObjects(java.lang.Object)>($r4);

        $r4 = virtualinvoke r0.<com.parse.ParseObject: com.parse.ParseACL getACL()>();

        return $r4;

     label2:
        return $r3;
    }

    public com.parse.ParseACL getACL()
    {
        com.parse.ParseObject r0;
        com.parse.ParseACL $r1;

        r0 := @this: com.parse.ParseObject;

        $r1 = specialinvoke r0.<com.parse.ParseObject: com.parse.ParseACL getACL(boolean)>(1);

        return $r1;
    }

    public boolean getBoolean(java.lang.String)
    {
        java.util.Map $r2;
        java.lang.Boolean $r4;
        java.lang.Object $r3;
        java.lang.String $r1;
        com.parse.ParseObject r0;
        boolean $z0;

        r0 := @this: com.parse.ParseObject;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.parse.ParseObject: void checkGetAccess(java.lang.String)>($r1);

        $r2 = r0.<com.parse.ParseObject: java.util.Map data>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = r0.<com.parse.ParseObject: java.util.Map data>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $z0 = $r3 instanceof java.lang.Boolean;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    public byte[] getBytes(java.lang.String)
    {
        byte[] $r4;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String $r1;
        com.parse.ParseObject r0;
        boolean $z0;

        r0 := @this: com.parse.ParseObject;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.parse.ParseObject: void checkGetAccess(java.lang.String)>($r1);

        $r2 = r0.<com.parse.ParseObject: java.util.Map data>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r2 = r0.<com.parse.ParseObject: java.util.Map data>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $z0 = $r3 instanceof byte[];

        if $z0 != 0 goto label2;

        return null;

     label2:
        $r4 = (byte[]) $r3;

        return $r4;
    }

    public java.lang.String getClassName()
    {
        java.lang.String r1;
        com.parse.ParseObject r0;

        r0 := @this: com.parse.ParseObject;

        r1 = r0.<com.parse.ParseObject: java.lang.String className>;

        return r1;
    }

    public java.util.Date getCreatedAt()
    {
        com.parse.ParseObject r0;
        java.util.Date r1;

        r0 := @this: com.parse.ParseObject;

        r1 = r0.<com.parse.ParseObject: java.util.Date createdAt>;

        return r1;
    }

    public java.util.Date getDate(java.lang.String)
    {
        java.util.Date $r4;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String $r1;
        com.parse.ParseObject r0;
        boolean $z0;

        r0 := @this: com.parse.ParseObject;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.parse.ParseObject: void checkGetAccess(java.lang.String)>($r1);

        $r2 = r0.<com.parse.ParseObject: java.util.Map data>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r2 = r0.<com.parse.ParseObject: java.util.Map data>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $z0 = $r3 instanceof java.util.Date;

        if $z0 != 0 goto label2;

        return null;

     label2:
        $r4 = (java.util.Date) $r3;

        return $r4;
    }

    public double getDouble(java.lang.String)
    {
        java.lang.String $r1;
        com.parse.ParseObject r0;
        java.lang.Number $r2;
        double $d0;

        r0 := @this: com.parse.ParseObject;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<com.parse.ParseObject: java.lang.Number getNumber(java.lang.String)>($r1);

        if $r2 != null goto label1;

        return 0.0;

     label1:
        $d0 = virtualinvoke $r2.<java.lang.Number: double doubleValue()>();

        return $d0;
    }

    public int getInt(java.lang.String)
    {
        int $i0;
        java.lang.String $r1;
        com.parse.ParseObject r0;
        java.lang.Number $r2;

        r0 := @this: com.parse.ParseObject;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<com.parse.ParseObject: java.lang.Number getNumber(java.lang.String)>($r1);

        if $r2 != null goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke $r2.<java.lang.Number: int intValue()>();

        return $i0;
    }

    public org.json.JSONArray getJSONArray(java.lang.String)
    {
        com.parse.ParseObject r0;
        java.util.List $r5;
        java.util.Map $r2;
        java.lang.Object $r3, $r4;
        java.lang.String $r1;
        org.json.JSONArray $r6;
        boolean $z0;

        r0 := @this: com.parse.ParseObject;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.parse.ParseObject: void checkGetAccess(java.lang.String)>($r1);

        $r2 = r0.<com.parse.ParseObject: java.util.Map data>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r2 = r0.<com.parse.ParseObject: java.util.Map data>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = $r3;

        $z0 = $r3 instanceof java.util.List;

        if $z0 == 0 goto label2;

        $r5 = (java.util.List) $r3;

        $r6 = staticinvoke <com.parse.Parse: org.json.JSONArray encodeAsJSONArray(java.util.List)>($r5);

        $r4 = $r6;

        virtualinvoke r0.<com.parse.ParseObject: void put(java.lang.String,java.lang.Object)>($r1, $r6);

     label2:
        $z0 = $r4 instanceof org.json.JSONArray;

        if $z0 != 0 goto label3;

        return null;

     label3:
        $r6 = (org.json.JSONArray) $r4;

        return $r6;
    }

    public org.json.JSONObject getJSONObject(java.lang.String)
    {
        org.json.JSONObject $r5;
        java.util.Map $r2;
        java.lang.Object $r3, $r4;
        java.lang.String $r1;
        com.parse.ParseObject r0;
        boolean $z0;

        r0 := @this: com.parse.ParseObject;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.parse.ParseObject: void checkGetAccess(java.lang.String)>($r1);

        $r2 = r0.<com.parse.ParseObject: java.util.Map data>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r2 = r0.<com.parse.ParseObject: java.util.Map data>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = $r3;

        $z0 = $r3 instanceof java.util.Map;

        if $z0 == 0 goto label2;

        $r5 = staticinvoke <com.parse.Parse: org.json.JSONObject encodeJSONObject(java.lang.Object)>($r3);

        $r4 = $r5;

        virtualinvoke r0.<com.parse.ParseObject: void put(java.lang.String,java.lang.Object)>($r1, $r5);

     label2:
        $z0 = $r4 instanceof org.json.JSONObject;

        if $z0 != 0 goto label3;

        return null;

     label3:
        $r5 = (org.json.JSONObject) $r4;

        return $r5;
    }

    public java.util.List getList(java.lang.String)
    {
        com.parse.ParseObject r0;
        java.util.List $r6;
        java.util.Map $r2;
        java.lang.Object $r3, $r4;
        java.lang.String $r1;
        org.json.JSONArray $r5;
        boolean $z0;

        r0 := @this: com.parse.ParseObject;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.parse.ParseObject: java.util.Map data>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>("channels");

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r2 = r0.<com.parse.ParseObject: java.util.Map data>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>("channels");

        $r4 = $r3;

        $z0 = $r3 instanceof org.json.JSONArray;

        if $z0 == 0 goto label2;

        $r5 = (org.json.JSONArray) $r3;

        $r6 = staticinvoke <com.parse.Parse: java.util.List convertArrayToList(org.json.JSONArray)>($r5);

        $r4 = $r6;

        virtualinvoke r0.<com.parse.ParseObject: void put(java.lang.String,java.lang.Object)>("channels", $r6);

     label2:
        $z0 = $r4 instanceof java.util.List;

        if $z0 != 0 goto label3;

        return null;

     label3:
        $r6 = (java.util.List) $r4;

        return $r6;
    }

    public long getLong(java.lang.String)
    {
        long $l0;
        java.lang.String $r1;
        com.parse.ParseObject r0;
        java.lang.Number $r2;

        r0 := @this: com.parse.ParseObject;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<com.parse.ParseObject: java.lang.Number getNumber(java.lang.String)>($r1);

        if $r2 != null goto label1;

        return 0L;

     label1:
        $l0 = virtualinvoke $r2.<java.lang.Number: long longValue()>();

        return $l0;
    }

    public java.util.Map getMap(java.lang.String)
    {
        org.json.JSONObject $r5;
        java.util.Map $r2;
        java.lang.Object $r3, $r4;
        java.lang.String $r1;
        com.parse.ParseObject r0;
        boolean $z0;

        r0 := @this: com.parse.ParseObject;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.parse.ParseObject: java.util.Map data>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r2 = r0.<com.parse.ParseObject: java.util.Map data>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = $r3;

        $z0 = $r3 instanceof org.json.JSONObject;

        if $z0 == 0 goto label2;

        $r5 = (org.json.JSONObject) $r3;

        $r2 = staticinvoke <com.parse.Parse: java.util.Map convertJSONObjectToMap(org.json.JSONObject)>($r5);

        $r4 = $r2;

        virtualinvoke r0.<com.parse.ParseObject: void put(java.lang.String,java.lang.Object)>($r1, $r2);

     label2:
        $z0 = $r4 instanceof java.util.Map;

        if $z0 != 0 goto label3;

        return null;

     label3:
        $r2 = (java.util.Map) $r4;

        return $r2;
    }

    public java.lang.Number getNumber(java.lang.String)
    {
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String $r1;
        com.parse.ParseObject r0;
        java.lang.Number $r4;
        boolean $z0;

        r0 := @this: com.parse.ParseObject;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.parse.ParseObject: void checkGetAccess(java.lang.String)>($r1);

        $r2 = r0.<com.parse.ParseObject: java.util.Map data>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r2 = r0.<com.parse.ParseObject: java.util.Map data>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $z0 = $r3 instanceof java.lang.Number;

        if $z0 != 0 goto label2;

        return null;

     label2:
        $r4 = (java.lang.Number) $r3;

        return $r4;
    }

    public java.lang.String getObjectId()
    {
        java.lang.String r1;
        com.parse.ParseObject r0;

        r0 := @this: com.parse.ParseObject;

        r1 = r0.<com.parse.ParseObject: java.lang.String objectId>;

        return r1;
    }

    public com.parse.ParseGeoPoint getParseGeoPoint(java.lang.String)
    {
        com.parse.ParseGeoPoint $r4;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String $r1;
        com.parse.ParseObject r0;
        boolean $z0;

        r0 := @this: com.parse.ParseObject;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.parse.ParseObject: void checkGetAccess(java.lang.String)>($r1);

        $r2 = r0.<com.parse.ParseObject: java.util.Map data>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r2 = r0.<com.parse.ParseObject: java.util.Map data>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $z0 = $r3 instanceof com.parse.ParseGeoPoint;

        if $z0 != 0 goto label2;

        return null;

     label2:
        $r4 = (com.parse.ParseGeoPoint) $r3;

        return $r4;
    }

    public com.parse.ParseObject getParseObject(java.lang.String)
    {
        java.lang.Object $r2;
        java.lang.String $r1;
        com.parse.ParseObject r0;
        boolean $z0;

        r0 := @this: com.parse.ParseObject;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<com.parse.ParseObject: java.lang.Object get(java.lang.String)>($r1);

        $z0 = $r2 instanceof com.parse.ParseObject;

        if $z0 != 0 goto label1;

        return null;

     label1:
        r0 = (com.parse.ParseObject) $r2;

        return r0;
    }

    public com.parse.ParseUser getParseUser(java.lang.String)
    {
        java.lang.Object $r2;
        java.lang.String $r1;
        com.parse.ParseObject r0;
        boolean $z0;
        com.parse.ParseUser $r3;

        r0 := @this: com.parse.ParseObject;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<com.parse.ParseObject: java.lang.Object get(java.lang.String)>($r1);

        $z0 = $r2 instanceof com.parse.ParseUser;

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r3 = (com.parse.ParseUser) $r2;

        return $r3;
    }

    public com.parse.ParseRelation getRelation(java.lang.String)
    {
        java.lang.Object $r2;
        java.lang.StringBuilder $r5;
        java.lang.String $r1;
        com.parse.ParseRelation $r3;
        com.parse.ParseObject r0;
        java.lang.IllegalArgumentException $r4;
        boolean $z0;

        r0 := @this: com.parse.ParseObject;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<com.parse.ParseObject: java.lang.Object get(java.lang.String)>($r1);

        if $r2 != null goto label1;

        $r3 = new com.parse.ParseRelation;

        specialinvoke $r3.<com.parse.ParseRelation: void <init>(com.parse.ParseObject,java.lang.String)>(r0, $r1);

        virtualinvoke r0.<com.parse.ParseObject: void put(java.lang.String,java.lang.Object)>($r1, $r3);

        return $r3;

     label1:
        $z0 = $r2 instanceof com.parse.ParseRelation;

        if $z0 != 0 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" contains a non-relation value");

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r4;

     label2:
        $r3 = (com.parse.ParseRelation) $r2;

        return $r3;
    }

    public java.lang.String getString(java.lang.String)
    {
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String $r1;
        com.parse.ParseObject r0;
        boolean $z0;

        r0 := @this: com.parse.ParseObject;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.parse.ParseObject: void checkGetAccess(java.lang.String)>($r1);

        $r2 = r0.<com.parse.ParseObject: java.util.Map data>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r2 = r0.<com.parse.ParseObject: java.util.Map data>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $z0 = $r3 instanceof java.lang.String;

        if $z0 != 0 goto label2;

        return null;

     label2:
        $r1 = (java.lang.String) $r3;

        return $r1;
    }

    public java.util.Date getUpdatedAt()
    {
        com.parse.ParseObject r0;
        java.util.Date r1;

        r0 := @this: com.parse.ParseObject;

        r1 = r0.<com.parse.ParseObject: java.util.Date updatedAt>;

        return r1;
    }

    protected void handleSaveResult(java.lang.String, org.json.JSONObject)
    {
        java.util.Iterator $r5;
        java.util.Set $r4;
        com.parse.ParseRelation $r7;
        com.parse.ParseObject r0;
        com.parse.y $r9;
        java.util.HashSet $r8;
        org.json.JSONObject $r2;
        java.util.Map $r3;
        java.lang.Object $r6;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: com.parse.ParseObject;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.json.JSONObject;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("create");

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("user_signup");

        if $z0 == 0 goto label4;

     label1:
        $z0 = 1;

     label2:
        virtualinvoke r0.<com.parse.ParseObject: void mergeObject(org.json.JSONObject,boolean)>($r2, $z0);

        $r3 = r0.<com.parse.ParseObject: java.util.Map data>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set keySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r1 = (java.lang.String) $r6;

        $r3 = r0.<com.parse.ParseObject: java.util.Map data>;

        $r6 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $z0 = $r6 instanceof com.parse.ParseRelation;

        if $z0 == 0 goto label3;

        $r7 = (com.parse.ParseRelation) $r6;

        virtualinvoke $r7.<com.parse.ParseRelation: void clearChanges()>();

        goto label3;

     label4:
        $z0 = 0;

        goto label2;

     label5:
        $r8 = r0.<com.parse.ParseObject: java.util.HashSet dirtyKeys>;

        virtualinvoke $r8.<java.util.HashSet: void clear()>();

        $r3 = r0.<com.parse.ParseObject: java.util.Map operations>;

        interfaceinvoke $r3.<java.util.Map: void clear()>();

        r0.<com.parse.ParseObject: boolean dirty> = 0;

        $r9 = r0.<com.parse.ParseObject: com.parse.y saveEvent>;

        virtualinvoke $r9.<com.parse.y: void a(java.lang.Object)>(r0);

        return;
    }

    public boolean has(java.lang.String)
    {
        java.lang.String $r1;
        com.parse.ParseObject r0;
        boolean $z0;

        r0 := @this: com.parse.ParseObject;

        $r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<com.parse.ParseObject: boolean containsKey(java.lang.String)>($r1);

        return $z0;
    }

    boolean hasChangedContainers()
    {
        java.util.Iterator $r3;
        java.util.Set $r2;
        com.parse.ParseObject r0;
        java.util.Map $r1;
        java.lang.Object $r4;
        java.lang.String $r5;
        boolean $z0, $z1;

        r0 := @this: com.parse.ParseObject;

        $r1 = r0.<com.parse.ParseObject: java.util.Map data>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        $z0 = 0;

     label1:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.lang.String) $r4;

        $r1 = r0.<com.parse.ParseObject: java.util.Map data>;

        $r4 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        $z1 = staticinvoke <com.parse.Parse: boolean isContainerObject(java.lang.Object)>($r4);

        if $z1 == 0 goto label2;

        $z1 = virtualinvoke r0.<com.parse.ParseObject: boolean isKeyDirty(java.lang.String)>($r5);

        if $z1 == 0 goto label2;

        $z0 = 1;

        goto label1;

     label2:
        $z1 = $r4 instanceof com.parse.ParseRelation;

        if $z1 == 0 goto label1;

        $z1 = virtualinvoke r0.<com.parse.ParseObject: boolean isKeyDirty(java.lang.String)>($r5);

        if $z1 == 0 goto label1;

        $z0 = 1;

        goto label1;

     label3:
        return $z0;
    }

    boolean hasDirtyChildren()
    {
        java.util.Map $r1;
        int $i0;
        com.parse.ParseObject r0;
        java.util.ArrayList $r2;

        r0 := @this: com.parse.ParseObject;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r1 = r0.<com.parse.ParseObject: java.util.Map data>;

        staticinvoke <com.parse.ParseObject: void findUnsavedChildren(java.lang.Object,java.util.List)>($r1, $r2);

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean hasSameId(com.parse.ParseObject)
    {
        java.lang.String $r2, $r3;
        com.parse.ParseObject r0, $r1;
        boolean $z0;

        r0 := @this: com.parse.ParseObject;

        $r1 := @parameter0: com.parse.ParseObject;

        $r2 = virtualinvoke r0.<com.parse.ParseObject: java.lang.String getClassName()>();

        if $r2 == null goto label1;

        $r2 = virtualinvoke r0.<com.parse.ParseObject: java.lang.String getObjectId()>();

        if $r2 == null goto label1;

        $r2 = virtualinvoke r0.<com.parse.ParseObject: java.lang.String getClassName()>();

        $r3 = virtualinvoke $r1.<com.parse.ParseObject: java.lang.String getClassName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<com.parse.ParseObject: java.lang.String getObjectId()>();

        $r3 = virtualinvoke $r1.<com.parse.ParseObject: java.lang.String getObjectId()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void increment(java.lang.String)
    {
        java.lang.String $r1;
        com.parse.ParseObject r0;
        java.lang.Integer $r2;

        r0 := @this: com.parse.ParseObject;

        $r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke r0.<com.parse.ParseObject: void increment(java.lang.String,java.lang.Number)>($r1, $r2);

        return;
    }

    public void increment(java.lang.String, java.lang.Number)
    {
        java.lang.RuntimeException $r7;
        com.parse.ParseObject r0;
        java.lang.IllegalArgumentException $r5;
        java.lang.Integer $r10;
        java.util.HashSet $r11;
        com.parse.w $r8;
        com.parse.r $r6;
        java.util.Map $r3;
        java.lang.Object $r4;
        java.lang.String $r1;
        java.lang.Number $r2, $r9;
        boolean $z0;

        r0 := @this: com.parse.ParseObject;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Number;

        virtualinvoke r0.<com.parse.ParseObject: void checkIfRunning()>();

        $r3 = r0.<com.parse.ParseObject: java.util.Map data>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r3 = r0.<com.parse.ParseObject: java.util.Map data>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $z0 = $r4 instanceof java.lang.Number;

        if $z0 != 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can\'t increment a key that isn\'t a number.");

        throw $r5;

     label1:
        $r3 = r0.<com.parse.ParseObject: java.util.Map operations>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r6 = (com.parse.r) $r4;

        if $r6 == null goto label4;

        $z0 = $r6 instanceof com.parse.w;

        if $z0 != 0 goto label2;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>("Can\'t increment a key that has another pending operation.");

        throw $r7;

     label2:
        $r8 = (com.parse.w) $r6;

        $r9 = virtualinvoke $r8.<com.parse.w: java.lang.Number a()>();

        $r2 = staticinvoke <com.parse.Parse: java.lang.Number addNumbers(java.lang.Number,java.lang.Number)>($r9, $r2);

        virtualinvoke $r8.<com.parse.w: void a(java.lang.Number)>($r2);

     label3:
        $r2 = virtualinvoke $r8.<com.parse.w: java.lang.Number a()>();

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r10);

        if $z0 == 0 goto label6;

        $r3 = r0.<com.parse.ParseObject: java.util.Map operations>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r1);

        $r11 = r0.<com.parse.ParseObject: java.util.HashSet dirtyKeys>;

        virtualinvoke $r11.<java.util.HashSet: boolean remove(java.lang.Object)>($r1);

        return;

     label4:
        $r11 = r0.<com.parse.ParseObject: java.util.HashSet dirtyKeys>;

        $z0 = virtualinvoke $r11.<java.util.HashSet: boolean contains(java.lang.Object)>($r1);

        if $z0 == 0 goto label5;

        $r9 = virtualinvoke r0.<com.parse.ParseObject: java.lang.Number getNumber(java.lang.String)>($r1);

        $r2 = staticinvoke <com.parse.Parse: java.lang.Number addNumbers(java.lang.Number,java.lang.Number)>($r9, $r2);

        virtualinvoke r0.<com.parse.ParseObject: void put(java.lang.String,java.lang.Object)>($r1, $r2);

        return;

     label5:
        $r8 = new com.parse.w;

        specialinvoke $r8.<com.parse.w: void <init>()>();

        virtualinvoke $r8.<com.parse.w: void a(java.lang.Number)>($r2);

        goto label3;

     label6:
        $r3 = r0.<com.parse.ParseObject: java.util.Map operations>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r8);

        $r11 = r0.<com.parse.ParseObject: java.util.HashSet dirtyKeys>;

        virtualinvoke $r11.<java.util.HashSet: boolean add(java.lang.Object)>($r1);

        return;
    }

    public boolean isDataAvailable()
    {
        com.parse.ParseObject r0;
        boolean z0;

        r0 := @this: com.parse.ParseObject;

        z0 = r0.<com.parse.ParseObject: boolean hasBeenFetched>;

        return z0;
    }

    boolean isDirty()
    {
        com.parse.ParseObject r0;
        boolean $z0;

        r0 := @this: com.parse.ParseObject;

        $z0 = virtualinvoke r0.<com.parse.ParseObject: boolean isDirty(boolean)>(1);

        return $z0;
    }

    boolean isDirty(boolean)
    {
        java.util.HashSet $r1;
        com.parse.ParseObject r0;
        boolean $z0, $z1;

        r0 := @this: com.parse.ParseObject;

        $z0 := @parameter0: boolean;

        $z1 = r0.<com.parse.ParseObject: boolean dirty>;

        if $z1 != 0 goto label1;

        $r1 = r0.<com.parse.ParseObject: java.util.HashSet dirtyKeys>;

        $z1 = virtualinvoke $r1.<java.util.HashSet: boolean isEmpty()>();

        if $z1 == 0 goto label1;

        $z1 = virtualinvoke r0.<com.parse.ParseObject: boolean hasChangedContainers()>();

        if $z1 != 0 goto label1;

        if $z0 == 0 goto label2;

        $z0 = virtualinvoke r0.<com.parse.ParseObject: boolean hasDirtyChildren()>();

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    boolean isKeyDirty(java.lang.String)
    {
        java.util.HashSet $r2;
        java.lang.String $r1;
        com.parse.ParseObject r0;
        boolean $z0;

        r0 := @this: com.parse.ParseObject;

        $r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<com.parse.ParseObject: void refreshCacheIfNecessary(java.lang.String)>($r1);

        $r2 = r0.<com.parse.ParseObject: java.util.HashSet dirtyKeys>;

        $z0 = virtualinvoke $r2.<java.util.HashSet: boolean contains(java.lang.Object)>($r1);

        return $z0;
    }

    public java.util.Set keySet()
    {
        java.util.Set $r2;
        com.parse.ParseObject r0;
        java.util.Map $r1;

        r0 := @this: com.parse.ParseObject;

        $r1 = r0.<com.parse.ParseObject: java.util.Map data>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r2 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r2);

        return $r2;
    }

    void mergeObject(org.json.JSONObject, boolean)
    {
        java.util.Date $r3;
        com.parse.ParseObject r0, $r11;
        org.json.JSONException $r12;
        org.json.JSONObject $r1, $r4, $r14;
        com.parse.ParseACL $r15;
        java.util.Map $r8;
        java.lang.Boolean $r13;
        java.lang.String $r2, $r9, $r10;
        boolean $z0, $z1;
        java.util.Iterator $r5;
        com.parse.ParseRelation $r20;
        java.lang.RuntimeException $r21;
        java.util.List $r19;
        java.lang.Object $r6, $r16, $r17, $r18;
        org.json.JSONArray $r7;

        r0 := @this: com.parse.ParseObject;

        $r1 := @parameter0: org.json.JSONObject;

        $z0 := @parameter1: boolean;

        r0.<com.parse.ParseObject: boolean dirty> = 0;

     label01:
        $z1 = virtualinvoke $r1.<org.json.JSONObject: boolean has(java.lang.String)>("id");

     label02:
        if $z1 == 0 goto label05;

        $r2 = r0.<com.parse.ParseObject: java.lang.String objectId>;

        if $r2 != null goto label05;

     label03:
        $r2 = virtualinvoke $r1.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("id");

     label04:
        r0.<com.parse.ParseObject: java.lang.String objectId> = $r2;

     label05:
        $z1 = virtualinvoke $r1.<org.json.JSONObject: boolean has(java.lang.String)>("created_at");

     label06:
        if $z1 == 0 goto label11;

     label07:
        $r2 = virtualinvoke $r1.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("created_at");

     label08:
        if $r2 == null goto label11;

     label09:
        $r3 = staticinvoke <com.parse.ParseObject: java.util.Date impreciseParseDate(java.lang.String)>($r2);

     label10:
        r0.<com.parse.ParseObject: java.util.Date createdAt> = $r3;

     label11:
        $z1 = virtualinvoke $r1.<org.json.JSONObject: boolean has(java.lang.String)>("updated_at");

     label12:
        if $z1 == 0 goto label17;

     label13:
        $r2 = virtualinvoke $r1.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("updated_at");

     label14:
        if $r2 == null goto label17;

     label15:
        $r3 = staticinvoke <com.parse.ParseObject: java.util.Date impreciseParseDate(java.lang.String)>($r2);

     label16:
        r0.<com.parse.ParseObject: java.util.Date updatedAt> = $r3;

     label17:
        $z1 = virtualinvoke $r1.<org.json.JSONObject: boolean has(java.lang.String)>("pointers");

     label18:
        if $z1 == 0 goto label29;

     label19:
        $r4 = virtualinvoke $r1.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>("pointers");

        $r5 = virtualinvoke $r4.<org.json.JSONObject: java.util.Iterator keys()>();

     label20:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

     label21:
        if $z1 == 0 goto label29;

     label22:
        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

     label23:
        $r2 = (java.lang.String) $r6;

     label24:
        $r7 = virtualinvoke $r4.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>($r2);

     label25:
        $r8 = r0.<com.parse.ParseObject: java.util.Map data>;

     label26:
        $r9 = virtualinvoke $r7.<org.json.JSONArray: java.lang.String optString(int)>(0);

        $r10 = virtualinvoke $r7.<org.json.JSONArray: java.lang.String optString(int)>(1);

        $r11 = staticinvoke <com.parse.ParseObject: com.parse.ParseObject createWithoutData(java.lang.String,java.lang.String)>($r9, $r10);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r11);

     label27:
        goto label20;

     label28:
        $r12 := @caughtexception;

        $r21 = new java.lang.RuntimeException;

        $r2 = virtualinvoke $r12.<org.json.JSONException: java.lang.String getMessage()>();

        specialinvoke $r21.<java.lang.RuntimeException: void <init>(java.lang.String)>($r2);

        throw $r21;

     label29:
        $z1 = virtualinvoke $r1.<org.json.JSONObject: boolean has(java.lang.String)>("data");

     label30:
        if $z1 == 0 goto label88;

     label31:
        $r4 = virtualinvoke $r1.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>("data");

        $r5 = virtualinvoke $r4.<org.json.JSONObject: java.util.Iterator keys()>();

     label32:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

     label33:
        if $z1 == 0 goto label88;

     label34:
        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

     label35:
        $r2 = (java.lang.String) $r6;

        $r8 = r0.<com.parse.ParseObject: java.util.Map dataAvailability>;

     label36:
        $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r13);

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("objectId");

     label37:
        if $z1 == 0 goto label40;

     label38:
        $r2 = virtualinvoke $r4.<org.json.JSONObject: java.lang.String getString(java.lang.String)>($r2);

     label39:
        r0.<com.parse.ParseObject: java.lang.String objectId> = $r2;

        goto label32;

     label40:
        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("createdAt");

     label41:
        if $z1 == 0 goto label44;

     label42:
        $r2 = virtualinvoke $r4.<org.json.JSONObject: java.lang.String getString(java.lang.String)>($r2);

        $r3 = staticinvoke <com.parse.Parse: java.util.Date parseDate(java.lang.String)>($r2);

     label43:
        r0.<com.parse.ParseObject: java.util.Date createdAt> = $r3;

        if $z0 == 0 goto label32;

        $r3 = r0.<com.parse.ParseObject: java.util.Date createdAt>;

        r0.<com.parse.ParseObject: java.util.Date updatedAt> = $r3;

        goto label32;

     label44:
        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("updatedAt");

     label45:
        if $z1 == 0 goto label48;

     label46:
        $r2 = virtualinvoke $r4.<org.json.JSONObject: java.lang.String getString(java.lang.String)>($r2);

        $r3 = staticinvoke <com.parse.Parse: java.util.Date parseDate(java.lang.String)>($r2);

     label47:
        r0.<com.parse.ParseObject: java.util.Date updatedAt> = $r3;

        goto label32;

     label48:
        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("ACL");

     label49:
        if $z1 == 0 goto label54;

     label50:
        $r14 = virtualinvoke $r4.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>($r2);

        $r15 = staticinvoke <com.parse.ParseACL: com.parse.ParseACL createACLFromJSONObject(org.json.JSONObject)>($r14);

     label51:
        $r8 = r0.<com.parse.ParseObject: java.util.Map data>;

     label52:
        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ACL", $r15);

        virtualinvoke r0.<com.parse.ParseObject: void addToHashedObjects(java.lang.Object)>($r15);

     label53:
        goto label32;

     label54:
        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("__type");

     label55:
        if $z1 != 0 goto label32;

     label56:
        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("className");

     label57:
        if $z1 != 0 goto label32;

     label58:
        $r6 = virtualinvoke $r4.<org.json.JSONObject: java.lang.Object get(java.lang.String)>($r2);

     label59:
        $r16 = $r6;

     label60:
        $r17 = staticinvoke <com.parse.Parse: java.lang.Object decodeJSONObject(java.lang.Object)>($r6);

     label61:
        $r18 = $r17;

        if $r17 == null goto label70;

     label62:
        $z1 = staticinvoke <com.parse.Parse: boolean isContainerObject(java.lang.Object)>($r17);

     label63:
        if $z1 == 0 goto label67;

        $z1 = $r17 instanceof org.json.JSONArray;

        if $z1 == 0 goto label66;

        $r7 = (org.json.JSONArray) $r17;

     label64:
        $r19 = staticinvoke <com.parse.Parse: java.util.List convertArrayToList(org.json.JSONArray)>($r7);

     label65:
        $r18 = $r19;

     label66:
        virtualinvoke r0.<com.parse.ParseObject: void addToHashedObjects(java.lang.Object)>($r18);

     label67:
        $r8 = r0.<com.parse.ParseObject: java.util.Map data>;

     label68:
        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r18);

     label69:
        goto label32;

     label70:
        $z1 = staticinvoke <com.parse.Parse: boolean isContainerObject(java.lang.Object)>($r6);

     label71:
        if $z1 == 0 goto label85;

        $z1 = $r6 instanceof org.json.JSONArray;

        if $z1 == 0 goto label74;

        $r7 = (org.json.JSONArray) $r6;

     label72:
        $r19 = staticinvoke <com.parse.Parse: java.util.List convertArrayToList(org.json.JSONArray)>($r7);

     label73:
        $r16 = $r19;

     label74:
        $z1 = $r16 instanceof org.json.JSONObject;

        if $z1 == 0 goto label84;

        $r14 = (org.json.JSONObject) $r16;

     label75:
        $z1 = virtualinvoke $r14.<org.json.JSONObject: boolean has(java.lang.String)>("__type");

     label76:
        if $z1 == 0 goto label84;

     label77:
        $r9 = virtualinvoke $r14.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("__type");

        $z1 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>("Relation");

     label78:
        if $z1 == 0 goto label84;

     label79:
        $r9 = virtualinvoke $r14.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("className");

     label80:
        $r20 = new com.parse.ParseRelation;

        $r16 = $r20;

     label81:
        specialinvoke $r20.<com.parse.ParseRelation: void <init>(com.parse.ParseObject,java.lang.String)>(r0, $r2);

     label82:
        $r20 = (com.parse.ParseRelation) $r16;

     label83:
        virtualinvoke $r20.<com.parse.ParseRelation: void setTargetClass(java.lang.String)>($r9);

     label84:
        virtualinvoke r0.<com.parse.ParseObject: void addToHashedObjects(java.lang.Object)>($r16);

     label85:
        $r8 = r0.<com.parse.ParseObject: java.util.Map data>;

     label86:
        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r16);

     label87:
        goto label32;

     label88:
        $z0 = virtualinvoke $r1.<org.json.JSONObject: boolean has(java.lang.String)>("dirty");

     label89:
        if $z0 == 0 goto label92;

     label90:
        $z0 = virtualinvoke $r1.<org.json.JSONObject: boolean getBoolean(java.lang.String)>("dirty");

     label91:
        r0.<com.parse.ParseObject: boolean dirty> = $z0;

     label92:
        return;

        catch org.json.JSONException from label01 to label02 with label28;
        catch org.json.JSONException from label03 to label04 with label28;
        catch org.json.JSONException from label05 to label06 with label28;
        catch org.json.JSONException from label07 to label08 with label28;
        catch org.json.JSONException from label09 to label10 with label28;
        catch org.json.JSONException from label11 to label12 with label28;
        catch org.json.JSONException from label13 to label14 with label28;
        catch org.json.JSONException from label15 to label16 with label28;
        catch org.json.JSONException from label17 to label18 with label28;
        catch org.json.JSONException from label19 to label21 with label28;
        catch org.json.JSONException from label22 to label23 with label28;
        catch org.json.JSONException from label24 to label25 with label28;
        catch org.json.JSONException from label26 to label27 with label28;
        catch org.json.JSONException from label29 to label30 with label28;
        catch org.json.JSONException from label31 to label33 with label28;
        catch org.json.JSONException from label34 to label35 with label28;
        catch org.json.JSONException from label36 to label37 with label28;
        catch org.json.JSONException from label38 to label39 with label28;
        catch org.json.JSONException from label40 to label41 with label28;
        catch org.json.JSONException from label42 to label43 with label28;
        catch org.json.JSONException from label44 to label45 with label28;
        catch org.json.JSONException from label46 to label47 with label28;
        catch org.json.JSONException from label48 to label49 with label28;
        catch org.json.JSONException from label50 to label51 with label28;
        catch org.json.JSONException from label52 to label53 with label28;
        catch org.json.JSONException from label54 to label55 with label28;
        catch org.json.JSONException from label56 to label57 with label28;
        catch org.json.JSONException from label58 to label59 with label28;
        catch org.json.JSONException from label60 to label61 with label28;
        catch org.json.JSONException from label62 to label63 with label28;
        catch org.json.JSONException from label64 to label65 with label28;
        catch org.json.JSONException from label66 to label67 with label28;
        catch org.json.JSONException from label68 to label69 with label28;
        catch org.json.JSONException from label70 to label71 with label28;
        catch org.json.JSONException from label72 to label73 with label28;
        catch org.json.JSONException from label75 to label76 with label28;
        catch org.json.JSONException from label77 to label78 with label28;
        catch org.json.JSONException from label79 to label80 with label28;
        catch org.json.JSONException from label81 to label82 with label28;
        catch org.json.JSONException from label83 to label85 with label28;
        catch org.json.JSONException from label86 to label87 with label28;
        catch org.json.JSONException from label88 to label89 with label28;
        catch org.json.JSONException from label90 to label91 with label28;
    }

    public void put(java.lang.String, java.lang.Object)
    {
        com.parse.ParseObject r0;
        java.lang.IllegalArgumentException $r3;
        java.util.HashSet $r9;
        com.parse.ParseFile $r4;
        java.util.Map $r7;
        java.lang.Boolean $r10;
        java.lang.Object $r2, $r8;
        java.lang.StringBuilder $r5;
        java.lang.Class $r6;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: com.parse.ParseObject;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object;

        virtualinvoke r0.<com.parse.ParseObject: void checkIfRunning()>();

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("key may not be null.");

        throw $r3;

     label1:
        if $r2 != null goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("value may not be null.");

        throw $r3;

     label2:
        $z0 = $r2 instanceof com.parse.ParseFile;

        if $z0 == 0 goto label3;

        $r4 = (com.parse.ParseFile) $r2;

        $z0 = virtualinvoke $r4.<com.parse.ParseFile: boolean isDirty()>();

        if $z0 == 0 goto label3;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ParseFile must be saved before being set on a ParseObject.");

        throw $r3;

     label3:
        $z0 = staticinvoke <com.parse.Parse: boolean isValidType(java.lang.Object)>($r2);

        if $z0 != 0 goto label4;

        $r3 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("invalid type for value: ");

        $r6 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $r1 = virtualinvoke $r6.<java.lang.Class: java.lang.String toString()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r3;

     label4:
        $r7 = r0.<com.parse.ParseObject: java.util.Map operations>;

        $z0 = interfaceinvoke $r7.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        if $z0 == 0 goto label5;

        $r7 = r0.<com.parse.ParseObject: java.util.Map operations>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $z0 = $r8 instanceof com.parse.p;

        if $z0 == 0 goto label5;

        $r7 = r0.<com.parse.ParseObject: java.util.Map operations>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r1);

     label5:
        $z0 = staticinvoke <com.parse.Parse: boolean isContainerObject(java.lang.Object)>($r2);

        if $z0 == 0 goto label6;

        virtualinvoke r0.<com.parse.ParseObject: void addToHashedObjects(java.lang.Object)>($r2);

     label6:
        $r7 = r0.<com.parse.ParseObject: java.util.Map data>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        $r9 = r0.<com.parse.ParseObject: java.util.HashSet dirtyKeys>;

        virtualinvoke $r9.<java.util.HashSet: boolean add(java.lang.Object)>($r1);

        $r7 = r0.<com.parse.ParseObject: java.util.Map dataAvailability>;

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r10);

        return;
    }

    public void refresh()
    {
        com.parse.ParseObject r0;

        r0 := @this: com.parse.ParseObject;

        virtualinvoke r0.<com.parse.ParseObject: com.parse.ParseObject fetch()>();

        return;
    }

    void refreshCacheIfNecessary(java.lang.String)
    {
        com.parse.ParseRelation $r4;
        java.lang.RuntimeException $r10;
        com.parse.ParseObject r0;
        com.parse.x $r7, $r8;
        java.util.HashSet $r5;
        org.json.JSONException $r9;
        java.util.Map $r2;
        java.lang.Object $r3, $r6;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: com.parse.ParseObject;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.parse.ParseObject: java.util.Map data>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $z0 = $r3 instanceof com.parse.ParseRelation;

        if $z0 == 0 goto label1;

        $r4 = (com.parse.ParseRelation) $r3;

        $z0 = virtualinvoke $r4.<com.parse.ParseRelation: boolean isDirty()>();

        if $z0 == 0 goto label1;

        $r5 = r0.<com.parse.ParseObject: java.util.HashSet dirtyKeys>;

        virtualinvoke $r5.<java.util.HashSet: boolean add(java.lang.Object)>($r1);

        return;

     label1:
        if $r3 == null goto label7;

        $z0 = staticinvoke <com.parse.Parse: boolean isContainerObject(java.lang.Object)>($r3);

        if $z0 == 0 goto label7;

        $r2 = r0.<com.parse.ParseObject: java.util.Map hashedObjects>;

        $r6 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        $r7 = (com.parse.x) $r6;

        if $r7 != null goto label2;

        $r5 = r0.<com.parse.ParseObject: java.util.HashSet dirtyKeys>;

        virtualinvoke $r5.<java.util.HashSet: boolean add(java.lang.Object)>($r1);

     label2:
        $r8 = new com.parse.x;

     label3:
        specialinvoke $r8.<com.parse.x: void <init>(java.lang.Object)>($r3);

     label4:
        if $r7 == null goto label5;

        $z0 = virtualinvoke $r7.<com.parse.x: boolean a(com.parse.x)>($r8);

        if $z0 != 0 goto label7;

     label5:
        $r2 = r0.<com.parse.ParseObject: java.util.Map hashedObjects>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r8);

        $r5 = r0.<com.parse.ParseObject: java.util.HashSet dirtyKeys>;

        virtualinvoke $r5.<java.util.HashSet: boolean add(java.lang.Object)>($r1);

        return;

     label6:
        $r9 := @caughtexception;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>()>();

        throw $r10;

     label7:
        return;

        catch org.json.JSONException from label3 to label4 with label6;
    }

    public void refreshInBackground(com.parse.RefreshCallback)
    {
        com.parse.al $r2;
        com.parse.ParseObject r0;
        com.parse.RefreshCallback $r1;

        r0 := @this: com.parse.ParseObject;

        $r1 := @parameter0: com.parse.RefreshCallback;

        $r2 = new com.parse.al;

        specialinvoke $r2.<com.parse.al: void <init>(com.parse.ParseObject,com.parse.RefreshCallback)>(r0, $r1);

        virtualinvoke r0.<com.parse.ParseObject: void fetchInBackground(com.parse.GetCallback)>($r2);

        return;
    }

    void registerSaveListener(com.parse.GetCallback)
    {
        com.parse.ParseObject r0;
        com.parse.GetCallback $r1;
        com.parse.y $r2;

        r0 := @this: com.parse.ParseObject;

        $r1 := @parameter0: com.parse.GetCallback;

        $r2 = r0.<com.parse.ParseObject: com.parse.y saveEvent>;

        virtualinvoke $r2.<com.parse.y: void a(com.parse.k)>($r1);

        return;
    }

    public void remove(java.lang.String)
    {
        java.util.HashSet $r5;
        com.parse.p $r2;
        java.util.Map $r3;
        java.lang.Boolean $r6;
        java.lang.Object $r4;
        java.lang.String $r1;
        com.parse.ParseObject r0;

        r0 := @this: com.parse.ParseObject;

        $r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<com.parse.ParseObject: void checkIfRunning()>();

        $r3 = r0.<com.parse.ParseObject: java.util.Map data>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        if $r4 == null goto label1;

        $r5 = r0.<com.parse.ParseObject: java.util.HashSet dirtyKeys>;

        virtualinvoke $r5.<java.util.HashSet: boolean add(java.lang.Object)>($r1);

        $r3 = r0.<com.parse.ParseObject: java.util.Map operations>;

        $r2 = new com.parse.p;

        specialinvoke $r2.<com.parse.p: void <init>()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        $r3 = r0.<com.parse.ParseObject: java.util.Map hashedObjects>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r4);

        $r3 = r0.<com.parse.ParseObject: java.util.Map data>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r1);

        $r3 = r0.<com.parse.ParseObject: java.util.Map dataAvailability>;

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r6);

     label1:
        return;
    }

    public void removeAll(java.lang.String, java.util.Collection)
    {
        java.util.Collection $r2;
        com.parse.ParseObject r0;
        java.lang.IllegalArgumentException $r6;
        java.util.HashSet $r10;
        java.util.List $r11;
        com.parse.r $r8;
        java.util.Map $r4;
        java.lang.Object $r5, $r7;
        java.lang.String $r1;
        java.util.LinkedList $r3;
        com.parse.ba $r9;
        boolean $z0;

        r0 := @this: com.parse.ParseObject;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.util.Collection;

        virtualinvoke r0.<com.parse.ParseObject: void checkIfRunning()>();

        $r4 = r0.<com.parse.ParseObject: java.util.Map data>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        if $r5 == null goto label1;

        $z0 = $r5 instanceof java.util.List;

        if $z0 != 0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can\'t add unique objects to a key that isn\'t a list.");

        throw $r6;

     label1:
        $r4 = r0.<com.parse.ParseObject: java.util.Map operations>;

        $r7 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r8 = (com.parse.r) $r7;

        if $r8 == null goto label4;

        $z0 = $r8 instanceof com.parse.ba;

        if $z0 != 0 goto label2;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can\'t add unique objects to a key that has another pending operation.");

        throw $r6;

     label2:
        $r9 = (com.parse.ba) $r8;

        virtualinvoke $r9.<com.parse.ba: void a(java.util.Collection)>($r2);

     label3:
        $r4 = r0.<com.parse.ParseObject: java.util.Map operations>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r9);

        $r10 = r0.<com.parse.ParseObject: java.util.HashSet dirtyKeys>;

        virtualinvoke $r10.<java.util.HashSet: boolean add(java.lang.Object)>($r1);

        return;

     label4:
        $r10 = r0.<com.parse.ParseObject: java.util.HashSet dirtyKeys>;

        $z0 = virtualinvoke $r10.<java.util.HashSet: boolean contains(java.lang.Object)>($r1);

        if $z0 == 0 goto label5;

        $r3 = new java.util.LinkedList;

        $r11 = (java.util.List) $r5;

        specialinvoke $r3.<java.util.LinkedList: void <init>(java.util.Collection)>($r11);

        interfaceinvoke $r3.<java.util.List: boolean removeAll(java.util.Collection)>($r2);

        $r4 = r0.<com.parse.ParseObject: java.util.Map data>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r3);

        return;

     label5:
        $r9 = new com.parse.ba;

        specialinvoke $r9.<com.parse.ba: void <init>()>();

        virtualinvoke $r9.<com.parse.ba: void a(java.util.Collection)>($r2);

        goto label3;
    }

    public void save()
    {
        com.parse.ParseObject r0;

        r0 := @this: com.parse.ParseObject;

        virtualinvoke r0.<com.parse.ParseObject: void save(boolean)>(1);

        return;
    }

    protected void save(boolean)
    {
        java.lang.Throwable $r4;
        java.lang.IllegalStateException $r3;
        com.parse.ParseObject r0;
        com.parse.ParseUser $r2;
        com.parse.ParseACL $r1;
        com.parse.ah $r7;
        java.util.Map $r5;
        com.parse.l $r6;
        boolean $z0;

        r0 := @this: com.parse.ParseObject;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label01;

        virtualinvoke r0.<com.parse.ParseObject: void checkIfRunning(boolean)>(1);

     label01:
        virtualinvoke r0.<com.parse.ParseObject: void validateSave()>();

        $z0 = specialinvoke r0.<com.parse.ParseObject: boolean isDataAvailable(java.lang.String)>("ACL");

     label02:
        if $z0 == 0 goto label11;

     label03:
        $r1 = specialinvoke r0.<com.parse.ParseObject: com.parse.ParseACL getACL(boolean)>(0);

     label04:
        if $r1 == null goto label11;

     label05:
        $r1 = specialinvoke r0.<com.parse.ParseObject: com.parse.ParseACL getACL(boolean)>(0);

        $z0 = virtualinvoke $r1.<com.parse.ParseACL: boolean hasUnresolvedUser()>();

     label06:
        if $z0 == 0 goto label11;

     label07:
        $r2 = staticinvoke <com.parse.ParseUser: com.parse.ParseUser getCurrentUser()>();

        virtualinvoke $r2.<com.parse.ParseUser: void save()>();

        $r1 = specialinvoke r0.<com.parse.ParseObject: com.parse.ParseACL getACL(boolean)>(0);

        $z0 = virtualinvoke $r1.<com.parse.ParseACL: boolean hasUnresolvedUser()>();

     label08:
        if $z0 == 0 goto label11;

     label09:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("ACL has an unresolved ParseUser. Save or sign up before attempting to serialize the ACL.");

        throw $r3;

     label10:
        $r4 := @caughtexception;

        virtualinvoke r0.<com.parse.ParseObject: void finishedRunning()>();

        throw $r4;

     label11:
        $r5 = r0.<com.parse.ParseObject: java.util.Map data>;

        staticinvoke <com.parse.ParseObject: void deepSave(java.lang.Object)>($r5);

        $r6 = virtualinvoke r0.<com.parse.ParseObject: com.parse.l constructSaveCommand()>();

     label12:
        if $r6 != null goto label13;

        virtualinvoke r0.<com.parse.ParseObject: void finishedRunning()>();

        return;

     label13:
        $r7 = new com.parse.ah;

        specialinvoke $r7.<com.parse.ah: void <init>(com.parse.ParseObject)>(r0);

        virtualinvoke $r6.<com.parse.l: void a(com.parse.m)>($r7);

        virtualinvoke $r6.<com.parse.l: java.lang.Object c()>();

     label14:
        virtualinvoke r0.<com.parse.ParseObject: void finishedRunning()>();

        return;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label09 to label10 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
        catch java.lang.Throwable from label13 to label14 with label10;
    }

    public void saveEventually()
    {
        java.lang.IllegalStateException $r7;
        com.parse.ParseCommandCache $r8;
        java.util.Iterator $r3;
        com.parse.aj $r10;
        com.parse.ParseException $r11;
        com.parse.ParseObject r0, $r5;
        java.util.ArrayList $r1;
        java.util.Map $r2;
        java.lang.Object $r4;
        com.parse.l $r9;
        java.lang.String $r6;
        boolean $z0;

        r0 := @this: com.parse.ParseObject;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r2 = r0.<com.parse.ParseObject: java.util.Map data>;

        staticinvoke <com.parse.ParseObject: void findUnsavedChildren(java.lang.Object,java.util.List)>($r2, $r1);

        $r3 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (com.parse.ParseObject) $r4;

        $r6 = virtualinvoke $r5.<com.parse.ParseObject: java.lang.String getObjectId()>();

        if $r6 != null goto label1;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unable to saveEventually a ParseObject with a relation to a new, unsaved ParseObject.");

        throw $r7;

     label2:
        $r3 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (com.parse.ParseObject) $r4;

        virtualinvoke $r5.<com.parse.ParseObject: void saveEventually()>();

        goto label3;

     label4:
        $r8 = staticinvoke <com.parse.Parse: com.parse.ParseCommandCache getCommandCache()>();

     label5:
        $r9 = virtualinvoke r0.<com.parse.ParseObject: com.parse.l constructSaveCommand()>();

     label6:
        $r10 = new com.parse.aj;

        specialinvoke $r10.<com.parse.aj: void <init>(com.parse.ParseObject)>(r0);

        virtualinvoke $r9.<com.parse.l: void a(com.parse.m)>($r10);

        virtualinvoke $r8.<com.parse.ParseCommandCache: void a(com.parse.l,com.parse.ParseObject)>($r9, r0);

        return;

     label7:
        $r11 := @caughtexception;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to saveEventually.", $r11);

        throw $r7;

        catch com.parse.ParseException from label5 to label6 with label7;
    }

    public void saveInBackground()
    {
        com.parse.ParseObject r0;

        r0 := @this: com.parse.ParseObject;

        virtualinvoke r0.<com.parse.ParseObject: void saveInBackground(com.parse.SaveCallback)>(null);

        return;
    }

    public void saveInBackground(com.parse.SaveCallback)
    {
        com.parse.ai $r2;
        com.parse.SaveCallback $r1;
        com.parse.ParseObject r0;

        r0 := @this: com.parse.ParseObject;

        $r1 := @parameter0: com.parse.SaveCallback;

        virtualinvoke r0.<com.parse.ParseObject: void checkIfRunning(boolean)>(1);

        $r2 = new com.parse.ai;

        specialinvoke $r2.<com.parse.ai: void <init>(com.parse.ParseObject,com.parse.k)>(r0, $r1);

        staticinvoke <com.parse.a: int a(com.parse.a)>($r2);

        return;
    }

    void saveToDisk(android.content.Context, java.lang.String)
    {
        android.content.Context $r1;
        org.json.JSONObject $r4;
        java.lang.String $r2;
        java.lang.RuntimeException $r3;
        com.parse.ParseObject r0;
        boolean $z0;

        r0 := @this: com.parse.ParseObject;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r0.<com.parse.ParseObject: boolean isDirty()>();

        if $z0 == 0 goto label1;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Can\'t serialize a dirty object to disk.");

        throw $r3;

     label1:
        $r4 = virtualinvoke r0.<com.parse.ParseObject: org.json.JSONObject toJSONObject(boolean,boolean)>(1, 1);

        staticinvoke <com.parse.ParseObject: void saveDiskObject(android.content.Context,java.lang.String,org.json.JSONObject)>($r1, $r2, $r4);

        return;
    }

    public void setACL(com.parse.ParseACL)
    {
        com.parse.ParseObject r0;
        com.parse.ParseACL $r1;

        r0 := @this: com.parse.ParseObject;

        $r1 := @parameter0: com.parse.ParseACL;

        virtualinvoke r0.<com.parse.ParseObject: void put(java.lang.String,java.lang.Object)>("ACL", $r1);

        return;
    }

    public void setObjectId(java.lang.String)
    {
        java.lang.String $r1;
        com.parse.ParseObject r0;

        r0 := @this: com.parse.ParseObject;

        $r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<com.parse.ParseObject: void checkIfRunning()>();

        r0.<com.parse.ParseObject: boolean dirty> = 1;

        r0.<com.parse.ParseObject: java.lang.String objectId> = $r1;

        return;
    }

    org.json.JSONObject toJSONObject(boolean, boolean)
    {
        java.util.Date $r12;
        com.parse.ParseObject r0;
        com.parse.x $r8;
        org.json.JSONException $r9;
        org.json.JSONObject $r1, $r2;
        com.parse.r $r11;
        java.util.Map $r3;
        java.lang.String $r7;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r5;
        java.util.Set $r4;
        java.lang.RuntimeException $r10;
        java.lang.Object $r6;

        r0 := @this: com.parse.ParseObject;

        $z0 := @parameter0: boolean;

        $z1 := @parameter1: boolean;

        $r1 = new org.json.JSONObject;

        specialinvoke $r1.<org.json.JSONObject: void <init>()>();

        $r2 = new org.json.JSONObject;

        specialinvoke $r2.<org.json.JSONObject: void <init>()>();

        $r3 = r0.<com.parse.ParseObject: java.util.Map data>;

     label01:
        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set keySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z2 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

     label03:
        if $z2 == 0 goto label20;

     label04:
        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

     label05:
        $r7 = (java.lang.String) $r6;

        if $z1 != 0 goto label08;

     label06:
        $z2 = virtualinvoke r0.<com.parse.ParseObject: boolean isKeyDirty(java.lang.String)>($r7);

     label07:
        if $z2 == 0 goto label02;

     label08:
        $r3 = r0.<com.parse.ParseObject: java.util.Map data>;

     label09:
        $r6 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7);

        $z2 = staticinvoke <com.parse.Parse: boolean isContainerObject(java.lang.Object)>($r6);

     label10:
        if $z2 == 0 goto label18;

        $r3 = r0.<com.parse.ParseObject: java.util.Map hashedObjects>;

     label11:
        $z2 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>($r6);

     label12:
        if $z2 == 0 goto label18;

        $r3 = r0.<com.parse.ParseObject: java.util.Map hashedObjects>;

     label13:
        $r6 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

     label14:
        $r8 = (com.parse.x) $r6;

     label15:
        $r6 = virtualinvoke $r8.<com.parse.x: java.lang.Object a()>();

        virtualinvoke $r2.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>($r7, $r6);

     label16:
        goto label02;

     label17:
        $r9 := @caughtexception;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String)>("could not serialize object to JSON");

        throw $r10;

     label18:
        $r6 = staticinvoke <com.parse.Parse: java.lang.Object maybeReferenceAndEncode(java.lang.Object)>($r6);

        virtualinvoke $r2.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>($r7, $r6);

     label19:
        goto label02;

     label20:
        $r3 = r0.<com.parse.ParseObject: java.util.Map operations>;

     label21:
        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set keySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label22:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

     label23:
        if $z1 == 0 goto label30;

     label24:
        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

     label25:
        $r7 = (java.lang.String) $r6;

        $r3 = r0.<com.parse.ParseObject: java.util.Map operations>;

     label26:
        $r6 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7);

     label27:
        $r11 = (com.parse.r) $r6;

     label28:
        $r6 = staticinvoke <com.parse.Parse: java.lang.Object maybeEncodeJSONObject(java.lang.Object)>($r11);

        virtualinvoke $r2.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>($r7, $r6);

     label29:
        goto label22;

     label30:
        if $z0 == 0 goto label34;

        $r12 = r0.<com.parse.ParseObject: java.util.Date createdAt>;

        if $r12 == null goto label32;

        $r12 = r0.<com.parse.ParseObject: java.util.Date createdAt>;

     label31:
        $r7 = staticinvoke <com.parse.Parse: java.lang.String encodeDate(java.util.Date)>($r12);

        virtualinvoke $r2.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("createdAt", $r7);

     label32:
        $r12 = r0.<com.parse.ParseObject: java.util.Date updatedAt>;

        if $r12 == null goto label34;

        $r12 = r0.<com.parse.ParseObject: java.util.Date updatedAt>;

     label33:
        $r7 = staticinvoke <com.parse.Parse: java.lang.String encodeDate(java.util.Date)>($r12);

        virtualinvoke $r2.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("updatedAt", $r7);

     label34:
        $r7 = r0.<com.parse.ParseObject: java.lang.String objectId>;

        if $r7 == null goto label36;

        $r7 = r0.<com.parse.ParseObject: java.lang.String objectId>;

     label35:
        virtualinvoke $r2.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("objectId", $r7);

     label36:
        virtualinvoke $r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("data", $r2);

     label37:
        $r7 = r0.<com.parse.ParseObject: java.lang.String className>;

     label38:
        virtualinvoke $r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("classname", $r7);

     label39:
        return $r1;

        catch org.json.JSONException from label01 to label03 with label17;
        catch org.json.JSONException from label04 to label05 with label17;
        catch org.json.JSONException from label06 to label07 with label17;
        catch org.json.JSONException from label09 to label10 with label17;
        catch org.json.JSONException from label11 to label12 with label17;
        catch org.json.JSONException from label13 to label14 with label17;
        catch org.json.JSONException from label15 to label16 with label17;
        catch org.json.JSONException from label18 to label19 with label17;
        catch org.json.JSONException from label21 to label23 with label17;
        catch org.json.JSONException from label24 to label25 with label17;
        catch org.json.JSONException from label26 to label27 with label17;
        catch org.json.JSONException from label28 to label29 with label17;
        catch org.json.JSONException from label31 to label32 with label17;
        catch org.json.JSONException from label33 to label34 with label17;
        catch org.json.JSONException from label35 to label37 with label17;
        catch org.json.JSONException from label38 to label39 with label17;
    }

    void unregisterSaveListener(com.parse.GetCallback)
    {
        com.parse.ParseObject r0;
        com.parse.GetCallback $r1;
        com.parse.y $r2;

        r0 := @this: com.parse.ParseObject;

        $r1 := @parameter0: com.parse.GetCallback;

        $r2 = r0.<com.parse.ParseObject: com.parse.y saveEvent>;

        virtualinvoke $r2.<com.parse.y: void b(com.parse.k)>($r1);

        return;
    }

    void validateDelete()
    {
        com.parse.ParseObject r0;

        r0 := @this: com.parse.ParseObject;

        return;
    }

    void validateSave()
    {
        com.parse.ParseObject r0;

        r0 := @this: com.parse.ParseObject;

        return;
    }
}
