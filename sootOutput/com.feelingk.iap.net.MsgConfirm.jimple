public class com.feelingk.iap.net.MsgConfirm extends com.feelingk.iap.net.Confirm
{
    private byte[] mMessage;
    private int mMessageLength;
    private java.lang.String mSWDumpMessage;
    private java.lang.String mUserMessage;

    public void <init>()
    {
        com.feelingk.iap.net.MsgConfirm r0;

        r0 := @this: com.feelingk.iap.net.MsgConfirm;

        specialinvoke r0.<com.feelingk.iap.net.Confirm: void <init>()>();

        r0.<com.feelingk.iap.net.MsgConfirm: int mMessageLength> = 0;

        r0.<com.feelingk.iap.net.MsgConfirm: java.lang.String mUserMessage> = null;

        r0.<com.feelingk.iap.net.MsgConfirm: java.lang.String mSWDumpMessage> = null;

        return;
    }

    public java.lang.String GetDumpMessage()
    {
        com.feelingk.iap.net.MsgConfirm r0;
        java.lang.String r1;

        r0 := @this: com.feelingk.iap.net.MsgConfirm;

        r1 = r0.<com.feelingk.iap.net.MsgConfirm: java.lang.String mSWDumpMessage>;

        return r1;
    }

    public java.lang.String GetUserMessage()
    {
        com.feelingk.iap.net.MsgConfirm r0;
        java.lang.String r1;

        r0 := @this: com.feelingk.iap.net.MsgConfirm;

        r1 = r0.<com.feelingk.iap.net.MsgConfirm: java.lang.String mUserMessage>;

        return r1;
    }

    public void SetDumpMessage(java.lang.String)
    {
        com.feelingk.iap.net.MsgConfirm r0;
        java.lang.String $r1;

        r0 := @this: com.feelingk.iap.net.MsgConfirm;

        $r1 := @parameter0: java.lang.String;

        r0.<com.feelingk.iap.net.MsgConfirm: java.lang.String mSWDumpMessage> = $r1;

        return;
    }

    public void SetUserMessage(java.lang.String)
    {
        com.feelingk.iap.net.MsgConfirm r0;
        java.lang.String $r1;

        r0 := @this: com.feelingk.iap.net.MsgConfirm;

        $r1 := @parameter0: java.lang.String;

        r0.<com.feelingk.iap.net.MsgConfirm: java.lang.String mUserMessage> = $r1;

        return;
    }

    public byte[] getMsg()
    {
        com.feelingk.iap.net.MsgConfirm r0;
        byte[] r1;

        r0 := @this: com.feelingk.iap.net.MsgConfirm;

        r1 = r0.<com.feelingk.iap.net.MsgConfirm: byte[] mMessage>;

        return r1;
    }

    public int getMsgLength()
    {
        int i0;
        com.feelingk.iap.net.MsgConfirm r0;

        r0 := @this: com.feelingk.iap.net.MsgConfirm;

        i0 = r0.<com.feelingk.iap.net.MsgConfirm: int mMessageLength>;

        return i0;
    }

    protected void parse(byte[])
    {
        byte[] $r1, $r2;
        com.feelingk.iap.net.MsgConfirm r0;
        java.lang.Exception $r3;
        byte $b1;
        int $i0;
        java.lang.StringBuilder $r4, $r6;
        java.lang.String $r5;

        r0 := @this: com.feelingk.iap.net.MsgConfirm;

        $r1 := @parameter0: byte[];

        specialinvoke r0.<com.feelingk.iap.net.Confirm: void parse(byte[])>($r1);

        $b1 = $r1[13];

        $i0 = (int) $b1;

        r0.<com.feelingk.iap.net.MsgConfirm: int mMessageLength> = $i0;

        $i0 = r0.<com.feelingk.iap.net.MsgConfirm: int mMessageLength>;

        $r2 = newarray (byte)[$i0];

        r0.<com.feelingk.iap.net.MsgConfirm: byte[] mMessage> = $r2;

     label1:
        $r2 = r0.<com.feelingk.iap.net.MsgConfirm: byte[] mMessage>;

        $i0 = r0.<com.feelingk.iap.net.MsgConfirm: int mMessageLength>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 14, $r2, 0, $i0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("[MsgConfirm] :");

        $r5 = virtualinvoke $r3.<java.lang.Exception: java.lang.String toString()>();

        $r4 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.feelingk.iap.util.CommonF$LOGGER: void i(java.lang.String,java.lang.String)>("IAPNet", $r5);

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }
}
