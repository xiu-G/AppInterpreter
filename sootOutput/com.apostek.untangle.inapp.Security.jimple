public class com.apostek.untangle.inapp.Security extends java.lang.Object
{
    private static final java.lang.String KEY_FACTORY_ALGORITHM;
    private static final java.security.SecureRandom RANDOM;
    private static final java.lang.String SIGNATURE_ALGORITHM;
    private static final java.lang.String TAG;
    private static java.util.HashSet sKnownNonces;

    static void <clinit>()
    {
        java.security.SecureRandom $r0;
        java.util.HashSet $r1;

        <com.apostek.untangle.inapp.Security: java.lang.String TAG> = "Security";

        <com.apostek.untangle.inapp.Security: java.lang.String SIGNATURE_ALGORITHM> = "SHA1withRSA";

        <com.apostek.untangle.inapp.Security: java.lang.String KEY_FACTORY_ALGORITHM> = "RSA";

        $r0 = new java.security.SecureRandom;

        specialinvoke $r0.<java.security.SecureRandom: void <init>()>();

        <com.apostek.untangle.inapp.Security: java.security.SecureRandom RANDOM> = $r0;

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        <com.apostek.untangle.inapp.Security: java.util.HashSet sKnownNonces> = $r1;

        return;
    }

    public void <init>()
    {
        com.apostek.untangle.inapp.Security r0;

        r0 := @this: com.apostek.untangle.inapp.Security;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static long generateNonce()
    {
        java.security.SecureRandom $r0;
        java.util.HashSet $r1;
        java.lang.Long $r2;
        long $l0;

        $r0 = <com.apostek.untangle.inapp.Security: java.security.SecureRandom RANDOM>;

        $l0 = virtualinvoke $r0.<java.security.SecureRandom: long nextLong()>();

        $r1 = <com.apostek.untangle.inapp.Security: java.util.HashSet sKnownNonces>;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        virtualinvoke $r1.<java.util.HashSet: boolean add(java.lang.Object)>($r2);

        return $l0;
    }

    public static java.security.PublicKey generatePublicKey(java.lang.String)
    {
        java.lang.Throwable r5, r7;
        byte[] $r1;
        java.security.PublicKey $r4;
        java.lang.RuntimeException $r6;
        java.lang.IllegalArgumentException $r8;
        java.security.spec.X509EncodedKeySpec $r3;
        java.security.KeyFactory $r2;
        com.apostek.untangle.utils.Base64DecoderException r9;
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <com.apostek.untangle.utils.Base64: byte[] decode(java.lang.String)>("MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAjN67JdbEW9RfmqLTSfUCRXJl8eVyJKsLH4sJcBSR+K4IZShECbqARxI7GJqRjadnPc0DJCjrTduV9oT8tWXi8je2h66H7uX4Fy7mlOfWPUpcOwTxzvkZvZyWORK8Wo4uk4IgL1VdE8NiKLG8H4u2gv6WSdbBZyN0Um7cD1T1BOphx8qEwq340Qp9eP0ljOPybTb8MenI65S0nz792wK7M3YfTal4Bi7vgVBDcu+tFaGMEm6YHsP3hSqIDMLuZpgt6RY8zAXJF8lFXvp3yYQATNtZAerzdRPuU305pRtLiIrmRxgH1gMNLzSms7PP6XdpWpu6tyGA9QLaMcqTJcH9MwIDAQAB");

        $r2 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>("RSA");

     label2:
        $r3 = new java.security.spec.X509EncodedKeySpec;

     label3:
        specialinvoke $r3.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>($r1);

        $r4 = virtualinvoke $r2.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r3);

     label4:
        return $r4;

     label5:
        r5 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r5);

        throw $r6;

     label6:
        r7 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Security", "Invalid key specification.");

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>(r7);

        throw $r8;

     label7:
        r9 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Security", "Base64 decoding failed.");

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>(r9);

        throw $r8;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label5;
        catch java.security.NoSuchAlgorithmException from label3 to label4 with label5;
        catch java.security.spec.InvalidKeySpecException from label1 to label2 with label6;
        catch java.security.spec.InvalidKeySpecException from label3 to label4 with label6;
        catch com.apostek.untangle.utils.Base64DecoderException from label1 to label2 with label7;
        catch com.apostek.untangle.utils.Base64DecoderException from label3 to label4 with label7;
    }

    public static boolean isNonceKnown(long)
    {
        java.util.HashSet $r0;
        java.lang.Long $r1;
        long $l0;
        boolean $z0;

        $l0 := @parameter0: long;

        $r0 = <com.apostek.untangle.inapp.Security: java.util.HashSet sKnownNonces>;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $z0 = virtualinvoke $r0.<java.util.HashSet: boolean contains(java.lang.Object)>($r1);

        return $z0;
    }

    public static void removeNonce(long)
    {
        java.util.HashSet $r0;
        long $l0;
        java.lang.Long $r1;

        $l0 := @parameter0: long;

        $r0 = <com.apostek.untangle.inapp.Security: java.util.HashSet sKnownNonces>;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        virtualinvoke $r0.<java.util.HashSet: boolean remove(java.lang.Object)>($r1);

        return;
    }

    public static boolean verify(java.security.PublicKey, java.lang.String, java.lang.String)
    {
        java.lang.Throwable r7, r8, r9;
        byte[] $r6;
        java.security.Signature $r5;
        java.security.PublicKey $r0;
        com.apostek.untangle.utils.Base64DecoderException r10;
        java.lang.StringBuilder $r3;
        java.lang.String $r1, $r2, $r4;
        boolean $z0;

        $r0 := @parameter0: java.security.PublicKey;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("signature: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("Security", $r4);

     label1:
        $r5 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>("SHA1withRSA");

        virtualinvoke $r5.<java.security.Signature: void initVerify(java.security.PublicKey)>($r0);

        $r6 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        virtualinvoke $r5.<java.security.Signature: void update(byte[])>($r6);

        $r6 = staticinvoke <com.apostek.untangle.utils.Base64: byte[] decode(java.lang.String)>($r2);

        $z0 = virtualinvoke $r5.<java.security.Signature: boolean verify(byte[])>($r6);

     label2:
        if $z0 != 0 goto label5;

     label3:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Security", "Signature verification failed.");

     label4:
        return 0;

     label5:
        return 1;

     label6:
        r7 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Security", "NoSuchAlgorithmException.");

        return 0;

     label7:
        r8 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Security", "Invalid key specification.");

        return 0;

     label8:
        r9 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Security", "Signature exception.");

        return 0;

     label9:
        r10 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Security", "Base64 decoding failed.");

        return 0;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label6;
        catch java.security.NoSuchAlgorithmException from label3 to label4 with label6;
        catch java.security.InvalidKeyException from label1 to label2 with label7;
        catch java.security.InvalidKeyException from label3 to label4 with label7;
        catch java.security.SignatureException from label1 to label2 with label8;
        catch java.security.SignatureException from label3 to label4 with label8;
        catch com.apostek.untangle.utils.Base64DecoderException from label1 to label2 with label9;
        catch com.apostek.untangle.utils.Base64DecoderException from label3 to label4 with label9;
    }

    public static java.util.ArrayList verifyPurchase(java.lang.String, java.lang.String)
    {
        long $l1, $l4;
        java.util.ArrayList r8;
        org.json.JSONException r7, r13;
        org.json.JSONObject r2;
        com.apostek.untangle.inapp.Security$VerifiedPurchase $r12;
        int i0, i2, $i3;
        java.lang.String $r0, $r1, $r4, $r10;
        boolean z0, $z1;
        java.security.PublicKey $r5;
        java.lang.StringBuilder $r3;
        com.apostek.untangle.inapp.Consts$PurchaseState $r9, $r11;
        org.json.JSONArray $r6;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        if $r0 != null goto label01;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Security", "data is null");

        return null;

     label01:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("signedData: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("Security", $r4);

        z0 = 0;

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r1);

        if $z1 != 0 goto label02;

        $r5 = staticinvoke <com.apostek.untangle.inapp.Security: java.security.PublicKey generatePublicKey(java.lang.String)>("MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAjN67JdbEW9RfmqLTSfUCRXJl8eVyJKsLH4sJcBSR+K4IZShECbqARxI7GJqRjadnPc0DJCjrTduV9oT8tWXi8je2h66H7uX4Fy7mlOfWPUpcOwTxzvkZvZyWORK8Wo4uk4IgL1VdE8NiKLG8H4u2gv6WSdbBZyN0Um7cD1T1BOphx8qEwq340Qp9eP0ljOPybTb8MenI65S0nz792wK7M3YfTal4Bi7vgVBDcu+tFaGMEm6YHsP3hSqIDMLuZpgt6RY8zAXJF8lFXvp3yYQATNtZAerzdRPuU305pRtLiIrmRxgH1gMNLzSms7PP6XdpWpu6tyGA9QLaMcqTJcH9MwIDAQAB");

        $z1 = staticinvoke <com.apostek.untangle.inapp.Security: boolean verify(java.security.PublicKey,java.lang.String,java.lang.String)>($r5, $r0, $r1);

        z0 = $z1;

        if $z1 != 0 goto label02;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Security", "signature does not match data.");

        return null;

     label02:
        i0 = 0;

        r2 = new org.json.JSONObject;

     label03:
        specialinvoke r2.<org.json.JSONObject: void <init>(java.lang.String)>($r0);

        $l1 = virtualinvoke r2.<org.json.JSONObject: long optLong(java.lang.String)>("nonce");

        $r6 = virtualinvoke r2.<org.json.JSONObject: org.json.JSONArray optJSONArray(java.lang.String)>("orders");

     label04:
        if $r6 == null goto label06;

     label05:
        i0 = virtualinvoke $r6.<org.json.JSONArray: int length()>();

     label06:
        $z1 = staticinvoke <com.apostek.untangle.inapp.Security: boolean isNonceKnown(long)>($l1);

        if $z1 != 0 goto label08;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Nonce not found: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r0 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Security", $r0);

        return null;

     label07:
        r7 := @caughtexception;

        return null;

     label08:
        r8 = new java.util.ArrayList;

        specialinvoke r8.<java.util.ArrayList: void <init>()>();

        i2 = 0;

     label09:
        if i2 < i0 goto label10;

        staticinvoke <com.apostek.untangle.inapp.Security: void removeNonce(long)>($l1);

        return r8;

     label10:
        r2 = virtualinvoke $r6.<org.json.JSONArray: org.json.JSONObject getJSONObject(int)>(i2);

        $i3 = virtualinvoke r2.<org.json.JSONObject: int getInt(java.lang.String)>("purchaseState");

        $r9 = staticinvoke <com.apostek.untangle.inapp.Consts$PurchaseState: com.apostek.untangle.inapp.Consts$PurchaseState valueOf(int)>($i3);

        $r0 = virtualinvoke r2.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("productId");

        virtualinvoke r2.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("packageName");

        $l4 = virtualinvoke r2.<org.json.JSONObject: long getLong(java.lang.String)>("purchaseTime");

        $r1 = virtualinvoke r2.<org.json.JSONObject: java.lang.String optString(java.lang.String,java.lang.String)>("orderId", "");

     label11:
        $r4 = null;

     label12:
        $z1 = virtualinvoke r2.<org.json.JSONObject: boolean has(java.lang.String)>("notificationId");

     label13:
        if $z1 == 0 goto label15;

     label14:
        $r4 = virtualinvoke r2.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("notificationId");

     label15:
        $r10 = virtualinvoke r2.<org.json.JSONObject: java.lang.String optString(java.lang.String,java.lang.String)>("developerPayload", null);

     label16:
        $r11 = <com.apostek.untangle.inapp.Consts$PurchaseState: com.apostek.untangle.inapp.Consts$PurchaseState PURCHASED>;

        if $r9 != $r11 goto label18;

        if z0 != 0 goto label18;

     label17:
        i2 = i2 + 1;

        goto label09;

     label18:
        $r12 = new com.apostek.untangle.inapp.Security$VerifiedPurchase;

     label19:
        specialinvoke $r12.<com.apostek.untangle.inapp.Security$VerifiedPurchase: void <init>(com.apostek.untangle.inapp.Consts$PurchaseState,java.lang.String,java.lang.String,java.lang.String,long,java.lang.String)>($r9, $r4, $r0, $r1, $l4, $r10);

        virtualinvoke r8.<java.util.ArrayList: boolean add(java.lang.Object)>($r12);

     label20:
        goto label17;

     label21:
        r13 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("Security", "JSON exception: ", r13);

        return null;

        catch org.json.JSONException from label03 to label04 with label07;
        catch org.json.JSONException from label05 to label06 with label07;
        catch org.json.JSONException from label10 to label11 with label21;
        catch org.json.JSONException from label12 to label13 with label21;
        catch org.json.JSONException from label14 to label15 with label21;
        catch org.json.JSONException from label15 to label16 with label21;
        catch org.json.JSONException from label19 to label20 with label21;
    }
}
