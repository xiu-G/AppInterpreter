public class proguard.classfile.editor.InnerClassesAccessFixer extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.attribute.visitor.InnerClassesInfoVisitor, proguard.classfile.constant.visitor.ConstantVisitor, proguard.classfile.visitor.ClassVisitor
{
    private int innerClassAccessFlags;

    public void <init>()
    {
        proguard.classfile.editor.InnerClassesAccessFixer r0;

        r0 := @this: proguard.classfile.editor.InnerClassesAccessFixer;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        return;
    }

    public void visitAnyConstant(proguard.classfile.Clazz, proguard.classfile.constant.Constant)
    {
        proguard.classfile.editor.InnerClassesAccessFixer r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.constant.Constant $r2;

        r0 := @this: proguard.classfile.editor.InnerClassesAccessFixer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.Constant;

        return;
    }

    public void visitClassConstant(proguard.classfile.Clazz, proguard.classfile.constant.ClassConstant)
    {
        proguard.classfile.constant.ClassConstant $r2;
        proguard.classfile.editor.InnerClassesAccessFixer r0;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.classfile.editor.InnerClassesAccessFixer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.ClassConstant;

        virtualinvoke $r2.<proguard.classfile.constant.ClassConstant: void referencedClassAccept(proguard.classfile.visitor.ClassVisitor)>(r0);

        return;
    }

    public void visitInnerClassesInfo(proguard.classfile.Clazz, proguard.classfile.attribute.InnerClassesInfo)
    {
        proguard.classfile.Clazz $r1;
        int $i0;
        proguard.classfile.editor.InnerClassesAccessFixer r0;
        proguard.classfile.attribute.InnerClassesInfo $r2;

        r0 := @this: proguard.classfile.editor.InnerClassesAccessFixer;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.InnerClassesInfo;

        $i0 = $r2.<proguard.classfile.attribute.InnerClassesInfo: int u2innerClassAccessFlags>;

        r0.<proguard.classfile.editor.InnerClassesAccessFixer: int innerClassAccessFlags> = $i0;

        virtualinvoke $r2.<proguard.classfile.attribute.InnerClassesInfo: void innerClassConstantAccept(proguard.classfile.Clazz,proguard.classfile.constant.visitor.ConstantVisitor)>($r1, r0);

        $i0 = r0.<proguard.classfile.editor.InnerClassesAccessFixer: int innerClassAccessFlags>;

        $r2.<proguard.classfile.attribute.InnerClassesInfo: int u2innerClassAccessFlags> = $i0;

        return;
    }

    public void visitLibraryClass(proguard.classfile.LibraryClass)
    {
        proguard.classfile.LibraryClass $r1;
        proguard.classfile.editor.InnerClassesAccessFixer r0;

        r0 := @this: proguard.classfile.editor.InnerClassesAccessFixer;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        return;
    }

    public void visitProgramClass(proguard.classfile.ProgramClass)
    {
        int $i0, $i1;
        proguard.classfile.editor.InnerClassesAccessFixer r0;
        proguard.classfile.ProgramClass $r1;

        r0 := @this: proguard.classfile.editor.InnerClassesAccessFixer;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $i1 = r0.<proguard.classfile.editor.InnerClassesAccessFixer: int innerClassAccessFlags>;

        $i0 = $r1.<proguard.classfile.ProgramClass: int u2accessFlags>;

        $i0 = staticinvoke <proguard.classfile.util.AccessUtil: int replaceAccessFlags(int,int)>($i1, $i0);

        r0.<proguard.classfile.editor.InnerClassesAccessFixer: int innerClassAccessFlags> = $i0;

        return;
    }
}
