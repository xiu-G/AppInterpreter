public class proguard.optimize.ConstantParameterFilter extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.visitor.MemberVisitor
{
    private final proguard.classfile.visitor.MemberVisitor constantParameterVisitor;

    public void <init>(proguard.classfile.visitor.MemberVisitor)
    {
        proguard.classfile.visitor.MemberVisitor $r1;
        proguard.optimize.ConstantParameterFilter r0;

        r0 := @this: proguard.optimize.ConstantParameterFilter;

        $r1 := @parameter0: proguard.classfile.visitor.MemberVisitor;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        r0.<proguard.optimize.ConstantParameterFilter: proguard.classfile.visitor.MemberVisitor constantParameterVisitor> = $r1;

        return;
    }

    public void visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod)
    {
        proguard.classfile.visitor.MemberVisitor $r5;
        proguard.classfile.ProgramClass $r1;
        proguard.optimize.ConstantParameterFilter r0;
        proguard.classfile.ProgramMethod $r2;
        int $i0, $i1;
        java.lang.String $r3;
        proguard.evaluation.value.Value $r4;
        boolean $z0;

        r0 := @this: proguard.optimize.ConstantParameterFilter;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.ProgramMethod;

        $i0 = virtualinvoke $r2.<proguard.classfile.ProgramMethod: int getAccessFlags()>();

        $i0 = $i0 & 8;

        if $i0 == 0 goto label4;

        $i0 = 0;

     label1:
        $r3 = virtualinvoke $r2.<proguard.classfile.ProgramMethod: java.lang.String getDescriptor(proguard.classfile.Clazz)>($r1);

        $i1 = staticinvoke <proguard.classfile.util.ClassUtil: int internalMethodParameterCount(java.lang.String)>($r3);

     label2:
        if $i0 >= $i1 goto label5;

        $r4 = staticinvoke <proguard.optimize.evaluation.StoringInvocationUnit: proguard.evaluation.value.Value getMethodParameterValue(proguard.classfile.Method,int)>($r2, $i0);

        if $r4 == null goto label3;

        $z0 = virtualinvoke $r4.<proguard.evaluation.value.Value: boolean isParticular()>();

        if $z0 == 0 goto label3;

        $r5 = r0.<proguard.optimize.ConstantParameterFilter: proguard.classfile.visitor.MemberVisitor constantParameterVisitor>;

        interfaceinvoke $r5.<proguard.classfile.visitor.MemberVisitor: void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod)>($r1, $r2);

     label3:
        $i0 = $i0 + 1;

        goto label2;

     label4:
        $i0 = 1;

        goto label1;

     label5:
        return;
    }
}
