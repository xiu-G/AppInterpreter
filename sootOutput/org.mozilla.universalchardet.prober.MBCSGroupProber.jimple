public class org.mozilla.universalchardet.prober.MBCSGroupProber extends org.mozilla.universalchardet.prober.CharsetProber
{
    private int activeNum;
    private int bestGuess;
    private boolean[] isActive;
    private org.mozilla.universalchardet.prober.CharsetProber[] probers;
    private org.mozilla.universalchardet.prober.CharsetProber$ProbingState state;

    public void <init>()
    {
        org.mozilla.universalchardet.prober.GB18030Prober $r6;
        org.mozilla.universalchardet.prober.EUCKRProber $r7;
        boolean[] $r2;
        org.mozilla.universalchardet.prober.MBCSGroupProber r0;
        org.mozilla.universalchardet.prober.SJISProber $r4;
        org.mozilla.universalchardet.prober.EUCTWProber $r9;
        org.mozilla.universalchardet.prober.Big5Prober $r8;
        org.mozilla.universalchardet.prober.UTF8Prober $r3;
        org.mozilla.universalchardet.prober.CharsetProber[] $r1;
        org.mozilla.universalchardet.prober.EUCJPProber $r5;

        r0 := @this: org.mozilla.universalchardet.prober.MBCSGroupProber;

        specialinvoke r0.<org.mozilla.universalchardet.prober.CharsetProber: void <init>()>();

        $r1 = newarray (org.mozilla.universalchardet.prober.CharsetProber)[7];

        r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers> = $r1;

        $r2 = newarray (boolean)[7];

        r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: boolean[] isActive> = $r2;

        $r1 = r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $r3 = new org.mozilla.universalchardet.prober.UTF8Prober;

        specialinvoke $r3.<org.mozilla.universalchardet.prober.UTF8Prober: void <init>()>();

        $r1[0] = $r3;

        $r1 = r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $r4 = new org.mozilla.universalchardet.prober.SJISProber;

        specialinvoke $r4.<org.mozilla.universalchardet.prober.SJISProber: void <init>()>();

        $r1[1] = $r4;

        $r1 = r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $r5 = new org.mozilla.universalchardet.prober.EUCJPProber;

        specialinvoke $r5.<org.mozilla.universalchardet.prober.EUCJPProber: void <init>()>();

        $r1[2] = $r5;

        $r1 = r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $r6 = new org.mozilla.universalchardet.prober.GB18030Prober;

        specialinvoke $r6.<org.mozilla.universalchardet.prober.GB18030Prober: void <init>()>();

        $r1[3] = $r6;

        $r1 = r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $r7 = new org.mozilla.universalchardet.prober.EUCKRProber;

        specialinvoke $r7.<org.mozilla.universalchardet.prober.EUCKRProber: void <init>()>();

        $r1[4] = $r7;

        $r1 = r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $r8 = new org.mozilla.universalchardet.prober.Big5Prober;

        specialinvoke $r8.<org.mozilla.universalchardet.prober.Big5Prober: void <init>()>();

        $r1[5] = $r8;

        $r1 = r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $r9 = new org.mozilla.universalchardet.prober.EUCTWProber;

        specialinvoke $r9.<org.mozilla.universalchardet.prober.EUCTWProber: void <init>()>();

        $r1[6] = $r9;

        virtualinvoke r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: void reset()>();

        return;
    }

    public java.lang.String getCharSetName()
    {
        org.mozilla.universalchardet.prober.CharsetProber $r3;
        org.mozilla.universalchardet.prober.CharsetProber[] $r2;
        int $i0;
        org.mozilla.universalchardet.prober.MBCSGroupProber r0;
        java.lang.String $r1;

        r0 := @this: org.mozilla.universalchardet.prober.MBCSGroupProber;

        $i0 = r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: int bestGuess>;

        if $i0 != -1 goto label1;

        virtualinvoke r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: float getConfidence()>();

        $i0 = r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: int bestGuess>;

        if $i0 != -1 goto label1;

        r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: int bestGuess> = 0;

     label1:
        $r2 = r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $i0 = r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: int bestGuess>;

        $r3 = $r2[$i0];

        $r1 = virtualinvoke $r3.<org.mozilla.universalchardet.prober.CharsetProber: java.lang.String getCharSetName()>();

        return $r1;
    }

    public float getConfidence()
    {
        org.mozilla.universalchardet.prober.CharsetProber $r5;
        org.mozilla.universalchardet.prober.CharsetProber$ProbingState $r1, $r2;
        boolean[] $r4;
        org.mozilla.universalchardet.prober.MBCSGroupProber r0;
        org.mozilla.universalchardet.prober.CharsetProber[] $r3;
        byte $b0;
        int $i1, $i2;
        float $f0, $f1;
        boolean $z0;

        r0 := @this: org.mozilla.universalchardet.prober.MBCSGroupProber;

        $f1 = 0.0F;

        $r1 = r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state>;

        $r2 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState FOUND_IT>;

        if $r1 != $r2 goto label1;

        return 0.99F;

     label1:
        $r1 = r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state>;

        $r2 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState NOT_ME>;

        if $r1 != $r2 goto label2;

        return 0.01F;

     label2:
        $i1 = 0;

     label3:
        $r3 = r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $i2 = lengthof $r3;

        if $i1 >= $i2 goto label6;

        $r4 = r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: boolean[] isActive>;

        $z0 = $r4[$i1];

        if $z0 != 0 goto label5;

     label4:
        $i1 = $i1 + 1;

        goto label3;

     label5:
        $r3 = r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $r5 = $r3[$i1];

        $f0 = virtualinvoke $r5.<org.mozilla.universalchardet.prober.CharsetProber: float getConfidence()>();

        $b0 = $f1 cmpg $f0;

        $i2 = (int) $b0;

        if $i2 >= 0 goto label4;

        r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: int bestGuess> = $i1;

        $f1 = $f0;

        goto label4;

     label6:
        return $f1;
    }

    public org.mozilla.universalchardet.prober.CharsetProber$ProbingState getState()
    {
        org.mozilla.universalchardet.prober.CharsetProber$ProbingState r1;
        org.mozilla.universalchardet.prober.MBCSGroupProber r0;

        r0 := @this: org.mozilla.universalchardet.prober.MBCSGroupProber;

        r1 = r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state>;

        return r1;
    }

    public org.mozilla.universalchardet.prober.CharsetProber$ProbingState handleData(byte[], int, int)
    {
        org.mozilla.universalchardet.prober.CharsetProber $r6;
        byte[] $r1, $r2;
        org.mozilla.universalchardet.prober.CharsetProber$ProbingState $r3, $r7;
        boolean[] $r5;
        org.mozilla.universalchardet.prober.MBCSGroupProber r0;
        short $s4;
        org.mozilla.universalchardet.prober.CharsetProber[] $r4;
        byte $b3;
        int $i0, $i1, $i2, $i5;
        boolean $z0;

        r0 := @this: org.mozilla.universalchardet.prober.MBCSGroupProber;

        $r1 := @parameter0: byte[];

        $i1 := @parameter1: int;

        $i0 := @parameter2: int;

        $r2 = newarray (byte)[$i0];

        $i2 = 0 + $i0;

        $i0 = 0;

        $z0 = 1;

     label01:
        if $i1 >= $i2 goto label04;

        $b3 = $r1[$i1];

        $s4 = (short) $b3;

        $s4 = $s4 & 128;

        if $s4 == 0 goto label03;

        $i5 = $i0 + 1;

        $b3 = $r1[$i1];

        $r2[$i0] = $b3;

        $z0 = 1;

     label02:
        $i1 = $i1 + 1;

        $i0 = $i5;

        goto label01;

     label03:
        if $z0 == 0 goto label10;

        $i5 = $i0 + 1;

        $b3 = $r1[$i1];

        $r2[$i0] = $b3;

        $z0 = 0;

        goto label02;

     label04:
        $i1 = 0;

     label05:
        $r4 = r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $i2 = lengthof $r4;

        if $i1 >= $i2 goto label08;

        $r5 = r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: boolean[] isActive>;

        $z0 = $r5[$i1];

        if $z0 != 0 goto label07;

     label06:
        $i1 = $i1 + 1;

        goto label05;

     label07:
        $r4 = r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $r6 = $r4[$i1];

        $r3 = virtualinvoke $r6.<org.mozilla.universalchardet.prober.CharsetProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState handleData(byte[],int,int)>($r2, 0, $i0);

        $r7 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState FOUND_IT>;

        if $r3 != $r7 goto label09;

        r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: int bestGuess> = $i1;

        $r3 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState FOUND_IT>;

        r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state> = $r3;

     label08:
        $r3 = r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state>;

        return $r3;

     label09:
        $r7 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState NOT_ME>;

        if $r3 != $r7 goto label06;

        $r5 = r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: boolean[] isActive>;

        $r5[$i1] = 0;

        $i2 = r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: int activeNum>;

        $i2 = $i2 + -1;

        r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: int activeNum> = $i2;

        $i2 = r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: int activeNum>;

        if $i2 > 0 goto label06;

        $r3 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState NOT_ME>;

        r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state> = $r3;

        goto label08;

     label10:
        $i5 = $i0;

        goto label02;
    }

    public void reset()
    {
        org.mozilla.universalchardet.prober.CharsetProber $r2;
        org.mozilla.universalchardet.prober.CharsetProber$ProbingState $r4;
        org.mozilla.universalchardet.prober.CharsetProber[] $r1;
        int $i0, $i1;
        boolean[] $r3;
        org.mozilla.universalchardet.prober.MBCSGroupProber r0;

        r0 := @this: org.mozilla.universalchardet.prober.MBCSGroupProber;

        $i0 = 0;

        r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: int activeNum> = 0;

     label1:
        $r1 = r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label2;

        $r1 = r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $r2 = $r1[$i0];

        virtualinvoke $r2.<org.mozilla.universalchardet.prober.CharsetProber: void reset()>();

        $r3 = r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: boolean[] isActive>;

        $r3[$i0] = 1;

        $i1 = r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: int activeNum>;

        $i1 = $i1 + 1;

        r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: int activeNum> = $i1;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: int bestGuess> = -1;

        $r4 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState DETECTING>;

        r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state> = $r4;

        return;
    }

    public void setOption()
    {
        org.mozilla.universalchardet.prober.MBCSGroupProber r0;

        r0 := @this: org.mozilla.universalchardet.prober.MBCSGroupProber;

        return;
    }
}
