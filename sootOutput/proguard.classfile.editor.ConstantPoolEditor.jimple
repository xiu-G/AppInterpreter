public class proguard.classfile.editor.ConstantPoolEditor extends java.lang.Object
{
    private static final boolean DEBUG;
    private proguard.classfile.ProgramClass targetClass;

    public void <init>(proguard.classfile.ProgramClass)
    {
        proguard.classfile.editor.ConstantPoolEditor r0;
        proguard.classfile.ProgramClass $r1;

        r0 := @this: proguard.classfile.editor.ConstantPoolEditor;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<proguard.classfile.editor.ConstantPoolEditor: proguard.classfile.ProgramClass targetClass> = $r1;

        return;
    }

    public int addClassConstant(java.lang.String, proguard.classfile.Clazz)
    {
        proguard.classfile.constant.ClassConstant $r6;
        proguard.classfile.constant.Constant $r5;
        proguard.classfile.ProgramClass $r4;
        proguard.classfile.Clazz $r2;
        int $i0, $i1, $i2;
        proguard.classfile.constant.Constant[] $r3;
        java.lang.String $r1, $r7;
        proguard.classfile.editor.ConstantPoolEditor r0;
        boolean $z0;

        r0 := @this: proguard.classfile.editor.ConstantPoolEditor;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: proguard.classfile.Clazz;

        $r4 = r0.<proguard.classfile.editor.ConstantPoolEditor: proguard.classfile.ProgramClass targetClass>;

        $i0 = $r4.<proguard.classfile.ProgramClass: int u2constantPoolCount>;

        $r4 = r0.<proguard.classfile.editor.ConstantPoolEditor: proguard.classfile.ProgramClass targetClass>;

        $r3 = $r4.<proguard.classfile.ProgramClass: proguard.classfile.constant.Constant[] constantPool>;

        $i1 = 1;

     label1:
        if $i1 >= $i0 goto label3;

        $r5 = $r3[$i1];

        if $r5 == null goto label2;

        $i2 = virtualinvoke $r5.<proguard.classfile.constant.Constant: int getTag()>();

        if $i2 != 7 goto label2;

        $r6 = (proguard.classfile.constant.ClassConstant) $r5;

        $r4 = r0.<proguard.classfile.editor.ConstantPoolEditor: proguard.classfile.ProgramClass targetClass>;

        $r7 = virtualinvoke $r6.<proguard.classfile.constant.ClassConstant: java.lang.String getName(proguard.classfile.Clazz)>($r4);

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        return $i1;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        $i0 = virtualinvoke r0.<proguard.classfile.editor.ConstantPoolEditor: int addUtf8Constant(java.lang.String)>($r1);

        $r6 = new proguard.classfile.constant.ClassConstant;

        specialinvoke $r6.<proguard.classfile.constant.ClassConstant: void <init>(int,proguard.classfile.Clazz)>($i0, $r2);

        $i0 = virtualinvoke r0.<proguard.classfile.editor.ConstantPoolEditor: int addConstant(proguard.classfile.constant.Constant)>($r6);

        return $i0;
    }

    public int addClassConstant(proguard.classfile.Clazz)
    {
        proguard.classfile.Clazz $r1;
        int $i0;
        java.lang.String $r2;
        proguard.classfile.editor.ConstantPoolEditor r0;

        r0 := @this: proguard.classfile.editor.ConstantPoolEditor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 = interfaceinvoke $r1.<proguard.classfile.Clazz: java.lang.String getName()>();

        $i0 = virtualinvoke r0.<proguard.classfile.editor.ConstantPoolEditor: int addClassConstant(java.lang.String,proguard.classfile.Clazz)>($r2, $r1);

        return $i0;
    }

    public int addConstant(proguard.classfile.constant.Constant)
    {
        proguard.classfile.constant.Constant $r1;
        proguard.classfile.ProgramClass $r2;
        int $i0, $i1, $i2;
        proguard.classfile.constant.Constant[] $r3, $r4;
        proguard.classfile.editor.ConstantPoolEditor r0;

        r0 := @this: proguard.classfile.editor.ConstantPoolEditor;

        $r1 := @parameter0: proguard.classfile.constant.Constant;

        $r2 = r0.<proguard.classfile.editor.ConstantPoolEditor: proguard.classfile.ProgramClass targetClass>;

        $i1 = $r2.<proguard.classfile.ProgramClass: int u2constantPoolCount>;

        $r2 = r0.<proguard.classfile.editor.ConstantPoolEditor: proguard.classfile.ProgramClass targetClass>;

        $r3 = $r2.<proguard.classfile.ProgramClass: proguard.classfile.constant.Constant[] constantPool>;

        $i0 = lengthof $r3;

        $i2 = $i1 + 2;

        if $i0 >= $i2 goto label1;

        $r2 = r0.<proguard.classfile.editor.ConstantPoolEditor: proguard.classfile.ProgramClass targetClass>;

        $i0 = $i1 + 2;

        $r4 = newarray (proguard.classfile.constant.Constant)[$i0];

        $r2.<proguard.classfile.ProgramClass: proguard.classfile.constant.Constant[] constantPool> = $r4;

        $r2 = r0.<proguard.classfile.editor.ConstantPoolEditor: proguard.classfile.ProgramClass targetClass>;

        $r4 = $r2.<proguard.classfile.ProgramClass: proguard.classfile.constant.Constant[] constantPool>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r4, 0, $i1);

        $r2 = r0.<proguard.classfile.editor.ConstantPoolEditor: proguard.classfile.ProgramClass targetClass>;

        $r3 = $r2.<proguard.classfile.ProgramClass: proguard.classfile.constant.Constant[] constantPool>;

     label1:
        $r2 = r0.<proguard.classfile.editor.ConstantPoolEditor: proguard.classfile.ProgramClass targetClass>;

        $i0 = $r2.<proguard.classfile.ProgramClass: int u2constantPoolCount>;

        $i2 = $i0 + 1;

        $r2.<proguard.classfile.ProgramClass: int u2constantPoolCount> = $i2;

        $r3[$i0] = $r1;

        $i0 = virtualinvoke $r1.<proguard.classfile.constant.Constant: int getTag()>();

        if $i0 == 5 goto label2;

        if $i0 != 6 goto label3;

     label2:
        $r2 = r0.<proguard.classfile.editor.ConstantPoolEditor: proguard.classfile.ProgramClass targetClass>;

        $i0 = $r2.<proguard.classfile.ProgramClass: int u2constantPoolCount>;

        $i2 = $i0 + 1;

        $r2.<proguard.classfile.ProgramClass: int u2constantPoolCount> = $i2;

        $r3[$i0] = null;

     label3:
        return $i1;
    }

    public int addDoubleConstant(double)
    {
        proguard.classfile.constant.Constant $r3;
        proguard.classfile.ProgramClass $r2;
        proguard.classfile.constant.DoubleConstant $r4;
        byte $b3;
        int $i0, $i1, $i2;
        proguard.classfile.constant.Constant[] $r1;
        proguard.classfile.editor.ConstantPoolEditor r0;
        double $d0, $d1;

        r0 := @this: proguard.classfile.editor.ConstantPoolEditor;

        $d0 := @parameter0: double;

        $r2 = r0.<proguard.classfile.editor.ConstantPoolEditor: proguard.classfile.ProgramClass targetClass>;

        $i0 = $r2.<proguard.classfile.ProgramClass: int u2constantPoolCount>;

        $r2 = r0.<proguard.classfile.editor.ConstantPoolEditor: proguard.classfile.ProgramClass targetClass>;

        $r1 = $r2.<proguard.classfile.ProgramClass: proguard.classfile.constant.Constant[] constantPool>;

        $i1 = 1;

     label1:
        if $i1 >= $i0 goto label3;

        $r3 = $r1[$i1];

        if $r3 == null goto label2;

        $i2 = virtualinvoke $r3.<proguard.classfile.constant.Constant: int getTag()>();

        if $i2 != 6 goto label2;

        $r4 = (proguard.classfile.constant.DoubleConstant) $r3;

        $d1 = virtualinvoke $r4.<proguard.classfile.constant.DoubleConstant: double getValue()>();

        $b3 = $d1 cmpl $d0;

        if $b3 != 0 goto label2;

        return $i1;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        $r4 = new proguard.classfile.constant.DoubleConstant;

        specialinvoke $r4.<proguard.classfile.constant.DoubleConstant: void <init>(double)>($d0);

        $i0 = virtualinvoke r0.<proguard.classfile.editor.ConstantPoolEditor: int addConstant(proguard.classfile.constant.Constant)>($r4);

        return $i0;
    }

    public int addFieldrefConstant(int, int, proguard.classfile.Clazz, proguard.classfile.Member)
    {
        proguard.classfile.constant.Constant $r5;
        proguard.classfile.constant.FieldrefConstant $r6;
        proguard.classfile.ProgramClass $r4;
        proguard.classfile.Member $r2;
        proguard.classfile.Clazz $r1;
        int $i0, $i1, $i2, $i3, $i4;
        proguard.classfile.constant.Constant[] $r3;
        proguard.classfile.editor.ConstantPoolEditor r0;

        r0 := @this: proguard.classfile.editor.ConstantPoolEditor;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: proguard.classfile.Clazz;

        $r2 := @parameter3: proguard.classfile.Member;

        $r4 = r0.<proguard.classfile.editor.ConstantPoolEditor: proguard.classfile.ProgramClass targetClass>;

        $i2 = $r4.<proguard.classfile.ProgramClass: int u2constantPoolCount>;

        $r4 = r0.<proguard.classfile.editor.ConstantPoolEditor: proguard.classfile.ProgramClass targetClass>;

        $r3 = $r4.<proguard.classfile.ProgramClass: proguard.classfile.constant.Constant[] constantPool>;

        $i3 = 1;

     label1:
        if $i3 >= $i2 goto label3;

        $r5 = $r3[$i3];

        if $r5 == null goto label2;

        $i4 = virtualinvoke $r5.<proguard.classfile.constant.Constant: int getTag()>();

        if $i4 != 9 goto label2;

        $r6 = (proguard.classfile.constant.FieldrefConstant) $r5;

        $i4 = $r6.<proguard.classfile.constant.FieldrefConstant: int u2classIndex>;

        if $i4 != $i0 goto label2;

        $i4 = $r6.<proguard.classfile.constant.FieldrefConstant: int u2nameAndTypeIndex>;

        if $i4 != $i1 goto label2;

        return $i3;

     label2:
        $i3 = $i3 + 1;

        goto label1;

     label3:
        $r6 = new proguard.classfile.constant.FieldrefConstant;

        specialinvoke $r6.<proguard.classfile.constant.FieldrefConstant: void <init>(int,int,proguard.classfile.Clazz,proguard.classfile.Member)>($i0, $i1, $r1, $r2);

        $i0 = virtualinvoke r0.<proguard.classfile.editor.ConstantPoolEditor: int addConstant(proguard.classfile.constant.Constant)>($r6);

        return $i0;
    }

    public int addFieldrefConstant(int, java.lang.String, java.lang.String, proguard.classfile.Clazz, proguard.classfile.Member)
    {
        proguard.classfile.Clazz $r3;
        int $i0, $i1;
        java.lang.String $r1, $r2;
        proguard.classfile.editor.ConstantPoolEditor r0;
        proguard.classfile.Member $r4;

        r0 := @this: proguard.classfile.editor.ConstantPoolEditor;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: proguard.classfile.Clazz;

        $r4 := @parameter4: proguard.classfile.Member;

        $i1 = virtualinvoke r0.<proguard.classfile.editor.ConstantPoolEditor: int addNameAndTypeConstant(java.lang.String,java.lang.String)>($r1, $r2);

        $i0 = virtualinvoke r0.<proguard.classfile.editor.ConstantPoolEditor: int addFieldrefConstant(int,int,proguard.classfile.Clazz,proguard.classfile.Member)>($i0, $i1, $r3, $r4);

        return $i0;
    }

    public int addFieldrefConstant(java.lang.String, int, proguard.classfile.Clazz, proguard.classfile.Member)
    {
        proguard.classfile.Clazz $r2;
        int $i0, $i1;
        java.lang.String $r1;
        proguard.classfile.editor.ConstantPoolEditor r0;
        proguard.classfile.Member $r3;

        r0 := @this: proguard.classfile.editor.ConstantPoolEditor;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 := @parameter2: proguard.classfile.Clazz;

        $r3 := @parameter3: proguard.classfile.Member;

        $i1 = virtualinvoke r0.<proguard.classfile.editor.ConstantPoolEditor: int addClassConstant(java.lang.String,proguard.classfile.Clazz)>($r1, $r2);

        $i0 = virtualinvoke r0.<proguard.classfile.editor.ConstantPoolEditor: int addFieldrefConstant(int,int,proguard.classfile.Clazz,proguard.classfile.Member)>($i1, $i0, $r2, $r3);

        return $i0;
    }

    public int addFieldrefConstant(java.lang.String, java.lang.String, java.lang.String, proguard.classfile.Clazz, proguard.classfile.Member)
    {
        proguard.classfile.Clazz $r4;
        int $i0;
        java.lang.String $r1, $r2, $r3;
        proguard.classfile.editor.ConstantPoolEditor r0;
        proguard.classfile.Member $r5;

        r0 := @this: proguard.classfile.editor.ConstantPoolEditor;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: proguard.classfile.Clazz;

        $r5 := @parameter4: proguard.classfile.Member;

        $i0 = virtualinvoke r0.<proguard.classfile.editor.ConstantPoolEditor: int addNameAndTypeConstant(java.lang.String,java.lang.String)>($r2, $r3);

        $i0 = virtualinvoke r0.<proguard.classfile.editor.ConstantPoolEditor: int addFieldrefConstant(java.lang.String,int,proguard.classfile.Clazz,proguard.classfile.Member)>($r1, $i0, $r4, $r5);

        return $i0;
    }

    public int addFieldrefConstant(proguard.classfile.Clazz, proguard.classfile.Member)
    {
        proguard.classfile.Clazz $r1;
        int $i0;
        java.lang.String $r3, $r4, $r5;
        proguard.classfile.editor.ConstantPoolEditor r0;
        proguard.classfile.Member $r2;

        r0 := @this: proguard.classfile.editor.ConstantPoolEditor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Member;

        $r3 = interfaceinvoke $r1.<proguard.classfile.Clazz: java.lang.String getName()>();

        $r4 = interfaceinvoke $r2.<proguard.classfile.Member: java.lang.String getName(proguard.classfile.Clazz)>($r1);

        $r5 = interfaceinvoke $r2.<proguard.classfile.Member: java.lang.String getDescriptor(proguard.classfile.Clazz)>($r1);

        $i0 = virtualinvoke r0.<proguard.classfile.editor.ConstantPoolEditor: int addFieldrefConstant(java.lang.String,java.lang.String,java.lang.String,proguard.classfile.Clazz,proguard.classfile.Member)>($r3, $r4, $r5, $r1, $r2);

        return $i0;
    }

    public int addFloatConstant(float)
    {
        proguard.classfile.constant.FloatConstant $r4;
        proguard.classfile.constant.Constant $r3;
        proguard.classfile.ProgramClass $r2;
        byte $b3;
        int $i0, $i1, $i2;
        float $f0, $f1;
        proguard.classfile.constant.Constant[] $r1;
        proguard.classfile.editor.ConstantPoolEditor r0;

        r0 := @this: proguard.classfile.editor.ConstantPoolEditor;

        $f0 := @parameter0: float;

        $r2 = r0.<proguard.classfile.editor.ConstantPoolEditor: proguard.classfile.ProgramClass targetClass>;

        $i0 = $r2.<proguard.classfile.ProgramClass: int u2constantPoolCount>;

        $r2 = r0.<proguard.classfile.editor.ConstantPoolEditor: proguard.classfile.ProgramClass targetClass>;

        $r1 = $r2.<proguard.classfile.ProgramClass: proguard.classfile.constant.Constant[] constantPool>;

        $i1 = 1;

     label1:
        if $i1 >= $i0 goto label3;

        $r3 = $r1[$i1];

        if $r3 == null goto label2;

        $i2 = virtualinvoke $r3.<proguard.classfile.constant.Constant: int getTag()>();

        if $i2 != 4 goto label2;

        $r4 = (proguard.classfile.constant.FloatConstant) $r3;

        $f1 = virtualinvoke $r4.<proguard.classfile.constant.FloatConstant: float getValue()>();

        $b3 = $f1 cmpl $f0;

        if $b3 != 0 goto label2;

        return $i1;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        $r4 = new proguard.classfile.constant.FloatConstant;

        specialinvoke $r4.<proguard.classfile.constant.FloatConstant: void <init>(float)>($f0);

        $i0 = virtualinvoke r0.<proguard.classfile.editor.ConstantPoolEditor: int addConstant(proguard.classfile.constant.Constant)>($r4);

        return $i0;
    }

    public int addIntegerConstant(int)
    {
        proguard.classfile.constant.IntegerConstant $r4;
        proguard.classfile.constant.Constant $r3;
        proguard.classfile.ProgramClass $r2;
        int $i0, $i1, $i2, $i3;
        proguard.classfile.constant.Constant[] $r1;
        proguard.classfile.editor.ConstantPoolEditor r0;

        r0 := @this: proguard.classfile.editor.ConstantPoolEditor;

        $i0 := @parameter0: int;

        $r2 = r0.<proguard.classfile.editor.ConstantPoolEditor: proguard.classfile.ProgramClass targetClass>;

        $i1 = $r2.<proguard.classfile.ProgramClass: int u2constantPoolCount>;

        $r2 = r0.<proguard.classfile.editor.ConstantPoolEditor: proguard.classfile.ProgramClass targetClass>;

        $r1 = $r2.<proguard.classfile.ProgramClass: proguard.classfile.constant.Constant[] constantPool>;

        $i2 = 1;

     label1:
        if $i2 >= $i1 goto label3;

        $r3 = $r1[$i2];

        if $r3 == null goto label2;

        $i3 = virtualinvoke $r3.<proguard.classfile.constant.Constant: int getTag()>();

        if $i3 != 3 goto label2;

        $r4 = (proguard.classfile.constant.IntegerConstant) $r3;

        $i3 = virtualinvoke $r4.<proguard.classfile.constant.IntegerConstant: int getValue()>();

        if $i3 != $i0 goto label2;

        return $i2;

     label2:
        $i2 = $i2 + 1;

        goto label1;

     label3:
        $r4 = new proguard.classfile.constant.IntegerConstant;

        specialinvoke $r4.<proguard.classfile.constant.IntegerConstant: void <init>(int)>($i0);

        $i0 = virtualinvoke r0.<proguard.classfile.editor.ConstantPoolEditor: int addConstant(proguard.classfile.constant.Constant)>($r4);

        return $i0;
    }

    public int addInterfaceMethodrefConstant(int, int, proguard.classfile.Clazz, proguard.classfile.Member)
    {
        proguard.classfile.constant.Constant $r5;
        proguard.classfile.constant.InterfaceMethodrefConstant $r6;
        proguard.classfile.ProgramClass $r4;
        proguard.classfile.Member $r2;
        proguard.classfile.Clazz $r1;
        int $i0, $i1, $i2, $i3, $i4;
        proguard.classfile.constant.Constant[] $r3;
        proguard.classfile.editor.ConstantPoolEditor r0;

        r0 := @this: proguard.classfile.editor.ConstantPoolEditor;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: proguard.classfile.Clazz;

        $r2 := @parameter3: proguard.classfile.Member;

        $r4 = r0.<proguard.classfile.editor.ConstantPoolEditor: proguard.classfile.ProgramClass targetClass>;

        $i2 = $r4.<proguard.classfile.ProgramClass: int u2constantPoolCount>;

        $r4 = r0.<proguard.classfile.editor.ConstantPoolEditor: proguard.classfile.ProgramClass targetClass>;

        $r3 = $r4.<proguard.classfile.ProgramClass: proguard.classfile.constant.Constant[] constantPool>;

        $i3 = 1;

     label1:
        if $i3 >= $i2 goto label3;

        $r5 = $r3[$i3];

        if $r5 == null goto label2;

        $i4 = virtualinvoke $r5.<proguard.classfile.constant.Constant: int getTag()>();

        if $i4 != 11 goto label2;

        $r6 = (proguard.classfile.constant.InterfaceMethodrefConstant) $r5;

        $i4 = $r6.<proguard.classfile.constant.InterfaceMethodrefConstant: int u2classIndex>;

        if $i4 != $i0 goto label2;

        $i4 = $r6.<proguard.classfile.constant.InterfaceMethodrefConstant: int u2nameAndTypeIndex>;

        if $i4 != $i1 goto label2;

        return $i3;

     label2:
        $i3 = $i3 + 1;

        goto label1;

     label3:
        $r6 = new proguard.classfile.constant.InterfaceMethodrefConstant;

        specialinvoke $r6.<proguard.classfile.constant.InterfaceMethodrefConstant: void <init>(int,int,proguard.classfile.Clazz,proguard.classfile.Member)>($i0, $i1, $r1, $r2);

        $i0 = virtualinvoke r0.<proguard.classfile.editor.ConstantPoolEditor: int addConstant(proguard.classfile.constant.Constant)>($r6);

        return $i0;
    }

    public int addInterfaceMethodrefConstant(int, java.lang.String, java.lang.String, proguard.classfile.Clazz, proguard.classfile.Member)
    {
        proguard.classfile.Clazz $r3;
        int $i0, $i1;
        java.lang.String $r1, $r2;
        proguard.classfile.editor.ConstantPoolEditor r0;
        proguard.classfile.Member $r4;

        r0 := @this: proguard.classfile.editor.ConstantPoolEditor;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: proguard.classfile.Clazz;

        $r4 := @parameter4: proguard.classfile.Member;

        $i1 = virtualinvoke r0.<proguard.classfile.editor.ConstantPoolEditor: int addNameAndTypeConstant(java.lang.String,java.lang.String)>($r1, $r2);

        $i0 = virtualinvoke r0.<proguard.classfile.editor.ConstantPoolEditor: int addInterfaceMethodrefConstant(int,int,proguard.classfile.Clazz,proguard.classfile.Member)>($i0, $i1, $r3, $r4);

        return $i0;
    }

    public int addInterfaceMethodrefConstant(java.lang.String, int, proguard.classfile.Clazz, proguard.classfile.Member)
    {
        proguard.classfile.Clazz $r2;
        int $i0, $i1;
        java.lang.String $r1;
        proguard.classfile.editor.ConstantPoolEditor r0;
        proguard.classfile.Member $r3;

        r0 := @this: proguard.classfile.editor.ConstantPoolEditor;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 := @parameter2: proguard.classfile.Clazz;

        $r3 := @parameter3: proguard.classfile.Member;

        $i1 = virtualinvoke r0.<proguard.classfile.editor.ConstantPoolEditor: int addClassConstant(java.lang.String,proguard.classfile.Clazz)>($r1, $r2);

        $i0 = virtualinvoke r0.<proguard.classfile.editor.ConstantPoolEditor: int addInterfaceMethodrefConstant(int,int,proguard.classfile.Clazz,proguard.classfile.Member)>($i1, $i0, $r2, $r3);

        return $i0;
    }

    public int addInterfaceMethodrefConstant(java.lang.String, java.lang.String, java.lang.String, proguard.classfile.Clazz, proguard.classfile.Member)
    {
        proguard.classfile.Clazz $r4;
        int $i0;
        java.lang.String $r1, $r2, $r3;
        proguard.classfile.editor.ConstantPoolEditor r0;
        proguard.classfile.Member $r5;

        r0 := @this: proguard.classfile.editor.ConstantPoolEditor;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: proguard.classfile.Clazz;

        $r5 := @parameter4: proguard.classfile.Member;

        $i0 = virtualinvoke r0.<proguard.classfile.editor.ConstantPoolEditor: int addNameAndTypeConstant(java.lang.String,java.lang.String)>($r2, $r3);

        $i0 = virtualinvoke r0.<proguard.classfile.editor.ConstantPoolEditor: int addInterfaceMethodrefConstant(java.lang.String,int,proguard.classfile.Clazz,proguard.classfile.Member)>($r1, $i0, $r4, $r5);

        return $i0;
    }

    public int addInterfaceMethodrefConstant(proguard.classfile.Clazz, proguard.classfile.Member)
    {
        proguard.classfile.Clazz $r1;
        int $i0;
        java.lang.String $r3, $r4, $r5;
        proguard.classfile.editor.ConstantPoolEditor r0;
        proguard.classfile.Member $r2;

        r0 := @this: proguard.classfile.editor.ConstantPoolEditor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Member;

        $r3 = interfaceinvoke $r1.<proguard.classfile.Clazz: java.lang.String getName()>();

        $r4 = interfaceinvoke $r2.<proguard.classfile.Member: java.lang.String getName(proguard.classfile.Clazz)>($r1);

        $r5 = interfaceinvoke $r2.<proguard.classfile.Member: java.lang.String getDescriptor(proguard.classfile.Clazz)>($r1);

        $i0 = virtualinvoke r0.<proguard.classfile.editor.ConstantPoolEditor: int addInterfaceMethodrefConstant(java.lang.String,java.lang.String,java.lang.String,proguard.classfile.Clazz,proguard.classfile.Member)>($r3, $r4, $r5, $r1, $r2);

        return $i0;
    }

    public int addLongConstant(long)
    {
        proguard.classfile.constant.LongConstant $r4;
        proguard.classfile.constant.Constant $r3;
        long $l0, $l4;
        proguard.classfile.ProgramClass $r2;
        byte $b5;
        int $i1, $i2, $i3;
        proguard.classfile.constant.Constant[] $r1;
        proguard.classfile.editor.ConstantPoolEditor r0;

        r0 := @this: proguard.classfile.editor.ConstantPoolEditor;

        $l0 := @parameter0: long;

        $r2 = r0.<proguard.classfile.editor.ConstantPoolEditor: proguard.classfile.ProgramClass targetClass>;

        $i1 = $r2.<proguard.classfile.ProgramClass: int u2constantPoolCount>;

        $r2 = r0.<proguard.classfile.editor.ConstantPoolEditor: proguard.classfile.ProgramClass targetClass>;

        $r1 = $r2.<proguard.classfile.ProgramClass: proguard.classfile.constant.Constant[] constantPool>;

        $i2 = 1;

     label1:
        if $i2 >= $i1 goto label3;

        $r3 = $r1[$i2];

        if $r3 == null goto label2;

        $i3 = virtualinvoke $r3.<proguard.classfile.constant.Constant: int getTag()>();

        if $i3 != 5 goto label2;

        $r4 = (proguard.classfile.constant.LongConstant) $r3;

        $l4 = virtualinvoke $r4.<proguard.classfile.constant.LongConstant: long getValue()>();

        $b5 = $l4 cmp $l0;

        if $b5 != 0 goto label2;

        return $i2;

     label2:
        $i2 = $i2 + 1;

        goto label1;

     label3:
        $r4 = new proguard.classfile.constant.LongConstant;

        specialinvoke $r4.<proguard.classfile.constant.LongConstant: void <init>(long)>($l0);

        $i1 = virtualinvoke r0.<proguard.classfile.editor.ConstantPoolEditor: int addConstant(proguard.classfile.constant.Constant)>($r4);

        return $i1;
    }

    public int addMethodrefConstant(int, int, proguard.classfile.Clazz, proguard.classfile.Member)
    {
        proguard.classfile.constant.Constant $r5;
        proguard.classfile.constant.MethodrefConstant $r6;
        proguard.classfile.ProgramClass $r4;
        proguard.classfile.Member $r2;
        proguard.classfile.Clazz $r1;
        int $i0, $i1, $i2, $i3, $i4;
        proguard.classfile.constant.Constant[] $r3;
        proguard.classfile.editor.ConstantPoolEditor r0;

        r0 := @this: proguard.classfile.editor.ConstantPoolEditor;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: proguard.classfile.Clazz;

        $r2 := @parameter3: proguard.classfile.Member;

        $r4 = r0.<proguard.classfile.editor.ConstantPoolEditor: proguard.classfile.ProgramClass targetClass>;

        $i2 = $r4.<proguard.classfile.ProgramClass: int u2constantPoolCount>;

        $r4 = r0.<proguard.classfile.editor.ConstantPoolEditor: proguard.classfile.ProgramClass targetClass>;

        $r3 = $r4.<proguard.classfile.ProgramClass: proguard.classfile.constant.Constant[] constantPool>;

        $i3 = 1;

     label1:
        if $i3 >= $i2 goto label3;

        $r5 = $r3[$i3];

        if $r5 == null goto label2;

        $i4 = virtualinvoke $r5.<proguard.classfile.constant.Constant: int getTag()>();

        if $i4 != 10 goto label2;

        $r6 = (proguard.classfile.constant.MethodrefConstant) $r5;

        $i4 = $r6.<proguard.classfile.constant.MethodrefConstant: int u2classIndex>;

        if $i4 != $i0 goto label2;

        $i4 = $r6.<proguard.classfile.constant.MethodrefConstant: int u2nameAndTypeIndex>;

        if $i4 != $i1 goto label2;

        return $i3;

     label2:
        $i3 = $i3 + 1;

        goto label1;

     label3:
        $r6 = new proguard.classfile.constant.MethodrefConstant;

        specialinvoke $r6.<proguard.classfile.constant.MethodrefConstant: void <init>(int,int,proguard.classfile.Clazz,proguard.classfile.Member)>($i0, $i1, $r1, $r2);

        $i0 = virtualinvoke r0.<proguard.classfile.editor.ConstantPoolEditor: int addConstant(proguard.classfile.constant.Constant)>($r6);

        return $i0;
    }

    public int addMethodrefConstant(int, java.lang.String, java.lang.String, proguard.classfile.Clazz, proguard.classfile.Member)
    {
        proguard.classfile.Clazz $r3;
        int $i0, $i1;
        java.lang.String $r1, $r2;
        proguard.classfile.editor.ConstantPoolEditor r0;
        proguard.classfile.Member $r4;

        r0 := @this: proguard.classfile.editor.ConstantPoolEditor;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: proguard.classfile.Clazz;

        $r4 := @parameter4: proguard.classfile.Member;

        $i1 = virtualinvoke r0.<proguard.classfile.editor.ConstantPoolEditor: int addNameAndTypeConstant(java.lang.String,java.lang.String)>($r1, $r2);

        $i0 = virtualinvoke r0.<proguard.classfile.editor.ConstantPoolEditor: int addMethodrefConstant(int,int,proguard.classfile.Clazz,proguard.classfile.Member)>($i0, $i1, $r3, $r4);

        return $i0;
    }

    public int addMethodrefConstant(java.lang.String, int, proguard.classfile.Clazz, proguard.classfile.Member)
    {
        proguard.classfile.Clazz $r2;
        int $i0, $i1;
        java.lang.String $r1;
        proguard.classfile.editor.ConstantPoolEditor r0;
        proguard.classfile.Member $r3;

        r0 := @this: proguard.classfile.editor.ConstantPoolEditor;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 := @parameter2: proguard.classfile.Clazz;

        $r3 := @parameter3: proguard.classfile.Member;

        $i1 = virtualinvoke r0.<proguard.classfile.editor.ConstantPoolEditor: int addClassConstant(java.lang.String,proguard.classfile.Clazz)>($r1, $r2);

        $i0 = virtualinvoke r0.<proguard.classfile.editor.ConstantPoolEditor: int addMethodrefConstant(int,int,proguard.classfile.Clazz,proguard.classfile.Member)>($i1, $i0, $r2, $r3);

        return $i0;
    }

    public int addMethodrefConstant(java.lang.String, java.lang.String, java.lang.String, proguard.classfile.Clazz, proguard.classfile.Member)
    {
        proguard.classfile.Clazz $r4;
        int $i0;
        java.lang.String $r1, $r2, $r3;
        proguard.classfile.editor.ConstantPoolEditor r0;
        proguard.classfile.Member $r5;

        r0 := @this: proguard.classfile.editor.ConstantPoolEditor;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: proguard.classfile.Clazz;

        $r5 := @parameter4: proguard.classfile.Member;

        $i0 = virtualinvoke r0.<proguard.classfile.editor.ConstantPoolEditor: int addNameAndTypeConstant(java.lang.String,java.lang.String)>($r2, $r3);

        $i0 = virtualinvoke r0.<proguard.classfile.editor.ConstantPoolEditor: int addMethodrefConstant(java.lang.String,int,proguard.classfile.Clazz,proguard.classfile.Member)>($r1, $i0, $r4, $r5);

        return $i0;
    }

    public int addMethodrefConstant(proguard.classfile.Clazz, proguard.classfile.Member)
    {
        proguard.classfile.Clazz $r1;
        int $i0;
        java.lang.String $r3, $r4, $r5;
        proguard.classfile.editor.ConstantPoolEditor r0;
        proguard.classfile.Member $r2;

        r0 := @this: proguard.classfile.editor.ConstantPoolEditor;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Member;

        $r3 = interfaceinvoke $r1.<proguard.classfile.Clazz: java.lang.String getName()>();

        $r4 = interfaceinvoke $r2.<proguard.classfile.Member: java.lang.String getName(proguard.classfile.Clazz)>($r1);

        $r5 = interfaceinvoke $r2.<proguard.classfile.Member: java.lang.String getDescriptor(proguard.classfile.Clazz)>($r1);

        $i0 = virtualinvoke r0.<proguard.classfile.editor.ConstantPoolEditor: int addMethodrefConstant(java.lang.String,java.lang.String,java.lang.String,proguard.classfile.Clazz,proguard.classfile.Member)>($r3, $r4, $r5, $r1, $r2);

        return $i0;
    }

    public int addNameAndTypeConstant(java.lang.String, java.lang.String)
    {
        proguard.classfile.constant.Constant $r5;
        proguard.classfile.ProgramClass $r3;
        int $i0, $i1, $i2;
        proguard.classfile.constant.Constant[] $r4;
        proguard.classfile.constant.NameAndTypeConstant $r6;
        java.lang.String $r1, $r2, $r7;
        proguard.classfile.editor.ConstantPoolEditor r0;
        boolean $z0;

        r0 := @this: proguard.classfile.editor.ConstantPoolEditor;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = r0.<proguard.classfile.editor.ConstantPoolEditor: proguard.classfile.ProgramClass targetClass>;

        $i0 = $r3.<proguard.classfile.ProgramClass: int u2constantPoolCount>;

        $r3 = r0.<proguard.classfile.editor.ConstantPoolEditor: proguard.classfile.ProgramClass targetClass>;

        $r4 = $r3.<proguard.classfile.ProgramClass: proguard.classfile.constant.Constant[] constantPool>;

        $i1 = 1;

     label1:
        if $i1 >= $i0 goto label3;

        $r5 = $r4[$i1];

        if $r5 == null goto label2;

        $i2 = virtualinvoke $r5.<proguard.classfile.constant.Constant: int getTag()>();

        if $i2 != 12 goto label2;

        $r6 = (proguard.classfile.constant.NameAndTypeConstant) $r5;

        $r3 = r0.<proguard.classfile.editor.ConstantPoolEditor: proguard.classfile.ProgramClass targetClass>;

        $r7 = virtualinvoke $r6.<proguard.classfile.constant.NameAndTypeConstant: java.lang.String getName(proguard.classfile.Clazz)>($r3);

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        $r3 = r0.<proguard.classfile.editor.ConstantPoolEditor: proguard.classfile.ProgramClass targetClass>;

        $r7 = virtualinvoke $r6.<proguard.classfile.constant.NameAndTypeConstant: java.lang.String getType(proguard.classfile.Clazz)>($r3);

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label2;

        return $i1;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        $r6 = new proguard.classfile.constant.NameAndTypeConstant;

        $i0 = virtualinvoke r0.<proguard.classfile.editor.ConstantPoolEditor: int addUtf8Constant(java.lang.String)>($r1);

        $i1 = virtualinvoke r0.<proguard.classfile.editor.ConstantPoolEditor: int addUtf8Constant(java.lang.String)>($r2);

        specialinvoke $r6.<proguard.classfile.constant.NameAndTypeConstant: void <init>(int,int)>($i0, $i1);

        $i0 = virtualinvoke r0.<proguard.classfile.editor.ConstantPoolEditor: int addConstant(proguard.classfile.constant.Constant)>($r6);

        return $i0;
    }

    public int addStringConstant(java.lang.String, proguard.classfile.Clazz, proguard.classfile.Member)
    {
        proguard.classfile.constant.Constant $r6;
        proguard.classfile.ProgramClass $r5;
        proguard.classfile.Member $r3;
        proguard.classfile.Clazz $r2;
        int $i0, $i1, $i2;
        proguard.classfile.constant.StringConstant $r7;
        proguard.classfile.constant.Constant[] $r4;
        java.lang.String $r1, $r8;
        proguard.classfile.editor.ConstantPoolEditor r0;
        boolean $z0;

        r0 := @this: proguard.classfile.editor.ConstantPoolEditor;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: proguard.classfile.Clazz;

        $r3 := @parameter2: proguard.classfile.Member;

        $r5 = r0.<proguard.classfile.editor.ConstantPoolEditor: proguard.classfile.ProgramClass targetClass>;

        $i0 = $r5.<proguard.classfile.ProgramClass: int u2constantPoolCount>;

        $r5 = r0.<proguard.classfile.editor.ConstantPoolEditor: proguard.classfile.ProgramClass targetClass>;

        $r4 = $r5.<proguard.classfile.ProgramClass: proguard.classfile.constant.Constant[] constantPool>;

        $i1 = 1;

     label1:
        if $i1 >= $i0 goto label3;

        $r6 = $r4[$i1];

        if $r6 == null goto label2;

        $i2 = virtualinvoke $r6.<proguard.classfile.constant.Constant: int getTag()>();

        if $i2 != 8 goto label2;

        $r7 = (proguard.classfile.constant.StringConstant) $r6;

        $r5 = r0.<proguard.classfile.editor.ConstantPoolEditor: proguard.classfile.ProgramClass targetClass>;

        $r8 = virtualinvoke $r7.<proguard.classfile.constant.StringConstant: java.lang.String getString(proguard.classfile.Clazz)>($r5);

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        return $i1;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        $r7 = new proguard.classfile.constant.StringConstant;

        $i0 = virtualinvoke r0.<proguard.classfile.editor.ConstantPoolEditor: int addUtf8Constant(java.lang.String)>($r1);

        specialinvoke $r7.<proguard.classfile.constant.StringConstant: void <init>(int,proguard.classfile.Clazz,proguard.classfile.Member)>($i0, $r2, $r3);

        $i0 = virtualinvoke r0.<proguard.classfile.editor.ConstantPoolEditor: int addConstant(proguard.classfile.constant.Constant)>($r7);

        return $i0;
    }

    public int addUtf8Constant(java.lang.String)
    {
        proguard.classfile.constant.Constant $r4;
        proguard.classfile.ProgramClass $r3;
        int $i0, $i1, $i2;
        proguard.classfile.constant.Constant[] $r2;
        java.lang.String $r1, $r6;
        proguard.classfile.constant.Utf8Constant $r5;
        proguard.classfile.editor.ConstantPoolEditor r0;
        boolean $z0;

        r0 := @this: proguard.classfile.editor.ConstantPoolEditor;

        $r1 := @parameter0: java.lang.String;

        $r3 = r0.<proguard.classfile.editor.ConstantPoolEditor: proguard.classfile.ProgramClass targetClass>;

        $i0 = $r3.<proguard.classfile.ProgramClass: int u2constantPoolCount>;

        $r3 = r0.<proguard.classfile.editor.ConstantPoolEditor: proguard.classfile.ProgramClass targetClass>;

        $r2 = $r3.<proguard.classfile.ProgramClass: proguard.classfile.constant.Constant[] constantPool>;

        $i1 = 1;

     label1:
        if $i1 >= $i0 goto label3;

        $r4 = $r2[$i1];

        if $r4 == null goto label2;

        $i2 = virtualinvoke $r4.<proguard.classfile.constant.Constant: int getTag()>();

        if $i2 != 1 goto label2;

        $r5 = (proguard.classfile.constant.Utf8Constant) $r4;

        $r6 = virtualinvoke $r5.<proguard.classfile.constant.Utf8Constant: java.lang.String getString()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        return $i1;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        $r5 = new proguard.classfile.constant.Utf8Constant;

        specialinvoke $r5.<proguard.classfile.constant.Utf8Constant: void <init>(java.lang.String)>($r1);

        $i0 = virtualinvoke r0.<proguard.classfile.editor.ConstantPoolEditor: int addConstant(proguard.classfile.constant.Constant)>($r5);

        return $i0;
    }
}
