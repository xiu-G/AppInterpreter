public class org.json.XMLTokener extends org.json.JSONTokener
{
    public static final java.util.HashMap entity;

    static void <clinit>()
    {
        java.util.HashMap $r0;
        java.lang.Character $r1;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>(int)>(8);

        <org.json.XMLTokener: java.util.HashMap entity> = $r0;

        $r0 = <org.json.XMLTokener: java.util.HashMap entity>;

        $r1 = <org.json.XML: java.lang.Character AMP>;

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("amp", $r1);

        $r0 = <org.json.XMLTokener: java.util.HashMap entity>;

        $r1 = <org.json.XML: java.lang.Character APOS>;

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("apos", $r1);

        $r0 = <org.json.XMLTokener: java.util.HashMap entity>;

        $r1 = <org.json.XML: java.lang.Character GT>;

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("gt", $r1);

        $r0 = <org.json.XMLTokener: java.util.HashMap entity>;

        $r1 = <org.json.XML: java.lang.Character LT>;

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("lt", $r1);

        $r0 = <org.json.XMLTokener: java.util.HashMap entity>;

        $r1 = <org.json.XML: java.lang.Character QUOT>;

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("quot", $r1);

        return;
    }

    public void <init>(java.lang.String)
    {
        java.lang.String $r1;
        org.json.XMLTokener r0;

        r0 := @this: org.json.XMLTokener;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.json.JSONTokener: void <init>(java.lang.String)>($r1);

        return;
    }

    public java.lang.String nextCDATA() throws org.json.JSONException
    {
        char $c0;
        org.json.JSONException $r2;
        java.lang.StringBuffer $r1, $r4;
        int $i1, $i2;
        java.lang.String $r3;
        org.json.XMLTokener r0;

        r0 := @this: org.json.XMLTokener;

        $r4 = new java.lang.StringBuffer;

        $r1 = $r4;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

     label1:
        $c0 = virtualinvoke r0.<org.json.XMLTokener: char next()>();

        if $c0 != 0 goto label2;

        $r2 = virtualinvoke r0.<org.json.XMLTokener: org.json.JSONException syntaxError(java.lang.String)>("Unclosed CDATA");

        throw $r2;

     label2:
        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c0);

        $i1 = virtualinvoke $r1.<java.lang.StringBuffer: int length()>();

        $i2 = -3;

        $i1 = $i1 + $i2;

        if $i1 < 0 goto label1;

        $c0 = virtualinvoke $r1.<java.lang.StringBuffer: char charAt(int)>($i1);

        $i2 = (int) $c0;

        if $i2 != 93 goto label1;

        $i2 = $i1 + 1;

        $c0 = virtualinvoke $r1.<java.lang.StringBuffer: char charAt(int)>($i2);

        $i2 = (int) $c0;

        if $i2 != 93 goto label1;

        $i2 = $i1 + 2;

        $c0 = virtualinvoke $r1.<java.lang.StringBuffer: char charAt(int)>($i2);

        $i2 = (int) $c0;

        if $i2 != 62 goto label1;

        virtualinvoke $r1.<java.lang.StringBuffer: void setLength(int)>($i1);

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    public java.lang.Object nextContent() throws org.json.JSONException
    {
        char $c0, $c1;
        java.lang.Character r4;
        java.lang.StringBuffer $r1, $r5;
        int $i2;
        java.lang.Object $r3;
        java.lang.String $r2;
        org.json.XMLTokener r0;
        boolean $z0;

        r0 := @this: org.json.XMLTokener;

     label1:
        $c0 = virtualinvoke r0.<org.json.XMLTokener: char next()>();

        $c1 = $c0;

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c0);

        if $z0 != 0 goto label1;

        if $c0 != 0 goto label2;

        return null;

     label2:
        $i2 = (int) $c0;

        if $i2 != 60 goto label3;

        r4 = <org.json.XML: java.lang.Character LT>;

        return r4;

     label3:
        $r5 = new java.lang.StringBuffer;

        $r1 = $r5;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

     label4:
        $i2 = (int) $c1;

        if $i2 == 60 goto label5;

        if $c1 != 0 goto label6;

     label5:
        virtualinvoke r0.<org.json.XMLTokener: void back()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        return $r2;

     label6:
        $i2 = (int) $c1;

        if $i2 != 38 goto label8;

        $r3 = virtualinvoke r0.<org.json.XMLTokener: java.lang.Object nextEntity(char)>($c1);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r3);

     label7:
        $c1 = virtualinvoke r0.<org.json.XMLTokener: char next()>();

        goto label4;

     label8:
        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);

        goto label7;
    }

    public java.lang.Object nextEntity(char) throws org.json.JSONException
    {
        char $c0, $c1;
        java.util.HashMap $r3;
        org.json.JSONException $r6;
        java.lang.StringBuffer $r1, $r7;
        int $i2;
        java.lang.Object $r4;
        java.lang.StringBuilder $r5, $r8;
        java.lang.String $r2;
        org.json.XMLTokener r0;
        boolean $z0;

        r0 := @this: org.json.XMLTokener;

        $c0 := @parameter0: char;

        $r7 = new java.lang.StringBuffer;

        $r1 = $r7;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

     label1:
        $c1 = virtualinvoke r0.<org.json.XMLTokener: char next()>();

        $z0 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>($c1);

        if $z0 != 0 goto label2;

        $i2 = (int) $c1;

        if $i2 != 35 goto label3;

     label2:
        $c1 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c1);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);

        goto label1;

     label3:
        $i2 = (int) $c1;

        if $i2 != 59 goto label4;

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        $r3 = <org.json.XMLTokener: java.util.HashMap entity>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r2);

        if $r4 == null goto label5;

        return $r4;

     label4:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing \';\' in XML entity: &");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke r0.<org.json.XMLTokener: org.json.JSONException syntaxError(java.lang.String)>($r2);

        throw $r6;

     label5:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public java.lang.Object nextMeta() throws org.json.JSONException
    {
        char $c0, $c1;
        org.json.JSONException $r1;
        java.lang.Character r3;
        int $i2, $i3;
        java.lang.Boolean r2;
        org.json.XMLTokener r0;
        boolean $z0;

        r0 := @this: org.json.XMLTokener;

     label01:
        $c0 = virtualinvoke r0.<org.json.XMLTokener: char next()>();

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c0);

        if $z0 != 0 goto label01;

        $i2 = (int) $c0;

        lookupswitch($i2)
        {
            case 0: goto label03;
            case 33: goto label08;
            case 34: goto label10;
            case 39: goto label10;
            case 47: goto label06;
            case 60: goto label04;
            case 61: goto label07;
            case 62: goto label05;
            case 63: goto label09;
            default: goto label02;
        };

     label02:
        $c0 = virtualinvoke r0.<org.json.XMLTokener: char next()>();

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c0);

        if $z0 == 0 goto label12;

        r2 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        return r2;

     label03:
        $r1 = virtualinvoke r0.<org.json.XMLTokener: org.json.JSONException syntaxError(java.lang.String)>("Misshaped meta tag");

        throw $r1;

     label04:
        r3 = <org.json.XML: java.lang.Character LT>;

        return r3;

     label05:
        r3 = <org.json.XML: java.lang.Character GT>;

        return r3;

     label06:
        r3 = <org.json.XML: java.lang.Character SLASH>;

        return r3;

     label07:
        r3 = <org.json.XML: java.lang.Character EQ>;

        return r3;

     label08:
        r3 = <org.json.XML: java.lang.Character BANG>;

        return r3;

     label09:
        r3 = <org.json.XML: java.lang.Character QUEST>;

        return r3;

     label10:
        $c1 = virtualinvoke r0.<org.json.XMLTokener: char next()>();

        if $c1 != 0 goto label11;

        $r1 = virtualinvoke r0.<org.json.XMLTokener: org.json.JSONException syntaxError(java.lang.String)>("Unterminated string");

        throw $r1;

     label11:
        $i2 = (int) $c1;

        $i3 = (int) $c0;

        if $i2 != $i3 goto label10;

        r2 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        return r2;

     label12:
        $i2 = (int) $c0;

        lookupswitch($i2)
        {
            case 0: goto label14;
            case 33: goto label14;
            case 34: goto label14;
            case 39: goto label14;
            case 47: goto label14;
            case 60: goto label14;
            case 61: goto label14;
            case 62: goto label14;
            case 63: goto label14;
            default: goto label13;
        };

     label13:
        goto label02;

     label14:
        virtualinvoke r0.<org.json.XMLTokener: void back()>();

        r2 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        return r2;
    }

    public java.lang.Object nextToken() throws org.json.JSONException
    {
        char $c0, $c1;
        org.json.JSONException $r3;
        java.lang.Character r5;
        java.lang.StringBuffer $r1, $r6;
        int $i2, $i3;
        java.lang.Object $r4;
        java.lang.String $r2;
        org.json.XMLTokener r0;
        boolean $z0;

        r0 := @this: org.json.XMLTokener;

     label01:
        $c0 = virtualinvoke r0.<org.json.XMLTokener: char next()>();

        $c1 = $c0;

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c0);

        if $z0 != 0 goto label01;

        $i2 = (int) $c0;

        lookupswitch($i2)
        {
            case 0: goto label04;
            case 33: goto label09;
            case 34: goto label11;
            case 39: goto label11;
            case 47: goto label07;
            case 60: goto label05;
            case 61: goto label08;
            case 62: goto label06;
            case 63: goto label10;
            default: goto label02;
        };

     label02:
        $r6 = new java.lang.StringBuffer;

        $r1 = $r6;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

     label03:
        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);

        $c0 = virtualinvoke r0.<org.json.XMLTokener: char next()>();

        $c1 = $c0;

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c0);

        if $z0 == 0 goto label16;

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;

     label04:
        $r3 = virtualinvoke r0.<org.json.XMLTokener: org.json.JSONException syntaxError(java.lang.String)>("Misshaped element");

        throw $r3;

     label05:
        $r3 = virtualinvoke r0.<org.json.XMLTokener: org.json.JSONException syntaxError(java.lang.String)>("Misplaced \'<\'");

        throw $r3;

     label06:
        r5 = <org.json.XML: java.lang.Character GT>;

        return r5;

     label07:
        r5 = <org.json.XML: java.lang.Character SLASH>;

        return r5;

     label08:
        r5 = <org.json.XML: java.lang.Character EQ>;

        return r5;

     label09:
        r5 = <org.json.XML: java.lang.Character BANG>;

        return r5;

     label10:
        r5 = <org.json.XML: java.lang.Character QUEST>;

        return r5;

     label11:
        $r6 = new java.lang.StringBuffer;

        $r1 = $r6;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

     label12:
        $c1 = virtualinvoke r0.<org.json.XMLTokener: char next()>();

        if $c1 != 0 goto label13;

        $r3 = virtualinvoke r0.<org.json.XMLTokener: org.json.JSONException syntaxError(java.lang.String)>("Unterminated string");

        throw $r3;

     label13:
        $i2 = (int) $c1;

        $i3 = (int) $c0;

        if $i2 != $i3 goto label14;

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;

     label14:
        $i2 = (int) $c1;

        if $i2 != 38 goto label15;

        $r4 = virtualinvoke r0.<org.json.XMLTokener: java.lang.Object nextEntity(char)>($c1);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r4);

        goto label12;

     label15:
        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);

        goto label12;

     label16:
        $i2 = (int) $c0;

        lookupswitch($i2)
        {
            case 0: goto label18;
            case 33: goto label18;
            case 34: goto label19;
            case 39: goto label19;
            case 47: goto label18;
            case 60: goto label19;
            case 61: goto label18;
            case 62: goto label18;
            case 63: goto label18;
            case 91: goto label18;
            case 93: goto label18;
            default: goto label17;
        };

     label17:
        goto label03;

     label18:
        virtualinvoke r0.<org.json.XMLTokener: void back()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;

     label19:
        $r3 = virtualinvoke r0.<org.json.XMLTokener: org.json.JSONException syntaxError(java.lang.String)>("Bad character in a name");

        throw $r3;
    }
}
