class proguard.shrink.UsageMarker$MyPossiblyUsedMemberUsageMarker extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.visitor.MemberVisitor
{
    private final proguard.shrink.UsageMarker this$0;

    private void <init>(proguard.shrink.UsageMarker)
    {
        proguard.shrink.UsageMarker $r1;
        proguard.shrink.UsageMarker$MyPossiblyUsedMemberUsageMarker r0;

        r0 := @this: proguard.shrink.UsageMarker$MyPossiblyUsedMemberUsageMarker;

        $r1 := @parameter0: proguard.shrink.UsageMarker;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        r0.<proguard.shrink.UsageMarker$MyPossiblyUsedMemberUsageMarker: proguard.shrink.UsageMarker this$0> = $r1;

        return;
    }

    void <init>(proguard.shrink.UsageMarker, proguard.shrink.UsageMarker$1)
    {
        proguard.shrink.UsageMarker$1 $r2;
        proguard.shrink.UsageMarker $r1;
        proguard.shrink.UsageMarker$MyPossiblyUsedMemberUsageMarker r0;

        r0 := @this: proguard.shrink.UsageMarker$MyPossiblyUsedMemberUsageMarker;

        $r1 := @parameter0: proguard.shrink.UsageMarker;

        $r2 := @parameter1: proguard.shrink.UsageMarker$1;

        specialinvoke r0.<proguard.shrink.UsageMarker$MyPossiblyUsedMemberUsageMarker: void <init>(proguard.shrink.UsageMarker)>($r1);

        return;
    }

    public void visitProgramField(proguard.classfile.ProgramClass, proguard.classfile.ProgramField)
    {
        proguard.shrink.UsageMarker $r3;
        proguard.classfile.ProgramField $r2;
        proguard.shrink.UsageMarker$MyPossiblyUsedMemberUsageMarker r0;
        int $i0;
        proguard.classfile.ProgramClass $r1;
        boolean $z0;

        r0 := @this: proguard.shrink.UsageMarker$MyPossiblyUsedMemberUsageMarker;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.ProgramField;

        $r3 = r0.<proguard.shrink.UsageMarker$MyPossiblyUsedMemberUsageMarker: proguard.shrink.UsageMarker this$0>;

        $z0 = virtualinvoke $r3.<proguard.shrink.UsageMarker: boolean isPossiblyUsed(proguard.classfile.VisitorAccepter)>($r2);

        if $z0 == 0 goto label1;

        $r3 = r0.<proguard.shrink.UsageMarker$MyPossiblyUsedMemberUsageMarker: proguard.shrink.UsageMarker this$0>;

        virtualinvoke $r3.<proguard.shrink.UsageMarker: void markAsUsed(proguard.classfile.VisitorAccepter)>($r2);

        $r3 = r0.<proguard.shrink.UsageMarker$MyPossiblyUsedMemberUsageMarker: proguard.shrink.UsageMarker this$0>;

        $i0 = $r2.<proguard.classfile.ProgramField: int u2nameIndex>;

        staticinvoke <proguard.shrink.UsageMarker: void access$200(proguard.shrink.UsageMarker,proguard.classfile.Clazz,int)>($r3, $r1, $i0);

        $r3 = r0.<proguard.shrink.UsageMarker$MyPossiblyUsedMemberUsageMarker: proguard.shrink.UsageMarker this$0>;

        $i0 = $r2.<proguard.classfile.ProgramField: int u2descriptorIndex>;

        staticinvoke <proguard.shrink.UsageMarker: void access$200(proguard.shrink.UsageMarker,proguard.classfile.Clazz,int)>($r3, $r1, $i0);

        $r3 = r0.<proguard.shrink.UsageMarker$MyPossiblyUsedMemberUsageMarker: proguard.shrink.UsageMarker this$0>;

        virtualinvoke $r2.<proguard.classfile.ProgramField: void attributesAccept(proguard.classfile.ProgramClass,proguard.classfile.attribute.visitor.AttributeVisitor)>($r1, $r3);

        $r3 = r0.<proguard.shrink.UsageMarker$MyPossiblyUsedMemberUsageMarker: proguard.shrink.UsageMarker this$0>;

        virtualinvoke $r2.<proguard.classfile.ProgramField: void referencedClassesAccept(proguard.classfile.visitor.ClassVisitor)>($r3);

     label1:
        return;
    }

    public void visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod)
    {
        proguard.shrink.UsageMarker $r3;
        proguard.shrink.UsageMarker$MyPossiblyUsedMemberUsageMarker r0;
        proguard.classfile.ProgramMethod $r2;
        proguard.classfile.ProgramClass $r1;
        boolean $z0;

        r0 := @this: proguard.shrink.UsageMarker$MyPossiblyUsedMemberUsageMarker;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.ProgramMethod;

        $r3 = r0.<proguard.shrink.UsageMarker$MyPossiblyUsedMemberUsageMarker: proguard.shrink.UsageMarker this$0>;

        $z0 = virtualinvoke $r3.<proguard.shrink.UsageMarker: boolean isPossiblyUsed(proguard.classfile.VisitorAccepter)>($r2);

        if $z0 == 0 goto label1;

        $r3 = r0.<proguard.shrink.UsageMarker$MyPossiblyUsedMemberUsageMarker: proguard.shrink.UsageMarker this$0>;

        virtualinvoke $r3.<proguard.shrink.UsageMarker: void markAsUsed(proguard.classfile.VisitorAccepter)>($r2);

        $r3 = r0.<proguard.shrink.UsageMarker$MyPossiblyUsedMemberUsageMarker: proguard.shrink.UsageMarker this$0>;

        virtualinvoke $r3.<proguard.shrink.UsageMarker: void markProgramMethodBody(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod)>($r1, $r2);

     label1:
        return;
    }
}
