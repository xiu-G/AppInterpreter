public class proguard.optimize.info.NonPrivateMemberMarker extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.visitor.ClassVisitor, proguard.classfile.constant.visitor.ConstantVisitor, proguard.classfile.visitor.MemberVisitor
{
    private final proguard.classfile.visitor.MethodImplementationFilter filteredMethodMarker;

    public void <init>()
    {
        proguard.optimize.info.NonPrivateMemberMarker r0;
        proguard.classfile.visitor.MethodImplementationFilter $r1;

        r0 := @this: proguard.optimize.info.NonPrivateMemberMarker;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        $r1 = new proguard.classfile.visitor.MethodImplementationFilter;

        specialinvoke $r1.<proguard.classfile.visitor.MethodImplementationFilter: void <init>(proguard.classfile.visitor.MemberVisitor)>(r0);

        r0.<proguard.optimize.info.NonPrivateMemberMarker: proguard.classfile.visitor.MethodImplementationFilter filteredMethodMarker> = $r1;

        return;
    }

    public static boolean canBeMadePrivate(proguard.classfile.Field)
    {
        proguard.optimize.info.FieldOptimizationInfo $r1;
        proguard.classfile.Field $r0;
        boolean $z0;

        $r0 := @parameter0: proguard.classfile.Field;

        $r1 = staticinvoke <proguard.optimize.info.FieldOptimizationInfo: proguard.optimize.info.FieldOptimizationInfo getFieldOptimizationInfo(proguard.classfile.Field)>($r0);

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r1.<proguard.optimize.info.FieldOptimizationInfo: boolean canBeMadePrivate()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static boolean canBeMadePrivate(proguard.classfile.Method)
    {
        proguard.classfile.Method $r0;
        proguard.optimize.info.MethodOptimizationInfo $r1;
        boolean $z0;

        $r0 := @parameter0: proguard.classfile.Method;

        $r1 = staticinvoke <proguard.optimize.info.MethodOptimizationInfo: proguard.optimize.info.MethodOptimizationInfo getMethodOptimizationInfo(proguard.classfile.Method)>($r0);

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r1.<proguard.optimize.info.MethodOptimizationInfo: boolean canBeMadePrivate()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private static void markCanNotBeMadePrivate(proguard.classfile.Field)
    {
        proguard.optimize.info.FieldOptimizationInfo $r1;
        proguard.classfile.Field $r0;

        $r0 := @parameter0: proguard.classfile.Field;

        $r1 = staticinvoke <proguard.optimize.info.FieldOptimizationInfo: proguard.optimize.info.FieldOptimizationInfo getFieldOptimizationInfo(proguard.classfile.Field)>($r0);

        if $r1 == null goto label1;

        virtualinvoke $r1.<proguard.optimize.info.FieldOptimizationInfo: void setCanNotBeMadePrivate()>();

     label1:
        return;
    }

    private static void markCanNotBeMadePrivate(proguard.classfile.Method)
    {
        proguard.classfile.Method $r0;
        proguard.optimize.info.MethodOptimizationInfo $r1;

        $r0 := @parameter0: proguard.classfile.Method;

        $r1 = staticinvoke <proguard.optimize.info.MethodOptimizationInfo: proguard.optimize.info.MethodOptimizationInfo getMethodOptimizationInfo(proguard.classfile.Method)>($r0);

        if $r1 == null goto label1;

        virtualinvoke $r1.<proguard.optimize.info.MethodOptimizationInfo: void setCanNotBeMadePrivate()>();

     label1:
        return;
    }

    public void visitAnyConstant(proguard.classfile.Clazz, proguard.classfile.constant.Constant)
    {
        proguard.optimize.info.NonPrivateMemberMarker r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.constant.Constant $r2;

        r0 := @this: proguard.optimize.info.NonPrivateMemberMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.Constant;

        return;
    }

    public void visitAnyRefConstant(proguard.classfile.Clazz, proguard.classfile.constant.RefConstant)
    {
        proguard.optimize.info.NonPrivateMemberMarker r0;
        proguard.classfile.Clazz $r1, $r3;
        java.lang.String $r4, $r5;
        proguard.classfile.constant.RefConstant $r2;
        boolean $z0;

        r0 := @this: proguard.optimize.info.NonPrivateMemberMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.RefConstant;

        $r3 = $r2.<proguard.classfile.constant.RefConstant: proguard.classfile.Clazz referencedClass>;

        if $r3 == null goto label1;

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

     label1:
        $r4 = virtualinvoke $r2.<proguard.classfile.constant.RefConstant: java.lang.String getClassName(proguard.classfile.Clazz)>($r1);

        $r5 = interfaceinvoke $r1.<proguard.classfile.Clazz: java.lang.String getName()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label3;

     label2:
        virtualinvoke $r2.<proguard.classfile.constant.RefConstant: void referencedMemberAccept(proguard.classfile.visitor.MemberVisitor)>(r0);

     label3:
        return;
    }

    public void visitLibraryClass(proguard.classfile.LibraryClass)
    {
        proguard.optimize.info.NonPrivateMemberMarker r0;
        proguard.classfile.LibraryClass $r1;

        r0 := @this: proguard.optimize.info.NonPrivateMemberMarker;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        virtualinvoke $r1.<proguard.classfile.LibraryClass: void methodsAccept(proguard.classfile.visitor.MemberVisitor)>(r0);

        return;
    }

    public void visitLibraryField(proguard.classfile.LibraryClass, proguard.classfile.LibraryField)
    {
        proguard.optimize.info.NonPrivateMemberMarker r0;
        proguard.classfile.LibraryClass $r1;
        proguard.classfile.LibraryField $r2;

        r0 := @this: proguard.optimize.info.NonPrivateMemberMarker;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        $r2 := @parameter1: proguard.classfile.LibraryField;

        staticinvoke <proguard.optimize.info.NonPrivateMemberMarker: void markCanNotBeMadePrivate(proguard.classfile.Field)>($r2);

        return;
    }

    public void visitLibraryMethod(proguard.classfile.LibraryClass, proguard.classfile.LibraryMethod)
    {
        proguard.optimize.info.NonPrivateMemberMarker r0;
        proguard.classfile.LibraryMethod $r2;
        proguard.classfile.LibraryClass $r1;

        r0 := @this: proguard.optimize.info.NonPrivateMemberMarker;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        $r2 := @parameter1: proguard.classfile.LibraryMethod;

        staticinvoke <proguard.optimize.info.NonPrivateMemberMarker: void markCanNotBeMadePrivate(proguard.classfile.Method)>($r2);

        return;
    }

    public void visitProgramClass(proguard.classfile.ProgramClass)
    {
        proguard.optimize.info.NonPrivateMemberMarker r0;
        proguard.classfile.ProgramClass $r1;
        proguard.classfile.visitor.MethodImplementationFilter $r2;

        r0 := @this: proguard.optimize.info.NonPrivateMemberMarker;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        virtualinvoke $r1.<proguard.classfile.ProgramClass: void constantPoolEntriesAccept(proguard.classfile.constant.visitor.ConstantVisitor)>(r0);

        virtualinvoke $r1.<proguard.classfile.ProgramClass: void methodAccept(java.lang.String,java.lang.String,proguard.classfile.visitor.MemberVisitor)>("<clinit>", "()V", r0);

        virtualinvoke $r1.<proguard.classfile.ProgramClass: void methodAccept(java.lang.String,java.lang.String,proguard.classfile.visitor.MemberVisitor)>("<init>", "()V", r0);

        $r2 = r0.<proguard.optimize.info.NonPrivateMemberMarker: proguard.classfile.visitor.MethodImplementationFilter filteredMethodMarker>;

        virtualinvoke $r1.<proguard.classfile.ProgramClass: void methodsAccept(proguard.classfile.visitor.MemberVisitor)>($r2);

        return;
    }

    public void visitProgramField(proguard.classfile.ProgramClass, proguard.classfile.ProgramField)
    {
        proguard.optimize.info.NonPrivateMemberMarker r0;
        proguard.classfile.ProgramField $r2;
        proguard.classfile.ProgramClass $r1;

        r0 := @this: proguard.optimize.info.NonPrivateMemberMarker;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.ProgramField;

        staticinvoke <proguard.optimize.info.NonPrivateMemberMarker: void markCanNotBeMadePrivate(proguard.classfile.Field)>($r2);

        return;
    }

    public void visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod)
    {
        proguard.optimize.info.NonPrivateMemberMarker r0;
        proguard.classfile.ProgramClass $r1;
        proguard.classfile.ProgramMethod $r2;

        r0 := @this: proguard.optimize.info.NonPrivateMemberMarker;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.ProgramMethod;

        staticinvoke <proguard.optimize.info.NonPrivateMemberMarker: void markCanNotBeMadePrivate(proguard.classfile.Method)>($r2);

        return;
    }

    public void visitStringConstant(proguard.classfile.Clazz, proguard.classfile.constant.StringConstant)
    {
        proguard.optimize.info.NonPrivateMemberMarker r0;
        proguard.classfile.constant.StringConstant $r2;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.optimize.info.NonPrivateMemberMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.StringConstant;

        virtualinvoke $r2.<proguard.classfile.constant.StringConstant: void referencedMemberAccept(proguard.classfile.visitor.MemberVisitor)>(r0);

        return;
    }
}
