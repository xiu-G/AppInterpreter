public final class com.trustlook.scheduler.b extends java.lang.Object
{
    private static com.trustlook.scheduler.b a;
    private static final com.trustlook.scheduler.a d;
    private android.content.Context b;
    private java.util.Map c;

    static void <clinit>()
    {
        com.trustlook.scheduler.c $r0;

        $r0 = new com.trustlook.scheduler.c;

        specialinvoke $r0.<com.trustlook.scheduler.c: void <init>()>();

        <com.trustlook.scheduler.b: com.trustlook.scheduler.a d> = $r0;

        return;
    }

    private void <init>(android.content.Context)
    {
        java.util.concurrent.ConcurrentHashMap $r2;
        android.content.Context $r1;
        com.trustlook.scheduler.b r0;

        r0 := @this: com.trustlook.scheduler.b;

        $r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r2.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<com.trustlook.scheduler.b: java.util.Map c> = $r2;

        r0.<com.trustlook.scheduler.b: android.content.Context b> = $r1;

        return;
    }

    void <init>(android.content.Context, byte)
    {
        android.content.Context $r1;
        byte $b0;
        com.trustlook.scheduler.b r0;

        r0 := @this: com.trustlook.scheduler.b;

        $r1 := @parameter0: android.content.Context;

        $b0 := @parameter1: byte;

        specialinvoke r0.<com.trustlook.scheduler.b: void <init>(android.content.Context)>($r1);

        return;
    }

    public static java.lang.Object a(java.lang.Class)
    {
        java.lang.Class $r0;
        java.lang.Object $r1;
        com.trustlook.scheduler.b $r2;

        $r0 := @parameter0: java.lang.Class;

        $r2 = <com.trustlook.scheduler.b: com.trustlook.scheduler.b a>;

        $r1 = specialinvoke $r2.<com.trustlook.scheduler.b: java.lang.Object b(java.lang.Class)>($r0);

        return $r1;
    }

    public static void a(android.content.Context)
    {
        android.content.Context $r0;
        java.lang.Object $r1;
        com.trustlook.scheduler.a $r2;
        com.trustlook.scheduler.b $r3;

        $r0 := @parameter0: android.content.Context;

        $r2 = <com.trustlook.scheduler.b: com.trustlook.scheduler.a d>;

        $r1 = virtualinvoke $r2.<com.trustlook.scheduler.a: java.lang.Object a(android.content.Context)>($r0);

        $r3 = (com.trustlook.scheduler.b) $r1;

        <com.trustlook.scheduler.b: com.trustlook.scheduler.b a> = $r3;

        return;
    }

    private java.lang.Object b(java.lang.Class)
    {
        java.lang.Throwable $r5;
        java.util.Map $r2;
        java.lang.Class $r1;
        java.lang.Object $r3, $r4;
        com.trustlook.scheduler.b r0;

        r0 := @this: com.trustlook.scheduler.b;

        $r1 := @parameter0: java.lang.Class;

        $r2 = r0.<com.trustlook.scheduler.b: java.util.Map c>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        if $r3 != null goto label6;

        entermonitor $r1;

     label1:
        $r2 = r0.<com.trustlook.scheduler.b: java.util.Map c>;

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r3 = $r4;

        if $r4 != null goto label2;

        $r4 = specialinvoke r0.<com.trustlook.scheduler.b: java.lang.Object c(java.lang.Class)>($r1);

        $r3 = $r4;

        if $r4 == null goto label2;

        $r2 = r0.<com.trustlook.scheduler.b: java.util.Map c>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r4);

     label2:
        exitmonitor $r1;

     label3:
        return $r3;

     label4:
        $r5 := @caughtexception;

        exitmonitor $r1;

     label5:
        throw $r5;

     label6:
        return $r3;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private java.lang.Object c(java.lang.Class)
    {
        java.lang.Throwable $r6;
        android.content.Context $r5;
        java.lang.reflect.Field $r2;
        com.trustlook.scheduler.a $r4;
        com.trustlook.scheduler.b r0;
        java.lang.Exception $r7;
        java.lang.Class $r1;
        java.lang.Object $r3;
        java.lang.StringBuilder $r8;
        java.lang.String $r9;

        r0 := @this: com.trustlook.scheduler.b;

        $r1 := @parameter0: java.lang.Class;

     label1:
        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("FACTORY");

        virtualinvoke $r2.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        $r3 = virtualinvoke $r2.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(null);

     label2:
        $r4 = (com.trustlook.scheduler.a) $r3;

        $r5 = r0.<com.trustlook.scheduler.b: android.content.Context b>;

     label3:
        $r3 = virtualinvoke $r4.<com.trustlook.scheduler.a: java.lang.Object a(android.content.Context)>($r5);

     label4:
        return $r3;

     label5:
        $r6 := @caughtexception;

     label6:
        $r3 = virtualinvoke $r1.<java.lang.Class: java.lang.Object newInstance()>();

     label7:
        return $r3;

     label8:
        $r7 := @caughtexception;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unable to initialize ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ComponentFactory", $r9, $r7);

        return null;

        catch java.lang.NoSuchFieldException from label1 to label2 with label5;
        catch java.lang.NoSuchFieldException from label3 to label4 with label5;
        catch java.lang.Exception from label1 to label4 with label8;
        catch java.lang.Exception from label6 to label7 with label8;
    }
}
