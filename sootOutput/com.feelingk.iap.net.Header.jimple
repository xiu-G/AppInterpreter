public class com.feelingk.iap.net.Header extends java.lang.Object
{
    public final int HEADER_SIZE;
    private int mHeaderDataLength;
    private byte[] mHeaderSpecifier;

    public void <init>()
    {
        byte[] $r1;
        com.feelingk.iap.net.Header r0;

        r0 := @this: com.feelingk.iap.net.Header;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.feelingk.iap.net.Header: int HEADER_SIZE> = 12;

        $r1 = newarray (byte)[2];

        r0.<com.feelingk.iap.net.Header: byte[] mHeaderSpecifier> = $r1;

        return;
    }

    public int getDataLength()
    {
        int i0;
        com.feelingk.iap.net.Header r0;

        r0 := @this: com.feelingk.iap.net.Header;

        i0 = r0.<com.feelingk.iap.net.Header: int mHeaderDataLength>;

        return i0;
    }

    public byte[] getSpecifier()
    {
        byte[] r1;
        com.feelingk.iap.net.Header r0;

        r0 := @this: com.feelingk.iap.net.Header;

        r1 = r0.<com.feelingk.iap.net.Header: byte[] mHeaderSpecifier>;

        return r1;
    }

    protected void parse(byte[])
    {
        byte[] $r1, r2;
        int $i0;
        com.feelingk.iap.net.Header r0;
        java.lang.String $r3;

        r0 := @this: com.feelingk.iap.net.Header;

        $r1 := @parameter0: byte[];

        r2 = r0.<com.feelingk.iap.net.Header: byte[] mHeaderSpecifier>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r2, 0, 2);

        r2 = newarray (byte)[10];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 2, r2, 0, 10);

        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(byte[])>(r2);

        $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String trim()>();

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        $i0 = $i0 - 1;

        r0.<com.feelingk.iap.net.Header: int mHeaderDataLength> = $i0;

        return;
    }
}
