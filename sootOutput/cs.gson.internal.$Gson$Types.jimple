public final class cs.gson.internal.$Gson$Types extends java.lang.Object
{
    static final java.lang.reflect.Type[] EMPTY_TYPE_ARRAY;

    static void <clinit>()
    {
        java.lang.reflect.Type[] $r0;

        $r0 = newarray (java.lang.reflect.Type)[0];

        <cs.gson.internal.$Gson$Types: java.lang.reflect.Type[] EMPTY_TYPE_ARRAY> = $r0;

        return;
    }

    private void <init>()
    {
        cs.gson.internal.$Gson$Types r0;

        r0 := @this: cs.gson.internal.$Gson$Types;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void access$0(java.lang.reflect.Type)
    {
        java.lang.reflect.Type $r0;

        $r0 := @parameter0: java.lang.reflect.Type;

        staticinvoke <cs.gson.internal.$Gson$Types: void checkNotPrimitive(java.lang.reflect.Type)>($r0);

        return;
    }

    static int access$1(java.lang.Object)
    {
        int $i0;
        java.lang.Object $r0;

        $r0 := @parameter0: java.lang.Object;

        $i0 = staticinvoke <cs.gson.internal.$Gson$Types: int hashCodeOrZero(java.lang.Object)>($r0);

        return $i0;
    }

    public static java.lang.reflect.GenericArrayType arrayOf(java.lang.reflect.Type)
    {
        cs.gson.internal.$Gson$Types$GenericArrayTypeImpl $r1;
        java.lang.reflect.Type $r0;

        $r0 := @parameter0: java.lang.reflect.Type;

        $r1 = new cs.gson.internal.$Gson$Types$GenericArrayTypeImpl;

        specialinvoke $r1.<cs.gson.internal.$Gson$Types$GenericArrayTypeImpl: void <init>(java.lang.reflect.Type)>($r0);

        return $r1;
    }

    public static java.lang.reflect.Type canonicalize(java.lang.reflect.Type)
    {
        cs.gson.internal.$Gson$Types$GenericArrayTypeImpl $r2;
        java.lang.reflect.GenericArrayType r7;
        java.lang.reflect.WildcardType r8;
        cs.gson.internal.$Gson$Types$ParameterizedTypeImpl r4;
        java.lang.reflect.ParameterizedType r3;
        java.lang.reflect.Type $r0, $r5;
        cs.gson.internal.$Gson$Types$WildcardTypeImpl r9;
        java.lang.reflect.Type[] $r6, $r10;
        java.lang.Class r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.reflect.Type;

        $z0 = $r0 instanceof java.lang.Class;

        if $z0 == 0 goto label1;

        r1 = (java.lang.Class) $r0;

        $z0 = virtualinvoke r1.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label5;

        $r2 = new cs.gson.internal.$Gson$Types$GenericArrayTypeImpl;

        r1 = virtualinvoke r1.<java.lang.Class: java.lang.Class getComponentType()>();

        $r0 = staticinvoke <cs.gson.internal.$Gson$Types: java.lang.reflect.Type canonicalize(java.lang.reflect.Type)>(r1);

        specialinvoke $r2.<cs.gson.internal.$Gson$Types$GenericArrayTypeImpl: void <init>(java.lang.reflect.Type)>($r0);

        return $r2;

     label1:
        $z0 = $r0 instanceof java.lang.reflect.ParameterizedType;

        if $z0 == 0 goto label2;

        r3 = (java.lang.reflect.ParameterizedType) $r0;

        r4 = new cs.gson.internal.$Gson$Types$ParameterizedTypeImpl;

        $r0 = interfaceinvoke r3.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getOwnerType()>();

        $r5 = interfaceinvoke r3.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        $r6 = interfaceinvoke r3.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        specialinvoke r4.<cs.gson.internal.$Gson$Types$ParameterizedTypeImpl: void <init>(java.lang.reflect.Type,java.lang.reflect.Type,java.lang.reflect.Type[])>($r0, $r5, $r6);

        return r4;

     label2:
        $z0 = $r0 instanceof java.lang.reflect.GenericArrayType;

        if $z0 == 0 goto label3;

        r7 = (java.lang.reflect.GenericArrayType) $r0;

        $r2 = new cs.gson.internal.$Gson$Types$GenericArrayTypeImpl;

        $r0 = interfaceinvoke r7.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();

        specialinvoke $r2.<cs.gson.internal.$Gson$Types$GenericArrayTypeImpl: void <init>(java.lang.reflect.Type)>($r0);

        return $r2;

     label3:
        $z0 = $r0 instanceof java.lang.reflect.WildcardType;

        if $z0 == 0 goto label4;

        r8 = (java.lang.reflect.WildcardType) $r0;

        r9 = new cs.gson.internal.$Gson$Types$WildcardTypeImpl;

        $r6 = interfaceinvoke r8.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>();

        $r10 = interfaceinvoke r8.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>();

        specialinvoke r9.<cs.gson.internal.$Gson$Types$WildcardTypeImpl: void <init>(java.lang.reflect.Type[],java.lang.reflect.Type[])>($r6, $r10);

        return r9;

     label4:
        return $r0;

     label5:
        return r1;
    }

    private static void checkNotPrimitive(java.lang.reflect.Type)
    {
        java.lang.Class $r1;
        java.lang.reflect.Type $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.reflect.Type;

        $z0 = $r0 instanceof java.lang.Class;

        if $z0 == 0 goto label2;

        $r1 = (java.lang.Class) $r0;

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isPrimitive()>();

        if $z0 == 0 goto label2;

        $z0 = 0;

     label1:
        staticinvoke <cs.gson.internal.$Gson$Preconditions: void checkArgument(boolean)>($z0);

        return;

     label2:
        $z0 = 1;

        goto label1;
    }

    private static java.lang.Class declaringClassOf(java.lang.reflect.TypeVariable)
    {
        java.lang.reflect.GenericDeclaration $r1;
        java.lang.reflect.TypeVariable r0;
        java.lang.Class r2;
        boolean $z0;

        r0 := @parameter0: java.lang.reflect.TypeVariable;

        $r1 = interfaceinvoke r0.<java.lang.reflect.TypeVariable: java.lang.reflect.GenericDeclaration getGenericDeclaration()>();

        $z0 = $r1 instanceof java.lang.Class;

        if $z0 == 0 goto label1;

        r2 = (java.lang.Class) $r1;

        return r2;

     label1:
        return null;
    }

    static boolean equal(java.lang.Object, java.lang.Object)
    {
        java.lang.Object $r0, $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        if $r0 == $r1 goto label2;

        if $r0 == null goto label1;

        $z0 = virtualinvoke $r0.<java.lang.Object: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    public static boolean equals(java.lang.reflect.Type, java.lang.reflect.Type)
    {
        java.lang.reflect.GenericArrayType r6, r7;
        java.lang.reflect.WildcardType r8, r9;
        java.lang.String $r14, $r15;
        boolean $z0;
        java.lang.reflect.GenericDeclaration $r12, $r13;
        java.lang.reflect.TypeVariable r10, r11;
        java.lang.reflect.ParameterizedType r2, r3;
        java.lang.reflect.Type $r0, $r1;
        java.lang.reflect.Type[] $r4, $r5;

        $r0 := @parameter0: java.lang.reflect.Type;

        $r1 := @parameter1: java.lang.reflect.Type;

        if $r0 != $r1 goto label01;

        return 1;

     label01:
        $z0 = $r0 instanceof java.lang.Class;

        if $z0 == 0 goto label02;

        $z0 = virtualinvoke $r0.<java.lang.Object: boolean equals(java.lang.Object)>($r1);

        return $z0;

     label02:
        $z0 = $r0 instanceof java.lang.reflect.ParameterizedType;

        if $z0 == 0 goto label05;

        $z0 = $r1 instanceof java.lang.reflect.ParameterizedType;

        if $z0 != 0 goto label03;

        return 0;

     label03:
        r2 = (java.lang.reflect.ParameterizedType) $r0;

        r3 = (java.lang.reflect.ParameterizedType) $r1;

        $r0 = interfaceinvoke r2.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getOwnerType()>();

        $r1 = interfaceinvoke r3.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getOwnerType()>();

        $z0 = staticinvoke <cs.gson.internal.$Gson$Types: boolean equal(java.lang.Object,java.lang.Object)>($r0, $r1);

        if $z0 == 0 goto label04;

        $r0 = interfaceinvoke r2.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        $r1 = interfaceinvoke r3.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        $z0 = virtualinvoke $r0.<java.lang.Object: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label04;

        $r4 = interfaceinvoke r2.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $r5 = interfaceinvoke r3.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $z0 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r4, $r5);

        if $z0 != 0 goto label13;

     label04:
        return 0;

     label05:
        $z0 = $r0 instanceof java.lang.reflect.GenericArrayType;

        if $z0 == 0 goto label07;

        $z0 = $r1 instanceof java.lang.reflect.GenericArrayType;

        if $z0 != 0 goto label06;

        return 0;

     label06:
        r6 = (java.lang.reflect.GenericArrayType) $r0;

        r7 = (java.lang.reflect.GenericArrayType) $r1;

        $r0 = interfaceinvoke r6.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();

        $r1 = interfaceinvoke r7.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();

        $z0 = staticinvoke <cs.gson.internal.$Gson$Types: boolean equals(java.lang.reflect.Type,java.lang.reflect.Type)>($r0, $r1);

        return $z0;

     label07:
        $z0 = $r0 instanceof java.lang.reflect.WildcardType;

        if $z0 == 0 goto label10;

        $z0 = $r1 instanceof java.lang.reflect.WildcardType;

        if $z0 != 0 goto label08;

        return 0;

     label08:
        r8 = (java.lang.reflect.WildcardType) $r0;

        r9 = (java.lang.reflect.WildcardType) $r1;

        $r4 = interfaceinvoke r8.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>();

        $r5 = interfaceinvoke r9.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>();

        $z0 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r4, $r5);

        if $z0 == 0 goto label09;

        $r4 = interfaceinvoke r8.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>();

        $r5 = interfaceinvoke r9.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>();

        $z0 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r4, $r5);

        if $z0 != 0 goto label13;

     label09:
        return 0;

     label10:
        $z0 = $r0 instanceof java.lang.reflect.TypeVariable;

        if $z0 == 0 goto label12;

        $z0 = $r1 instanceof java.lang.reflect.TypeVariable;

        if $z0 != 0 goto label11;

        return 0;

     label11:
        r10 = (java.lang.reflect.TypeVariable) $r0;

        r11 = (java.lang.reflect.TypeVariable) $r1;

        $r12 = interfaceinvoke r10.<java.lang.reflect.TypeVariable: java.lang.reflect.GenericDeclaration getGenericDeclaration()>();

        $r13 = interfaceinvoke r11.<java.lang.reflect.TypeVariable: java.lang.reflect.GenericDeclaration getGenericDeclaration()>();

        if $r12 != $r13 goto label12;

        $r14 = interfaceinvoke r10.<java.lang.reflect.TypeVariable: java.lang.String getName()>();

        $r15 = interfaceinvoke r11.<java.lang.reflect.TypeVariable: java.lang.String getName()>();

        $z0 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r15);

        if $z0 != 0 goto label13;

     label12:
        return 0;

     label13:
        return 1;
    }

    public static java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type)
    {
        java.lang.reflect.GenericArrayType r1;
        java.lang.reflect.Type r0;
        java.lang.Class r2;
        boolean $z0;

        r0 := @parameter0: java.lang.reflect.Type;

        $z0 = r0 instanceof java.lang.reflect.GenericArrayType;

        if $z0 == 0 goto label1;

        r1 = (java.lang.reflect.GenericArrayType) r0;

        r0 = interfaceinvoke r1.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();

        return r0;

     label1:
        r2 = (java.lang.Class) r0;

        r2 = virtualinvoke r2.<java.lang.Class: java.lang.Class getComponentType()>();

        return r2;
    }

    public static java.lang.reflect.Type getCollectionElementType(java.lang.reflect.Type, java.lang.Class)
    {
        java.lang.reflect.ParameterizedType r5;
        java.lang.reflect.Type $r0, r2;
        java.lang.reflect.WildcardType r3;
        java.lang.reflect.Type[] $r4;
        java.lang.Class r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.reflect.Type;

        r1 := @parameter1: java.lang.Class;

        $r0 = staticinvoke <cs.gson.internal.$Gson$Types: java.lang.reflect.Type getSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class)>($r0, r1, class "Ljava/util/Collection;");

        r2 = $r0;

        $z0 = $r0 instanceof java.lang.reflect.WildcardType;

        if $z0 == 0 goto label1;

        r3 = (java.lang.reflect.WildcardType) $r0;

        $r4 = interfaceinvoke r3.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>();

        r2 = $r4[0];

     label1:
        $z0 = r2 instanceof java.lang.reflect.ParameterizedType;

        if $z0 == 0 goto label2;

        r5 = (java.lang.reflect.ParameterizedType) r2;

        $r4 = interfaceinvoke r5.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $r0 = $r4[0];

        return $r0;

     label2:
        return class "Ljava/lang/Object;";
    }

    static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type, java.lang.Class, java.lang.Class)
    {
        java.lang.Class[] $r3;
        java.lang.reflect.Type r2;
        int i0, i1;
        java.lang.reflect.Type[] $r5;
        java.lang.Class r0, $r1, $r4;
        boolean $z0;

        r2 := @parameter0: java.lang.reflect.Type;

        $r1 := @parameter1: java.lang.Class;

        r0 := @parameter2: java.lang.Class;

        if r0 != $r1 goto label01;

        return r2;

     label01:
        $z0 = virtualinvoke r0.<java.lang.Class: boolean isInterface()>();

        if $z0 == 0 goto label03;

        $r3 = virtualinvoke $r1.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        i1 = 0;

        i0 = lengthof $r3;

     label02:
        if i1 < i0 goto label06;

     label03:
        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isInterface()>();

        if $z0 != 0 goto label05;

     label04:
        if $r1 != class "Ljava/lang/Object;" goto label09;

     label05:
        return r0;

     label06:
        $r4 = $r3[i1];

        if $r4 != r0 goto label07;

        $r5 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()>();

        r2 = $r5[i1];

        return r2;

     label07:
        $r4 = $r3[i1];

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r4);

        if $z0 == 0 goto label08;

        $r5 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()>();

        r2 = $r5[i1];

        $r1 = $r3[i1];

        r2 = staticinvoke <cs.gson.internal.$Gson$Types: java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class)>(r2, $r1, r0);

        return r2;

     label08:
        i1 = i1 + 1;

        goto label02;

     label09:
        $r4 = virtualinvoke $r1.<java.lang.Class: java.lang.Class getSuperclass()>();

        if $r4 != r0 goto label10;

        r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>();

        return r2;

     label10:
        $z0 = virtualinvoke r0.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r4);

        if $z0 == 0 goto label11;

        r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>();

        r2 = staticinvoke <cs.gson.internal.$Gson$Types: java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class)>(r2, $r4, r0);

        return r2;

     label11:
        $r1 = $r4;

        goto label04;
    }

    public static java.lang.reflect.Type[] getMapKeyAndValueTypes(java.lang.reflect.Type, java.lang.Class)
    {
        java.lang.Object[] $r2;
        java.lang.reflect.ParameterizedType r3;
        java.lang.reflect.Type $r0;
        java.lang.reflect.Type[] $r4;
        java.lang.Class r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.reflect.Type;

        r1 := @parameter1: java.lang.Class;

        if $r0 != class "Ljava/util/Properties;" goto label1;

        $r2 = newarray (java.lang.reflect.Type)[2];

        $r2[0] = class "Ljava/lang/String;";

        $r2[1] = class "Ljava/lang/String;";

        $r4 = (java.lang.reflect.Type[]) $r2;

        return $r4;

     label1:
        $r0 = staticinvoke <cs.gson.internal.$Gson$Types: java.lang.reflect.Type getSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class)>($r0, r1, class "Ljava/util/Map;");

        $z0 = $r0 instanceof java.lang.reflect.ParameterizedType;

        if $z0 == 0 goto label2;

        r3 = (java.lang.reflect.ParameterizedType) $r0;

        $r4 = interfaceinvoke r3.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        return $r4;

     label2:
        $r2 = newarray (java.lang.reflect.Type)[2];

        $r2[0] = class "Ljava/lang/Object;";

        $r2[1] = class "Ljava/lang/Object;";

        $r4 = (java.lang.reflect.Type[]) $r2;

        return $r4;
    }

    public static java.lang.Class getRawType(java.lang.reflect.Type)
    {
        java.lang.reflect.GenericArrayType r3;
        java.lang.reflect.WildcardType r5;
        java.lang.IllegalArgumentException $r8;
        java.lang.reflect.ParameterizedType r2;
        java.lang.reflect.Type r0;
        java.lang.reflect.Type[] $r6;
        java.lang.Class r1;
        java.lang.Object $r4;
        java.lang.StringBuilder $r9;
        java.lang.String r7;
        boolean $z0;

        r0 := @parameter0: java.lang.reflect.Type;

        $z0 = r0 instanceof java.lang.Class;

        if $z0 == 0 goto label1;

        r1 = (java.lang.Class) r0;

        return r1;

     label1:
        $z0 = r0 instanceof java.lang.reflect.ParameterizedType;

        if $z0 == 0 goto label2;

        r2 = (java.lang.reflect.ParameterizedType) r0;

        r0 = interfaceinvoke r2.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        $z0 = r0 instanceof java.lang.Class;

        staticinvoke <cs.gson.internal.$Gson$Preconditions: void checkArgument(boolean)>($z0);

        r1 = (java.lang.Class) r0;

        return r1;

     label2:
        $z0 = r0 instanceof java.lang.reflect.GenericArrayType;

        if $z0 == 0 goto label3;

        r3 = (java.lang.reflect.GenericArrayType) r0;

        r0 = interfaceinvoke r3.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();

        r1 = staticinvoke <cs.gson.internal.$Gson$Types: java.lang.Class getRawType(java.lang.reflect.Type)>(r0);

        $r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(r1, 0);

        r1 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        return r1;

     label3:
        $z0 = r0 instanceof java.lang.reflect.TypeVariable;

        if $z0 == 0 goto label4;

        return class "Ljava/lang/Object;";

     label4:
        $z0 = r0 instanceof java.lang.reflect.WildcardType;

        if $z0 == 0 goto label5;

        r5 = (java.lang.reflect.WildcardType) r0;

        $r6 = interfaceinvoke r5.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>();

        r0 = $r6[0];

        r1 = staticinvoke <cs.gson.internal.$Gson$Types: java.lang.Class getRawType(java.lang.reflect.Type)>(r0);

        return r1;

     label5:
        if r0 != null goto label7;

        r7 = "null";

     label6:
        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("Expected a Class, ParameterizedType, or GenericArrayType, but <");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> is of type ");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        r7 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r7);

        throw $r8;

     label7:
        r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r7 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        goto label6;
    }

    static java.lang.reflect.Type getSupertype(java.lang.reflect.Type, java.lang.Class, java.lang.Class)
    {
        java.lang.reflect.Type $r0, $r3;
        java.lang.Class r1, r2;
        boolean $z0;

        $r0 := @parameter0: java.lang.reflect.Type;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: java.lang.Class;

        $z0 = virtualinvoke r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        staticinvoke <cs.gson.internal.$Gson$Preconditions: void checkArgument(boolean)>($z0);

        $r3 = staticinvoke <cs.gson.internal.$Gson$Types: java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class)>($r0, r1, r2);

        $r0 = staticinvoke <cs.gson.internal.$Gson$Types: java.lang.reflect.Type resolve(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type)>($r0, r1, $r3);

        return $r0;
    }

    private static int hashCodeOrZero(java.lang.Object)
    {
        int $i0;
        java.lang.Object $r0;

        $r0 := @parameter0: java.lang.Object;

        if $r0 == null goto label1;

        $i0 = virtualinvoke $r0.<java.lang.Object: int hashCode()>();

        return $i0;

     label1:
        return 0;
    }

    private static int indexOf(java.lang.Object[], java.lang.Object)
    {
        java.lang.Object[] $r0;
        int i0, $i1;
        java.lang.Object $r1, $r3;
        java.util.NoSuchElementException $r2;
        boolean $z0;

        $r0 := @parameter0: java.lang.Object[];

        $r1 := @parameter1: java.lang.Object;

        i0 = 0;

     label1:
        $i1 = lengthof $r0;

        if i0 < $i1 goto label2;

        $r2 = new java.util.NoSuchElementException;

        specialinvoke $r2.<java.util.NoSuchElementException: void <init>()>();

        throw $r2;

     label2:
        $r3 = $r0[i0];

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label3;

        return i0;

     label3:
        i0 = i0 + 1;

        goto label1;
    }

    public static transient java.lang.reflect.ParameterizedType newParameterizedTypeWithOwner(java.lang.reflect.Type, java.lang.reflect.Type, java.lang.reflect.Type[])
    {
        java.lang.reflect.Type $r0, $r1;
        java.lang.reflect.Type[] $r2;
        cs.gson.internal.$Gson$Types$ParameterizedTypeImpl $r3;

        $r0 := @parameter0: java.lang.reflect.Type;

        $r1 := @parameter1: java.lang.reflect.Type;

        $r2 := @parameter2: java.lang.reflect.Type[];

        $r3 = new cs.gson.internal.$Gson$Types$ParameterizedTypeImpl;

        specialinvoke $r3.<cs.gson.internal.$Gson$Types$ParameterizedTypeImpl: void <init>(java.lang.reflect.Type,java.lang.reflect.Type,java.lang.reflect.Type[])>($r0, $r1, $r2);

        return $r3;
    }

    public static java.lang.reflect.Type resolve(java.lang.reflect.Type, java.lang.Class, java.lang.reflect.Type)
    {
        java.lang.reflect.GenericArrayType $r7;
        java.lang.reflect.WildcardType r12;
        int i0, i1;
        boolean $z0;
        java.lang.reflect.TypeVariable r3;
        java.lang.reflect.ParameterizedType r8;
        java.lang.reflect.Type $r0, $r2, $r4, $r11;
        java.lang.reflect.Type[] $r9, r10;
        java.lang.Class r1, $r5;
        java.lang.Object r6;

        $r0 := @parameter0: java.lang.reflect.Type;

        r1 := @parameter1: java.lang.Class;

        $r2 := @parameter2: java.lang.reflect.Type;

     label01:
        $z0 = $r2 instanceof java.lang.reflect.TypeVariable;

        if $z0 == 0 goto label02;

        r3 = (java.lang.reflect.TypeVariable) $r2;

        $r4 = staticinvoke <cs.gson.internal.$Gson$Types: java.lang.reflect.Type resolveTypeVariable(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.TypeVariable)>($r0, r1, r3);

        $r2 = $r4;

        if $r4 != r3 goto label01;

        return $r4;

     label02:
        $z0 = $r2 instanceof java.lang.Class;

        if $z0 == 0 goto label05;

        $r5 = (java.lang.Class) $r2;

        $z0 = virtualinvoke $r5.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label05;

        r6 = (java.lang.Class) $r2;

        $r5 = (java.lang.Class) r6;

        $r5 = virtualinvoke $r5.<java.lang.Class: java.lang.Class getComponentType()>();

        $r0 = staticinvoke <cs.gson.internal.$Gson$Types: java.lang.reflect.Type resolve(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type)>($r0, r1, $r5);

        if $r5 != $r0 goto label04;

     label03:
        $r0 = (java.lang.reflect.Type) r6;

        return $r0;

     label04:
        r6 = staticinvoke <cs.gson.internal.$Gson$Types: java.lang.reflect.GenericArrayType arrayOf(java.lang.reflect.Type)>($r0);

        goto label03;

     label05:
        $z0 = $r2 instanceof java.lang.reflect.GenericArrayType;

        if $z0 == 0 goto label06;

        $r7 = (java.lang.reflect.GenericArrayType) $r2;

        $r2 = interfaceinvoke $r7.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();

        $r0 = staticinvoke <cs.gson.internal.$Gson$Types: java.lang.reflect.Type resolve(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type)>($r0, r1, $r2);

        if $r2 == $r0 goto label16;

        $r7 = staticinvoke <cs.gson.internal.$Gson$Types: java.lang.reflect.GenericArrayType arrayOf(java.lang.reflect.Type)>($r0);

        return $r7;

     label06:
        $z0 = $r2 instanceof java.lang.reflect.ParameterizedType;

        if $z0 == 0 goto label13;

        r8 = (java.lang.reflect.ParameterizedType) $r2;

        $r4 = interfaceinvoke r8.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getOwnerType()>();

        $r2 = staticinvoke <cs.gson.internal.$Gson$Types: java.lang.reflect.Type resolve(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type)>($r0, r1, $r4);

        if $r2 == $r4 goto label09;

        $z0 = 1;

     label07:
        $r9 = interfaceinvoke r8.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        r10 = $r9;

        i1 = 0;

        i0 = lengthof $r9;

     label08:
        if i1 < i0 goto label10;

        if $z0 == 0 goto label17;

        $r0 = interfaceinvoke r8.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        r8 = staticinvoke <cs.gson.internal.$Gson$Types: java.lang.reflect.ParameterizedType newParameterizedTypeWithOwner(java.lang.reflect.Type,java.lang.reflect.Type,java.lang.reflect.Type[])>($r2, $r0, r10);

        return r8;

     label09:
        $z0 = 0;

        goto label07;

     label10:
        $r4 = r10[i1];

        $r4 = staticinvoke <cs.gson.internal.$Gson$Types: java.lang.reflect.Type resolve(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type)>($r0, r1, $r4);

        $r11 = r10[i1];

        if $r4 == $r11 goto label12;

        if $z0 != 0 goto label11;

        r6 = virtualinvoke r10.<java.lang.Object: java.lang.Object clone()>();

        r10 = (java.lang.reflect.Type[]) r6;

        $z0 = 1;

     label11:
        r10[i1] = $r4;

     label12:
        i1 = i1 + 1;

        goto label08;

     label13:
        $z0 = $r2 instanceof java.lang.reflect.WildcardType;

        if $z0 == 0 goto label15;

        r12 = (java.lang.reflect.WildcardType) $r2;

        $r9 = interfaceinvoke r12.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>();

        r10 = interfaceinvoke r12.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>();

        i0 = lengthof $r9;

        if i0 != 1 goto label14;

        $r2 = $r9[0];

        $r0 = staticinvoke <cs.gson.internal.$Gson$Types: java.lang.reflect.Type resolve(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type)>($r0, r1, $r2);

        $r2 = $r9[0];

        if $r0 == $r2 goto label18;

        r12 = staticinvoke <cs.gson.internal.$Gson$Types: java.lang.reflect.WildcardType supertypeOf(java.lang.reflect.Type)>($r0);

        return r12;

     label14:
        i0 = lengthof r10;

        if i0 != 1 goto label18;

        $r2 = r10[0];

        $r0 = staticinvoke <cs.gson.internal.$Gson$Types: java.lang.reflect.Type resolve(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type)>($r0, r1, $r2);

        $r2 = r10[0];

        if $r0 == $r2 goto label18;

        r12 = staticinvoke <cs.gson.internal.$Gson$Types: java.lang.reflect.WildcardType subtypeOf(java.lang.reflect.Type)>($r0);

        return r12;

     label15:
        return $r2;

     label16:
        return $r7;

     label17:
        return r8;

     label18:
        return r12;
    }

    static java.lang.reflect.Type resolveTypeVariable(java.lang.reflect.Type, java.lang.Class, java.lang.reflect.TypeVariable)
    {
        java.lang.reflect.TypeVariable r2;
        java.lang.reflect.ParameterizedType r5;
        java.lang.reflect.Type $r0;
        java.lang.reflect.TypeVariable[] $r4;
        int $i0;
        java.lang.reflect.Type[] $r6;
        java.lang.Class r1, $r3;
        boolean $z0;

        $r0 := @parameter0: java.lang.reflect.Type;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: java.lang.reflect.TypeVariable;

        $r3 = staticinvoke <cs.gson.internal.$Gson$Types: java.lang.Class declaringClassOf(java.lang.reflect.TypeVariable)>(r2);

        if $r3 != null goto label1;

        return r2;

     label1:
        $r0 = staticinvoke <cs.gson.internal.$Gson$Types: java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class)>($r0, r1, $r3);

        $z0 = $r0 instanceof java.lang.reflect.ParameterizedType;

        if $z0 == 0 goto label2;

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();

        $i0 = staticinvoke <cs.gson.internal.$Gson$Types: int indexOf(java.lang.Object[],java.lang.Object)>($r4, r2);

        r5 = (java.lang.reflect.ParameterizedType) $r0;

        $r6 = interfaceinvoke r5.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $r0 = $r6[$i0];

        return $r0;

     label2:
        return r2;
    }

    public static java.lang.reflect.WildcardType subtypeOf(java.lang.reflect.Type)
    {
        java.lang.reflect.Type $r0;
        cs.gson.internal.$Gson$Types$WildcardTypeImpl $r1;
        java.lang.reflect.Type[] $r2, $r3;

        $r0 := @parameter0: java.lang.reflect.Type;

        $r1 = new cs.gson.internal.$Gson$Types$WildcardTypeImpl;

        $r2 = newarray (java.lang.reflect.Type)[1];

        $r2[0] = $r0;

        $r3 = <cs.gson.internal.$Gson$Types: java.lang.reflect.Type[] EMPTY_TYPE_ARRAY>;

        specialinvoke $r1.<cs.gson.internal.$Gson$Types$WildcardTypeImpl: void <init>(java.lang.reflect.Type[],java.lang.reflect.Type[])>($r2, $r3);

        return $r1;
    }

    public static java.lang.reflect.WildcardType supertypeOf(java.lang.reflect.Type)
    {
        java.lang.Object[] $r1;
        java.lang.reflect.Type $r0;
        cs.gson.internal.$Gson$Types$WildcardTypeImpl $r3;
        java.lang.reflect.Type[] $r2, $r4;

        $r0 := @parameter0: java.lang.reflect.Type;

        $r3 = new cs.gson.internal.$Gson$Types$WildcardTypeImpl;

        $r1 = newarray (java.lang.reflect.Type)[1];

        $r1[0] = class "Ljava/lang/Object;";

        $r2 = newarray (java.lang.reflect.Type)[1];

        $r2[0] = $r0;

        $r4 = (java.lang.reflect.Type[]) $r1;

        specialinvoke $r3.<cs.gson.internal.$Gson$Types$WildcardTypeImpl: void <init>(java.lang.reflect.Type[],java.lang.reflect.Type[])>($r4, $r2);

        return $r3;
    }

    public static java.lang.String typeToString(java.lang.reflect.Type)
    {
        java.lang.reflect.Type r0;
        java.lang.Class r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.reflect.Type;

        $z0 = r0 instanceof java.lang.Class;

        if $z0 == 0 goto label1;

        r1 = (java.lang.Class) r0;

        $r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        return $r2;

     label1:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }
}
