abstract class proguard.evaluation.value.SpecificIntegerValue extends proguard.evaluation.value.IntegerValue
{

    void <init>()
    {
        proguard.evaluation.value.SpecificIntegerValue r0;

        r0 := @this: proguard.evaluation.value.SpecificIntegerValue;

        specialinvoke r0.<proguard.evaluation.value.IntegerValue: void <init>()>();

        return;
    }

    public proguard.evaluation.value.IntegerValue add(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.SpecificIntegerValue r0;

        r0 := @this: proguard.evaluation.value.SpecificIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue add(proguard.evaluation.value.SpecificIntegerValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.IntegerValue add(proguard.evaluation.value.SpecificIntegerValue)
    {
        proguard.evaluation.value.SpecificIntegerValue r0, $r1;
        proguard.evaluation.value.CompositeIntegerValue $r2;

        r0 := @this: proguard.evaluation.value.SpecificIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificIntegerValue;

        $r2 = new proguard.evaluation.value.CompositeIntegerValue;

        specialinvoke $r2.<proguard.evaluation.value.CompositeIntegerValue: void <init>(proguard.evaluation.value.IntegerValue,byte,proguard.evaluation.value.IntegerValue)>(r0, 43, $r1);

        return $r2;
    }

    public proguard.evaluation.value.IntegerValue and(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.SpecificIntegerValue r0;

        r0 := @this: proguard.evaluation.value.SpecificIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue and(proguard.evaluation.value.SpecificIntegerValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.IntegerValue and(proguard.evaluation.value.SpecificIntegerValue)
    {
        proguard.evaluation.value.CompositeIntegerValue $r2;
        proguard.evaluation.value.SpecificIntegerValue r0, $r1;
        boolean $z0;

        r0 := @this: proguard.evaluation.value.SpecificIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificIntegerValue;

        $z0 = virtualinvoke r0.<proguard.evaluation.value.SpecificIntegerValue: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        return r0;

     label1:
        $r2 = new proguard.evaluation.value.CompositeIntegerValue;

        specialinvoke $r2.<proguard.evaluation.value.CompositeIntegerValue: void <init>(proguard.evaluation.value.IntegerValue,byte,proguard.evaluation.value.IntegerValue)>($r1, 38, r0);

        return $r2;
    }

    public proguard.evaluation.value.IntegerValue convertToByte()
    {
        proguard.evaluation.value.SpecificIntegerValue r0;
        proguard.evaluation.value.ConvertedByteValue $r1;

        r0 := @this: proguard.evaluation.value.SpecificIntegerValue;

        $r1 = new proguard.evaluation.value.ConvertedByteValue;

        specialinvoke $r1.<proguard.evaluation.value.ConvertedByteValue: void <init>(proguard.evaluation.value.IntegerValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.IntegerValue convertToCharacter()
    {
        proguard.evaluation.value.SpecificIntegerValue r0;
        proguard.evaluation.value.ConvertedCharacterValue $r1;

        r0 := @this: proguard.evaluation.value.SpecificIntegerValue;

        $r1 = new proguard.evaluation.value.ConvertedCharacterValue;

        specialinvoke $r1.<proguard.evaluation.value.ConvertedCharacterValue: void <init>(proguard.evaluation.value.IntegerValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.DoubleValue convertToDouble()
    {
        proguard.evaluation.value.ConvertedDoubleValue $r1;
        proguard.evaluation.value.SpecificIntegerValue r0;

        r0 := @this: proguard.evaluation.value.SpecificIntegerValue;

        $r1 = new proguard.evaluation.value.ConvertedDoubleValue;

        specialinvoke $r1.<proguard.evaluation.value.ConvertedDoubleValue: void <init>(proguard.evaluation.value.Value)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.FloatValue convertToFloat()
    {
        proguard.evaluation.value.ConvertedFloatValue $r1;
        proguard.evaluation.value.SpecificIntegerValue r0;

        r0 := @this: proguard.evaluation.value.SpecificIntegerValue;

        $r1 = new proguard.evaluation.value.ConvertedFloatValue;

        specialinvoke $r1.<proguard.evaluation.value.ConvertedFloatValue: void <init>(proguard.evaluation.value.Value)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.LongValue convertToLong()
    {
        proguard.evaluation.value.SpecificIntegerValue r0;
        proguard.evaluation.value.ConvertedLongValue $r1;

        r0 := @this: proguard.evaluation.value.SpecificIntegerValue;

        $r1 = new proguard.evaluation.value.ConvertedLongValue;

        specialinvoke $r1.<proguard.evaluation.value.ConvertedLongValue: void <init>(proguard.evaluation.value.Value)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.IntegerValue convertToShort()
    {
        proguard.evaluation.value.ConvertedShortValue $r1;
        proguard.evaluation.value.SpecificIntegerValue r0;

        r0 := @this: proguard.evaluation.value.SpecificIntegerValue;

        $r1 = new proguard.evaluation.value.ConvertedShortValue;

        specialinvoke $r1.<proguard.evaluation.value.ConvertedShortValue: void <init>(proguard.evaluation.value.IntegerValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.IntegerValue divide(proguard.evaluation.value.IntegerValue) throws java.lang.ArithmeticException
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.SpecificIntegerValue r0;

        r0 := @this: proguard.evaluation.value.SpecificIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue divideOf(proguard.evaluation.value.SpecificIntegerValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.IntegerValue divide(proguard.evaluation.value.SpecificIntegerValue) throws java.lang.ArithmeticException
    {
        proguard.evaluation.value.SpecificIntegerValue r0, $r1;
        proguard.evaluation.value.CompositeIntegerValue $r2;

        r0 := @this: proguard.evaluation.value.SpecificIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificIntegerValue;

        $r2 = new proguard.evaluation.value.CompositeIntegerValue;

        specialinvoke $r2.<proguard.evaluation.value.CompositeIntegerValue: void <init>(proguard.evaluation.value.IntegerValue,byte,proguard.evaluation.value.IntegerValue)>(r0, 47, $r1);

        return $r2;
    }

    public proguard.evaluation.value.IntegerValue divideOf(proguard.evaluation.value.IntegerValue) throws java.lang.ArithmeticException
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.SpecificIntegerValue r0;

        r0 := @this: proguard.evaluation.value.SpecificIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue divide(proguard.evaluation.value.SpecificIntegerValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.IntegerValue divideOf(proguard.evaluation.value.SpecificIntegerValue) throws java.lang.ArithmeticException
    {
        proguard.evaluation.value.SpecificIntegerValue r0, $r1;
        proguard.evaluation.value.CompositeIntegerValue $r2;

        r0 := @this: proguard.evaluation.value.SpecificIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificIntegerValue;

        $r2 = new proguard.evaluation.value.CompositeIntegerValue;

        specialinvoke $r2.<proguard.evaluation.value.CompositeIntegerValue: void <init>(proguard.evaluation.value.IntegerValue,byte,proguard.evaluation.value.IntegerValue)>($r1, 47, r0);

        return $r2;
    }

    public int equal(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.IntegerValue $r1;
        int $i0;
        proguard.evaluation.value.SpecificIntegerValue r0;

        r0 := @this: proguard.evaluation.value.SpecificIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        $i0 = virtualinvoke $r1.<proguard.evaluation.value.IntegerValue: int equal(proguard.evaluation.value.SpecificIntegerValue)>(r0);

        return $i0;
    }

    public int equal(proguard.evaluation.value.SpecificIntegerValue)
    {
        proguard.evaluation.value.SpecificIntegerValue r0, $r1;
        boolean $z0;

        r0 := @this: proguard.evaluation.value.SpecificIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificIntegerValue;

        $z0 = virtualinvoke r0.<proguard.evaluation.value.SpecificIntegerValue: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object $r1;
        java.lang.Class $r2, $r3;
        proguard.evaluation.value.SpecificIntegerValue r0;

        r0 := @this: proguard.evaluation.value.SpecificIntegerValue;

        $r1 := @parameter0: java.lang.Object;

        if $r1 == null goto label1;

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 != $r3 goto label1;

        return 1;

     label1:
        return 0;
    }

    public proguard.evaluation.value.IntegerValue generalize(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.SpecificIntegerValue r0;

        r0 := @this: proguard.evaluation.value.SpecificIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue generalize(proguard.evaluation.value.SpecificIntegerValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.IntegerValue generalize(proguard.evaluation.value.SpecificIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r2;
        proguard.evaluation.value.SpecificIntegerValue r0, $r1;
        boolean $z0;

        r0 := @this: proguard.evaluation.value.SpecificIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificIntegerValue;

        $z0 = virtualinvoke r0.<proguard.evaluation.value.SpecificIntegerValue: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        return r0;

     label1:
        r2 = <proguard.evaluation.value.ValueFactory: proguard.evaluation.value.IntegerValue INTEGER_VALUE>;

        return r2;
    }

    public int hashCode()
    {
        int $i0;
        java.lang.Class $r1;
        proguard.evaluation.value.SpecificIntegerValue r0;

        r0 := @this: proguard.evaluation.value.SpecificIntegerValue;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    public boolean isSpecific()
    {
        proguard.evaluation.value.SpecificIntegerValue r0;

        r0 := @this: proguard.evaluation.value.SpecificIntegerValue;

        return 1;
    }

    public int lessThan(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.IntegerValue $r1;
        int $i0;
        proguard.evaluation.value.SpecificIntegerValue r0;

        r0 := @this: proguard.evaluation.value.SpecificIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        $i0 = virtualinvoke $r1.<proguard.evaluation.value.IntegerValue: int greaterThan(proguard.evaluation.value.SpecificIntegerValue)>(r0);

        return $i0;
    }

    public int lessThan(proguard.evaluation.value.SpecificIntegerValue)
    {
        proguard.evaluation.value.SpecificIntegerValue r0, $r1;
        boolean $z0;

        r0 := @this: proguard.evaluation.value.SpecificIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificIntegerValue;

        $z0 = virtualinvoke r0.<proguard.evaluation.value.SpecificIntegerValue: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        return -1;

     label1:
        return 0;
    }

    public int lessThanOrEqual(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.IntegerValue $r1;
        int $i0;
        proguard.evaluation.value.SpecificIntegerValue r0;

        r0 := @this: proguard.evaluation.value.SpecificIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        $i0 = virtualinvoke $r1.<proguard.evaluation.value.IntegerValue: int greaterThanOrEqual(proguard.evaluation.value.SpecificIntegerValue)>(r0);

        return $i0;
    }

    public int lessThanOrEqual(proguard.evaluation.value.SpecificIntegerValue)
    {
        proguard.evaluation.value.SpecificIntegerValue r0, $r1;
        boolean $z0;

        r0 := @this: proguard.evaluation.value.SpecificIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificIntegerValue;

        $z0 = virtualinvoke r0.<proguard.evaluation.value.SpecificIntegerValue: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public proguard.evaluation.value.IntegerValue multiply(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.SpecificIntegerValue r0;

        r0 := @this: proguard.evaluation.value.SpecificIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue multiply(proguard.evaluation.value.SpecificIntegerValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.IntegerValue multiply(proguard.evaluation.value.SpecificIntegerValue)
    {
        proguard.evaluation.value.SpecificIntegerValue r0, $r1;
        proguard.evaluation.value.CompositeIntegerValue $r2;

        r0 := @this: proguard.evaluation.value.SpecificIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificIntegerValue;

        $r2 = new proguard.evaluation.value.CompositeIntegerValue;

        specialinvoke $r2.<proguard.evaluation.value.CompositeIntegerValue: void <init>(proguard.evaluation.value.IntegerValue,byte,proguard.evaluation.value.IntegerValue)>(r0, 42, $r1);

        return $r2;
    }

    public proguard.evaluation.value.IntegerValue negate()
    {
        proguard.evaluation.value.SpecificIntegerValue r0;
        proguard.evaluation.value.NegatedIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.SpecificIntegerValue;

        $r1 = new proguard.evaluation.value.NegatedIntegerValue;

        specialinvoke $r1.<proguard.evaluation.value.NegatedIntegerValue: void <init>(proguard.evaluation.value.IntegerValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.IntegerValue or(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.SpecificIntegerValue r0;

        r0 := @this: proguard.evaluation.value.SpecificIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue or(proguard.evaluation.value.SpecificIntegerValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.IntegerValue or(proguard.evaluation.value.SpecificIntegerValue)
    {
        proguard.evaluation.value.CompositeIntegerValue $r2;
        proguard.evaluation.value.SpecificIntegerValue r0, $r1;
        boolean $z0;

        r0 := @this: proguard.evaluation.value.SpecificIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificIntegerValue;

        $z0 = virtualinvoke r0.<proguard.evaluation.value.SpecificIntegerValue: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        return r0;

     label1:
        $r2 = new proguard.evaluation.value.CompositeIntegerValue;

        specialinvoke $r2.<proguard.evaluation.value.CompositeIntegerValue: void <init>(proguard.evaluation.value.IntegerValue,byte,proguard.evaluation.value.IntegerValue)>($r1, 124, r0);

        return $r2;
    }

    public proguard.evaluation.value.IntegerValue remainder(proguard.evaluation.value.IntegerValue) throws java.lang.ArithmeticException
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.SpecificIntegerValue r0;

        r0 := @this: proguard.evaluation.value.SpecificIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue remainderOf(proguard.evaluation.value.SpecificIntegerValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.IntegerValue remainder(proguard.evaluation.value.SpecificIntegerValue) throws java.lang.ArithmeticException
    {
        proguard.evaluation.value.SpecificIntegerValue r0, $r1;
        proguard.evaluation.value.CompositeIntegerValue $r2;

        r0 := @this: proguard.evaluation.value.SpecificIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificIntegerValue;

        $r2 = new proguard.evaluation.value.CompositeIntegerValue;

        specialinvoke $r2.<proguard.evaluation.value.CompositeIntegerValue: void <init>(proguard.evaluation.value.IntegerValue,byte,proguard.evaluation.value.IntegerValue)>(r0, 37, $r1);

        return $r2;
    }

    public proguard.evaluation.value.IntegerValue remainderOf(proguard.evaluation.value.IntegerValue) throws java.lang.ArithmeticException
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.SpecificIntegerValue r0;

        r0 := @this: proguard.evaluation.value.SpecificIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue remainder(proguard.evaluation.value.SpecificIntegerValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.IntegerValue remainderOf(proguard.evaluation.value.SpecificIntegerValue) throws java.lang.ArithmeticException
    {
        proguard.evaluation.value.SpecificIntegerValue r0, $r1;
        proguard.evaluation.value.CompositeIntegerValue $r2;

        r0 := @this: proguard.evaluation.value.SpecificIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificIntegerValue;

        $r2 = new proguard.evaluation.value.CompositeIntegerValue;

        specialinvoke $r2.<proguard.evaluation.value.CompositeIntegerValue: void <init>(proguard.evaluation.value.IntegerValue,byte,proguard.evaluation.value.IntegerValue)>($r1, 37, r0);

        return $r2;
    }

    public proguard.evaluation.value.IntegerValue shiftLeft(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.SpecificIntegerValue r0;

        r0 := @this: proguard.evaluation.value.SpecificIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue shiftLeftOf(proguard.evaluation.value.SpecificIntegerValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.IntegerValue shiftLeft(proguard.evaluation.value.SpecificIntegerValue)
    {
        proguard.evaluation.value.SpecificIntegerValue r0, $r1;
        proguard.evaluation.value.CompositeIntegerValue $r2;

        r0 := @this: proguard.evaluation.value.SpecificIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificIntegerValue;

        $r2 = new proguard.evaluation.value.CompositeIntegerValue;

        specialinvoke $r2.<proguard.evaluation.value.CompositeIntegerValue: void <init>(proguard.evaluation.value.IntegerValue,byte,proguard.evaluation.value.IntegerValue)>(r0, 60, $r1);

        return $r2;
    }

    public proguard.evaluation.value.IntegerValue shiftLeftOf(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.SpecificIntegerValue r0;

        r0 := @this: proguard.evaluation.value.SpecificIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue shiftLeft(proguard.evaluation.value.SpecificIntegerValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.IntegerValue shiftLeftOf(proguard.evaluation.value.SpecificIntegerValue)
    {
        proguard.evaluation.value.SpecificIntegerValue r0, $r1;
        proguard.evaluation.value.CompositeIntegerValue $r2;

        r0 := @this: proguard.evaluation.value.SpecificIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificIntegerValue;

        $r2 = new proguard.evaluation.value.CompositeIntegerValue;

        specialinvoke $r2.<proguard.evaluation.value.CompositeIntegerValue: void <init>(proguard.evaluation.value.IntegerValue,byte,proguard.evaluation.value.IntegerValue)>($r1, 60, r0);

        return $r2;
    }

    public proguard.evaluation.value.LongValue shiftLeftOf(proguard.evaluation.value.LongValue)
    {
        proguard.evaluation.value.SpecificIntegerValue r0;
        proguard.evaluation.value.LongValue $r1;

        r0 := @this: proguard.evaluation.value.SpecificIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.LongValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue shiftLeft(proguard.evaluation.value.IntegerValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.LongValue shiftLeftOf(proguard.evaluation.value.SpecificLongValue)
    {
        proguard.evaluation.value.CompositeLongValue $r2;
        proguard.evaluation.value.SpecificIntegerValue r0;
        proguard.evaluation.value.SpecificLongValue $r1;

        r0 := @this: proguard.evaluation.value.SpecificIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificLongValue;

        $r2 = new proguard.evaluation.value.CompositeLongValue;

        specialinvoke $r2.<proguard.evaluation.value.CompositeLongValue: void <init>(proguard.evaluation.value.LongValue,byte,proguard.evaluation.value.Value)>($r1, 60, r0);

        return $r2;
    }

    public proguard.evaluation.value.IntegerValue shiftRight(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.SpecificIntegerValue r0;

        r0 := @this: proguard.evaluation.value.SpecificIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue shiftRightOf(proguard.evaluation.value.SpecificIntegerValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.IntegerValue shiftRight(proguard.evaluation.value.SpecificIntegerValue)
    {
        proguard.evaluation.value.SpecificIntegerValue r0, $r1;
        proguard.evaluation.value.CompositeIntegerValue $r2;

        r0 := @this: proguard.evaluation.value.SpecificIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificIntegerValue;

        $r2 = new proguard.evaluation.value.CompositeIntegerValue;

        specialinvoke $r2.<proguard.evaluation.value.CompositeIntegerValue: void <init>(proguard.evaluation.value.IntegerValue,byte,proguard.evaluation.value.IntegerValue)>(r0, 62, $r1);

        return $r2;
    }

    public proguard.evaluation.value.IntegerValue shiftRightOf(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.SpecificIntegerValue r0;

        r0 := @this: proguard.evaluation.value.SpecificIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue shiftRight(proguard.evaluation.value.SpecificIntegerValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.IntegerValue shiftRightOf(proguard.evaluation.value.SpecificIntegerValue)
    {
        proguard.evaluation.value.SpecificIntegerValue r0, $r1;
        proguard.evaluation.value.CompositeIntegerValue $r2;

        r0 := @this: proguard.evaluation.value.SpecificIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificIntegerValue;

        $r2 = new proguard.evaluation.value.CompositeIntegerValue;

        specialinvoke $r2.<proguard.evaluation.value.CompositeIntegerValue: void <init>(proguard.evaluation.value.IntegerValue,byte,proguard.evaluation.value.IntegerValue)>($r1, 62, r0);

        return $r2;
    }

    public proguard.evaluation.value.LongValue shiftRightOf(proguard.evaluation.value.LongValue)
    {
        proguard.evaluation.value.SpecificIntegerValue r0;
        proguard.evaluation.value.LongValue $r1;

        r0 := @this: proguard.evaluation.value.SpecificIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.LongValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue shiftRight(proguard.evaluation.value.IntegerValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.LongValue shiftRightOf(proguard.evaluation.value.SpecificLongValue)
    {
        proguard.evaluation.value.CompositeLongValue $r2;
        proguard.evaluation.value.SpecificIntegerValue r0;
        proguard.evaluation.value.SpecificLongValue $r1;

        r0 := @this: proguard.evaluation.value.SpecificIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificLongValue;

        $r2 = new proguard.evaluation.value.CompositeLongValue;

        specialinvoke $r2.<proguard.evaluation.value.CompositeLongValue: void <init>(proguard.evaluation.value.LongValue,byte,proguard.evaluation.value.Value)>($r1, 62, r0);

        return $r2;
    }

    public proguard.evaluation.value.IntegerValue subtract(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.SpecificIntegerValue r0;

        r0 := @this: proguard.evaluation.value.SpecificIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue subtractFrom(proguard.evaluation.value.SpecificIntegerValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.IntegerValue subtract(proguard.evaluation.value.SpecificIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r3;
        proguard.evaluation.value.CompositeIntegerValue $r2;
        proguard.evaluation.value.SpecificIntegerValue r0, $r1;
        boolean $z0;

        r0 := @this: proguard.evaluation.value.SpecificIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificIntegerValue;

        $z0 = virtualinvoke r0.<proguard.evaluation.value.SpecificIntegerValue: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        r3 = <proguard.evaluation.value.SpecificValueFactory: proguard.evaluation.value.IntegerValue INTEGER_VALUE_0>;

        return r3;

     label1:
        $r2 = new proguard.evaluation.value.CompositeIntegerValue;

        specialinvoke $r2.<proguard.evaluation.value.CompositeIntegerValue: void <init>(proguard.evaluation.value.IntegerValue,byte,proguard.evaluation.value.IntegerValue)>(r0, 45, $r1);

        return $r2;
    }

    public proguard.evaluation.value.IntegerValue subtractFrom(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.SpecificIntegerValue r0;

        r0 := @this: proguard.evaluation.value.SpecificIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue subtract(proguard.evaluation.value.SpecificIntegerValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.IntegerValue subtractFrom(proguard.evaluation.value.SpecificIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r3;
        proguard.evaluation.value.CompositeIntegerValue $r2;
        proguard.evaluation.value.SpecificIntegerValue r0, $r1;
        boolean $z0;

        r0 := @this: proguard.evaluation.value.SpecificIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificIntegerValue;

        $z0 = virtualinvoke r0.<proguard.evaluation.value.SpecificIntegerValue: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        r3 = <proguard.evaluation.value.SpecificValueFactory: proguard.evaluation.value.IntegerValue INTEGER_VALUE_0>;

        return r3;

     label1:
        $r2 = new proguard.evaluation.value.CompositeIntegerValue;

        specialinvoke $r2.<proguard.evaluation.value.CompositeIntegerValue: void <init>(proguard.evaluation.value.IntegerValue,byte,proguard.evaluation.value.IntegerValue)>($r1, 45, r0);

        return $r2;
    }

    public proguard.evaluation.value.IntegerValue unsignedShiftRight(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.SpecificIntegerValue r0;

        r0 := @this: proguard.evaluation.value.SpecificIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue unsignedShiftRightOf(proguard.evaluation.value.SpecificIntegerValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.IntegerValue unsignedShiftRight(proguard.evaluation.value.SpecificIntegerValue)
    {
        proguard.evaluation.value.SpecificIntegerValue r0, $r1;
        proguard.evaluation.value.CompositeIntegerValue $r2;

        r0 := @this: proguard.evaluation.value.SpecificIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificIntegerValue;

        $r2 = new proguard.evaluation.value.CompositeIntegerValue;

        specialinvoke $r2.<proguard.evaluation.value.CompositeIntegerValue: void <init>(proguard.evaluation.value.IntegerValue,byte,proguard.evaluation.value.IntegerValue)>(r0, 125, $r1);

        return $r2;
    }

    public proguard.evaluation.value.IntegerValue unsignedShiftRightOf(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.SpecificIntegerValue r0;

        r0 := @this: proguard.evaluation.value.SpecificIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue unsignedShiftRight(proguard.evaluation.value.SpecificIntegerValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.IntegerValue unsignedShiftRightOf(proguard.evaluation.value.SpecificIntegerValue)
    {
        proguard.evaluation.value.SpecificIntegerValue r0, $r1;
        proguard.evaluation.value.CompositeIntegerValue $r2;

        r0 := @this: proguard.evaluation.value.SpecificIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificIntegerValue;

        $r2 = new proguard.evaluation.value.CompositeIntegerValue;

        specialinvoke $r2.<proguard.evaluation.value.CompositeIntegerValue: void <init>(proguard.evaluation.value.IntegerValue,byte,proguard.evaluation.value.IntegerValue)>($r1, 125, r0);

        return $r2;
    }

    public proguard.evaluation.value.LongValue unsignedShiftRightOf(proguard.evaluation.value.LongValue)
    {
        proguard.evaluation.value.SpecificIntegerValue r0;
        proguard.evaluation.value.LongValue $r1;

        r0 := @this: proguard.evaluation.value.SpecificIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.LongValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue unsignedShiftRight(proguard.evaluation.value.IntegerValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.LongValue unsignedShiftRightOf(proguard.evaluation.value.SpecificLongValue)
    {
        proguard.evaluation.value.CompositeLongValue $r2;
        proguard.evaluation.value.SpecificIntegerValue r0;
        proguard.evaluation.value.SpecificLongValue $r1;

        r0 := @this: proguard.evaluation.value.SpecificIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificLongValue;

        $r2 = new proguard.evaluation.value.CompositeLongValue;

        specialinvoke $r2.<proguard.evaluation.value.CompositeLongValue: void <init>(proguard.evaluation.value.LongValue,byte,proguard.evaluation.value.Value)>($r1, 125, r0);

        return $r2;
    }

    public proguard.evaluation.value.IntegerValue xor(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.SpecificIntegerValue r0;

        r0 := @this: proguard.evaluation.value.SpecificIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue xor(proguard.evaluation.value.SpecificIntegerValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.IntegerValue xor(proguard.evaluation.value.SpecificIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r3;
        proguard.evaluation.value.CompositeIntegerValue $r2;
        proguard.evaluation.value.SpecificIntegerValue r0, $r1;
        boolean $z0;

        r0 := @this: proguard.evaluation.value.SpecificIntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificIntegerValue;

        $z0 = virtualinvoke r0.<proguard.evaluation.value.SpecificIntegerValue: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        r3 = <proguard.evaluation.value.SpecificValueFactory: proguard.evaluation.value.IntegerValue INTEGER_VALUE_0>;

        return r3;

     label1:
        $r2 = new proguard.evaluation.value.CompositeIntegerValue;

        specialinvoke $r2.<proguard.evaluation.value.CompositeIntegerValue: void <init>(proguard.evaluation.value.IntegerValue,byte,proguard.evaluation.value.IntegerValue)>($r1, 94, r0);

        return $r2;
    }
}
