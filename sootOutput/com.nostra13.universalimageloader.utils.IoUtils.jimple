public final class com.nostra13.universalimageloader.utils.IoUtils extends java.lang.Object
{
    public static final int CONTINUE_LOADING_PERCENTAGE;
    public static final int DEFAULT_BUFFER_SIZE;
    public static final int DEFAULT_IMAGE_TOTAL_SIZE;

    private void <init>()
    {
        com.nostra13.universalimageloader.utils.IoUtils r0;

        r0 := @this: com.nostra13.universalimageloader.utils.IoUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void closeSilently(java.io.Closeable)
    {
        java.lang.Exception $r1;
        java.io.Closeable $r0;

        $r0 := @parameter0: java.io.Closeable;

     label1:
        interfaceinvoke $r0.<java.io.Closeable: void close()>();

     label2:
        return;

     label3:
        $r1 := @caughtexception;

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static boolean copyStream(java.io.InputStream, java.io.OutputStream, com.nostra13.universalimageloader.utils.IoUtils$CopyListener)
    {
        java.io.OutputStream $r1;
        int $i0;
        com.nostra13.universalimageloader.utils.IoUtils$CopyListener $r2;
        java.io.InputStream $r0;
        boolean $z0;

        $r0 := @parameter0: java.io.InputStream;

        $r1 := @parameter1: java.io.OutputStream;

        $r2 := @parameter2: com.nostra13.universalimageloader.utils.IoUtils$CopyListener;

        $i0 = 32768;

        $z0 = staticinvoke <com.nostra13.universalimageloader.utils.IoUtils: boolean copyStream(java.io.InputStream,java.io.OutputStream,com.nostra13.universalimageloader.utils.IoUtils$CopyListener,int)>($r0, $r1, $r2, $i0);

        return $z0;
    }

    public static boolean copyStream(java.io.InputStream, java.io.OutputStream, com.nostra13.universalimageloader.utils.IoUtils$CopyListener, int)
    {
        java.io.OutputStream $r1;
        byte[] $r3;
        com.nostra13.universalimageloader.utils.IoUtils$CopyListener $r2;
        int $i0, $i1, $i2, $i3;
        java.io.InputStream $r0;
        boolean $z0;

        $r0 := @parameter0: java.io.InputStream;

        $r1 := @parameter1: java.io.OutputStream;

        $r2 := @parameter2: com.nostra13.universalimageloader.utils.IoUtils$CopyListener;

        $i0 := @parameter3: int;

        $i1 = virtualinvoke $r0.<java.io.InputStream: int available()>();

        $i2 = $i1;

        if $i1 > 0 goto label1;

        $i2 = 512000;

     label1:
        $r3 = newarray (byte)[$i0];

        $z0 = staticinvoke <com.nostra13.universalimageloader.utils.IoUtils: boolean shouldStopLoading(com.nostra13.universalimageloader.utils.IoUtils$CopyListener,int,int)>($r2, 0, $i2);

        if $z0 == 0 goto label2;

        return 0;

     label2:
        $i1 = 0;

     label3:
        $i3 = virtualinvoke $r0.<java.io.InputStream: int read(byte[],int,int)>($r3, 0, $i0);

        if $i3 == -1 goto label4;

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>($r3, 0, $i3);

        $i1 = $i1 + $i3;

        $z0 = staticinvoke <com.nostra13.universalimageloader.utils.IoUtils: boolean shouldStopLoading(com.nostra13.universalimageloader.utils.IoUtils$CopyListener,int,int)>($r2, $i1, $i2);

        if $z0 == 0 goto label3;

        return 0;

     label4:
        virtualinvoke $r1.<java.io.OutputStream: void flush()>();

        return 1;
    }

    public static void readAndCloseStream(java.io.InputStream)
    {
        java.lang.Throwable $r2, $r3;
        byte[] $r1;
        int $i0;
        java.io.InputStream $r0;

        $r0 := @parameter0: java.io.InputStream;

        $r1 = newarray (byte)[32768];

     label1:
        $i0 = virtualinvoke $r0.<java.io.InputStream: int read(byte[],int,int)>($r1, 0, 32768);

     label2:
        if $i0 != -1 goto label1;

        staticinvoke <com.nostra13.universalimageloader.utils.IoUtils: void closeSilently(java.io.Closeable)>($r0);

        return;

     label3:
        $r2 := @caughtexception;

        staticinvoke <com.nostra13.universalimageloader.utils.IoUtils: void closeSilently(java.io.Closeable)>($r0);

        return;

     label4:
        $r3 := @caughtexception;

        staticinvoke <com.nostra13.universalimageloader.utils.IoUtils: void closeSilently(java.io.Closeable)>($r0);

        throw $r3;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label4;
    }

    private static boolean shouldStopLoading(com.nostra13.universalimageloader.utils.IoUtils$CopyListener, int, int)
    {
        int $i0, $i1;
        com.nostra13.universalimageloader.utils.IoUtils$CopyListener $r0;
        boolean $z0;

        $r0 := @parameter0: com.nostra13.universalimageloader.utils.IoUtils$CopyListener;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $r0 == null goto label1;

        $z0 = interfaceinvoke $r0.<com.nostra13.universalimageloader.utils.IoUtils$CopyListener: boolean onBytesCopied(int,int)>($i0, $i1);

        if $z0 != 0 goto label1;

        $i0 = $i0 * 100;

        $i0 = $i0 / $i1;

        if $i0 >= 75 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static void <clinit>()
    {
        <com.nostra13.universalimageloader.utils.IoUtils: int DEFAULT_IMAGE_TOTAL_SIZE> = 512000;

        <com.nostra13.universalimageloader.utils.IoUtils: int DEFAULT_BUFFER_SIZE> = 32768;

        <com.nostra13.universalimageloader.utils.IoUtils: int CONTINUE_LOADING_PERCENTAGE> = 75;

        return;
    }
}
