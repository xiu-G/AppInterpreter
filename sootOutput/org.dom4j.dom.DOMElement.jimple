public class org.dom4j.dom.DOMElement extends org.dom4j.tree.DefaultElement implements org.w3c.dom.Element
{
    private static final org.dom4j.DocumentFactory DOCUMENT_FACTORY;

    static void <clinit>()
    {
        org.dom4j.DocumentFactory $r0;

        $r0 = staticinvoke <org.dom4j.dom.DOMDocumentFactory: org.dom4j.DocumentFactory getInstance()>();

        <org.dom4j.dom.DOMElement: org.dom4j.DocumentFactory DOCUMENT_FACTORY> = $r0;

        return;
    }

    public void <init>(java.lang.String)
    {
        java.lang.String $r1;
        org.dom4j.dom.DOMElement r0;

        r0 := @this: org.dom4j.dom.DOMElement;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.dom4j.tree.DefaultElement: void <init>(java.lang.String)>($r1);

        return;
    }

    public void <init>(java.lang.String, org.dom4j.Namespace)
    {
        java.lang.String $r1;
        org.dom4j.dom.DOMElement r0;
        org.dom4j.Namespace $r2;

        r0 := @this: org.dom4j.dom.DOMElement;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.dom4j.Namespace;

        specialinvoke r0.<org.dom4j.tree.DefaultElement: void <init>(java.lang.String,org.dom4j.Namespace)>($r1, $r2);

        return;
    }

    public void <init>(org.dom4j.QName)
    {
        org.dom4j.QName $r1;
        org.dom4j.dom.DOMElement r0;

        r0 := @this: org.dom4j.dom.DOMElement;

        $r1 := @parameter0: org.dom4j.QName;

        specialinvoke r0.<org.dom4j.tree.DefaultElement: void <init>(org.dom4j.QName)>($r1);

        return;
    }

    public void <init>(org.dom4j.QName, int)
    {
        int $i0;
        org.dom4j.QName $r1;
        org.dom4j.dom.DOMElement r0;

        r0 := @this: org.dom4j.dom.DOMElement;

        $r1 := @parameter0: org.dom4j.QName;

        $i0 := @parameter1: int;

        specialinvoke r0.<org.dom4j.tree.DefaultElement: void <init>(org.dom4j.QName,int)>($r1, $i0);

        return;
    }

    private void checkNewChildNode(org.w3c.dom.Node) throws org.w3c.dom.DOMException
    {
        short $s0;
        org.w3c.dom.Node $r1;
        org.w3c.dom.DOMException $r2;
        int $i1;
        org.dom4j.dom.DOMElement r0;

        r0 := @this: org.dom4j.dom.DOMElement;

        $r1 := @parameter0: org.w3c.dom.Node;

        $s0 = interfaceinvoke $r1.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 == 1 goto label1;

        $i1 = (int) $s0;

        if $i1 == 3 goto label1;

        $i1 = (int) $s0;

        if $i1 == 8 goto label1;

        $i1 = (int) $s0;

        if $i1 == 7 goto label1;

        $i1 = (int) $s0;

        if $i1 == 4 goto label1;

        $i1 = (int) $s0;

        if $i1 == 5 goto label1;

        $r2 = new org.w3c.dom.DOMException;

        specialinvoke $r2.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(3, "Given node cannot be a child of element");

        throw $r2;

     label1:
        return;
    }

    public org.w3c.dom.Node appendChild(org.w3c.dom.Node) throws org.w3c.dom.DOMException
    {
        org.dom4j.dom.DOMElement r0;
        org.w3c.dom.Node $r1;

        r0 := @this: org.dom4j.dom.DOMElement;

        $r1 := @parameter0: org.w3c.dom.Node;

        specialinvoke r0.<org.dom4j.dom.DOMElement: void checkNewChildNode(org.w3c.dom.Node)>($r1);

        $r1 = staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.Node appendChild(org.dom4j.Node,org.w3c.dom.Node)>(r0, $r1);

        return $r1;
    }

    protected org.dom4j.Attribute attribute(java.lang.String, java.lang.String)
    {
        java.util.List $r3;
        int $i0, i1, $i2;
        java.lang.Object $r4;
        java.lang.String $r1, $r2, $r6;
        org.dom4j.dom.DOMElement r0;
        org.dom4j.Attribute r5;
        boolean $z0;

        r0 := @this: org.dom4j.dom.DOMElement;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.dom4j.dom.DOMElement: java.util.List attributeList()>();

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        i1 = 0;

     label1:
        if i1 >= $i0 goto label5;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i1);

        r5 = (org.dom4j.Attribute) $r4;

        $r6 = interfaceinvoke r5.<org.dom4j.Attribute: java.lang.String getName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label4;

        if $r1 == null goto label2;

        $i2 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i2 != 0 goto label3;

     label2:
        $r6 = interfaceinvoke r5.<org.dom4j.Attribute: java.lang.String getNamespaceURI()>();

        if $r6 == null goto label6;

        $r6 = interfaceinvoke r5.<org.dom4j.Attribute: java.lang.String getNamespaceURI()>();

        $i2 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i2 == 0 goto label6;

     label3:
        if $r1 == null goto label4;

        $r6 = interfaceinvoke r5.<org.dom4j.Attribute: java.lang.String getNamespaceURI()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label4;

        return r5;

     label4:
        i1 = i1 + 1;

        goto label1;

     label5:
        return null;

     label6:
        return r5;
    }

    protected org.dom4j.Attribute attribute(org.w3c.dom.Attr)
    {
        org.w3c.dom.Attr $r1;
        org.dom4j.DocumentFactory $r2;
        org.dom4j.QName $r6;
        java.lang.String $r3, $r4, $r5;
        org.dom4j.dom.DOMElement r0;
        org.dom4j.Attribute $r7;

        r0 := @this: org.dom4j.dom.DOMElement;

        $r1 := @parameter0: org.w3c.dom.Attr;

        $r2 = <org.dom4j.dom.DOMElement: org.dom4j.DocumentFactory DOCUMENT_FACTORY>;

        $r3 = interfaceinvoke $r1.<org.w3c.dom.Attr: java.lang.String getLocalName()>();

        $r4 = interfaceinvoke $r1.<org.w3c.dom.Attr: java.lang.String getPrefix()>();

        $r5 = interfaceinvoke $r1.<org.w3c.dom.Attr: java.lang.String getNamespaceURI()>();

        $r6 = virtualinvoke $r2.<org.dom4j.DocumentFactory: org.dom4j.QName createQName(java.lang.String,java.lang.String,java.lang.String)>($r3, $r4, $r5);

        $r7 = virtualinvoke r0.<org.dom4j.dom.DOMElement: org.dom4j.Attribute attribute(org.dom4j.QName)>($r6);

        return $r7;
    }

    public org.w3c.dom.Node cloneNode(boolean)
    {
        org.dom4j.dom.DOMElement r0;
        boolean $z0;
        org.w3c.dom.Node $r1;

        r0 := @this: org.dom4j.dom.DOMElement;

        $z0 := @parameter0: boolean;

        $r1 = staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.Node cloneNode(org.dom4j.Node,boolean)>(r0, $z0);

        return $r1;
    }

    protected org.dom4j.Attribute createAttribute(org.w3c.dom.Attr)
    {
        org.w3c.dom.Attr $r1;
        org.dom4j.DocumentFactory $r5;
        org.dom4j.dom.DOMAttribute $r7;
        org.dom4j.QName $r6;
        java.lang.String $r2, $r3, $r4;
        org.dom4j.dom.DOMElement r0;

        r0 := @this: org.dom4j.dom.DOMElement;

        $r1 := @parameter0: org.w3c.dom.Attr;

        $r2 = interfaceinvoke $r1.<org.w3c.dom.Attr: java.lang.String getLocalName()>();

        if $r2 == null goto label2;

        $r3 = interfaceinvoke $r1.<org.w3c.dom.Attr: java.lang.String getPrefix()>();

        $r4 = interfaceinvoke $r1.<org.w3c.dom.Attr: java.lang.String getNamespaceURI()>();

        $r5 = virtualinvoke r0.<org.dom4j.dom.DOMElement: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r6 = virtualinvoke $r5.<org.dom4j.DocumentFactory: org.dom4j.QName createQName(java.lang.String,java.lang.String,java.lang.String)>($r2, $r3, $r4);

     label1:
        $r7 = new org.dom4j.dom.DOMAttribute;

        $r2 = interfaceinvoke $r1.<org.w3c.dom.Attr: java.lang.String getValue()>();

        specialinvoke $r7.<org.dom4j.dom.DOMAttribute: void <init>(org.dom4j.QName,java.lang.String)>($r6, $r2);

        return $r7;

     label2:
        $r2 = interfaceinvoke $r1.<org.w3c.dom.Attr: java.lang.String getName()>();

        $r5 = virtualinvoke r0.<org.dom4j.dom.DOMElement: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r6 = virtualinvoke $r5.<org.dom4j.DocumentFactory: org.dom4j.QName createQName(java.lang.String)>($r2);

        goto label1;
    }

    public java.lang.String getAttribute(java.lang.String)
    {
        java.lang.String $r1;
        org.dom4j.dom.DOMElement r0;

        r0 := @this: org.dom4j.dom.DOMElement;

        $r1 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<org.dom4j.dom.DOMElement: java.lang.String attributeValue(java.lang.String)>($r1);

        if $r1 == null goto label1;

        return $r1;

     label1:
        return "";
    }

    public java.lang.String getAttributeNS(java.lang.String, java.lang.String)
    {
        java.lang.String $r1, $r2;
        org.dom4j.dom.DOMElement r0;
        org.dom4j.Attribute $r3;

        r0 := @this: org.dom4j.dom.DOMElement;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.dom4j.dom.DOMElement: org.dom4j.Attribute attribute(java.lang.String,java.lang.String)>($r1, $r2);

        if $r3 == null goto label1;

        $r1 = interfaceinvoke $r3.<org.dom4j.Attribute: java.lang.String getValue()>();

        if $r1 == null goto label1;

        return $r1;

     label1:
        return "";
    }

    public org.w3c.dom.Attr getAttributeNode(java.lang.String)
    {
        java.lang.String $r1;
        org.w3c.dom.Attr $r3;
        org.dom4j.dom.DOMElement r0;
        org.dom4j.Attribute $r2;

        r0 := @this: org.dom4j.dom.DOMElement;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.dom4j.dom.DOMElement: org.dom4j.Attribute attribute(java.lang.String)>($r1);

        $r3 = staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.Attr asDOMAttr(org.dom4j.Node)>($r2);

        return $r3;
    }

    public org.w3c.dom.Attr getAttributeNodeNS(java.lang.String, java.lang.String)
    {
        java.lang.String $r1, $r2;
        org.dom4j.dom.DOMElement r0;
        org.dom4j.Attribute $r3;

        r0 := @this: org.dom4j.dom.DOMElement;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.dom4j.dom.DOMElement: org.dom4j.Attribute attribute(java.lang.String,java.lang.String)>($r1, $r2);

        if $r3 == null goto label1;

        staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.Attr asDOMAttr(org.dom4j.Node)>($r3);

     label1:
        return null;
    }

    public org.w3c.dom.NamedNodeMap getAttributes()
    {
        org.dom4j.dom.DOMAttributeNodeMap $r1;
        org.dom4j.dom.DOMElement r0;

        r0 := @this: org.dom4j.dom.DOMElement;

        $r1 = new org.dom4j.dom.DOMAttributeNodeMap;

        specialinvoke $r1.<org.dom4j.dom.DOMAttributeNodeMap: void <init>(org.dom4j.dom.DOMElement)>(r0);

        return $r1;
    }

    public org.w3c.dom.NodeList getChildNodes()
    {
        java.util.List $r1;
        org.w3c.dom.NodeList $r2;
        org.dom4j.dom.DOMElement r0;

        r0 := @this: org.dom4j.dom.DOMElement;

        $r1 = virtualinvoke r0.<org.dom4j.dom.DOMElement: java.util.List content()>();

        $r2 = staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.NodeList createNodeList(java.util.List)>($r1);

        return $r2;
    }

    protected org.dom4j.DocumentFactory getDocumentFactory()
    {
        org.dom4j.QName $r1;
        org.dom4j.dom.DOMElement r0;
        org.dom4j.DocumentFactory $r2;

        r0 := @this: org.dom4j.dom.DOMElement;

        $r1 = virtualinvoke r0.<org.dom4j.dom.DOMElement: org.dom4j.QName getQName()>();

        $r2 = virtualinvoke $r1.<org.dom4j.QName: org.dom4j.DocumentFactory getDocumentFactory()>();

        if $r2 == null goto label1;

        return $r2;

     label1:
        $r2 = <org.dom4j.dom.DOMElement: org.dom4j.DocumentFactory DOCUMENT_FACTORY>;

        return $r2;
    }

    public org.w3c.dom.NodeList getElementsByTagName(java.lang.String)
    {
        org.w3c.dom.NodeList $r3;
        java.lang.String $r1;
        org.dom4j.dom.DOMElement r0;
        java.util.ArrayList r2;

        r0 := @this: org.dom4j.dom.DOMElement;

        $r1 := @parameter0: java.lang.String;

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        staticinvoke <org.dom4j.dom.DOMNodeHelper: void appendElementsByTagName(java.util.List,org.dom4j.Branch,java.lang.String)>(r2, r0, $r1);

        $r3 = staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.NodeList createNodeList(java.util.List)>(r2);

        return $r3;
    }

    public org.w3c.dom.NodeList getElementsByTagNameNS(java.lang.String, java.lang.String)
    {
        org.w3c.dom.NodeList $r4;
        java.lang.String $r1, $r2;
        org.dom4j.dom.DOMElement r0;
        java.util.ArrayList r3;

        r0 := @this: org.dom4j.dom.DOMElement;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        r3 = new java.util.ArrayList;

        specialinvoke r3.<java.util.ArrayList: void <init>()>();

        staticinvoke <org.dom4j.dom.DOMNodeHelper: void appendElementsByTagNameNS(java.util.List,org.dom4j.Branch,java.lang.String,java.lang.String)>(r3, r0, $r1, $r2);

        $r4 = staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.NodeList createNodeList(java.util.List)>(r3);

        return $r4;
    }

    public org.w3c.dom.Node getFirstChild()
    {
        org.dom4j.dom.DOMElement r0;
        org.dom4j.Node $r1;
        org.w3c.dom.Node $r2;

        r0 := @this: org.dom4j.dom.DOMElement;

        $r1 = virtualinvoke r0.<org.dom4j.dom.DOMElement: org.dom4j.Node node(int)>(0);

        $r2 = staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.Node asDOMNode(org.dom4j.Node)>($r1);

        return $r2;
    }

    public org.w3c.dom.Node getLastChild()
    {
        org.dom4j.Node $r1;
        org.w3c.dom.Node $r2;
        int $i0, $i1;
        org.dom4j.dom.DOMElement r0;

        r0 := @this: org.dom4j.dom.DOMElement;

        $i0 = virtualinvoke r0.<org.dom4j.dom.DOMElement: int nodeCount()>();

        $i1 = -1;

        $i0 = $i0 + $i1;

        $r1 = virtualinvoke r0.<org.dom4j.dom.DOMElement: org.dom4j.Node node(int)>($i0);

        $r2 = staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.Node asDOMNode(org.dom4j.Node)>($r1);

        return $r2;
    }

    public java.lang.String getLocalName()
    {
        org.dom4j.QName $r1;
        java.lang.String $r2;
        org.dom4j.dom.DOMElement r0;

        r0 := @this: org.dom4j.dom.DOMElement;

        $r1 = virtualinvoke r0.<org.dom4j.dom.DOMElement: org.dom4j.QName getQName()>();

        $r2 = virtualinvoke $r1.<org.dom4j.QName: java.lang.String getName()>();

        return $r2;
    }

    public java.lang.String getNamespaceURI()
    {
        org.dom4j.QName $r1;
        java.lang.String $r2;
        org.dom4j.dom.DOMElement r0;

        r0 := @this: org.dom4j.dom.DOMElement;

        $r1 = virtualinvoke r0.<org.dom4j.dom.DOMElement: org.dom4j.QName getQName()>();

        $r2 = virtualinvoke $r1.<org.dom4j.QName: java.lang.String getNamespaceURI()>();

        return $r2;
    }

    public org.w3c.dom.Node getNextSibling()
    {
        org.dom4j.dom.DOMElement r0;
        org.w3c.dom.Node $r1;

        r0 := @this: org.dom4j.dom.DOMElement;

        $r1 = staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.Node getNextSibling(org.dom4j.Node)>(r0);

        return $r1;
    }

    public java.lang.String getNodeName()
    {
        java.lang.String $r1;
        org.dom4j.dom.DOMElement r0;

        r0 := @this: org.dom4j.dom.DOMElement;

        $r1 = virtualinvoke r0.<org.dom4j.dom.DOMElement: java.lang.String getName()>();

        return $r1;
    }

    public java.lang.String getNodeValue() throws org.w3c.dom.DOMException
    {
        org.dom4j.dom.DOMElement r0;

        r0 := @this: org.dom4j.dom.DOMElement;

        return null;
    }

    public org.w3c.dom.Document getOwnerDocument()
    {
        org.dom4j.dom.DOMElement r0;
        org.w3c.dom.Document $r1;

        r0 := @this: org.dom4j.dom.DOMElement;

        $r1 = staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.Document getOwnerDocument(org.dom4j.Node)>(r0);

        return $r1;
    }

    public org.w3c.dom.Node getParentNode()
    {
        org.dom4j.dom.DOMElement r0;
        org.w3c.dom.Node $r1;

        r0 := @this: org.dom4j.dom.DOMElement;

        $r1 = staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.Node getParentNode(org.dom4j.Node)>(r0);

        return $r1;
    }

    public java.lang.String getPrefix()
    {
        org.dom4j.QName $r1;
        java.lang.String $r2;
        org.dom4j.dom.DOMElement r0;

        r0 := @this: org.dom4j.dom.DOMElement;

        $r1 = virtualinvoke r0.<org.dom4j.dom.DOMElement: org.dom4j.QName getQName()>();

        $r2 = virtualinvoke $r1.<org.dom4j.QName: java.lang.String getNamespacePrefix()>();

        return $r2;
    }

    public org.w3c.dom.Node getPreviousSibling()
    {
        org.dom4j.dom.DOMElement r0;
        org.w3c.dom.Node $r1;

        r0 := @this: org.dom4j.dom.DOMElement;

        $r1 = staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.Node getPreviousSibling(org.dom4j.Node)>(r0);

        return $r1;
    }

    protected org.dom4j.QName getQName(java.lang.String, java.lang.String)
    {
        org.dom4j.DocumentFactory $r5;
        int $i0;
        org.dom4j.QName $r6;
        java.lang.String $r1, $r2, r3, r4;
        org.dom4j.dom.DOMElement r0;

        r0 := @this: org.dom4j.dom.DOMElement;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $i0 = virtualinvoke $r2.<java.lang.String: int indexOf(int)>(58);

        r3 = "";

        r4 = $r2;

        if $i0 < 0 goto label1;

        r3 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $i0 = $i0 + 1;

        r4 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>($i0);

     label1:
        $r5 = virtualinvoke r0.<org.dom4j.dom.DOMElement: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r6 = virtualinvoke $r5.<org.dom4j.DocumentFactory: org.dom4j.QName createQName(java.lang.String,java.lang.String,java.lang.String)>(r4, r3, $r1);

        return $r6;
    }

    public java.lang.String getTagName()
    {
        java.lang.String $r1;
        org.dom4j.dom.DOMElement r0;

        r0 := @this: org.dom4j.dom.DOMElement;

        $r1 = virtualinvoke r0.<org.dom4j.dom.DOMElement: java.lang.String getName()>();

        return $r1;
    }

    public boolean hasAttribute(java.lang.String)
    {
        java.lang.String $r1;
        org.dom4j.dom.DOMElement r0;
        org.dom4j.Attribute $r2;

        r0 := @this: org.dom4j.dom.DOMElement;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.dom4j.dom.DOMElement: org.dom4j.Attribute attribute(java.lang.String)>($r1);

        if $r2 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean hasAttributeNS(java.lang.String, java.lang.String)
    {
        java.lang.String $r1, $r2;
        org.dom4j.dom.DOMElement r0;
        org.dom4j.Attribute $r3;

        r0 := @this: org.dom4j.dom.DOMElement;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.dom4j.dom.DOMElement: org.dom4j.Attribute attribute(java.lang.String,java.lang.String)>($r1, $r2);

        if $r3 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean hasAttributes()
    {
        org.dom4j.dom.DOMElement r0;
        boolean $z0;

        r0 := @this: org.dom4j.dom.DOMElement;

        $z0 = staticinvoke <org.dom4j.dom.DOMNodeHelper: boolean hasAttributes(org.dom4j.Node)>(r0);

        return $z0;
    }

    public boolean hasChildNodes()
    {
        int $i0;
        org.dom4j.dom.DOMElement r0;

        r0 := @this: org.dom4j.dom.DOMElement;

        $i0 = virtualinvoke r0.<org.dom4j.dom.DOMElement: int nodeCount()>();

        if $i0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public org.w3c.dom.Node insertBefore(org.w3c.dom.Node, org.w3c.dom.Node) throws org.w3c.dom.DOMException
    {
        org.dom4j.dom.DOMElement r0;
        org.w3c.dom.Node $r1, $r2;

        r0 := @this: org.dom4j.dom.DOMElement;

        $r1 := @parameter0: org.w3c.dom.Node;

        $r2 := @parameter1: org.w3c.dom.Node;

        specialinvoke r0.<org.dom4j.dom.DOMElement: void checkNewChildNode(org.w3c.dom.Node)>($r1);

        $r1 = staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.Node insertBefore(org.dom4j.Node,org.w3c.dom.Node,org.w3c.dom.Node)>(r0, $r1, $r2);

        return $r1;
    }

    public boolean isSupported(java.lang.String, java.lang.String)
    {
        java.lang.String $r1, $r2;
        org.dom4j.dom.DOMElement r0;
        boolean $z0;

        r0 := @this: org.dom4j.dom.DOMElement;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.dom4j.dom.DOMNodeHelper: boolean isSupported(org.dom4j.Node,java.lang.String,java.lang.String)>(r0, $r1, $r2);

        return $z0;
    }

    public void removeAttribute(java.lang.String) throws org.w3c.dom.DOMException
    {
        java.lang.String $r1;
        org.dom4j.dom.DOMElement r0;
        org.dom4j.Attribute $r2;

        r0 := @this: org.dom4j.dom.DOMElement;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.dom4j.dom.DOMElement: org.dom4j.Attribute attribute(java.lang.String)>($r1);

        if $r2 == null goto label1;

        virtualinvoke r0.<org.dom4j.dom.DOMElement: boolean remove(org.dom4j.Attribute)>($r2);

     label1:
        return;
    }

    public void removeAttributeNS(java.lang.String, java.lang.String) throws org.w3c.dom.DOMException
    {
        java.lang.String $r1, $r2;
        org.dom4j.dom.DOMElement r0;
        org.dom4j.Attribute $r3;

        r0 := @this: org.dom4j.dom.DOMElement;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.dom4j.dom.DOMElement: org.dom4j.Attribute attribute(java.lang.String,java.lang.String)>($r1, $r2);

        if $r3 == null goto label1;

        virtualinvoke r0.<org.dom4j.dom.DOMElement: boolean remove(org.dom4j.Attribute)>($r3);

     label1:
        return;
    }

    public org.w3c.dom.Attr removeAttributeNode(org.w3c.dom.Attr) throws org.w3c.dom.DOMException
    {
        org.w3c.dom.DOMException $r3;
        org.w3c.dom.Attr $r1;
        org.dom4j.dom.DOMElement r0;
        org.dom4j.Attribute $r2;

        r0 := @this: org.dom4j.dom.DOMElement;

        $r1 := @parameter0: org.w3c.dom.Attr;

        $r2 = virtualinvoke r0.<org.dom4j.dom.DOMElement: org.dom4j.Attribute attribute(org.w3c.dom.Attr)>($r1);

        if $r2 == null goto label1;

        interfaceinvoke $r2.<org.dom4j.Attribute: org.dom4j.Node detach()>();

        $r1 = staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.Attr asDOMAttr(org.dom4j.Node)>($r2);

        return $r1;

     label1:
        $r3 = new org.w3c.dom.DOMException;

        specialinvoke $r3.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(8, "No such attribute");

        throw $r3;
    }

    public org.w3c.dom.Node removeChild(org.w3c.dom.Node) throws org.w3c.dom.DOMException
    {
        org.dom4j.dom.DOMElement r0;
        org.w3c.dom.Node $r1;

        r0 := @this: org.dom4j.dom.DOMElement;

        $r1 := @parameter0: org.w3c.dom.Node;

        $r1 = staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.Node removeChild(org.dom4j.Node,org.w3c.dom.Node)>(r0, $r1);

        return $r1;
    }

    public org.w3c.dom.Node replaceChild(org.w3c.dom.Node, org.w3c.dom.Node) throws org.w3c.dom.DOMException
    {
        org.dom4j.dom.DOMElement r0;
        org.w3c.dom.Node $r1, $r2;

        r0 := @this: org.dom4j.dom.DOMElement;

        $r1 := @parameter0: org.w3c.dom.Node;

        $r2 := @parameter1: org.w3c.dom.Node;

        specialinvoke r0.<org.dom4j.dom.DOMElement: void checkNewChildNode(org.w3c.dom.Node)>($r1);

        $r1 = staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.Node replaceChild(org.dom4j.Node,org.w3c.dom.Node,org.w3c.dom.Node)>(r0, $r1, $r2);

        return $r1;
    }

    public void setAttribute(java.lang.String, java.lang.String) throws org.w3c.dom.DOMException
    {
        java.lang.String $r1, $r2;
        org.dom4j.dom.DOMElement r0;

        r0 := @this: org.dom4j.dom.DOMElement;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        virtualinvoke r0.<org.dom4j.dom.DOMElement: org.dom4j.Element addAttribute(java.lang.String,java.lang.String)>($r1, $r2);

        return;
    }

    public void setAttributeNS(java.lang.String, java.lang.String, java.lang.String) throws org.w3c.dom.DOMException
    {
        org.dom4j.QName $r5;
        java.lang.String $r1, $r2, $r3;
        org.dom4j.dom.DOMElement r0;
        org.dom4j.Attribute $r4;

        r0 := @this: org.dom4j.dom.DOMElement;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 = virtualinvoke r0.<org.dom4j.dom.DOMElement: org.dom4j.Attribute attribute(java.lang.String,java.lang.String)>($r1, $r2);

        if $r4 == null goto label1;

        interfaceinvoke $r4.<org.dom4j.Attribute: void setValue(java.lang.String)>($r3);

        return;

     label1:
        $r5 = virtualinvoke r0.<org.dom4j.dom.DOMElement: org.dom4j.QName getQName(java.lang.String,java.lang.String)>($r1, $r2);

        virtualinvoke r0.<org.dom4j.dom.DOMElement: org.dom4j.Element addAttribute(org.dom4j.QName,java.lang.String)>($r5, $r3);

        return;
    }

    public org.w3c.dom.Attr setAttributeNode(org.w3c.dom.Attr) throws org.w3c.dom.DOMException
    {
        org.w3c.dom.Element $r4;
        org.w3c.dom.DOMException $r2;
        org.w3c.dom.Attr $r1;
        org.dom4j.dom.DOMElement r0;
        org.dom4j.Attribute $r3, $r5;
        boolean $z0;

        r0 := @this: org.dom4j.dom.DOMElement;

        $r1 := @parameter0: org.w3c.dom.Attr;

        $z0 = virtualinvoke r0.<org.dom4j.dom.DOMElement: boolean isReadOnly()>();

        if $z0 == 0 goto label1;

        $r2 = new org.w3c.dom.DOMException;

        specialinvoke $r2.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(7, "No modification allowed");

        throw $r2;

     label1:
        $r3 = virtualinvoke r0.<org.dom4j.dom.DOMElement: org.dom4j.Attribute attribute(org.w3c.dom.Attr)>($r1);

        if $r3 == $r1 goto label4;

        $r4 = interfaceinvoke $r1.<org.w3c.dom.Attr: org.w3c.dom.Element getOwnerElement()>();

        if $r4 == null goto label2;

        $r2 = new org.w3c.dom.DOMException;

        specialinvoke $r2.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(10, "Attribute is already in use");

        throw $r2;

     label2:
        $r5 = virtualinvoke r0.<org.dom4j.dom.DOMElement: org.dom4j.Attribute createAttribute(org.w3c.dom.Attr)>($r1);

        if $r3 == null goto label3;

        interfaceinvoke $r3.<org.dom4j.Attribute: org.dom4j.Node detach()>();

     label3:
        virtualinvoke r0.<org.dom4j.dom.DOMElement: void add(org.dom4j.Attribute)>($r5);

     label4:
        $r1 = staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.Attr asDOMAttr(org.dom4j.Node)>($r3);

        return $r1;
    }

    public org.w3c.dom.Attr setAttributeNodeNS(org.w3c.dom.Attr) throws org.w3c.dom.DOMException
    {
        java.lang.String $r2, $r3;
        org.w3c.dom.Attr $r1;
        org.dom4j.dom.DOMElement r0;
        org.dom4j.Attribute $r4, r5;

        r0 := @this: org.dom4j.dom.DOMElement;

        $r1 := @parameter0: org.w3c.dom.Attr;

        $r2 = interfaceinvoke $r1.<org.w3c.dom.Attr: java.lang.String getNamespaceURI()>();

        $r3 = interfaceinvoke $r1.<org.w3c.dom.Attr: java.lang.String getLocalName()>();

        $r4 = virtualinvoke r0.<org.dom4j.dom.DOMElement: org.dom4j.Attribute attribute(java.lang.String,java.lang.String)>($r2, $r3);

        r5 = $r4;

        if $r4 == null goto label2;

        $r2 = interfaceinvoke $r1.<org.w3c.dom.Attr: java.lang.String getValue()>();

        interfaceinvoke $r4.<org.dom4j.Attribute: void setValue(java.lang.String)>($r2);

     label1:
        $r1 = staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.Attr asDOMAttr(org.dom4j.Node)>(r5);

        return $r1;

     label2:
        $r4 = virtualinvoke r0.<org.dom4j.dom.DOMElement: org.dom4j.Attribute createAttribute(org.w3c.dom.Attr)>($r1);

        r5 = $r4;

        virtualinvoke r0.<org.dom4j.dom.DOMElement: void add(org.dom4j.Attribute)>($r4);

        goto label1;
    }

    public void setNodeValue(java.lang.String) throws org.w3c.dom.DOMException
    {
        java.lang.String $r1;
        org.dom4j.dom.DOMElement r0;

        r0 := @this: org.dom4j.dom.DOMElement;

        $r1 := @parameter0: java.lang.String;

        return;
    }

    public void setPrefix(java.lang.String) throws org.w3c.dom.DOMException
    {
        java.lang.String $r1;
        org.dom4j.dom.DOMElement r0;

        r0 := @this: org.dom4j.dom.DOMElement;

        $r1 := @parameter0: java.lang.String;

        staticinvoke <org.dom4j.dom.DOMNodeHelper: void setPrefix(org.dom4j.Node,java.lang.String)>(r0, $r1);

        return;
    }

    public boolean supports(java.lang.String, java.lang.String)
    {
        java.lang.String $r1, $r2;
        org.dom4j.dom.DOMElement r0;
        boolean $z0;

        r0 := @this: org.dom4j.dom.DOMElement;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.dom4j.dom.DOMNodeHelper: boolean supports(org.dom4j.Node,java.lang.String,java.lang.String)>(r0, $r1, $r2);

        return $z0;
    }
}
