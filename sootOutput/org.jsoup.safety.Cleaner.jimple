public class org.jsoup.safety.Cleaner extends java.lang.Object
{
    private org.jsoup.safety.Whitelist whitelist;

    public void <init>(org.jsoup.safety.Whitelist)
    {
        org.jsoup.safety.Whitelist $r1;
        org.jsoup.safety.Cleaner r0;

        r0 := @this: org.jsoup.safety.Cleaner;

        $r1 := @parameter0: org.jsoup.safety.Whitelist;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r1);

        r0.<org.jsoup.safety.Cleaner: org.jsoup.safety.Whitelist whitelist> = $r1;

        return;
    }

    static org.jsoup.safety.Whitelist access$000(org.jsoup.safety.Cleaner)
    {
        org.jsoup.safety.Whitelist r1;
        org.jsoup.safety.Cleaner $r0;

        $r0 := @parameter0: org.jsoup.safety.Cleaner;

        r1 = $r0.<org.jsoup.safety.Cleaner: org.jsoup.safety.Whitelist whitelist>;

        return r1;
    }

    static org.jsoup.safety.Cleaner$ElementMeta access$100(org.jsoup.safety.Cleaner, org.jsoup.nodes.Element)
    {
        org.jsoup.safety.Cleaner$ElementMeta $r2;
        org.jsoup.safety.Cleaner $r0;
        org.jsoup.nodes.Element $r1;

        $r0 := @parameter0: org.jsoup.safety.Cleaner;

        $r1 := @parameter1: org.jsoup.nodes.Element;

        $r2 = specialinvoke $r0.<org.jsoup.safety.Cleaner: org.jsoup.safety.Cleaner$ElementMeta createSafeElement(org.jsoup.nodes.Element)>($r1);

        return $r2;
    }

    private int copySafeNodes(org.jsoup.nodes.Element, org.jsoup.nodes.Element)
    {
        org.jsoup.safety.Cleaner r0;
        org.jsoup.nodes.Element $r1, $r2;
        org.jsoup.safety.Cleaner$CleaningVisitor r3;
        int $i0;
        org.jsoup.select.NodeTraversor r4;

        r0 := @this: org.jsoup.safety.Cleaner;

        $r1 := @parameter0: org.jsoup.nodes.Element;

        $r2 := @parameter1: org.jsoup.nodes.Element;

        r3 = new org.jsoup.safety.Cleaner$CleaningVisitor;

        specialinvoke r3.<org.jsoup.safety.Cleaner$CleaningVisitor: void <init>(org.jsoup.safety.Cleaner,org.jsoup.nodes.Element,org.jsoup.nodes.Element,org.jsoup.safety.Cleaner$1)>(r0, $r1, $r2, null);

        r4 = new org.jsoup.select.NodeTraversor;

        specialinvoke r4.<org.jsoup.select.NodeTraversor: void <init>(org.jsoup.select.NodeVisitor)>(r3);

        virtualinvoke r4.<org.jsoup.select.NodeTraversor: void traverse(org.jsoup.nodes.Node)>($r1);

        $i0 = staticinvoke <org.jsoup.safety.Cleaner$CleaningVisitor: int access$300(org.jsoup.safety.Cleaner$CleaningVisitor)>(r3);

        return $i0;
    }

    private org.jsoup.safety.Cleaner$ElementMeta createSafeElement(org.jsoup.nodes.Element)
    {
        org.jsoup.safety.Whitelist $r11;
        org.jsoup.nodes.Attributes r3, $r7;
        java.util.Iterator $r8;
        org.jsoup.parser.Tag $r5;
        org.jsoup.safety.Cleaner$ElementMeta $r12;
        org.jsoup.nodes.Attribute r10;
        org.jsoup.safety.Cleaner r0;
        org.jsoup.nodes.Element $r1, r2;
        int i0;
        java.lang.Object $r9;
        java.lang.String $r4, $r6;
        boolean $z0;

        r0 := @this: org.jsoup.safety.Cleaner;

        $r1 := @parameter0: org.jsoup.nodes.Element;

        $r4 = virtualinvoke $r1.<org.jsoup.nodes.Element: java.lang.String tagName()>();

        r3 = new org.jsoup.nodes.Attributes;

        specialinvoke r3.<org.jsoup.nodes.Attributes: void <init>()>();

        r2 = new org.jsoup.nodes.Element;

        $r5 = staticinvoke <org.jsoup.parser.Tag: org.jsoup.parser.Tag valueOf(java.lang.String)>($r4);

        $r6 = virtualinvoke $r1.<org.jsoup.nodes.Element: java.lang.String baseUri()>();

        specialinvoke r2.<org.jsoup.nodes.Element: void <init>(org.jsoup.parser.Tag,java.lang.String,org.jsoup.nodes.Attributes)>($r5, $r6, r3);

        i0 = 0;

        $r7 = virtualinvoke $r1.<org.jsoup.nodes.Element: org.jsoup.nodes.Attributes attributes()>();

        $r8 = virtualinvoke $r7.<org.jsoup.nodes.Attributes: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.jsoup.nodes.Attribute) $r9;

        $r11 = r0.<org.jsoup.safety.Cleaner: org.jsoup.safety.Whitelist whitelist>;

        $z0 = virtualinvoke $r11.<org.jsoup.safety.Whitelist: boolean isSafeAttribute(java.lang.String,org.jsoup.nodes.Element,org.jsoup.nodes.Attribute)>($r4, $r1, r10);

        if $z0 == 0 goto label2;

        virtualinvoke r3.<org.jsoup.nodes.Attributes: void put(org.jsoup.nodes.Attribute)>(r10);

        goto label1;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        $r11 = r0.<org.jsoup.safety.Cleaner: org.jsoup.safety.Whitelist whitelist>;

        $r7 = virtualinvoke $r11.<org.jsoup.safety.Whitelist: org.jsoup.nodes.Attributes getEnforcedAttributes(java.lang.String)>($r4);

        virtualinvoke r3.<org.jsoup.nodes.Attributes: void addAll(org.jsoup.nodes.Attributes)>($r7);

        $r12 = new org.jsoup.safety.Cleaner$ElementMeta;

        specialinvoke $r12.<org.jsoup.safety.Cleaner$ElementMeta: void <init>(org.jsoup.nodes.Element,int)>(r2, i0);

        return $r12;
    }

    public org.jsoup.nodes.Document clean(org.jsoup.nodes.Document)
    {
        org.jsoup.safety.Cleaner r0;
        org.jsoup.nodes.Document $r1, $r3;
        org.jsoup.nodes.Element $r4, $r5;
        java.lang.String $r2;

        r0 := @this: org.jsoup.safety.Cleaner;

        $r1 := @parameter0: org.jsoup.nodes.Document;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r1);

        $r2 = virtualinvoke $r1.<org.jsoup.nodes.Document: java.lang.String baseUri()>();

        $r3 = staticinvoke <org.jsoup.nodes.Document: org.jsoup.nodes.Document createShell(java.lang.String)>($r2);

        $r4 = virtualinvoke $r1.<org.jsoup.nodes.Document: org.jsoup.nodes.Element body()>();

        if $r4 == null goto label1;

        $r4 = virtualinvoke $r1.<org.jsoup.nodes.Document: org.jsoup.nodes.Element body()>();

        $r5 = virtualinvoke $r3.<org.jsoup.nodes.Document: org.jsoup.nodes.Element body()>();

        specialinvoke r0.<org.jsoup.safety.Cleaner: int copySafeNodes(org.jsoup.nodes.Element,org.jsoup.nodes.Element)>($r4, $r5);

     label1:
        return $r3;
    }

    public boolean isValid(org.jsoup.nodes.Document)
    {
        org.jsoup.safety.Cleaner r0;
        org.jsoup.nodes.Document $r1, $r3;
        org.jsoup.nodes.Element $r4, $r5;
        int $i0;
        java.lang.String $r2;

        r0 := @this: org.jsoup.safety.Cleaner;

        $r1 := @parameter0: org.jsoup.nodes.Document;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r1);

        $r2 = virtualinvoke $r1.<org.jsoup.nodes.Document: java.lang.String baseUri()>();

        $r3 = staticinvoke <org.jsoup.nodes.Document: org.jsoup.nodes.Document createShell(java.lang.String)>($r2);

        $r4 = virtualinvoke $r1.<org.jsoup.nodes.Document: org.jsoup.nodes.Element body()>();

        $r5 = virtualinvoke $r3.<org.jsoup.nodes.Document: org.jsoup.nodes.Element body()>();

        $i0 = specialinvoke r0.<org.jsoup.safety.Cleaner: int copySafeNodes(org.jsoup.nodes.Element,org.jsoup.nodes.Element)>($r4, $r5);

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }
}
