public class proguard.evaluation.Stack extends java.lang.Object
{
    private static final proguard.evaluation.value.TopValue TOP_VALUE;
    protected int actualMaxSize;
    protected int currentSize;
    protected proguard.evaluation.value.Value[] values;

    static void <clinit>()
    {
        proguard.evaluation.value.TopValue $r0;

        $r0 = new proguard.evaluation.value.TopValue;

        specialinvoke $r0.<proguard.evaluation.value.TopValue: void <init>()>();

        <proguard.evaluation.Stack: proguard.evaluation.value.TopValue TOP_VALUE> = $r0;

        return;
    }

    public void <init>(int)
    {
        int $i0;
        proguard.evaluation.Stack r0;
        proguard.evaluation.value.Value[] $r1;

        r0 := @this: proguard.evaluation.Stack;

        $i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (proguard.evaluation.value.Value)[$i0];

        r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values> = $r1;

        return;
    }

    public void <init>(proguard.evaluation.Stack)
    {
        int $i0;
        proguard.evaluation.Stack r0, $r1;
        proguard.evaluation.value.Value[] $r2;

        r0 := @this: proguard.evaluation.Stack;

        $r1 := @parameter0: proguard.evaluation.Stack;

        $r2 = $r1.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i0 = lengthof $r2;

        specialinvoke r0.<proguard.evaluation.Stack: void <init>(int)>($i0);

        virtualinvoke r0.<proguard.evaluation.Stack: void copy(proguard.evaluation.Stack)>($r1);

        return;
    }

    public proguard.evaluation.value.ReferenceValue apop()
    {
        proguard.evaluation.Stack r0;
        proguard.evaluation.value.ReferenceValue $r2;
        proguard.evaluation.value.Value $r1;

        r0 := @this: proguard.evaluation.Stack;

        $r1 = virtualinvoke r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value pop()>();

        $r2 = virtualinvoke $r1.<proguard.evaluation.value.Value: proguard.evaluation.value.ReferenceValue referenceValue()>();

        return $r2;
    }

    public void clear()
    {
        int $i0, $i1;
        proguard.evaluation.Stack r0;
        proguard.evaluation.value.Value[] $r1;

        r0 := @this: proguard.evaluation.Stack;

        $i0 = 0;

     label1:
        $i1 = r0.<proguard.evaluation.Stack: int currentSize>;

        if $i0 >= $i1 goto label2;

        $r1 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $r1[$i0] = null;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        r0.<proguard.evaluation.Stack: int currentSize> = 0;

        return;
    }

    public void copy(proguard.evaluation.Stack)
    {
        int $i0, $i1;
        proguard.evaluation.Stack r0, $r1;
        proguard.evaluation.value.Value[] $r2, $r3;

        r0 := @this: proguard.evaluation.Stack;

        $r1 := @parameter0: proguard.evaluation.Stack;

        $r2 = $r1.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i0 = lengthof $r2;

        $r2 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i1 = lengthof $r2;

        if $i0 <= $i1 goto label1;

        $r2 = $r1.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i0 = lengthof $r2;

        $r2 = newarray (proguard.evaluation.value.Value)[$i0];

        r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values> = $r2;

     label1:
        $r2 = $r1.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $r3 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i0 = $r1.<proguard.evaluation.Stack: int currentSize>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r3, 0, $i0);

        $i0 = $r1.<proguard.evaluation.Stack: int currentSize>;

        r0.<proguard.evaluation.Stack: int currentSize> = $i0;

        $i0 = $r1.<proguard.evaluation.Stack: int actualMaxSize>;

        r0.<proguard.evaluation.Stack: int actualMaxSize> = $i0;

        return;
    }

    public proguard.evaluation.value.DoubleValue dpop()
    {
        proguard.evaluation.value.DoubleValue $r2;
        proguard.evaluation.Stack r0;
        proguard.evaluation.value.Value $r1;

        r0 := @this: proguard.evaluation.Stack;

        $r1 = virtualinvoke r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value pop()>();

        $r2 = virtualinvoke $r1.<proguard.evaluation.value.Value: proguard.evaluation.value.DoubleValue doubleValue()>();

        return $r2;
    }

    public void dup()
    {
        proguard.evaluation.value.Category1Value $r1;
        int $i0, $i1;
        proguard.evaluation.Stack r0;
        proguard.evaluation.value.Value[] $r2, $r3;
        proguard.evaluation.value.Value $r4;

        r0 := @this: proguard.evaluation.Stack;

        $r2 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i0 = r0.<proguard.evaluation.Stack: int currentSize>;

        $r3 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i1 = r0.<proguard.evaluation.Stack: int currentSize>;

        $i1 = $i1 - 1;

        $r4 = $r3[$i1];

        $r1 = virtualinvoke $r4.<proguard.evaluation.value.Value: proguard.evaluation.value.Category1Value category1Value()>();

        $r2[$i0] = $r1;

        $i0 = r0.<proguard.evaluation.Stack: int currentSize>;

        $i0 = $i0 + 1;

        r0.<proguard.evaluation.Stack: int currentSize> = $i0;

        $i0 = r0.<proguard.evaluation.Stack: int actualMaxSize>;

        $i1 = r0.<proguard.evaluation.Stack: int currentSize>;

        if $i0 >= $i1 goto label1;

        $i0 = r0.<proguard.evaluation.Stack: int currentSize>;

        r0.<proguard.evaluation.Stack: int actualMaxSize> = $i0;

     label1:
        return;
    }

    public void dup2()
    {
        int $i0, $i1;
        proguard.evaluation.Stack r0;
        proguard.evaluation.value.Value[] $r1, $r2;
        proguard.evaluation.value.Value $r3;

        r0 := @this: proguard.evaluation.Stack;

        $r1 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i0 = r0.<proguard.evaluation.Stack: int currentSize>;

        $r2 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i1 = r0.<proguard.evaluation.Stack: int currentSize>;

        $i1 = $i1 - 2;

        $r3 = $r2[$i1];

        $r1[$i0] = $r3;

        $r1 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i0 = r0.<proguard.evaluation.Stack: int currentSize>;

        $i0 = $i0 + 1;

        $r2 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i1 = r0.<proguard.evaluation.Stack: int currentSize>;

        $i1 = $i1 - 1;

        $r3 = $r2[$i1];

        $r1[$i0] = $r3;

        $i0 = r0.<proguard.evaluation.Stack: int currentSize>;

        $i0 = $i0 + 2;

        r0.<proguard.evaluation.Stack: int currentSize> = $i0;

        $i0 = r0.<proguard.evaluation.Stack: int actualMaxSize>;

        $i1 = r0.<proguard.evaluation.Stack: int currentSize>;

        if $i0 >= $i1 goto label1;

        $i0 = r0.<proguard.evaluation.Stack: int currentSize>;

        r0.<proguard.evaluation.Stack: int actualMaxSize> = $i0;

     label1:
        return;
    }

    public void dup2_x1()
    {
        int $i0, $i1;
        proguard.evaluation.Stack r0;
        proguard.evaluation.value.Value[] $r1, $r2;
        proguard.evaluation.value.Value $r3;

        r0 := @this: proguard.evaluation.Stack;

        $r1 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i0 = r0.<proguard.evaluation.Stack: int currentSize>;

        $i0 = $i0 + 1;

        $r2 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i1 = r0.<proguard.evaluation.Stack: int currentSize>;

        $i1 = $i1 - 1;

        $r3 = $r2[$i1];

        $r1[$i0] = $r3;

        $r1 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i0 = r0.<proguard.evaluation.Stack: int currentSize>;

        $r2 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i1 = r0.<proguard.evaluation.Stack: int currentSize>;

        $i1 = $i1 - 2;

        $r3 = $r2[$i1];

        $r1[$i0] = $r3;

        $r1 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i0 = r0.<proguard.evaluation.Stack: int currentSize>;

        $i0 = $i0 - 1;

        $r2 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i1 = r0.<proguard.evaluation.Stack: int currentSize>;

        $i1 = $i1 - 3;

        $r3 = $r2[$i1];

        $r1[$i0] = $r3;

        $r1 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i0 = r0.<proguard.evaluation.Stack: int currentSize>;

        $i0 = $i0 - 2;

        $r2 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i1 = r0.<proguard.evaluation.Stack: int currentSize>;

        $i1 = $i1 + 1;

        $r3 = $r2[$i1];

        $r1[$i0] = $r3;

        $r1 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i0 = r0.<proguard.evaluation.Stack: int currentSize>;

        $i0 = $i0 - 3;

        $r2 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i1 = r0.<proguard.evaluation.Stack: int currentSize>;

        $r3 = $r2[$i1];

        $r1[$i0] = $r3;

        $i0 = r0.<proguard.evaluation.Stack: int currentSize>;

        $i0 = $i0 + 2;

        r0.<proguard.evaluation.Stack: int currentSize> = $i0;

        $i0 = r0.<proguard.evaluation.Stack: int actualMaxSize>;

        $i1 = r0.<proguard.evaluation.Stack: int currentSize>;

        if $i0 >= $i1 goto label1;

        $i0 = r0.<proguard.evaluation.Stack: int currentSize>;

        r0.<proguard.evaluation.Stack: int actualMaxSize> = $i0;

     label1:
        return;
    }

    public void dup2_x2()
    {
        int $i0, $i1;
        proguard.evaluation.Stack r0;
        proguard.evaluation.value.Value[] $r1, $r2;
        proguard.evaluation.value.Value $r3;

        r0 := @this: proguard.evaluation.Stack;

        $r1 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i0 = r0.<proguard.evaluation.Stack: int currentSize>;

        $i0 = $i0 + 1;

        $r2 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i1 = r0.<proguard.evaluation.Stack: int currentSize>;

        $i1 = $i1 - 1;

        $r3 = $r2[$i1];

        $r1[$i0] = $r3;

        $r1 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i0 = r0.<proguard.evaluation.Stack: int currentSize>;

        $r2 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i1 = r0.<proguard.evaluation.Stack: int currentSize>;

        $i1 = $i1 - 2;

        $r3 = $r2[$i1];

        $r1[$i0] = $r3;

        $r1 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i0 = r0.<proguard.evaluation.Stack: int currentSize>;

        $i0 = $i0 - 1;

        $r2 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i1 = r0.<proguard.evaluation.Stack: int currentSize>;

        $i1 = $i1 - 3;

        $r3 = $r2[$i1];

        $r1[$i0] = $r3;

        $r1 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i0 = r0.<proguard.evaluation.Stack: int currentSize>;

        $i0 = $i0 - 2;

        $r2 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i1 = r0.<proguard.evaluation.Stack: int currentSize>;

        $i1 = $i1 - 4;

        $r3 = $r2[$i1];

        $r1[$i0] = $r3;

        $r1 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i0 = r0.<proguard.evaluation.Stack: int currentSize>;

        $i0 = $i0 - 3;

        $r2 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i1 = r0.<proguard.evaluation.Stack: int currentSize>;

        $i1 = $i1 + 1;

        $r3 = $r2[$i1];

        $r1[$i0] = $r3;

        $r1 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i0 = r0.<proguard.evaluation.Stack: int currentSize>;

        $i0 = $i0 - 4;

        $r2 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i1 = r0.<proguard.evaluation.Stack: int currentSize>;

        $r3 = $r2[$i1];

        $r1[$i0] = $r3;

        $i0 = r0.<proguard.evaluation.Stack: int currentSize>;

        $i0 = $i0 + 2;

        r0.<proguard.evaluation.Stack: int currentSize> = $i0;

        $i0 = r0.<proguard.evaluation.Stack: int actualMaxSize>;

        $i1 = r0.<proguard.evaluation.Stack: int currentSize>;

        if $i0 >= $i1 goto label1;

        $i0 = r0.<proguard.evaluation.Stack: int currentSize>;

        r0.<proguard.evaluation.Stack: int actualMaxSize> = $i0;

     label1:
        return;
    }

    public void dup_x1()
    {
        int $i0, $i1;
        proguard.evaluation.value.Category1Value $r4;
        proguard.evaluation.Stack r0;
        proguard.evaluation.value.Value[] $r1, $r2;
        proguard.evaluation.value.Value $r3;

        r0 := @this: proguard.evaluation.Stack;

        $r1 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i0 = r0.<proguard.evaluation.Stack: int currentSize>;

        $r2 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i1 = r0.<proguard.evaluation.Stack: int currentSize>;

        $i1 = $i1 - 1;

        $r3 = $r2[$i1];

        $r4 = virtualinvoke $r3.<proguard.evaluation.value.Value: proguard.evaluation.value.Category1Value category1Value()>();

        $r1[$i0] = $r4;

        $r1 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i0 = r0.<proguard.evaluation.Stack: int currentSize>;

        $i0 = $i0 - 1;

        $r2 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i1 = r0.<proguard.evaluation.Stack: int currentSize>;

        $i1 = $i1 - 2;

        $r3 = $r2[$i1];

        $r4 = virtualinvoke $r3.<proguard.evaluation.value.Value: proguard.evaluation.value.Category1Value category1Value()>();

        $r1[$i0] = $r4;

        $r1 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i0 = r0.<proguard.evaluation.Stack: int currentSize>;

        $i0 = $i0 - 2;

        $r2 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i1 = r0.<proguard.evaluation.Stack: int currentSize>;

        $r3 = $r2[$i1];

        $r1[$i0] = $r3;

        $i0 = r0.<proguard.evaluation.Stack: int currentSize>;

        $i0 = $i0 + 1;

        r0.<proguard.evaluation.Stack: int currentSize> = $i0;

        $i0 = r0.<proguard.evaluation.Stack: int actualMaxSize>;

        $i1 = r0.<proguard.evaluation.Stack: int currentSize>;

        if $i0 >= $i1 goto label1;

        $i0 = r0.<proguard.evaluation.Stack: int currentSize>;

        r0.<proguard.evaluation.Stack: int actualMaxSize> = $i0;

     label1:
        return;
    }

    public void dup_x2()
    {
        proguard.evaluation.value.Category1Value $r1;
        int $i0, $i1;
        proguard.evaluation.Stack r0;
        proguard.evaluation.value.Value[] $r2, $r3;
        proguard.evaluation.value.Value $r4;

        r0 := @this: proguard.evaluation.Stack;

        $r2 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i0 = r0.<proguard.evaluation.Stack: int currentSize>;

        $r3 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i1 = r0.<proguard.evaluation.Stack: int currentSize>;

        $i1 = $i1 - 1;

        $r4 = $r3[$i1];

        $r1 = virtualinvoke $r4.<proguard.evaluation.value.Value: proguard.evaluation.value.Category1Value category1Value()>();

        $r2[$i0] = $r1;

        $r2 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i0 = r0.<proguard.evaluation.Stack: int currentSize>;

        $i0 = $i0 - 1;

        $r3 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i1 = r0.<proguard.evaluation.Stack: int currentSize>;

        $i1 = $i1 - 2;

        $r4 = $r3[$i1];

        $r2[$i0] = $r4;

        $r2 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i0 = r0.<proguard.evaluation.Stack: int currentSize>;

        $i0 = $i0 - 2;

        $r3 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i1 = r0.<proguard.evaluation.Stack: int currentSize>;

        $i1 = $i1 - 3;

        $r4 = $r3[$i1];

        $r2[$i0] = $r4;

        $r2 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i0 = r0.<proguard.evaluation.Stack: int currentSize>;

        $i0 = $i0 - 3;

        $r3 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i1 = r0.<proguard.evaluation.Stack: int currentSize>;

        $r4 = $r3[$i1];

        $r2[$i0] = $r4;

        $i0 = r0.<proguard.evaluation.Stack: int currentSize>;

        $i0 = $i0 + 1;

        r0.<proguard.evaluation.Stack: int currentSize> = $i0;

        $i0 = r0.<proguard.evaluation.Stack: int actualMaxSize>;

        $i1 = r0.<proguard.evaluation.Stack: int currentSize>;

        if $i0 >= $i1 goto label1;

        $i0 = r0.<proguard.evaluation.Stack: int currentSize>;

        r0.<proguard.evaluation.Stack: int actualMaxSize> = $i0;

     label1:
        return;
    }

    public boolean equals(java.lang.Object)
    {
        proguard.evaluation.Stack r0, $r4;
        proguard.evaluation.value.Value[] $r5;
        int $i0, $i1;
        java.lang.Object $r1;
        java.lang.Class $r2, $r3;
        proguard.evaluation.value.Value $r6, $r7;
        boolean $z0;

        r0 := @this: proguard.evaluation.Stack;

        $r1 := @parameter0: java.lang.Object;

        if $r1 == null goto label1;

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 == $r3 goto label2;

     label1:
        return 0;

     label2:
        $r4 = (proguard.evaluation.Stack) $r1;

        $i0 = r0.<proguard.evaluation.Stack: int currentSize>;

        $i1 = $r4.<proguard.evaluation.Stack: int currentSize>;

        if $i0 == $i1 goto label3;

        return 0;

     label3:
        $i0 = 0;

     label4:
        $i1 = r0.<proguard.evaluation.Stack: int currentSize>;

        if $i0 >= $i1 goto label8;

        $r5 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $r6 = $r5[$i0];

        $r5 = $r4.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $r7 = $r5[$i0];

        if $r6 != null goto label6;

        if $r7 == null goto label7;

     label5:
        return 0;

     label6:
        $z0 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label5;

     label7:
        $i0 = $i0 + 1;

        goto label4;

     label8:
        return 1;
    }

    public proguard.evaluation.value.FloatValue fpop()
    {
        proguard.evaluation.Stack r0;
        proguard.evaluation.value.FloatValue $r2;
        proguard.evaluation.value.Value $r1;

        r0 := @this: proguard.evaluation.Stack;

        $r1 = virtualinvoke r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value pop()>();

        $r2 = virtualinvoke $r1.<proguard.evaluation.value.Value: proguard.evaluation.value.FloatValue floatValue()>();

        return $r2;
    }

    public boolean generalize(proguard.evaluation.Stack)
    {
        proguard.evaluation.Stack r0, $r1;
        java.lang.IllegalArgumentException $r2;
        proguard.evaluation.value.Value[] $r5;
        java.lang.StringBuffer $r3;
        int $i0, $i1;
        java.lang.String $r4;
        proguard.evaluation.value.Value $r6, $r7, $r8;
        boolean $z0;

        r0 := @this: proguard.evaluation.Stack;

        $r1 := @parameter0: proguard.evaluation.Stack;

        $i0 = r0.<proguard.evaluation.Stack: int currentSize>;

        $i1 = $r1.<proguard.evaluation.Stack: int currentSize>;

        if $i0 == $i1 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Stacks have different current sizes [");

        $i0 = r0.<proguard.evaluation.Stack: int currentSize>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] and [");

        $i0 = $r1.<proguard.evaluation.Stack: int currentSize>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label1:
        $i0 = 0;

        $z0 = 0;

     label2:
        $i1 = r0.<proguard.evaluation.Stack: int currentSize>;

        if $i0 >= $i1 goto label8;

        $r5 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $r6 = $r5[$i0];

        if $r6 == null goto label6;

        $r7 = null;

        $r5 = $r1.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $r8 = $r5[$i0];

        if $r8 == null goto label3;

        $r7 = virtualinvoke $r6.<proguard.evaluation.value.Value: proguard.evaluation.value.Value generalize(proguard.evaluation.value.Value)>($r8);

     label3:
        if $z0 != 0 goto label4;

        $z0 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r7);

        if $z0 != 0 goto label7;

     label4:
        $z0 = 1;

     label5:
        $r5 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $r5[$i0] = $r7;

     label6:
        $i0 = $i0 + 1;

        goto label2;

     label7:
        $z0 = 0;

        goto label5;

     label8:
        $i0 = r0.<proguard.evaluation.Stack: int actualMaxSize>;

        $i1 = $r1.<proguard.evaluation.Stack: int actualMaxSize>;

        if $i0 >= $i1 goto label9;

        $i0 = $r1.<proguard.evaluation.Stack: int actualMaxSize>;

        r0.<proguard.evaluation.Stack: int actualMaxSize> = $i0;

     label9:
        return $z0;
    }

    public int getActualMaxSize()
    {
        int i0;
        proguard.evaluation.Stack r0;

        r0 := @this: proguard.evaluation.Stack;

        i0 = r0.<proguard.evaluation.Stack: int actualMaxSize>;

        return i0;
    }

    public proguard.evaluation.value.Value getBottom(int)
    {
        int $i0;
        proguard.evaluation.Stack r0;
        proguard.evaluation.value.Value[] $r1;
        proguard.evaluation.value.Value $r2;

        r0 := @this: proguard.evaluation.Stack;

        $i0 := @parameter0: int;

        $r1 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $r2 = $r1[$i0];

        return $r2;
    }

    public proguard.evaluation.value.Value getTop(int)
    {
        int $i0, $i1;
        proguard.evaluation.Stack r0;
        proguard.evaluation.value.Value[] $r1;
        proguard.evaluation.value.Value $r2;

        r0 := @this: proguard.evaluation.Stack;

        $i0 := @parameter0: int;

        $r1 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i1 = r0.<proguard.evaluation.Stack: int currentSize>;

        $i0 = $i1 - $i0;

        $i0 = $i0 - 1;

        $r2 = $r1[$i0];

        return $r2;
    }

    public int hashCode()
    {
        int $i0, $i1, $i2;
        proguard.evaluation.Stack r0;
        proguard.evaluation.value.Value[] $r1;
        proguard.evaluation.value.Value $r2;

        r0 := @this: proguard.evaluation.Stack;

        $i1 = r0.<proguard.evaluation.Stack: int currentSize>;

        $i2 = 0;

     label1:
        $i0 = r0.<proguard.evaluation.Stack: int currentSize>;

        if $i2 >= $i0 goto label3;

        $r1 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $r2 = $r1[$i2];

        if $r2 == null goto label2;

        $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        $i1 = $i1 ^ $i0;

     label2:
        $i2 = $i2 + 1;

        goto label1;

     label3:
        return $i1;
    }

    public proguard.evaluation.value.IntegerValue ipop()
    {
        proguard.evaluation.value.IntegerValue $r2;
        proguard.evaluation.Stack r0;
        proguard.evaluation.value.Value $r1;

        r0 := @this: proguard.evaluation.Stack;

        $r1 = virtualinvoke r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value pop()>();

        $r2 = virtualinvoke $r1.<proguard.evaluation.value.Value: proguard.evaluation.value.IntegerValue integerValue()>();

        return $r2;
    }

    public proguard.evaluation.value.LongValue lpop()
    {
        proguard.evaluation.Stack r0;
        proguard.evaluation.value.Value $r1;
        proguard.evaluation.value.LongValue $r2;

        r0 := @this: proguard.evaluation.Stack;

        $r1 = virtualinvoke r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value pop()>();

        $r2 = virtualinvoke $r1.<proguard.evaluation.value.Value: proguard.evaluation.value.LongValue longValue()>();

        return $r2;
    }

    public proguard.evaluation.value.InstructionOffsetValue opop()
    {
        proguard.evaluation.Stack r0;
        proguard.evaluation.value.Value $r1;
        proguard.evaluation.value.InstructionOffsetValue $r2;

        r0 := @this: proguard.evaluation.Stack;

        $r1 = virtualinvoke r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value pop()>();

        $r2 = virtualinvoke $r1.<proguard.evaluation.value.Value: proguard.evaluation.value.InstructionOffsetValue instructionOffsetValue()>();

        return $r2;
    }

    public proguard.evaluation.value.Value pop()
    {
        int $i0;
        proguard.evaluation.Stack r0;
        proguard.evaluation.value.Value[] $r1;
        proguard.evaluation.value.Value $r2;
        boolean $z0;

        r0 := @this: proguard.evaluation.Stack;

        $r1 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i0 = r0.<proguard.evaluation.Stack: int currentSize>;

        $i0 = $i0 - 1;

        r0.<proguard.evaluation.Stack: int currentSize> = $i0;

        $r2 = $r1[$i0];

        $r1 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i0 = r0.<proguard.evaluation.Stack: int currentSize>;

        $r1[$i0] = null;

        $z0 = virtualinvoke $r2.<proguard.evaluation.value.Value: boolean isCategory2()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i0 = r0.<proguard.evaluation.Stack: int currentSize>;

        $i0 = $i0 - 1;

        r0.<proguard.evaluation.Stack: int currentSize> = $i0;

        $r1[$i0] = null;

     label1:
        return $r2;
    }

    public void pop1()
    {
        int $i0;
        proguard.evaluation.Stack r0;
        proguard.evaluation.value.Value[] $r1;

        r0 := @this: proguard.evaluation.Stack;

        $r1 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i0 = r0.<proguard.evaluation.Stack: int currentSize>;

        $i0 = $i0 - 1;

        r0.<proguard.evaluation.Stack: int currentSize> = $i0;

        $r1[$i0] = null;

        return;
    }

    public void pop2()
    {
        int $i0;
        proguard.evaluation.Stack r0;
        proguard.evaluation.value.Value[] $r1;

        r0 := @this: proguard.evaluation.Stack;

        $r1 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i0 = r0.<proguard.evaluation.Stack: int currentSize>;

        $i0 = $i0 - 1;

        r0.<proguard.evaluation.Stack: int currentSize> = $i0;

        $r1[$i0] = null;

        $r1 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i0 = r0.<proguard.evaluation.Stack: int currentSize>;

        $i0 = $i0 - 1;

        r0.<proguard.evaluation.Stack: int currentSize> = $i0;

        $r1[$i0] = null;

        return;
    }

    public void push(proguard.evaluation.value.Value)
    {
        proguard.evaluation.value.TopValue $r3;
        int $i0, $i1;
        proguard.evaluation.Stack r0;
        proguard.evaluation.value.Value[] $r2;
        proguard.evaluation.value.Value $r1;
        boolean $z0;

        r0 := @this: proguard.evaluation.Stack;

        $r1 := @parameter0: proguard.evaluation.value.Value;

        $z0 = virtualinvoke $r1.<proguard.evaluation.value.Value: boolean isCategory2()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i0 = r0.<proguard.evaluation.Stack: int currentSize>;

        $i1 = $i0 + 1;

        r0.<proguard.evaluation.Stack: int currentSize> = $i1;

        $r3 = <proguard.evaluation.Stack: proguard.evaluation.value.TopValue TOP_VALUE>;

        $r2[$i0] = $r3;

     label1:
        $r2 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i0 = r0.<proguard.evaluation.Stack: int currentSize>;

        $i1 = $i0 + 1;

        r0.<proguard.evaluation.Stack: int currentSize> = $i1;

        $r2[$i0] = $r1;

        $i0 = r0.<proguard.evaluation.Stack: int actualMaxSize>;

        $i1 = r0.<proguard.evaluation.Stack: int currentSize>;

        if $i0 >= $i1 goto label2;

        $i0 = r0.<proguard.evaluation.Stack: int currentSize>;

        r0.<proguard.evaluation.Stack: int actualMaxSize> = $i0;

     label2:
        return;
    }

    public void removeTop(int)
    {
        int $i0, $i1, $i2;
        proguard.evaluation.Stack r0;
        proguard.evaluation.value.Value[] $r1, $r2;

        r0 := @this: proguard.evaluation.Stack;

        $i0 := @parameter0: int;

        $r2 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i1 = r0.<proguard.evaluation.Stack: int currentSize>;

        $i1 = $i1 - $i0;

        $r1 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i2 = r0.<proguard.evaluation.Stack: int currentSize>;

        $i2 = $i2 - $i0;

        $i2 = $i2 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i1, $r1, $i2, $i0);

        $i0 = r0.<proguard.evaluation.Stack: int currentSize>;

        $i0 = $i0 - 1;

        r0.<proguard.evaluation.Stack: int currentSize> = $i0;

        return;
    }

    public void reset(int)
    {
        int $i0, $i1;
        proguard.evaluation.Stack r0;
        proguard.evaluation.value.Value[] $r1;

        r0 := @this: proguard.evaluation.Stack;

        $i0 := @parameter0: int;

        $r1 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i1 = lengthof $r1;

        if $i0 <= $i1 goto label1;

        $r1 = newarray (proguard.evaluation.value.Value)[$i0];

        r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values> = $r1;

     label1:
        virtualinvoke r0.<proguard.evaluation.Stack: void clear()>();

        r0.<proguard.evaluation.Stack: int actualMaxSize> = 0;

        return;
    }

    public void setBottom(int, proguard.evaluation.value.Value)
    {
        int $i0;
        proguard.evaluation.Stack r0;
        proguard.evaluation.value.Value[] $r2;
        proguard.evaluation.value.Value $r1;

        r0 := @this: proguard.evaluation.Stack;

        $i0 := @parameter0: int;

        $r1 := @parameter1: proguard.evaluation.value.Value;

        $r2 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $r2[$i0] = $r1;

        return;
    }

    public void setTop(int, proguard.evaluation.value.Value)
    {
        int $i0, $i1;
        proguard.evaluation.Stack r0;
        proguard.evaluation.value.Value[] $r2;
        proguard.evaluation.value.Value $r1;

        r0 := @this: proguard.evaluation.Stack;

        $i0 := @parameter0: int;

        $r1 := @parameter1: proguard.evaluation.value.Value;

        $r2 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i1 = r0.<proguard.evaluation.Stack: int currentSize>;

        $i0 = $i1 - $i0;

        $i0 = $i0 - 1;

        $r2[$i0] = $r1;

        return;
    }

    public int size()
    {
        int i0;
        proguard.evaluation.Stack r0;

        r0 := @this: proguard.evaluation.Stack;

        i0 = r0.<proguard.evaluation.Stack: int currentSize>;

        return i0;
    }

    public void swap()
    {
        int $i0;
        proguard.evaluation.value.Category1Value $r3, $r4;
        proguard.evaluation.Stack r0;
        proguard.evaluation.value.Value[] $r1;
        proguard.evaluation.value.Value $r2;

        r0 := @this: proguard.evaluation.Stack;

        $r1 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i0 = r0.<proguard.evaluation.Stack: int currentSize>;

        $i0 = $i0 - 1;

        $r2 = $r1[$i0];

        $r3 = virtualinvoke $r2.<proguard.evaluation.value.Value: proguard.evaluation.value.Category1Value category1Value()>();

        $r1 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i0 = r0.<proguard.evaluation.Stack: int currentSize>;

        $i0 = $i0 - 2;

        $r2 = $r1[$i0];

        $r4 = virtualinvoke $r2.<proguard.evaluation.value.Value: proguard.evaluation.value.Category1Value category1Value()>();

        $r1 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i0 = r0.<proguard.evaluation.Stack: int currentSize>;

        $i0 = $i0 - 1;

        $r1[$i0] = $r4;

        $r1 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $i0 = r0.<proguard.evaluation.Stack: int currentSize>;

        $i0 = $i0 - 2;

        $r1[$i0] = $r3;

        return;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuffer $r1;
        int $i0, $i1;
        proguard.evaluation.Stack r0;
        java.lang.String $r4;
        proguard.evaluation.value.Value[] $r2;
        proguard.evaluation.value.Value $r3;

        r0 := @this: proguard.evaluation.Stack;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $i0 = 0;

     label1:
        $i1 = r0.<proguard.evaluation.Stack: int currentSize>;

        if $i0 >= $i1 goto label4;

        $r2 = r0.<proguard.evaluation.Stack: proguard.evaluation.value.Value[] values>;

        $r3 = $r2[$i0];

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(91);

        if $r3 != null goto label3;

        $r4 = "empty";

     label2:
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);

        $i0 = $i0 + 1;

        goto label1;

     label3:
        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        goto label2;

     label4:
        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }
}
