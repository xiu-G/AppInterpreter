public class org.htmlparser.filters.LinkRegexFilter extends java.lang.Object implements org.htmlparser.NodeFilter
{
    protected java.util.regex.Pattern a;

    public void <init>(java.lang.String)
    {
        org.htmlparser.filters.LinkRegexFilter r0;
        java.lang.String $r1;

        r0 := @this: org.htmlparser.filters.LinkRegexFilter;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.htmlparser.filters.LinkRegexFilter: void <init>(java.lang.String,boolean)>($r1, 1);

        return;
    }

    public void <init>(java.lang.String, boolean)
    {
        org.htmlparser.filters.LinkRegexFilter r0;
        java.lang.String $r1;
        java.util.regex.Pattern $r2;
        boolean $z0;

        r0 := @this: org.htmlparser.filters.LinkRegexFilter;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r1);

        r0.<org.htmlparser.filters.LinkRegexFilter: java.util.regex.Pattern a> = $r2;

        return;

     label1:
        $r2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>($r1, 66);

        r0.<org.htmlparser.filters.LinkRegexFilter: java.util.regex.Pattern a> = $r2;

        return;
    }

    public boolean accept(org.htmlparser.Node)
    {
        org.htmlparser.filters.LinkRegexFilter r0;
        org.htmlparser.Node $r1;
        org.htmlparser.tags.LinkTag $r4;
        java.util.regex.Matcher $r7;
        java.lang.Class $r2, $r3;
        java.lang.String $r5;
        java.util.regex.Pattern $r6;
        boolean $z0;

        r0 := @this: org.htmlparser.filters.LinkRegexFilter;

        $r1 := @parameter0: org.htmlparser.Node;

        $r2 = class "Lorg/htmlparser/tags/LinkTag;";

        $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r3);

        if $z0 == 0 goto label1;

        $r4 = (org.htmlparser.tags.LinkTag) $r1;

        $r5 = virtualinvoke $r4.<org.htmlparser.tags.LinkTag: java.lang.String getLink()>();

        $r6 = r0.<org.htmlparser.filters.LinkRegexFilter: java.util.regex.Pattern a>;

        $r7 = virtualinvoke $r6.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r5);

        $z0 = virtualinvoke $r7.<java.util.regex.Matcher: boolean find()>();

        return $z0;

     label1:
        return 0;
    }
}
