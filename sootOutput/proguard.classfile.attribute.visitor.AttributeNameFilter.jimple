public class proguard.classfile.attribute.visitor.AttributeNameFilter extends java.lang.Object implements proguard.classfile.attribute.visitor.AttributeVisitor
{
    private final proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor;
    private final proguard.util.StringMatcher stringMatcher;

    public void <init>(proguard.util.StringMatcher, proguard.classfile.attribute.visitor.AttributeVisitor)
    {
        proguard.classfile.attribute.visitor.AttributeVisitor $r2;
        proguard.util.StringMatcher $r1;
        proguard.classfile.attribute.visitor.AttributeNameFilter r0;

        r0 := @this: proguard.classfile.attribute.visitor.AttributeNameFilter;

        $r1 := @parameter0: proguard.util.StringMatcher;

        $r2 := @parameter1: proguard.classfile.attribute.visitor.AttributeVisitor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: proguard.util.StringMatcher stringMatcher> = $r1;

        r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor> = $r2;

        return;
    }

    private boolean accepted(proguard.classfile.Clazz, proguard.classfile.attribute.Attribute)
    {
        proguard.classfile.Clazz $r1;
        java.lang.String $r4;
        proguard.util.StringMatcher $r3;
        proguard.classfile.attribute.visitor.AttributeNameFilter r0;
        proguard.classfile.attribute.Attribute $r2;
        boolean $z0;

        r0 := @this: proguard.classfile.attribute.visitor.AttributeNameFilter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.Attribute;

        $r3 = r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: proguard.util.StringMatcher stringMatcher>;

        $r4 = virtualinvoke $r2.<proguard.classfile.attribute.Attribute: java.lang.String getAttributeName(proguard.classfile.Clazz)>($r1);

        $z0 = interfaceinvoke $r3.<proguard.util.StringMatcher: boolean matches(java.lang.String)>($r4);

        return $z0;
    }

    public void visitAnnotationDefaultAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.'annotation'.AnnotationDefaultAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.visitor.AttributeVisitor $r4;
        proguard.classfile.attribute.'annotation'.AnnotationDefaultAttribute $r3;
        proguard.classfile.attribute.visitor.AttributeNameFilter r0;
        boolean $z0;

        r0 := @this: proguard.classfile.attribute.visitor.AttributeNameFilter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.AnnotationDefaultAttribute;

        $z0 = specialinvoke r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: boolean accepted(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute)>($r1, $r3);

        if $z0 == 0 goto label1;

        $r4 = r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        virtualinvoke $r3.<proguard.classfile.attribute.'annotation'.AnnotationDefaultAttribute: void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.visitor.AttributeVisitor)>($r1, $r2, $r4);

     label1:
        return;
    }

    public void visitCodeAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.visitor.AttributeVisitor $r4;
        proguard.classfile.attribute.visitor.AttributeNameFilter r0;
        boolean $z0;

        r0 := @this: proguard.classfile.attribute.visitor.AttributeNameFilter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $z0 = specialinvoke r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: boolean accepted(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute)>($r1, $r3);

        if $z0 == 0 goto label1;

        $r4 = r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        virtualinvoke $r3.<proguard.classfile.attribute.CodeAttribute: void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.visitor.AttributeVisitor)>($r1, $r2, $r4);

     label1:
        return;
    }

    public void visitConstantValueAttribute(proguard.classfile.Clazz, proguard.classfile.Field, proguard.classfile.attribute.ConstantValueAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.visitor.AttributeVisitor $r4;
        proguard.classfile.Field $r2;
        proguard.classfile.attribute.ConstantValueAttribute $r3;
        proguard.classfile.attribute.visitor.AttributeNameFilter r0;
        boolean $z0;

        r0 := @this: proguard.classfile.attribute.visitor.AttributeNameFilter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Field;

        $r3 := @parameter2: proguard.classfile.attribute.ConstantValueAttribute;

        $z0 = specialinvoke r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: boolean accepted(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute)>($r1, $r3);

        if $z0 == 0 goto label1;

        $r4 = r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        virtualinvoke $r3.<proguard.classfile.attribute.ConstantValueAttribute: void accept(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.visitor.AttributeVisitor)>($r1, $r2, $r4);

     label1:
        return;
    }

    public void visitDeprecatedAttribute(proguard.classfile.Clazz, proguard.classfile.Field, proguard.classfile.attribute.DeprecatedAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.visitor.AttributeVisitor $r4;
        proguard.classfile.Field $r2;
        proguard.classfile.attribute.DeprecatedAttribute $r3;
        proguard.classfile.attribute.visitor.AttributeNameFilter r0;
        boolean $z0;

        r0 := @this: proguard.classfile.attribute.visitor.AttributeNameFilter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Field;

        $r3 := @parameter2: proguard.classfile.attribute.DeprecatedAttribute;

        $z0 = specialinvoke r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: boolean accepted(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute)>($r1, $r3);

        if $z0 == 0 goto label1;

        $r4 = r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        virtualinvoke $r3.<proguard.classfile.attribute.DeprecatedAttribute: void accept(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.visitor.AttributeVisitor)>($r1, $r2, $r4);

     label1:
        return;
    }

    public void visitDeprecatedAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.DeprecatedAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.visitor.AttributeVisitor $r4;
        proguard.classfile.attribute.DeprecatedAttribute $r3;
        proguard.classfile.attribute.visitor.AttributeNameFilter r0;
        boolean $z0;

        r0 := @this: proguard.classfile.attribute.visitor.AttributeNameFilter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.DeprecatedAttribute;

        $z0 = specialinvoke r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: boolean accepted(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute)>($r1, $r3);

        if $z0 == 0 goto label1;

        $r4 = r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        virtualinvoke $r3.<proguard.classfile.attribute.DeprecatedAttribute: void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.visitor.AttributeVisitor)>($r1, $r2, $r4);

     label1:
        return;
    }

    public void visitDeprecatedAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.DeprecatedAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.visitor.AttributeVisitor $r3;
        proguard.classfile.attribute.DeprecatedAttribute $r2;
        proguard.classfile.attribute.visitor.AttributeNameFilter r0;
        boolean $z0;

        r0 := @this: proguard.classfile.attribute.visitor.AttributeNameFilter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.DeprecatedAttribute;

        $z0 = specialinvoke r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: boolean accepted(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute)>($r1, $r2);

        if $z0 == 0 goto label1;

        $r3 = r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        virtualinvoke $r2.<proguard.classfile.attribute.DeprecatedAttribute: void accept(proguard.classfile.Clazz,proguard.classfile.attribute.visitor.AttributeVisitor)>($r1, $r3);

     label1:
        return;
    }

    public void visitEnclosingMethodAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.EnclosingMethodAttribute)
    {
        proguard.classfile.attribute.EnclosingMethodAttribute $r2;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.visitor.AttributeVisitor $r3;
        proguard.classfile.attribute.visitor.AttributeNameFilter r0;
        boolean $z0;

        r0 := @this: proguard.classfile.attribute.visitor.AttributeNameFilter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.EnclosingMethodAttribute;

        $z0 = specialinvoke r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: boolean accepted(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute)>($r1, $r2);

        if $z0 == 0 goto label1;

        $r3 = r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        virtualinvoke $r2.<proguard.classfile.attribute.EnclosingMethodAttribute: void accept(proguard.classfile.Clazz,proguard.classfile.attribute.visitor.AttributeVisitor)>($r1, $r3);

     label1:
        return;
    }

    public void visitExceptionsAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.ExceptionsAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.ExceptionsAttribute $r3;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.visitor.AttributeVisitor $r4;
        proguard.classfile.attribute.visitor.AttributeNameFilter r0;
        boolean $z0;

        r0 := @this: proguard.classfile.attribute.visitor.AttributeNameFilter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.ExceptionsAttribute;

        $z0 = specialinvoke r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: boolean accepted(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute)>($r1, $r3);

        if $z0 == 0 goto label1;

        $r4 = r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        virtualinvoke $r3.<proguard.classfile.attribute.ExceptionsAttribute: void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.visitor.AttributeVisitor)>($r1, $r2, $r4);

     label1:
        return;
    }

    public void visitInnerClassesAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.InnerClassesAttribute)
    {
        proguard.classfile.attribute.InnerClassesAttribute $r2;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.visitor.AttributeVisitor $r3;
        proguard.classfile.attribute.visitor.AttributeNameFilter r0;
        boolean $z0;

        r0 := @this: proguard.classfile.attribute.visitor.AttributeNameFilter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.InnerClassesAttribute;

        $z0 = specialinvoke r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: boolean accepted(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute)>($r1, $r2);

        if $z0 == 0 goto label1;

        $r3 = r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        virtualinvoke $r2.<proguard.classfile.attribute.InnerClassesAttribute: void accept(proguard.classfile.Clazz,proguard.classfile.attribute.visitor.AttributeVisitor)>($r1, $r3);

     label1:
        return;
    }

    public void visitLineNumberTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LineNumberTableAttribute)
    {
        proguard.classfile.attribute.LineNumberTableAttribute $r4;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.visitor.AttributeVisitor $r5;
        proguard.classfile.attribute.visitor.AttributeNameFilter r0;
        boolean $z0;

        r0 := @this: proguard.classfile.attribute.visitor.AttributeNameFilter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.LineNumberTableAttribute;

        $z0 = specialinvoke r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: boolean accepted(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute)>($r1, $r4);

        if $z0 == 0 goto label1;

        $r5 = r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        virtualinvoke $r4.<proguard.classfile.attribute.LineNumberTableAttribute: void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.visitor.AttributeVisitor)>($r1, $r2, $r3, $r5);

     label1:
        return;
    }

    public void visitLocalVariableTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LocalVariableTableAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.visitor.AttributeVisitor $r5;
        proguard.classfile.attribute.LocalVariableTableAttribute $r4;
        proguard.classfile.attribute.visitor.AttributeNameFilter r0;
        boolean $z0;

        r0 := @this: proguard.classfile.attribute.visitor.AttributeNameFilter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.LocalVariableTableAttribute;

        $z0 = specialinvoke r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: boolean accepted(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute)>($r1, $r4);

        if $z0 == 0 goto label1;

        $r5 = r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        virtualinvoke $r4.<proguard.classfile.attribute.LocalVariableTableAttribute: void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.visitor.AttributeVisitor)>($r1, $r2, $r3, $r5);

     label1:
        return;
    }

    public void visitLocalVariableTypeTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LocalVariableTypeTableAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.visitor.AttributeVisitor $r5;
        proguard.classfile.attribute.LocalVariableTypeTableAttribute $r4;
        proguard.classfile.attribute.visitor.AttributeNameFilter r0;
        boolean $z0;

        r0 := @this: proguard.classfile.attribute.visitor.AttributeNameFilter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.LocalVariableTypeTableAttribute;

        $z0 = specialinvoke r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: boolean accepted(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute)>($r1, $r4);

        if $z0 == 0 goto label1;

        $r5 = r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        virtualinvoke $r4.<proguard.classfile.attribute.LocalVariableTypeTableAttribute: void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.visitor.AttributeVisitor)>($r1, $r2, $r3, $r5);

     label1:
        return;
    }

    public void visitRuntimeInvisibleAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.Field, proguard.classfile.attribute.'annotation'.RuntimeInvisibleAnnotationsAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.visitor.AttributeVisitor $r4;
        proguard.classfile.Field $r2;
        proguard.classfile.attribute.visitor.AttributeNameFilter r0;
        proguard.classfile.attribute.'annotation'.RuntimeInvisibleAnnotationsAttribute $r3;
        boolean $z0;

        r0 := @this: proguard.classfile.attribute.visitor.AttributeNameFilter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Field;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.RuntimeInvisibleAnnotationsAttribute;

        $z0 = specialinvoke r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: boolean accepted(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute)>($r1, $r3);

        if $z0 == 0 goto label1;

        $r4 = r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        virtualinvoke $r3.<proguard.classfile.attribute.'annotation'.RuntimeInvisibleAnnotationsAttribute: void accept(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.visitor.AttributeVisitor)>($r1, $r2, $r4);

     label1:
        return;
    }

    public void visitRuntimeInvisibleAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.'annotation'.RuntimeInvisibleAnnotationsAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.visitor.AttributeVisitor $r4;
        proguard.classfile.attribute.visitor.AttributeNameFilter r0;
        proguard.classfile.attribute.'annotation'.RuntimeInvisibleAnnotationsAttribute $r3;
        boolean $z0;

        r0 := @this: proguard.classfile.attribute.visitor.AttributeNameFilter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.RuntimeInvisibleAnnotationsAttribute;

        $z0 = specialinvoke r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: boolean accepted(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute)>($r1, $r3);

        if $z0 == 0 goto label1;

        $r4 = r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        virtualinvoke $r3.<proguard.classfile.attribute.'annotation'.RuntimeInvisibleAnnotationsAttribute: void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.visitor.AttributeVisitor)>($r1, $r2, $r4);

     label1:
        return;
    }

    public void visitRuntimeInvisibleAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.'annotation'.RuntimeInvisibleAnnotationsAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.visitor.AttributeVisitor $r3;
        proguard.classfile.attribute.visitor.AttributeNameFilter r0;
        proguard.classfile.attribute.'annotation'.RuntimeInvisibleAnnotationsAttribute $r2;
        boolean $z0;

        r0 := @this: proguard.classfile.attribute.visitor.AttributeNameFilter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.RuntimeInvisibleAnnotationsAttribute;

        $z0 = specialinvoke r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: boolean accepted(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute)>($r1, $r2);

        if $z0 == 0 goto label1;

        $r3 = r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        virtualinvoke $r2.<proguard.classfile.attribute.'annotation'.RuntimeInvisibleAnnotationsAttribute: void accept(proguard.classfile.Clazz,proguard.classfile.attribute.visitor.AttributeVisitor)>($r1, $r3);

     label1:
        return;
    }

    public void visitRuntimeInvisibleParameterAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.'annotation'.RuntimeInvisibleParameterAnnotationsAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.visitor.AttributeVisitor $r4;
        proguard.classfile.attribute.'annotation'.RuntimeInvisibleParameterAnnotationsAttribute $r3;
        proguard.classfile.attribute.visitor.AttributeNameFilter r0;
        boolean $z0;

        r0 := @this: proguard.classfile.attribute.visitor.AttributeNameFilter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.RuntimeInvisibleParameterAnnotationsAttribute;

        $z0 = specialinvoke r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: boolean accepted(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute)>($r1, $r3);

        if $z0 == 0 goto label1;

        $r4 = r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        virtualinvoke $r3.<proguard.classfile.attribute.'annotation'.RuntimeInvisibleParameterAnnotationsAttribute: void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.visitor.AttributeVisitor)>($r1, $r2, $r4);

     label1:
        return;
    }

    public void visitRuntimeVisibleAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.Field, proguard.classfile.attribute.'annotation'.RuntimeVisibleAnnotationsAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.'annotation'.RuntimeVisibleAnnotationsAttribute $r3;
        proguard.classfile.attribute.visitor.AttributeVisitor $r4;
        proguard.classfile.Field $r2;
        proguard.classfile.attribute.visitor.AttributeNameFilter r0;
        boolean $z0;

        r0 := @this: proguard.classfile.attribute.visitor.AttributeNameFilter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Field;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.RuntimeVisibleAnnotationsAttribute;

        $z0 = specialinvoke r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: boolean accepted(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute)>($r1, $r3);

        if $z0 == 0 goto label1;

        $r4 = r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        virtualinvoke $r3.<proguard.classfile.attribute.'annotation'.RuntimeVisibleAnnotationsAttribute: void accept(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.visitor.AttributeVisitor)>($r1, $r2, $r4);

     label1:
        return;
    }

    public void visitRuntimeVisibleAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.'annotation'.RuntimeVisibleAnnotationsAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.'annotation'.RuntimeVisibleAnnotationsAttribute $r3;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.visitor.AttributeVisitor $r4;
        proguard.classfile.attribute.visitor.AttributeNameFilter r0;
        boolean $z0;

        r0 := @this: proguard.classfile.attribute.visitor.AttributeNameFilter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.RuntimeVisibleAnnotationsAttribute;

        $z0 = specialinvoke r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: boolean accepted(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute)>($r1, $r3);

        if $z0 == 0 goto label1;

        $r4 = r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        virtualinvoke $r3.<proguard.classfile.attribute.'annotation'.RuntimeVisibleAnnotationsAttribute: void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.visitor.AttributeVisitor)>($r1, $r2, $r4);

     label1:
        return;
    }

    public void visitRuntimeVisibleAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.'annotation'.RuntimeVisibleAnnotationsAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.'annotation'.RuntimeVisibleAnnotationsAttribute $r2;
        proguard.classfile.attribute.visitor.AttributeVisitor $r3;
        proguard.classfile.attribute.visitor.AttributeNameFilter r0;
        boolean $z0;

        r0 := @this: proguard.classfile.attribute.visitor.AttributeNameFilter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.RuntimeVisibleAnnotationsAttribute;

        $z0 = specialinvoke r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: boolean accepted(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute)>($r1, $r2);

        if $z0 == 0 goto label1;

        $r3 = r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        virtualinvoke $r2.<proguard.classfile.attribute.'annotation'.RuntimeVisibleAnnotationsAttribute: void accept(proguard.classfile.Clazz,proguard.classfile.attribute.visitor.AttributeVisitor)>($r1, $r3);

     label1:
        return;
    }

    public void visitRuntimeVisibleParameterAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.'annotation'.RuntimeVisibleParameterAnnotationsAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.'annotation'.RuntimeVisibleParameterAnnotationsAttribute $r3;
        proguard.classfile.attribute.visitor.AttributeVisitor $r4;
        proguard.classfile.attribute.visitor.AttributeNameFilter r0;
        boolean $z0;

        r0 := @this: proguard.classfile.attribute.visitor.AttributeNameFilter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.RuntimeVisibleParameterAnnotationsAttribute;

        $z0 = specialinvoke r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: boolean accepted(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute)>($r1, $r3);

        if $z0 == 0 goto label1;

        $r4 = r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        virtualinvoke $r3.<proguard.classfile.attribute.'annotation'.RuntimeVisibleParameterAnnotationsAttribute: void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.visitor.AttributeVisitor)>($r1, $r2, $r4);

     label1:
        return;
    }

    public void visitSignatureAttribute(proguard.classfile.Clazz, proguard.classfile.Field, proguard.classfile.attribute.SignatureAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.visitor.AttributeVisitor $r4;
        proguard.classfile.attribute.SignatureAttribute $r3;
        proguard.classfile.Field $r2;
        proguard.classfile.attribute.visitor.AttributeNameFilter r0;
        boolean $z0;

        r0 := @this: proguard.classfile.attribute.visitor.AttributeNameFilter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Field;

        $r3 := @parameter2: proguard.classfile.attribute.SignatureAttribute;

        $z0 = specialinvoke r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: boolean accepted(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute)>($r1, $r3);

        if $z0 == 0 goto label1;

        $r4 = r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        virtualinvoke $r3.<proguard.classfile.attribute.SignatureAttribute: void accept(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.visitor.AttributeVisitor)>($r1, $r2, $r4);

     label1:
        return;
    }

    public void visitSignatureAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.SignatureAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.visitor.AttributeVisitor $r4;
        proguard.classfile.attribute.SignatureAttribute $r3;
        proguard.classfile.attribute.visitor.AttributeNameFilter r0;
        boolean $z0;

        r0 := @this: proguard.classfile.attribute.visitor.AttributeNameFilter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.SignatureAttribute;

        $z0 = specialinvoke r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: boolean accepted(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute)>($r1, $r3);

        if $z0 == 0 goto label1;

        $r4 = r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        virtualinvoke $r3.<proguard.classfile.attribute.SignatureAttribute: void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.visitor.AttributeVisitor)>($r1, $r2, $r4);

     label1:
        return;
    }

    public void visitSignatureAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.SignatureAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.visitor.AttributeVisitor $r3;
        proguard.classfile.attribute.SignatureAttribute $r2;
        proguard.classfile.attribute.visitor.AttributeNameFilter r0;
        boolean $z0;

        r0 := @this: proguard.classfile.attribute.visitor.AttributeNameFilter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.SignatureAttribute;

        $z0 = specialinvoke r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: boolean accepted(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute)>($r1, $r2);

        if $z0 == 0 goto label1;

        $r3 = r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        virtualinvoke $r2.<proguard.classfile.attribute.SignatureAttribute: void accept(proguard.classfile.Clazz,proguard.classfile.attribute.visitor.AttributeVisitor)>($r1, $r3);

     label1:
        return;
    }

    public void visitSourceDirAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.SourceDirAttribute)
    {
        proguard.classfile.attribute.SourceDirAttribute $r2;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.visitor.AttributeVisitor $r3;
        proguard.classfile.attribute.visitor.AttributeNameFilter r0;
        boolean $z0;

        r0 := @this: proguard.classfile.attribute.visitor.AttributeNameFilter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.SourceDirAttribute;

        $z0 = specialinvoke r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: boolean accepted(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute)>($r1, $r2);

        if $z0 == 0 goto label1;

        $r3 = r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        virtualinvoke $r2.<proguard.classfile.attribute.SourceDirAttribute: void accept(proguard.classfile.Clazz,proguard.classfile.attribute.visitor.AttributeVisitor)>($r1, $r3);

     label1:
        return;
    }

    public void visitSourceFileAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.SourceFileAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.SourceFileAttribute $r2;
        proguard.classfile.attribute.visitor.AttributeVisitor $r3;
        proguard.classfile.attribute.visitor.AttributeNameFilter r0;
        boolean $z0;

        r0 := @this: proguard.classfile.attribute.visitor.AttributeNameFilter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.SourceFileAttribute;

        $z0 = specialinvoke r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: boolean accepted(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute)>($r1, $r2);

        if $z0 == 0 goto label1;

        $r3 = r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        virtualinvoke $r2.<proguard.classfile.attribute.SourceFileAttribute: void accept(proguard.classfile.Clazz,proguard.classfile.attribute.visitor.AttributeVisitor)>($r1, $r3);

     label1:
        return;
    }

    public void visitStackMapAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.preverification.StackMapAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.attribute.preverification.StackMapAttribute $r4;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.visitor.AttributeVisitor $r5;
        proguard.classfile.attribute.visitor.AttributeNameFilter r0;
        boolean $z0;

        r0 := @this: proguard.classfile.attribute.visitor.AttributeNameFilter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.preverification.StackMapAttribute;

        $z0 = specialinvoke r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: boolean accepted(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute)>($r1, $r4);

        if $z0 == 0 goto label1;

        $r5 = r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        virtualinvoke $r4.<proguard.classfile.attribute.preverification.StackMapAttribute: void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.visitor.AttributeVisitor)>($r1, $r2, $r3, $r5);

     label1:
        return;
    }

    public void visitStackMapTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.preverification.StackMapTableAttribute)
    {
        proguard.classfile.attribute.preverification.StackMapTableAttribute $r4;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.visitor.AttributeVisitor $r5;
        proguard.classfile.attribute.visitor.AttributeNameFilter r0;
        boolean $z0;

        r0 := @this: proguard.classfile.attribute.visitor.AttributeNameFilter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.preverification.StackMapTableAttribute;

        $z0 = specialinvoke r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: boolean accepted(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute)>($r1, $r4);

        if $z0 == 0 goto label1;

        $r5 = r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        virtualinvoke $r4.<proguard.classfile.attribute.preverification.StackMapTableAttribute: void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.visitor.AttributeVisitor)>($r1, $r2, $r3, $r5);

     label1:
        return;
    }

    public void visitSyntheticAttribute(proguard.classfile.Clazz, proguard.classfile.Field, proguard.classfile.attribute.SyntheticAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.SyntheticAttribute $r3;
        proguard.classfile.attribute.visitor.AttributeVisitor $r4;
        proguard.classfile.Field $r2;
        proguard.classfile.attribute.visitor.AttributeNameFilter r0;
        boolean $z0;

        r0 := @this: proguard.classfile.attribute.visitor.AttributeNameFilter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Field;

        $r3 := @parameter2: proguard.classfile.attribute.SyntheticAttribute;

        $z0 = specialinvoke r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: boolean accepted(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute)>($r1, $r3);

        if $z0 == 0 goto label1;

        $r4 = r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        virtualinvoke $r3.<proguard.classfile.attribute.SyntheticAttribute: void accept(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.visitor.AttributeVisitor)>($r1, $r2, $r4);

     label1:
        return;
    }

    public void visitSyntheticAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.SyntheticAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.SyntheticAttribute $r3;
        proguard.classfile.attribute.visitor.AttributeVisitor $r4;
        proguard.classfile.attribute.visitor.AttributeNameFilter r0;
        boolean $z0;

        r0 := @this: proguard.classfile.attribute.visitor.AttributeNameFilter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.SyntheticAttribute;

        $z0 = specialinvoke r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: boolean accepted(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute)>($r1, $r3);

        if $z0 == 0 goto label1;

        $r4 = r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        virtualinvoke $r3.<proguard.classfile.attribute.SyntheticAttribute: void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.visitor.AttributeVisitor)>($r1, $r2, $r4);

     label1:
        return;
    }

    public void visitSyntheticAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.SyntheticAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.SyntheticAttribute $r2;
        proguard.classfile.attribute.visitor.AttributeVisitor $r3;
        proguard.classfile.attribute.visitor.AttributeNameFilter r0;
        boolean $z0;

        r0 := @this: proguard.classfile.attribute.visitor.AttributeNameFilter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.SyntheticAttribute;

        $z0 = specialinvoke r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: boolean accepted(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute)>($r1, $r2);

        if $z0 == 0 goto label1;

        $r3 = r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        virtualinvoke $r2.<proguard.classfile.attribute.SyntheticAttribute: void accept(proguard.classfile.Clazz,proguard.classfile.attribute.visitor.AttributeVisitor)>($r1, $r3);

     label1:
        return;
    }

    public void visitUnknownAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.UnknownAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.visitor.AttributeVisitor $r3;
        proguard.classfile.attribute.UnknownAttribute $r2;
        proguard.classfile.attribute.visitor.AttributeNameFilter r0;
        boolean $z0;

        r0 := @this: proguard.classfile.attribute.visitor.AttributeNameFilter;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.UnknownAttribute;

        $z0 = specialinvoke r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: boolean accepted(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute)>($r1, $r2);

        if $z0 == 0 goto label1;

        $r3 = r0.<proguard.classfile.attribute.visitor.AttributeNameFilter: proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor>;

        virtualinvoke $r2.<proguard.classfile.attribute.UnknownAttribute: void accept(proguard.classfile.Clazz,proguard.classfile.attribute.visitor.AttributeVisitor)>($r1, $r3);

     label1:
        return;
    }
}
