public class com.aishukeclassmfkb.netimg.MemoryCache extends java.lang.Object
{
    private static final java.lang.String TAG;
    private java.util.Map cache;
    private long limit;
    private long size;

    public void <init>()
    {
        java.util.LinkedHashMap $r1;
        com.aishukeclassmfkb.netimg.MemoryCache r0;
        java.util.Map $r2;
        java.lang.Runtime $r3;
        long $l0;

        r0 := @this: com.aishukeclassmfkb.netimg.MemoryCache;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>(int,float,boolean)>(10, 1.5F, 1);

        $r2 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>($r1);

        r0.<com.aishukeclassmfkb.netimg.MemoryCache: java.util.Map cache> = $r2;

        r0.<com.aishukeclassmfkb.netimg.MemoryCache: long size> = 0L;

        r0.<com.aishukeclassmfkb.netimg.MemoryCache: long limit> = 1000000L;

        $r3 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $l0 = virtualinvoke $r3.<java.lang.Runtime: long maxMemory()>();

        $l0 = $l0 / 4L;

        virtualinvoke r0.<com.aishukeclassmfkb.netimg.MemoryCache: void setLimit(long)>($l0);

        return;
    }

    private void checkSize()
    {
        java.util.Map$Entry $r5;
        java.util.Iterator $r3;
        java.util.Set $r2;
        long $l0, $l1;
        com.aishukeclassmfkb.netimg.MemoryCache r0;
        byte $b2;
        android.graphics.Bitmap $r6;
        java.util.Map $r1;
        int $i3;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: com.aishukeclassmfkb.netimg.MemoryCache;

        $l0 = r0.<com.aishukeclassmfkb.netimg.MemoryCache: long size>;

        $l1 = r0.<com.aishukeclassmfkb.netimg.MemoryCache: long limit>;

        $b2 = $l0 cmp $l1;

        $i3 = (int) $b2;

        if $i3 <= 0 goto label2;

        $r1 = r0.<com.aishukeclassmfkb.netimg.MemoryCache: java.util.Map cache>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.util.Map$Entry) $r4;

        $l0 = r0.<com.aishukeclassmfkb.netimg.MemoryCache: long size>;

        $r4 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r6 = (android.graphics.Bitmap) $r4;

        $l1 = virtualinvoke r0.<com.aishukeclassmfkb.netimg.MemoryCache: long getSizeInBytes(android.graphics.Bitmap)>($r6);

        $l0 = $l0 - $l1;

        r0.<com.aishukeclassmfkb.netimg.MemoryCache: long size> = $l0;

        interfaceinvoke $r3.<java.util.Iterator: void remove()>();

        $l0 = r0.<com.aishukeclassmfkb.netimg.MemoryCache: long size>;

        $l1 = r0.<com.aishukeclassmfkb.netimg.MemoryCache: long limit>;

        $b2 = $l0 cmp $l1;

        $i3 = (int) $b2;

        if $i3 > 0 goto label1;

     label2:
        return;
    }

    public void clear()
    {
        com.aishukeclassmfkb.netimg.MemoryCache r0;
        java.util.Map $r1;

        r0 := @this: com.aishukeclassmfkb.netimg.MemoryCache;

        $r1 = r0.<com.aishukeclassmfkb.netimg.MemoryCache: java.util.Map cache>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        return;
    }

    public android.graphics.Bitmap get(java.lang.String)
    {
        com.aishukeclassmfkb.netimg.MemoryCache r0;
        android.graphics.Bitmap $r4;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String $r1;
        java.lang.NullPointerException $r5;
        boolean $z0;

        r0 := @this: com.aishukeclassmfkb.netimg.MemoryCache;

        $r1 := @parameter0: java.lang.String;

     label1:
        $r2 = r0.<com.aishukeclassmfkb.netimg.MemoryCache: java.util.Map cache>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

     label2:
        if $z0 != 0 goto label3;

        return null;

     label3:
        $r2 = r0.<com.aishukeclassmfkb.netimg.MemoryCache: java.util.Map cache>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

     label4:
        $r4 = (android.graphics.Bitmap) $r3;

        return $r4;

     label5:
        $r5 := @caughtexception;

        return null;

        catch java.lang.NullPointerException from label1 to label2 with label5;
        catch java.lang.NullPointerException from label3 to label4 with label5;
    }

    long getSizeInBytes(android.graphics.Bitmap)
    {
        com.aishukeclassmfkb.netimg.MemoryCache r0;
        android.graphics.Bitmap $r1;
        int $i0, $i1;
        long $l2;

        r0 := @this: com.aishukeclassmfkb.netimg.MemoryCache;

        $r1 := @parameter0: android.graphics.Bitmap;

        if $r1 != null goto label1;

        return 0L;

     label1:
        $i0 = virtualinvoke $r1.<android.graphics.Bitmap: int getRowBytes()>();

        $i1 = virtualinvoke $r1.<android.graphics.Bitmap: int getHeight()>();

        $i0 = $i0 * $i1;

        $l2 = (long) $i0;

        return $l2;
    }

    public void put(java.lang.String, android.graphics.Bitmap)
    {
        java.lang.Throwable $r6;
        long $l0, $l1;
        com.aishukeclassmfkb.netimg.MemoryCache r0;
        android.graphics.Bitmap $r2, $r5;
        java.util.Map $r3;
        java.lang.Object $r4;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: com.aishukeclassmfkb.netimg.MemoryCache;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: android.graphics.Bitmap;

     label01:
        $r3 = r0.<com.aishukeclassmfkb.netimg.MemoryCache: java.util.Map cache>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

     label02:
        if $z0 == 0 goto label06;

     label03:
        $l0 = r0.<com.aishukeclassmfkb.netimg.MemoryCache: long size>;

        $r3 = r0.<com.aishukeclassmfkb.netimg.MemoryCache: java.util.Map cache>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r5 = (android.graphics.Bitmap) $r4;

        $l1 = virtualinvoke r0.<com.aishukeclassmfkb.netimg.MemoryCache: long getSizeInBytes(android.graphics.Bitmap)>($r5);

     label04:
        $l0 = $l0 - $l1;

     label05:
        r0.<com.aishukeclassmfkb.netimg.MemoryCache: long size> = $l0;

     label06:
        $r3 = r0.<com.aishukeclassmfkb.netimg.MemoryCache: java.util.Map cache>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        $l0 = r0.<com.aishukeclassmfkb.netimg.MemoryCache: long size>;

        $l1 = virtualinvoke r0.<com.aishukeclassmfkb.netimg.MemoryCache: long getSizeInBytes(android.graphics.Bitmap)>($r2);

     label07:
        $l0 = $l0 + $l1;

     label08:
        r0.<com.aishukeclassmfkb.netimg.MemoryCache: long size> = $l0;

        specialinvoke r0.<com.aishukeclassmfkb.netimg.MemoryCache: void checkSize()>();

     label09:
        return;

     label10:
        $r6 := @caughtexception;

        virtualinvoke $r6.<java.lang.Throwable: void printStackTrace()>();

        return;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
    }

    public void setLimit(long)
    {
        com.aishukeclassmfkb.netimg.MemoryCache r0;
        long $l0;

        r0 := @this: com.aishukeclassmfkb.netimg.MemoryCache;

        $l0 := @parameter0: long;

        r0.<com.aishukeclassmfkb.netimg.MemoryCache: long limit> = $l0;

        return;
    }

    public static void <clinit>()
    {
        <com.aishukeclassmfkb.netimg.MemoryCache: java.lang.String TAG> = "MemoryCache";

        return;
    }
}
