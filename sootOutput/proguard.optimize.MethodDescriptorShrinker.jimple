public class proguard.optimize.MethodDescriptorShrinker extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.visitor.MemberVisitor, proguard.classfile.attribute.visitor.AttributeVisitor
{
    private static final boolean DEBUG;
    private final proguard.classfile.visitor.MemberVisitor extraMemberVisitor;

    public void <init>()
    {
        proguard.optimize.MethodDescriptorShrinker r0;

        r0 := @this: proguard.optimize.MethodDescriptorShrinker;

        specialinvoke r0.<proguard.optimize.MethodDescriptorShrinker: void <init>(proguard.classfile.visitor.MemberVisitor)>(null);

        return;
    }

    public void <init>(proguard.classfile.visitor.MemberVisitor)
    {
        proguard.optimize.MethodDescriptorShrinker r0;
        proguard.classfile.visitor.MemberVisitor $r1;

        r0 := @this: proguard.optimize.MethodDescriptorShrinker;

        $r1 := @parameter0: proguard.classfile.visitor.MemberVisitor;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        r0.<proguard.optimize.MethodDescriptorShrinker: proguard.classfile.visitor.MemberVisitor extraMemberVisitor> = $r1;

        return;
    }

    private java.lang.String shrinkDescriptor(proguard.classfile.Method, java.lang.String)
    {
        byte $b1;
        proguard.classfile.util.InternalTypeEnumeration $r3;
        java.lang.StringBuffer $r4;
        proguard.optimize.MethodDescriptorShrinker r0;
        int $i0;
        proguard.classfile.Method $r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: proguard.optimize.MethodDescriptorShrinker;

        $r1 := @parameter0: proguard.classfile.Method;

        $r2 := @parameter1: java.lang.String;

        $i0 = interfaceinvoke $r1.<proguard.classfile.Method: int getAccessFlags()>();

        $i0 = $i0 & 8;

        if $i0 == 0 goto label5;

        $i0 = 0;

     label1:
        $r3 = new proguard.classfile.util.InternalTypeEnumeration;

        specialinvoke $r3.<proguard.classfile.util.InternalTypeEnumeration: void <init>(java.lang.String)>($r2);

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r3.<proguard.classfile.util.InternalTypeEnumeration: java.lang.String formalTypeParameters()>();

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(40);

     label2:
        $z0 = virtualinvoke $r3.<proguard.classfile.util.InternalTypeEnumeration: boolean hasMoreTypes()>();

        if $z0 == 0 goto label7;

        $r2 = virtualinvoke $r3.<proguard.classfile.util.InternalTypeEnumeration: java.lang.String nextType()>();

        $z0 = staticinvoke <proguard.optimize.info.ParameterUsageMarker: boolean isParameterUsed(proguard.classfile.Method,int)>($r1, $i0);

        if $z0 == 0 goto label3;

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

     label3:
        $z0 = staticinvoke <proguard.classfile.util.ClassUtil: boolean isInternalCategory2Type(java.lang.String)>($r2);

        if $z0 == 0 goto label6;

        $b1 = 2;

     label4:
        $i0 = $i0 + $b1;

        goto label2;

     label5:
        $i0 = 1;

        goto label1;

     label6:
        $b1 = 1;

        goto label4;

     label7:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(41);

        $r2 = virtualinvoke $r3.<proguard.classfile.util.InternalTypeEnumeration: java.lang.String returnType()>();

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    private proguard.classfile.Clazz[] shrinkReferencedClasses(proguard.classfile.Method, java.lang.String, proguard.classfile.Clazz[])
    {
        proguard.classfile.Clazz[] $r3;
        byte $b2;
        proguard.classfile.util.InternalTypeEnumeration $r4;
        proguard.classfile.Clazz $r6;
        proguard.optimize.MethodDescriptorShrinker r0;
        int $i0, $i1, $i3, $i4, $i5, $i6;
        proguard.classfile.Method $r1;
        java.lang.String $r2;
        proguard.classfile.util.DescriptorClassEnumeration $r5;
        boolean $z0;

        r0 := @this: proguard.optimize.MethodDescriptorShrinker;

        $r1 := @parameter0: proguard.classfile.Method;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: proguard.classfile.Clazz[];

        if $r3 == null goto label13;

        $i1 = interfaceinvoke $r1.<proguard.classfile.Method: int getAccessFlags()>();

        $i1 = $i1 & 8;

        if $i1 == 0 goto label03;

        $b2 = 0;

     label01:
        $r4 = new proguard.classfile.util.InternalTypeEnumeration;

        specialinvoke $r4.<proguard.classfile.util.InternalTypeEnumeration: void <init>(java.lang.String)>($r2);

        $r2 = virtualinvoke $r4.<proguard.classfile.util.InternalTypeEnumeration: java.lang.String formalTypeParameters()>();

        $r5 = new proguard.classfile.util.DescriptorClassEnumeration;

        specialinvoke $r5.<proguard.classfile.util.DescriptorClassEnumeration: void <init>(java.lang.String)>($r2);

        $i1 = virtualinvoke $r5.<proguard.classfile.util.DescriptorClassEnumeration: int classCount()>();

        $i3 = 0;

        $i4 = 0;

        $i0 = 0;

     label02:
        if $i3 >= $i1 goto label15;

        $r6 = $r3[$i0];

        $r3[$i4] = $r6;

        $i3 = $i3 + 1;

        $i4 = $i4 + 1;

        $i0 = $i0 + 1;

        goto label02;

     label03:
        $b2 = 1;

        goto label01;

     label04:
        $i3 = $i3 + $i4;

     label05:
        $z0 = staticinvoke <proguard.classfile.util.ClassUtil: boolean isInternalCategory2Type(java.lang.String)>($r2);

        if $z0 == 0 goto label09;

        $b2 = 2;

     label06:
        $i1 = $i1 + $b2;

     label07:
        $z0 = virtualinvoke $r4.<proguard.classfile.util.InternalTypeEnumeration: boolean hasMoreTypes()>();

        if $z0 == 0 goto label10;

        $r2 = virtualinvoke $r4.<proguard.classfile.util.InternalTypeEnumeration: java.lang.String nextType()>();

        $r5 = new proguard.classfile.util.DescriptorClassEnumeration;

        specialinvoke $r5.<proguard.classfile.util.DescriptorClassEnumeration: void <init>(java.lang.String)>($r2);

        $i4 = virtualinvoke $r5.<proguard.classfile.util.DescriptorClassEnumeration: int classCount()>();

        $z0 = staticinvoke <proguard.optimize.info.ParameterUsageMarker: boolean isParameterUsed(proguard.classfile.Method,int)>($r1, $i1);

        if $z0 == 0 goto label04;

        $i5 = $i0;

        $i6 = 0;

     label08:
        if $i6 >= $i4 goto label14;

        $r6 = $r3[$i3];

        $r3[$i5] = $r6;

        $i6 = $i6 + 1;

        $i5 = $i5 + 1;

        $i3 = $i3 + 1;

        goto label08;

     label09:
        $b2 = 1;

        goto label06;

     label10:
        $r2 = virtualinvoke $r4.<proguard.classfile.util.InternalTypeEnumeration: java.lang.String returnType()>();

        $r5 = new proguard.classfile.util.DescriptorClassEnumeration;

        specialinvoke $r5.<proguard.classfile.util.DescriptorClassEnumeration: void <init>(java.lang.String)>($r2);

        $i4 = virtualinvoke $r5.<proguard.classfile.util.DescriptorClassEnumeration: int classCount()>();

        $i1 = $i3;

        $i3 = $i0;

        $i0 = 0;

     label11:
        if $i0 >= $i4 goto label12;

        $r6 = $r3[$i1];

        $r3[$i3] = $r6;

        $i0 = $i0 + 1;

        $i3 = $i3 + 1;

        $i1 = $i1 + 1;

        goto label11;

     label12:
        if $i3 >= $i1 goto label16;

        $r3[$i3] = null;

        $i3 = $i3 + 1;

        goto label12;

     label13:
        return $r3;

     label14:
        $i0 = $i5;

        goto label05;

     label15:
        $i3 = $i0;

        $i1 = $b2;

        $i0 = $i4;

        goto label07;

     label16:
        return $r3;
    }

    public void visitAnyAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.Attribute)
    {
        proguard.optimize.MethodDescriptorShrinker r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.Attribute $r2;

        r0 := @this: proguard.optimize.MethodDescriptorShrinker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.Attribute;

        return;
    }

    public void visitAnyParameterAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute)
    {
        proguard.classfile.attribute.'annotation'.Annotation[][] $r5;
        proguard.classfile.attribute.'annotation'.Annotation[] $r6;
        byte $b1;
        proguard.classfile.Clazz $r1;
        int[] $r4;
        proguard.classfile.util.InternalTypeEnumeration $r8;
        proguard.optimize.MethodDescriptorShrinker r0;
        int $i0, $i2, $i3, $i4;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute $r3;
        java.lang.String $r7;
        boolean $z0;

        r0 := @this: proguard.optimize.MethodDescriptorShrinker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute;

        $r4 = $r3.<proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute: int[] u2parameterAnnotationsCount>;

        $r5 = $r3.<proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute: proguard.classfile.attribute.'annotation'.Annotation[][] parameterAnnotations>;

        $i0 = interfaceinvoke $r2.<proguard.classfile.Method: int getAccessFlags()>();

        $i0 = $i0 & 8;

        if $i0 == 0 goto label5;

        $b1 = 0;

     label1:
        $r7 = interfaceinvoke $r2.<proguard.classfile.Method: java.lang.String getDescriptor(proguard.classfile.Clazz)>($r1);

        $r8 = new proguard.classfile.util.InternalTypeEnumeration;

        specialinvoke $r8.<proguard.classfile.util.InternalTypeEnumeration: void <init>(java.lang.String)>($r7);

        $i0 = 0;

        $i2 = $b1;

        $i3 = 0;

     label2:
        $z0 = virtualinvoke $r8.<proguard.classfile.util.InternalTypeEnumeration: boolean hasMoreTypes()>();

        if $z0 == 0 goto label7;

        $r7 = virtualinvoke $r8.<proguard.classfile.util.InternalTypeEnumeration: java.lang.String nextType()>();

        $z0 = staticinvoke <proguard.optimize.info.ParameterUsageMarker: boolean isParameterUsed(proguard.classfile.Method,int)>($r2, $i2);

        if $z0 == 0 goto label3;

        $i4 = $r4[$i0];

        $r4[$i3] = $i4;

        $r6 = $r5[$i0];

        $r5[$i3] = $r6;

        $i3 = $i3 + 1;

     label3:
        $i0 = $i0 + 1;

        $z0 = staticinvoke <proguard.classfile.util.ClassUtil: boolean isInternalCategory2Type(java.lang.String)>($r7);

        if $z0 == 0 goto label6;

        $b1 = 2;

     label4:
        $i2 = $i2 + $b1;

        goto label2;

     label5:
        $b1 = 1;

        goto label1;

     label6:
        $b1 = 1;

        goto label4;

     label7:
        $r3.<proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute: int u2parametersCount> = $i3;

     label8:
        if $i3 >= $i0 goto label9;

        $r4[$i3] = 0;

        $r5[$i3] = null;

        $i3 = $i3 + 1;

        goto label8;

     label9:
        return;
    }

    public void visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod)
    {
        proguard.classfile.Clazz[] $r9;
        proguard.classfile.visitor.MemberVisitor $r10;
        long $l1;
        proguard.classfile.ProgramClass $r1;
        java.lang.StringBuffer $r6;
        proguard.classfile.ProgramMethod $r2;
        proguard.optimize.MethodDescriptorShrinker r0;
        int $i0;
        java.lang.String $r3, $r4, $r5, $r7;
        proguard.classfile.editor.ConstantPoolEditor $r8;
        boolean $z0;

        r0 := @this: proguard.optimize.MethodDescriptorShrinker;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.ProgramMethod;

        $r3 = virtualinvoke $r2.<proguard.classfile.ProgramMethod: java.lang.String getDescriptor(proguard.classfile.Clazz)>($r1);

        $r4 = specialinvoke r0.<proguard.optimize.MethodDescriptorShrinker: java.lang.String shrinkDescriptor(proguard.classfile.Method,java.lang.String)>($r2, $r3);

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label4;

        virtualinvoke $r2.<proguard.classfile.ProgramMethod: void attributesAccept(proguard.classfile.ProgramClass,proguard.classfile.attribute.visitor.AttributeVisitor)>($r1, r0);

        $r5 = virtualinvoke $r2.<proguard.classfile.ProgramMethod: java.lang.String getName(proguard.classfile.Clazz)>($r1);

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("<init>");

        if $z0 != 0 goto label3;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(36);

        $i0 = virtualinvoke $r3.<java.lang.String: int hashCode()>();

        $i0 = staticinvoke <java.lang.Math: int abs(int)>($i0);

        $l1 = (long) $i0;

        $r7 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

     label1:
        $r8 = new proguard.classfile.editor.ConstantPoolEditor;

        specialinvoke $r8.<proguard.classfile.editor.ConstantPoolEditor: void <init>(proguard.classfile.ProgramClass)>($r1);

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label2;

        $i0 = virtualinvoke $r8.<proguard.classfile.editor.ConstantPoolEditor: int addUtf8Constant(java.lang.String)>($r7);

        $r2.<proguard.classfile.ProgramMethod: int u2nameIndex> = $i0;

     label2:
        $r9 = $r2.<proguard.classfile.ProgramMethod: proguard.classfile.Clazz[] referencedClasses>;

        $r9 = specialinvoke r0.<proguard.optimize.MethodDescriptorShrinker: proguard.classfile.Clazz[] shrinkReferencedClasses(proguard.classfile.Method,java.lang.String,proguard.classfile.Clazz[])>($r2, $r3, $r9);

        $r2.<proguard.classfile.ProgramMethod: proguard.classfile.Clazz[] referencedClasses> = $r9;

        $i0 = virtualinvoke $r8.<proguard.classfile.editor.ConstantPoolEditor: int addUtf8Constant(java.lang.String)>($r4);

        $r2.<proguard.classfile.ProgramMethod: int u2descriptorIndex> = $i0;

        $r10 = r0.<proguard.optimize.MethodDescriptorShrinker: proguard.classfile.visitor.MemberVisitor extraMemberVisitor>;

        if $r10 == null goto label4;

        $r10 = r0.<proguard.optimize.MethodDescriptorShrinker: proguard.classfile.visitor.MemberVisitor extraMemberVisitor>;

        interfaceinvoke $r10.<proguard.classfile.visitor.MemberVisitor: void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod)>($r1, $r2);

        return;

     label3:
        $r7 = $r5;

        goto label1;

     label4:
        return;
    }

    public void visitSignatureAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.SignatureAttribute)
    {
        proguard.classfile.Clazz[] $r8;
        proguard.classfile.ProgramClass $r7;
        proguard.classfile.Clazz $r4;
        proguard.optimize.MethodDescriptorShrinker r0;
        int $i0;
        proguard.classfile.Method $r1;
        proguard.classfile.attribute.SignatureAttribute $r2;
        java.lang.String $r5, $r6;
        proguard.classfile.editor.ConstantPoolEditor $r3;

        r0 := @this: proguard.optimize.MethodDescriptorShrinker;

        $r4 := @parameter0: proguard.classfile.Clazz;

        $r1 := @parameter1: proguard.classfile.Method;

        $r2 := @parameter2: proguard.classfile.attribute.SignatureAttribute;

        $i0 = $r2.<proguard.classfile.attribute.SignatureAttribute: int u2signatureIndex>;

        $r5 = interfaceinvoke $r4.<proguard.classfile.Clazz: java.lang.String getString(int)>($i0);

        $r6 = specialinvoke r0.<proguard.optimize.MethodDescriptorShrinker: java.lang.String shrinkDescriptor(proguard.classfile.Method,java.lang.String)>($r1, $r5);

        $r3 = new proguard.classfile.editor.ConstantPoolEditor;

        $r7 = (proguard.classfile.ProgramClass) $r4;

        specialinvoke $r3.<proguard.classfile.editor.ConstantPoolEditor: void <init>(proguard.classfile.ProgramClass)>($r7);

        $i0 = virtualinvoke $r3.<proguard.classfile.editor.ConstantPoolEditor: int addUtf8Constant(java.lang.String)>($r6);

        $r2.<proguard.classfile.attribute.SignatureAttribute: int u2signatureIndex> = $i0;

        $r8 = $r2.<proguard.classfile.attribute.SignatureAttribute: proguard.classfile.Clazz[] referencedClasses>;

        $r8 = specialinvoke r0.<proguard.optimize.MethodDescriptorShrinker: proguard.classfile.Clazz[] shrinkReferencedClasses(proguard.classfile.Method,java.lang.String,proguard.classfile.Clazz[])>($r1, $r5, $r8);

        $r2.<proguard.classfile.attribute.SignatureAttribute: proguard.classfile.Clazz[] referencedClasses> = $r8;

        return;
    }
}
