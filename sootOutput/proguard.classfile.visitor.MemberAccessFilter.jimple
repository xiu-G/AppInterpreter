public class proguard.classfile.visitor.MemberAccessFilter extends java.lang.Object implements proguard.classfile.visitor.MemberVisitor
{
    private static final int ACCESS_MASK;
    private final proguard.classfile.visitor.MemberVisitor memberVisitor;
    private final int requiredOneSetAccessFlags;
    private final int requiredSetAccessFlags;
    private final int requiredUnsetAccessFlags;

    public void <init>(int, int, proguard.classfile.visitor.MemberVisitor)
    {
        int $i0, $i1, $i2;
        proguard.classfile.visitor.MemberVisitor $r1;
        proguard.classfile.visitor.MemberAccessFilter r0;

        r0 := @this: proguard.classfile.visitor.MemberAccessFilter;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: proguard.classfile.visitor.MemberVisitor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i2 = $i0 & -8;

        r0.<proguard.classfile.visitor.MemberAccessFilter: int requiredSetAccessFlags> = $i2;

        r0.<proguard.classfile.visitor.MemberAccessFilter: int requiredUnsetAccessFlags> = $i1;

        $i0 = $i0 & 7;

        r0.<proguard.classfile.visitor.MemberAccessFilter: int requiredOneSetAccessFlags> = $i0;

        r0.<proguard.classfile.visitor.MemberAccessFilter: proguard.classfile.visitor.MemberVisitor memberVisitor> = $r1;

        return;
    }

    private boolean accepted(int)
    {
        int $i0, $i1, $i2;
        proguard.classfile.visitor.MemberAccessFilter r0;

        r0 := @this: proguard.classfile.visitor.MemberAccessFilter;

        $i0 := @parameter0: int;

        $i2 = r0.<proguard.classfile.visitor.MemberAccessFilter: int requiredSetAccessFlags>;

        $i1 = $i0 ^ -1;

        $i2 = $i2 & $i1;

        if $i2 != 0 goto label2;

        $i2 = r0.<proguard.classfile.visitor.MemberAccessFilter: int requiredUnsetAccessFlags>;

        $i2 = $i2 & $i0;

        if $i2 != 0 goto label2;

        $i2 = r0.<proguard.classfile.visitor.MemberAccessFilter: int requiredOneSetAccessFlags>;

        if $i2 == 0 goto label1;

        $i2 = r0.<proguard.classfile.visitor.MemberAccessFilter: int requiredOneSetAccessFlags>;

        $i0 = $i2 & $i0;

        if $i0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public void visitLibraryField(proguard.classfile.LibraryClass, proguard.classfile.LibraryField)
    {
        proguard.classfile.LibraryClass $r1;
        proguard.classfile.LibraryField $r2;
        int $i0;
        proguard.classfile.visitor.MemberVisitor $r3;
        proguard.classfile.visitor.MemberAccessFilter r0;
        boolean $z0;

        r0 := @this: proguard.classfile.visitor.MemberAccessFilter;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        $r2 := @parameter1: proguard.classfile.LibraryField;

        $i0 = virtualinvoke $r2.<proguard.classfile.LibraryField: int getAccessFlags()>();

        $z0 = specialinvoke r0.<proguard.classfile.visitor.MemberAccessFilter: boolean accepted(int)>($i0);

        if $z0 == 0 goto label1;

        $r3 = r0.<proguard.classfile.visitor.MemberAccessFilter: proguard.classfile.visitor.MemberVisitor memberVisitor>;

        interfaceinvoke $r3.<proguard.classfile.visitor.MemberVisitor: void visitLibraryField(proguard.classfile.LibraryClass,proguard.classfile.LibraryField)>($r1, $r2);

     label1:
        return;
    }

    public void visitLibraryMethod(proguard.classfile.LibraryClass, proguard.classfile.LibraryMethod)
    {
        proguard.classfile.LibraryClass $r1;
        int $i0;
        proguard.classfile.LibraryMethod $r2;
        proguard.classfile.visitor.MemberVisitor $r3;
        proguard.classfile.visitor.MemberAccessFilter r0;
        boolean $z0;

        r0 := @this: proguard.classfile.visitor.MemberAccessFilter;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        $r2 := @parameter1: proguard.classfile.LibraryMethod;

        $i0 = virtualinvoke $r2.<proguard.classfile.LibraryMethod: int getAccessFlags()>();

        $z0 = specialinvoke r0.<proguard.classfile.visitor.MemberAccessFilter: boolean accepted(int)>($i0);

        if $z0 == 0 goto label1;

        $r3 = r0.<proguard.classfile.visitor.MemberAccessFilter: proguard.classfile.visitor.MemberVisitor memberVisitor>;

        interfaceinvoke $r3.<proguard.classfile.visitor.MemberVisitor: void visitLibraryMethod(proguard.classfile.LibraryClass,proguard.classfile.LibraryMethod)>($r1, $r2);

     label1:
        return;
    }

    public void visitProgramField(proguard.classfile.ProgramClass, proguard.classfile.ProgramField)
    {
        proguard.classfile.ProgramField $r2;
        int $i0;
        proguard.classfile.visitor.MemberVisitor $r3;
        proguard.classfile.visitor.MemberAccessFilter r0;
        proguard.classfile.ProgramClass $r1;
        boolean $z0;

        r0 := @this: proguard.classfile.visitor.MemberAccessFilter;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.ProgramField;

        $i0 = virtualinvoke $r2.<proguard.classfile.ProgramField: int getAccessFlags()>();

        $z0 = specialinvoke r0.<proguard.classfile.visitor.MemberAccessFilter: boolean accepted(int)>($i0);

        if $z0 == 0 goto label1;

        $r3 = r0.<proguard.classfile.visitor.MemberAccessFilter: proguard.classfile.visitor.MemberVisitor memberVisitor>;

        interfaceinvoke $r3.<proguard.classfile.visitor.MemberVisitor: void visitProgramField(proguard.classfile.ProgramClass,proguard.classfile.ProgramField)>($r1, $r2);

     label1:
        return;
    }

    public void visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod)
    {
        proguard.classfile.ProgramMethod $r2;
        int $i0;
        proguard.classfile.visitor.MemberVisitor $r3;
        proguard.classfile.visitor.MemberAccessFilter r0;
        proguard.classfile.ProgramClass $r1;
        boolean $z0;

        r0 := @this: proguard.classfile.visitor.MemberAccessFilter;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.ProgramMethod;

        $i0 = virtualinvoke $r2.<proguard.classfile.ProgramMethod: int getAccessFlags()>();

        $z0 = specialinvoke r0.<proguard.classfile.visitor.MemberAccessFilter: boolean accepted(int)>($i0);

        if $z0 == 0 goto label1;

        $r3 = r0.<proguard.classfile.visitor.MemberAccessFilter: proguard.classfile.visitor.MemberVisitor memberVisitor>;

        interfaceinvoke $r3.<proguard.classfile.visitor.MemberVisitor: void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod)>($r1, $r2);

     label1:
        return;
    }

    public static void <clinit>()
    {
        <proguard.classfile.visitor.MemberAccessFilter: int ACCESS_MASK> = 7;

        return;
    }
}
