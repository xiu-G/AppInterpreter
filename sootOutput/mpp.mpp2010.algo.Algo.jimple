public class mpp.mpp2010.algo.Algo extends java.lang.Object
{
    static final int BLUE;
    static final int GREEN;
    static final int RED;
    android.graphics.Bitmap bmp;
    protected final android.graphics.Bitmap obmp;

    public void <init>(android.graphics.Bitmap)
    {
        mpp.mpp2010.algo.Algo r0;
        android.graphics.Bitmap $r1, $r2;
        int $i0, $i1;

        r0 := @this: mpp.mpp2010.algo.Algo;

        $r1 := @parameter0: android.graphics.Bitmap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<mpp.mpp2010.algo.Algo: android.graphics.Bitmap obmp> = $r1;

        $r1 = r0.<mpp.mpp2010.algo.Algo: android.graphics.Bitmap obmp>;

        $r2 = r0.<mpp.mpp2010.algo.Algo: android.graphics.Bitmap obmp>;

        $i0 = virtualinvoke $r2.<android.graphics.Bitmap: int getWidth()>();

        $r2 = r0.<mpp.mpp2010.algo.Algo: android.graphics.Bitmap obmp>;

        $i1 = virtualinvoke $r2.<android.graphics.Bitmap: int getHeight()>();

        $r1 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createScaledBitmap(android.graphics.Bitmap,int,int,boolean)>($r1, $i0, $i1, 1);

        r0.<mpp.mpp2010.algo.Algo: android.graphics.Bitmap bmp> = $r1;

        return;
    }

    public android.graphics.Bitmap getBitmap()
    {
        mpp.mpp2010.algo.Algo r0;
        android.graphics.Bitmap r1;

        r0 := @this: mpp.mpp2010.algo.Algo;

        r1 = r0.<mpp.mpp2010.algo.Algo: android.graphics.Bitmap bmp>;

        return r1;
    }

    public android.graphics.Bitmap getNewBitmap()
    {
        mpp.mpp2010.algo.Algo r0;
        android.graphics.Bitmap $r1;

        r0 := @this: mpp.mpp2010.algo.Algo;

        $r1 = r0.<mpp.mpp2010.algo.Algo: android.graphics.Bitmap bmp>;

        $r1 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap)>($r1);

        return $r1;
    }

    protected int getRGB(int, int, int)
    {
        mpp.mpp2010.algo.Algo r0;
        android.graphics.Bitmap $r1;
        int $i0, $i1, $i2;

        r0 := @this: mpp.mpp2010.algo.Algo;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        lookupswitch($i2)
        {
            case 0: goto label2;
            case 1: goto label3;
            case 2: goto label4;
            default: goto label1;
        };

     label1:
        $i0 = -1;

        return $i0;

     label2:
        $r1 = r0.<mpp.mpp2010.algo.Algo: android.graphics.Bitmap bmp>;

        $i0 = virtualinvoke $r1.<android.graphics.Bitmap: int getPixel(int,int)>($i1, $i0);

        $i0 = $i0 & 255;

        return $i0;

     label3:
        $r1 = r0.<mpp.mpp2010.algo.Algo: android.graphics.Bitmap bmp>;

        $i0 = virtualinvoke $r1.<android.graphics.Bitmap: int getPixel(int,int)>($i1, $i0);

        $i1 = 65280;

        $i0 = $i0 & $i1;

        $i0 = $i0 >> 8;

        return $i0;

     label4:
        $r1 = r0.<mpp.mpp2010.algo.Algo: android.graphics.Bitmap bmp>;

        $i0 = virtualinvoke $r1.<android.graphics.Bitmap: int getPixel(int,int)>($i1, $i0);

        $i0 = $i0 & 16711680;

        $i0 = $i0 >> 16;

        return $i0;
    }

    public void reSize(int, int)
    {
        mpp.mpp2010.algo.Algo r0;
        android.graphics.Bitmap $r1;
        int $i0, $i1;

        r0 := @this: mpp.mpp2010.algo.Algo;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = r0.<mpp.mpp2010.algo.Algo: android.graphics.Bitmap bmp>;

        $r1 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createScaledBitmap(android.graphics.Bitmap,int,int,boolean)>($r1, $i1, $i0, 1);

        r0.<mpp.mpp2010.algo.Algo: android.graphics.Bitmap bmp> = $r1;

        return;
    }

    public void writeToFile(android.graphics.Bitmap, java.lang.String)
    {
        mpp.mpp2010.algo.Algo r0;
        java.io.FileOutputStream r4;
        java.io.File r3;
        java.lang.Exception $r9;
        android.graphics.Bitmap $r1;
        java.lang.StringBuilder $r5;
        java.lang.Class $r6;
        android.graphics.Bitmap$CompressFormat $r8;
        java.lang.String $r2, $r7;

        r0 := @this: mpp.mpp2010.algo.Algo;

        $r1 := @parameter0: android.graphics.Bitmap;

        $r2 := @parameter1: java.lang.String;

        $r5 = new java.lang.StringBuilder;

        $r6 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String toString()>();

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r7);

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>($r7);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" method : _write");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("dip", $r7);

        r3 = new java.io.File;

        specialinvoke r3.<java.io.File: void <init>(java.lang.String)>($r2);

        r4 = new java.io.FileOutputStream;

     label1:
        specialinvoke r4.<java.io.FileOutputStream: void <init>(java.io.File)>(r3);

     label2:
        $r8 = <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat PNG>;

     label3:
        virtualinvoke $r1.<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>($r8, 77, r4);

        virtualinvoke r4.<java.io.FileOutputStream: void flush()>();

        virtualinvoke r4.<java.io.FileOutputStream: void close()>();

     label4:
        $r5 = new java.lang.StringBuilder;

        $r6 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r6.<java.lang.Class: java.lang.String toString()>();

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>($r2);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" method : _write done");

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("dip", $r2);

        return;

     label5:
        $r9 := @caughtexception;

        $r2 = virtualinvoke $r9.<java.lang.Exception: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("dip", $r2);

        virtualinvoke $r9.<java.lang.Exception: void printStackTrace()>();

        goto label4;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }

    public static void <clinit>()
    {
        <mpp.mpp2010.algo.Algo: int RED> = 2;

        <mpp.mpp2010.algo.Algo: int GREEN> = 1;

        <mpp.mpp2010.algo.Algo: int BLUE> = 0;

        return;
    }
}
