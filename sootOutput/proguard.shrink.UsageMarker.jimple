class proguard.shrink.UsageMarker extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.visitor.ClassVisitor, proguard.classfile.visitor.MemberVisitor, proguard.classfile.constant.visitor.ConstantVisitor, proguard.classfile.attribute.visitor.AttributeVisitor, proguard.classfile.attribute.visitor.InnerClassesInfoVisitor, proguard.classfile.attribute.visitor.ExceptionInfoVisitor, proguard.classfile.attribute.preverification.visitor.StackMapFrameVisitor, proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor, proguard.classfile.attribute.visitor.LocalVariableInfoVisitor, proguard.classfile.attribute.visitor.LocalVariableTypeInfoVisitor, proguard.classfile.instruction.visitor.InstructionVisitor
{
    private static final java.lang.Object POSSIBLY_USED;
    private static final java.lang.Object USED;
    private final proguard.shrink.UsageMarker$MyInterfaceUsageMarker interfaceUsageMarker;
    private final proguard.shrink.UsageMarker$MyPossiblyUsedMemberUsageMarker possiblyUsedMemberUsageMarker;

    static void <clinit>()
    {
        java.lang.Object $r0;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <proguard.shrink.UsageMarker: java.lang.Object POSSIBLY_USED> = $r0;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <proguard.shrink.UsageMarker: java.lang.Object USED> = $r0;

        return;
    }

    void <init>()
    {
        proguard.shrink.UsageMarker$MyInterfaceUsageMarker $r1;
        proguard.shrink.UsageMarker r0;
        proguard.shrink.UsageMarker$MyPossiblyUsedMemberUsageMarker $r2;

        r0 := @this: proguard.shrink.UsageMarker;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        $r1 = new proguard.shrink.UsageMarker$MyInterfaceUsageMarker;

        specialinvoke $r1.<proguard.shrink.UsageMarker$MyInterfaceUsageMarker: void <init>(proguard.shrink.UsageMarker,proguard.shrink.UsageMarker$1)>(r0, null);

        r0.<proguard.shrink.UsageMarker: proguard.shrink.UsageMarker$MyInterfaceUsageMarker interfaceUsageMarker> = $r1;

        $r2 = new proguard.shrink.UsageMarker$MyPossiblyUsedMemberUsageMarker;

        specialinvoke $r2.<proguard.shrink.UsageMarker$MyPossiblyUsedMemberUsageMarker: void <init>(proguard.shrink.UsageMarker,proguard.shrink.UsageMarker$1)>(r0, null);

        r0.<proguard.shrink.UsageMarker: proguard.shrink.UsageMarker$MyPossiblyUsedMemberUsageMarker possiblyUsedMemberUsageMarker> = $r2;

        return;
    }

    static void access$200(proguard.shrink.UsageMarker, proguard.classfile.Clazz, int)
    {
        int $i0;
        proguard.shrink.UsageMarker $r0;
        proguard.classfile.Clazz $r1;

        $r0 := @parameter0: proguard.shrink.UsageMarker;

        $r1 := @parameter1: proguard.classfile.Clazz;

        $i0 := @parameter2: int;

        specialinvoke $r0.<proguard.shrink.UsageMarker: void markConstant(proguard.classfile.Clazz,int)>($r1, $i0);

        return;
    }

    private void markConstant(proguard.classfile.Clazz, int)
    {
        int $i0;
        proguard.shrink.UsageMarker r0;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.shrink.UsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $i0 := @parameter1: int;

        interfaceinvoke $r1.<proguard.classfile.Clazz: void constantPoolEntryAccept(int,proguard.classfile.constant.visitor.ConstantVisitor)>($i0, r0);

        return;
    }

    protected boolean isPossiblyUsed(proguard.classfile.VisitorAccepter)
    {
        proguard.shrink.UsageMarker r0;
        proguard.classfile.VisitorAccepter $r1;
        java.lang.Object $r2, $r3;

        r0 := @this: proguard.shrink.UsageMarker;

        $r1 := @parameter0: proguard.classfile.VisitorAccepter;

        $r3 = interfaceinvoke $r1.<proguard.classfile.VisitorAccepter: java.lang.Object getVisitorInfo()>();

        $r2 = <proguard.shrink.UsageMarker: java.lang.Object POSSIBLY_USED>;

        if $r3 != $r2 goto label1;

        return 1;

     label1:
        return 0;
    }

    protected boolean isUsed(proguard.classfile.VisitorAccepter)
    {
        proguard.shrink.UsageMarker r0;
        proguard.classfile.VisitorAccepter $r1;
        java.lang.Object $r2, $r3;

        r0 := @this: proguard.shrink.UsageMarker;

        $r1 := @parameter0: proguard.classfile.VisitorAccepter;

        $r3 = interfaceinvoke $r1.<proguard.classfile.VisitorAccepter: java.lang.Object getVisitorInfo()>();

        $r2 = <proguard.shrink.UsageMarker: java.lang.Object USED>;

        if $r3 != $r2 goto label1;

        return 1;

     label1:
        return 0;
    }

    protected void markAsPossiblyUsed(proguard.classfile.VisitorAccepter)
    {
        proguard.shrink.UsageMarker r0;
        java.lang.Object $r2;
        proguard.classfile.VisitorAccepter $r1;

        r0 := @this: proguard.shrink.UsageMarker;

        $r1 := @parameter0: proguard.classfile.VisitorAccepter;

        $r2 = <proguard.shrink.UsageMarker: java.lang.Object POSSIBLY_USED>;

        interfaceinvoke $r1.<proguard.classfile.VisitorAccepter: void setVisitorInfo(java.lang.Object)>($r2);

        return;
    }

    protected void markAsUnused(proguard.classfile.VisitorAccepter)
    {
        proguard.shrink.UsageMarker r0;
        proguard.classfile.VisitorAccepter $r1;

        r0 := @this: proguard.shrink.UsageMarker;

        $r1 := @parameter0: proguard.classfile.VisitorAccepter;

        interfaceinvoke $r1.<proguard.classfile.VisitorAccepter: void setVisitorInfo(java.lang.Object)>(null);

        return;
    }

    protected void markAsUsed(proguard.classfile.VisitorAccepter)
    {
        proguard.shrink.UsageMarker r0;
        java.lang.Object $r2;
        proguard.classfile.VisitorAccepter $r1;

        r0 := @this: proguard.shrink.UsageMarker;

        $r1 := @parameter0: proguard.classfile.VisitorAccepter;

        $r2 = <proguard.shrink.UsageMarker: java.lang.Object USED>;

        interfaceinvoke $r1.<proguard.classfile.VisitorAccepter: void setVisitorInfo(java.lang.Object)>($r2);

        return;
    }

    protected void markMethodHierarchy(proguard.classfile.Clazz, proguard.classfile.Method)
    {
        proguard.shrink.UsageMarker r0;
        proguard.classfile.visitor.ClassHierarchyTraveler $r6;
        proguard.classfile.visitor.NamedMethodVisitor $r3;
        proguard.classfile.Clazz $r1;
        int $i0;
        proguard.classfile.Method $r2;
        java.lang.String $r7, $r8;
        proguard.classfile.visitor.ConcreteClassDownTraveler $r4;
        proguard.classfile.visitor.MemberAccessFilter $r5;

        r0 := @this: proguard.shrink.UsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $i0 = interfaceinvoke $r2.<proguard.classfile.Method: int getAccessFlags()>();

        $i0 = $i0 & 10;

        if $i0 != 0 goto label1;

        $r4 = new proguard.classfile.visitor.ConcreteClassDownTraveler;

        $r6 = new proguard.classfile.visitor.ClassHierarchyTraveler;

        $r3 = new proguard.classfile.visitor.NamedMethodVisitor;

        $r7 = interfaceinvoke $r2.<proguard.classfile.Method: java.lang.String getName(proguard.classfile.Clazz)>($r1);

        $r8 = interfaceinvoke $r2.<proguard.classfile.Method: java.lang.String getDescriptor(proguard.classfile.Clazz)>($r1);

        $r5 = new proguard.classfile.visitor.MemberAccessFilter;

        specialinvoke $r5.<proguard.classfile.visitor.MemberAccessFilter: void <init>(int,int,proguard.classfile.visitor.MemberVisitor)>(0, 1034, r0);

        specialinvoke $r3.<proguard.classfile.visitor.NamedMethodVisitor: void <init>(java.lang.String,java.lang.String,proguard.classfile.visitor.MemberVisitor)>($r7, $r8, $r5);

        specialinvoke $r6.<proguard.classfile.visitor.ClassHierarchyTraveler: void <init>(boolean,boolean,boolean,boolean,proguard.classfile.visitor.ClassVisitor)>(1, 1, 0, 1, $r3);

        specialinvoke $r4.<proguard.classfile.visitor.ConcreteClassDownTraveler: void <init>(proguard.classfile.visitor.ClassVisitor)>($r6);

        interfaceinvoke $r1.<proguard.classfile.Clazz: void accept(proguard.classfile.visitor.ClassVisitor)>($r4);

     label1:
        return;
    }

    protected void markProgramClassBody(proguard.classfile.ProgramClass)
    {
        proguard.shrink.UsageMarker r0;
        proguard.shrink.UsageMarker$MyPossiblyUsedMemberUsageMarker $r3;
        int $i0;
        proguard.shrink.UsageMarker$MyInterfaceUsageMarker $r2;
        proguard.classfile.ProgramClass $r1;

        r0 := @this: proguard.shrink.UsageMarker;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $i0 = $r1.<proguard.classfile.ProgramClass: int u2thisClass>;

        specialinvoke r0.<proguard.shrink.UsageMarker: void markConstant(proguard.classfile.Clazz,int)>($r1, $i0);

        $i0 = $r1.<proguard.classfile.ProgramClass: int u2superClass>;

        if $i0 == 0 goto label1;

        $i0 = $r1.<proguard.classfile.ProgramClass: int u2superClass>;

        specialinvoke r0.<proguard.shrink.UsageMarker: void markConstant(proguard.classfile.Clazz,int)>($r1, $i0);

     label1:
        $r2 = r0.<proguard.shrink.UsageMarker: proguard.shrink.UsageMarker$MyInterfaceUsageMarker interfaceUsageMarker>;

        virtualinvoke $r1.<proguard.classfile.ProgramClass: void hierarchyAccept(boolean,boolean,boolean,boolean,proguard.classfile.visitor.ClassVisitor)>(0, 0, 1, 0, $r2);

        virtualinvoke $r1.<proguard.classfile.ProgramClass: void methodAccept(java.lang.String,java.lang.String,proguard.classfile.visitor.MemberVisitor)>("<clinit>", "()V", r0);

        virtualinvoke $r1.<proguard.classfile.ProgramClass: void methodAccept(java.lang.String,java.lang.String,proguard.classfile.visitor.MemberVisitor)>("<init>", "()V", r0);

        $r3 = r0.<proguard.shrink.UsageMarker: proguard.shrink.UsageMarker$MyPossiblyUsedMemberUsageMarker possiblyUsedMemberUsageMarker>;

        virtualinvoke $r1.<proguard.classfile.ProgramClass: void fieldsAccept(proguard.classfile.visitor.MemberVisitor)>($r3);

        $r3 = r0.<proguard.shrink.UsageMarker: proguard.shrink.UsageMarker$MyPossiblyUsedMemberUsageMarker possiblyUsedMemberUsageMarker>;

        virtualinvoke $r1.<proguard.classfile.ProgramClass: void methodsAccept(proguard.classfile.visitor.MemberVisitor)>($r3);

        virtualinvoke $r1.<proguard.classfile.ProgramClass: void attributesAccept(proguard.classfile.attribute.visitor.AttributeVisitor)>(r0);

        return;
    }

    protected void markProgramFieldBody(proguard.classfile.ProgramClass, proguard.classfile.ProgramField)
    {
        proguard.shrink.UsageMarker r0;
        proguard.classfile.ProgramField $r2;
        int $i0;
        proguard.classfile.ProgramClass $r1;

        r0 := @this: proguard.shrink.UsageMarker;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.ProgramField;

        $i0 = $r2.<proguard.classfile.ProgramField: int u2nameIndex>;

        specialinvoke r0.<proguard.shrink.UsageMarker: void markConstant(proguard.classfile.Clazz,int)>($r1, $i0);

        $i0 = $r2.<proguard.classfile.ProgramField: int u2descriptorIndex>;

        specialinvoke r0.<proguard.shrink.UsageMarker: void markConstant(proguard.classfile.Clazz,int)>($r1, $i0);

        virtualinvoke $r2.<proguard.classfile.ProgramField: void attributesAccept(proguard.classfile.ProgramClass,proguard.classfile.attribute.visitor.AttributeVisitor)>($r1, r0);

        virtualinvoke $r2.<proguard.classfile.ProgramField: void referencedClassesAccept(proguard.classfile.visitor.ClassVisitor)>(r0);

        return;
    }

    protected void markProgramMethodBody(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod)
    {
        proguard.shrink.UsageMarker r0;
        proguard.classfile.ProgramMethod $r2;
        int $i0;
        proguard.classfile.ProgramClass $r1;

        r0 := @this: proguard.shrink.UsageMarker;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.ProgramMethod;

        $i0 = $r2.<proguard.classfile.ProgramMethod: int u2nameIndex>;

        specialinvoke r0.<proguard.shrink.UsageMarker: void markConstant(proguard.classfile.Clazz,int)>($r1, $i0);

        $i0 = $r2.<proguard.classfile.ProgramMethod: int u2descriptorIndex>;

        specialinvoke r0.<proguard.shrink.UsageMarker: void markConstant(proguard.classfile.Clazz,int)>($r1, $i0);

        virtualinvoke $r2.<proguard.classfile.ProgramMethod: void attributesAccept(proguard.classfile.ProgramClass,proguard.classfile.attribute.visitor.AttributeVisitor)>($r1, r0);

        virtualinvoke $r2.<proguard.classfile.ProgramMethod: void referencedClassesAccept(proguard.classfile.visitor.ClassVisitor)>(r0);

        return;
    }

    protected boolean shouldBeMarkedAsPossiblyUsed(proguard.classfile.VisitorAccepter)
    {
        proguard.shrink.UsageMarker r0;
        proguard.classfile.VisitorAccepter $r1;
        java.lang.Object $r2, $r3;

        r0 := @this: proguard.shrink.UsageMarker;

        $r1 := @parameter0: proguard.classfile.VisitorAccepter;

        $r2 = interfaceinvoke $r1.<proguard.classfile.VisitorAccepter: java.lang.Object getVisitorInfo()>();

        $r3 = <proguard.shrink.UsageMarker: java.lang.Object USED>;

        if $r2 == $r3 goto label1;

        $r2 = interfaceinvoke $r1.<proguard.classfile.VisitorAccepter: java.lang.Object getVisitorInfo()>();

        $r3 = <proguard.shrink.UsageMarker: java.lang.Object POSSIBLY_USED>;

        if $r2 == $r3 goto label1;

        return 1;

     label1:
        return 0;
    }

    protected boolean shouldBeMarkedAsUsed(proguard.classfile.VisitorAccepter)
    {
        proguard.shrink.UsageMarker r0;
        proguard.classfile.VisitorAccepter $r1;
        java.lang.Object $r2, $r3;

        r0 := @this: proguard.shrink.UsageMarker;

        $r1 := @parameter0: proguard.classfile.VisitorAccepter;

        $r3 = interfaceinvoke $r1.<proguard.classfile.VisitorAccepter: java.lang.Object getVisitorInfo()>();

        $r2 = <proguard.shrink.UsageMarker: java.lang.Object USED>;

        if $r3 == $r2 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void visitAnnotationDefaultAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.'annotation'.AnnotationDefaultAttribute)
    {
        proguard.shrink.UsageMarker r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.'annotation'.AnnotationDefaultAttribute $r3;

        r0 := @this: proguard.shrink.UsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.AnnotationDefaultAttribute;

        return;
    }

    public void visitAnyAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.'annotation'.AnnotationsAttribute)
    {
        proguard.classfile.attribute.'annotation'.AnnotationsAttribute $r2;
        proguard.shrink.UsageMarker r0;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.shrink.UsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.AnnotationsAttribute;

        return;
    }

    public void visitAnyInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.Instruction)
    {
        proguard.shrink.UsageMarker r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.instruction.Instruction $r4;
        int $i0;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.shrink.UsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.Instruction;

        return;
    }

    public void visitAnyParameterAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute)
    {
        proguard.shrink.UsageMarker r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute $r3;

        r0 := @this: proguard.shrink.UsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute;

        return;
    }

    public void visitAnyRefConstant(proguard.classfile.Clazz, proguard.classfile.constant.RefConstant)
    {
        proguard.shrink.UsageMarker r0;
        proguard.classfile.Clazz $r1;
        int $i0;
        proguard.classfile.constant.RefConstant $r2;
        boolean $z0;

        r0 := @this: proguard.shrink.UsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.RefConstant;

        $z0 = virtualinvoke r0.<proguard.shrink.UsageMarker: boolean shouldBeMarkedAsUsed(proguard.classfile.VisitorAccepter)>($r2);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<proguard.shrink.UsageMarker: void markAsUsed(proguard.classfile.VisitorAccepter)>($r2);

        $i0 = $r2.<proguard.classfile.constant.RefConstant: int u2classIndex>;

        specialinvoke r0.<proguard.shrink.UsageMarker: void markConstant(proguard.classfile.Clazz,int)>($r1, $i0);

        $i0 = $r2.<proguard.classfile.constant.RefConstant: int u2nameAndTypeIndex>;

        specialinvoke r0.<proguard.shrink.UsageMarker: void markConstant(proguard.classfile.Clazz,int)>($r1, $i0);

        virtualinvoke $r2.<proguard.classfile.constant.RefConstant: void referencedClassAccept(proguard.classfile.visitor.ClassVisitor)>(r0);

        virtualinvoke $r2.<proguard.classfile.constant.RefConstant: void referencedMemberAccept(proguard.classfile.visitor.MemberVisitor)>(r0);

     label1:
        return;
    }

    public void visitAnyStackMapFrame(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.attribute.preverification.StackMapFrame)
    {
        proguard.shrink.UsageMarker r0;
        proguard.classfile.attribute.preverification.StackMapFrame $r4;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.shrink.UsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.attribute.preverification.StackMapFrame;

        return;
    }

    public void visitAnyVerificationType(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.attribute.preverification.VerificationType)
    {
        proguard.shrink.UsageMarker r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.preverification.VerificationType $r4;

        r0 := @this: proguard.shrink.UsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.attribute.preverification.VerificationType;

        return;
    }

    public void visitClassConstant(proguard.classfile.Clazz, proguard.classfile.constant.ClassConstant)
    {
        proguard.shrink.UsageMarker r0;
        proguard.classfile.constant.ClassConstant $r2;
        proguard.classfile.Clazz $r1;
        int $i0;
        boolean $z0;

        r0 := @this: proguard.shrink.UsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.ClassConstant;

        $z0 = virtualinvoke r0.<proguard.shrink.UsageMarker: boolean shouldBeMarkedAsUsed(proguard.classfile.VisitorAccepter)>($r2);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<proguard.shrink.UsageMarker: void markAsUsed(proguard.classfile.VisitorAccepter)>($r2);

        $i0 = $r2.<proguard.classfile.constant.ClassConstant: int u2nameIndex>;

        specialinvoke r0.<proguard.shrink.UsageMarker: void markConstant(proguard.classfile.Clazz,int)>($r1, $i0);

        virtualinvoke $r2.<proguard.classfile.constant.ClassConstant: void referencedClassAccept(proguard.classfile.visitor.ClassVisitor)>(r0);

     label1:
        return;
    }

    public void visitCodeAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute)
    {
        proguard.shrink.UsageMarker r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.shrink.UsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        virtualinvoke r0.<proguard.shrink.UsageMarker: void markAsUsed(proguard.classfile.VisitorAccepter)>($r3);

        $i0 = $r3.<proguard.classfile.attribute.CodeAttribute: int u2attributeNameIndex>;

        specialinvoke r0.<proguard.shrink.UsageMarker: void markConstant(proguard.classfile.Clazz,int)>($r1, $i0);

        virtualinvoke $r3.<proguard.classfile.attribute.CodeAttribute: void instructionsAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.instruction.visitor.InstructionVisitor)>($r1, $r2, r0);

        virtualinvoke $r3.<proguard.classfile.attribute.CodeAttribute: void exceptionsAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.visitor.ExceptionInfoVisitor)>($r1, $r2, r0);

        virtualinvoke $r3.<proguard.classfile.attribute.CodeAttribute: void attributesAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.visitor.AttributeVisitor)>($r1, $r2, r0);

        return;
    }

    public void visitConstantInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.ConstantInstruction)
    {
        proguard.shrink.UsageMarker r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.instruction.ConstantInstruction $r4;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.shrink.UsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.ConstantInstruction;

        $i0 = $r4.<proguard.classfile.instruction.ConstantInstruction: int constantIndex>;

        specialinvoke r0.<proguard.shrink.UsageMarker: void markConstant(proguard.classfile.Clazz,int)>($r1, $i0);

        return;
    }

    public void visitConstantValueAttribute(proguard.classfile.Clazz, proguard.classfile.Field, proguard.classfile.attribute.ConstantValueAttribute)
    {
        proguard.shrink.UsageMarker r0;
        proguard.classfile.Clazz $r1;
        int $i0;
        proguard.classfile.Field $r2;
        proguard.classfile.attribute.ConstantValueAttribute $r3;

        r0 := @this: proguard.shrink.UsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Field;

        $r3 := @parameter2: proguard.classfile.attribute.ConstantValueAttribute;

        virtualinvoke r0.<proguard.shrink.UsageMarker: void markAsUsed(proguard.classfile.VisitorAccepter)>($r3);

        $i0 = $r3.<proguard.classfile.attribute.ConstantValueAttribute: int u2attributeNameIndex>;

        specialinvoke r0.<proguard.shrink.UsageMarker: void markConstant(proguard.classfile.Clazz,int)>($r1, $i0);

        $i0 = $r3.<proguard.classfile.attribute.ConstantValueAttribute: int u2constantValueIndex>;

        specialinvoke r0.<proguard.shrink.UsageMarker: void markConstant(proguard.classfile.Clazz,int)>($r1, $i0);

        return;
    }

    public void visitDeprecatedAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.DeprecatedAttribute)
    {
        proguard.shrink.UsageMarker r0;
        proguard.classfile.Clazz $r1;
        int $i0;
        proguard.classfile.attribute.DeprecatedAttribute $r2;

        r0 := @this: proguard.shrink.UsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.DeprecatedAttribute;

        virtualinvoke r0.<proguard.shrink.UsageMarker: void markAsUsed(proguard.classfile.VisitorAccepter)>($r2);

        $i0 = $r2.<proguard.classfile.attribute.DeprecatedAttribute: int u2attributeNameIndex>;

        specialinvoke r0.<proguard.shrink.UsageMarker: void markConstant(proguard.classfile.Clazz,int)>($r1, $i0);

        return;
    }

    public void visitDoubleConstant(proguard.classfile.Clazz, proguard.classfile.constant.DoubleConstant)
    {
        proguard.shrink.UsageMarker r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.constant.DoubleConstant $r2;
        boolean $z0;

        r0 := @this: proguard.shrink.UsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.DoubleConstant;

        $z0 = virtualinvoke r0.<proguard.shrink.UsageMarker: boolean shouldBeMarkedAsUsed(proguard.classfile.VisitorAccepter)>($r2);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<proguard.shrink.UsageMarker: void markAsUsed(proguard.classfile.VisitorAccepter)>($r2);

     label1:
        return;
    }

    public void visitEnclosingMethodAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.EnclosingMethodAttribute)
    {
        proguard.classfile.attribute.EnclosingMethodAttribute $r2;
        proguard.shrink.UsageMarker r0;
        proguard.classfile.Clazz $r1;
        int $i0;

        r0 := @this: proguard.shrink.UsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.EnclosingMethodAttribute;

        virtualinvoke r0.<proguard.shrink.UsageMarker: void markAsUsed(proguard.classfile.VisitorAccepter)>($r2);

        $i0 = $r2.<proguard.classfile.attribute.EnclosingMethodAttribute: int u2attributeNameIndex>;

        specialinvoke r0.<proguard.shrink.UsageMarker: void markConstant(proguard.classfile.Clazz,int)>($r1, $i0);

        $i0 = $r2.<proguard.classfile.attribute.EnclosingMethodAttribute: int u2classIndex>;

        specialinvoke r0.<proguard.shrink.UsageMarker: void markConstant(proguard.classfile.Clazz,int)>($r1, $i0);

        $i0 = $r2.<proguard.classfile.attribute.EnclosingMethodAttribute: int u2nameAndTypeIndex>;

        if $i0 == 0 goto label1;

        $i0 = $r2.<proguard.classfile.attribute.EnclosingMethodAttribute: int u2nameAndTypeIndex>;

        specialinvoke r0.<proguard.shrink.UsageMarker: void markConstant(proguard.classfile.Clazz,int)>($r1, $i0);

     label1:
        return;
    }

    public void visitExceptionInfo(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.ExceptionInfo)
    {
        proguard.shrink.UsageMarker r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.ExceptionInfo $r4;

        r0 := @this: proguard.shrink.UsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.ExceptionInfo;

        virtualinvoke r0.<proguard.shrink.UsageMarker: void markAsUsed(proguard.classfile.VisitorAccepter)>($r4);

        $i0 = $r4.<proguard.classfile.attribute.ExceptionInfo: int u2catchType>;

        if $i0 == 0 goto label1;

        $i0 = $r4.<proguard.classfile.attribute.ExceptionInfo: int u2catchType>;

        specialinvoke r0.<proguard.shrink.UsageMarker: void markConstant(proguard.classfile.Clazz,int)>($r1, $i0);

     label1:
        return;
    }

    public void visitExceptionsAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.ExceptionsAttribute)
    {
        proguard.shrink.UsageMarker r0;
        proguard.classfile.Clazz $r3;
        proguard.classfile.attribute.ExceptionsAttribute $r2;
        int $i0;
        proguard.classfile.Method $r1;
        proguard.classfile.ProgramClass $r4;

        r0 := @this: proguard.shrink.UsageMarker;

        $r3 := @parameter0: proguard.classfile.Clazz;

        $r1 := @parameter1: proguard.classfile.Method;

        $r2 := @parameter2: proguard.classfile.attribute.ExceptionsAttribute;

        virtualinvoke r0.<proguard.shrink.UsageMarker: void markAsUsed(proguard.classfile.VisitorAccepter)>($r2);

        $i0 = $r2.<proguard.classfile.attribute.ExceptionsAttribute: int u2attributeNameIndex>;

        specialinvoke r0.<proguard.shrink.UsageMarker: void markConstant(proguard.classfile.Clazz,int)>($r3, $i0);

        $r4 = (proguard.classfile.ProgramClass) $r3;

        virtualinvoke $r2.<proguard.classfile.attribute.ExceptionsAttribute: void exceptionEntriesAccept(proguard.classfile.ProgramClass,proguard.classfile.constant.visitor.ConstantVisitor)>($r4, r0);

        return;
    }

    public void visitFloatConstant(proguard.classfile.Clazz, proguard.classfile.constant.FloatConstant)
    {
        proguard.shrink.UsageMarker r0;
        proguard.classfile.constant.FloatConstant $r2;
        proguard.classfile.Clazz $r1;
        boolean $z0;

        r0 := @this: proguard.shrink.UsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.FloatConstant;

        $z0 = virtualinvoke r0.<proguard.shrink.UsageMarker: boolean shouldBeMarkedAsUsed(proguard.classfile.VisitorAccepter)>($r2);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<proguard.shrink.UsageMarker: void markAsUsed(proguard.classfile.VisitorAccepter)>($r2);

     label1:
        return;
    }

    public void visitFullFrame(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.attribute.preverification.FullFrame)
    {
        proguard.shrink.UsageMarker r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.attribute.preverification.FullFrame $r4;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.shrink.UsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.attribute.preverification.FullFrame;

        virtualinvoke $r4.<proguard.classfile.attribute.preverification.FullFrame: void variablesAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor)>($r1, $r2, $r3, $i0, r0);

        virtualinvoke $r4.<proguard.classfile.attribute.preverification.FullFrame: void stackAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor)>($r1, $r2, $r3, $i0, r0);

        return;
    }

    public void visitInnerClassesAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.InnerClassesAttribute)
    {
        proguard.classfile.attribute.InnerClassesAttribute $r2;
        proguard.shrink.UsageMarker r0;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.shrink.UsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.InnerClassesAttribute;

        virtualinvoke $r2.<proguard.classfile.attribute.InnerClassesAttribute: void innerClassEntriesAccept(proguard.classfile.Clazz,proguard.classfile.attribute.visitor.InnerClassesInfoVisitor)>($r1, r0);

        return;
    }

    public void visitInnerClassesInfo(proguard.classfile.Clazz, proguard.classfile.attribute.InnerClassesInfo)
    {
        proguard.shrink.UsageMarker r0;
        proguard.classfile.Clazz $r1;
        int $i0;
        java.lang.String $r3, $r4;
        proguard.classfile.attribute.InnerClassesInfo $r2;
        boolean $z0;

        r0 := @this: proguard.shrink.UsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.InnerClassesInfo;

        $i0 = $r2.<proguard.classfile.attribute.InnerClassesInfo: int u2innerClassIndex>;

        if $i0 == 0 goto label1;

        $r3 = interfaceinvoke $r1.<proguard.classfile.Clazz: java.lang.String getName()>();

        $i0 = $r2.<proguard.classfile.attribute.InnerClassesInfo: int u2innerClassIndex>;

        $r4 = interfaceinvoke $r1.<proguard.classfile.Clazz: java.lang.String getClassName(int)>($i0);

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<proguard.shrink.UsageMarker: void markAsUsed(proguard.classfile.VisitorAccepter)>($r2);

        virtualinvoke $r2.<proguard.classfile.attribute.InnerClassesInfo: void innerClassConstantAccept(proguard.classfile.Clazz,proguard.classfile.constant.visitor.ConstantVisitor)>($r1, r0);

        virtualinvoke $r2.<proguard.classfile.attribute.InnerClassesInfo: void outerClassConstantAccept(proguard.classfile.Clazz,proguard.classfile.constant.visitor.ConstantVisitor)>($r1, r0);

        virtualinvoke $r2.<proguard.classfile.attribute.InnerClassesInfo: void innerNameConstantAccept(proguard.classfile.Clazz,proguard.classfile.constant.visitor.ConstantVisitor)>($r1, r0);

     label1:
        return;
    }

    public void visitIntegerConstant(proguard.classfile.Clazz, proguard.classfile.constant.IntegerConstant)
    {
        proguard.shrink.UsageMarker r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.constant.IntegerConstant $r2;
        boolean $z0;

        r0 := @this: proguard.shrink.UsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.IntegerConstant;

        $z0 = virtualinvoke r0.<proguard.shrink.UsageMarker: boolean shouldBeMarkedAsUsed(proguard.classfile.VisitorAccepter)>($r2);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<proguard.shrink.UsageMarker: void markAsUsed(proguard.classfile.VisitorAccepter)>($r2);

     label1:
        return;
    }

    public void visitLibraryClass(proguard.classfile.LibraryClass)
    {
        proguard.shrink.UsageMarker r0;
        proguard.classfile.LibraryClass $r1;
        proguard.classfile.Clazz[] $r3;
        proguard.classfile.Clazz $r2;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: proguard.shrink.UsageMarker;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        $z0 = virtualinvoke r0.<proguard.shrink.UsageMarker: boolean shouldBeMarkedAsUsed(proguard.classfile.VisitorAccepter)>($r1);

        if $z0 == 0 goto label5;

        virtualinvoke r0.<proguard.shrink.UsageMarker: void markAsUsed(proguard.classfile.VisitorAccepter)>($r1);

        $r2 = $r1.<proguard.classfile.LibraryClass: proguard.classfile.Clazz superClass>;

        if $r2 == null goto label1;

        interfaceinvoke $r2.<proguard.classfile.Clazz: void accept(proguard.classfile.visitor.ClassVisitor)>(r0);

     label1:
        $r3 = $r1.<proguard.classfile.LibraryClass: proguard.classfile.Clazz[] interfaceClasses>;

        if $r3 == null goto label4;

        $i0 = 0;

     label2:
        $i1 = lengthof $r3;

        if $i0 >= $i1 goto label4;

        $r2 = $r3[$i0];

        if $r2 == null goto label3;

        $r2 = $r3[$i0];

        interfaceinvoke $r2.<proguard.classfile.Clazz: void accept(proguard.classfile.visitor.ClassVisitor)>(r0);

     label3:
        $i0 = $i0 + 1;

        goto label2;

     label4:
        virtualinvoke $r1.<proguard.classfile.LibraryClass: void methodsAccept(proguard.classfile.visitor.MemberVisitor)>(r0);

     label5:
        return;
    }

    public void visitLibraryField(proguard.classfile.LibraryClass, proguard.classfile.LibraryField)
    {
        proguard.shrink.UsageMarker r0;
        proguard.classfile.LibraryClass $r1;
        proguard.classfile.LibraryField $r2;

        r0 := @this: proguard.shrink.UsageMarker;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        $r2 := @parameter1: proguard.classfile.LibraryField;

        return;
    }

    public void visitLibraryMethod(proguard.classfile.LibraryClass, proguard.classfile.LibraryMethod)
    {
        proguard.shrink.UsageMarker r0;
        proguard.classfile.LibraryClass $r1;
        proguard.classfile.LibraryMethod $r2;
        boolean $z0;

        r0 := @this: proguard.shrink.UsageMarker;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        $r2 := @parameter1: proguard.classfile.LibraryMethod;

        $z0 = virtualinvoke r0.<proguard.shrink.UsageMarker: boolean shouldBeMarkedAsUsed(proguard.classfile.VisitorAccepter)>($r2);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<proguard.shrink.UsageMarker: void markAsUsed(proguard.classfile.VisitorAccepter)>($r2);

        virtualinvoke r0.<proguard.shrink.UsageMarker: void markMethodHierarchy(proguard.classfile.Clazz,proguard.classfile.Method)>($r1, $r2);

     label1:
        return;
    }

    public void visitLineNumberTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LineNumberTableAttribute)
    {
        proguard.shrink.UsageMarker r0;
        proguard.classfile.attribute.LineNumberTableAttribute $r4;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.shrink.UsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.LineNumberTableAttribute;

        virtualinvoke r0.<proguard.shrink.UsageMarker: void markAsUsed(proguard.classfile.VisitorAccepter)>($r4);

        $i0 = $r4.<proguard.classfile.attribute.LineNumberTableAttribute: int u2attributeNameIndex>;

        specialinvoke r0.<proguard.shrink.UsageMarker: void markConstant(proguard.classfile.Clazz,int)>($r1, $i0);

        return;
    }

    public void visitLocalVariableInfo(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LocalVariableInfo)
    {
        proguard.shrink.UsageMarker r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.attribute.LocalVariableInfo $r4;
        int $i0;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.shrink.UsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.LocalVariableInfo;

        $i0 = $r4.<proguard.classfile.attribute.LocalVariableInfo: int u2nameIndex>;

        specialinvoke r0.<proguard.shrink.UsageMarker: void markConstant(proguard.classfile.Clazz,int)>($r1, $i0);

        $i0 = $r4.<proguard.classfile.attribute.LocalVariableInfo: int u2descriptorIndex>;

        specialinvoke r0.<proguard.shrink.UsageMarker: void markConstant(proguard.classfile.Clazz,int)>($r1, $i0);

        return;
    }

    public void visitLocalVariableTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LocalVariableTableAttribute)
    {
        proguard.shrink.UsageMarker r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.LocalVariableTableAttribute $r4;

        r0 := @this: proguard.shrink.UsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.LocalVariableTableAttribute;

        virtualinvoke r0.<proguard.shrink.UsageMarker: void markAsUsed(proguard.classfile.VisitorAccepter)>($r4);

        $i0 = $r4.<proguard.classfile.attribute.LocalVariableTableAttribute: int u2attributeNameIndex>;

        specialinvoke r0.<proguard.shrink.UsageMarker: void markConstant(proguard.classfile.Clazz,int)>($r1, $i0);

        virtualinvoke $r4.<proguard.classfile.attribute.LocalVariableTableAttribute: void localVariablesAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.visitor.LocalVariableInfoVisitor)>($r1, $r2, $r3, r0);

        return;
    }

    public void visitLocalVariableTypeInfo(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LocalVariableTypeInfo)
    {
        proguard.shrink.UsageMarker r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.LocalVariableTypeInfo $r4;

        r0 := @this: proguard.shrink.UsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.LocalVariableTypeInfo;

        $i0 = $r4.<proguard.classfile.attribute.LocalVariableTypeInfo: int u2nameIndex>;

        specialinvoke r0.<proguard.shrink.UsageMarker: void markConstant(proguard.classfile.Clazz,int)>($r1, $i0);

        $i0 = $r4.<proguard.classfile.attribute.LocalVariableTypeInfo: int u2signatureIndex>;

        specialinvoke r0.<proguard.shrink.UsageMarker: void markConstant(proguard.classfile.Clazz,int)>($r1, $i0);

        return;
    }

    public void visitLocalVariableTypeTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LocalVariableTypeTableAttribute)
    {
        proguard.shrink.UsageMarker r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.LocalVariableTypeTableAttribute $r4;

        r0 := @this: proguard.shrink.UsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.LocalVariableTypeTableAttribute;

        virtualinvoke r0.<proguard.shrink.UsageMarker: void markAsUsed(proguard.classfile.VisitorAccepter)>($r4);

        $i0 = $r4.<proguard.classfile.attribute.LocalVariableTypeTableAttribute: int u2attributeNameIndex>;

        specialinvoke r0.<proguard.shrink.UsageMarker: void markConstant(proguard.classfile.Clazz,int)>($r1, $i0);

        virtualinvoke $r4.<proguard.classfile.attribute.LocalVariableTypeTableAttribute: void localVariablesAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.visitor.LocalVariableTypeInfoVisitor)>($r1, $r2, $r3, r0);

        return;
    }

    public void visitLongConstant(proguard.classfile.Clazz, proguard.classfile.constant.LongConstant)
    {
        proguard.shrink.UsageMarker r0;
        proguard.classfile.constant.LongConstant $r2;
        proguard.classfile.Clazz $r1;
        boolean $z0;

        r0 := @this: proguard.shrink.UsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.LongConstant;

        $z0 = virtualinvoke r0.<proguard.shrink.UsageMarker: boolean shouldBeMarkedAsUsed(proguard.classfile.VisitorAccepter)>($r2);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<proguard.shrink.UsageMarker: void markAsUsed(proguard.classfile.VisitorAccepter)>($r2);

     label1:
        return;
    }

    public void visitMoreZeroFrame(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.attribute.preverification.MoreZeroFrame)
    {
        proguard.shrink.UsageMarker r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.preverification.MoreZeroFrame $r4;

        r0 := @this: proguard.shrink.UsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.attribute.preverification.MoreZeroFrame;

        virtualinvoke $r4.<proguard.classfile.attribute.preverification.MoreZeroFrame: void additionalVariablesAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor)>($r1, $r2, $r3, $i0, r0);

        return;
    }

    public void visitNameAndTypeConstant(proguard.classfile.Clazz, proguard.classfile.constant.NameAndTypeConstant)
    {
        proguard.shrink.UsageMarker r0;
        proguard.classfile.Clazz $r1;
        int $i0;
        proguard.classfile.constant.NameAndTypeConstant $r2;
        boolean $z0;

        r0 := @this: proguard.shrink.UsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.NameAndTypeConstant;

        $z0 = virtualinvoke r0.<proguard.shrink.UsageMarker: boolean shouldBeMarkedAsUsed(proguard.classfile.VisitorAccepter)>($r2);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<proguard.shrink.UsageMarker: void markAsUsed(proguard.classfile.VisitorAccepter)>($r2);

        $i0 = $r2.<proguard.classfile.constant.NameAndTypeConstant: int u2nameIndex>;

        specialinvoke r0.<proguard.shrink.UsageMarker: void markConstant(proguard.classfile.Clazz,int)>($r1, $i0);

        $i0 = $r2.<proguard.classfile.constant.NameAndTypeConstant: int u2descriptorIndex>;

        specialinvoke r0.<proguard.shrink.UsageMarker: void markConstant(proguard.classfile.Clazz,int)>($r1, $i0);

     label1:
        return;
    }

    public void visitObjectType(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.attribute.preverification.ObjectType)
    {
        proguard.shrink.UsageMarker r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.preverification.ObjectType $r4;

        r0 := @this: proguard.shrink.UsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.attribute.preverification.ObjectType;

        $i0 = $r4.<proguard.classfile.attribute.preverification.ObjectType: int u2classIndex>;

        specialinvoke r0.<proguard.shrink.UsageMarker: void markConstant(proguard.classfile.Clazz,int)>($r1, $i0);

        return;
    }

    public void visitProgramClass(proguard.classfile.ProgramClass)
    {
        proguard.shrink.UsageMarker r0;
        proguard.classfile.ProgramClass $r1;
        boolean $z0;

        r0 := @this: proguard.shrink.UsageMarker;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $z0 = virtualinvoke r0.<proguard.shrink.UsageMarker: boolean shouldBeMarkedAsUsed(proguard.classfile.VisitorAccepter)>($r1);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<proguard.shrink.UsageMarker: void markAsUsed(proguard.classfile.VisitorAccepter)>($r1);

        virtualinvoke r0.<proguard.shrink.UsageMarker: void markProgramClassBody(proguard.classfile.ProgramClass)>($r1);

     label1:
        return;
    }

    public void visitProgramField(proguard.classfile.ProgramClass, proguard.classfile.ProgramField)
    {
        proguard.shrink.UsageMarker r0;
        proguard.classfile.ProgramField $r2;
        proguard.classfile.ProgramClass $r1;
        boolean $z0;

        r0 := @this: proguard.shrink.UsageMarker;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.ProgramField;

        $z0 = virtualinvoke r0.<proguard.shrink.UsageMarker: boolean shouldBeMarkedAsUsed(proguard.classfile.VisitorAccepter)>($r2);

        if $z0 == 0 goto label2;

        $z0 = virtualinvoke r0.<proguard.shrink.UsageMarker: boolean isUsed(proguard.classfile.VisitorAccepter)>($r1);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<proguard.shrink.UsageMarker: void markAsUsed(proguard.classfile.VisitorAccepter)>($r2);

        virtualinvoke r0.<proguard.shrink.UsageMarker: void markProgramFieldBody(proguard.classfile.ProgramClass,proguard.classfile.ProgramField)>($r1, $r2);

        return;

     label1:
        $z0 = virtualinvoke r0.<proguard.shrink.UsageMarker: boolean shouldBeMarkedAsPossiblyUsed(proguard.classfile.VisitorAccepter)>($r2);

        if $z0 == 0 goto label2;

        virtualinvoke r0.<proguard.shrink.UsageMarker: void markAsPossiblyUsed(proguard.classfile.VisitorAccepter)>($r2);

     label2:
        return;
    }

    public void visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod)
    {
        proguard.shrink.UsageMarker r0;
        proguard.classfile.ProgramMethod $r2;
        proguard.classfile.ProgramClass $r1;
        boolean $z0;

        r0 := @this: proguard.shrink.UsageMarker;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.ProgramMethod;

        $z0 = virtualinvoke r0.<proguard.shrink.UsageMarker: boolean shouldBeMarkedAsUsed(proguard.classfile.VisitorAccepter)>($r2);

        if $z0 == 0 goto label2;

        $z0 = virtualinvoke r0.<proguard.shrink.UsageMarker: boolean isUsed(proguard.classfile.VisitorAccepter)>($r1);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<proguard.shrink.UsageMarker: void markAsUsed(proguard.classfile.VisitorAccepter)>($r2);

        virtualinvoke r0.<proguard.shrink.UsageMarker: void markProgramMethodBody(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod)>($r1, $r2);

        virtualinvoke r0.<proguard.shrink.UsageMarker: void markMethodHierarchy(proguard.classfile.Clazz,proguard.classfile.Method)>($r1, $r2);

        return;

     label1:
        $z0 = virtualinvoke r0.<proguard.shrink.UsageMarker: boolean shouldBeMarkedAsPossiblyUsed(proguard.classfile.VisitorAccepter)>($r2);

        if $z0 == 0 goto label2;

        virtualinvoke r0.<proguard.shrink.UsageMarker: void markAsPossiblyUsed(proguard.classfile.VisitorAccepter)>($r2);

        virtualinvoke r0.<proguard.shrink.UsageMarker: void markMethodHierarchy(proguard.classfile.Clazz,proguard.classfile.Method)>($r1, $r2);

     label2:
        return;
    }

    public void visitSameOneFrame(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.attribute.preverification.SameOneFrame)
    {
        proguard.shrink.UsageMarker r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.attribute.preverification.SameOneFrame $r4;
        int $i0;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.shrink.UsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.attribute.preverification.SameOneFrame;

        virtualinvoke $r4.<proguard.classfile.attribute.preverification.SameOneFrame: void stackItemAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor)>($r1, $r2, $r3, $i0, r0);

        return;
    }

    public void visitSignatureAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.SignatureAttribute)
    {
        proguard.shrink.UsageMarker r0;
        proguard.classfile.Clazz $r1;
        int $i0;
        proguard.classfile.attribute.SignatureAttribute $r2;

        r0 := @this: proguard.shrink.UsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.SignatureAttribute;

        virtualinvoke r0.<proguard.shrink.UsageMarker: void markAsUsed(proguard.classfile.VisitorAccepter)>($r2);

        $i0 = $r2.<proguard.classfile.attribute.SignatureAttribute: int u2attributeNameIndex>;

        specialinvoke r0.<proguard.shrink.UsageMarker: void markConstant(proguard.classfile.Clazz,int)>($r1, $i0);

        $i0 = $r2.<proguard.classfile.attribute.SignatureAttribute: int u2signatureIndex>;

        specialinvoke r0.<proguard.shrink.UsageMarker: void markConstant(proguard.classfile.Clazz,int)>($r1, $i0);

        return;
    }

    public void visitSourceDirAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.SourceDirAttribute)
    {
        proguard.shrink.UsageMarker r0;
        proguard.classfile.attribute.SourceDirAttribute $r2;
        proguard.classfile.Clazz $r1;
        int $i0;

        r0 := @this: proguard.shrink.UsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.SourceDirAttribute;

        virtualinvoke r0.<proguard.shrink.UsageMarker: void markAsUsed(proguard.classfile.VisitorAccepter)>($r2);

        $i0 = $r2.<proguard.classfile.attribute.SourceDirAttribute: int u2attributeNameIndex>;

        specialinvoke r0.<proguard.shrink.UsageMarker: void markConstant(proguard.classfile.Clazz,int)>($r1, $i0);

        $i0 = $r2.<proguard.classfile.attribute.SourceDirAttribute: int u2sourceDirIndex>;

        specialinvoke r0.<proguard.shrink.UsageMarker: void markConstant(proguard.classfile.Clazz,int)>($r1, $i0);

        return;
    }

    public void visitSourceFileAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.SourceFileAttribute)
    {
        proguard.shrink.UsageMarker r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.SourceFileAttribute $r2;
        int $i0;

        r0 := @this: proguard.shrink.UsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.SourceFileAttribute;

        virtualinvoke r0.<proguard.shrink.UsageMarker: void markAsUsed(proguard.classfile.VisitorAccepter)>($r2);

        $i0 = $r2.<proguard.classfile.attribute.SourceFileAttribute: int u2attributeNameIndex>;

        specialinvoke r0.<proguard.shrink.UsageMarker: void markConstant(proguard.classfile.Clazz,int)>($r1, $i0);

        $i0 = $r2.<proguard.classfile.attribute.SourceFileAttribute: int u2sourceFileIndex>;

        specialinvoke r0.<proguard.shrink.UsageMarker: void markConstant(proguard.classfile.Clazz,int)>($r1, $i0);

        return;
    }

    public void visitStackMapAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.preverification.StackMapAttribute)
    {
        proguard.shrink.UsageMarker r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.attribute.preverification.StackMapAttribute $r4;
        int $i0;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.shrink.UsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.preverification.StackMapAttribute;

        virtualinvoke r0.<proguard.shrink.UsageMarker: void markAsUsed(proguard.classfile.VisitorAccepter)>($r4);

        $i0 = $r4.<proguard.classfile.attribute.preverification.StackMapAttribute: int u2attributeNameIndex>;

        specialinvoke r0.<proguard.shrink.UsageMarker: void markConstant(proguard.classfile.Clazz,int)>($r1, $i0);

        virtualinvoke $r4.<proguard.classfile.attribute.preverification.StackMapAttribute: void stackMapFramesAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.preverification.visitor.StackMapFrameVisitor)>($r1, $r2, $r3, r0);

        return;
    }

    public void visitStackMapTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.preverification.StackMapTableAttribute)
    {
        proguard.shrink.UsageMarker r0;
        proguard.classfile.attribute.preverification.StackMapTableAttribute $r4;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.shrink.UsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.preverification.StackMapTableAttribute;

        virtualinvoke r0.<proguard.shrink.UsageMarker: void markAsUsed(proguard.classfile.VisitorAccepter)>($r4);

        $i0 = $r4.<proguard.classfile.attribute.preverification.StackMapTableAttribute: int u2attributeNameIndex>;

        specialinvoke r0.<proguard.shrink.UsageMarker: void markConstant(proguard.classfile.Clazz,int)>($r1, $i0);

        virtualinvoke $r4.<proguard.classfile.attribute.preverification.StackMapTableAttribute: void stackMapFramesAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.preverification.visitor.StackMapFrameVisitor)>($r1, $r2, $r3, r0);

        return;
    }

    public void visitStringConstant(proguard.classfile.Clazz, proguard.classfile.constant.StringConstant)
    {
        proguard.shrink.UsageMarker r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.constant.StringConstant $r2;
        int $i0;
        boolean $z0;

        r0 := @this: proguard.shrink.UsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.StringConstant;

        $z0 = virtualinvoke r0.<proguard.shrink.UsageMarker: boolean shouldBeMarkedAsUsed(proguard.classfile.VisitorAccepter)>($r2);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<proguard.shrink.UsageMarker: void markAsUsed(proguard.classfile.VisitorAccepter)>($r2);

        $i0 = $r2.<proguard.classfile.constant.StringConstant: int u2stringIndex>;

        specialinvoke r0.<proguard.shrink.UsageMarker: void markConstant(proguard.classfile.Clazz,int)>($r1, $i0);

        virtualinvoke $r2.<proguard.classfile.constant.StringConstant: void referencedClassAccept(proguard.classfile.visitor.ClassVisitor)>(r0);

        virtualinvoke $r2.<proguard.classfile.constant.StringConstant: void referencedMemberAccept(proguard.classfile.visitor.MemberVisitor)>(r0);

     label1:
        return;
    }

    public void visitSyntheticAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.SyntheticAttribute)
    {
        proguard.shrink.UsageMarker r0;
        proguard.classfile.Clazz $r1;
        int $i0;
        proguard.classfile.attribute.SyntheticAttribute $r2;

        r0 := @this: proguard.shrink.UsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.SyntheticAttribute;

        virtualinvoke r0.<proguard.shrink.UsageMarker: void markAsUsed(proguard.classfile.VisitorAccepter)>($r2);

        $i0 = $r2.<proguard.classfile.attribute.SyntheticAttribute: int u2attributeNameIndex>;

        specialinvoke r0.<proguard.shrink.UsageMarker: void markConstant(proguard.classfile.Clazz,int)>($r1, $i0);

        return;
    }

    public void visitUnknownAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.UnknownAttribute)
    {
        proguard.shrink.UsageMarker r0;
        proguard.classfile.Clazz $r1;
        int $i0;
        proguard.classfile.attribute.UnknownAttribute $r2;

        r0 := @this: proguard.shrink.UsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.UnknownAttribute;

        virtualinvoke r0.<proguard.shrink.UsageMarker: void markAsUsed(proguard.classfile.VisitorAccepter)>($r2);

        $i0 = $r2.<proguard.classfile.attribute.UnknownAttribute: int u2attributeNameIndex>;

        specialinvoke r0.<proguard.shrink.UsageMarker: void markConstant(proguard.classfile.Clazz,int)>($r1, $i0);

        return;
    }

    public void visitUtf8Constant(proguard.classfile.Clazz, proguard.classfile.constant.Utf8Constant)
    {
        proguard.shrink.UsageMarker r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.constant.Utf8Constant $r2;
        boolean $z0;

        r0 := @this: proguard.shrink.UsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.Utf8Constant;

        $z0 = virtualinvoke r0.<proguard.shrink.UsageMarker: boolean shouldBeMarkedAsUsed(proguard.classfile.VisitorAccepter)>($r2);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<proguard.shrink.UsageMarker: void markAsUsed(proguard.classfile.VisitorAccepter)>($r2);

     label1:
        return;
    }
}
