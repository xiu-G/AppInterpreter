public class org.dom4j.datatype.SchemaParser extends java.lang.Object
{
    private static final org.dom4j.QName XSD_ALL;
    private static final org.dom4j.QName XSD_ATTRIBUTE;
    private static final org.dom4j.QName XSD_CHOICE;
    private static final org.dom4j.QName XSD_COMPLEXTYPE;
    private static final org.dom4j.QName XSD_ELEMENT;
    private static final org.dom4j.QName XSD_INCLUDE;
    private static final org.dom4j.Namespace XSD_NAMESPACE;
    private static final org.dom4j.QName XSD_RESTRICTION;
    private static final org.dom4j.QName XSD_SEQUENCE;
    private static final org.dom4j.QName XSD_SIMPLETYPE;
    private java.util.Map dataTypeCache;
    private org.dom4j.datatype.DatatypeDocumentFactory documentFactory;
    private org.dom4j.datatype.NamedTypeResolver namedTypeResolver;
    private org.dom4j.Namespace targetNamespace;

    static void <clinit>()
    {
        org.dom4j.QName $r1;
        org.dom4j.Namespace $r0;

        $r0 = staticinvoke <org.dom4j.Namespace: org.dom4j.Namespace get(java.lang.String,java.lang.String)>("xsd", "http://www.w3.org/2001/XMLSchema");

        <org.dom4j.datatype.SchemaParser: org.dom4j.Namespace XSD_NAMESPACE> = $r0;

        $r0 = <org.dom4j.datatype.SchemaParser: org.dom4j.Namespace XSD_NAMESPACE>;

        $r1 = staticinvoke <org.dom4j.QName: org.dom4j.QName get(java.lang.String,org.dom4j.Namespace)>("element", $r0);

        <org.dom4j.datatype.SchemaParser: org.dom4j.QName XSD_ELEMENT> = $r1;

        $r0 = <org.dom4j.datatype.SchemaParser: org.dom4j.Namespace XSD_NAMESPACE>;

        $r1 = staticinvoke <org.dom4j.QName: org.dom4j.QName get(java.lang.String,org.dom4j.Namespace)>("attribute", $r0);

        <org.dom4j.datatype.SchemaParser: org.dom4j.QName XSD_ATTRIBUTE> = $r1;

        $r0 = <org.dom4j.datatype.SchemaParser: org.dom4j.Namespace XSD_NAMESPACE>;

        $r1 = staticinvoke <org.dom4j.QName: org.dom4j.QName get(java.lang.String,org.dom4j.Namespace)>("simpleType", $r0);

        <org.dom4j.datatype.SchemaParser: org.dom4j.QName XSD_SIMPLETYPE> = $r1;

        $r0 = <org.dom4j.datatype.SchemaParser: org.dom4j.Namespace XSD_NAMESPACE>;

        $r1 = staticinvoke <org.dom4j.QName: org.dom4j.QName get(java.lang.String,org.dom4j.Namespace)>("complexType", $r0);

        <org.dom4j.datatype.SchemaParser: org.dom4j.QName XSD_COMPLEXTYPE> = $r1;

        $r0 = <org.dom4j.datatype.SchemaParser: org.dom4j.Namespace XSD_NAMESPACE>;

        $r1 = staticinvoke <org.dom4j.QName: org.dom4j.QName get(java.lang.String,org.dom4j.Namespace)>("restriction", $r0);

        <org.dom4j.datatype.SchemaParser: org.dom4j.QName XSD_RESTRICTION> = $r1;

        $r0 = <org.dom4j.datatype.SchemaParser: org.dom4j.Namespace XSD_NAMESPACE>;

        $r1 = staticinvoke <org.dom4j.QName: org.dom4j.QName get(java.lang.String,org.dom4j.Namespace)>("sequence", $r0);

        <org.dom4j.datatype.SchemaParser: org.dom4j.QName XSD_SEQUENCE> = $r1;

        $r0 = <org.dom4j.datatype.SchemaParser: org.dom4j.Namespace XSD_NAMESPACE>;

        $r1 = staticinvoke <org.dom4j.QName: org.dom4j.QName get(java.lang.String,org.dom4j.Namespace)>("choice", $r0);

        <org.dom4j.datatype.SchemaParser: org.dom4j.QName XSD_CHOICE> = $r1;

        $r0 = <org.dom4j.datatype.SchemaParser: org.dom4j.Namespace XSD_NAMESPACE>;

        $r1 = staticinvoke <org.dom4j.QName: org.dom4j.QName get(java.lang.String,org.dom4j.Namespace)>("all", $r0);

        <org.dom4j.datatype.SchemaParser: org.dom4j.QName XSD_ALL> = $r1;

        $r0 = <org.dom4j.datatype.SchemaParser: org.dom4j.Namespace XSD_NAMESPACE>;

        $r1 = staticinvoke <org.dom4j.QName: org.dom4j.QName get(java.lang.String,org.dom4j.Namespace)>("include", $r0);

        <org.dom4j.datatype.SchemaParser: org.dom4j.QName XSD_INCLUDE> = $r1;

        return;
    }

    public void <init>()
    {
        org.dom4j.datatype.DatatypeDocumentFactory $r1;
        org.dom4j.datatype.SchemaParser r0;

        r0 := @this: org.dom4j.datatype.SchemaParser;

        $r1 = <org.dom4j.datatype.DatatypeDocumentFactory: org.dom4j.datatype.DatatypeDocumentFactory singleton>;

        specialinvoke r0.<org.dom4j.datatype.SchemaParser: void <init>(org.dom4j.datatype.DatatypeDocumentFactory)>($r1);

        return;
    }

    public void <init>(org.dom4j.datatype.DatatypeDocumentFactory)
    {
        org.dom4j.datatype.DatatypeDocumentFactory $r1;
        org.dom4j.datatype.NamedTypeResolver $r3;
        org.dom4j.datatype.SchemaParser r0;
        java.util.HashMap $r2;

        r0 := @this: org.dom4j.datatype.SchemaParser;

        $r1 := @parameter0: org.dom4j.datatype.DatatypeDocumentFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.dom4j.datatype.SchemaParser: java.util.Map dataTypeCache> = $r2;

        r0.<org.dom4j.datatype.SchemaParser: org.dom4j.datatype.DatatypeDocumentFactory documentFactory> = $r1;

        $r3 = new org.dom4j.datatype.NamedTypeResolver;

        specialinvoke $r3.<org.dom4j.datatype.NamedTypeResolver: void <init>(org.dom4j.DocumentFactory)>($r1);

        r0.<org.dom4j.datatype.SchemaParser: org.dom4j.datatype.NamedTypeResolver namedTypeResolver> = $r3;

        return;
    }

    private com.sun.msv.datatype.xsd.XSDatatype dataTypeForXsdAttribute(org.dom4j.Element)
    {
        org.dom4j.datatype.SchemaParser r0;
        java.lang.StringBuffer $r6;
        com.sun.msv.datatype.xsd.XSDatatype $r3;
        org.dom4j.Element $r1, $r5;
        org.dom4j.QName $r4;
        java.lang.String $r2;
        org.dom4j.datatype.InvalidSchemaException $r7;

        r0 := @this: org.dom4j.datatype.SchemaParser;

        $r1 := @parameter0: org.dom4j.Element;

        $r2 = interfaceinvoke $r1.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("type");

        if $r2 == null goto label1;

        $r3 = specialinvoke r0.<org.dom4j.datatype.SchemaParser: com.sun.msv.datatype.xsd.XSDatatype getTypeByName(java.lang.String)>($r2);

        return $r3;

     label1:
        $r4 = <org.dom4j.datatype.SchemaParser: org.dom4j.QName XSD_SIMPLETYPE>;

        $r5 = interfaceinvoke $r1.<org.dom4j.Element: org.dom4j.Element element(org.dom4j.QName)>($r4);

        if $r5 != null goto label2;

        $r2 = interfaceinvoke $r1.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("name");

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The attribute: ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" has no type attribute and does not contain a ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("<simpleType/> element");

        $r2 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        $r7 = new org.dom4j.datatype.InvalidSchemaException;

        specialinvoke $r7.<org.dom4j.datatype.InvalidSchemaException: void <init>(java.lang.String)>($r2);

        throw $r7;

     label2:
        $r3 = specialinvoke r0.<org.dom4j.datatype.SchemaParser: com.sun.msv.datatype.xsd.XSDatatype loadXSDatatypeFromSimpleType(org.dom4j.Element)>($r5);

        return $r3;
    }

    private com.sun.msv.datatype.xsd.XSDatatype deriveSimpleType(com.sun.msv.datatype.xsd.XSDatatype, org.dom4j.Element)
    {
        java.lang.Throwable r3;
        com.sun.msv.datatype.xsd.TypeIncubator r4, $r12;
        com.sun.msv.datatype.xsd.XSDatatypeImpl $r11;
        org.relaxng.datatype.DatatypeException $r14;
        java.lang.StringBuffer $r10, $r13;
        java.lang.String $r8, $r9;
        boolean $z0;
        java.util.Iterator $r5;
        org.dom4j.datatype.SchemaParser r0;
        com.sun.msv.datatype.xsd.XSDatatype $r1;
        org.dom4j.Element $r2, r7;
        java.lang.Object $r6;

        r0 := @this: org.dom4j.datatype.SchemaParser;

        $r1 := @parameter0: com.sun.msv.datatype.xsd.XSDatatype;

        $r2 := @parameter1: org.dom4j.Element;

        $r12 = new com.sun.msv.datatype.xsd.TypeIncubator;

        r4 = $r12;

        specialinvoke $r12.<com.sun.msv.datatype.xsd.TypeIncubator: void <init>(com.sun.msv.datatype.xsd.XSDatatype)>($r1);

     label01:
        $r5 = interfaceinvoke $r2.<org.dom4j.Element: java.util.Iterator elementIterator()>();

     label02:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

     label03:
        if $z0 == 0 goto label09;

     label04:
        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

     label05:
        r7 = (org.dom4j.Element) $r6;

     label06:
        $r8 = interfaceinvoke r7.<org.dom4j.Element: java.lang.String getName()>();

        $r9 = interfaceinvoke r7.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("value");

        $z0 = staticinvoke <org.dom4j.util.AttributeHelper: boolean booleanValue(org.dom4j.Element,java.lang.String)>(r7, "fixed");

        virtualinvoke r4.<com.sun.msv.datatype.xsd.TypeIncubator: void addFacet(java.lang.String,java.lang.String,boolean,org.relaxng.datatype.ValidationContext)>($r8, $r9, $z0, null);

     label07:
        goto label02;

     label08:
        r3 := @caughtexception;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid restriction: ");

        $r14 = (org.relaxng.datatype.DatatypeException) r3;

        $r8 = virtualinvoke $r14.<org.relaxng.datatype.DatatypeException: java.lang.String getMessage()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" when trying to build restriction: ");

        $r10 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r2);

        $r8 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke r0.<org.dom4j.datatype.SchemaParser: void onSchemaError(java.lang.String)>($r8);

        return null;

     label09:
        $r11 = virtualinvoke r4.<com.sun.msv.datatype.xsd.TypeIncubator: com.sun.msv.datatype.xsd.XSDatatypeImpl derive(java.lang.String,java.lang.String)>("", null);

     label10:
        $r1 = (com.sun.msv.datatype.xsd.XSDatatype) $r11;

        return $r1;

        catch org.relaxng.datatype.DatatypeException from label01 to label03 with label08;
        catch org.relaxng.datatype.DatatypeException from label04 to label05 with label08;
        catch org.relaxng.datatype.DatatypeException from label06 to label07 with label08;
        catch org.relaxng.datatype.DatatypeException from label09 to label10 with label08;
    }

    private org.dom4j.datatype.DatatypeElementFactory getDatatypeElementFactory(org.dom4j.QName)
    {
        org.dom4j.datatype.DatatypeDocumentFactory $r2;
        org.dom4j.datatype.DatatypeElementFactory $r3;
        org.dom4j.datatype.SchemaParser r0;
        org.dom4j.QName $r1;

        r0 := @this: org.dom4j.datatype.SchemaParser;

        $r1 := @parameter0: org.dom4j.QName;

        $r2 = r0.<org.dom4j.datatype.SchemaParser: org.dom4j.datatype.DatatypeDocumentFactory documentFactory>;

        $r3 = virtualinvoke $r2.<org.dom4j.datatype.DatatypeDocumentFactory: org.dom4j.datatype.DatatypeElementFactory getElementFactory(org.dom4j.QName)>($r1);

        if $r3 != null goto label1;

        $r3 = new org.dom4j.datatype.DatatypeElementFactory;

        specialinvoke $r3.<org.dom4j.datatype.DatatypeElementFactory: void <init>(org.dom4j.QName)>($r1);

        virtualinvoke $r1.<org.dom4j.QName: void setDocumentFactory(org.dom4j.DocumentFactory)>($r3);

     label1:
        return $r3;
    }

    private org.dom4j.QName getQName(java.lang.String)
    {
        org.dom4j.datatype.DatatypeDocumentFactory $r3;
        org.dom4j.Namespace $r2;
        org.dom4j.datatype.SchemaParser r0;
        org.dom4j.QName $r4;
        java.lang.String $r1;

        r0 := @this: org.dom4j.datatype.SchemaParser;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.dom4j.datatype.SchemaParser: org.dom4j.Namespace targetNamespace>;

        if $r2 != null goto label1;

        $r3 = r0.<org.dom4j.datatype.SchemaParser: org.dom4j.datatype.DatatypeDocumentFactory documentFactory>;

        $r4 = virtualinvoke $r3.<org.dom4j.datatype.DatatypeDocumentFactory: org.dom4j.QName createQName(java.lang.String)>($r1);

        return $r4;

     label1:
        $r3 = r0.<org.dom4j.datatype.SchemaParser: org.dom4j.datatype.DatatypeDocumentFactory documentFactory>;

        $r2 = r0.<org.dom4j.datatype.SchemaParser: org.dom4j.Namespace targetNamespace>;

        $r4 = virtualinvoke $r3.<org.dom4j.datatype.DatatypeDocumentFactory: org.dom4j.QName createQName(java.lang.String,org.dom4j.Namespace)>($r1, $r2);

        return $r4;
    }

    private com.sun.msv.datatype.xsd.XSDatatype getTypeByName(java.lang.String)
    {
        java.lang.Throwable $r9, $r10;
        org.dom4j.datatype.SchemaParser r0;
        org.dom4j.datatype.NamedTypeResolver $r8;
        java.util.Map $r2;
        int $i0;
        com.sun.msv.datatype.xsd.XSDatatype r4, $r6;
        java.lang.Object $r3;
        org.dom4j.QName $r7;
        java.lang.String $r1, $r5;

        r0 := @this: org.dom4j.datatype.SchemaParser;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.dom4j.datatype.SchemaParser: java.util.Map dataTypeCache>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r4 = (com.sun.msv.datatype.xsd.XSDatatype) $r3;

        if r4 != null goto label10;

        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(int)>(58);

        if $i0 < 0 goto label03;

        $i0 = $i0 + 1;

        $r5 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i0);

     label01:
        $r6 = staticinvoke <com.sun.msv.datatype.xsd.DatatypeFactory: com.sun.msv.datatype.xsd.XSDatatype getTypeByName(java.lang.String)>($r5);

     label02:
        r4 = $r6;

     label03:
        if r4 != null goto label07;

     label04:
        $r6 = staticinvoke <com.sun.msv.datatype.xsd.DatatypeFactory: com.sun.msv.datatype.xsd.XSDatatype getTypeByName(java.lang.String)>($r1);

     label05:
        r4 = $r6;

     label06:
        if r4 != null goto label07;

        $r7 = specialinvoke r0.<org.dom4j.datatype.SchemaParser: org.dom4j.QName getQName(java.lang.String)>($r1);

        $r8 = r0.<org.dom4j.datatype.SchemaParser: org.dom4j.datatype.NamedTypeResolver namedTypeResolver>;

        $r2 = $r8.<org.dom4j.datatype.NamedTypeResolver: java.util.Map simpleTypeMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7);

        r4 = (com.sun.msv.datatype.xsd.XSDatatype) $r3;

     label07:
        if r4 == null goto label10;

        $r2 = r0.<org.dom4j.datatype.SchemaParser: java.util.Map dataTypeCache>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, r4);

        return r4;

     label08:
        $r9 := @caughtexception;

        goto label03;

     label09:
        $r10 := @caughtexception;

        goto label06;

     label10:
        return r4;

        catch org.relaxng.datatype.DatatypeException from label01 to label02 with label08;
        catch org.relaxng.datatype.DatatypeException from label04 to label05 with label09;
    }

    private void internalBuild(org.dom4j.Document)
    {
        java.lang.Throwable $r15;
        org.dom4j.Document $r1, $r17;
        org.dom4j.io.SAXReader r3;
        org.dom4j.datatype.DatatypeDocumentFactory $r18;
        org.dom4j.datatype.NamedTypeResolver $r19;
        java.lang.StringBuffer $r13;
        java.lang.String $r9, $r14;
        org.dom4j.datatype.InvalidSchemaException $r11;
        org.xml.sax.EntityResolver $r10;
        boolean $z0;
        java.io.PrintStream $r12;
        org.xml.sax.InputSource $r16;
        java.util.Iterator $r6;
        org.dom4j.datatype.SchemaParser r0;
        java.lang.Exception r2;
        org.dom4j.Element $r4, r8;
        org.dom4j.QName $r5;
        java.lang.Object $r7;

        r0 := @this: org.dom4j.datatype.SchemaParser;

        $r1 := @parameter0: org.dom4j.Document;

        entermonitor r0;

     label01:
        $r4 = interfaceinvoke $r1.<org.dom4j.Document: org.dom4j.Element getRootElement()>();

        if $r4 == null goto label24;

        $r5 = <org.dom4j.datatype.SchemaParser: org.dom4j.QName XSD_INCLUDE>;

        $r6 = interfaceinvoke $r4.<org.dom4j.Element: java.util.Iterator elementIterator(org.dom4j.QName)>($r5);

     label02:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label17;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.dom4j.Element) $r7;

        $r9 = interfaceinvoke r8.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("schemaLocation");

        $r10 = interfaceinvoke $r1.<org.dom4j.Document: org.xml.sax.EntityResolver getEntityResolver()>();

     label03:
        if $r10 != null goto label09;

     label04:
        $r11 = new org.dom4j.datatype.InvalidSchemaException;

     label05:
        specialinvoke $r11.<org.dom4j.datatype.InvalidSchemaException: void <init>(java.lang.String)>("No EntityResolver available");

        throw $r11;

     label06:
        r2 := @caughtexception;

     label07:
        $r12 = <java.lang.System: java.io.PrintStream out>;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Failed to load schema: ");

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>($r14);

        $r12 = <java.lang.System: java.io.PrintStream out>;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Caught: ");

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r2);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>($r14);

        virtualinvoke r2.<java.lang.Exception: void printStackTrace()>();

        $r11 = new org.dom4j.datatype.InvalidSchemaException;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Failed to load schema: ");

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r9 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r11.<org.dom4j.datatype.InvalidSchemaException: void <init>(java.lang.String)>($r9);

        throw $r11;

     label08:
        $r15 := @caughtexception;

        exitmonitor r0;

        throw $r15;

     label09:
        $r16 = interfaceinvoke $r10.<org.xml.sax.EntityResolver: org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String)>(null, $r9);

     label10:
        if $r16 != null goto label14;

        $r13 = new java.lang.StringBuffer;

     label11:
        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not resolve the schema URI: ");

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

     label12:
        $r11 = new org.dom4j.datatype.InvalidSchemaException;

     label13:
        specialinvoke $r11.<org.dom4j.datatype.InvalidSchemaException: void <init>(java.lang.String)>($r14);

        throw $r11;

     label14:
        r3 = new org.dom4j.io.SAXReader;

     label15:
        specialinvoke r3.<org.dom4j.io.SAXReader: void <init>()>();

        $r17 = virtualinvoke r3.<org.dom4j.io.SAXReader: org.dom4j.Document read(org.xml.sax.InputSource)>($r16);

        virtualinvoke r0.<org.dom4j.datatype.SchemaParser: void build(org.dom4j.Document)>($r17);

     label16:
        goto label02;

     label17:
        $r5 = <org.dom4j.datatype.SchemaParser: org.dom4j.QName XSD_ELEMENT>;

        $r6 = interfaceinvoke $r4.<org.dom4j.Element: java.util.Iterator elementIterator(org.dom4j.QName)>($r5);

     label18:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label19;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.dom4j.Element) $r7;

        $r18 = r0.<org.dom4j.datatype.SchemaParser: org.dom4j.datatype.DatatypeDocumentFactory documentFactory>;

        specialinvoke r0.<org.dom4j.datatype.SchemaParser: void onDatatypeElement(org.dom4j.Element,org.dom4j.DocumentFactory)>(r8, $r18);

        goto label18;

     label19:
        $r5 = <org.dom4j.datatype.SchemaParser: org.dom4j.QName XSD_SIMPLETYPE>;

        $r6 = interfaceinvoke $r4.<org.dom4j.Element: java.util.Iterator elementIterator(org.dom4j.QName)>($r5);

     label20:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label21;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.dom4j.Element) $r7;

        specialinvoke r0.<org.dom4j.datatype.SchemaParser: void onNamedSchemaSimpleType(org.dom4j.Element)>(r8);

        goto label20;

     label21:
        $r5 = <org.dom4j.datatype.SchemaParser: org.dom4j.QName XSD_COMPLEXTYPE>;

        $r6 = interfaceinvoke $r4.<org.dom4j.Element: java.util.Iterator elementIterator(org.dom4j.QName)>($r5);

     label22:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label23;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.dom4j.Element) $r7;

        specialinvoke r0.<org.dom4j.datatype.SchemaParser: void onNamedSchemaComplexType(org.dom4j.Element)>($r4);

        goto label22;

     label23:
        $r19 = r0.<org.dom4j.datatype.SchemaParser: org.dom4j.datatype.NamedTypeResolver namedTypeResolver>;

        virtualinvoke $r19.<org.dom4j.datatype.NamedTypeResolver: void resolveNamedTypes()>();

     label24:
        exitmonitor r0;

        return;

        catch java.lang.Throwable from label01 to label03 with label08;
        catch java.lang.Exception from label05 to label06 with label06;
        catch java.lang.Throwable from label04 to label06 with label08;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.lang.Exception from label09 to label10 with label06;
        catch java.lang.Exception from label11 to label12 with label06;
        catch java.lang.Exception from label13 to label14 with label06;
        catch java.lang.Exception from label15 to label16 with label06;
        catch java.lang.Throwable from label09 to label16 with label08;
        catch java.lang.Throwable from label17 to label24 with label08;
    }

    private com.sun.msv.datatype.xsd.XSDatatype loadXSDatatypeFromSimpleType(org.dom4j.Element)
    {
        java.lang.StringBuffer $r6;
        org.dom4j.datatype.SchemaParser r0;
        com.sun.msv.datatype.xsd.XSDatatype $r5;
        org.dom4j.Element $r1, $r3;
        org.dom4j.QName $r2;
        java.lang.String $r4;

        r0 := @this: org.dom4j.datatype.SchemaParser;

        $r1 := @parameter0: org.dom4j.Element;

        $r2 = <org.dom4j.datatype.SchemaParser: org.dom4j.QName XSD_RESTRICTION>;

        $r3 = interfaceinvoke $r1.<org.dom4j.Element: org.dom4j.Element element(org.dom4j.QName)>($r2);

        if $r3 == null goto label5;

        $r4 = interfaceinvoke $r3.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("base");

        if $r4 == null goto label3;

        $r5 = specialinvoke r0.<org.dom4j.datatype.SchemaParser: com.sun.msv.datatype.xsd.XSDatatype getTypeByName(java.lang.String)>($r4);

        if $r5 != null goto label2;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid base type: ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" when trying to build restriction: ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r3);

        $r4 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke r0.<org.dom4j.datatype.SchemaParser: void onSchemaError(java.lang.String)>($r4);

     label1:
        return null;

     label2:
        $r5 = specialinvoke r0.<org.dom4j.datatype.SchemaParser: com.sun.msv.datatype.xsd.XSDatatype deriveSimpleType(com.sun.msv.datatype.xsd.XSDatatype,org.dom4j.Element)>($r5, $r3);

        return $r5;

     label3:
        $r2 = <org.dom4j.datatype.SchemaParser: org.dom4j.QName XSD_SIMPLETYPE>;

        $r3 = interfaceinvoke $r1.<org.dom4j.Element: org.dom4j.Element element(org.dom4j.QName)>($r2);

        if $r3 != null goto label4;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The simpleType element: ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" must contain a base attribute or simpleType");

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" element");

        $r4 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke r0.<org.dom4j.datatype.SchemaParser: void onSchemaError(java.lang.String)>($r4);

        goto label1;

     label4:
        $r5 = specialinvoke r0.<org.dom4j.datatype.SchemaParser: com.sun.msv.datatype.xsd.XSDatatype loadXSDatatypeFromSimpleType(org.dom4j.Element)>($r3);

        return $r5;

     label5:
        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No <restriction>. Could not create XSDatatype for simpleType: ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke r0.<org.dom4j.datatype.SchemaParser: void onSchemaError(java.lang.String)>($r4);

        goto label1;
    }

    private void onChildElements(org.dom4j.Element, org.dom4j.datatype.DatatypeElementFactory)
    {
        org.dom4j.datatype.DatatypeElementFactory $r2;
        java.util.Iterator $r4;
        org.dom4j.datatype.SchemaParser r0;
        org.dom4j.Element $r1;
        org.dom4j.QName $r3;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: org.dom4j.datatype.SchemaParser;

        $r1 := @parameter0: org.dom4j.Element;

        $r2 := @parameter1: org.dom4j.datatype.DatatypeElementFactory;

        $r3 = <org.dom4j.datatype.SchemaParser: org.dom4j.QName XSD_ELEMENT>;

        $r4 = interfaceinvoke $r1.<org.dom4j.Element: java.util.Iterator elementIterator(org.dom4j.QName)>($r3);

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r1 = (org.dom4j.Element) $r5;

        specialinvoke r0.<org.dom4j.datatype.SchemaParser: void onDatatypeElement(org.dom4j.Element,org.dom4j.DocumentFactory)>($r1, $r2);

        goto label1;

     label2:
        return;
    }

    private void onDatatypeAttribute(org.dom4j.Element, org.dom4j.datatype.DatatypeElementFactory, org.dom4j.Element)
    {
        java.io.PrintStream $r8;
        org.dom4j.datatype.SchemaParser r0;
        org.dom4j.datatype.DatatypeElementFactory $r2;
        java.lang.StringBuffer $r9;
        com.sun.msv.datatype.xsd.XSDatatype $r6;
        org.dom4j.Element $r1, $r3;
        org.dom4j.QName $r5;
        java.lang.String $r4, $r7;

        r0 := @this: org.dom4j.datatype.SchemaParser;

        $r1 := @parameter0: org.dom4j.Element;

        $r2 := @parameter1: org.dom4j.datatype.DatatypeElementFactory;

        $r3 := @parameter2: org.dom4j.Element;

        $r4 = interfaceinvoke $r3.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("name");

        $r5 = specialinvoke r0.<org.dom4j.datatype.SchemaParser: org.dom4j.QName getQName(java.lang.String)>($r4);

        $r6 = specialinvoke r0.<org.dom4j.datatype.SchemaParser: com.sun.msv.datatype.xsd.XSDatatype dataTypeForXsdAttribute(org.dom4j.Element)>($r3);

        if $r6 == null goto label1;

        virtualinvoke $r2.<org.dom4j.datatype.DatatypeElementFactory: void setAttributeXSDatatype(org.dom4j.QName,com.sun.msv.datatype.xsd.XSDatatype)>($r5, $r6);

        return;

     label1:
        $r7 = interfaceinvoke $r3.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("type");

        $r8 = <java.lang.System: java.io.PrintStream out>;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Warning: Couldn\'t find XSDatatype for type: ");

        $r9 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" attribute: ");

        $r9 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r4);

        return;
    }

    private void onDatatypeElement(org.dom4j.Element, org.dom4j.DocumentFactory)
    {
        java.util.Iterator $r11;
        org.dom4j.datatype.SchemaParser r0;
        org.dom4j.DocumentFactory $r2;
        org.dom4j.datatype.DatatypeElementFactory $r6;
        org.dom4j.datatype.NamedTypeResolver $r8;
        com.sun.msv.datatype.xsd.XSDatatype $r7;
        org.dom4j.Element $r1, $r10;
        org.dom4j.QName $r5, $r9;
        java.lang.Object $r12;
        java.lang.String $r3, $r4;
        boolean $z0;

        r0 := @this: org.dom4j.datatype.SchemaParser;

        $r1 := @parameter0: org.dom4j.Element;

        $r2 := @parameter1: org.dom4j.DocumentFactory;

        $r3 = interfaceinvoke $r1.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("name");

        $r4 = interfaceinvoke $r1.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("type");

        $r5 = specialinvoke r0.<org.dom4j.datatype.SchemaParser: org.dom4j.QName getQName(java.lang.String)>($r3);

        $r6 = specialinvoke r0.<org.dom4j.datatype.SchemaParser: org.dom4j.datatype.DatatypeElementFactory getDatatypeElementFactory(org.dom4j.QName)>($r5);

        if $r4 == null goto label2;

        $r7 = specialinvoke r0.<org.dom4j.datatype.SchemaParser: com.sun.msv.datatype.xsd.XSDatatype getTypeByName(java.lang.String)>($r4);

        if $r7 == null goto label1;

        virtualinvoke $r6.<org.dom4j.datatype.DatatypeElementFactory: void setChildElementXSDatatype(org.dom4j.QName,com.sun.msv.datatype.xsd.XSDatatype)>($r5, $r7);

        return;

     label1:
        $r5 = specialinvoke r0.<org.dom4j.datatype.SchemaParser: org.dom4j.QName getQName(java.lang.String)>($r4);

        $r8 = r0.<org.dom4j.datatype.SchemaParser: org.dom4j.datatype.NamedTypeResolver namedTypeResolver>;

        virtualinvoke $r8.<org.dom4j.datatype.NamedTypeResolver: void registerTypedElement(org.dom4j.Element,org.dom4j.QName,org.dom4j.DocumentFactory)>($r1, $r5, $r2);

        return;

     label2:
        $r9 = <org.dom4j.datatype.SchemaParser: org.dom4j.QName XSD_SIMPLETYPE>;

        $r10 = interfaceinvoke $r1.<org.dom4j.Element: org.dom4j.Element element(org.dom4j.QName)>($r9);

        if $r10 == null goto label3;

        $r7 = specialinvoke r0.<org.dom4j.datatype.SchemaParser: com.sun.msv.datatype.xsd.XSDatatype loadXSDatatypeFromSimpleType(org.dom4j.Element)>($r10);

        if $r7 == null goto label3;

        virtualinvoke $r6.<org.dom4j.datatype.DatatypeElementFactory: void setChildElementXSDatatype(org.dom4j.QName,com.sun.msv.datatype.xsd.XSDatatype)>($r5, $r7);

     label3:
        $r5 = <org.dom4j.datatype.SchemaParser: org.dom4j.QName XSD_COMPLEXTYPE>;

        $r10 = interfaceinvoke $r1.<org.dom4j.Element: org.dom4j.Element element(org.dom4j.QName)>($r5);

        if $r10 == null goto label4;

        specialinvoke r0.<org.dom4j.datatype.SchemaParser: void onSchemaComplexType(org.dom4j.Element,org.dom4j.datatype.DatatypeElementFactory)>($r10, $r6);

     label4:
        $r5 = <org.dom4j.datatype.SchemaParser: org.dom4j.QName XSD_ATTRIBUTE>;

        $r11 = interfaceinvoke $r1.<org.dom4j.Element: java.util.Iterator elementIterator(org.dom4j.QName)>($r5);

        $z0 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

     label5:
        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (org.dom4j.Element) $r12;

        specialinvoke r0.<org.dom4j.datatype.SchemaParser: void onDatatypeAttribute(org.dom4j.Element,org.dom4j.datatype.DatatypeElementFactory,org.dom4j.Element)>($r1, $r6, $r10);

        $z0 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label5;

     label6:
        return;
    }

    private void onNamedSchemaComplexType(org.dom4j.Element)
    {
        org.dom4j.datatype.DatatypeElementFactory $r5;
        org.dom4j.datatype.NamedTypeResolver $r6;
        org.dom4j.datatype.SchemaParser r0;
        org.dom4j.Element $r1;
        org.dom4j.QName $r4;
        java.lang.String $r3;
        org.dom4j.Attribute $r2;

        r0 := @this: org.dom4j.datatype.SchemaParser;

        $r1 := @parameter0: org.dom4j.Element;

        $r2 = interfaceinvoke $r1.<org.dom4j.Element: org.dom4j.Attribute attribute(java.lang.String)>("name");

        if $r2 != null goto label1;

        return;

     label1:
        $r3 = interfaceinvoke $r2.<org.dom4j.Attribute: java.lang.String getText()>();

        $r4 = specialinvoke r0.<org.dom4j.datatype.SchemaParser: org.dom4j.QName getQName(java.lang.String)>($r3);

        $r5 = specialinvoke r0.<org.dom4j.datatype.SchemaParser: org.dom4j.datatype.DatatypeElementFactory getDatatypeElementFactory(org.dom4j.QName)>($r4);

        specialinvoke r0.<org.dom4j.datatype.SchemaParser: void onSchemaComplexType(org.dom4j.Element,org.dom4j.datatype.DatatypeElementFactory)>($r1, $r5);

        $r6 = r0.<org.dom4j.datatype.SchemaParser: org.dom4j.datatype.NamedTypeResolver namedTypeResolver>;

        virtualinvoke $r6.<org.dom4j.datatype.NamedTypeResolver: void registerComplexType(org.dom4j.QName,org.dom4j.DocumentFactory)>($r4, $r5);

        return;
    }

    private void onNamedSchemaSimpleType(org.dom4j.Element)
    {
        org.dom4j.datatype.NamedTypeResolver $r6;
        org.dom4j.datatype.SchemaParser r0;
        com.sun.msv.datatype.xsd.XSDatatype $r5;
        org.dom4j.Element $r1;
        org.dom4j.QName $r4;
        java.lang.String $r3;
        org.dom4j.Attribute $r2;

        r0 := @this: org.dom4j.datatype.SchemaParser;

        $r1 := @parameter0: org.dom4j.Element;

        $r2 = interfaceinvoke $r1.<org.dom4j.Element: org.dom4j.Attribute attribute(java.lang.String)>("name");

        if $r2 != null goto label1;

        return;

     label1:
        $r3 = interfaceinvoke $r2.<org.dom4j.Attribute: java.lang.String getText()>();

        $r4 = specialinvoke r0.<org.dom4j.datatype.SchemaParser: org.dom4j.QName getQName(java.lang.String)>($r3);

        $r5 = specialinvoke r0.<org.dom4j.datatype.SchemaParser: com.sun.msv.datatype.xsd.XSDatatype loadXSDatatypeFromSimpleType(org.dom4j.Element)>($r1);

        $r6 = r0.<org.dom4j.datatype.SchemaParser: org.dom4j.datatype.NamedTypeResolver namedTypeResolver>;

        virtualinvoke $r6.<org.dom4j.datatype.NamedTypeResolver: void registerSimpleType(org.dom4j.QName,com.sun.msv.datatype.xsd.XSDatatype)>($r4, $r5);

        return;
    }

    private void onSchemaComplexType(org.dom4j.Element, org.dom4j.datatype.DatatypeElementFactory)
    {
        java.util.Iterator $r4;
        org.dom4j.datatype.SchemaParser r0;
        org.dom4j.datatype.DatatypeElementFactory $r2;
        com.sun.msv.datatype.xsd.XSDatatype $r8;
        org.dom4j.Element $r1, r6;
        org.dom4j.QName $r3;
        java.lang.Object $r5;
        java.lang.String $r7;
        boolean $z0;

        r0 := @this: org.dom4j.datatype.SchemaParser;

        $r1 := @parameter0: org.dom4j.Element;

        $r2 := @parameter1: org.dom4j.datatype.DatatypeElementFactory;

        $r3 = <org.dom4j.datatype.SchemaParser: org.dom4j.QName XSD_ATTRIBUTE>;

        $r4 = interfaceinvoke $r1.<org.dom4j.Element: java.util.Iterator elementIterator(org.dom4j.QName)>($r3);

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.dom4j.Element) $r5;

        $r7 = interfaceinvoke r6.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("name");

        $r3 = specialinvoke r0.<org.dom4j.datatype.SchemaParser: org.dom4j.QName getQName(java.lang.String)>($r7);

        $r8 = specialinvoke r0.<org.dom4j.datatype.SchemaParser: com.sun.msv.datatype.xsd.XSDatatype dataTypeForXsdAttribute(org.dom4j.Element)>(r6);

        if $r8 == null goto label1;

        virtualinvoke $r2.<org.dom4j.datatype.DatatypeElementFactory: void setAttributeXSDatatype(org.dom4j.QName,com.sun.msv.datatype.xsd.XSDatatype)>($r3, $r8);

        goto label1;

     label2:
        $r3 = <org.dom4j.datatype.SchemaParser: org.dom4j.QName XSD_SEQUENCE>;

        r6 = interfaceinvoke $r1.<org.dom4j.Element: org.dom4j.Element element(org.dom4j.QName)>($r3);

        if r6 == null goto label3;

        specialinvoke r0.<org.dom4j.datatype.SchemaParser: void onChildElements(org.dom4j.Element,org.dom4j.datatype.DatatypeElementFactory)>(r6, $r2);

     label3:
        $r3 = <org.dom4j.datatype.SchemaParser: org.dom4j.QName XSD_CHOICE>;

        r6 = interfaceinvoke $r1.<org.dom4j.Element: org.dom4j.Element element(org.dom4j.QName)>($r3);

        if r6 == null goto label4;

        specialinvoke r0.<org.dom4j.datatype.SchemaParser: void onChildElements(org.dom4j.Element,org.dom4j.datatype.DatatypeElementFactory)>(r6, $r2);

     label4:
        $r3 = <org.dom4j.datatype.SchemaParser: org.dom4j.QName XSD_ALL>;

        $r1 = interfaceinvoke $r1.<org.dom4j.Element: org.dom4j.Element element(org.dom4j.QName)>($r3);

        if $r1 == null goto label5;

        specialinvoke r0.<org.dom4j.datatype.SchemaParser: void onChildElements(org.dom4j.Element,org.dom4j.datatype.DatatypeElementFactory)>($r1, $r2);

     label5:
        return;
    }

    private void onSchemaError(java.lang.String)
    {
        java.lang.String $r1;
        org.dom4j.datatype.InvalidSchemaException $r2;
        org.dom4j.datatype.SchemaParser r0;

        r0 := @this: org.dom4j.datatype.SchemaParser;

        $r1 := @parameter0: java.lang.String;

        $r2 = new org.dom4j.datatype.InvalidSchemaException;

        specialinvoke $r2.<org.dom4j.datatype.InvalidSchemaException: void <init>(java.lang.String)>($r1);

        throw $r2;
    }

    public void build(org.dom4j.Document)
    {
        org.dom4j.Document $r1;
        org.dom4j.datatype.SchemaParser r0;

        r0 := @this: org.dom4j.datatype.SchemaParser;

        $r1 := @parameter0: org.dom4j.Document;

        r0.<org.dom4j.datatype.SchemaParser: org.dom4j.Namespace targetNamespace> = null;

        specialinvoke r0.<org.dom4j.datatype.SchemaParser: void internalBuild(org.dom4j.Document)>($r1);

        return;
    }

    public void build(org.dom4j.Document, org.dom4j.Namespace)
    {
        org.dom4j.Document $r1;
        org.dom4j.Namespace $r2;
        org.dom4j.datatype.SchemaParser r0;

        r0 := @this: org.dom4j.datatype.SchemaParser;

        $r1 := @parameter0: org.dom4j.Document;

        $r2 := @parameter1: org.dom4j.Namespace;

        r0.<org.dom4j.datatype.SchemaParser: org.dom4j.Namespace targetNamespace> = $r2;

        specialinvoke r0.<org.dom4j.datatype.SchemaParser: void internalBuild(org.dom4j.Document)>($r1);

        return;
    }
}
