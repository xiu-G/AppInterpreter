public class twitter4j.internal.json.DataObjectFactoryUtil extends java.lang.Object
{
    private static final java.lang.reflect.Method CLEAR_THREAD_LOCAL_MAP;
    private static final java.lang.reflect.Method REGISTER_JSON_OBJECT;

    static void <clinit>()
    {
        java.lang.AssertionError $r4;
        java.lang.reflect.Method[] $r1;
        int $i0, $i1;
        java.lang.Class $r0;
        java.lang.String $r6;
        java.lang.reflect.Method $r2, $r3, $r5;
        boolean $z0;

        $r0 = class "Ltwitter4j/json/DataObjectFactory;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        $i0 = lengthof $r1;

        $i1 = 0;

        $r2 = null;

        $r3 = null;

     label1:
        if $i1 < $i0 goto label3;

        if $r2 == null goto label2;

        if $r3 != null goto label6;

     label2:
        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label3:
        $r5 = $r1[$i1];

        $r6 = virtualinvoke $r5.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("clearThreadLocalMap");

        if $z0 == 0 goto label5;

        virtualinvoke $r5.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

     label4:
        $i1 = $i1 + 1;

        $r2 = $r5;

        goto label1;

     label5:
        $r6 = virtualinvoke $r5.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("registerJSONObject");

        if $z0 == 0 goto label7;

        virtualinvoke $r5.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

        $r3 = $r5;

        $r5 = $r2;

        goto label4;

     label6:
        <twitter4j.internal.json.DataObjectFactoryUtil: java.lang.reflect.Method CLEAR_THREAD_LOCAL_MAP> = $r2;

        <twitter4j.internal.json.DataObjectFactoryUtil: java.lang.reflect.Method REGISTER_JSON_OBJECT> = $r3;

        return;

     label7:
        $r5 = $r2;

        goto label4;
    }

    private void <init>()
    {
        java.lang.AssertionError $r1;
        twitter4j.internal.json.DataObjectFactoryUtil r0;

        r0 := @this: twitter4j.internal.json.DataObjectFactoryUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>(java.lang.Object)>("not intended to be instantiated.");

        throw $r1;
    }

    public static void clearThreadLocalMap()
    {
        java.lang.Throwable $r2, $r4;
        java.lang.Object[] $r1;
        java.lang.AssertionError $r3;
        java.lang.reflect.Method $r0;

        $r0 = <twitter4j.internal.json.DataObjectFactoryUtil: java.lang.reflect.Method CLEAR_THREAD_LOCAL_MAP>;

        $r1 = newarray (java.lang.Object)[0];

     label1:
        virtualinvoke $r0.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r1);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>(java.lang.Object)>($r2);

        throw $r3;

     label4:
        $r4 := @caughtexception;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>(java.lang.Object)>($r4);

        throw $r3;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label4;
    }

    public static java.lang.Object registerJSONObject(java.lang.Object, java.lang.Object)
    {
        java.lang.Throwable $r4, $r6;
        java.lang.Object[] $r3;
        java.lang.Object $r0, $r1;
        java.lang.AssertionError $r5;
        java.lang.reflect.Method $r2;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $r2 = <twitter4j.internal.json.DataObjectFactoryUtil: java.lang.reflect.Method REGISTER_JSON_OBJECT>;

        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = $r0;

        $r3[1] = $r1;

     label1:
        $r0 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r3);

     label2:
        return $r0;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>($r4);

        throw $r5;

     label4:
        $r6 := @caughtexception;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>($r6);

        throw $r5;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label4;
    }
}
