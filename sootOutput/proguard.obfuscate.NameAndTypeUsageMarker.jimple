public class proguard.obfuscate.NameAndTypeUsageMarker extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.visitor.ClassVisitor, proguard.classfile.constant.visitor.ConstantVisitor, proguard.classfile.attribute.visitor.AttributeVisitor
{
    private static final java.lang.Object USED;

    static void <clinit>()
    {
        java.lang.Object $r0;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <proguard.obfuscate.NameAndTypeUsageMarker: java.lang.Object USED> = $r0;

        return;
    }

    public void <init>()
    {
        proguard.obfuscate.NameAndTypeUsageMarker r0;

        r0 := @this: proguard.obfuscate.NameAndTypeUsageMarker;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        return;
    }

    static boolean isUsed(proguard.classfile.VisitorAccepter)
    {
        java.lang.Object $r1, $r2;
        proguard.classfile.VisitorAccepter $r0;

        $r0 := @parameter0: proguard.classfile.VisitorAccepter;

        $r2 = interfaceinvoke $r0.<proguard.classfile.VisitorAccepter: java.lang.Object getVisitorInfo()>();

        $r1 = <proguard.obfuscate.NameAndTypeUsageMarker: java.lang.Object USED>;

        if $r2 != $r1 goto label1;

        return 1;

     label1:
        return 0;
    }

    private static void markAsUsed(proguard.classfile.VisitorAccepter)
    {
        java.lang.Object $r1;
        proguard.classfile.VisitorAccepter $r0;

        $r0 := @parameter0: proguard.classfile.VisitorAccepter;

        $r1 = <proguard.obfuscate.NameAndTypeUsageMarker: java.lang.Object USED>;

        interfaceinvoke $r0.<proguard.classfile.VisitorAccepter: void setVisitorInfo(java.lang.Object)>($r1);

        return;
    }

    private void markNameAndTypeConstant(proguard.classfile.Clazz, int)
    {
        proguard.classfile.Clazz $r2;
        proguard.classfile.constant.Constant $r0;
        int $i0;
        proguard.classfile.constant.NameAndTypeConstant r4;
        proguard.obfuscate.NameAndTypeUsageMarker r1;
        proguard.classfile.ProgramClass $r3;

        r1 := @this: proguard.obfuscate.NameAndTypeUsageMarker;

        $r2 := @parameter0: proguard.classfile.Clazz;

        $i0 := @parameter1: int;

        $r3 = (proguard.classfile.ProgramClass) $r2;

        $r0 = virtualinvoke $r3.<proguard.classfile.ProgramClass: proguard.classfile.constant.Constant getConstant(int)>($i0);

        r4 = (proguard.classfile.constant.NameAndTypeConstant) $r0;

        staticinvoke <proguard.obfuscate.NameAndTypeUsageMarker: void markAsUsed(proguard.classfile.VisitorAccepter)>(r4);

        return;
    }

    private void visitRefConstant(proguard.classfile.Clazz, proguard.classfile.constant.RefConstant)
    {
        proguard.classfile.Clazz $r1;
        int $i0;
        proguard.obfuscate.NameAndTypeUsageMarker r0;
        proguard.classfile.constant.RefConstant $r2;

        r0 := @this: proguard.obfuscate.NameAndTypeUsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.RefConstant;

        $i0 = $r2.<proguard.classfile.constant.RefConstant: int u2nameAndTypeIndex>;

        specialinvoke r0.<proguard.obfuscate.NameAndTypeUsageMarker: void markNameAndTypeConstant(proguard.classfile.Clazz,int)>($r1, $i0);

        return;
    }

    public void visitAnyAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.Attribute)
    {
        proguard.obfuscate.NameAndTypeUsageMarker r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.Attribute $r2;

        r0 := @this: proguard.obfuscate.NameAndTypeUsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.Attribute;

        return;
    }

    public void visitAnyConstant(proguard.classfile.Clazz, proguard.classfile.constant.Constant)
    {
        proguard.obfuscate.NameAndTypeUsageMarker r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.constant.Constant $r2;

        r0 := @this: proguard.obfuscate.NameAndTypeUsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.Constant;

        return;
    }

    public void visitEnclosingMethodAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.EnclosingMethodAttribute)
    {
        proguard.classfile.attribute.EnclosingMethodAttribute $r2;
        proguard.classfile.Clazz $r1;
        int $i0;
        proguard.obfuscate.NameAndTypeUsageMarker r0;

        r0 := @this: proguard.obfuscate.NameAndTypeUsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.EnclosingMethodAttribute;

        $i0 = $r2.<proguard.classfile.attribute.EnclosingMethodAttribute: int u2nameAndTypeIndex>;

        if $i0 == 0 goto label1;

        $i0 = $r2.<proguard.classfile.attribute.EnclosingMethodAttribute: int u2nameAndTypeIndex>;

        specialinvoke r0.<proguard.obfuscate.NameAndTypeUsageMarker: void markNameAndTypeConstant(proguard.classfile.Clazz,int)>($r1, $i0);

     label1:
        return;
    }

    public void visitFieldrefConstant(proguard.classfile.Clazz, proguard.classfile.constant.FieldrefConstant)
    {
        proguard.classfile.constant.FieldrefConstant $r2;
        proguard.obfuscate.NameAndTypeUsageMarker r0;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.obfuscate.NameAndTypeUsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.FieldrefConstant;

        specialinvoke r0.<proguard.obfuscate.NameAndTypeUsageMarker: void visitRefConstant(proguard.classfile.Clazz,proguard.classfile.constant.RefConstant)>($r1, $r2);

        return;
    }

    public void visitInterfaceMethodrefConstant(proguard.classfile.Clazz, proguard.classfile.constant.InterfaceMethodrefConstant)
    {
        proguard.obfuscate.NameAndTypeUsageMarker r0;
        proguard.classfile.constant.InterfaceMethodrefConstant $r2;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.obfuscate.NameAndTypeUsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.InterfaceMethodrefConstant;

        specialinvoke r0.<proguard.obfuscate.NameAndTypeUsageMarker: void visitRefConstant(proguard.classfile.Clazz,proguard.classfile.constant.RefConstant)>($r1, $r2);

        return;
    }

    public void visitMethodrefConstant(proguard.classfile.Clazz, proguard.classfile.constant.MethodrefConstant)
    {
        proguard.classfile.constant.MethodrefConstant $r2;
        proguard.obfuscate.NameAndTypeUsageMarker r0;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.obfuscate.NameAndTypeUsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.MethodrefConstant;

        specialinvoke r0.<proguard.obfuscate.NameAndTypeUsageMarker: void visitRefConstant(proguard.classfile.Clazz,proguard.classfile.constant.RefConstant)>($r1, $r2);

        return;
    }

    public void visitProgramClass(proguard.classfile.ProgramClass)
    {
        proguard.obfuscate.NameAndTypeUsageMarker r0;
        proguard.classfile.ProgramClass $r1;

        r0 := @this: proguard.obfuscate.NameAndTypeUsageMarker;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        virtualinvoke $r1.<proguard.classfile.ProgramClass: void constantPoolEntriesAccept(proguard.classfile.constant.visitor.ConstantVisitor)>(r0);

        virtualinvoke $r1.<proguard.classfile.ProgramClass: void attributesAccept(proguard.classfile.attribute.visitor.AttributeVisitor)>(r0);

        return;
    }
}
