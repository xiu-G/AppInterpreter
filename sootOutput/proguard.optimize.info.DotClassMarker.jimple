public class proguard.optimize.info.DotClassMarker extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.instruction.visitor.InstructionVisitor, proguard.classfile.constant.visitor.ConstantVisitor, proguard.classfile.visitor.ClassVisitor
{

    public void <init>()
    {
        proguard.optimize.info.DotClassMarker r0;

        r0 := @this: proguard.optimize.info.DotClassMarker;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        return;
    }

    public static boolean isDotClassed(proguard.classfile.Clazz)
    {
        proguard.optimize.info.ClassOptimizationInfo $r1;
        proguard.classfile.Clazz $r0;
        boolean $z0;

        $r0 := @parameter0: proguard.classfile.Clazz;

        $r1 = staticinvoke <proguard.optimize.info.ClassOptimizationInfo: proguard.optimize.info.ClassOptimizationInfo getClassOptimizationInfo(proguard.classfile.Clazz)>($r0);

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r1.<proguard.optimize.info.ClassOptimizationInfo: boolean isDotClassed()>();

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    private static void setDotClassed(proguard.classfile.Clazz)
    {
        proguard.optimize.info.ClassOptimizationInfo $r1;
        proguard.classfile.Clazz $r0;

        $r0 := @parameter0: proguard.classfile.Clazz;

        $r1 = staticinvoke <proguard.optimize.info.ClassOptimizationInfo: proguard.optimize.info.ClassOptimizationInfo getClassOptimizationInfo(proguard.classfile.Clazz)>($r0);

        if $r1 == null goto label1;

        virtualinvoke $r1.<proguard.optimize.info.ClassOptimizationInfo: void setDotClassed()>();

     label1:
        return;
    }

    public void visitAnyConstant(proguard.classfile.Clazz, proguard.classfile.constant.Constant)
    {
        proguard.optimize.info.DotClassMarker r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.constant.Constant $r2;

        r0 := @this: proguard.optimize.info.DotClassMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.Constant;

        return;
    }

    public void visitAnyInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.Instruction)
    {
        proguard.optimize.info.DotClassMarker r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.instruction.Instruction $r4;
        int $i0;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.optimize.info.DotClassMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.Instruction;

        return;
    }

    public void visitClassConstant(proguard.classfile.Clazz, proguard.classfile.constant.ClassConstant)
    {
        proguard.classfile.constant.ClassConstant $r2;
        proguard.optimize.info.DotClassMarker r0;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.optimize.info.DotClassMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.ClassConstant;

        virtualinvoke $r2.<proguard.classfile.constant.ClassConstant: void referencedClassAccept(proguard.classfile.visitor.ClassVisitor)>(r0);

        return;
    }

    public void visitConstantInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.ConstantInstruction)
    {
        proguard.optimize.info.DotClassMarker r0;
        byte $b1;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.instruction.ConstantInstruction $r4;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.optimize.info.DotClassMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.ConstantInstruction;

        $b1 = $r4.<proguard.classfile.instruction.ConstantInstruction: byte opcode>;

        $i0 = (int) $b1;

        if $i0 == 18 goto label1;

        $b1 = $r4.<proguard.classfile.instruction.ConstantInstruction: byte opcode>;

        $i0 = (int) $b1;

        if $i0 != 19 goto label2;

     label1:
        $i0 = $r4.<proguard.classfile.instruction.ConstantInstruction: int constantIndex>;

        interfaceinvoke $r1.<proguard.classfile.Clazz: void constantPoolEntryAccept(int,proguard.classfile.constant.visitor.ConstantVisitor)>($i0, r0);

     label2:
        return;
    }

    public void visitLibraryClass(proguard.classfile.LibraryClass)
    {
        proguard.classfile.LibraryClass $r1;
        proguard.optimize.info.DotClassMarker r0;

        r0 := @this: proguard.optimize.info.DotClassMarker;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        return;
    }

    public void visitProgramClass(proguard.classfile.ProgramClass)
    {
        proguard.optimize.info.DotClassMarker r0;
        proguard.classfile.ProgramClass $r1;

        r0 := @this: proguard.optimize.info.DotClassMarker;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        staticinvoke <proguard.optimize.info.DotClassMarker: void setDotClassed(proguard.classfile.Clazz)>($r1);

        return;
    }
}
