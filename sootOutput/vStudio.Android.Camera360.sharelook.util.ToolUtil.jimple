public class vStudio.Android.Camera360.sharelook.util.ToolUtil extends java.lang.Object
{
    public static vStudio.Android.Camera360.sharelook.listener.CallBackInterface cb;
    public static android.content.Context con;

    public void <init>()
    {
        vStudio.Android.Camera360.sharelook.util.ToolUtil r0;

        r0 := @this: vStudio.Android.Camera360.sharelook.util.ToolUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String format(long)
    {
        java.util.TimeZone $r2;
        java.util.Date $r3;
        java.text.SimpleDateFormat r0;
        long $l0, $l2;
        java.util.Calendar $r1;
        int $i1;
        java.lang.String $r4;

        $l0 := @parameter0: long;

        $r1 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $l0 = 1000L * $l0;

        $r2 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>();

        $i1 = virtualinvoke $r2.<java.util.TimeZone: int getRawOffset()>();

        $l2 = (long) $i1;

        $l0 = $l0 - $l2;

        virtualinvoke $r1.<java.util.Calendar: void setTimeInMillis(long)>($l0);

        r0 = new java.text.SimpleDateFormat;

        specialinvoke r0.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy-MM-dd kk:mm:ss");

        $r3 = virtualinvoke $r1.<java.util.Calendar: java.util.Date getTime()>();

        $r4 = virtualinvoke r0.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r3);

        return $r4;
    }

    public static android.graphics.Bitmap getBitmap(java.lang.String) throws java.io.FileNotFoundException
    {
        android.graphics.Bitmap $r3;
        java.lang.String $r0;
        java.io.FileInputStream r1;
        android.graphics.Bitmap$Config $r4;
        java.io.File $r5;
        android.graphics.BitmapFactory$Options r2;

        $r0 := @parameter0: java.lang.String;

        r2 = new android.graphics.BitmapFactory$Options;

        specialinvoke r2.<android.graphics.BitmapFactory$Options: void <init>()>();

        $r4 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config RGB_565>;

        r2.<android.graphics.BitmapFactory$Options: android.graphics.Bitmap$Config inPreferredConfig> = $r4;

        r1 = new java.io.FileInputStream;

        $r5 = new java.io.File;

        specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>($r0);

        specialinvoke r1.<java.io.FileInputStream: void <init>(java.io.File)>($r5);

        $r3 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>(r1, null, r2);

        return $r3;
    }

    public static android.graphics.Bitmap getBitmap(java.lang.String, int)
    {
        android.graphics.Bitmap$Config $r2;
        android.graphics.Bitmap $r3;
        int $i0, i1, i2, $i3;
        java.lang.String $r0;
        android.graphics.BitmapFactory$Options r1;
        double $d0, $d1;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        i2 = 1;

        r1 = new android.graphics.BitmapFactory$Options;

        specialinvoke r1.<android.graphics.BitmapFactory$Options: void <init>()>();

        r1.<android.graphics.BitmapFactory$Options: int inSampleSize> = 1;

        r1.<android.graphics.BitmapFactory$Options: boolean inJustDecodeBounds> = 1;

        staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>($r0, r1);

        $i3 = r1.<android.graphics.BitmapFactory$Options: int outWidth>;

        i1 = r1.<android.graphics.BitmapFactory$Options: int outHeight>;

        i1 = $i3 * i1;

        if i1 <= 8000 goto label1;

        $d0 = (double) i1;

        $d0 = $d0 * 1.0;

        $d1 = (double) 8000;

        $d1 = $d1 * 1.0;

        $d0 = $d0 / $d1;

        $d0 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        $d0 = $d0 + 0.8;

        i2 = (int) $d0;

     label1:
        if i2 != 0 goto label2;

        i2 = 1;

     label2:
        r1.<android.graphics.BitmapFactory$Options: int inSampleSize> = i2;

        r1.<android.graphics.BitmapFactory$Options: boolean inDither> = 0;

        r1.<android.graphics.BitmapFactory$Options: boolean inJustDecodeBounds> = 0;

        $r2 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config RGB_565>;

        r1.<android.graphics.BitmapFactory$Options: android.graphics.Bitmap$Config inPreferredConfig> = $r2;

        $r3 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>($r0, r1);

        return $r3;
    }

    public static byte[] getbyte(android.graphics.Bitmap)
    {
        byte[] $r2;
        java.io.ByteArrayOutputStream r1;
        android.graphics.Bitmap $r0;
        android.graphics.Bitmap$CompressFormat $r3;

        $r0 := @parameter0: android.graphics.Bitmap;

        r1 = new java.io.ByteArrayOutputStream;

        specialinvoke r1.<java.io.ByteArrayOutputStream: void <init>()>();

        $r3 = <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat JPEG>;

        virtualinvoke $r0.<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>($r3, 100, r1);

        $r2 = virtualinvoke r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r2;
    }

    public static java.lang.String geturl(java.lang.String)
    {
        int $i0;
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r0.<java.lang.String: int lastIndexOf(java.lang.String)>(".");

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int)>($i0);

        return $r0;
    }

    public static boolean tagmatcher(java.lang.String)
    {
        java.util.regex.Matcher $r2;
        java.lang.String $r0;
        java.util.regex.Pattern $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(^#[^#]+#$)|(#[^#]*# )");

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r0);

        $z0 = virtualinvoke $r2.<java.util.regex.Matcher: boolean find()>();

        return $z0;
    }
}
