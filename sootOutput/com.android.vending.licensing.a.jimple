final class com.android.vending.licensing.a extends java.lang.Object
{
    private final int a;
    private final java.lang.String b;
    private final java.lang.String c;

    public final int a()
    {
        int i0;
        com.android.vending.licensing.a r0;

        r0 := @this: com.android.vending.licensing.a;

        i0 = r0.<com.android.vending.licensing.a: int a>;

        return i0;
    }

    public final void a(java.security.PublicKey, int, java.lang.String, java.lang.String)
    {
        java.lang.Throwable $r6, $r8, $r13, $r18;
        byte[] $r5;
        java.lang.String[] $r16;
        long $l2;
        int $i0, $i1, $i3;
        java.lang.String $r2, $r3, $r15;
        boolean $z0;
        java.util.Iterator $r11;
        com.android.vending.licensing.a.b $r9;
        com.android.vending.licensing.i $r17;
        java.security.Signature $r4;
        java.security.PublicKey $r1;
        java.lang.RuntimeException $r7;
        java.lang.IllegalArgumentException $r12;
        com.android.vending.licensing.a r0;
        android.text.TextUtils$SimpleStringSplitter $r10;
        java.lang.Object $r14;

        r0 := @this: com.android.vending.licensing.a;

        $r1 := @parameter0: java.security.PublicKey;

        $i0 := @parameter1: int;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: java.lang.String;

        if $i0 == 0 goto label01;

        if $i0 == 1 goto label01;

        if $i0 != 2 goto label35;

     label01:
        $r4 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>("SHA1withRSA");

        virtualinvoke $r4.<java.security.Signature: void initVerify(java.security.PublicKey)>($r1);

        $r5 = virtualinvoke $r2.<java.lang.String: byte[] getBytes()>();

        virtualinvoke $r4.<java.security.Signature: void update(byte[])>($r5);

        $r5 = staticinvoke <com.android.vending.licensing.a.a: byte[] a(java.lang.String)>($r3);

        $z0 = virtualinvoke $r4.<java.security.Signature: boolean verify(byte[])>($r5);

     label02:
        if $z0 != 0 goto label08;

     label03:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LicenseValidator", "Signature verification failed.");

     label04:
        return;

     label05:
        $r6 := @caughtexception;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r6);

        throw $r7;

     label06:
        $r8 := @caughtexception;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r8);

        throw $r7;

     label07:
        $r9 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LicenseValidator", "Could not Base64-decode signature.");

        return;

     label08:
        $r10 = new android.text.TextUtils$SimpleStringSplitter;

     label09:
        specialinvoke $r10.<android.text.TextUtils$SimpleStringSplitter: void <init>(char)>(58);

        interfaceinvoke $r10.<android.text.TextUtils$StringSplitter: void setString(java.lang.String)>($r2);

        $r11 = interfaceinvoke $r10.<android.text.TextUtils$StringSplitter: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

     label10:
        if $z0 != 0 goto label13;

        $r12 = new java.lang.IllegalArgumentException;

     label11:
        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Blank response.");

        throw $r12;

     label12:
        $r13 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LicenseValidator", "Could not parse response.");

        return;

     label13:
        $r14 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

     label14:
        $r2 = (java.lang.String) $r14;

     label15:
        $z0 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

     label16:
        if $z0 == 0 goto label41;

     label17:
        $r14 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

     label18:
        $r3 = (java.lang.String) $r14;

     label19:
        $r15 = staticinvoke <java.util.regex.Pattern: java.lang.String quote(java.lang.String)>("|");

        $r16 = staticinvoke <android.text.TextUtils: java.lang.String[] split(java.lang.String,java.lang.String)>($r2, $r15);

     label20:
        $i1 = lengthof $r16;

        if $i1 >= 6 goto label22;

        $r12 = new java.lang.IllegalArgumentException;

     label21:
        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Wrong number of fields.");

        throw $r12;

     label22:
        $r17 = new com.android.vending.licensing.i;

     label23:
        specialinvoke $r17.<com.android.vending.licensing.i: void <init>()>();

     label24:
        $r17.<com.android.vending.licensing.i: java.lang.String g> = $r3;

        $r2 = $r16[0];

     label25:
        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

     label26:
        $r17.<com.android.vending.licensing.i: int a> = $i1;

        $r2 = $r16[1];

     label27:
        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

     label28:
        $r17.<com.android.vending.licensing.i: int b> = $i1;

        $r2 = $r16[2];

        $r17.<com.android.vending.licensing.i: java.lang.String c> = $r2;

        $r2 = $r16[3];

        $r17.<com.android.vending.licensing.i: java.lang.String d> = $r2;

        $r2 = $r16[4];

        $r17.<com.android.vending.licensing.i: java.lang.String e> = $r2;

        $r2 = $r16[5];

     label29:
        $l2 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r2);

     label30:
        $r17.<com.android.vending.licensing.i: long f> = $l2;

        $i1 = $r17.<com.android.vending.licensing.i: int a>;

        if $i1 == $i0 goto label31;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LicenseValidator", "Response codes don\'t match.");

        return;

     label31:
        $i1 = $r17.<com.android.vending.licensing.i: int b>;

        $i3 = r0.<com.android.vending.licensing.a: int a>;

        if $i1 == $i3 goto label32;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LicenseValidator", "Nonce doesn\'t match.");

        return;

     label32:
        $r2 = $r17.<com.android.vending.licensing.i: java.lang.String c>;

        $r3 = r0.<com.android.vending.licensing.a: java.lang.String b>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label33;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LicenseValidator", "Package name doesn\'t match.");

        return;

     label33:
        $r2 = $r17.<com.android.vending.licensing.i: java.lang.String d>;

        $r3 = r0.<com.android.vending.licensing.a: java.lang.String c>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label34;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LicenseValidator", "Version codes don\'t match.");

        return;

     label34:
        $r2 = $r17.<com.android.vending.licensing.i: java.lang.String e>;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r2);

        if $z0 == 0 goto label35;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LicenseValidator", "User identifier is empty.");

        return;

     label35:
        lookupswitch($i0)
        {
            case 0: goto label04;
            case 1: goto label04;
            case 2: goto label04;
            case 3: goto label04;
            case 4: goto label38;
            case 5: goto label39;
            case 257: goto label37;
            case 258: goto label04;
            case 259: goto label04;
            default: goto label36;
        };

     label36:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LicenseValidator", "Unknown response code for license check.");

        return;

     label37:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LicenseValidator", "Error contacting licensing server.");

        return;

     label38:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LicenseValidator", "An error has occurred on the licensing server.");

        return;

     label39:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LicenseValidator", "Licensing server is refusing to talk to this device, over quota.");

        return;

     label40:
        $r18 := @caughtexception;

        return;

     label41:
        $r3 = "";

        goto label19;

        catch java.security.NoSuchAlgorithmException from label01 to label02 with label05;
        catch java.security.NoSuchAlgorithmException from label03 to label04 with label05;
        catch java.security.InvalidKeyException from label01 to label02 with label40;
        catch java.security.InvalidKeyException from label03 to label04 with label40;
        catch java.security.SignatureException from label01 to label02 with label06;
        catch java.security.SignatureException from label03 to label04 with label06;
        catch com.android.vending.licensing.a.b from label01 to label02 with label07;
        catch com.android.vending.licensing.a.b from label03 to label04 with label07;
        catch java.lang.IllegalArgumentException from label09 to label10 with label12;
        catch java.lang.IllegalArgumentException from label11 to label12 with label12;
        catch java.lang.IllegalArgumentException from label13 to label14 with label12;
        catch java.lang.IllegalArgumentException from label15 to label16 with label12;
        catch java.lang.IllegalArgumentException from label17 to label18 with label12;
        catch java.lang.IllegalArgumentException from label19 to label20 with label12;
        catch java.lang.IllegalArgumentException from label21 to label22 with label12;
        catch java.lang.IllegalArgumentException from label23 to label24 with label12;
        catch java.lang.IllegalArgumentException from label25 to label26 with label12;
        catch java.lang.IllegalArgumentException from label27 to label28 with label12;
        catch java.lang.IllegalArgumentException from label29 to label30 with label12;
    }

    public final java.lang.String b()
    {
        java.lang.String r1;
        com.android.vending.licensing.a r0;

        r0 := @this: com.android.vending.licensing.a;

        r1 = r0.<com.android.vending.licensing.a: java.lang.String b>;

        return r1;
    }
}
