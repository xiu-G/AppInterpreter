public final class cn.hi321.browser.decoding.InactivityTimer extends java.lang.Object
{
    private static final int INACTIVITY_DELAY_SECONDS;
    private final android.app.Activity activity;
    private java.util.concurrent.ScheduledFuture inactivityFuture;
    private final java.util.concurrent.ScheduledExecutorService inactivityTimer;

    public void <init>(android.app.Activity)
    {
        java.util.concurrent.ScheduledExecutorService $r2;
        cn.hi321.browser.decoding.InactivityTimer$DaemonThreadFactory $r3;
        cn.hi321.browser.decoding.InactivityTimer r0;
        android.app.Activity $r1;

        r0 := @this: cn.hi321.browser.decoding.InactivityTimer;

        $r1 := @parameter0: android.app.Activity;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new cn.hi321.browser.decoding.InactivityTimer$DaemonThreadFactory;

        specialinvoke $r3.<cn.hi321.browser.decoding.InactivityTimer$DaemonThreadFactory: void <init>(cn.hi321.browser.decoding.InactivityTimer$DaemonThreadFactory)>(null);

        $r2 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor(java.util.concurrent.ThreadFactory)>($r3);

        r0.<cn.hi321.browser.decoding.InactivityTimer: java.util.concurrent.ScheduledExecutorService inactivityTimer> = $r2;

        r0.<cn.hi321.browser.decoding.InactivityTimer: java.util.concurrent.ScheduledFuture inactivityFuture> = null;

        r0.<cn.hi321.browser.decoding.InactivityTimer: android.app.Activity activity> = $r1;

        virtualinvoke r0.<cn.hi321.browser.decoding.InactivityTimer: void onActivity()>();

        return;
    }

    private void cancel()
    {
        java.util.concurrent.ScheduledFuture $r1;
        cn.hi321.browser.decoding.InactivityTimer r0;

        r0 := @this: cn.hi321.browser.decoding.InactivityTimer;

        $r1 = r0.<cn.hi321.browser.decoding.InactivityTimer: java.util.concurrent.ScheduledFuture inactivityFuture>;

        if $r1 == null goto label1;

        $r1 = r0.<cn.hi321.browser.decoding.InactivityTimer: java.util.concurrent.ScheduledFuture inactivityFuture>;

        interfaceinvoke $r1.<java.util.concurrent.ScheduledFuture: boolean cancel(boolean)>(1);

        r0.<cn.hi321.browser.decoding.InactivityTimer: java.util.concurrent.ScheduledFuture inactivityFuture> = null;

     label1:
        return;
    }

    public void onActivity()
    {
        java.util.concurrent.TimeUnit $r2;
        java.util.concurrent.ScheduledFuture $r3;
        java.util.concurrent.ScheduledExecutorService $r4;
        cn.hi321.browser.decoding.FinishListener $r1;
        cn.hi321.browser.decoding.InactivityTimer r0;
        android.app.Activity $r5;

        r0 := @this: cn.hi321.browser.decoding.InactivityTimer;

        specialinvoke r0.<cn.hi321.browser.decoding.InactivityTimer: void cancel()>();

        $r4 = r0.<cn.hi321.browser.decoding.InactivityTimer: java.util.concurrent.ScheduledExecutorService inactivityTimer>;

        $r1 = new cn.hi321.browser.decoding.FinishListener;

        $r5 = r0.<cn.hi321.browser.decoding.InactivityTimer: android.app.Activity activity>;

        specialinvoke $r1.<cn.hi321.browser.decoding.FinishListener: void <init>(android.app.Activity)>($r5);

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $r3 = interfaceinvoke $r4.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>($r1, 300L, $r2);

        r0.<cn.hi321.browser.decoding.InactivityTimer: java.util.concurrent.ScheduledFuture inactivityFuture> = $r3;

        return;
    }

    public void shutdown()
    {
        java.util.concurrent.ScheduledExecutorService $r1;
        cn.hi321.browser.decoding.InactivityTimer r0;

        r0 := @this: cn.hi321.browser.decoding.InactivityTimer;

        specialinvoke r0.<cn.hi321.browser.decoding.InactivityTimer: void cancel()>();

        $r1 = r0.<cn.hi321.browser.decoding.InactivityTimer: java.util.concurrent.ScheduledExecutorService inactivityTimer>;

        interfaceinvoke $r1.<java.util.concurrent.ScheduledExecutorService: void shutdown()>();

        return;
    }

    public static void <clinit>()
    {
        <cn.hi321.browser.decoding.InactivityTimer: int INACTIVITY_DELAY_SECONDS> = 300;

        return;
    }
}
