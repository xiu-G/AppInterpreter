public class proguard.classfile.attribute.ExceptionsAttribute extends proguard.classfile.attribute.Attribute
{
    public int[] u2exceptionIndexTable;
    public int u2exceptionIndexTableLength;

    public void <init>()
    {
        proguard.classfile.attribute.ExceptionsAttribute r0;

        r0 := @this: proguard.classfile.attribute.ExceptionsAttribute;

        specialinvoke r0.<proguard.classfile.attribute.Attribute: void <init>()>();

        return;
    }

    public void <init>(int, int, int[])
    {
        int[] $r1;
        proguard.classfile.attribute.ExceptionsAttribute r0;
        int $i0, $i1;

        r0 := @this: proguard.classfile.attribute.ExceptionsAttribute;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: int[];

        specialinvoke r0.<proguard.classfile.attribute.Attribute: void <init>(int)>($i0);

        r0.<proguard.classfile.attribute.ExceptionsAttribute: int u2exceptionIndexTableLength> = 0;

        r0.<proguard.classfile.attribute.ExceptionsAttribute: int[] u2exceptionIndexTable> = $r1;

        return;
    }

    public void accept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.visitor.AttributeVisitor)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.ExceptionsAttribute r0;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.visitor.AttributeVisitor $r3;

        r0 := @this: proguard.classfile.attribute.ExceptionsAttribute;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.visitor.AttributeVisitor;

        interfaceinvoke $r3.<proguard.classfile.attribute.visitor.AttributeVisitor: void visitExceptionsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.ExceptionsAttribute)>($r1, $r2, r0);

        return;
    }

    public void exceptionEntriesAccept(proguard.classfile.ProgramClass, proguard.classfile.constant.visitor.ConstantVisitor)
    {
        proguard.classfile.constant.visitor.ConstantVisitor $r2;
        int[] $r3;
        proguard.classfile.attribute.ExceptionsAttribute r0;
        int $i0, $i1;
        proguard.classfile.ProgramClass $r1;

        r0 := @this: proguard.classfile.attribute.ExceptionsAttribute;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.constant.visitor.ConstantVisitor;

        $i0 = 0;

     label1:
        $i1 = r0.<proguard.classfile.attribute.ExceptionsAttribute: int u2exceptionIndexTableLength>;

        if $i0 >= $i1 goto label2;

        $r3 = r0.<proguard.classfile.attribute.ExceptionsAttribute: int[] u2exceptionIndexTable>;

        $i1 = $r3[$i0];

        virtualinvoke $r1.<proguard.classfile.ProgramClass: void constantPoolEntryAccept(int,proguard.classfile.constant.visitor.ConstantVisitor)>($i1, $r2);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }
}
