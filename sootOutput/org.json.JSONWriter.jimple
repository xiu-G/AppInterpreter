public class org.json.JSONWriter extends java.lang.Object
{
    private static final int maxdepth;
    private boolean comma;
    protected char mode;
    private char[] stack;
    private int top;
    protected java.io.Writer writer;

    public void <init>(java.io.Writer)
    {
        java.io.Writer $r1;
        char[] $r2;
        org.json.JSONWriter r0;

        r0 := @this: org.json.JSONWriter;

        $r1 := @parameter0: java.io.Writer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.json.JSONWriter: boolean comma> = 0;

        r0.<org.json.JSONWriter: char mode> = 105;

        $r2 = newarray (char)[20];

        r0.<org.json.JSONWriter: char[] stack> = $r2;

        r0.<org.json.JSONWriter: int top> = 0;

        r0.<org.json.JSONWriter: java.io.Writer writer> = $r1;

        return;
    }

    private org.json.JSONWriter append(java.lang.String) throws org.json.JSONException
    {
        java.lang.Throwable $r3;
        char $c0;
        org.json.JSONWriter r0;
        org.json.JSONException $r4;
        java.io.Writer $r2;
        int $i1;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: org.json.JSONWriter;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        $r4 = new org.json.JSONException;

        specialinvoke $r4.<org.json.JSONException: void <init>(java.lang.String)>("Null pointer");

        throw $r4;

     label1:
        $c0 = r0.<org.json.JSONWriter: char mode>;

        $i1 = (int) $c0;

        if $i1 == 111 goto label2;

        $c0 = r0.<org.json.JSONWriter: char mode>;

        $i1 = (int) $c0;

        if $i1 != 97 goto label9;

     label2:
        $z0 = r0.<org.json.JSONWriter: boolean comma>;

        if $z0 == 0 goto label4;

        $c0 = r0.<org.json.JSONWriter: char mode>;

        $i1 = (int) $c0;

        if $i1 != 97 goto label4;

        $r2 = r0.<org.json.JSONWriter: java.io.Writer writer>;

     label3:
        virtualinvoke $r2.<java.io.Writer: void write(int)>(44);

     label4:
        $r2 = r0.<org.json.JSONWriter: java.io.Writer writer>;

     label5:
        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>($r1);

     label6:
        $c0 = r0.<org.json.JSONWriter: char mode>;

        $i1 = (int) $c0;

        if $i1 != 111 goto label7;

        r0.<org.json.JSONWriter: char mode> = 107;

     label7:
        r0.<org.json.JSONWriter: boolean comma> = 1;

        return r0;

     label8:
        $r3 := @caughtexception;

        $r4 = new org.json.JSONException;

        specialinvoke $r4.<org.json.JSONException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

     label9:
        $r4 = new org.json.JSONException;

        specialinvoke $r4.<org.json.JSONException: void <init>(java.lang.String)>("Value out of sequence.");

        throw $r4;

        catch java.io.IOException from label3 to label4 with label8;
        catch java.io.IOException from label5 to label6 with label8;
    }

    private org.json.JSONWriter end(char, char) throws org.json.JSONException
    {
        java.lang.Throwable $r4;
        char $c0, $c1, $c2;
        org.json.JSONWriter r0;
        org.json.JSONException $r1, $r5;
        java.io.Writer $r3;
        int $i3, $i4;
        java.lang.String $r2;

        r0 := @this: org.json.JSONWriter;

        $c0 := @parameter0: char;

        $c1 := @parameter1: char;

        $c2 = r0.<org.json.JSONWriter: char mode>;

        $i3 = (int) $c2;

        $i4 = (int) $c0;

        if $i3 == $i4 goto label3;

        $r5 = new org.json.JSONException;

        $r1 = $r5;

        $i3 = (int) $c0;

        if $i3 != 111 goto label2;

        $r2 = "Misplaced endObject.";

     label1:
        specialinvoke $r5.<org.json.JSONException: void <init>(java.lang.String)>($r2);

        throw $r1;

     label2:
        $r2 = "Misplaced endArray.";

        goto label1;

     label3:
        specialinvoke r0.<org.json.JSONWriter: void pop(char)>($c0);

        $r3 = r0.<org.json.JSONWriter: java.io.Writer writer>;

        $i3 = (int) $c1;

     label4:
        virtualinvoke $r3.<java.io.Writer: void write(int)>($i3);

     label5:
        r0.<org.json.JSONWriter: boolean comma> = 1;

        return r0;

     label6:
        $r4 := @caughtexception;

        $r5 = new org.json.JSONException;

        specialinvoke $r5.<org.json.JSONException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch java.io.IOException from label4 to label5 with label6;
    }

    private void pop(char) throws org.json.JSONException
    {
        org.json.JSONException $r2;
        int $i1, $i3;
        char[] $r1;
        char $c0, $c2;
        org.json.JSONWriter r0;

        r0 := @this: org.json.JSONWriter;

        $c0 := @parameter0: char;

        $i1 = r0.<org.json.JSONWriter: int top>;

        if $i1 <= 0 goto label1;

        $r1 = r0.<org.json.JSONWriter: char[] stack>;

        $i1 = r0.<org.json.JSONWriter: int top>;

        $i3 = -1;

        $i1 = $i1 + $i3;

        $c2 = $r1[$i1];

        $i1 = (int) $c2;

        $i3 = (int) $c0;

        if $i1 == $i3 goto label2;

     label1:
        $r2 = new org.json.JSONException;

        specialinvoke $r2.<org.json.JSONException: void <init>(java.lang.String)>("Nesting error.");

        throw $r2;

     label2:
        $i1 = r0.<org.json.JSONWriter: int top>;

        $i3 = -1;

        $i1 = $i1 + $i3;

        r0.<org.json.JSONWriter: int top> = $i1;

        $i1 = r0.<org.json.JSONWriter: int top>;

        if $i1 != 0 goto label4;

        $c0 = 100;

     label3:
        r0.<org.json.JSONWriter: char mode> = $c0;

        return;

     label4:
        $r1 = r0.<org.json.JSONWriter: char[] stack>;

        $i1 = r0.<org.json.JSONWriter: int top>;

        $i3 = -1;

        $i1 = $i1 + $i3;

        $c0 = $r1[$i1];

        goto label3;
    }

    private void push(char) throws org.json.JSONException
    {
        org.json.JSONException $r1;
        int $i1;
        char[] $r2;
        char $c0;
        org.json.JSONWriter r0;

        r0 := @this: org.json.JSONWriter;

        $c0 := @parameter0: char;

        $i1 = r0.<org.json.JSONWriter: int top>;

        if $i1 < 20 goto label1;

        $r1 = new org.json.JSONException;

        specialinvoke $r1.<org.json.JSONException: void <init>(java.lang.String)>("Nesting too deep.");

        throw $r1;

     label1:
        $r2 = r0.<org.json.JSONWriter: char[] stack>;

        $i1 = r0.<org.json.JSONWriter: int top>;

        $r2[$i1] = $c0;

        r0.<org.json.JSONWriter: char mode> = $c0;

        $i1 = r0.<org.json.JSONWriter: int top>;

        $i1 = $i1 + 1;

        r0.<org.json.JSONWriter: int top> = $i1;

        return;
    }

    public org.json.JSONWriter array() throws org.json.JSONException
    {
        org.json.JSONException $r1;
        int $i1;
        char $c0;
        org.json.JSONWriter r0;

        r0 := @this: org.json.JSONWriter;

        $c0 = r0.<org.json.JSONWriter: char mode>;

        $i1 = (int) $c0;

        if $i1 == 105 goto label1;

        $c0 = r0.<org.json.JSONWriter: char mode>;

        $i1 = (int) $c0;

        if $i1 == 111 goto label1;

        $c0 = r0.<org.json.JSONWriter: char mode>;

        $i1 = (int) $c0;

        if $i1 != 97 goto label2;

     label1:
        specialinvoke r0.<org.json.JSONWriter: void push(char)>(97);

        specialinvoke r0.<org.json.JSONWriter: org.json.JSONWriter append(java.lang.String)>("[");

        r0.<org.json.JSONWriter: boolean comma> = 0;

        return r0;

     label2:
        $r1 = new org.json.JSONException;

        specialinvoke $r1.<org.json.JSONException: void <init>(java.lang.String)>("Misplaced array.");

        throw $r1;
    }

    public org.json.JSONWriter endArray() throws org.json.JSONException
    {
        org.json.JSONWriter r0;

        r0 := @this: org.json.JSONWriter;

        r0 = specialinvoke r0.<org.json.JSONWriter: org.json.JSONWriter end(char,char)>(97, 93);

        return r0;
    }

    public org.json.JSONWriter endObject() throws org.json.JSONException
    {
        org.json.JSONWriter r0;

        r0 := @this: org.json.JSONWriter;

        r0 = specialinvoke r0.<org.json.JSONWriter: org.json.JSONWriter end(char,char)>(107, 125);

        return r0;
    }

    public org.json.JSONWriter key(java.lang.String) throws org.json.JSONException
    {
        java.lang.Throwable $r3;
        char $c0;
        org.json.JSONWriter r0;
        org.json.JSONException $r4;
        java.io.Writer $r2;
        int $i1;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: org.json.JSONWriter;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        $r4 = new org.json.JSONException;

        specialinvoke $r4.<org.json.JSONException: void <init>(java.lang.String)>("Null key.");

        throw $r4;

     label1:
        $c0 = r0.<org.json.JSONWriter: char mode>;

        $i1 = (int) $c0;

        if $i1 != 107 goto label9;

        $z0 = r0.<org.json.JSONWriter: boolean comma>;

        if $z0 == 0 goto label3;

        $r2 = r0.<org.json.JSONWriter: java.io.Writer writer>;

     label2:
        virtualinvoke $r2.<java.io.Writer: void write(int)>(44);

     label3:
        $r2 = r0.<org.json.JSONWriter: java.io.Writer writer>;

     label4:
        $r1 = staticinvoke <org.json.JSONObject: java.lang.String quote(java.lang.String)>($r1);

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>($r1);

     label5:
        $r2 = r0.<org.json.JSONWriter: java.io.Writer writer>;

     label6:
        virtualinvoke $r2.<java.io.Writer: void write(int)>(58);

     label7:
        r0.<org.json.JSONWriter: boolean comma> = 0;

        r0.<org.json.JSONWriter: char mode> = 111;

        return r0;

     label8:
        $r3 := @caughtexception;

        $r4 = new org.json.JSONException;

        specialinvoke $r4.<org.json.JSONException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

     label9:
        $r4 = new org.json.JSONException;

        specialinvoke $r4.<org.json.JSONException: void <init>(java.lang.String)>("Misplaced key.");

        throw $r4;

        catch java.io.IOException from label2 to label3 with label8;
        catch java.io.IOException from label4 to label5 with label8;
        catch java.io.IOException from label6 to label7 with label8;
    }

    public org.json.JSONWriter object() throws org.json.JSONException
    {
        org.json.JSONException $r1;
        int $i1;
        char $c0;
        org.json.JSONWriter r0;

        r0 := @this: org.json.JSONWriter;

        $c0 = r0.<org.json.JSONWriter: char mode>;

        $i1 = (int) $c0;

        if $i1 != 105 goto label1;

        r0.<org.json.JSONWriter: char mode> = 111;

     label1:
        $c0 = r0.<org.json.JSONWriter: char mode>;

        $i1 = (int) $c0;

        if $i1 == 111 goto label2;

        $c0 = r0.<org.json.JSONWriter: char mode>;

        $i1 = (int) $c0;

        if $i1 != 97 goto label3;

     label2:
        specialinvoke r0.<org.json.JSONWriter: org.json.JSONWriter append(java.lang.String)>("{");

        specialinvoke r0.<org.json.JSONWriter: void push(char)>(107);

        r0.<org.json.JSONWriter: boolean comma> = 0;

        return r0;

     label3:
        $r1 = new org.json.JSONException;

        specialinvoke $r1.<org.json.JSONException: void <init>(java.lang.String)>("Misplaced object.");

        throw $r1;
    }

    public org.json.JSONWriter value(double) throws org.json.JSONException
    {
        java.lang.Double $r1;
        org.json.JSONWriter r0;
        double $d0;

        r0 := @this: org.json.JSONWriter;

        $d0 := @parameter0: double;

        $r1 = new java.lang.Double;

        specialinvoke $r1.<java.lang.Double: void <init>(double)>($d0);

        r0 = virtualinvoke r0.<org.json.JSONWriter: org.json.JSONWriter value(java.lang.Object)>($r1);

        return r0;
    }

    public org.json.JSONWriter value(long) throws org.json.JSONException
    {
        long $l0;
        java.lang.String $r1;
        org.json.JSONWriter r0;

        r0 := @this: org.json.JSONWriter;

        $l0 := @parameter0: long;

        $r1 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l0);

        r0 = specialinvoke r0.<org.json.JSONWriter: org.json.JSONWriter append(java.lang.String)>($r1);

        return r0;
    }

    public org.json.JSONWriter value(java.lang.Object) throws org.json.JSONException
    {
        java.lang.Object $r1;
        java.lang.String $r2;
        org.json.JSONWriter r0;

        r0 := @this: org.json.JSONWriter;

        $r1 := @parameter0: java.lang.Object;

        $r2 = staticinvoke <org.json.JSONObject: java.lang.String valueToString(java.lang.Object)>($r1);

        r0 = specialinvoke r0.<org.json.JSONWriter: org.json.JSONWriter append(java.lang.String)>($r2);

        return r0;
    }

    public org.json.JSONWriter value(boolean) throws org.json.JSONException
    {
        java.lang.String $r1;
        org.json.JSONWriter r0;
        boolean $z0;

        r0 := @this: org.json.JSONWriter;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label2;

        $r1 = "true";

     label1:
        r0 = specialinvoke r0.<org.json.JSONWriter: org.json.JSONWriter append(java.lang.String)>($r1);

        return r0;

     label2:
        $r1 = "false";

        goto label1;
    }

    public static void <clinit>()
    {
        <org.json.JSONWriter: int maxdepth> = 20;

        return;
    }
}
