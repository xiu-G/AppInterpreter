public class net.sourceforge.blowfishj.BinConverter extends java.lang.Object
{
    static final char[] HEXTAB;

    static void <clinit>()
    {
        char[] $r0;

        $r0 = newarray (char)[16];

        $r0[0] = 48;

        $r0[1] = 49;

        $r0[2] = 50;

        $r0[3] = 51;

        $r0[4] = 52;

        $r0[5] = 53;

        $r0[6] = 54;

        $r0[7] = 55;

        $r0[8] = 56;

        $r0[9] = 57;

        $r0[10] = 97;

        $r0[11] = 98;

        $r0[12] = 99;

        $r0[13] = 100;

        $r0[14] = 101;

        $r0[15] = 102;

        <net.sourceforge.blowfishj.BinConverter: char[] HEXTAB> = $r0;

        return;
    }

    public void <init>()
    {
        net.sourceforge.blowfishj.BinConverter r0;

        r0 := @this: net.sourceforge.blowfishj.BinConverter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static final int byteArrayToInt(byte[], int)
    {
        byte[] $r0;
        short $s4;
        byte $b1;
        int $i0, $i2, $i3;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $b1 = $r0[$i0];

        $i2 = (int) $b1;

        $i2 = $i2 << 24;

        $i3 = $i0 + 1;

        $b1 = $r0[$i3];

        $s4 = (short) $b1;

        $s4 = $s4 & 255;

        $i3 = (int) $s4;

        $i3 = $i3 << 16;

        $i2 = $i2 | $i3;

        $i3 = $i0 + 2;

        $b1 = $r0[$i3];

        $s4 = (short) $b1;

        $s4 = $s4 & 255;

        $i3 = (int) $s4;

        $i3 = $i3 << 8;

        $i2 = $i2 | $i3;

        $i0 = $i0 + 3;

        $b1 = $r0[$i0];

        $s4 = (short) $b1;

        $s4 = $s4 & 255;

        $i0 = (int) $s4;

        $i0 = $i2 | $i0;

        return $i0;
    }

    public static final long byteArrayToLong(byte[], int)
    {
        byte[] $r0;
        long $l5, $l6;
        short $s4;
        byte $b1;
        int $i0, $i2, $i3;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $b1 = $r0[$i0];

        $i2 = (int) $b1;

        $i2 = $i2 << 24;

        $i3 = $i0 + 1;

        $b1 = $r0[$i3];

        $s4 = (short) $b1;

        $s4 = $s4 & 255;

        $i3 = (int) $s4;

        $i3 = $i3 << 16;

        $i2 = $i2 | $i3;

        $i3 = $i0 + 2;

        $b1 = $r0[$i3];

        $s4 = (short) $b1;

        $s4 = $s4 & 255;

        $i3 = (int) $s4;

        $i3 = $i3 << 8;

        $i2 = $i2 | $i3;

        $i3 = $i0 + 3;

        $b1 = $r0[$i3];

        $s4 = (short) $b1;

        $s4 = $s4 & 255;

        $i3 = (int) $s4;

        $i2 = $i2 | $i3;

        $l5 = (long) $i2;

        $l5 = $l5 << 32;

        $i2 = $i0 + 4;

        $b1 = $r0[$i2];

        $i2 = (int) $b1;

        $i2 = $i2 << 24;

        $i3 = $i0 + 5;

        $b1 = $r0[$i3];

        $s4 = (short) $b1;

        $s4 = $s4 & 255;

        $i3 = (int) $s4;

        $i3 = $i3 << 16;

        $i2 = $i2 | $i3;

        $i3 = $i0 + 6;

        $b1 = $r0[$i3];

        $s4 = (short) $b1;

        $s4 = $s4 & 255;

        $i3 = (int) $s4;

        $i3 = $i3 << 8;

        $i2 = $i2 | $i3;

        $i0 = $i0 + 7;

        $b1 = $r0[$i0];

        $s4 = (short) $b1;

        $s4 = $s4 & 255;

        $i0 = (int) $s4;

        $i0 = $i2 | $i0;

        $l6 = (long) $i0;

        $l6 = $l6 & 4294967295L;

        $l5 = $l5 | $l6;

        return $l5;
    }

    public static final java.lang.String byteArrayToStr(byte[], int, int)
    {
        byte[] $r0;
        char $c8;
        short $s7;
        byte $b4;
        java.lang.StringBuffer r1, $r3;
        int i0, $i1, $i2, i3, $i5, $i6;
        java.lang.String $r2;

        $r0 := @parameter0: byte[];

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        i0 = -2;

        $i2 = $i2 & i0;

        i0 = lengthof $r0;

        i0 = i0 - $i1;

        if i0 >= $i2 goto label1;

        $i2 = i0;

     label1:
        $r3 = new java.lang.StringBuffer;

        r1 = $r3;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        i0 = $i2 >> 1;

        virtualinvoke r1.<java.lang.StringBuffer: void setLength(int)>(i0);

        i3 = 0;

     label2:
        if $i2 <= 0 goto label3;

        i0 = i3 + 1;

        $b4 = $r0[$i1];

        $i5 = (int) $b4;

        $i5 = $i5 << 8;

        $i6 = $i1 + 1;

        $b4 = $r0[$i6];

        $s7 = (short) $b4;

        $s7 = $s7 & 255;

        $i6 = (int) $s7;

        $i5 = $i5 | $i6;

        $c8 = (char) $i5;

        virtualinvoke r1.<java.lang.StringBuffer: void setCharAt(int,char)>(i3, $c8);

        $i1 = $i1 + 2;

        i3 = -2;

        $i2 = $i2 + i3;

        i3 = i0;

        goto label2;

     label3:
        $r2 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    public static final java.lang.String bytesToHexStr(byte[])
    {
        int $i0;
        byte[] $r0;
        java.lang.String $r1;

        $r0 := @parameter0: byte[];

        $i0 = lengthof $r0;

        $r1 = staticinvoke <net.sourceforge.blowfishj.BinConverter: java.lang.String bytesToHexStr(byte[],int,int)>($r0, 0, $i0);

        return $r1;
    }

    public static final java.lang.String bytesToHexStr(byte[], int, int)
    {
        byte[] $r0;
        char $c6;
        byte $b4;
        java.lang.StringBuffer r1, $r4;
        int $i0, i1, $i2, i3, $i5;
        char[] $r3;
        java.lang.String $r2;

        $r0 := @parameter0: byte[];

        i1 := @parameter1: int;

        $i0 := @parameter2: int;

        $r4 = new java.lang.StringBuffer;

        r1 = $r4;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $i2 = $i0 << 1;

        virtualinvoke r1.<java.lang.StringBuffer: void setLength(int)>($i2);

        $i0 = i1 + $i0;

        $i2 = 0;

        i3 = i1;

     label1:
        if i3 >= $i0 goto label2;

        i1 = $i2 + 1;

        $r3 = <net.sourceforge.blowfishj.BinConverter: char[] HEXTAB>;

        $b4 = $r0[i3];

        $i5 = (int) $b4;

        $i5 = $i5 >> 4;

        $i5 = $i5 & 15;

        $c6 = $r3[$i5];

        virtualinvoke r1.<java.lang.StringBuffer: void setCharAt(int,char)>($i2, $c6);

        $i2 = i1 + 1;

        $r3 = <net.sourceforge.blowfishj.BinConverter: char[] HEXTAB>;

        $i5 = i3 + 1;

        $b4 = $r0[i3];

        $b4 = $b4 & 15;

        i3 = (int) $b4;

        $c6 = $r3[i3];

        virtualinvoke r1.<java.lang.StringBuffer: void setCharAt(int,char)>(i1, $c6);

        i3 = $i5;

        goto label1;

     label2:
        $r2 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    public static final int hexStrToBytes(java.lang.String, byte[], int, int, int)
    {
        byte[] $r0;
        char $c8;
        byte b7, b9;
        int i0, i1, $i2, $i3, i4, i5, i6, $i10;
        java.lang.String r1;
        boolean z0;

        r1 := @parameter0: java.lang.String;

        $r0 := @parameter1: byte[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $i2 := @parameter4: int;

        $i3 = virtualinvoke r1.<java.lang.String: int length()>();

        $i3 = $i3 - i0;

        $i3 = $i3 >> 1;

        if $i3 >= $i2 goto label01;

        $i2 = $i3;

     label01:
        $i3 = lengthof $r0;

        $i3 = $i3 - i1;

        if $i2 <= $i3 goto label02;

        $i2 = $i3;

     label02:
        $i3 = 0;

        i4 = i1;

     label03:
        if $i3 >= $i2 goto label10;

        z0 = 1;

        i5 = 0;

        i6 = i0;

        b7 = 0;

     label04:
        if i5 >= 2 goto label08;

        i0 = b7 << 4;

        b7 = (byte) i0;

        i0 = i6 + 1;

        $c8 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i6);

        i6 = (int) $c8;

        if i6 < 97 goto label06;

        i6 = (int) $c8;

        if i6 > 102 goto label06;

        i6 = (int) $c8;

        i6 = i6 - 97;

        b9 = (byte) i6;

        i6 = (int) b9;

        i6 = i6 + 10;

        $i10 = (int) b7;

        i6 = $i10 | i6;

        b7 = (byte) i6;

     label05:
        i5 = i5 + 1;

        i6 = i0;

        goto label04;

     label06:
        i6 = (int) $c8;

        if i6 < 48 goto label07;

        i6 = (int) $c8;

        if i6 > 57 goto label07;

        i6 = (int) $c8;

        i6 = i6 - 48;

        b9 = (byte) i6;

        b7 = b7 | b9;

        goto label05;

     label07:
        z0 = 0;

        goto label05;

     label08:
        if z0 == 0 goto label11;

        i0 = i4 + 1;

        $r0[i4] = b7;

     label09:
        $i3 = $i3 + 1;

        i4 = i0;

        i0 = i6;

        goto label03;

     label10:
        i0 = i4 - i1;

        return i0;

     label11:
        i0 = i4;

        goto label09;
    }

    public static final long intArrayToLong(int[], int)
    {
        int[] $r0;
        int $i0, $i1;
        long $l2, $l3;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $i1 = $r0[$i0];

        $l2 = (long) $i1;

        $l2 = $l2 << 32;

        $i0 = $i0 + 1;

        $i0 = $r0[$i0];

        $l3 = (long) $i0;

        $l3 = $l3 & 4294967295L;

        $l2 = $l2 | $l3;

        return $l2;
    }

    public static final void intToByteArray(int, byte[], int)
    {
        byte[] $r0;
        byte $b3;
        int $i0, $i1, $i2, $i4;

        $i0 := @parameter0: int;

        $r0 := @parameter1: byte[];

        $i1 := @parameter2: int;

        $i2 = $i0 >>> 24;

        $i2 = $i2 & 255;

        $b3 = (byte) $i2;

        $r0[$i1] = $b3;

        $i2 = $i1 + 1;

        $i4 = $i0 >>> 16;

        $i4 = $i4 & 255;

        $b3 = (byte) $i4;

        $r0[$i2] = $b3;

        $i2 = $i1 + 2;

        $i4 = $i0 >>> 8;

        $i4 = $i4 & 255;

        $b3 = (byte) $i4;

        $r0[$i2] = $b3;

        $i1 = $i1 + 3;

        $b3 = (byte) $i0;

        $r0[$i1] = $b3;

        return;
    }

    public static final int longHi32(long)
    {
        int $i1;
        long $l0;

        $l0 := @parameter0: long;

        $l0 = $l0 >>> 32;

        $i1 = (int) $l0;

        return $i1;
    }

    public static final int longLo32(long)
    {
        int $i1;
        long $l0;

        $l0 := @parameter0: long;

        $i1 = (int) $l0;

        return $i1;
    }

    public static final void longToByteArray(long, byte[], int)
    {
        byte[] $r0;
        long $l0, $l2;
        byte $b5;
        int $i1, i3, $i4, $i6;

        $l0 := @parameter0: long;

        $r0 := @parameter1: byte[];

        $i1 := @parameter2: int;

        $l2 = $l0 >>> 32;

        i3 = (int) $l2;

        $i4 = i3 >>> 24;

        $b5 = (byte) $i4;

        $r0[$i1] = $b5;

        $i4 = $i1 + 1;

        $i6 = i3 >>> 16;

        $i6 = $i6 & 255;

        $b5 = (byte) $i6;

        $r0[$i4] = $b5;

        $i4 = $i1 + 2;

        $i6 = i3 >>> 8;

        $i6 = $i6 & 255;

        $b5 = (byte) $i6;

        $r0[$i4] = $b5;

        $i4 = $i1 + 3;

        $b5 = (byte) i3;

        $r0[$i4] = $b5;

        i3 = (int) $l0;

        $i4 = $i1 + 4;

        $i6 = i3 >>> 24;

        $b5 = (byte) $i6;

        $r0[$i4] = $b5;

        $i4 = $i1 + 5;

        $i6 = i3 >>> 16;

        $i6 = $i6 & 255;

        $b5 = (byte) $i6;

        $r0[$i4] = $b5;

        $i4 = $i1 + 6;

        $i6 = i3 >>> 8;

        $i6 = $i6 & 255;

        $b5 = (byte) $i6;

        $r0[$i4] = $b5;

        $i1 = $i1 + 7;

        $b5 = (byte) i3;

        $r0[$i1] = $b5;

        return;
    }

    public static final void longToIntArray(long, int[], int)
    {
        int[] $r0;
        int $i1, $i3;
        long $l0, $l2;

        $l0 := @parameter0: long;

        $r0 := @parameter1: int[];

        $i1 := @parameter2: int;

        $l2 = $l0 >>> 32;

        $i3 = (int) $l2;

        $r0[$i1] = $i3;

        $i3 = $i1 + 1;

        $i1 = (int) $l0;

        $r0[$i3] = $i1;

        return;
    }

    public static final long makeLong(int, int)
    {
        int $i0, $i1;
        long $l2, $l3;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $l2 = (long) $i1;

        $l2 = $l2 << 32;

        $l3 = (long) $i0;

        $l3 = $l3 & 4294967295L;

        $l2 = $l2 | $l3;

        return $l2;
    }
}
