abstract class org.jsoup.parser.TreeBuilder extends java.lang.Object
{
    protected java.lang.String baseUri;
    protected org.jsoup.parser.Token currentToken;
    protected org.jsoup.nodes.Document doc;
    protected org.jsoup.parser.ParseErrorList errors;
    org.jsoup.parser.CharacterReader reader;
    protected org.jsoup.helper.DescendableLinkedList stack;
    org.jsoup.parser.Tokeniser tokeniser;

    void <init>()
    {
        org.jsoup.parser.TreeBuilder r0;

        r0 := @this: org.jsoup.parser.TreeBuilder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    protected org.jsoup.nodes.Element currentElement()
    {
        org.jsoup.helper.DescendableLinkedList $r2;
        org.jsoup.parser.TreeBuilder r0;
        org.jsoup.nodes.Element $r3;
        java.lang.Object $r1;

        r0 := @this: org.jsoup.parser.TreeBuilder;

        $r2 = r0.<org.jsoup.parser.TreeBuilder: org.jsoup.helper.DescendableLinkedList stack>;

        $r1 = virtualinvoke $r2.<org.jsoup.helper.DescendableLinkedList: java.lang.Object getLast()>();

        $r3 = (org.jsoup.nodes.Element) $r1;

        return $r3;
    }

    protected void initialiseParse(java.lang.String, java.lang.String, org.jsoup.parser.ParseErrorList)
    {
        org.jsoup.helper.DescendableLinkedList $r7;
        org.jsoup.parser.TreeBuilder r0;
        org.jsoup.parser.Tokeniser $r6;
        org.jsoup.parser.ParseErrorList $r3;
        org.jsoup.parser.CharacterReader $r4;
        org.jsoup.nodes.Document $r5;
        java.lang.String $r1, $r2;

        r0 := @this: org.jsoup.parser.TreeBuilder;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: org.jsoup.parser.ParseErrorList;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object,java.lang.String)>($r1, "String input must not be null");

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object,java.lang.String)>($r2, "BaseURI must not be null");

        $r5 = new org.jsoup.nodes.Document;

        specialinvoke $r5.<org.jsoup.nodes.Document: void <init>(java.lang.String)>($r2);

        r0.<org.jsoup.parser.TreeBuilder: org.jsoup.nodes.Document doc> = $r5;

        $r4 = new org.jsoup.parser.CharacterReader;

        specialinvoke $r4.<org.jsoup.parser.CharacterReader: void <init>(java.lang.String)>($r1);

        r0.<org.jsoup.parser.TreeBuilder: org.jsoup.parser.CharacterReader reader> = $r4;

        r0.<org.jsoup.parser.TreeBuilder: org.jsoup.parser.ParseErrorList errors> = $r3;

        $r6 = new org.jsoup.parser.Tokeniser;

        $r4 = r0.<org.jsoup.parser.TreeBuilder: org.jsoup.parser.CharacterReader reader>;

        specialinvoke $r6.<org.jsoup.parser.Tokeniser: void <init>(org.jsoup.parser.CharacterReader,org.jsoup.parser.ParseErrorList)>($r4, $r3);

        r0.<org.jsoup.parser.TreeBuilder: org.jsoup.parser.Tokeniser tokeniser> = $r6;

        $r7 = new org.jsoup.helper.DescendableLinkedList;

        specialinvoke $r7.<org.jsoup.helper.DescendableLinkedList: void <init>()>();

        r0.<org.jsoup.parser.TreeBuilder: org.jsoup.helper.DescendableLinkedList stack> = $r7;

        r0.<org.jsoup.parser.TreeBuilder: java.lang.String baseUri> = $r2;

        return;
    }

    org.jsoup.nodes.Document parse(java.lang.String, java.lang.String)
    {
        org.jsoup.parser.TreeBuilder r0;
        org.jsoup.nodes.Document $r4;
        java.lang.String $r1, $r2;
        org.jsoup.parser.ParseErrorList $r3;

        r0 := @this: org.jsoup.parser.TreeBuilder;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = staticinvoke <org.jsoup.parser.ParseErrorList: org.jsoup.parser.ParseErrorList noTracking()>();

        $r4 = virtualinvoke r0.<org.jsoup.parser.TreeBuilder: org.jsoup.nodes.Document parse(java.lang.String,java.lang.String,org.jsoup.parser.ParseErrorList)>($r1, $r2, $r3);

        return $r4;
    }

    org.jsoup.nodes.Document parse(java.lang.String, java.lang.String, org.jsoup.parser.ParseErrorList)
    {
        org.jsoup.parser.TreeBuilder r0;
        org.jsoup.nodes.Document r4;
        java.lang.String $r1, $r2;
        org.jsoup.parser.ParseErrorList $r3;

        r0 := @this: org.jsoup.parser.TreeBuilder;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: org.jsoup.parser.ParseErrorList;

        virtualinvoke r0.<org.jsoup.parser.TreeBuilder: void initialiseParse(java.lang.String,java.lang.String,org.jsoup.parser.ParseErrorList)>($r1, $r2, $r3);

        virtualinvoke r0.<org.jsoup.parser.TreeBuilder: void runParser()>();

        r4 = r0.<org.jsoup.parser.TreeBuilder: org.jsoup.nodes.Document doc>;

        return r4;
    }

    protected abstract boolean process(org.jsoup.parser.Token);

    protected void runParser()
    {
        org.jsoup.parser.TreeBuilder r0;
        org.jsoup.parser.Token $r2;
        org.jsoup.parser.Tokeniser $r3;
        org.jsoup.parser.Token$TokenType $r1, $r4;

        r0 := @this: org.jsoup.parser.TreeBuilder;

     label1:
        $r3 = r0.<org.jsoup.parser.TreeBuilder: org.jsoup.parser.Tokeniser tokeniser>;

        $r2 = virtualinvoke $r3.<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token read()>();

        virtualinvoke r0.<org.jsoup.parser.TreeBuilder: boolean process(org.jsoup.parser.Token)>($r2);

        $r4 = $r2.<org.jsoup.parser.Token: org.jsoup.parser.Token$TokenType type>;

        $r1 = <org.jsoup.parser.Token$TokenType: org.jsoup.parser.Token$TokenType EOF>;

        if $r4 != $r1 goto label1;

        return;
    }
}
