public class org.dom4j.dom.DOMDocumentType extends org.dom4j.tree.DefaultDocumentType implements org.w3c.dom.DocumentType
{

    public void <init>()
    {
        org.dom4j.dom.DOMDocumentType r0;

        r0 := @this: org.dom4j.dom.DOMDocumentType;

        specialinvoke r0.<org.dom4j.tree.DefaultDocumentType: void <init>()>();

        return;
    }

    public void <init>(java.lang.String, java.lang.String)
    {
        org.dom4j.dom.DOMDocumentType r0;
        java.lang.String $r1, $r2;

        r0 := @this: org.dom4j.dom.DOMDocumentType;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.dom4j.tree.DefaultDocumentType: void <init>(java.lang.String,java.lang.String)>($r1, $r2);

        return;
    }

    public void <init>(java.lang.String, java.lang.String, java.lang.String)
    {
        org.dom4j.dom.DOMDocumentType r0;
        java.lang.String $r1, $r2, $r3;

        r0 := @this: org.dom4j.dom.DOMDocumentType;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        specialinvoke r0.<org.dom4j.tree.DefaultDocumentType: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r1, $r2, $r3);

        return;
    }

    private void checkNewChildNode(org.w3c.dom.Node) throws org.w3c.dom.DOMException
    {
        org.dom4j.dom.DOMDocumentType r0;
        org.w3c.dom.Node $r1;
        org.w3c.dom.DOMException $r2;

        r0 := @this: org.dom4j.dom.DOMDocumentType;

        $r1 := @parameter0: org.w3c.dom.Node;

        $r2 = new org.w3c.dom.DOMException;

        specialinvoke $r2.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(3, "DocumentType nodes cannot have children");

        throw $r2;
    }

    public org.w3c.dom.Node appendChild(org.w3c.dom.Node) throws org.w3c.dom.DOMException
    {
        org.dom4j.dom.DOMDocumentType r0;
        org.w3c.dom.Node $r1;

        r0 := @this: org.dom4j.dom.DOMDocumentType;

        $r1 := @parameter0: org.w3c.dom.Node;

        specialinvoke r0.<org.dom4j.dom.DOMDocumentType: void checkNewChildNode(org.w3c.dom.Node)>($r1);

        $r1 = staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.Node appendChild(org.dom4j.Node,org.w3c.dom.Node)>(r0, $r1);

        return $r1;
    }

    public org.w3c.dom.Node cloneNode(boolean)
    {
        org.dom4j.dom.DOMDocumentType r0;
        boolean $z0;
        org.w3c.dom.Node $r1;

        r0 := @this: org.dom4j.dom.DOMDocumentType;

        $z0 := @parameter0: boolean;

        $r1 = staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.Node cloneNode(org.dom4j.Node,boolean)>(r0, $z0);

        return $r1;
    }

    public org.w3c.dom.NamedNodeMap getAttributes()
    {
        org.dom4j.dom.DOMDocumentType r0;

        r0 := @this: org.dom4j.dom.DOMDocumentType;

        return null;
    }

    public org.w3c.dom.NodeList getChildNodes()
    {
        org.dom4j.dom.DOMDocumentType r0;
        org.w3c.dom.NodeList $r1;

        r0 := @this: org.dom4j.dom.DOMDocumentType;

        $r1 = staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.NodeList getChildNodes(org.dom4j.Node)>(r0);

        return $r1;
    }

    public org.w3c.dom.NamedNodeMap getEntities()
    {
        org.dom4j.dom.DOMDocumentType r0;

        r0 := @this: org.dom4j.dom.DOMDocumentType;

        return null;
    }

    public org.w3c.dom.Node getFirstChild()
    {
        org.dom4j.dom.DOMDocumentType r0;
        org.w3c.dom.Node $r1;

        r0 := @this: org.dom4j.dom.DOMDocumentType;

        $r1 = staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.Node getFirstChild(org.dom4j.Node)>(r0);

        return $r1;
    }

    public java.lang.String getInternalSubset()
    {
        org.dom4j.dom.DOMDocumentType r0;
        java.lang.String $r1;

        r0 := @this: org.dom4j.dom.DOMDocumentType;

        $r1 = virtualinvoke r0.<org.dom4j.dom.DOMDocumentType: java.lang.String getElementName()>();

        return $r1;
    }

    public org.w3c.dom.Node getLastChild()
    {
        org.dom4j.dom.DOMDocumentType r0;
        org.w3c.dom.Node $r1;

        r0 := @this: org.dom4j.dom.DOMDocumentType;

        $r1 = staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.Node getLastChild(org.dom4j.Node)>(r0);

        return $r1;
    }

    public java.lang.String getLocalName()
    {
        org.dom4j.dom.DOMDocumentType r0;
        java.lang.String $r1;

        r0 := @this: org.dom4j.dom.DOMDocumentType;

        $r1 = staticinvoke <org.dom4j.dom.DOMNodeHelper: java.lang.String getLocalName(org.dom4j.Node)>(r0);

        return $r1;
    }

    public java.lang.String getNamespaceURI()
    {
        org.dom4j.dom.DOMDocumentType r0;
        java.lang.String $r1;

        r0 := @this: org.dom4j.dom.DOMDocumentType;

        $r1 = staticinvoke <org.dom4j.dom.DOMNodeHelper: java.lang.String getNamespaceURI(org.dom4j.Node)>(r0);

        return $r1;
    }

    public org.w3c.dom.Node getNextSibling()
    {
        org.dom4j.dom.DOMDocumentType r0;
        org.w3c.dom.Node $r1;

        r0 := @this: org.dom4j.dom.DOMDocumentType;

        $r1 = staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.Node getNextSibling(org.dom4j.Node)>(r0);

        return $r1;
    }

    public java.lang.String getNodeName()
    {
        org.dom4j.dom.DOMDocumentType r0;
        java.lang.String $r1;

        r0 := @this: org.dom4j.dom.DOMDocumentType;

        $r1 = virtualinvoke r0.<org.dom4j.dom.DOMDocumentType: java.lang.String getName()>();

        return $r1;
    }

    public java.lang.String getNodeValue() throws org.w3c.dom.DOMException
    {
        org.dom4j.dom.DOMDocumentType r0;

        r0 := @this: org.dom4j.dom.DOMDocumentType;

        return null;
    }

    public org.w3c.dom.NamedNodeMap getNotations()
    {
        org.dom4j.dom.DOMDocumentType r0;

        r0 := @this: org.dom4j.dom.DOMDocumentType;

        return null;
    }

    public org.w3c.dom.Document getOwnerDocument()
    {
        org.dom4j.dom.DOMDocumentType r0;
        org.w3c.dom.Document $r1;

        r0 := @this: org.dom4j.dom.DOMDocumentType;

        $r1 = staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.Document getOwnerDocument(org.dom4j.Node)>(r0);

        return $r1;
    }

    public org.w3c.dom.Node getParentNode()
    {
        org.dom4j.dom.DOMDocumentType r0;
        org.w3c.dom.Node $r1;

        r0 := @this: org.dom4j.dom.DOMDocumentType;

        $r1 = staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.Node getParentNode(org.dom4j.Node)>(r0);

        return $r1;
    }

    public java.lang.String getPrefix()
    {
        org.dom4j.dom.DOMDocumentType r0;
        java.lang.String $r1;

        r0 := @this: org.dom4j.dom.DOMDocumentType;

        $r1 = staticinvoke <org.dom4j.dom.DOMNodeHelper: java.lang.String getPrefix(org.dom4j.Node)>(r0);

        return $r1;
    }

    public org.w3c.dom.Node getPreviousSibling()
    {
        org.dom4j.dom.DOMDocumentType r0;
        org.w3c.dom.Node $r1;

        r0 := @this: org.dom4j.dom.DOMDocumentType;

        $r1 = staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.Node getPreviousSibling(org.dom4j.Node)>(r0);

        return $r1;
    }

    public java.lang.String getPublicId()
    {
        org.dom4j.dom.DOMDocumentType r0;
        java.lang.String $r1;

        r0 := @this: org.dom4j.dom.DOMDocumentType;

        $r1 = virtualinvoke r0.<org.dom4j.dom.DOMDocumentType: java.lang.String getPublicID()>();

        return $r1;
    }

    public java.lang.String getSystemId()
    {
        org.dom4j.dom.DOMDocumentType r0;
        java.lang.String $r1;

        r0 := @this: org.dom4j.dom.DOMDocumentType;

        $r1 = virtualinvoke r0.<org.dom4j.dom.DOMDocumentType: java.lang.String getSystemID()>();

        return $r1;
    }

    public boolean hasAttributes()
    {
        org.dom4j.dom.DOMDocumentType r0;
        boolean $z0;

        r0 := @this: org.dom4j.dom.DOMDocumentType;

        $z0 = staticinvoke <org.dom4j.dom.DOMNodeHelper: boolean hasAttributes(org.dom4j.Node)>(r0);

        return $z0;
    }

    public boolean hasChildNodes()
    {
        org.dom4j.dom.DOMDocumentType r0;
        boolean $z0;

        r0 := @this: org.dom4j.dom.DOMDocumentType;

        $z0 = staticinvoke <org.dom4j.dom.DOMNodeHelper: boolean hasChildNodes(org.dom4j.Node)>(r0);

        return $z0;
    }

    public org.w3c.dom.Node insertBefore(org.w3c.dom.Node, org.w3c.dom.Node) throws org.w3c.dom.DOMException
    {
        org.dom4j.dom.DOMDocumentType r0;
        org.w3c.dom.Node $r1, $r2;

        r0 := @this: org.dom4j.dom.DOMDocumentType;

        $r1 := @parameter0: org.w3c.dom.Node;

        $r2 := @parameter1: org.w3c.dom.Node;

        specialinvoke r0.<org.dom4j.dom.DOMDocumentType: void checkNewChildNode(org.w3c.dom.Node)>($r1);

        $r1 = staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.Node insertBefore(org.dom4j.Node,org.w3c.dom.Node,org.w3c.dom.Node)>(r0, $r1, $r2);

        return $r1;
    }

    public boolean isSupported(java.lang.String, java.lang.String)
    {
        org.dom4j.dom.DOMDocumentType r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: org.dom4j.dom.DOMDocumentType;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.dom4j.dom.DOMNodeHelper: boolean isSupported(org.dom4j.Node,java.lang.String,java.lang.String)>(r0, $r1, $r2);

        return $z0;
    }

    public void normalize()
    {
        org.dom4j.dom.DOMDocumentType r0;

        r0 := @this: org.dom4j.dom.DOMDocumentType;

        staticinvoke <org.dom4j.dom.DOMNodeHelper: void normalize(org.dom4j.Node)>(r0);

        return;
    }

    public org.w3c.dom.Node removeChild(org.w3c.dom.Node) throws org.w3c.dom.DOMException
    {
        org.dom4j.dom.DOMDocumentType r0;
        org.w3c.dom.Node $r1;

        r0 := @this: org.dom4j.dom.DOMDocumentType;

        $r1 := @parameter0: org.w3c.dom.Node;

        $r1 = staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.Node removeChild(org.dom4j.Node,org.w3c.dom.Node)>(r0, $r1);

        return $r1;
    }

    public org.w3c.dom.Node replaceChild(org.w3c.dom.Node, org.w3c.dom.Node) throws org.w3c.dom.DOMException
    {
        org.dom4j.dom.DOMDocumentType r0;
        org.w3c.dom.Node $r1, $r2;

        r0 := @this: org.dom4j.dom.DOMDocumentType;

        $r1 := @parameter0: org.w3c.dom.Node;

        $r2 := @parameter1: org.w3c.dom.Node;

        specialinvoke r0.<org.dom4j.dom.DOMDocumentType: void checkNewChildNode(org.w3c.dom.Node)>($r1);

        $r1 = staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.Node replaceChild(org.dom4j.Node,org.w3c.dom.Node,org.w3c.dom.Node)>(r0, $r1, $r2);

        return $r1;
    }

    public void setNodeValue(java.lang.String) throws org.w3c.dom.DOMException
    {
        org.dom4j.dom.DOMDocumentType r0;
        java.lang.String $r1;

        r0 := @this: org.dom4j.dom.DOMDocumentType;

        $r1 := @parameter0: java.lang.String;

        return;
    }

    public void setPrefix(java.lang.String) throws org.w3c.dom.DOMException
    {
        org.dom4j.dom.DOMDocumentType r0;
        java.lang.String $r1;

        r0 := @this: org.dom4j.dom.DOMDocumentType;

        $r1 := @parameter0: java.lang.String;

        staticinvoke <org.dom4j.dom.DOMNodeHelper: void setPrefix(org.dom4j.Node,java.lang.String)>(r0, $r1);

        return;
    }

    public boolean supports(java.lang.String, java.lang.String)
    {
        org.dom4j.dom.DOMDocumentType r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: org.dom4j.dom.DOMDocumentType;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.dom4j.dom.DOMNodeHelper: boolean supports(org.dom4j.Node,java.lang.String,java.lang.String)>(r0, $r1, $r2);

        return $z0;
    }
}
