public class it.sauronsoftware.base64.Base64 extends java.lang.Object
{

    public void <init>()
    {
        it.sauronsoftware.base64.Base64 r0;

        r0 := @this: it.sauronsoftware.base64.Base64;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static void copy(java.io.InputStream, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream $r1;
        byte[] $r2;
        int $i0;
        java.io.InputStream $r0;

        $r0 := @parameter0: java.io.InputStream;

        $r1 := @parameter1: java.io.OutputStream;

        $r2 = newarray (byte)[1024];

     label1:
        $i0 = virtualinvoke $r0.<java.io.InputStream: int read(byte[])>($r2);

        if $i0 == -1 goto label2;

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>($r2, 0, $i0);

        goto label1;

     label2:
        return;
    }

    public static java.lang.String decode(java.lang.String) throws java.lang.RuntimeException
    {
        java.lang.Throwable $r2;
        byte[] $r1;
        java.lang.String $r0;
        java.lang.RuntimeException $r3;

        $r0 := @parameter0: java.lang.String;

     label1:
        $r1 = virtualinvoke $r0.<java.lang.String: byte[] getBytes(java.lang.String)>("ASCII");

     label2:
        $r1 = staticinvoke <it.sauronsoftware.base64.Base64: byte[] decode(byte[])>($r1);

        $r0 = new java.lang.String;

        specialinvoke $r0.<java.lang.String: void <init>(byte[])>($r1);

        return $r0;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("ASCII is not supported!", $r2);

        throw $r3;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public static java.lang.String decode(java.lang.String, java.lang.String) throws java.lang.RuntimeException
    {
        java.lang.Throwable $r3, $r5;
        byte[] $r2;
        java.lang.StringBuffer $r6;
        java.lang.String $r0, $r1;
        java.lang.RuntimeException $r4;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

     label1:
        $r2 = virtualinvoke $r0.<java.lang.String: byte[] getBytes(java.lang.String)>("ASCII");

     label2:
        $r2 = staticinvoke <it.sauronsoftware.base64.Base64: byte[] decode(byte[])>($r2);

        $r0 = new java.lang.String;

     label3:
        specialinvoke $r0.<java.lang.String: void <init>(byte[],java.lang.String)>($r2, $r1);

     label4:
        return $r0;

     label5:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("ASCII is not supported!", $r3);

        throw $r4;

     label6:
        $r5 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unsupported charset: ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r0 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r0, $r5);

        throw $r4;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label5;
        catch java.io.UnsupportedEncodingException from label3 to label4 with label6;
    }

    public static void decode(java.io.File, java.io.File) throws java.io.IOException
    {
        java.lang.Throwable $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        java.io.FileOutputStream $r4;
        java.io.FileInputStream $r2, $r3;
        java.io.File $r0, $r1;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        $r2 = null;

     label01:
        $r3 = new java.io.FileInputStream;

        specialinvoke $r3.<java.io.FileInputStream: void <init>(java.io.File)>($r0);

     label02:
        $r4 = new java.io.FileOutputStream;

        specialinvoke $r4.<java.io.FileOutputStream: void <init>(java.io.File)>($r1);

     label03:
        staticinvoke <it.sauronsoftware.base64.Base64: void decode(java.io.InputStream,java.io.OutputStream)>($r3, $r4);

     label04:
        if $r4 == null goto label06;

     label05:
        virtualinvoke $r4.<java.io.OutputStream: void close()>();

     label06:
        if $r3 == null goto label21;

     label07:
        virtualinvoke $r3.<java.io.InputStream: void close()>();

     label08:
        return;

     label09:
        $r5 := @caughtexception;

        $r4 = null;

     label10:
        if $r4 == null goto label12;

     label11:
        virtualinvoke $r4.<java.io.OutputStream: void close()>();

     label12:
        if $r2 == null goto label14;

     label13:
        virtualinvoke $r2.<java.io.InputStream: void close()>();

     label14:
        throw $r5;

     label15:
        $r6 := @caughtexception;

        goto label06;

     label16:
        $r7 := @caughtexception;

        return;

     label17:
        $r8 := @caughtexception;

        goto label12;

     label18:
        $r9 := @caughtexception;

        goto label14;

     label19:
        $r10 := @caughtexception;

        $r4 = null;

        $r2 = $r3;

        $r5 = $r10;

        goto label10;

     label20:
        $r11 := @caughtexception;

        $r2 = $r3;

        $r5 = $r11;

        goto label10;

     label21:
        return;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label02 to label03 with label19;
        catch java.lang.Throwable from label03 to label04 with label20;
        catch java.lang.Throwable from label05 to label06 with label15;
        catch java.lang.Throwable from label07 to label08 with label16;
        catch java.lang.Throwable from label11 to label12 with label17;
        catch java.lang.Throwable from label13 to label14 with label18;
    }

    public static void decode(java.io.InputStream, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream $r1;
        it.sauronsoftware.base64.Base64InputStream $r2;
        java.io.InputStream $r0;

        $r0 := @parameter0: java.io.InputStream;

        $r1 := @parameter1: java.io.OutputStream;

        $r2 = new it.sauronsoftware.base64.Base64InputStream;

        specialinvoke $r2.<it.sauronsoftware.base64.Base64InputStream: void <init>(java.io.InputStream)>($r0);

        staticinvoke <it.sauronsoftware.base64.Base64: void copy(java.io.InputStream,java.io.OutputStream)>($r2, $r1);

        return;
    }

    public static byte[] decode(byte[]) throws java.lang.RuntimeException
    {
        java.lang.Throwable $r4, $r5, $r6, $r7, $r8, $r9;
        byte[] $r0;
        java.io.ByteArrayOutputStream $r1;
        java.lang.RuntimeException $r2;
        java.io.ByteArrayInputStream $r3;

        $r0 := @parameter0: byte[];

        $r3 = new java.io.ByteArrayInputStream;

        specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[])>($r0);

        $r1 = new java.io.ByteArrayOutputStream;

        specialinvoke $r1.<java.io.ByteArrayOutputStream: void <init>()>();

     label01:
        staticinvoke <it.sauronsoftware.base64.Base64: void decode(java.io.InputStream,java.io.OutputStream)>($r3, $r1);

     label02:
        virtualinvoke $r3.<java.io.ByteArrayInputStream: void close()>();

     label03:
        virtualinvoke $r1.<java.io.ByteArrayOutputStream: void close()>();

     label04:
        $r0 = virtualinvoke $r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r0;

     label05:
        $r4 := @caughtexception;

     label06:
        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected I/O error", $r4);

        throw $r2;

     label07:
        $r5 := @caughtexception;

     label08:
        virtualinvoke $r3.<java.io.ByteArrayInputStream: void close()>();

     label09:
        virtualinvoke $r1.<java.io.ByteArrayOutputStream: void close()>();

     label10:
        throw $r5;

     label11:
        $r6 := @caughtexception;

        goto label03;

     label12:
        $r7 := @caughtexception;

        goto label04;

     label13:
        $r8 := @caughtexception;

        goto label09;

     label14:
        $r9 := @caughtexception;

        goto label10;

        catch java.io.IOException from label01 to label02 with label05;
        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label06 to label07 with label07;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label09 to label10 with label14;
    }

    public static java.lang.String encode(java.lang.String) throws java.lang.RuntimeException
    {
        java.lang.Throwable $r2;
        byte[] $r1;
        java.lang.String $r0;
        java.lang.RuntimeException $r3;

        $r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        $r1 = staticinvoke <it.sauronsoftware.base64.Base64: byte[] encode(byte[])>($r1);

        $r0 = new java.lang.String;

     label1:
        specialinvoke $r0.<java.lang.String: void <init>(byte[],java.lang.String)>($r1, "ASCII");

     label2:
        return $r0;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("ASCII is not supported!", $r2);

        throw $r3;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public static java.lang.String encode(java.lang.String, java.lang.String) throws java.lang.RuntimeException
    {
        java.lang.Throwable $r3, $r6;
        byte[] $r2;
        java.lang.StringBuffer $r5;
        java.lang.String $r0, $r1;
        java.lang.RuntimeException $r4;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

     label1:
        $r2 = virtualinvoke $r0.<java.lang.String: byte[] getBytes(java.lang.String)>($r1);

     label2:
        $r2 = staticinvoke <it.sauronsoftware.base64.Base64: byte[] encode(byte[])>($r2);

        $r0 = new java.lang.String;

     label3:
        specialinvoke $r0.<java.lang.String: void <init>(byte[],java.lang.String)>($r2, "ASCII");

     label4:
        return $r0;

     label5:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unsupported charset: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r0 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r0, $r3);

        throw $r4;

     label6:
        $r6 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("ASCII is not supported!", $r6);

        throw $r4;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label5;
        catch java.io.UnsupportedEncodingException from label3 to label4 with label6;
    }

    public static void encode(java.io.File, java.io.File) throws java.io.IOException
    {
        java.lang.Throwable $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        java.io.FileOutputStream $r4;
        java.io.FileInputStream $r2, $r3;
        java.io.File $r0, $r1;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        $r2 = null;

     label01:
        $r3 = new java.io.FileInputStream;

        specialinvoke $r3.<java.io.FileInputStream: void <init>(java.io.File)>($r0);

     label02:
        $r4 = new java.io.FileOutputStream;

        specialinvoke $r4.<java.io.FileOutputStream: void <init>(java.io.File)>($r1);

     label03:
        staticinvoke <it.sauronsoftware.base64.Base64: void encode(java.io.InputStream,java.io.OutputStream)>($r3, $r4);

     label04:
        if $r4 == null goto label06;

     label05:
        virtualinvoke $r4.<java.io.OutputStream: void close()>();

     label06:
        if $r3 == null goto label21;

     label07:
        virtualinvoke $r3.<java.io.InputStream: void close()>();

     label08:
        return;

     label09:
        $r5 := @caughtexception;

        $r4 = null;

     label10:
        if $r4 == null goto label12;

     label11:
        virtualinvoke $r4.<java.io.OutputStream: void close()>();

     label12:
        if $r2 == null goto label14;

     label13:
        virtualinvoke $r2.<java.io.InputStream: void close()>();

     label14:
        throw $r5;

     label15:
        $r6 := @caughtexception;

        goto label06;

     label16:
        $r7 := @caughtexception;

        return;

     label17:
        $r8 := @caughtexception;

        goto label12;

     label18:
        $r9 := @caughtexception;

        goto label14;

     label19:
        $r10 := @caughtexception;

        $r4 = null;

        $r2 = $r3;

        $r5 = $r10;

        goto label10;

     label20:
        $r11 := @caughtexception;

        $r2 = $r3;

        $r5 = $r11;

        goto label10;

     label21:
        return;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label02 to label03 with label19;
        catch java.lang.Throwable from label03 to label04 with label20;
        catch java.lang.Throwable from label05 to label06 with label15;
        catch java.lang.Throwable from label07 to label08 with label16;
        catch java.lang.Throwable from label11 to label12 with label17;
        catch java.lang.Throwable from label13 to label14 with label18;
    }

    public static void encode(java.io.File, java.io.File, int) throws java.io.IOException
    {
        java.lang.Throwable $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        java.io.FileOutputStream $r4;
        java.io.FileInputStream $r2, $r3;
        java.io.File $r0, $r1;
        int $i0;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        $i0 := @parameter2: int;

        $r2 = null;

     label01:
        $r3 = new java.io.FileInputStream;

        specialinvoke $r3.<java.io.FileInputStream: void <init>(java.io.File)>($r0);

     label02:
        $r4 = new java.io.FileOutputStream;

        specialinvoke $r4.<java.io.FileOutputStream: void <init>(java.io.File)>($r1);

     label03:
        staticinvoke <it.sauronsoftware.base64.Base64: void encode(java.io.InputStream,java.io.OutputStream,int)>($r3, $r4, $i0);

     label04:
        if $r4 == null goto label06;

     label05:
        virtualinvoke $r4.<java.io.OutputStream: void close()>();

     label06:
        if $r3 == null goto label21;

     label07:
        virtualinvoke $r3.<java.io.InputStream: void close()>();

     label08:
        return;

     label09:
        $r5 := @caughtexception;

        $r4 = null;

     label10:
        if $r4 == null goto label12;

     label11:
        virtualinvoke $r4.<java.io.OutputStream: void close()>();

     label12:
        if $r2 == null goto label14;

     label13:
        virtualinvoke $r2.<java.io.InputStream: void close()>();

     label14:
        throw $r5;

     label15:
        $r6 := @caughtexception;

        goto label06;

     label16:
        $r7 := @caughtexception;

        return;

     label17:
        $r8 := @caughtexception;

        goto label12;

     label18:
        $r9 := @caughtexception;

        goto label14;

     label19:
        $r10 := @caughtexception;

        $r4 = null;

        $r2 = $r3;

        $r5 = $r10;

        goto label10;

     label20:
        $r11 := @caughtexception;

        $r2 = $r3;

        $r5 = $r11;

        goto label10;

     label21:
        return;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label02 to label03 with label19;
        catch java.lang.Throwable from label03 to label04 with label20;
        catch java.lang.Throwable from label05 to label06 with label15;
        catch java.lang.Throwable from label07 to label08 with label16;
        catch java.lang.Throwable from label11 to label12 with label17;
        catch java.lang.Throwable from label13 to label14 with label18;
    }

    public static void encode(java.io.InputStream, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream $r1;
        java.io.InputStream $r0;

        $r0 := @parameter0: java.io.InputStream;

        $r1 := @parameter1: java.io.OutputStream;

        staticinvoke <it.sauronsoftware.base64.Base64: void encode(java.io.InputStream,java.io.OutputStream,int)>($r0, $r1, 0);

        return;
    }

    public static void encode(java.io.InputStream, java.io.OutputStream, int) throws java.io.IOException
    {
        java.io.OutputStream $r1;
        int $i0;
        it.sauronsoftware.base64.Base64OutputStream $r2;
        java.io.InputStream $r0;

        $r0 := @parameter0: java.io.InputStream;

        $r1 := @parameter1: java.io.OutputStream;

        $i0 := @parameter2: int;

        $r2 = new it.sauronsoftware.base64.Base64OutputStream;

        specialinvoke $r2.<it.sauronsoftware.base64.Base64OutputStream: void <init>(java.io.OutputStream,int)>($r1, 0);

        staticinvoke <it.sauronsoftware.base64.Base64: void copy(java.io.InputStream,java.io.OutputStream)>($r0, $r2);

        virtualinvoke $r2.<it.sauronsoftware.base64.Base64OutputStream: void commit()>();

        return;
    }

    public static byte[] encode(byte[]) throws java.lang.RuntimeException
    {
        byte[] $r0;

        $r0 := @parameter0: byte[];

        $r0 = staticinvoke <it.sauronsoftware.base64.Base64: byte[] encode(byte[],int)>($r0, 0);

        return $r0;
    }

    public static byte[] encode(byte[], int) throws java.lang.RuntimeException
    {
        java.lang.Throwable $r4, $r5, $r6, $r7, $r8, $r9;
        byte[] $r0;
        java.io.ByteArrayOutputStream $r1;
        java.lang.RuntimeException $r2;
        java.io.ByteArrayInputStream $r3;
        int $i0;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r3 = new java.io.ByteArrayInputStream;

        specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[])>($r0);

        $r1 = new java.io.ByteArrayOutputStream;

        specialinvoke $r1.<java.io.ByteArrayOutputStream: void <init>()>();

     label01:
        staticinvoke <it.sauronsoftware.base64.Base64: void encode(java.io.InputStream,java.io.OutputStream,int)>($r3, $r1, 0);

     label02:
        virtualinvoke $r3.<java.io.ByteArrayInputStream: void close()>();

     label03:
        virtualinvoke $r1.<java.io.ByteArrayOutputStream: void close()>();

     label04:
        $r0 = virtualinvoke $r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r0;

     label05:
        $r4 := @caughtexception;

     label06:
        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected I/O error", $r4);

        throw $r2;

     label07:
        $r5 := @caughtexception;

     label08:
        virtualinvoke $r3.<java.io.ByteArrayInputStream: void close()>();

     label09:
        virtualinvoke $r1.<java.io.ByteArrayOutputStream: void close()>();

     label10:
        throw $r5;

     label11:
        $r6 := @caughtexception;

        goto label03;

     label12:
        $r7 := @caughtexception;

        goto label04;

     label13:
        $r8 := @caughtexception;

        goto label09;

     label14:
        $r9 := @caughtexception;

        goto label10;

        catch java.io.IOException from label01 to label02 with label05;
        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label06 to label07 with label07;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label09 to label10 with label14;
    }
}
