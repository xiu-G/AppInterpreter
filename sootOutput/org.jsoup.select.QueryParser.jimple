class org.jsoup.select.QueryParser extends java.lang.Object
{
    private static final java.util.regex.Pattern NTH_AB;
    private static final java.util.regex.Pattern NTH_B;
    private static final java.lang.String[] combinators;
    private java.util.List evals;
    private java.lang.String query;
    private org.jsoup.parser.TokenQueue tq;

    static void <clinit>()
    {
        java.lang.String[] $r0;
        java.util.regex.Pattern $r1;

        $r0 = newarray (java.lang.String)[5];

        $r0[0] = ",";

        $r0[1] = ">";

        $r0[2] = "+";

        $r0[3] = "~";

        $r0[4] = " ";

        <org.jsoup.select.QueryParser: java.lang.String[] combinators> = $r0;

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>("((\\+|-)?(\\d+)?)n(\\s*(\\+|-)?\\s*\\d+)?", 2);

        <org.jsoup.select.QueryParser: java.util.regex.Pattern NTH_AB> = $r1;

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(\\+|-)?(\\d+)");

        <org.jsoup.select.QueryParser: java.util.regex.Pattern NTH_B> = $r1;

        return;
    }

    private void <init>(java.lang.String)
    {
        org.jsoup.parser.TokenQueue $r3;
        java.lang.String $r1;
        org.jsoup.select.QueryParser r0;
        java.util.ArrayList $r2;

        r0 := @this: org.jsoup.select.QueryParser;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.jsoup.select.QueryParser: java.util.List evals> = $r2;

        r0.<org.jsoup.select.QueryParser: java.lang.String query> = $r1;

        $r3 = new org.jsoup.parser.TokenQueue;

        specialinvoke $r3.<org.jsoup.parser.TokenQueue: void <init>(java.lang.String)>($r1);

        r0.<org.jsoup.select.QueryParser: org.jsoup.parser.TokenQueue tq> = $r3;

        return;
    }

    private void allElements()
    {
        java.util.List $r1;
        org.jsoup.select.QueryParser r0;
        org.jsoup.select.Evaluator$AllElements $r2;

        r0 := @this: org.jsoup.select.QueryParser;

        $r1 = r0.<org.jsoup.select.QueryParser: java.util.List evals>;

        $r2 = new org.jsoup.select.Evaluator$AllElements;

        specialinvoke $r2.<org.jsoup.select.Evaluator$AllElements: void <init>()>();

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        return;
    }

    private void byAttribute()
    {
        java.lang.Object[] $r17;
        org.jsoup.select.Evaluator$AttributeWithValue $r8;
        org.jsoup.select.Evaluator$AttributeWithValueStarting $r11;
        org.jsoup.select.Evaluator$AttributeWithValueNot $r10;
        java.lang.String[] $r4;
        org.jsoup.select.QueryParser r0;
        org.jsoup.select.Evaluator$AttributeWithValueMatching $r14;
        org.jsoup.select.Evaluator$AttributeWithValueEnding $r12;
        java.lang.String $r3, $r9;
        boolean $z0;
        org.jsoup.select.Selector$SelectorParseException $r16;
        org.jsoup.parser.TokenQueue r1, $r2;
        org.jsoup.select.Evaluator$Attribute $r7;
        java.util.List $r5;
        org.jsoup.select.Evaluator$AttributeStarting $r6;
        org.jsoup.select.Evaluator$AttributeWithValueContaining $r13;
        java.util.regex.Pattern $r15;

        r0 := @this: org.jsoup.select.QueryParser;

        r1 = new org.jsoup.parser.TokenQueue;

        $r2 = r0.<org.jsoup.select.QueryParser: org.jsoup.parser.TokenQueue tq>;

        $r3 = virtualinvoke $r2.<org.jsoup.parser.TokenQueue: java.lang.String chompBalanced(char,char)>(91, 93);

        specialinvoke r1.<org.jsoup.parser.TokenQueue: void <init>(java.lang.String)>($r3);

        $r4 = newarray (java.lang.String)[6];

        $r4[0] = "=";

        $r4[1] = "!=";

        $r4[2] = "^=";

        $r4[3] = "$=";

        $r4[4] = "*=";

        $r4[5] = "~=";

        $r3 = virtualinvoke r1.<org.jsoup.parser.TokenQueue: java.lang.String consumeToAny(java.lang.String[])>($r4);

        staticinvoke <org.jsoup.helper.Validate: void notEmpty(java.lang.String)>($r3);

        virtualinvoke r1.<org.jsoup.parser.TokenQueue: boolean consumeWhitespace()>();

        $z0 = virtualinvoke r1.<org.jsoup.parser.TokenQueue: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("^");

        if $z0 == 0 goto label1;

        $r5 = r0.<org.jsoup.select.QueryParser: java.util.List evals>;

        $r6 = new org.jsoup.select.Evaluator$AttributeStarting;

        $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int)>(1);

        specialinvoke $r6.<org.jsoup.select.Evaluator$AttributeStarting: void <init>(java.lang.String)>($r3);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r6);

        return;

     label1:
        $r5 = r0.<org.jsoup.select.QueryParser: java.util.List evals>;

        $r7 = new org.jsoup.select.Evaluator$Attribute;

        specialinvoke $r7.<org.jsoup.select.Evaluator$Attribute: void <init>(java.lang.String)>($r3);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r7);

        return;

     label2:
        $z0 = virtualinvoke r1.<org.jsoup.parser.TokenQueue: boolean matchChomp(java.lang.String)>("=");

        if $z0 == 0 goto label3;

        $r5 = r0.<org.jsoup.select.QueryParser: java.util.List evals>;

        $r8 = new org.jsoup.select.Evaluator$AttributeWithValue;

        $r9 = virtualinvoke r1.<org.jsoup.parser.TokenQueue: java.lang.String remainder()>();

        specialinvoke $r8.<org.jsoup.select.Evaluator$AttributeWithValue: void <init>(java.lang.String,java.lang.String)>($r3, $r9);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r8);

        return;

     label3:
        $z0 = virtualinvoke r1.<org.jsoup.parser.TokenQueue: boolean matchChomp(java.lang.String)>("!=");

        if $z0 == 0 goto label4;

        $r5 = r0.<org.jsoup.select.QueryParser: java.util.List evals>;

        $r10 = new org.jsoup.select.Evaluator$AttributeWithValueNot;

        $r9 = virtualinvoke r1.<org.jsoup.parser.TokenQueue: java.lang.String remainder()>();

        specialinvoke $r10.<org.jsoup.select.Evaluator$AttributeWithValueNot: void <init>(java.lang.String,java.lang.String)>($r3, $r9);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r10);

        return;

     label4:
        $z0 = virtualinvoke r1.<org.jsoup.parser.TokenQueue: boolean matchChomp(java.lang.String)>("^=");

        if $z0 == 0 goto label5;

        $r5 = r0.<org.jsoup.select.QueryParser: java.util.List evals>;

        $r11 = new org.jsoup.select.Evaluator$AttributeWithValueStarting;

        $r9 = virtualinvoke r1.<org.jsoup.parser.TokenQueue: java.lang.String remainder()>();

        specialinvoke $r11.<org.jsoup.select.Evaluator$AttributeWithValueStarting: void <init>(java.lang.String,java.lang.String)>($r3, $r9);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r11);

        return;

     label5:
        $z0 = virtualinvoke r1.<org.jsoup.parser.TokenQueue: boolean matchChomp(java.lang.String)>("$=");

        if $z0 == 0 goto label6;

        $r5 = r0.<org.jsoup.select.QueryParser: java.util.List evals>;

        $r12 = new org.jsoup.select.Evaluator$AttributeWithValueEnding;

        $r9 = virtualinvoke r1.<org.jsoup.parser.TokenQueue: java.lang.String remainder()>();

        specialinvoke $r12.<org.jsoup.select.Evaluator$AttributeWithValueEnding: void <init>(java.lang.String,java.lang.String)>($r3, $r9);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r12);

        return;

     label6:
        $z0 = virtualinvoke r1.<org.jsoup.parser.TokenQueue: boolean matchChomp(java.lang.String)>("*=");

        if $z0 == 0 goto label7;

        $r5 = r0.<org.jsoup.select.QueryParser: java.util.List evals>;

        $r13 = new org.jsoup.select.Evaluator$AttributeWithValueContaining;

        $r9 = virtualinvoke r1.<org.jsoup.parser.TokenQueue: java.lang.String remainder()>();

        specialinvoke $r13.<org.jsoup.select.Evaluator$AttributeWithValueContaining: void <init>(java.lang.String,java.lang.String)>($r3, $r9);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r13);

        return;

     label7:
        $z0 = virtualinvoke r1.<org.jsoup.parser.TokenQueue: boolean matchChomp(java.lang.String)>("~=");

        if $z0 == 0 goto label8;

        $r5 = r0.<org.jsoup.select.QueryParser: java.util.List evals>;

        $r14 = new org.jsoup.select.Evaluator$AttributeWithValueMatching;

        $r9 = virtualinvoke r1.<org.jsoup.parser.TokenQueue: java.lang.String remainder()>();

        $r15 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r9);

        specialinvoke $r14.<org.jsoup.select.Evaluator$AttributeWithValueMatching: void <init>(java.lang.String,java.util.regex.Pattern)>($r3, $r15);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r14);

        return;

     label8:
        $r16 = new org.jsoup.select.Selector$SelectorParseException;

        $r17 = newarray (java.lang.Object)[2];

        $r3 = r0.<org.jsoup.select.QueryParser: java.lang.String query>;

        $r17[0] = $r3;

        $r3 = virtualinvoke r1.<org.jsoup.parser.TokenQueue: java.lang.String remainder()>();

        $r17[1] = $r3;

        specialinvoke $r16.<org.jsoup.select.Selector$SelectorParseException: void <init>(java.lang.String,java.lang.Object[])>("Could not parse attribute query \'%s\': unexpected token at \'%s\'", $r17);

        throw $r16;
    }

    private void byClass()
    {
        java.util.List $r4;
        org.jsoup.parser.TokenQueue $r2;
        java.lang.String $r3;
        org.jsoup.select.QueryParser r0;
        org.jsoup.select.Evaluator$Class $r1;

        r0 := @this: org.jsoup.select.QueryParser;

        $r2 = r0.<org.jsoup.select.QueryParser: org.jsoup.parser.TokenQueue tq>;

        $r3 = virtualinvoke $r2.<org.jsoup.parser.TokenQueue: java.lang.String consumeCssIdentifier()>();

        staticinvoke <org.jsoup.helper.Validate: void notEmpty(java.lang.String)>($r3);

        $r4 = r0.<org.jsoup.select.QueryParser: java.util.List evals>;

        $r1 = new org.jsoup.select.Evaluator$Class;

        $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String trim()>();

        $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String toLowerCase()>();

        specialinvoke $r1.<org.jsoup.select.Evaluator$Class: void <init>(java.lang.String)>($r3);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;
    }

    private void byId()
    {
        java.util.List $r4;
        org.jsoup.parser.TokenQueue $r3;
        org.jsoup.select.Evaluator$Id $r1;
        java.lang.String $r2;
        org.jsoup.select.QueryParser r0;

        r0 := @this: org.jsoup.select.QueryParser;

        $r3 = r0.<org.jsoup.select.QueryParser: org.jsoup.parser.TokenQueue tq>;

        $r2 = virtualinvoke $r3.<org.jsoup.parser.TokenQueue: java.lang.String consumeCssIdentifier()>();

        staticinvoke <org.jsoup.helper.Validate: void notEmpty(java.lang.String)>($r2);

        $r4 = r0.<org.jsoup.select.QueryParser: java.util.List evals>;

        $r1 = new org.jsoup.select.Evaluator$Id;

        specialinvoke $r1.<org.jsoup.select.Evaluator$Id: void <init>(java.lang.String)>($r2);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;
    }

    private void byTag()
    {
        java.util.List $r4;
        org.jsoup.parser.TokenQueue $r1;
        org.jsoup.select.Evaluator$Tag $r5;
        java.lang.String $r2, r3;
        org.jsoup.select.QueryParser r0;
        boolean $z0;

        r0 := @this: org.jsoup.select.QueryParser;

        $r1 = r0.<org.jsoup.select.QueryParser: org.jsoup.parser.TokenQueue tq>;

        $r2 = virtualinvoke $r1.<org.jsoup.parser.TokenQueue: java.lang.String consumeElementSelector()>();

        r3 = $r2;

        staticinvoke <org.jsoup.helper.Validate: void notEmpty(java.lang.String)>($r2);

        $z0 = virtualinvoke $r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("|");

        if $z0 == 0 goto label1;

        r3 = virtualinvoke $r2.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("|", ":");

     label1:
        $r4 = r0.<org.jsoup.select.QueryParser: java.util.List evals>;

        $r5 = new org.jsoup.select.Evaluator$Tag;

        $r2 = virtualinvoke r3.<java.lang.String: java.lang.String trim()>();

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String toLowerCase()>();

        specialinvoke $r5.<org.jsoup.select.Evaluator$Tag: void <init>(java.lang.String)>($r2);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r5);

        return;
    }

    private void combinator(char)
    {
        org.jsoup.select.StructuralEvaluator$ImmediateParent $r14;
        java.lang.Object[] $r13;
        org.jsoup.select.QueryParser r0;
        org.jsoup.select.CombiningEvaluator$Or r8, $r19;
        org.jsoup.select.CombiningEvaluator r11;
        org.jsoup.select.Evaluator $r3, r6, r7;
        org.jsoup.select.StructuralEvaluator$ImmediatePreviousSibling $r17;
        int $i1;
        java.lang.String $r2;
        boolean z0, $z1;
        org.jsoup.select.StructuralEvaluator$PreviousSibling $r18;
        org.jsoup.select.StructuralEvaluator$Parent $r16;
        org.jsoup.select.Evaluator[] $r10;
        org.jsoup.select.Selector$SelectorParseException $r21;
        org.jsoup.parser.TokenQueue $r1;
        char $c0;
        org.jsoup.select.CombiningEvaluator$And r9, $r15;
        java.util.List $r4;
        java.lang.Object $r5;
        java.lang.StringBuilder $r12, $r20;

        r0 := @this: org.jsoup.select.QueryParser;

        $c0 := @parameter0: char;

        $r1 = r0.<org.jsoup.select.QueryParser: org.jsoup.parser.TokenQueue tq>;

        virtualinvoke $r1.<org.jsoup.parser.TokenQueue: boolean consumeWhitespace()>();

        $r2 = specialinvoke r0.<org.jsoup.select.QueryParser: java.lang.String consumeSubQuery()>();

        $r3 = staticinvoke <org.jsoup.select.QueryParser: org.jsoup.select.Evaluator parse(java.lang.String)>($r2);

        z0 = 0;

        $r4 = r0.<org.jsoup.select.QueryParser: java.util.List evals>;

        $i1 = interfaceinvoke $r4.<java.util.List: int size()>();

        if $i1 != 1 goto label04;

        $r4 = r0.<org.jsoup.select.QueryParser: java.util.List evals>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(0);

        r6 = (org.jsoup.select.Evaluator) $r5;

        r7 = r6;

        $z1 = r6 instanceof org.jsoup.select.CombiningEvaluator$Or;

        if $z1 == 0 goto label01;

        $i1 = (int) $c0;

        if $i1 == 44 goto label01;

        r8 = (org.jsoup.select.CombiningEvaluator$Or) r6;

        r6 = virtualinvoke r8.<org.jsoup.select.CombiningEvaluator$Or: org.jsoup.select.Evaluator rightMostEvaluator()>();

        z0 = 1;

     label01:
        $r4 = r0.<org.jsoup.select.QueryParser: java.util.List evals>;

        interfaceinvoke $r4.<java.util.List: void clear()>();

        $i1 = (int) $c0;

        if $i1 != 62 goto label05;

        $r15 = new org.jsoup.select.CombiningEvaluator$And;

        $r10 = newarray (org.jsoup.select.Evaluator)[2];

        $r10[0] = $r3;

        $r14 = new org.jsoup.select.StructuralEvaluator$ImmediateParent;

        specialinvoke $r14.<org.jsoup.select.StructuralEvaluator$ImmediateParent: void <init>(org.jsoup.select.Evaluator)>(r6);

        $r10[1] = $r14;

        specialinvoke $r15.<org.jsoup.select.CombiningEvaluator$And: void <init>(org.jsoup.select.Evaluator[])>($r10);

        r11 = $r15;

     label02:
        if z0 == 0 goto label12;

        r8 = (org.jsoup.select.CombiningEvaluator$Or) r7;

        virtualinvoke r8.<org.jsoup.select.CombiningEvaluator$Or: void replaceRightMostEvaluator(org.jsoup.select.Evaluator)>(r11);

     label03:
        $r4 = r0.<org.jsoup.select.QueryParser: java.util.List evals>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r7);

        return;

     label04:
        r9 = new org.jsoup.select.CombiningEvaluator$And;

        r6 = r9;

        $r4 = r0.<org.jsoup.select.QueryParser: java.util.List evals>;

        specialinvoke r9.<org.jsoup.select.CombiningEvaluator$And: void <init>(java.util.Collection)>($r4);

        r7 = r6;

        goto label01;

     label05:
        $i1 = (int) $c0;

        if $i1 != 32 goto label06;

        $r15 = new org.jsoup.select.CombiningEvaluator$And;

        $r10 = newarray (org.jsoup.select.Evaluator)[2];

        $r10[0] = $r3;

        $r16 = new org.jsoup.select.StructuralEvaluator$Parent;

        specialinvoke $r16.<org.jsoup.select.StructuralEvaluator$Parent: void <init>(org.jsoup.select.Evaluator)>(r6);

        $r10[1] = $r16;

        specialinvoke $r15.<org.jsoup.select.CombiningEvaluator$And: void <init>(org.jsoup.select.Evaluator[])>($r10);

        r11 = $r15;

        goto label02;

     label06:
        $i1 = (int) $c0;

        if $i1 != 43 goto label07;

        $r15 = new org.jsoup.select.CombiningEvaluator$And;

        $r10 = newarray (org.jsoup.select.Evaluator)[2];

        $r10[0] = $r3;

        $r17 = new org.jsoup.select.StructuralEvaluator$ImmediatePreviousSibling;

        specialinvoke $r17.<org.jsoup.select.StructuralEvaluator$ImmediatePreviousSibling: void <init>(org.jsoup.select.Evaluator)>(r6);

        $r10[1] = $r17;

        specialinvoke $r15.<org.jsoup.select.CombiningEvaluator$And: void <init>(org.jsoup.select.Evaluator[])>($r10);

        r11 = $r15;

        goto label02;

     label07:
        $i1 = (int) $c0;

        if $i1 != 126 goto label08;

        $r15 = new org.jsoup.select.CombiningEvaluator$And;

        $r10 = newarray (org.jsoup.select.Evaluator)[2];

        $r10[0] = $r3;

        $r18 = new org.jsoup.select.StructuralEvaluator$PreviousSibling;

        specialinvoke $r18.<org.jsoup.select.StructuralEvaluator$PreviousSibling: void <init>(org.jsoup.select.Evaluator)>(r6);

        $r10[1] = $r18;

        specialinvoke $r15.<org.jsoup.select.CombiningEvaluator$And: void <init>(org.jsoup.select.Evaluator[])>($r10);

        r11 = $r15;

        goto label02;

     label08:
        $i1 = (int) $c0;

        if $i1 != 44 goto label11;

        $z1 = r6 instanceof org.jsoup.select.CombiningEvaluator$Or;

        if $z1 == 0 goto label10;

        r8 = (org.jsoup.select.CombiningEvaluator$Or) r6;

        virtualinvoke r8.<org.jsoup.select.CombiningEvaluator$Or: void add(org.jsoup.select.Evaluator)>($r3);

     label09:
        r11 = r8;

        goto label02;

     label10:
        $r19 = new org.jsoup.select.CombiningEvaluator$Or;

        r8 = $r19;

        specialinvoke $r19.<org.jsoup.select.CombiningEvaluator$Or: void <init>()>();

        virtualinvoke r8.<org.jsoup.select.CombiningEvaluator$Or: void add(org.jsoup.select.Evaluator)>(r6);

        virtualinvoke r8.<org.jsoup.select.CombiningEvaluator$Or: void add(org.jsoup.select.Evaluator)>($r3);

        goto label09;

     label11:
        $r21 = new org.jsoup.select.Selector$SelectorParseException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown combinator: ");

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

        $r2 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = newarray (java.lang.Object)[0];

        specialinvoke $r21.<org.jsoup.select.Selector$SelectorParseException: void <init>(java.lang.String,java.lang.Object[])>($r2, $r13);

        throw $r21;

     label12:
        r7 = r11;

        goto label03;
    }

    private int consumeIndex()
    {
        org.jsoup.parser.TokenQueue $r1;
        int $i0;
        java.lang.String $r2;
        org.jsoup.select.QueryParser r0;
        boolean $z0;

        r0 := @this: org.jsoup.select.QueryParser;

        $r1 = r0.<org.jsoup.select.QueryParser: org.jsoup.parser.TokenQueue tq>;

        $r2 = virtualinvoke $r1.<org.jsoup.parser.TokenQueue: java.lang.String chompTo(java.lang.String)>(")");

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        $z0 = staticinvoke <org.jsoup.helper.StringUtil: boolean isNumeric(java.lang.String)>($r2);

        staticinvoke <org.jsoup.helper.Validate: void isTrue(boolean,java.lang.String)>($z0, "Index must be numeric");

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

        return $i0;
    }

    private java.lang.String consumeSubQuery()
    {
        org.jsoup.parser.TokenQueue $r2;
        java.lang.String[] $r5;
        char $c0;
        org.jsoup.select.QueryParser r0;
        java.lang.StringBuilder r1, $r3;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: org.jsoup.select.QueryParser;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

     label1:
        $r2 = r0.<org.jsoup.select.QueryParser: org.jsoup.parser.TokenQueue tq>;

        $z0 = virtualinvoke $r2.<org.jsoup.parser.TokenQueue: boolean isEmpty()>();

        if $z0 != 0 goto label4;

        $r2 = r0.<org.jsoup.select.QueryParser: org.jsoup.parser.TokenQueue tq>;

        $z0 = virtualinvoke $r2.<org.jsoup.parser.TokenQueue: boolean matches(java.lang.String)>("(");

        if $z0 == 0 goto label2;

        $r3 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r2 = r0.<org.jsoup.select.QueryParser: org.jsoup.parser.TokenQueue tq>;

        $r4 = virtualinvoke $r2.<org.jsoup.parser.TokenQueue: java.lang.String chompBalanced(char,char)>(40, 41);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        goto label1;

     label2:
        $r2 = r0.<org.jsoup.select.QueryParser: org.jsoup.parser.TokenQueue tq>;

        $z0 = virtualinvoke $r2.<org.jsoup.parser.TokenQueue: boolean matches(java.lang.String)>("[");

        if $z0 == 0 goto label3;

        $r3 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r2 = r0.<org.jsoup.select.QueryParser: org.jsoup.parser.TokenQueue tq>;

        $r4 = virtualinvoke $r2.<org.jsoup.parser.TokenQueue: java.lang.String chompBalanced(char,char)>(91, 93);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        goto label1;

     label3:
        $r2 = r0.<org.jsoup.select.QueryParser: org.jsoup.parser.TokenQueue tq>;

        $r5 = <org.jsoup.select.QueryParser: java.lang.String[] combinators>;

        $z0 = virtualinvoke $r2.<org.jsoup.parser.TokenQueue: boolean matchesAny(java.lang.String[])>($r5);

        if $z0 == 0 goto label5;

     label4:
        $r4 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;

     label5:
        $r2 = r0.<org.jsoup.select.QueryParser: org.jsoup.parser.TokenQueue tq>;

        $c0 = virtualinvoke $r2.<org.jsoup.parser.TokenQueue: char consume()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

        goto label1;
    }

    private void contains(boolean)
    {
        java.util.List $r3;
        org.jsoup.select.Evaluator$ContainsText $r5;
        org.jsoup.parser.TokenQueue $r1;
        org.jsoup.select.Evaluator$ContainsOwnText $r4;
        java.lang.String $r2;
        org.jsoup.select.QueryParser r0;
        boolean $z0;

        r0 := @this: org.jsoup.select.QueryParser;

        $z0 := @parameter0: boolean;

        $r1 = r0.<org.jsoup.select.QueryParser: org.jsoup.parser.TokenQueue tq>;

        if $z0 == 0 goto label2;

        $r2 = ":containsOwn";

     label1:
        virtualinvoke $r1.<org.jsoup.parser.TokenQueue: void consume(java.lang.String)>($r2);

        $r1 = r0.<org.jsoup.select.QueryParser: org.jsoup.parser.TokenQueue tq>;

        $r2 = virtualinvoke $r1.<org.jsoup.parser.TokenQueue: java.lang.String chompBalanced(char,char)>(40, 41);

        $r2 = staticinvoke <org.jsoup.parser.TokenQueue: java.lang.String unescape(java.lang.String)>($r2);

        staticinvoke <org.jsoup.helper.Validate: void notEmpty(java.lang.String,java.lang.String)>($r2, ":contains(text) query must not be empty");

        if $z0 == 0 goto label3;

        $r3 = r0.<org.jsoup.select.QueryParser: java.util.List evals>;

        $r4 = new org.jsoup.select.Evaluator$ContainsOwnText;

        specialinvoke $r4.<org.jsoup.select.Evaluator$ContainsOwnText: void <init>(java.lang.String)>($r2);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r4);

        return;

     label2:
        $r2 = ":contains";

        goto label1;

     label3:
        $r3 = r0.<org.jsoup.select.QueryParser: java.util.List evals>;

        $r5 = new org.jsoup.select.Evaluator$ContainsText;

        specialinvoke $r5.<org.jsoup.select.Evaluator$ContainsText: void <init>(java.lang.String)>($r2);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r5);

        return;
    }

    private void cssNthChild(boolean, boolean)
    {
        java.lang.Object[] $r10;
        org.jsoup.select.QueryParser r0;
        java.util.regex.Matcher $r4, $r5;
        int i0, i1;
        org.jsoup.select.Evaluator$IsNthChild $r13;
        org.jsoup.select.Evaluator$IsNthOfType $r11;
        java.lang.String $r2, $r6;
        boolean $z0, $z1, $z2;
        org.jsoup.select.Selector$SelectorParseException $r9;
        org.jsoup.select.Evaluator$IsNthLastChild $r12;
        org.jsoup.parser.TokenQueue $r1;
        org.jsoup.select.Evaluator$IsNthLastOfType $r8;
        java.util.List $r7;
        java.util.regex.Pattern $r3;

        r0 := @this: org.jsoup.select.QueryParser;

        $z0 := @parameter0: boolean;

        $z1 := @parameter1: boolean;

        i0 = 0;

        i1 = 1;

        $r1 = r0.<org.jsoup.select.QueryParser: org.jsoup.parser.TokenQueue tq>;

        $r2 = virtualinvoke $r1.<org.jsoup.parser.TokenQueue: java.lang.String chompTo(java.lang.String)>(")");

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String toLowerCase()>();

        $r3 = <org.jsoup.select.QueryParser: java.util.regex.Pattern NTH_AB>;

        $r4 = virtualinvoke $r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r2);

        $r3 = <org.jsoup.select.QueryParser: java.util.regex.Pattern NTH_B>;

        $r5 = virtualinvoke $r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r2);

        $r6 = "odd";

        $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z2 == 0 goto label2;

        i1 = 2;

        i0 = 1;

     label1:
        if $z1 == 0 goto label8;

        if $z0 == 0 goto label7;

        $r7 = r0.<org.jsoup.select.QueryParser: java.util.List evals>;

        $r8 = new org.jsoup.select.Evaluator$IsNthLastOfType;

        specialinvoke $r8.<org.jsoup.select.Evaluator$IsNthLastOfType: void <init>(int,int)>(i1, i0);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r8);

        return;

     label2:
        $r6 = "even";

        $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z2 == 0 goto label3;

        i1 = 2;

        i0 = 0;

        goto label1;

     label3:
        $z2 = virtualinvoke $r4.<java.util.regex.Matcher: boolean matches()>();

        if $z2 == 0 goto label5;

        $r2 = virtualinvoke $r4.<java.util.regex.Matcher: java.lang.String group(int)>(3);

        if $r2 == null goto label4;

        $r2 = virtualinvoke $r4.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>("^\\+", "");

        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

     label4:
        $r2 = virtualinvoke $r4.<java.util.regex.Matcher: java.lang.String group(int)>(4);

        if $r2 == null goto label1;

        $r2 = virtualinvoke $r4.<java.util.regex.Matcher: java.lang.String group(int)>(4);

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>("^\\+", "");

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

        goto label1;

     label5:
        $z2 = virtualinvoke $r5.<java.util.regex.Matcher: boolean matches()>();

        if $z2 == 0 goto label6;

        i1 = 0;

        $r2 = virtualinvoke $r5.<java.util.regex.Matcher: java.lang.String group()>();

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>("^\\+", "");

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

        goto label1;

     label6:
        $r9 = new org.jsoup.select.Selector$SelectorParseException;

        $r10 = newarray (java.lang.Object)[1];

        $r10[0] = $r2;

        specialinvoke $r9.<org.jsoup.select.Selector$SelectorParseException: void <init>(java.lang.String,java.lang.Object[])>("Could not parse nth-index \'%s\': unexpected format", $r10);

        throw $r9;

     label7:
        $r7 = r0.<org.jsoup.select.QueryParser: java.util.List evals>;

        $r11 = new org.jsoup.select.Evaluator$IsNthOfType;

        specialinvoke $r11.<org.jsoup.select.Evaluator$IsNthOfType: void <init>(int,int)>(i1, i0);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r11);

        return;

     label8:
        if $z0 == 0 goto label9;

        $r7 = r0.<org.jsoup.select.QueryParser: java.util.List evals>;

        $r12 = new org.jsoup.select.Evaluator$IsNthLastChild;

        specialinvoke $r12.<org.jsoup.select.Evaluator$IsNthLastChild: void <init>(int,int)>(i1, i0);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r12);

        return;

     label9:
        $r7 = r0.<org.jsoup.select.QueryParser: java.util.List evals>;

        $r13 = new org.jsoup.select.Evaluator$IsNthChild;

        specialinvoke $r13.<org.jsoup.select.Evaluator$IsNthChild: void <init>(int,int)>(i1, i0);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r13);

        return;
    }

    private void findElements()
    {
        java.lang.Object[] $r12;
        org.jsoup.select.Evaluator$IsLastChild $r4;
        org.jsoup.select.Selector$SelectorParseException $r11;
        org.jsoup.parser.TokenQueue $r1;
        org.jsoup.select.Evaluator$IsOnlyOfType $r8;
        org.jsoup.select.QueryParser r0;
        org.jsoup.select.Evaluator$IsEmpty $r9;
        org.jsoup.select.Evaluator$IsLastOfType $r6;
        java.util.List $r2;
        org.jsoup.select.Evaluator$IsFirstChild $r3;
        org.jsoup.select.Evaluator$IsOnlyChild $r7;
        org.jsoup.select.Evaluator$IsRoot $r10;
        java.lang.String $r13;
        org.jsoup.select.Evaluator$IsFirstOfType $r5;
        boolean $z0;

        r0 := @this: org.jsoup.select.QueryParser;

        $r1 = r0.<org.jsoup.select.QueryParser: org.jsoup.parser.TokenQueue tq>;

        $z0 = virtualinvoke $r1.<org.jsoup.parser.TokenQueue: boolean matchChomp(java.lang.String)>("#");

        if $z0 == 0 goto label01;

        specialinvoke r0.<org.jsoup.select.QueryParser: void byId()>();

        return;

     label01:
        $r1 = r0.<org.jsoup.select.QueryParser: org.jsoup.parser.TokenQueue tq>;

        $z0 = virtualinvoke $r1.<org.jsoup.parser.TokenQueue: boolean matchChomp(java.lang.String)>(".");

        if $z0 == 0 goto label02;

        specialinvoke r0.<org.jsoup.select.QueryParser: void byClass()>();

        return;

     label02:
        $r1 = r0.<org.jsoup.select.QueryParser: org.jsoup.parser.TokenQueue tq>;

        $z0 = virtualinvoke $r1.<org.jsoup.parser.TokenQueue: boolean matchesWord()>();

        if $z0 == 0 goto label03;

        specialinvoke r0.<org.jsoup.select.QueryParser: void byTag()>();

        return;

     label03:
        $r1 = r0.<org.jsoup.select.QueryParser: org.jsoup.parser.TokenQueue tq>;

        $z0 = virtualinvoke $r1.<org.jsoup.parser.TokenQueue: boolean matches(java.lang.String)>("[");

        if $z0 == 0 goto label04;

        specialinvoke r0.<org.jsoup.select.QueryParser: void byAttribute()>();

        return;

     label04:
        $r1 = r0.<org.jsoup.select.QueryParser: org.jsoup.parser.TokenQueue tq>;

        $z0 = virtualinvoke $r1.<org.jsoup.parser.TokenQueue: boolean matchChomp(java.lang.String)>("*");

        if $z0 == 0 goto label05;

        specialinvoke r0.<org.jsoup.select.QueryParser: void allElements()>();

        return;

     label05:
        $r1 = r0.<org.jsoup.select.QueryParser: org.jsoup.parser.TokenQueue tq>;

        $z0 = virtualinvoke $r1.<org.jsoup.parser.TokenQueue: boolean matchChomp(java.lang.String)>(":lt(");

        if $z0 == 0 goto label06;

        specialinvoke r0.<org.jsoup.select.QueryParser: void indexLessThan()>();

        return;

     label06:
        $r1 = r0.<org.jsoup.select.QueryParser: org.jsoup.parser.TokenQueue tq>;

        $z0 = virtualinvoke $r1.<org.jsoup.parser.TokenQueue: boolean matchChomp(java.lang.String)>(":gt(");

        if $z0 == 0 goto label07;

        specialinvoke r0.<org.jsoup.select.QueryParser: void indexGreaterThan()>();

        return;

     label07:
        $r1 = r0.<org.jsoup.select.QueryParser: org.jsoup.parser.TokenQueue tq>;

        $z0 = virtualinvoke $r1.<org.jsoup.parser.TokenQueue: boolean matchChomp(java.lang.String)>(":eq(");

        if $z0 == 0 goto label08;

        specialinvoke r0.<org.jsoup.select.QueryParser: void indexEquals()>();

        return;

     label08:
        $r1 = r0.<org.jsoup.select.QueryParser: org.jsoup.parser.TokenQueue tq>;

        $z0 = virtualinvoke $r1.<org.jsoup.parser.TokenQueue: boolean matches(java.lang.String)>(":has(");

        if $z0 == 0 goto label09;

        specialinvoke r0.<org.jsoup.select.QueryParser: void has()>();

        return;

     label09:
        $r1 = r0.<org.jsoup.select.QueryParser: org.jsoup.parser.TokenQueue tq>;

        $z0 = virtualinvoke $r1.<org.jsoup.parser.TokenQueue: boolean matches(java.lang.String)>(":contains(");

        if $z0 == 0 goto label10;

        specialinvoke r0.<org.jsoup.select.QueryParser: void contains(boolean)>(0);

        return;

     label10:
        $r1 = r0.<org.jsoup.select.QueryParser: org.jsoup.parser.TokenQueue tq>;

        $z0 = virtualinvoke $r1.<org.jsoup.parser.TokenQueue: boolean matches(java.lang.String)>(":containsOwn(");

        if $z0 == 0 goto label11;

        specialinvoke r0.<org.jsoup.select.QueryParser: void contains(boolean)>(1);

        return;

     label11:
        $r1 = r0.<org.jsoup.select.QueryParser: org.jsoup.parser.TokenQueue tq>;

        $z0 = virtualinvoke $r1.<org.jsoup.parser.TokenQueue: boolean matches(java.lang.String)>(":matches(");

        if $z0 == 0 goto label12;

        specialinvoke r0.<org.jsoup.select.QueryParser: void matches(boolean)>(0);

        return;

     label12:
        $r1 = r0.<org.jsoup.select.QueryParser: org.jsoup.parser.TokenQueue tq>;

        $z0 = virtualinvoke $r1.<org.jsoup.parser.TokenQueue: boolean matches(java.lang.String)>(":matchesOwn(");

        if $z0 == 0 goto label13;

        specialinvoke r0.<org.jsoup.select.QueryParser: void matches(boolean)>(1);

        return;

     label13:
        $r1 = r0.<org.jsoup.select.QueryParser: org.jsoup.parser.TokenQueue tq>;

        $z0 = virtualinvoke $r1.<org.jsoup.parser.TokenQueue: boolean matches(java.lang.String)>(":not(");

        if $z0 == 0 goto label14;

        specialinvoke r0.<org.jsoup.select.QueryParser: void not()>();

        return;

     label14:
        $r1 = r0.<org.jsoup.select.QueryParser: org.jsoup.parser.TokenQueue tq>;

        $z0 = virtualinvoke $r1.<org.jsoup.parser.TokenQueue: boolean matchChomp(java.lang.String)>(":nth-child(");

        if $z0 == 0 goto label15;

        specialinvoke r0.<org.jsoup.select.QueryParser: void cssNthChild(boolean,boolean)>(0, 0);

        return;

     label15:
        $r1 = r0.<org.jsoup.select.QueryParser: org.jsoup.parser.TokenQueue tq>;

        $z0 = virtualinvoke $r1.<org.jsoup.parser.TokenQueue: boolean matchChomp(java.lang.String)>(":nth-last-child(");

        if $z0 == 0 goto label16;

        specialinvoke r0.<org.jsoup.select.QueryParser: void cssNthChild(boolean,boolean)>(1, 0);

        return;

     label16:
        $r1 = r0.<org.jsoup.select.QueryParser: org.jsoup.parser.TokenQueue tq>;

        $z0 = virtualinvoke $r1.<org.jsoup.parser.TokenQueue: boolean matchChomp(java.lang.String)>(":nth-of-type(");

        if $z0 == 0 goto label17;

        specialinvoke r0.<org.jsoup.select.QueryParser: void cssNthChild(boolean,boolean)>(0, 1);

        return;

     label17:
        $r1 = r0.<org.jsoup.select.QueryParser: org.jsoup.parser.TokenQueue tq>;

        $z0 = virtualinvoke $r1.<org.jsoup.parser.TokenQueue: boolean matchChomp(java.lang.String)>(":nth-last-of-type(");

        if $z0 == 0 goto label18;

        specialinvoke r0.<org.jsoup.select.QueryParser: void cssNthChild(boolean,boolean)>(1, 1);

        return;

     label18:
        $r1 = r0.<org.jsoup.select.QueryParser: org.jsoup.parser.TokenQueue tq>;

        $z0 = virtualinvoke $r1.<org.jsoup.parser.TokenQueue: boolean matchChomp(java.lang.String)>(":first-child");

        if $z0 == 0 goto label19;

        $r2 = r0.<org.jsoup.select.QueryParser: java.util.List evals>;

        $r3 = new org.jsoup.select.Evaluator$IsFirstChild;

        specialinvoke $r3.<org.jsoup.select.Evaluator$IsFirstChild: void <init>()>();

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r3);

        return;

     label19:
        $r1 = r0.<org.jsoup.select.QueryParser: org.jsoup.parser.TokenQueue tq>;

        $z0 = virtualinvoke $r1.<org.jsoup.parser.TokenQueue: boolean matchChomp(java.lang.String)>(":last-child");

        if $z0 == 0 goto label20;

        $r2 = r0.<org.jsoup.select.QueryParser: java.util.List evals>;

        $r4 = new org.jsoup.select.Evaluator$IsLastChild;

        specialinvoke $r4.<org.jsoup.select.Evaluator$IsLastChild: void <init>()>();

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r4);

        return;

     label20:
        $r1 = r0.<org.jsoup.select.QueryParser: org.jsoup.parser.TokenQueue tq>;

        $z0 = virtualinvoke $r1.<org.jsoup.parser.TokenQueue: boolean matchChomp(java.lang.String)>(":first-of-type");

        if $z0 == 0 goto label21;

        $r2 = r0.<org.jsoup.select.QueryParser: java.util.List evals>;

        $r5 = new org.jsoup.select.Evaluator$IsFirstOfType;

        specialinvoke $r5.<org.jsoup.select.Evaluator$IsFirstOfType: void <init>()>();

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r5);

        return;

     label21:
        $r1 = r0.<org.jsoup.select.QueryParser: org.jsoup.parser.TokenQueue tq>;

        $z0 = virtualinvoke $r1.<org.jsoup.parser.TokenQueue: boolean matchChomp(java.lang.String)>(":last-of-type");

        if $z0 == 0 goto label22;

        $r2 = r0.<org.jsoup.select.QueryParser: java.util.List evals>;

        $r6 = new org.jsoup.select.Evaluator$IsLastOfType;

        specialinvoke $r6.<org.jsoup.select.Evaluator$IsLastOfType: void <init>()>();

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r6);

        return;

     label22:
        $r1 = r0.<org.jsoup.select.QueryParser: org.jsoup.parser.TokenQueue tq>;

        $z0 = virtualinvoke $r1.<org.jsoup.parser.TokenQueue: boolean matchChomp(java.lang.String)>(":only-child");

        if $z0 == 0 goto label23;

        $r2 = r0.<org.jsoup.select.QueryParser: java.util.List evals>;

        $r7 = new org.jsoup.select.Evaluator$IsOnlyChild;

        specialinvoke $r7.<org.jsoup.select.Evaluator$IsOnlyChild: void <init>()>();

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r7);

        return;

     label23:
        $r1 = r0.<org.jsoup.select.QueryParser: org.jsoup.parser.TokenQueue tq>;

        $z0 = virtualinvoke $r1.<org.jsoup.parser.TokenQueue: boolean matchChomp(java.lang.String)>(":only-of-type");

        if $z0 == 0 goto label24;

        $r2 = r0.<org.jsoup.select.QueryParser: java.util.List evals>;

        $r8 = new org.jsoup.select.Evaluator$IsOnlyOfType;

        specialinvoke $r8.<org.jsoup.select.Evaluator$IsOnlyOfType: void <init>()>();

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r8);

        return;

     label24:
        $r1 = r0.<org.jsoup.select.QueryParser: org.jsoup.parser.TokenQueue tq>;

        $z0 = virtualinvoke $r1.<org.jsoup.parser.TokenQueue: boolean matchChomp(java.lang.String)>(":empty");

        if $z0 == 0 goto label25;

        $r2 = r0.<org.jsoup.select.QueryParser: java.util.List evals>;

        $r9 = new org.jsoup.select.Evaluator$IsEmpty;

        specialinvoke $r9.<org.jsoup.select.Evaluator$IsEmpty: void <init>()>();

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r9);

        return;

     label25:
        $r1 = r0.<org.jsoup.select.QueryParser: org.jsoup.parser.TokenQueue tq>;

        $z0 = virtualinvoke $r1.<org.jsoup.parser.TokenQueue: boolean matchChomp(java.lang.String)>(":root");

        if $z0 == 0 goto label26;

        $r2 = r0.<org.jsoup.select.QueryParser: java.util.List evals>;

        $r10 = new org.jsoup.select.Evaluator$IsRoot;

        specialinvoke $r10.<org.jsoup.select.Evaluator$IsRoot: void <init>()>();

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r10);

        return;

     label26:
        $r11 = new org.jsoup.select.Selector$SelectorParseException;

        $r12 = newarray (java.lang.Object)[2];

        $r13 = r0.<org.jsoup.select.QueryParser: java.lang.String query>;

        $r12[0] = $r13;

        $r1 = r0.<org.jsoup.select.QueryParser: org.jsoup.parser.TokenQueue tq>;

        $r13 = virtualinvoke $r1.<org.jsoup.parser.TokenQueue: java.lang.String remainder()>();

        $r12[1] = $r13;

        specialinvoke $r11.<org.jsoup.select.Selector$SelectorParseException: void <init>(java.lang.String,java.lang.Object[])>("Could not parse query \'%s\': unexpected token at \'%s\'", $r12);

        throw $r11;
    }

    private void has()
    {
        java.util.List $r3;
        org.jsoup.select.StructuralEvaluator$Has $r4;
        org.jsoup.parser.TokenQueue $r1;
        org.jsoup.select.Evaluator $r5;
        java.lang.String $r2;
        org.jsoup.select.QueryParser r0;

        r0 := @this: org.jsoup.select.QueryParser;

        $r1 = r0.<org.jsoup.select.QueryParser: org.jsoup.parser.TokenQueue tq>;

        virtualinvoke $r1.<org.jsoup.parser.TokenQueue: void consume(java.lang.String)>(":has");

        $r1 = r0.<org.jsoup.select.QueryParser: org.jsoup.parser.TokenQueue tq>;

        $r2 = virtualinvoke $r1.<org.jsoup.parser.TokenQueue: java.lang.String chompBalanced(char,char)>(40, 41);

        staticinvoke <org.jsoup.helper.Validate: void notEmpty(java.lang.String,java.lang.String)>($r2, ":has(el) subselect must not be empty");

        $r3 = r0.<org.jsoup.select.QueryParser: java.util.List evals>;

        $r4 = new org.jsoup.select.StructuralEvaluator$Has;

        $r5 = staticinvoke <org.jsoup.select.QueryParser: org.jsoup.select.Evaluator parse(java.lang.String)>($r2);

        specialinvoke $r4.<org.jsoup.select.StructuralEvaluator$Has: void <init>(org.jsoup.select.Evaluator)>($r5);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r4);

        return;
    }

    private void indexEquals()
    {
        org.jsoup.select.Evaluator$IndexEquals $r2;
        java.util.List $r1;
        int $i0;
        org.jsoup.select.QueryParser r0;

        r0 := @this: org.jsoup.select.QueryParser;

        $r1 = r0.<org.jsoup.select.QueryParser: java.util.List evals>;

        $r2 = new org.jsoup.select.Evaluator$IndexEquals;

        $i0 = specialinvoke r0.<org.jsoup.select.QueryParser: int consumeIndex()>();

        specialinvoke $r2.<org.jsoup.select.Evaluator$IndexEquals: void <init>(int)>($i0);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        return;
    }

    private void indexGreaterThan()
    {
        java.util.List $r1;
        int $i0;
        org.jsoup.select.Evaluator$IndexGreaterThan $r2;
        org.jsoup.select.QueryParser r0;

        r0 := @this: org.jsoup.select.QueryParser;

        $r1 = r0.<org.jsoup.select.QueryParser: java.util.List evals>;

        $r2 = new org.jsoup.select.Evaluator$IndexGreaterThan;

        $i0 = specialinvoke r0.<org.jsoup.select.QueryParser: int consumeIndex()>();

        specialinvoke $r2.<org.jsoup.select.Evaluator$IndexGreaterThan: void <init>(int)>($i0);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        return;
    }

    private void indexLessThan()
    {
        org.jsoup.select.Evaluator$IndexLessThan $r2;
        java.util.List $r1;
        int $i0;
        org.jsoup.select.QueryParser r0;

        r0 := @this: org.jsoup.select.QueryParser;

        $r1 = r0.<org.jsoup.select.QueryParser: java.util.List evals>;

        $r2 = new org.jsoup.select.Evaluator$IndexLessThan;

        $i0 = specialinvoke r0.<org.jsoup.select.QueryParser: int consumeIndex()>();

        specialinvoke $r2.<org.jsoup.select.Evaluator$IndexLessThan: void <init>(int)>($i0);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        return;
    }

    private void matches(boolean)
    {
        org.jsoup.parser.TokenQueue $r1;
        org.jsoup.select.Evaluator$MatchesOwn $r4;
        org.jsoup.select.QueryParser r0;
        java.util.List $r3;
        org.jsoup.select.Evaluator$Matches $r6;
        java.lang.String $r2;
        java.util.regex.Pattern $r5;
        boolean $z0;

        r0 := @this: org.jsoup.select.QueryParser;

        $z0 := @parameter0: boolean;

        $r1 = r0.<org.jsoup.select.QueryParser: org.jsoup.parser.TokenQueue tq>;

        if $z0 == 0 goto label2;

        $r2 = ":matchesOwn";

     label1:
        virtualinvoke $r1.<org.jsoup.parser.TokenQueue: void consume(java.lang.String)>($r2);

        $r1 = r0.<org.jsoup.select.QueryParser: org.jsoup.parser.TokenQueue tq>;

        $r2 = virtualinvoke $r1.<org.jsoup.parser.TokenQueue: java.lang.String chompBalanced(char,char)>(40, 41);

        staticinvoke <org.jsoup.helper.Validate: void notEmpty(java.lang.String,java.lang.String)>($r2, ":matches(regex) query must not be empty");

        if $z0 == 0 goto label3;

        $r3 = r0.<org.jsoup.select.QueryParser: java.util.List evals>;

        $r4 = new org.jsoup.select.Evaluator$MatchesOwn;

        $r5 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r2);

        specialinvoke $r4.<org.jsoup.select.Evaluator$MatchesOwn: void <init>(java.util.regex.Pattern)>($r5);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r4);

        return;

     label2:
        $r2 = ":matches";

        goto label1;

     label3:
        $r3 = r0.<org.jsoup.select.QueryParser: java.util.List evals>;

        $r6 = new org.jsoup.select.Evaluator$Matches;

        $r5 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r2);

        specialinvoke $r6.<org.jsoup.select.Evaluator$Matches: void <init>(java.util.regex.Pattern)>($r5);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r6);

        return;
    }

    private void not()
    {
        java.util.List $r3;
        org.jsoup.parser.TokenQueue $r1;
        org.jsoup.select.Evaluator $r5;
        org.jsoup.select.StructuralEvaluator$Not $r4;
        java.lang.String $r2;
        org.jsoup.select.QueryParser r0;

        r0 := @this: org.jsoup.select.QueryParser;

        $r1 = r0.<org.jsoup.select.QueryParser: org.jsoup.parser.TokenQueue tq>;

        virtualinvoke $r1.<org.jsoup.parser.TokenQueue: void consume(java.lang.String)>(":not");

        $r1 = r0.<org.jsoup.select.QueryParser: org.jsoup.parser.TokenQueue tq>;

        $r2 = virtualinvoke $r1.<org.jsoup.parser.TokenQueue: java.lang.String chompBalanced(char,char)>(40, 41);

        staticinvoke <org.jsoup.helper.Validate: void notEmpty(java.lang.String,java.lang.String)>($r2, ":not(selector) subselect must not be empty");

        $r3 = r0.<org.jsoup.select.QueryParser: java.util.List evals>;

        $r4 = new org.jsoup.select.StructuralEvaluator$Not;

        $r5 = staticinvoke <org.jsoup.select.QueryParser: org.jsoup.select.Evaluator parse(java.lang.String)>($r2);

        specialinvoke $r4.<org.jsoup.select.StructuralEvaluator$Not: void <init>(org.jsoup.select.Evaluator)>($r5);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r4);

        return;
    }

    public static org.jsoup.select.Evaluator parse(java.lang.String)
    {
        java.lang.String $r0;
        org.jsoup.select.QueryParser r1;
        org.jsoup.select.Evaluator $r2;

        $r0 := @parameter0: java.lang.String;

        r1 = new org.jsoup.select.QueryParser;

        specialinvoke r1.<org.jsoup.select.QueryParser: void <init>(java.lang.String)>($r0);

        $r2 = virtualinvoke r1.<org.jsoup.select.QueryParser: org.jsoup.select.Evaluator parse()>();

        return $r2;
    }

    org.jsoup.select.Evaluator parse()
    {
        org.jsoup.parser.TokenQueue $r1;
        java.lang.String[] $r2;
        char $c0;
        org.jsoup.select.CombiningEvaluator$And $r7;
        org.jsoup.select.QueryParser r0;
        java.util.List $r3;
        org.jsoup.select.Evaluator $r6;
        int $i1;
        java.lang.Object $r5;
        org.jsoup.select.StructuralEvaluator$Root $r4;
        boolean $z0, $z1;

        r0 := @this: org.jsoup.select.QueryParser;

        $r1 = r0.<org.jsoup.select.QueryParser: org.jsoup.parser.TokenQueue tq>;

        virtualinvoke $r1.<org.jsoup.parser.TokenQueue: boolean consumeWhitespace()>();

        $r1 = r0.<org.jsoup.select.QueryParser: org.jsoup.parser.TokenQueue tq>;

        $r2 = <org.jsoup.select.QueryParser: java.lang.String[] combinators>;

        $z0 = virtualinvoke $r1.<org.jsoup.parser.TokenQueue: boolean matchesAny(java.lang.String[])>($r2);

        if $z0 == 0 goto label2;

        $r3 = r0.<org.jsoup.select.QueryParser: java.util.List evals>;

        $r4 = new org.jsoup.select.StructuralEvaluator$Root;

        specialinvoke $r4.<org.jsoup.select.StructuralEvaluator$Root: void <init>()>();

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r4);

        $r1 = r0.<org.jsoup.select.QueryParser: org.jsoup.parser.TokenQueue tq>;

        $c0 = virtualinvoke $r1.<org.jsoup.parser.TokenQueue: char consume()>();

        specialinvoke r0.<org.jsoup.select.QueryParser: void combinator(char)>($c0);

     label1:
        $r1 = r0.<org.jsoup.select.QueryParser: org.jsoup.parser.TokenQueue tq>;

        $z0 = virtualinvoke $r1.<org.jsoup.parser.TokenQueue: boolean isEmpty()>();

        if $z0 != 0 goto label5;

        $r1 = r0.<org.jsoup.select.QueryParser: org.jsoup.parser.TokenQueue tq>;

        $z0 = virtualinvoke $r1.<org.jsoup.parser.TokenQueue: boolean consumeWhitespace()>();

        $r1 = r0.<org.jsoup.select.QueryParser: org.jsoup.parser.TokenQueue tq>;

        $r2 = <org.jsoup.select.QueryParser: java.lang.String[] combinators>;

        $z1 = virtualinvoke $r1.<org.jsoup.parser.TokenQueue: boolean matchesAny(java.lang.String[])>($r2);

        if $z1 == 0 goto label3;

        $r1 = r0.<org.jsoup.select.QueryParser: org.jsoup.parser.TokenQueue tq>;

        $c0 = virtualinvoke $r1.<org.jsoup.parser.TokenQueue: char consume()>();

        specialinvoke r0.<org.jsoup.select.QueryParser: void combinator(char)>($c0);

        goto label1;

     label2:
        specialinvoke r0.<org.jsoup.select.QueryParser: void findElements()>();

        goto label1;

     label3:
        if $z0 == 0 goto label4;

        specialinvoke r0.<org.jsoup.select.QueryParser: void combinator(char)>(32);

        goto label1;

     label4:
        specialinvoke r0.<org.jsoup.select.QueryParser: void findElements()>();

        goto label1;

     label5:
        $r3 = r0.<org.jsoup.select.QueryParser: java.util.List evals>;

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i1 != 1 goto label6;

        $r3 = r0.<org.jsoup.select.QueryParser: java.util.List evals>;

        $r5 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(0);

        $r6 = (org.jsoup.select.Evaluator) $r5;

        return $r6;

     label6:
        $r7 = new org.jsoup.select.CombiningEvaluator$And;

        $r3 = r0.<org.jsoup.select.QueryParser: java.util.List evals>;

        specialinvoke $r7.<org.jsoup.select.CombiningEvaluator$And: void <init>(java.util.Collection)>($r3);

        return $r7;
    }
}
