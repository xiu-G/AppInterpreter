public class org.json.XML extends java.lang.Object
{
    public static final java.lang.Character AMP;
    public static final java.lang.Character APOS;
    public static final java.lang.Character BANG;
    public static final java.lang.Character EQ;
    public static final java.lang.Character GT;
    public static final java.lang.Character LT;
    public static final java.lang.Character QUEST;
    public static final java.lang.Character QUOT;
    public static final java.lang.Character SLASH;

    static void <clinit>()
    {
        java.lang.Character $r0;

        $r0 = new java.lang.Character;

        specialinvoke $r0.<java.lang.Character: void <init>(char)>(38);

        <org.json.XML: java.lang.Character AMP> = $r0;

        $r0 = new java.lang.Character;

        specialinvoke $r0.<java.lang.Character: void <init>(char)>(39);

        <org.json.XML: java.lang.Character APOS> = $r0;

        $r0 = new java.lang.Character;

        specialinvoke $r0.<java.lang.Character: void <init>(char)>(33);

        <org.json.XML: java.lang.Character BANG> = $r0;

        $r0 = new java.lang.Character;

        specialinvoke $r0.<java.lang.Character: void <init>(char)>(61);

        <org.json.XML: java.lang.Character EQ> = $r0;

        $r0 = new java.lang.Character;

        specialinvoke $r0.<java.lang.Character: void <init>(char)>(62);

        <org.json.XML: java.lang.Character GT> = $r0;

        $r0 = new java.lang.Character;

        specialinvoke $r0.<java.lang.Character: void <init>(char)>(60);

        <org.json.XML: java.lang.Character LT> = $r0;

        $r0 = new java.lang.Character;

        specialinvoke $r0.<java.lang.Character: void <init>(char)>(63);

        <org.json.XML: java.lang.Character QUEST> = $r0;

        $r0 = new java.lang.Character;

        specialinvoke $r0.<java.lang.Character: void <init>(char)>(34);

        <org.json.XML: java.lang.Character QUOT> = $r0;

        $r0 = new java.lang.Character;

        specialinvoke $r0.<java.lang.Character: void <init>(char)>(47);

        <org.json.XML: java.lang.Character SLASH> = $r0;

        return;
    }

    public void <init>()
    {
        org.json.XML r0;

        r0 := @this: org.json.XML;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String escape(java.lang.String)
    {
        java.lang.StringBuffer $r1, $r2;
        int $i0, $i1, $i3;
        char $c2;
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        $r2 = new java.lang.StringBuffer;

        $r1 = $r2;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $i0 = 0;

        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

     label1:
        if $i0 >= $i1 goto label8;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0);

        $i3 = (int) $c2;

        lookupswitch($i3)
        {
            case 34: goto label7;
            case 38: goto label4;
            case 60: goto label5;
            case 62: goto label6;
            default: goto label2;
        };

     label2:
        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2);

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&amp;");

        goto label3;

     label5:
        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&lt;");

        goto label3;

     label6:
        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&gt;");

        goto label3;

     label7:
        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&quot;");

        goto label3;

     label8:
        $r0 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r0;
    }

    private static boolean parse(org.json.XMLTokener, org.json.JSONObject, java.lang.String) throws org.json.JSONException
    {
        char $c0;
        org.json.JSONException $r5;
        org.json.JSONObject $r1, $r7, $r10;
        java.lang.Character $r4;
        int $i1, $i2;
        java.lang.Object $r3;
        java.lang.StringBuilder $r6, $r9;
        java.lang.String $r2, $r8;
        org.json.XMLTokener $r0;
        boolean $z0;

        $r0 := @parameter0: org.json.XMLTokener;

        $r1 := @parameter1: org.json.JSONObject;

        $r2 := @parameter2: java.lang.String;

        $r3 = virtualinvoke $r0.<org.json.XMLTokener: java.lang.Object nextToken()>();

        $r4 = <org.json.XML: java.lang.Character BANG>;

        if $r3 != $r4 goto label10;

        $c0 = virtualinvoke $r0.<org.json.XMLTokener: char next()>();

        $i1 = (int) $c0;

        if $i1 != 45 goto label04;

        $c0 = virtualinvoke $r0.<org.json.XMLTokener: char next()>();

        $i1 = (int) $c0;

        if $i1 != 45 goto label01;

        virtualinvoke $r0.<org.json.XMLTokener: boolean skipPast(java.lang.String)>("-->");

        return 0;

     label01:
        virtualinvoke $r0.<org.json.XMLTokener: void back()>();

     label02:
        $i1 = 1;

     label03:
        $r3 = virtualinvoke $r0.<org.json.XMLTokener: java.lang.Object nextMeta()>();

        if $r3 != null goto label07;

        $r5 = virtualinvoke $r0.<org.json.XMLTokener: org.json.JSONException syntaxError(java.lang.String)>("Missing \'>\' after \'<!\'.");

        throw $r5;

     label04:
        $i1 = (int) $c0;

        if $i1 != 91 goto label02;

        $r3 = virtualinvoke $r0.<org.json.XMLTokener: java.lang.Object nextToken()>();

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>("CDATA");

        if $z0 == 0 goto label06;

        $c0 = virtualinvoke $r0.<org.json.XMLTokener: char next()>();

        $i1 = (int) $c0;

        if $i1 != 91 goto label06;

        $r2 = virtualinvoke $r0.<org.json.XMLTokener: java.lang.String nextCDATA()>();

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i1 <= 0 goto label05;

        virtualinvoke $r1.<org.json.JSONObject: org.json.JSONObject accumulate(java.lang.String,java.lang.Object)>("content", $r2);

     label05:
        return 0;

     label06:
        $r5 = virtualinvoke $r0.<org.json.XMLTokener: org.json.JSONException syntaxError(java.lang.String)>("Expected \'CDATA[\'");

        throw $r5;

     label07:
        $r4 = <org.json.XML: java.lang.Character LT>;

        if $r3 != $r4 goto label09;

        $i1 = $i1 + 1;

     label08:
        if $i1 > 0 goto label03;

        return 0;

     label09:
        $r4 = <org.json.XML: java.lang.Character GT>;

        if $r3 != $r4 goto label08;

        $i2 = -1;

        $i1 = $i1 + $i2;

        goto label08;

     label10:
        $r4 = <org.json.XML: java.lang.Character QUEST>;

        if $r3 != $r4 goto label11;

        virtualinvoke $r0.<org.json.XMLTokener: boolean skipPast(java.lang.String)>("?>");

        return 0;

     label11:
        $r4 = <org.json.XML: java.lang.Character SLASH>;

        if $r3 != $r4 goto label14;

        $r3 = virtualinvoke $r0.<org.json.XMLTokener: java.lang.Object nextToken()>();

        if $r2 != null goto label12;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Mismatched close tag");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r2 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = virtualinvoke $r0.<org.json.XMLTokener: org.json.JSONException syntaxError(java.lang.String)>($r2);

        throw $r5;

     label12:
        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label13;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Mismatched ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r2 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = virtualinvoke $r0.<org.json.XMLTokener: org.json.JSONException syntaxError(java.lang.String)>($r2);

        throw $r5;

     label13:
        $r3 = virtualinvoke $r0.<org.json.XMLTokener: java.lang.Object nextToken()>();

        $r4 = <org.json.XML: java.lang.Character GT>;

        if $r3 == $r4 goto label31;

        $r5 = virtualinvoke $r0.<org.json.XMLTokener: org.json.JSONException syntaxError(java.lang.String)>("Misshaped close tag");

        throw $r5;

     label14:
        $z0 = $r3 instanceof java.lang.Character;

        if $z0 == 0 goto label15;

        $r5 = virtualinvoke $r0.<org.json.XMLTokener: org.json.JSONException syntaxError(java.lang.String)>("Misshaped tag");

        throw $r5;

     label15:
        $r2 = (java.lang.String) $r3;

        $r10 = new org.json.JSONObject;

        $r7 = $r10;

        specialinvoke $r10.<org.json.JSONObject: void <init>()>();

        $r3 = null;

     label16:
        if $r3 != null goto label17;

        $r3 = virtualinvoke $r0.<org.json.XMLTokener: java.lang.Object nextToken()>();

     label17:
        $z0 = $r3 instanceof java.lang.String;

        if $z0 == 0 goto label20;

        $r8 = (java.lang.String) $r3;

        $r3 = virtualinvoke $r0.<org.json.XMLTokener: java.lang.Object nextToken()>();

        $r4 = <org.json.XML: java.lang.Character EQ>;

        if $r3 != $r4 goto label19;

        $r3 = virtualinvoke $r0.<org.json.XMLTokener: java.lang.Object nextToken()>();

        $z0 = $r3 instanceof java.lang.String;

        if $z0 != 0 goto label18;

        $r5 = virtualinvoke $r0.<org.json.XMLTokener: org.json.JSONException syntaxError(java.lang.String)>("Missing value");

        throw $r5;

     label18:
        virtualinvoke $r7.<org.json.JSONObject: org.json.JSONObject accumulate(java.lang.String,java.lang.Object)>($r8, $r3);

        $r3 = null;

        goto label16;

     label19:
        virtualinvoke $r7.<org.json.JSONObject: org.json.JSONObject accumulate(java.lang.String,java.lang.Object)>($r8, "");

        goto label16;

     label20:
        $r4 = <org.json.XML: java.lang.Character SLASH>;

        if $r3 != $r4 goto label22;

        $r3 = virtualinvoke $r0.<org.json.XMLTokener: java.lang.Object nextToken()>();

        $r4 = <org.json.XML: java.lang.Character GT>;

        if $r3 == $r4 goto label21;

        $r5 = virtualinvoke $r0.<org.json.XMLTokener: org.json.JSONException syntaxError(java.lang.String)>("Misshaped tag");

        throw $r5;

     label21:
        virtualinvoke $r1.<org.json.JSONObject: org.json.JSONObject accumulate(java.lang.String,java.lang.Object)>($r2, $r7);

        return 0;

     label22:
        $r4 = <org.json.XML: java.lang.Character GT>;

        if $r3 != $r4 goto label30;

     label23:
        $r3 = virtualinvoke $r0.<org.json.XMLTokener: java.lang.Object nextContent()>();

        if $r3 != null goto label25;

        if $r2 == null goto label24;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unclosed tag ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = virtualinvoke $r0.<org.json.XMLTokener: org.json.JSONException syntaxError(java.lang.String)>($r2);

        throw $r5;

     label24:
        return 0;

     label25:
        $z0 = $r3 instanceof java.lang.String;

        if $z0 == 0 goto label26;

        $r8 = (java.lang.String) $r3;

        $i1 = virtualinvoke $r8.<java.lang.String: int length()>();

        if $i1 <= 0 goto label23;

        virtualinvoke $r7.<org.json.JSONObject: org.json.JSONObject accumulate(java.lang.String,java.lang.Object)>("content", $r8);

        goto label23;

     label26:
        $r4 = <org.json.XML: java.lang.Character LT>;

        if $r3 != $r4 goto label23;

        $z0 = staticinvoke <org.json.XML: boolean parse(org.json.XMLTokener,org.json.JSONObject,java.lang.String)>($r0, $r7, $r2);

        if $z0 == 0 goto label23;

        $i1 = virtualinvoke $r7.<org.json.JSONObject: int length()>();

        if $i1 != 0 goto label28;

        virtualinvoke $r1.<org.json.JSONObject: org.json.JSONObject accumulate(java.lang.String,java.lang.Object)>($r2, "");

     label27:
        return 0;

     label28:
        $i1 = virtualinvoke $r7.<org.json.JSONObject: int length()>();

        if $i1 != 1 goto label29;

        $r3 = virtualinvoke $r7.<org.json.JSONObject: java.lang.Object opt(java.lang.String)>("content");

        if $r3 == null goto label29;

        $r3 = virtualinvoke $r7.<org.json.JSONObject: java.lang.Object opt(java.lang.String)>("content");

        virtualinvoke $r1.<org.json.JSONObject: org.json.JSONObject accumulate(java.lang.String,java.lang.Object)>($r2, $r3);

        goto label27;

     label29:
        virtualinvoke $r1.<org.json.JSONObject: org.json.JSONObject accumulate(java.lang.String,java.lang.Object)>($r2, $r7);

        goto label27;

     label30:
        $r5 = virtualinvoke $r0.<org.json.XMLTokener: org.json.JSONException syntaxError(java.lang.String)>("Misshaped tag");

        throw $r5;

     label31:
        return 1;
    }

    public static org.json.JSONObject toJSONObject(java.lang.String) throws org.json.JSONException
    {
        org.json.JSONObject $r1;
        java.lang.String $r0;
        org.json.XMLTokener $r2;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 = new org.json.JSONObject;

        specialinvoke $r1.<org.json.JSONObject: void <init>()>();

        $r2 = new org.json.XMLTokener;

        specialinvoke $r2.<org.json.XMLTokener: void <init>(java.lang.String)>($r0);

     label1:
        $z0 = virtualinvoke $r2.<org.json.XMLTokener: boolean more()>();

        if $z0 == 0 goto label2;

        $z0 = virtualinvoke $r2.<org.json.XMLTokener: boolean skipPast(java.lang.String)>("<");

        if $z0 == 0 goto label2;

        staticinvoke <org.json.XML: boolean parse(org.json.XMLTokener,org.json.JSONObject,java.lang.String)>($r2, $r1, null);

        goto label1;

     label2:
        return $r1;
    }

    public static java.lang.String toString(java.lang.Object) throws org.json.JSONException
    {
        java.lang.Object $r0;
        java.lang.String $r1;

        $r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <org.json.XML: java.lang.String toString(java.lang.Object,java.lang.String)>($r0, null);

        return $r1;
    }

    public static java.lang.String toString(java.lang.Object, java.lang.String) throws org.json.JSONException
    {
        java.util.Iterator $r4;
        org.json.JSONObject $r3;
        java.lang.StringBuffer $r1;
        int $i0, $i1;
        java.lang.Object $r2;
        java.lang.StringBuilder $r8;
        java.lang.String $r0, $r5, $r6;
        org.json.JSONArray $r7;
        boolean $z0;

        $r2 := @parameter0: java.lang.Object;

        $r0 := @parameter1: java.lang.String;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $z0 = $r2 instanceof org.json.JSONObject;

        if $z0 == 0 goto label13;

        if $r0 == null goto label01;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(60);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r0);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(62);

     label01:
        $r3 = (org.json.JSONObject) $r2;

        $r4 = virtualinvoke $r3.<org.json.JSONObject: java.util.Iterator keys()>();

     label02:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label11;

        $r2 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r5 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        $r2 = virtualinvoke $r3.<org.json.JSONObject: java.lang.Object get(java.lang.String)>($r5);

        $z0 = $r2 instanceof java.lang.String;

        if $z0 == 0 goto label03;

        $r6 = (java.lang.String) $r2;

     label03:
        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("content");

        if $z0 == 0 goto label07;

        $z0 = $r2 instanceof org.json.JSONArray;

        if $z0 == 0 goto label06;

        $r7 = (org.json.JSONArray) $r2;

        $i0 = virtualinvoke $r7.<org.json.JSONArray: int length()>();

        $i1 = 0;

     label04:
        if $i1 >= $i0 goto label02;

        if $i1 <= 0 goto label05;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

     label05:
        $r2 = virtualinvoke $r7.<org.json.JSONArray: java.lang.Object get(int)>($i1);

        $r5 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        $r5 = staticinvoke <org.json.XML: java.lang.String escape(java.lang.String)>($r5);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $i1 = $i1 + 1;

        goto label04;

     label06:
        $r5 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        $r5 = staticinvoke <org.json.XML: java.lang.String escape(java.lang.String)>($r5);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        goto label02;

     label07:
        $z0 = $r2 instanceof org.json.JSONArray;

        if $z0 == 0 goto label09;

        $r7 = (org.json.JSONArray) $r2;

        $i0 = virtualinvoke $r7.<org.json.JSONArray: int length()>();

        $i1 = 0;

     label08:
        if $i1 >= $i0 goto label02;

        $r2 = virtualinvoke $r7.<org.json.JSONArray: java.lang.Object get(int)>($i1);

        $r6 = staticinvoke <org.json.XML: java.lang.String toString(java.lang.Object,java.lang.String)>($r2, $r5);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $i1 = $i1 + 1;

        goto label08;

     label09:
        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label10;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(60);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("/>");

        goto label02;

     label10:
        $r5 = staticinvoke <org.json.XML: java.lang.String toString(java.lang.Object,java.lang.String)>($r2, $r5);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        goto label02;

     label11:
        if $r0 == null goto label12;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("</");

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r0);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(62);

     label12:
        $r0 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r0;

     label13:
        $z0 = $r2 instanceof org.json.JSONArray;

        if $z0 == 0 goto label18;

        $r7 = (org.json.JSONArray) $r2;

        $i0 = virtualinvoke $r7.<org.json.JSONArray: int length()>();

        $i1 = 0;

     label14:
        if $i1 >= $i0 goto label17;

        $r2 = virtualinvoke $r7.<org.json.JSONArray: java.lang.Object opt(int)>($i1);

        if $r0 != null goto label16;

        $r5 = "array";

     label15:
        $r5 = staticinvoke <org.json.XML: java.lang.String toString(java.lang.Object,java.lang.String)>($r2, $r5);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $i1 = $i1 + 1;

        goto label14;

     label16:
        $r5 = $r0;

        goto label15;

     label17:
        $r0 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r0;

     label18:
        if $r2 != null goto label20;

        $r5 = "null";

     label19:
        if $r0 != null goto label21;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r0 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;

     label20:
        $r5 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        $r5 = staticinvoke <org.json.XML: java.lang.String escape(java.lang.String)>($r5);

        goto label19;

     label21:
        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i0 != 0 goto label22;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/>");

        $r0 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;

     label22:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r0 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;
    }
}
