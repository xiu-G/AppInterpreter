public final class dn extends java.lang.Object
{
    private org.w3c.dom.Element a;
    private dn b;
    private java.util.Vector c;
    private java.util.Vector d;

    public void <init>(org.w3c.dom.Element)
    {
        org.w3c.dom.NodeList $r7;
        dl $r6;
        dn r0, $r8;
        do $r3;
        short $s2;
        org.w3c.dom.Element $r1;
        java.util.Vector $r2;
        org.w3c.dom.Node $r5;
        int $i0, $i1;
        org.w3c.dom.NamedNodeMap $r4;

        r0 := @this: dn;

        $r1 := @parameter0: org.w3c.dom.Element;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<dn: org.w3c.dom.Element a> = null;

        r0.<dn: dn b> = null;

        $r2 = new java.util.Vector;

        specialinvoke $r2.<java.util.Vector: void <init>()>();

        r0.<dn: java.util.Vector c> = $r2;

        $r2 = new java.util.Vector;

        specialinvoke $r2.<java.util.Vector: void <init>()>();

        r0.<dn: java.util.Vector d> = $r2;

        if $r1 != null goto label1;

        $r3 = new do;

        specialinvoke $r3.<do: void <init>(java.lang.String,java.lang.String)>("element is null", "XMLElement::XMLElement");

        throw $r3;

     label1:
        r0.<dn: org.w3c.dom.Element a> = $r1;

        $r1 = r0.<dn: org.w3c.dom.Element a>;

        $r4 = interfaceinvoke $r1.<org.w3c.dom.Element: org.w3c.dom.NamedNodeMap getAttributes()>();

        if $r4 == null goto label4;

        $i0 = interfaceinvoke $r4.<org.w3c.dom.NamedNodeMap: int getLength()>();

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label4;

        $r5 = interfaceinvoke $r4.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>($i1);

        if $r5 == null goto label3;

        $r2 = r0.<dn: java.util.Vector c>;

        $r6 = new dl;

        specialinvoke $r6.<dl: void <init>(org.w3c.dom.Node)>($r5);

        virtualinvoke $r2.<java.util.Vector: void addElement(java.lang.Object)>($r6);

     label3:
        $i1 = $i1 + 1;

        goto label2;

     label4:
        $r1 = r0.<dn: org.w3c.dom.Element a>;

        $r7 = interfaceinvoke $r1.<org.w3c.dom.Element: org.w3c.dom.NodeList getChildNodes()>();

        $i0 = interfaceinvoke $r7.<org.w3c.dom.NodeList: int getLength()>();

        $i1 = 0;

     label5:
        if $i1 >= $i0 goto label7;

        $r5 = interfaceinvoke $r7.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>($i1);

        if $r5 == null goto label6;

        $s2 = interfaceinvoke $r5.<org.w3c.dom.Node: short getNodeType()>();

        if $s2 != 1 goto label6;

        $r2 = r0.<dn: java.util.Vector d>;

        $r8 = new dn;

        $r1 = (org.w3c.dom.Element) $r5;

        specialinvoke $r8.<dn: void <init>(org.w3c.dom.Element)>($r1);

        virtualinvoke $r2.<java.util.Vector: void addElement(java.lang.Object)>($r8);

     label6:
        $i1 = $i1 + 1;

        goto label5;

     label7:
        return;
    }

    public final dl a(java.lang.String, java.lang.String)
    {
        dl r6;
        dn r3;
        java.util.Vector $r2, $r4;
        org.w3c.dom.Node $r7;
        int $i0, $i1;
        java.lang.Object $r5;
        java.lang.String $r0, $r1;

        r3 := @this: dn;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        r3 = virtualinvoke r3.<dn: dn b(java.lang.String)>("");

        if r3 != null goto label1;

        return null;

     label1:
        $r2 = new java.util.Vector;

        specialinvoke $r2.<java.util.Vector: void <init>()>();

        $i0 = 0;

     label2:
        $r4 = r3.<dn: java.util.Vector c>;

        $i1 = virtualinvoke $r4.<java.util.Vector: int size()>();

        if $i0 >= $i1 goto label4;

        $r4 = r3.<dn: java.util.Vector c>;

        $r5 = virtualinvoke $r4.<java.util.Vector: java.lang.Object get(int)>($i0);

        r6 = (dl) $r5;

        $r7 = r6.<dl: org.w3c.dom.Node a>;

        $r0 = interfaceinvoke $r7.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $i1 = virtualinvoke $r0.<java.lang.String: int compareTo(java.lang.String)>("Algorithm");

        if $i1 != 0 goto label3;

        $r4 = r3.<dn: java.util.Vector c>;

        $r5 = virtualinvoke $r4.<java.util.Vector: java.lang.Object get(int)>($i0);

        virtualinvoke $r2.<java.util.Vector: void addElement(java.lang.Object)>($r5);

     label3:
        $i0 = $i0 + 1;

        goto label2;

     label4:
        $i0 = virtualinvoke $r2.<java.util.Vector: int size()>();

        if $i0 == 0 goto label5;

        $i0 = virtualinvoke $r2.<java.util.Vector: int size()>();

        if $i0 <= 1 goto label6;

     label5:
        return null;

     label6:
        $r5 = virtualinvoke $r2.<java.util.Vector: java.lang.Object get(int)>(0);

        r6 = (dl) $r5;

        return r6;
    }

    public final java.lang.String a()
    {
        java.lang.Throwable $r3;
        dn r0;
        do $r5;
        short $s0;
        org.w3c.dom.Element $r1;
        org.w3c.dom.Node $r2;
        org.w3c.dom.DOMException $r6;
        int $i1;
        java.lang.String $r4;

        r0 := @this: dn;

        $r1 = r0.<dn: org.w3c.dom.Element a>;

     label01:
        $r2 = interfaceinvoke $r1.<org.w3c.dom.Element: org.w3c.dom.Node getFirstChild()>();

     label02:
        if $r2 != null goto label06;

        $r5 = new do;

     label03:
        specialinvoke $r5.<do: void <init>(java.lang.String,java.lang.String)>("first child node is null", "XMLElement::getValueNode");

     label04:
        throw $r5;

     label05:
        $r3 := @caughtexception;

        $r5 = new do;

        $r6 = (org.w3c.dom.DOMException) $r3;

        $r4 = virtualinvoke $r6.<org.w3c.dom.DOMException: java.lang.String toString()>();

        specialinvoke $r5.<do: void <init>(java.lang.String,java.lang.String)>($r4, "XMLElement::getStrValue");

        throw $r5;

     label06:
        $s0 = interfaceinvoke $r2.<org.w3c.dom.Node: short getNodeType()>();

     label07:
        $i1 = (int) $s0;

        if $i1 == 3 goto label10;

        $r5 = new do;

     label08:
        specialinvoke $r5.<do: void <init>(java.lang.String,java.lang.String)>("not text node", "XMLElement::getValueNode");

     label09:
        throw $r5;

     label10:
        $r4 = interfaceinvoke $r2.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

     label11:
        return $r4;

        catch org.w3c.dom.DOMException from label01 to label02 with label05;
        catch org.w3c.dom.DOMException from label03 to label04 with label05;
        catch org.w3c.dom.DOMException from label06 to label07 with label05;
        catch org.w3c.dom.DOMException from label08 to label09 with label05;
        catch org.w3c.dom.DOMException from label10 to label11 with label05;
    }

    public final java.util.Vector a(java.lang.String)
    {
        dn r3;
        java.util.Vector $r1, $r2;
        org.w3c.dom.Element $r5;
        int $i0, $i1;
        java.lang.Object $r4;
        java.lang.String $r0, $r6;

        r3 := @this: dn;

        $r0 := @parameter0: java.lang.String;

        $r1 = r3.<dn: java.util.Vector d>;

        $r2 = new java.util.Vector;

        specialinvoke $r2.<java.util.Vector: void <init>()>();

        $i0 = 0;

     label1:
        $i1 = virtualinvoke $r1.<java.util.Vector: int size()>();

        if $i0 >= $i1 goto label3;

        $r4 = virtualinvoke $r1.<java.util.Vector: java.lang.Object get(int)>($i0);

        r3 = (dn) $r4;

        $r5 = r3.<dn: org.w3c.dom.Element a>;

        $r6 = interfaceinvoke $r5.<org.w3c.dom.Element: java.lang.String getNodeName()>();

        $i1 = virtualinvoke $r6.<java.lang.String: int compareTo(java.lang.String)>($r0);

        if $i1 != 0 goto label2;

        $r4 = virtualinvoke $r1.<java.util.Vector: java.lang.Object get(int)>($i0);

        virtualinvoke $r2.<java.util.Vector: void addElement(java.lang.Object)>($r4);

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        return $r2;
    }

    public final dn b(java.lang.String)
    {
        dn r1;
        java.util.Vector $r3;
        int $i0, $i1;
        java.lang.Object $r4;
        java.lang.String $r0, $r2;
        boolean $z0;

        r1 := @this: dn;

        $r0 := @parameter0: java.lang.String;

     label1:
        $z0 = virtualinvoke $r0.<java.lang.String: boolean matches(java.lang.String)>("");

        if $z0 == 0 goto label2;

        return r1;

     label2:
        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>(".");

        if $i0 <= 0 goto label5;

        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>(".");

        $r2 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r3 = virtualinvoke r1.<dn: java.util.Vector a(java.lang.String)>($r2);

        $i1 = virtualinvoke $r3.<java.util.Vector: int size()>();

        if $i1 == 0 goto label3;

        $i1 = virtualinvoke $r3.<java.util.Vector: int size()>();

        if $i1 <= 1 goto label4;

     label3:
        return null;

     label4:
        $r4 = virtualinvoke $r3.<java.util.Vector: java.lang.Object get(int)>(0);

        $i0 = $i0 + 1;

        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>($i0, $i1);

        r1 = (dn) $r4;

        goto label1;

     label5:
        $r3 = virtualinvoke r1.<dn: java.util.Vector a(java.lang.String)>($r0);

        $i0 = virtualinvoke $r3.<java.util.Vector: int size()>();

        if $i0 == 0 goto label6;

        $i0 = virtualinvoke $r3.<java.util.Vector: int size()>();

        if $i0 <= 1 goto label7;

     label6:
        return null;

     label7:
        $r4 = virtualinvoke $r3.<java.util.Vector: java.lang.Object get(int)>(0);

        r1 = (dn) $r4;

        return r1;
    }
}
