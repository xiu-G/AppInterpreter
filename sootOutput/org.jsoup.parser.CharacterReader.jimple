class org.jsoup.parser.CharacterReader extends java.lang.Object
{
    static final char EOF;
    private final char[] input;
    private final int length;
    private int mark;
    private int pos;

    void <init>(java.lang.String)
    {
        org.jsoup.parser.CharacterReader r0;
        int $i0;
        char[] $r2;
        java.lang.String $r1;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.jsoup.parser.CharacterReader: int pos> = 0;

        r0.<org.jsoup.parser.CharacterReader: int mark> = 0;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r1);

        $r2 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>();

        r0.<org.jsoup.parser.CharacterReader: char[] input> = $r2;

        $r2 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i0 = lengthof $r2;

        r0.<org.jsoup.parser.CharacterReader: int length> = $i0;

        return;
    }

    void advance()
    {
        int $i0;
        org.jsoup.parser.CharacterReader r0;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $i0 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i0 = $i0 + 1;

        r0.<org.jsoup.parser.CharacterReader: int pos> = $i0;

        return;
    }

    char consume()
    {
        org.jsoup.parser.CharacterReader r0;
        int $i0;
        char[] $r1;
        char c1;
        boolean $z0;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $z0 = virtualinvoke r0.<org.jsoup.parser.CharacterReader: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        c1 = 65535;

     label1:
        $i0 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i0 = $i0 + 1;

        r0.<org.jsoup.parser.CharacterReader: int pos> = $i0;

        return c1;

     label2:
        $r1 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i0 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        c1 = $r1[$i0];

        goto label1;
    }

    java.lang.String consumeAsString()
    {
        org.jsoup.parser.CharacterReader r0;
        int $i0, $i1;
        char[] $r2;
        java.lang.String $r1;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $r1 = new java.lang.String;

        $r2 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i0 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i1 = $i0 + 1;

        r0.<org.jsoup.parser.CharacterReader: int pos> = $i1;

        specialinvoke $r1.<java.lang.String: void <init>(char[],int,int)>($r2, $i0, 1);

        return $r1;
    }

    java.lang.String consumeDigitSequence()
    {
        org.jsoup.parser.CharacterReader r0;
        int i1, $i2, $i3;
        char[] $r1;
        char c0;
        java.lang.String $r2;

        r0 := @this: org.jsoup.parser.CharacterReader;

        i1 = r0.<org.jsoup.parser.CharacterReader: int pos>;

     label1:
        $i2 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i3 = r0.<org.jsoup.parser.CharacterReader: int length>;

        if $i2 >= $i3 goto label2;

        $r1 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i2 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        c0 = $r1[$i2];

        $i2 = (int) c0;

        if $i2 < 48 goto label2;

        $i2 = (int) c0;

        if $i2 > 57 goto label2;

        $i2 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i2 = $i2 + 1;

        r0.<org.jsoup.parser.CharacterReader: int pos> = $i2;

        goto label1;

     label2:
        $r2 = new java.lang.String;

        $r1 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i2 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i2 = $i2 - i1;

        specialinvoke $r2.<java.lang.String: void <init>(char[],int,int)>($r1, i1, $i2);

        return $r2;
    }

    java.lang.String consumeHexSequence()
    {
        org.jsoup.parser.CharacterReader r0;
        int i1, $i2, $i3;
        char[] $r1;
        char c0;
        java.lang.String $r2;

        r0 := @this: org.jsoup.parser.CharacterReader;

        i1 = r0.<org.jsoup.parser.CharacterReader: int pos>;

     label1:
        $i2 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i3 = r0.<org.jsoup.parser.CharacterReader: int length>;

        if $i2 >= $i3 goto label5;

        $r1 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i2 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        c0 = $r1[$i2];

        $i2 = (int) c0;

        if $i2 < 48 goto label2;

        $i2 = (int) c0;

        if $i2 <= 57 goto label4;

     label2:
        $i2 = (int) c0;

        if $i2 < 65 goto label3;

        $i2 = (int) c0;

        if $i2 <= 70 goto label4;

     label3:
        $i2 = (int) c0;

        if $i2 < 97 goto label5;

        $i2 = (int) c0;

        if $i2 > 102 goto label5;

     label4:
        $i2 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i2 = $i2 + 1;

        r0.<org.jsoup.parser.CharacterReader: int pos> = $i2;

        goto label1;

     label5:
        $r2 = new java.lang.String;

        $r1 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i2 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i2 = $i2 - i1;

        specialinvoke $r2.<java.lang.String: void <init>(char[],int,int)>($r1, i1, $i2);

        return $r2;
    }

    java.lang.String consumeLetterSequence()
    {
        org.jsoup.parser.CharacterReader r0;
        int i1, $i2, $i3;
        char[] $r1;
        char c0;
        java.lang.String $r2;

        r0 := @this: org.jsoup.parser.CharacterReader;

        i1 = r0.<org.jsoup.parser.CharacterReader: int pos>;

     label1:
        $i2 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i3 = r0.<org.jsoup.parser.CharacterReader: int length>;

        if $i2 >= $i3 goto label4;

        $r1 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i2 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        c0 = $r1[$i2];

        $i2 = (int) c0;

        if $i2 < 65 goto label2;

        $i2 = (int) c0;

        if $i2 <= 90 goto label3;

     label2:
        $i2 = (int) c0;

        if $i2 < 97 goto label4;

        $i2 = (int) c0;

        if $i2 > 122 goto label4;

     label3:
        $i2 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i2 = $i2 + 1;

        r0.<org.jsoup.parser.CharacterReader: int pos> = $i2;

        goto label1;

     label4:
        $r2 = new java.lang.String;

        $r1 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i2 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i2 = $i2 - i1;

        specialinvoke $r2.<java.lang.String: void <init>(char[],int,int)>($r1, i1, $i2);

        return $r2;
    }

    java.lang.String consumeLetterThenDigitSequence()
    {
        char c3;
        org.jsoup.parser.CharacterReader r0;
        int i0, $i1, $i2;
        char[] $r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: org.jsoup.parser.CharacterReader;

        i0 = r0.<org.jsoup.parser.CharacterReader: int pos>;

     label1:
        $i1 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i2 = r0.<org.jsoup.parser.CharacterReader: int length>;

        if $i1 >= $i2 goto label4;

        $r1 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i1 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        c3 = $r1[$i1];

        $i1 = (int) c3;

        if $i1 < 65 goto label2;

        $i1 = (int) c3;

        if $i1 <= 90 goto label3;

     label2:
        $i1 = (int) c3;

        if $i1 < 97 goto label4;

        $i1 = (int) c3;

        if $i1 > 122 goto label4;

     label3:
        $i1 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i1 = $i1 + 1;

        r0.<org.jsoup.parser.CharacterReader: int pos> = $i1;

        goto label1;

     label4:
        $z0 = virtualinvoke r0.<org.jsoup.parser.CharacterReader: boolean isEmpty()>();

        if $z0 != 0 goto label5;

        $r1 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i1 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        c3 = $r1[$i1];

        $i1 = (int) c3;

        if $i1 < 48 goto label5;

        $i1 = (int) c3;

        if $i1 > 57 goto label5;

        $i1 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i1 = $i1 + 1;

        r0.<org.jsoup.parser.CharacterReader: int pos> = $i1;

        goto label4;

     label5:
        $r2 = new java.lang.String;

        $r1 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i1 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i1 = $i1 - i0;

        specialinvoke $r2.<java.lang.String: void <init>(char[],int,int)>($r1, i0, $i1);

        return $r2;
    }

    java.lang.String consumeTo(char)
    {
        org.jsoup.parser.CharacterReader r0;
        int $i1, $i2;
        char[] $r2;
        char $c0;
        java.lang.String r1, $r3;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $c0 := @parameter0: char;

        $i2 = virtualinvoke r0.<org.jsoup.parser.CharacterReader: int nextIndexOf(char)>($c0);

        if $i2 == -1 goto label1;

        $r3 = new java.lang.String;

        $r2 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i1 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        specialinvoke $r3.<java.lang.String: void <init>(char[],int,int)>($r2, $i1, $i2);

        $i1 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i2 = $i1 + $i2;

        r0.<org.jsoup.parser.CharacterReader: int pos> = $i2;

        return $r3;

     label1:
        r1 = virtualinvoke r0.<org.jsoup.parser.CharacterReader: java.lang.String consumeToEnd()>();

        return r1;
    }

    java.lang.String consumeTo(java.lang.String)
    {
        org.jsoup.parser.CharacterReader r0;
        int $i0, $i1;
        char[] $r2;
        java.lang.String $r1, $r3;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $r1 := @parameter0: java.lang.String;

        $i1 = virtualinvoke r0.<org.jsoup.parser.CharacterReader: int nextIndexOf(java.lang.CharSequence)>("]]>");

        if $i1 == -1 goto label1;

        $r3 = new java.lang.String;

        $r2 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i0 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        specialinvoke $r3.<java.lang.String: void <init>(char[],int,int)>($r2, $i0, $i1);

        $i0 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i1 = $i0 + $i1;

        r0.<org.jsoup.parser.CharacterReader: int pos> = $i1;

        return $r3;

     label1:
        $r1 = virtualinvoke r0.<org.jsoup.parser.CharacterReader: java.lang.String consumeToEnd()>();

        return $r1;
    }

    transient java.lang.String consumeToAny(char[])
    {
        char $c3, $c4;
        org.jsoup.parser.CharacterReader r0;
        int i0, $i1, $i2, $i5;
        char[] $r1, $r2;
        java.lang.String $r3;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $r1 := @parameter0: char[];

        i0 = r0.<org.jsoup.parser.CharacterReader: int pos>;

     label1:
        $i1 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i2 = r0.<org.jsoup.parser.CharacterReader: int length>;

        if $i1 >= $i2 goto label3;

        $i1 = 0;

     label2:
        $i2 = lengthof $r1;

        if $i1 >= $i2 goto label5;

        $r2 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i2 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $c3 = $r2[$i2];

        $c4 = $r1[$i1];

        $i2 = (int) $c3;

        $i5 = (int) $c4;

        if $i2 != $i5 goto label4;

     label3:
        $i1 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        if $i1 <= i0 goto label6;

        $r3 = new java.lang.String;

        $r1 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i1 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i1 = $i1 - i0;

        specialinvoke $r3.<java.lang.String: void <init>(char[],int,int)>($r1, i0, $i1);

        return $r3;

     label4:
        $i1 = $i1 + 1;

        goto label2;

     label5:
        $i1 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i1 = $i1 + 1;

        r0.<org.jsoup.parser.CharacterReader: int pos> = $i1;

        goto label1;

     label6:
        return "";
    }

    java.lang.String consumeToEnd()
    {
        org.jsoup.parser.CharacterReader r0;
        int $i0, $i1, $i2;
        char[] $r2;
        java.lang.String r1;

        r0 := @this: org.jsoup.parser.CharacterReader;

        r1 = new java.lang.String;

        $r2 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i0 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i2 = r0.<org.jsoup.parser.CharacterReader: int length>;

        $i1 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i1 = $i2 - $i1;

        specialinvoke r1.<java.lang.String: void <init>(char[],int,int)>($r2, $i0, $i1);

        $i0 = r0.<org.jsoup.parser.CharacterReader: int length>;

        r0.<org.jsoup.parser.CharacterReader: int pos> = $i0;

        return r1;
    }

    boolean containsIgnoreCase(java.lang.String)
    {
        org.jsoup.parser.CharacterReader r0;
        java.util.Locale $r2;
        int $i0;
        java.lang.String $r1, $r3;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $r1 := @parameter0: java.lang.String;

        $r2 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r3 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r2);

        $r2 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r2);

        $i0 = virtualinvoke r0.<org.jsoup.parser.CharacterReader: int nextIndexOf(java.lang.CharSequence)>($r3);

        if $i0 > -1 goto label1;

        $i0 = virtualinvoke r0.<org.jsoup.parser.CharacterReader: int nextIndexOf(java.lang.CharSequence)>($r1);

        if $i0 <= -1 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    char current()
    {
        org.jsoup.parser.CharacterReader r0;
        int $i0;
        char[] $r1;
        char $c1;
        boolean $z0;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $z0 = virtualinvoke r0.<org.jsoup.parser.CharacterReader: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return 65535;

     label1:
        $r1 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i0 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $c1 = $r1[$i0];

        return $c1;
    }

    boolean isEmpty()
    {
        int $i0, $i1;
        org.jsoup.parser.CharacterReader r0;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $i1 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i0 = r0.<org.jsoup.parser.CharacterReader: int length>;

        if $i1 < $i0 goto label1;

        return 1;

     label1:
        return 0;
    }

    void mark()
    {
        int $i0;
        org.jsoup.parser.CharacterReader r0;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $i0 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        r0.<org.jsoup.parser.CharacterReader: int mark> = $i0;

        return;
    }

    boolean matchConsume(java.lang.String)
    {
        org.jsoup.parser.CharacterReader r0;
        int $i0, $i1;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<org.jsoup.parser.CharacterReader: boolean matches(java.lang.String)>($r1);

        if $z0 == 0 goto label1;

        $i0 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i0 = $i0 + $i1;

        r0.<org.jsoup.parser.CharacterReader: int pos> = $i0;

        return 1;

     label1:
        return 0;
    }

    boolean matchConsumeIgnoreCase(java.lang.String)
    {
        org.jsoup.parser.CharacterReader r0;
        int $i0, $i1;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<org.jsoup.parser.CharacterReader: boolean matchesIgnoreCase(java.lang.String)>($r1);

        if $z0 == 0 goto label1;

        $i0 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i0 = $i0 + $i1;

        r0.<org.jsoup.parser.CharacterReader: int pos> = $i0;

        return 1;

     label1:
        return 0;
    }

    boolean matches(char)
    {
        org.jsoup.parser.CharacterReader r0;
        int $i1, $i3;
        char[] $r1;
        char $c0, $c2;
        boolean $z0;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $c0 := @parameter0: char;

        $z0 = virtualinvoke r0.<org.jsoup.parser.CharacterReader: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r1 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i1 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $c2 = $r1[$i1];

        $i1 = (int) $c2;

        $i3 = (int) $c0;

        if $i1 != $i3 goto label1;

        return 1;

     label1:
        return 0;
    }

    boolean matches(java.lang.String)
    {
        char $c3, $c4;
        org.jsoup.parser.CharacterReader r0;
        int $i0, $i1, $i2, $i5;
        char[] $r2;
        java.lang.String $r1;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i1 = r0.<org.jsoup.parser.CharacterReader: int length>;

        $i2 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i1 = $i1 - $i2;

        if $i0 <= $i1 goto label1;

        return 0;

     label1:
        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label3;

        $c3 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i1);

        $r2 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i2 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i2 = $i2 + $i1;

        $c4 = $r2[$i2];

        $i2 = (int) $c3;

        $i5 = (int) $c4;

        if $i2 != $i5 goto label4;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        return 1;

     label4:
        return 0;
    }

    transient boolean matchesAny(char[])
    {
        char c0, c2;
        org.jsoup.parser.CharacterReader r0;
        int i1, i3, $i4, $i5;
        char[] $r1, $r2;
        boolean $z0;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $r1 := @parameter0: char[];

        $z0 = virtualinvoke r0.<org.jsoup.parser.CharacterReader: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r2 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        i1 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        c0 = $r2[i1];

        i1 = lengthof $r1;

        i3 = 0;

     label2:
        if i3 >= i1 goto label4;

        c2 = $r1[i3];

        $i4 = (int) c2;

        $i5 = (int) c0;

        if $i4 != $i5 goto label3;

        return 1;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        return 0;
    }

    boolean matchesDigit()
    {
        org.jsoup.parser.CharacterReader r0;
        int $i1;
        char[] $r1;
        char c0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $z0 = virtualinvoke r0.<org.jsoup.parser.CharacterReader: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r1 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i1 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        c0 = $r1[$i1];

        $i1 = (int) c0;

        if $i1 < 48 goto label2;

        $i1 = (int) c0;

        if $i1 > 57 goto label2;

        return 1;

     label2:
        return 0;
    }

    boolean matchesIgnoreCase(java.lang.String)
    {
        char $c3, $c4;
        org.jsoup.parser.CharacterReader r0;
        int $i0, $i1, $i2, $i5;
        char[] $r2;
        java.lang.String $r1;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i1 = r0.<org.jsoup.parser.CharacterReader: int length>;

        $i2 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i1 = $i1 - $i2;

        if $i0 <= $i1 goto label1;

        return 0;

     label1:
        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label3;

        $c3 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i1);

        $c3 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c3);

        $r2 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i2 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i2 = $i2 + $i1;

        $c4 = $r2[$i2];

        $c4 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c4);

        $i2 = (int) $c3;

        $i5 = (int) $c4;

        if $i2 != $i5 goto label4;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        return 1;

     label4:
        return 0;
    }

    boolean matchesLetter()
    {
        org.jsoup.parser.CharacterReader r0;
        int $i1;
        char[] $r1;
        char c0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $z0 = virtualinvoke r0.<org.jsoup.parser.CharacterReader: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r1 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i1 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        c0 = $r1[$i1];

        $i1 = (int) c0;

        if $i1 < 65 goto label2;

        $i1 = (int) c0;

        if $i1 <= 90 goto label3;

     label2:
        $i1 = (int) c0;

        if $i1 < 97 goto label4;

        $i1 = (int) c0;

        if $i1 > 122 goto label4;

     label3:
        return 1;

     label4:
        return 0;
    }

    int nextIndexOf(char)
    {
        org.jsoup.parser.CharacterReader r0;
        int i1, $i2, $i4;
        char[] $r1;
        char $c0, $c3;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $c0 := @parameter0: char;

        i1 = r0.<org.jsoup.parser.CharacterReader: int pos>;

     label1:
        $i2 = r0.<org.jsoup.parser.CharacterReader: int length>;

        if i1 >= $i2 goto label3;

        $r1 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $c3 = $r1[i1];

        $i2 = (int) $c0;

        $i4 = (int) $c3;

        if $i2 != $i4 goto label2;

        $i2 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        i1 = i1 - $i2;

        return i1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return -1;
    }

    int nextIndexOf(java.lang.CharSequence)
    {
        java.lang.CharSequence $r1;
        char $c1, $c4, $c6;
        org.jsoup.parser.CharacterReader r0;
        int i0, i2, $i3, i5, $i7, $i8;
        char[] $r2;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $r1 := @parameter0: java.lang.CharSequence;

        $c1 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>(0);

        i2 = r0.<org.jsoup.parser.CharacterReader: int pos>;

     label1:
        $i3 = r0.<org.jsoup.parser.CharacterReader: int length>;

        if i2 >= $i3 goto label7;

        $r2 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $c4 = $r2[i2];

        $i3 = (int) $c1;

        i0 = (int) $c4;

        if $i3 == i0 goto label3;

     label2:
        i2 = i2 + 1;

        $i3 = r0.<org.jsoup.parser.CharacterReader: int length>;

        if i2 >= $i3 goto label3;

        $r2 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $c4 = $r2[i2];

        $i3 = (int) $c1;

        i0 = (int) $c4;

        if $i3 != i0 goto label2;

     label3:
        $i3 = r0.<org.jsoup.parser.CharacterReader: int length>;

        if i2 >= $i3 goto label6;

        $i3 = i2 + 1;

        i0 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        i0 = i0 + $i3;

        i0 = i0 + -1;

        i5 = 1;

     label4:
        if $i3 >= i0 goto label5;

        $c4 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>(i5);

        $r2 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $c6 = $r2[$i3];

        $i7 = (int) $c4;

        $i8 = (int) $c6;

        if $i7 != $i8 goto label5;

        $i3 = $i3 + 1;

        i5 = i5 + 1;

        goto label4;

     label5:
        if $i3 != i0 goto label6;

        $i3 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        i2 = i2 - $i3;

        return i2;

     label6:
        i2 = i2 + 1;

        goto label1;

     label7:
        return -1;
    }

    int pos()
    {
        int i0;
        org.jsoup.parser.CharacterReader r0;

        r0 := @this: org.jsoup.parser.CharacterReader;

        i0 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        return i0;
    }

    void rewindToMark()
    {
        int $i0;
        org.jsoup.parser.CharacterReader r0;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $i0 = r0.<org.jsoup.parser.CharacterReader: int mark>;

        r0.<org.jsoup.parser.CharacterReader: int pos> = $i0;

        return;
    }

    public java.lang.String toString()
    {
        org.jsoup.parser.CharacterReader r0;
        int $i0, $i1, $i2;
        char[] $r2;
        java.lang.String $r1;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $r1 = new java.lang.String;

        $r2 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i0 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i2 = r0.<org.jsoup.parser.CharacterReader: int length>;

        $i1 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i1 = $i2 - $i1;

        specialinvoke $r1.<java.lang.String: void <init>(char[],int,int)>($r2, $i0, $i1);

        return $r1;
    }

    void unconsume()
    {
        int $i0;
        org.jsoup.parser.CharacterReader r0;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $i0 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i0 = $i0 + -1;

        r0.<org.jsoup.parser.CharacterReader: int pos> = $i0;

        return;
    }

    public static void <clinit>()
    {
        <org.jsoup.parser.CharacterReader: char EOF> = 65535;

        return;
    }
}
