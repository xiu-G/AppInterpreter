public abstract class de.greenrobot.dao.test.AbstractDaoTestSinglePk extends de.greenrobot.dao.test.AbstractDaoTest
{
    private de.greenrobot.dao.Property pkColumn;
    protected java.util.Set usedPks;

    public void <init>(java.lang.Class)
    {
        java.util.HashSet $r2;
        java.lang.Class $r1;
        de.greenrobot.dao.test.AbstractDaoTestSinglePk r0;

        r0 := @this: de.greenrobot.dao.test.AbstractDaoTestSinglePk;

        $r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<de.greenrobot.dao.test.AbstractDaoTest: void <init>(java.lang.Class)>($r1);

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: java.util.Set usedPks> = $r2;

        return;
    }

    protected abstract java.lang.Object createEntity(java.lang.Object);

    protected java.lang.Object createEntityWithRandomPk()
    {
        java.lang.Object $r1;
        de.greenrobot.dao.test.AbstractDaoTestSinglePk r0;

        r0 := @this: de.greenrobot.dao.test.AbstractDaoTestSinglePk;

        $r1 = virtualinvoke r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: java.lang.Object nextPk()>();

        $r1 = virtualinvoke r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: java.lang.Object createEntity(java.lang.Object)>($r1);

        return $r1;
    }

    protected abstract java.lang.Object createRandomPk();

    protected java.lang.Object nextPk()
    {
        java.lang.IllegalStateException $r3;
        int $i0;
        java.util.Set $r2;
        java.lang.Object $r1;
        de.greenrobot.dao.test.AbstractDaoTestSinglePk r0;
        boolean $z0;

        r0 := @this: de.greenrobot.dao.test.AbstractDaoTestSinglePk;

        $i0 = 0;

     label1:
        if $i0 >= 100000 goto label3;

        $r1 = virtualinvoke r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: java.lang.Object createRandomPk()>();

        $r2 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: java.util.Set usedPks>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        return $r1;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Could not find a new PK");

        throw $r3;
    }

    protected android.database.Cursor queryWithDummyColumnsInFront(int, java.lang.String, java.lang.Object)
    {
        java.lang.String[] $r6;
        java.lang.RuntimeException $r10;
        android.database.sqlite.SQLiteDatabase $r8;
        de.greenrobot.dao.AbstractDao $r5;
        int $i0, $i1, $i2;
        java.lang.Object $r2;
        java.lang.StringBuilder $r3, $r4;
        java.lang.String $r1, $r7;
        de.greenrobot.dao.test.AbstractDaoTestSinglePk r0;
        android.database.Cursor $r9;
        boolean $z0;

        r0 := @this: de.greenrobot.dao.test.AbstractDaoTestSinglePk;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.Object;

        $i1 = 0;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("SELECT ");

        $i2 = 0;

     label01:
        if $i2 >= $i0 goto label02;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $i2 = $i2 + 1;

        goto label01;

     label02:
        $r5 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.AbstractDao dao>;

        $r6 = virtualinvoke $r5.<de.greenrobot.dao.AbstractDao: java.lang.String[] getAllColumns()>();

        $r4 = staticinvoke <de.greenrobot.dao.internal.SqlUtils: java.lang.StringBuilder appendColumns(java.lang.StringBuilder,java.lang.String,java.lang.String[])>($r3, "T", $r6);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" FROM ");

        $r5 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.AbstractDao dao>;

        $r7 = virtualinvoke $r5.<de.greenrobot.dao.AbstractDao: java.lang.String getTablename()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" T");

        if $r2 == null goto label03;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" WHERE ");

        $r5 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.AbstractDao dao>;

        $r6 = virtualinvoke $r5.<de.greenrobot.dao.AbstractDao: java.lang.String[] getPkColumns()>();

        $i2 = lengthof $r6;

        staticinvoke <de.greenrobot.dao.test.AbstractDaoTestSinglePk: void assertEquals(int,int)>(1, $i2);

        $r5 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.AbstractDao dao>;

        $r6 = virtualinvoke $r5.<de.greenrobot.dao.AbstractDao: java.lang.String[] getPkColumns()>();

        $r7 = $r6[0];

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        staticinvoke <android.database.DatabaseUtils: void appendValueToSql(java.lang.StringBuilder,java.lang.Object)>($r3, $r2);

     label03:
        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: android.database.sqlite.SQLiteDatabase db>;

        $r9 = virtualinvoke $r8.<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])>($r7, null);

        $z0 = interfaceinvoke $r9.<android.database.Cursor: boolean moveToFirst()>();

        staticinvoke <de.greenrobot.dao.test.AbstractDaoTestSinglePk: void assertTrue(boolean)>($z0);

     label04:
        if $i1 >= $i0 goto label07;

     label05:
        $r7 = interfaceinvoke $r9.<android.database.Cursor: java.lang.String getString(int)>($i1);

        staticinvoke <de.greenrobot.dao.test.AbstractDaoTestSinglePk: void assertEquals(java.lang.String,java.lang.String)>($r1, $r7);

     label06:
        $i1 = $i1 + 1;

        goto label04;

     label07:
        if $r2 == null goto label11;

     label08:
        $i0 = interfaceinvoke $r9.<android.database.Cursor: int getCount()>();

        staticinvoke <de.greenrobot.dao.test.AbstractDaoTestSinglePk: void assertEquals(int,int)>(1, $i0);

     label09:
        return $r9;

     label10:
        $r10 := @caughtexception;

        interfaceinvoke $r9.<android.database.Cursor: void close()>();

        throw $r10;

     label11:
        return $r9;

        catch java.lang.RuntimeException from label05 to label06 with label10;
        catch java.lang.RuntimeException from label08 to label09 with label10;
    }

    protected void runLoadPkTest(int)
    {
        java.lang.Throwable $r6;
        de.greenrobot.dao.AbstractDao $r3;
        de.greenrobot.dao.InternalUnitTestDaoAccess $r5;
        int $i0;
        java.lang.Object $r1, $r2;
        de.greenrobot.dao.test.AbstractDaoTestSinglePk r0;
        android.database.Cursor $r4;

        r0 := @this: de.greenrobot.dao.test.AbstractDaoTestSinglePk;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: java.lang.Object nextPk()>();

        $r2 = virtualinvoke r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: java.lang.Object createEntity(java.lang.Object)>($r1);

        $r3 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.AbstractDao dao>;

        virtualinvoke $r3.<de.greenrobot.dao.AbstractDao: long insert(java.lang.Object)>($r2);

        $r4 = virtualinvoke r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: android.database.Cursor queryWithDummyColumnsInFront(int,java.lang.String,java.lang.Object)>($i0, "42", $r1);

     label1:
        $r5 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.InternalUnitTestDaoAccess daoAccess>;

        $r2 = virtualinvoke $r5.<de.greenrobot.dao.InternalUnitTestDaoAccess: java.lang.Object readKey(android.database.Cursor,int)>($r4, $i0);

        staticinvoke <de.greenrobot.dao.test.AbstractDaoTestSinglePk: void assertEquals(java.lang.Object,java.lang.Object)>($r1, $r2);

     label2:
        interfaceinvoke $r4.<android.database.Cursor: void close()>();

        return;

     label3:
        $r6 := @caughtexception;

        interfaceinvoke $r4.<android.database.Cursor: void close()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    protected void setUp()
    {
        de.greenrobot.dao.Property[] $r2;
        java.lang.RuntimeException $r5;
        de.greenrobot.dao.Property $r1, $r4;
        de.greenrobot.dao.InternalUnitTestDaoAccess $r3;
        int $i0, $i1;
        de.greenrobot.dao.test.AbstractDaoTestSinglePk r0;
        boolean $z0;

        r0 := @this: de.greenrobot.dao.test.AbstractDaoTestSinglePk;

        specialinvoke r0.<de.greenrobot.dao.test.AbstractDaoTest: void setUp()>();

        $r3 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.InternalUnitTestDaoAccess daoAccess>;

        $r2 = virtualinvoke $r3.<de.greenrobot.dao.InternalUnitTestDaoAccess: de.greenrobot.dao.Property[] getProperties()>();

        $i0 = lengthof $r2;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label4;

        $r1 = $r2[$i1];

        $z0 = $r1.<de.greenrobot.dao.Property: boolean primaryKey>;

        if $z0 == 0 goto label3;

        $r4 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.Property pkColumn>;

        if $r4 == null goto label2;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>("Test does not work with multiple PK columns");

        throw $r5;

     label2:
        r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.Property pkColumn> = $r1;

     label3:
        $i1 = $i1 + 1;

        goto label1;

     label4:
        $r1 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.Property pkColumn>;

        if $r1 != null goto label5;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>("Test does not work without a PK column");

        throw $r5;

     label5:
        return;
    }

    public void testCount()
    {
        de.greenrobot.dao.AbstractDao $r1;
        long $l0;
        java.lang.Object $r2;
        de.greenrobot.dao.test.AbstractDaoTestSinglePk r0;

        r0 := @this: de.greenrobot.dao.test.AbstractDaoTestSinglePk;

        $r1 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.AbstractDao dao>;

        virtualinvoke $r1.<de.greenrobot.dao.AbstractDao: void deleteAll()>();

        $r1 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.AbstractDao dao>;

        $l0 = virtualinvoke $r1.<de.greenrobot.dao.AbstractDao: long count()>();

        staticinvoke <de.greenrobot.dao.test.AbstractDaoTestSinglePk: void assertEquals(long,long)>(0L, $l0);

        $r1 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.AbstractDao dao>;

        $r2 = virtualinvoke r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: java.lang.Object createEntityWithRandomPk()>();

        virtualinvoke $r1.<de.greenrobot.dao.AbstractDao: long insert(java.lang.Object)>($r2);

        $r1 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.AbstractDao dao>;

        $l0 = virtualinvoke $r1.<de.greenrobot.dao.AbstractDao: long count()>();

        staticinvoke <de.greenrobot.dao.test.AbstractDaoTestSinglePk: void assertEquals(long,long)>(1L, $l0);

        $r1 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.AbstractDao dao>;

        $r2 = virtualinvoke r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: java.lang.Object createEntityWithRandomPk()>();

        virtualinvoke $r1.<de.greenrobot.dao.AbstractDao: long insert(java.lang.Object)>($r2);

        $r1 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.AbstractDao dao>;

        $l0 = virtualinvoke $r1.<de.greenrobot.dao.AbstractDao: long count()>();

        staticinvoke <de.greenrobot.dao.test.AbstractDaoTestSinglePk: void assertEquals(long,long)>(2L, $l0);

        return;
    }

    public void testDelete()
    {
        de.greenrobot.dao.AbstractDao $r1;
        java.lang.Object $r2, $r3;
        de.greenrobot.dao.test.AbstractDaoTestSinglePk r0;

        r0 := @this: de.greenrobot.dao.test.AbstractDaoTestSinglePk;

        $r2 = virtualinvoke r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: java.lang.Object nextPk()>();

        $r1 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.AbstractDao dao>;

        virtualinvoke $r1.<de.greenrobot.dao.AbstractDao: void deleteByKey(java.lang.Object)>($r2);

        $r3 = virtualinvoke r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: java.lang.Object createEntity(java.lang.Object)>($r2);

        $r1 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.AbstractDao dao>;

        virtualinvoke $r1.<de.greenrobot.dao.AbstractDao: long insert(java.lang.Object)>($r3);

        $r1 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.AbstractDao dao>;

        $r3 = virtualinvoke $r1.<de.greenrobot.dao.AbstractDao: java.lang.Object load(java.lang.Object)>($r2);

        staticinvoke <de.greenrobot.dao.test.AbstractDaoTestSinglePk: void assertNotNull(java.lang.Object)>($r3);

        $r1 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.AbstractDao dao>;

        virtualinvoke $r1.<de.greenrobot.dao.AbstractDao: void deleteByKey(java.lang.Object)>($r2);

        $r1 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.AbstractDao dao>;

        $r2 = virtualinvoke $r1.<de.greenrobot.dao.AbstractDao: java.lang.Object load(java.lang.Object)>($r2);

        staticinvoke <de.greenrobot.dao.test.AbstractDaoTestSinglePk: void assertNull(java.lang.Object)>($r2);

        return;
    }

    public void testDeleteAll()
    {
        java.util.Iterator $r4;
        long $l1;
        java.util.ArrayList $r1;
        de.greenrobot.dao.AbstractDao $r3;
        de.greenrobot.dao.InternalUnitTestDaoAccess $r5;
        int $i0;
        java.lang.Object $r2;
        de.greenrobot.dao.test.AbstractDaoTestSinglePk r0;
        boolean $z0;

        r0 := @this: de.greenrobot.dao.test.AbstractDaoTestSinglePk;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $i0 = 0;

     label1:
        if $i0 >= 10 goto label2;

        $r2 = virtualinvoke r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: java.lang.Object createEntityWithRandomPk()>();

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r3 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.AbstractDao dao>;

        virtualinvoke $r3.<de.greenrobot.dao.AbstractDao: void insertInTx(java.lang.Iterable)>($r1);

        $r3 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.AbstractDao dao>;

        virtualinvoke $r3.<de.greenrobot.dao.AbstractDao: void deleteAll()>();

        $r3 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.AbstractDao dao>;

        $l1 = virtualinvoke $r3.<de.greenrobot.dao.AbstractDao: long count()>();

        staticinvoke <de.greenrobot.dao.test.AbstractDaoTestSinglePk: void assertEquals(long,long)>(0L, $l1);

        $r4 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r2 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r5 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.InternalUnitTestDaoAccess daoAccess>;

        $r2 = virtualinvoke $r5.<de.greenrobot.dao.InternalUnitTestDaoAccess: java.lang.Object getKey(java.lang.Object)>($r2);

        staticinvoke <de.greenrobot.dao.test.AbstractDaoTestSinglePk: void assertNotNull(java.lang.Object)>($r2);

        $r3 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.AbstractDao dao>;

        $r2 = virtualinvoke $r3.<de.greenrobot.dao.AbstractDao: java.lang.Object load(java.lang.Object)>($r2);

        staticinvoke <de.greenrobot.dao.test.AbstractDaoTestSinglePk: void assertNull(java.lang.Object)>($r2);

        goto label3;

     label4:
        return;
    }

    public void testDeleteByKeyInTx()
    {
        java.util.Iterator $r6;
        long $l2, $l3;
        java.util.ArrayList $r1, $r4;
        de.greenrobot.dao.AbstractDao $r3;
        de.greenrobot.dao.InternalUnitTestDaoAccess $r5;
        int $i0, $i1;
        java.lang.Object $r2;
        de.greenrobot.dao.test.AbstractDaoTestSinglePk r0;
        boolean $z0;

        r0 := @this: de.greenrobot.dao.test.AbstractDaoTestSinglePk;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $i0 = 0;

     label1:
        if $i0 >= 10 goto label2;

        $r2 = virtualinvoke r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: java.lang.Object createEntityWithRandomPk()>();

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r3 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.AbstractDao dao>;

        virtualinvoke $r3.<de.greenrobot.dao.AbstractDao: void insertInTx(java.lang.Iterable)>($r1);

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.InternalUnitTestDaoAccess daoAccess>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r2 = virtualinvoke $r5.<de.greenrobot.dao.InternalUnitTestDaoAccess: java.lang.Object getKey(java.lang.Object)>($r2);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r2);

        $r5 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.InternalUnitTestDaoAccess daoAccess>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(3);

        $r2 = virtualinvoke $r5.<de.greenrobot.dao.InternalUnitTestDaoAccess: java.lang.Object getKey(java.lang.Object)>($r2);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r2);

        $r5 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.InternalUnitTestDaoAccess daoAccess>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(4);

        $r2 = virtualinvoke $r5.<de.greenrobot.dao.InternalUnitTestDaoAccess: java.lang.Object getKey(java.lang.Object)>($r2);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r2);

        $r5 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.InternalUnitTestDaoAccess daoAccess>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(8);

        $r2 = virtualinvoke $r5.<de.greenrobot.dao.InternalUnitTestDaoAccess: java.lang.Object getKey(java.lang.Object)>($r2);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r2);

        $r3 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.AbstractDao dao>;

        virtualinvoke $r3.<de.greenrobot.dao.AbstractDao: void deleteByKeyInTx(java.lang.Iterable)>($r4);

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = interfaceinvoke $r4.<java.util.List: int size()>();

        $i0 = $i0 - $i1;

        $l2 = (long) $i0;

        $r3 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.AbstractDao dao>;

        $l3 = virtualinvoke $r3.<de.greenrobot.dao.AbstractDao: long count()>();

        staticinvoke <de.greenrobot.dao.test.AbstractDaoTestSinglePk: void assertEquals(long,long)>($l2, $l3);

        $r6 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r2 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <de.greenrobot.dao.test.AbstractDaoTestSinglePk: void assertNotNull(java.lang.Object)>($r2);

        $r3 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.AbstractDao dao>;

        $r2 = virtualinvoke $r3.<de.greenrobot.dao.AbstractDao: java.lang.Object load(java.lang.Object)>($r2);

        staticinvoke <de.greenrobot.dao.test.AbstractDaoTestSinglePk: void assertNull(java.lang.Object)>($r2);

        goto label3;

     label4:
        return;
    }

    public void testDeleteInTx()
    {
        java.util.Iterator $r5;
        long $l2, $l3;
        java.util.ArrayList $r1, $r4;
        de.greenrobot.dao.AbstractDao $r3;
        de.greenrobot.dao.InternalUnitTestDaoAccess $r6;
        int $i0, $i1;
        java.lang.Object $r2;
        de.greenrobot.dao.test.AbstractDaoTestSinglePk r0;
        boolean $z0;

        r0 := @this: de.greenrobot.dao.test.AbstractDaoTestSinglePk;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $i0 = 0;

     label1:
        if $i0 >= 10 goto label2;

        $r2 = virtualinvoke r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: java.lang.Object createEntityWithRandomPk()>();

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r3 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.AbstractDao dao>;

        virtualinvoke $r3.<de.greenrobot.dao.AbstractDao: void insertInTx(java.lang.Iterable)>($r1);

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r2);

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(3);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r2);

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(4);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r2);

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(8);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r2);

        $r3 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.AbstractDao dao>;

        virtualinvoke $r3.<de.greenrobot.dao.AbstractDao: void deleteInTx(java.lang.Iterable)>($r4);

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = interfaceinvoke $r4.<java.util.List: int size()>();

        $i0 = $i0 - $i1;

        $l2 = (long) $i0;

        $r3 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.AbstractDao dao>;

        $l3 = virtualinvoke $r3.<de.greenrobot.dao.AbstractDao: long count()>();

        staticinvoke <de.greenrobot.dao.test.AbstractDaoTestSinglePk: void assertEquals(long,long)>($l2, $l3);

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r2 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r6 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.InternalUnitTestDaoAccess daoAccess>;

        $r2 = virtualinvoke $r6.<de.greenrobot.dao.InternalUnitTestDaoAccess: java.lang.Object getKey(java.lang.Object)>($r2);

        staticinvoke <de.greenrobot.dao.test.AbstractDaoTestSinglePk: void assertNotNull(java.lang.Object)>($r2);

        $r3 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.AbstractDao dao>;

        $r2 = virtualinvoke $r3.<de.greenrobot.dao.AbstractDao: java.lang.Object load(java.lang.Object)>($r2);

        staticinvoke <de.greenrobot.dao.test.AbstractDaoTestSinglePk: void assertNull(java.lang.Object)>($r2);

        goto label3;

     label4:
        return;
    }

    public void testInsertAndLoad()
    {
        de.greenrobot.dao.AbstractDao $r3;
        de.greenrobot.dao.InternalUnitTestDaoAccess $r4;
        java.lang.Object $r1, $r2, $r5;
        de.greenrobot.dao.test.AbstractDaoTestSinglePk r0;

        r0 := @this: de.greenrobot.dao.test.AbstractDaoTestSinglePk;

        $r1 = virtualinvoke r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: java.lang.Object nextPk()>();

        $r2 = virtualinvoke r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: java.lang.Object createEntity(java.lang.Object)>($r1);

        $r3 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.AbstractDao dao>;

        virtualinvoke $r3.<de.greenrobot.dao.AbstractDao: long insert(java.lang.Object)>($r2);

        $r4 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.InternalUnitTestDaoAccess daoAccess>;

        $r5 = virtualinvoke $r4.<de.greenrobot.dao.InternalUnitTestDaoAccess: java.lang.Object getKey(java.lang.Object)>($r2);

        staticinvoke <de.greenrobot.dao.test.AbstractDaoTestSinglePk: void assertEquals(java.lang.Object,java.lang.Object)>($r1, $r5);

        $r3 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.AbstractDao dao>;

        $r1 = virtualinvoke $r3.<de.greenrobot.dao.AbstractDao: java.lang.Object load(java.lang.Object)>($r1);

        staticinvoke <de.greenrobot.dao.test.AbstractDaoTestSinglePk: void assertNotNull(java.lang.Object)>($r1);

        $r4 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.InternalUnitTestDaoAccess daoAccess>;

        $r2 = virtualinvoke $r4.<de.greenrobot.dao.InternalUnitTestDaoAccess: java.lang.Object getKey(java.lang.Object)>($r2);

        $r4 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.InternalUnitTestDaoAccess daoAccess>;

        $r1 = virtualinvoke $r4.<de.greenrobot.dao.InternalUnitTestDaoAccess: java.lang.Object getKey(java.lang.Object)>($r1);

        staticinvoke <de.greenrobot.dao.test.AbstractDaoTestSinglePk: void assertEquals(java.lang.Object,java.lang.Object)>($r2, $r1);

        return;
    }

    public void testInsertInTx()
    {
        de.greenrobot.dao.AbstractDao $r2;
        int $i0;
        java.lang.Object $r3;
        long $l1, $l2;
        de.greenrobot.dao.test.AbstractDaoTestSinglePk r0;
        java.util.ArrayList $r1;

        r0 := @this: de.greenrobot.dao.test.AbstractDaoTestSinglePk;

        $r2 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.AbstractDao dao>;

        virtualinvoke $r2.<de.greenrobot.dao.AbstractDao: void deleteAll()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $i0 = 0;

     label1:
        if $i0 >= 20 goto label2;

        $r3 = virtualinvoke r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: java.lang.Object createEntityWithRandomPk()>();

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r3);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r2 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.AbstractDao dao>;

        virtualinvoke $r2.<de.greenrobot.dao.AbstractDao: void insertInTx(java.lang.Iterable)>($r1);

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $l1 = (long) $i0;

        $r2 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.AbstractDao dao>;

        $l2 = virtualinvoke $r2.<de.greenrobot.dao.AbstractDao: long count()>();

        staticinvoke <de.greenrobot.dao.test.AbstractDaoTestSinglePk: void assertEquals(long,long)>($l1, $l2);

        return;
    }

    public void testInsertOrReplaceInTx()
    {
        long $l2, $l3;
        java.util.ArrayList $r1, $r3;
        de.greenrobot.dao.AbstractDao $r2;
        int $i0, $i1;
        java.lang.Object $r4;
        de.greenrobot.dao.test.AbstractDaoTestSinglePk r0;

        r0 := @this: de.greenrobot.dao.test.AbstractDaoTestSinglePk;

        $r2 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.AbstractDao dao>;

        virtualinvoke $r2.<de.greenrobot.dao.AbstractDao: void deleteAll()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $i1 = 0;

     label1:
        if $i1 >= 20 goto label3;

        $r4 = virtualinvoke r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: java.lang.Object createEntityWithRandomPk()>();

        $i0 = $i1 % 2;

        if $i0 != 0 goto label2;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r4);

     label2:
        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r4);

        $i1 = $i1 + 1;

        goto label1;

     label3:
        $r2 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.AbstractDao dao>;

        virtualinvoke $r2.<de.greenrobot.dao.AbstractDao: void insertOrReplaceInTx(java.lang.Iterable)>($r1);

        $r2 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.AbstractDao dao>;

        virtualinvoke $r2.<de.greenrobot.dao.AbstractDao: void insertOrReplaceInTx(java.lang.Iterable)>($r3);

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        $l2 = (long) $i0;

        $r2 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.AbstractDao dao>;

        $l3 = virtualinvoke $r2.<de.greenrobot.dao.AbstractDao: long count()>();

        staticinvoke <de.greenrobot.dao.test.AbstractDaoTestSinglePk: void assertEquals(long,long)>($l2, $l3);

        return;
    }

    public void testInsertOrReplaceTwice()
    {
        de.greenrobot.dao.Property $r3;
        de.greenrobot.dao.AbstractDao $r2;
        java.lang.Object $r1;
        long $l0, $l1;
        java.lang.Class $r4;
        de.greenrobot.dao.test.AbstractDaoTestSinglePk r0;

        r0 := @this: de.greenrobot.dao.test.AbstractDaoTestSinglePk;

        $r1 = virtualinvoke r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: java.lang.Object createEntityWithRandomPk()>();

        $r2 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.AbstractDao dao>;

        $l0 = virtualinvoke $r2.<de.greenrobot.dao.AbstractDao: long insert(java.lang.Object)>($r1);

        $r2 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.AbstractDao dao>;

        $l1 = virtualinvoke $r2.<de.greenrobot.dao.AbstractDao: long insertOrReplace(java.lang.Object)>($r1);

        $r2 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.AbstractDao dao>;

        $r3 = virtualinvoke $r2.<de.greenrobot.dao.AbstractDao: de.greenrobot.dao.Property getPkProperty()>();

        $r4 = $r3.<de.greenrobot.dao.Property: java.lang.Class type>;

        if $r4 != class "Ljava/lang/Long;" goto label1;

        staticinvoke <de.greenrobot.dao.test.AbstractDaoTestSinglePk: void assertEquals(long,long)>($l0, $l1);

     label1:
        return;
    }

    public void testInsertTwice()
    {
        java.lang.Throwable $r3;
        de.greenrobot.dao.AbstractDao $r2;
        java.lang.Object $r1;
        de.greenrobot.dao.test.AbstractDaoTestSinglePk r0;

        r0 := @this: de.greenrobot.dao.test.AbstractDaoTestSinglePk;

        $r1 = virtualinvoke r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: java.lang.Object nextPk()>();

        $r1 = virtualinvoke r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: java.lang.Object createEntity(java.lang.Object)>($r1);

        $r2 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.AbstractDao dao>;

        virtualinvoke $r2.<de.greenrobot.dao.AbstractDao: long insert(java.lang.Object)>($r1);

        $r2 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.AbstractDao dao>;

     label1:
        virtualinvoke $r2.<de.greenrobot.dao.AbstractDao: long insert(java.lang.Object)>($r1);

        staticinvoke <de.greenrobot.dao.test.AbstractDaoTestSinglePk: void fail(java.lang.String)>("Inserting twice should not work");

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        return;

        catch android.database.SQLException from label1 to label2 with label3;
    }

    public void testLoadAll()
    {
        java.util.List $r4;
        de.greenrobot.dao.AbstractDao $r1;
        int $i0, $i1;
        java.lang.Object $r3;
        de.greenrobot.dao.test.AbstractDaoTestSinglePk r0;
        java.util.ArrayList $r2;

        r0 := @this: de.greenrobot.dao.test.AbstractDaoTestSinglePk;

        $r1 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.AbstractDao dao>;

        virtualinvoke $r1.<de.greenrobot.dao.AbstractDao: void deleteAll()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $i0 = 0;

     label1:
        if $i0 >= 15 goto label2;

        $r3 = virtualinvoke r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: java.lang.Object nextPk()>();

        $r3 = virtualinvoke r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: java.lang.Object createEntity(java.lang.Object)>($r3);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r3);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r1 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.AbstractDao dao>;

        virtualinvoke $r1.<de.greenrobot.dao.AbstractDao: void insertInTx(java.lang.Iterable)>($r2);

        $r1 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.AbstractDao dao>;

        $r4 = virtualinvoke $r1.<de.greenrobot.dao.AbstractDao: java.util.List loadAll()>();

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i1 = interfaceinvoke $r4.<java.util.List: int size()>();

        staticinvoke <de.greenrobot.dao.test.AbstractDaoTestSinglePk: void assertEquals(int,int)>($i0, $i1);

        return;
    }

    public void testLoadPk()
    {
        de.greenrobot.dao.test.AbstractDaoTestSinglePk r0;

        r0 := @this: de.greenrobot.dao.test.AbstractDaoTestSinglePk;

        virtualinvoke r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: void runLoadPkTest(int)>(0);

        return;
    }

    public void testLoadPkWithOffset()
    {
        de.greenrobot.dao.test.AbstractDaoTestSinglePk r0;

        r0 := @this: de.greenrobot.dao.test.AbstractDaoTestSinglePk;

        virtualinvoke r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: void runLoadPkTest(int)>(10);

        return;
    }

    public void testQuery()
    {
        java.lang.String[] $r1;
        java.util.List $r8;
        de.greenrobot.dao.AbstractDao $r2;
        de.greenrobot.dao.InternalUnitTestDaoAccess $r9;
        int $i0;
        java.lang.Object $r3, $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6, $r7;
        de.greenrobot.dao.test.AbstractDaoTestSinglePk r0;

        r0 := @this: de.greenrobot.dao.test.AbstractDaoTestSinglePk;

        $r2 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.AbstractDao dao>;

        $r3 = virtualinvoke r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: java.lang.Object createEntityWithRandomPk()>();

        virtualinvoke $r2.<de.greenrobot.dao.AbstractDao: long insert(java.lang.Object)>($r3);

        $r3 = virtualinvoke r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: java.lang.Object nextPk()>();

        $r2 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.AbstractDao dao>;

        $r4 = virtualinvoke r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: java.lang.Object createEntity(java.lang.Object)>($r3);

        virtualinvoke $r2.<de.greenrobot.dao.AbstractDao: long insert(java.lang.Object)>($r4);

        $r2 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.AbstractDao dao>;

        $r4 = virtualinvoke r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: java.lang.Object createEntityWithRandomPk()>();

        virtualinvoke $r2.<de.greenrobot.dao.AbstractDao: long insert(java.lang.Object)>($r4);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("WHERE ");

        $r2 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.AbstractDao dao>;

        $r1 = virtualinvoke $r2.<de.greenrobot.dao.AbstractDao: java.lang.String[] getPkColumns()>();

        $r6 = $r1[0];

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=?");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r2 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.AbstractDao dao>;

        $r1 = newarray (java.lang.String)[1];

        $r7 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        $r1[0] = $r7;

        $r8 = virtualinvoke $r2.<de.greenrobot.dao.AbstractDao: java.util.List queryRaw(java.lang.String,java.lang.String[])>($r6, $r1);

        $i0 = interfaceinvoke $r8.<java.util.List: int size()>();

        staticinvoke <de.greenrobot.dao.test.AbstractDaoTestSinglePk: void assertEquals(int,int)>(1, $i0);

        $r9 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.InternalUnitTestDaoAccess daoAccess>;

        $r4 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(0);

        $r4 = virtualinvoke $r9.<de.greenrobot.dao.InternalUnitTestDaoAccess: java.lang.Object getKey(java.lang.Object)>($r4);

        staticinvoke <de.greenrobot.dao.test.AbstractDaoTestSinglePk: void assertEquals(java.lang.Object,java.lang.Object)>($r3, $r4);

        return;
    }

    public void testReadWithOffset()
    {
        java.lang.Throwable $r6;
        de.greenrobot.dao.AbstractDao $r3;
        de.greenrobot.dao.InternalUnitTestDaoAccess $r5;
        java.lang.Object $r1, $r2;
        de.greenrobot.dao.test.AbstractDaoTestSinglePk r0;
        android.database.Cursor $r4;

        r0 := @this: de.greenrobot.dao.test.AbstractDaoTestSinglePk;

        $r1 = virtualinvoke r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: java.lang.Object nextPk()>();

        $r2 = virtualinvoke r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: java.lang.Object createEntity(java.lang.Object)>($r1);

        $r3 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.AbstractDao dao>;

        virtualinvoke $r3.<de.greenrobot.dao.AbstractDao: long insert(java.lang.Object)>($r2);

        $r4 = virtualinvoke r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: android.database.Cursor queryWithDummyColumnsInFront(int,java.lang.String,java.lang.Object)>(5, "42", $r1);

     label1:
        $r5 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.InternalUnitTestDaoAccess daoAccess>;

        $r2 = virtualinvoke $r5.<de.greenrobot.dao.InternalUnitTestDaoAccess: java.lang.Object readEntity(android.database.Cursor,int)>($r4, 5);

        $r5 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.InternalUnitTestDaoAccess daoAccess>;

        $r2 = virtualinvoke $r5.<de.greenrobot.dao.InternalUnitTestDaoAccess: java.lang.Object getKey(java.lang.Object)>($r2);

        staticinvoke <de.greenrobot.dao.test.AbstractDaoTestSinglePk: void assertEquals(java.lang.Object,java.lang.Object)>($r1, $r2);

     label2:
        interfaceinvoke $r4.<android.database.Cursor: void close()>();

        return;

     label3:
        $r6 := @caughtexception;

        interfaceinvoke $r4.<android.database.Cursor: void close()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void testRowId()
    {
        long $l0, $l1;
        byte $b2;
        de.greenrobot.dao.AbstractDao $r3;
        java.lang.Object $r1, $r2;
        de.greenrobot.dao.test.AbstractDaoTestSinglePk r0;
        boolean $z0;

        r0 := @this: de.greenrobot.dao.test.AbstractDaoTestSinglePk;

        $r1 = virtualinvoke r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: java.lang.Object createEntityWithRandomPk()>();

        $r2 = virtualinvoke r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: java.lang.Object createEntityWithRandomPk()>();

        $r3 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.AbstractDao dao>;

        $l0 = virtualinvoke $r3.<de.greenrobot.dao.AbstractDao: long insert(java.lang.Object)>($r1);

        $r3 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.AbstractDao dao>;

        $l1 = virtualinvoke $r3.<de.greenrobot.dao.AbstractDao: long insert(java.lang.Object)>($r2);

        $b2 = $l0 cmp $l1;

        if $b2 == 0 goto label2;

        $z0 = 1;

     label1:
        staticinvoke <de.greenrobot.dao.test.AbstractDaoTestSinglePk: void assertTrue(boolean)>($z0);

        return;

     label2:
        $z0 = 0;

        goto label1;
    }

    public void testUpdate()
    {
        de.greenrobot.dao.AbstractDao $r1;
        java.lang.Object $r2;
        long $l0;
        de.greenrobot.dao.test.AbstractDaoTestSinglePk r0;

        r0 := @this: de.greenrobot.dao.test.AbstractDaoTestSinglePk;

        $r1 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.AbstractDao dao>;

        virtualinvoke $r1.<de.greenrobot.dao.AbstractDao: void deleteAll()>();

        $r2 = virtualinvoke r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: java.lang.Object createEntityWithRandomPk()>();

        $r1 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.AbstractDao dao>;

        virtualinvoke $r1.<de.greenrobot.dao.AbstractDao: long insert(java.lang.Object)>($r2);

        $r1 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.AbstractDao dao>;

        virtualinvoke $r1.<de.greenrobot.dao.AbstractDao: void update(java.lang.Object)>($r2);

        $r1 = r0.<de.greenrobot.dao.test.AbstractDaoTestSinglePk: de.greenrobot.dao.AbstractDao dao>;

        $l0 = virtualinvoke $r1.<de.greenrobot.dao.AbstractDao: long count()>();

        staticinvoke <de.greenrobot.dao.test.AbstractDaoTestSinglePk: void assertEquals(long,long)>(1L, $l0);

        return;
    }
}
