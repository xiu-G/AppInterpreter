public class proguard.optimize.info.BackwardBranchMarker extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.instruction.visitor.InstructionVisitor
{

    public void <init>()
    {
        proguard.optimize.info.BackwardBranchMarker r0;

        r0 := @this: proguard.optimize.info.BackwardBranchMarker;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        return;
    }

    public static boolean branchesBackward(proguard.classfile.Method)
    {
        proguard.classfile.Method $r0;
        proguard.optimize.info.MethodOptimizationInfo $r1;
        boolean $z0;

        $r0 := @parameter0: proguard.classfile.Method;

        $r1 = staticinvoke <proguard.optimize.info.MethodOptimizationInfo: proguard.optimize.info.MethodOptimizationInfo getMethodOptimizationInfo(proguard.classfile.Method)>($r0);

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r1.<proguard.optimize.info.MethodOptimizationInfo: boolean branchesBackward()>();

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    private void markBackwardBranch(proguard.classfile.Method, int)
    {
        int $i0;
        proguard.classfile.Method $r1;
        proguard.optimize.info.BackwardBranchMarker r0;

        r0 := @this: proguard.optimize.info.BackwardBranchMarker;

        $r1 := @parameter0: proguard.classfile.Method;

        $i0 := @parameter1: int;

        if $i0 >= 0 goto label1;

        staticinvoke <proguard.optimize.info.BackwardBranchMarker: void setBranchesBackward(proguard.classfile.Method)>($r1);

     label1:
        return;
    }

    private static void setBranchesBackward(proguard.classfile.Method)
    {
        proguard.classfile.Method $r0;
        proguard.optimize.info.MethodOptimizationInfo $r1;

        $r0 := @parameter0: proguard.classfile.Method;

        $r1 = staticinvoke <proguard.optimize.info.MethodOptimizationInfo: proguard.optimize.info.MethodOptimizationInfo getMethodOptimizationInfo(proguard.classfile.Method)>($r0);

        if $r1 == null goto label1;

        virtualinvoke $r1.<proguard.optimize.info.MethodOptimizationInfo: void setBranchesBackward()>();

     label1:
        return;
    }

    public void visitAnyInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.Instruction)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.instruction.Instruction $r4;
        int $i0;
        proguard.classfile.Method $r2;
        proguard.optimize.info.BackwardBranchMarker r0;

        r0 := @this: proguard.optimize.info.BackwardBranchMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.Instruction;

        return;
    }

    public void visitAnySwitchInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.SwitchInstruction)
    {
        proguard.classfile.instruction.SwitchInstruction $r4;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int[] $r5;
        int $i0, $i1;
        proguard.classfile.Method $r2;
        proguard.optimize.info.BackwardBranchMarker r0;

        r0 := @this: proguard.optimize.info.BackwardBranchMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.SwitchInstruction;

        $i0 = $r4.<proguard.classfile.instruction.SwitchInstruction: int defaultOffset>;

        specialinvoke r0.<proguard.optimize.info.BackwardBranchMarker: void markBackwardBranch(proguard.classfile.Method,int)>($r2, $i0);

        $i0 = 0;

     label1:
        $r5 = $r4.<proguard.classfile.instruction.SwitchInstruction: int[] jumpOffsets>;

        $i1 = lengthof $r5;

        if $i0 >= $i1 goto label2;

        $r5 = $r4.<proguard.classfile.instruction.SwitchInstruction: int[] jumpOffsets>;

        $i1 = $r5[$i0];

        specialinvoke r0.<proguard.optimize.info.BackwardBranchMarker: void markBackwardBranch(proguard.classfile.Method,int)>($r2, $i1);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void visitBranchInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.BranchInstruction)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.Method $r2;
        proguard.classfile.instruction.BranchInstruction $r4;
        proguard.optimize.info.BackwardBranchMarker r0;

        r0 := @this: proguard.optimize.info.BackwardBranchMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.BranchInstruction;

        $i0 = $r4.<proguard.classfile.instruction.BranchInstruction: int branchOffset>;

        specialinvoke r0.<proguard.optimize.info.BackwardBranchMarker: void markBackwardBranch(proguard.classfile.Method,int)>($r2, $i0);

        return;
    }
}
