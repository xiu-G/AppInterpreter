public class proguard.optimize.info.VariableUsageMarker extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.attribute.visitor.AttributeVisitor, proguard.classfile.instruction.visitor.InstructionVisitor
{
    private boolean[] variableUsed;

    public void <init>()
    {
        boolean[] $r1;
        proguard.optimize.info.VariableUsageMarker r0;

        r0 := @this: proguard.optimize.info.VariableUsageMarker;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        $r1 = newarray (boolean)[64];

        r0.<proguard.optimize.info.VariableUsageMarker: boolean[] variableUsed> = $r1;

        return;
    }

    public boolean isVariableUsed(int)
    {
        proguard.optimize.info.VariableUsageMarker r0;
        int $i0;
        boolean[] $r1;
        boolean $z0;

        r0 := @this: proguard.optimize.info.VariableUsageMarker;

        $i0 := @parameter0: int;

        $r1 = r0.<proguard.optimize.info.VariableUsageMarker: boolean[] variableUsed>;

        $z0 = $r1[$i0];

        return $z0;
    }

    public void visitAnyAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.Attribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.optimize.info.VariableUsageMarker r0;
        proguard.classfile.attribute.Attribute $r2;

        r0 := @this: proguard.optimize.info.VariableUsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.Attribute;

        return;
    }

    public void visitAnyInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.Instruction)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.instruction.Instruction $r4;
        proguard.optimize.info.VariableUsageMarker r0;
        int $i0;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.optimize.info.VariableUsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.Instruction;

        return;
    }

    public void visitCodeAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.optimize.info.VariableUsageMarker r0;
        boolean[] $r4;
        int $i0, $i1;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.optimize.info.VariableUsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 = $r3.<proguard.classfile.attribute.CodeAttribute: int u2maxLocals>;

        $r4 = r0.<proguard.optimize.info.VariableUsageMarker: boolean[] variableUsed>;

        $i1 = lengthof $r4;

        if $i1 >= $i0 goto label2;

        $r4 = newarray (boolean)[$i0];

        r0.<proguard.optimize.info.VariableUsageMarker: boolean[] variableUsed> = $r4;

     label1:
        virtualinvoke $r3.<proguard.classfile.attribute.CodeAttribute: void instructionsAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.instruction.visitor.InstructionVisitor)>($r1, $r2, r0);

        return;

     label2:
        $i1 = 0;

     label3:
        if $i1 >= $i0 goto label1;

        $r4 = r0.<proguard.optimize.info.VariableUsageMarker: boolean[] variableUsed>;

        $r4[$i1] = 0;

        $i1 = $i1 + 1;

        goto label3;
    }

    public void visitVariableInstruction(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.VariableInstruction)
    {
        proguard.optimize.info.VariableUsageMarker r0;
        boolean[] $r5;
        proguard.classfile.instruction.VariableInstruction $r4;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.Method $r2;
        boolean $z0;

        r0 := @this: proguard.optimize.info.VariableUsageMarker;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.VariableInstruction;

        $r5 = r0.<proguard.optimize.info.VariableUsageMarker: boolean[] variableUsed>;

        $i0 = $r4.<proguard.classfile.instruction.VariableInstruction: int variableIndex>;

        $r5[$i0] = 1;

        $z0 = virtualinvoke $r4.<proguard.classfile.instruction.VariableInstruction: boolean isCategory2()>();

        if $z0 == 0 goto label1;

        $r5 = r0.<proguard.optimize.info.VariableUsageMarker: boolean[] variableUsed>;

        $i0 = $r4.<proguard.classfile.instruction.VariableInstruction: int variableIndex>;

        $i0 = $i0 + 1;

        $r5[$i0] = 1;

     label1:
        return;
    }
}
