public class proguard.classfile.visitor.MemberNameFilter extends java.lang.Object implements proguard.classfile.visitor.MemberVisitor
{
    private final proguard.classfile.visitor.MemberVisitor memberVisitor;
    private final proguard.util.StringMatcher regularExpressionMatcher;

    public void <init>(java.lang.String, proguard.classfile.visitor.MemberVisitor)
    {
        proguard.classfile.visitor.MemberNameFilter r0;
        proguard.classfile.visitor.MemberVisitor $r2;
        java.lang.String $r1;
        proguard.util.NameParser $r4;
        proguard.util.StringMatcher $r3;

        r0 := @this: proguard.classfile.visitor.MemberNameFilter;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: proguard.classfile.visitor.MemberVisitor;

        $r4 = new proguard.util.NameParser;

        specialinvoke $r4.<proguard.util.NameParser: void <init>()>();

        $r3 = virtualinvoke $r4.<proguard.util.NameParser: proguard.util.StringMatcher parse(java.lang.String)>($r1);

        specialinvoke r0.<proguard.classfile.visitor.MemberNameFilter: void <init>(proguard.util.StringMatcher,proguard.classfile.visitor.MemberVisitor)>($r3, $r2);

        return;
    }

    public void <init>(proguard.util.StringMatcher, proguard.classfile.visitor.MemberVisitor)
    {
        proguard.classfile.visitor.MemberVisitor $r2;
        proguard.classfile.visitor.MemberNameFilter r0;
        proguard.util.StringMatcher $r1;

        r0 := @this: proguard.classfile.visitor.MemberNameFilter;

        $r1 := @parameter0: proguard.util.StringMatcher;

        $r2 := @parameter1: proguard.classfile.visitor.MemberVisitor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<proguard.classfile.visitor.MemberNameFilter: proguard.util.StringMatcher regularExpressionMatcher> = $r1;

        r0.<proguard.classfile.visitor.MemberNameFilter: proguard.classfile.visitor.MemberVisitor memberVisitor> = $r2;

        return;
    }

    private boolean accepted(java.lang.String)
    {
        proguard.classfile.visitor.MemberNameFilter r0;
        java.lang.String $r1;
        proguard.util.StringMatcher $r2;
        boolean $z0;

        r0 := @this: proguard.classfile.visitor.MemberNameFilter;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<proguard.classfile.visitor.MemberNameFilter: proguard.util.StringMatcher regularExpressionMatcher>;

        $z0 = interfaceinvoke $r2.<proguard.util.StringMatcher: boolean matches(java.lang.String)>($r1);

        return $z0;
    }

    public void visitLibraryField(proguard.classfile.LibraryClass, proguard.classfile.LibraryField)
    {
        proguard.classfile.visitor.MemberNameFilter r0;
        proguard.classfile.LibraryClass $r1;
        proguard.classfile.LibraryField $r2;
        proguard.classfile.visitor.MemberVisitor $r4;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: proguard.classfile.visitor.MemberNameFilter;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        $r2 := @parameter1: proguard.classfile.LibraryField;

        $r3 = virtualinvoke $r2.<proguard.classfile.LibraryField: java.lang.String getName(proguard.classfile.Clazz)>($r1);

        $z0 = specialinvoke r0.<proguard.classfile.visitor.MemberNameFilter: boolean accepted(java.lang.String)>($r3);

        if $z0 == 0 goto label1;

        $r4 = r0.<proguard.classfile.visitor.MemberNameFilter: proguard.classfile.visitor.MemberVisitor memberVisitor>;

        interfaceinvoke $r4.<proguard.classfile.visitor.MemberVisitor: void visitLibraryField(proguard.classfile.LibraryClass,proguard.classfile.LibraryField)>($r1, $r2);

     label1:
        return;
    }

    public void visitLibraryMethod(proguard.classfile.LibraryClass, proguard.classfile.LibraryMethod)
    {
        proguard.classfile.visitor.MemberNameFilter r0;
        proguard.classfile.LibraryClass $r1;
        proguard.classfile.LibraryMethod $r2;
        proguard.classfile.visitor.MemberVisitor $r4;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: proguard.classfile.visitor.MemberNameFilter;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        $r2 := @parameter1: proguard.classfile.LibraryMethod;

        $r3 = virtualinvoke $r2.<proguard.classfile.LibraryMethod: java.lang.String getName(proguard.classfile.Clazz)>($r1);

        $z0 = specialinvoke r0.<proguard.classfile.visitor.MemberNameFilter: boolean accepted(java.lang.String)>($r3);

        if $z0 == 0 goto label1;

        $r4 = r0.<proguard.classfile.visitor.MemberNameFilter: proguard.classfile.visitor.MemberVisitor memberVisitor>;

        interfaceinvoke $r4.<proguard.classfile.visitor.MemberVisitor: void visitLibraryMethod(proguard.classfile.LibraryClass,proguard.classfile.LibraryMethod)>($r1, $r2);

     label1:
        return;
    }

    public void visitProgramField(proguard.classfile.ProgramClass, proguard.classfile.ProgramField)
    {
        proguard.classfile.visitor.MemberNameFilter r0;
        proguard.classfile.ProgramField $r2;
        proguard.classfile.visitor.MemberVisitor $r4;
        java.lang.String $r3;
        proguard.classfile.ProgramClass $r1;
        boolean $z0;

        r0 := @this: proguard.classfile.visitor.MemberNameFilter;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.ProgramField;

        $r3 = virtualinvoke $r2.<proguard.classfile.ProgramField: java.lang.String getName(proguard.classfile.Clazz)>($r1);

        $z0 = specialinvoke r0.<proguard.classfile.visitor.MemberNameFilter: boolean accepted(java.lang.String)>($r3);

        if $z0 == 0 goto label1;

        $r4 = r0.<proguard.classfile.visitor.MemberNameFilter: proguard.classfile.visitor.MemberVisitor memberVisitor>;

        interfaceinvoke $r4.<proguard.classfile.visitor.MemberVisitor: void visitProgramField(proguard.classfile.ProgramClass,proguard.classfile.ProgramField)>($r1, $r2);

     label1:
        return;
    }

    public void visitProgramMethod(proguard.classfile.ProgramClass, proguard.classfile.ProgramMethod)
    {
        proguard.classfile.visitor.MemberNameFilter r0;
        proguard.classfile.ProgramMethod $r2;
        proguard.classfile.visitor.MemberVisitor $r4;
        java.lang.String $r3;
        proguard.classfile.ProgramClass $r1;
        boolean $z0;

        r0 := @this: proguard.classfile.visitor.MemberNameFilter;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.ProgramMethod;

        $r3 = virtualinvoke $r2.<proguard.classfile.ProgramMethod: java.lang.String getName(proguard.classfile.Clazz)>($r1);

        $z0 = specialinvoke r0.<proguard.classfile.visitor.MemberNameFilter: boolean accepted(java.lang.String)>($r3);

        if $z0 == 0 goto label1;

        $r4 = r0.<proguard.classfile.visitor.MemberNameFilter: proguard.classfile.visitor.MemberVisitor memberVisitor>;

        interfaceinvoke $r4.<proguard.classfile.visitor.MemberVisitor: void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod)>($r1, $r2);

     label1:
        return;
    }
}
