public class mm.purchasesdk.fingerprint.a extends java.lang.Object
{

    public void <init>()
    {
        mm.purchasesdk.fingerprint.a r0;

        r0 := @this: mm.purchasesdk.fingerprint.a;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int a(int, byte[], byte[], byte[])
    {
        byte[] $r0, $r1, $r2, $r4;
        mm.purchasesdk.fingerprint.b $r3;
        int $i0;
        java.lang.String $r5;

        $i0 := @parameter0: int;

        $r0 := @parameter1: byte[];

        $r1 := @parameter2: byte[];

        $r2 := @parameter3: byte[];

        if $r0 != null goto label1;

        $r3 = new mm.purchasesdk.fingerprint.b;

        specialinvoke $r3.<mm.purchasesdk.fingerprint.b: void <init>(int,java.lang.String)>(-2147483641, "Verify failed! Key cann\'t be null!");

        throw $r3;

     label1:
        if $r1 != null goto label2;

        $r3 = new mm.purchasesdk.fingerprint.b;

        specialinvoke $r3.<mm.purchasesdk.fingerprint.b: void <init>(int,java.lang.String)>(-2147483641, "Verify failed! The data to be signed cann\'t be null!");

        throw $r3;

     label2:
        if $r2 != null goto label3;

        $r3 = new mm.purchasesdk.fingerprint.b;

        specialinvoke $r3.<mm.purchasesdk.fingerprint.b: void <init>(int,java.lang.String)>(-2147483641, "Verify failed! The signed data cann\'t be null!");

        throw $r3;

     label3:
        $r4 = staticinvoke <mm.purchasesdk.fingerprint.a: byte[] a(byte[])>($r0);

        if $r4 == null goto label4;

        $r5 = new java.lang.String;

        specialinvoke $r5.<java.lang.String: void <init>(byte[])>($r4);

        $r0 = staticinvoke <mm.purchasesdk.fingerprint.c: byte[] b(java.lang.String)>($r5);

     label4:
        $r4 = staticinvoke <mm.purchasesdk.fingerprint.a: byte[] a(byte[])>($r2);

        if $r4 == null goto label6;

        $r5 = new java.lang.String;

        specialinvoke $r5.<java.lang.String: void <init>(byte[])>($r4);

        $r2 = staticinvoke <mm.purchasesdk.fingerprint.c: byte[] b(java.lang.String)>($r5);

        goto label6;

     label5:
        $i0 = staticinvoke <mm.purchasesdk.fingerprint.a: int a(java.lang.String,byte[],byte[],byte[])>($r5, $r0, $r1, $r2);

        return $i0;

     label6:
        $r5 = "SHA1WITHRSA";

        goto label5;
    }

    public static int a(java.lang.String, byte[], byte[], byte[])
    {
        java.lang.Throwable $r6;
        byte[] $r1, $r2, $r3;
        java.security.Signature $r5;
        java.security.PublicKey $r4;
        java.lang.String $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: byte[];

        $r2 := @parameter2: byte[];

        $r3 := @parameter3: byte[];

     label1:
        $r4 = staticinvoke <mm.purchasesdk.fingerprint.a: java.security.PublicKey b(byte[])>($r1);

        $r5 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>($r0);

        virtualinvoke $r5.<java.security.Signature: void initVerify(java.security.PublicKey)>($r4);

        virtualinvoke $r5.<java.security.Signature: void update(byte[])>($r2);

        $z0 = virtualinvoke $r5.<java.security.Signature: boolean verify(byte[])>($r3);

     label2:
        if $z0 == 0 goto label3;

        return 0;

     label3:
        return 1;

     label4:
        $r6 := @caughtexception;

        return 1;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    public static byte[] a(byte[])
    {
        byte[] $r0;
        char $c3;
        byte $b2;
        java.lang.StringBuffer $r2, $r3;
        int $i0, $i1;
        java.lang.String $r1, $r4;

        $r0 := @parameter0: byte[];

        $r1 = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789/+= \r\n-";

        $i0 = 0;

     label1:
        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label3;

        $b2 = $r0[$i0];

        $i1 = (int) $b2;

        $i1 = virtualinvoke $r1.<java.lang.String: int indexOf(int)>($i1);

        if $i1 != -1 goto label2;

        return null;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        $r3 = new java.lang.StringBuffer;

        $r2 = $r3;

        $i0 = lengthof $r0;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>(int)>($i0);

        $r4 = new java.lang.String;

        $r1 = $r4;

        specialinvoke $r4.<java.lang.String: void <init>(byte[])>($r0);

        $i0 = 0;

     label4:
        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 >= $i1 goto label6;

        $c3 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i0);

        $i1 = (int) $c3;

        if $i1 == 32 goto label5;

        $c3 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i0);

        $i1 = (int) $c3;

        if $i1 == 13 goto label5;

        $c3 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i0);

        $i1 = (int) $c3;

        if $i1 == 10 goto label5;

        $c3 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c3);

     label5:
        $i0 = $i0 + 1;

        goto label4;

     label6:
        $r1 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        $r0 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        return $r0;
    }

    private static java.security.PublicKey b(byte[])
    {
        java.security.cert.X509Certificate $r4;
        byte[] $r0;
        java.security.cert.Certificate $r3;
        java.io.ByteArrayInputStream $r1;
        java.security.cert.CertificateFactory $r2;
        java.security.PublicKey $r5;

        $r0 := @parameter0: byte[];

        $r1 = new java.io.ByteArrayInputStream;

        specialinvoke $r1.<java.io.ByteArrayInputStream: void <init>(byte[])>($r0);

        $r2 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>("X.509");

        $r3 = virtualinvoke $r2.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>($r1);

        $r4 = (java.security.cert.X509Certificate) $r3;

        $r5 = virtualinvoke $r4.<java.security.cert.X509Certificate: java.security.PublicKey getPublicKey()>();

        return $r5;
    }
}
