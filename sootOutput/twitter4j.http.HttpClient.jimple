public class twitter4j.http.HttpClient extends java.lang.Object implements java.io.Serializable
{
    private static final int BAD_GATEWAY;
    private static final int BAD_REQUEST;
    public static final int EXCEEDED_RATE_LIMIT_QUOTA;
    private static final int FORBIDDEN;
    private static final int INTERNAL_SERVER_ERROR;
    private static final int NOT_ACCEPTABLE;
    private static final int NOT_AUTHORIZED;
    private static final int NOT_FOUND;
    private static final int NOT_MODIFIED;
    private static final int OK;
    public static final int SERVICE_UNAVAILABLE;
    private static final java.util.Map instanceMap;
    private static boolean isJDK14orEarlier;
    private static final twitter4j.logging.Logger logger;
    private static final long serialVersionUID;
    private int connectionTimeout;
    private java.lang.String proxyAuthPassword;
    private java.lang.String proxyAuthUser;
    private java.lang.String proxyHost;
    private int proxyPort;
    private int readTimeout;
    private int retryCount;
    private int retryIntervalSeconds;

    static void <clinit>()
    {
        java.lang.Throwable r0;
        java.util.HashMap $r3;
        byte $b0;
        int $i1;
        twitter4j.logging.Logger $r1;
        java.lang.String $r2;
        boolean $z0;
        double $d0;

        <twitter4j.http.HttpClient: long serialVersionUID> = -8819171414069621503L;

        <twitter4j.http.HttpClient: int SERVICE_UNAVAILABLE> = 503;

        <twitter4j.http.HttpClient: int OK> = 200;

        <twitter4j.http.HttpClient: int NOT_MODIFIED> = 304;

        <twitter4j.http.HttpClient: int NOT_FOUND> = 404;

        <twitter4j.http.HttpClient: int NOT_AUTHORIZED> = 401;

        <twitter4j.http.HttpClient: int NOT_ACCEPTABLE> = 406;

        <twitter4j.http.HttpClient: int INTERNAL_SERVER_ERROR> = 500;

        <twitter4j.http.HttpClient: int FORBIDDEN> = 403;

        <twitter4j.http.HttpClient: int EXCEEDED_RATE_LIMIT_QUOTA> = 420;

        <twitter4j.http.HttpClient: int BAD_REQUEST> = 400;

        <twitter4j.http.HttpClient: int BAD_GATEWAY> = 502;

        $z0 = 0;

        $r1 = staticinvoke <twitter4j.logging.Logger: twitter4j.logging.Logger getLogger()>();

        <twitter4j.http.HttpClient: twitter4j.logging.Logger logger> = $r1;

        <twitter4j.http.HttpClient: boolean isJDK14orEarlier> = 0;

     label1:
        $r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.specification.version");

     label2:
        if $r2 == null goto label6;

     label3:
        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r2);

     label4:
        $b0 = 1.5 cmpl $d0;

        $i1 = (int) $b0;

        if $i1 <= 0 goto label5;

        $z0 = 1;

     label5:
        <twitter4j.http.HttpClient: boolean isJDK14orEarlier> = $z0;

     label6:
        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>(int)>(1);

        <twitter4j.http.HttpClient: java.util.Map instanceMap> = $r3;

        return;

     label7:
        r0 := @caughtexception;

        <twitter4j.http.HttpClient: boolean isJDK14orEarlier> = 1;

        goto label6;

        return;

        catch java.security.AccessControlException from label1 to label2 with label7;
        catch java.security.AccessControlException from label3 to label4 with label7;
    }

    public void <init>()
    {
        int $i0;
        twitter4j.http.HttpClient r0;

        r0 := @this: twitter4j.http.HttpClient;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<twitter4j.http.HttpClient: java.lang.String proxyHost> = null;

        $i0 = -1;

        r0.<twitter4j.http.HttpClient: int proxyPort> = $i0;

        r0.<twitter4j.http.HttpClient: java.lang.String proxyAuthUser> = null;

        r0.<twitter4j.http.HttpClient: java.lang.String proxyAuthPassword> = null;

        r0.<twitter4j.http.HttpClient: int connectionTimeout> = 20000;

        r0.<twitter4j.http.HttpClient: int readTimeout> = 120000;

        r0.<twitter4j.http.HttpClient: int retryCount> = 0;

        r0.<twitter4j.http.HttpClient: int retryIntervalSeconds> = 5000;

        return;
    }

    public void <init>(twitter4j.http.HttpClientConfiguration)
    {
        twitter4j.http.HttpClientConfiguration $r1;
        int $i0;
        java.lang.String $r2;
        twitter4j.http.HttpClient r0;

        r0 := @this: twitter4j.http.HttpClient;

        $r1 := @parameter0: twitter4j.http.HttpClientConfiguration;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<twitter4j.http.HttpClient: java.lang.String proxyHost> = null;

        r0.<twitter4j.http.HttpClient: int proxyPort> = -1;

        r0.<twitter4j.http.HttpClient: java.lang.String proxyAuthUser> = null;

        r0.<twitter4j.http.HttpClient: java.lang.String proxyAuthPassword> = null;

        r0.<twitter4j.http.HttpClient: int connectionTimeout> = 20000;

        r0.<twitter4j.http.HttpClient: int readTimeout> = 120000;

        r0.<twitter4j.http.HttpClient: int retryCount> = 0;

        r0.<twitter4j.http.HttpClient: int retryIntervalSeconds> = 5000;

        $r2 = interfaceinvoke $r1.<twitter4j.http.HttpClientConfiguration: java.lang.String getHttpProxyHost()>();

        virtualinvoke r0.<twitter4j.http.HttpClient: void setProxyHost(java.lang.String)>($r2);

        $i0 = interfaceinvoke $r1.<twitter4j.http.HttpClientConfiguration: int getHttpProxyPort()>();

        virtualinvoke r0.<twitter4j.http.HttpClient: void setProxyPort(int)>($i0);

        $r2 = interfaceinvoke $r1.<twitter4j.http.HttpClientConfiguration: java.lang.String getHttpProxyUser()>();

        virtualinvoke r0.<twitter4j.http.HttpClient: void setProxyAuthUser(java.lang.String)>($r2);

        $r2 = interfaceinvoke $r1.<twitter4j.http.HttpClientConfiguration: java.lang.String getHttpProxyPassword()>();

        virtualinvoke r0.<twitter4j.http.HttpClient: void setProxyAuthPassword(java.lang.String)>($r2);

        $i0 = interfaceinvoke $r1.<twitter4j.http.HttpClientConfiguration: int getHttpConnectionTimeout()>();

        virtualinvoke r0.<twitter4j.http.HttpClient: void setConnectionTimeout(int)>($i0);

        $i0 = interfaceinvoke $r1.<twitter4j.http.HttpClientConfiguration: int getHttpReadTimeout()>();

        virtualinvoke r0.<twitter4j.http.HttpClient: void setReadTimeout(int)>($i0);

        $i0 = interfaceinvoke $r1.<twitter4j.http.HttpClientConfiguration: int getHttpRetryCount()>();

        virtualinvoke r0.<twitter4j.http.HttpClient: void setRetryCount(int)>($i0);

        $i0 = interfaceinvoke $r1.<twitter4j.http.HttpClientConfiguration: int getHttpRetryIntervalSeconds()>();

        virtualinvoke r0.<twitter4j.http.HttpClient: void setRetryIntervalSeconds(int)>($i0);

        return;
    }

    static java.lang.String access$000(twitter4j.http.HttpClient)
    {
        java.lang.String r1;
        twitter4j.http.HttpClient $r0;

        $r0 := @parameter0: twitter4j.http.HttpClient;

        r1 = $r0.<twitter4j.http.HttpClient: java.lang.String proxyAuthUser>;

        return r1;
    }

    static java.lang.String access$100(twitter4j.http.HttpClient)
    {
        java.lang.String r1;
        twitter4j.http.HttpClient $r0;

        $r0 := @parameter0: twitter4j.http.HttpClient;

        r1 = $r0.<twitter4j.http.HttpClient: java.lang.String proxyAuthPassword>;

        return r1;
    }

    public static java.lang.String encode(java.lang.String)
    {
        java.lang.Throwable r1;
        java.lang.String $r0;
        java.lang.AssertionError $r2;

        $r0 := @parameter0: java.lang.String;

     label1:
        $r0 = staticinvoke <java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>($r0, "UTF-8");

     label2:
        return $r0;

     label3:
        r1 := @caughtexception;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>("will never happen");

        throw $r2;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    private static java.lang.String getCause(int)
    {
        int $i0;
        java.lang.String r0;
        java.lang.StringBuffer $r1;

        $i0 := @parameter0: int;

        r0 = null;

        lookupswitch($i0)
        {
            case 304: goto label02;
            case 400: goto label03;
            case 401: goto label04;
            case 403: goto label05;
            case 404: goto label06;
            case 406: goto label07;
            case 420: goto label08;
            case 500: goto label09;
            case 502: goto label10;
            case 503: goto label11;
            default: goto label01;
        };

     label01:
        r0 = "";

     label02:
        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        r0 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return r0;

     label03:
        r0 = "The request was invalid.  An accompanying error message will explain why. This is the status code will be returned during rate limiting.";

        goto label02;

     label04:
        r0 = "Authentication credentials were missing or incorrect.";

        goto label02;

     label05:
        r0 = "The request is understood, but it has been refused.  An accompanying error message will explain why.";

        goto label02;

     label06:
        r0 = "The URI requested is invalid or the resource requested, such as a user, does not exists.";

        goto label02;

     label07:
        r0 = "Returned by the Search API when an invalid format is specified in the request.";

        goto label02;

     label08:
        r0 = "The number of requests you have made exceeds the quota afforded by your assigned rate limit.";

        goto label02;

     label09:
        r0 = "Something is broken.  Please post to the group so the Twitter team can investigate.";

        goto label02;

     label10:
        r0 = "Twitter is down or being upgraded.";

        goto label02;

     label11:
        r0 = "Service Unavailable: The Twitter servers are up, but overloaded with requests. Try again later. The search and trend methods use this to indicate when you are being rate limited.";

        goto label02;
    }

    private java.net.HttpURLConnection getConnection(java.lang.String) throws java.io.IOException
    {
        java.net.HttpURLConnection r11;
        java.net.URL $r9;
        twitter4j.http.HttpClient$1 $r6;
        twitter4j.http.HttpClient r0;
        java.net.InetSocketAddress $r8;
        java.net.Proxy$Type $r7;
        java.net.Proxy r2;
        java.lang.StringBuffer $r5;
        java.net.URLConnection $r10;
        int $i0;
        twitter4j.logging.Logger $r4;
        java.lang.String $r1, $r3;
        boolean $z0;

        r0 := @this: twitter4j.http.HttpClient;

        $r1 := @parameter0: java.lang.String;

        $r3 = r0.<twitter4j.http.HttpClient: java.lang.String proxyHost>;

        if $r3 == null goto label5;

        $r3 = r0.<twitter4j.http.HttpClient: java.lang.String proxyHost>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 != 0 goto label5;

        $r3 = r0.<twitter4j.http.HttpClient: java.lang.String proxyAuthUser>;

        if $r3 == null goto label1;

        $r3 = r0.<twitter4j.http.HttpClient: java.lang.String proxyAuthUser>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 != 0 goto label1;

        $r4 = <twitter4j.http.HttpClient: twitter4j.logging.Logger logger>;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Proxy AuthUser: ");

        $r3 = r0.<twitter4j.http.HttpClient: java.lang.String proxyAuthUser>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r4.<twitter4j.logging.Logger: void debug(java.lang.String)>($r3);

        $r4 = <twitter4j.http.HttpClient: twitter4j.logging.Logger logger>;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Proxy AuthPassword: ");

        $r3 = r0.<twitter4j.http.HttpClient: java.lang.String proxyAuthPassword>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r4.<twitter4j.logging.Logger: void debug(java.lang.String)>($r3);

        $r6 = new twitter4j.http.HttpClient$1;

        specialinvoke $r6.<twitter4j.http.HttpClient$1: void <init>(twitter4j.http.HttpClient)>(r0);

        staticinvoke <java.net.Authenticator: void setDefault(java.net.Authenticator)>($r6);

     label1:
        r2 = new java.net.Proxy;

        $r7 = <java.net.Proxy$Type: java.net.Proxy$Type HTTP>;

        $r3 = r0.<twitter4j.http.HttpClient: java.lang.String proxyHost>;

        $i0 = r0.<twitter4j.http.HttpClient: int proxyPort>;

        $r8 = staticinvoke <java.net.InetSocketAddress: java.net.InetSocketAddress createUnresolved(java.lang.String,int)>($r3, $i0);

        specialinvoke r2.<java.net.Proxy: void <init>(java.net.Proxy$Type,java.net.SocketAddress)>($r7, $r8);

        $r4 = <twitter4j.http.HttpClient: twitter4j.logging.Logger logger>;

        $z0 = virtualinvoke $r4.<twitter4j.logging.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label2;

        $r4 = <twitter4j.http.HttpClient: twitter4j.logging.Logger logger>;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Opening proxied connection(");

        $r3 = r0.<twitter4j.http.HttpClient: java.lang.String proxyHost>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $i0 = r0.<twitter4j.http.HttpClient: int proxyPort>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r3 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r4.<twitter4j.logging.Logger: void debug(java.lang.String)>($r3);

     label2:
        $r9 = new java.net.URL;

        specialinvoke $r9.<java.net.URL: void <init>(java.lang.String)>($r1);

        $r10 = virtualinvoke $r9.<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>(r2);

        r11 = (java.net.HttpURLConnection) $r10;

     label3:
        $i0 = r0.<twitter4j.http.HttpClient: int connectionTimeout>;

        if $i0 <= 0 goto label4;

        $z0 = <twitter4j.http.HttpClient: boolean isJDK14orEarlier>;

        if $z0 != 0 goto label4;

        $i0 = r0.<twitter4j.http.HttpClient: int connectionTimeout>;

        virtualinvoke r11.<java.net.HttpURLConnection: void setConnectTimeout(int)>($i0);

     label4:
        $i0 = r0.<twitter4j.http.HttpClient: int readTimeout>;

        if $i0 <= 0 goto label6;

        $z0 = <twitter4j.http.HttpClient: boolean isJDK14orEarlier>;

        if $z0 != 0 goto label6;

        $i0 = r0.<twitter4j.http.HttpClient: int readTimeout>;

        virtualinvoke r11.<java.net.HttpURLConnection: void setReadTimeout(int)>($i0);

        return r11;

     label5:
        $r9 = new java.net.URL;

        specialinvoke $r9.<java.net.URL: void <init>(java.lang.String)>($r1);

        $r10 = virtualinvoke $r9.<java.net.URL: java.net.URLConnection openConnection()>();

        r11 = (java.net.HttpURLConnection) $r10;

        goto label3;

     label6:
        return r11;
    }

    public static twitter4j.http.HttpClient getInstance(twitter4j.http.HttpClientConfiguration)
    {
        twitter4j.http.HttpClientConfiguration $r0;
        java.util.Map $r2;
        java.lang.Object $r1;
        twitter4j.http.HttpClient r3;

        $r0 := @parameter0: twitter4j.http.HttpClientConfiguration;

        $r2 = <twitter4j.http.HttpClient: java.util.Map instanceMap>;

        $r1 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        r3 = (twitter4j.http.HttpClient) $r1;

        if r3 != null goto label1;

        r3 = new twitter4j.http.HttpClient;

        specialinvoke r3.<twitter4j.http.HttpClient: void <init>(twitter4j.http.HttpClientConfiguration)>($r0);

        $r2 = <twitter4j.http.HttpClient: java.util.Map instanceMap>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r0, r3);

     label1:
        return r3;
    }

    private void setHeaders(twitter4j.http.HttpRequest, java.net.HttpURLConnection)
    {
        java.net.HttpURLConnection $r2;
        java.util.Iterator $r12;
        java.util.Set $r11;
        twitter4j.http.HttpClient r0;
        twitter4j.http.HttpRequest $r1;
        twitter4j.http.Authorization $r9;
        java.lang.StringBuffer $r5;
        java.util.Map $r10;
        twitter4j.http.HttpParameter[] $r3;
        twitter4j.logging.Logger $r4;
        twitter4j.http.RequestMethod $r6;
        java.lang.Object $r13;
        java.lang.String $r7, $r8;
        boolean $z0;

        r0 := @this: twitter4j.http.HttpClient;

        $r1 := @parameter0: twitter4j.http.HttpRequest;

        $r2 := @parameter1: java.net.HttpURLConnection;

        $r4 = <twitter4j.http.HttpClient: twitter4j.logging.Logger logger>;

        virtualinvoke $r4.<twitter4j.logging.Logger: void debug(java.lang.String)>("Request: ");

        $r4 = <twitter4j.http.HttpClient: twitter4j.logging.Logger logger>;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = $r1.<twitter4j.http.HttpRequest: twitter4j.http.RequestMethod requestMethod>;

        $r7 = virtualinvoke $r6.<twitter4j.http.RequestMethod: java.lang.String name()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        $r8 = virtualinvoke $r1.<twitter4j.http.HttpRequest: java.lang.String getURL()>();

        virtualinvoke $r4.<twitter4j.logging.Logger: void debug(java.lang.String,java.lang.String)>($r7, $r8);

        $r9 = $r1.<twitter4j.http.HttpRequest: twitter4j.http.Authorization authorization>;

        if $r9 == null goto label1;

        $r9 = $r1.<twitter4j.http.HttpRequest: twitter4j.http.Authorization authorization>;

        $r6 = $r1.<twitter4j.http.HttpRequest: twitter4j.http.RequestMethod requestMethod>;

        $r7 = virtualinvoke $r6.<twitter4j.http.RequestMethod: java.lang.String name()>();

        $r8 = virtualinvoke $r1.<twitter4j.http.HttpRequest: java.lang.String getURL()>();

        $r3 = $r1.<twitter4j.http.HttpRequest: twitter4j.http.HttpParameter[] httpParams>;

        interfaceinvoke $r9.<twitter4j.http.Authorization: void setAuthorizationHeader(java.lang.String,java.lang.String,twitter4j.http.HttpParameter[],java.net.HttpURLConnection)>($r7, $r8, $r3, $r2);

     label1:
        $r10 = $r1.<twitter4j.http.HttpRequest: java.util.Map requestHeaders>;

        if $r10 == null goto label3;

        $r10 = $r1.<twitter4j.http.HttpRequest: java.util.Map requestHeaders>;

        $r11 = interfaceinvoke $r10.<java.util.Map: java.util.Set keySet()>();

        $r12 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (java.lang.String) $r13;

        $r10 = $r1.<twitter4j.http.HttpRequest: java.util.Map requestHeaders>;

        $r13 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7);

        $r8 = (java.lang.String) $r13;

        virtualinvoke $r2.<java.net.HttpURLConnection: void addRequestProperty(java.lang.String,java.lang.String)>($r7, $r8);

        $r4 = <twitter4j.http.HttpClient: twitter4j.logging.Logger logger>;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");

        $r10 = $r1.<twitter4j.http.HttpRequest: java.util.Map requestHeaders>;

        $r13 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7);

        $r7 = (java.lang.String) $r13;

        $r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r4.<twitter4j.logging.Logger: void debug(java.lang.String)>($r7);

        goto label2;

     label3:
        return;
    }

    private void write(java.io.DataOutputStream, java.lang.String) throws java.io.IOException
    {
        java.io.DataOutputStream $r1;
        twitter4j.logging.Logger $r3;
        java.lang.String $r2;
        twitter4j.http.HttpClient r0;

        r0 := @this: twitter4j.http.HttpClient;

        $r1 := @parameter0: java.io.DataOutputStream;

        $r2 := @parameter1: java.lang.String;

        virtualinvoke $r1.<java.io.DataOutputStream: void writeBytes(java.lang.String)>($r2);

        $r3 = <twitter4j.http.HttpClient: twitter4j.logging.Logger logger>;

        virtualinvoke $r3.<twitter4j.logging.Logger: void debug(java.lang.String)>($r2);

        return;
    }

    public boolean equals(java.lang.Object)
    {
        twitter4j.http.HttpClient r0, r2;
        int $i0, $i1;
        java.lang.Object $r1;
        java.lang.String $r3, $r4;
        boolean $z0;

        r0 := @this: twitter4j.http.HttpClient;

        $r1 := @parameter0: java.lang.Object;

        if r0 != $r1 goto label01;

        return 1;

     label01:
        $z0 = $r1 instanceof twitter4j.http.HttpClient;

        if $z0 != 0 goto label02;

        return 0;

     label02:
        r2 = (twitter4j.http.HttpClient) $r1;

        $i0 = r0.<twitter4j.http.HttpClient: int connectionTimeout>;

        $i1 = r2.<twitter4j.http.HttpClient: int connectionTimeout>;

        if $i0 == $i1 goto label03;

        return 0;

     label03:
        $i0 = r0.<twitter4j.http.HttpClient: int proxyPort>;

        $i1 = r2.<twitter4j.http.HttpClient: int proxyPort>;

        if $i0 == $i1 goto label04;

        return 0;

     label04:
        $i0 = r0.<twitter4j.http.HttpClient: int readTimeout>;

        $i1 = r2.<twitter4j.http.HttpClient: int readTimeout>;

        if $i0 == $i1 goto label05;

        return 0;

     label05:
        $i0 = r0.<twitter4j.http.HttpClient: int retryCount>;

        $i1 = r2.<twitter4j.http.HttpClient: int retryCount>;

        if $i0 == $i1 goto label06;

        return 0;

     label06:
        $i0 = r0.<twitter4j.http.HttpClient: int retryIntervalSeconds>;

        $i1 = r2.<twitter4j.http.HttpClient: int retryIntervalSeconds>;

        if $i0 == $i1 goto label07;

        return 0;

     label07:
        $r3 = r0.<twitter4j.http.HttpClient: java.lang.String proxyAuthPassword>;

        if $r3 == null goto label09;

        $r3 = r0.<twitter4j.http.HttpClient: java.lang.String proxyAuthPassword>;

        $r4 = r2.<twitter4j.http.HttpClient: java.lang.String proxyAuthPassword>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label10;

     label08:
        return 0;

     label09:
        $r3 = r2.<twitter4j.http.HttpClient: java.lang.String proxyAuthPassword>;

        if $r3 != null goto label08;

     label10:
        $r3 = r0.<twitter4j.http.HttpClient: java.lang.String proxyAuthUser>;

        if $r3 == null goto label12;

        $r3 = r0.<twitter4j.http.HttpClient: java.lang.String proxyAuthUser>;

        $r4 = r2.<twitter4j.http.HttpClient: java.lang.String proxyAuthUser>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label13;

     label11:
        return 0;

     label12:
        $r3 = r2.<twitter4j.http.HttpClient: java.lang.String proxyAuthUser>;

        if $r3 != null goto label11;

     label13:
        $r3 = r0.<twitter4j.http.HttpClient: java.lang.String proxyHost>;

        if $r3 == null goto label15;

        $r3 = r0.<twitter4j.http.HttpClient: java.lang.String proxyHost>;

        $r4 = r2.<twitter4j.http.HttpClient: java.lang.String proxyHost>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label16;

     label14:
        return 0;

     label15:
        $r3 = r2.<twitter4j.http.HttpClient: java.lang.String proxyHost>;

        if $r3 != null goto label14;

     label16:
        return 1;
    }

    public twitter4j.http.HttpResponse get(java.lang.String) throws twitter4j.TwitterException
    {
        twitter4j.http.HttpResponse $r3;
        twitter4j.http.RequestMethod $r2;
        java.lang.String $r1;
        twitter4j.http.HttpClient r0;
        twitter4j.http.HttpRequest $r4;

        r0 := @this: twitter4j.http.HttpClient;

        $r1 := @parameter0: java.lang.String;

        $r4 = new twitter4j.http.HttpRequest;

        $r2 = <twitter4j.http.RequestMethod: twitter4j.http.RequestMethod GET>;

        specialinvoke $r4.<twitter4j.http.HttpRequest: void <init>(twitter4j.http.RequestMethod,java.lang.String,twitter4j.http.HttpParameter[],twitter4j.http.Authorization,java.util.Map)>($r2, $r1, null, null, null);

        $r3 = virtualinvoke r0.<twitter4j.http.HttpClient: twitter4j.http.HttpResponse request(twitter4j.http.HttpRequest)>($r4);

        return $r3;
    }

    public int getConnectionTimeout()
    {
        int i0;
        twitter4j.http.HttpClient r0;

        r0 := @this: twitter4j.http.HttpClient;

        i0 = r0.<twitter4j.http.HttpClient: int connectionTimeout>;

        return i0;
    }

    public java.lang.String getProxyAuthPassword()
    {
        java.lang.String r1;
        twitter4j.http.HttpClient r0;

        r0 := @this: twitter4j.http.HttpClient;

        r1 = r0.<twitter4j.http.HttpClient: java.lang.String proxyAuthPassword>;

        return r1;
    }

    public java.lang.String getProxyAuthUser()
    {
        java.lang.String r1;
        twitter4j.http.HttpClient r0;

        r0 := @this: twitter4j.http.HttpClient;

        r1 = r0.<twitter4j.http.HttpClient: java.lang.String proxyAuthUser>;

        return r1;
    }

    public java.lang.String getProxyHost()
    {
        java.lang.String r1;
        twitter4j.http.HttpClient r0;

        r0 := @this: twitter4j.http.HttpClient;

        r1 = r0.<twitter4j.http.HttpClient: java.lang.String proxyHost>;

        return r1;
    }

    public int getProxyPort()
    {
        int i0;
        twitter4j.http.HttpClient r0;

        r0 := @this: twitter4j.http.HttpClient;

        i0 = r0.<twitter4j.http.HttpClient: int proxyPort>;

        return i0;
    }

    public int getReadTimeout()
    {
        int i0;
        twitter4j.http.HttpClient r0;

        r0 := @this: twitter4j.http.HttpClient;

        i0 = r0.<twitter4j.http.HttpClient: int readTimeout>;

        return i0;
    }

    public int hashCode()
    {
        int $i0, $i1, $i2;
        java.lang.String $r1;
        twitter4j.http.HttpClient r0;

        r0 := @this: twitter4j.http.HttpClient;

        $i0 = 0;

        $r1 = r0.<twitter4j.http.HttpClient: java.lang.String proxyHost>;

        if $r1 == null goto label4;

        $r1 = r0.<twitter4j.http.HttpClient: java.lang.String proxyHost>;

        $i1 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

     label1:
        $i1 = $i1 * 31;

        $i2 = r0.<twitter4j.http.HttpClient: int proxyPort>;

        $i1 = $i1 + $i2;

        $i1 = $i1 * 31;

        $r1 = r0.<twitter4j.http.HttpClient: java.lang.String proxyAuthUser>;

        if $r1 == null goto label5;

        $r1 = r0.<twitter4j.http.HttpClient: java.lang.String proxyAuthUser>;

        $i2 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

     label2:
        $i1 = $i1 + $i2;

        $i1 = $i1 * 31;

        $r1 = r0.<twitter4j.http.HttpClient: java.lang.String proxyAuthPassword>;

        if $r1 == null goto label3;

        $r1 = r0.<twitter4j.http.HttpClient: java.lang.String proxyAuthPassword>;

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

     label3:
        $i0 = $i1 + $i0;

        $i0 = $i0 * 31;

        $i1 = r0.<twitter4j.http.HttpClient: int connectionTimeout>;

        $i0 = $i0 + $i1;

        $i0 = $i0 * 31;

        $i1 = r0.<twitter4j.http.HttpClient: int readTimeout>;

        $i0 = $i0 + $i1;

        $i0 = $i0 * 31;

        $i1 = r0.<twitter4j.http.HttpClient: int retryCount>;

        $i0 = $i0 + $i1;

        $i0 = $i0 * 31;

        $i1 = r0.<twitter4j.http.HttpClient: int retryIntervalSeconds>;

        $i0 = $i0 + $i1;

        return $i0;

     label4:
        $i1 = 0;

        goto label1;

     label5:
        $i2 = 0;

        goto label2;
    }

    public twitter4j.http.HttpResponse post(java.lang.String, twitter4j.http.HttpParameter[]) throws twitter4j.TwitterException
    {
        twitter4j.http.HttpResponse $r4;
        twitter4j.http.HttpParameter[] $r2;
        twitter4j.http.RequestMethod $r3;
        java.lang.String $r1;
        twitter4j.http.HttpClient r0;
        twitter4j.http.HttpRequest $r5;

        r0 := @this: twitter4j.http.HttpClient;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: twitter4j.http.HttpParameter[];

        $r5 = new twitter4j.http.HttpRequest;

        $r3 = <twitter4j.http.RequestMethod: twitter4j.http.RequestMethod POST>;

        specialinvoke $r5.<twitter4j.http.HttpRequest: void <init>(twitter4j.http.RequestMethod,java.lang.String,twitter4j.http.HttpParameter[],twitter4j.http.Authorization,java.util.Map)>($r3, $r1, $r2, null, null);

        $r4 = virtualinvoke r0.<twitter4j.http.HttpClient: twitter4j.http.HttpResponse request(twitter4j.http.HttpRequest)>($r5);

        return $r4;
    }

    public twitter4j.http.HttpResponse request(twitter4j.http.HttpRequest) throws twitter4j.TwitterException
    {
        java.net.HttpURLConnection $r10;
        byte[] $r22;
        java.io.BufferedInputStream r3, $r38;
        twitter4j.http.HttpParameter r6;
        java.lang.Integer $r29;
        java.io.DataOutputStream r5, $r36;
        java.util.Map $r23;
        boolean $z0;
        java.util.Set $r24;
        java.lang.Exception $r30, $r31, $r32;
        java.util.List r27;
        twitter4j.http.HttpParameter[] r2;
        twitter4j.http.RequestMethod $r11, $r12;
        java.lang.Throwable r4, $r18, $r33, $r34;
        long $l4;
        twitter4j.http.HttpClient r0;
        twitter4j.http.HttpResponse r7, r19, $r40;
        java.lang.StringBuffer $r13, $r35;
        int i0, i1, i2, i3, i5, $i6;
        twitter4j.TwitterException $r20, $r39;
        twitter4j.logging.Logger $r21;
        java.lang.String $r9, $r14;
        java.io.OutputStream r8, $r15;
        java.util.Iterator $r25, $r28;
        java.io.IOException $r41;
        java.io.FileInputStream $r17, $r37;
        java.io.File $r16;
        twitter4j.http.HttpRequest $r1;
        java.lang.Object $r26;

        r0 := @this: twitter4j.http.HttpClient;

        $r1 := @parameter0: twitter4j.http.HttpRequest;

        i1 = r0.<twitter4j.http.HttpClient: int retryCount>;

        i1 = i1 + 1;

        i2 = 0;

        r7 = null;

     label001:
        if i2 >= i1 goto label110;

        i3 = -1;

        r8 = null;

     label002:
        $r9 = virtualinvoke $r1.<twitter4j.http.HttpRequest: java.lang.String getURL()>();

        $r10 = specialinvoke r0.<twitter4j.http.HttpClient: java.net.HttpURLConnection getConnection(java.lang.String)>($r9);

        virtualinvoke $r10.<java.net.HttpURLConnection: void setDoInput(boolean)>(1);

        specialinvoke r0.<twitter4j.http.HttpClient: void setHeaders(twitter4j.http.HttpRequest,java.net.HttpURLConnection)>($r1, $r10);

        $r11 = $r1.<twitter4j.http.HttpRequest: twitter4j.http.RequestMethod requestMethod>;

        $r9 = virtualinvoke $r11.<twitter4j.http.RequestMethod: java.lang.String name()>();

        virtualinvoke $r10.<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>($r9);

        $r11 = $r1.<twitter4j.http.HttpRequest: twitter4j.http.RequestMethod requestMethod>;

        $r12 = <twitter4j.http.RequestMethod: twitter4j.http.RequestMethod POST>;

     label003:
        if $r11 != $r12 goto label052;

     label004:
        r2 = $r1.<twitter4j.http.HttpRequest: twitter4j.http.HttpParameter[] httpParams>;

        $z0 = staticinvoke <twitter4j.http.HttpParameter: boolean containsFile(twitter4j.http.HttpParameter[])>(r2);

     label005:
        if $z0 == 0 goto label072;

     label006:
        $r35 = new java.lang.StringBuffer;

     label007:
        $r13 = $r35;

     label008:
        specialinvoke $r35.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("----Twitter4J-upload");

        $l4 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>($l4);

        $r9 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        $r35 = new java.lang.StringBuffer;

     label009:
        $r13 = $r35;

     label010:
        specialinvoke $r35.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("multipart/form-data; boundary=");

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r10.<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>("Content-Type", $r14);

        $r35 = new java.lang.StringBuffer;

     label011:
        $r13 = $r35;

     label012:
        specialinvoke $r35.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("--");

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r9 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r10.<java.net.HttpURLConnection: void setDoOutput(boolean)>(1);

        $r15 = virtualinvoke $r10.<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>();

     label013:
        r8 = $r15;

     label014:
        $r36 = new java.io.DataOutputStream;

     label015:
        r5 = $r36;

     label016:
        specialinvoke $r36.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r15);

        r2 = $r1.<twitter4j.http.HttpRequest: twitter4j.http.HttpParameter[] httpParams>;

        i0 = lengthof r2;

     label017:
        i5 = 0;

     label018:
        if i5 >= i0 goto label048;

     label019:
        r6 = r2[i5];

        $z0 = virtualinvoke r6.<twitter4j.http.HttpParameter: boolean isFile()>();

     label020:
        if $z0 == 0 goto label042;

     label021:
        $r35 = new java.lang.StringBuffer;

     label022:
        $r13 = $r35;

     label023:
        specialinvoke $r35.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\r\n");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke r0.<twitter4j.http.HttpClient: void write(java.io.DataOutputStream,java.lang.String)>(r5, $r14);

        $r35 = new java.lang.StringBuffer;

     label024:
        $r13 = $r35;

     label025:
        specialinvoke $r35.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Content-Disposition: form-data; name=\"");

        $r14 = virtualinvoke r6.<twitter4j.http.HttpParameter: java.lang.String getName()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"; filename=\"");

        $r16 = r6.<twitter4j.http.HttpParameter: java.io.File file>;

        $r14 = virtualinvoke $r16.<java.io.File: java.lang.String getName()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"\r\n");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke r0.<twitter4j.http.HttpClient: void write(java.io.DataOutputStream,java.lang.String)>(r5, $r14);

        $r35 = new java.lang.StringBuffer;

     label026:
        $r13 = $r35;

     label027:
        specialinvoke $r35.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Content-Type: ");

        $r14 = virtualinvoke r6.<twitter4j.http.HttpParameter: java.lang.String getContentType()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\r\n\r\n");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke r0.<twitter4j.http.HttpClient: void write(java.io.DataOutputStream,java.lang.String)>(r5, $r14);

        $r38 = new java.io.BufferedInputStream;

     label028:
        r3 = $r38;

     label029:
        $r37 = new java.io.FileInputStream;

     label030:
        $r17 = $r37;

     label031:
        $r16 = r6.<twitter4j.http.HttpParameter: java.io.File file>;

        specialinvoke $r37.<java.io.FileInputStream: void <init>(java.io.File)>($r16);

        specialinvoke $r38.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r17);

     label032:
        $i6 = virtualinvoke r3.<java.io.BufferedInputStream: int read()>();

     label033:
        if $i6 == -1 goto label040;

     label034:
        virtualinvoke r5.<java.io.DataOutputStream: void write(int)>($i6);

     label035:
        goto label032;

     label036:
        $r18 := @caughtexception;

        r19 = r7;

     label037:
        virtualinvoke r8.<java.io.OutputStream: void close()>();

     label038:
        throw $r18;

     label039:
        r4 := @caughtexception;

        i0 = r0.<twitter4j.http.HttpClient: int retryCount>;

        if i2 != i0 goto label094;

        $r39 = new twitter4j.TwitterException;

        $r41 = (java.io.IOException) r4;

        $r9 = virtualinvoke $r41.<java.io.IOException: java.lang.String getMessage()>();

        $r30 = (java.lang.Exception) r4;

        specialinvoke $r39.<twitter4j.TwitterException: void <init>(java.lang.String,java.lang.Exception,int)>($r9, $r30, i3);

        throw $r39;

     label040:
        specialinvoke r0.<twitter4j.http.HttpClient: void write(java.io.DataOutputStream,java.lang.String)>(r5, "\r\n");

        virtualinvoke r3.<java.io.BufferedInputStream: void close()>();

     label041:
        i5 = i5 + 1;

        goto label018;

     label042:
        $r35 = new java.lang.StringBuffer;

     label043:
        $r13 = $r35;

     label044:
        specialinvoke $r35.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\r\n");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke r0.<twitter4j.http.HttpClient: void write(java.io.DataOutputStream,java.lang.String)>(r5, $r14);

        $r35 = new java.lang.StringBuffer;

     label045:
        $r13 = $r35;

     label046:
        specialinvoke $r35.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Content-Disposition: form-data; name=\"");

        $r14 = r6.<twitter4j.http.HttpParameter: java.lang.String name>;

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"\r\n");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke r0.<twitter4j.http.HttpClient: void write(java.io.DataOutputStream,java.lang.String)>(r5, $r14);

        specialinvoke r0.<twitter4j.http.HttpClient: void write(java.io.DataOutputStream,java.lang.String)>(r5, "Content-Type: text/plain; charset=UTF-8\r\n\r\n");

        $r21 = <twitter4j.http.HttpClient: twitter4j.logging.Logger logger>;

        $r14 = r6.<twitter4j.http.HttpParameter: java.lang.String value>;

        virtualinvoke $r21.<twitter4j.logging.Logger: void debug(java.lang.String)>($r14);

        $r14 = r6.<twitter4j.http.HttpParameter: java.lang.String value>;

        $r14 = staticinvoke <twitter4j.http.HttpClient: java.lang.String encode(java.lang.String)>($r14);

        $r22 = virtualinvoke $r14.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        virtualinvoke r5.<java.io.DataOutputStream: void write(byte[])>($r22);

        specialinvoke r0.<twitter4j.http.HttpClient: void write(java.io.DataOutputStream,java.lang.String)>(r5, "\r\n");

     label047:
        goto label041;

     label048:
        $r35 = new java.lang.StringBuffer;

     label049:
        $r13 = $r35;

     label050:
        specialinvoke $r35.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("--\r\n");

        $r9 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke r0.<twitter4j.http.HttpClient: void write(java.io.DataOutputStream,java.lang.String)>(r5, $r9);

        specialinvoke r0.<twitter4j.http.HttpClient: void write(java.io.DataOutputStream,java.lang.String)>(r5, "\r\n");

     label051:
        virtualinvoke r8.<java.io.OutputStream: void flush()>();

        virtualinvoke r8.<java.io.OutputStream: void close()>();

     label052:
        $r40 = new twitter4j.http.HttpResponse;

     label053:
        r19 = $r40;

     label054:
        specialinvoke $r40.<twitter4j.http.HttpResponse: void <init>(java.net.HttpURLConnection)>($r10);

     label055:
        i0 = virtualinvoke $r10.<java.net.HttpURLConnection: int getResponseCode()>();

     label056:
        i3 = i0;

     label057:
        $r21 = <twitter4j.http.HttpClient: twitter4j.logging.Logger logger>;

        $z0 = virtualinvoke $r21.<twitter4j.logging.Logger: boolean isDebugEnabled()>();

     label058:
        if $z0 == 0 goto label078;

     label059:
        $r21 = <twitter4j.http.HttpClient: twitter4j.logging.Logger logger>;

        virtualinvoke $r21.<twitter4j.logging.Logger: void debug(java.lang.String)>("Response: ");

        $r23 = virtualinvoke $r10.<java.net.HttpURLConnection: java.util.Map getHeaderFields()>();

        $r24 = interfaceinvoke $r23.<java.util.Map: java.util.Set keySet()>();

        $r25 = interfaceinvoke $r24.<java.util.Set: java.util.Iterator iterator()>();

     label060:
        $z0 = interfaceinvoke $r25.<java.util.Iterator: boolean hasNext()>();

     label061:
        if $z0 == 0 goto label078;

     label062:
        $r26 = interfaceinvoke $r25.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (java.lang.String) $r26;

        $r26 = interfaceinvoke $r23.<java.util.Map: java.lang.Object get(java.lang.Object)>($r9);

        r27 = (java.util.List) $r26;

        $r28 = interfaceinvoke r27.<java.util.List: java.util.Iterator iterator()>();

     label063:
        $z0 = interfaceinvoke $r28.<java.util.Iterator: boolean hasNext()>();

     label064:
        if $z0 == 0 goto label060;

     label065:
        $r26 = interfaceinvoke $r28.<java.util.Iterator: java.lang.Object next()>();

        $r14 = (java.lang.String) $r26;

     label066:
        if $r9 == null goto label076;

     label067:
        $r21 = <twitter4j.http.HttpClient: twitter4j.logging.Logger logger>;

        $r35 = new java.lang.StringBuffer;

     label068:
        $r13 = $r35;

     label069:
        specialinvoke $r35.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r21.<twitter4j.logging.Logger: void debug(java.lang.String)>($r14);

     label070:
        goto label063;

     label071:
        $r18 := @caughtexception;

        goto label037;

     label072:
        virtualinvoke $r10.<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>("Content-Type", "application/x-www-form-urlencoded");

        r2 = $r1.<twitter4j.http.HttpRequest: twitter4j.http.HttpParameter[] httpParams>;

        $r9 = staticinvoke <twitter4j.http.HttpParameter: java.lang.String encodeParameters(twitter4j.http.HttpParameter[])>(r2);

        $r21 = <twitter4j.http.HttpClient: twitter4j.logging.Logger logger>;

        virtualinvoke $r21.<twitter4j.logging.Logger: void debug(java.lang.String,java.lang.String)>("Post Params: ", $r9);

        $r22 = virtualinvoke $r9.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        i0 = lengthof $r22;

        $r9 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        virtualinvoke $r10.<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>("Content-Length", $r9);

        virtualinvoke $r10.<java.net.HttpURLConnection: void setDoOutput(boolean)>(1);

        $r15 = virtualinvoke $r10.<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>();

     label073:
        r8 = $r15;

     label074:
        virtualinvoke $r15.<java.io.OutputStream: void write(byte[])>($r22);

     label075:
        goto label051;

     label076:
        $r21 = <twitter4j.http.HttpClient: twitter4j.logging.Logger logger>;

        virtualinvoke $r21.<twitter4j.logging.Logger: void debug(java.lang.String)>($r14);

     label077:
        goto label063;

     label078:
        if i0 == 200 goto label091;

        if i0 == 503 goto label079;

        if i0 != 420 goto label083;

     label079:
        i5 = -1;

     label080:
        $r9 = virtualinvoke $r10.<java.net.HttpURLConnection: java.lang.String getHeaderField(java.lang.String)>("Retry-After");

        $r29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r9);

        $i6 = virtualinvoke $r29.<java.lang.Integer: int intValue()>();

     label081:
        i5 = $i6;

     label082:
        $r9 = staticinvoke <twitter4j.http.HttpClient: java.lang.String getCause(int)>(i0);

        $r20 = staticinvoke <twitter4j.TwitterException: twitter4j.TwitterException createRateLimitedTwitterException(java.lang.String,int,int)>($r9, i0, i5);

        throw $r20;

     label083:
        if i0 < 500 goto label086;

     label084:
        i5 = r0.<twitter4j.http.HttpClient: int retryCount>;

     label085:
        if i2 != i5 goto label093;

     label086:
        $r39 = new twitter4j.TwitterException;

     label087:
        $r20 = $r39;

     label088:
        $r35 = new java.lang.StringBuffer;

     label089:
        $r13 = $r35;

     label090:
        specialinvoke $r35.<java.lang.StringBuffer: void <init>()>();

        $r9 = staticinvoke <twitter4j.http.HttpClient: java.lang.String getCause(int)>(i0);

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r9 = virtualinvoke r19.<twitter4j.http.HttpResponse: java.lang.String asString()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r9 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r39.<twitter4j.TwitterException: void <init>(java.lang.String,int)>($r9, i0);

        throw $r20;

     label091:
        virtualinvoke r8.<java.io.OutputStream: void close()>();

     label092:
        return r19;

     label093:
        virtualinvoke r8.<java.io.OutputStream: void close()>();

     label094:
        $r21 = <twitter4j.http.HttpClient: twitter4j.logging.Logger logger>;

     label095:
        $z0 = virtualinvoke $r21.<twitter4j.logging.Logger: boolean isDebugEnabled()>();

     label096:
        if $z0 == 0 goto label098;

        if r19 == null goto label098;

     label097:
        virtualinvoke r19.<twitter4j.http.HttpResponse: java.lang.String asString()>();

     label098:
        $r21 = <twitter4j.http.HttpClient: twitter4j.logging.Logger logger>;

        $r35 = new java.lang.StringBuffer;

        $r13 = $r35;

     label099:
        specialinvoke $r35.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Sleeping ");

     label100:
        i3 = r0.<twitter4j.http.HttpClient: int retryIntervalSeconds>;

     label101:
        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i3);

        $r13 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" seconds until the next retry.");

        $r9 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r21.<twitter4j.logging.Logger: void debug(java.lang.String)>($r9);

     label102:
        i3 = r0.<twitter4j.http.HttpClient: int retryIntervalSeconds>;

        i3 = i3 * 1000;

        $l4 = (long) i3;

     label103:
        staticinvoke <java.lang.Thread: void sleep(long)>($l4);

     label104:
        i2 = i2 + 1;

        r7 = r19;

        goto label001;

     label105:
        $r30 := @caughtexception;

        return r19;

     label106:
        $r31 := @caughtexception;

        goto label094;

     label107:
        $r32 := @caughtexception;

        goto label038;

     label108:
        $r33 := @caughtexception;

        goto label104;

     label109:
        $r34 := @caughtexception;

        goto label082;

     label110:
        return r7;

        catch java.lang.Throwable from label002 to label003 with label036;
        catch java.lang.Throwable from label004 to label005 with label036;
        catch java.lang.Throwable from label006 to label007 with label036;
        catch java.lang.Throwable from label008 to label009 with label036;
        catch java.lang.Throwable from label010 to label011 with label036;
        catch java.lang.Throwable from label012 to label013 with label036;
        catch java.lang.Throwable from label014 to label015 with label036;
        catch java.lang.Throwable from label016 to label017 with label036;
        catch java.lang.Throwable from label019 to label020 with label036;
        catch java.lang.Throwable from label021 to label022 with label036;
        catch java.lang.Throwable from label023 to label024 with label036;
        catch java.lang.Throwable from label025 to label026 with label036;
        catch java.lang.Throwable from label027 to label028 with label036;
        catch java.lang.Throwable from label029 to label030 with label036;
        catch java.lang.Throwable from label031 to label033 with label036;
        catch java.lang.Throwable from label034 to label035 with label036;
        catch java.lang.Exception from label037 to label038 with label107;
        catch java.io.IOException from label038 to label039 with label039;
        catch java.lang.Throwable from label040 to label041 with label036;
        catch java.lang.Throwable from label042 to label043 with label036;
        catch java.lang.Throwable from label044 to label045 with label036;
        catch java.lang.Throwable from label046 to label047 with label036;
        catch java.lang.Throwable from label048 to label049 with label036;
        catch java.lang.Throwable from label050 to label053 with label036;
        catch java.lang.Throwable from label054 to label055 with label036;
        catch java.lang.Throwable from label055 to label056 with label071;
        catch java.lang.Throwable from label057 to label058 with label071;
        catch java.lang.Throwable from label059 to label061 with label071;
        catch java.lang.Throwable from label062 to label064 with label071;
        catch java.lang.Throwable from label065 to label066 with label071;
        catch java.lang.Throwable from label067 to label068 with label071;
        catch java.lang.Throwable from label069 to label070 with label071;
        catch java.lang.Throwable from label072 to label073 with label036;
        catch java.lang.Throwable from label074 to label075 with label036;
        catch java.lang.Throwable from label076 to label077 with label071;
        catch java.lang.NumberFormatException from label080 to label081 with label109;
        catch java.lang.Throwable from label080 to label081 with label071;
        catch java.lang.Throwable from label082 to label083 with label071;
        catch java.lang.Throwable from label084 to label085 with label071;
        catch java.lang.Throwable from label086 to label087 with label071;
        catch java.lang.Throwable from label088 to label089 with label071;
        catch java.lang.Throwable from label090 to label091 with label071;
        catch java.lang.Exception from label091 to label092 with label105;
        catch java.lang.Exception from label093 to label094 with label106;
        catch java.lang.InterruptedException from label095 to label096 with label108;
        catch java.lang.InterruptedException from label097 to label098 with label108;
        catch java.lang.InterruptedException from label099 to label100 with label108;
        catch java.lang.InterruptedException from label101 to label102 with label108;
        catch java.lang.InterruptedException from label103 to label104 with label108;
    }

    public void setConnectionTimeout(int)
    {
        int $i0;
        twitter4j.http.HttpClient r0;

        r0 := @this: twitter4j.http.HttpClient;

        $i0 := @parameter0: int;

        r0.<twitter4j.http.HttpClient: int connectionTimeout> = $i0;

        return;
    }

    public void setProxyAuthPassword(java.lang.String)
    {
        java.lang.String $r1;
        twitter4j.http.HttpClient r0;

        r0 := @this: twitter4j.http.HttpClient;

        $r1 := @parameter0: java.lang.String;

        r0.<twitter4j.http.HttpClient: java.lang.String proxyAuthPassword> = $r1;

        return;
    }

    public void setProxyAuthUser(java.lang.String)
    {
        java.lang.String $r1;
        twitter4j.http.HttpClient r0;

        r0 := @this: twitter4j.http.HttpClient;

        $r1 := @parameter0: java.lang.String;

        r0.<twitter4j.http.HttpClient: java.lang.String proxyAuthUser> = $r1;

        return;
    }

    public void setProxyHost(java.lang.String)
    {
        java.lang.String $r1;
        twitter4j.http.HttpClient r0;

        r0 := @this: twitter4j.http.HttpClient;

        $r1 := @parameter0: java.lang.String;

        r0.<twitter4j.http.HttpClient: java.lang.String proxyHost> = $r1;

        return;
    }

    public void setProxyPort(int)
    {
        int $i0;
        twitter4j.http.HttpClient r0;

        r0 := @this: twitter4j.http.HttpClient;

        $i0 := @parameter0: int;

        r0.<twitter4j.http.HttpClient: int proxyPort> = $i0;

        return;
    }

    public void setReadTimeout(int)
    {
        int $i0;
        twitter4j.http.HttpClient r0;

        r0 := @this: twitter4j.http.HttpClient;

        $i0 := @parameter0: int;

        r0.<twitter4j.http.HttpClient: int readTimeout> = $i0;

        return;
    }

    public void setRetryCount(int)
    {
        int $i0;
        twitter4j.http.HttpClient r0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: twitter4j.http.HttpClient;

        $i0 := @parameter0: int;

        if $i0 < 0 goto label1;

        r0.<twitter4j.http.HttpClient: int retryCount> = $i0;

        return;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("RetryCount cannot be negative.");

        throw $r1;
    }

    public void setRetryIntervalSeconds(int)
    {
        int $i0;
        twitter4j.http.HttpClient r0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: twitter4j.http.HttpClient;

        $i0 := @parameter0: int;

        if $i0 < 0 goto label1;

        r0.<twitter4j.http.HttpClient: int retryIntervalSeconds> = $i0;

        return;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("RetryInterval cannot be negative.");

        throw $r1;
    }
}
