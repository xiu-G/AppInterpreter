public class com.exchange.interpolator.ElasticInterpolator extends java.lang.Object implements android.view.animation.Interpolator
{
    private float amplitude;
    private float period;
    private com.exchange.interpolator.EasingType$Type type;

    public void <init>(com.exchange.interpolator.EasingType$Type, float, float)
    {
        com.exchange.interpolator.EasingType$Type $r1;
        com.exchange.interpolator.ElasticInterpolator r0;
        float $f0, $f1;

        r0 := @this: com.exchange.interpolator.ElasticInterpolator;

        $r1 := @parameter0: com.exchange.interpolator.EasingType$Type;

        $f0 := @parameter1: float;

        $f1 := @parameter2: float;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.exchange.interpolator.ElasticInterpolator: com.exchange.interpolator.EasingType$Type type> = $r1;

        r0.<com.exchange.interpolator.ElasticInterpolator: float amplitude> = 1.0F;

        r0.<com.exchange.interpolator.ElasticInterpolator: float period> = 1.0F;

        return;
    }

    private float in(float, float, float)
    {
        byte $b0;
        com.exchange.interpolator.ElasticInterpolator r0;
        int $i1;
        float $f0, $f1, $f2, f3;
        double $d0, $d1, $d2;

        r0 := @this: com.exchange.interpolator.ElasticInterpolator;

        $f0 := @parameter0: float;

        $f1 := @parameter1: float;

        $f2 := @parameter2: float;

        $b0 = $f0 cmpl 0.0F;

        if $b0 != 0 goto label1;

        return 0.0F;

     label1:
        $b0 = $f0 cmpl 1.0F;

        $i1 = (int) $b0;

        if $i1 < 0 goto label2;

        return 1.0F;

     label2:
        $b0 = $f2 cmpl 0.0F;

        if $b0 != 0 goto label3;

        $f2 = 0.3F;

     label3:
        $b0 = $f1 cmpl 0.0F;

        if $b0 == 0 goto label4;

        $b0 = $f1 cmpg 1.0F;

        $i1 = (int) $b0;

        if $i1 >= 0 goto label6;

     label4:
        $f1 = 1.0F;

        f3 = $f2 / 4.0F;

     label5:
        $d0 = (double) $f1;

        $f0 = $f0 - 1.0F;

        $f1 = 10.0F * $f0;

        $d1 = (double) $f1;

        $d1 = staticinvoke <java.lang.Math: double pow(double,double)>(2.0, $d1);

        $d0 = $d0 * $d1;

        $f0 = $f0 - f3;

        $d1 = (double) $f0;

        $d1 = $d1 * 6.283185307179586;

        $d2 = (double) $f2;

        $d1 = $d1 / $d2;

        $d1 = staticinvoke <java.lang.Math: double sin(double)>($d1);

        $d0 = $d0 * $d1;

        $d0 = neg $d0;

        $f0 = (float) $d0;

        return $f0;

     label6:
        $d0 = (double) $f2;

        $d0 = $d0 / 6.283185307179586;

        f3 = 1.0F / $f1;

        $d1 = (double) f3;

        $d1 = staticinvoke <java.lang.Math: double asin(double)>($d1);

        $d0 = $d0 * $d1;

        f3 = (float) $d0;

        goto label5;
    }

    private float inout(float, float, float)
    {
        byte $b0;
        com.exchange.interpolator.ElasticInterpolator r0;
        int $i1;
        float $f0, $f1, $f2, f3;
        double $d0, $d1, $d2;

        r0 := @this: com.exchange.interpolator.ElasticInterpolator;

        $f0 := @parameter0: float;

        $f1 := @parameter1: float;

        $f2 := @parameter2: float;

        $b0 = $f0 cmpl 0.0F;

        if $b0 != 0 goto label1;

        return 0.0F;

     label1:
        $b0 = $f0 cmpl 1.0F;

        $i1 = (int) $b0;

        if $i1 < 0 goto label2;

        return 1.0F;

     label2:
        $b0 = $f2 cmpl 0.0F;

        if $b0 != 0 goto label3;

        $f2 = 0.45000002F;

     label3:
        $b0 = $f1 cmpl 0.0F;

        if $b0 == 0 goto label4;

        $b0 = $f1 cmpg 1.0F;

        $i1 = (int) $b0;

        if $i1 >= 0 goto label6;

     label4:
        $f1 = 1.0F;

        f3 = $f2 / 4.0F;

     label5:
        $f0 = $f0 * 2.0F;

        $b0 = $f0 cmpg 1.0F;

        $i1 = (int) $b0;

        if $i1 >= 0 goto label7;

        $d0 = (double) $f1;

        $f0 = $f0 - 1.0F;

        $f1 = 10.0F * $f0;

        $d1 = (double) $f1;

        $d1 = staticinvoke <java.lang.Math: double pow(double,double)>(2.0, $d1);

        $d0 = $d0 * $d1;

        $f0 = $f0 - f3;

        $d1 = (double) $f0;

        $d1 = $d1 * 6.283185307179586;

        $d2 = (double) $f2;

        $d1 = $d1 / $d2;

        $d1 = staticinvoke <java.lang.Math: double sin(double)>($d1);

        $d0 = $d0 * $d1;

        $d0 = -0.5 * $d0;

        $f0 = (float) $d0;

        return $f0;

     label6:
        $d0 = (double) $f2;

        $d0 = $d0 / 6.283185307179586;

        f3 = 1.0F / $f1;

        $d1 = (double) f3;

        $d1 = staticinvoke <java.lang.Math: double asin(double)>($d1);

        $d0 = $d0 * $d1;

        f3 = (float) $d0;

        goto label5;

     label7:
        $d0 = (double) $f1;

        $f0 = $f0 - 1.0F;

        $f1 = -10.0F * $f0;

        $d1 = (double) $f1;

        $d1 = staticinvoke <java.lang.Math: double pow(double,double)>(2.0, $d1);

        $d0 = $d0 * $d1;

        $f0 = $f0 - f3;

        $d1 = (double) $f0;

        $d1 = $d1 * 6.283185307179586;

        $d2 = (double) $f2;

        $d1 = $d1 / $d2;

        $d1 = staticinvoke <java.lang.Math: double sin(double)>($d1);

        $d0 = $d0 * $d1;

        $d0 = $d0 * 0.5;

        $d0 = $d0 + 1.0;

        $f0 = (float) $d0;

        return $f0;
    }

    private float out(float, float, float)
    {
        byte $b0;
        com.exchange.interpolator.ElasticInterpolator r0;
        int $i1;
        float $f0, $f1, $f2, f3;
        double $d0, $d1, $d2;

        r0 := @this: com.exchange.interpolator.ElasticInterpolator;

        $f0 := @parameter0: float;

        $f1 := @parameter1: float;

        $f2 := @parameter2: float;

        $b0 = $f0 cmpl 0.0F;

        if $b0 != 0 goto label1;

        return 0.0F;

     label1:
        $b0 = $f0 cmpl 1.0F;

        $i1 = (int) $b0;

        if $i1 < 0 goto label2;

        return 1.0F;

     label2:
        $b0 = $f2 cmpl 0.0F;

        if $b0 != 0 goto label3;

        $f2 = 0.3F;

     label3:
        $b0 = $f1 cmpl 0.0F;

        if $b0 == 0 goto label4;

        $b0 = $f1 cmpg 1.0F;

        $i1 = (int) $b0;

        if $i1 >= 0 goto label6;

     label4:
        $f1 = 1.0F;

        f3 = $f2 / 4.0F;

     label5:
        $d0 = (double) $f1;

        $f1 = -10.0F * $f0;

        $d1 = (double) $f1;

        $d1 = staticinvoke <java.lang.Math: double pow(double,double)>(2.0, $d1);

        $d0 = $d0 * $d1;

        $f0 = $f0 - f3;

        $d1 = (double) $f0;

        $d1 = $d1 * 6.283185307179586;

        $d2 = (double) $f2;

        $d1 = $d1 / $d2;

        $d1 = staticinvoke <java.lang.Math: double sin(double)>($d1);

        $d0 = $d0 * $d1;

        $d0 = $d0 + 1.0;

        $f0 = (float) $d0;

        return $f0;

     label6:
        $d0 = (double) $f2;

        $d0 = $d0 / 6.283185307179586;

        f3 = 1.0F / $f1;

        $d1 = (double) f3;

        $d1 = staticinvoke <java.lang.Math: double asin(double)>($d1);

        $d0 = $d0 * $d1;

        f3 = (float) $d0;

        goto label5;
    }

    public float getInterpolation(float)
    {
        com.exchange.interpolator.EasingType$Type $r1, $r2;
        com.exchange.interpolator.ElasticInterpolator r0;
        float $f0, $f1, $f2;

        r0 := @this: com.exchange.interpolator.ElasticInterpolator;

        $f0 := @parameter0: float;

        $r1 = r0.<com.exchange.interpolator.ElasticInterpolator: com.exchange.interpolator.EasingType$Type type>;

        $r2 = <com.exchange.interpolator.EasingType$Type: com.exchange.interpolator.EasingType$Type IN>;

        if $r1 != $r2 goto label1;

        $f1 = r0.<com.exchange.interpolator.ElasticInterpolator: float amplitude>;

        $f2 = r0.<com.exchange.interpolator.ElasticInterpolator: float period>;

        $f0 = specialinvoke r0.<com.exchange.interpolator.ElasticInterpolator: float in(float,float,float)>($f0, $f1, $f2);

        return $f0;

     label1:
        $r1 = r0.<com.exchange.interpolator.ElasticInterpolator: com.exchange.interpolator.EasingType$Type type>;

        $r2 = <com.exchange.interpolator.EasingType$Type: com.exchange.interpolator.EasingType$Type OUT>;

        if $r1 != $r2 goto label2;

        $f1 = r0.<com.exchange.interpolator.ElasticInterpolator: float amplitude>;

        $f2 = r0.<com.exchange.interpolator.ElasticInterpolator: float period>;

        $f0 = specialinvoke r0.<com.exchange.interpolator.ElasticInterpolator: float out(float,float,float)>($f0, $f1, $f2);

        return $f0;

     label2:
        $r1 = r0.<com.exchange.interpolator.ElasticInterpolator: com.exchange.interpolator.EasingType$Type type>;

        $r2 = <com.exchange.interpolator.EasingType$Type: com.exchange.interpolator.EasingType$Type INOUT>;

        if $r1 != $r2 goto label3;

        $f1 = r0.<com.exchange.interpolator.ElasticInterpolator: float amplitude>;

        $f2 = r0.<com.exchange.interpolator.ElasticInterpolator: float period>;

        $f0 = specialinvoke r0.<com.exchange.interpolator.ElasticInterpolator: float inout(float,float,float)>($f0, $f1, $f2);

        return $f0;

     label3:
        return 0.0F;
    }
}
