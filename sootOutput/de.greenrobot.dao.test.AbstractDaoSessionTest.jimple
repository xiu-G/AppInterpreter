public abstract class de.greenrobot.dao.test.AbstractDaoSessionTest extends de.greenrobot.dao.test.DbTest
{
    protected de.greenrobot.dao.AbstractDaoMaster daoMaster;
    private final java.lang.Class daoMasterClass;
    protected de.greenrobot.dao.AbstractDaoSession daoSession;

    public void <init>(java.lang.Class)
    {
        java.lang.Class $r1;
        de.greenrobot.dao.test.AbstractDaoSessionTest r0;

        r0 := @this: de.greenrobot.dao.test.AbstractDaoSessionTest;

        $r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<de.greenrobot.dao.test.AbstractDaoSessionTest: void <init>(java.lang.Class,boolean)>($r1, 1);

        return;
    }

    public void <init>(java.lang.Class, boolean)
    {
        java.lang.Class $r1;
        de.greenrobot.dao.test.AbstractDaoSessionTest r0;
        boolean $z0;

        r0 := @this: de.greenrobot.dao.test.AbstractDaoSessionTest;

        $r1 := @parameter0: java.lang.Class;

        $z0 := @parameter1: boolean;

        specialinvoke r0.<de.greenrobot.dao.test.DbTest: void <init>(boolean)>($z0);

        r0.<de.greenrobot.dao.test.AbstractDaoSessionTest: java.lang.Class daoMasterClass> = $r1;

        return;
    }

    protected void setUp()
    {
        java.lang.Object[] $r4;
        de.greenrobot.dao.AbstractDaoSession $r11;
        java.lang.Class[] $r2;
        de.greenrobot.dao.test.AbstractDaoSessionTest r0;
        de.greenrobot.dao.AbstractDaoMaster $r7;
        java.lang.RuntimeException $r13;
        java.lang.reflect.Constructor $r3;
        java.lang.Exception $r12;
        android.database.sqlite.SQLiteDatabase $r5;
        java.lang.Boolean $r10;
        java.lang.Class $r1, $r8;
        java.lang.Object $r6;
        java.lang.reflect.Method $r9;

        r0 := @this: de.greenrobot.dao.test.AbstractDaoSessionTest;

        specialinvoke r0.<de.greenrobot.dao.test.DbTest: void setUp()>();

     label01:
        $r1 = r0.<de.greenrobot.dao.test.AbstractDaoSessionTest: java.lang.Class daoMasterClass>;

     label02:
        $r2 = newarray (java.lang.Class)[1];

     label03:
        $r2[0] = class "Landroid/database/sqlite/SQLiteDatabase;";

        $r3 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r2);

     label04:
        $r4 = newarray (java.lang.Object)[1];

     label05:
        $r5 = r0.<de.greenrobot.dao.test.AbstractDaoSessionTest: android.database.sqlite.SQLiteDatabase db>;

        $r4[0] = $r5;

        $r6 = virtualinvoke $r3.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r4);

        $r7 = (de.greenrobot.dao.AbstractDaoMaster) $r6;

        r0.<de.greenrobot.dao.test.AbstractDaoSessionTest: de.greenrobot.dao.AbstractDaoMaster daoMaster> = $r7;

        $r1 = r0.<de.greenrobot.dao.test.AbstractDaoSessionTest: java.lang.Class daoMasterClass>;

     label06:
        $r2 = newarray (java.lang.Class)[2];

     label07:
        $r2[0] = class "Landroid/database/sqlite/SQLiteDatabase;";

     label08:
        $r8 = <java.lang.Boolean: java.lang.Class TYPE>;

     label09:
        $r2[1] = $r8;

        $r9 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("createAllTables", $r2);

     label10:
        $r4 = newarray (java.lang.Object)[2];

     label11:
        $r5 = r0.<de.greenrobot.dao.test.AbstractDaoSessionTest: android.database.sqlite.SQLiteDatabase db>;

        $r4[0] = $r5;

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r4[1] = $r10;

        virtualinvoke $r9.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r4);

     label12:
        $r7 = r0.<de.greenrobot.dao.test.AbstractDaoSessionTest: de.greenrobot.dao.AbstractDaoMaster daoMaster>;

        $r11 = virtualinvoke $r7.<de.greenrobot.dao.AbstractDaoMaster: de.greenrobot.dao.AbstractDaoSession newSession()>();

        r0.<de.greenrobot.dao.test.AbstractDaoSessionTest: de.greenrobot.dao.AbstractDaoSession daoSession> = $r11;

        return;

     label13:
        $r12 := @caughtexception;

        $r13 = new java.lang.RuntimeException;

        specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Could not prepare DAO session test", $r12);

        throw $r13;

        catch java.lang.Exception from label01 to label02 with label13;
        catch java.lang.Exception from label03 to label04 with label13;
        catch java.lang.Exception from label05 to label06 with label13;
        catch java.lang.Exception from label07 to label08 with label13;
        catch java.lang.Exception from label09 to label10 with label13;
        catch java.lang.Exception from label11 to label12 with label13;
    }
}
