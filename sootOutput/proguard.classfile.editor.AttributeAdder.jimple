public class proguard.classfile.editor.AttributeAdder extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.attribute.visitor.AttributeVisitor
{
    private static final proguard.classfile.attribute.Attribute[] EMPTY_ATTRIBUTES;
    private static final byte[] EMPTY_BYTES;
    private static final proguard.classfile.attribute.ExceptionInfo[] EMPTY_EXCEPTIONS;
    private static final int[] EMPTY_INTS;
    private final proguard.classfile.editor.AttributesEditor attributesEditor;
    private final proguard.classfile.editor.ConstantAdder constantAdder;
    private final boolean replaceAttributes;
    private final proguard.classfile.ProgramClass targetClass;
    private final proguard.classfile.attribute.CodeAttribute targetCodeAttribute;
    private final proguard.classfile.ProgramMember targetMember;

    static void <clinit>()
    {
        byte[] $r0;
        proguard.classfile.attribute.ExceptionInfo[] $r3;
        int[] $r1;
        proguard.classfile.attribute.Attribute[] $r2;

        $r0 = newarray (byte)[0];

        <proguard.classfile.editor.AttributeAdder: byte[] EMPTY_BYTES> = $r0;

        $r1 = newarray (int)[0];

        <proguard.classfile.editor.AttributeAdder: int[] EMPTY_INTS> = $r1;

        $r2 = newarray (proguard.classfile.attribute.Attribute)[0];

        <proguard.classfile.editor.AttributeAdder: proguard.classfile.attribute.Attribute[] EMPTY_ATTRIBUTES> = $r2;

        $r3 = newarray (proguard.classfile.attribute.ExceptionInfo)[0];

        <proguard.classfile.editor.AttributeAdder: proguard.classfile.attribute.ExceptionInfo[] EMPTY_EXCEPTIONS> = $r3;

        return;
    }

    public void <init>(proguard.classfile.ProgramClass, proguard.classfile.ProgramMember, proguard.classfile.attribute.CodeAttribute, boolean)
    {
        proguard.classfile.ProgramMember $r2;
        proguard.classfile.editor.ConstantAdder $r4;
        proguard.classfile.editor.AttributesEditor $r5;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.editor.AttributeAdder r0;
        proguard.classfile.ProgramClass $r1;
        boolean $z0;

        r0 := @this: proguard.classfile.editor.AttributeAdder;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.ProgramMember;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $z0 := @parameter3: boolean;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        r0.<proguard.classfile.editor.AttributeAdder: proguard.classfile.ProgramClass targetClass> = $r1;

        r0.<proguard.classfile.editor.AttributeAdder: proguard.classfile.ProgramMember targetMember> = $r2;

        r0.<proguard.classfile.editor.AttributeAdder: proguard.classfile.attribute.CodeAttribute targetCodeAttribute> = $r3;

        r0.<proguard.classfile.editor.AttributeAdder: boolean replaceAttributes> = $z0;

        $r4 = new proguard.classfile.editor.ConstantAdder;

        specialinvoke $r4.<proguard.classfile.editor.ConstantAdder: void <init>(proguard.classfile.ProgramClass)>($r1);

        r0.<proguard.classfile.editor.AttributeAdder: proguard.classfile.editor.ConstantAdder constantAdder> = $r4;

        $r5 = new proguard.classfile.editor.AttributesEditor;

        specialinvoke $r5.<proguard.classfile.editor.AttributesEditor: void <init>(proguard.classfile.ProgramClass,proguard.classfile.ProgramMember,proguard.classfile.attribute.CodeAttribute,boolean)>($r1, $r2, $r3, $z0);

        r0.<proguard.classfile.editor.AttributeAdder: proguard.classfile.editor.AttributesEditor attributesEditor> = $r5;

        return;
    }

    public void <init>(proguard.classfile.ProgramClass, proguard.classfile.ProgramMember, boolean)
    {
        proguard.classfile.ProgramMember $r2;
        proguard.classfile.editor.AttributeAdder r0;
        proguard.classfile.ProgramClass $r1;
        boolean $z0;

        r0 := @this: proguard.classfile.editor.AttributeAdder;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.ProgramMember;

        $z0 := @parameter2: boolean;

        specialinvoke r0.<proguard.classfile.editor.AttributeAdder: void <init>(proguard.classfile.ProgramClass,proguard.classfile.ProgramMember,proguard.classfile.attribute.CodeAttribute,boolean)>($r1, $r2, null, $z0);

        return;
    }

    public void <init>(proguard.classfile.ProgramClass, boolean)
    {
        proguard.classfile.editor.AttributeAdder r0;
        proguard.classfile.ProgramClass $r1;
        boolean $z0;

        r0 := @this: proguard.classfile.editor.AttributeAdder;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $z0 := @parameter1: boolean;

        specialinvoke r0.<proguard.classfile.editor.AttributeAdder: void <init>(proguard.classfile.ProgramClass,proguard.classfile.ProgramMember,proguard.classfile.attribute.CodeAttribute,boolean)>($r1, null, null, 1);

        return;
    }

    public void visitAnnotationDefaultAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.'annotation'.AnnotationDefaultAttribute)
    {
        proguard.classfile.editor.ConstantAdder $r5;
        proguard.classfile.editor.AttributesEditor $r8;
        proguard.classfile.attribute.'annotation'.AnnotationDefaultAttribute $r3, $r4;
        proguard.classfile.ProgramClass $r7;
        proguard.classfile.editor.ElementValueAdder $r6;
        proguard.classfile.Clazz $r1;
        int $i0;
        proguard.classfile.Method $r2;
        proguard.classfile.editor.AttributeAdder r0;

        r0 := @this: proguard.classfile.editor.AttributeAdder;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.AnnotationDefaultAttribute;

        $r4 = new proguard.classfile.attribute.'annotation'.AnnotationDefaultAttribute;

        $r5 = r0.<proguard.classfile.editor.AttributeAdder: proguard.classfile.editor.ConstantAdder constantAdder>;

        $i0 = $r3.<proguard.classfile.attribute.'annotation'.AnnotationDefaultAttribute: int u2attributeNameIndex>;

        $i0 = virtualinvoke $r5.<proguard.classfile.editor.ConstantAdder: int addConstant(proguard.classfile.Clazz,int)>($r1, $i0);

        specialinvoke $r4.<proguard.classfile.attribute.'annotation'.AnnotationDefaultAttribute: void <init>(int,proguard.classfile.attribute.'annotation'.ElementValue)>($i0, null);

        $r6 = new proguard.classfile.editor.ElementValueAdder;

        $r7 = r0.<proguard.classfile.editor.AttributeAdder: proguard.classfile.ProgramClass targetClass>;

        specialinvoke $r6.<proguard.classfile.editor.ElementValueAdder: void <init>(proguard.classfile.ProgramClass,proguard.classfile.attribute.'annotation'.AnnotationDefaultAttribute,boolean)>($r7, $r4, 0);

        virtualinvoke $r3.<proguard.classfile.attribute.'annotation'.AnnotationDefaultAttribute: void defaultValueAccept(proguard.classfile.Clazz,proguard.classfile.attribute.'annotation'.visitor.ElementValueVisitor)>($r1, $r6);

        $r8 = r0.<proguard.classfile.editor.AttributeAdder: proguard.classfile.editor.AttributesEditor attributesEditor>;

        virtualinvoke $r8.<proguard.classfile.editor.AttributesEditor: void addAttribute(proguard.classfile.attribute.Attribute)>($r4);

        return;
    }

    public void visitCodeAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute)
    {
        byte[] $r6;
        proguard.classfile.editor.AttributesEditor $r15;
        proguard.classfile.attribute.Attribute[] $r8;
        proguard.classfile.editor.CodeAttributeComposer $r9;
        proguard.classfile.ProgramClass $r11;
        proguard.classfile.Clazz $r1;
        int $i0, $i1, $i2, $i3;
        proguard.classfile.editor.AttributeAdder r0, $r13;
        boolean $z0;
        proguard.classfile.editor.ConstantAdder $r5;
        proguard.classfile.ProgramMember $r14;
        proguard.classfile.attribute.ExceptionInfo[] $r7;
        proguard.classfile.attribute.CodeAttribute $r3, $r4;
        proguard.classfile.editor.InstructionAdder $r10;
        proguard.classfile.editor.ExceptionInfoAdder $r12;
        proguard.classfile.Method $r2;

        r0 := @this: proguard.classfile.editor.AttributeAdder;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 = new proguard.classfile.attribute.CodeAttribute;

        $r5 = r0.<proguard.classfile.editor.AttributeAdder: proguard.classfile.editor.ConstantAdder constantAdder>;

        $i0 = $r3.<proguard.classfile.attribute.CodeAttribute: int u2attributeNameIndex>;

        $i0 = virtualinvoke $r5.<proguard.classfile.editor.ConstantAdder: int addConstant(proguard.classfile.Clazz,int)>($r1, $i0);

        $i1 = $r3.<proguard.classfile.attribute.CodeAttribute: int u2maxStack>;

        $i2 = $r3.<proguard.classfile.attribute.CodeAttribute: int u2maxLocals>;

        $r6 = <proguard.classfile.editor.AttributeAdder: byte[] EMPTY_BYTES>;

        $i3 = $r3.<proguard.classfile.attribute.CodeAttribute: int u2exceptionTableLength>;

        if $i3 <= 0 goto label3;

        $i3 = $r3.<proguard.classfile.attribute.CodeAttribute: int u2exceptionTableLength>;

        $r7 = newarray (proguard.classfile.attribute.ExceptionInfo)[$i3];

     label1:
        $i3 = $r3.<proguard.classfile.attribute.CodeAttribute: int u2attributesCount>;

        if $i3 <= 0 goto label4;

        $i3 = $r3.<proguard.classfile.attribute.CodeAttribute: int u2attributesCount>;

        $r8 = newarray (proguard.classfile.attribute.Attribute)[$i3];

     label2:
        specialinvoke $r4.<proguard.classfile.attribute.CodeAttribute: void <init>(int,int,int,int,byte[],int,proguard.classfile.attribute.ExceptionInfo[],int,proguard.classfile.attribute.Attribute[])>($i0, $i1, $i2, 0, $r6, 0, $r7, 0, $r8);

        $r9 = new proguard.classfile.editor.CodeAttributeComposer;

        specialinvoke $r9.<proguard.classfile.editor.CodeAttributeComposer: void <init>()>();

        $i0 = $r3.<proguard.classfile.attribute.CodeAttribute: int u4codeLength>;

        $i0 = $i0 + 32;

        virtualinvoke $r9.<proguard.classfile.editor.CodeAttributeComposer: void beginCodeFragment(int)>($i0);

        $r10 = new proguard.classfile.editor.InstructionAdder;

        $r11 = r0.<proguard.classfile.editor.AttributeAdder: proguard.classfile.ProgramClass targetClass>;

        specialinvoke $r10.<proguard.classfile.editor.InstructionAdder: void <init>(proguard.classfile.ProgramClass,proguard.classfile.editor.CodeAttributeComposer)>($r11, $r9);

        virtualinvoke $r3.<proguard.classfile.attribute.CodeAttribute: void instructionsAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.instruction.visitor.InstructionVisitor)>($r1, $r2, $r10);

        $i0 = $r3.<proguard.classfile.attribute.CodeAttribute: int u4codeLength>;

        virtualinvoke $r9.<proguard.classfile.editor.CodeAttributeComposer: void appendLabel(int)>($i0);

        $r12 = new proguard.classfile.editor.ExceptionInfoAdder;

        $r11 = r0.<proguard.classfile.editor.AttributeAdder: proguard.classfile.ProgramClass targetClass>;

        specialinvoke $r12.<proguard.classfile.editor.ExceptionInfoAdder: void <init>(proguard.classfile.ProgramClass,proguard.classfile.editor.CodeAttributeComposer)>($r11, $r9);

        virtualinvoke $r3.<proguard.classfile.attribute.CodeAttribute: void exceptionsAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.visitor.ExceptionInfoVisitor)>($r1, $r2, $r12);

        virtualinvoke $r9.<proguard.classfile.editor.CodeAttributeComposer: void endCodeFragment()>();

        $r13 = new proguard.classfile.editor.AttributeAdder;

        $r11 = r0.<proguard.classfile.editor.AttributeAdder: proguard.classfile.ProgramClass targetClass>;

        $r14 = r0.<proguard.classfile.editor.AttributeAdder: proguard.classfile.ProgramMember targetMember>;

        $z0 = r0.<proguard.classfile.editor.AttributeAdder: boolean replaceAttributes>;

        specialinvoke $r13.<proguard.classfile.editor.AttributeAdder: void <init>(proguard.classfile.ProgramClass,proguard.classfile.ProgramMember,proguard.classfile.attribute.CodeAttribute,boolean)>($r11, $r14, $r4, $z0);

        virtualinvoke $r3.<proguard.classfile.attribute.CodeAttribute: void attributesAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.visitor.AttributeVisitor)>($r1, $r2, $r13);

        $r11 = r0.<proguard.classfile.editor.AttributeAdder: proguard.classfile.ProgramClass targetClass>;

        $r14 = r0.<proguard.classfile.editor.AttributeAdder: proguard.classfile.ProgramMember targetMember>;

        $r2 = (proguard.classfile.Method) $r14;

        virtualinvoke $r9.<proguard.classfile.editor.CodeAttributeComposer: void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute)>($r11, $r2, $r4);

        $r15 = r0.<proguard.classfile.editor.AttributeAdder: proguard.classfile.editor.AttributesEditor attributesEditor>;

        virtualinvoke $r15.<proguard.classfile.editor.AttributesEditor: void addAttribute(proguard.classfile.attribute.Attribute)>($r4);

        return;

     label3:
        $r7 = <proguard.classfile.editor.AttributeAdder: proguard.classfile.attribute.ExceptionInfo[] EMPTY_EXCEPTIONS>;

        goto label1;

     label4:
        $r8 = <proguard.classfile.editor.AttributeAdder: proguard.classfile.attribute.Attribute[] EMPTY_ATTRIBUTES>;

        goto label2;
    }

    public void visitConstantValueAttribute(proguard.classfile.Clazz, proguard.classfile.Field, proguard.classfile.attribute.ConstantValueAttribute)
    {
        proguard.classfile.editor.ConstantAdder $r5;
        proguard.classfile.editor.AttributesEditor $r6;
        proguard.classfile.Field $r2;
        proguard.classfile.Clazz $r1;
        int $i0, $i1;
        proguard.classfile.attribute.ConstantValueAttribute $r3, $r4;
        proguard.classfile.editor.AttributeAdder r0;

        r0 := @this: proguard.classfile.editor.AttributeAdder;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Field;

        $r3 := @parameter2: proguard.classfile.attribute.ConstantValueAttribute;

        $r4 = new proguard.classfile.attribute.ConstantValueAttribute;

        $r5 = r0.<proguard.classfile.editor.AttributeAdder: proguard.classfile.editor.ConstantAdder constantAdder>;

        $i1 = $r3.<proguard.classfile.attribute.ConstantValueAttribute: int u2attributeNameIndex>;

        $i1 = virtualinvoke $r5.<proguard.classfile.editor.ConstantAdder: int addConstant(proguard.classfile.Clazz,int)>($r1, $i1);

        $r5 = r0.<proguard.classfile.editor.AttributeAdder: proguard.classfile.editor.ConstantAdder constantAdder>;

        $i0 = $r3.<proguard.classfile.attribute.ConstantValueAttribute: int u2constantValueIndex>;

        $i0 = virtualinvoke $r5.<proguard.classfile.editor.ConstantAdder: int addConstant(proguard.classfile.Clazz,int)>($r1, $i0);

        specialinvoke $r4.<proguard.classfile.attribute.ConstantValueAttribute: void <init>(int,int)>($i1, $i0);

        $r6 = r0.<proguard.classfile.editor.AttributeAdder: proguard.classfile.editor.AttributesEditor attributesEditor>;

        virtualinvoke $r6.<proguard.classfile.editor.AttributesEditor: void addAttribute(proguard.classfile.attribute.Attribute)>($r4);

        return;
    }

    public void visitDeprecatedAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.DeprecatedAttribute)
    {
        proguard.classfile.editor.ConstantAdder $r4;
        proguard.classfile.editor.AttributesEditor $r5;
        proguard.classfile.Clazz $r1;
        int $i0;
        proguard.classfile.attribute.DeprecatedAttribute $r2, $r3;
        proguard.classfile.editor.AttributeAdder r0;

        r0 := @this: proguard.classfile.editor.AttributeAdder;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.DeprecatedAttribute;

        $r3 = new proguard.classfile.attribute.DeprecatedAttribute;

        $r4 = r0.<proguard.classfile.editor.AttributeAdder: proguard.classfile.editor.ConstantAdder constantAdder>;

        $i0 = $r2.<proguard.classfile.attribute.DeprecatedAttribute: int u2attributeNameIndex>;

        $i0 = virtualinvoke $r4.<proguard.classfile.editor.ConstantAdder: int addConstant(proguard.classfile.Clazz,int)>($r1, $i0);

        specialinvoke $r3.<proguard.classfile.attribute.DeprecatedAttribute: void <init>(int)>($i0);

        $r5 = r0.<proguard.classfile.editor.AttributeAdder: proguard.classfile.editor.AttributesEditor attributesEditor>;

        virtualinvoke $r5.<proguard.classfile.editor.AttributesEditor: void addAttribute(proguard.classfile.attribute.Attribute)>($r3);

        return;
    }

    public void visitEnclosingMethodAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.EnclosingMethodAttribute)
    {
        proguard.classfile.attribute.EnclosingMethodAttribute $r2, $r3;
        proguard.classfile.editor.ConstantAdder $r4;
        proguard.classfile.editor.AttributesEditor $r6;
        proguard.classfile.Clazz $r1;
        int $i0, $i1, $i2;
        proguard.classfile.Method $r5;
        proguard.classfile.editor.AttributeAdder r0;

        r0 := @this: proguard.classfile.editor.AttributeAdder;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.EnclosingMethodAttribute;

        $r3 = new proguard.classfile.attribute.EnclosingMethodAttribute;

        $r4 = r0.<proguard.classfile.editor.AttributeAdder: proguard.classfile.editor.ConstantAdder constantAdder>;

        $i1 = $r2.<proguard.classfile.attribute.EnclosingMethodAttribute: int u2attributeNameIndex>;

        $i1 = virtualinvoke $r4.<proguard.classfile.editor.ConstantAdder: int addConstant(proguard.classfile.Clazz,int)>($r1, $i1);

        $r4 = r0.<proguard.classfile.editor.AttributeAdder: proguard.classfile.editor.ConstantAdder constantAdder>;

        $i2 = $r2.<proguard.classfile.attribute.EnclosingMethodAttribute: int u2classIndex>;

        $i2 = virtualinvoke $r4.<proguard.classfile.editor.ConstantAdder: int addConstant(proguard.classfile.Clazz,int)>($r1, $i2);

        $i0 = $r2.<proguard.classfile.attribute.EnclosingMethodAttribute: int u2nameAndTypeIndex>;

        if $i0 != 0 goto label2;

        $i0 = 0;

     label1:
        specialinvoke $r3.<proguard.classfile.attribute.EnclosingMethodAttribute: void <init>(int,int,int)>($i1, $i2, $i0);

        $r1 = $r2.<proguard.classfile.attribute.EnclosingMethodAttribute: proguard.classfile.Clazz referencedClass>;

        $r3.<proguard.classfile.attribute.EnclosingMethodAttribute: proguard.classfile.Clazz referencedClass> = $r1;

        $r5 = $r2.<proguard.classfile.attribute.EnclosingMethodAttribute: proguard.classfile.Method referencedMethod>;

        $r3.<proguard.classfile.attribute.EnclosingMethodAttribute: proguard.classfile.Method referencedMethod> = $r5;

        $r6 = r0.<proguard.classfile.editor.AttributeAdder: proguard.classfile.editor.AttributesEditor attributesEditor>;

        virtualinvoke $r6.<proguard.classfile.editor.AttributesEditor: void addAttribute(proguard.classfile.attribute.Attribute)>($r3);

        return;

     label2:
        $r4 = r0.<proguard.classfile.editor.AttributeAdder: proguard.classfile.editor.ConstantAdder constantAdder>;

        $i0 = $r2.<proguard.classfile.attribute.EnclosingMethodAttribute: int u2nameAndTypeIndex>;

        $i0 = virtualinvoke $r4.<proguard.classfile.editor.ConstantAdder: int addConstant(proguard.classfile.Clazz,int)>($r1, $i0);

        goto label1;
    }

    public void visitExceptionsAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.ExceptionsAttribute)
    {
        proguard.classfile.editor.ConstantAdder $r5;
        proguard.classfile.editor.AttributesEditor $r10;
        proguard.classfile.editor.ExceptionAdder $r8;
        proguard.classfile.ProgramClass $r7, $r9;
        proguard.classfile.Clazz $r4;
        int[] $r6;
        proguard.classfile.attribute.ExceptionsAttribute $r2, $r3;
        int $i0, $i1;
        proguard.classfile.Method $r1;
        proguard.classfile.editor.AttributeAdder r0;

        r0 := @this: proguard.classfile.editor.AttributeAdder;

        $r4 := @parameter0: proguard.classfile.Clazz;

        $r1 := @parameter1: proguard.classfile.Method;

        $r2 := @parameter2: proguard.classfile.attribute.ExceptionsAttribute;

        $r3 = new proguard.classfile.attribute.ExceptionsAttribute;

        $r5 = r0.<proguard.classfile.editor.AttributeAdder: proguard.classfile.editor.ConstantAdder constantAdder>;

        $i0 = $r2.<proguard.classfile.attribute.ExceptionsAttribute: int u2attributeNameIndex>;

        $i0 = virtualinvoke $r5.<proguard.classfile.editor.ConstantAdder: int addConstant(proguard.classfile.Clazz,int)>($r4, $i0);

        $i1 = $r2.<proguard.classfile.attribute.ExceptionsAttribute: int u2exceptionIndexTableLength>;

        if $i1 <= 0 goto label2;

        $i1 = $r2.<proguard.classfile.attribute.ExceptionsAttribute: int u2exceptionIndexTableLength>;

        $r6 = newarray (int)[$i1];

     label1:
        specialinvoke $r3.<proguard.classfile.attribute.ExceptionsAttribute: void <init>(int,int,int[])>($i0, 0, $r6);

        $r7 = (proguard.classfile.ProgramClass) $r4;

        $r8 = new proguard.classfile.editor.ExceptionAdder;

        $r9 = r0.<proguard.classfile.editor.AttributeAdder: proguard.classfile.ProgramClass targetClass>;

        specialinvoke $r8.<proguard.classfile.editor.ExceptionAdder: void <init>(proguard.classfile.ProgramClass,proguard.classfile.attribute.ExceptionsAttribute)>($r9, $r3);

        virtualinvoke $r2.<proguard.classfile.attribute.ExceptionsAttribute: void exceptionEntriesAccept(proguard.classfile.ProgramClass,proguard.classfile.constant.visitor.ConstantVisitor)>($r7, $r8);

        $r10 = r0.<proguard.classfile.editor.AttributeAdder: proguard.classfile.editor.AttributesEditor attributesEditor>;

        virtualinvoke $r10.<proguard.classfile.editor.AttributesEditor: void addAttribute(proguard.classfile.attribute.Attribute)>($r3);

        return;

     label2:
        $r6 = <proguard.classfile.editor.AttributeAdder: int[] EMPTY_INTS>;

        goto label1;
    }

    public void visitInnerClassesAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.InnerClassesAttribute)
    {
        proguard.classfile.attribute.InnerClassesAttribute $r2;
        proguard.classfile.editor.AttributeAdder r0;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.classfile.editor.AttributeAdder;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.InnerClassesAttribute;

        return;
    }

    public void visitLineNumberTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LineNumberTableAttribute)
    {
        proguard.classfile.editor.ConstantAdder $r6;
        proguard.classfile.editor.AttributesEditor $r9;
        proguard.classfile.attribute.LineNumberTableAttribute $r4, $r5;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.editor.LineNumberInfoAdder $r8;
        int $i0, $i1;
        proguard.classfile.attribute.LineNumberInfo[] $r7;
        proguard.classfile.Method $r2;
        proguard.classfile.editor.AttributeAdder r0;

        r0 := @this: proguard.classfile.editor.AttributeAdder;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.LineNumberTableAttribute;

        $r5 = new proguard.classfile.attribute.LineNumberTableAttribute;

        $r6 = r0.<proguard.classfile.editor.AttributeAdder: proguard.classfile.editor.ConstantAdder constantAdder>;

        $i0 = $r4.<proguard.classfile.attribute.LineNumberTableAttribute: int u2attributeNameIndex>;

        $i0 = virtualinvoke $r6.<proguard.classfile.editor.ConstantAdder: int addConstant(proguard.classfile.Clazz,int)>($r1, $i0);

        $i1 = $r4.<proguard.classfile.attribute.LineNumberTableAttribute: int u2lineNumberTableLength>;

        $r7 = newarray (proguard.classfile.attribute.LineNumberInfo)[$i1];

        specialinvoke $r5.<proguard.classfile.attribute.LineNumberTableAttribute: void <init>(int,int,proguard.classfile.attribute.LineNumberInfo[])>($i0, 0, $r7);

        $r8 = new proguard.classfile.editor.LineNumberInfoAdder;

        specialinvoke $r8.<proguard.classfile.editor.LineNumberInfoAdder: void <init>(proguard.classfile.attribute.LineNumberTableAttribute)>($r5);

        virtualinvoke $r4.<proguard.classfile.attribute.LineNumberTableAttribute: void lineNumbersAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.visitor.LineNumberInfoVisitor)>($r1, $r2, $r3, $r8);

        $r9 = r0.<proguard.classfile.editor.AttributeAdder: proguard.classfile.editor.AttributesEditor attributesEditor>;

        virtualinvoke $r9.<proguard.classfile.editor.AttributesEditor: void addAttribute(proguard.classfile.attribute.Attribute)>($r5);

        return;
    }

    public void visitLocalVariableTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LocalVariableTableAttribute)
    {
        proguard.classfile.editor.ConstantAdder $r6;
        proguard.classfile.editor.AttributesEditor $r10;
        proguard.classfile.ProgramClass $r9;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0, $i1;
        proguard.classfile.Method $r2;
        proguard.classfile.editor.LocalVariableInfoAdder $r8;
        proguard.classfile.editor.AttributeAdder r0;
        proguard.classfile.attribute.LocalVariableTableAttribute $r4, $r5;
        proguard.classfile.attribute.LocalVariableInfo[] $r7;

        r0 := @this: proguard.classfile.editor.AttributeAdder;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.LocalVariableTableAttribute;

        $r5 = new proguard.classfile.attribute.LocalVariableTableAttribute;

        $r6 = r0.<proguard.classfile.editor.AttributeAdder: proguard.classfile.editor.ConstantAdder constantAdder>;

        $i0 = $r4.<proguard.classfile.attribute.LocalVariableTableAttribute: int u2attributeNameIndex>;

        $i0 = virtualinvoke $r6.<proguard.classfile.editor.ConstantAdder: int addConstant(proguard.classfile.Clazz,int)>($r1, $i0);

        $i1 = $r4.<proguard.classfile.attribute.LocalVariableTableAttribute: int u2localVariableTableLength>;

        $r7 = newarray (proguard.classfile.attribute.LocalVariableInfo)[$i1];

        specialinvoke $r5.<proguard.classfile.attribute.LocalVariableTableAttribute: void <init>(int,int,proguard.classfile.attribute.LocalVariableInfo[])>($i0, 0, $r7);

        $r8 = new proguard.classfile.editor.LocalVariableInfoAdder;

        $r9 = r0.<proguard.classfile.editor.AttributeAdder: proguard.classfile.ProgramClass targetClass>;

        specialinvoke $r8.<proguard.classfile.editor.LocalVariableInfoAdder: void <init>(proguard.classfile.ProgramClass,proguard.classfile.attribute.LocalVariableTableAttribute)>($r9, $r5);

        virtualinvoke $r4.<proguard.classfile.attribute.LocalVariableTableAttribute: void localVariablesAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.visitor.LocalVariableInfoVisitor)>($r1, $r2, $r3, $r8);

        $r10 = r0.<proguard.classfile.editor.AttributeAdder: proguard.classfile.editor.AttributesEditor attributesEditor>;

        virtualinvoke $r10.<proguard.classfile.editor.AttributesEditor: void addAttribute(proguard.classfile.attribute.Attribute)>($r5);

        return;
    }

    public void visitLocalVariableTypeTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.LocalVariableTypeTableAttribute)
    {
        proguard.classfile.editor.ConstantAdder $r6;
        proguard.classfile.editor.AttributesEditor $r10;
        proguard.classfile.editor.LocalVariableTypeInfoAdder $r8;
        proguard.classfile.ProgramClass $r9;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0, $i1;
        proguard.classfile.Method $r2;
        proguard.classfile.editor.AttributeAdder r0;
        proguard.classfile.attribute.LocalVariableTypeTableAttribute $r4, $r5;
        proguard.classfile.attribute.LocalVariableTypeInfo[] $r7;

        r0 := @this: proguard.classfile.editor.AttributeAdder;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.LocalVariableTypeTableAttribute;

        $r5 = new proguard.classfile.attribute.LocalVariableTypeTableAttribute;

        $r6 = r0.<proguard.classfile.editor.AttributeAdder: proguard.classfile.editor.ConstantAdder constantAdder>;

        $i0 = $r4.<proguard.classfile.attribute.LocalVariableTypeTableAttribute: int u2attributeNameIndex>;

        $i0 = virtualinvoke $r6.<proguard.classfile.editor.ConstantAdder: int addConstant(proguard.classfile.Clazz,int)>($r1, $i0);

        $i1 = $r4.<proguard.classfile.attribute.LocalVariableTypeTableAttribute: int u2localVariableTypeTableLength>;

        $r7 = newarray (proguard.classfile.attribute.LocalVariableTypeInfo)[$i1];

        specialinvoke $r5.<proguard.classfile.attribute.LocalVariableTypeTableAttribute: void <init>(int,int,proguard.classfile.attribute.LocalVariableTypeInfo[])>($i0, 0, $r7);

        $r8 = new proguard.classfile.editor.LocalVariableTypeInfoAdder;

        $r9 = r0.<proguard.classfile.editor.AttributeAdder: proguard.classfile.ProgramClass targetClass>;

        specialinvoke $r8.<proguard.classfile.editor.LocalVariableTypeInfoAdder: void <init>(proguard.classfile.ProgramClass,proguard.classfile.attribute.LocalVariableTypeTableAttribute)>($r9, $r5);

        virtualinvoke $r4.<proguard.classfile.attribute.LocalVariableTypeTableAttribute: void localVariablesAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.visitor.LocalVariableTypeInfoVisitor)>($r1, $r2, $r3, $r8);

        $r10 = r0.<proguard.classfile.editor.AttributeAdder: proguard.classfile.editor.AttributesEditor attributesEditor>;

        virtualinvoke $r10.<proguard.classfile.editor.AttributesEditor: void addAttribute(proguard.classfile.attribute.Attribute)>($r5);

        return;
    }

    public void visitRuntimeInvisibleAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.'annotation'.RuntimeInvisibleAnnotationsAttribute)
    {
        proguard.classfile.editor.ConstantAdder $r4;
        proguard.classfile.editor.AttributesEditor $r8;
        proguard.classfile.attribute.'annotation'.RuntimeInvisibleAnnotationsAttribute $r2, $r3;
        proguard.classfile.ProgramClass $r7;
        proguard.classfile.attribute.'annotation'.Annotation[] $r5;
        proguard.classfile.editor.AnnotationAdder $r6;
        proguard.classfile.Clazz $r1;
        int $i0, $i1;
        proguard.classfile.editor.AttributeAdder r0;

        r0 := @this: proguard.classfile.editor.AttributeAdder;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.RuntimeInvisibleAnnotationsAttribute;

        $r3 = new proguard.classfile.attribute.'annotation'.RuntimeInvisibleAnnotationsAttribute;

        $r4 = r0.<proguard.classfile.editor.AttributeAdder: proguard.classfile.editor.ConstantAdder constantAdder>;

        $i0 = $r2.<proguard.classfile.attribute.'annotation'.RuntimeInvisibleAnnotationsAttribute: int u2attributeNameIndex>;

        $i0 = virtualinvoke $r4.<proguard.classfile.editor.ConstantAdder: int addConstant(proguard.classfile.Clazz,int)>($r1, $i0);

        $i1 = $r2.<proguard.classfile.attribute.'annotation'.RuntimeInvisibleAnnotationsAttribute: int u2annotationsCount>;

        $r5 = newarray (proguard.classfile.attribute.'annotation'.Annotation)[$i1];

        specialinvoke $r3.<proguard.classfile.attribute.'annotation'.RuntimeInvisibleAnnotationsAttribute: void <init>(int,int,proguard.classfile.attribute.'annotation'.Annotation[])>($i0, 0, $r5);

        $r6 = new proguard.classfile.editor.AnnotationAdder;

        $r7 = r0.<proguard.classfile.editor.AttributeAdder: proguard.classfile.ProgramClass targetClass>;

        specialinvoke $r6.<proguard.classfile.editor.AnnotationAdder: void <init>(proguard.classfile.ProgramClass,proguard.classfile.attribute.'annotation'.AnnotationsAttribute)>($r7, $r3);

        virtualinvoke $r2.<proguard.classfile.attribute.'annotation'.RuntimeInvisibleAnnotationsAttribute: void annotationsAccept(proguard.classfile.Clazz,proguard.classfile.attribute.'annotation'.visitor.AnnotationVisitor)>($r1, $r6);

        $r8 = r0.<proguard.classfile.editor.AttributeAdder: proguard.classfile.editor.AttributesEditor attributesEditor>;

        virtualinvoke $r8.<proguard.classfile.editor.AttributesEditor: void addAttribute(proguard.classfile.attribute.Attribute)>($r3);

        return;
    }

    public void visitRuntimeInvisibleParameterAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.'annotation'.RuntimeInvisibleParameterAnnotationsAttribute)
    {
        proguard.classfile.editor.ConstantAdder $r5;
        proguard.classfile.editor.AttributesEditor $r10;
        proguard.classfile.attribute.'annotation'.Annotation[][] $r7;
        proguard.classfile.attribute.'annotation'.RuntimeInvisibleParameterAnnotationsAttribute $r3, $r4;
        proguard.classfile.ProgramClass $r9;
        proguard.classfile.editor.AnnotationAdder $r8;
        proguard.classfile.Clazz $r1;
        int[] $r6;
        int $i0, $i1;
        proguard.classfile.Method $r2;
        proguard.classfile.editor.AttributeAdder r0;

        r0 := @this: proguard.classfile.editor.AttributeAdder;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.RuntimeInvisibleParameterAnnotationsAttribute;

        $r4 = new proguard.classfile.attribute.'annotation'.RuntimeInvisibleParameterAnnotationsAttribute;

        $r5 = r0.<proguard.classfile.editor.AttributeAdder: proguard.classfile.editor.ConstantAdder constantAdder>;

        $i0 = $r3.<proguard.classfile.attribute.'annotation'.RuntimeInvisibleParameterAnnotationsAttribute: int u2attributeNameIndex>;

        $i0 = virtualinvoke $r5.<proguard.classfile.editor.ConstantAdder: int addConstant(proguard.classfile.Clazz,int)>($r1, $i0);

        $i1 = $r3.<proguard.classfile.attribute.'annotation'.RuntimeInvisibleParameterAnnotationsAttribute: int u2parametersCount>;

        $r6 = newarray (int)[$i1];

        $i1 = $r3.<proguard.classfile.attribute.'annotation'.RuntimeInvisibleParameterAnnotationsAttribute: int u2parametersCount>;

        $r7 = newarray (proguard.classfile.attribute.'annotation'.Annotation[])[$i1];

        specialinvoke $r4.<proguard.classfile.attribute.'annotation'.RuntimeInvisibleParameterAnnotationsAttribute: void <init>(int,int,int[],proguard.classfile.attribute.'annotation'.Annotation[][])>($i0, 0, $r6, $r7);

        $r8 = new proguard.classfile.editor.AnnotationAdder;

        $r9 = r0.<proguard.classfile.editor.AttributeAdder: proguard.classfile.ProgramClass targetClass>;

        specialinvoke $r8.<proguard.classfile.editor.AnnotationAdder: void <init>(proguard.classfile.ProgramClass,proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute)>($r9, $r4);

        virtualinvoke $r3.<proguard.classfile.attribute.'annotation'.RuntimeInvisibleParameterAnnotationsAttribute: void annotationsAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.'annotation'.visitor.AnnotationVisitor)>($r1, $r2, $r8);

        $r10 = r0.<proguard.classfile.editor.AttributeAdder: proguard.classfile.editor.AttributesEditor attributesEditor>;

        virtualinvoke $r10.<proguard.classfile.editor.AttributesEditor: void addAttribute(proguard.classfile.attribute.Attribute)>($r4);

        return;
    }

    public void visitRuntimeVisibleAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.'annotation'.RuntimeVisibleAnnotationsAttribute)
    {
        proguard.classfile.editor.ConstantAdder $r4;
        proguard.classfile.editor.AttributesEditor $r8;
        proguard.classfile.ProgramClass $r7;
        proguard.classfile.attribute.'annotation'.Annotation[] $r5;
        proguard.classfile.editor.AnnotationAdder $r6;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.'annotation'.RuntimeVisibleAnnotationsAttribute $r2, $r3;
        int $i0, $i1;
        proguard.classfile.editor.AttributeAdder r0;

        r0 := @this: proguard.classfile.editor.AttributeAdder;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.'annotation'.RuntimeVisibleAnnotationsAttribute;

        $r3 = new proguard.classfile.attribute.'annotation'.RuntimeVisibleAnnotationsAttribute;

        $r4 = r0.<proguard.classfile.editor.AttributeAdder: proguard.classfile.editor.ConstantAdder constantAdder>;

        $i0 = $r2.<proguard.classfile.attribute.'annotation'.RuntimeVisibleAnnotationsAttribute: int u2attributeNameIndex>;

        $i0 = virtualinvoke $r4.<proguard.classfile.editor.ConstantAdder: int addConstant(proguard.classfile.Clazz,int)>($r1, $i0);

        $i1 = $r2.<proguard.classfile.attribute.'annotation'.RuntimeVisibleAnnotationsAttribute: int u2annotationsCount>;

        $r5 = newarray (proguard.classfile.attribute.'annotation'.Annotation)[$i1];

        specialinvoke $r3.<proguard.classfile.attribute.'annotation'.RuntimeVisibleAnnotationsAttribute: void <init>(int,int,proguard.classfile.attribute.'annotation'.Annotation[])>($i0, 0, $r5);

        $r6 = new proguard.classfile.editor.AnnotationAdder;

        $r7 = r0.<proguard.classfile.editor.AttributeAdder: proguard.classfile.ProgramClass targetClass>;

        specialinvoke $r6.<proguard.classfile.editor.AnnotationAdder: void <init>(proguard.classfile.ProgramClass,proguard.classfile.attribute.'annotation'.AnnotationsAttribute)>($r7, $r3);

        virtualinvoke $r2.<proguard.classfile.attribute.'annotation'.RuntimeVisibleAnnotationsAttribute: void annotationsAccept(proguard.classfile.Clazz,proguard.classfile.attribute.'annotation'.visitor.AnnotationVisitor)>($r1, $r6);

        $r8 = r0.<proguard.classfile.editor.AttributeAdder: proguard.classfile.editor.AttributesEditor attributesEditor>;

        virtualinvoke $r8.<proguard.classfile.editor.AttributesEditor: void addAttribute(proguard.classfile.attribute.Attribute)>($r3);

        return;
    }

    public void visitRuntimeVisibleParameterAnnotationsAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.'annotation'.RuntimeVisibleParameterAnnotationsAttribute)
    {
        proguard.classfile.editor.ConstantAdder $r5;
        proguard.classfile.editor.AttributesEditor $r10;
        proguard.classfile.attribute.'annotation'.Annotation[][] $r7;
        proguard.classfile.attribute.'annotation'.RuntimeVisibleParameterAnnotationsAttribute $r3, $r4;
        proguard.classfile.ProgramClass $r9;
        proguard.classfile.editor.AnnotationAdder $r8;
        proguard.classfile.Clazz $r1;
        int[] $r6;
        int $i0, $i1;
        proguard.classfile.Method $r2;
        proguard.classfile.editor.AttributeAdder r0;

        r0 := @this: proguard.classfile.editor.AttributeAdder;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.'annotation'.RuntimeVisibleParameterAnnotationsAttribute;

        $r4 = new proguard.classfile.attribute.'annotation'.RuntimeVisibleParameterAnnotationsAttribute;

        $r5 = r0.<proguard.classfile.editor.AttributeAdder: proguard.classfile.editor.ConstantAdder constantAdder>;

        $i0 = $r3.<proguard.classfile.attribute.'annotation'.RuntimeVisibleParameterAnnotationsAttribute: int u2attributeNameIndex>;

        $i0 = virtualinvoke $r5.<proguard.classfile.editor.ConstantAdder: int addConstant(proguard.classfile.Clazz,int)>($r1, $i0);

        $i1 = $r3.<proguard.classfile.attribute.'annotation'.RuntimeVisibleParameterAnnotationsAttribute: int u2parametersCount>;

        $r6 = newarray (int)[$i1];

        $i1 = $r3.<proguard.classfile.attribute.'annotation'.RuntimeVisibleParameterAnnotationsAttribute: int u2parametersCount>;

        $r7 = newarray (proguard.classfile.attribute.'annotation'.Annotation[])[$i1];

        specialinvoke $r4.<proguard.classfile.attribute.'annotation'.RuntimeVisibleParameterAnnotationsAttribute: void <init>(int,int,int[],proguard.classfile.attribute.'annotation'.Annotation[][])>($i0, 0, $r6, $r7);

        $r8 = new proguard.classfile.editor.AnnotationAdder;

        $r9 = r0.<proguard.classfile.editor.AttributeAdder: proguard.classfile.ProgramClass targetClass>;

        specialinvoke $r8.<proguard.classfile.editor.AnnotationAdder: void <init>(proguard.classfile.ProgramClass,proguard.classfile.attribute.'annotation'.ParameterAnnotationsAttribute)>($r9, $r4);

        virtualinvoke $r3.<proguard.classfile.attribute.'annotation'.RuntimeVisibleParameterAnnotationsAttribute: void annotationsAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.'annotation'.visitor.AnnotationVisitor)>($r1, $r2, $r8);

        $r10 = r0.<proguard.classfile.editor.AttributeAdder: proguard.classfile.editor.AttributesEditor attributesEditor>;

        virtualinvoke $r10.<proguard.classfile.editor.AttributesEditor: void addAttribute(proguard.classfile.attribute.Attribute)>($r4);

        return;
    }

    public void visitSignatureAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.SignatureAttribute)
    {
        proguard.classfile.editor.ConstantAdder $r4;
        proguard.classfile.editor.AttributesEditor $r6;
        proguard.classfile.Clazz[] $r5;
        proguard.classfile.Clazz $r1;
        int $i0, $i1;
        proguard.classfile.attribute.SignatureAttribute $r2, $r3;
        proguard.classfile.editor.AttributeAdder r0;

        r0 := @this: proguard.classfile.editor.AttributeAdder;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.SignatureAttribute;

        $r3 = new proguard.classfile.attribute.SignatureAttribute;

        $r4 = r0.<proguard.classfile.editor.AttributeAdder: proguard.classfile.editor.ConstantAdder constantAdder>;

        $i1 = $r2.<proguard.classfile.attribute.SignatureAttribute: int u2attributeNameIndex>;

        $i1 = virtualinvoke $r4.<proguard.classfile.editor.ConstantAdder: int addConstant(proguard.classfile.Clazz,int)>($r1, $i1);

        $r4 = r0.<proguard.classfile.editor.AttributeAdder: proguard.classfile.editor.ConstantAdder constantAdder>;

        $i0 = $r2.<proguard.classfile.attribute.SignatureAttribute: int u2signatureIndex>;

        $i0 = virtualinvoke $r4.<proguard.classfile.editor.ConstantAdder: int addConstant(proguard.classfile.Clazz,int)>($r1, $i0);

        specialinvoke $r3.<proguard.classfile.attribute.SignatureAttribute: void <init>(int,int)>($i1, $i0);

        $r5 = $r2.<proguard.classfile.attribute.SignatureAttribute: proguard.classfile.Clazz[] referencedClasses>;

        $r3.<proguard.classfile.attribute.SignatureAttribute: proguard.classfile.Clazz[] referencedClasses> = $r5;

        $r6 = r0.<proguard.classfile.editor.AttributeAdder: proguard.classfile.editor.AttributesEditor attributesEditor>;

        virtualinvoke $r6.<proguard.classfile.editor.AttributesEditor: void addAttribute(proguard.classfile.attribute.Attribute)>($r3);

        return;
    }

    public void visitSourceDirAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.SourceDirAttribute)
    {
        proguard.classfile.editor.ConstantAdder $r4;
        proguard.classfile.editor.AttributesEditor $r5;
        proguard.classfile.attribute.SourceDirAttribute $r2, $r3;
        proguard.classfile.Clazz $r1;
        int $i0, $i1;
        proguard.classfile.editor.AttributeAdder r0;

        r0 := @this: proguard.classfile.editor.AttributeAdder;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.SourceDirAttribute;

        $r3 = new proguard.classfile.attribute.SourceDirAttribute;

        $r4 = r0.<proguard.classfile.editor.AttributeAdder: proguard.classfile.editor.ConstantAdder constantAdder>;

        $i1 = $r2.<proguard.classfile.attribute.SourceDirAttribute: int u2attributeNameIndex>;

        $i1 = virtualinvoke $r4.<proguard.classfile.editor.ConstantAdder: int addConstant(proguard.classfile.Clazz,int)>($r1, $i1);

        $r4 = r0.<proguard.classfile.editor.AttributeAdder: proguard.classfile.editor.ConstantAdder constantAdder>;

        $i0 = $r2.<proguard.classfile.attribute.SourceDirAttribute: int u2sourceDirIndex>;

        $i0 = virtualinvoke $r4.<proguard.classfile.editor.ConstantAdder: int addConstant(proguard.classfile.Clazz,int)>($r1, $i0);

        specialinvoke $r3.<proguard.classfile.attribute.SourceDirAttribute: void <init>(int,int)>($i1, $i0);

        $r5 = r0.<proguard.classfile.editor.AttributeAdder: proguard.classfile.editor.AttributesEditor attributesEditor>;

        virtualinvoke $r5.<proguard.classfile.editor.AttributesEditor: void addAttribute(proguard.classfile.attribute.Attribute)>($r3);

        return;
    }

    public void visitSourceFileAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.SourceFileAttribute)
    {
        proguard.classfile.editor.ConstantAdder $r4;
        proguard.classfile.editor.AttributesEditor $r5;
        proguard.classfile.attribute.SourceFileAttribute $r2, $r3;
        proguard.classfile.Clazz $r1;
        int $i0, $i1;
        proguard.classfile.editor.AttributeAdder r0;

        r0 := @this: proguard.classfile.editor.AttributeAdder;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.SourceFileAttribute;

        $r3 = new proguard.classfile.attribute.SourceFileAttribute;

        $r4 = r0.<proguard.classfile.editor.AttributeAdder: proguard.classfile.editor.ConstantAdder constantAdder>;

        $i1 = $r2.<proguard.classfile.attribute.SourceFileAttribute: int u2attributeNameIndex>;

        $i1 = virtualinvoke $r4.<proguard.classfile.editor.ConstantAdder: int addConstant(proguard.classfile.Clazz,int)>($r1, $i1);

        $r4 = r0.<proguard.classfile.editor.AttributeAdder: proguard.classfile.editor.ConstantAdder constantAdder>;

        $i0 = $r2.<proguard.classfile.attribute.SourceFileAttribute: int u2sourceFileIndex>;

        $i0 = virtualinvoke $r4.<proguard.classfile.editor.ConstantAdder: int addConstant(proguard.classfile.Clazz,int)>($r1, $i0);

        specialinvoke $r3.<proguard.classfile.attribute.SourceFileAttribute: void <init>(int,int)>($i1, $i0);

        $r5 = r0.<proguard.classfile.editor.AttributeAdder: proguard.classfile.editor.AttributesEditor attributesEditor>;

        virtualinvoke $r5.<proguard.classfile.editor.AttributesEditor: void addAttribute(proguard.classfile.attribute.Attribute)>($r3);

        return;
    }

    public void visitStackMapAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.preverification.StackMapAttribute)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.attribute.preverification.StackMapAttribute $r4;
        proguard.classfile.Method $r2;
        proguard.classfile.editor.AttributeAdder r0;

        r0 := @this: proguard.classfile.editor.AttributeAdder;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.preverification.StackMapAttribute;

        return;
    }

    public void visitStackMapTableAttribute(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.preverification.StackMapTableAttribute)
    {
        proguard.classfile.attribute.preverification.StackMapTableAttribute $r4;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.Method $r2;
        proguard.classfile.editor.AttributeAdder r0;

        r0 := @this: proguard.classfile.editor.AttributeAdder;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.preverification.StackMapTableAttribute;

        return;
    }

    public void visitSyntheticAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.SyntheticAttribute)
    {
        proguard.classfile.editor.ConstantAdder $r4;
        proguard.classfile.editor.AttributesEditor $r5;
        proguard.classfile.Clazz $r1;
        int $i0;
        proguard.classfile.attribute.SyntheticAttribute $r2, $r3;
        proguard.classfile.editor.AttributeAdder r0;

        r0 := @this: proguard.classfile.editor.AttributeAdder;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.SyntheticAttribute;

        $r3 = new proguard.classfile.attribute.SyntheticAttribute;

        $r4 = r0.<proguard.classfile.editor.AttributeAdder: proguard.classfile.editor.ConstantAdder constantAdder>;

        $i0 = $r2.<proguard.classfile.attribute.SyntheticAttribute: int u2attributeNameIndex>;

        $i0 = virtualinvoke $r4.<proguard.classfile.editor.ConstantAdder: int addConstant(proguard.classfile.Clazz,int)>($r1, $i0);

        specialinvoke $r3.<proguard.classfile.attribute.SyntheticAttribute: void <init>(int)>($i0);

        $r5 = r0.<proguard.classfile.editor.AttributeAdder: proguard.classfile.editor.AttributesEditor attributesEditor>;

        virtualinvoke $r5.<proguard.classfile.editor.AttributesEditor: void addAttribute(proguard.classfile.attribute.Attribute)>($r3);

        return;
    }

    public void visitUnknownAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.UnknownAttribute)
    {
        byte[] $r4;
        proguard.classfile.editor.ConstantAdder $r5;
        proguard.classfile.editor.AttributesEditor $r6;
        proguard.classfile.Clazz $r1;
        int $i0, $i1;
        proguard.classfile.attribute.UnknownAttribute $r2, $r3;
        proguard.classfile.editor.AttributeAdder r0;

        r0 := @this: proguard.classfile.editor.AttributeAdder;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.UnknownAttribute;

        $r3 = new proguard.classfile.attribute.UnknownAttribute;

        $r5 = r0.<proguard.classfile.editor.AttributeAdder: proguard.classfile.editor.ConstantAdder constantAdder>;

        $i0 = $r2.<proguard.classfile.attribute.UnknownAttribute: int u2attributeNameIndex>;

        $i0 = virtualinvoke $r5.<proguard.classfile.editor.ConstantAdder: int addConstant(proguard.classfile.Clazz,int)>($r1, $i0);

        $i1 = $r2.<proguard.classfile.attribute.UnknownAttribute: int u4attributeLength>;

        $r4 = $r2.<proguard.classfile.attribute.UnknownAttribute: byte[] info>;

        specialinvoke $r3.<proguard.classfile.attribute.UnknownAttribute: void <init>(int,int,byte[])>($i0, $i1, $r4);

        $r6 = r0.<proguard.classfile.editor.AttributeAdder: proguard.classfile.editor.AttributesEditor attributesEditor>;

        virtualinvoke $r6.<proguard.classfile.editor.AttributesEditor: void addAttribute(proguard.classfile.attribute.Attribute)>($r3);

        return;
    }
}
