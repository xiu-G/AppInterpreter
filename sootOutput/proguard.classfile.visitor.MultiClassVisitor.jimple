public class proguard.classfile.visitor.MultiClassVisitor extends java.lang.Object implements proguard.classfile.visitor.ClassVisitor
{
    private static final int ARRAY_SIZE_INCREMENT;
    private int classVisitorCount;
    private proguard.classfile.visitor.ClassVisitor[] classVisitors;

    public void <init>()
    {
        proguard.classfile.visitor.MultiClassVisitor r0;

        r0 := @this: proguard.classfile.visitor.MultiClassVisitor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(proguard.classfile.visitor.ClassVisitor[])
    {
        int $i0;
        proguard.classfile.visitor.ClassVisitor[] $r1;
        proguard.classfile.visitor.MultiClassVisitor r0;

        r0 := @this: proguard.classfile.visitor.MultiClassVisitor;

        $r1 := @parameter0: proguard.classfile.visitor.ClassVisitor[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<proguard.classfile.visitor.MultiClassVisitor: proguard.classfile.visitor.ClassVisitor[] classVisitors> = $r1;

        $i0 = lengthof $r1;

        r0.<proguard.classfile.visitor.MultiClassVisitor: int classVisitorCount> = $i0;

        return;
    }

    private void ensureArraySize()
    {
        proguard.classfile.visitor.MultiClassVisitor r0;
        int $i0, $i1;
        proguard.classfile.visitor.ClassVisitor[] $r1, $r2;

        r0 := @this: proguard.classfile.visitor.MultiClassVisitor;

        $r1 = r0.<proguard.classfile.visitor.MultiClassVisitor: proguard.classfile.visitor.ClassVisitor[] classVisitors>;

        if $r1 != null goto label1;

        $r1 = newarray (proguard.classfile.visitor.ClassVisitor)[5];

        r0.<proguard.classfile.visitor.MultiClassVisitor: proguard.classfile.visitor.ClassVisitor[] classVisitors> = $r1;

        return;

     label1:
        $r1 = r0.<proguard.classfile.visitor.MultiClassVisitor: proguard.classfile.visitor.ClassVisitor[] classVisitors>;

        $i0 = lengthof $r1;

        $i1 = r0.<proguard.classfile.visitor.MultiClassVisitor: int classVisitorCount>;

        if $i0 != $i1 goto label2;

        $i0 = r0.<proguard.classfile.visitor.MultiClassVisitor: int classVisitorCount>;

        $i0 = $i0 + 5;

        $r1 = newarray (proguard.classfile.visitor.ClassVisitor)[$i0];

        $r2 = r0.<proguard.classfile.visitor.MultiClassVisitor: proguard.classfile.visitor.ClassVisitor[] classVisitors>;

        $i0 = r0.<proguard.classfile.visitor.MultiClassVisitor: int classVisitorCount>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r1, 0, $i0);

        r0.<proguard.classfile.visitor.MultiClassVisitor: proguard.classfile.visitor.ClassVisitor[] classVisitors> = $r1;

     label2:
        return;
    }

    public void addClassVisitor(proguard.classfile.visitor.ClassVisitor)
    {
        proguard.classfile.visitor.MultiClassVisitor r0;
        proguard.classfile.visitor.ClassVisitor $r1;
        int $i0, $i1;
        proguard.classfile.visitor.ClassVisitor[] $r2;

        r0 := @this: proguard.classfile.visitor.MultiClassVisitor;

        $r1 := @parameter0: proguard.classfile.visitor.ClassVisitor;

        specialinvoke r0.<proguard.classfile.visitor.MultiClassVisitor: void ensureArraySize()>();

        $r2 = r0.<proguard.classfile.visitor.MultiClassVisitor: proguard.classfile.visitor.ClassVisitor[] classVisitors>;

        $i0 = r0.<proguard.classfile.visitor.MultiClassVisitor: int classVisitorCount>;

        $i1 = $i0 + 1;

        r0.<proguard.classfile.visitor.MultiClassVisitor: int classVisitorCount> = $i1;

        $r2[$i0] = $r1;

        return;
    }

    public void visitLibraryClass(proguard.classfile.LibraryClass)
    {
        proguard.classfile.LibraryClass $r1;
        proguard.classfile.visitor.MultiClassVisitor r0;
        proguard.classfile.visitor.ClassVisitor $r3;
        int $i0, $i1;
        proguard.classfile.visitor.ClassVisitor[] $r2;

        r0 := @this: proguard.classfile.visitor.MultiClassVisitor;

        $r1 := @parameter0: proguard.classfile.LibraryClass;

        $i0 = 0;

     label1:
        $i1 = r0.<proguard.classfile.visitor.MultiClassVisitor: int classVisitorCount>;

        if $i0 >= $i1 goto label2;

        $r2 = r0.<proguard.classfile.visitor.MultiClassVisitor: proguard.classfile.visitor.ClassVisitor[] classVisitors>;

        $r3 = $r2[$i0];

        interfaceinvoke $r3.<proguard.classfile.visitor.ClassVisitor: void visitLibraryClass(proguard.classfile.LibraryClass)>($r1);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void visitProgramClass(proguard.classfile.ProgramClass)
    {
        proguard.classfile.visitor.MultiClassVisitor r0;
        proguard.classfile.visitor.ClassVisitor $r3;
        int $i0, $i1;
        proguard.classfile.visitor.ClassVisitor[] $r2;
        proguard.classfile.ProgramClass $r1;

        r0 := @this: proguard.classfile.visitor.MultiClassVisitor;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $i0 = 0;

     label1:
        $i1 = r0.<proguard.classfile.visitor.MultiClassVisitor: int classVisitorCount>;

        if $i0 >= $i1 goto label2;

        $r2 = r0.<proguard.classfile.visitor.MultiClassVisitor: proguard.classfile.visitor.ClassVisitor[] classVisitors>;

        $r3 = $r2[$i0];

        interfaceinvoke $r3.<proguard.classfile.visitor.ClassVisitor: void visitProgramClass(proguard.classfile.ProgramClass)>($r1);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    public static void <clinit>()
    {
        <proguard.classfile.visitor.MultiClassVisitor: int ARRAY_SIZE_INCREMENT> = 5;

        return;
    }
}
