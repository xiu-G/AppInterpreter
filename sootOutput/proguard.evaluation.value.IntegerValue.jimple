public abstract class proguard.evaluation.value.IntegerValue extends proguard.evaluation.value.Category1Value
{

    public void <init>()
    {
        proguard.evaluation.value.IntegerValue r0;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        specialinvoke r0.<proguard.evaluation.value.Category1Value: void <init>()>();

        return;
    }

    public abstract proguard.evaluation.value.IntegerValue add(proguard.evaluation.value.IntegerValue);

    public proguard.evaluation.value.IntegerValue add(proguard.evaluation.value.ParticularIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.ParticularIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularIntegerValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue add(proguard.evaluation.value.SpecificIntegerValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.IntegerValue add(proguard.evaluation.value.SpecificIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.SpecificIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificIntegerValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue add(proguard.evaluation.value.IntegerValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.IntegerValue add(proguard.evaluation.value.UnknownIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.UnknownIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.UnknownIntegerValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue add(proguard.evaluation.value.IntegerValue)>($r1);

        return r0;
    }

    public abstract proguard.evaluation.value.IntegerValue and(proguard.evaluation.value.IntegerValue);

    public proguard.evaluation.value.IntegerValue and(proguard.evaluation.value.ParticularIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.ParticularIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularIntegerValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue and(proguard.evaluation.value.SpecificIntegerValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.IntegerValue and(proguard.evaluation.value.SpecificIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.SpecificIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificIntegerValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue and(proguard.evaluation.value.IntegerValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.IntegerValue and(proguard.evaluation.value.UnknownIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.UnknownIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.UnknownIntegerValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue and(proguard.evaluation.value.IntegerValue)>($r1);

        return r0;
    }

    public final int computationalType()
    {
        proguard.evaluation.value.IntegerValue r0;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        return 1;
    }

    public abstract proguard.evaluation.value.IntegerValue convertToByte();

    public abstract proguard.evaluation.value.IntegerValue convertToCharacter();

    public abstract proguard.evaluation.value.DoubleValue convertToDouble();

    public abstract proguard.evaluation.value.FloatValue convertToFloat();

    public abstract proguard.evaluation.value.LongValue convertToLong();

    public abstract proguard.evaluation.value.IntegerValue convertToShort();

    public abstract proguard.evaluation.value.IntegerValue divide(proguard.evaluation.value.IntegerValue) throws java.lang.ArithmeticException;

    public proguard.evaluation.value.IntegerValue divide(proguard.evaluation.value.ParticularIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.ParticularIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularIntegerValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue divide(proguard.evaluation.value.SpecificIntegerValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.IntegerValue divide(proguard.evaluation.value.SpecificIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.SpecificIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificIntegerValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue divide(proguard.evaluation.value.IntegerValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.IntegerValue divide(proguard.evaluation.value.UnknownIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.UnknownIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.UnknownIntegerValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue divide(proguard.evaluation.value.IntegerValue)>($r1);

        return r0;
    }

    public abstract proguard.evaluation.value.IntegerValue divideOf(proguard.evaluation.value.IntegerValue) throws java.lang.ArithmeticException;

    public proguard.evaluation.value.IntegerValue divideOf(proguard.evaluation.value.ParticularIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.ParticularIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularIntegerValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue divideOf(proguard.evaluation.value.SpecificIntegerValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.IntegerValue divideOf(proguard.evaluation.value.SpecificIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.SpecificIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificIntegerValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue divideOf(proguard.evaluation.value.IntegerValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.IntegerValue divideOf(proguard.evaluation.value.UnknownIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.UnknownIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.UnknownIntegerValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue divideOf(proguard.evaluation.value.IntegerValue)>($r1);

        return r0;
    }

    public abstract int equal(proguard.evaluation.value.IntegerValue);

    public int equal(proguard.evaluation.value.ParticularIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        int $i0;
        proguard.evaluation.value.ParticularIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularIntegerValue;

        $i0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: int equal(proguard.evaluation.value.SpecificIntegerValue)>($r1);

        return $i0;
    }

    public int equal(proguard.evaluation.value.SpecificIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        int $i0;
        proguard.evaluation.value.SpecificIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificIntegerValue;

        $i0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: int equal(proguard.evaluation.value.IntegerValue)>($r1);

        return $i0;
    }

    public int equal(proguard.evaluation.value.UnknownIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        int $i0;
        proguard.evaluation.value.UnknownIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.UnknownIntegerValue;

        $i0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: int equal(proguard.evaluation.value.IntegerValue)>($r1);

        return $i0;
    }

    public abstract proguard.evaluation.value.IntegerValue generalize(proguard.evaluation.value.IntegerValue);

    public proguard.evaluation.value.IntegerValue generalize(proguard.evaluation.value.ParticularIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.ParticularIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularIntegerValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue generalize(proguard.evaluation.value.SpecificIntegerValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.IntegerValue generalize(proguard.evaluation.value.SpecificIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.SpecificIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificIntegerValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue generalize(proguard.evaluation.value.IntegerValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.IntegerValue generalize(proguard.evaluation.value.UnknownIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.UnknownIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.UnknownIntegerValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue generalize(proguard.evaluation.value.IntegerValue)>($r1);

        return r0;
    }

    public final proguard.evaluation.value.Value generalize(proguard.evaluation.value.Value)
    {
        proguard.evaluation.value.IntegerValue r0, $r2;
        proguard.evaluation.value.Value $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.Value;

        $r2 = virtualinvoke $r1.<proguard.evaluation.value.Value: proguard.evaluation.value.IntegerValue integerValue()>();

        r0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue generalize(proguard.evaluation.value.IntegerValue)>($r2);

        return r0;
    }

    public final int greaterThan(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0, $r1;
        int $i0;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        $i0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: int lessThanOrEqual(proguard.evaluation.value.IntegerValue)>($r1);

        $i0 = neg $i0;

        return $i0;
    }

    public final int greaterThan(proguard.evaluation.value.ParticularIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        int $i0;
        proguard.evaluation.value.ParticularIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularIntegerValue;

        $i0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: int lessThanOrEqual(proguard.evaluation.value.ParticularIntegerValue)>($r1);

        $i0 = neg $i0;

        return $i0;
    }

    public final int greaterThan(proguard.evaluation.value.SpecificIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        int $i0;
        proguard.evaluation.value.SpecificIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificIntegerValue;

        $i0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: int lessThanOrEqual(proguard.evaluation.value.SpecificIntegerValue)>($r1);

        $i0 = neg $i0;

        return $i0;
    }

    public final int greaterThan(proguard.evaluation.value.UnknownIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        int $i0;
        proguard.evaluation.value.UnknownIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.UnknownIntegerValue;

        $i0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: int lessThanOrEqual(proguard.evaluation.value.UnknownIntegerValue)>($r1);

        $i0 = neg $i0;

        return $i0;
    }

    public final int greaterThanOrEqual(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0, $r1;
        int $i0;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        $i0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: int lessThan(proguard.evaluation.value.IntegerValue)>($r1);

        $i0 = neg $i0;

        return $i0;
    }

    public final int greaterThanOrEqual(proguard.evaluation.value.ParticularIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        int $i0;
        proguard.evaluation.value.ParticularIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularIntegerValue;

        $i0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: int lessThan(proguard.evaluation.value.ParticularIntegerValue)>($r1);

        $i0 = neg $i0;

        return $i0;
    }

    public final int greaterThanOrEqual(proguard.evaluation.value.SpecificIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        int $i0;
        proguard.evaluation.value.SpecificIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificIntegerValue;

        $i0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: int lessThan(proguard.evaluation.value.SpecificIntegerValue)>($r1);

        $i0 = neg $i0;

        return $i0;
    }

    public final int greaterThanOrEqual(proguard.evaluation.value.UnknownIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        int $i0;
        proguard.evaluation.value.UnknownIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.UnknownIntegerValue;

        $i0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: int lessThan(proguard.evaluation.value.UnknownIntegerValue)>($r1);

        $i0 = neg $i0;

        return $i0;
    }

    public final proguard.evaluation.value.IntegerValue integerValue()
    {
        proguard.evaluation.value.IntegerValue r0;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        return r0;
    }

    public final java.lang.String internalType()
    {
        proguard.evaluation.value.IntegerValue r0;
        java.lang.String $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(73);

        return $r1;
    }

    public abstract int lessThan(proguard.evaluation.value.IntegerValue);

    public int lessThan(proguard.evaluation.value.ParticularIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        int $i0;
        proguard.evaluation.value.ParticularIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularIntegerValue;

        $i0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: int lessThan(proguard.evaluation.value.SpecificIntegerValue)>($r1);

        return $i0;
    }

    public int lessThan(proguard.evaluation.value.SpecificIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        int $i0;
        proguard.evaluation.value.SpecificIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificIntegerValue;

        $i0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: int lessThan(proguard.evaluation.value.IntegerValue)>($r1);

        return $i0;
    }

    public int lessThan(proguard.evaluation.value.UnknownIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        int $i0;
        proguard.evaluation.value.UnknownIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.UnknownIntegerValue;

        $i0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: int lessThan(proguard.evaluation.value.IntegerValue)>($r1);

        return $i0;
    }

    public abstract int lessThanOrEqual(proguard.evaluation.value.IntegerValue);

    public int lessThanOrEqual(proguard.evaluation.value.ParticularIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        int $i0;
        proguard.evaluation.value.ParticularIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularIntegerValue;

        $i0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: int lessThanOrEqual(proguard.evaluation.value.SpecificIntegerValue)>($r1);

        return $i0;
    }

    public int lessThanOrEqual(proguard.evaluation.value.SpecificIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        int $i0;
        proguard.evaluation.value.SpecificIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificIntegerValue;

        $i0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: int lessThanOrEqual(proguard.evaluation.value.IntegerValue)>($r1);

        return $i0;
    }

    public int lessThanOrEqual(proguard.evaluation.value.UnknownIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        int $i0;
        proguard.evaluation.value.UnknownIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.UnknownIntegerValue;

        $i0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: int lessThanOrEqual(proguard.evaluation.value.IntegerValue)>($r1);

        return $i0;
    }

    public abstract proguard.evaluation.value.IntegerValue multiply(proguard.evaluation.value.IntegerValue) throws java.lang.ArithmeticException;

    public proguard.evaluation.value.IntegerValue multiply(proguard.evaluation.value.ParticularIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.ParticularIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularIntegerValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue multiply(proguard.evaluation.value.SpecificIntegerValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.IntegerValue multiply(proguard.evaluation.value.SpecificIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.SpecificIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificIntegerValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue multiply(proguard.evaluation.value.IntegerValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.IntegerValue multiply(proguard.evaluation.value.UnknownIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.UnknownIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.UnknownIntegerValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue multiply(proguard.evaluation.value.IntegerValue)>($r1);

        return r0;
    }

    public abstract proguard.evaluation.value.IntegerValue negate();

    public final int notEqual(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0, $r1;
        int $i0;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        $i0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: int equal(proguard.evaluation.value.IntegerValue)>($r1);

        $i0 = neg $i0;

        return $i0;
    }

    public final int notEqual(proguard.evaluation.value.ParticularIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        int $i0;
        proguard.evaluation.value.ParticularIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularIntegerValue;

        $i0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: int equal(proguard.evaluation.value.ParticularIntegerValue)>($r1);

        $i0 = neg $i0;

        return $i0;
    }

    public final int notEqual(proguard.evaluation.value.SpecificIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        int $i0;
        proguard.evaluation.value.SpecificIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificIntegerValue;

        $i0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: int equal(proguard.evaluation.value.SpecificIntegerValue)>($r1);

        $i0 = neg $i0;

        return $i0;
    }

    public final int notEqual(proguard.evaluation.value.UnknownIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        int $i0;
        proguard.evaluation.value.UnknownIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.UnknownIntegerValue;

        $i0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: int equal(proguard.evaluation.value.UnknownIntegerValue)>($r1);

        $i0 = neg $i0;

        return $i0;
    }

    public abstract proguard.evaluation.value.IntegerValue or(proguard.evaluation.value.IntegerValue);

    public proguard.evaluation.value.IntegerValue or(proguard.evaluation.value.ParticularIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.ParticularIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularIntegerValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue or(proguard.evaluation.value.SpecificIntegerValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.IntegerValue or(proguard.evaluation.value.SpecificIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.SpecificIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificIntegerValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue or(proguard.evaluation.value.IntegerValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.IntegerValue or(proguard.evaluation.value.UnknownIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.UnknownIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.UnknownIntegerValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue or(proguard.evaluation.value.IntegerValue)>($r1);

        return r0;
    }

    public abstract proguard.evaluation.value.IntegerValue remainder(proguard.evaluation.value.IntegerValue) throws java.lang.ArithmeticException;

    public proguard.evaluation.value.IntegerValue remainder(proguard.evaluation.value.ParticularIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.ParticularIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularIntegerValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue remainder(proguard.evaluation.value.SpecificIntegerValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.IntegerValue remainder(proguard.evaluation.value.SpecificIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.SpecificIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificIntegerValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue remainder(proguard.evaluation.value.IntegerValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.IntegerValue remainder(proguard.evaluation.value.UnknownIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.UnknownIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.UnknownIntegerValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue remainder(proguard.evaluation.value.IntegerValue)>($r1);

        return r0;
    }

    public abstract proguard.evaluation.value.IntegerValue remainderOf(proguard.evaluation.value.IntegerValue) throws java.lang.ArithmeticException;

    public proguard.evaluation.value.IntegerValue remainderOf(proguard.evaluation.value.ParticularIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.ParticularIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularIntegerValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue remainderOf(proguard.evaluation.value.SpecificIntegerValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.IntegerValue remainderOf(proguard.evaluation.value.SpecificIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.SpecificIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificIntegerValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue remainderOf(proguard.evaluation.value.IntegerValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.IntegerValue remainderOf(proguard.evaluation.value.UnknownIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.UnknownIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.UnknownIntegerValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue remainderOf(proguard.evaluation.value.IntegerValue)>($r1);

        return r0;
    }

    public abstract proguard.evaluation.value.IntegerValue shiftLeft(proguard.evaluation.value.IntegerValue);

    public proguard.evaluation.value.IntegerValue shiftLeft(proguard.evaluation.value.ParticularIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.ParticularIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularIntegerValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue shiftLeft(proguard.evaluation.value.SpecificIntegerValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.IntegerValue shiftLeft(proguard.evaluation.value.SpecificIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.SpecificIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificIntegerValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue shiftLeft(proguard.evaluation.value.IntegerValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.IntegerValue shiftLeft(proguard.evaluation.value.UnknownIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.UnknownIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.UnknownIntegerValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue shiftLeft(proguard.evaluation.value.IntegerValue)>($r1);

        return r0;
    }

    public abstract proguard.evaluation.value.IntegerValue shiftLeftOf(proguard.evaluation.value.IntegerValue);

    public proguard.evaluation.value.IntegerValue shiftLeftOf(proguard.evaluation.value.ParticularIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.ParticularIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularIntegerValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue shiftLeftOf(proguard.evaluation.value.SpecificIntegerValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.IntegerValue shiftLeftOf(proguard.evaluation.value.SpecificIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.SpecificIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificIntegerValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue shiftLeftOf(proguard.evaluation.value.IntegerValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.IntegerValue shiftLeftOf(proguard.evaluation.value.UnknownIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.UnknownIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.UnknownIntegerValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue shiftLeftOf(proguard.evaluation.value.IntegerValue)>($r1);

        return r0;
    }

    public abstract proguard.evaluation.value.LongValue shiftLeftOf(proguard.evaluation.value.LongValue);

    public proguard.evaluation.value.LongValue shiftLeftOf(proguard.evaluation.value.ParticularLongValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.ParticularLongValue $r1;
        proguard.evaluation.value.LongValue $r2;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularLongValue;

        $r2 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.LongValue shiftLeftOf(proguard.evaluation.value.SpecificLongValue)>($r1);

        return $r2;
    }

    public proguard.evaluation.value.LongValue shiftLeftOf(proguard.evaluation.value.SpecificLongValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.SpecificLongValue $r1;
        proguard.evaluation.value.LongValue $r2;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificLongValue;

        $r2 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.LongValue shiftLeftOf(proguard.evaluation.value.LongValue)>($r1);

        return $r2;
    }

    public proguard.evaluation.value.LongValue shiftLeftOf(proguard.evaluation.value.UnknownLongValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.UnknownLongValue $r1;
        proguard.evaluation.value.LongValue $r2;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.UnknownLongValue;

        $r2 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.LongValue shiftLeftOf(proguard.evaluation.value.LongValue)>($r1);

        return $r2;
    }

    public abstract proguard.evaluation.value.IntegerValue shiftRight(proguard.evaluation.value.IntegerValue);

    public proguard.evaluation.value.IntegerValue shiftRight(proguard.evaluation.value.ParticularIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.ParticularIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularIntegerValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue shiftRight(proguard.evaluation.value.SpecificIntegerValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.IntegerValue shiftRight(proguard.evaluation.value.SpecificIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.SpecificIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificIntegerValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue shiftRight(proguard.evaluation.value.IntegerValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.IntegerValue shiftRight(proguard.evaluation.value.UnknownIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.UnknownIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.UnknownIntegerValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue shiftRight(proguard.evaluation.value.IntegerValue)>($r1);

        return r0;
    }

    public abstract proguard.evaluation.value.IntegerValue shiftRightOf(proguard.evaluation.value.IntegerValue);

    public proguard.evaluation.value.IntegerValue shiftRightOf(proguard.evaluation.value.ParticularIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.ParticularIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularIntegerValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue shiftRightOf(proguard.evaluation.value.SpecificIntegerValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.IntegerValue shiftRightOf(proguard.evaluation.value.SpecificIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.SpecificIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificIntegerValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue shiftRightOf(proguard.evaluation.value.IntegerValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.IntegerValue shiftRightOf(proguard.evaluation.value.UnknownIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.UnknownIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.UnknownIntegerValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue shiftRightOf(proguard.evaluation.value.IntegerValue)>($r1);

        return r0;
    }

    public abstract proguard.evaluation.value.LongValue shiftRightOf(proguard.evaluation.value.LongValue);

    public proguard.evaluation.value.LongValue shiftRightOf(proguard.evaluation.value.ParticularLongValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.ParticularLongValue $r1;
        proguard.evaluation.value.LongValue $r2;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularLongValue;

        $r2 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.LongValue shiftRightOf(proguard.evaluation.value.SpecificLongValue)>($r1);

        return $r2;
    }

    public proguard.evaluation.value.LongValue shiftRightOf(proguard.evaluation.value.SpecificLongValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.SpecificLongValue $r1;
        proguard.evaluation.value.LongValue $r2;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificLongValue;

        $r2 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.LongValue shiftRightOf(proguard.evaluation.value.LongValue)>($r1);

        return $r2;
    }

    public proguard.evaluation.value.LongValue shiftRightOf(proguard.evaluation.value.UnknownLongValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.UnknownLongValue $r1;
        proguard.evaluation.value.LongValue $r2;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.UnknownLongValue;

        $r2 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.LongValue shiftRightOf(proguard.evaluation.value.LongValue)>($r1);

        return $r2;
    }

    public abstract proguard.evaluation.value.IntegerValue subtract(proguard.evaluation.value.IntegerValue);

    public proguard.evaluation.value.IntegerValue subtract(proguard.evaluation.value.ParticularIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.ParticularIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularIntegerValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue subtract(proguard.evaluation.value.SpecificIntegerValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.IntegerValue subtract(proguard.evaluation.value.SpecificIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.SpecificIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificIntegerValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue subtract(proguard.evaluation.value.IntegerValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.IntegerValue subtract(proguard.evaluation.value.UnknownIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.UnknownIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.UnknownIntegerValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue subtract(proguard.evaluation.value.IntegerValue)>($r1);

        return r0;
    }

    public abstract proguard.evaluation.value.IntegerValue subtractFrom(proguard.evaluation.value.IntegerValue);

    public proguard.evaluation.value.IntegerValue subtractFrom(proguard.evaluation.value.ParticularIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.ParticularIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularIntegerValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue subtractFrom(proguard.evaluation.value.SpecificIntegerValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.IntegerValue subtractFrom(proguard.evaluation.value.SpecificIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.SpecificIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificIntegerValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue subtractFrom(proguard.evaluation.value.IntegerValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.IntegerValue subtractFrom(proguard.evaluation.value.UnknownIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.UnknownIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.UnknownIntegerValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue subtractFrom(proguard.evaluation.value.IntegerValue)>($r1);

        return r0;
    }

    public abstract proguard.evaluation.value.IntegerValue unsignedShiftRight(proguard.evaluation.value.IntegerValue);

    public proguard.evaluation.value.IntegerValue unsignedShiftRight(proguard.evaluation.value.ParticularIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.ParticularIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularIntegerValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue unsignedShiftRight(proguard.evaluation.value.SpecificIntegerValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.IntegerValue unsignedShiftRight(proguard.evaluation.value.SpecificIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.SpecificIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificIntegerValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue unsignedShiftRight(proguard.evaluation.value.IntegerValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.IntegerValue unsignedShiftRight(proguard.evaluation.value.UnknownIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.UnknownIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.UnknownIntegerValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue unsignedShiftRight(proguard.evaluation.value.IntegerValue)>($r1);

        return r0;
    }

    public abstract proguard.evaluation.value.IntegerValue unsignedShiftRightOf(proguard.evaluation.value.IntegerValue);

    public proguard.evaluation.value.IntegerValue unsignedShiftRightOf(proguard.evaluation.value.ParticularIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.ParticularIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularIntegerValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue unsignedShiftRightOf(proguard.evaluation.value.SpecificIntegerValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.IntegerValue unsignedShiftRightOf(proguard.evaluation.value.SpecificIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.SpecificIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificIntegerValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue unsignedShiftRightOf(proguard.evaluation.value.IntegerValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.IntegerValue unsignedShiftRightOf(proguard.evaluation.value.UnknownIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.UnknownIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.UnknownIntegerValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue unsignedShiftRightOf(proguard.evaluation.value.IntegerValue)>($r1);

        return r0;
    }

    public abstract proguard.evaluation.value.LongValue unsignedShiftRightOf(proguard.evaluation.value.LongValue);

    public proguard.evaluation.value.LongValue unsignedShiftRightOf(proguard.evaluation.value.ParticularLongValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.ParticularLongValue $r1;
        proguard.evaluation.value.LongValue $r2;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularLongValue;

        $r2 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.LongValue unsignedShiftRightOf(proguard.evaluation.value.SpecificLongValue)>($r1);

        return $r2;
    }

    public proguard.evaluation.value.LongValue unsignedShiftRightOf(proguard.evaluation.value.SpecificLongValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.SpecificLongValue $r1;
        proguard.evaluation.value.LongValue $r2;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificLongValue;

        $r2 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.LongValue unsignedShiftRightOf(proguard.evaluation.value.LongValue)>($r1);

        return $r2;
    }

    public proguard.evaluation.value.LongValue unsignedShiftRightOf(proguard.evaluation.value.UnknownLongValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.UnknownLongValue $r1;
        proguard.evaluation.value.LongValue $r2;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.UnknownLongValue;

        $r2 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.LongValue unsignedShiftRightOf(proguard.evaluation.value.LongValue)>($r1);

        return $r2;
    }

    public int value()
    {
        proguard.evaluation.value.IntegerValue r0;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        return 0;
    }

    public abstract proguard.evaluation.value.IntegerValue xor(proguard.evaluation.value.IntegerValue);

    public proguard.evaluation.value.IntegerValue xor(proguard.evaluation.value.ParticularIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.ParticularIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularIntegerValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue xor(proguard.evaluation.value.SpecificIntegerValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.IntegerValue xor(proguard.evaluation.value.SpecificIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.SpecificIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificIntegerValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue xor(proguard.evaluation.value.IntegerValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.IntegerValue xor(proguard.evaluation.value.UnknownIntegerValue)
    {
        proguard.evaluation.value.IntegerValue r0;
        proguard.evaluation.value.UnknownIntegerValue $r1;

        r0 := @this: proguard.evaluation.value.IntegerValue;

        $r1 := @parameter0: proguard.evaluation.value.UnknownIntegerValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue xor(proguard.evaluation.value.IntegerValue)>($r1);

        return r0;
    }
}
