public abstract class org.htmlparser.nodes.AbstractNode extends java.lang.Object implements java.io.Serializable, org.htmlparser.Node
{
    protected kr a;
    protected int b;
    protected int c;
    protected org.htmlparser.Node d;
    protected lg e;

    public void <init>(kr, int, int)
    {
        org.htmlparser.nodes.AbstractNode r0;
        kr $r1;
        int $i0, $i1;

        r0 := @this: org.htmlparser.nodes.AbstractNode;

        $r1 := @parameter0: kr;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.htmlparser.nodes.AbstractNode: kr a> = $r1;

        r0.<org.htmlparser.nodes.AbstractNode: int b> = $i0;

        r0.<org.htmlparser.nodes.AbstractNode: int c> = $i1;

        r0.<org.htmlparser.nodes.AbstractNode: org.htmlparser.Node d> = null;

        r0.<org.htmlparser.nodes.AbstractNode: lg e> = null;

        return;
    }

    public abstract void accept(lp);

    public java.lang.Object clone()
    {
        java.lang.Object $r1;
        org.htmlparser.nodes.AbstractNode r0;

        r0 := @this: org.htmlparser.nodes.AbstractNode;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        return $r1;
    }

    public void collectInto(lg, org.htmlparser.NodeFilter)
    {
        org.htmlparser.NodeFilter $r2;
        org.htmlparser.nodes.AbstractNode r0;
        lg $r1;
        boolean $z0;

        r0 := @this: org.htmlparser.nodes.AbstractNode;

        $r1 := @parameter0: lg;

        $r2 := @parameter1: org.htmlparser.NodeFilter;

        $z0 = interfaceinvoke $r2.<org.htmlparser.NodeFilter: boolean accept(org.htmlparser.Node)>(r0);

        if $z0 == 0 goto label1;

        virtualinvoke $r1.<lg: void a(org.htmlparser.Node)>(r0);

     label1:
        return;
    }

    public void doSemanticAction()
    {
        org.htmlparser.nodes.AbstractNode r0;

        r0 := @this: org.htmlparser.nodes.AbstractNode;

        return;
    }

    public lg getChildren()
    {
        lg r1;
        org.htmlparser.nodes.AbstractNode r0;

        r0 := @this: org.htmlparser.nodes.AbstractNode;

        r1 = r0.<org.htmlparser.nodes.AbstractNode: lg e>;

        return r1;
    }

    public int getEndPosition()
    {
        int i0;
        org.htmlparser.nodes.AbstractNode r0;

        r0 := @this: org.htmlparser.nodes.AbstractNode;

        i0 = r0.<org.htmlparser.nodes.AbstractNode: int c>;

        return i0;
    }

    public org.htmlparser.Node getFirstChild()
    {
        org.htmlparser.Node[] $r2;
        org.htmlparser.nodes.AbstractNode r0;
        int $i0;
        lg $r1;
        org.htmlparser.Node $r3;

        r0 := @this: org.htmlparser.nodes.AbstractNode;

        $r1 = r0.<org.htmlparser.nodes.AbstractNode: lg e>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r1 = r0.<org.htmlparser.nodes.AbstractNode: lg e>;

        $i0 = $r1.<lg: int b>;

        if $i0 != 0 goto label2;

        return null;

     label2:
        $r1 = r0.<org.htmlparser.nodes.AbstractNode: lg e>;

        $r2 = $r1.<lg: org.htmlparser.Node[] a>;

        $r3 = $r2[0];

        return $r3;
    }

    public org.htmlparser.Node getLastChild()
    {
        org.htmlparser.Node[] $r2;
        org.htmlparser.nodes.AbstractNode r0;
        int $i0, $i1;
        lg $r1;
        org.htmlparser.Node $r3;

        r0 := @this: org.htmlparser.nodes.AbstractNode;

        $r1 = r0.<org.htmlparser.nodes.AbstractNode: lg e>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r1 = r0.<org.htmlparser.nodes.AbstractNode: lg e>;

        $i0 = $r1.<lg: int b>;

        if $i0 != 0 goto label2;

        return null;

     label2:
        $r1 = r0.<org.htmlparser.nodes.AbstractNode: lg e>;

        $i1 = -1;

        $i0 = $i0 + $i1;

        $r2 = $r1.<lg: org.htmlparser.Node[] a>;

        $r3 = $r2[$i0];

        return $r3;
    }

    public org.htmlparser.Node getNextSibling()
    {
        org.htmlparser.Node[] $r3;
        org.htmlparser.nodes.AbstractNode r0;
        int $i0, $i1, $i2;
        lg $r2;
        org.htmlparser.Node $r1;

        r0 := @this: org.htmlparser.nodes.AbstractNode;

        $r1 = virtualinvoke r0.<org.htmlparser.nodes.AbstractNode: org.htmlparser.Node getParent()>();

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = interfaceinvoke $r1.<org.htmlparser.Node: lg getChildren()>();

        if $r2 != null goto label2;

        return null;

     label2:
        $i0 = $r2.<lg: int b>;

        if $i0 >= 2 goto label3;

        return null;

     label3:
        $i1 = 0;

     label4:
        if $i1 >= $i0 goto label9;

        $r3 = $r2.<lg: org.htmlparser.Node[] a>;

        $r1 = $r3[$i1];

        if $r1 != r0 goto label6;

     label5:
        $i2 = -1;

        if $i1 != $i2 goto label7;

        return null;

     label6:
        $i1 = $i1 + 1;

        goto label4;

     label7:
        $i0 = $i0 - 1;

        if $i1 != $i0 goto label8;

        return null;

     label8:
        $i0 = $i1 + 1;

        $r3 = $r2.<lg: org.htmlparser.Node[] a>;

        $r1 = $r3[$i0];

        return $r1;

     label9:
        $i1 = -1;

        goto label5;
    }

    public kr getPage()
    {
        org.htmlparser.nodes.AbstractNode r0;
        kr r1;

        r0 := @this: org.htmlparser.nodes.AbstractNode;

        r1 = r0.<org.htmlparser.nodes.AbstractNode: kr a>;

        return r1;
    }

    public org.htmlparser.Node getParent()
    {
        org.htmlparser.nodes.AbstractNode r0;
        org.htmlparser.Node r1;

        r0 := @this: org.htmlparser.nodes.AbstractNode;

        r1 = r0.<org.htmlparser.nodes.AbstractNode: org.htmlparser.Node d>;

        return r1;
    }

    public org.htmlparser.Node getPreviousSibling()
    {
        org.htmlparser.Node[] $r3;
        org.htmlparser.nodes.AbstractNode r0;
        int $i0, $i1;
        lg $r2;
        org.htmlparser.Node $r1;

        r0 := @this: org.htmlparser.nodes.AbstractNode;

        $r1 = virtualinvoke r0.<org.htmlparser.nodes.AbstractNode: org.htmlparser.Node getParent()>();

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = interfaceinvoke $r1.<org.htmlparser.Node: lg getChildren()>();

        if $r2 != null goto label2;

        return null;

     label2:
        $i0 = $r2.<lg: int b>;

        if $i0 >= 2 goto label3;

        return null;

     label3:
        $i1 = 0;

     label4:
        if $i1 >= $i0 goto label8;

        $r3 = $r2.<lg: org.htmlparser.Node[] a>;

        $r1 = $r3[$i1];

        if $r1 != r0 goto label6;

        $i0 = $i1;

     label5:
        if $i0 > 0 goto label7;

        return null;

     label6:
        $i1 = $i1 + 1;

        goto label4;

     label7:
        $i0 = $i0 - 1;

        $r3 = $r2.<lg: org.htmlparser.Node[] a>;

        $r1 = $r3[$i0];

        return $r1;

     label8:
        $i0 = -1;

        goto label5;
    }

    public int getStartPosition()
    {
        int i0;
        org.htmlparser.nodes.AbstractNode r0;

        r0 := @this: org.htmlparser.nodes.AbstractNode;

        i0 = r0.<org.htmlparser.nodes.AbstractNode: int b>;

        return i0;
    }

    public java.lang.String getText()
    {
        org.htmlparser.nodes.AbstractNode r0;

        r0 := @this: org.htmlparser.nodes.AbstractNode;

        return null;
    }

    public void setChildren(lg)
    {
        lg $r1;
        org.htmlparser.nodes.AbstractNode r0;

        r0 := @this: org.htmlparser.nodes.AbstractNode;

        $r1 := @parameter0: lg;

        r0.<org.htmlparser.nodes.AbstractNode: lg e> = $r1;

        return;
    }

    public void setEndPosition(int)
    {
        int $i0;
        org.htmlparser.nodes.AbstractNode r0;

        r0 := @this: org.htmlparser.nodes.AbstractNode;

        $i0 := @parameter0: int;

        r0.<org.htmlparser.nodes.AbstractNode: int c> = $i0;

        return;
    }

    public void setPage(kr)
    {
        org.htmlparser.nodes.AbstractNode r0;
        kr $r1;

        r0 := @this: org.htmlparser.nodes.AbstractNode;

        $r1 := @parameter0: kr;

        r0.<org.htmlparser.nodes.AbstractNode: kr a> = $r1;

        return;
    }

    public void setParent(org.htmlparser.Node)
    {
        org.htmlparser.nodes.AbstractNode r0;
        org.htmlparser.Node $r1;

        r0 := @this: org.htmlparser.nodes.AbstractNode;

        $r1 := @parameter0: org.htmlparser.Node;

        r0.<org.htmlparser.nodes.AbstractNode: org.htmlparser.Node d> = $r1;

        return;
    }

    public void setStartPosition(int)
    {
        int $i0;
        org.htmlparser.nodes.AbstractNode r0;

        r0 := @this: org.htmlparser.nodes.AbstractNode;

        $i0 := @parameter0: int;

        r0.<org.htmlparser.nodes.AbstractNode: int b> = $i0;

        return;
    }

    public void setText(java.lang.String)
    {
        java.lang.String $r1;
        org.htmlparser.nodes.AbstractNode r0;

        r0 := @this: org.htmlparser.nodes.AbstractNode;

        $r1 := @parameter0: java.lang.String;

        return;
    }

    public java.lang.String toHtml()
    {
        java.lang.String $r1;
        org.htmlparser.nodes.AbstractNode r0;

        r0 := @this: org.htmlparser.nodes.AbstractNode;

        $r1 = virtualinvoke r0.<org.htmlparser.nodes.AbstractNode: java.lang.String toHtml(boolean)>(0);

        return $r1;
    }

    public abstract java.lang.String toHtml(boolean);

    public abstract java.lang.String toPlainTextString();

    public abstract java.lang.String toString();
}
