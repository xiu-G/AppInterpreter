public class proguard.classfile.instruction.LookUpSwitchInstruction extends proguard.classfile.instruction.SwitchInstruction
{
    public int[] cases;

    public void <init>()
    {
        proguard.classfile.instruction.LookUpSwitchInstruction r0;

        r0 := @this: proguard.classfile.instruction.LookUpSwitchInstruction;

        specialinvoke r0.<proguard.classfile.instruction.SwitchInstruction: void <init>()>();

        return;
    }

    public void <init>(byte, int, int[], int[])
    {
        byte $b0;
        int[] $r1, $r2;
        proguard.classfile.instruction.LookUpSwitchInstruction r0;
        int $i1;

        r0 := @this: proguard.classfile.instruction.LookUpSwitchInstruction;

        $b0 := @parameter0: byte;

        $i1 := @parameter1: int;

        $r1 := @parameter2: int[];

        $r2 := @parameter3: int[];

        specialinvoke r0.<proguard.classfile.instruction.SwitchInstruction: void <init>()>();

        r0.<proguard.classfile.instruction.LookUpSwitchInstruction: byte opcode> = $b0;

        r0.<proguard.classfile.instruction.LookUpSwitchInstruction: int defaultOffset> = $i1;

        r0.<proguard.classfile.instruction.LookUpSwitchInstruction: int[] cases> = $r1;

        r0.<proguard.classfile.instruction.LookUpSwitchInstruction: int[] jumpOffsets> = $r2;

        return;
    }

    public void accept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.visitor.InstructionVisitor)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.instruction.LookUpSwitchInstruction r0;
        int $i0;
        proguard.classfile.Method $r2;
        proguard.classfile.instruction.visitor.InstructionVisitor $r4;

        r0 := @this: proguard.classfile.instruction.LookUpSwitchInstruction;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.visitor.InstructionVisitor;

        interfaceinvoke $r4.<proguard.classfile.instruction.visitor.InstructionVisitor: void visitLookUpSwitchInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.LookUpSwitchInstruction)>($r1, $r2, $r3, $i0, r0);

        return;
    }

    public proguard.classfile.instruction.LookUpSwitchInstruction copy(proguard.classfile.instruction.LookUpSwitchInstruction)
    {
        byte $b0;
        int[] $r2;
        proguard.classfile.instruction.LookUpSwitchInstruction r0, $r1;
        int $i1;

        r0 := @this: proguard.classfile.instruction.LookUpSwitchInstruction;

        $r1 := @parameter0: proguard.classfile.instruction.LookUpSwitchInstruction;

        $b0 = $r1.<proguard.classfile.instruction.LookUpSwitchInstruction: byte opcode>;

        r0.<proguard.classfile.instruction.LookUpSwitchInstruction: byte opcode> = $b0;

        $i1 = $r1.<proguard.classfile.instruction.LookUpSwitchInstruction: int defaultOffset>;

        r0.<proguard.classfile.instruction.LookUpSwitchInstruction: int defaultOffset> = $i1;

        $r2 = $r1.<proguard.classfile.instruction.LookUpSwitchInstruction: int[] cases>;

        r0.<proguard.classfile.instruction.LookUpSwitchInstruction: int[] cases> = $r2;

        $r2 = $r1.<proguard.classfile.instruction.LookUpSwitchInstruction: int[] jumpOffsets>;

        r0.<proguard.classfile.instruction.LookUpSwitchInstruction: int[] jumpOffsets> = $r2;

        return r0;
    }

    public int length(int)
    {
        int[] $r1;
        proguard.classfile.instruction.LookUpSwitchInstruction r0;
        int $i0, $i1;

        r0 := @this: proguard.classfile.instruction.LookUpSwitchInstruction;

        $i0 := @parameter0: int;

        $i0 = $i0 + 1;

        $i0 = neg $i0;

        $i0 = $i0 & 3;

        $i0 = $i0 + 1;

        $i0 = $i0 + 8;

        $r1 = r0.<proguard.classfile.instruction.LookUpSwitchInstruction: int[] cases>;

        $i1 = lengthof $r1;

        $i1 = $i1 * 8;

        $i0 = $i0 + $i1;

        return $i0;
    }

    protected void readInfo(byte[], int)
    {
        byte[] $r1;
        int[] $r2;
        proguard.classfile.instruction.LookUpSwitchInstruction r0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: proguard.classfile.instruction.LookUpSwitchInstruction;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 = neg $i0;

        $i1 = $i1 & 3;

        $i0 = $i1 + $i0;

        $i1 = staticinvoke <proguard.classfile.instruction.LookUpSwitchInstruction: int readInt(byte[],int)>($r1, $i0);

        r0.<proguard.classfile.instruction.LookUpSwitchInstruction: int defaultOffset> = $i1;

        $i1 = $i0 + 4;

        $i0 = staticinvoke <proguard.classfile.instruction.LookUpSwitchInstruction: int readInt(byte[],int)>($r1, $i1);

        $r2 = newarray (int)[$i0];

        r0.<proguard.classfile.instruction.LookUpSwitchInstruction: int[] cases> = $r2;

        $r2 = newarray (int)[$i0];

        r0.<proguard.classfile.instruction.LookUpSwitchInstruction: int[] jumpOffsets> = $r2;

        $i2 = $i1 + 4;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r2 = r0.<proguard.classfile.instruction.LookUpSwitchInstruction: int[] cases>;

        $i3 = staticinvoke <proguard.classfile.instruction.LookUpSwitchInstruction: int readInt(byte[],int)>($r1, $i2);

        $r2[$i1] = $i3;

        $i2 = $i2 + 4;

        $r2 = r0.<proguard.classfile.instruction.LookUpSwitchInstruction: int[] jumpOffsets>;

        $i3 = staticinvoke <proguard.classfile.instruction.LookUpSwitchInstruction: int readInt(byte[],int)>($r1, $i2);

        $r2[$i1] = $i3;

        $i2 = $i2 + 4;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return;
    }

    public proguard.classfile.instruction.Instruction shrink()
    {
        proguard.classfile.instruction.LookUpSwitchInstruction r0;

        r0 := @this: proguard.classfile.instruction.LookUpSwitchInstruction;

        return r0;
    }

    protected void writeInfo(byte[], int)
    {
        byte[] $r1;
        int[] $r2;
        proguard.classfile.instruction.LookUpSwitchInstruction r0;
        int $i0, $i1, $i2;

        r0 := @this: proguard.classfile.instruction.LookUpSwitchInstruction;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

     label1:
        $i1 = $i0 & 3;

        if $i1 == 0 goto label2;

        staticinvoke <proguard.classfile.instruction.LookUpSwitchInstruction: void writeByte(byte[],int,int)>($r1, $i0, 0);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $i1 = r0.<proguard.classfile.instruction.LookUpSwitchInstruction: int defaultOffset>;

        staticinvoke <proguard.classfile.instruction.LookUpSwitchInstruction: void writeInt(byte[],int,int)>($r1, $i0, $i1);

        $i0 = $i0 + 4;

        $r2 = r0.<proguard.classfile.instruction.LookUpSwitchInstruction: int[] cases>;

        $i1 = lengthof $r2;

        staticinvoke <proguard.classfile.instruction.LookUpSwitchInstruction: void writeInt(byte[],int,int)>($r1, $i0, $i1);

        $i1 = $i0 + 4;

        $i0 = 0;

     label3:
        $r2 = r0.<proguard.classfile.instruction.LookUpSwitchInstruction: int[] cases>;

        $i2 = lengthof $r2;

        if $i0 >= $i2 goto label4;

        $r2 = r0.<proguard.classfile.instruction.LookUpSwitchInstruction: int[] cases>;

        $i2 = $r2[$i0];

        staticinvoke <proguard.classfile.instruction.LookUpSwitchInstruction: void writeInt(byte[],int,int)>($r1, $i1, $i2);

        $i1 = $i1 + 4;

        $r2 = r0.<proguard.classfile.instruction.LookUpSwitchInstruction: int[] jumpOffsets>;

        $i2 = $r2[$i0];

        staticinvoke <proguard.classfile.instruction.LookUpSwitchInstruction: void writeInt(byte[],int,int)>($r1, $i1, $i2);

        $i1 = $i1 + 4;

        $i0 = $i0 + 1;

        goto label3;

     label4:
        return;
    }
}
