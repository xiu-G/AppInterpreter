public abstract class twitter4j.HttpClientBase extends java.lang.Object implements java.io.Serializable, twitter4j.HttpClient
{
    private static final twitter4j.Logger logger;
    private static final long serialVersionUID;
    protected final twitter4j.HttpClientConfiguration CONF;
    private final java.util.Map requestHeaders;

    static void <clinit>()
    {
        twitter4j.Logger $r0;

        <twitter4j.HttpClientBase: long serialVersionUID> = -8016974810651763053L;

        $r0 = staticinvoke <twitter4j.Logger: twitter4j.Logger getLogger(java.lang.Class)>(class "Ltwitter4j/HttpClientBase;");

        <twitter4j.HttpClientBase: twitter4j.Logger logger> = $r0;

        return;
    }

    public void <init>(twitter4j.HttpClientConfiguration)
    {
        java.util.Map $r3;
        twitter4j.HttpClientConfiguration $r1;
        twitter4j.HttpClientBase r0;
        java.util.HashMap $r2;
        java.lang.StringBuilder $r5;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: twitter4j.HttpClientBase;

        $r1 := @parameter0: twitter4j.HttpClientConfiguration;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<twitter4j.HttpClientBase: twitter4j.HttpClientConfiguration CONF> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<twitter4j.HttpClientBase: java.util.Map requestHeaders> = $r2;

        $r3 = r0.<twitter4j.HttpClientBase: java.util.Map requestHeaders>;

        $r4 = staticinvoke <twitter4j.Version: java.lang.String getVersion()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("X-Twitter-Client-Version", $r4);

        $r3 = r0.<twitter4j.HttpClientBase: java.util.Map requestHeaders>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("http://twitter4j.org/en/twitter4j-");

        $r4 = staticinvoke <twitter4j.Version: java.lang.String getVersion()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".xml");

        $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("X-Twitter-Client-URL", $r4);

        $r3 = r0.<twitter4j.HttpClientBase: java.util.Map requestHeaders>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("X-Twitter-Client", "Twitter4J");

        $r3 = r0.<twitter4j.HttpClientBase: java.util.Map requestHeaders>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("twitter4j http://twitter4j.org/ /");

        $r4 = staticinvoke <twitter4j.Version: java.lang.String getVersion()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("User-Agent", $r4);

        $z0 = interfaceinvoke $r1.<twitter4j.HttpClientConfiguration: boolean isGZIPEnabled()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<twitter4j.HttpClientBase: java.util.Map requestHeaders>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("Accept-Encoding", "gzip");

     label1:
        return;
    }

    public void addDefaultRequestHeader(java.lang.String, java.lang.String)
    {
        java.util.Map $r3;
        twitter4j.HttpClientBase r0;
        java.lang.String $r1, $r2;

        r0 := @this: twitter4j.HttpClientBase;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = r0.<twitter4j.HttpClientBase: java.util.Map requestHeaders>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        return;
    }

    public twitter4j.HttpResponse delete(java.lang.String)
    {
        twitter4j.HttpResponse $r4;
        twitter4j.RequestMethod $r2;
        twitter4j.HttpRequest $r5;
        java.util.Map $r3;
        twitter4j.HttpClientBase r0;
        java.lang.String $r1;

        r0 := @this: twitter4j.HttpClientBase;

        $r1 := @parameter0: java.lang.String;

        $r5 = new twitter4j.HttpRequest;

        $r2 = <twitter4j.RequestMethod: twitter4j.RequestMethod DELETE>;

        $r3 = r0.<twitter4j.HttpClientBase: java.util.Map requestHeaders>;

        specialinvoke $r5.<twitter4j.HttpRequest: void <init>(twitter4j.RequestMethod,java.lang.String,twitter4j.HttpParameter[],twitter4j.auth.Authorization,java.util.Map)>($r2, $r1, null, null, $r3);

        $r4 = virtualinvoke r0.<twitter4j.HttpClientBase: twitter4j.HttpResponse request(twitter4j.HttpRequest)>($r5);

        return $r4;
    }

    public twitter4j.HttpResponse delete(java.lang.String, twitter4j.HttpParameter[], twitter4j.auth.Authorization, twitter4j.HttpResponseListener)
    {
        twitter4j.HttpResponse $r7;
        twitter4j.auth.Authorization $r3;
        twitter4j.HttpResponseListener $r4;
        twitter4j.RequestMethod $r5;
        twitter4j.HttpRequest $r8;
        twitter4j.HttpParameter[] $r2;
        java.util.Map $r6;
        twitter4j.HttpClientBase r0;
        java.lang.String $r1;

        r0 := @this: twitter4j.HttpClientBase;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: twitter4j.HttpParameter[];

        $r3 := @parameter2: twitter4j.auth.Authorization;

        $r4 := @parameter3: twitter4j.HttpResponseListener;

        $r8 = new twitter4j.HttpRequest;

        $r5 = <twitter4j.RequestMethod: twitter4j.RequestMethod DELETE>;

        $r6 = r0.<twitter4j.HttpClientBase: java.util.Map requestHeaders>;

        specialinvoke $r8.<twitter4j.HttpRequest: void <init>(twitter4j.RequestMethod,java.lang.String,twitter4j.HttpParameter[],twitter4j.auth.Authorization,java.util.Map)>($r5, $r1, $r2, $r3, $r6);

        $r7 = virtualinvoke r0.<twitter4j.HttpClientBase: twitter4j.HttpResponse request(twitter4j.HttpRequest,twitter4j.HttpResponseListener)>($r8, $r4);

        return $r7;
    }

    public twitter4j.HttpResponse get(java.lang.String)
    {
        twitter4j.HttpResponse $r4;
        twitter4j.RequestMethod $r2;
        twitter4j.HttpRequest $r5;
        java.util.Map $r3;
        twitter4j.HttpClientBase r0;
        java.lang.String $r1;

        r0 := @this: twitter4j.HttpClientBase;

        $r1 := @parameter0: java.lang.String;

        $r5 = new twitter4j.HttpRequest;

        $r2 = <twitter4j.RequestMethod: twitter4j.RequestMethod GET>;

        $r3 = r0.<twitter4j.HttpClientBase: java.util.Map requestHeaders>;

        specialinvoke $r5.<twitter4j.HttpRequest: void <init>(twitter4j.RequestMethod,java.lang.String,twitter4j.HttpParameter[],twitter4j.auth.Authorization,java.util.Map)>($r2, $r1, null, null, $r3);

        $r4 = virtualinvoke r0.<twitter4j.HttpClientBase: twitter4j.HttpResponse request(twitter4j.HttpRequest)>($r5);

        return $r4;
    }

    public twitter4j.HttpResponse get(java.lang.String, twitter4j.HttpParameter[], twitter4j.auth.Authorization, twitter4j.HttpResponseListener)
    {
        twitter4j.HttpResponse $r7;
        twitter4j.auth.Authorization $r3;
        twitter4j.HttpResponseListener $r4;
        twitter4j.RequestMethod $r5;
        twitter4j.HttpRequest $r8;
        twitter4j.HttpParameter[] $r2;
        java.util.Map $r6;
        twitter4j.HttpClientBase r0;
        java.lang.String $r1;

        r0 := @this: twitter4j.HttpClientBase;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: twitter4j.HttpParameter[];

        $r3 := @parameter2: twitter4j.auth.Authorization;

        $r4 := @parameter3: twitter4j.HttpResponseListener;

        $r8 = new twitter4j.HttpRequest;

        $r5 = <twitter4j.RequestMethod: twitter4j.RequestMethod GET>;

        $r6 = r0.<twitter4j.HttpClientBase: java.util.Map requestHeaders>;

        specialinvoke $r8.<twitter4j.HttpRequest: void <init>(twitter4j.RequestMethod,java.lang.String,twitter4j.HttpParameter[],twitter4j.auth.Authorization,java.util.Map)>($r5, $r1, null, $r3, $r6);

        $r7 = virtualinvoke r0.<twitter4j.HttpClientBase: twitter4j.HttpResponse request(twitter4j.HttpRequest,twitter4j.HttpResponseListener)>($r8, $r4);

        return $r7;
    }

    public java.util.Map getRequestHeaders()
    {
        twitter4j.HttpClientBase r0;
        java.util.Map r1;

        r0 := @this: twitter4j.HttpClientBase;

        r1 = r0.<twitter4j.HttpClientBase: java.util.Map requestHeaders>;

        return r1;
    }

    abstract twitter4j.HttpResponse handleRequest(twitter4j.HttpRequest);

    public twitter4j.HttpResponse head(java.lang.String)
    {
        twitter4j.HttpResponse $r4;
        twitter4j.RequestMethod $r2;
        twitter4j.HttpRequest $r5;
        java.util.Map $r3;
        twitter4j.HttpClientBase r0;
        java.lang.String $r1;

        r0 := @this: twitter4j.HttpClientBase;

        $r1 := @parameter0: java.lang.String;

        $r5 = new twitter4j.HttpRequest;

        $r2 = <twitter4j.RequestMethod: twitter4j.RequestMethod HEAD>;

        $r3 = r0.<twitter4j.HttpClientBase: java.util.Map requestHeaders>;

        specialinvoke $r5.<twitter4j.HttpRequest: void <init>(twitter4j.RequestMethod,java.lang.String,twitter4j.HttpParameter[],twitter4j.auth.Authorization,java.util.Map)>($r2, $r1, null, null, $r3);

        $r4 = virtualinvoke r0.<twitter4j.HttpClientBase: twitter4j.HttpResponse request(twitter4j.HttpRequest)>($r5);

        return $r4;
    }

    protected boolean isProxyConfigured()
    {
        twitter4j.HttpClientConfiguration $r1;
        twitter4j.HttpClientBase r0;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: twitter4j.HttpClientBase;

        $r1 = r0.<twitter4j.HttpClientBase: twitter4j.HttpClientConfiguration CONF>;

        $r2 = interfaceinvoke $r1.<twitter4j.HttpClientConfiguration: java.lang.String getHttpProxyHost()>();

        if $r2 == null goto label1;

        $r1 = r0.<twitter4j.HttpClientBase: twitter4j.HttpClientConfiguration CONF>;

        $r2 = interfaceinvoke $r1.<twitter4j.HttpClientConfiguration: java.lang.String getHttpProxyHost()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public twitter4j.HttpResponse post(java.lang.String)
    {
        twitter4j.HttpResponse $r4;
        twitter4j.RequestMethod $r2;
        twitter4j.HttpRequest $r5;
        java.util.Map $r3;
        twitter4j.HttpClientBase r0;
        java.lang.String $r1;

        r0 := @this: twitter4j.HttpClientBase;

        $r1 := @parameter0: java.lang.String;

        $r5 = new twitter4j.HttpRequest;

        $r2 = <twitter4j.RequestMethod: twitter4j.RequestMethod POST>;

        $r3 = r0.<twitter4j.HttpClientBase: java.util.Map requestHeaders>;

        specialinvoke $r5.<twitter4j.HttpRequest: void <init>(twitter4j.RequestMethod,java.lang.String,twitter4j.HttpParameter[],twitter4j.auth.Authorization,java.util.Map)>($r2, $r1, null, null, $r3);

        $r4 = virtualinvoke r0.<twitter4j.HttpClientBase: twitter4j.HttpResponse request(twitter4j.HttpRequest)>($r5);

        return $r4;
    }

    public twitter4j.HttpResponse post(java.lang.String, twitter4j.HttpParameter[], twitter4j.auth.Authorization, twitter4j.HttpResponseListener)
    {
        twitter4j.HttpResponse $r7;
        twitter4j.auth.Authorization $r3;
        twitter4j.HttpResponseListener $r4;
        twitter4j.RequestMethod $r5;
        twitter4j.HttpRequest $r8;
        twitter4j.HttpParameter[] $r2;
        java.util.Map $r6;
        twitter4j.HttpClientBase r0;
        java.lang.String $r1;

        r0 := @this: twitter4j.HttpClientBase;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: twitter4j.HttpParameter[];

        $r3 := @parameter2: twitter4j.auth.Authorization;

        $r4 := @parameter3: twitter4j.HttpResponseListener;

        $r8 = new twitter4j.HttpRequest;

        $r5 = <twitter4j.RequestMethod: twitter4j.RequestMethod POST>;

        $r6 = r0.<twitter4j.HttpClientBase: java.util.Map requestHeaders>;

        specialinvoke $r8.<twitter4j.HttpRequest: void <init>(twitter4j.RequestMethod,java.lang.String,twitter4j.HttpParameter[],twitter4j.auth.Authorization,java.util.Map)>($r5, $r1, $r2, $r3, $r6);

        $r7 = virtualinvoke r0.<twitter4j.HttpClientBase: twitter4j.HttpResponse request(twitter4j.HttpRequest,twitter4j.HttpResponseListener)>($r8, $r4);

        return $r7;
    }

    public twitter4j.HttpResponse put(java.lang.String)
    {
        twitter4j.HttpResponse $r4;
        twitter4j.RequestMethod $r2;
        twitter4j.HttpRequest $r5;
        java.util.Map $r3;
        twitter4j.HttpClientBase r0;
        java.lang.String $r1;

        r0 := @this: twitter4j.HttpClientBase;

        $r1 := @parameter0: java.lang.String;

        $r5 = new twitter4j.HttpRequest;

        $r2 = <twitter4j.RequestMethod: twitter4j.RequestMethod PUT>;

        $r3 = r0.<twitter4j.HttpClientBase: java.util.Map requestHeaders>;

        specialinvoke $r5.<twitter4j.HttpRequest: void <init>(twitter4j.RequestMethod,java.lang.String,twitter4j.HttpParameter[],twitter4j.auth.Authorization,java.util.Map)>($r2, $r1, null, null, $r3);

        $r4 = virtualinvoke r0.<twitter4j.HttpClientBase: twitter4j.HttpResponse request(twitter4j.HttpRequest)>($r5);

        return $r4;
    }

    public twitter4j.HttpResponse put(java.lang.String, twitter4j.HttpParameter[], twitter4j.auth.Authorization, twitter4j.HttpResponseListener)
    {
        twitter4j.HttpResponse $r7;
        twitter4j.auth.Authorization $r3;
        twitter4j.HttpResponseListener $r4;
        twitter4j.RequestMethod $r5;
        twitter4j.HttpRequest $r8;
        twitter4j.HttpParameter[] $r2;
        java.util.Map $r6;
        twitter4j.HttpClientBase r0;
        java.lang.String $r1;

        r0 := @this: twitter4j.HttpClientBase;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: twitter4j.HttpParameter[];

        $r3 := @parameter2: twitter4j.auth.Authorization;

        $r4 := @parameter3: twitter4j.HttpResponseListener;

        $r8 = new twitter4j.HttpRequest;

        $r5 = <twitter4j.RequestMethod: twitter4j.RequestMethod PUT>;

        $r6 = r0.<twitter4j.HttpClientBase: java.util.Map requestHeaders>;

        specialinvoke $r8.<twitter4j.HttpRequest: void <init>(twitter4j.RequestMethod,java.lang.String,twitter4j.HttpParameter[],twitter4j.auth.Authorization,java.util.Map)>($r5, $r1, $r2, $r3, $r6);

        $r7 = virtualinvoke r0.<twitter4j.HttpClientBase: twitter4j.HttpResponse request(twitter4j.HttpRequest,twitter4j.HttpResponseListener)>($r8, $r4);

        return $r7;
    }

    public final twitter4j.HttpResponse request(twitter4j.HttpRequest)
    {
        twitter4j.HttpResponse $r2;
        twitter4j.HttpClientBase r0;
        twitter4j.HttpRequest $r1;

        r0 := @this: twitter4j.HttpClientBase;

        $r1 := @parameter0: twitter4j.HttpRequest;

        $r2 = virtualinvoke r0.<twitter4j.HttpClientBase: twitter4j.HttpResponse handleRequest(twitter4j.HttpRequest)>($r1);

        return $r2;
    }

    public final twitter4j.HttpResponse request(twitter4j.HttpRequest, twitter4j.HttpResponseListener)
    {
        twitter4j.HttpResponse $r3;
        twitter4j.HttpResponseListener $r2;
        twitter4j.HttpRequest $r1;
        twitter4j.HttpResponseEvent $r4;
        twitter4j.HttpClientBase r0;
        twitter4j.TwitterException $r5;

        r0 := @this: twitter4j.HttpClientBase;

        $r1 := @parameter0: twitter4j.HttpRequest;

        $r2 := @parameter1: twitter4j.HttpResponseListener;

     label1:
        $r3 = virtualinvoke r0.<twitter4j.HttpClientBase: twitter4j.HttpResponse handleRequest(twitter4j.HttpRequest)>($r1);

     label2:
        if $r2 == null goto label7;

        $r4 = new twitter4j.HttpResponseEvent;

     label3:
        specialinvoke $r4.<twitter4j.HttpResponseEvent: void <init>(twitter4j.HttpRequest,twitter4j.HttpResponse,twitter4j.TwitterException)>($r1, $r3, null);

        interfaceinvoke $r2.<twitter4j.HttpResponseListener: void httpResponseReceived(twitter4j.HttpResponseEvent)>($r4);

     label4:
        return $r3;

     label5:
        $r5 := @caughtexception;

        if $r2 == null goto label6;

        $r4 = new twitter4j.HttpResponseEvent;

        specialinvoke $r4.<twitter4j.HttpResponseEvent: void <init>(twitter4j.HttpRequest,twitter4j.HttpResponse,twitter4j.TwitterException)>($r1, null, $r5);

        interfaceinvoke $r2.<twitter4j.HttpResponseListener: void httpResponseReceived(twitter4j.HttpResponseEvent)>($r4);

     label6:
        throw $r5;

     label7:
        return $r3;

        catch twitter4j.TwitterException from label1 to label2 with label5;
        catch twitter4j.TwitterException from label3 to label4 with label5;
    }

    public void write(java.io.DataOutputStream, java.lang.String)
    {
        java.io.DataOutputStream $r1;
        twitter4j.HttpClientBase r0;
        java.lang.String $r2;
        twitter4j.Logger $r3;

        r0 := @this: twitter4j.HttpClientBase;

        $r1 := @parameter0: java.io.DataOutputStream;

        $r2 := @parameter1: java.lang.String;

        virtualinvoke $r1.<java.io.DataOutputStream: void writeBytes(java.lang.String)>($r2);

        $r3 = <twitter4j.HttpClientBase: twitter4j.Logger logger>;

        virtualinvoke $r3.<twitter4j.Logger: void debug(java.lang.String)>($r2);

        return;
    }
}
