public class proguard.classfile.instruction.VariableInstruction extends proguard.classfile.instruction.Instruction
{
    public int constant;
    public int variableIndex;
    public boolean wide;

    public void <init>()
    {
        proguard.classfile.instruction.VariableInstruction r0;

        r0 := @this: proguard.classfile.instruction.VariableInstruction;

        specialinvoke r0.<proguard.classfile.instruction.Instruction: void <init>()>();

        return;
    }

    public void <init>(byte)
    {
        int $i1;
        proguard.classfile.instruction.VariableInstruction r0;
        byte $b0;

        r0 := @this: proguard.classfile.instruction.VariableInstruction;

        $b0 := @parameter0: byte;

        $i1 = staticinvoke <proguard.classfile.instruction.VariableInstruction: int embeddedVariable(byte)>($b0);

        specialinvoke r0.<proguard.classfile.instruction.VariableInstruction: void <init>(byte,int,int)>($b0, $i1, 0);

        return;
    }

    public void <init>(byte, int)
    {
        int $i1;
        proguard.classfile.instruction.VariableInstruction r0;
        byte $b0;

        r0 := @this: proguard.classfile.instruction.VariableInstruction;

        $b0 := @parameter0: byte;

        $i1 := @parameter1: int;

        specialinvoke r0.<proguard.classfile.instruction.VariableInstruction: void <init>(byte,int,int)>($b0, $i1, 0);

        return;
    }

    public void <init>(byte, int, int)
    {
        byte $b0;
        int $i1, $i2;
        proguard.classfile.instruction.VariableInstruction r0;
        boolean $z0;

        r0 := @this: proguard.classfile.instruction.VariableInstruction;

        $b0 := @parameter0: byte;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        specialinvoke r0.<proguard.classfile.instruction.Instruction: void <init>()>();

        r0.<proguard.classfile.instruction.VariableInstruction: byte opcode> = $b0;

        r0.<proguard.classfile.instruction.VariableInstruction: int variableIndex> = $i1;

        r0.<proguard.classfile.instruction.VariableInstruction: int constant> = $i2;

        $i1 = specialinvoke r0.<proguard.classfile.instruction.VariableInstruction: int requiredVariableIndexSize()>();

        if $i1 > 1 goto label1;

        $i1 = specialinvoke r0.<proguard.classfile.instruction.VariableInstruction: int requiredConstantSize()>();

        if $i1 <= 1 goto label3;

     label1:
        $z0 = 1;

     label2:
        r0.<proguard.classfile.instruction.VariableInstruction: boolean wide> = $z0;

        return;

     label3:
        $z0 = 0;

        goto label2;
    }

    public void <init>(boolean)
    {
        proguard.classfile.instruction.VariableInstruction r0;
        boolean $z0;

        r0 := @this: proguard.classfile.instruction.VariableInstruction;

        $z0 := @parameter0: boolean;

        specialinvoke r0.<proguard.classfile.instruction.Instruction: void <init>()>();

        r0.<proguard.classfile.instruction.VariableInstruction: boolean wide> = $z0;

        return;
    }

    private int constantSize()
    {
        byte $b0;
        int $i1;
        proguard.classfile.instruction.VariableInstruction r0;
        boolean $z0;

        r0 := @this: proguard.classfile.instruction.VariableInstruction;

        $b0 = r0.<proguard.classfile.instruction.VariableInstruction: byte opcode>;

        $i1 = (int) $b0;

        if $i1 == -124 goto label1;

        return 0;

     label1:
        $z0 = r0.<proguard.classfile.instruction.VariableInstruction: boolean wide>;

        if $z0 == 0 goto label2;

        return 2;

     label2:
        return 1;
    }

    private static int embeddedVariable(byte)
    {
        int $i1;
        byte $b0;

        $b0 := @parameter0: byte;

        $i1 = (int) $b0;

        lookupswitch($i1)
        {
            case 27: goto label2;
            case 28: goto label3;
            case 29: goto label4;
            case 30: goto label1;
            case 31: goto label2;
            case 32: goto label3;
            case 33: goto label4;
            case 34: goto label1;
            case 35: goto label2;
            case 36: goto label3;
            case 37: goto label4;
            case 38: goto label1;
            case 39: goto label2;
            case 40: goto label3;
            case 41: goto label4;
            case 42: goto label1;
            case 43: goto label2;
            case 44: goto label3;
            case 45: goto label4;
            case 46: goto label1;
            case 47: goto label1;
            case 48: goto label1;
            case 49: goto label1;
            case 50: goto label1;
            case 51: goto label1;
            case 52: goto label1;
            case 53: goto label1;
            case 54: goto label1;
            case 55: goto label1;
            case 56: goto label1;
            case 57: goto label1;
            case 58: goto label1;
            case 59: goto label1;
            case 60: goto label2;
            case 61: goto label3;
            case 62: goto label4;
            case 63: goto label1;
            case 64: goto label2;
            case 65: goto label3;
            case 66: goto label4;
            case 67: goto label1;
            case 68: goto label2;
            case 69: goto label3;
            case 70: goto label4;
            case 71: goto label1;
            case 72: goto label2;
            case 73: goto label3;
            case 74: goto label4;
            case 75: goto label1;
            case 76: goto label2;
            case 77: goto label3;
            case 78: goto label4;
            default: goto label1;
        };

     label1:
        return 0;

     label2:
        return 1;

     label3:
        return 2;

     label4:
        return 3;
    }

    private int requiredConstantSize()
    {
        byte $b0;
        int $i1, $i2;
        proguard.classfile.instruction.VariableInstruction r0;

        r0 := @this: proguard.classfile.instruction.VariableInstruction;

        $b0 = r0.<proguard.classfile.instruction.VariableInstruction: byte opcode>;

        $i1 = (int) $b0;

        if $i1 == -124 goto label1;

        return 0;

     label1:
        $i1 = r0.<proguard.classfile.instruction.VariableInstruction: int constant>;

        $i1 = $i1 << 24;

        $i1 = $i1 >> 24;

        $i2 = r0.<proguard.classfile.instruction.VariableInstruction: int constant>;

        if $i1 != $i2 goto label2;

        return 1;

     label2:
        $i1 = r0.<proguard.classfile.instruction.VariableInstruction: int constant>;

        $i1 = $i1 << 16;

        $i1 = $i1 >> 16;

        $i2 = r0.<proguard.classfile.instruction.VariableInstruction: int constant>;

        if $i1 != $i2 goto label3;

        return 2;

     label3:
        return 4;
    }

    private int requiredVariableIndexSize()
    {
        int $i0, $i1;
        proguard.classfile.instruction.VariableInstruction r0;

        r0 := @this: proguard.classfile.instruction.VariableInstruction;

        $i0 = r0.<proguard.classfile.instruction.VariableInstruction: int variableIndex>;

        $i0 = $i0 & 3;

        $i1 = r0.<proguard.classfile.instruction.VariableInstruction: int variableIndex>;

        if $i0 != $i1 goto label1;

        return 0;

     label1:
        $i0 = r0.<proguard.classfile.instruction.VariableInstruction: int variableIndex>;

        $i0 = $i0 & 255;

        $i1 = r0.<proguard.classfile.instruction.VariableInstruction: int variableIndex>;

        if $i0 != $i1 goto label2;

        return 1;

     label2:
        $i0 = r0.<proguard.classfile.instruction.VariableInstruction: int variableIndex>;

        $i0 = $i0 & 65535;

        $i1 = r0.<proguard.classfile.instruction.VariableInstruction: int variableIndex>;

        if $i0 != $i1 goto label3;

        return 2;

     label3:
        return 4;
    }

    private int variableIndexSize()
    {
        byte $b0;
        int $i1;
        proguard.classfile.instruction.VariableInstruction r0;
        boolean $z0;

        r0 := @this: proguard.classfile.instruction.VariableInstruction;

        $b0 = r0.<proguard.classfile.instruction.VariableInstruction: byte opcode>;

        $i1 = (int) $b0;

        if $i1 < 26 goto label1;

        $b0 = r0.<proguard.classfile.instruction.VariableInstruction: byte opcode>;

        $i1 = (int) $b0;

        if $i1 <= 45 goto label2;

     label1:
        $b0 = r0.<proguard.classfile.instruction.VariableInstruction: byte opcode>;

        $i1 = (int) $b0;

        if $i1 < 59 goto label3;

        $b0 = r0.<proguard.classfile.instruction.VariableInstruction: byte opcode>;

        $i1 = (int) $b0;

        if $i1 > 78 goto label3;

     label2:
        return 0;

     label3:
        $z0 = r0.<proguard.classfile.instruction.VariableInstruction: boolean wide>;

        if $z0 == 0 goto label4;

        return 2;

     label4:
        return 1;
    }

    public void accept(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, int, proguard.classfile.instruction.visitor.InstructionVisitor)
    {
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        int $i0;
        proguard.classfile.Method $r2;
        proguard.classfile.instruction.VariableInstruction r0;
        proguard.classfile.instruction.visitor.InstructionVisitor $r4;

        r0 := @this: proguard.classfile.instruction.VariableInstruction;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter3: int;

        $r4 := @parameter4: proguard.classfile.instruction.visitor.InstructionVisitor;

        interfaceinvoke $r4.<proguard.classfile.instruction.visitor.InstructionVisitor: void visitVariableInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.VariableInstruction)>($r1, $r2, $r3, $i0, r0);

        return;
    }

    public byte canonicalOpcode()
    {
        int $i1;
        proguard.classfile.instruction.VariableInstruction r0;
        byte $b0;

        r0 := @this: proguard.classfile.instruction.VariableInstruction;

        $b0 = r0.<proguard.classfile.instruction.VariableInstruction: byte opcode>;

        $i1 = (int) $b0;

        lookupswitch($i1)
        {
            case 26: goto label02;
            case 27: goto label02;
            case 28: goto label02;
            case 29: goto label02;
            case 30: goto label03;
            case 31: goto label03;
            case 32: goto label03;
            case 33: goto label03;
            case 34: goto label04;
            case 35: goto label04;
            case 36: goto label04;
            case 37: goto label04;
            case 38: goto label05;
            case 39: goto label05;
            case 40: goto label05;
            case 41: goto label05;
            case 42: goto label06;
            case 43: goto label06;
            case 44: goto label06;
            case 45: goto label06;
            case 46: goto label01;
            case 47: goto label01;
            case 48: goto label01;
            case 49: goto label01;
            case 50: goto label01;
            case 51: goto label01;
            case 52: goto label01;
            case 53: goto label01;
            case 54: goto label01;
            case 55: goto label01;
            case 56: goto label01;
            case 57: goto label01;
            case 58: goto label01;
            case 59: goto label07;
            case 60: goto label07;
            case 61: goto label07;
            case 62: goto label07;
            case 63: goto label08;
            case 64: goto label08;
            case 65: goto label08;
            case 66: goto label08;
            case 67: goto label09;
            case 68: goto label09;
            case 69: goto label09;
            case 70: goto label09;
            case 71: goto label10;
            case 72: goto label10;
            case 73: goto label10;
            case 74: goto label10;
            case 75: goto label11;
            case 76: goto label11;
            case 77: goto label11;
            case 78: goto label11;
            default: goto label01;
        };

     label01:
        $b0 = r0.<proguard.classfile.instruction.VariableInstruction: byte opcode>;

        return $b0;

     label02:
        return 21;

     label03:
        return 22;

     label04:
        return 23;

     label05:
        return 24;

     label06:
        return 25;

     label07:
        return 54;

     label08:
        return 55;

     label09:
        return 56;

     label10:
        return 57;

     label11:
        return 58;
    }

    public proguard.classfile.instruction.VariableInstruction copy(proguard.classfile.instruction.VariableInstruction)
    {
        byte $b0;
        int $i1;
        proguard.classfile.instruction.VariableInstruction r0, $r1;
        boolean $z0;

        r0 := @this: proguard.classfile.instruction.VariableInstruction;

        $r1 := @parameter0: proguard.classfile.instruction.VariableInstruction;

        $b0 = $r1.<proguard.classfile.instruction.VariableInstruction: byte opcode>;

        r0.<proguard.classfile.instruction.VariableInstruction: byte opcode> = $b0;

        $i1 = $r1.<proguard.classfile.instruction.VariableInstruction: int variableIndex>;

        r0.<proguard.classfile.instruction.VariableInstruction: int variableIndex> = $i1;

        $i1 = $r1.<proguard.classfile.instruction.VariableInstruction: int constant>;

        r0.<proguard.classfile.instruction.VariableInstruction: int constant> = $i1;

        $z0 = $r1.<proguard.classfile.instruction.VariableInstruction: boolean wide>;

        r0.<proguard.classfile.instruction.VariableInstruction: boolean wide> = $z0;

        return r0;
    }

    public boolean isLoad()
    {
        int $i1;
        proguard.classfile.instruction.VariableInstruction r0;
        byte $b0;

        r0 := @this: proguard.classfile.instruction.VariableInstruction;

        $b0 = r0.<proguard.classfile.instruction.VariableInstruction: byte opcode>;

        $i1 = (int) $b0;

        if $i1 >= 54 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isStore()
    {
        byte $b0;
        int $i1, $i2;
        proguard.classfile.instruction.VariableInstruction r0;

        r0 := @this: proguard.classfile.instruction.VariableInstruction;

        $b0 = r0.<proguard.classfile.instruction.VariableInstruction: byte opcode>;

        $i1 = (int) $b0;

        if $i1 >= 54 goto label1;

        $b0 = r0.<proguard.classfile.instruction.VariableInstruction: byte opcode>;

        $i1 = (int) $b0;

        $i2 = -124;

        if $i1 != $i2 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    protected boolean isWide()
    {
        proguard.classfile.instruction.VariableInstruction r0;
        boolean z0;

        r0 := @this: proguard.classfile.instruction.VariableInstruction;

        z0 = r0.<proguard.classfile.instruction.VariableInstruction: boolean wide>;

        return z0;
    }

    public int length(int)
    {
        byte $b1;
        int $i0, $i2;
        proguard.classfile.instruction.VariableInstruction r0;
        boolean $z0;

        r0 := @this: proguard.classfile.instruction.VariableInstruction;

        $i0 := @parameter0: int;

        $z0 = r0.<proguard.classfile.instruction.VariableInstruction: boolean wide>;

        if $z0 == 0 goto label2;

        $b1 = 2;

     label1:
        $i0 = specialinvoke r0.<proguard.classfile.instruction.VariableInstruction: int variableIndexSize()>();

        $i0 = $b1 + $i0;

        $i2 = specialinvoke r0.<proguard.classfile.instruction.VariableInstruction: int constantSize()>();

        $i0 = $i0 + $i2;

        return $i0;

     label2:
        $b1 = 1;

        goto label1;
    }

    protected void readInfo(byte[], int)
    {
        byte[] $r1;
        byte $b3;
        int $i0, $i1, $i2, $i4;
        proguard.classfile.instruction.VariableInstruction r0;

        r0 := @this: proguard.classfile.instruction.VariableInstruction;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 = specialinvoke r0.<proguard.classfile.instruction.VariableInstruction: int variableIndexSize()>();

        $i2 = specialinvoke r0.<proguard.classfile.instruction.VariableInstruction: int constantSize()>();

        if $i1 != 0 goto label4;

        $b3 = r0.<proguard.classfile.instruction.VariableInstruction: byte opcode>;

        $i1 = (int) $b3;

        if $i1 >= 59 goto label3;

        $b3 = r0.<proguard.classfile.instruction.VariableInstruction: byte opcode>;

        $i1 = (int) $b3;

        $i1 = $i1 - 26;

        $i1 = $i1 & 3;

     label1:
        r0.<proguard.classfile.instruction.VariableInstruction: int variableIndex> = $i1;

     label2:
        $i0 = staticinvoke <proguard.classfile.instruction.VariableInstruction: int readSignedValue(byte[],int,int)>($r1, $i0, $i2);

        r0.<proguard.classfile.instruction.VariableInstruction: int constant> = $i0;

        return;

     label3:
        $b3 = r0.<proguard.classfile.instruction.VariableInstruction: byte opcode>;

        $i1 = (int) $b3;

        $i1 = $i1 - 59;

        $i1 = $i1 & 3;

        goto label1;

     label4:
        $i4 = staticinvoke <proguard.classfile.instruction.VariableInstruction: int readValue(byte[],int,int)>($r1, $i0, $i1);

        r0.<proguard.classfile.instruction.VariableInstruction: int variableIndex> = $i4;

        $i0 = $i1 + $i0;

        goto label2;
    }

    public proguard.classfile.instruction.Instruction shrink()
    {
        byte $b0;
        int $i1;
        proguard.classfile.instruction.VariableInstruction r0;
        boolean $z0;

        r0 := @this: proguard.classfile.instruction.VariableInstruction;

        $b0 = virtualinvoke r0.<proguard.classfile.instruction.VariableInstruction: byte canonicalOpcode()>();

        r0.<proguard.classfile.instruction.VariableInstruction: byte opcode> = $b0;

        $i1 = r0.<proguard.classfile.instruction.VariableInstruction: int variableIndex>;

        if $i1 > 3 goto label01;

        $b0 = r0.<proguard.classfile.instruction.VariableInstruction: byte opcode>;

        $i1 = (int) $b0;

        lookupswitch($i1)
        {
            case 21: goto label04;
            case 22: goto label05;
            case 23: goto label06;
            case 24: goto label07;
            case 25: goto label08;
            case 54: goto label09;
            case 55: goto label10;
            case 56: goto label11;
            case 57: goto label12;
            case 58: goto label13;
            default: goto label01;
        };

     label01:
        $i1 = specialinvoke r0.<proguard.classfile.instruction.VariableInstruction: int requiredVariableIndexSize()>();

        if $i1 > 1 goto label02;

        $i1 = specialinvoke r0.<proguard.classfile.instruction.VariableInstruction: int requiredConstantSize()>();

        if $i1 <= 1 goto label14;

     label02:
        $z0 = 1;

     label03:
        r0.<proguard.classfile.instruction.VariableInstruction: boolean wide> = $z0;

        return r0;

     label04:
        $i1 = r0.<proguard.classfile.instruction.VariableInstruction: int variableIndex>;

        $i1 = $i1 + 26;

        $b0 = (byte) $i1;

        r0.<proguard.classfile.instruction.VariableInstruction: byte opcode> = $b0;

        goto label01;

     label05:
        $i1 = r0.<proguard.classfile.instruction.VariableInstruction: int variableIndex>;

        $i1 = $i1 + 30;

        $b0 = (byte) $i1;

        r0.<proguard.classfile.instruction.VariableInstruction: byte opcode> = $b0;

        goto label01;

     label06:
        $i1 = r0.<proguard.classfile.instruction.VariableInstruction: int variableIndex>;

        $i1 = $i1 + 34;

        $b0 = (byte) $i1;

        r0.<proguard.classfile.instruction.VariableInstruction: byte opcode> = $b0;

        goto label01;

     label07:
        $i1 = r0.<proguard.classfile.instruction.VariableInstruction: int variableIndex>;

        $i1 = $i1 + 38;

        $b0 = (byte) $i1;

        r0.<proguard.classfile.instruction.VariableInstruction: byte opcode> = $b0;

        goto label01;

     label08:
        $i1 = r0.<proguard.classfile.instruction.VariableInstruction: int variableIndex>;

        $i1 = $i1 + 42;

        $b0 = (byte) $i1;

        r0.<proguard.classfile.instruction.VariableInstruction: byte opcode> = $b0;

        goto label01;

     label09:
        $i1 = r0.<proguard.classfile.instruction.VariableInstruction: int variableIndex>;

        $i1 = $i1 + 59;

        $b0 = (byte) $i1;

        r0.<proguard.classfile.instruction.VariableInstruction: byte opcode> = $b0;

        goto label01;

     label10:
        $i1 = r0.<proguard.classfile.instruction.VariableInstruction: int variableIndex>;

        $i1 = $i1 + 63;

        $b0 = (byte) $i1;

        r0.<proguard.classfile.instruction.VariableInstruction: byte opcode> = $b0;

        goto label01;

     label11:
        $i1 = r0.<proguard.classfile.instruction.VariableInstruction: int variableIndex>;

        $i1 = $i1 + 67;

        $b0 = (byte) $i1;

        r0.<proguard.classfile.instruction.VariableInstruction: byte opcode> = $b0;

        goto label01;

     label12:
        $i1 = r0.<proguard.classfile.instruction.VariableInstruction: int variableIndex>;

        $i1 = $i1 + 71;

        $b0 = (byte) $i1;

        r0.<proguard.classfile.instruction.VariableInstruction: byte opcode> = $b0;

        goto label01;

     label13:
        $i1 = r0.<proguard.classfile.instruction.VariableInstruction: int variableIndex>;

        $i1 = $i1 + 75;

        $b0 = (byte) $i1;

        r0.<proguard.classfile.instruction.VariableInstruction: byte opcode> = $b0;

        goto label01;

     label14:
        $z0 = 0;

        goto label03;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuffer $r1, $r3;
        int $i0;
        proguard.classfile.instruction.VariableInstruction r0;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: proguard.classfile.instruction.VariableInstruction;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke r0.<proguard.classfile.instruction.VariableInstruction: java.lang.String getName()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $z0 = r0.<proguard.classfile.instruction.VariableInstruction: boolean wide>;

        if $z0 == 0 goto label3;

        $r2 = "_w";

     label1:
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" v");

        $i0 = r0.<proguard.classfile.instruction.VariableInstruction: int variableIndex>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $i0 = specialinvoke r0.<proguard.classfile.instruction.VariableInstruction: int constantSize()>();

        if $i0 <= 0 goto label4;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        $i0 = r0.<proguard.classfile.instruction.VariableInstruction: int constant>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r2 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

     label2:
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;

     label3:
        $r2 = "";

        goto label1;

     label4:
        $r2 = "";

        goto label2;
    }

    protected void writeInfo(byte[], int)
    {
        byte[] $r1;
        proguard.classfile.instruction.VariableInstruction r0;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuffer $r3;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r4;

        r0 := @this: proguard.classfile.instruction.VariableInstruction;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 = specialinvoke r0.<proguard.classfile.instruction.VariableInstruction: int variableIndexSize()>();

        $i2 = specialinvoke r0.<proguard.classfile.instruction.VariableInstruction: int constantSize()>();

        $i3 = specialinvoke r0.<proguard.classfile.instruction.VariableInstruction: int requiredVariableIndexSize()>();

        if $i3 <= $i1 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Instruction has invalid variable index size (");

        $r4 = virtualinvoke r0.<proguard.classfile.instruction.VariableInstruction: java.lang.String toString(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label1:
        $i3 = specialinvoke r0.<proguard.classfile.instruction.VariableInstruction: int requiredConstantSize()>();

        if $i3 <= $i2 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Instruction has invalid constant size (");

        $r4 = virtualinvoke r0.<proguard.classfile.instruction.VariableInstruction: java.lang.String toString(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label2:
        $i3 = r0.<proguard.classfile.instruction.VariableInstruction: int variableIndex>;

        staticinvoke <proguard.classfile.instruction.VariableInstruction: void writeValue(byte[],int,int,int)>($r1, $i0, $i3, $i1);

        $i0 = $i1 + $i0;

        $i1 = r0.<proguard.classfile.instruction.VariableInstruction: int constant>;

        staticinvoke <proguard.classfile.instruction.VariableInstruction: void writeSignedValue(byte[],int,int,int)>($r1, $i0, $i1, $i2);

        return;
    }
}
