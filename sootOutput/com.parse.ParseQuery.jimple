public class com.parse.ParseQuery extends java.lang.Object
{
    private static final java.lang.String TAG;
    private com.parse.ParseQuery$CachePolicy cachePolicy;
    private java.lang.String className;
    private com.parse.l currentCommand;
    private com.parse.a currentTask;
    private java.util.ArrayList include;
    private java.lang.Boolean isRunning;
    private int limit;
    private long maxCacheAge;
    private long objectsParsed;
    private java.lang.String order;
    private long queryReceived;
    private long querySent;
    private long queryStart;
    private int skip;
    private boolean trace;
    private java.util.HashMap where;

    public void <init>(java.lang.String)
    {
        com.parse.ParseQuery$CachePolicy $r3;
        com.parse.ParseQuery r0;
        java.lang.Boolean $r2;
        java.util.HashMap $r4;
        java.lang.String $r1;
        java.util.ArrayList $r5;

        r0 := @this: com.parse.ParseQuery;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.parse.ParseQuery: com.parse.a currentTask> = null;

        r0.<com.parse.ParseQuery: com.parse.l currentCommand> = null;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        r0.<com.parse.ParseQuery: java.lang.Boolean isRunning> = $r2;

        r0.<com.parse.ParseQuery: java.lang.String className> = $r1;

        r0.<com.parse.ParseQuery: int limit> = -1;

        r0.<com.parse.ParseQuery: int skip> = 0;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<com.parse.ParseQuery: java.util.HashMap where> = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<com.parse.ParseQuery: java.util.ArrayList include> = $r5;

        $r3 = <com.parse.ParseQuery$CachePolicy: com.parse.ParseQuery$CachePolicy IGNORE_CACHE>;

        r0.<com.parse.ParseQuery: com.parse.ParseQuery$CachePolicy cachePolicy> = $r3;

        r0.<com.parse.ParseQuery: long maxCacheAge> = 9223372036854775807L;

        r0.<com.parse.ParseQuery: boolean trace> = 0;

        return;
    }

    static int access$000(com.parse.ParseQuery)
    {
        com.parse.ParseQuery $r0;
        int $i0;

        $r0 := @parameter0: com.parse.ParseQuery;

        $i0 = specialinvoke $r0.<com.parse.ParseQuery: int countFromNetwork()>();

        return $i0;
    }

    static java.lang.Integer access$100(com.parse.ParseQuery)
    {
        com.parse.ParseQuery $r0;
        java.lang.Integer $r1;

        $r0 := @parameter0: com.parse.ParseQuery;

        $r1 = specialinvoke $r0.<com.parse.ParseQuery: java.lang.Integer countFromCache()>();

        return $r1;
    }

    static java.util.List access$200(com.parse.ParseQuery, boolean)
    {
        com.parse.ParseQuery $r0;
        java.util.List $r1;
        boolean $z0;

        $r0 := @parameter0: com.parse.ParseQuery;

        $z0 := @parameter1: boolean;

        $r1 = specialinvoke $r0.<com.parse.ParseQuery: java.util.List findFromNetwork(boolean)>($z0);

        return $r1;
    }

    static java.util.List access$300(com.parse.ParseQuery)
    {
        com.parse.ParseQuery $r0;
        java.util.List $r1;

        $r0 := @parameter0: com.parse.ParseQuery;

        $r1 = specialinvoke $r0.<com.parse.ParseQuery: java.util.List findFromCache()>();

        return $r1;
    }

    static java.util.List access$400(com.parse.ParseQuery, com.parse.ParseQuery$CachePolicy)
    {
        com.parse.ParseQuery $r0;
        java.util.List $r2;
        com.parse.ParseQuery$CachePolicy $r1;

        $r0 := @parameter0: com.parse.ParseQuery;

        $r1 := @parameter1: com.parse.ParseQuery$CachePolicy;

        $r2 = specialinvoke $r0.<com.parse.ParseQuery: java.util.List findWithCachePolicy(com.parse.ParseQuery$CachePolicy)>($r1);

        return $r2;
    }

    static com.parse.l access$502(com.parse.ParseQuery, com.parse.l)
    {
        com.parse.ParseQuery $r0;
        com.parse.l $r1;

        $r0 := @parameter0: com.parse.ParseQuery;

        $r1 := @parameter1: com.parse.l;

        $r0.<com.parse.ParseQuery: com.parse.l currentCommand> = null;

        return null;
    }

    private void addCondition(java.lang.String, java.lang.String, java.lang.Object)
    {
        com.parse.ParseQuery r0;
        java.util.HashMap $r4;
        java.lang.RuntimeException $r8;
        org.json.JSONException $r7;
        org.json.JSONObject $r6;
        java.lang.Object $r3, $r5;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: com.parse.ParseQuery;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.Object;

        specialinvoke r0.<com.parse.ParseQuery: void checkIfRunning(boolean)>(0);

        $r3 = staticinvoke <com.parse.Parse: java.lang.Object maybeReferenceAndEncode(java.lang.Object)>($r3);

        $r4 = r0.<com.parse.ParseQuery: java.util.HashMap where>;

        $z0 = virtualinvoke $r4.<java.util.HashMap: boolean containsKey(java.lang.Object)>("objectId");

        if $z0 == 0 goto label5;

        $r4 = r0.<com.parse.ParseQuery: java.util.HashMap where>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>("objectId");

        $z0 = $r5 instanceof org.json.JSONObject;

        if $z0 == 0 goto label5;

        $r6 = (org.json.JSONObject) $r5;

     label1:
        if $r6 != null goto label2;

        $r6 = new org.json.JSONObject;

        specialinvoke $r6.<org.json.JSONObject: void <init>()>();

     label2:
        virtualinvoke $r6.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("$in", $r3);

     label3:
        $r4 = r0.<com.parse.ParseQuery: java.util.HashMap where>;

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("objectId", $r6);

        return;

     label4:
        $r7 := @caughtexception;

        $r8 = new java.lang.RuntimeException;

        $r1 = virtualinvoke $r7.<org.json.JSONException: java.lang.String getMessage()>();

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>($r1);

        throw $r8;

     label5:
        $r6 = null;

        goto label1;

        catch org.json.JSONException from label2 to label3 with label4;
    }

    private void checkIfRunning()
    {
        com.parse.ParseQuery r0;

        r0 := @this: com.parse.ParseQuery;

        specialinvoke r0.<com.parse.ParseQuery: void checkIfRunning(boolean)>(0);

        return;
    }

    private void checkIfRunning(boolean)
    {
        java.lang.Throwable $r4;
        com.parse.ParseQuery r0;
        java.lang.Boolean $r1, $r2;
        java.lang.RuntimeException $r3;
        boolean $z0, $z1;

        r0 := @this: com.parse.ParseQuery;

        $z0 := @parameter0: boolean;

        $r1 = r0.<com.parse.ParseQuery: java.lang.Boolean isRunning>;

        entermonitor $r1;

     label1:
        $r2 = r0.<com.parse.ParseQuery: java.lang.Boolean isRunning>;

        $z1 = virtualinvoke $r2.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 == 0 goto label3;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("This query has an outstanding network connection. You have to wait until it\'s done.");

        throw $r3;

     label2:
        $r4 := @caughtexception;

        exitmonitor $r1;

        throw $r4;

     label3:
        if $z0 == 0 goto label5;

     label4:
        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        r0.<com.parse.ParseQuery: java.lang.Boolean isRunning> = $r2;

     label5:
        exitmonitor $r1;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label4 to label6 with label2;
    }

    public static void clearAllCachedResults()
    {
        staticinvoke <com.parse.Parse: void clearCacheDir()>();

        return;
    }

    private java.util.List convertFindResponse(org.json.JSONObject)
    {
        com.parse.ParseQuery r0;
        long $l0, $l1;
        com.parse.ParseObject $r7;
        java.util.ArrayList $r2;
        org.json.JSONObject $r1, $r8;
        int $i2, $i3;
        java.lang.Object $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;
        org.json.JSONArray $r3;
        boolean $z0;

        r0 := @this: com.parse.ParseQuery;

        $r1 := @parameter0: org.json.JSONObject;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = virtualinvoke $r1.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("results");

        if $r3 != null goto label2;

        staticinvoke <com.parse.Parse: void logD(java.lang.String,java.lang.String)>("com.parse.ParseQuery", "null results in find response");

     label1:
        $l0 = staticinvoke <java.lang.System: long nanoTime()>();

        r0.<com.parse.ParseQuery: long objectsParsed> = $l0;

        $z0 = virtualinvoke $r1.<org.json.JSONObject: boolean has(java.lang.String)>("trace");

        if $z0 == 0 goto label4;

        $r4 = virtualinvoke $r1.<org.json.JSONObject: java.lang.Object get(java.lang.String)>("trace");

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Query pre-processing took ");

        $l0 = r0.<com.parse.ParseQuery: long querySent>;

        $l1 = r0.<com.parse.ParseQuery: long queryStart>;

        $l0 = $l0 - $l1;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" milliseconds\n");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Client side parsing took ");

        $l0 = r0.<com.parse.ParseQuery: long objectsParsed>;

        $l1 = r0.<com.parse.ParseQuery: long queryReceived>;

        $l0 = $l0 - $l1;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" millisecond\n");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.parse.Parse: void logD(java.lang.String,java.lang.String)>("ParseQuery", $r6);

        return $r2;

     label2:
        $i2 = 0;

     label3:
        $i3 = virtualinvoke $r3.<org.json.JSONArray: int length()>();

        if $i2 >= $i3 goto label1;

        $r6 = r0.<com.parse.ParseQuery: java.lang.String className>;

        $r7 = staticinvoke <com.parse.ParseObject: com.parse.ParseObject create(java.lang.String)>($r6);

        virtualinvoke $r7.<com.parse.ParseObject: void clearData()>();

        $r8 = virtualinvoke $r3.<org.json.JSONArray: org.json.JSONObject getJSONObject(int)>($i2);

        virtualinvoke $r7.<com.parse.ParseObject: void mergeObject(org.json.JSONObject,boolean)>($r8, 0);

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r7);

        $i2 = $i2 + 1;

        goto label3;

     label4:
        return $r2;
    }

    private java.lang.Integer countFromCache()
    {
        com.parse.ParseQuery r0;
        com.parse.ParseException $r4;
        long $l0;
        java.lang.Integer $r6;
        org.json.JSONException $r7;
        org.json.JSONObject $r5;
        int $i1;
        com.parse.l $r1;
        java.lang.Object $r3;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: com.parse.ParseQuery;

        $r1 = specialinvoke r0.<com.parse.ParseQuery: com.parse.l makeCountCommand()>();

        $r2 = virtualinvoke $r1.<com.parse.l: java.lang.String b()>();

        $l0 = r0.<com.parse.ParseQuery: long maxCacheAge>;

        $r3 = staticinvoke <com.parse.Parse: java.lang.Object jsonFromKeyValueCache(java.lang.String,long)>($r2, $l0);

        if $r3 != null goto label1;

        $r4 = new com.parse.ParseException;

        specialinvoke $r4.<com.parse.ParseException: void <init>(int,java.lang.String)>(120, "results not cached");

        throw $r4;

     label1:
        $z0 = $r3 instanceof org.json.JSONObject;

        if $z0 != 0 goto label2;

        $r4 = new com.parse.ParseException;

        specialinvoke $r4.<com.parse.ParseException: void <init>(int,java.lang.String)>(120, "the cache contains the wrong datatype");

        throw $r4;

     label2:
        $r5 = (org.json.JSONObject) $r3;

     label3:
        $i1 = virtualinvoke $r5.<org.json.JSONObject: int getInt(java.lang.String)>("count");

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

     label4:
        return $r6;

     label5:
        $r7 := @caughtexception;

        $r4 = new com.parse.ParseException;

        specialinvoke $r4.<com.parse.ParseException: void <init>(int,java.lang.String)>(120, "the cache contains corrupted json");

        throw $r4;

        catch org.json.JSONException from label3 to label4 with label5;
    }

    private int countFromNetwork()
    {
        com.parse.ParseQuery r0;
        org.json.JSONObject $r5;
        com.parse.ParseQuery$CachePolicy $r1, $r2;
        int $i0;
        com.parse.l $r3;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: com.parse.ParseQuery;

        $r1 = r0.<com.parse.ParseQuery: com.parse.ParseQuery$CachePolicy cachePolicy>;

        $r2 = <com.parse.ParseQuery$CachePolicy: com.parse.ParseQuery$CachePolicy IGNORE_CACHE>;

        if $r1 == $r2 goto label2;

        $z0 = 1;

     label1:
        $r3 = specialinvoke r0.<com.parse.ParseQuery: com.parse.l makeCountCommand()>();

        r0.<com.parse.ParseQuery: com.parse.l currentCommand> = $r3;

        $r3 = r0.<com.parse.ParseQuery: com.parse.l currentCommand>;

        $r4 = virtualinvoke $r3.<com.parse.l: java.lang.Object a(boolean)>($z0);

        $r5 = (org.json.JSONObject) $r4;

        $i0 = virtualinvoke $r5.<org.json.JSONObject: int optInt(java.lang.String)>("count");

        return $i0;

     label2:
        $z0 = 0;

        goto label1;
    }

    private int countWithCachePolicy(com.parse.ParseQuery$CachePolicy)
    {
        com.parse.as $r2;
        com.parse.ParseQuery$CachePolicy $r1;
        com.parse.ParseQuery r0;
        int $i0;
        java.lang.Object $r3;
        java.lang.Integer $r4;

        r0 := @this: com.parse.ParseQuery;

        $r1 := @parameter0: com.parse.ParseQuery$CachePolicy;

        $r2 = new com.parse.as;

        specialinvoke $r2.<com.parse.as: void <init>(com.parse.ParseQuery)>(r0);

        $r3 = specialinvoke r0.<com.parse.ParseQuery: java.lang.Object runCommandWithPolicy(com.parse.az,com.parse.ParseQuery$CachePolicy)>($r2, $r1);

        $r4 = (java.lang.Integer) $r3;

        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        return $i0;
    }

    private java.util.List findFromCache()
    {
        com.parse.ParseQuery r0;
        com.parse.ParseException $r4;
        long $l0;
        java.util.List $r6;
        org.json.JSONException $r7;
        org.json.JSONObject $r5;
        com.parse.l $r1;
        java.lang.Object $r3;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: com.parse.ParseQuery;

        $r1 = specialinvoke r0.<com.parse.ParseQuery: com.parse.l makeFindCommand()>();

        $r2 = virtualinvoke $r1.<com.parse.l: java.lang.String b()>();

        $l0 = r0.<com.parse.ParseQuery: long maxCacheAge>;

        $r3 = staticinvoke <com.parse.Parse: java.lang.Object jsonFromKeyValueCache(java.lang.String,long)>($r2, $l0);

        if $r3 != null goto label1;

        $r4 = new com.parse.ParseException;

        specialinvoke $r4.<com.parse.ParseException: void <init>(int,java.lang.String)>(120, "results not cached");

        throw $r4;

     label1:
        $z0 = $r3 instanceof org.json.JSONObject;

        if $z0 != 0 goto label2;

        $r4 = new com.parse.ParseException;

        specialinvoke $r4.<com.parse.ParseException: void <init>(int,java.lang.String)>(120, "the cache contains the wrong datatype");

        throw $r4;

     label2:
        $r5 = (org.json.JSONObject) $r3;

     label3:
        $r6 = specialinvoke r0.<com.parse.ParseQuery: java.util.List convertFindResponse(org.json.JSONObject)>($r5);

     label4:
        return $r6;

     label5:
        $r7 := @caughtexception;

        $r4 = new com.parse.ParseException;

        specialinvoke $r4.<com.parse.ParseException: void <init>(int,java.lang.String)>(120, "the cache contains corrupted json");

        throw $r4;

        catch org.json.JSONException from label3 to label4 with label5;
    }

    private java.util.List findFromNetwork(boolean)
    {
        com.parse.ParseQuery r0;
        long $l0;
        java.lang.RuntimeException $r9;
        java.util.ArrayList $r2;
        java.util.List $r7;
        org.json.JSONException $r8;
        org.json.JSONObject $r6;
        com.parse.ParseQuery$CachePolicy $r3, $r4;
        com.parse.l $r1;
        java.lang.Object $r5;
        java.lang.String $r10;
        boolean $z0;

        r0 := @this: com.parse.ParseQuery;

        $z0 := @parameter0: boolean;

        $r1 = specialinvoke r0.<com.parse.ParseQuery: com.parse.l makeFindCommand()>();

        r0.<com.parse.ParseQuery: com.parse.l currentCommand> = $r1;

        if $z0 == 0 goto label1;

        $r1 = r0.<com.parse.ParseQuery: com.parse.l currentCommand>;

        virtualinvoke $r1.<com.parse.l: void d()>();

     label1:
        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r1 = r0.<com.parse.ParseQuery: com.parse.l currentCommand>;

        if $r1 != null goto label2;

        return $r2;

     label2:
        $r3 = r0.<com.parse.ParseQuery: com.parse.ParseQuery$CachePolicy cachePolicy>;

        $r4 = <com.parse.ParseQuery$CachePolicy: com.parse.ParseQuery$CachePolicy IGNORE_CACHE>;

        if $r3 == $r4 goto label6;

        $z0 = 1;

     label3:
        $l0 = staticinvoke <java.lang.System: long nanoTime()>();

        r0.<com.parse.ParseQuery: long querySent> = $l0;

        $r1 = r0.<com.parse.ParseQuery: com.parse.l currentCommand>;

        $r5 = virtualinvoke $r1.<com.parse.l: java.lang.Object a(boolean)>($z0);

        $r6 = (org.json.JSONObject) $r5;

        $l0 = staticinvoke <java.lang.System: long nanoTime()>();

        r0.<com.parse.ParseQuery: long queryReceived> = $l0;

     label4:
        $r7 = specialinvoke r0.<com.parse.ParseQuery: java.util.List convertFindResponse(org.json.JSONObject)>($r6);

     label5:
        return $r7;

     label6:
        $z0 = 0;

        goto label3;

     label7:
        $r8 := @caughtexception;

        $r9 = new java.lang.RuntimeException;

        $r10 = virtualinvoke $r8.<org.json.JSONException: java.lang.String getMessage()>();

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String)>($r10);

        throw $r9;

        catch org.json.JSONException from label4 to label5 with label7;
    }

    private java.util.List findWithCachePolicy(com.parse.ParseQuery$CachePolicy)
    {
        com.parse.at $r3;
        java.util.List $r4;
        com.parse.ParseQuery$CachePolicy $r1;
        com.parse.ParseQuery r0;
        java.lang.Object $r2;

        r0 := @this: com.parse.ParseQuery;

        $r1 := @parameter0: com.parse.ParseQuery$CachePolicy;

        $r3 = new com.parse.at;

        specialinvoke $r3.<com.parse.at: void <init>(com.parse.ParseQuery)>(r0);

        $r2 = specialinvoke r0.<com.parse.ParseQuery: java.lang.Object runCommandWithPolicy(com.parse.az,com.parse.ParseQuery$CachePolicy)>($r3, $r1);

        $r4 = (java.util.List) $r2;

        return $r4;
    }

    private void finishedRunning()
    {
        java.lang.Throwable $r3;
        com.parse.ParseQuery r0;
        java.lang.Boolean $r1, $r2;

        r0 := @this: com.parse.ParseQuery;

        $r1 = r0.<com.parse.ParseQuery: java.lang.Boolean isRunning>;

        entermonitor $r1;

     label1:
        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        r0.<com.parse.ParseQuery: java.lang.Boolean isRunning> = $r2;

        r0.<com.parse.ParseQuery: com.parse.a currentTask> = null;

        r0.<com.parse.ParseQuery: com.parse.l currentCommand> = null;

        exitmonitor $r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r1;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private org.json.JSONObject getFindParams()
    {
        java.util.HashMap $r5;
        java.util.ArrayList $r16;
        org.json.JSONException $r13;
        org.json.JSONObject $r1, $r4, $r17;
        int $i0;
        java.lang.String $r3, $r15;
        boolean $z0;
        java.util.Iterator $r7, $r10;
        com.parse.ParseQuery r0, $r11;
        java.util.Set $r6;
        java.lang.RuntimeException $r14;
        java.lang.IllegalArgumentException $r12;
        java.util.List $r9;
        java.lang.Object $r8;
        org.json.JSONArray $r2;

        r0 := @this: com.parse.ParseQuery;

        $r1 = new org.json.JSONObject;

        specialinvoke $r1.<org.json.JSONObject: void <init>()>();

        $r3 = r0.<com.parse.ParseQuery: java.lang.String className>;

     label01:
        virtualinvoke $r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("classname", $r3);

     label02:
        $r4 = new org.json.JSONObject;

     label03:
        specialinvoke $r4.<org.json.JSONObject: void <init>()>();

     label04:
        $r5 = r0.<com.parse.ParseQuery: java.util.HashMap where>;

     label05:
        $r6 = virtualinvoke $r5.<java.util.HashMap: java.util.Set keySet()>();

        $r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label06:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

     label07:
        if $z0 == 0 goto label45;

     label08:
        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

     label09:
        $r3 = (java.lang.String) $r8;

     label10:
        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("$or");

     label11:
        if $z0 == 0 goto label42;

        $r5 = r0.<com.parse.ParseQuery: java.util.HashMap where>;

     label12:
        $r8 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r3);

     label13:
        $r9 = (java.util.List) $r8;

        $r2 = new org.json.JSONArray;

     label14:
        specialinvoke $r2.<org.json.JSONArray: void <init>()>();

        $r10 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label15:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

     label16:
        if $z0 == 0 goto label40;

     label17:
        $r8 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

     label18:
        $r11 = (com.parse.ParseQuery) $r8;

        $i0 = $r11.<com.parse.ParseQuery: int limit>;

        if $i0 < 0 goto label22;

        $r12 = new java.lang.IllegalArgumentException;

     label19:
        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot have limits in sub queries of an \'OR\' query");

     label20:
        throw $r12;

     label21:
        $r13 := @caughtexception;

        $r14 = new java.lang.RuntimeException;

        $r3 = virtualinvoke $r13.<org.json.JSONException: java.lang.String getMessage()>();

        specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.String)>($r3);

        throw $r14;

     label22:
        $i0 = $r11.<com.parse.ParseQuery: int skip>;

        if $i0 <= 0 goto label25;

        $r12 = new java.lang.IllegalArgumentException;

     label23:
        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot have skips in sub queries of an \'OR\' query");

     label24:
        throw $r12;

     label25:
        $r15 = $r11.<com.parse.ParseQuery: java.lang.String order>;

        if $r15 == null goto label28;

        $r12 = new java.lang.IllegalArgumentException;

     label26:
        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot have an order in sub queries of an \'OR\' query");

     label27:
        throw $r12;

     label28:
        $r16 = $r11.<com.parse.ParseQuery: java.util.ArrayList include>;

     label29:
        $z0 = virtualinvoke $r16.<java.util.ArrayList: boolean isEmpty()>();

     label30:
        if $z0 != 0 goto label33;

        $r12 = new java.lang.IllegalArgumentException;

     label31:
        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot have an include in sub queries of an \'OR\' query");

     label32:
        throw $r12;

     label33:
        $r17 = specialinvoke $r11.<com.parse.ParseQuery: org.json.JSONObject getFindParams()>();

        $z0 = virtualinvoke $r17.<org.json.JSONObject: boolean isNull(java.lang.String)>("data");

     label34:
        if $z0 != 0 goto label37;

     label35:
        $r8 = virtualinvoke $r17.<org.json.JSONObject: java.lang.Object get(java.lang.String)>("data");

        virtualinvoke $r2.<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>($r8);

     label36:
        goto label15;

     label37:
        $r17 = new org.json.JSONObject;

     label38:
        specialinvoke $r17.<org.json.JSONObject: void <init>()>();

        virtualinvoke $r2.<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>($r17);

     label39:
        goto label15;

     label40:
        virtualinvoke $r4.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>($r3, $r2);

     label41:
        goto label06;

     label42:
        $r5 = r0.<com.parse.ParseQuery: java.util.HashMap where>;

     label43:
        $r8 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r3);

        $r8 = specialinvoke r0.<com.parse.ParseQuery: java.lang.Object maybeEncodeSubQueries(java.lang.Object)>($r8);

        $r8 = staticinvoke <com.parse.Parse: java.lang.Object maybeReferenceAndEncode(java.lang.Object)>($r8);

        virtualinvoke $r4.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>($r3, $r8);

     label44:
        goto label06;

     label45:
        virtualinvoke $r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("data", $r4);

     label46:
        $i0 = r0.<com.parse.ParseQuery: int limit>;

        if $i0 < 0 goto label48;

        $i0 = r0.<com.parse.ParseQuery: int limit>;

     label47:
        virtualinvoke $r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,int)>("limit", $i0);

     label48:
        $i0 = r0.<com.parse.ParseQuery: int skip>;

        if $i0 <= 0 goto label50;

        $i0 = r0.<com.parse.ParseQuery: int skip>;

     label49:
        virtualinvoke $r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,int)>("skip", $i0);

     label50:
        $r3 = r0.<com.parse.ParseQuery: java.lang.String order>;

        if $r3 == null goto label52;

        $r3 = r0.<com.parse.ParseQuery: java.lang.String order>;

     label51:
        virtualinvoke $r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("order", $r3);

     label52:
        $r16 = r0.<com.parse.ParseQuery: java.util.ArrayList include>;

     label53:
        $z0 = virtualinvoke $r16.<java.util.ArrayList: boolean isEmpty()>();

     label54:
        if $z0 != 0 goto label56;

        $r16 = r0.<com.parse.ParseQuery: java.util.ArrayList include>;

     label55:
        $r3 = staticinvoke <com.parse.Parse: java.lang.String join(java.util.Collection,java.lang.String)>($r16, ",");

        virtualinvoke $r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("include", $r3);

     label56:
        $z0 = r0.<com.parse.ParseQuery: boolean trace>;

        if $z0 == 0 goto label58;

     label57:
        virtualinvoke $r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("trace", "1");

     label58:
        return $r1;

        catch org.json.JSONException from label01 to label02 with label21;
        catch org.json.JSONException from label03 to label04 with label21;
        catch org.json.JSONException from label05 to label07 with label21;
        catch org.json.JSONException from label08 to label09 with label21;
        catch org.json.JSONException from label10 to label11 with label21;
        catch org.json.JSONException from label12 to label13 with label21;
        catch org.json.JSONException from label14 to label16 with label21;
        catch org.json.JSONException from label17 to label18 with label21;
        catch org.json.JSONException from label19 to label20 with label21;
        catch org.json.JSONException from label23 to label24 with label21;
        catch org.json.JSONException from label26 to label27 with label21;
        catch org.json.JSONException from label29 to label30 with label21;
        catch org.json.JSONException from label31 to label32 with label21;
        catch org.json.JSONException from label33 to label34 with label21;
        catch org.json.JSONException from label35 to label36 with label21;
        catch org.json.JSONException from label38 to label39 with label21;
        catch org.json.JSONException from label40 to label41 with label21;
        catch org.json.JSONException from label43 to label44 with label21;
        catch org.json.JSONException from label45 to label46 with label21;
        catch org.json.JSONException from label47 to label48 with label21;
        catch org.json.JSONException from label49 to label50 with label21;
        catch org.json.JSONException from label51 to label52 with label21;
        catch org.json.JSONException from label53 to label54 with label21;
        catch org.json.JSONException from label55 to label56 with label21;
        catch org.json.JSONException from label57 to label58 with label21;
    }

    public static com.parse.ParseQuery getUserQuery()
    {
        com.parse.ParseQuery $r0;

        $r0 = staticinvoke <com.parse.ParseUser: com.parse.ParseQuery getQuery()>();

        return $r0;
    }

    private com.parse.l makeCountCommand()
    {
        com.parse.ParseQuery r0;
        com.parse.l $r1;

        r0 := @this: com.parse.ParseQuery;

        $r1 = specialinvoke r0.<com.parse.ParseQuery: com.parse.l makeFindCommand()>();

        virtualinvoke $r1.<com.parse.l: void a(java.lang.String,int)>("limit", 0);

        virtualinvoke $r1.<com.parse.l: void a(java.lang.String,int)>("count", 1);

        return $r1;
    }

    private com.parse.l makeFindCommand()
    {
        java.util.Iterator $r3;
        com.parse.ParseQuery r0;
        java.lang.RuntimeException $r8;
        org.json.JSONException $r7;
        org.json.JSONObject $r2;
        com.parse.l $r1;
        java.lang.Object $r4;
        java.lang.String $r5, $r6;
        boolean $z0;

        r0 := @this: com.parse.ParseQuery;

        $r1 = new com.parse.l;

        specialinvoke $r1.<com.parse.l: void <init>(java.lang.String)>("find");

        $r2 = specialinvoke r0.<com.parse.ParseQuery: org.json.JSONObject getFindParams()>();

        $r3 = virtualinvoke $r2.<org.json.JSONObject: java.util.Iterator keys()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

     label2:
        if $z0 == 0 goto label8;

     label3:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

     label4:
        $r5 = (java.lang.String) $r4;

     label5:
        $r4 = virtualinvoke $r2.<org.json.JSONObject: java.lang.Object get(java.lang.String)>($r5);

        $r6 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r1.<com.parse.l: void a(java.lang.String,java.lang.String)>($r5, $r6);

     label6:
        goto label1;

     label7:
        $r7 := @caughtexception;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r7);

        throw $r8;

     label8:
        return $r1;

        catch org.json.JSONException from label1 to label2 with label7;
        catch org.json.JSONException from label3 to label4 with label7;
        catch org.json.JSONException from label5 to label6 with label7;
    }

    private java.lang.Object maybeEncodeSubQueries(java.lang.Object)
    {
        java.util.Iterator $r3;
        com.parse.ParseQuery r0, $r5;
        org.json.JSONObject $r2, $r6;
        java.lang.Object $r1;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: com.parse.ParseQuery;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof org.json.JSONObject;

        if $z0 != 0 goto label1;

        return $r1;

     label1:
        $r2 = (org.json.JSONObject) $r1;

        $r3 = virtualinvoke $r2.<org.json.JSONObject: java.util.Iterator keys()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r1 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.lang.String) $r1;

        $r1 = virtualinvoke $r2.<org.json.JSONObject: java.lang.Object opt(java.lang.String)>($r4);

        $z0 = $r1 instanceof com.parse.ParseQuery;

        if $z0 == 0 goto label4;

        $r5 = (com.parse.ParseQuery) $r1;

        $r6 = specialinvoke $r5.<com.parse.ParseQuery: org.json.JSONObject getFindParams()>();

        $z0 = virtualinvoke $r6.<org.json.JSONObject: boolean isNull(java.lang.String)>("data");

        if $z0 != 0 goto label3;

        $r1 = virtualinvoke $r6.<org.json.JSONObject: java.lang.Object get(java.lang.String)>("data");

        virtualinvoke $r6.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("where", $r1);

        virtualinvoke $r6.<org.json.JSONObject: java.lang.Object remove(java.lang.String)>("data");

     label3:
        $r1 = virtualinvoke $r6.<org.json.JSONObject: java.lang.Object remove(java.lang.String)>("classname");

        virtualinvoke $r6.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("className", $r1);

        virtualinvoke $r2.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>($r4, $r6);

        goto label2;

     label4:
        $z0 = $r1 instanceof org.json.JSONObject;

        if $z0 == 0 goto label2;

        $r1 = specialinvoke r0.<com.parse.ParseQuery: java.lang.Object maybeEncodeSubQueries(java.lang.Object)>($r1);

        virtualinvoke $r2.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>($r4, $r1);

        goto label2;

     label5:
        return $r2;
    }

    public static com.parse.ParseQuery or(java.util.List)
    {
        com.parse.ParseQuery $r4;
        java.lang.IllegalArgumentException $r6;
        java.util.ArrayList $r1;
        java.util.List $r0;
        int $i0, $i1;
        java.lang.Object $r3;
        java.lang.String $r2, $r5;
        boolean $z0;

        $r0 := @parameter0: java.util.List;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r2 = null;

        $i0 = 0;

     label1:
        $i1 = interfaceinvoke $r0.<java.util.List: int size()>();

        if $i0 >= $i1 goto label3;

        if $r2 == null goto label2;

        $r3 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>($i0);

        $r4 = (com.parse.ParseQuery) $r3;

        $r5 = $r4.<com.parse.ParseQuery: java.lang.String className>;

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label2;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("All of the queries in an or query must be on the same class ");

        throw $r6;

     label2:
        $r3 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>($i0);

        $r4 = (com.parse.ParseQuery) $r3;

        $r2 = $r4.<com.parse.ParseQuery: java.lang.String className>;

        $r3 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>($i0);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r3);

        $i0 = $i0 + 1;

        goto label1;

     label3:
        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 != 0 goto label4;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can\'t take an or of an empty list of queries");

        throw $r6;

     label4:
        $r4 = new com.parse.ParseQuery;

        specialinvoke $r4.<com.parse.ParseQuery: void <init>(java.lang.String)>($r2);

        $r4 = specialinvoke $r4.<com.parse.ParseQuery: com.parse.ParseQuery whereSatifiesAnyOf(java.util.List)>($r1);

        return $r4;
    }

    private java.lang.Object runCommandWithPolicy(com.parse.az, com.parse.ParseQuery$CachePolicy)
    {
        com.parse.ParseQuery r0;
        com.parse.ParseException $r8, $r9;
        java.lang.RuntimeException $r4;
        int[] $r3;
        com.parse.ParseQuery$CachePolicy $r2;
        com.parse.az $r1;
        int $i0;
        java.lang.StringBuilder $r5;
        java.lang.Object $r7;
        java.lang.String $r6;

        r0 := @this: com.parse.ParseQuery;

        $r1 := @parameter0: com.parse.az;

        $r2 := @parameter1: com.parse.ParseQuery$CachePolicy;

        $r3 = <com.parse.ay: int[] a>;

        $i0 = virtualinvoke $r2.<com.parse.ParseQuery$CachePolicy: int ordinal()>();

        $i0 = $r3[$i0];

        lookupswitch($i0)
        {
            case 1: goto label02;
            case 2: goto label02;
            case 3: goto label03;
            case 4: goto label04;
            case 5: goto label07;
            case 6: goto label11;
            default: goto label01;
        };

     label01:
        $r4 = new java.lang.RuntimeException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unknown cache policy: ");

        $r2 = r0.<com.parse.ParseQuery: com.parse.ParseQuery$CachePolicy cachePolicy>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>($r6);

        throw $r4;

     label02:
        $r7 = interfaceinvoke $r1.<com.parse.az: java.lang.Object a(boolean)>(1);

        return $r7;

     label03:
        $r7 = interfaceinvoke $r1.<com.parse.az: java.lang.Object a()>();

        return $r7;

     label04:
        $r7 = interfaceinvoke $r1.<com.parse.az: java.lang.Object a()>();

     label05:
        return $r7;

     label06:
        $r8 := @caughtexception;

        $r7 = interfaceinvoke $r1.<com.parse.az: java.lang.Object a(boolean)>(1);

        return $r7;

     label07:
        $r7 = interfaceinvoke $r1.<com.parse.az: java.lang.Object a(boolean)>(0);

     label08:
        return $r7;

     label09:
        $r9 := @caughtexception;

        $i0 = virtualinvoke $r9.<com.parse.ParseException: int getCode()>();

        if $i0 == 100 goto label10;

        $r8 = new com.parse.ParseException;

        specialinvoke $r8.<com.parse.ParseException: void <init>(java.lang.Throwable)>($r9);

        throw $r8;

     label10:
        $r7 = interfaceinvoke $r1.<com.parse.az: java.lang.Object a()>();

        return $r7;

     label11:
        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("You cannot use the cache policy CACHE_THEN_NETWORK with find()");

        throw $r4;

        catch com.parse.ParseException from label04 to label05 with label06;
        catch com.parse.ParseException from label07 to label08 with label09;
    }

    private com.parse.ParseQuery whereSatifiesAnyOf(java.util.List)
    {
        com.parse.ParseQuery r0;
        java.util.List $r1;
        java.util.HashMap $r2;

        r0 := @this: com.parse.ParseQuery;

        $r1 := @parameter0: java.util.List;

        $r2 = r0.<com.parse.ParseQuery: java.util.HashMap where>;

        virtualinvoke $r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("$or", $r1);

        return r0;
    }

    public com.parse.ParseQuery addAscendingOrder(java.lang.String)
    {
        com.parse.ParseQuery r0;
        java.lang.StringBuilder $r3;
        java.lang.String $r1, $r2;

        r0 := @this: com.parse.ParseQuery;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.parse.ParseQuery: void checkIfRunning(boolean)>(0);

        $r2 = r0.<com.parse.ParseQuery: java.lang.String order>;

        if $r2 != null goto label1;

        r0.<com.parse.ParseQuery: java.lang.String order> = $r1;

        return r0;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<com.parse.ParseQuery: java.lang.String order>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<com.parse.ParseQuery: java.lang.String order> = $r1;

        return r0;
    }

    public com.parse.ParseQuery addDescendingOrder(java.lang.String)
    {
        com.parse.ParseQuery r0;
        java.lang.StringBuilder $r3;
        java.lang.String $r1, $r2;

        r0 := @this: com.parse.ParseQuery;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.parse.ParseQuery: void checkIfRunning(boolean)>(0);

        $r2 = r0.<com.parse.ParseQuery: java.lang.String order>;

        if $r2 != null goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("-");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<com.parse.ParseQuery: java.lang.String order> = $r1;

        return r0;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<com.parse.ParseQuery: java.lang.String order>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",-");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<com.parse.ParseQuery: java.lang.String order> = $r1;

        return r0;
    }

    public void cancel()
    {
        com.parse.a $r2;
        com.parse.ParseQuery r0;
        java.lang.Boolean $r1;
        com.parse.l $r3;

        r0 := @this: com.parse.ParseQuery;

        $r2 = r0.<com.parse.ParseQuery: com.parse.a currentTask>;

        if $r2 == null goto label1;

        $r2 = r0.<com.parse.ParseQuery: com.parse.a currentTask>;

        virtualinvoke $r2.<com.parse.a: boolean cancel(boolean)>(1);

        r0.<com.parse.ParseQuery: com.parse.a currentTask> = null;

     label1:
        $r3 = r0.<com.parse.ParseQuery: com.parse.l currentCommand>;

        if $r3 == null goto label2;

        $r3 = r0.<com.parse.ParseQuery: com.parse.l currentCommand>;

        virtualinvoke $r3.<com.parse.l: void e()>();

        r0.<com.parse.ParseQuery: com.parse.l currentCommand> = null;

     label2:
        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        r0.<com.parse.ParseQuery: java.lang.Boolean isRunning> = $r1;

        return;
    }

    public void clearCachedResult()
    {
        com.parse.ParseQuery r0;
        com.parse.l $r1;
        java.lang.String $r2;

        r0 := @this: com.parse.ParseQuery;

        $r1 = specialinvoke r0.<com.parse.ParseQuery: com.parse.l makeFindCommand()>();

        $r2 = virtualinvoke $r1.<com.parse.l: java.lang.String b()>();

        staticinvoke <com.parse.Parse: void clearFromKeyValueCache(java.lang.String)>($r2);

        return;
    }

    public int count()
    {
        com.parse.ParseQuery r0;
        int $i0;

        r0 := @this: com.parse.ParseQuery;

        $i0 = virtualinvoke r0.<com.parse.ParseQuery: int count(boolean)>(1);

        return $i0;
    }

    protected int count(boolean)
    {
        java.lang.Throwable $r2;
        com.parse.ParseQuery$CachePolicy $r1;
        com.parse.ParseQuery r0;
        int $i0;
        boolean $z0;

        r0 := @this: com.parse.ParseQuery;

        $z0 := @parameter0: boolean;

        goto label1;

     label1:
        $r1 = r0.<com.parse.ParseQuery: com.parse.ParseQuery$CachePolicy cachePolicy>;

        $i0 = specialinvoke r0.<com.parse.ParseQuery: int countWithCachePolicy(com.parse.ParseQuery$CachePolicy)>($r1);

     label2:
        specialinvoke r0.<com.parse.ParseQuery: void finishedRunning()>();

        return $i0;

     label3:
        $r2 := @caughtexception;

        specialinvoke r0.<com.parse.ParseQuery: void finishedRunning()>();

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void countInBackground(com.parse.CountCallback)
    {
        com.parse.ParseQuery r0;
        com.parse.CountCallback $r1;
        com.parse.aw $r2;

        r0 := @this: com.parse.ParseQuery;

        $r1 := @parameter0: com.parse.CountCallback;

        specialinvoke r0.<com.parse.ParseQuery: void checkIfRunning(boolean)>(1);

        $r2 = new com.parse.aw;

        specialinvoke $r2.<com.parse.aw: void <init>(com.parse.ParseQuery,com.parse.k)>(r0, $r1);

        r0.<com.parse.ParseQuery: com.parse.a currentTask> = $r2;

        staticinvoke <com.parse.a: int a(com.parse.a)>($r2);

        return;
    }

    public java.util.List find()
    {
        com.parse.ParseQuery r0;
        java.util.List $r1;

        r0 := @this: com.parse.ParseQuery;

        $r1 = virtualinvoke r0.<com.parse.ParseQuery: java.util.List find(boolean)>(1);

        return $r1;
    }

    public java.util.List find(boolean)
    {
        java.lang.Throwable $r3;
        java.util.List $r2;
        com.parse.ParseQuery$CachePolicy $r1;
        com.parse.ParseQuery r0;
        long $l0;
        boolean $z0;

        r0 := @this: com.parse.ParseQuery;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.parse.ParseQuery: void checkIfRunning(boolean)>(1);

     label1:
        $l0 = staticinvoke <java.lang.System: long nanoTime()>();

        r0.<com.parse.ParseQuery: long queryStart> = $l0;

     label2:
        $r1 = r0.<com.parse.ParseQuery: com.parse.ParseQuery$CachePolicy cachePolicy>;

        $r2 = specialinvoke r0.<com.parse.ParseQuery: java.util.List findWithCachePolicy(com.parse.ParseQuery$CachePolicy)>($r1);

     label3:
        specialinvoke r0.<com.parse.ParseQuery: void finishedRunning()>();

        return $r2;

     label4:
        $r3 := @caughtexception;

        specialinvoke r0.<com.parse.ParseQuery: void finishedRunning()>();

        throw $r3;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public void findInBackground(com.parse.FindCallback)
    {
        com.parse.au $r5;
        com.parse.ParseQuery r0;
        com.parse.ParseException $r6;
        long $l0;
        java.util.List $r4;
        com.parse.ParseQuery$CachePolicy $r2, $r3;
        com.parse.FindCallback $r1;

        r0 := @this: com.parse.ParseQuery;

        $r1 := @parameter0: com.parse.FindCallback;

        specialinvoke r0.<com.parse.ParseQuery: void checkIfRunning(boolean)>(1);

        $l0 = staticinvoke <java.lang.System: long nanoTime()>();

        r0.<com.parse.ParseQuery: long queryStart> = $l0;

        $r2 = r0.<com.parse.ParseQuery: com.parse.ParseQuery$CachePolicy cachePolicy>;

        $r3 = <com.parse.ParseQuery$CachePolicy: com.parse.ParseQuery$CachePolicy CACHE_THEN_NETWORK>;

        if $r2 != $r3 goto label5;

        $r2 = <com.parse.ParseQuery$CachePolicy: com.parse.ParseQuery$CachePolicy CACHE_ONLY>;

     label1:
        $r4 = specialinvoke r0.<com.parse.ParseQuery: java.util.List findWithCachePolicy(com.parse.ParseQuery$CachePolicy)>($r2);

        virtualinvoke $r1.<com.parse.FindCallback: void done(java.util.List,com.parse.ParseException)>($r4, null);

     label2:
        $r2 = <com.parse.ParseQuery$CachePolicy: com.parse.ParseQuery$CachePolicy NETWORK_ONLY>;

     label3:
        $r5 = new com.parse.au;

        specialinvoke $r5.<com.parse.au: void <init>(com.parse.ParseQuery,com.parse.k,com.parse.ParseQuery$CachePolicy)>(r0, $r1, $r2);

        r0.<com.parse.ParseQuery: com.parse.a currentTask> = $r5;

        staticinvoke <com.parse.a: int a(com.parse.a)>($r5);

        return;

     label4:
        $r6 := @caughtexception;

        virtualinvoke $r1.<com.parse.FindCallback: void done(java.util.List,com.parse.ParseException)>(null, $r6);

        goto label2;

     label5:
        $r2 = r0.<com.parse.ParseQuery: com.parse.ParseQuery$CachePolicy cachePolicy>;

        goto label3;

        catch com.parse.ParseException from label1 to label2 with label4;
    }

    public com.parse.ParseObject get(java.lang.String)
    {
        com.parse.ParseQuery r0;
        java.lang.String $r1;
        com.parse.ParseObject $r2;

        r0 := @this: com.parse.ParseQuery;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<com.parse.ParseQuery: com.parse.ParseObject get(java.lang.String,boolean)>($r1, 1);

        return $r2;
    }

    protected com.parse.ParseObject get(java.lang.String, boolean)
    {
        com.parse.ParseQuery r0;
        java.util.HashMap $r3, $r4;
        java.lang.String $r1;
        com.parse.ParseObject $r2;
        boolean $z0;

        r0 := @this: com.parse.ParseQuery;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        r0.<com.parse.ParseQuery: int skip> = -1;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<com.parse.ParseQuery: java.util.HashMap where> = $r4;

        $r3 = r0.<com.parse.ParseQuery: java.util.HashMap where>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("objectId", $r1);

        $r2 = virtualinvoke r0.<com.parse.ParseQuery: com.parse.ParseObject getFirst(boolean)>(0);

        return $r2;
    }

    public com.parse.ParseQuery$CachePolicy getCachePolicy()
    {
        com.parse.ParseQuery r0;
        com.parse.ParseQuery$CachePolicy r1;

        r0 := @this: com.parse.ParseQuery;

        r1 = r0.<com.parse.ParseQuery: com.parse.ParseQuery$CachePolicy cachePolicy>;

        return r1;
    }

    public java.lang.String getClassName()
    {
        com.parse.ParseQuery r0;
        java.lang.String r1;

        r0 := @this: com.parse.ParseQuery;

        r1 = r0.<com.parse.ParseQuery: java.lang.String className>;

        return r1;
    }

    public com.parse.ParseObject getFirst()
    {
        com.parse.ParseQuery r0;
        com.parse.ParseObject $r1;

        r0 := @this: com.parse.ParseQuery;

        $r1 = virtualinvoke r0.<com.parse.ParseQuery: com.parse.ParseObject getFirst(boolean)>(1);

        return $r1;
    }

    protected com.parse.ParseObject getFirst(boolean)
    {
        java.util.List $r1;
        com.parse.ParseQuery r0;
        int $i0;
        com.parse.ParseException $r4;
        java.lang.Object $r2;
        com.parse.ParseObject $r3;
        boolean $z0;

        r0 := @this: com.parse.ParseQuery;

        $z0 := @parameter0: boolean;

        goto label1;

     label1:
        r0.<com.parse.ParseQuery: int limit> = 1;

        $r1 = virtualinvoke r0.<com.parse.ParseQuery: java.util.List find(boolean)>(0);

        if $r1 == null goto label2;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 <= 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (com.parse.ParseObject) $r2;

        return $r3;

     label2:
        $r4 = new com.parse.ParseException;

        specialinvoke $r4.<com.parse.ParseException: void <init>(int,java.lang.String)>(101, "no results matched the query");

        throw $r4;
    }

    public void getFirstInBackground(com.parse.GetCallback)
    {
        com.parse.ParseQuery r0;
        com.parse.GetCallback $r1;
        com.parse.av $r2;

        r0 := @this: com.parse.ParseQuery;

        $r1 := @parameter0: com.parse.GetCallback;

        virtualinvoke r0.<com.parse.ParseQuery: void setLimit(int)>(1);

        $r2 = new com.parse.av;

        specialinvoke $r2.<com.parse.av: void <init>(com.parse.ParseQuery,com.parse.GetCallback)>(r0, $r1);

        virtualinvoke r0.<com.parse.ParseQuery: void findInBackground(com.parse.FindCallback)>($r2);

        return;
    }

    public void getInBackground(java.lang.String, com.parse.GetCallback)
    {
        com.parse.ax $r3;
        com.parse.ParseQuery r0;
        java.lang.String $r1;
        com.parse.GetCallback $r2;

        r0 := @this: com.parse.ParseQuery;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: com.parse.GetCallback;

        specialinvoke r0.<com.parse.ParseQuery: void checkIfRunning(boolean)>(1);

        $r3 = new com.parse.ax;

        specialinvoke $r3.<com.parse.ax: void <init>(com.parse.ParseQuery,com.parse.k,java.lang.String)>(r0, $r2, $r1);

        r0.<com.parse.ParseQuery: com.parse.a currentTask> = $r3;

        staticinvoke <com.parse.a: int a(com.parse.a)>($r3);

        return;
    }

    public int getLimit()
    {
        com.parse.ParseQuery r0;
        int i0;

        r0 := @this: com.parse.ParseQuery;

        i0 = r0.<com.parse.ParseQuery: int limit>;

        return i0;
    }

    public long getMaxCacheAge()
    {
        com.parse.ParseQuery r0;
        long l0;

        r0 := @this: com.parse.ParseQuery;

        l0 = r0.<com.parse.ParseQuery: long maxCacheAge>;

        return l0;
    }

    public int getSkip()
    {
        com.parse.ParseQuery r0;
        int i0;

        r0 := @this: com.parse.ParseQuery;

        i0 = r0.<com.parse.ParseQuery: int skip>;

        return i0;
    }

    public boolean hasCachedResult()
    {
        com.parse.ParseQuery r0;
        long $l0;
        com.parse.l $r1;
        java.lang.String $r2;

        r0 := @this: com.parse.ParseQuery;

        $r1 = specialinvoke r0.<com.parse.ParseQuery: com.parse.l makeFindCommand()>();

        $r2 = virtualinvoke $r1.<com.parse.l: java.lang.String b()>();

        $l0 = r0.<com.parse.ParseQuery: long maxCacheAge>;

        $r2 = staticinvoke <com.parse.Parse: java.lang.String loadFromKeyValueCache(java.lang.String,long)>($r2, $l0);

        if $r2 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public void include(java.lang.String)
    {
        com.parse.ParseQuery r0;
        java.lang.String $r1;
        java.util.ArrayList $r2;

        r0 := @this: com.parse.ParseQuery;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.parse.ParseQuery: void checkIfRunning(boolean)>(0);

        $r2 = r0.<com.parse.ParseQuery: java.util.ArrayList include>;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r1);

        return;
    }

    public com.parse.ParseQuery orderByAscending(java.lang.String)
    {
        com.parse.ParseQuery r0;
        java.lang.String $r1;

        r0 := @this: com.parse.ParseQuery;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.parse.ParseQuery: void checkIfRunning(boolean)>(0);

        r0.<com.parse.ParseQuery: java.lang.String order> = $r1;

        return r0;
    }

    public com.parse.ParseQuery orderByDescending(java.lang.String)
    {
        com.parse.ParseQuery r0;
        java.lang.StringBuilder $r2;
        java.lang.String $r1;

        r0 := @this: com.parse.ParseQuery;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.parse.ParseQuery: void checkIfRunning(boolean)>(0);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("-");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<com.parse.ParseQuery: java.lang.String order> = $r1;

        return r0;
    }

    public void setCachePolicy(com.parse.ParseQuery$CachePolicy)
    {
        com.parse.ParseQuery r0;
        com.parse.ParseQuery$CachePolicy $r1;

        r0 := @this: com.parse.ParseQuery;

        $r1 := @parameter0: com.parse.ParseQuery$CachePolicy;

        specialinvoke r0.<com.parse.ParseQuery: void checkIfRunning(boolean)>(0);

        r0.<com.parse.ParseQuery: com.parse.ParseQuery$CachePolicy cachePolicy> = $r1;

        return;
    }

    public void setLimit(int)
    {
        com.parse.ParseQuery r0;
        int $i0;

        r0 := @this: com.parse.ParseQuery;

        $i0 := @parameter0: int;

        specialinvoke r0.<com.parse.ParseQuery: void checkIfRunning(boolean)>(0);

        r0.<com.parse.ParseQuery: int limit> = $i0;

        return;
    }

    public void setMaxCacheAge(long)
    {
        com.parse.ParseQuery r0;
        long $l0;

        r0 := @this: com.parse.ParseQuery;

        $l0 := @parameter0: long;

        r0.<com.parse.ParseQuery: long maxCacheAge> = $l0;

        return;
    }

    public void setSkip(int)
    {
        com.parse.ParseQuery r0;
        int $i0;

        r0 := @this: com.parse.ParseQuery;

        $i0 := @parameter0: int;

        specialinvoke r0.<com.parse.ParseQuery: void checkIfRunning(boolean)>(0);

        r0.<com.parse.ParseQuery: int skip> = $i0;

        return;
    }

    public void setTrace(boolean)
    {
        com.parse.ParseQuery r0;
        boolean $z0;

        r0 := @this: com.parse.ParseQuery;

        $z0 := @parameter0: boolean;

        r0.<com.parse.ParseQuery: boolean trace> = $z0;

        return;
    }

    public com.parse.ParseQuery whereContainedIn(java.lang.String, java.util.Collection)
    {
        java.util.Iterator $r4;
        java.util.Collection $r2;
        com.parse.ParseQuery r0;
        java.lang.Object $r5;
        java.lang.String $r1;
        org.json.JSONArray $r3;
        boolean $z0;

        r0 := @this: com.parse.ParseQuery;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.util.Collection;

        $r3 = new org.json.JSONArray;

        specialinvoke $r3.<org.json.JSONArray: void <init>()>();

        $r4 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r5 = staticinvoke <com.parse.Parse: java.lang.Object maybeReferenceAndEncode(java.lang.Object)>($r5);

        virtualinvoke $r3.<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>($r5);

        goto label1;

     label2:
        specialinvoke r0.<com.parse.ParseQuery: void addCondition(java.lang.String,java.lang.String,java.lang.Object)>("objectId", "$in", $r3);

        return r0;
    }

    public com.parse.ParseQuery whereContains(java.lang.String, java.lang.String)
    {
        com.parse.ParseQuery r0;
        java.lang.String $r1, $r2;

        r0 := @this: com.parse.ParseQuery;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r2 = staticinvoke <java.util.regex.Pattern: java.lang.String quote(java.lang.String)>($r2);

        virtualinvoke r0.<com.parse.ParseQuery: com.parse.ParseQuery whereMatches(java.lang.String,java.lang.String)>($r1, $r2);

        return r0;
    }

    public com.parse.ParseQuery whereDoesNotExist(java.lang.String)
    {
        com.parse.ParseQuery r0;
        java.lang.Boolean $r2;
        java.lang.String $r1;

        r0 := @this: com.parse.ParseQuery;

        $r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        specialinvoke r0.<com.parse.ParseQuery: void addCondition(java.lang.String,java.lang.String,java.lang.Object)>($r1, "$exists", $r2);

        return r0;
    }

    public com.parse.ParseQuery whereDoesNotMatchQuery(java.lang.String, com.parse.ParseQuery)
    {
        com.parse.ParseQuery r0, $r2;
        java.lang.String $r1;

        r0 := @this: com.parse.ParseQuery;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: com.parse.ParseQuery;

        specialinvoke r0.<com.parse.ParseQuery: void addCondition(java.lang.String,java.lang.String,java.lang.Object)>($r1, "$notInQuery", $r2);

        return r0;
    }

    public com.parse.ParseQuery whereEndsWith(java.lang.String, java.lang.String)
    {
        com.parse.ParseQuery r0;
        java.lang.StringBuilder $r3;
        java.lang.String $r1, $r2;

        r0 := @this: com.parse.ParseQuery;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r2 = staticinvoke <java.util.regex.Pattern: java.lang.String quote(java.lang.String)>($r2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("$");

        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.parse.ParseQuery: com.parse.ParseQuery whereMatches(java.lang.String,java.lang.String)>($r1, $r2);

        return r0;
    }

    public com.parse.ParseQuery whereEqualTo(java.lang.String, java.lang.Object)
    {
        java.util.Date $r3;
        com.parse.ParseQuery r0;
        java.lang.Object $r2;
        java.util.HashMap $r4;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: com.parse.ParseQuery;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object;

        specialinvoke r0.<com.parse.ParseQuery: void checkIfRunning(boolean)>(0);

        $z0 = $r2 instanceof java.util.Date;

        if $z0 == 0 goto label1;

        $r3 = (java.util.Date) $r2;

        $r2 = staticinvoke <com.parse.Parse: org.json.JSONObject dateToObject(java.util.Date)>($r3);

     label1:
        $r4 = r0.<com.parse.ParseQuery: java.util.HashMap where>;

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        return r0;
    }

    public com.parse.ParseQuery whereExists(java.lang.String)
    {
        com.parse.ParseQuery r0;
        java.lang.Boolean $r2;
        java.lang.String $r1;

        r0 := @this: com.parse.ParseQuery;

        $r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        specialinvoke r0.<com.parse.ParseQuery: void addCondition(java.lang.String,java.lang.String,java.lang.Object)>($r1, "$exists", $r2);

        return r0;
    }

    public com.parse.ParseQuery whereGreaterThan(java.lang.String, java.lang.Object)
    {
        com.parse.ParseQuery r0;
        java.lang.Object $r2;
        java.lang.String $r1;

        r0 := @this: com.parse.ParseQuery;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object;

        specialinvoke r0.<com.parse.ParseQuery: void addCondition(java.lang.String,java.lang.String,java.lang.Object)>($r1, "$gt", $r2);

        return r0;
    }

    public com.parse.ParseQuery whereGreaterThanOrEqualTo(java.lang.String, java.lang.Object)
    {
        com.parse.ParseQuery r0;
        java.lang.Object $r2;
        java.lang.String $r1;

        r0 := @this: com.parse.ParseQuery;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object;

        specialinvoke r0.<com.parse.ParseQuery: void addCondition(java.lang.String,java.lang.String,java.lang.Object)>($r1, "$gte", $r2);

        return r0;
    }

    public com.parse.ParseQuery whereLessThan(java.lang.String, java.lang.Object)
    {
        com.parse.ParseQuery r0;
        java.lang.Object $r2;
        java.lang.String $r1;

        r0 := @this: com.parse.ParseQuery;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object;

        specialinvoke r0.<com.parse.ParseQuery: void addCondition(java.lang.String,java.lang.String,java.lang.Object)>($r1, "$lt", $r2);

        return r0;
    }

    public com.parse.ParseQuery whereLessThanOrEqualTo(java.lang.String, java.lang.Object)
    {
        com.parse.ParseQuery r0;
        java.lang.Object $r2;
        java.lang.String $r1;

        r0 := @this: com.parse.ParseQuery;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object;

        specialinvoke r0.<com.parse.ParseQuery: void addCondition(java.lang.String,java.lang.String,java.lang.Object)>($r1, "$lte", $r2);

        return r0;
    }

    public com.parse.ParseQuery whereMatches(java.lang.String, java.lang.String)
    {
        com.parse.ParseQuery r0;
        java.lang.String $r1, $r2;

        r0 := @this: com.parse.ParseQuery;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        specialinvoke r0.<com.parse.ParseQuery: void addCondition(java.lang.String,java.lang.String,java.lang.Object)>($r1, "$regex", $r2);

        return r0;
    }

    public com.parse.ParseQuery whereMatches(java.lang.String, java.lang.String, java.lang.String)
    {
        com.parse.ParseQuery r0;
        int $i0;
        java.lang.String $r1, $r2, $r3;

        r0 := @this: com.parse.ParseQuery;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        specialinvoke r0.<com.parse.ParseQuery: void addCondition(java.lang.String,java.lang.String,java.lang.Object)>($r1, "$regex", $r2);

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i0 == 0 goto label1;

        specialinvoke r0.<com.parse.ParseQuery: void addCondition(java.lang.String,java.lang.String,java.lang.Object)>($r1, "$options", $r3);

     label1:
        return r0;
    }

    public com.parse.ParseQuery whereMatchesKeyInQuery(java.lang.String, java.lang.String, com.parse.ParseQuery)
    {
        org.json.JSONException $r5;
        org.json.JSONObject $r4;
        com.parse.ParseQuery r0, $r3;
        java.lang.String $r1, $r2;
        java.lang.RuntimeException $r6;

        r0 := @this: com.parse.ParseQuery;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: com.parse.ParseQuery;

        $r4 = new org.json.JSONObject;

        specialinvoke $r4.<org.json.JSONObject: void <init>()>();

     label1:
        virtualinvoke $r4.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("key", $r2);

        virtualinvoke $r4.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("query", $r3);

     label2:
        specialinvoke r0.<com.parse.ParseQuery: void addCondition(java.lang.String,java.lang.String,java.lang.Object)>($r1, "$select", $r4);

        return r0;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r5);

        throw $r6;

        catch org.json.JSONException from label1 to label2 with label3;
    }

    public com.parse.ParseQuery whereMatchesQuery(java.lang.String, com.parse.ParseQuery)
    {
        com.parse.ParseQuery r0, $r2;
        java.lang.String $r1;

        r0 := @this: com.parse.ParseQuery;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: com.parse.ParseQuery;

        specialinvoke r0.<com.parse.ParseQuery: void addCondition(java.lang.String,java.lang.String,java.lang.Object)>($r1, "$inQuery", $r2);

        return r0;
    }

    public com.parse.ParseQuery whereNear(java.lang.String, com.parse.ParseGeoPoint)
    {
        com.parse.ParseQuery r0;
        java.lang.String $r1;
        com.parse.ParseGeoPoint $r2;

        r0 := @this: com.parse.ParseQuery;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: com.parse.ParseGeoPoint;

        specialinvoke r0.<com.parse.ParseQuery: void addCondition(java.lang.String,java.lang.String,java.lang.Object)>($r1, "$nearSphere", $r2);

        return r0;
    }

    public com.parse.ParseQuery whereNotContainedIn(java.lang.String, java.util.Collection)
    {
        java.util.Iterator $r4;
        java.util.Collection $r2;
        com.parse.ParseQuery r0;
        java.lang.Object $r5;
        java.lang.String $r1;
        org.json.JSONArray $r3;
        boolean $z0;

        r0 := @this: com.parse.ParseQuery;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.util.Collection;

        $r3 = new org.json.JSONArray;

        specialinvoke $r3.<org.json.JSONArray: void <init>()>();

        $r4 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r5 = staticinvoke <com.parse.Parse: java.lang.Object maybeReferenceAndEncode(java.lang.Object)>($r5);

        virtualinvoke $r3.<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>($r5);

        goto label1;

     label2:
        specialinvoke r0.<com.parse.ParseQuery: void addCondition(java.lang.String,java.lang.String,java.lang.Object)>($r1, "$nin", $r3);

        return r0;
    }

    public com.parse.ParseQuery whereNotEqualTo(java.lang.String, java.lang.Object)
    {
        com.parse.ParseQuery r0;
        java.lang.Object $r2;
        java.lang.String $r1;

        r0 := @this: com.parse.ParseQuery;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object;

        specialinvoke r0.<com.parse.ParseQuery: void addCondition(java.lang.String,java.lang.String,java.lang.Object)>($r1, "$ne", $r2);

        return r0;
    }

    com.parse.ParseQuery whereRelatedTo(com.parse.ParseObject, java.lang.String)
    {
        com.parse.ParseQuery r0;
        java.lang.Object $r3;
        java.lang.String $r2;
        com.parse.ParseObject $r1;

        r0 := @this: com.parse.ParseQuery;

        $r1 := @parameter0: com.parse.ParseObject;

        $r2 := @parameter1: java.lang.String;

        $r3 = staticinvoke <com.parse.Parse: java.lang.Object maybeReferenceAndEncode(java.lang.Object)>($r1);

        specialinvoke r0.<com.parse.ParseQuery: void addCondition(java.lang.String,java.lang.String,java.lang.Object)>("$relatedTo", "object", $r3);

        specialinvoke r0.<com.parse.ParseQuery: void addCondition(java.lang.String,java.lang.String,java.lang.Object)>("$relatedTo", "key", $r2);

        return r0;
    }

    public com.parse.ParseQuery whereStartsWith(java.lang.String, java.lang.String)
    {
        com.parse.ParseQuery r0;
        java.lang.StringBuilder $r3;
        java.lang.String $r1, $r2;

        r0 := @this: com.parse.ParseQuery;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("^");

        $r2 = staticinvoke <java.util.regex.Pattern: java.lang.String quote(java.lang.String)>($r2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.parse.ParseQuery: com.parse.ParseQuery whereMatches(java.lang.String,java.lang.String)>($r1, $r2);

        return r0;
    }

    public com.parse.ParseQuery whereWithinGeoBox(java.lang.String, com.parse.ParseGeoPoint, com.parse.ParseGeoPoint)
    {
        com.parse.ParseGeoPoint $r2, $r3;
        com.parse.ParseQuery r0;
        java.lang.Object $r5;
        java.util.HashMap $r6;
        java.lang.String $r1;
        java.util.ArrayList $r4;

        r0 := @this: com.parse.ParseQuery;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: com.parse.ParseGeoPoint;

        $r3 := @parameter2: com.parse.ParseGeoPoint;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = staticinvoke <com.parse.Parse: java.lang.Object maybeReferenceAndEncode(java.lang.Object)>($r2);

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

        $r5 = staticinvoke <com.parse.Parse: java.lang.Object maybeReferenceAndEncode(java.lang.Object)>($r3);

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("$box", $r4);

        specialinvoke r0.<com.parse.ParseQuery: void addCondition(java.lang.String,java.lang.String,java.lang.Object)>($r1, "$within", $r6);

        return r0;
    }

    public com.parse.ParseQuery whereWithinKilometers(java.lang.String, com.parse.ParseGeoPoint, double)
    {
        com.parse.ParseGeoPoint $r2;
        com.parse.ParseQuery r0;
        java.lang.String $r1;
        double $d0, $d1;

        r0 := @this: com.parse.ParseQuery;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: com.parse.ParseGeoPoint;

        $d0 := @parameter2: double;

        $d1 = <com.parse.ParseGeoPoint: double EARTH_MEAN_RADIUS_KM>;

        $d0 = $d0 / $d1;

        virtualinvoke r0.<com.parse.ParseQuery: com.parse.ParseQuery whereWithinRadians(java.lang.String,com.parse.ParseGeoPoint,double)>($r1, $r2, $d0);

        return r0;
    }

    public com.parse.ParseQuery whereWithinMiles(java.lang.String, com.parse.ParseGeoPoint, double)
    {
        com.parse.ParseGeoPoint $r2;
        com.parse.ParseQuery r0;
        java.lang.String $r1;
        double $d0, $d1;

        r0 := @this: com.parse.ParseQuery;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: com.parse.ParseGeoPoint;

        $d0 := @parameter2: double;

        $d1 = <com.parse.ParseGeoPoint: double EARTH_MEAN_RADIUS_MILE>;

        $d0 = $d0 / $d1;

        virtualinvoke r0.<com.parse.ParseQuery: com.parse.ParseQuery whereWithinRadians(java.lang.String,com.parse.ParseGeoPoint,double)>($r1, $r2, $d0);

        return r0;
    }

    public com.parse.ParseQuery whereWithinRadians(java.lang.String, com.parse.ParseGeoPoint, double)
    {
        java.lang.Double $r3;
        com.parse.ParseGeoPoint $r2;
        com.parse.ParseQuery r0;
        java.lang.String $r1;
        double $d0;

        r0 := @this: com.parse.ParseQuery;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: com.parse.ParseGeoPoint;

        $d0 := @parameter2: double;

        specialinvoke r0.<com.parse.ParseQuery: void addCondition(java.lang.String,java.lang.String,java.lang.Object)>($r1, "$nearSphere", $r2);

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        specialinvoke r0.<com.parse.ParseQuery: void addCondition(java.lang.String,java.lang.String,java.lang.Object)>($r1, "$maxDistance", $r3);

        return r0;
    }

    public static void <clinit>()
    {
        <com.parse.ParseQuery: java.lang.String TAG> = "com.parse.ParseQuery";

        return;
    }
}
