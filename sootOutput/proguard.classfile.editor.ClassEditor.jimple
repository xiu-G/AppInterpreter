public class proguard.classfile.editor.ClassEditor extends java.lang.Object
{
    private static final boolean DEBUG;
    private proguard.classfile.ProgramClass targetClass;

    public void <init>(proguard.classfile.ProgramClass)
    {
        proguard.classfile.ProgramClass $r1;
        proguard.classfile.editor.ClassEditor r0;

        r0 := @this: proguard.classfile.editor.ClassEditor;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<proguard.classfile.editor.ClassEditor: proguard.classfile.ProgramClass targetClass> = $r1;

        return;
    }

    private int findFieldIndex(proguard.classfile.Field)
    {
        proguard.classfile.ProgramField[] $r3;
        proguard.classfile.editor.ClassEditor r0;
        proguard.classfile.Field $r1;
        proguard.classfile.ProgramClass $r2;
        proguard.classfile.ProgramField $r4;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: proguard.classfile.editor.ClassEditor;

        $r1 := @parameter0: proguard.classfile.Field;

        $r2 = r0.<proguard.classfile.editor.ClassEditor: proguard.classfile.ProgramClass targetClass>;

        $i0 = $r2.<proguard.classfile.ProgramClass: int u2fieldsCount>;

        $r2 = r0.<proguard.classfile.editor.ClassEditor: proguard.classfile.ProgramClass targetClass>;

        $r3 = $r2.<proguard.classfile.ProgramClass: proguard.classfile.ProgramField[] fields>;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $r4 = $r3[$i1];

        $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        return $i1;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return $i0;
    }

    private int findInterfaceIndex(int)
    {
        int[] $r2;
        proguard.classfile.editor.ClassEditor r0;
        int $i0, $i1, $i2, $i3;
        proguard.classfile.ProgramClass $r1;

        r0 := @this: proguard.classfile.editor.ClassEditor;

        $i0 := @parameter0: int;

        $r1 = r0.<proguard.classfile.editor.ClassEditor: proguard.classfile.ProgramClass targetClass>;

        $i2 = $r1.<proguard.classfile.ProgramClass: int u2interfacesCount>;

        $r1 = r0.<proguard.classfile.editor.ClassEditor: proguard.classfile.ProgramClass targetClass>;

        $r2 = $r1.<proguard.classfile.ProgramClass: int[] u2interfaces>;

        $i3 = 0;

     label1:
        if $i3 >= $i2 goto label3;

        $i1 = $r2[$i3];

        if $i1 != $i0 goto label2;

        return $i3;

     label2:
        $i3 = $i3 + 1;

        goto label1;

     label3:
        return $i2;
    }

    private int findMethodIndex(proguard.classfile.Method)
    {
        proguard.classfile.ProgramMethod[] $r3;
        proguard.classfile.editor.ClassEditor r0;
        proguard.classfile.ProgramClass $r2;
        proguard.classfile.ProgramMethod $r4;
        int $i0, $i1;
        proguard.classfile.Method $r1;
        boolean $z0;

        r0 := @this: proguard.classfile.editor.ClassEditor;

        $r1 := @parameter0: proguard.classfile.Method;

        $r2 = r0.<proguard.classfile.editor.ClassEditor: proguard.classfile.ProgramClass targetClass>;

        $i0 = $r2.<proguard.classfile.ProgramClass: int u2methodsCount>;

        $r2 = r0.<proguard.classfile.editor.ClassEditor: proguard.classfile.ProgramClass targetClass>;

        $r3 = $r2.<proguard.classfile.ProgramClass: proguard.classfile.ProgramMethod[] methods>;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $r4 = $r3[$i1];

        $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        return $i1;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return $i0;
    }

    public void addField(proguard.classfile.Field)
    {
        proguard.classfile.ProgramField[] $r3, $r4;
        proguard.classfile.editor.ClassEditor r0;
        proguard.classfile.Field $r1;
        proguard.classfile.ProgramClass $r2;
        int $i0, $i1;
        proguard.classfile.Field[] $r5;

        r0 := @this: proguard.classfile.editor.ClassEditor;

        $r1 := @parameter0: proguard.classfile.Field;

        $r2 = r0.<proguard.classfile.editor.ClassEditor: proguard.classfile.ProgramClass targetClass>;

        $i0 = $r2.<proguard.classfile.ProgramClass: int u2fieldsCount>;

        $r2 = r0.<proguard.classfile.editor.ClassEditor: proguard.classfile.ProgramClass targetClass>;

        $r3 = $r2.<proguard.classfile.ProgramClass: proguard.classfile.ProgramField[] fields>;

        $i1 = lengthof $r3;

        if $i1 > $i0 goto label2;

        $r2 = r0.<proguard.classfile.editor.ClassEditor: proguard.classfile.ProgramClass targetClass>;

        $i1 = $i0 + 1;

        $r4 = newarray (proguard.classfile.ProgramField)[$i1];

        $r2.<proguard.classfile.ProgramClass: proguard.classfile.ProgramField[] fields> = $r4;

        $r2 = r0.<proguard.classfile.editor.ClassEditor: proguard.classfile.ProgramClass targetClass>;

        $r4 = $r2.<proguard.classfile.ProgramClass: proguard.classfile.ProgramField[] fields>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r4, 0, $i0);

        $r2 = r0.<proguard.classfile.editor.ClassEditor: proguard.classfile.ProgramClass targetClass>;

        $r5 = $r2.<proguard.classfile.ProgramClass: proguard.classfile.ProgramField[] fields>;

     label1:
        $r2 = r0.<proguard.classfile.editor.ClassEditor: proguard.classfile.ProgramClass targetClass>;

        $i0 = $r2.<proguard.classfile.ProgramClass: int u2fieldsCount>;

        $i1 = $i0 + 1;

        $r2.<proguard.classfile.ProgramClass: int u2fieldsCount> = $i1;

        $r5[$i0] = $r1;

        return;

     label2:
        $r5 = $r3;

        goto label1;
    }

    public void addInterface(int)
    {
        int[] $r2, $r3;
        proguard.classfile.editor.ClassEditor r0;
        int $i0, $i1, $i2;
        proguard.classfile.ProgramClass $r1;

        r0 := @this: proguard.classfile.editor.ClassEditor;

        $i0 := @parameter0: int;

        $r1 = r0.<proguard.classfile.editor.ClassEditor: proguard.classfile.ProgramClass targetClass>;

        $i1 = $r1.<proguard.classfile.ProgramClass: int u2interfacesCount>;

        $r1 = r0.<proguard.classfile.editor.ClassEditor: proguard.classfile.ProgramClass targetClass>;

        $r2 = $r1.<proguard.classfile.ProgramClass: int[] u2interfaces>;

        $i2 = lengthof $r2;

        if $i2 > $i1 goto label2;

        $r1 = r0.<proguard.classfile.editor.ClassEditor: proguard.classfile.ProgramClass targetClass>;

        $i2 = $i1 + 1;

        $r3 = newarray (int)[$i2];

        $r1.<proguard.classfile.ProgramClass: int[] u2interfaces> = $r3;

        $r1 = r0.<proguard.classfile.editor.ClassEditor: proguard.classfile.ProgramClass targetClass>;

        $r3 = $r1.<proguard.classfile.ProgramClass: int[] u2interfaces>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r3, 0, $i1);

        $r1 = r0.<proguard.classfile.editor.ClassEditor: proguard.classfile.ProgramClass targetClass>;

        $r2 = $r1.<proguard.classfile.ProgramClass: int[] u2interfaces>;

     label1:
        $r1 = r0.<proguard.classfile.editor.ClassEditor: proguard.classfile.ProgramClass targetClass>;

        $i1 = $r1.<proguard.classfile.ProgramClass: int u2interfacesCount>;

        $i2 = $i1 + 1;

        $r1.<proguard.classfile.ProgramClass: int u2interfacesCount> = $i2;

        $r2[$i1] = $i0;

        return;

     label2:
        goto label1;
    }

    public void addMethod(proguard.classfile.Method)
    {
        proguard.classfile.Method[] $r5;
        proguard.classfile.ProgramMethod[] $r3, $r4;
        proguard.classfile.editor.ClassEditor r0;
        proguard.classfile.ProgramClass $r2;
        int $i0, $i1;
        proguard.classfile.Method $r1;

        r0 := @this: proguard.classfile.editor.ClassEditor;

        $r1 := @parameter0: proguard.classfile.Method;

        $r2 = r0.<proguard.classfile.editor.ClassEditor: proguard.classfile.ProgramClass targetClass>;

        $i0 = $r2.<proguard.classfile.ProgramClass: int u2methodsCount>;

        $r2 = r0.<proguard.classfile.editor.ClassEditor: proguard.classfile.ProgramClass targetClass>;

        $r3 = $r2.<proguard.classfile.ProgramClass: proguard.classfile.ProgramMethod[] methods>;

        $i1 = lengthof $r3;

        if $i1 > $i0 goto label2;

        $r2 = r0.<proguard.classfile.editor.ClassEditor: proguard.classfile.ProgramClass targetClass>;

        $i1 = $i0 + 1;

        $r4 = newarray (proguard.classfile.ProgramMethod)[$i1];

        $r2.<proguard.classfile.ProgramClass: proguard.classfile.ProgramMethod[] methods> = $r4;

        $r2 = r0.<proguard.classfile.editor.ClassEditor: proguard.classfile.ProgramClass targetClass>;

        $r4 = $r2.<proguard.classfile.ProgramClass: proguard.classfile.ProgramMethod[] methods>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r4, 0, $i0);

        $r2 = r0.<proguard.classfile.editor.ClassEditor: proguard.classfile.ProgramClass targetClass>;

        $r5 = $r2.<proguard.classfile.ProgramClass: proguard.classfile.ProgramMethod[] methods>;

     label1:
        $r2 = r0.<proguard.classfile.editor.ClassEditor: proguard.classfile.ProgramClass targetClass>;

        $i0 = $r2.<proguard.classfile.ProgramClass: int u2methodsCount>;

        $i1 = $i0 + 1;

        $r2.<proguard.classfile.ProgramClass: int u2methodsCount> = $i1;

        $r5[$i0] = $r1;

        return;

     label2:
        $r5 = $r3;

        goto label1;
    }

    public void removeField(proguard.classfile.Field)
    {
        proguard.classfile.ProgramField[] $r3;
        proguard.classfile.editor.ClassEditor r0;
        int $i0, $i1, $i2;
        proguard.classfile.Field $r1;
        proguard.classfile.ProgramClass $r2;

        r0 := @this: proguard.classfile.editor.ClassEditor;

        $r1 := @parameter0: proguard.classfile.Field;

        $r2 = r0.<proguard.classfile.editor.ClassEditor: proguard.classfile.ProgramClass targetClass>;

        $i2 = $r2.<proguard.classfile.ProgramClass: int u2fieldsCount>;

        $r2 = r0.<proguard.classfile.editor.ClassEditor: proguard.classfile.ProgramClass targetClass>;

        $r3 = $r2.<proguard.classfile.ProgramClass: proguard.classfile.ProgramField[] fields>;

        $i1 = specialinvoke r0.<proguard.classfile.editor.ClassEditor: int findFieldIndex(proguard.classfile.Field)>($r1);

        $i0 = $i1 + 1;

        $i2 = $i2 - $i1;

        $i2 = $i2 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, $i0, $r3, $i1, $i2);

        $r2 = r0.<proguard.classfile.editor.ClassEditor: proguard.classfile.ProgramClass targetClass>;

        $i0 = $r2.<proguard.classfile.ProgramClass: int u2fieldsCount>;

        $i0 = $i0 - 1;

        $r2.<proguard.classfile.ProgramClass: int u2fieldsCount> = $i0;

        $r3[$i0] = null;

        return;
    }

    public void removeInterface(int)
    {
        int[] $r2;
        proguard.classfile.editor.ClassEditor r0;
        int $i0, $i1, $i2;
        proguard.classfile.ProgramClass $r1;

        r0 := @this: proguard.classfile.editor.ClassEditor;

        $i0 := @parameter0: int;

        $r1 = r0.<proguard.classfile.editor.ClassEditor: proguard.classfile.ProgramClass targetClass>;

        $i2 = $r1.<proguard.classfile.ProgramClass: int u2interfacesCount>;

        $r1 = r0.<proguard.classfile.editor.ClassEditor: proguard.classfile.ProgramClass targetClass>;

        $r2 = $r1.<proguard.classfile.ProgramClass: int[] u2interfaces>;

        $i1 = specialinvoke r0.<proguard.classfile.editor.ClassEditor: int findInterfaceIndex(int)>($i0);

        $i0 = $i1 + 1;

        $i2 = $i2 - $i1;

        $i2 = $i2 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i0, $r2, $i1, $i2);

        $r1 = r0.<proguard.classfile.editor.ClassEditor: proguard.classfile.ProgramClass targetClass>;

        $i0 = $r1.<proguard.classfile.ProgramClass: int u2interfacesCount>;

        $i0 = $i0 - 1;

        $r1.<proguard.classfile.ProgramClass: int u2interfacesCount> = $i0;

        $r2[$i0] = 0;

        return;
    }

    public void removeMethod(proguard.classfile.Method)
    {
        proguard.classfile.ProgramMethod[] $r3;
        proguard.classfile.editor.ClassEditor r0;
        int $i0, $i1, $i2;
        proguard.classfile.Method $r1;
        proguard.classfile.ProgramClass $r2;

        r0 := @this: proguard.classfile.editor.ClassEditor;

        $r1 := @parameter0: proguard.classfile.Method;

        $r2 = r0.<proguard.classfile.editor.ClassEditor: proguard.classfile.ProgramClass targetClass>;

        $i2 = $r2.<proguard.classfile.ProgramClass: int u2methodsCount>;

        $r2 = r0.<proguard.classfile.editor.ClassEditor: proguard.classfile.ProgramClass targetClass>;

        $r3 = $r2.<proguard.classfile.ProgramClass: proguard.classfile.ProgramMethod[] methods>;

        $i1 = specialinvoke r0.<proguard.classfile.editor.ClassEditor: int findMethodIndex(proguard.classfile.Method)>($r1);

        $i0 = $i1 + 1;

        $i2 = $i2 - $i1;

        $i2 = $i2 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, $i0, $r3, $i1, $i2);

        $r2 = r0.<proguard.classfile.editor.ClassEditor: proguard.classfile.ProgramClass targetClass>;

        $i0 = $r2.<proguard.classfile.ProgramClass: int u2methodsCount>;

        $i0 = $i0 - 1;

        $r2.<proguard.classfile.ProgramClass: int u2methodsCount> = $i0;

        $r3[$i0] = null;

        return;
    }
}
