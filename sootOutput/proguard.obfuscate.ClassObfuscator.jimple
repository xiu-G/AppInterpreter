public class proguard.obfuscate.ClassObfuscator extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.visitor.ClassVisitor, proguard.classfile.attribute.visitor.AttributeVisitor, proguard.classfile.attribute.visitor.InnerClassesInfoVisitor, proguard.classfile.constant.visitor.ConstantVisitor
{
    private final boolean allowAccessModification;
    private final proguard.obfuscate.DictionaryNameFactory classNameFactory;
    private final java.util.Set classNamesToAvoid;
    private final java.lang.String flattenPackageHierarchy;
    private final proguard.util.StringMatcher keepPackageNamesMatcher;
    private java.lang.String newClassName;
    private boolean numericClassName;
    private final proguard.obfuscate.DictionaryNameFactory packageNameFactory;
    private final java.util.Map packagePrefixClassNameFactoryMap;
    private final java.util.Map packagePrefixMap;
    private final java.util.Map packagePrefixNumericClassNameFactoryMap;
    private final java.util.Map packagePrefixPackageNameFactoryMap;
    private final java.lang.String repackageClasses;
    private final boolean useMixedCaseClassNames;

    public void <init>(proguard.classfile.ClassPool, proguard.obfuscate.DictionaryNameFactory, proguard.obfuscate.DictionaryNameFactory, boolean, java.util.List, java.lang.String, java.lang.String, boolean)
    {
        proguard.util.ListParser $r14;
        proguard.util.FileNameParser $r7;
        java.util.HashMap $r9;
        proguard.classfile.ClassPool $r1;
        java.util.HashSet $r8;
        proguard.obfuscate.ClassObfuscator$MyKeepCollector $r13;
        java.lang.StringBuffer $r10;
        java.util.Map $r12;
        int $i0;
        proguard.obfuscate.DictionaryNameFactory $r2, $r3;
        java.lang.String $r5, $r6;
        boolean $z0, $z1;
        proguard.obfuscate.ClassObfuscator r0;
        proguard.util.StringMatcher $r11;
        java.util.List $r4;

        r0 := @this: proguard.obfuscate.ClassObfuscator;

        $r1 := @parameter0: proguard.classfile.ClassPool;

        $r2 := @parameter1: proguard.obfuscate.DictionaryNameFactory;

        $r3 := @parameter2: proguard.obfuscate.DictionaryNameFactory;

        $z0 := @parameter3: boolean;

        $r4 := @parameter4: java.util.List;

        $r5 := @parameter5: java.lang.String;

        $r6 := @parameter6: java.lang.String;

        $z1 := @parameter7: boolean;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        $r8 = new java.util.HashSet;

        specialinvoke $r8.<java.util.HashSet: void <init>()>();

        r0.<proguard.obfuscate.ClassObfuscator: java.util.Set classNamesToAvoid> = $r8;

        $r9 = new java.util.HashMap;

        specialinvoke $r9.<java.util.HashMap: void <init>()>();

        r0.<proguard.obfuscate.ClassObfuscator: java.util.Map packagePrefixMap> = $r9;

        $r9 = new java.util.HashMap;

        specialinvoke $r9.<java.util.HashMap: void <init>()>();

        r0.<proguard.obfuscate.ClassObfuscator: java.util.Map packagePrefixPackageNameFactoryMap> = $r9;

        $r9 = new java.util.HashMap;

        specialinvoke $r9.<java.util.HashMap: void <init>()>();

        r0.<proguard.obfuscate.ClassObfuscator: java.util.Map packagePrefixClassNameFactoryMap> = $r9;

        $r9 = new java.util.HashMap;

        specialinvoke $r9.<java.util.HashMap: void <init>()>();

        r0.<proguard.obfuscate.ClassObfuscator: java.util.Map packagePrefixNumericClassNameFactoryMap> = $r9;

        r0.<proguard.obfuscate.ClassObfuscator: proguard.obfuscate.DictionaryNameFactory classNameFactory> = $r2;

        r0.<proguard.obfuscate.ClassObfuscator: proguard.obfuscate.DictionaryNameFactory packageNameFactory> = $r3;

        if $r5 == null goto label6;

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i0 <= 0 goto label6;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r10 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(47);

        $r5 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

     label1:
        if $r6 == null goto label5;

        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i0 <= 0 goto label5;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r10 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(47);

        $r6 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

     label2:
        r0.<proguard.obfuscate.ClassObfuscator: boolean useMixedCaseClassNames> = $z0;

        if $r4 != null goto label4;

        $r11 = null;

     label3:
        r0.<proguard.obfuscate.ClassObfuscator: proguard.util.StringMatcher keepPackageNamesMatcher> = $r11;

        r0.<proguard.obfuscate.ClassObfuscator: java.lang.String flattenPackageHierarchy> = $r5;

        r0.<proguard.obfuscate.ClassObfuscator: java.lang.String repackageClasses> = $r6;

        r0.<proguard.obfuscate.ClassObfuscator: boolean allowAccessModification> = $z1;

        $r12 = r0.<proguard.obfuscate.ClassObfuscator: java.util.Map packagePrefixMap>;

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("", "");

        $r13 = new proguard.obfuscate.ClassObfuscator$MyKeepCollector;

        specialinvoke $r13.<proguard.obfuscate.ClassObfuscator$MyKeepCollector: void <init>(proguard.obfuscate.ClassObfuscator,proguard.obfuscate.ClassObfuscator$1)>(r0, null);

        virtualinvoke $r1.<proguard.classfile.ClassPool: void classesAccept(proguard.classfile.visitor.ClassVisitor)>($r13);

        return;

     label4:
        $r14 = new proguard.util.ListParser;

        $r7 = new proguard.util.FileNameParser;

        specialinvoke $r7.<proguard.util.FileNameParser: void <init>()>();

        specialinvoke $r14.<proguard.util.ListParser: void <init>(proguard.util.StringParser)>($r7);

        $r11 = virtualinvoke $r14.<proguard.util.ListParser: proguard.util.StringMatcher parse(java.util.List)>($r4);

        goto label3;

     label5:
        goto label2;

     label6:
        goto label1;
    }

    static java.lang.String access$100(proguard.obfuscate.ClassObfuscator, java.lang.String)
    {
        proguard.obfuscate.ClassObfuscator $r0;
        java.lang.String $r1;

        $r0 := @parameter0: proguard.obfuscate.ClassObfuscator;

        $r1 := @parameter1: java.lang.String;

        $r1 = specialinvoke $r0.<proguard.obfuscate.ClassObfuscator: java.lang.String mixedCaseClassName(java.lang.String)>($r1);

        return $r1;
    }

    static java.util.Set access$200(proguard.obfuscate.ClassObfuscator)
    {
        proguard.obfuscate.ClassObfuscator $r0;
        java.util.Set r1;

        $r0 := @parameter0: proguard.obfuscate.ClassObfuscator;

        r1 = $r0.<proguard.obfuscate.ClassObfuscator: java.util.Set classNamesToAvoid>;

        return r1;
    }

    static java.lang.String access$300(proguard.obfuscate.ClassObfuscator)
    {
        proguard.obfuscate.ClassObfuscator $r0;
        java.lang.String r1;

        $r0 := @parameter0: proguard.obfuscate.ClassObfuscator;

        r1 = $r0.<proguard.obfuscate.ClassObfuscator: java.lang.String repackageClasses>;

        return r1;
    }

    static boolean access$400(proguard.obfuscate.ClassObfuscator)
    {
        proguard.obfuscate.ClassObfuscator $r0;
        boolean z0;

        $r0 := @parameter0: proguard.obfuscate.ClassObfuscator;

        z0 = $r0.<proguard.obfuscate.ClassObfuscator: boolean allowAccessModification>;

        return z0;
    }

    static java.lang.String access$500(proguard.obfuscate.ClassObfuscator)
    {
        proguard.obfuscate.ClassObfuscator $r0;
        java.lang.String r1;

        $r0 := @parameter0: proguard.obfuscate.ClassObfuscator;

        r1 = $r0.<proguard.obfuscate.ClassObfuscator: java.lang.String flattenPackageHierarchy>;

        return r1;
    }

    static java.util.Map access$600(proguard.obfuscate.ClassObfuscator)
    {
        proguard.obfuscate.ClassObfuscator $r0;
        java.util.Map r1;

        $r0 := @parameter0: proguard.obfuscate.ClassObfuscator;

        r1 = $r0.<proguard.obfuscate.ClassObfuscator: java.util.Map packagePrefixMap>;

        return r1;
    }

    private java.lang.String generateUniqueClassName(java.lang.String)
    {
        proguard.obfuscate.ClassObfuscator r0;
        proguard.obfuscate.SimpleNameFactory $r6;
        java.util.Map $r3;
        java.lang.Object $r4;
        java.lang.String $r1;
        proguard.obfuscate.DictionaryNameFactory $r2, $r7;
        proguard.obfuscate.NameFactory $r5;
        boolean $z0;

        r0 := @this: proguard.obfuscate.ClassObfuscator;

        $r1 := @parameter0: java.lang.String;

        $r3 = r0.<proguard.obfuscate.ClassObfuscator: java.util.Map packagePrefixClassNameFactoryMap>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r5 = (proguard.obfuscate.NameFactory) $r4;

        if $r5 != null goto label2;

        $r6 = new proguard.obfuscate.SimpleNameFactory;

        $r5 = $r6;

        $z0 = r0.<proguard.obfuscate.ClassObfuscator: boolean useMixedCaseClassNames>;

        specialinvoke $r6.<proguard.obfuscate.SimpleNameFactory: void <init>(boolean)>($z0);

        $r2 = r0.<proguard.obfuscate.ClassObfuscator: proguard.obfuscate.DictionaryNameFactory classNameFactory>;

        if $r2 == null goto label1;

        $r7 = new proguard.obfuscate.DictionaryNameFactory;

        $r2 = r0.<proguard.obfuscate.ClassObfuscator: proguard.obfuscate.DictionaryNameFactory classNameFactory>;

        specialinvoke $r7.<proguard.obfuscate.DictionaryNameFactory: void <init>(proguard.obfuscate.DictionaryNameFactory,proguard.obfuscate.NameFactory)>($r2, $r5);

        $r5 = $r7;

     label1:
        $r3 = r0.<proguard.obfuscate.ClassObfuscator: java.util.Map packagePrefixClassNameFactoryMap>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r5);

     label2:
        $r1 = specialinvoke r0.<proguard.obfuscate.ClassObfuscator: java.lang.String generateUniqueClassName(java.lang.String,proguard.obfuscate.NameFactory)>($r1, $r5);

        return $r1;
    }

    private java.lang.String generateUniqueClassName(java.lang.String, proguard.obfuscate.NameFactory)
    {
        proguard.obfuscate.ClassObfuscator r0;
        java.util.Set $r5;
        java.lang.StringBuffer $r3;
        java.lang.String $r1, $r4, $r6;
        proguard.obfuscate.NameFactory $r2;
        boolean $z0;

        r0 := @this: proguard.obfuscate.ClassObfuscator;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: proguard.obfuscate.NameFactory;

     label1:
        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r4 = interfaceinvoke $r2.<proguard.obfuscate.NameFactory: java.lang.String nextName()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        $r5 = r0.<proguard.obfuscate.ClassObfuscator: java.util.Set classNamesToAvoid>;

        $r6 = specialinvoke r0.<proguard.obfuscate.ClassObfuscator: java.lang.String mixedCaseClassName(java.lang.String)>($r4);

        $z0 = interfaceinvoke $r5.<java.util.Set: boolean contains(java.lang.Object)>($r6);

        if $z0 != 0 goto label1;

        return $r4;
    }

    private java.lang.String generateUniqueNumericClassName(java.lang.String)
    {
        proguard.obfuscate.ClassObfuscator r0;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String $r1;
        proguard.obfuscate.NumericNameFactory $r5;
        proguard.obfuscate.NameFactory $r4;

        r0 := @this: proguard.obfuscate.ClassObfuscator;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<proguard.obfuscate.ClassObfuscator: java.util.Map packagePrefixNumericClassNameFactoryMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (proguard.obfuscate.NameFactory) $r3;

        if $r4 != null goto label1;

        $r5 = new proguard.obfuscate.NumericNameFactory;

        $r4 = $r5;

        specialinvoke $r5.<proguard.obfuscate.NumericNameFactory: void <init>()>();

        $r2 = r0.<proguard.obfuscate.ClassObfuscator: java.util.Map packagePrefixNumericClassNameFactoryMap>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r4);

     label1:
        $r1 = specialinvoke r0.<proguard.obfuscate.ClassObfuscator: java.lang.String generateUniqueClassName(java.lang.String,proguard.obfuscate.NameFactory)>($r1, $r4);

        return $r1;
    }

    private java.lang.String generateUniquePackagePrefix(java.lang.String)
    {
        proguard.obfuscate.ClassObfuscator r0;
        proguard.obfuscate.SimpleNameFactory $r6;
        java.util.Map $r3;
        java.lang.Object $r4;
        java.lang.String $r1;
        proguard.obfuscate.DictionaryNameFactory $r2, $r7;
        proguard.obfuscate.NameFactory $r5;
        boolean $z0;

        r0 := @this: proguard.obfuscate.ClassObfuscator;

        $r1 := @parameter0: java.lang.String;

        $r3 = r0.<proguard.obfuscate.ClassObfuscator: java.util.Map packagePrefixPackageNameFactoryMap>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r5 = (proguard.obfuscate.NameFactory) $r4;

        if $r5 != null goto label2;

        $r6 = new proguard.obfuscate.SimpleNameFactory;

        $r5 = $r6;

        $z0 = r0.<proguard.obfuscate.ClassObfuscator: boolean useMixedCaseClassNames>;

        specialinvoke $r6.<proguard.obfuscate.SimpleNameFactory: void <init>(boolean)>($z0);

        $r2 = r0.<proguard.obfuscate.ClassObfuscator: proguard.obfuscate.DictionaryNameFactory packageNameFactory>;

        if $r2 == null goto label1;

        $r7 = new proguard.obfuscate.DictionaryNameFactory;

        $r2 = r0.<proguard.obfuscate.ClassObfuscator: proguard.obfuscate.DictionaryNameFactory packageNameFactory>;

        specialinvoke $r7.<proguard.obfuscate.DictionaryNameFactory: void <init>(proguard.obfuscate.DictionaryNameFactory,proguard.obfuscate.NameFactory)>($r2, $r5);

        $r5 = $r7;

     label1:
        $r3 = r0.<proguard.obfuscate.ClassObfuscator: java.util.Map packagePrefixPackageNameFactoryMap>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r5);

     label2:
        $r1 = specialinvoke r0.<proguard.obfuscate.ClassObfuscator: java.lang.String generateUniquePackagePrefix(java.lang.String,proguard.obfuscate.NameFactory)>($r1, $r5);

        return $r1;
    }

    private java.lang.String generateUniquePackagePrefix(java.lang.String, proguard.obfuscate.NameFactory)
    {
        proguard.obfuscate.ClassObfuscator r0;
        java.lang.StringBuffer $r3;
        java.util.Map $r5;
        java.lang.String $r1, $r4;
        proguard.obfuscate.NameFactory $r2;
        boolean $z0;

        r0 := @this: proguard.obfuscate.ClassObfuscator;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: proguard.obfuscate.NameFactory;

     label1:
        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r4 = interfaceinvoke $r2.<proguard.obfuscate.NameFactory: java.lang.String nextName()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(47);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        $r5 = r0.<proguard.obfuscate.ClassObfuscator: java.util.Map packagePrefixMap>;

        $z0 = interfaceinvoke $r5.<java.util.Map: boolean containsValue(java.lang.Object)>($r4);

        if $z0 != 0 goto label1;

        return $r4;
    }

    private boolean isNumericClassName(java.lang.String, java.lang.String)
    {
        proguard.obfuscate.ClassObfuscator r0;
        int $i0, $i1;
        char $c2;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: proguard.obfuscate.ClassObfuscator;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i0 = $i0 + 1;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 < $i1 goto label2;

        return 0;

     label1:
        $i0 = $i0 + 1;

     label2:
        if $i0 >= $i1 goto label3;

        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i0);

        $z0 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c2);

        if $z0 != 0 goto label1;

        return 0;

     label3:
        return 1;
    }

    private java.lang.String mixedCaseClassName(java.lang.String)
    {
        proguard.obfuscate.ClassObfuscator r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: proguard.obfuscate.ClassObfuscator;

        $r1 := @parameter0: java.lang.String;

        $z0 = r0.<proguard.obfuscate.ClassObfuscator: boolean useMixedCaseClassNames>;

        if $z0 == 0 goto label1;

        return $r1;

     label1:
        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        return $r1;
    }

    static java.lang.String newClassName(proguard.classfile.Clazz)
    {
        proguard.classfile.Clazz $r1;
        java.lang.Object $r0;
        java.lang.String $r2;
        boolean $z0;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r0 = interfaceinvoke $r1.<proguard.classfile.Clazz: java.lang.Object getVisitorInfo()>();

        $z0 = $r0 instanceof java.lang.String;

        if $z0 == 0 goto label1;

        $r2 = (java.lang.String) $r0;

        return $r2;

     label1:
        return null;
    }

    private java.lang.String newPackagePrefix(java.lang.String)
    {
        proguard.obfuscate.ClassObfuscator r0;
        proguard.util.StringMatcher $r5;
        java.util.Map $r2;
        int $i0;
        java.lang.Object $r3;
        java.lang.String $r1, $r4;
        boolean $z0;

        r0 := @this: proguard.obfuscate.ClassObfuscator;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<proguard.obfuscate.ClassObfuscator: java.util.Map packagePrefixMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (java.lang.String) $r3;

        if $r4 != null goto label7;

        $r5 = r0.<proguard.obfuscate.ClassObfuscator: proguard.util.StringMatcher keepPackageNamesMatcher>;

        if $r5 == null goto label3;

        $r5 = r0.<proguard.obfuscate.ClassObfuscator: proguard.util.StringMatcher keepPackageNamesMatcher>;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 <= 0 goto label2;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i0 = $i0 - 1;

        $r4 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

     label1:
        $z0 = interfaceinvoke $r5.<proguard.util.StringMatcher: boolean matches(java.lang.String)>($r4);

        if $z0 == 0 goto label3;

        return $r1;

     label2:
        $r4 = $r1;

        goto label1;

     label3:
        $r4 = r0.<proguard.obfuscate.ClassObfuscator: java.lang.String repackageClasses>;

        if $r4 == null goto label4;

        $r1 = r0.<proguard.obfuscate.ClassObfuscator: java.lang.String repackageClasses>;

        return $r1;

     label4:
        $r4 = r0.<proguard.obfuscate.ClassObfuscator: java.lang.String flattenPackageHierarchy>;

        if $r4 == null goto label6;

        $r4 = r0.<proguard.obfuscate.ClassObfuscator: java.lang.String flattenPackageHierarchy>;

     label5:
        $r4 = specialinvoke r0.<proguard.obfuscate.ClassObfuscator: java.lang.String generateUniquePackagePrefix(java.lang.String)>($r4);

        $r2 = r0.<proguard.obfuscate.ClassObfuscator: java.util.Map packagePrefixMap>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r4);

        return $r4;

     label6:
        $r4 = staticinvoke <proguard.classfile.util.ClassUtil: java.lang.String internalPackagePrefix(java.lang.String)>($r1);

        $r4 = specialinvoke r0.<proguard.obfuscate.ClassObfuscator: java.lang.String newPackagePrefix(java.lang.String)>($r4);

        goto label5;

     label7:
        return $r4;
    }

    static void setNewClassName(proguard.classfile.Clazz, java.lang.String)
    {
        java.lang.String $r1;
        proguard.classfile.Clazz $r0;

        $r0 := @parameter0: proguard.classfile.Clazz;

        $r1 := @parameter1: java.lang.String;

        interfaceinvoke $r0.<proguard.classfile.Clazz: void setVisitorInfo(java.lang.Object)>($r1);

        return;
    }

    public void visitAnyAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.Attribute)
    {
        proguard.obfuscate.ClassObfuscator r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.Attribute $r2;

        r0 := @this: proguard.obfuscate.ClassObfuscator;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.Attribute;

        return;
    }

    public void visitClassConstant(proguard.classfile.Clazz, proguard.classfile.constant.ClassConstant)
    {
        proguard.obfuscate.ClassObfuscator r0;
        proguard.classfile.constant.ClassConstant $r2;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.obfuscate.ClassObfuscator;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.constant.ClassConstant;

        virtualinvoke $r2.<proguard.classfile.constant.ClassConstant: void referencedClassAccept(proguard.classfile.visitor.ClassVisitor)>(r0);

        return;
    }

    public void visitEnclosingMethodAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.EnclosingMethodAttribute)
    {
        proguard.obfuscate.ClassObfuscator r0;
        proguard.classfile.attribute.EnclosingMethodAttribute $r2;
        proguard.classfile.Clazz $r1;
        int $i0;
        java.lang.String $r3, $r4;
        boolean $z0;

        r0 := @this: proguard.obfuscate.ClassObfuscator;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.EnclosingMethodAttribute;

        virtualinvoke $r2.<proguard.classfile.attribute.EnclosingMethodAttribute: void referencedClassAccept(proguard.classfile.visitor.ClassVisitor)>(r0);

        $r3 = interfaceinvoke $r1.<proguard.classfile.Clazz: java.lang.String getName()>();

        $i0 = $r2.<proguard.classfile.attribute.EnclosingMethodAttribute: int u2classIndex>;

        $r4 = interfaceinvoke $r1.<proguard.classfile.Clazz: java.lang.String getClassName(int)>($i0);

        $z0 = specialinvoke r0.<proguard.obfuscate.ClassObfuscator: boolean isNumericClassName(java.lang.String,java.lang.String)>($r3, $r4);

        r0.<proguard.obfuscate.ClassObfuscator: boolean numericClassName> = $z0;

        return;
    }

    public void visitInnerClassesAttribute(proguard.classfile.Clazz, proguard.classfile.attribute.InnerClassesAttribute)
    {
        proguard.obfuscate.ClassObfuscator r0;
        proguard.classfile.attribute.InnerClassesAttribute $r2;
        proguard.classfile.Clazz $r1;

        r0 := @this: proguard.obfuscate.ClassObfuscator;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.InnerClassesAttribute;

        virtualinvoke $r2.<proguard.classfile.attribute.InnerClassesAttribute: void innerClassEntriesAccept(proguard.classfile.Clazz,proguard.classfile.attribute.visitor.InnerClassesInfoVisitor)>($r1, r0);

        return;
    }

    public void visitInnerClassesInfo(proguard.classfile.Clazz, proguard.classfile.attribute.InnerClassesInfo)
    {
        proguard.obfuscate.ClassObfuscator r0;
        proguard.classfile.Clazz $r1;
        int $i0, $i1;
        java.lang.String $r3, $r4;
        proguard.classfile.attribute.InnerClassesInfo $r2;
        boolean $z0;

        r0 := @this: proguard.obfuscate.ClassObfuscator;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.InnerClassesInfo;

        $i0 = $r2.<proguard.classfile.attribute.InnerClassesInfo: int u2innerClassIndex>;

        $i1 = $r2.<proguard.classfile.attribute.InnerClassesInfo: int u2outerClassIndex>;

        if $i0 == 0 goto label1;

        if $i1 == 0 goto label1;

        $r3 = interfaceinvoke $r1.<proguard.classfile.Clazz: java.lang.String getClassName(int)>($i0);

        $r4 = interfaceinvoke $r1.<proguard.classfile.Clazz: java.lang.String getName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label1;

        interfaceinvoke $r1.<proguard.classfile.Clazz: void constantPoolEntryAccept(int,proguard.classfile.constant.visitor.ConstantVisitor)>($i1, r0);

        $r4 = interfaceinvoke $r1.<proguard.classfile.Clazz: java.lang.String getClassName(int)>($i1);

        $z0 = specialinvoke r0.<proguard.obfuscate.ClassObfuscator: boolean isNumericClassName(java.lang.String,java.lang.String)>($r3, $r4);

        r0.<proguard.obfuscate.ClassObfuscator: boolean numericClassName> = $z0;

     label1:
        return;
    }

    public void visitProgramClass(proguard.classfile.ProgramClass)
    {
        proguard.obfuscate.ClassObfuscator r0;
        java.lang.StringBuffer $r3;
        java.lang.String $r2, $r4;
        proguard.classfile.ProgramClass $r1;
        boolean $z0;

        r0 := @this: proguard.obfuscate.ClassObfuscator;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 = staticinvoke <proguard.obfuscate.ClassObfuscator: java.lang.String newClassName(proguard.classfile.Clazz)>($r1);

        r0.<proguard.obfuscate.ClassObfuscator: java.lang.String newClassName> = $r2;

        $r2 = r0.<proguard.obfuscate.ClassObfuscator: java.lang.String newClassName>;

        if $r2 != null goto label5;

        virtualinvoke $r1.<proguard.classfile.ProgramClass: void attributesAccept(proguard.classfile.attribute.visitor.AttributeVisitor)>(r0);

        $r2 = r0.<proguard.obfuscate.ClassObfuscator: java.lang.String newClassName>;

        if $r2 == null goto label3;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r2 = r0.<proguard.obfuscate.ClassObfuscator: java.lang.String newClassName>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(36);

        $r2 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

     label1:
        $r4 = r0.<proguard.obfuscate.ClassObfuscator: java.lang.String newClassName>;

        if $r4 == null goto label4;

        $z0 = r0.<proguard.obfuscate.ClassObfuscator: boolean numericClassName>;

        if $z0 == 0 goto label4;

        $r2 = specialinvoke r0.<proguard.obfuscate.ClassObfuscator: java.lang.String generateUniqueNumericClassName(java.lang.String)>($r2);

     label2:
        r0.<proguard.obfuscate.ClassObfuscator: java.lang.String newClassName> = $r2;

        $r2 = r0.<proguard.obfuscate.ClassObfuscator: java.lang.String newClassName>;

        staticinvoke <proguard.obfuscate.ClassObfuscator: void setNewClassName(proguard.classfile.Clazz,java.lang.String)>($r1, $r2);

        return;

     label3:
        $r2 = virtualinvoke $r1.<proguard.classfile.ProgramClass: java.lang.String getName()>();

        $r2 = staticinvoke <proguard.classfile.util.ClassUtil: java.lang.String internalPackagePrefix(java.lang.String)>($r2);

        $r2 = specialinvoke r0.<proguard.obfuscate.ClassObfuscator: java.lang.String newPackagePrefix(java.lang.String)>($r2);

        goto label1;

     label4:
        $r2 = specialinvoke r0.<proguard.obfuscate.ClassObfuscator: java.lang.String generateUniqueClassName(java.lang.String)>($r2);

        goto label2;

     label5:
        return;
    }
}
