class com.android.vending.licensing.LicenseValidator extends java.lang.Object
{
    private final com.android.vending.licensing.Policy a;
    private final com.android.vending.licensing.LicenseCheckerCallback b;
    private final int c;
    private final java.lang.String d;
    private final java.lang.String e;
    private final com.android.vending.licensing.DeviceLimiter f;

    void <init>(com.android.vending.licensing.Policy, com.android.vending.licensing.DeviceLimiter, com.android.vending.licensing.LicenseCheckerCallback, int, java.lang.String, java.lang.String)
    {
        com.android.vending.licensing.LicenseValidator r0;
        int $i0;
        com.android.vending.licensing.DeviceLimiter $r2;
        java.lang.String $r4, $r5;
        com.android.vending.licensing.Policy $r1;
        com.android.vending.licensing.LicenseCheckerCallback $r3;

        r0 := @this: com.android.vending.licensing.LicenseValidator;

        $r1 := @parameter0: com.android.vending.licensing.Policy;

        $r2 := @parameter1: com.android.vending.licensing.DeviceLimiter;

        $r3 := @parameter2: com.android.vending.licensing.LicenseCheckerCallback;

        $i0 := @parameter3: int;

        $r4 := @parameter4: java.lang.String;

        $r5 := @parameter5: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.vending.licensing.LicenseValidator: com.android.vending.licensing.Policy a> = $r1;

        r0.<com.android.vending.licensing.LicenseValidator: com.android.vending.licensing.DeviceLimiter f> = $r2;

        r0.<com.android.vending.licensing.LicenseValidator: com.android.vending.licensing.LicenseCheckerCallback b> = $r3;

        r0.<com.android.vending.licensing.LicenseValidator: int c> = $i0;

        r0.<com.android.vending.licensing.LicenseValidator: java.lang.String d> = $r4;

        r0.<com.android.vending.licensing.LicenseValidator: java.lang.String e> = $r5;

        return;
    }

    private void a(com.android.vending.licensing.Policy$LicenseResponse, com.android.vending.licensing.ResponseData)
    {
        com.android.vending.licensing.LicenseValidator r0;
        com.android.vending.licensing.ResponseData $r2;
        com.android.vending.licensing.Policy $r3;
        com.android.vending.licensing.Policy$LicenseResponse $r1;
        boolean $z0;
        com.android.vending.licensing.LicenseCheckerCallback $r4;

        r0 := @this: com.android.vending.licensing.LicenseValidator;

        $r1 := @parameter0: com.android.vending.licensing.Policy$LicenseResponse;

        $r2 := @parameter1: com.android.vending.licensing.ResponseData;

        $r3 = r0.<com.android.vending.licensing.LicenseValidator: com.android.vending.licensing.Policy a>;

        interfaceinvoke $r3.<com.android.vending.licensing.Policy: void a(com.android.vending.licensing.Policy$LicenseResponse,com.android.vending.licensing.ResponseData)>($r1, $r2);

        $r3 = r0.<com.android.vending.licensing.LicenseValidator: com.android.vending.licensing.Policy a>;

        $z0 = interfaceinvoke $r3.<com.android.vending.licensing.Policy: boolean a()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<com.android.vending.licensing.LicenseValidator: com.android.vending.licensing.LicenseCheckerCallback b>;

        interfaceinvoke $r4.<com.android.vending.licensing.LicenseCheckerCallback: void allow()>();

        return;

     label1:
        $r4 = r0.<com.android.vending.licensing.LicenseValidator: com.android.vending.licensing.LicenseCheckerCallback b>;

        interfaceinvoke $r4.<com.android.vending.licensing.LicenseCheckerCallback: void dontAllow()>();

        return;
    }

    public final com.android.vending.licensing.LicenseCheckerCallback a()
    {
        com.android.vending.licensing.LicenseValidator r0;
        com.android.vending.licensing.LicenseCheckerCallback r1;

        r0 := @this: com.android.vending.licensing.LicenseValidator;

        r1 = r0.<com.android.vending.licensing.LicenseValidator: com.android.vending.licensing.LicenseCheckerCallback b>;

        return r1;
    }

    public final void a(java.security.PublicKey, int, java.lang.String, java.lang.String)
    {
        java.lang.Throwable $r8, $r10, $r12, $r17;
        byte[] $r6;
        com.android.vending.licensing.ResponseData $r4;
        java.lang.String[] $r20;
        long $l2;
        com.android.vending.licensing.LicenseValidator r0;
        int $i0, $i1, $i3;
        com.android.vending.licensing.DeviceLimiter $r21;
        java.lang.String $r2, $r3, $r19;
        boolean $z0;
        java.util.Iterator $r15;
        com.android.vending.licensing.a.b $r13;
        java.security.Signature $r5;
        java.security.PublicKey $r1;
        java.lang.RuntimeException $r9;
        com.android.vending.licensing.LicenseCheckerCallback$ApplicationErrorCode $r11;
        java.lang.IllegalArgumentException $r16;
        com.android.vending.licensing.Policy$LicenseResponse $r22;
        android.text.TextUtils$SimpleStringSplitter $r14;
        java.lang.Object $r18;
        com.android.vending.licensing.LicenseCheckerCallback $r7;

        r0 := @this: com.android.vending.licensing.LicenseValidator;

        $r1 := @parameter0: java.security.PublicKey;

        $i0 := @parameter1: int;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: java.lang.String;

        $r4 = null;

        if $i0 == 0 goto label01;

        if $i0 == 1 goto label01;

        if $i0 != 2 goto label38;

     label01:
        $r5 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>("SHA1withRSA");

        virtualinvoke $r5.<java.security.Signature: void initVerify(java.security.PublicKey)>($r1);

        $r6 = virtualinvoke $r2.<java.lang.String: byte[] getBytes()>();

        virtualinvoke $r5.<java.security.Signature: void update(byte[])>($r6);

        $r6 = staticinvoke <com.android.vending.licensing.a.a: byte[] a(java.lang.String)>($r3);

        $z0 = virtualinvoke $r5.<java.security.Signature: boolean verify(byte[])>($r6);

     label02:
        if $z0 != 0 goto label11;

     label03:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LicenseValidator", "Signature verification failed.");

     label04:
        $r7 = r0.<com.android.vending.licensing.LicenseValidator: com.android.vending.licensing.LicenseCheckerCallback b>;

     label05:
        interfaceinvoke $r7.<com.android.vending.licensing.LicenseCheckerCallback: void dontAllow()>();

     label06:
        return;

     label07:
        $r8 := @caughtexception;

        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r8);

        throw $r9;

     label08:
        $r10 := @caughtexception;

        $r11 = <com.android.vending.licensing.LicenseCheckerCallback$ApplicationErrorCode: com.android.vending.licensing.LicenseCheckerCallback$ApplicationErrorCode d>;

        $r7 = r0.<com.android.vending.licensing.LicenseValidator: com.android.vending.licensing.LicenseCheckerCallback b>;

        interfaceinvoke $r7.<com.android.vending.licensing.LicenseCheckerCallback: void applicationError(com.android.vending.licensing.LicenseCheckerCallback$ApplicationErrorCode)>($r11);

        return;

     label09:
        $r12 := @caughtexception;

        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r12);

        throw $r9;

     label10:
        $r13 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LicenseValidator", "Could not Base64-decode signature.");

        $r7 = r0.<com.android.vending.licensing.LicenseValidator: com.android.vending.licensing.LicenseCheckerCallback b>;

        interfaceinvoke $r7.<com.android.vending.licensing.LicenseCheckerCallback: void dontAllow()>();

        return;

     label11:
        $r14 = new android.text.TextUtils$SimpleStringSplitter;

     label12:
        specialinvoke $r14.<android.text.TextUtils$SimpleStringSplitter: void <init>(char)>(58);

        interfaceinvoke $r14.<android.text.TextUtils$StringSplitter: void setString(java.lang.String)>($r2);

        $r15 = interfaceinvoke $r14.<android.text.TextUtils$StringSplitter: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

     label13:
        if $z0 != 0 goto label16;

        $r16 = new java.lang.IllegalArgumentException;

     label14:
        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Blank response.");

        throw $r16;

     label15:
        $r17 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LicenseValidator", "Could not parse response.");

        $r7 = r0.<com.android.vending.licensing.LicenseValidator: com.android.vending.licensing.LicenseCheckerCallback b>;

        interfaceinvoke $r7.<com.android.vending.licensing.LicenseCheckerCallback: void dontAllow()>();

        return;

     label16:
        $r18 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

     label17:
        $r2 = (java.lang.String) $r18;

     label18:
        $z0 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

     label19:
        if $z0 == 0 goto label48;

     label20:
        $r18 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

     label21:
        $r3 = (java.lang.String) $r18;

     label22:
        $r19 = staticinvoke <java.util.regex.Pattern: java.lang.String quote(java.lang.String)>("|");

        $r20 = staticinvoke <android.text.TextUtils: java.lang.String[] split(java.lang.String,java.lang.String)>($r2, $r19);

     label23:
        $i1 = lengthof $r20;

        if $i1 >= 6 goto label25;

        $r16 = new java.lang.IllegalArgumentException;

     label24:
        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Wrong number of fields.");

        throw $r16;

     label25:
        $r4 = new com.android.vending.licensing.ResponseData;

     label26:
        specialinvoke $r4.<com.android.vending.licensing.ResponseData: void <init>()>();

     label27:
        $r4.<com.android.vending.licensing.ResponseData: java.lang.String g> = $r3;

        $r2 = $r20[0];

     label28:
        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

     label29:
        $r4.<com.android.vending.licensing.ResponseData: int a> = $i1;

        $r2 = $r20[1];

     label30:
        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

     label31:
        $r4.<com.android.vending.licensing.ResponseData: int b> = $i1;

        $r2 = $r20[2];

        $r4.<com.android.vending.licensing.ResponseData: java.lang.String c> = $r2;

        $r2 = $r20[3];

        $r4.<com.android.vending.licensing.ResponseData: java.lang.String d> = $r2;

        $r2 = $r20[4];

        $r4.<com.android.vending.licensing.ResponseData: java.lang.String e> = $r2;

        $r2 = $r20[5];

     label32:
        $l2 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r2);

     label33:
        $r4.<com.android.vending.licensing.ResponseData: long f> = $l2;

        $i1 = $r4.<com.android.vending.licensing.ResponseData: int a>;

        if $i1 == $i0 goto label34;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LicenseValidator", "Response codes don\'t match.");

        $r7 = r0.<com.android.vending.licensing.LicenseValidator: com.android.vending.licensing.LicenseCheckerCallback b>;

        interfaceinvoke $r7.<com.android.vending.licensing.LicenseCheckerCallback: void dontAllow()>();

        return;

     label34:
        $i1 = $r4.<com.android.vending.licensing.ResponseData: int b>;

        $i3 = r0.<com.android.vending.licensing.LicenseValidator: int c>;

        if $i1 == $i3 goto label35;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LicenseValidator", "Nonce doesn\'t match.");

        $r7 = r0.<com.android.vending.licensing.LicenseValidator: com.android.vending.licensing.LicenseCheckerCallback b>;

        interfaceinvoke $r7.<com.android.vending.licensing.LicenseCheckerCallback: void dontAllow()>();

        return;

     label35:
        $r2 = $r4.<com.android.vending.licensing.ResponseData: java.lang.String c>;

        $r3 = r0.<com.android.vending.licensing.LicenseValidator: java.lang.String d>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label36;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LicenseValidator", "Package name doesn\'t match.");

        $r7 = r0.<com.android.vending.licensing.LicenseValidator: com.android.vending.licensing.LicenseCheckerCallback b>;

        interfaceinvoke $r7.<com.android.vending.licensing.LicenseCheckerCallback: void dontAllow()>();

        return;

     label36:
        $r2 = $r4.<com.android.vending.licensing.ResponseData: java.lang.String d>;

        $r3 = r0.<com.android.vending.licensing.LicenseValidator: java.lang.String e>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label37;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LicenseValidator", "Version codes don\'t match.");

        $r7 = r0.<com.android.vending.licensing.LicenseValidator: com.android.vending.licensing.LicenseCheckerCallback b>;

        interfaceinvoke $r7.<com.android.vending.licensing.LicenseCheckerCallback: void dontAllow()>();

        return;

     label37:
        $r2 = $r4.<com.android.vending.licensing.ResponseData: java.lang.String e>;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r2);

        if $z0 == 0 goto label38;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LicenseValidator", "User identifier is empty.");

        $r7 = r0.<com.android.vending.licensing.LicenseValidator: com.android.vending.licensing.LicenseCheckerCallback b>;

        interfaceinvoke $r7.<com.android.vending.licensing.LicenseCheckerCallback: void dontAllow()>();

        return;

     label38:
        lookupswitch($i0)
        {
            case 0: goto label40;
            case 1: goto label41;
            case 2: goto label40;
            case 3: goto label47;
            case 4: goto label43;
            case 5: goto label44;
            case 257: goto label42;
            case 258: goto label45;
            case 259: goto label46;
            default: goto label39;
        };

     label39:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LicenseValidator", "Unknown response code for license check.");

        $r7 = r0.<com.android.vending.licensing.LicenseValidator: com.android.vending.licensing.LicenseCheckerCallback b>;

        interfaceinvoke $r7.<com.android.vending.licensing.LicenseCheckerCallback: void dontAllow()>();

        return;

     label40:
        $r21 = r0.<com.android.vending.licensing.LicenseValidator: com.android.vending.licensing.DeviceLimiter f>;

        $r22 = interfaceinvoke $r21.<com.android.vending.licensing.DeviceLimiter: com.android.vending.licensing.Policy$LicenseResponse a()>();

        specialinvoke r0.<com.android.vending.licensing.LicenseValidator: void a(com.android.vending.licensing.Policy$LicenseResponse,com.android.vending.licensing.ResponseData)>($r22, $r4);

        return;

     label41:
        $r22 = <com.android.vending.licensing.Policy$LicenseResponse: com.android.vending.licensing.Policy$LicenseResponse b>;

        specialinvoke r0.<com.android.vending.licensing.LicenseValidator: void a(com.android.vending.licensing.Policy$LicenseResponse,com.android.vending.licensing.ResponseData)>($r22, $r4);

        return;

     label42:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LicenseValidator", "Error contacting licensing server.");

        $r22 = <com.android.vending.licensing.Policy$LicenseResponse: com.android.vending.licensing.Policy$LicenseResponse c>;

        specialinvoke r0.<com.android.vending.licensing.LicenseValidator: void a(com.android.vending.licensing.Policy$LicenseResponse,com.android.vending.licensing.ResponseData)>($r22, $r4);

        return;

     label43:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LicenseValidator", "An error has occurred on the licensing server.");

        $r22 = <com.android.vending.licensing.Policy$LicenseResponse: com.android.vending.licensing.Policy$LicenseResponse c>;

        specialinvoke r0.<com.android.vending.licensing.LicenseValidator: void a(com.android.vending.licensing.Policy$LicenseResponse,com.android.vending.licensing.ResponseData)>($r22, $r4);

        return;

     label44:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LicenseValidator", "Licensing server is refusing to talk to this device, over quota.");

        $r22 = <com.android.vending.licensing.Policy$LicenseResponse: com.android.vending.licensing.Policy$LicenseResponse c>;

        specialinvoke r0.<com.android.vending.licensing.LicenseValidator: void a(com.android.vending.licensing.Policy$LicenseResponse,com.android.vending.licensing.ResponseData)>($r22, $r4);

        return;

     label45:
        $r11 = <com.android.vending.licensing.LicenseCheckerCallback$ApplicationErrorCode: com.android.vending.licensing.LicenseCheckerCallback$ApplicationErrorCode a>;

        $r7 = r0.<com.android.vending.licensing.LicenseValidator: com.android.vending.licensing.LicenseCheckerCallback b>;

        interfaceinvoke $r7.<com.android.vending.licensing.LicenseCheckerCallback: void applicationError(com.android.vending.licensing.LicenseCheckerCallback$ApplicationErrorCode)>($r11);

        return;

     label46:
        $r11 = <com.android.vending.licensing.LicenseCheckerCallback$ApplicationErrorCode: com.android.vending.licensing.LicenseCheckerCallback$ApplicationErrorCode b>;

        $r7 = r0.<com.android.vending.licensing.LicenseValidator: com.android.vending.licensing.LicenseCheckerCallback b>;

        interfaceinvoke $r7.<com.android.vending.licensing.LicenseCheckerCallback: void applicationError(com.android.vending.licensing.LicenseCheckerCallback$ApplicationErrorCode)>($r11);

        return;

     label47:
        $r11 = <com.android.vending.licensing.LicenseCheckerCallback$ApplicationErrorCode: com.android.vending.licensing.LicenseCheckerCallback$ApplicationErrorCode c>;

        $r7 = r0.<com.android.vending.licensing.LicenseValidator: com.android.vending.licensing.LicenseCheckerCallback b>;

        interfaceinvoke $r7.<com.android.vending.licensing.LicenseCheckerCallback: void applicationError(com.android.vending.licensing.LicenseCheckerCallback$ApplicationErrorCode)>($r11);

        return;

     label48:
        $r3 = "";

        goto label22;

        catch java.security.NoSuchAlgorithmException from label01 to label02 with label07;
        catch java.security.NoSuchAlgorithmException from label03 to label04 with label07;
        catch java.security.NoSuchAlgorithmException from label05 to label06 with label07;
        catch java.security.InvalidKeyException from label01 to label02 with label08;
        catch java.security.InvalidKeyException from label03 to label04 with label08;
        catch java.security.InvalidKeyException from label05 to label06 with label08;
        catch java.security.SignatureException from label01 to label02 with label09;
        catch java.security.SignatureException from label03 to label04 with label09;
        catch java.security.SignatureException from label05 to label06 with label09;
        catch com.android.vending.licensing.a.b from label01 to label02 with label10;
        catch com.android.vending.licensing.a.b from label03 to label04 with label10;
        catch com.android.vending.licensing.a.b from label05 to label06 with label10;
        catch java.lang.IllegalArgumentException from label12 to label13 with label15;
        catch java.lang.IllegalArgumentException from label14 to label15 with label15;
        catch java.lang.IllegalArgumentException from label16 to label17 with label15;
        catch java.lang.IllegalArgumentException from label18 to label19 with label15;
        catch java.lang.IllegalArgumentException from label20 to label21 with label15;
        catch java.lang.IllegalArgumentException from label22 to label23 with label15;
        catch java.lang.IllegalArgumentException from label24 to label25 with label15;
        catch java.lang.IllegalArgumentException from label26 to label27 with label15;
        catch java.lang.IllegalArgumentException from label28 to label29 with label15;
        catch java.lang.IllegalArgumentException from label30 to label31 with label15;
        catch java.lang.IllegalArgumentException from label32 to label33 with label15;
    }

    public final int b()
    {
        int i0;
        com.android.vending.licensing.LicenseValidator r0;

        r0 := @this: com.android.vending.licensing.LicenseValidator;

        i0 = r0.<com.android.vending.licensing.LicenseValidator: int c>;

        return i0;
    }

    public final java.lang.String c()
    {
        com.android.vending.licensing.LicenseValidator r0;
        java.lang.String r1;

        r0 := @this: com.android.vending.licensing.LicenseValidator;

        r1 = r0.<com.android.vending.licensing.LicenseValidator: java.lang.String d>;

        return r1;
    }
}
