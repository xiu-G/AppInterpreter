public class proguard.optimize.peephole.InstructionSequencesReplacer extends proguard.classfile.instruction.visitor.MultiInstructionVisitor implements proguard.classfile.instruction.visitor.InstructionVisitor
{
    private static final int PATTERN_INDEX;
    private static final int REPLACEMENT_INDEX;

    public void <init>(proguard.classfile.constant.Constant[], proguard.classfile.instruction.Instruction[][][], proguard.optimize.peephole.BranchTargetFinder, proguard.classfile.editor.CodeAttributeEditor)
    {
        proguard.classfile.instruction.Instruction[][][] $r2;
        proguard.classfile.editor.CodeAttributeEditor $r4;
        proguard.classfile.constant.Constant[] $r1;
        proguard.optimize.peephole.InstructionSequencesReplacer r0;
        proguard.optimize.peephole.BranchTargetFinder $r3;

        r0 := @this: proguard.optimize.peephole.InstructionSequencesReplacer;

        $r1 := @parameter0: proguard.classfile.constant.Constant[];

        $r2 := @parameter1: proguard.classfile.instruction.Instruction[][][];

        $r3 := @parameter2: proguard.optimize.peephole.BranchTargetFinder;

        $r4 := @parameter3: proguard.classfile.editor.CodeAttributeEditor;

        specialinvoke r0.<proguard.optimize.peephole.InstructionSequencesReplacer: void <init>(proguard.classfile.constant.Constant[],proguard.classfile.instruction.Instruction[][][],proguard.optimize.peephole.BranchTargetFinder,proguard.classfile.editor.CodeAttributeEditor,proguard.classfile.instruction.visitor.InstructionVisitor)>($r1, $r2, $r3, $r4, null);

        return;
    }

    public void <init>(proguard.classfile.constant.Constant[], proguard.classfile.instruction.Instruction[][][], proguard.optimize.peephole.BranchTargetFinder, proguard.classfile.editor.CodeAttributeEditor, proguard.classfile.instruction.visitor.InstructionVisitor)
    {
        proguard.classfile.instruction.Instruction[][][] $r2;
        proguard.classfile.editor.CodeAttributeEditor $r4;
        proguard.classfile.constant.Constant[] $r1;
        proguard.classfile.instruction.visitor.InstructionVisitor[] $r6;
        proguard.optimize.peephole.InstructionSequencesReplacer r0;
        proguard.optimize.peephole.BranchTargetFinder $r3;
        proguard.classfile.instruction.visitor.InstructionVisitor $r5;

        r0 := @this: proguard.optimize.peephole.InstructionSequencesReplacer;

        $r1 := @parameter0: proguard.classfile.constant.Constant[];

        $r2 := @parameter1: proguard.classfile.instruction.Instruction[][][];

        $r3 := @parameter2: proguard.optimize.peephole.BranchTargetFinder;

        $r4 := @parameter3: proguard.classfile.editor.CodeAttributeEditor;

        $r5 := @parameter4: proguard.classfile.instruction.visitor.InstructionVisitor;

        $r6 = staticinvoke <proguard.optimize.peephole.InstructionSequencesReplacer: proguard.classfile.instruction.visitor.InstructionVisitor[] createInstructionSequenceReplacers(proguard.classfile.constant.Constant[],proguard.classfile.instruction.Instruction[][][],proguard.optimize.peephole.BranchTargetFinder,proguard.classfile.editor.CodeAttributeEditor,proguard.classfile.instruction.visitor.InstructionVisitor)>($r1, $r2, $r3, $r4, $r5);

        specialinvoke r0.<proguard.classfile.instruction.visitor.MultiInstructionVisitor: void <init>(proguard.classfile.instruction.visitor.InstructionVisitor[])>($r6);

        return;
    }

    private static proguard.classfile.instruction.visitor.InstructionVisitor[] createInstructionSequenceReplacers(proguard.classfile.constant.Constant[], proguard.classfile.instruction.Instruction[][][], proguard.optimize.peephole.BranchTargetFinder, proguard.classfile.editor.CodeAttributeEditor, proguard.classfile.instruction.visitor.InstructionVisitor)
    {
        proguard.classfile.instruction.Instruction[] $r5, $r9;
        proguard.classfile.instruction.Instruction[][] $r7;
        proguard.classfile.editor.CodeAttributeEditor $r3;
        proguard.optimize.peephole.InstructionSequenceReplacer[] $r6;
        proguard.optimize.peephole.BranchTargetFinder $r2;
        proguard.classfile.instruction.visitor.InstructionVisitor $r4;
        proguard.classfile.instruction.Instruction[][][] $r1;
        int $i0, $i1;
        proguard.optimize.peephole.InstructionSequenceReplacer $r8;
        proguard.classfile.constant.Constant[] $r0;

        $r0 := @parameter0: proguard.classfile.constant.Constant[];

        $r1 := @parameter1: proguard.classfile.instruction.Instruction[][][];

        $r2 := @parameter2: proguard.optimize.peephole.BranchTargetFinder;

        $r3 := @parameter3: proguard.classfile.editor.CodeAttributeEditor;

        $r4 := @parameter4: proguard.classfile.instruction.visitor.InstructionVisitor;

        $i0 = lengthof $r1;

        $r6 = newarray (proguard.optimize.peephole.InstructionSequenceReplacer)[$i0];

        $i0 = 0;

     label1:
        $i1 = lengthof $r6;

        if $i0 >= $i1 goto label2;

        $r7 = $r1[$i0];

        $r8 = new proguard.optimize.peephole.InstructionSequenceReplacer;

        $r5 = $r7[0];

        $r9 = $r7[1];

        specialinvoke $r8.<proguard.optimize.peephole.InstructionSequenceReplacer: void <init>(proguard.classfile.constant.Constant[],proguard.classfile.instruction.Instruction[],proguard.classfile.instruction.Instruction[],proguard.optimize.peephole.BranchTargetFinder,proguard.classfile.editor.CodeAttributeEditor,proguard.classfile.instruction.visitor.InstructionVisitor)>($r0, $r5, $r9, $r2, $r3, $r4);

        $r6[$i0] = $r8;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return $r6;
    }

    public static void <clinit>()
    {
        <proguard.optimize.peephole.InstructionSequencesReplacer: int REPLACEMENT_INDEX> = 1;

        <proguard.optimize.peephole.InstructionSequencesReplacer: int PATTERN_INDEX> = 0;

        return;
    }
}
