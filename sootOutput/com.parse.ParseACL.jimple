public class com.parse.ParseACL extends java.lang.Object
{
    private static final java.lang.String PUBLIC_KEY;
    private static final java.lang.String UNRESOLVED_KEY;
    private static com.parse.ParseACL defaultACL;
    private static boolean defaultACLUsesCurrentUser;
    private static com.parse.ParseACL defaultACLWithCurrentUser;
    private static java.lang.ref.WeakReference lastCurrentUser;
    private org.json.JSONObject permissionsById;
    private boolean shared;
    private com.parse.ParseUser unresolvedUser;

    public void <init>()
    {
        org.json.JSONObject $r1;
        com.parse.ParseACL r0;

        r0 := @this: com.parse.ParseACL;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.json.JSONObject;

        specialinvoke $r1.<org.json.JSONObject: void <init>()>();

        r0.<com.parse.ParseACL: org.json.JSONObject permissionsById> = $r1;

        return;
    }

    public void <init>(com.parse.ParseUser)
    {
        com.parse.ParseACL r0;
        com.parse.ParseUser $r1;

        r0 := @this: com.parse.ParseACL;

        $r1 := @parameter0: com.parse.ParseUser;

        specialinvoke r0.<com.parse.ParseACL: void <init>()>();

        virtualinvoke r0.<com.parse.ParseACL: void setReadAccess(com.parse.ParseUser,boolean)>($r1, 1);

        virtualinvoke r0.<com.parse.ParseACL: void setWriteAccess(com.parse.ParseUser,boolean)>($r1, 1);

        return;
    }

    static void access$000(com.parse.ParseACL, com.parse.ParseUser)
    {
        com.parse.ParseACL $r0;
        com.parse.ParseUser $r1;

        $r0 := @parameter0: com.parse.ParseACL;

        $r1 := @parameter1: com.parse.ParseUser;

        specialinvoke $r0.<com.parse.ParseACL: void resolveUser(com.parse.ParseUser)>($r1);

        return;
    }

    static com.parse.ParseACL createACLFromJSONObject(org.json.JSONObject)
    {
        java.util.Iterator $r3, $r7;
        java.lang.RuntimeException $r10;
        java.lang.Iterable $r2;
        org.json.JSONException $r9;
        org.json.JSONObject $r0, $r6;
        com.parse.ParseACL $r1;
        java.lang.Object $r4;
        java.lang.StringBuilder $r11;
        java.lang.String $r5, $r8;
        boolean $z0;

        $r0 := @parameter0: org.json.JSONObject;

        $r1 = new com.parse.ParseACL;

        specialinvoke $r1.<com.parse.ParseACL: void <init>()>();

        $r2 = staticinvoke <com.parse.Parse: java.lang.Iterable keys(org.json.JSONObject)>($r0);

        $r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.lang.String) $r4;

     label2:
        $r6 = virtualinvoke $r0.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>($r5);

     label3:
        $r2 = staticinvoke <com.parse.Parse: java.lang.Iterable keys(org.json.JSONObject)>($r6);

        $r7 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r4 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (java.lang.String) $r4;

        specialinvoke $r1.<com.parse.ParseACL: void setAccess(java.lang.String,java.lang.String,boolean)>($r8, $r5, 1);

        goto label4;

     label5:
        $r9 := @caughtexception;

        $r10 = new java.lang.RuntimeException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>("could not decode ACL: ");

        $r5 = virtualinvoke $r9.<org.json.JSONException: java.lang.String getMessage()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String)>($r5);

        throw $r10;

     label6:
        return $r1;

        catch org.json.JSONException from label2 to label3 with label5;
    }

    private boolean getAccess(java.lang.String, java.lang.String)
    {
        java.lang.RuntimeException $r5;
        org.json.JSONException $r4;
        org.json.JSONObject $r3;
        com.parse.ParseACL r0;
        java.lang.StringBuilder $r6;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: com.parse.ParseACL;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = r0.<com.parse.ParseACL: org.json.JSONObject permissionsById>;

     label1:
        $r3 = virtualinvoke $r3.<org.json.JSONObject: org.json.JSONObject optJSONObject(java.lang.String)>($r2);

     label2:
        if $r3 != null goto label3;

        return 0;

     label3:
        $z0 = virtualinvoke $r3.<org.json.JSONObject: boolean has(java.lang.String)>($r1);

     label4:
        if $z0 == 0 goto label8;

     label5:
        $z0 = virtualinvoke $r3.<org.json.JSONObject: boolean getBoolean(java.lang.String)>($r1);

     label6:
        return $z0;

     label7:
        $r4 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("JSON failure with ACL: ");

        $r1 = virtualinvoke $r4.<org.json.JSONException: java.lang.String getMessage()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>($r1);

        throw $r5;

     label8:
        return 0;

        catch org.json.JSONException from label1 to label2 with label7;
        catch org.json.JSONException from label3 to label4 with label7;
        catch org.json.JSONException from label5 to label6 with label7;
    }

    static com.parse.ParseACL getDefaultACL()
    {
        com.parse.ParseACL $r4;
        java.lang.Object $r1;
        java.lang.ref.WeakReference $r0;
        boolean $z0;
        com.parse.ParseUser $r2, $r3;

        $z0 = <com.parse.ParseACL: boolean defaultACLUsesCurrentUser>;

        if $z0 == 0 goto label5;

        $r0 = <com.parse.ParseACL: java.lang.ref.WeakReference lastCurrentUser>;

        if $r0 == null goto label2;

        $r0 = <com.parse.ParseACL: java.lang.ref.WeakReference lastCurrentUser>;

        $r1 = virtualinvoke $r0.<java.lang.ref.WeakReference: java.lang.Object get()>();

        $r2 = (com.parse.ParseUser) $r1;

     label1:
        $r3 = staticinvoke <com.parse.ParseUser: com.parse.ParseUser getCurrentUser()>();

        if $r3 != null goto label3;

        $r4 = <com.parse.ParseACL: com.parse.ParseACL defaultACL>;

        return $r4;

     label2:
        $r2 = null;

        goto label1;

     label3:
        $r3 = staticinvoke <com.parse.ParseUser: com.parse.ParseUser getCurrentUser()>();

        if $r2 == $r3 goto label4;

        $r4 = <com.parse.ParseACL: com.parse.ParseACL defaultACL>;

        $r4 = virtualinvoke $r4.<com.parse.ParseACL: com.parse.ParseACL copy()>();

        <com.parse.ParseACL: com.parse.ParseACL defaultACLWithCurrentUser> = $r4;

        virtualinvoke $r4.<com.parse.ParseACL: void setShared(boolean)>(1);

        $r4 = <com.parse.ParseACL: com.parse.ParseACL defaultACLWithCurrentUser>;

        $r2 = staticinvoke <com.parse.ParseUser: com.parse.ParseUser getCurrentUser()>();

        virtualinvoke $r4.<com.parse.ParseACL: void setReadAccess(com.parse.ParseUser,boolean)>($r2, 1);

        $r4 = <com.parse.ParseACL: com.parse.ParseACL defaultACLWithCurrentUser>;

        $r2 = staticinvoke <com.parse.ParseUser: com.parse.ParseUser getCurrentUser()>();

        virtualinvoke $r4.<com.parse.ParseACL: void setWriteAccess(com.parse.ParseUser,boolean)>($r2, 1);

        $r0 = new java.lang.ref.WeakReference;

        $r2 = staticinvoke <com.parse.ParseUser: com.parse.ParseUser getCurrentUser()>();

        specialinvoke $r0.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>($r2);

        <com.parse.ParseACL: java.lang.ref.WeakReference lastCurrentUser> = $r0;

     label4:
        $r4 = <com.parse.ParseACL: com.parse.ParseACL defaultACLWithCurrentUser>;

        return $r4;

     label5:
        $r4 = <com.parse.ParseACL: com.parse.ParseACL defaultACL>;

        return $r4;
    }

    private void prepareUnresolvedUser(com.parse.ParseUser)
    {
        com.parse.g $r4;
        org.json.JSONObject $r3;
        com.parse.ParseACL r0;
        com.parse.ParseUser $r1, $r2;

        r0 := @this: com.parse.ParseACL;

        $r1 := @parameter0: com.parse.ParseUser;

        $r2 = r0.<com.parse.ParseACL: com.parse.ParseUser unresolvedUser>;

        if $r2 == $r1 goto label1;

        $r3 = r0.<com.parse.ParseACL: org.json.JSONObject permissionsById>;

        virtualinvoke $r3.<org.json.JSONObject: java.lang.Object remove(java.lang.String)>("*unresolved");

        r0.<com.parse.ParseACL: com.parse.ParseUser unresolvedUser> = $r1;

        $r4 = new com.parse.g;

        specialinvoke $r4.<com.parse.g: void <init>(com.parse.ParseACL)>(r0);

        virtualinvoke $r1.<com.parse.ParseUser: void registerSaveListener(com.parse.GetCallback)>($r4);

     label1:
        return;
    }

    private void resolveUser(com.parse.ParseUser)
    {
        java.lang.RuntimeException $r8;
        com.parse.ParseUser $r1, $r2;
        org.json.JSONException $r7;
        org.json.JSONObject $r3, $r5;
        com.parse.ParseACL r0;
        java.lang.Object $r6;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: com.parse.ParseACL;

        $r1 := @parameter0: com.parse.ParseUser;

        $r2 = r0.<com.parse.ParseACL: com.parse.ParseUser unresolvedUser>;

        if $r1 == $r2 goto label01;

        return;

     label01:
        $r3 = r0.<com.parse.ParseACL: org.json.JSONObject permissionsById>;

     label02:
        $z0 = virtualinvoke $r3.<org.json.JSONObject: boolean has(java.lang.String)>("*unresolved");

     label03:
        if $z0 == 0 goto label09;

        $r3 = r0.<com.parse.ParseACL: org.json.JSONObject permissionsById>;

     label04:
        $r4 = virtualinvoke $r1.<com.parse.ParseUser: java.lang.String getObjectId()>();

     label05:
        $r5 = r0.<com.parse.ParseACL: org.json.JSONObject permissionsById>;

     label06:
        $r6 = virtualinvoke $r5.<org.json.JSONObject: java.lang.Object get(java.lang.String)>("*unresolved");

        virtualinvoke $r3.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>($r4, $r6);

     label07:
        $r3 = r0.<com.parse.ParseACL: org.json.JSONObject permissionsById>;

     label08:
        virtualinvoke $r3.<org.json.JSONObject: java.lang.Object remove(java.lang.String)>("*unresolved");

     label09:
        r0.<com.parse.ParseACL: com.parse.ParseUser unresolvedUser> = null;

        return;

     label10:
        $r7 := @caughtexception;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r7);

        throw $r8;

        catch org.json.JSONException from label02 to label03 with label10;
        catch org.json.JSONException from label04 to label05 with label10;
        catch org.json.JSONException from label06 to label07 with label10;
        catch org.json.JSONException from label08 to label09 with label10;
    }

    private void setAccess(java.lang.String, java.lang.String, boolean)
    {
        java.lang.RuntimeException $r7;
        org.json.JSONException $r6;
        org.json.JSONObject $r4, $r5;
        com.parse.ParseACL r0;
        java.lang.StringBuilder $r3;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: com.parse.ParseACL;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $z0 := @parameter2: boolean;

        $r4 = r0.<com.parse.ParseACL: org.json.JSONObject permissionsById>;

     label1:
        $r5 = virtualinvoke $r4.<org.json.JSONObject: org.json.JSONObject optJSONObject(java.lang.String)>($r2);

     label2:
        $r4 = $r5;

        if $r5 != null goto label7;

        goto label3;

     label3:
        $r4 = new org.json.JSONObject;

     label4:
        specialinvoke $r4.<org.json.JSONObject: void <init>()>();

     label5:
        $r5 = r0.<com.parse.ParseACL: org.json.JSONObject permissionsById>;

     label6:
        virtualinvoke $r5.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>($r2, $r4);

     label7:
        virtualinvoke $r4.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,boolean)>($r1, 1);

     label8:
        return;

     label9:
        $r6 := @caughtexception;

        $r7 = new java.lang.RuntimeException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("JSON failure with ACL: ");

        $r1 = virtualinvoke $r6.<org.json.JSONException: java.lang.String getMessage()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>($r1);

        throw $r7;

        catch org.json.JSONException from label1 to label2 with label9;
        catch org.json.JSONException from label4 to label5 with label9;
        catch org.json.JSONException from label6 to label7 with label9;
        catch org.json.JSONException from label7 to label8 with label9;
    }

    public static void setDefaultACL(com.parse.ParseACL, boolean)
    {
        com.parse.ParseACL $r0;
        boolean $z0;

        $r0 := @parameter0: com.parse.ParseACL;

        $z0 := @parameter1: boolean;

        <com.parse.ParseACL: com.parse.ParseACL defaultACLWithCurrentUser> = null;

        <com.parse.ParseACL: java.lang.ref.WeakReference lastCurrentUser> = null;

        if $r0 == null goto label1;

        $r0 = virtualinvoke $r0.<com.parse.ParseACL: com.parse.ParseACL copy()>();

        <com.parse.ParseACL: com.parse.ParseACL defaultACL> = $r0;

        virtualinvoke $r0.<com.parse.ParseACL: void setShared(boolean)>(1);

        <com.parse.ParseACL: boolean defaultACLUsesCurrentUser> = $z0;

        return;

     label1:
        <com.parse.ParseACL: com.parse.ParseACL defaultACL> = null;

        return;
    }

    private void setUnresolvedReadAccess(com.parse.ParseUser, boolean)
    {
        com.parse.ParseACL r0;
        com.parse.ParseUser $r1;
        boolean $z0;

        r0 := @this: com.parse.ParseACL;

        $r1 := @parameter0: com.parse.ParseUser;

        $z0 := @parameter1: boolean;

        specialinvoke r0.<com.parse.ParseACL: void prepareUnresolvedUser(com.parse.ParseUser)>($r1);

        virtualinvoke r0.<com.parse.ParseACL: void setReadAccess(java.lang.String,boolean)>("*unresolved", 1);

        return;
    }

    private void setUnresolvedWriteAccess(com.parse.ParseUser, boolean)
    {
        com.parse.ParseACL r0;
        com.parse.ParseUser $r1;
        boolean $z0;

        r0 := @this: com.parse.ParseACL;

        $r1 := @parameter0: com.parse.ParseUser;

        $z0 := @parameter1: boolean;

        specialinvoke r0.<com.parse.ParseACL: void prepareUnresolvedUser(com.parse.ParseUser)>($r1);

        virtualinvoke r0.<com.parse.ParseACL: void setWriteAccess(java.lang.String,boolean)>("*unresolved", 1);

        return;
    }

    private static void validateRoleState(com.parse.ParseRole)
    {
        java.lang.String $r1;
        java.lang.IllegalArgumentException $r2;
        com.parse.ParseRole $r0;

        $r0 := @parameter0: com.parse.ParseRole;

        $r1 = virtualinvoke $r0.<com.parse.ParseRole: java.lang.String getObjectId()>();

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Roles must be saved to the server before they can be used in an ACL.");

        throw $r2;

     label1:
        return;
    }

    com.parse.ParseACL copy()
    {
        com.parse.g $r6;
        java.lang.RuntimeException $r8;
        com.parse.ParseUser $r5;
        org.json.JSONException $r7;
        org.json.JSONObject $r3, $r4;
        com.parse.ParseACL r0, $r2;
        java.lang.String $r1;

        r0 := @this: com.parse.ParseACL;

        $r2 = new com.parse.ParseACL;

        specialinvoke $r2.<com.parse.ParseACL: void <init>()>();

        $r3 = new org.json.JSONObject;

        $r4 = r0.<com.parse.ParseACL: org.json.JSONObject permissionsById>;

     label1:
        $r1 = virtualinvoke $r4.<org.json.JSONObject: java.lang.String toString()>();

        specialinvoke $r3.<org.json.JSONObject: void <init>(java.lang.String)>($r1);

     label2:
        $r2.<com.parse.ParseACL: org.json.JSONObject permissionsById> = $r3;

        $r5 = r0.<com.parse.ParseACL: com.parse.ParseUser unresolvedUser>;

        $r2.<com.parse.ParseACL: com.parse.ParseUser unresolvedUser> = $r5;

        $r5 = r0.<com.parse.ParseACL: com.parse.ParseUser unresolvedUser>;

        if $r5 == null goto label4;

        $r5 = r0.<com.parse.ParseACL: com.parse.ParseUser unresolvedUser>;

        $r6 = new com.parse.g;

        specialinvoke $r6.<com.parse.g: void <init>(com.parse.ParseACL)>($r2);

        virtualinvoke $r5.<com.parse.ParseUser: void registerSaveListener(com.parse.GetCallback)>($r6);

        return $r2;

     label3:
        $r7 := @caughtexception;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r7);

        throw $r8;

     label4:
        return $r2;

        catch org.json.JSONException from label1 to label2 with label3;
    }

    public boolean getPublicReadAccess()
    {
        com.parse.ParseACL r0;
        boolean $z0;

        r0 := @this: com.parse.ParseACL;

        $z0 = virtualinvoke r0.<com.parse.ParseACL: boolean getReadAccess(java.lang.String)>("*");

        return $z0;
    }

    public boolean getPublicWriteAccess()
    {
        com.parse.ParseACL r0;
        boolean $z0;

        r0 := @this: com.parse.ParseACL;

        $z0 = virtualinvoke r0.<com.parse.ParseACL: boolean getWriteAccess(java.lang.String)>("*");

        return $z0;
    }

    public boolean getReadAccess(com.parse.ParseUser)
    {
        com.parse.ParseACL r0;
        java.lang.String $r3;
        java.lang.IllegalArgumentException $r4;
        com.parse.ParseUser $r1, $r2;
        boolean $z0;

        r0 := @this: com.parse.ParseACL;

        $r1 := @parameter0: com.parse.ParseUser;

        $r2 = r0.<com.parse.ParseACL: com.parse.ParseUser unresolvedUser>;

        if $r1 != $r2 goto label1;

        $z0 = virtualinvoke r0.<com.parse.ParseACL: boolean getReadAccess(java.lang.String)>("*unresolved");

        return $z0;

     label1:
        $r3 = virtualinvoke $r1.<com.parse.ParseUser: java.lang.String getObjectId()>();

        if $r3 != null goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("cannot getReadAccess for a user with null id");

        throw $r4;

     label2:
        $r3 = virtualinvoke $r1.<com.parse.ParseUser: java.lang.String getObjectId()>();

        $z0 = virtualinvoke r0.<com.parse.ParseACL: boolean getReadAccess(java.lang.String)>($r3);

        return $z0;
    }

    public boolean getReadAccess(java.lang.String)
    {
        com.parse.ParseACL r0;
        java.lang.String $r1;
        java.lang.IllegalArgumentException $r2;
        boolean $z0;

        r0 := @this: com.parse.ParseACL;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("cannot getReadAccess for null userId");

        throw $r2;

     label1:
        $z0 = specialinvoke r0.<com.parse.ParseACL: boolean getAccess(java.lang.String,java.lang.String)>("read", $r1);

        return $z0;
    }

    public boolean getRoleReadAccess(com.parse.ParseRole)
    {
        com.parse.ParseACL r0;
        com.parse.ParseRole $r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: com.parse.ParseACL;

        $r1 := @parameter0: com.parse.ParseRole;

        staticinvoke <com.parse.ParseACL: void validateRoleState(com.parse.ParseRole)>($r1);

        $r2 = virtualinvoke $r1.<com.parse.ParseRole: java.lang.String getName()>();

        $z0 = virtualinvoke r0.<com.parse.ParseACL: boolean getRoleReadAccess(java.lang.String)>($r2);

        return $z0;
    }

    public boolean getRoleReadAccess(java.lang.String)
    {
        com.parse.ParseACL r0;
        java.lang.StringBuilder $r2;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: com.parse.ParseACL;

        $r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("role:");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = virtualinvoke r0.<com.parse.ParseACL: boolean getReadAccess(java.lang.String)>($r1);

        return $z0;
    }

    public boolean getRoleWriteAccess(com.parse.ParseRole)
    {
        com.parse.ParseACL r0;
        com.parse.ParseRole $r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: com.parse.ParseACL;

        $r1 := @parameter0: com.parse.ParseRole;

        staticinvoke <com.parse.ParseACL: void validateRoleState(com.parse.ParseRole)>($r1);

        $r2 = virtualinvoke $r1.<com.parse.ParseRole: java.lang.String getName()>();

        $z0 = virtualinvoke r0.<com.parse.ParseACL: boolean getRoleWriteAccess(java.lang.String)>($r2);

        return $z0;
    }

    public boolean getRoleWriteAccess(java.lang.String)
    {
        com.parse.ParseACL r0;
        java.lang.StringBuilder $r2;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: com.parse.ParseACL;

        $r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("role:");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = virtualinvoke r0.<com.parse.ParseACL: boolean getWriteAccess(java.lang.String)>($r1);

        return $z0;
    }

    public boolean getWriteAccess(com.parse.ParseUser)
    {
        com.parse.ParseACL r0;
        java.lang.String $r3;
        java.lang.IllegalArgumentException $r4;
        com.parse.ParseUser $r1, $r2;
        boolean $z0;

        r0 := @this: com.parse.ParseACL;

        $r1 := @parameter0: com.parse.ParseUser;

        $r2 = r0.<com.parse.ParseACL: com.parse.ParseUser unresolvedUser>;

        if $r1 != $r2 goto label1;

        $z0 = virtualinvoke r0.<com.parse.ParseACL: boolean getWriteAccess(java.lang.String)>("*unresolved");

        return $z0;

     label1:
        $r3 = virtualinvoke $r1.<com.parse.ParseUser: java.lang.String getObjectId()>();

        if $r3 != null goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("cannot getWriteAccess for a user with null id");

        throw $r4;

     label2:
        $r3 = virtualinvoke $r1.<com.parse.ParseUser: java.lang.String getObjectId()>();

        $z0 = virtualinvoke r0.<com.parse.ParseACL: boolean getWriteAccess(java.lang.String)>($r3);

        return $z0;
    }

    public boolean getWriteAccess(java.lang.String)
    {
        com.parse.ParseACL r0;
        java.lang.String $r1;
        java.lang.IllegalArgumentException $r2;
        boolean $z0;

        r0 := @this: com.parse.ParseACL;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("cannot getWriteAccess for null userId");

        throw $r2;

     label1:
        $z0 = specialinvoke r0.<com.parse.ParseACL: boolean getAccess(java.lang.String,java.lang.String)>("write", $r1);

        return $z0;
    }

    boolean hasUnresolvedUser()
    {
        com.parse.ParseACL r0;
        com.parse.ParseUser $r1;

        r0 := @this: com.parse.ParseACL;

        $r1 = r0.<com.parse.ParseACL: com.parse.ParseUser unresolvedUser>;

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    boolean isShared()
    {
        com.parse.ParseACL r0;
        boolean z0;

        r0 := @this: com.parse.ParseACL;

        z0 = r0.<com.parse.ParseACL: boolean shared>;

        return z0;
    }

    public void setPublicReadAccess(boolean)
    {
        com.parse.ParseACL r0;
        boolean $z0;

        r0 := @this: com.parse.ParseACL;

        $z0 := @parameter0: boolean;

        virtualinvoke r0.<com.parse.ParseACL: void setReadAccess(java.lang.String,boolean)>("*", $z0);

        return;
    }

    public void setPublicWriteAccess(boolean)
    {
        com.parse.ParseACL r0;
        boolean $z0;

        r0 := @this: com.parse.ParseACL;

        $z0 := @parameter0: boolean;

        virtualinvoke r0.<com.parse.ParseACL: void setWriteAccess(java.lang.String,boolean)>("*", $z0);

        return;
    }

    public void setReadAccess(com.parse.ParseUser, boolean)
    {
        com.parse.ParseACL r0;
        java.lang.String $r2;
        java.lang.IllegalArgumentException $r3;
        com.parse.ParseUser $r1;
        boolean $z0, $z1;

        r0 := @this: com.parse.ParseACL;

        $r1 := @parameter0: com.parse.ParseUser;

        $z0 := @parameter1: boolean;

        $r2 = virtualinvoke $r1.<com.parse.ParseUser: java.lang.String getObjectId()>();

        if $r2 != null goto label2;

        $z1 = virtualinvoke $r1.<com.parse.ParseUser: boolean isLazy()>();

        if $z1 == 0 goto label1;

        specialinvoke r0.<com.parse.ParseACL: void setUnresolvedReadAccess(com.parse.ParseUser,boolean)>($r1, 1);

        return;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("cannot setReadAccess for a user with null id");

        throw $r3;

     label2:
        $r2 = virtualinvoke $r1.<com.parse.ParseUser: java.lang.String getObjectId()>();

        virtualinvoke r0.<com.parse.ParseACL: void setReadAccess(java.lang.String,boolean)>($r2, 1);

        return;
    }

    public void setReadAccess(java.lang.String, boolean)
    {
        com.parse.ParseACL r0;
        java.lang.String $r1;
        java.lang.IllegalArgumentException $r2;
        boolean $z0;

        r0 := @this: com.parse.ParseACL;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("cannot setReadAccess for null userId");

        throw $r2;

     label1:
        specialinvoke r0.<com.parse.ParseACL: void setAccess(java.lang.String,java.lang.String,boolean)>("read", $r1, 1);

        return;
    }

    public void setRoleReadAccess(com.parse.ParseRole, boolean)
    {
        com.parse.ParseACL r0;
        com.parse.ParseRole $r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: com.parse.ParseACL;

        $r1 := @parameter0: com.parse.ParseRole;

        $z0 := @parameter1: boolean;

        staticinvoke <com.parse.ParseACL: void validateRoleState(com.parse.ParseRole)>($r1);

        $r2 = virtualinvoke $r1.<com.parse.ParseRole: java.lang.String getName()>();

        virtualinvoke r0.<com.parse.ParseACL: void setRoleReadAccess(java.lang.String,boolean)>($r2, $z0);

        return;
    }

    public void setRoleReadAccess(java.lang.String, boolean)
    {
        com.parse.ParseACL r0;
        java.lang.StringBuilder $r2;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: com.parse.ParseACL;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("role:");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.parse.ParseACL: void setReadAccess(java.lang.String,boolean)>($r1, $z0);

        return;
    }

    public void setRoleWriteAccess(com.parse.ParseRole, boolean)
    {
        com.parse.ParseACL r0;
        com.parse.ParseRole $r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: com.parse.ParseACL;

        $r1 := @parameter0: com.parse.ParseRole;

        $z0 := @parameter1: boolean;

        staticinvoke <com.parse.ParseACL: void validateRoleState(com.parse.ParseRole)>($r1);

        $r2 = virtualinvoke $r1.<com.parse.ParseRole: java.lang.String getName()>();

        virtualinvoke r0.<com.parse.ParseACL: void setRoleWriteAccess(java.lang.String,boolean)>($r2, $z0);

        return;
    }

    public void setRoleWriteAccess(java.lang.String, boolean)
    {
        com.parse.ParseACL r0;
        java.lang.StringBuilder $r2;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: com.parse.ParseACL;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("role:");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.parse.ParseACL: void setWriteAccess(java.lang.String,boolean)>($r1, $z0);

        return;
    }

    void setShared(boolean)
    {
        com.parse.ParseACL r0;
        boolean $z0;

        r0 := @this: com.parse.ParseACL;

        $z0 := @parameter0: boolean;

        r0.<com.parse.ParseACL: boolean shared> = 1;

        return;
    }

    public void setWriteAccess(com.parse.ParseUser, boolean)
    {
        com.parse.ParseACL r0;
        java.lang.String $r2;
        java.lang.IllegalArgumentException $r3;
        com.parse.ParseUser $r1;
        boolean $z0, $z1;

        r0 := @this: com.parse.ParseACL;

        $r1 := @parameter0: com.parse.ParseUser;

        $z0 := @parameter1: boolean;

        $r2 = virtualinvoke $r1.<com.parse.ParseUser: java.lang.String getObjectId()>();

        if $r2 != null goto label2;

        $z1 = virtualinvoke $r1.<com.parse.ParseUser: boolean isLazy()>();

        if $z1 == 0 goto label1;

        specialinvoke r0.<com.parse.ParseACL: void setUnresolvedWriteAccess(com.parse.ParseUser,boolean)>($r1, 1);

        return;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("cannot setWriteAccess for a user with null id");

        throw $r3;

     label2:
        $r2 = virtualinvoke $r1.<com.parse.ParseUser: java.lang.String getObjectId()>();

        virtualinvoke r0.<com.parse.ParseACL: void setWriteAccess(java.lang.String,boolean)>($r2, 1);

        return;
    }

    public void setWriteAccess(java.lang.String, boolean)
    {
        com.parse.ParseACL r0;
        java.lang.String $r1;
        java.lang.IllegalArgumentException $r2;
        boolean $z0;

        r0 := @this: com.parse.ParseACL;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("cannot setWriteAccess for null userId");

        throw $r2;

     label1:
        specialinvoke r0.<com.parse.ParseACL: void setAccess(java.lang.String,java.lang.String,boolean)>("write", $r1, 1);

        return;
    }

    org.json.JSONObject toJSONObject()
    {
        org.json.JSONObject r1;
        com.parse.ParseACL r0;

        r0 := @this: com.parse.ParseACL;

        r1 = r0.<com.parse.ParseACL: org.json.JSONObject permissionsById>;

        return r1;
    }

    public static void <clinit>()
    {
        <com.parse.ParseACL: java.lang.String UNRESOLVED_KEY> = "*unresolved";

        <com.parse.ParseACL: java.lang.String PUBLIC_KEY> = "*";

        return;
    }
}
