class net.sourceforge.pinyin4j.ChineseToPinyinResource extends java.lang.Object
{
    private java.util.Properties unicodeToHanyuPinyinTable;

    private void <init>()
    {
        net.sourceforge.pinyin4j.ChineseToPinyinResource r0;

        r0 := @this: net.sourceforge.pinyin4j.ChineseToPinyinResource;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<net.sourceforge.pinyin4j.ChineseToPinyinResource: java.util.Properties unicodeToHanyuPinyinTable> = null;

        specialinvoke r0.<net.sourceforge.pinyin4j.ChineseToPinyinResource: void initializeResource()>();

        return;
    }

    void <init>(net.sourceforge.pinyin4j.ChineseToPinyinResource$1)
    {
        net.sourceforge.pinyin4j.ChineseToPinyinResource r0;
        net.sourceforge.pinyin4j.ChineseToPinyinResource$1 $r1;

        r0 := @this: net.sourceforge.pinyin4j.ChineseToPinyinResource;

        $r1 := @parameter0: net.sourceforge.pinyin4j.ChineseToPinyinResource$1;

        specialinvoke r0.<net.sourceforge.pinyin4j.ChineseToPinyinResource: void <init>()>();

        return;
    }

    private java.lang.String getHanyuPinyinRecordFromChar(char)
    {
        net.sourceforge.pinyin4j.ChineseToPinyinResource r0;
        java.util.Properties $r2;
        int $i1;
        char $c0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: net.sourceforge.pinyin4j.ChineseToPinyinResource;

        $c0 := @parameter0: char;

        $i1 = (int) $c0;

        $r1 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i1);

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toUpperCase()>();

        $r2 = specialinvoke r0.<net.sourceforge.pinyin4j.ChineseToPinyinResource: java.util.Properties getUnicodeToHanyuPinyinTable()>();

        $r1 = virtualinvoke $r2.<java.util.Properties: java.lang.String getProperty(java.lang.String)>($r1);

        $z0 = specialinvoke r0.<net.sourceforge.pinyin4j.ChineseToPinyinResource: boolean isValidRecord(java.lang.String)>($r1);

        if $z0 == 0 goto label1;

        return $r1;

     label1:
        return null;
    }

    static net.sourceforge.pinyin4j.ChineseToPinyinResource getInstance()
    {
        net.sourceforge.pinyin4j.ChineseToPinyinResource r0;

        r0 = <net.sourceforge.pinyin4j.ChineseToPinyinResource$ChineseToPinyinResourceHolder: net.sourceforge.pinyin4j.ChineseToPinyinResource theInstance>;

        return r0;
    }

    private java.util.Properties getUnicodeToHanyuPinyinTable()
    {
        net.sourceforge.pinyin4j.ChineseToPinyinResource r0;
        java.util.Properties r1;

        r0 := @this: net.sourceforge.pinyin4j.ChineseToPinyinResource;

        r1 = r0.<net.sourceforge.pinyin4j.ChineseToPinyinResource: java.util.Properties unicodeToHanyuPinyinTable>;

        return r1;
    }

    private void initializeResource()
    {
        java.lang.Throwable $r3, $r4;
        java.util.Properties $r1, $r5;
        java.io.BufferedInputStream $r2;
        java.io.IOException $r7;
        java.io.FileNotFoundException $r6;
        net.sourceforge.pinyin4j.ChineseToPinyinResource r0;

        r0 := @this: net.sourceforge.pinyin4j.ChineseToPinyinResource;

        $r5 = new java.util.Properties;

        $r1 = $r5;

     label1:
        specialinvoke $r5.<java.util.Properties: void <init>()>();

        specialinvoke r0.<net.sourceforge.pinyin4j.ChineseToPinyinResource: void setUnicodeToHanyuPinyinTable(java.util.Properties)>($r1);

        $r1 = specialinvoke r0.<net.sourceforge.pinyin4j.ChineseToPinyinResource: java.util.Properties getUnicodeToHanyuPinyinTable()>();

        $r2 = staticinvoke <net.sourceforge.pinyin4j.ResourceHelper: java.io.BufferedInputStream getResourceInputStream(java.lang.String)>("/pinyindb/unicode_to_hanyu_pinyin.txt");

        virtualinvoke $r1.<java.util.Properties: void load(java.io.InputStream)>($r2);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r6 = (java.io.FileNotFoundException) $r3;

        virtualinvoke $r6.<java.io.FileNotFoundException: void printStackTrace()>();

        return;

     label4:
        $r4 := @caughtexception;

        $r7 = (java.io.IOException) $r4;

        virtualinvoke $r7.<java.io.IOException: void printStackTrace()>();

        return;

        catch java.io.FileNotFoundException from label1 to label2 with label3;
        catch java.io.IOException from label1 to label2 with label4;
    }

    private boolean isValidRecord(java.lang.String)
    {
        net.sourceforge.pinyin4j.ChineseToPinyinResource r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: net.sourceforge.pinyin4j.ChineseToPinyinResource;

        $r1 := @parameter0: java.lang.String;

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("(none0)");

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("(");

        if $z0 == 0 goto label1;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean endsWith(java.lang.String)>(")");

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private void setUnicodeToHanyuPinyinTable(java.util.Properties)
    {
        net.sourceforge.pinyin4j.ChineseToPinyinResource r0;
        java.util.Properties $r1;

        r0 := @this: net.sourceforge.pinyin4j.ChineseToPinyinResource;

        $r1 := @parameter0: java.util.Properties;

        r0.<net.sourceforge.pinyin4j.ChineseToPinyinResource: java.util.Properties unicodeToHanyuPinyinTable> = $r1;

        return;
    }

    java.lang.String[] getHanyuPinyinStringArray(char)
    {
        char $c0;
        java.lang.String[] $r3;
        net.sourceforge.pinyin4j.ChineseToPinyinResource r0;
        int $i1, $i2, $i3;
        java.lang.String $r1, $r2;

        r0 := @this: net.sourceforge.pinyin4j.ChineseToPinyinResource;

        $c0 := @parameter0: char;

        $r1 = specialinvoke r0.<net.sourceforge.pinyin4j.ChineseToPinyinResource: java.lang.String getHanyuPinyinRecordFromChar(char)>($c0);

        if $r1 == null goto label1;

        $i1 = virtualinvoke $r1.<java.lang.String: int indexOf(java.lang.String)>("(");

        $i2 = virtualinvoke $r1.<java.lang.String: int lastIndexOf(java.lang.String)>(")");

        $r2 = "(";

        $i3 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i1 = $i1 + $i3;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>($i1, $i2);

        $r3 = virtualinvoke $r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        return $r3;

     label1:
        return null;
    }
}
