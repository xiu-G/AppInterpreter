public class org.mozilla.universalchardet.prober.SBCSGroupProber extends org.mozilla.universalchardet.prober.CharsetProber
{
    private static final org.mozilla.universalchardet.prober.sequence.SequenceModel hebrewModel;
    private static final org.mozilla.universalchardet.prober.sequence.SequenceModel ibm855Model;
    private static final org.mozilla.universalchardet.prober.sequence.SequenceModel ibm866Model;
    private static final org.mozilla.universalchardet.prober.sequence.SequenceModel koi8rModel;
    private static final org.mozilla.universalchardet.prober.sequence.SequenceModel latin5BulgarianModel;
    private static final org.mozilla.universalchardet.prober.sequence.SequenceModel latin5Model;
    private static final org.mozilla.universalchardet.prober.sequence.SequenceModel latin7Model;
    private static final org.mozilla.universalchardet.prober.sequence.SequenceModel macCyrillicModel;
    private static final org.mozilla.universalchardet.prober.sequence.SequenceModel win1251BulgarianModel;
    private static final org.mozilla.universalchardet.prober.sequence.SequenceModel win1251Model;
    private static final org.mozilla.universalchardet.prober.sequence.SequenceModel win1253Model;
    private int activeNum;
    private int bestGuess;
    private boolean[] isActive;
    private org.mozilla.universalchardet.prober.CharsetProber[] probers;
    private org.mozilla.universalchardet.prober.CharsetProber$ProbingState state;

    static void <clinit>()
    {
        org.mozilla.universalchardet.prober.sequence.Ibm866Model $r4;
        org.mozilla.universalchardet.prober.sequence.Latin7Model $r6;
        org.mozilla.universalchardet.prober.sequence.Win1251Model $r0;
        org.mozilla.universalchardet.prober.sequence.Ibm855Model $r5;
        org.mozilla.universalchardet.prober.sequence.Koi8rModel $r1;
        org.mozilla.universalchardet.prober.sequence.Win1251BulgarianModel $r9;
        org.mozilla.universalchardet.prober.sequence.Win1253Model $r7;
        org.mozilla.universalchardet.prober.sequence.Latin5Model $r2;
        org.mozilla.universalchardet.prober.sequence.Latin5BulgarianModel $r8;
        org.mozilla.universalchardet.prober.sequence.HebrewModel $r10;
        org.mozilla.universalchardet.prober.sequence.MacCyrillicModel $r3;

        $r0 = new org.mozilla.universalchardet.prober.sequence.Win1251Model;

        specialinvoke $r0.<org.mozilla.universalchardet.prober.sequence.Win1251Model: void <init>()>();

        <org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.sequence.SequenceModel win1251Model> = $r0;

        $r1 = new org.mozilla.universalchardet.prober.sequence.Koi8rModel;

        specialinvoke $r1.<org.mozilla.universalchardet.prober.sequence.Koi8rModel: void <init>()>();

        <org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.sequence.SequenceModel koi8rModel> = $r1;

        $r2 = new org.mozilla.universalchardet.prober.sequence.Latin5Model;

        specialinvoke $r2.<org.mozilla.universalchardet.prober.sequence.Latin5Model: void <init>()>();

        <org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.sequence.SequenceModel latin5Model> = $r2;

        $r3 = new org.mozilla.universalchardet.prober.sequence.MacCyrillicModel;

        specialinvoke $r3.<org.mozilla.universalchardet.prober.sequence.MacCyrillicModel: void <init>()>();

        <org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.sequence.SequenceModel macCyrillicModel> = $r3;

        $r4 = new org.mozilla.universalchardet.prober.sequence.Ibm866Model;

        specialinvoke $r4.<org.mozilla.universalchardet.prober.sequence.Ibm866Model: void <init>()>();

        <org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.sequence.SequenceModel ibm866Model> = $r4;

        $r5 = new org.mozilla.universalchardet.prober.sequence.Ibm855Model;

        specialinvoke $r5.<org.mozilla.universalchardet.prober.sequence.Ibm855Model: void <init>()>();

        <org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.sequence.SequenceModel ibm855Model> = $r5;

        $r6 = new org.mozilla.universalchardet.prober.sequence.Latin7Model;

        specialinvoke $r6.<org.mozilla.universalchardet.prober.sequence.Latin7Model: void <init>()>();

        <org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.sequence.SequenceModel latin7Model> = $r6;

        $r7 = new org.mozilla.universalchardet.prober.sequence.Win1253Model;

        specialinvoke $r7.<org.mozilla.universalchardet.prober.sequence.Win1253Model: void <init>()>();

        <org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.sequence.SequenceModel win1253Model> = $r7;

        $r8 = new org.mozilla.universalchardet.prober.sequence.Latin5BulgarianModel;

        specialinvoke $r8.<org.mozilla.universalchardet.prober.sequence.Latin5BulgarianModel: void <init>()>();

        <org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.sequence.SequenceModel latin5BulgarianModel> = $r8;

        $r9 = new org.mozilla.universalchardet.prober.sequence.Win1251BulgarianModel;

        specialinvoke $r9.<org.mozilla.universalchardet.prober.sequence.Win1251BulgarianModel: void <init>()>();

        <org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.sequence.SequenceModel win1251BulgarianModel> = $r9;

        $r10 = new org.mozilla.universalchardet.prober.sequence.HebrewModel;

        specialinvoke $r10.<org.mozilla.universalchardet.prober.sequence.HebrewModel: void <init>()>();

        <org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.sequence.SequenceModel hebrewModel> = $r10;

        return;
    }

    public void <init>()
    {
        org.mozilla.universalchardet.prober.CharsetProber $r6, $r7;
        boolean[] $r2;
        org.mozilla.universalchardet.prober.HebrewProber $r5;
        org.mozilla.universalchardet.prober.SingleByteCharsetProber $r3;
        org.mozilla.universalchardet.prober.sequence.SequenceModel $r4;
        org.mozilla.universalchardet.prober.CharsetProber[] $r1;
        org.mozilla.universalchardet.prober.SBCSGroupProber r0;

        r0 := @this: org.mozilla.universalchardet.prober.SBCSGroupProber;

        specialinvoke r0.<org.mozilla.universalchardet.prober.CharsetProber: void <init>()>();

        $r1 = newarray (org.mozilla.universalchardet.prober.CharsetProber)[13];

        r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers> = $r1;

        $r2 = newarray (boolean)[13];

        r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: boolean[] isActive> = $r2;

        $r1 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $r3 = new org.mozilla.universalchardet.prober.SingleByteCharsetProber;

        $r4 = <org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.sequence.SequenceModel win1251Model>;

        specialinvoke $r3.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: void <init>(org.mozilla.universalchardet.prober.sequence.SequenceModel)>($r4);

        $r1[0] = $r3;

        $r1 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $r3 = new org.mozilla.universalchardet.prober.SingleByteCharsetProber;

        $r4 = <org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.sequence.SequenceModel koi8rModel>;

        specialinvoke $r3.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: void <init>(org.mozilla.universalchardet.prober.sequence.SequenceModel)>($r4);

        $r1[1] = $r3;

        $r1 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $r3 = new org.mozilla.universalchardet.prober.SingleByteCharsetProber;

        $r4 = <org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.sequence.SequenceModel latin5Model>;

        specialinvoke $r3.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: void <init>(org.mozilla.universalchardet.prober.sequence.SequenceModel)>($r4);

        $r1[2] = $r3;

        $r1 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $r3 = new org.mozilla.universalchardet.prober.SingleByteCharsetProber;

        $r4 = <org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.sequence.SequenceModel macCyrillicModel>;

        specialinvoke $r3.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: void <init>(org.mozilla.universalchardet.prober.sequence.SequenceModel)>($r4);

        $r1[3] = $r3;

        $r1 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $r3 = new org.mozilla.universalchardet.prober.SingleByteCharsetProber;

        $r4 = <org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.sequence.SequenceModel ibm866Model>;

        specialinvoke $r3.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: void <init>(org.mozilla.universalchardet.prober.sequence.SequenceModel)>($r4);

        $r1[4] = $r3;

        $r1 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $r3 = new org.mozilla.universalchardet.prober.SingleByteCharsetProber;

        $r4 = <org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.sequence.SequenceModel ibm855Model>;

        specialinvoke $r3.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: void <init>(org.mozilla.universalchardet.prober.sequence.SequenceModel)>($r4);

        $r1[5] = $r3;

        $r1 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $r3 = new org.mozilla.universalchardet.prober.SingleByteCharsetProber;

        $r4 = <org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.sequence.SequenceModel latin7Model>;

        specialinvoke $r3.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: void <init>(org.mozilla.universalchardet.prober.sequence.SequenceModel)>($r4);

        $r1[6] = $r3;

        $r1 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $r3 = new org.mozilla.universalchardet.prober.SingleByteCharsetProber;

        $r4 = <org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.sequence.SequenceModel win1253Model>;

        specialinvoke $r3.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: void <init>(org.mozilla.universalchardet.prober.sequence.SequenceModel)>($r4);

        $r1[7] = $r3;

        $r1 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $r3 = new org.mozilla.universalchardet.prober.SingleByteCharsetProber;

        $r4 = <org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.sequence.SequenceModel latin5BulgarianModel>;

        specialinvoke $r3.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: void <init>(org.mozilla.universalchardet.prober.sequence.SequenceModel)>($r4);

        $r1[8] = $r3;

        $r1 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $r3 = new org.mozilla.universalchardet.prober.SingleByteCharsetProber;

        $r4 = <org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.sequence.SequenceModel win1251BulgarianModel>;

        specialinvoke $r3.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: void <init>(org.mozilla.universalchardet.prober.sequence.SequenceModel)>($r4);

        $r1[9] = $r3;

        $r5 = new org.mozilla.universalchardet.prober.HebrewProber;

        specialinvoke $r5.<org.mozilla.universalchardet.prober.HebrewProber: void <init>()>();

        $r1 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $r1[10] = $r5;

        $r1 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $r3 = new org.mozilla.universalchardet.prober.SingleByteCharsetProber;

        $r4 = <org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.sequence.SequenceModel hebrewModel>;

        specialinvoke $r3.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: void <init>(org.mozilla.universalchardet.prober.sequence.SequenceModel,boolean,org.mozilla.universalchardet.prober.CharsetProber)>($r4, 0, $r5);

        $r1[11] = $r3;

        $r1 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $r3 = new org.mozilla.universalchardet.prober.SingleByteCharsetProber;

        $r4 = <org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.sequence.SequenceModel hebrewModel>;

        specialinvoke $r3.<org.mozilla.universalchardet.prober.SingleByteCharsetProber: void <init>(org.mozilla.universalchardet.prober.sequence.SequenceModel,boolean,org.mozilla.universalchardet.prober.CharsetProber)>($r4, 1, $r5);

        $r1[12] = $r3;

        $r1 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $r6 = $r1[11];

        $r1 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $r7 = $r1[12];

        virtualinvoke $r5.<org.mozilla.universalchardet.prober.HebrewProber: void setModalProbers(org.mozilla.universalchardet.prober.CharsetProber,org.mozilla.universalchardet.prober.CharsetProber)>($r6, $r7);

        virtualinvoke r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: void reset()>();

        return;
    }

    public java.lang.String getCharSetName()
    {
        org.mozilla.universalchardet.prober.CharsetProber $r3;
        org.mozilla.universalchardet.prober.CharsetProber[] $r2;
        int $i0;
        org.mozilla.universalchardet.prober.SBCSGroupProber r0;
        java.lang.String $r1;

        r0 := @this: org.mozilla.universalchardet.prober.SBCSGroupProber;

        $i0 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: int bestGuess>;

        if $i0 != -1 goto label1;

        virtualinvoke r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: float getConfidence()>();

        $i0 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: int bestGuess>;

        if $i0 != -1 goto label1;

        r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: int bestGuess> = 0;

     label1:
        $r2 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $i0 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: int bestGuess>;

        $r3 = $r2[$i0];

        $r1 = virtualinvoke $r3.<org.mozilla.universalchardet.prober.CharsetProber: java.lang.String getCharSetName()>();

        return $r1;
    }

    public float getConfidence()
    {
        org.mozilla.universalchardet.prober.CharsetProber $r5;
        org.mozilla.universalchardet.prober.CharsetProber$ProbingState $r1, $r2;
        boolean[] $r4;
        org.mozilla.universalchardet.prober.CharsetProber[] $r3;
        byte $b0;
        int $i1, $i2;
        org.mozilla.universalchardet.prober.SBCSGroupProber r0;
        float $f0, $f1;
        boolean $z0;

        r0 := @this: org.mozilla.universalchardet.prober.SBCSGroupProber;

        $f1 = 0.0F;

        $r1 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state>;

        $r2 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState FOUND_IT>;

        if $r1 != $r2 goto label1;

        return 0.99F;

     label1:
        $r1 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state>;

        $r2 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState NOT_ME>;

        if $r1 != $r2 goto label2;

        return 0.01F;

     label2:
        $i1 = 0;

     label3:
        $r3 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $i2 = lengthof $r3;

        if $i1 >= $i2 goto label6;

        $r4 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: boolean[] isActive>;

        $z0 = $r4[$i1];

        if $z0 != 0 goto label5;

     label4:
        $i1 = $i1 + 1;

        goto label3;

     label5:
        $r3 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $r5 = $r3[$i1];

        $f0 = virtualinvoke $r5.<org.mozilla.universalchardet.prober.CharsetProber: float getConfidence()>();

        $b0 = $f1 cmpg $f0;

        $i2 = (int) $b0;

        if $i2 >= 0 goto label4;

        r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: int bestGuess> = $i1;

        $f1 = $f0;

        goto label4;

     label6:
        return $f1;
    }

    public org.mozilla.universalchardet.prober.CharsetProber$ProbingState getState()
    {
        org.mozilla.universalchardet.prober.SBCSGroupProber r0;
        org.mozilla.universalchardet.prober.CharsetProber$ProbingState r1;

        r0 := @this: org.mozilla.universalchardet.prober.SBCSGroupProber;

        r1 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state>;

        return r1;
    }

    public org.mozilla.universalchardet.prober.CharsetProber$ProbingState handleData(byte[], int, int)
    {
        org.mozilla.universalchardet.prober.CharsetProber $r5;
        byte[] $r1;
        org.mozilla.universalchardet.prober.CharsetProber$ProbingState $r6, $r7;
        boolean[] $r4;
        java.nio.ByteBuffer $r2;
        org.mozilla.universalchardet.prober.CharsetProber[] $r3;
        int $i0, $i1;
        org.mozilla.universalchardet.prober.SBCSGroupProber r0;
        boolean $z0;

        r0 := @this: org.mozilla.universalchardet.prober.SBCSGroupProber;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = virtualinvoke r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: java.nio.ByteBuffer filterWithoutEnglishLetters(byte[],int,int)>($r1, 0, $i1);

        $i0 = virtualinvoke $r2.<java.nio.ByteBuffer: int position()>();

        if $i0 != 0 goto label2;

     label1:
        $r6 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state>;

        return $r6;

     label2:
        $i0 = 0;

     label3:
        $r3 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $i1 = lengthof $r3;

        if $i0 >= $i1 goto label1;

        $r4 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: boolean[] isActive>;

        $z0 = $r4[$i0];

        if $z0 != 0 goto label5;

     label4:
        $i0 = $i0 + 1;

        goto label3;

     label5:
        $r3 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $r5 = $r3[$i0];

        $r1 = virtualinvoke $r2.<java.nio.ByteBuffer: byte[] array()>();

        $i1 = virtualinvoke $r2.<java.nio.ByteBuffer: int position()>();

        $r6 = virtualinvoke $r5.<org.mozilla.universalchardet.prober.CharsetProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState handleData(byte[],int,int)>($r1, 0, $i1);

        $r7 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState FOUND_IT>;

        if $r6 != $r7 goto label6;

        r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: int bestGuess> = $i0;

        $r6 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState FOUND_IT>;

        r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state> = $r6;

        goto label1;

     label6:
        $r7 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState NOT_ME>;

        if $r6 != $r7 goto label4;

        $r4 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: boolean[] isActive>;

        $r4[$i0] = 0;

        $i1 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: int activeNum>;

        $i1 = $i1 + -1;

        r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: int activeNum> = $i1;

        $i1 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: int activeNum>;

        if $i1 > 0 goto label4;

        $r6 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState NOT_ME>;

        r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state> = $r6;

        goto label1;
    }

    public void reset()
    {
        org.mozilla.universalchardet.prober.CharsetProber $r2;
        org.mozilla.universalchardet.prober.CharsetProber$ProbingState $r4;
        org.mozilla.universalchardet.prober.CharsetProber[] $r1;
        int $i0, $i1;
        boolean[] $r3;
        org.mozilla.universalchardet.prober.SBCSGroupProber r0;

        r0 := @this: org.mozilla.universalchardet.prober.SBCSGroupProber;

        $i0 = 0;

        r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: int activeNum> = 0;

     label1:
        $r1 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label2;

        $r1 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $r2 = $r1[$i0];

        virtualinvoke $r2.<org.mozilla.universalchardet.prober.CharsetProber: void reset()>();

        $r3 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: boolean[] isActive>;

        $r3[$i0] = 1;

        $i1 = r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: int activeNum>;

        $i1 = $i1 + 1;

        r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: int activeNum> = $i1;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: int bestGuess> = -1;

        $r4 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState DETECTING>;

        r0.<org.mozilla.universalchardet.prober.SBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state> = $r4;

        return;
    }

    public void setOption()
    {
        org.mozilla.universalchardet.prober.SBCSGroupProber r0;

        r0 := @this: org.mozilla.universalchardet.prober.SBCSGroupProber;

        return;
    }
}
