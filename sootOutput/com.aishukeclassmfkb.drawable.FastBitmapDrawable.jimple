public class com.aishukeclassmfkb.drawable.FastBitmapDrawable extends android.graphics.drawable.Drawable
{
    private final android.graphics.Bitmap mBitmap;

    public void <init>(android.graphics.Bitmap)
    {
        com.aishukeclassmfkb.drawable.FastBitmapDrawable r0;
        android.graphics.Bitmap $r1;

        r0 := @this: com.aishukeclassmfkb.drawable.FastBitmapDrawable;

        $r1 := @parameter0: android.graphics.Bitmap;

        specialinvoke r0.<android.graphics.drawable.Drawable: void <init>()>();

        r0.<com.aishukeclassmfkb.drawable.FastBitmapDrawable: android.graphics.Bitmap mBitmap> = $r1;

        return;
    }

    public void draw(android.graphics.Canvas)
    {
        android.graphics.Canvas $r1;
        com.aishukeclassmfkb.drawable.FastBitmapDrawable r0;
        android.graphics.Bitmap $r2;

        r0 := @this: com.aishukeclassmfkb.drawable.FastBitmapDrawable;

        $r1 := @parameter0: android.graphics.Canvas;

        $r2 = r0.<com.aishukeclassmfkb.drawable.FastBitmapDrawable: android.graphics.Bitmap mBitmap>;

        virtualinvoke $r1.<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,float,float,android.graphics.Paint)>($r2, 0.0F, 0.0F, null);

        return;
    }

    public android.graphics.Bitmap getBitmap()
    {
        com.aishukeclassmfkb.drawable.FastBitmapDrawable r0;
        android.graphics.Bitmap r1;

        r0 := @this: com.aishukeclassmfkb.drawable.FastBitmapDrawable;

        r1 = r0.<com.aishukeclassmfkb.drawable.FastBitmapDrawable: android.graphics.Bitmap mBitmap>;

        return r1;
    }

    public int getIntrinsicHeight()
    {
        int $i0;
        com.aishukeclassmfkb.drawable.FastBitmapDrawable r0;
        android.graphics.Bitmap $r1;

        r0 := @this: com.aishukeclassmfkb.drawable.FastBitmapDrawable;

        $r1 = r0.<com.aishukeclassmfkb.drawable.FastBitmapDrawable: android.graphics.Bitmap mBitmap>;

        $i0 = virtualinvoke $r1.<android.graphics.Bitmap: int getHeight()>();

        return $i0;
    }

    public int getIntrinsicWidth()
    {
        int $i0;
        com.aishukeclassmfkb.drawable.FastBitmapDrawable r0;
        android.graphics.Bitmap $r1;

        r0 := @this: com.aishukeclassmfkb.drawable.FastBitmapDrawable;

        $r1 = r0.<com.aishukeclassmfkb.drawable.FastBitmapDrawable: android.graphics.Bitmap mBitmap>;

        $i0 = virtualinvoke $r1.<android.graphics.Bitmap: int getWidth()>();

        return $i0;
    }

    public int getMinimumHeight()
    {
        int $i0;
        com.aishukeclassmfkb.drawable.FastBitmapDrawable r0;
        android.graphics.Bitmap $r1;

        r0 := @this: com.aishukeclassmfkb.drawable.FastBitmapDrawable;

        $r1 = r0.<com.aishukeclassmfkb.drawable.FastBitmapDrawable: android.graphics.Bitmap mBitmap>;

        $i0 = virtualinvoke $r1.<android.graphics.Bitmap: int getHeight()>();

        return $i0;
    }

    public int getMinimumWidth()
    {
        int $i0;
        com.aishukeclassmfkb.drawable.FastBitmapDrawable r0;
        android.graphics.Bitmap $r1;

        r0 := @this: com.aishukeclassmfkb.drawable.FastBitmapDrawable;

        $r1 = r0.<com.aishukeclassmfkb.drawable.FastBitmapDrawable: android.graphics.Bitmap mBitmap>;

        $i0 = virtualinvoke $r1.<android.graphics.Bitmap: int getWidth()>();

        return $i0;
    }

    public int getOpacity()
    {
        int $i0;
        com.aishukeclassmfkb.drawable.FastBitmapDrawable r0;

        r0 := @this: com.aishukeclassmfkb.drawable.FastBitmapDrawable;

        $i0 = -3;

        return $i0;
    }

    public void setAlpha(int)
    {
        int $i0;
        com.aishukeclassmfkb.drawable.FastBitmapDrawable r0;

        r0 := @this: com.aishukeclassmfkb.drawable.FastBitmapDrawable;

        $i0 := @parameter0: int;

        return;
    }

    public void setColorFilter(android.graphics.ColorFilter)
    {
        android.graphics.ColorFilter $r1;
        com.aishukeclassmfkb.drawable.FastBitmapDrawable r0;

        r0 := @this: com.aishukeclassmfkb.drawable.FastBitmapDrawable;

        $r1 := @parameter0: android.graphics.ColorFilter;

        return;
    }
}
