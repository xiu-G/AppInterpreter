public class com.feelingk.iap.net.IAPBase extends com.feelingk.iap.net.IAPNet
{
    static final java.lang.String TAG;
    public java.lang.String APPLICATION_ID;
    public java.lang.String BP_SERVER_IP;
    public int BP_SERVER_PORT;
    public java.lang.String MDN;
    public java.lang.String errMsg;
    private com.feelingk.iap.net.InitConfirm initCfm;
    public boolean isWifi;
    private com.feelingk.iap.net.ItemInfoConfirm itemInfoConfirm;
    private com.feelingk.iap.net.ItemUseConfirm itemUseConfirm;
    private com.feelingk.iap.net.ItemWholeAuthConfirm itemWholeAuthConfirm;
    public android.content.Context mContext;
    private java.lang.String mEncJuminNumer;
    public java.util.concurrent.ExecutorService mExecutorService;
    public android.os.Handler mNetworkHandler;
    public com.feelingk.iap.net.IAPBase$NETWORK_RESULT_TYPE mNetworkState;
    private com.feelingk.iap.net.MsgConfirm msgConfirm;
    public int subErrorCode;

    public void <init>(android.content.Context, android.os.Handler, com.feelingk.iap.IAPLibSetting, java.lang.String)
    {
        android.content.Context $r1;
        com.feelingk.iap.net.IAPBase r0;
        android.os.Handler $r2;
        com.feelingk.iap.IAPLibSetting $r3;
        int $i0;
        java.lang.String $r4, $r7;
        java.util.concurrent.ExecutorService $r5;
        com.feelingk.iap.net.IAPBase$NETWORK_RESULT_TYPE $r6;

        r0 := @this: com.feelingk.iap.net.IAPBase;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: android.os.Handler;

        $r3 := @parameter2: com.feelingk.iap.IAPLibSetting;

        $r4 := @parameter3: java.lang.String;

        specialinvoke r0.<com.feelingk.iap.net.IAPNet: void <init>()>();

        r0.<com.feelingk.iap.net.IAPBase: android.os.Handler mNetworkHandler> = null;

        r0.<com.feelingk.iap.net.IAPBase: java.lang.String BP_SERVER_IP> = null;

        r0.<com.feelingk.iap.net.IAPBase: int BP_SERVER_PORT> = 0;

        r0.<com.feelingk.iap.net.IAPBase: java.lang.String APPLICATION_ID> = "";

        r0.<com.feelingk.iap.net.IAPBase: java.lang.String MDN> = "";

        r0.<com.feelingk.iap.net.IAPBase: boolean isWifi> = 0;

        r0.<com.feelingk.iap.net.IAPBase: java.lang.String errMsg> = "";

        r0.<com.feelingk.iap.net.IAPBase: int subErrorCode> = 0;

        r0.<com.feelingk.iap.net.IAPBase: android.content.Context mContext> = null;

        r0.<com.feelingk.iap.net.IAPBase: java.util.concurrent.ExecutorService mExecutorService> = null;

        r0.<com.feelingk.iap.net.IAPBase: com.feelingk.iap.net.InitConfirm initCfm> = null;

        r0.<com.feelingk.iap.net.IAPBase: com.feelingk.iap.net.MsgConfirm msgConfirm> = null;

        r0.<com.feelingk.iap.net.IAPBase: com.feelingk.iap.net.ItemWholeAuthConfirm itemWholeAuthConfirm> = null;

        r0.<com.feelingk.iap.net.IAPBase: com.feelingk.iap.net.ItemUseConfirm itemUseConfirm> = null;

        r0.<com.feelingk.iap.net.IAPBase: com.feelingk.iap.net.ItemInfoConfirm itemInfoConfirm> = null;

        r0.<com.feelingk.iap.net.IAPBase: java.lang.String mEncJuminNumer> = null;

        $r6 = <com.feelingk.iap.net.IAPBase$NETWORK_RESULT_TYPE: com.feelingk.iap.net.IAPBase$NETWORK_RESULT_TYPE APP_MAIN>;

        r0.<com.feelingk.iap.net.IAPBase: com.feelingk.iap.net.IAPBase$NETWORK_RESULT_TYPE mNetworkState> = $r6;

        r0.<com.feelingk.iap.net.IAPBase: android.content.Context mContext> = $r1;

        r0.<com.feelingk.iap.net.IAPBase: android.os.Handler mNetworkHandler> = $r2;

        $r7 = $r3.<com.feelingk.iap.IAPLibSetting: java.lang.String AppID>;

        r0.<com.feelingk.iap.net.IAPBase: java.lang.String APPLICATION_ID> = $r7;

        $r7 = $r3.<com.feelingk.iap.IAPLibSetting: java.lang.String BP_IP>;

        r0.<com.feelingk.iap.net.IAPBase: java.lang.String BP_SERVER_IP> = $r7;

        $i0 = $r3.<com.feelingk.iap.IAPLibSetting: int BP_Port>;

        r0.<com.feelingk.iap.net.IAPBase: int BP_SERVER_PORT> = $i0;

        r0.<com.feelingk.iap.net.IAPBase: java.lang.String MDN> = $r4;

        $r5 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int)>(5);

        r0.<com.feelingk.iap.net.IAPBase: java.util.concurrent.ExecutorService mExecutorService> = $r5;

        return;
    }

    private void SendMessageToNetwork(int, java.lang.Object)
    {
        com.feelingk.iap.net.IAPBase r0;
        android.os.Message $r2;
        android.os.Handler $r3;
        int $i0;
        java.lang.Object $r1;

        r0 := @this: com.feelingk.iap.net.IAPBase;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.Object;

        $r3 = r0.<com.feelingk.iap.net.IAPBase: android.os.Handler mNetworkHandler>;

        $r2 = virtualinvoke $r3.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>($i0, $r1);

        $i0 = r0.<com.feelingk.iap.net.IAPBase: int subErrorCode>;

        $r2.<android.os.Message: int arg1> = $i0;

        $r3 = r0.<com.feelingk.iap.net.IAPBase: android.os.Handler mNetworkHandler>;

        virtualinvoke $r3.<android.os.Handler: boolean sendMessage(android.os.Message)>($r2);

        return;
    }

    static void access$0(com.feelingk.iap.net.IAPBase, com.feelingk.iap.net.MsgConfirm)
    {
        com.feelingk.iap.net.IAPBase $r0;
        com.feelingk.iap.net.MsgConfirm $r1;

        $r0 := @parameter0: com.feelingk.iap.net.IAPBase;

        $r1 := @parameter1: com.feelingk.iap.net.MsgConfirm;

        $r0.<com.feelingk.iap.net.IAPBase: com.feelingk.iap.net.MsgConfirm msgConfirm> = $r1;

        return;
    }

    static com.feelingk.iap.net.MsgConfirm access$1(com.feelingk.iap.net.IAPBase)
    {
        com.feelingk.iap.net.IAPBase $r0;
        com.feelingk.iap.net.MsgConfirm r1;

        $r0 := @parameter0: com.feelingk.iap.net.IAPBase;

        r1 = $r0.<com.feelingk.iap.net.IAPBase: com.feelingk.iap.net.MsgConfirm msgConfirm>;

        return r1;
    }

    static boolean access$2(com.feelingk.iap.net.IAPBase, com.feelingk.iap.net.MsgConfirm)
    {
        com.feelingk.iap.net.IAPBase $r0;
        com.feelingk.iap.net.MsgConfirm $r1;
        boolean $z0;

        $r0 := @parameter0: com.feelingk.iap.net.IAPBase;

        $r1 := @parameter1: com.feelingk.iap.net.MsgConfirm;

        $z0 = specialinvoke $r0.<com.feelingk.iap.net.IAPBase: boolean resultProc(com.feelingk.iap.net.MsgConfirm)>($r1);

        return $z0;
    }

    static void access$3(com.feelingk.iap.net.IAPBase, int, java.lang.Object)
    {
        int $i0;
        com.feelingk.iap.net.IAPBase $r0;
        java.lang.Object $r1;

        $r0 := @parameter0: com.feelingk.iap.net.IAPBase;

        $i0 := @parameter1: int;

        $r1 := @parameter2: java.lang.Object;

        specialinvoke $r0.<com.feelingk.iap.net.IAPBase: void SendMessageToNetwork(int,java.lang.Object)>($i0, $r1);

        return;
    }

    static void access$4(com.feelingk.iap.net.IAPBase, com.feelingk.iap.net.ItemInfoConfirm)
    {
        com.feelingk.iap.net.IAPBase $r0;
        com.feelingk.iap.net.ItemInfoConfirm $r1;

        $r0 := @parameter0: com.feelingk.iap.net.IAPBase;

        $r1 := @parameter1: com.feelingk.iap.net.ItemInfoConfirm;

        $r0.<com.feelingk.iap.net.IAPBase: com.feelingk.iap.net.ItemInfoConfirm itemInfoConfirm> = $r1;

        return;
    }

    static com.feelingk.iap.net.ItemInfoConfirm access$5(com.feelingk.iap.net.IAPBase)
    {
        com.feelingk.iap.net.IAPBase $r0;
        com.feelingk.iap.net.ItemInfoConfirm r1;

        $r0 := @parameter0: com.feelingk.iap.net.IAPBase;

        r1 = $r0.<com.feelingk.iap.net.IAPBase: com.feelingk.iap.net.ItemInfoConfirm itemInfoConfirm>;

        return r1;
    }

    static void access$6(com.feelingk.iap.net.IAPBase, com.feelingk.iap.net.ItemWholeAuthConfirm)
    {
        com.feelingk.iap.net.IAPBase $r0;
        com.feelingk.iap.net.ItemWholeAuthConfirm $r1;

        $r0 := @parameter0: com.feelingk.iap.net.IAPBase;

        $r1 := @parameter1: com.feelingk.iap.net.ItemWholeAuthConfirm;

        $r0.<com.feelingk.iap.net.IAPBase: com.feelingk.iap.net.ItemWholeAuthConfirm itemWholeAuthConfirm> = $r1;

        return;
    }

    static com.feelingk.iap.net.ItemWholeAuthConfirm access$7(com.feelingk.iap.net.IAPBase)
    {
        com.feelingk.iap.net.IAPBase $r0;
        com.feelingk.iap.net.ItemWholeAuthConfirm r1;

        $r0 := @parameter0: com.feelingk.iap.net.IAPBase;

        r1 = $r0.<com.feelingk.iap.net.IAPBase: com.feelingk.iap.net.ItemWholeAuthConfirm itemWholeAuthConfirm>;

        return r1;
    }

    static void access$8(com.feelingk.iap.net.IAPBase, com.feelingk.iap.net.ItemUseConfirm)
    {
        com.feelingk.iap.net.IAPBase $r0;
        com.feelingk.iap.net.ItemUseConfirm $r1;

        $r0 := @parameter0: com.feelingk.iap.net.IAPBase;

        $r1 := @parameter1: com.feelingk.iap.net.ItemUseConfirm;

        $r0.<com.feelingk.iap.net.IAPBase: com.feelingk.iap.net.ItemUseConfirm itemUseConfirm> = $r1;

        return;
    }

    static com.feelingk.iap.net.ItemUseConfirm access$9(com.feelingk.iap.net.IAPBase)
    {
        com.feelingk.iap.net.IAPBase $r0;
        com.feelingk.iap.net.ItemUseConfirm r1;

        $r0 := @parameter0: com.feelingk.iap.net.IAPBase;

        r1 = $r0.<com.feelingk.iap.net.IAPBase: com.feelingk.iap.net.ItemUseConfirm itemUseConfirm>;

        return r1;
    }

    public static void close()
    {
        staticinvoke <com.feelingk.iap.net.IAPNet: int iapClose(boolean)>(1);

        return;
    }

    private boolean resultProc(com.feelingk.iap.net.MsgConfirm)
    {
        java.lang.Throwable $r6;
        byte[] $r4;
        com.feelingk.iap.net.MsgConfirm $r1;
        com.feelingk.iap.net.IAPBase r0;
        byte $b0;
        int $i1;
        java.lang.StringBuilder $r2, $r7;
        java.lang.String $r3, $r8;
        java.io.UnsupportedEncodingException $r9;
        com.feelingk.iap.net.IAPBase$NETWORK_RESULT_TYPE $r5;

        r0 := @this: com.feelingk.iap.net.IAPBase;

        $r1 := @parameter0: com.feelingk.iap.net.MsgConfirm;

        $b0 = virtualinvoke $r1.<com.feelingk.iap.net.MsgConfirm: byte getResultCode()>();

        if $b0 == 0 goto label20;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("[ DEBUG ]  Network ErrorCode :");

        $b0 = virtualinvoke $r1.<com.feelingk.iap.net.MsgConfirm: byte getResultCode()>();

        $i1 = (int) $b0;

        $r2 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.feelingk.iap.util.CommonF$LOGGER: void e(java.lang.String,java.lang.String)>("IAPNet", $r3);

     label01:
        $b0 = virtualinvoke $r1.<com.feelingk.iap.net.MsgConfirm: byte getResultCode()>();

     label02:
        $i1 = (int) $b0;

        r0.<com.feelingk.iap.net.IAPBase: int subErrorCode> = $i1;

     label03:
        $r4 = virtualinvoke $r1.<com.feelingk.iap.net.MsgConfirm: byte[] getMsg()>();

     label04:
        if $r4 == null goto label11;

        $r8 = new java.lang.String;

     label05:
        $r4 = virtualinvoke $r1.<com.feelingk.iap.net.MsgConfirm: byte[] getMsg()>();

        specialinvoke $r8.<java.lang.String: void <init>(byte[],java.lang.String)>($r4, "MS949");

     label06:
        r0.<com.feelingk.iap.net.IAPBase: java.lang.String errMsg> = $r8;

        $r7 = new java.lang.StringBuilder;

        $r2 = $r7;

     label07:
        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("Network Message :");

     label08:
        $r3 = r0.<com.feelingk.iap.net.IAPBase: java.lang.String errMsg>;

     label09:
        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.feelingk.iap.util.CommonF$LOGGER: void i(java.lang.String,java.lang.String)>("flybbird", $r3);

     label10:
        $r5 = <com.feelingk.iap.net.IAPBase$NETWORK_RESULT_TYPE: com.feelingk.iap.net.IAPBase$NETWORK_RESULT_TYPE APP_ERROR>;

        r0.<com.feelingk.iap.net.IAPBase: com.feelingk.iap.net.IAPBase$NETWORK_RESULT_TYPE mNetworkState> = $r5;

        return 0;

     label11:
        $r3 = virtualinvoke $r1.<com.feelingk.iap.net.MsgConfirm: java.lang.String GetUserMessage()>();

     label12:
        if $r3 == null goto label16;

     label13:
        $r3 = virtualinvoke $r1.<com.feelingk.iap.net.MsgConfirm: java.lang.String GetUserMessage()>();

     label14:
        r0.<com.feelingk.iap.net.IAPBase: java.lang.String errMsg> = $r3;

        goto label10;

     label15:
        $r6 := @caughtexception;

        $r9 = (java.io.UnsupportedEncodingException) $r6;

        virtualinvoke $r9.<java.io.UnsupportedEncodingException: void printStackTrace()>();

        goto label10;

     label16:
        $r3 = virtualinvoke $r1.<com.feelingk.iap.net.MsgConfirm: java.lang.String GetDumpMessage()>();

     label17:
        if $r3 == null goto label10;

     label18:
        $r3 = virtualinvoke $r1.<com.feelingk.iap.net.MsgConfirm: java.lang.String GetDumpMessage()>();

     label19:
        r0.<com.feelingk.iap.net.IAPBase: java.lang.String errMsg> = $r3;

        goto label10;

     label20:
        r0.<com.feelingk.iap.net.IAPBase: int subErrorCode> = 0;

        return 1;

        catch java.io.UnsupportedEncodingException from label01 to label02 with label15;
        catch java.io.UnsupportedEncodingException from label03 to label04 with label15;
        catch java.io.UnsupportedEncodingException from label05 to label06 with label15;
        catch java.io.UnsupportedEncodingException from label07 to label08 with label15;
        catch java.io.UnsupportedEncodingException from label09 to label10 with label15;
        catch java.io.UnsupportedEncodingException from label11 to label12 with label15;
        catch java.io.UnsupportedEncodingException from label13 to label14 with label15;
        catch java.io.UnsupportedEncodingException from label16 to label17 with label15;
        catch java.io.UnsupportedEncodingException from label18 to label19 with label15;
    }

    public void ItemAuth(int, java.lang.String)
    {
        com.feelingk.iap.net.IAPBase r0;
        int $i0;
        com.feelingk.iap.net.IAPBase$CallItemAuth $r3;
        java.lang.String $r1;
        java.util.concurrent.ExecutorService $r2;

        r0 := @this: com.feelingk.iap.net.IAPBase;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.String;

        $r2 = r0.<com.feelingk.iap.net.IAPBase: java.util.concurrent.ExecutorService mExecutorService>;

        $r3 = new com.feelingk.iap.net.IAPBase$CallItemAuth;

        specialinvoke $r3.<com.feelingk.iap.net.IAPBase$CallItemAuth: void <init>(com.feelingk.iap.net.IAPBase,int,java.lang.String)>(r0, $i0, $r1);

        interfaceinvoke $r2.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>($r3);

        return;
    }

    public void ItemInfo(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        com.feelingk.iap.net.IAPBase r0;
        int $i0;
        com.feelingk.iap.net.IAPBase$CallItemInfo $r5;
        java.lang.String $r1, $r2, $r3, $r4;
        java.util.concurrent.ExecutorService $r6;

        r0 := @this: com.feelingk.iap.net.IAPBase;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: java.lang.String;

        $r4 := @parameter4: java.lang.String;

        $r6 = r0.<com.feelingk.iap.net.IAPBase: java.util.concurrent.ExecutorService mExecutorService>;

        $r5 = new com.feelingk.iap.net.IAPBase$CallItemInfo;

        specialinvoke $r5.<com.feelingk.iap.net.IAPBase$CallItemInfo: void <init>(com.feelingk.iap.net.IAPBase,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r0, $i0, $r1, $r2, $r3, $r4);

        interfaceinvoke $r6.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>($r5);

        return;
    }

    public void ItemPurchase(java.lang.String, java.lang.String, java.lang.Boolean)
    {
        com.feelingk.iap.net.IAPBase r0;
        com.feelingk.iap.net.IAPBase$CallItemPurchase $r5;
        java.lang.Boolean $r3;
        java.lang.String $r1, $r2;
        java.util.concurrent.ExecutorService $r4;

        r0 := @this: com.feelingk.iap.net.IAPBase;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.Boolean;

        $r4 = r0.<com.feelingk.iap.net.IAPBase: java.util.concurrent.ExecutorService mExecutorService>;

        $r5 = new com.feelingk.iap.net.IAPBase$CallItemPurchase;

        specialinvoke $r5.<com.feelingk.iap.net.IAPBase$CallItemPurchase: void <init>(com.feelingk.iap.net.IAPBase,java.lang.String,java.lang.String,java.lang.Boolean)>(r0, $r1, $r2, $r3);

        interfaceinvoke $r4.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>($r5);

        return;
    }

    public void ItemPurchase(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Boolean)
    {
        com.feelingk.iap.net.IAPBase r0;
        com.feelingk.iap.net.IAPBase$CallItemPurchase $r6;
        java.lang.Boolean $r5;
        java.lang.String $r1, $r2, $r3, $r4;
        java.util.concurrent.ExecutorService $r7;

        r0 := @this: com.feelingk.iap.net.IAPBase;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.lang.String;

        $r5 := @parameter4: java.lang.Boolean;

        $r7 = r0.<com.feelingk.iap.net.IAPBase: java.util.concurrent.ExecutorService mExecutorService>;

        $r6 = new com.feelingk.iap.net.IAPBase$CallItemPurchase;

        specialinvoke $r6.<com.feelingk.iap.net.IAPBase$CallItemPurchase: void <init>(com.feelingk.iap.net.IAPBase,java.lang.String,java.lang.String,java.lang.Boolean,java.lang.String,java.lang.String)>(r0, $r1, $r2, $r5, $r3, $r4);

        interfaceinvoke $r7.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>($r6);

        return;
    }

    public void ItemPurchase(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Boolean, java.lang.Boolean)
    {
        com.feelingk.iap.net.IAPBase r0;
        com.feelingk.iap.net.IAPBase$CallItemPurchase $r7;
        java.lang.Boolean $r5, $r6;
        java.lang.String $r1, $r2, $r3, $r4;
        java.util.concurrent.ExecutorService $r8;

        r0 := @this: com.feelingk.iap.net.IAPBase;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.lang.String;

        $r5 := @parameter4: java.lang.Boolean;

        $r6 := @parameter5: java.lang.Boolean;

        $r8 = r0.<com.feelingk.iap.net.IAPBase: java.util.concurrent.ExecutorService mExecutorService>;

        $r7 = new com.feelingk.iap.net.IAPBase$CallItemPurchase;

        specialinvoke $r7.<com.feelingk.iap.net.IAPBase$CallItemPurchase: void <init>(com.feelingk.iap.net.IAPBase,java.lang.String,java.lang.String,java.lang.Boolean,java.lang.String,java.lang.String,java.lang.Boolean)>(r0, $r1, $r2, $r5, $r3, $r4, $r6);

        interfaceinvoke $r8.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>($r7);

        return;
    }

    public void ItemPurchaseDanal(java.lang.String, java.lang.String, java.lang.String, int, java.lang.String, java.lang.String, java.lang.Boolean, java.lang.String)
    {
        com.feelingk.iap.net.IAPBase$CallItemPurchaseDanal $r8;
        com.feelingk.iap.net.IAPBase r0;
        int $i0;
        java.lang.Boolean $r6;
        java.lang.String $r1, $r2, $r3, $r4, $r5, $r7;
        java.util.concurrent.ExecutorService $r9;
        boolean $z0;

        r0 := @this: com.feelingk.iap.net.IAPBase;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $i0 := @parameter3: int;

        $r4 := @parameter4: java.lang.String;

        $r5 := @parameter5: java.lang.String;

        $r6 := @parameter6: java.lang.Boolean;

        $r7 := @parameter7: java.lang.String;

        $r9 = r0.<com.feelingk.iap.net.IAPBase: java.util.concurrent.ExecutorService mExecutorService>;

        $r8 = new com.feelingk.iap.net.IAPBase$CallItemPurchaseDanal;

        $z0 = virtualinvoke $r6.<java.lang.Boolean: boolean booleanValue()>();

        specialinvoke $r8.<com.feelingk.iap.net.IAPBase$CallItemPurchaseDanal: void <init>(com.feelingk.iap.net.IAPBase,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,boolean,java.lang.String)>(r0, $r1, $r2, $r3, $i0, $r4, $r5, $z0, $r7);

        interfaceinvoke $r9.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>($r8);

        return;
    }

    public void ItemQuery(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        com.feelingk.iap.net.IAPBase$CallItemQuery $r5;
        com.feelingk.iap.net.IAPBase r0;
        int $i0;
        java.lang.String $r1, $r2, $r3, $r4;
        java.util.concurrent.ExecutorService $r6;

        r0 := @this: com.feelingk.iap.net.IAPBase;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: java.lang.String;

        $r4 := @parameter4: java.lang.String;

        $r6 = r0.<com.feelingk.iap.net.IAPBase: java.util.concurrent.ExecutorService mExecutorService>;

        $r5 = new com.feelingk.iap.net.IAPBase$CallItemQuery;

        specialinvoke $r5.<com.feelingk.iap.net.IAPBase$CallItemQuery: void <init>(com.feelingk.iap.net.IAPBase,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r0, $i0, $r1, $r2, $r3, $r4);

        interfaceinvoke $r6.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>($r5);

        return;
    }

    public void ItemQuery(java.lang.String, java.lang.String)
    {
        com.feelingk.iap.net.IAPBase r0;
        java.lang.String $r1, $r2;
        java.util.concurrent.ExecutorService $r3;
        com.feelingk.iap.net.IAPBase$CallItemQuery $r4;

        r0 := @this: com.feelingk.iap.net.IAPBase;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = r0.<com.feelingk.iap.net.IAPBase: java.util.concurrent.ExecutorService mExecutorService>;

        $r4 = new com.feelingk.iap.net.IAPBase$CallItemQuery;

        specialinvoke $r4.<com.feelingk.iap.net.IAPBase$CallItemQuery: void <init>(com.feelingk.iap.net.IAPBase,java.lang.String,java.lang.String)>(r0, $r1, $r2);

        interfaceinvoke $r3.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>($r4);

        return;
    }

    public void ItemUse(int, java.lang.String)
    {
        com.feelingk.iap.net.IAPBase r0;
        com.feelingk.iap.net.IAPBase$CallItemItemUse $r3;
        int $i0;
        java.lang.String $r1;
        java.util.concurrent.ExecutorService $r2;

        r0 := @this: com.feelingk.iap.net.IAPBase;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.String;

        $r2 = r0.<com.feelingk.iap.net.IAPBase: java.util.concurrent.ExecutorService mExecutorService>;

        $r3 = new com.feelingk.iap.net.IAPBase$CallItemItemUse;

        specialinvoke $r3.<com.feelingk.iap.net.IAPBase$CallItemItemUse: void <init>(com.feelingk.iap.net.IAPBase,int,java.lang.String)>(r0, $i0, $r1);

        interfaceinvoke $r2.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>($r3);

        return;
    }

    public void ItemWholeAuth(int)
    {
        com.feelingk.iap.net.IAPBase r0;
        int $i0;
        java.util.concurrent.ExecutorService $r1;
        com.feelingk.iap.net.IAPBase$CallItemWholeAuth $r2;

        r0 := @this: com.feelingk.iap.net.IAPBase;

        $i0 := @parameter0: int;

        $r1 = r0.<com.feelingk.iap.net.IAPBase: java.util.concurrent.ExecutorService mExecutorService>;

        $r2 = new com.feelingk.iap.net.IAPBase$CallItemWholeAuth;

        specialinvoke $r2.<com.feelingk.iap.net.IAPBase$CallItemWholeAuth: void <init>(com.feelingk.iap.net.IAPBase,int)>(r0, $i0);

        interfaceinvoke $r1.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>($r2);

        return;
    }

    public void Membership(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        com.feelingk.iap.net.IAPBase$CallMembership $r6;
        com.feelingk.iap.net.IAPBase r0;
        int $i0;
        java.lang.String $r1, $r2, $r3, $r4, $r5;
        java.util.concurrent.ExecutorService $r7;

        r0 := @this: com.feelingk.iap.net.IAPBase;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: java.lang.String;

        $r4 := @parameter4: java.lang.String;

        $r5 := @parameter5: java.lang.String;

        $r7 = r0.<com.feelingk.iap.net.IAPBase: java.util.concurrent.ExecutorService mExecutorService>;

        $r6 = new com.feelingk.iap.net.IAPBase$CallMembership;

        specialinvoke $r6.<com.feelingk.iap.net.IAPBase$CallMembership: void <init>(com.feelingk.iap.net.IAPBase,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r0, $i0, $r1, $r2, $r3, $r4, $r5);

        interfaceinvoke $r7.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>($r6);

        return;
    }

    public void Reset()
    {
        com.feelingk.iap.net.IAPBase r0;
        java.util.concurrent.ExecutorService $r1;
        boolean $z0;

        r0 := @this: com.feelingk.iap.net.IAPBase;

        $r1 = r0.<com.feelingk.iap.net.IAPBase: java.util.concurrent.ExecutorService mExecutorService>;

        $z0 = interfaceinvoke $r1.<java.util.concurrent.ExecutorService: boolean isShutdown()>();

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int)>(5);

        r0.<com.feelingk.iap.net.IAPBase: java.util.concurrent.ExecutorService mExecutorService> = $r1;

     label1:
        return;
    }

    public void StopService()
    {
        com.feelingk.iap.net.IAPBase r0;
        java.util.concurrent.ExecutorService $r1;

        r0 := @this: com.feelingk.iap.net.IAPBase;

        $r1 = r0.<com.feelingk.iap.net.IAPBase: java.util.concurrent.ExecutorService mExecutorService>;

        if $r1 == null goto label1;

        $r1 = r0.<com.feelingk.iap.net.IAPBase: java.util.concurrent.ExecutorService mExecutorService>;

        interfaceinvoke $r1.<java.util.concurrent.ExecutorService: void shutdown()>();

     label1:
        return;
    }

    boolean connect(int, java.lang.String, java.lang.String)
    {
        android.content.Context $r3;
        com.feelingk.iap.net.IAPBase r0;
        int $i0, $i1;
        java.lang.String $r1, $r2, $r9, $r10, $r11, $r12;
        boolean $z0;
        android.net.ConnectivityManager r5;
        android.net.NetworkInfo $r6, $r7;
        java.lang.Object $r4;
        java.lang.StringBuilder $r8, $r14;
        com.feelingk.iap.net.ServerInfo $r15;
        com.feelingk.iap.net.InitConfirm $r13;

        r0 := @this: com.feelingk.iap.net.IAPBase;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r3 = r0.<com.feelingk.iap.net.IAPBase: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("connectivity");

        r5 = (android.net.ConnectivityManager) $r4;

        $r6 = virtualinvoke r5.<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>(0);

        $r7 = virtualinvoke r5.<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>(1);

        $z0 = virtualinvoke $r7.<android.net.NetworkInfo: boolean isConnected()>();

        if $z0 == 0 goto label03;

        r0.<com.feelingk.iap.net.IAPBase: boolean isWifi> = 1;

     label01:
        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("(IAPBase) IAPNet Wifi = ");

        $z0 = r0.<com.feelingk.iap.net.IAPBase: boolean isWifi>;

        $r8 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  /  Connect= ");

        $z0 = staticinvoke <com.feelingk.iap.net.IAPNet: boolean isConnect()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.feelingk.iap.util.CommonF$LOGGER: void i(java.lang.String,java.lang.String)>("IAPBase", $r9);

        $z0 = staticinvoke <com.feelingk.iap.net.IAPNet: boolean isConnect()>();

        if $z0 != 0 goto label08;

        staticinvoke <com.feelingk.iap.util.CommonF$LOGGER: void i(java.lang.String,java.lang.String)>("IAPBase", "G/W Connect and Success !!! ");

        $z0 = r0.<com.feelingk.iap.net.IAPBase: boolean isWifi>;

        if $z0 == 0 goto label07;

        staticinvoke <com.feelingk.iap.net.IAPNet: void setWifi(boolean)>(1);

        $r15 = new com.feelingk.iap.net.ServerInfo;

        specialinvoke $r15.<com.feelingk.iap.net.ServerInfo: void <init>(java.lang.String,int)>("iap.tstore.co.kr", 7510);

        $r9 = r0.<com.feelingk.iap.net.IAPBase: java.lang.String APPLICATION_ID>;

        $r10 = r0.<com.feelingk.iap.net.IAPBase: java.lang.String MDN>;

        $r11 = r0.<com.feelingk.iap.net.IAPBase: java.lang.String BP_SERVER_IP>;

        $i1 = r0.<com.feelingk.iap.net.IAPBase: int BP_SERVER_PORT>;

        $r12 = r0.<com.feelingk.iap.net.IAPBase: java.lang.String mEncJuminNumer>;

        $r13 = staticinvoke <com.feelingk.iap.net.IAPNet: com.feelingk.iap.net.InitConfirm iapConnect(com.feelingk.iap.net.ServerInfo,int,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,boolean)>($r15, $i0, $r9, $r10, $r11, $i1, $r1, $r2, $r12, 0);

        r0.<com.feelingk.iap.net.IAPBase: com.feelingk.iap.net.InitConfirm initCfm> = $r13;

     label02:
        $r13 = r0.<com.feelingk.iap.net.IAPBase: com.feelingk.iap.net.InitConfirm initCfm>;

        if $r13 != null goto label09;

        return 0;

     label03:
        $z0 = virtualinvoke $r6.<android.net.NetworkInfo: boolean isConnected()>();

        if $z0 == 0 goto label04;

        r0.<com.feelingk.iap.net.IAPBase: boolean isWifi> = 0;

        goto label01;

     label04:
        if $r1 != null goto label06;

        $i0 = -1;

        r0.<com.feelingk.iap.net.IAPBase: int subErrorCode> = $i0;

        specialinvoke r0.<com.feelingk.iap.net.IAPBase: void SendMessageToNetwork(int,java.lang.Object)>(2000, "\ub124\ud2b8\uc6cc\ud06c\uac00 \uc5f0\uacb0\ub418\uc5b4 \uc788\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.");

     label05:
        return 0;

     label06:
        specialinvoke r0.<com.feelingk.iap.net.IAPBase: void SendMessageToNetwork(int,java.lang.Object)>(2007, null);

        goto label05;

     label07:
        staticinvoke <com.feelingk.iap.net.IAPNet: void setWifi(boolean)>(0);

        $r15 = new com.feelingk.iap.net.ServerInfo;

        specialinvoke $r15.<com.feelingk.iap.net.ServerInfo: void <init>(java.lang.String,int)>("iap.tstore.co.kr", 7410);

        $r9 = r0.<com.feelingk.iap.net.IAPBase: java.lang.String APPLICATION_ID>;

        $r10 = r0.<com.feelingk.iap.net.IAPBase: java.lang.String MDN>;

        $r11 = r0.<com.feelingk.iap.net.IAPBase: java.lang.String BP_SERVER_IP>;

        $i1 = r0.<com.feelingk.iap.net.IAPBase: int BP_SERVER_PORT>;

        $r12 = r0.<com.feelingk.iap.net.IAPBase: java.lang.String mEncJuminNumer>;

        $r13 = staticinvoke <com.feelingk.iap.net.IAPNet: com.feelingk.iap.net.InitConfirm iapConnect(com.feelingk.iap.net.ServerInfo,int,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,boolean)>($r15, $i0, $r9, $r10, $r11, $i1, $r1, $r2, $r12, 0);

        r0.<com.feelingk.iap.net.IAPBase: com.feelingk.iap.net.InitConfirm initCfm> = $r13;

        goto label02;

     label08:
        staticinvoke <com.feelingk.iap.util.CommonF$LOGGER: void i(java.lang.String,java.lang.String)>("IAPBase", "G/W Re Connect + Auth");

        $r9 = r0.<com.feelingk.iap.net.IAPBase: java.lang.String APPLICATION_ID>;

        $r10 = r0.<com.feelingk.iap.net.IAPBase: java.lang.String mEncJuminNumer>;

        $r11 = r0.<com.feelingk.iap.net.IAPBase: java.lang.String MDN>;

        $r12 = r0.<com.feelingk.iap.net.IAPBase: java.lang.String BP_SERVER_IP>;

        $i1 = r0.<com.feelingk.iap.net.IAPBase: int BP_SERVER_PORT>;

        $r13 = staticinvoke <com.feelingk.iap.net.IAPNet: com.feelingk.iap.net.InitConfirm iapReAuth(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>($i0, $r9, $r10, $r11, $r12, $i1, $r1, $r2);

        r0.<com.feelingk.iap.net.IAPBase: com.feelingk.iap.net.InitConfirm initCfm> = $r13;

        goto label02;

     label09:
        $r13 = r0.<com.feelingk.iap.net.IAPBase: com.feelingk.iap.net.InitConfirm initCfm>;

        $z0 = specialinvoke r0.<com.feelingk.iap.net.IAPBase: boolean resultProc(com.feelingk.iap.net.MsgConfirm)>($r13);

        if $z0 != 0 goto label14;

        $i0 = r0.<com.feelingk.iap.net.IAPBase: int subErrorCode>;

        $i1 = -11;

        if $i0 == $i1 goto label10;

        $i0 = r0.<com.feelingk.iap.net.IAPBase: int subErrorCode>;

        $i1 = -12;

        if $i0 == $i1 goto label10;

        $i0 = r0.<com.feelingk.iap.net.IAPBase: int subErrorCode>;

        $i1 = -13;

        if $i0 != $i1 goto label12;

     label10:
        r0.<com.feelingk.iap.net.IAPBase: int subErrorCode> = 0;

        specialinvoke r0.<com.feelingk.iap.net.IAPBase: void SendMessageToNetwork(int,java.lang.Object)>(2008, "\ub124\ud2b8\uc6cc\ud06c \uc5f0\uacb0\uc744 \ud655\uc778 \ud574\uc8fc\uc2dc\uae30 \ubc14\ub78d\ub2c8\ub2e4.");

     label11:
        return 0;

     label12:
        if $r1 != null goto label13;

        $r1 = r0.<com.feelingk.iap.net.IAPBase: java.lang.String errMsg>;

        specialinvoke r0.<com.feelingk.iap.net.IAPBase: void SendMessageToNetwork(int,java.lang.Object)>(2000, $r1);

        goto label11;

     label13:
        $r1 = r0.<com.feelingk.iap.net.IAPBase: java.lang.String errMsg>;

        specialinvoke r0.<com.feelingk.iap.net.IAPBase: void SendMessageToNetwork(int,java.lang.Object)>(2007, $r1);

        goto label11;

     label14:
        return 1;
    }

    public com.feelingk.iap.net.InitConfirm getInitConfirmMessage()
    {
        com.feelingk.iap.net.IAPBase r0;
        com.feelingk.iap.net.InitConfirm r1;

        r0 := @this: com.feelingk.iap.net.IAPBase;

        r1 = r0.<com.feelingk.iap.net.IAPBase: com.feelingk.iap.net.InitConfirm initCfm>;

        return r1;
    }

    public com.feelingk.iap.net.ItemInfoConfirm getItemInfoConfirmMessage()
    {
        com.feelingk.iap.net.IAPBase r0;
        com.feelingk.iap.net.ItemInfoConfirm r1;

        r0 := @this: com.feelingk.iap.net.IAPBase;

        r1 = r0.<com.feelingk.iap.net.IAPBase: com.feelingk.iap.net.ItemInfoConfirm itemInfoConfirm>;

        return r1;
    }

    public com.feelingk.iap.net.ItemUseConfirm getItemUseConfirmMessage()
    {
        com.feelingk.iap.net.IAPBase r0;
        com.feelingk.iap.net.ItemUseConfirm r1;

        r0 := @this: com.feelingk.iap.net.IAPBase;

        r1 = r0.<com.feelingk.iap.net.IAPBase: com.feelingk.iap.net.ItemUseConfirm itemUseConfirm>;

        return r1;
    }

    public com.feelingk.iap.net.ItemWholeAuthConfirm getItemWholeAuthConfirmMessage()
    {
        com.feelingk.iap.net.IAPBase r0;
        com.feelingk.iap.net.ItemWholeAuthConfirm r1;

        r0 := @this: com.feelingk.iap.net.IAPBase;

        r1 = r0.<com.feelingk.iap.net.IAPBase: com.feelingk.iap.net.ItemWholeAuthConfirm itemWholeAuthConfirm>;

        return r1;
    }

    public byte[] sendBPData(byte[], int)
    {
        java.lang.Throwable $r5, $r6;
        byte[] $r1;
        com.feelingk.iap.net.IAPBase$CallSendBPData $r7;
        java.util.concurrent.ExecutionException $r9;
        com.feelingk.iap.net.IAPBase r0;
        java.util.concurrent.Future $r3;
        java.lang.InterruptedException $r8;
        int $i0;
        java.lang.Object $r4;
        java.util.concurrent.ExecutorService $r2;

        r0 := @this: com.feelingk.iap.net.IAPBase;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 = r0.<com.feelingk.iap.net.IAPBase: java.util.concurrent.ExecutorService mExecutorService>;

        $r7 = new com.feelingk.iap.net.IAPBase$CallSendBPData;

        specialinvoke $r7.<com.feelingk.iap.net.IAPBase$CallSendBPData: void <init>(com.feelingk.iap.net.IAPBase,byte[],int)>(r0, $r1, $i0);

        $r3 = interfaceinvoke $r2.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>($r7);

     label1:
        $r4 = interfaceinvoke $r3.<java.util.concurrent.Future: java.lang.Object get()>();

     label2:
        $r1 = (byte[]) $r4;

        return $r1;

     label3:
        $r5 := @caughtexception;

        specialinvoke r0.<com.feelingk.iap.net.IAPBase: void SendMessageToNetwork(int,java.lang.Object)>(2005, null);

        $r8 = (java.lang.InterruptedException) $r5;

        virtualinvoke $r8.<java.lang.InterruptedException: void printStackTrace()>();

        return null;

     label4:
        $r6 := @caughtexception;

        specialinvoke r0.<com.feelingk.iap.net.IAPBase: void SendMessageToNetwork(int,java.lang.Object)>(2005, null);

        $r9 = (java.util.concurrent.ExecutionException) $r6;

        virtualinvoke $r9.<java.util.concurrent.ExecutionException: void printStackTrace()>();

        return null;

        catch java.lang.InterruptedException from label1 to label2 with label3;
        catch java.util.concurrent.ExecutionException from label1 to label2 with label4;
    }

    public void setBaseEncodeJuminNumber(java.lang.String)
    {
        com.feelingk.iap.net.IAPBase r0;
        java.lang.String $r1;

        r0 := @this: com.feelingk.iap.net.IAPBase;

        $r1 := @parameter0: java.lang.String;

        r0.<com.feelingk.iap.net.IAPBase: java.lang.String mEncJuminNumer> = $r1;

        return;
    }

    public static void <clinit>()
    {
        <com.feelingk.iap.net.IAPBase: java.lang.String TAG> = "IAPBase";

        return;
    }
}
