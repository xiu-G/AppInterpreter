public class proguard.classfile.editor.ExceptionInfoAdder extends java.lang.Object implements proguard.classfile.attribute.visitor.ExceptionInfoVisitor
{
    private final proguard.classfile.editor.CodeAttributeComposer codeAttributeComposer;
    private final proguard.classfile.editor.ConstantAdder constantAdder;

    public void <init>(proguard.classfile.ProgramClass, proguard.classfile.editor.CodeAttributeComposer)
    {
        proguard.classfile.editor.ConstantAdder $r3;
        proguard.classfile.editor.ExceptionInfoAdder r0;
        proguard.classfile.editor.CodeAttributeComposer $r2;
        proguard.classfile.ProgramClass $r1;

        r0 := @this: proguard.classfile.editor.ExceptionInfoAdder;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $r2 := @parameter1: proguard.classfile.editor.CodeAttributeComposer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new proguard.classfile.editor.ConstantAdder;

        specialinvoke $r3.<proguard.classfile.editor.ConstantAdder: void <init>(proguard.classfile.ProgramClass)>($r1);

        r0.<proguard.classfile.editor.ExceptionInfoAdder: proguard.classfile.editor.ConstantAdder constantAdder> = $r3;

        r0.<proguard.classfile.editor.ExceptionInfoAdder: proguard.classfile.editor.CodeAttributeComposer codeAttributeComposer> = $r2;

        return;
    }

    public void visitExceptionInfo(proguard.classfile.Clazz, proguard.classfile.Method, proguard.classfile.attribute.CodeAttribute, proguard.classfile.attribute.ExceptionInfo)
    {
        proguard.classfile.editor.ConstantAdder $r7;
        proguard.classfile.editor.CodeAttributeComposer $r6;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r3;
        proguard.classfile.editor.ExceptionInfoAdder r0;
        int $i0, $i1, $i2, $i3;
        proguard.classfile.Method $r2;
        proguard.classfile.attribute.ExceptionInfo $r4, $r5;

        r0 := @this: proguard.classfile.editor.ExceptionInfoAdder;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.Method;

        $r3 := @parameter2: proguard.classfile.attribute.CodeAttribute;

        $r4 := @parameter3: proguard.classfile.attribute.ExceptionInfo;

        $r5 = new proguard.classfile.attribute.ExceptionInfo;

        $i3 = $r4.<proguard.classfile.attribute.ExceptionInfo: int u2startPC>;

        $i0 = $r4.<proguard.classfile.attribute.ExceptionInfo: int u2endPC>;

        $i1 = $r4.<proguard.classfile.attribute.ExceptionInfo: int u2handlerPC>;

        $i2 = $r4.<proguard.classfile.attribute.ExceptionInfo: int u2catchType>;

        if $i2 != 0 goto label2;

        $i2 = 0;

     label1:
        specialinvoke $r5.<proguard.classfile.attribute.ExceptionInfo: void <init>(int,int,int,int)>($i3, $i0, $i1, $i2);

        $r6 = r0.<proguard.classfile.editor.ExceptionInfoAdder: proguard.classfile.editor.CodeAttributeComposer codeAttributeComposer>;

        virtualinvoke $r6.<proguard.classfile.editor.CodeAttributeComposer: void appendException(proguard.classfile.attribute.ExceptionInfo)>($r5);

        return;

     label2:
        $r7 = r0.<proguard.classfile.editor.ExceptionInfoAdder: proguard.classfile.editor.ConstantAdder constantAdder>;

        $i2 = $r4.<proguard.classfile.attribute.ExceptionInfo: int u2catchType>;

        $i2 = virtualinvoke $r7.<proguard.classfile.editor.ConstantAdder: int addConstant(proguard.classfile.Clazz,int)>($r1, $i2);

        goto label1;
    }
}
