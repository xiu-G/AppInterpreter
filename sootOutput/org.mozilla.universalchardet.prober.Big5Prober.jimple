public class org.mozilla.universalchardet.prober.Big5Prober extends org.mozilla.universalchardet.prober.CharsetProber
{
    private static final org.mozilla.universalchardet.prober.statemachine.SMModel smModel;
    private org.mozilla.universalchardet.prober.statemachine.CodingStateMachine codingSM;
    private org.mozilla.universalchardet.prober.distributionanalysis.Big5DistributionAnalysis distributionAnalyzer;
    private byte[] lastChar;
    private org.mozilla.universalchardet.prober.CharsetProber$ProbingState state;

    static void <clinit>()
    {
        org.mozilla.universalchardet.prober.statemachine.Big5SMModel $r0;

        $r0 = new org.mozilla.universalchardet.prober.statemachine.Big5SMModel;

        specialinvoke $r0.<org.mozilla.universalchardet.prober.statemachine.Big5SMModel: void <init>()>();

        <org.mozilla.universalchardet.prober.Big5Prober: org.mozilla.universalchardet.prober.statemachine.SMModel smModel> = $r0;

        return;
    }

    public void <init>()
    {
        byte[] $r4;
        org.mozilla.universalchardet.prober.statemachine.CodingStateMachine $r2;
        org.mozilla.universalchardet.prober.distributionanalysis.Big5DistributionAnalysis $r3;
        org.mozilla.universalchardet.prober.statemachine.SMModel $r1;
        org.mozilla.universalchardet.prober.Big5Prober r0;

        r0 := @this: org.mozilla.universalchardet.prober.Big5Prober;

        specialinvoke r0.<org.mozilla.universalchardet.prober.CharsetProber: void <init>()>();

        $r2 = new org.mozilla.universalchardet.prober.statemachine.CodingStateMachine;

        $r1 = <org.mozilla.universalchardet.prober.Big5Prober: org.mozilla.universalchardet.prober.statemachine.SMModel smModel>;

        specialinvoke $r2.<org.mozilla.universalchardet.prober.statemachine.CodingStateMachine: void <init>(org.mozilla.universalchardet.prober.statemachine.SMModel)>($r1);

        r0.<org.mozilla.universalchardet.prober.Big5Prober: org.mozilla.universalchardet.prober.statemachine.CodingStateMachine codingSM> = $r2;

        $r3 = new org.mozilla.universalchardet.prober.distributionanalysis.Big5DistributionAnalysis;

        specialinvoke $r3.<org.mozilla.universalchardet.prober.distributionanalysis.Big5DistributionAnalysis: void <init>()>();

        r0.<org.mozilla.universalchardet.prober.Big5Prober: org.mozilla.universalchardet.prober.distributionanalysis.Big5DistributionAnalysis distributionAnalyzer> = $r3;

        $r4 = newarray (byte)[2];

        r0.<org.mozilla.universalchardet.prober.Big5Prober: byte[] lastChar> = $r4;

        virtualinvoke r0.<org.mozilla.universalchardet.prober.Big5Prober: void reset()>();

        return;
    }

    public java.lang.String getCharSetName()
    {
        java.lang.String r1;
        org.mozilla.universalchardet.prober.Big5Prober r0;

        r0 := @this: org.mozilla.universalchardet.prober.Big5Prober;

        r1 = <org.mozilla.universalchardet.Constants: java.lang.String CHARSET_BIG5>;

        return r1;
    }

    public float getConfidence()
    {
        float $f0;
        org.mozilla.universalchardet.prober.distributionanalysis.Big5DistributionAnalysis $r1;
        org.mozilla.universalchardet.prober.Big5Prober r0;

        r0 := @this: org.mozilla.universalchardet.prober.Big5Prober;

        $r1 = r0.<org.mozilla.universalchardet.prober.Big5Prober: org.mozilla.universalchardet.prober.distributionanalysis.Big5DistributionAnalysis distributionAnalyzer>;

        $f0 = virtualinvoke $r1.<org.mozilla.universalchardet.prober.distributionanalysis.Big5DistributionAnalysis: float getConfidence()>();

        return $f0;
    }

    public org.mozilla.universalchardet.prober.CharsetProber$ProbingState getState()
    {
        org.mozilla.universalchardet.prober.CharsetProber$ProbingState r1;
        org.mozilla.universalchardet.prober.Big5Prober r0;

        r0 := @this: org.mozilla.universalchardet.prober.Big5Prober;

        r1 = r0.<org.mozilla.universalchardet.prober.Big5Prober: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state>;

        return r1;
    }

    public org.mozilla.universalchardet.prober.CharsetProber$ProbingState handleData(byte[], int, int)
    {
        byte[] $r1, $r4;
        org.mozilla.universalchardet.prober.CharsetProber$ProbingState $r3, $r5;
        org.mozilla.universalchardet.prober.statemachine.CodingStateMachine $r2;
        org.mozilla.universalchardet.prober.Big5Prober r0;
        byte $b3;
        int $i0, $i1, $i2, $i4, $i5;
        float $f0;
        org.mozilla.universalchardet.prober.distributionanalysis.Big5DistributionAnalysis $r6;
        boolean $z0;

        r0 := @this: org.mozilla.universalchardet.prober.Big5Prober;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i1 = 0 + $i1;

        $i2 = 0;

     label1:
        if $i2 >= $i1 goto label2;

        $r2 = r0.<org.mozilla.universalchardet.prober.Big5Prober: org.mozilla.universalchardet.prober.statemachine.CodingStateMachine codingSM>;

        $b3 = $r1[$i2];

        $i4 = virtualinvoke $r2.<org.mozilla.universalchardet.prober.statemachine.CodingStateMachine: int nextState(byte)>($b3);

        if $i4 != 1 goto label4;

        $r3 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState NOT_ME>;

        r0.<org.mozilla.universalchardet.prober.Big5Prober: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state> = $r3;

     label2:
        $r4 = r0.<org.mozilla.universalchardet.prober.Big5Prober: byte[] lastChar>;

        $i0 = $i1 + -1;

        $b3 = $r1[$i0];

        $r4[0] = $b3;

        $r3 = r0.<org.mozilla.universalchardet.prober.Big5Prober: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state>;

        $r5 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState DETECTING>;

        if $r3 != $r5 goto label3;

        $r6 = r0.<org.mozilla.universalchardet.prober.Big5Prober: org.mozilla.universalchardet.prober.distributionanalysis.Big5DistributionAnalysis distributionAnalyzer>;

        $z0 = virtualinvoke $r6.<org.mozilla.universalchardet.prober.distributionanalysis.Big5DistributionAnalysis: boolean gotEnoughData()>();

        if $z0 == 0 goto label3;

        $f0 = virtualinvoke r0.<org.mozilla.universalchardet.prober.Big5Prober: float getConfidence()>();

        $b3 = $f0 cmpl 0.95F;

        $i0 = (int) $b3;

        if $i0 <= 0 goto label3;

        $r3 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState FOUND_IT>;

        r0.<org.mozilla.universalchardet.prober.Big5Prober: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state> = $r3;

     label3:
        $r3 = r0.<org.mozilla.universalchardet.prober.Big5Prober: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state>;

        return $r3;

     label4:
        if $i4 != 2 goto label5;

        $r3 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState FOUND_IT>;

        r0.<org.mozilla.universalchardet.prober.Big5Prober: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state> = $r3;

        goto label2;

     label5:
        if $i4 != 0 goto label6;

        $r2 = r0.<org.mozilla.universalchardet.prober.Big5Prober: org.mozilla.universalchardet.prober.statemachine.CodingStateMachine codingSM>;

        $i4 = virtualinvoke $r2.<org.mozilla.universalchardet.prober.statemachine.CodingStateMachine: int getCurrentCharLen()>();

        if $i2 != 0 goto label7;

        $r4 = r0.<org.mozilla.universalchardet.prober.Big5Prober: byte[] lastChar>;

        $b3 = $r1[0];

        $r4[1] = $b3;

        $r6 = r0.<org.mozilla.universalchardet.prober.Big5Prober: org.mozilla.universalchardet.prober.distributionanalysis.Big5DistributionAnalysis distributionAnalyzer>;

        $r4 = r0.<org.mozilla.universalchardet.prober.Big5Prober: byte[] lastChar>;

        virtualinvoke $r6.<org.mozilla.universalchardet.prober.distributionanalysis.Big5DistributionAnalysis: void handleOneChar(byte[],int,int)>($r4, 0, $i4);

     label6:
        $i2 = $i2 + 1;

        goto label1;

     label7:
        $r6 = r0.<org.mozilla.universalchardet.prober.Big5Prober: org.mozilla.universalchardet.prober.distributionanalysis.Big5DistributionAnalysis distributionAnalyzer>;

        $i5 = $i2 + -1;

        virtualinvoke $r6.<org.mozilla.universalchardet.prober.distributionanalysis.Big5DistributionAnalysis: void handleOneChar(byte[],int,int)>($r1, $i5, $i4);

        goto label6;
    }

    public void reset()
    {
        org.mozilla.universalchardet.prober.CharsetProber$ProbingState $r2;
        byte[] $r4;
        org.mozilla.universalchardet.prober.statemachine.CodingStateMachine $r1;
        org.mozilla.universalchardet.prober.distributionanalysis.Big5DistributionAnalysis $r3;
        org.mozilla.universalchardet.prober.Big5Prober r0;

        r0 := @this: org.mozilla.universalchardet.prober.Big5Prober;

        $r1 = r0.<org.mozilla.universalchardet.prober.Big5Prober: org.mozilla.universalchardet.prober.statemachine.CodingStateMachine codingSM>;

        virtualinvoke $r1.<org.mozilla.universalchardet.prober.statemachine.CodingStateMachine: void reset()>();

        $r2 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState DETECTING>;

        r0.<org.mozilla.universalchardet.prober.Big5Prober: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state> = $r2;

        $r3 = r0.<org.mozilla.universalchardet.prober.Big5Prober: org.mozilla.universalchardet.prober.distributionanalysis.Big5DistributionAnalysis distributionAnalyzer>;

        virtualinvoke $r3.<org.mozilla.universalchardet.prober.distributionanalysis.Big5DistributionAnalysis: void reset()>();

        $r4 = r0.<org.mozilla.universalchardet.prober.Big5Prober: byte[] lastChar>;

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>($r4, 0);

        return;
    }

    public void setOption()
    {
        org.mozilla.universalchardet.prober.Big5Prober r0;

        r0 := @this: org.mozilla.universalchardet.prober.Big5Prober;

        return;
    }
}
