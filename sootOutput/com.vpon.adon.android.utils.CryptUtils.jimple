public class com.vpon.adon.android.utils.CryptUtils extends java.lang.Object
{
    public static java.lang.String algorithm;
    public static java.lang.String provider;

    static void <clinit>()
    {
        <com.vpon.adon.android.utils.CryptUtils: java.lang.String algorithm> = "RSA/NONE/PKCS1Padding";

        <com.vpon.adon.android.utils.CryptUtils: java.lang.String provider> = "BC";

        return;
    }

    public void <init>()
    {
        com.vpon.adon.android.utils.CryptUtils r0;

        r0 := @this: com.vpon.adon.android.utils.CryptUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.vpon.adon.android.entity.RespClickList clickListDnc(java.lang.String, javax.crypto.SealedObject)
    {
        java.lang.Throwable $r8, $r9, $r10, $r11, $r12, $r13, $r14;
        byte[] $r2, $r3;
        javax.crypto.spec.SecretKeySpec $r4, $r17;
        javax.crypto.Cipher $r5;
        com.vpon.adon.android.entity.RespClickList $r7, $r19;
        javax.crypto.NoSuchPaddingException $r22;
        java.lang.String $r0;
        java.util.LinkedList $r18;
        javax.crypto.IllegalBlockSizeException $r24;
        java.io.IOException $r26;
        java.lang.Exception $r16;
        javax.crypto.BadPaddingException $r25;
        java.security.NoSuchAlgorithmException $r21;
        java.lang.Object $r6;
        java.lang.ClassNotFoundException $r15;
        java.security.InvalidKeyException $r23;
        java.io.UnsupportedEncodingException $r20;
        javax.crypto.SealedObject $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: javax.crypto.SealedObject;

     label01:
        $r2 = virtualinvoke $r0.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

     label02:
        $r3 = newarray (byte)[24];

     label03:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r3, 0, 24);

     label04:
        $r17 = new javax.crypto.spec.SecretKeySpec;

        $r4 = $r17;

     label05:
        specialinvoke $r17.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, "DESede");

        $r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("DESede");

        virtualinvoke $r5.<javax.crypto.Cipher: void init(int,java.security.Key)>(2, $r4);

        $r6 = virtualinvoke $r1.<javax.crypto.SealedObject: java.lang.Object getObject(javax.crypto.Cipher)>($r5);

     label06:
        $r7 = (com.vpon.adon.android.entity.RespClickList) $r6;

     label07:
        return $r7;

     label08:
        $r8 := @caughtexception;

        $r20 = (java.io.UnsupportedEncodingException) $r8;

        virtualinvoke $r20.<java.io.UnsupportedEncodingException: void printStackTrace()>();

        $r19 = new com.vpon.adon.android.entity.RespClickList;

        $r18 = new java.util.LinkedList;

        specialinvoke $r18.<java.util.LinkedList: void <init>()>();

        specialinvoke $r19.<com.vpon.adon.android.entity.RespClickList: void <init>(java.util.List)>($r18);

        return $r19;

     label09:
        $r9 := @caughtexception;

        $r21 = (java.security.NoSuchAlgorithmException) $r9;

        virtualinvoke $r21.<java.security.NoSuchAlgorithmException: void printStackTrace()>();

        $r19 = new com.vpon.adon.android.entity.RespClickList;

        $r18 = new java.util.LinkedList;

        specialinvoke $r18.<java.util.LinkedList: void <init>()>();

        specialinvoke $r19.<com.vpon.adon.android.entity.RespClickList: void <init>(java.util.List)>($r18);

        return $r19;

     label10:
        $r10 := @caughtexception;

        $r22 = (javax.crypto.NoSuchPaddingException) $r10;

        virtualinvoke $r22.<javax.crypto.NoSuchPaddingException: void printStackTrace()>();

        $r19 = new com.vpon.adon.android.entity.RespClickList;

        $r18 = new java.util.LinkedList;

        specialinvoke $r18.<java.util.LinkedList: void <init>()>();

        specialinvoke $r19.<com.vpon.adon.android.entity.RespClickList: void <init>(java.util.List)>($r18);

        return $r19;

     label11:
        $r11 := @caughtexception;

        $r23 = (java.security.InvalidKeyException) $r11;

        virtualinvoke $r23.<java.security.InvalidKeyException: void printStackTrace()>();

        $r19 = new com.vpon.adon.android.entity.RespClickList;

        $r18 = new java.util.LinkedList;

        specialinvoke $r18.<java.util.LinkedList: void <init>()>();

        specialinvoke $r19.<com.vpon.adon.android.entity.RespClickList: void <init>(java.util.List)>($r18);

        return $r19;

     label12:
        $r12 := @caughtexception;

        $r24 = (javax.crypto.IllegalBlockSizeException) $r12;

        virtualinvoke $r24.<javax.crypto.IllegalBlockSizeException: void printStackTrace()>();

        $r19 = new com.vpon.adon.android.entity.RespClickList;

        $r18 = new java.util.LinkedList;

        specialinvoke $r18.<java.util.LinkedList: void <init>()>();

        specialinvoke $r19.<com.vpon.adon.android.entity.RespClickList: void <init>(java.util.List)>($r18);

        return $r19;

     label13:
        $r13 := @caughtexception;

        $r25 = (javax.crypto.BadPaddingException) $r13;

        virtualinvoke $r25.<javax.crypto.BadPaddingException: void printStackTrace()>();

        $r19 = new com.vpon.adon.android.entity.RespClickList;

        $r18 = new java.util.LinkedList;

        specialinvoke $r18.<java.util.LinkedList: void <init>()>();

        specialinvoke $r19.<com.vpon.adon.android.entity.RespClickList: void <init>(java.util.List)>($r18);

        return $r19;

     label14:
        $r14 := @caughtexception;

        $r26 = (java.io.IOException) $r14;

        virtualinvoke $r26.<java.io.IOException: void printStackTrace()>();

        $r19 = new com.vpon.adon.android.entity.RespClickList;

        $r18 = new java.util.LinkedList;

        specialinvoke $r18.<java.util.LinkedList: void <init>()>();

        specialinvoke $r19.<com.vpon.adon.android.entity.RespClickList: void <init>(java.util.List)>($r18);

        return $r19;

     label15:
        $r15 := @caughtexception;

        virtualinvoke $r15.<java.lang.ClassNotFoundException: void printStackTrace()>();

        $r19 = new com.vpon.adon.android.entity.RespClickList;

        $r18 = new java.util.LinkedList;

        specialinvoke $r18.<java.util.LinkedList: void <init>()>();

        specialinvoke $r19.<com.vpon.adon.android.entity.RespClickList: void <init>(java.util.List)>($r18);

        return $r19;

     label16:
        $r16 := @caughtexception;

        virtualinvoke $r16.<java.lang.Exception: void printStackTrace()>();

        $r19 = new com.vpon.adon.android.entity.RespClickList;

        $r18 = new java.util.LinkedList;

        specialinvoke $r18.<java.util.LinkedList: void <init>()>();

        specialinvoke $r19.<com.vpon.adon.android.entity.RespClickList: void <init>(java.util.List)>($r18);

        return $r19;

        catch java.io.UnsupportedEncodingException from label01 to label02 with label08;
        catch java.io.UnsupportedEncodingException from label03 to label04 with label08;
        catch java.io.UnsupportedEncodingException from label05 to label06 with label08;
        catch java.security.NoSuchAlgorithmException from label01 to label02 with label09;
        catch java.security.NoSuchAlgorithmException from label03 to label04 with label09;
        catch java.security.NoSuchAlgorithmException from label05 to label06 with label09;
        catch javax.crypto.NoSuchPaddingException from label01 to label02 with label10;
        catch javax.crypto.NoSuchPaddingException from label03 to label04 with label10;
        catch javax.crypto.NoSuchPaddingException from label05 to label06 with label10;
        catch java.security.InvalidKeyException from label01 to label02 with label11;
        catch java.security.InvalidKeyException from label03 to label04 with label11;
        catch java.security.InvalidKeyException from label05 to label06 with label11;
        catch javax.crypto.IllegalBlockSizeException from label01 to label02 with label12;
        catch javax.crypto.IllegalBlockSizeException from label03 to label04 with label12;
        catch javax.crypto.IllegalBlockSizeException from label05 to label06 with label12;
        catch javax.crypto.BadPaddingException from label01 to label02 with label13;
        catch javax.crypto.BadPaddingException from label03 to label04 with label13;
        catch javax.crypto.BadPaddingException from label05 to label06 with label13;
        catch java.io.IOException from label01 to label02 with label14;
        catch java.io.IOException from label03 to label04 with label14;
        catch java.io.IOException from label05 to label06 with label14;
        catch java.lang.ClassNotFoundException from label01 to label02 with label15;
        catch java.lang.ClassNotFoundException from label03 to label04 with label15;
        catch java.lang.ClassNotFoundException from label05 to label06 with label15;
        catch java.lang.Exception from label01 to label02 with label16;
        catch java.lang.Exception from label03 to label04 with label16;
        catch java.lang.Exception from label05 to label07 with label16;
    }

    public static javax.crypto.SealedObject clickListEnc(java.lang.String, com.vpon.adon.android.entity.RespClickList)
    {
        java.lang.Throwable $r6, $r7, $r8, $r9, $r10, $r11;
        byte[] $r2, $r3;
        javax.crypto.spec.SecretKeySpec $r4, $r13;
        javax.crypto.Cipher $r5;
        com.vpon.adon.android.entity.RespClickList $r1;
        javax.crypto.NoSuchPaddingException $r17;
        java.lang.String $r0;
        javax.crypto.IllegalBlockSizeException $r19;
        java.io.IOException $r20;
        java.lang.Exception $r12;
        java.security.NoSuchAlgorithmException $r16;
        java.security.InvalidKeyException $r18;
        java.io.UnsupportedEncodingException $r15;
        javax.crypto.SealedObject $r14;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: com.vpon.adon.android.entity.RespClickList;

     label01:
        $r2 = virtualinvoke $r0.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

     label02:
        $r3 = newarray (byte)[24];

     label03:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r3, 0, 24);

     label04:
        $r13 = new javax.crypto.spec.SecretKeySpec;

        $r4 = $r13;

     label05:
        specialinvoke $r13.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, "DESede");

        $r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("DESede");

        virtualinvoke $r5.<javax.crypto.Cipher: void init(int,java.security.Key)>(1, $r4);

     label06:
        $r14 = new javax.crypto.SealedObject;

     label07:
        specialinvoke $r14.<javax.crypto.SealedObject: void <init>(java.io.Serializable,javax.crypto.Cipher)>($r1, $r5);

     label08:
        return $r14;

     label09:
        $r6 := @caughtexception;

        $r15 = (java.io.UnsupportedEncodingException) $r6;

        virtualinvoke $r15.<java.io.UnsupportedEncodingException: void printStackTrace()>();

        return null;

     label10:
        $r7 := @caughtexception;

        $r16 = (java.security.NoSuchAlgorithmException) $r7;

        virtualinvoke $r16.<java.security.NoSuchAlgorithmException: void printStackTrace()>();

        return null;

     label11:
        $r8 := @caughtexception;

        $r17 = (javax.crypto.NoSuchPaddingException) $r8;

        virtualinvoke $r17.<javax.crypto.NoSuchPaddingException: void printStackTrace()>();

        return null;

     label12:
        $r9 := @caughtexception;

        $r18 = (java.security.InvalidKeyException) $r9;

        virtualinvoke $r18.<java.security.InvalidKeyException: void printStackTrace()>();

        return null;

     label13:
        $r10 := @caughtexception;

        $r19 = (javax.crypto.IllegalBlockSizeException) $r10;

        virtualinvoke $r19.<javax.crypto.IllegalBlockSizeException: void printStackTrace()>();

        return null;

     label14:
        $r11 := @caughtexception;

        $r20 = (java.io.IOException) $r11;

        virtualinvoke $r20.<java.io.IOException: void printStackTrace()>();

        return null;

     label15:
        $r12 := @caughtexception;

        virtualinvoke $r12.<java.lang.Exception: void printStackTrace()>();

        return null;

        catch java.io.UnsupportedEncodingException from label01 to label02 with label09;
        catch java.io.UnsupportedEncodingException from label03 to label04 with label09;
        catch java.io.UnsupportedEncodingException from label05 to label06 with label09;
        catch java.io.UnsupportedEncodingException from label07 to label08 with label09;
        catch java.security.NoSuchAlgorithmException from label01 to label02 with label10;
        catch java.security.NoSuchAlgorithmException from label03 to label04 with label10;
        catch java.security.NoSuchAlgorithmException from label05 to label06 with label10;
        catch java.security.NoSuchAlgorithmException from label07 to label08 with label10;
        catch javax.crypto.NoSuchPaddingException from label01 to label02 with label11;
        catch javax.crypto.NoSuchPaddingException from label03 to label04 with label11;
        catch javax.crypto.NoSuchPaddingException from label05 to label06 with label11;
        catch javax.crypto.NoSuchPaddingException from label07 to label08 with label11;
        catch java.security.InvalidKeyException from label01 to label02 with label12;
        catch java.security.InvalidKeyException from label03 to label04 with label12;
        catch java.security.InvalidKeyException from label05 to label06 with label12;
        catch java.security.InvalidKeyException from label07 to label08 with label12;
        catch javax.crypto.IllegalBlockSizeException from label01 to label02 with label13;
        catch javax.crypto.IllegalBlockSizeException from label03 to label04 with label13;
        catch javax.crypto.IllegalBlockSizeException from label05 to label06 with label13;
        catch javax.crypto.IllegalBlockSizeException from label07 to label08 with label13;
        catch java.io.IOException from label01 to label02 with label14;
        catch java.io.IOException from label03 to label04 with label14;
        catch java.io.IOException from label05 to label06 with label14;
        catch java.io.IOException from label07 to label08 with label14;
        catch java.lang.Exception from label01 to label02 with label15;
        catch java.lang.Exception from label03 to label04 with label15;
        catch java.lang.Exception from label05 to label06 with label15;
        catch java.lang.Exception from label07 to label08 with label15;
    }

    public static java.lang.String decTripleDES(java.lang.String, java.lang.String) throws java.security.NoSuchAlgorithmException, java.io.IOException, java.security.spec.InvalidKeySpecException, javax.crypto.NoSuchPaddingException, java.security.InvalidKeyException, javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    {
        byte[] $r2, $r3;
        javax.crypto.spec.SecretKeySpec $r4;
        java.lang.String $r0, $r1;
        javax.crypto.Cipher $r5;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke $r0.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        $r3 = newarray (byte)[24];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r3, 0, 24);

        $r4 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, "DESede");

        $r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("DESede");

        virtualinvoke $r5.<javax.crypto.Cipher: void init(int,java.security.Key)>(2, $r4);

        $r2 = staticinvoke <com.vpon.adon.android.utils.Base64: byte[] decode(java.lang.String)>($r1);

        $r2 = virtualinvoke $r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r2);

        $r0 = new java.lang.String;

        specialinvoke $r0.<java.lang.String: void <init>(byte[],java.lang.String)>($r2, "UTF-8");

        return $r0;
    }

    public static byte[] decryptData(byte[], javax.crypto.Cipher) throws javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException, java.io.IOException
    {
        byte[] $r0, $r3;
        java.io.ByteArrayOutputStream $r2;
        int $i0, $i1, $i2;
        javax.crypto.Cipher $r1;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: javax.crypto.Cipher;

        $r2 = new java.io.ByteArrayOutputStream;

        specialinvoke $r2.<java.io.ByteArrayOutputStream: void <init>(int)>(256);

        $i1 = 0;

     label1:
        $i2 = lengthof $r0;

        $i0 = $i1 * 256;

        $i0 = $i2 - $i0;

        if $i0 > 0 goto label2;

        $r0 = virtualinvoke $r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r0;

     label2:
        $i0 = $i1 * 256;

        $r3 = virtualinvoke $r1.<javax.crypto.Cipher: byte[] doFinal(byte[],int,int)>($r0, $i0, 256);

        virtualinvoke $r2.<java.io.ByteArrayOutputStream: void write(byte[])>($r3);

        $i1 = $i1 + 1;

        goto label1;
    }

    public static java.lang.String encTripleDES(java.lang.String, java.lang.String) throws java.security.NoSuchAlgorithmException, java.io.IOException, java.security.spec.InvalidKeySpecException, javax.crypto.NoSuchPaddingException, java.security.InvalidKeyException, javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    {
        byte[] $r2, $r3;
        javax.crypto.spec.SecretKeySpec $r4;
        java.lang.String $r0, $r1;
        javax.crypto.Cipher $r5;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke $r0.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        $r3 = newarray (byte)[24];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r3, 0, 24);

        $r4 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, "DESede");

        $r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("DESede");

        virtualinvoke $r5.<javax.crypto.Cipher: void init(int,java.security.Key)>(1, $r4);

        $r2 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        $r2 = virtualinvoke $r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r2);

        $r0 = staticinvoke <com.vpon.adon.android.utils.Base64: java.lang.String encodeToString(byte[],boolean)>($r2, 0);

        return $r0;
    }

    public static byte[] encryptData(byte[], javax.crypto.Cipher) throws javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException, java.io.IOException
    {
        byte[] $r0, $r3;
        java.io.ByteArrayOutputStream $r2;
        int $i0, $i1;
        javax.crypto.Cipher $r1;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: javax.crypto.Cipher;

        $r2 = new java.io.ByteArrayOutputStream;

        specialinvoke $r2.<java.io.ByteArrayOutputStream: void <init>()>();

        $i0 = 0;

     label1:
        $i1 = lengthof $r0;

        if $i0 < $i1 goto label2;

        $r0 = virtualinvoke $r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r0;

     label2:
        $i1 = lengthof $r0;

        $i1 = $i1 - $i0;

        if $i1 > 245 goto label4;

        $i1 = lengthof $r0;

        $i1 = $i1 - $i0;

     label3:
        $r3 = virtualinvoke $r1.<javax.crypto.Cipher: byte[] doFinal(byte[],int,int)>($r0, $i0, $i1);

        virtualinvoke $r2.<java.io.ByteArrayOutputStream: void write(byte[])>($r3);

        $i0 = $i0 + 245;

        goto label1;

     label4:
        $i1 = 245;

        goto label3;
    }

    public static javax.crypto.Cipher getRsaDecryptCipher(java.security.PrivateKey) throws java.security.NoSuchAlgorithmException, javax.crypto.NoSuchPaddingException, java.security.InvalidKeyException, java.security.NoSuchProviderException
    {
        java.security.PrivateKey $r0;
        java.lang.String $r2, $r3;
        javax.crypto.Cipher $r1;

        $r0 := @parameter0: java.security.PrivateKey;

        $r2 = <com.vpon.adon.android.utils.CryptUtils: java.lang.String algorithm>;

        $r3 = <com.vpon.adon.android.utils.CryptUtils: java.lang.String provider>;

        $r1 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>($r2, $r3);

        virtualinvoke $r1.<javax.crypto.Cipher: void init(int,java.security.Key)>(2, $r0);

        return $r1;
    }

    public static javax.crypto.Cipher getRsaEncryptCipher(java.security.PublicKey) throws java.security.NoSuchAlgorithmException, javax.crypto.NoSuchPaddingException, java.security.InvalidKeyException, java.security.NoSuchProviderException
    {
        java.security.PublicKey $r0;
        java.lang.String $r2, $r3;
        javax.crypto.Cipher $r1;

        $r0 := @parameter0: java.security.PublicKey;

        $r2 = <com.vpon.adon.android.utils.CryptUtils: java.lang.String algorithm>;

        $r3 = <com.vpon.adon.android.utils.CryptUtils: java.lang.String provider>;

        $r1 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>($r2, $r3);

        virtualinvoke $r1.<javax.crypto.Cipher: void init(int,java.security.Key)>(1, $r0);

        return $r1;
    }

    public static java.security.PrivateKey getRsaPriKey(byte[]) throws java.security.NoSuchAlgorithmException, java.io.IOException, java.security.spec.InvalidKeySpecException
    {
        byte[] $r0;
        java.security.spec.PKCS8EncodedKeySpec $r1;
        java.security.PrivateKey $r3;
        java.security.KeyFactory $r2;

        $r0 := @parameter0: byte[];

        $r2 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>("RSA");

        $r1 = new java.security.spec.PKCS8EncodedKeySpec;

        specialinvoke $r1.<java.security.spec.PKCS8EncodedKeySpec: void <init>(byte[])>($r0);

        $r3 = virtualinvoke $r2.<java.security.KeyFactory: java.security.PrivateKey generatePrivate(java.security.spec.KeySpec)>($r1);

        return $r3;
    }

    public static java.security.PublicKey getRsaPubKey(byte[]) throws java.security.NoSuchAlgorithmException, java.io.IOException, java.security.spec.InvalidKeySpecException
    {
        byte[] $r0;
        java.security.PublicKey $r3;
        java.security.spec.X509EncodedKeySpec $r1;
        java.security.KeyFactory $r2;

        $r0 := @parameter0: byte[];

        $r2 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>("RSA");

        $r1 = new java.security.spec.X509EncodedKeySpec;

        specialinvoke $r1.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>($r0);

        $r3 = virtualinvoke $r2.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r1);

        return $r3;
    }
}
