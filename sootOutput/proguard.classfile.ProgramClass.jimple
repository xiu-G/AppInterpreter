public class proguard.classfile.ProgramClass extends java.lang.Object implements proguard.classfile.Clazz
{
    public proguard.classfile.attribute.Attribute[] attributes;
    public proguard.classfile.constant.Constant[] constantPool;
    public proguard.classfile.ProgramField[] fields;
    public proguard.classfile.ProgramMethod[] methods;
    public proguard.classfile.Clazz[] subClasses;
    public int u2accessFlags;
    public int u2attributesCount;
    public int u2constantPoolCount;
    public int u2fieldsCount;
    public int[] u2interfaces;
    public int u2interfacesCount;
    public int u2methodsCount;
    public int u2superClass;
    public int u2thisClass;
    public int u4magic;
    public int u4version;
    public java.lang.Object visitorInfo;

    public void <init>()
    {
        proguard.classfile.ProgramClass r0;

        r0 := @this: proguard.classfile.ProgramClass;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void accept(proguard.classfile.visitor.ClassVisitor)
    {
        proguard.classfile.ProgramClass r0;
        proguard.classfile.visitor.ClassVisitor $r1;

        r0 := @this: proguard.classfile.ProgramClass;

        $r1 := @parameter0: proguard.classfile.visitor.ClassVisitor;

        interfaceinvoke $r1.<proguard.classfile.visitor.ClassVisitor: void visitProgramClass(proguard.classfile.ProgramClass)>(r0);

        return;
    }

    public void addSubClass(proguard.classfile.Clazz)
    {
        proguard.classfile.Clazz[] $r2, $r3, $r4;
        proguard.classfile.Clazz $r1;
        int $i0;
        proguard.classfile.ProgramClass r0;

        r0 := @this: proguard.classfile.ProgramClass;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 = r0.<proguard.classfile.ProgramClass: proguard.classfile.Clazz[] subClasses>;

        if $r2 != null goto label2;

        $r2 = newarray (proguard.classfile.Clazz)[1];

        r0.<proguard.classfile.ProgramClass: proguard.classfile.Clazz[] subClasses> = $r2;

     label1:
        $r2 = r0.<proguard.classfile.ProgramClass: proguard.classfile.Clazz[] subClasses>;

        $r3 = r0.<proguard.classfile.ProgramClass: proguard.classfile.Clazz[] subClasses>;

        $i0 = lengthof $r3;

        $i0 = $i0 - 1;

        $r2[$i0] = $r1;

        return;

     label2:
        $r2 = r0.<proguard.classfile.ProgramClass: proguard.classfile.Clazz[] subClasses>;

        $i0 = lengthof $r2;

        $i0 = $i0 + 1;

        $r2 = newarray (proguard.classfile.Clazz)[$i0];

        $r3 = r0.<proguard.classfile.ProgramClass: proguard.classfile.Clazz[] subClasses>;

        $r4 = r0.<proguard.classfile.ProgramClass: proguard.classfile.Clazz[] subClasses>;

        $i0 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r2, 0, $i0);

        r0.<proguard.classfile.ProgramClass: proguard.classfile.Clazz[] subClasses> = $r2;

        goto label1;
    }

    public void attributesAccept(proguard.classfile.attribute.visitor.AttributeVisitor)
    {
        int $i0, $i1;
        proguard.classfile.attribute.Attribute[] $r2;
        proguard.classfile.attribute.visitor.AttributeVisitor $r1;
        proguard.classfile.ProgramClass r0;
        proguard.classfile.attribute.Attribute $r3;

        r0 := @this: proguard.classfile.ProgramClass;

        $r1 := @parameter0: proguard.classfile.attribute.visitor.AttributeVisitor;

        $i0 = 0;

     label1:
        $i1 = r0.<proguard.classfile.ProgramClass: int u2attributesCount>;

        if $i0 >= $i1 goto label2;

        $r2 = r0.<proguard.classfile.ProgramClass: proguard.classfile.attribute.Attribute[] attributes>;

        $r3 = $r2[$i0];

        virtualinvoke $r3.<proguard.classfile.attribute.Attribute: void accept(proguard.classfile.Clazz,proguard.classfile.attribute.visitor.AttributeVisitor)>(r0, $r1);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void constantPoolEntriesAccept(proguard.classfile.constant.visitor.ConstantVisitor)
    {
        proguard.classfile.constant.visitor.ConstantVisitor $r1;
        proguard.classfile.constant.Constant $r3;
        int $i0, $i1;
        proguard.classfile.constant.Constant[] $r2;
        proguard.classfile.ProgramClass r0;

        r0 := @this: proguard.classfile.ProgramClass;

        $r1 := @parameter0: proguard.classfile.constant.visitor.ConstantVisitor;

        $i0 = 1;

     label1:
        $i1 = r0.<proguard.classfile.ProgramClass: int u2constantPoolCount>;

        if $i0 >= $i1 goto label3;

        $r2 = r0.<proguard.classfile.ProgramClass: proguard.classfile.constant.Constant[] constantPool>;

        $r3 = $r2[$i0];

        if $r3 == null goto label2;

        $r2 = r0.<proguard.classfile.ProgramClass: proguard.classfile.constant.Constant[] constantPool>;

        $r3 = $r2[$i0];

        virtualinvoke $r3.<proguard.classfile.constant.Constant: void accept(proguard.classfile.Clazz,proguard.classfile.constant.visitor.ConstantVisitor)>(r0, $r1);

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        return;
    }

    public void constantPoolEntryAccept(int, proguard.classfile.constant.visitor.ConstantVisitor)
    {
        proguard.classfile.constant.visitor.ConstantVisitor $r1;
        proguard.classfile.constant.Constant $r3;
        int $i0;
        proguard.classfile.constant.Constant[] $r2;
        proguard.classfile.ProgramClass r0;

        r0 := @this: proguard.classfile.ProgramClass;

        $i0 := @parameter0: int;

        $r1 := @parameter1: proguard.classfile.constant.visitor.ConstantVisitor;

        $r2 = r0.<proguard.classfile.ProgramClass: proguard.classfile.constant.Constant[] constantPool>;

        $r3 = $r2[$i0];

        virtualinvoke $r3.<proguard.classfile.constant.Constant: void accept(proguard.classfile.Clazz,proguard.classfile.constant.visitor.ConstantVisitor)>(r0, $r1);

        return;
    }

    public boolean extendsOrImplements(proguard.classfile.Clazz)
    {
        proguard.classfile.Clazz $r1, $r2;
        int $i0, $i1;
        proguard.classfile.ProgramClass r0;
        boolean $z0;

        r0 := @this: proguard.classfile.ProgramClass;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r2 = virtualinvoke r0.<proguard.classfile.ProgramClass: proguard.classfile.Clazz getSuperClass()>();

        if $r2 == null goto label2;

        $z0 = interfaceinvoke $r2.<proguard.classfile.Clazz: boolean extendsOrImplements(proguard.classfile.Clazz)>($r1);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $i0 = 0;

     label3:
        $i1 = r0.<proguard.classfile.ProgramClass: int u2interfacesCount>;

        if $i0 >= $i1 goto label5;

        $r2 = virtualinvoke r0.<proguard.classfile.ProgramClass: proguard.classfile.Clazz getInterface(int)>($i0);

        if $r2 == null goto label4;

        $z0 = interfaceinvoke $r2.<proguard.classfile.Clazz: boolean extendsOrImplements(proguard.classfile.Clazz)>($r1);

        if $z0 == 0 goto label4;

        return 1;

     label4:
        $i0 = $i0 + 1;

        goto label3;

     label5:
        return 0;
    }

    public boolean extends_(proguard.classfile.Clazz)
    {
        proguard.classfile.Clazz $r1, $r2;
        proguard.classfile.ProgramClass r0;
        boolean $z0;

        r0 := @this: proguard.classfile.ProgramClass;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r2 = virtualinvoke r0.<proguard.classfile.ProgramClass: proguard.classfile.Clazz getSuperClass()>();

        if $r2 == null goto label2;

        $z0 = interfaceinvoke $r2.<proguard.classfile.Clazz: boolean extends_(proguard.classfile.Clazz)>($r1);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    public void fieldAccept(java.lang.String, java.lang.String, proguard.classfile.visitor.MemberVisitor)
    {
        proguard.classfile.visitor.MemberVisitor $r3;
        java.lang.String $r1, $r2;
        proguard.classfile.Field $r4;
        proguard.classfile.ProgramClass r0;

        r0 := @this: proguard.classfile.ProgramClass;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: proguard.classfile.visitor.MemberVisitor;

        $r4 = virtualinvoke r0.<proguard.classfile.ProgramClass: proguard.classfile.Field findField(java.lang.String,java.lang.String)>($r1, $r2);

        if $r4 == null goto label1;

        interfaceinvoke $r4.<proguard.classfile.Field: void accept(proguard.classfile.Clazz,proguard.classfile.visitor.MemberVisitor)>(r0, $r3);

     label1:
        return;
    }

    public void fieldsAccept(proguard.classfile.visitor.MemberVisitor)
    {
        proguard.classfile.ProgramField $r3;
        proguard.classfile.ProgramField[] $r2;
        int $i0, $i1;
        proguard.classfile.visitor.MemberVisitor $r1;
        proguard.classfile.ProgramClass r0;

        r0 := @this: proguard.classfile.ProgramClass;

        $r1 := @parameter0: proguard.classfile.visitor.MemberVisitor;

        $i0 = 0;

     label1:
        $i1 = r0.<proguard.classfile.ProgramClass: int u2fieldsCount>;

        if $i0 >= $i1 goto label2;

        $r2 = r0.<proguard.classfile.ProgramClass: proguard.classfile.ProgramField[] fields>;

        $r3 = $r2[$i0];

        virtualinvoke $r3.<proguard.classfile.ProgramField: void accept(proguard.classfile.ProgramClass,proguard.classfile.visitor.MemberVisitor)>(r0, $r1);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    public proguard.classfile.Field findField(java.lang.String, java.lang.String)
    {
        proguard.classfile.ProgramField[] $r3;
        proguard.classfile.ProgramClass r0;
        proguard.classfile.ProgramField $r4;
        int $i0, $i1;
        java.lang.String $r1, $r2, $r5;
        boolean $z0;

        r0 := @this: proguard.classfile.ProgramClass;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $i0 = 0;

     label1:
        $i1 = r0.<proguard.classfile.ProgramClass: int u2fieldsCount>;

        if $i0 >= $i1 goto label5;

        $r3 = r0.<proguard.classfile.ProgramClass: proguard.classfile.ProgramField[] fields>;

        $r4 = $r3[$i0];

        if $r1 == null goto label2;

        $r5 = interfaceinvoke $r4.<proguard.classfile.Field: java.lang.String getName(proguard.classfile.Clazz)>(r0);

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label4;

     label2:
        if $r2 == null goto label3;

        $r5 = interfaceinvoke $r4.<proguard.classfile.Field: java.lang.String getDescriptor(proguard.classfile.Clazz)>(r0);

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label4;

     label3:
        return $r4;

     label4:
        $i0 = $i0 + 1;

        goto label1;

     label5:
        return null;
    }

    public proguard.classfile.Method findMethod(java.lang.String, java.lang.String)
    {
        proguard.classfile.ProgramMethod[] $r3;
        proguard.classfile.ProgramClass r0;
        proguard.classfile.ProgramMethod $r4;
        int $i0, $i1;
        java.lang.String $r1, $r2, $r5;
        boolean $z0;

        r0 := @this: proguard.classfile.ProgramClass;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $i0 = 0;

     label1:
        $i1 = r0.<proguard.classfile.ProgramClass: int u2methodsCount>;

        if $i0 >= $i1 goto label5;

        $r3 = r0.<proguard.classfile.ProgramClass: proguard.classfile.ProgramMethod[] methods>;

        $r4 = $r3[$i0];

        if $r1 == null goto label2;

        $r5 = interfaceinvoke $r4.<proguard.classfile.Method: java.lang.String getName(proguard.classfile.Clazz)>(r0);

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label4;

     label2:
        if $r2 == null goto label3;

        $r5 = interfaceinvoke $r4.<proguard.classfile.Method: java.lang.String getDescriptor(proguard.classfile.Clazz)>(r0);

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label4;

     label3:
        return $r4;

     label4:
        $i0 = $i0 + 1;

        goto label1;

     label5:
        return null;
    }

    public int getAccessFlags()
    {
        int i0;
        proguard.classfile.ProgramClass r0;

        r0 := @this: proguard.classfile.ProgramClass;

        i0 = r0.<proguard.classfile.ProgramClass: int u2accessFlags>;

        return i0;
    }

    public java.lang.String getClassName(int)
    {
        proguard.classfile.constant.ClassConstant $r4;
        proguard.classfile.constant.Constant $r3;
        java.lang.ClassCastException $r1, $r6;
        proguard.classfile.ProgramClass r0;
        java.lang.StringBuffer $r7;
        int $i0;
        proguard.classfile.constant.Constant[] $r2;
        java.lang.String $r5;

        r0 := @this: proguard.classfile.ProgramClass;

        $i0 := @parameter0: int;

        $r2 = r0.<proguard.classfile.ProgramClass: proguard.classfile.constant.Constant[] constantPool>;

        $r3 = $r2[$i0];

     label1:
        $r4 = (proguard.classfile.constant.ClassConstant) $r3;

        $r5 = virtualinvoke $r4.<proguard.classfile.constant.ClassConstant: java.lang.String getName(proguard.classfile.Clazz)>(r0);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        $r1 = new java.lang.ClassCastException;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Expected ClassConstant at index [");

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] in class [");

        $r5 = virtualinvoke r0.<proguard.classfile.ProgramClass: java.lang.String getName()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("], found [");

        $r5 = virtualinvoke $r6.<java.lang.ClassCastException: java.lang.String getMessage()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r5 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.ClassCastException: void <init>(java.lang.String)>($r5);

        throw $r1;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public proguard.classfile.constant.Constant getConstant(int)
    {
        proguard.classfile.constant.Constant $r2;
        int $i0;
        proguard.classfile.constant.Constant[] $r1;
        proguard.classfile.ProgramClass r0;

        r0 := @this: proguard.classfile.ProgramClass;

        $i0 := @parameter0: int;

        $r1 = r0.<proguard.classfile.ProgramClass: proguard.classfile.constant.Constant[] constantPool>;

        $r2 = $r1[$i0];

        return $r2;
    }

    public proguard.classfile.Clazz getInterface(int)
    {
        proguard.classfile.constant.ClassConstant r4;
        int[] $r2;
        proguard.classfile.Clazz r5;
        proguard.classfile.constant.Constant r3;
        int $i0;
        proguard.classfile.constant.Constant[] $r1;
        proguard.classfile.ProgramClass r0;

        r0 := @this: proguard.classfile.ProgramClass;

        $i0 := @parameter0: int;

        $r1 = r0.<proguard.classfile.ProgramClass: proguard.classfile.constant.Constant[] constantPool>;

        $r2 = r0.<proguard.classfile.ProgramClass: int[] u2interfaces>;

        $i0 = $r2[$i0];

        r3 = $r1[$i0];

        r4 = (proguard.classfile.constant.ClassConstant) r3;

        r5 = r4.<proguard.classfile.constant.ClassConstant: proguard.classfile.Clazz referencedClass>;

        return r5;
    }

    public int getInterfaceCount()
    {
        int i0;
        proguard.classfile.ProgramClass r0;

        r0 := @this: proguard.classfile.ProgramClass;

        i0 = r0.<proguard.classfile.ProgramClass: int u2interfacesCount>;

        return i0;
    }

    public java.lang.String getInterfaceName(int)
    {
        int[] $r2;
        int $i0;
        java.lang.String $r1;
        proguard.classfile.ProgramClass r0;

        r0 := @this: proguard.classfile.ProgramClass;

        $i0 := @parameter0: int;

        $r2 = r0.<proguard.classfile.ProgramClass: int[] u2interfaces>;

        $i0 = $r2[$i0];

        $r1 = virtualinvoke r0.<proguard.classfile.ProgramClass: java.lang.String getClassName(int)>($i0);

        return $r1;
    }

    public java.lang.String getName()
    {
        int $i0;
        java.lang.String $r1;
        proguard.classfile.ProgramClass r0;

        r0 := @this: proguard.classfile.ProgramClass;

        $i0 = r0.<proguard.classfile.ProgramClass: int u2thisClass>;

        $r1 = virtualinvoke r0.<proguard.classfile.ProgramClass: java.lang.String getClassName(int)>($i0);

        return $r1;
    }

    public java.lang.String getName(int)
    {
        proguard.classfile.constant.Constant $r3;
        java.lang.ClassCastException $r1, $r6;
        proguard.classfile.ProgramClass r0;
        java.lang.StringBuffer $r7;
        int $i0;
        proguard.classfile.constant.Constant[] $r2;
        proguard.classfile.constant.NameAndTypeConstant $r4;
        java.lang.String $r5;

        r0 := @this: proguard.classfile.ProgramClass;

        $i0 := @parameter0: int;

        $r2 = r0.<proguard.classfile.ProgramClass: proguard.classfile.constant.Constant[] constantPool>;

        $r3 = $r2[$i0];

     label1:
        $r4 = (proguard.classfile.constant.NameAndTypeConstant) $r3;

        $r5 = virtualinvoke $r4.<proguard.classfile.constant.NameAndTypeConstant: java.lang.String getName(proguard.classfile.Clazz)>(r0);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        $r1 = new java.lang.ClassCastException;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Expected NameAndTypeConstant at index [");

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] in class [");

        $r5 = virtualinvoke r0.<proguard.classfile.ProgramClass: java.lang.String getName()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("], found [");

        $r5 = virtualinvoke $r6.<java.lang.ClassCastException: java.lang.String getMessage()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r5 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.ClassCastException: void <init>(java.lang.String)>($r5);

        throw $r1;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public java.lang.String getString(int)
    {
        proguard.classfile.constant.Constant $r2;
        java.lang.ClassCastException $r5, $r7;
        proguard.classfile.ProgramClass r0;
        java.lang.StringBuffer $r8;
        int $i0;
        proguard.classfile.constant.Constant[] $r1;
        java.lang.String $r4;
        proguard.classfile.constant.Utf8Constant $r3;
        proguard.classfile.visitor.ClassPrinter $r6;

        r0 := @this: proguard.classfile.ProgramClass;

        $i0 := @parameter0: int;

        $r1 = r0.<proguard.classfile.ProgramClass: proguard.classfile.constant.Constant[] constantPool>;

        $r2 = $r1[$i0];

     label1:
        $r3 = (proguard.classfile.constant.Utf8Constant) $r2;

        $r4 = virtualinvoke $r3.<proguard.classfile.constant.Utf8Constant: java.lang.String getString()>();

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = new proguard.classfile.visitor.ClassPrinter;

        specialinvoke $r6.<proguard.classfile.visitor.ClassPrinter: void <init>()>();

        virtualinvoke $r6.<proguard.classfile.visitor.ClassPrinter: void visitProgramClass(proguard.classfile.ProgramClass)>(r0);

        $r7 = new java.lang.ClassCastException;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Expected Utf8Constant at index [");

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] in class [");

        $r4 = virtualinvoke r0.<proguard.classfile.ProgramClass: java.lang.String getName()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("], found [");

        $r4 = virtualinvoke $r5.<java.lang.ClassCastException: java.lang.String getMessage()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r8 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r4 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.ClassCastException: void <init>(java.lang.String)>($r4);

        throw $r7;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public java.lang.String getStringString(int)
    {
        proguard.classfile.constant.Constant $r3;
        java.lang.ClassCastException $r1, $r6;
        proguard.classfile.ProgramClass r0;
        java.lang.StringBuffer $r7;
        int $i0;
        proguard.classfile.constant.StringConstant $r4;
        proguard.classfile.constant.Constant[] $r2;
        java.lang.String $r5;

        r0 := @this: proguard.classfile.ProgramClass;

        $i0 := @parameter0: int;

        $r2 = r0.<proguard.classfile.ProgramClass: proguard.classfile.constant.Constant[] constantPool>;

        $r3 = $r2[$i0];

     label1:
        $r4 = (proguard.classfile.constant.StringConstant) $r3;

        $r5 = virtualinvoke $r4.<proguard.classfile.constant.StringConstant: java.lang.String getString(proguard.classfile.Clazz)>(r0);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        $r1 = new java.lang.ClassCastException;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Expected StringConstant at index [");

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] in class [");

        $r5 = virtualinvoke r0.<proguard.classfile.ProgramClass: java.lang.String getName()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("], found [");

        $r5 = virtualinvoke $r6.<java.lang.ClassCastException: java.lang.String getMessage()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r5 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.ClassCastException: void <init>(java.lang.String)>($r5);

        throw $r1;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public proguard.classfile.Clazz getSuperClass()
    {
        proguard.classfile.constant.ClassConstant r3;
        proguard.classfile.Clazz r4;
        proguard.classfile.constant.Constant r2;
        int $i0;
        proguard.classfile.constant.Constant[] $r1;
        proguard.classfile.ProgramClass r0;

        r0 := @this: proguard.classfile.ProgramClass;

        $i0 = r0.<proguard.classfile.ProgramClass: int u2superClass>;

        if $i0 == 0 goto label1;

        $r1 = r0.<proguard.classfile.ProgramClass: proguard.classfile.constant.Constant[] constantPool>;

        $i0 = r0.<proguard.classfile.ProgramClass: int u2superClass>;

        r2 = $r1[$i0];

        r3 = (proguard.classfile.constant.ClassConstant) r2;

        r4 = r3.<proguard.classfile.constant.ClassConstant: proguard.classfile.Clazz referencedClass>;

        return r4;

     label1:
        return null;
    }

    public java.lang.String getSuperName()
    {
        int $i0;
        java.lang.String $r1;
        proguard.classfile.ProgramClass r0;

        r0 := @this: proguard.classfile.ProgramClass;

        $i0 = r0.<proguard.classfile.ProgramClass: int u2superClass>;

        if $i0 != 0 goto label1;

        return null;

     label1:
        $i0 = r0.<proguard.classfile.ProgramClass: int u2superClass>;

        $r1 = virtualinvoke r0.<proguard.classfile.ProgramClass: java.lang.String getClassName(int)>($i0);

        return $r1;
    }

    public int getTag(int)
    {
        proguard.classfile.constant.Constant $r2;
        int $i0;
        proguard.classfile.constant.Constant[] $r1;
        proguard.classfile.ProgramClass r0;

        r0 := @this: proguard.classfile.ProgramClass;

        $i0 := @parameter0: int;

        $r1 = r0.<proguard.classfile.ProgramClass: proguard.classfile.constant.Constant[] constantPool>;

        $r2 = $r1[$i0];

        $i0 = virtualinvoke $r2.<proguard.classfile.constant.Constant: int getTag()>();

        return $i0;
    }

    public java.lang.String getType(int)
    {
        proguard.classfile.constant.Constant $r3;
        java.lang.ClassCastException $r1, $r6;
        proguard.classfile.ProgramClass r0;
        java.lang.StringBuffer $r7;
        int $i0;
        proguard.classfile.constant.Constant[] $r2;
        proguard.classfile.constant.NameAndTypeConstant $r4;
        java.lang.String $r5;

        r0 := @this: proguard.classfile.ProgramClass;

        $i0 := @parameter0: int;

        $r2 = r0.<proguard.classfile.ProgramClass: proguard.classfile.constant.Constant[] constantPool>;

        $r3 = $r2[$i0];

     label1:
        $r4 = (proguard.classfile.constant.NameAndTypeConstant) $r3;

        $r5 = virtualinvoke $r4.<proguard.classfile.constant.NameAndTypeConstant: java.lang.String getType(proguard.classfile.Clazz)>(r0);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        $r1 = new java.lang.ClassCastException;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Expected NameAndTypeConstant at index [");

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] in class [");

        $r5 = virtualinvoke r0.<proguard.classfile.ProgramClass: java.lang.String getName()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("], found [");

        $r5 = virtualinvoke $r6.<java.lang.ClassCastException: java.lang.String getMessage()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r5 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.ClassCastException: void <init>(java.lang.String)>($r5);

        throw $r1;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public java.lang.Object getVisitorInfo()
    {
        java.lang.Object r1;
        proguard.classfile.ProgramClass r0;

        r0 := @this: proguard.classfile.ProgramClass;

        r1 = r0.<proguard.classfile.ProgramClass: java.lang.Object visitorInfo>;

        return r1;
    }

    public void hierarchyAccept(boolean, boolean, boolean, boolean, proguard.classfile.visitor.ClassVisitor)
    {
        proguard.classfile.Clazz[] $r3;
        proguard.classfile.visitor.ClassVisitor $r1;
        proguard.classfile.ProgramClass r0;
        proguard.classfile.Clazz $r2;
        int $i0, $i1;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: proguard.classfile.ProgramClass;

        $z0 := @parameter0: boolean;

        $z1 := @parameter1: boolean;

        $z2 := @parameter2: boolean;

        $z3 := @parameter3: boolean;

        $r1 := @parameter4: proguard.classfile.visitor.ClassVisitor;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<proguard.classfile.ProgramClass: void accept(proguard.classfile.visitor.ClassVisitor)>($r1);

     label1:
        if $z1 == 0 goto label2;

        $r2 = virtualinvoke r0.<proguard.classfile.ProgramClass: proguard.classfile.Clazz getSuperClass()>();

        if $r2 == null goto label2;

        interfaceinvoke $r2.<proguard.classfile.Clazz: void hierarchyAccept(boolean,boolean,boolean,boolean,proguard.classfile.visitor.ClassVisitor)>(1, 1, $z2, 0, $r1);

     label2:
        if $z2 == 0 goto label6;

        if $z1 != 0 goto label3;

        $r2 = virtualinvoke r0.<proguard.classfile.ProgramClass: proguard.classfile.Clazz getSuperClass()>();

        if $r2 == null goto label3;

        interfaceinvoke $r2.<proguard.classfile.Clazz: void hierarchyAccept(boolean,boolean,boolean,boolean,proguard.classfile.visitor.ClassVisitor)>(0, 0, 1, 0, $r1);

     label3:
        $i0 = 0;

     label4:
        $i1 = r0.<proguard.classfile.ProgramClass: int u2interfacesCount>;

        if $i0 >= $i1 goto label6;

        $r2 = virtualinvoke r0.<proguard.classfile.ProgramClass: proguard.classfile.Clazz getInterface(int)>($i0);

        if $r2 == null goto label5;

        interfaceinvoke $r2.<proguard.classfile.Clazz: void hierarchyAccept(boolean,boolean,boolean,boolean,proguard.classfile.visitor.ClassVisitor)>(1, 0, 1, 0, $r1);

     label5:
        $i0 = $i0 + 1;

        goto label4;

     label6:
        if $z3 == 0 goto label8;

        $r3 = r0.<proguard.classfile.ProgramClass: proguard.classfile.Clazz[] subClasses>;

        if $r3 == null goto label8;

        $i0 = 0;

     label7:
        $r3 = r0.<proguard.classfile.ProgramClass: proguard.classfile.Clazz[] subClasses>;

        $i1 = lengthof $r3;

        if $i0 >= $i1 goto label8;

        $r3 = r0.<proguard.classfile.ProgramClass: proguard.classfile.Clazz[] subClasses>;

        $r2 = $r3[$i0];

        interfaceinvoke $r2.<proguard.classfile.Clazz: void hierarchyAccept(boolean,boolean,boolean,boolean,proguard.classfile.visitor.ClassVisitor)>(1, 0, 0, 1, $r1);

        $i0 = $i0 + 1;

        goto label7;

     label8:
        return;
    }

    public void interfaceConstantsAccept(proguard.classfile.constant.visitor.ConstantVisitor)
    {
        proguard.classfile.constant.visitor.ConstantVisitor $r1;
        int[] $r3;
        proguard.classfile.constant.Constant $r4;
        int $i0, $i1;
        proguard.classfile.constant.Constant[] $r2;
        proguard.classfile.ProgramClass r0;

        r0 := @this: proguard.classfile.ProgramClass;

        $r1 := @parameter0: proguard.classfile.constant.visitor.ConstantVisitor;

        $i0 = 0;

     label1:
        $i1 = r0.<proguard.classfile.ProgramClass: int u2interfacesCount>;

        if $i0 >= $i1 goto label2;

        $r2 = r0.<proguard.classfile.ProgramClass: proguard.classfile.constant.Constant[] constantPool>;

        $r3 = r0.<proguard.classfile.ProgramClass: int[] u2interfaces>;

        $i1 = $r3[$i0];

        $r4 = $r2[$i1];

        virtualinvoke $r4.<proguard.classfile.constant.Constant: void accept(proguard.classfile.Clazz,proguard.classfile.constant.visitor.ConstantVisitor)>(r0, $r1);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    public boolean mayHaveImplementations(proguard.classfile.Method)
    {
        int $i0;
        proguard.classfile.Method $r1;
        java.lang.String $r2;
        proguard.classfile.ProgramClass r0;
        boolean $z0;

        r0 := @this: proguard.classfile.ProgramClass;

        $r1 := @parameter0: proguard.classfile.Method;

        $i0 = r0.<proguard.classfile.ProgramClass: int u2accessFlags>;

        $i0 = $i0 & 16;

        if $i0 != 0 goto label2;

        if $r1 == null goto label1;

        $i0 = interfaceinvoke $r1.<proguard.classfile.Method: int getAccessFlags()>();

        $i0 = $i0 & 26;

        if $i0 != 0 goto label2;

        $r2 = interfaceinvoke $r1.<proguard.classfile.Method: java.lang.String getName(proguard.classfile.Clazz)>(r0);

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("<init>");

        if $z0 != 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public void methodAccept(java.lang.String, java.lang.String, proguard.classfile.visitor.MemberVisitor)
    {
        proguard.classfile.visitor.MemberVisitor $r3;
        proguard.classfile.Method $r4;
        java.lang.String $r1, $r2;
        proguard.classfile.ProgramClass r0;

        r0 := @this: proguard.classfile.ProgramClass;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: proguard.classfile.visitor.MemberVisitor;

        $r4 = virtualinvoke r0.<proguard.classfile.ProgramClass: proguard.classfile.Method findMethod(java.lang.String,java.lang.String)>($r1, $r2);

        if $r4 == null goto label1;

        interfaceinvoke $r4.<proguard.classfile.Method: void accept(proguard.classfile.Clazz,proguard.classfile.visitor.MemberVisitor)>(r0, $r3);

     label1:
        return;
    }

    public void methodsAccept(proguard.classfile.visitor.MemberVisitor)
    {
        proguard.classfile.ProgramMethod[] $r2;
        proguard.classfile.ProgramMethod $r3;
        int $i0, $i1;
        proguard.classfile.visitor.MemberVisitor $r1;
        proguard.classfile.ProgramClass r0;

        r0 := @this: proguard.classfile.ProgramClass;

        $r1 := @parameter0: proguard.classfile.visitor.MemberVisitor;

        $i0 = 0;

     label1:
        $i1 = r0.<proguard.classfile.ProgramClass: int u2methodsCount>;

        if $i0 >= $i1 goto label2;

        $r2 = r0.<proguard.classfile.ProgramClass: proguard.classfile.ProgramMethod[] methods>;

        $r3 = $r2[$i0];

        virtualinvoke $r3.<proguard.classfile.ProgramMethod: void accept(proguard.classfile.ProgramClass,proguard.classfile.visitor.MemberVisitor)>(r0, $r1);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void setVisitorInfo(java.lang.Object)
    {
        java.lang.Object $r1;
        proguard.classfile.ProgramClass r0;

        r0 := @this: proguard.classfile.ProgramClass;

        $r1 := @parameter0: java.lang.Object;

        r0.<proguard.classfile.ProgramClass: java.lang.Object visitorInfo> = $r1;

        return;
    }

    public void subclassesAccept(proguard.classfile.visitor.ClassVisitor)
    {
        proguard.classfile.Clazz[] $r2;
        proguard.classfile.Clazz $r3;
        proguard.classfile.visitor.ClassVisitor $r1;
        int $i0, $i1;
        proguard.classfile.ProgramClass r0;

        r0 := @this: proguard.classfile.ProgramClass;

        $r1 := @parameter0: proguard.classfile.visitor.ClassVisitor;

        $r2 = r0.<proguard.classfile.ProgramClass: proguard.classfile.Clazz[] subClasses>;

        if $r2 == null goto label2;

        $i0 = 0;

     label1:
        $r2 = r0.<proguard.classfile.ProgramClass: proguard.classfile.Clazz[] subClasses>;

        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label2;

        $r2 = r0.<proguard.classfile.ProgramClass: proguard.classfile.Clazz[] subClasses>;

        $r3 = $r2[$i0];

        interfaceinvoke $r3.<proguard.classfile.Clazz: void accept(proguard.classfile.visitor.ClassVisitor)>($r1);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void superClassConstantAccept(proguard.classfile.constant.visitor.ConstantVisitor)
    {
        proguard.classfile.constant.visitor.ConstantVisitor $r1;
        proguard.classfile.constant.Constant $r3;
        int $i0;
        proguard.classfile.constant.Constant[] $r2;
        proguard.classfile.ProgramClass r0;

        r0 := @this: proguard.classfile.ProgramClass;

        $r1 := @parameter0: proguard.classfile.constant.visitor.ConstantVisitor;

        $i0 = r0.<proguard.classfile.ProgramClass: int u2superClass>;

        if $i0 == 0 goto label1;

        $r2 = r0.<proguard.classfile.ProgramClass: proguard.classfile.constant.Constant[] constantPool>;

        $i0 = r0.<proguard.classfile.ProgramClass: int u2superClass>;

        $r3 = $r2[$i0];

        virtualinvoke $r3.<proguard.classfile.constant.Constant: void accept(proguard.classfile.Clazz,proguard.classfile.constant.visitor.ConstantVisitor)>(r0, $r1);

     label1:
        return;
    }

    public void thisClassConstantAccept(proguard.classfile.constant.visitor.ConstantVisitor)
    {
        proguard.classfile.constant.visitor.ConstantVisitor $r1;
        proguard.classfile.constant.Constant $r3;
        int $i0;
        proguard.classfile.constant.Constant[] $r2;
        proguard.classfile.ProgramClass r0;

        r0 := @this: proguard.classfile.ProgramClass;

        $r1 := @parameter0: proguard.classfile.constant.visitor.ConstantVisitor;

        $r2 = r0.<proguard.classfile.ProgramClass: proguard.classfile.constant.Constant[] constantPool>;

        $i0 = r0.<proguard.classfile.ProgramClass: int u2thisClass>;

        $r3 = $r2[$i0];

        virtualinvoke $r3.<proguard.classfile.constant.Constant: void accept(proguard.classfile.Clazz,proguard.classfile.constant.visitor.ConstantVisitor)>(r0, $r1);

        return;
    }

    public java.lang.String toString()
    {
        java.lang.String $r2;
        proguard.classfile.ProgramClass r0;
        java.lang.StringBuffer $r1;

        r0 := @this: proguard.classfile.ProgramClass;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ProgramClass(");

        $r2 = virtualinvoke r0.<proguard.classfile.ProgramClass: java.lang.String getName()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }
}
