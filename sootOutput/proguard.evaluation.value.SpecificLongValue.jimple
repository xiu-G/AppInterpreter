abstract class proguard.evaluation.value.SpecificLongValue extends proguard.evaluation.value.LongValue
{

    void <init>()
    {
        proguard.evaluation.value.SpecificLongValue r0;

        r0 := @this: proguard.evaluation.value.SpecificLongValue;

        specialinvoke r0.<proguard.evaluation.value.LongValue: void <init>()>();

        return;
    }

    public proguard.evaluation.value.LongValue add(proguard.evaluation.value.LongValue)
    {
        proguard.evaluation.value.SpecificLongValue r0;
        proguard.evaluation.value.LongValue $r1;

        r0 := @this: proguard.evaluation.value.SpecificLongValue;

        $r1 := @parameter0: proguard.evaluation.value.LongValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue add(proguard.evaluation.value.SpecificLongValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.LongValue add(proguard.evaluation.value.SpecificLongValue)
    {
        proguard.evaluation.value.CompositeLongValue $r2;
        proguard.evaluation.value.SpecificLongValue r0, $r1;

        r0 := @this: proguard.evaluation.value.SpecificLongValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificLongValue;

        $r2 = new proguard.evaluation.value.CompositeLongValue;

        specialinvoke $r2.<proguard.evaluation.value.CompositeLongValue: void <init>(proguard.evaluation.value.LongValue,byte,proguard.evaluation.value.Value)>(r0, 43, $r1);

        return $r2;
    }

    public proguard.evaluation.value.LongValue and(proguard.evaluation.value.LongValue)
    {
        proguard.evaluation.value.SpecificLongValue r0;
        proguard.evaluation.value.LongValue $r1;

        r0 := @this: proguard.evaluation.value.SpecificLongValue;

        $r1 := @parameter0: proguard.evaluation.value.LongValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue and(proguard.evaluation.value.SpecificLongValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.LongValue and(proguard.evaluation.value.SpecificLongValue)
    {
        proguard.evaluation.value.CompositeLongValue $r2;
        proguard.evaluation.value.SpecificLongValue r0, $r1;
        boolean $z0;

        r0 := @this: proguard.evaluation.value.SpecificLongValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificLongValue;

        $z0 = virtualinvoke r0.<proguard.evaluation.value.SpecificLongValue: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        return r0;

     label1:
        $r2 = new proguard.evaluation.value.CompositeLongValue;

        specialinvoke $r2.<proguard.evaluation.value.CompositeLongValue: void <init>(proguard.evaluation.value.LongValue,byte,proguard.evaluation.value.Value)>($r1, 38, r0);

        return $r2;
    }

    public proguard.evaluation.value.IntegerValue compare(proguard.evaluation.value.LongValue)
    {
        proguard.evaluation.value.IntegerValue $r2;
        proguard.evaluation.value.SpecificLongValue r0;
        proguard.evaluation.value.LongValue $r1;

        r0 := @this: proguard.evaluation.value.SpecificLongValue;

        $r1 := @parameter0: proguard.evaluation.value.LongValue;

        $r2 = virtualinvoke $r1.<proguard.evaluation.value.LongValue: proguard.evaluation.value.IntegerValue compareReverse(proguard.evaluation.value.SpecificLongValue)>(r0);

        return $r2;
    }

    public proguard.evaluation.value.IntegerValue compare(proguard.evaluation.value.SpecificLongValue)
    {
        proguard.evaluation.value.SpecificLongValue r0, $r1;
        proguard.evaluation.value.ComparisonValue $r2;

        r0 := @this: proguard.evaluation.value.SpecificLongValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificLongValue;

        $r2 = new proguard.evaluation.value.ComparisonValue;

        specialinvoke $r2.<proguard.evaluation.value.ComparisonValue: void <init>(proguard.evaluation.value.Value,proguard.evaluation.value.Value)>(r0, $r1);

        return $r2;
    }

    public proguard.evaluation.value.DoubleValue convertToDouble()
    {
        proguard.evaluation.value.ConvertedDoubleValue $r1;
        proguard.evaluation.value.SpecificLongValue r0;

        r0 := @this: proguard.evaluation.value.SpecificLongValue;

        $r1 = new proguard.evaluation.value.ConvertedDoubleValue;

        specialinvoke $r1.<proguard.evaluation.value.ConvertedDoubleValue: void <init>(proguard.evaluation.value.Value)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.FloatValue convertToFloat()
    {
        proguard.evaluation.value.ConvertedFloatValue $r1;
        proguard.evaluation.value.SpecificLongValue r0;

        r0 := @this: proguard.evaluation.value.SpecificLongValue;

        $r1 = new proguard.evaluation.value.ConvertedFloatValue;

        specialinvoke $r1.<proguard.evaluation.value.ConvertedFloatValue: void <init>(proguard.evaluation.value.Value)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.IntegerValue convertToInteger()
    {
        proguard.evaluation.value.ConvertedIntegerValue $r1;
        proguard.evaluation.value.SpecificLongValue r0;

        r0 := @this: proguard.evaluation.value.SpecificLongValue;

        $r1 = new proguard.evaluation.value.ConvertedIntegerValue;

        specialinvoke $r1.<proguard.evaluation.value.ConvertedIntegerValue: void <init>(proguard.evaluation.value.Value)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.LongValue divide(proguard.evaluation.value.LongValue) throws java.lang.ArithmeticException
    {
        proguard.evaluation.value.SpecificLongValue r0;
        proguard.evaluation.value.LongValue $r1;

        r0 := @this: proguard.evaluation.value.SpecificLongValue;

        $r1 := @parameter0: proguard.evaluation.value.LongValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue divideOf(proguard.evaluation.value.SpecificLongValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.LongValue divide(proguard.evaluation.value.SpecificLongValue) throws java.lang.ArithmeticException
    {
        proguard.evaluation.value.CompositeLongValue $r2;
        proguard.evaluation.value.SpecificLongValue r0, $r1;

        r0 := @this: proguard.evaluation.value.SpecificLongValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificLongValue;

        $r2 = new proguard.evaluation.value.CompositeLongValue;

        specialinvoke $r2.<proguard.evaluation.value.CompositeLongValue: void <init>(proguard.evaluation.value.LongValue,byte,proguard.evaluation.value.Value)>(r0, 47, $r1);

        return $r2;
    }

    public proguard.evaluation.value.LongValue divideOf(proguard.evaluation.value.LongValue) throws java.lang.ArithmeticException
    {
        proguard.evaluation.value.SpecificLongValue r0;
        proguard.evaluation.value.LongValue $r1;

        r0 := @this: proguard.evaluation.value.SpecificLongValue;

        $r1 := @parameter0: proguard.evaluation.value.LongValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue divide(proguard.evaluation.value.SpecificLongValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.LongValue divideOf(proguard.evaluation.value.SpecificLongValue) throws java.lang.ArithmeticException
    {
        proguard.evaluation.value.CompositeLongValue $r2;
        proguard.evaluation.value.SpecificLongValue r0, $r1;

        r0 := @this: proguard.evaluation.value.SpecificLongValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificLongValue;

        $r2 = new proguard.evaluation.value.CompositeLongValue;

        specialinvoke $r2.<proguard.evaluation.value.CompositeLongValue: void <init>(proguard.evaluation.value.LongValue,byte,proguard.evaluation.value.Value)>($r1, 47, r0);

        return $r2;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object $r1;
        java.lang.Class $r2, $r3;
        proguard.evaluation.value.SpecificLongValue r0;

        r0 := @this: proguard.evaluation.value.SpecificLongValue;

        $r1 := @parameter0: java.lang.Object;

        if $r1 == null goto label1;

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 != $r3 goto label1;

        return 1;

     label1:
        return 0;
    }

    public proguard.evaluation.value.LongValue generalize(proguard.evaluation.value.LongValue)
    {
        proguard.evaluation.value.SpecificLongValue r0;
        proguard.evaluation.value.LongValue $r1;

        r0 := @this: proguard.evaluation.value.SpecificLongValue;

        $r1 := @parameter0: proguard.evaluation.value.LongValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue generalize(proguard.evaluation.value.SpecificLongValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.LongValue generalize(proguard.evaluation.value.SpecificLongValue)
    {
        proguard.evaluation.value.LongValue r2;
        proguard.evaluation.value.SpecificLongValue r0, $r1;
        boolean $z0;

        r0 := @this: proguard.evaluation.value.SpecificLongValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificLongValue;

        $z0 = virtualinvoke r0.<proguard.evaluation.value.SpecificLongValue: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        return r0;

     label1:
        r2 = <proguard.evaluation.value.ValueFactory: proguard.evaluation.value.LongValue LONG_VALUE>;

        return r2;
    }

    public int hashCode()
    {
        int $i0;
        java.lang.Class $r1;
        proguard.evaluation.value.SpecificLongValue r0;

        r0 := @this: proguard.evaluation.value.SpecificLongValue;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    public boolean isSpecific()
    {
        proguard.evaluation.value.SpecificLongValue r0;

        r0 := @this: proguard.evaluation.value.SpecificLongValue;

        return 1;
    }

    public proguard.evaluation.value.LongValue multiply(proguard.evaluation.value.LongValue)
    {
        proguard.evaluation.value.SpecificLongValue r0;
        proguard.evaluation.value.LongValue $r1;

        r0 := @this: proguard.evaluation.value.SpecificLongValue;

        $r1 := @parameter0: proguard.evaluation.value.LongValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue multiply(proguard.evaluation.value.SpecificLongValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.LongValue multiply(proguard.evaluation.value.SpecificLongValue)
    {
        proguard.evaluation.value.CompositeLongValue $r2;
        proguard.evaluation.value.SpecificLongValue r0, $r1;

        r0 := @this: proguard.evaluation.value.SpecificLongValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificLongValue;

        $r2 = new proguard.evaluation.value.CompositeLongValue;

        specialinvoke $r2.<proguard.evaluation.value.CompositeLongValue: void <init>(proguard.evaluation.value.LongValue,byte,proguard.evaluation.value.Value)>(r0, 42, $r1);

        return $r2;
    }

    public proguard.evaluation.value.LongValue negate()
    {
        proguard.evaluation.value.SpecificLongValue r0;
        proguard.evaluation.value.NegatedLongValue $r1;

        r0 := @this: proguard.evaluation.value.SpecificLongValue;

        $r1 = new proguard.evaluation.value.NegatedLongValue;

        specialinvoke $r1.<proguard.evaluation.value.NegatedLongValue: void <init>(proguard.evaluation.value.LongValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.LongValue or(proguard.evaluation.value.LongValue)
    {
        proguard.evaluation.value.SpecificLongValue r0;
        proguard.evaluation.value.LongValue $r1;

        r0 := @this: proguard.evaluation.value.SpecificLongValue;

        $r1 := @parameter0: proguard.evaluation.value.LongValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue or(proguard.evaluation.value.SpecificLongValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.LongValue or(proguard.evaluation.value.SpecificLongValue)
    {
        proguard.evaluation.value.CompositeLongValue $r2;
        proguard.evaluation.value.SpecificLongValue r0, $r1;
        boolean $z0;

        r0 := @this: proguard.evaluation.value.SpecificLongValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificLongValue;

        $z0 = virtualinvoke r0.<proguard.evaluation.value.SpecificLongValue: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        return r0;

     label1:
        $r2 = new proguard.evaluation.value.CompositeLongValue;

        specialinvoke $r2.<proguard.evaluation.value.CompositeLongValue: void <init>(proguard.evaluation.value.LongValue,byte,proguard.evaluation.value.Value)>($r1, 124, r0);

        return $r2;
    }

    public proguard.evaluation.value.LongValue remainder(proguard.evaluation.value.LongValue) throws java.lang.ArithmeticException
    {
        proguard.evaluation.value.SpecificLongValue r0;
        proguard.evaluation.value.LongValue $r1;

        r0 := @this: proguard.evaluation.value.SpecificLongValue;

        $r1 := @parameter0: proguard.evaluation.value.LongValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue remainderOf(proguard.evaluation.value.SpecificLongValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.LongValue remainder(proguard.evaluation.value.SpecificLongValue) throws java.lang.ArithmeticException
    {
        proguard.evaluation.value.CompositeLongValue $r2;
        proguard.evaluation.value.SpecificLongValue r0, $r1;

        r0 := @this: proguard.evaluation.value.SpecificLongValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificLongValue;

        $r2 = new proguard.evaluation.value.CompositeLongValue;

        specialinvoke $r2.<proguard.evaluation.value.CompositeLongValue: void <init>(proguard.evaluation.value.LongValue,byte,proguard.evaluation.value.Value)>(r0, 37, $r1);

        return $r2;
    }

    public proguard.evaluation.value.LongValue remainderOf(proguard.evaluation.value.LongValue) throws java.lang.ArithmeticException
    {
        proguard.evaluation.value.SpecificLongValue r0;
        proguard.evaluation.value.LongValue $r1;

        r0 := @this: proguard.evaluation.value.SpecificLongValue;

        $r1 := @parameter0: proguard.evaluation.value.LongValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue remainder(proguard.evaluation.value.SpecificLongValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.LongValue remainderOf(proguard.evaluation.value.SpecificLongValue) throws java.lang.ArithmeticException
    {
        proguard.evaluation.value.CompositeLongValue $r2;
        proguard.evaluation.value.SpecificLongValue r0, $r1;

        r0 := @this: proguard.evaluation.value.SpecificLongValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificLongValue;

        $r2 = new proguard.evaluation.value.CompositeLongValue;

        specialinvoke $r2.<proguard.evaluation.value.CompositeLongValue: void <init>(proguard.evaluation.value.LongValue,byte,proguard.evaluation.value.Value)>($r1, 37, r0);

        return $r2;
    }

    public proguard.evaluation.value.LongValue shiftLeft(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.SpecificLongValue r0;
        proguard.evaluation.value.LongValue $r2;

        r0 := @this: proguard.evaluation.value.SpecificLongValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        $r2 = virtualinvoke $r1.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.LongValue shiftLeftOf(proguard.evaluation.value.SpecificLongValue)>(r0);

        return $r2;
    }

    public proguard.evaluation.value.LongValue shiftLeft(proguard.evaluation.value.SpecificLongValue)
    {
        proguard.evaluation.value.CompositeLongValue $r2;
        proguard.evaluation.value.SpecificLongValue r0, $r1;

        r0 := @this: proguard.evaluation.value.SpecificLongValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificLongValue;

        $r2 = new proguard.evaluation.value.CompositeLongValue;

        specialinvoke $r2.<proguard.evaluation.value.CompositeLongValue: void <init>(proguard.evaluation.value.LongValue,byte,proguard.evaluation.value.Value)>(r0, 60, $r1);

        return $r2;
    }

    public proguard.evaluation.value.LongValue shiftRight(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.SpecificLongValue r0;
        proguard.evaluation.value.LongValue $r2;

        r0 := @this: proguard.evaluation.value.SpecificLongValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        $r2 = virtualinvoke $r1.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.LongValue shiftRightOf(proguard.evaluation.value.SpecificLongValue)>(r0);

        return $r2;
    }

    public proguard.evaluation.value.LongValue shiftRight(proguard.evaluation.value.SpecificLongValue)
    {
        proguard.evaluation.value.CompositeLongValue $r2;
        proguard.evaluation.value.SpecificLongValue r0, $r1;

        r0 := @this: proguard.evaluation.value.SpecificLongValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificLongValue;

        $r2 = new proguard.evaluation.value.CompositeLongValue;

        specialinvoke $r2.<proguard.evaluation.value.CompositeLongValue: void <init>(proguard.evaluation.value.LongValue,byte,proguard.evaluation.value.Value)>(r0, 62, $r1);

        return $r2;
    }

    public proguard.evaluation.value.LongValue subtract(proguard.evaluation.value.LongValue)
    {
        proguard.evaluation.value.SpecificLongValue r0;
        proguard.evaluation.value.LongValue $r1;

        r0 := @this: proguard.evaluation.value.SpecificLongValue;

        $r1 := @parameter0: proguard.evaluation.value.LongValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue subtractFrom(proguard.evaluation.value.SpecificLongValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.LongValue subtract(proguard.evaluation.value.SpecificLongValue)
    {
        proguard.evaluation.value.CompositeLongValue $r2;
        proguard.evaluation.value.LongValue r3;
        proguard.evaluation.value.SpecificLongValue r0, $r1;
        boolean $z0;

        r0 := @this: proguard.evaluation.value.SpecificLongValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificLongValue;

        $z0 = virtualinvoke r0.<proguard.evaluation.value.SpecificLongValue: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        r3 = <proguard.evaluation.value.SpecificValueFactory: proguard.evaluation.value.LongValue LONG_VALUE_0>;

        return r3;

     label1:
        $r2 = new proguard.evaluation.value.CompositeLongValue;

        specialinvoke $r2.<proguard.evaluation.value.CompositeLongValue: void <init>(proguard.evaluation.value.LongValue,byte,proguard.evaluation.value.Value)>(r0, 45, $r1);

        return $r2;
    }

    public proguard.evaluation.value.LongValue subtractFrom(proguard.evaluation.value.LongValue)
    {
        proguard.evaluation.value.SpecificLongValue r0;
        proguard.evaluation.value.LongValue $r1;

        r0 := @this: proguard.evaluation.value.SpecificLongValue;

        $r1 := @parameter0: proguard.evaluation.value.LongValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue subtract(proguard.evaluation.value.SpecificLongValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.LongValue subtractFrom(proguard.evaluation.value.SpecificLongValue)
    {
        proguard.evaluation.value.CompositeLongValue $r2;
        proguard.evaluation.value.LongValue r3;
        proguard.evaluation.value.SpecificLongValue r0, $r1;
        boolean $z0;

        r0 := @this: proguard.evaluation.value.SpecificLongValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificLongValue;

        $z0 = virtualinvoke r0.<proguard.evaluation.value.SpecificLongValue: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        r3 = <proguard.evaluation.value.SpecificValueFactory: proguard.evaluation.value.LongValue LONG_VALUE_0>;

        return r3;

     label1:
        $r2 = new proguard.evaluation.value.CompositeLongValue;

        specialinvoke $r2.<proguard.evaluation.value.CompositeLongValue: void <init>(proguard.evaluation.value.LongValue,byte,proguard.evaluation.value.Value)>($r1, 45, r0);

        return $r2;
    }

    public proguard.evaluation.value.LongValue unsignedShiftRight(proguard.evaluation.value.IntegerValue)
    {
        proguard.evaluation.value.IntegerValue $r1;
        proguard.evaluation.value.SpecificLongValue r0;
        proguard.evaluation.value.LongValue $r2;

        r0 := @this: proguard.evaluation.value.SpecificLongValue;

        $r1 := @parameter0: proguard.evaluation.value.IntegerValue;

        $r2 = virtualinvoke $r1.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.LongValue unsignedShiftRightOf(proguard.evaluation.value.SpecificLongValue)>(r0);

        return $r2;
    }

    public proguard.evaluation.value.LongValue unsignedShiftRight(proguard.evaluation.value.SpecificLongValue)
    {
        proguard.evaluation.value.CompositeLongValue $r2;
        proguard.evaluation.value.SpecificLongValue r0, $r1;

        r0 := @this: proguard.evaluation.value.SpecificLongValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificLongValue;

        $r2 = new proguard.evaluation.value.CompositeLongValue;

        specialinvoke $r2.<proguard.evaluation.value.CompositeLongValue: void <init>(proguard.evaluation.value.LongValue,byte,proguard.evaluation.value.Value)>(r0, 125, $r1);

        return $r2;
    }

    public proguard.evaluation.value.LongValue xor(proguard.evaluation.value.LongValue)
    {
        proguard.evaluation.value.SpecificLongValue r0;
        proguard.evaluation.value.LongValue $r1;

        r0 := @this: proguard.evaluation.value.SpecificLongValue;

        $r1 := @parameter0: proguard.evaluation.value.LongValue;

        $r1 = virtualinvoke $r1.<proguard.evaluation.value.LongValue: proguard.evaluation.value.LongValue xor(proguard.evaluation.value.SpecificLongValue)>(r0);

        return $r1;
    }

    public proguard.evaluation.value.LongValue xor(proguard.evaluation.value.SpecificLongValue)
    {
        proguard.evaluation.value.CompositeLongValue $r2;
        proguard.evaluation.value.LongValue r3;
        proguard.evaluation.value.SpecificLongValue r0, $r1;
        boolean $z0;

        r0 := @this: proguard.evaluation.value.SpecificLongValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificLongValue;

        $z0 = virtualinvoke r0.<proguard.evaluation.value.SpecificLongValue: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        r3 = <proguard.evaluation.value.SpecificValueFactory: proguard.evaluation.value.LongValue LONG_VALUE_0>;

        return r3;

     label1:
        $r2 = new proguard.evaluation.value.CompositeLongValue;

        specialinvoke $r2.<proguard.evaluation.value.CompositeLongValue: void <init>(proguard.evaluation.value.LongValue,byte,proguard.evaluation.value.Value)>($r1, 94, r0);

        return $r2;
    }
}
