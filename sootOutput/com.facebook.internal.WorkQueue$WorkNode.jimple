class com.facebook.internal.WorkQueue$WorkNode extends java.lang.Object implements com.facebook.internal.WorkQueue$WorkItem
{
    static final boolean $assertionsDisabled;
    private final java.lang.Runnable callback;
    private boolean isRunning;
    private com.facebook.internal.WorkQueue$WorkNode next;
    private com.facebook.internal.WorkQueue$WorkNode prev;
    final com.facebook.internal.WorkQueue this$0;

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0;

        $r0 = class "Lcom/facebook/internal/WorkQueue;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label2;

        $z0 = 1;

     label1:
        <com.facebook.internal.WorkQueue$WorkNode: boolean $assertionsDisabled> = $z0;

        return;

     label2:
        $z0 = 0;

        goto label1;
    }

    void <init>(com.facebook.internal.WorkQueue, java.lang.Runnable)
    {
        com.facebook.internal.WorkQueue$WorkNode r0;
        java.lang.Runnable $r2;
        com.facebook.internal.WorkQueue $r1;

        r0 := @this: com.facebook.internal.WorkQueue$WorkNode;

        $r1 := @parameter0: com.facebook.internal.WorkQueue;

        $r2 := @parameter1: java.lang.Runnable;

        r0.<com.facebook.internal.WorkQueue$WorkNode: com.facebook.internal.WorkQueue this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.facebook.internal.WorkQueue$WorkNode: java.lang.Runnable callback> = $r2;

        return;
    }

    com.facebook.internal.WorkQueue$WorkNode addToList(com.facebook.internal.WorkQueue$WorkNode, boolean)
    {
        java.lang.AssertionError $r3;
        com.facebook.internal.WorkQueue$WorkNode $r0, $r1, r2, $r4;
        boolean $z0, $z1;

        r2 := @this: com.facebook.internal.WorkQueue$WorkNode;

        $r0 := @parameter0: com.facebook.internal.WorkQueue$WorkNode;

        $z0 := @parameter1: boolean;

        $z1 = <com.facebook.internal.WorkQueue$WorkNode: boolean $assertionsDisabled>;

        if $z1 != 0 goto label1;

        $r1 = r2.<com.facebook.internal.WorkQueue$WorkNode: com.facebook.internal.WorkQueue$WorkNode next>;

        if $r1 == null goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        $z1 = <com.facebook.internal.WorkQueue$WorkNode: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $r1 = r2.<com.facebook.internal.WorkQueue$WorkNode: com.facebook.internal.WorkQueue$WorkNode prev>;

        if $r1 == null goto label2;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label2:
        if $r0 != null goto label4;

        r2.<com.facebook.internal.WorkQueue$WorkNode: com.facebook.internal.WorkQueue$WorkNode prev> = r2;

        r2.<com.facebook.internal.WorkQueue$WorkNode: com.facebook.internal.WorkQueue$WorkNode next> = r2;

        $r0 = r2;

     label3:
        if $z0 == 0 goto label5;

        return r2;

     label4:
        r2.<com.facebook.internal.WorkQueue$WorkNode: com.facebook.internal.WorkQueue$WorkNode next> = $r0;

        $r1 = $r0.<com.facebook.internal.WorkQueue$WorkNode: com.facebook.internal.WorkQueue$WorkNode prev>;

        r2.<com.facebook.internal.WorkQueue$WorkNode: com.facebook.internal.WorkQueue$WorkNode prev> = $r1;

        $r4 = r2.<com.facebook.internal.WorkQueue$WorkNode: com.facebook.internal.WorkQueue$WorkNode next>;

        $r1 = r2.<com.facebook.internal.WorkQueue$WorkNode: com.facebook.internal.WorkQueue$WorkNode prev>;

        $r1.<com.facebook.internal.WorkQueue$WorkNode: com.facebook.internal.WorkQueue$WorkNode next> = r2;

        $r4.<com.facebook.internal.WorkQueue$WorkNode: com.facebook.internal.WorkQueue$WorkNode prev> = r2;

        goto label3;

     label5:
        return $r0;
    }

    public boolean cancel()
    {
        java.lang.Throwable $r5;
        com.facebook.internal.WorkQueue $r1, $r3;
        java.lang.Object $r2;
        com.facebook.internal.WorkQueue$WorkNode r0, $r4;
        boolean $z0;

        r0 := @this: com.facebook.internal.WorkQueue$WorkNode;

        $r1 = r0.<com.facebook.internal.WorkQueue$WorkNode: com.facebook.internal.WorkQueue this$0>;

        $r2 = staticinvoke <com.facebook.internal.WorkQueue: java.lang.Object access$0(com.facebook.internal.WorkQueue)>($r1);

        entermonitor $r2;

     label1:
        $z0 = virtualinvoke r0.<com.facebook.internal.WorkQueue$WorkNode: boolean isRunning()>();

        if $z0 != 0 goto label3;

        $r1 = r0.<com.facebook.internal.WorkQueue$WorkNode: com.facebook.internal.WorkQueue this$0>;

        $r3 = r0.<com.facebook.internal.WorkQueue$WorkNode: com.facebook.internal.WorkQueue this$0>;

        $r4 = staticinvoke <com.facebook.internal.WorkQueue: com.facebook.internal.WorkQueue$WorkNode access$1(com.facebook.internal.WorkQueue)>($r3);

        r0 = virtualinvoke r0.<com.facebook.internal.WorkQueue$WorkNode: com.facebook.internal.WorkQueue$WorkNode removeFromList(com.facebook.internal.WorkQueue$WorkNode)>($r4);

        staticinvoke <com.facebook.internal.WorkQueue: void access$2(com.facebook.internal.WorkQueue,com.facebook.internal.WorkQueue$WorkNode)>($r1, r0);

        exitmonitor $r2;

     label2:
        return 1;

     label3:
        exitmonitor $r2;

        return 0;

     label4:
        $r5 := @caughtexception;

        exitmonitor $r2;

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    java.lang.Runnable getCallback()
    {
        com.facebook.internal.WorkQueue$WorkNode r0;
        java.lang.Runnable r1;

        r0 := @this: com.facebook.internal.WorkQueue$WorkNode;

        r1 = r0.<com.facebook.internal.WorkQueue$WorkNode: java.lang.Runnable callback>;

        return r1;
    }

    com.facebook.internal.WorkQueue$WorkNode getNext()
    {
        com.facebook.internal.WorkQueue$WorkNode r0;

        r0 := @this: com.facebook.internal.WorkQueue$WorkNode;

        r0 = r0.<com.facebook.internal.WorkQueue$WorkNode: com.facebook.internal.WorkQueue$WorkNode next>;

        return r0;
    }

    public boolean isRunning()
    {
        com.facebook.internal.WorkQueue$WorkNode r0;
        boolean z0;

        r0 := @this: com.facebook.internal.WorkQueue$WorkNode;

        z0 = r0.<com.facebook.internal.WorkQueue$WorkNode: boolean isRunning>;

        return z0;
    }

    public void moveToFront()
    {
        java.lang.Throwable $r5;
        com.facebook.internal.WorkQueue $r1, $r3;
        java.lang.Object $r2;
        com.facebook.internal.WorkQueue$WorkNode r0, $r4;
        boolean $z0;

        r0 := @this: com.facebook.internal.WorkQueue$WorkNode;

        $r1 = r0.<com.facebook.internal.WorkQueue$WorkNode: com.facebook.internal.WorkQueue this$0>;

        $r2 = staticinvoke <com.facebook.internal.WorkQueue: java.lang.Object access$0(com.facebook.internal.WorkQueue)>($r1);

        entermonitor $r2;

     label1:
        $z0 = virtualinvoke r0.<com.facebook.internal.WorkQueue$WorkNode: boolean isRunning()>();

        if $z0 != 0 goto label2;

        $r1 = r0.<com.facebook.internal.WorkQueue$WorkNode: com.facebook.internal.WorkQueue this$0>;

        $r3 = r0.<com.facebook.internal.WorkQueue$WorkNode: com.facebook.internal.WorkQueue this$0>;

        $r4 = staticinvoke <com.facebook.internal.WorkQueue: com.facebook.internal.WorkQueue$WorkNode access$1(com.facebook.internal.WorkQueue)>($r3);

        $r4 = virtualinvoke r0.<com.facebook.internal.WorkQueue$WorkNode: com.facebook.internal.WorkQueue$WorkNode removeFromList(com.facebook.internal.WorkQueue$WorkNode)>($r4);

        staticinvoke <com.facebook.internal.WorkQueue: void access$2(com.facebook.internal.WorkQueue,com.facebook.internal.WorkQueue$WorkNode)>($r1, $r4);

        $r1 = r0.<com.facebook.internal.WorkQueue$WorkNode: com.facebook.internal.WorkQueue this$0>;

        $r3 = r0.<com.facebook.internal.WorkQueue$WorkNode: com.facebook.internal.WorkQueue this$0>;

        $r4 = staticinvoke <com.facebook.internal.WorkQueue: com.facebook.internal.WorkQueue$WorkNode access$1(com.facebook.internal.WorkQueue)>($r3);

        r0 = virtualinvoke r0.<com.facebook.internal.WorkQueue$WorkNode: com.facebook.internal.WorkQueue$WorkNode addToList(com.facebook.internal.WorkQueue$WorkNode,boolean)>($r4, 1);

        staticinvoke <com.facebook.internal.WorkQueue: void access$2(com.facebook.internal.WorkQueue,com.facebook.internal.WorkQueue$WorkNode)>($r1, r0);

     label2:
        exitmonitor $r2;

     label3:
        return;

     label4:
        $r5 := @caughtexception;

        exitmonitor $r2;

        throw $r5;

        catch java.lang.Throwable from label1 to label3 with label4;
    }

    com.facebook.internal.WorkQueue$WorkNode removeFromList(com.facebook.internal.WorkQueue$WorkNode)
    {
        java.lang.AssertionError $r3;
        com.facebook.internal.WorkQueue$WorkNode r0, $r1, $r2, $r4;
        boolean $z0;

        r0 := @this: com.facebook.internal.WorkQueue$WorkNode;

        $r1 := @parameter0: com.facebook.internal.WorkQueue$WorkNode;

        $z0 = <com.facebook.internal.WorkQueue$WorkNode: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r2 = r0.<com.facebook.internal.WorkQueue$WorkNode: com.facebook.internal.WorkQueue$WorkNode next>;

        if $r2 != null goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        $z0 = <com.facebook.internal.WorkQueue$WorkNode: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $r2 = r0.<com.facebook.internal.WorkQueue$WorkNode: com.facebook.internal.WorkQueue$WorkNode prev>;

        if $r2 != null goto label2;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label2:
        if $r1 != r0 goto label3;

        $r1 = r0.<com.facebook.internal.WorkQueue$WorkNode: com.facebook.internal.WorkQueue$WorkNode next>;

        if $r1 != r0 goto label4;

        $r1 = null;

     label3:
        $r2 = r0.<com.facebook.internal.WorkQueue$WorkNode: com.facebook.internal.WorkQueue$WorkNode next>;

        $r4 = r0.<com.facebook.internal.WorkQueue$WorkNode: com.facebook.internal.WorkQueue$WorkNode prev>;

        $r2.<com.facebook.internal.WorkQueue$WorkNode: com.facebook.internal.WorkQueue$WorkNode prev> = $r4;

        $r2 = r0.<com.facebook.internal.WorkQueue$WorkNode: com.facebook.internal.WorkQueue$WorkNode prev>;

        $r4 = r0.<com.facebook.internal.WorkQueue$WorkNode: com.facebook.internal.WorkQueue$WorkNode next>;

        $r2.<com.facebook.internal.WorkQueue$WorkNode: com.facebook.internal.WorkQueue$WorkNode next> = $r4;

        r0.<com.facebook.internal.WorkQueue$WorkNode: com.facebook.internal.WorkQueue$WorkNode prev> = null;

        r0.<com.facebook.internal.WorkQueue$WorkNode: com.facebook.internal.WorkQueue$WorkNode next> = null;

        return $r1;

     label4:
        $r1 = r0.<com.facebook.internal.WorkQueue$WorkNode: com.facebook.internal.WorkQueue$WorkNode next>;

        goto label3;
    }

    void setIsRunning(boolean)
    {
        com.facebook.internal.WorkQueue$WorkNode r0;
        boolean $z0;

        r0 := @this: com.facebook.internal.WorkQueue$WorkNode;

        $z0 := @parameter0: boolean;

        r0.<com.facebook.internal.WorkQueue$WorkNode: boolean isRunning> = 1;

        return;
    }

    void verify(boolean)
    {
        java.lang.AssertionError $r2;
        com.facebook.internal.WorkQueue$WorkNode r0, $r1;
        boolean $z0, $z1;

        r0 := @this: com.facebook.internal.WorkQueue$WorkNode;

        $z0 := @parameter0: boolean;

        $z1 = <com.facebook.internal.WorkQueue$WorkNode: boolean $assertionsDisabled>;

        if $z1 != 0 goto label1;

        $r1 = r0.<com.facebook.internal.WorkQueue$WorkNode: com.facebook.internal.WorkQueue$WorkNode prev>;

        $r1 = $r1.<com.facebook.internal.WorkQueue$WorkNode: com.facebook.internal.WorkQueue$WorkNode next>;

        if $r1 == r0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        $z1 = <com.facebook.internal.WorkQueue$WorkNode: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $r1 = r0.<com.facebook.internal.WorkQueue$WorkNode: com.facebook.internal.WorkQueue$WorkNode next>;

        $r1 = $r1.<com.facebook.internal.WorkQueue$WorkNode: com.facebook.internal.WorkQueue$WorkNode prev>;

        if $r1 == r0 goto label2;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label2:
        $z1 = <com.facebook.internal.WorkQueue$WorkNode: boolean $assertionsDisabled>;

        if $z1 != 0 goto label3;

        $z1 = virtualinvoke r0.<com.facebook.internal.WorkQueue$WorkNode: boolean isRunning()>();

        if $z1 == $z0 goto label3;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label3:
        return;
    }
}
