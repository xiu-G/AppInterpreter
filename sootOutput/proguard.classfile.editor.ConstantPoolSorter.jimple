public class proguard.classfile.editor.ConstantPoolSorter extends proguard.classfile.util.SimplifiedVisitor implements proguard.classfile.visitor.ClassVisitor
{
    private proguard.classfile.editor.ComparableConstant[] comparableConstantPool;
    private int[] constantIndexMap;
    private final proguard.classfile.editor.ConstantPoolRemapper constantPoolRemapper;
    private proguard.classfile.constant.Constant[] newConstantPool;

    public void <init>()
    {
        proguard.classfile.editor.ConstantPoolRemapper $r4;
        int[] $r1;
        proguard.classfile.editor.ConstantPoolSorter r0;
        proguard.classfile.constant.Constant[] $r3;
        proguard.classfile.editor.ComparableConstant[] $r2;

        r0 := @this: proguard.classfile.editor.ConstantPoolSorter;

        specialinvoke r0.<proguard.classfile.util.SimplifiedVisitor: void <init>()>();

        $r1 = newarray (int)[256];

        r0.<proguard.classfile.editor.ConstantPoolSorter: int[] constantIndexMap> = $r1;

        $r2 = newarray (proguard.classfile.editor.ComparableConstant)[256];

        r0.<proguard.classfile.editor.ConstantPoolSorter: proguard.classfile.editor.ComparableConstant[] comparableConstantPool> = $r2;

        $r3 = newarray (proguard.classfile.constant.Constant)[256];

        r0.<proguard.classfile.editor.ConstantPoolSorter: proguard.classfile.constant.Constant[] newConstantPool> = $r3;

        $r4 = new proguard.classfile.editor.ConstantPoolRemapper;

        specialinvoke $r4.<proguard.classfile.editor.ConstantPoolRemapper: void <init>()>();

        r0.<proguard.classfile.editor.ConstantPoolSorter: proguard.classfile.editor.ConstantPoolRemapper constantPoolRemapper> = $r4;

        return;
    }

    public void visitProgramClass(proguard.classfile.ProgramClass)
    {
        proguard.classfile.editor.ComparableConstant[] $r3;
        proguard.classfile.ProgramClass $r1;
        proguard.classfile.editor.ConstantPoolRemapper $r9;
        int[] $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0;
        proguard.classfile.editor.ComparableConstant $r6, $r7;
        proguard.classfile.constant.Constant $r5;
        proguard.classfile.editor.ConstantPoolSorter r0;
        proguard.classfile.constant.Constant[] $r4, $r8;

        r0 := @this: proguard.classfile.editor.ConstantPoolSorter;

        $r1 := @parameter0: proguard.classfile.ProgramClass;

        $i0 = $r1.<proguard.classfile.ProgramClass: int u2constantPoolCount>;

        $r2 = r0.<proguard.classfile.editor.ConstantPoolSorter: int[] constantIndexMap>;

        $i1 = lengthof $r2;

        if $i1 >= $i0 goto label01;

        $r2 = newarray (int)[$i0];

        r0.<proguard.classfile.editor.ConstantPoolSorter: int[] constantIndexMap> = $r2;

        $r3 = newarray (proguard.classfile.editor.ComparableConstant)[$i0];

        r0.<proguard.classfile.editor.ConstantPoolSorter: proguard.classfile.editor.ComparableConstant[] comparableConstantPool> = $r3;

        $r4 = newarray (proguard.classfile.constant.Constant)[$i0];

        r0.<proguard.classfile.editor.ConstantPoolSorter: proguard.classfile.constant.Constant[] newConstantPool> = $r4;

     label01:
        $i2 = 1;

        $i1 = 0;

     label02:
        if $i2 >= $i0 goto label04;

        $r4 = $r1.<proguard.classfile.ProgramClass: proguard.classfile.constant.Constant[] constantPool>;

        $r5 = $r4[$i2];

        if $r5 == null goto label03;

        $r3 = r0.<proguard.classfile.editor.ConstantPoolSorter: proguard.classfile.editor.ComparableConstant[] comparableConstantPool>;

        $r6 = new proguard.classfile.editor.ComparableConstant;

        specialinvoke $r6.<proguard.classfile.editor.ComparableConstant: void <init>(proguard.classfile.Clazz,int,proguard.classfile.constant.Constant)>($r1, $i2, $r5);

        $r3[$i1] = $r6;

        $i1 = $i1 + 1;

     label03:
        $i2 = $i2 + 1;

        goto label02;

     label04:
        $r3 = r0.<proguard.classfile.editor.ConstantPoolSorter: proguard.classfile.editor.ComparableConstant[] comparableConstantPool>;

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],int,int)>($r3, 0, $i1);

        $i3 = 0;

        $r6 = null;

        $i4 = 1;

        $i2 = 1;

     label05:
        if $i3 >= $i1 goto label09;

        $r3 = r0.<proguard.classfile.editor.ConstantPoolSorter: proguard.classfile.editor.ComparableConstant[] comparableConstantPool>;

        $r7 = $r3[$i3];

        $z0 = virtualinvoke $r7.<proguard.classfile.editor.ComparableConstant: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label08;

        $r5 = virtualinvoke $r7.<proguard.classfile.editor.ComparableConstant: proguard.classfile.constant.Constant getConstant()>();

        $r4 = r0.<proguard.classfile.editor.ConstantPoolSorter: proguard.classfile.constant.Constant[] newConstantPool>;

        $i4 = $i2 + 1;

        $r4[$i2] = $r5;

        $i5 = virtualinvoke $r5.<proguard.classfile.constant.Constant: int getTag()>();

        if $i5 == 5 goto label06;

        if $i5 != 6 goto label12;

     label06:
        $r4 = r0.<proguard.classfile.editor.ConstantPoolSorter: proguard.classfile.constant.Constant[] newConstantPool>;

        $r4[$i4] = null;

        $i5 = $i4 + 1;

     label07:
        $i4 = $i2;

        $i2 = $i5;

        $r6 = $r7;

     label08:
        $r2 = r0.<proguard.classfile.editor.ConstantPoolSorter: int[] constantIndexMap>;

        $i5 = virtualinvoke $r7.<proguard.classfile.editor.ComparableConstant: int getIndex()>();

        $r2[$i5] = $i4;

        $i3 = $i3 + 1;

        goto label05;

     label09:
        $r4 = r0.<proguard.classfile.editor.ConstantPoolSorter: proguard.classfile.constant.Constant[] newConstantPool>;

        $r8 = $r1.<proguard.classfile.ProgramClass: proguard.classfile.constant.Constant[] constantPool>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r8, 0, $i2);

        $i1 = $i2;

     label10:
        if $i1 >= $i0 goto label11;

        $r4 = $r1.<proguard.classfile.ProgramClass: proguard.classfile.constant.Constant[] constantPool>;

        $r4[$i1] = null;

        $i1 = $i1 + 1;

        goto label10;

     label11:
        $r1.<proguard.classfile.ProgramClass: int u2constantPoolCount> = $i2;

        $r9 = r0.<proguard.classfile.editor.ConstantPoolSorter: proguard.classfile.editor.ConstantPoolRemapper constantPoolRemapper>;

        $r2 = r0.<proguard.classfile.editor.ConstantPoolSorter: int[] constantIndexMap>;

        virtualinvoke $r9.<proguard.classfile.editor.ConstantPoolRemapper: void setConstantIndexMap(int[])>($r2);

        $r9 = r0.<proguard.classfile.editor.ConstantPoolSorter: proguard.classfile.editor.ConstantPoolRemapper constantPoolRemapper>;

        virtualinvoke $r9.<proguard.classfile.editor.ConstantPoolRemapper: void visitProgramClass(proguard.classfile.ProgramClass)>($r1);

        return;

     label12:
        $i5 = $i4;

        goto label07;
    }
}
