public final class wabao.ETAppLock.util.d extends java.lang.Object
{
    private static char[] a;
    private static java.lang.StringBuilder b;

    static void <clinit>()
    {
        char[] $r0;
        java.lang.StringBuilder $r1;

        $r0 = newarray (char)[16];

        $r0[0] = 48;

        $r0[1] = 49;

        $r0[2] = 50;

        $r0[3] = 51;

        $r0[4] = 52;

        $r0[5] = 53;

        $r0[6] = 54;

        $r0[7] = 55;

        $r0[8] = 56;

        $r0[9] = 57;

        $r0[10] = 65;

        $r0[11] = 66;

        $r0[12] = 67;

        $r0[13] = 68;

        $r0[14] = 69;

        $r0[15] = 70;

        <wabao.ETAppLock.util.d: char[] a> = $r0;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        <wabao.ETAppLock.util.d: java.lang.StringBuilder b> = $r1;

        return;
    }

    public static byte[] a(java.lang.String)
    {
        byte[] $r2;
        java.lang.Exception $r3;
        byte $b2;
        java.util.StringTokenizer $r1;
        int $i0, $i1;
        java.lang.String $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

     label01:
        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String trim()>();

     label02:
        $r1 = new java.util.StringTokenizer;

     label03:
        specialinvoke $r1.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r0, " ");

        $i0 = virtualinvoke $r1.<java.util.StringTokenizer: int countTokens()>();

        $r2 = newarray (byte)[$i0];

     label04:
        $i0 = 0;

     label05:
        $z0 = virtualinvoke $r1.<java.util.StringTokenizer: boolean hasMoreTokens()>();

     label06:
        if $z0 != 0 goto label07;

        return $r2;

     label07:
        $r0 = virtualinvoke $r1.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

     label08:
        if $i1 > 2 goto label14;

     label09:
        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r0, 16);

     label10:
        $i1 = $i1 & 255;

        $b2 = (byte) $i1;

     label11:
        $r2[$i0] = $b2;

     label12:
        $i0 = $i0 + 1;

        goto label05;

     label13:
        $r3 := @caughtexception;

     label14:
        return null;

        catch java.lang.Exception from label01 to label02 with label13;
        catch java.lang.Exception from label03 to label04 with label13;
        catch java.lang.Exception from label05 to label06 with label13;
        catch java.lang.Exception from label07 to label08 with label13;
        catch java.lang.Exception from label09 to label10 with label13;
        catch java.lang.Exception from label11 to label12 with label13;
    }
}
