public final class com.cooliris.media.Shared extends java.lang.Object
{
    public static final int INFINITY;
    public static final int INVALID;

    public void <init>()
    {
        com.cooliris.media.Shared r0;

        r0 := @this: com.cooliris.media.Shared;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int argb(float, float, float, float)
    {
        int $i0, $i1, $i2, $i3;
        float $f0, $f1, $f2, $f3;

        $f0 := @parameter0: float;

        $f1 := @parameter1: float;

        $f2 := @parameter2: float;

        $f3 := @parameter3: float;

        $f0 = $f0 * 255.0F;

        $i0 = (int) $f0;

        $f0 = $f1 * 255.0F;

        $i1 = (int) $f0;

        $f0 = $f2 * 255.0F;

        $i2 = (int) $f0;

        $f0 = 255.0F * $f3;

        $i3 = (int) $f0;

        $i0 = staticinvoke <android.graphics.Color: int argb(int,int,int,int)>($i0, $i1, $i2, $i3);

        return $i0;
    }

    public static int clamp(int, int, int)
    {
        int $i0, $i1, $i2;

        $i2 := @parameter0: int;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $i2 >= $i0 goto label1;

        return $i0;

     label1:
        if $i2 <= $i1 goto label2;

        return $i1;

     label2:
        return $i2;
    }

    public static long clamp(long, long, long)
    {
        byte $b3;
        int $i4;
        long $l0, $l1, $l2;

        $l2 := @parameter0: long;

        $l0 := @parameter1: long;

        $l1 := @parameter2: long;

        $b3 = $l2 cmp $l0;

        $i4 = (int) $b3;

        if $i4 >= 0 goto label1;

        return $l0;

     label1:
        $b3 = $l2 cmp $l1;

        $i4 = (int) $b3;

        if $i4 <= 0 goto label2;

        return $l1;

     label2:
        return $l2;
    }

    public static int degreesToExifOrientation(float)
    {
        float $f0;
        byte $b0;

        $f0 := @parameter0: float;

        $b0 = $f0 cmpl 0.0F;

        if $b0 != 0 goto label1;

        return 1;

     label1:
        $b0 = $f0 cmpl 90.0F;

        if $b0 != 0 goto label2;

        return 6;

     label2:
        $b0 = $f0 cmpl 180.0F;

        if $b0 != 0 goto label3;

        return 3;

     label3:
        $b0 = $f0 cmpl 270.0F;

        if $b0 != 0 goto label4;

        return 8;

     label4:
        return 1;
    }

    public static float exifOrientationToDegrees(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        if $i0 != 6 goto label1;

        return 90.0F;

     label1:
        if $i0 != 3 goto label2;

        return 180.0F;

     label2:
        if $i0 != 8 goto label3;

        return 270.0F;

     label3:
        return 0.0F;
    }

    public static boolean isPowerOf2(int)
    {
        int $i0, $i1;

        $i0 := @parameter0: int;

        $i1 = neg $i0;

        $i1 = $i1 & $i0;

        if $i1 != $i0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static int midPointIterator(int)
    {
        int $i0, i1;
        byte b2;

        $i0 := @parameter0: int;

        if $i0 == 0 goto label3;

        i1 = $i0 - 1;

        i1 = i1 / 2;

        i1 = i1 + 1;

        $i0 = $i0 - 1;

        $i0 = $i0 % 2;

        if $i0 != 0 goto label2;

        b2 = 1;

     label1:
        $i0 = i1 * b2;

        return $i0;

     label2:
        b2 = -1;

        goto label1;

     label3:
        return 0;
    }

    public static int nextPowerOf2(int)
    {
        int $i0, $i1;

        $i0 := @parameter0: int;

        $i0 = $i0 + -1;

        $i1 = $i0 >>> 16;

        $i0 = $i0 | $i1;

        $i1 = $i0 >>> 8;

        $i0 = $i0 | $i1;

        $i1 = $i0 >>> 4;

        $i0 = $i0 | $i1;

        $i1 = $i0 >>> 2;

        $i0 = $i0 | $i1;

        $i1 = $i0 >>> 1;

        $i0 = $i0 | $i1;

        $i0 = $i0 + 1;

        return $i0;
    }

    public static float normalizePositive(float)
    {
        byte $b0;
        int i1, $i2;
        float f0, $f1;

        $f1 := @parameter0: float;

        $b0 = $f1 cmpl 0.0F;

        if $b0 != 0 goto label1;

        return 0.0F;

     label1:
        f0 = $f1 / 360.0F;

        i1 = 0;

        $b0 = $f1 cmpg 0.0F;

        $i2 = (int) $b0;

        if $i2 >= 0 goto label4;

        f0 = f0 - 1.0F;

        i1 = (int) f0;

     label2:
        f0 = (float) i1;

        f0 = f0 * 360.0F;

        $f1 = $f1 - f0;

        $b0 = $f1 cmpl 360.0F;

        if $b0 != 0 goto label3;

        $f1 = 0.0F;

     label3:
        return $f1;

     label4:
        $b0 = $f1 cmpl 360.0F;

        $i2 = (int) $b0;

        if $i2 <= 0 goto label2;

        i1 = (int) f0;

        goto label2;
    }

    public static int prevPowerOf2(int)
    {
        int $i0;
        boolean $z0;

        $i0 := @parameter0: int;

        $z0 = staticinvoke <com.cooliris.media.Shared: boolean isPowerOf2(int)>($i0);

        if $z0 == 0 goto label1;

        $i0 = staticinvoke <com.cooliris.media.Shared: int nextPowerOf2(int)>($i0);

        return $i0;

     label1:
        $i0 = staticinvoke <com.cooliris.media.Shared: int nextPowerOf2(int)>($i0);

        $i0 = $i0 - 1;

        return $i0;
    }

    public static float scaleToFit(float, float, float, float, boolean)
    {
        byte $b0;
        int $i1;
        float $f0, $f1, $f2, $f3;
        boolean $z0;

        $f0 := @parameter0: float;

        $f1 := @parameter1: float;

        $f2 := @parameter2: float;

        $f3 := @parameter3: float;

        $z0 := @parameter4: boolean;

        $f0 = $f2 / $f0;

        $f1 = $f3 / $f1;

        if $z0 == 0 goto label2;

        $b0 = $f0 cmpl $f1;

        $i1 = (int) $b0;

        if $i1 <= 0 goto label3;

     label1:
        return $f0;

     label2:
        $b0 = $f0 cmpg $f1;

        $i1 = (int) $b0;

        if $i1 < 0 goto label1;

     label3:
        return $f1;
    }

    public static void <clinit>()
    {
        <com.cooliris.media.Shared: int INVALID> = -1;

        <com.cooliris.media.Shared: int INFINITY> = 2147483647;

        return;
    }
}
