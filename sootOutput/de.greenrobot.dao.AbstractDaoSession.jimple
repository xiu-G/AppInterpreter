public class de.greenrobot.dao.AbstractDaoSession extends java.lang.Object
{
    private final android.database.sqlite.SQLiteDatabase db;
    private final java.util.Map entityToDao;

    public void <init>(android.database.sqlite.SQLiteDatabase)
    {
        de.greenrobot.dao.AbstractDaoSession r0;
        android.database.sqlite.SQLiteDatabase $r1;
        java.util.HashMap $r2;

        r0 := @this: de.greenrobot.dao.AbstractDaoSession;

        $r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<de.greenrobot.dao.AbstractDaoSession: android.database.sqlite.SQLiteDatabase db> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<de.greenrobot.dao.AbstractDaoSession: java.util.Map entityToDao> = $r2;

        return;
    }

    public java.lang.Object callInTx(java.util.concurrent.Callable)
    {
        java.lang.Throwable $r4;
        android.database.sqlite.SQLiteDatabase $r3;
        de.greenrobot.dao.AbstractDaoSession r0;
        java.util.concurrent.Callable $r1;
        java.lang.Object $r2;

        r0 := @this: de.greenrobot.dao.AbstractDaoSession;

        $r1 := @parameter0: java.util.concurrent.Callable;

        $r3 = r0.<de.greenrobot.dao.AbstractDaoSession: android.database.sqlite.SQLiteDatabase db>;

        virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: void beginTransaction()>();

     label1:
        $r2 = interfaceinvoke $r1.<java.util.concurrent.Callable: java.lang.Object call()>();

        $r3 = r0.<de.greenrobot.dao.AbstractDaoSession: android.database.sqlite.SQLiteDatabase db>;

        virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>();

     label2:
        $r3 = r0.<de.greenrobot.dao.AbstractDaoSession: android.database.sqlite.SQLiteDatabase db>;

        virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        return $r2;

     label3:
        $r4 := @caughtexception;

        $r3 = r0.<de.greenrobot.dao.AbstractDaoSession: android.database.sqlite.SQLiteDatabase db>;

        virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.lang.Object callInTxNoException(java.util.concurrent.Callable)
    {
        java.lang.Throwable $r6;
        android.database.sqlite.SQLiteDatabase $r3;
        de.greenrobot.dao.DaoException $r5;
        de.greenrobot.dao.AbstractDaoSession r0;
        java.util.concurrent.Callable $r1;
        java.lang.Object $r2;
        java.lang.Exception $r4;

        r0 := @this: de.greenrobot.dao.AbstractDaoSession;

        $r1 := @parameter0: java.util.concurrent.Callable;

        $r3 = r0.<de.greenrobot.dao.AbstractDaoSession: android.database.sqlite.SQLiteDatabase db>;

        virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: void beginTransaction()>();

     label1:
        $r2 = interfaceinvoke $r1.<java.util.concurrent.Callable: java.lang.Object call()>();

     label2:
        $r3 = r0.<de.greenrobot.dao.AbstractDaoSession: android.database.sqlite.SQLiteDatabase db>;

        virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>();

     label3:
        $r3 = r0.<de.greenrobot.dao.AbstractDaoSession: android.database.sqlite.SQLiteDatabase db>;

        virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        return $r2;

     label4:
        $r4 := @caughtexception;

     label5:
        $r5 = new de.greenrobot.dao.DaoException;

        specialinvoke $r5.<de.greenrobot.dao.DaoException: void <init>(java.lang.String,java.lang.Throwable)>("Callable failed", $r4);

        throw $r5;

     label6:
        $r6 := @caughtexception;

        $r3 = r0.<de.greenrobot.dao.AbstractDaoSession: android.database.sqlite.SQLiteDatabase db>;

        virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        throw $r6;

        catch java.lang.Exception from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label5 to label6 with label6;
    }

    public void delete(java.lang.Object)
    {
        de.greenrobot.dao.AbstractDao $r3;
        de.greenrobot.dao.AbstractDaoSession r0;
        java.lang.Object $r1;
        java.lang.Class $r2;

        r0 := @this: de.greenrobot.dao.AbstractDaoSession;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r0.<de.greenrobot.dao.AbstractDaoSession: de.greenrobot.dao.AbstractDao getDao(java.lang.Class)>($r2);

        virtualinvoke $r3.<de.greenrobot.dao.AbstractDao: void delete(java.lang.Object)>($r1);

        return;
    }

    public void deleteAll(java.lang.Class)
    {
        de.greenrobot.dao.AbstractDaoSession r0;
        java.lang.Class $r1;
        de.greenrobot.dao.AbstractDao $r2;

        r0 := @this: de.greenrobot.dao.AbstractDaoSession;

        $r1 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r0.<de.greenrobot.dao.AbstractDaoSession: de.greenrobot.dao.AbstractDao getDao(java.lang.Class)>($r1);

        virtualinvoke $r2.<de.greenrobot.dao.AbstractDao: void deleteAll()>();

        return;
    }

    public de.greenrobot.dao.AbstractDao getDao(java.lang.Class)
    {
        de.greenrobot.dao.AbstractDaoSession r0;
        de.greenrobot.dao.DaoException $r5;
        de.greenrobot.dao.AbstractDao $r4;
        java.util.Map $r2;
        java.lang.Class $r1;
        java.lang.Object $r3;
        java.lang.StringBuilder $r6;
        java.lang.String $r7;

        r0 := @this: de.greenrobot.dao.AbstractDaoSession;

        $r1 := @parameter0: java.lang.Class;

        $r2 = r0.<de.greenrobot.dao.AbstractDaoSession: java.util.Map entityToDao>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (de.greenrobot.dao.AbstractDao) $r3;

        if $r4 != null goto label1;

        $r5 = new de.greenrobot.dao.DaoException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("No DAO registered for ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<de.greenrobot.dao.DaoException: void <init>(java.lang.String)>($r7);

        throw $r5;

     label1:
        return $r4;
    }

    public android.database.sqlite.SQLiteDatabase getDatabase()
    {
        de.greenrobot.dao.AbstractDaoSession r0;
        android.database.sqlite.SQLiteDatabase r1;

        r0 := @this: de.greenrobot.dao.AbstractDaoSession;

        r1 = r0.<de.greenrobot.dao.AbstractDaoSession: android.database.sqlite.SQLiteDatabase db>;

        return r1;
    }

    public long insert(java.lang.Object)
    {
        de.greenrobot.dao.AbstractDao $r3;
        de.greenrobot.dao.AbstractDaoSession r0;
        java.lang.Object $r1;
        java.lang.Class $r2;
        long $l0;

        r0 := @this: de.greenrobot.dao.AbstractDaoSession;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r0.<de.greenrobot.dao.AbstractDaoSession: de.greenrobot.dao.AbstractDao getDao(java.lang.Class)>($r2);

        $l0 = virtualinvoke $r3.<de.greenrobot.dao.AbstractDao: long insert(java.lang.Object)>($r1);

        return $l0;
    }

    public long insertOrReplace(java.lang.Object)
    {
        de.greenrobot.dao.AbstractDao $r3;
        de.greenrobot.dao.AbstractDaoSession r0;
        java.lang.Object $r1;
        java.lang.Class $r2;
        long $l0;

        r0 := @this: de.greenrobot.dao.AbstractDaoSession;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r0.<de.greenrobot.dao.AbstractDaoSession: de.greenrobot.dao.AbstractDao getDao(java.lang.Class)>($r2);

        $l0 = virtualinvoke $r3.<de.greenrobot.dao.AbstractDao: long insertOrReplace(java.lang.Object)>($r1);

        return $l0;
    }

    public java.lang.Object load(java.lang.Class, java.lang.Object)
    {
        de.greenrobot.dao.AbstractDao $r3;
        de.greenrobot.dao.AbstractDaoSession r0;
        java.lang.Class $r1;
        java.lang.Object $r2;

        r0 := @this: de.greenrobot.dao.AbstractDaoSession;

        $r1 := @parameter0: java.lang.Class;

        $r2 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke r0.<de.greenrobot.dao.AbstractDaoSession: de.greenrobot.dao.AbstractDao getDao(java.lang.Class)>($r1);

        $r2 = virtualinvoke $r3.<de.greenrobot.dao.AbstractDao: java.lang.Object load(java.lang.Object)>($r2);

        return $r2;
    }

    public java.util.List loadAll(java.lang.Class)
    {
        java.util.List $r3;
        de.greenrobot.dao.AbstractDao $r2;
        de.greenrobot.dao.AbstractDaoSession r0;
        java.lang.Class $r1;

        r0 := @this: de.greenrobot.dao.AbstractDaoSession;

        $r1 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r0.<de.greenrobot.dao.AbstractDaoSession: de.greenrobot.dao.AbstractDao getDao(java.lang.Class)>($r1);

        $r3 = virtualinvoke $r2.<de.greenrobot.dao.AbstractDao: java.util.List loadAll()>();

        return $r3;
    }

    public de.greenrobot.dao.query.QueryBuilder queryBuilder(java.lang.Class)
    {
        de.greenrobot.dao.AbstractDao $r2;
        de.greenrobot.dao.query.QueryBuilder $r3;
        de.greenrobot.dao.AbstractDaoSession r0;
        java.lang.Class $r1;

        r0 := @this: de.greenrobot.dao.AbstractDaoSession;

        $r1 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r0.<de.greenrobot.dao.AbstractDaoSession: de.greenrobot.dao.AbstractDao getDao(java.lang.Class)>($r1);

        $r3 = virtualinvoke $r2.<de.greenrobot.dao.AbstractDao: de.greenrobot.dao.query.QueryBuilder queryBuilder()>();

        return $r3;
    }

    public transient java.util.List queryRaw(java.lang.Class, java.lang.String, java.lang.String[])
    {
        java.util.List $r5;
        de.greenrobot.dao.AbstractDao $r4;
        de.greenrobot.dao.AbstractDaoSession r0;
        java.lang.Class $r1;
        java.lang.String[] $r3;
        java.lang.String $r2;

        r0 := @this: de.greenrobot.dao.AbstractDaoSession;

        $r1 := @parameter0: java.lang.Class;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String[];

        $r4 = virtualinvoke r0.<de.greenrobot.dao.AbstractDaoSession: de.greenrobot.dao.AbstractDao getDao(java.lang.Class)>($r1);

        $r5 = virtualinvoke $r4.<de.greenrobot.dao.AbstractDao: java.util.List queryRaw(java.lang.String,java.lang.String[])>($r2, $r3);

        return $r5;
    }

    public void refresh(java.lang.Object)
    {
        de.greenrobot.dao.AbstractDao $r3;
        de.greenrobot.dao.AbstractDaoSession r0;
        java.lang.Object $r1;
        java.lang.Class $r2;

        r0 := @this: de.greenrobot.dao.AbstractDaoSession;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r0.<de.greenrobot.dao.AbstractDaoSession: de.greenrobot.dao.AbstractDao getDao(java.lang.Class)>($r2);

        virtualinvoke $r3.<de.greenrobot.dao.AbstractDao: void refresh(java.lang.Object)>($r1);

        return;
    }

    protected void registerDao(java.lang.Class, de.greenrobot.dao.AbstractDao)
    {
        de.greenrobot.dao.AbstractDao $r2;
        java.util.Map $r3;
        de.greenrobot.dao.AbstractDaoSession r0;
        java.lang.Class $r1;

        r0 := @this: de.greenrobot.dao.AbstractDaoSession;

        $r1 := @parameter0: java.lang.Class;

        $r2 := @parameter1: de.greenrobot.dao.AbstractDao;

        $r3 = r0.<de.greenrobot.dao.AbstractDaoSession: java.util.Map entityToDao>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        return;
    }

    public void runInTx(java.lang.Runnable)
    {
        java.lang.Throwable $r3;
        android.database.sqlite.SQLiteDatabase $r2;
        de.greenrobot.dao.AbstractDaoSession r0;
        java.lang.Runnable $r1;

        r0 := @this: de.greenrobot.dao.AbstractDaoSession;

        $r1 := @parameter0: java.lang.Runnable;

        $r2 = r0.<de.greenrobot.dao.AbstractDaoSession: android.database.sqlite.SQLiteDatabase db>;

        virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: void beginTransaction()>();

     label1:
        interfaceinvoke $r1.<java.lang.Runnable: void run()>();

        $r2 = r0.<de.greenrobot.dao.AbstractDaoSession: android.database.sqlite.SQLiteDatabase db>;

        virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>();

     label2:
        $r2 = r0.<de.greenrobot.dao.AbstractDaoSession: android.database.sqlite.SQLiteDatabase db>;

        virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        return;

     label3:
        $r3 := @caughtexception;

        $r2 = r0.<de.greenrobot.dao.AbstractDaoSession: android.database.sqlite.SQLiteDatabase db>;

        virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public de.greenrobot.dao.async.AsyncSession startAsyncSession()
    {
        de.greenrobot.dao.AbstractDaoSession r0;
        de.greenrobot.dao.async.AsyncSession $r1;

        r0 := @this: de.greenrobot.dao.AbstractDaoSession;

        $r1 = new de.greenrobot.dao.async.AsyncSession;

        specialinvoke $r1.<de.greenrobot.dao.async.AsyncSession: void <init>(de.greenrobot.dao.AbstractDaoSession)>(r0);

        return $r1;
    }

    public void update(java.lang.Object)
    {
        de.greenrobot.dao.AbstractDao $r3;
        de.greenrobot.dao.AbstractDaoSession r0;
        java.lang.Object $r1;
        java.lang.Class $r2;

        r0 := @this: de.greenrobot.dao.AbstractDaoSession;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r0.<de.greenrobot.dao.AbstractDaoSession: de.greenrobot.dao.AbstractDao getDao(java.lang.Class)>($r2);

        virtualinvoke $r3.<de.greenrobot.dao.AbstractDao: void update(java.lang.Object)>($r1);

        return;
    }
}
