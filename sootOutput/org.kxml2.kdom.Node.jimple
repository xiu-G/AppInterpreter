public class org.kxml2.kdom.Node extends java.lang.Object
{
    public static final int CDSECT;
    public static final int COMMENT;
    public static final int DOCDECL;
    public static final int DOCUMENT;
    public static final int ELEMENT;
    public static final int ENTITY_REF;
    public static final int IGNORABLE_WHITESPACE;
    public static final int PROCESSING_INSTRUCTION;
    public static final int TEXT;
    protected java.util.Vector children;
    protected java.lang.StringBuffer types;

    public void <init>()
    {
        org.kxml2.kdom.Node r0;

        r0 := @this: org.kxml2.kdom.Node;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void addChild(int, int, java.lang.Object)
    {
        char $c2;
        java.lang.RuntimeException $r5;
        java.lang.NullPointerException $r2;
        org.kxml2.kdom.Element $r6;
        java.util.Vector $r3;
        java.lang.StringBuffer $r4;
        int $i0, $i1;
        java.lang.Object $r1;
        org.kxml2.kdom.Node r0;
        boolean $z0;

        r0 := @this: org.kxml2.kdom.Node;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: java.lang.Object;

        if $r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();

        throw $r2;

     label1:
        $r3 = r0.<org.kxml2.kdom.Node: java.util.Vector children>;

        if $r3 != null goto label2;

        $r3 = new java.util.Vector;

        specialinvoke $r3.<java.util.Vector: void <init>()>();

        r0.<org.kxml2.kdom.Node: java.util.Vector children> = $r3;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        r0.<org.kxml2.kdom.Node: java.lang.StringBuffer types> = $r4;

     label2:
        if $i1 != 2 goto label5;

        $z0 = $r1 instanceof org.kxml2.kdom.Element;

        if $z0 != 0 goto label3;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>("Element obj expected)");

        throw $r5;

     label3:
        $r6 = (org.kxml2.kdom.Element) $r1;

        virtualinvoke $r6.<org.kxml2.kdom.Element: void setParent(org.kxml2.kdom.Node)>(r0);

     label4:
        $r3 = r0.<org.kxml2.kdom.Node: java.util.Vector children>;

        virtualinvoke $r3.<java.util.Vector: void insertElementAt(java.lang.Object,int)>($r1, $i0);

        $r4 = r0.<org.kxml2.kdom.Node: java.lang.StringBuffer types>;

        $c2 = (char) $i1;

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char)>($i0, $c2);

        return;

     label5:
        $z0 = $r1 instanceof java.lang.String;

        if $z0 != 0 goto label4;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>("String expected");

        throw $r5;
    }

    public void addChild(int, java.lang.Object)
    {
        int $i0, $i1;
        java.lang.Object $r1;
        org.kxml2.kdom.Node r0;

        r0 := @this: org.kxml2.kdom.Node;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.Object;

        $i1 = virtualinvoke r0.<org.kxml2.kdom.Node: int getChildCount()>();

        virtualinvoke r0.<org.kxml2.kdom.Node: void addChild(int,int,java.lang.Object)>($i1, $i0, $r1);

        return;
    }

    public org.kxml2.kdom.Element createElement(java.lang.String, java.lang.String)
    {
        java.lang.String $r1, $r3;
        org.kxml2.kdom.Node r0;
        org.kxml2.kdom.Element r2;

        r0 := @this: org.kxml2.kdom.Node;

        $r3 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        r2 = new org.kxml2.kdom.Element;

        specialinvoke r2.<org.kxml2.kdom.Element: void <init>()>();

        if $r3 != null goto label1;

        $r3 = "";

     label1:
        r2.<org.kxml2.kdom.Element: java.lang.String namespace> = $r3;

        r2.<org.kxml2.kdom.Element: java.lang.String name> = $r1;

        return r2;
    }

    public java.lang.Object getChild(int)
    {
        java.util.Vector $r2;
        int $i0;
        java.lang.Object $r1;
        org.kxml2.kdom.Node r0;

        r0 := @this: org.kxml2.kdom.Node;

        $i0 := @parameter0: int;

        $r2 = r0.<org.kxml2.kdom.Node: java.util.Vector children>;

        $r1 = virtualinvoke $r2.<java.util.Vector: java.lang.Object elementAt(int)>($i0);

        return $r1;
    }

    public int getChildCount()
    {
        int $i0;
        java.util.Vector $r1;
        org.kxml2.kdom.Node r0;

        r0 := @this: org.kxml2.kdom.Node;

        $r1 = r0.<org.kxml2.kdom.Node: java.util.Vector children>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r1 = r0.<org.kxml2.kdom.Node: java.util.Vector children>;

        $i0 = virtualinvoke $r1.<java.util.Vector: int size()>();

        return $i0;
    }

    public org.kxml2.kdom.Element getElement(int)
    {
        int $i0;
        java.lang.Object $r1;
        org.kxml2.kdom.Node r0;
        org.kxml2.kdom.Element r2;
        boolean $z0;

        r0 := @this: org.kxml2.kdom.Node;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.kxml2.kdom.Node: java.lang.Object getChild(int)>($i0);

        $z0 = $r1 instanceof org.kxml2.kdom.Element;

        if $z0 == 0 goto label1;

        r2 = (org.kxml2.kdom.Element) $r1;

        return r2;

     label1:
        return null;
    }

    public org.kxml2.kdom.Element getElement(java.lang.String, java.lang.String)
    {
        java.lang.RuntimeException $r3, $r7;
        org.kxml2.kdom.Element $r5;
        int $i0, $i1, $i2;
        java.lang.StringBuilder $r4, $r6;
        java.lang.String $r1, $r2;
        org.kxml2.kdom.Node r0;

        r0 := @this: org.kxml2.kdom.Node;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r0.<org.kxml2.kdom.Node: int indexOf(java.lang.String,java.lang.String,int)>($r1, $r2, 0);

        $i1 = $i0 + 1;

        $i1 = virtualinvoke r0.<org.kxml2.kdom.Node: int indexOf(java.lang.String,java.lang.String,int)>($r1, $r2, $i1);

        $i2 = -1;

        if $i0 == $i2 goto label1;

        $i2 = -1;

        if $i1 == $i2 goto label4;

     label1:
        $r7 = new java.lang.RuntimeException;

        $r3 = $r7;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Element {");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $i1 = -1;

        if $i0 != $i1 goto label3;

        $r1 = " not found in ";

     label2:
        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>($r1);

        throw $r3;

     label3:
        $r1 = " more than once in ";

        goto label2;

     label4:
        $r5 = virtualinvoke r0.<org.kxml2.kdom.Node: org.kxml2.kdom.Element getElement(int)>($i0);

        return $r5;
    }

    public java.lang.String getText(int)
    {
        int $i0;
        java.lang.Object $r1;
        java.lang.String $r2;
        org.kxml2.kdom.Node r0;
        boolean $z0;

        r0 := @this: org.kxml2.kdom.Node;

        $i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<org.kxml2.kdom.Node: boolean isText(int)>($i0);

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<org.kxml2.kdom.Node: java.lang.Object getChild(int)>($i0);

        $r2 = (java.lang.String) $r1;

        return $r2;

     label1:
        return null;
    }

    public int getType(int)
    {
        java.lang.StringBuffer $r1;
        int $i0;
        char $c1;
        org.kxml2.kdom.Node r0;

        r0 := @this: org.kxml2.kdom.Node;

        $i0 := @parameter0: int;

        $r1 = r0.<org.kxml2.kdom.Node: java.lang.StringBuffer types>;

        $c1 = virtualinvoke $r1.<java.lang.StringBuffer: char charAt(int)>($i0);

        $i0 = (int) $c1;

        return $i0;
    }

    public int indexOf(java.lang.String, java.lang.String, int)
    {
        org.kxml2.kdom.Element $r3;
        int $i0, $i1;
        java.lang.String $r1, $r2, $r4;
        org.kxml2.kdom.Node r0;
        boolean $z0;

        r0 := @this: org.kxml2.kdom.Node;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $i1 = virtualinvoke r0.<org.kxml2.kdom.Node: int getChildCount()>();

     label1:
        if $i0 >= $i1 goto label3;

        $r3 = virtualinvoke r0.<org.kxml2.kdom.Node: org.kxml2.kdom.Element getElement(int)>($i0);

        if $r3 == null goto label2;

        $r4 = virtualinvoke $r3.<org.kxml2.kdom.Element: java.lang.String getName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        if $r1 == null goto label4;

        $r4 = virtualinvoke $r3.<org.kxml2.kdom.Element: java.lang.String getNamespace()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        return $i0;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        $i0 = -1;

     label4:
        return $i0;
    }

    public boolean isText(int)
    {
        int $i0;
        org.kxml2.kdom.Node r0;

        r0 := @this: org.kxml2.kdom.Node;

        $i0 := @parameter0: int;

        $i0 = virtualinvoke r0.<org.kxml2.kdom.Node: int getType(int)>($i0);

        if $i0 == 4 goto label1;

        if $i0 == 7 goto label1;

        if $i0 != 5 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public void parse(org.xmlpull.v1.XmlPullParser) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.kxml2.kdom.Element $r4;
        int $i0, i1;
        java.lang.String $r2, $r3;
        org.kxml2.kdom.Node r0;
        org.xmlpull.v1.XmlPullParser $r1;
        boolean z0;

        r0 := @this: org.kxml2.kdom.Node;

        $r1 := @parameter0: org.xmlpull.v1.XmlPullParser;

        z0 = 0;

     label1:
        $i0 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: int getEventType()>();

        i1 = $i0;

        lookupswitch($i0)
        {
            case 1: goto label7;
            case 2: goto label6;
            case 3: goto label7;
            default: goto label2;
        };

     label2:
        $r2 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getText()>();

        if $r2 == null goto label8;

        if $i0 != 6 goto label3;

        i1 = 4;

     label3:
        $r2 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getText()>();

        virtualinvoke r0.<org.kxml2.kdom.Node: void addChild(int,java.lang.Object)>(i1, $r2);

     label4:
        interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: int nextToken()>();

     label5:
        if z0 == 0 goto label1;

        return;

     label6:
        $r2 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getNamespace()>();

        $r3 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $r4 = virtualinvoke r0.<org.kxml2.kdom.Node: org.kxml2.kdom.Element createElement(java.lang.String,java.lang.String)>($r2, $r3);

        virtualinvoke r0.<org.kxml2.kdom.Node: void addChild(int,java.lang.Object)>(2, $r4);

        virtualinvoke $r4.<org.kxml2.kdom.Element: void parse(org.xmlpull.v1.XmlPullParser)>($r1);

        goto label5;

     label7:
        z0 = 1;

        goto label5;

     label8:
        if $i0 != 6 goto label4;

        $r2 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        if $r2 == null goto label4;

        $r2 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        virtualinvoke r0.<org.kxml2.kdom.Node: void addChild(int,java.lang.Object)>(6, $r2);

        goto label4;
    }

    public void removeChild(int)
    {
        char $c3;
        java.util.Vector $r1;
        java.lang.StringBuffer $r2, $r3;
        int $i0, i1, i2;
        org.kxml2.kdom.Node r0;

        r0 := @this: org.kxml2.kdom.Node;

        $i0 := @parameter0: int;

        $r1 = r0.<org.kxml2.kdom.Node: java.util.Vector children>;

        virtualinvoke $r1.<java.util.Vector: void removeElementAt(int)>($i0);

        $r2 = r0.<org.kxml2.kdom.Node: java.lang.StringBuffer types>;

        i1 = virtualinvoke $r2.<java.lang.StringBuffer: int length()>();

        i2 = -1;

        i1 = i1 + i2;

        i2 = $i0;

     label1:
        if i2 >= i1 goto label2;

        $r2 = r0.<org.kxml2.kdom.Node: java.lang.StringBuffer types>;

        $r3 = r0.<org.kxml2.kdom.Node: java.lang.StringBuffer types>;

        $i0 = i2 + 1;

        $c3 = virtualinvoke $r3.<java.lang.StringBuffer: char charAt(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuffer: void setCharAt(int,char)>(i2, $c3);

        i2 = i2 + 1;

        goto label1;

     label2:
        $r2 = r0.<org.kxml2.kdom.Node: java.lang.StringBuffer types>;

        virtualinvoke $r2.<java.lang.StringBuffer: void setLength(int)>(i1);

        return;
    }

    public void write(org.xmlpull.v1.XmlSerializer) throws java.io.IOException
    {
        org.kxml2.kdom.Node r0;
        org.xmlpull.v1.XmlSerializer $r1;

        r0 := @this: org.kxml2.kdom.Node;

        $r1 := @parameter0: org.xmlpull.v1.XmlSerializer;

        virtualinvoke r0.<org.kxml2.kdom.Node: void writeChildren(org.xmlpull.v1.XmlSerializer)>($r1);

        interfaceinvoke $r1.<org.xmlpull.v1.XmlSerializer: void flush()>();

        return;
    }

    public void writeChildren(org.xmlpull.v1.XmlSerializer) throws java.io.IOException
    {
        java.lang.RuntimeException $r4;
        org.xmlpull.v1.XmlSerializer $r1;
        org.kxml2.kdom.Element r7;
        java.util.Vector $r2;
        int $i0, i1, $i2;
        java.lang.Object $r3;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;
        org.kxml2.kdom.Node r0;

        r0 := @this: org.kxml2.kdom.Node;

        $r1 := @parameter0: org.xmlpull.v1.XmlSerializer;

        $r2 = r0.<org.kxml2.kdom.Node: java.util.Vector children>;

        if $r2 != null goto label01;

        return;

     label01:
        $r2 = r0.<org.kxml2.kdom.Node: java.util.Vector children>;

        $i0 = virtualinvoke $r2.<java.util.Vector: int size()>();

        i1 = 0;

     label02:
        if i1 >= $i0 goto label13;

        $i2 = virtualinvoke r0.<org.kxml2.kdom.Node: int getType(int)>(i1);

        $r2 = r0.<org.kxml2.kdom.Node: java.util.Vector children>;

        $r3 = virtualinvoke $r2.<java.util.Vector: java.lang.Object elementAt(int)>(i1);

        lookupswitch($i2)
        {
            case 2: goto label04;
            case 3: goto label03;
            case 4: goto label06;
            case 5: goto label08;
            case 6: goto label10;
            case 7: goto label07;
            case 8: goto label11;
            case 9: goto label09;
            case 10: goto label12;
            default: goto label03;
        };

     label03:
        $r4 = new java.lang.RuntimeException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal type: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>($r6);

        throw $r4;

     label04:
        r7 = (org.kxml2.kdom.Element) $r3;

        virtualinvoke r7.<org.kxml2.kdom.Element: void write(org.xmlpull.v1.XmlSerializer)>($r1);

     label05:
        i1 = i1 + 1;

        goto label02;

     label06:
        $r6 = (java.lang.String) $r3;

        interfaceinvoke $r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer text(java.lang.String)>($r6);

        goto label05;

     label07:
        $r6 = (java.lang.String) $r3;

        interfaceinvoke $r1.<org.xmlpull.v1.XmlSerializer: void ignorableWhitespace(java.lang.String)>($r6);

        goto label05;

     label08:
        $r6 = (java.lang.String) $r3;

        interfaceinvoke $r1.<org.xmlpull.v1.XmlSerializer: void cdsect(java.lang.String)>($r6);

        goto label05;

     label09:
        $r6 = (java.lang.String) $r3;

        interfaceinvoke $r1.<org.xmlpull.v1.XmlSerializer: void comment(java.lang.String)>($r6);

        goto label05;

     label10:
        $r6 = (java.lang.String) $r3;

        interfaceinvoke $r1.<org.xmlpull.v1.XmlSerializer: void entityRef(java.lang.String)>($r6);

        goto label05;

     label11:
        $r6 = (java.lang.String) $r3;

        interfaceinvoke $r1.<org.xmlpull.v1.XmlSerializer: void processingInstruction(java.lang.String)>($r6);

        goto label05;

     label12:
        $r6 = (java.lang.String) $r3;

        interfaceinvoke $r1.<org.xmlpull.v1.XmlSerializer: void docdecl(java.lang.String)>($r6);

        goto label05;

     label13:
        return;
    }

    public static void <clinit>()
    {
        <org.kxml2.kdom.Node: int TEXT> = 4;

        <org.kxml2.kdom.Node: int PROCESSING_INSTRUCTION> = 8;

        <org.kxml2.kdom.Node: int IGNORABLE_WHITESPACE> = 7;

        <org.kxml2.kdom.Node: int ENTITY_REF> = 6;

        <org.kxml2.kdom.Node: int ELEMENT> = 2;

        <org.kxml2.kdom.Node: int DOCUMENT> = 0;

        <org.kxml2.kdom.Node: int DOCDECL> = 10;

        <org.kxml2.kdom.Node: int COMMENT> = 9;

        <org.kxml2.kdom.Node: int CDSECT> = 5;

        return;
    }
}
