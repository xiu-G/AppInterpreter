public abstract class proguard.evaluation.value.DoubleValue extends proguard.evaluation.value.Category2Value
{

    public void <init>()
    {
        proguard.evaluation.value.DoubleValue r0;

        r0 := @this: proguard.evaluation.value.DoubleValue;

        specialinvoke r0.<proguard.evaluation.value.Category2Value: void <init>()>();

        return;
    }

    public abstract proguard.evaluation.value.DoubleValue add(proguard.evaluation.value.DoubleValue);

    public proguard.evaluation.value.DoubleValue add(proguard.evaluation.value.ParticularDoubleValue)
    {
        proguard.evaluation.value.DoubleValue r0;
        proguard.evaluation.value.ParticularDoubleValue $r1;

        r0 := @this: proguard.evaluation.value.DoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularDoubleValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.DoubleValue: proguard.evaluation.value.DoubleValue add(proguard.evaluation.value.SpecificDoubleValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.DoubleValue add(proguard.evaluation.value.SpecificDoubleValue)
    {
        proguard.evaluation.value.DoubleValue r0;
        proguard.evaluation.value.SpecificDoubleValue $r1;

        r0 := @this: proguard.evaluation.value.DoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificDoubleValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.DoubleValue: proguard.evaluation.value.DoubleValue add(proguard.evaluation.value.DoubleValue)>($r1);

        return r0;
    }

    public abstract proguard.evaluation.value.IntegerValue compare(proguard.evaluation.value.DoubleValue);

    public proguard.evaluation.value.IntegerValue compare(proguard.evaluation.value.ParticularDoubleValue)
    {
        proguard.evaluation.value.DoubleValue r0;
        proguard.evaluation.value.ParticularDoubleValue $r1;
        proguard.evaluation.value.IntegerValue $r2;

        r0 := @this: proguard.evaluation.value.DoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularDoubleValue;

        $r2 = virtualinvoke r0.<proguard.evaluation.value.DoubleValue: proguard.evaluation.value.IntegerValue compare(proguard.evaluation.value.SpecificDoubleValue)>($r1);

        return $r2;
    }

    public proguard.evaluation.value.IntegerValue compare(proguard.evaluation.value.SpecificDoubleValue)
    {
        proguard.evaluation.value.DoubleValue r0;
        proguard.evaluation.value.IntegerValue $r2;
        proguard.evaluation.value.SpecificDoubleValue $r1;

        r0 := @this: proguard.evaluation.value.DoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificDoubleValue;

        $r2 = virtualinvoke r0.<proguard.evaluation.value.DoubleValue: proguard.evaluation.value.IntegerValue compare(proguard.evaluation.value.DoubleValue)>($r1);

        return $r2;
    }

    public final proguard.evaluation.value.IntegerValue compareReverse(proguard.evaluation.value.DoubleValue)
    {
        proguard.evaluation.value.DoubleValue r0, $r1;
        proguard.evaluation.value.IntegerValue $r2;

        r0 := @this: proguard.evaluation.value.DoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.DoubleValue;

        $r2 = virtualinvoke r0.<proguard.evaluation.value.DoubleValue: proguard.evaluation.value.IntegerValue compare(proguard.evaluation.value.DoubleValue)>($r1);

        $r2 = virtualinvoke $r2.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue negate()>();

        return $r2;
    }

    public final proguard.evaluation.value.IntegerValue compareReverse(proguard.evaluation.value.ParticularDoubleValue)
    {
        proguard.evaluation.value.DoubleValue r0;
        proguard.evaluation.value.ParticularDoubleValue $r1;
        proguard.evaluation.value.IntegerValue $r2;

        r0 := @this: proguard.evaluation.value.DoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularDoubleValue;

        $r2 = virtualinvoke r0.<proguard.evaluation.value.DoubleValue: proguard.evaluation.value.IntegerValue compare(proguard.evaluation.value.ParticularDoubleValue)>($r1);

        $r2 = virtualinvoke $r2.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue negate()>();

        return $r2;
    }

    public final proguard.evaluation.value.IntegerValue compareReverse(proguard.evaluation.value.SpecificDoubleValue)
    {
        proguard.evaluation.value.DoubleValue r0;
        proguard.evaluation.value.IntegerValue $r2;
        proguard.evaluation.value.SpecificDoubleValue $r1;

        r0 := @this: proguard.evaluation.value.DoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificDoubleValue;

        $r2 = virtualinvoke r0.<proguard.evaluation.value.DoubleValue: proguard.evaluation.value.IntegerValue compare(proguard.evaluation.value.SpecificDoubleValue)>($r1);

        $r2 = virtualinvoke $r2.<proguard.evaluation.value.IntegerValue: proguard.evaluation.value.IntegerValue negate()>();

        return $r2;
    }

    public final int computationalType()
    {
        proguard.evaluation.value.DoubleValue r0;

        r0 := @this: proguard.evaluation.value.DoubleValue;

        return 4;
    }

    public abstract proguard.evaluation.value.FloatValue convertToFloat();

    public abstract proguard.evaluation.value.IntegerValue convertToInteger();

    public abstract proguard.evaluation.value.LongValue convertToLong();

    public abstract proguard.evaluation.value.DoubleValue divide(proguard.evaluation.value.DoubleValue);

    public proguard.evaluation.value.DoubleValue divide(proguard.evaluation.value.ParticularDoubleValue)
    {
        proguard.evaluation.value.DoubleValue r0;
        proguard.evaluation.value.ParticularDoubleValue $r1;

        r0 := @this: proguard.evaluation.value.DoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularDoubleValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.DoubleValue: proguard.evaluation.value.DoubleValue divide(proguard.evaluation.value.SpecificDoubleValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.DoubleValue divide(proguard.evaluation.value.SpecificDoubleValue)
    {
        proguard.evaluation.value.DoubleValue r0;
        proguard.evaluation.value.SpecificDoubleValue $r1;

        r0 := @this: proguard.evaluation.value.DoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificDoubleValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.DoubleValue: proguard.evaluation.value.DoubleValue divide(proguard.evaluation.value.DoubleValue)>($r1);

        return r0;
    }

    public abstract proguard.evaluation.value.DoubleValue divideOf(proguard.evaluation.value.DoubleValue);

    public proguard.evaluation.value.DoubleValue divideOf(proguard.evaluation.value.ParticularDoubleValue)
    {
        proguard.evaluation.value.DoubleValue r0;
        proguard.evaluation.value.ParticularDoubleValue $r1;

        r0 := @this: proguard.evaluation.value.DoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularDoubleValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.DoubleValue: proguard.evaluation.value.DoubleValue divideOf(proguard.evaluation.value.SpecificDoubleValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.DoubleValue divideOf(proguard.evaluation.value.SpecificDoubleValue)
    {
        proguard.evaluation.value.DoubleValue r0;
        proguard.evaluation.value.SpecificDoubleValue $r1;

        r0 := @this: proguard.evaluation.value.DoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificDoubleValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.DoubleValue: proguard.evaluation.value.DoubleValue divideOf(proguard.evaluation.value.DoubleValue)>($r1);

        return r0;
    }

    public final proguard.evaluation.value.DoubleValue doubleValue()
    {
        proguard.evaluation.value.DoubleValue r0;

        r0 := @this: proguard.evaluation.value.DoubleValue;

        return r0;
    }

    public abstract proguard.evaluation.value.DoubleValue generalize(proguard.evaluation.value.DoubleValue);

    public proguard.evaluation.value.DoubleValue generalize(proguard.evaluation.value.ParticularDoubleValue)
    {
        proguard.evaluation.value.DoubleValue r0;
        proguard.evaluation.value.ParticularDoubleValue $r1;

        r0 := @this: proguard.evaluation.value.DoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularDoubleValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.DoubleValue: proguard.evaluation.value.DoubleValue generalize(proguard.evaluation.value.SpecificDoubleValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.DoubleValue generalize(proguard.evaluation.value.SpecificDoubleValue)
    {
        proguard.evaluation.value.DoubleValue r0;
        proguard.evaluation.value.SpecificDoubleValue $r1;

        r0 := @this: proguard.evaluation.value.DoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificDoubleValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.DoubleValue: proguard.evaluation.value.DoubleValue generalize(proguard.evaluation.value.DoubleValue)>($r1);

        return r0;
    }

    public final proguard.evaluation.value.Value generalize(proguard.evaluation.value.Value)
    {
        proguard.evaluation.value.DoubleValue r0, $r2;
        proguard.evaluation.value.Value $r1;

        r0 := @this: proguard.evaluation.value.DoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.Value;

        $r2 = virtualinvoke $r1.<proguard.evaluation.value.Value: proguard.evaluation.value.DoubleValue doubleValue()>();

        r0 = virtualinvoke r0.<proguard.evaluation.value.DoubleValue: proguard.evaluation.value.DoubleValue generalize(proguard.evaluation.value.DoubleValue)>($r2);

        return r0;
    }

    public final java.lang.String internalType()
    {
        proguard.evaluation.value.DoubleValue r0;
        java.lang.String $r1;

        r0 := @this: proguard.evaluation.value.DoubleValue;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(68);

        return $r1;
    }

    public abstract proguard.evaluation.value.DoubleValue multiply(proguard.evaluation.value.DoubleValue);

    public proguard.evaluation.value.DoubleValue multiply(proguard.evaluation.value.ParticularDoubleValue)
    {
        proguard.evaluation.value.DoubleValue r0;
        proguard.evaluation.value.ParticularDoubleValue $r1;

        r0 := @this: proguard.evaluation.value.DoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularDoubleValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.DoubleValue: proguard.evaluation.value.DoubleValue multiply(proguard.evaluation.value.SpecificDoubleValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.DoubleValue multiply(proguard.evaluation.value.SpecificDoubleValue)
    {
        proguard.evaluation.value.DoubleValue r0;
        proguard.evaluation.value.SpecificDoubleValue $r1;

        r0 := @this: proguard.evaluation.value.DoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificDoubleValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.DoubleValue: proguard.evaluation.value.DoubleValue multiply(proguard.evaluation.value.DoubleValue)>($r1);

        return r0;
    }

    public abstract proguard.evaluation.value.DoubleValue negate();

    public proguard.evaluation.value.Value refresh()
    {
        proguard.evaluation.value.DoubleValue r0;

        r0 := @this: proguard.evaluation.value.DoubleValue;

        return r0;
    }

    public abstract proguard.evaluation.value.DoubleValue remainder(proguard.evaluation.value.DoubleValue);

    public proguard.evaluation.value.DoubleValue remainder(proguard.evaluation.value.ParticularDoubleValue)
    {
        proguard.evaluation.value.DoubleValue r0;
        proguard.evaluation.value.ParticularDoubleValue $r1;

        r0 := @this: proguard.evaluation.value.DoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularDoubleValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.DoubleValue: proguard.evaluation.value.DoubleValue remainder(proguard.evaluation.value.SpecificDoubleValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.DoubleValue remainder(proguard.evaluation.value.SpecificDoubleValue)
    {
        proguard.evaluation.value.DoubleValue r0;
        proguard.evaluation.value.SpecificDoubleValue $r1;

        r0 := @this: proguard.evaluation.value.DoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificDoubleValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.DoubleValue: proguard.evaluation.value.DoubleValue remainder(proguard.evaluation.value.DoubleValue)>($r1);

        return r0;
    }

    public abstract proguard.evaluation.value.DoubleValue remainderOf(proguard.evaluation.value.DoubleValue);

    public proguard.evaluation.value.DoubleValue remainderOf(proguard.evaluation.value.ParticularDoubleValue)
    {
        proguard.evaluation.value.DoubleValue r0;
        proguard.evaluation.value.ParticularDoubleValue $r1;

        r0 := @this: proguard.evaluation.value.DoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularDoubleValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.DoubleValue: proguard.evaluation.value.DoubleValue remainderOf(proguard.evaluation.value.SpecificDoubleValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.DoubleValue remainderOf(proguard.evaluation.value.SpecificDoubleValue)
    {
        proguard.evaluation.value.DoubleValue r0;
        proguard.evaluation.value.SpecificDoubleValue $r1;

        r0 := @this: proguard.evaluation.value.DoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificDoubleValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.DoubleValue: proguard.evaluation.value.DoubleValue remainderOf(proguard.evaluation.value.DoubleValue)>($r1);

        return r0;
    }

    public abstract proguard.evaluation.value.DoubleValue subtract(proguard.evaluation.value.DoubleValue);

    public proguard.evaluation.value.DoubleValue subtract(proguard.evaluation.value.ParticularDoubleValue)
    {
        proguard.evaluation.value.DoubleValue r0;
        proguard.evaluation.value.ParticularDoubleValue $r1;

        r0 := @this: proguard.evaluation.value.DoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularDoubleValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.DoubleValue: proguard.evaluation.value.DoubleValue subtract(proguard.evaluation.value.SpecificDoubleValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.DoubleValue subtract(proguard.evaluation.value.SpecificDoubleValue)
    {
        proguard.evaluation.value.DoubleValue r0;
        proguard.evaluation.value.SpecificDoubleValue $r1;

        r0 := @this: proguard.evaluation.value.DoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificDoubleValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.DoubleValue: proguard.evaluation.value.DoubleValue subtract(proguard.evaluation.value.DoubleValue)>($r1);

        return r0;
    }

    public abstract proguard.evaluation.value.DoubleValue subtractFrom(proguard.evaluation.value.DoubleValue);

    public proguard.evaluation.value.DoubleValue subtractFrom(proguard.evaluation.value.ParticularDoubleValue)
    {
        proguard.evaluation.value.DoubleValue r0;
        proguard.evaluation.value.ParticularDoubleValue $r1;

        r0 := @this: proguard.evaluation.value.DoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.ParticularDoubleValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.DoubleValue: proguard.evaluation.value.DoubleValue subtractFrom(proguard.evaluation.value.SpecificDoubleValue)>($r1);

        return r0;
    }

    public proguard.evaluation.value.DoubleValue subtractFrom(proguard.evaluation.value.SpecificDoubleValue)
    {
        proguard.evaluation.value.DoubleValue r0;
        proguard.evaluation.value.SpecificDoubleValue $r1;

        r0 := @this: proguard.evaluation.value.DoubleValue;

        $r1 := @parameter0: proguard.evaluation.value.SpecificDoubleValue;

        r0 = virtualinvoke r0.<proguard.evaluation.value.DoubleValue: proguard.evaluation.value.DoubleValue subtractFrom(proguard.evaluation.value.DoubleValue)>($r1);

        return r0;
    }

    public double value()
    {
        proguard.evaluation.value.DoubleValue r0;

        r0 := @this: proguard.evaluation.value.DoubleValue;

        return 0.0;
    }
}
