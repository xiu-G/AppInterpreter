class cn.ffcs.lib.bitmapfun.AsyncTask$SerialExecutor extends java.lang.Object implements java.util.concurrent.Executor
{
    java.lang.Runnable mActive;
    final java.util.ArrayDeque mTasks;

    private void <init>()
    {
        java.util.ArrayDeque $r1;
        cn.ffcs.lib.bitmapfun.AsyncTask$SerialExecutor r0;

        r0 := @this: cn.ffcs.lib.bitmapfun.AsyncTask$SerialExecutor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayDeque;

        specialinvoke $r1.<java.util.ArrayDeque: void <init>()>();

        r0.<cn.ffcs.lib.bitmapfun.AsyncTask$SerialExecutor: java.util.ArrayDeque mTasks> = $r1;

        return;
    }

    void <init>(cn.ffcs.lib.bitmapfun.AsyncTask$1)
    {
        cn.ffcs.lib.bitmapfun.AsyncTask$1 $r1;
        cn.ffcs.lib.bitmapfun.AsyncTask$SerialExecutor r0;

        r0 := @this: cn.ffcs.lib.bitmapfun.AsyncTask$SerialExecutor;

        $r1 := @parameter0: cn.ffcs.lib.bitmapfun.AsyncTask$1;

        specialinvoke r0.<cn.ffcs.lib.bitmapfun.AsyncTask$SerialExecutor: void <init>()>();

        return;
    }

    public void execute(java.lang.Runnable)
    {
        java.lang.Throwable $r4;
        cn.ffcs.lib.bitmapfun.AsyncTask$SerialExecutor$1 $r2;
        java.util.ArrayDeque $r3;
        java.lang.Runnable $r1;
        cn.ffcs.lib.bitmapfun.AsyncTask$SerialExecutor r0;

        r0 := @this: cn.ffcs.lib.bitmapfun.AsyncTask$SerialExecutor;

        $r1 := @parameter0: java.lang.Runnable;

        entermonitor r0;

     label1:
        $r3 = r0.<cn.ffcs.lib.bitmapfun.AsyncTask$SerialExecutor: java.util.ArrayDeque mTasks>;

        $r2 = new cn.ffcs.lib.bitmapfun.AsyncTask$SerialExecutor$1;

        specialinvoke $r2.<cn.ffcs.lib.bitmapfun.AsyncTask$SerialExecutor$1: void <init>(cn.ffcs.lib.bitmapfun.AsyncTask$SerialExecutor,java.lang.Runnable)>(r0, $r1);

        virtualinvoke $r3.<java.util.ArrayDeque: boolean offer(java.lang.Object)>($r2);

        $r1 = r0.<cn.ffcs.lib.bitmapfun.AsyncTask$SerialExecutor: java.lang.Runnable mActive>;

        if $r1 != null goto label2;

        virtualinvoke r0.<cn.ffcs.lib.bitmapfun.AsyncTask$SerialExecutor: void scheduleNext()>();

     label2:
        exitmonitor r0;

        return;

     label3:
        $r4 := @caughtexception;

        exitmonitor r0;

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    protected void scheduleNext()
    {
        java.lang.Throwable $r5;
        java.util.concurrent.Executor $r4;
        java.lang.Object $r2;
        java.util.ArrayDeque $r3;
        java.lang.Runnable $r1;
        cn.ffcs.lib.bitmapfun.AsyncTask$SerialExecutor r0;

        r0 := @this: cn.ffcs.lib.bitmapfun.AsyncTask$SerialExecutor;

        entermonitor r0;

     label1:
        $r3 = r0.<cn.ffcs.lib.bitmapfun.AsyncTask$SerialExecutor: java.util.ArrayDeque mTasks>;

        $r2 = virtualinvoke $r3.<java.util.ArrayDeque: java.lang.Object poll()>();

        $r1 = (java.lang.Runnable) $r2;

        r0.<cn.ffcs.lib.bitmapfun.AsyncTask$SerialExecutor: java.lang.Runnable mActive> = $r1;

        if $r1 == null goto label2;

        $r4 = <cn.ffcs.lib.bitmapfun.AsyncTask: java.util.concurrent.Executor THREAD_POOL_EXECUTOR>;

        $r1 = r0.<cn.ffcs.lib.bitmapfun.AsyncTask$SerialExecutor: java.lang.Runnable mActive>;

        interfaceinvoke $r4.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r1);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r5 := @caughtexception;

        exitmonitor r0;

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
