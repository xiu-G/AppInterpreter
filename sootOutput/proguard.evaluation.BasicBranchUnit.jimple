public class proguard.evaluation.BasicBranchUnit extends java.lang.Object implements proguard.evaluation.BranchUnit
{
    private proguard.evaluation.value.InstructionOffsetValue traceBranchTargets;
    private boolean wasCalled;

    public void <init>()
    {
        proguard.evaluation.BasicBranchUnit r0;

        r0 := @this: proguard.evaluation.BasicBranchUnit;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void branch(proguard.classfile.Clazz, proguard.classfile.attribute.CodeAttribute, int, int)
    {
        proguard.evaluation.BasicBranchUnit r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r2;
        proguard.evaluation.value.InstructionOffsetValue $r3;
        int $i0, $i1;

        r0 := @this: proguard.evaluation.BasicBranchUnit;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $r3 = new proguard.evaluation.value.InstructionOffsetValue;

        specialinvoke $r3.<proguard.evaluation.value.InstructionOffsetValue: void <init>(int)>($i1);

        r0.<proguard.evaluation.BasicBranchUnit: proguard.evaluation.value.InstructionOffsetValue traceBranchTargets> = $r3;

        r0.<proguard.evaluation.BasicBranchUnit: boolean wasCalled> = 1;

        return;
    }

    public void branchConditionally(proguard.classfile.Clazz, proguard.classfile.attribute.CodeAttribute, int, int, int)
    {
        proguard.evaluation.BasicBranchUnit r0;
        proguard.classfile.Clazz $r1;
        proguard.classfile.attribute.CodeAttribute $r2;
        proguard.evaluation.value.InstructionOffsetValue $r3, $r4;
        int $i0, $i1, $i2;
        proguard.evaluation.value.Value $r5;

        r0 := @this: proguard.evaluation.BasicBranchUnit;

        $r1 := @parameter0: proguard.classfile.Clazz;

        $r2 := @parameter1: proguard.classfile.attribute.CodeAttribute;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        $r4 = r0.<proguard.evaluation.BasicBranchUnit: proguard.evaluation.value.InstructionOffsetValue traceBranchTargets>;

        $r3 = new proguard.evaluation.value.InstructionOffsetValue;

        specialinvoke $r3.<proguard.evaluation.value.InstructionOffsetValue: void <init>(int)>($i1);

        $r5 = virtualinvoke $r4.<proguard.evaluation.value.InstructionOffsetValue: proguard.evaluation.value.Value generalize(proguard.evaluation.value.InstructionOffsetValue)>($r3);

        $r3 = virtualinvoke $r5.<proguard.evaluation.value.Value: proguard.evaluation.value.InstructionOffsetValue instructionOffsetValue()>();

        r0.<proguard.evaluation.BasicBranchUnit: proguard.evaluation.value.InstructionOffsetValue traceBranchTargets> = $r3;

        r0.<proguard.evaluation.BasicBranchUnit: boolean wasCalled> = 1;

        return;
    }

    public proguard.evaluation.value.InstructionOffsetValue getTraceBranchTargets()
    {
        proguard.evaluation.BasicBranchUnit r0;
        proguard.evaluation.value.InstructionOffsetValue r1;

        r0 := @this: proguard.evaluation.BasicBranchUnit;

        r1 = r0.<proguard.evaluation.BasicBranchUnit: proguard.evaluation.value.InstructionOffsetValue traceBranchTargets>;

        return r1;
    }

    public void resetCalled()
    {
        proguard.evaluation.BasicBranchUnit r0;

        r0 := @this: proguard.evaluation.BasicBranchUnit;

        r0.<proguard.evaluation.BasicBranchUnit: boolean wasCalled> = 0;

        return;
    }

    public void returnFromMethod()
    {
        proguard.evaluation.BasicBranchUnit r0;
        proguard.evaluation.value.InstructionOffsetValue $r1;

        r0 := @this: proguard.evaluation.BasicBranchUnit;

        $r1 = <proguard.evaluation.value.InstructionOffsetValue: proguard.evaluation.value.InstructionOffsetValue EMPTY_VALUE>;

        r0.<proguard.evaluation.BasicBranchUnit: proguard.evaluation.value.InstructionOffsetValue traceBranchTargets> = $r1;

        r0.<proguard.evaluation.BasicBranchUnit: boolean wasCalled> = 1;

        return;
    }

    protected void setCalled()
    {
        proguard.evaluation.BasicBranchUnit r0;

        r0 := @this: proguard.evaluation.BasicBranchUnit;

        r0.<proguard.evaluation.BasicBranchUnit: boolean wasCalled> = 1;

        return;
    }

    public void setTraceBranchTargets(proguard.evaluation.value.InstructionOffsetValue)
    {
        proguard.evaluation.BasicBranchUnit r0;
        proguard.evaluation.value.InstructionOffsetValue $r1;

        r0 := @this: proguard.evaluation.BasicBranchUnit;

        $r1 := @parameter0: proguard.evaluation.value.InstructionOffsetValue;

        r0.<proguard.evaluation.BasicBranchUnit: proguard.evaluation.value.InstructionOffsetValue traceBranchTargets> = $r1;

        return;
    }

    public void throwException()
    {
        proguard.evaluation.BasicBranchUnit r0;
        proguard.evaluation.value.InstructionOffsetValue $r1;

        r0 := @this: proguard.evaluation.BasicBranchUnit;

        $r1 = <proguard.evaluation.value.InstructionOffsetValue: proguard.evaluation.value.InstructionOffsetValue EMPTY_VALUE>;

        r0.<proguard.evaluation.BasicBranchUnit: proguard.evaluation.value.InstructionOffsetValue traceBranchTargets> = $r1;

        r0.<proguard.evaluation.BasicBranchUnit: boolean wasCalled> = 1;

        return;
    }

    public boolean wasCalled()
    {
        proguard.evaluation.BasicBranchUnit r0;
        boolean z0;

        r0 := @this: proguard.evaluation.BasicBranchUnit;

        z0 = r0.<proguard.evaluation.BasicBranchUnit: boolean wasCalled>;

        return z0;
    }
}
