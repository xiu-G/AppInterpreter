----------------------------
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>    	['script']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: boolean isConnected()>    	['network', 'connect']
<android.webkit.WebView: void loadUrl(java.lang.String)>    	['url']
----------------------------
<android.app.Activity: void onPause()>    	['pause']
<java.util.Timer: void cancel()>    	['timer']
<java.util.Timer: int purge()>    	['timer']
----------------------------
----------------------------
<java.util.Locale: java.lang.String getLanguage()>    	['language']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<java.util.Locale: java.lang.String getLanguage()>    	['language']
<java.util.Locale: java.lang.String getCountry()>    	['country']
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>    	['script']
----------------------------
<java.util.Timer: void cancel()>    	['timer']
<java.util.Timer: int purge()>    	['timer']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.RadioGroup: void setOnCheckedChangeListener(android.widget.RadioGroup$OnCheckedChangeListener)>    	['radio']
<android.widget.RadioGroup: void check(int)>    	['radio']
----------------------------
----------------------------
<android.app.Activity: void onRestoreInstanceState(android.os.Bundle)>    	['restore']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.speech.tts.TextToSpeech: int isLanguageAvailable(java.util.Locale)>    	['speech', 'language']
<android.speech.tts.TextToSpeech: int setLanguage(java.util.Locale)>    	['speech', 'language']
----------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: boolean isConnected()>    	['network', 'connect']
----------------------------
<java.util.Timer: void <init>(boolean)>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: void setRequestProperty(java.lang.String,java.lang.String)>    	['url']
<java.net.URLConnection: void setConnectTimeout(int)>    	['url', 'connect']
<java.net.URLConnection: void setReadTimeout(int)>    	['url']
<java.net.URLConnection: java.io.InputStream getInputStream()>    	['url']
<java.io.FileOutputStream: void close()>    	['file']
<java.util.Locale: java.lang.String getCountry()>    	['country']
<java.io.FileInputStream: void close()>    	['file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>    	['url']
----------------------------
----------------------------
<java.util.Timer: void cancel()>    	['timer']
<java.util.Timer: int purge()>    	['timer']
----------------------------
<android.widget.TabHost: int getCurrentTab()>    	['host']
<java.util.Timer: void cancel()>    	['timer']
<java.util.Timer: int purge()>    	['timer']
<java.util.Timer: void <init>(boolean)>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<java.util.Timer: void <init>(boolean)>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
----------------------------
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>    	['host']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence,android.graphics.drawable.Drawable)>    	['host', 'indicator']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(int)>    	['host']
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>    	['host']
<android.widget.TabHost: void setCurrentTab(int)>    	['host']
<android.widget.TabHost: void setOnTabChangedListener(android.widget.TabHost$OnTabChangeListener)>    	['host']
----------------------------
----------------------------
<android.app.TabActivity: void onRestoreInstanceState(android.os.Bundle)>    	['restore']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.speech.tts.TextToSpeech: void <init>(android.content.Context,android.speech.tts.TextToSpeech$OnInitListener)>    	['speech']
<android.speech.tts.TextToSpeech: int isLanguageAvailable(java.util.Locale)>    	['speech', 'language']
<android.speech.tts.TextToSpeech: int setLanguage(java.util.Locale)>    	['speech', 'language']
----------------------------
----------------------------
<java.util.Timer: void cancel()>    	['timer']
<java.util.Timer: int purge()>    	['timer']
<android.app.TabActivity: void onPause()>    	['pause']
----------------------------
----------------------------
<android.speech.tts.TextToSpeech: void shutdown()>    	['speech']
----------------------------
----------------------------
<android.speech.tts.TextToSpeech: void shutdown()>    	['speech']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.TabHost: int getCurrentTab()>    	['host']
<java.util.Timer: void cancel()>    	['timer']
<java.util.Timer: int purge()>    	['timer']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.TabHost: int getCurrentTab()>    	['host']
<java.util.Timer: void cancel()>    	['timer']
<java.util.Timer: int purge()>    	['timer']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.content.Context: java.io.File getFilesDir()>    	['file']
<android.content.Context: boolean deleteFile(java.lang.String)>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.lang.String toString()>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setInstanceFollowRedirects(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void connect()>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.lang.String getResponseMessage()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.io.FileOutputStream: void close()>    	['file']
<java.net.HttpURLConnection: void disconnect()>    	['http', 'url', 'disconnect']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.media.MediaPlayer: void reset()>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.speech.tts.TextToSpeech: boolean isSpeaking()>    	['speech']
<android.speech.tts.TextToSpeech: int speak(java.lang.String,int,java.util.HashMap)>    	['speech']
