<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	app:['script']	app['script']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnected()>	app:['network', 'connect']	app['network', 'connect']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	rcdetail.xml:['pause']	app['pause']	ui-unmatch
<java.util.Timer: void cancel()>	rcdetail.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: int purge()>	rcdetail.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<java.util.Locale: java.lang.String getLanguage()>	app:['language']	app['language']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	app:['permission']	app['permission']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	app:['language']	app['language']	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	app:['country']	app['country']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	app:['script']	app['script']	ui-unmatch
--------------------------------
<java.util.Timer: void cancel()>	rcdetail.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: int purge()>	rcdetail.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.widget.RadioGroup: void setOnCheckedChangeListener(android.widget.RadioGroup$OnCheckedChangeListener)>	rsspreferences.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioGroup: void check(int)>	rsspreferences.xml:['radio']	app['radio']	ui-unmatch
--------------------------------
<android.app.Activity: void onRestoreInstanceState(android.os.Bundle)>	lcpost.xml:['restore']	app['restore']	ui-unmatch
--------------------------------
<android.speech.tts.TextToSpeech: int isLanguageAvailable(java.util.Locale)>	app:['speech', 'language']	app['speech', 'language']	ui-unmatch
<android.speech.tts.TextToSpeech: int setLanguage(java.util.Locale)>	app:['speech', 'language']	app['speech', 'language']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	tab_content.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnected()>	tab_content.xml:['network', 'connect']	app['network', 'connect']	ui-unmatch
--------------------------------
<java.util.Timer: void <init>(boolean)>	rcdetail.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	rcdetail.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	rcdetail.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	rcdetail.xml:['calendar']	app['calendar']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.URLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URLConnection: void setConnectTimeout(int)>	app:['url', 'connect']	app['url', 'connect']	ui-unmatch
<java.net.URLConnection: void setReadTimeout(int)>	app:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.io.InputStream getInputStream()>	app:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void close()>	tab_content.xml:['file']	app['file']	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	tab_content.xml:['country']	app['country']	ui-unmatch
<java.io.FileInputStream: void close()>	tab_content.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	tab_content.xml:['url']	app['url']	ui-unmatch
--------------------------------
<java.util.Timer: void cancel()>	app:['timer']	app['timer']	ui-unmatch
<java.util.Timer: int purge()>	app:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.widget.TabHost: int getCurrentTab()>	tab_content.xml:['host']	app['host']	ui-unmatch
<java.util.Timer: void cancel()>	tab_content.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: int purge()>	tab_content.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>(boolean)>	tab_content.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	tab_content.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	tab_content.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	tab_content.xml:['calendar']	app['calendar']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	tab_content.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	tab_content.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<java.util.Timer: void <init>(boolean)>	tab_content.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	tab_content.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>	tab_content.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence,android.graphics.drawable.Drawable)>	tab_content.xml:['host', 'indicator']	app['host', 'indicator']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(int)>	tab_content.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>	tab_content.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void setCurrentTab(int)>	tab_content.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void setOnTabChangedListener(android.widget.TabHost$OnTabChangeListener)>	tab_content.xml:['host']	app['host']	ui-unmatch
--------------------------------
<android.app.TabActivity: void onRestoreInstanceState(android.os.Bundle)>	tab_content.xml:['restore']	app['restore']	ui-unmatch
--------------------------------
<android.speech.tts.TextToSpeech: void <init>(android.content.Context,android.speech.tts.TextToSpeech$OnInitListener)>	tab_content.xml:['speech']	app['speech']	ui-unmatch
<android.speech.tts.TextToSpeech: int isLanguageAvailable(java.util.Locale)>	tab_content.xml:['speech', 'language']	app['speech', 'language']	ui-unmatch
<android.speech.tts.TextToSpeech: int setLanguage(java.util.Locale)>	tab_content.xml:['speech', 'language']	app['speech', 'language']	ui-unmatch
--------------------------------
<java.util.Timer: void cancel()>	tab_content.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: int purge()>	tab_content.xml:['timer']	app['timer']	ui-unmatch
<android.app.TabActivity: void onPause()>	tab_content.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.speech.tts.TextToSpeech: void shutdown()>	tab_content.xml:['speech']	app['speech']	ui-unmatch
--------------------------------
<android.speech.tts.TextToSpeech: void shutdown()>	tab_content.xml:['speech']	app['speech']	ui-unmatch
--------------------------------
<android.widget.TabHost: int getCurrentTab()>	app:['host']	app['host']	ui-unmatch
<java.util.Timer: void cancel()>	app:['timer']	app['timer']	ui-unmatch
<java.util.Timer: int purge()>	app:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.widget.TabHost: int getCurrentTab()>	app:['host']	app['host']	ui-unmatch
<java.util.Timer: void cancel()>	app:['timer']	app['timer']	ui-unmatch
<java.util.Timer: int purge()>	app:['timer']	app['timer']	ui-unmatch
--------------------------------
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	lcpost.xml:['url']	app['url']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	app:['file']	app['file']	ui-unmatch
<android.content.Context: boolean deleteFile(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.lang.String toString()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setInstanceFollowRedirects(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	app:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.lang.String getResponseMessage()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.FileOutputStream: void close()>	app:['file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	app:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	app:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void reset()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	app:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.speech.tts.TextToSpeech: boolean isSpeaking()>	app:['speech']	app['speech']	ui-unmatch
<android.speech.tts.TextToSpeech: int speak(java.lang.String,int,java.util.HashMap)>	app:['speech']	app['speech']	ui-unmatch
--------------------------------
