----------------------------
----------------------------
----------------------------
----------------------------
<android.telephony.PhoneNumberUtils: java.lang.String formatNumber(java.lang.String)>    	['phone']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.hardware.Camera: void setOneShotPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri)>    	['ring', 'ring']
<android.media.Ringtone: java.lang.String getTitle(android.content.Context)>    	['ring']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.webkit.WebView: android.webkit.WebBackForwardList restoreState(android.os.Bundle)>    	['restore']
<android.webkit.WebView: void loadUrl(java.lang.String)>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>    	['location']
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>    	['location', 'location']
<android.location.LocationManager: boolean addGpsStatusListener(android.location.GpsStatus$Listener)>    	['location', 'gps']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.hardware.Camera: void release()>    	['camera']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>    	['location', 'location']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: long getLastModified()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.RingtoneManager: boolean isDefault(android.net.Uri)>    	['ring']
<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri)>    	['ring', 'ring']
<android.media.Ringtone: java.lang.String getTitle(android.content.Context)>    	['ring']
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<android.accounts.Account: void <init>(java.lang.String,java.lang.String)>    	['account']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>    	['power']
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.PowerManager$WakeLock: void acquire()>    	['power']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<android.os.PowerManager$WakeLock: void release()>    	['power']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.File: boolean canRead()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<java.io.File: long lastModified()>    	['file']
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(java.lang.CharSequence[],int,android.content.DialogInterface$OnClickListener)>    	['choice']
<android.os.PowerManager$WakeLock: void acquire()>    	['power']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.os.PowerManager$WakeLock: void release()>    	['power']
<java.util.Locale: java.lang.String getLanguage()>    	['language']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: void <init>(java.lang.String,java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String[] list()>    	['file']
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<android.net.Uri: android.net.Uri fromFile(java.io.File)>    	['file']
<java.io.File: void <init>(java.lang.String,java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
----------------------------
----------------------------
----------------------------
<android.location.GpsStatus: int getMaxSatellites()>    	['gps']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Geocoder: java.util.List getFromLocation(double,double,int)>    	['location']
<android.location.Address: int getMaxAddressLineIndex()>    	['address', 'address']
<android.location.Address: java.lang.String getThoroughfare()>    	['address']
<android.location.Address: java.lang.String getFeatureName()>    	['address']
<android.location.Location: double getAltitude()>    	['location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<android.location.LocationManager: void removeGpsStatusListener(android.location.GpsStatus$Listener)>    	['location', 'gps']
<android.location.Address: java.lang.String getAddressLine(int)>    	['address', 'address']
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: java.io.File getParentFile()>    	['file', 'file']
<java.io.File: java.lang.String getName()>    	['file']
<java.io.File: java.lang.String[] list()>    	['file']
----------------------------
----------------------------
<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>    	['power']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
----------------------------
<android.app.Activity: void setVolumeControlStream(int)>    	['volume']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>    	['file', 'file']
<android.content.res.AssetFileDescriptor: long getStartOffset()>    	['file']
<android.content.res.AssetFileDescriptor: long getLength()>    	['file']
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>    	['medium', 'player']
<android.content.res.AssetFileDescriptor: void close()>    	['file']
<android.media.MediaPlayer: void setVolume(float,float)>    	['medium', 'player', 'volume']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.location.Geocoder: java.util.List getFromLocation(double,double,int)>    	['location']
<android.location.Address: int getMaxAddressLineIndex()>    	['address', 'address']
<android.location.Address: java.lang.String getThoroughfare()>    	['address']
<android.location.Address: java.lang.String getFeatureName()>    	['address']
<android.location.Address: java.lang.String getAddressLine(int)>    	['address', 'address']
<android.media.MediaPlayer: void setLooping(boolean)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>    	['shortcut']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
----------------------------
----------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
----------------------------
----------------------------
----------------------------
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<android.location.LocationManager: void removeGpsStatusListener(android.location.GpsStatus$Listener)>    	['location', 'gps']
<android.os.PowerManager$WakeLock: void release()>    	['power']
<android.os.PowerManager$WakeLock: void release()>    	['power']
----------------------------
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>    	['location']
----------------------------
----------------------------
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>    	['location', 'location']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
----------------------------
<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>    	['power']
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void seekTo(int)>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.hardware.Camera: void setOneShotPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri)>    	['ring', 'ring']
<android.media.Ringtone: java.lang.String getTitle(android.content.Context)>    	['ring']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.hardware.Camera: void setOneShotPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri)>    	['ring', 'ring']
<android.media.Ringtone: java.lang.String getTitle(android.content.Context)>    	['ring']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: long lastModified()>    	['file']
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: void setConnectTimeout(int)>    	['url', 'connect']
<java.net.URLConnection: void setDefaultUseCaches(boolean)>    	['url']
<java.net.URLConnection: void connect()>    	['url', 'connect']
<java.net.URL: java.lang.String toString()>    	['url']
<java.net.URLConnection: java.io.InputStream getInputStream()>    	['url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: java.io.File getParentFile()>    	['file', 'file']
<java.io.File: boolean mkdirs()>    	['file']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.io.File: long length()>    	['file']
<java.net.UnknownHostException: void printStackTrace()>    	['host']
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
----------------------------
----------------------------
<android.telephony.gsm.SmsMessage: android.telephony.gsm.SmsMessage createFromPdu(byte[])>    	['sms']
<android.telephony.gsm.SmsMessage: byte[] getUserData()>    	['sms']
<android.telephony.gsm.SmsMessage: java.lang.String getOriginatingAddress()>    	['sms', 'address']
<android.telephony.gsm.SmsManager: android.telephony.gsm.SmsManager getDefault()>    	['sms']
<android.telephony.gsm.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>    	['location']
<java.util.Timer: void <init>()>    	['timer']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<android.net.Uri: android.net.Uri fromFile(java.io.File)>    	['file']
----------------------------
<java.io.File: boolean exists()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: boolean exists()>    	['file']
<java.io.File: long lastModified()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.FileNotFoundException: java.lang.String getMessage()>    	['file']
<java.io.File: long lastModified()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: void <init>(java.lang.String,java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String[] list()>    	['file']
----------------------------
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.lang.String getFile()>    	['url', 'file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: void <init>(java.io.File,java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
----------------------------
<android.media.RingtoneManager: boolean isDefault(android.net.Uri)>    	['ring']
----------------------------
----------------------------
----------------------------
<java.util.Locale: java.lang.String getLanguage()>    	['language']
----------------------------
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Geocoder: java.util.List getFromLocation(double,double,int)>    	['location']
<android.location.Address: int getMaxAddressLineIndex()>    	['address', 'address']
<android.location.Address: java.lang.String getThoroughfare()>    	['address']
<android.location.Address: java.lang.String getFeatureName()>    	['address']
<android.location.Location: double getAltitude()>    	['location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<java.util.Timer: void cancel()>    	['timer']
<android.location.Address: java.lang.String getAddressLine(int)>    	['address', 'address']
----------------------------
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<android.os.PowerManager$WakeLock: void release()>    	['power']
<android.text.ClipboardManager: void setText(java.lang.CharSequence)>    	['clipboard']
----------------------------
----------------------------
----------------------------
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMultiChoiceItems(java.lang.CharSequence[],boolean[],android.content.DialogInterface$OnMultiChoiceClickListener)>    	['choice']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(int,int,android.content.DialogInterface$OnClickListener)>    	['choice']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: java.io.File getParentFile()>    	['file', 'file']
<java.io.File: java.lang.String[] list()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<java.io.File: void <init>(java.lang.String,java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setReadTimeout(int)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoInput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setUseCaches(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>    	['http', 'url']
<java.io.File: java.lang.String getName()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
----------------------------
<android.location.LocationManager: android.location.GpsStatus getGpsStatus(android.location.GpsStatus)>    	['location', 'gps']
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<android.net.Uri: android.net.Uri fromFile(java.io.File)>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: void <init>(java.lang.String,java.lang.String)>    	['file']
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: long lastModified()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.FileNotFoundException: java.lang.String getMessage()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.telephony.gsm.SmsManager: android.telephony.gsm.SmsManager getDefault()>    	['sms']
<android.telephony.gsm.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: long getTime()>    	['location']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTimeInMillis(long)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void seekTo(int)>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>    	['power']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
----------------------------
----------------------------
<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>    	['power']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: int getPreviewFormat()>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,int)>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,int)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera: void startPreview()>    	['camera']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.hardware.Camera: void setOneShotPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri)>    	['ring', 'ring']
<android.media.Ringtone: java.lang.String getTitle(android.content.Context)>    	['ring']
----------------------------
<android.net.wifi.WifiManager: boolean disconnect()>    	['disconnect']
<android.net.wifi.WifiManager: boolean removeNetwork(int)>    	['network']
<android.net.wifi.WifiManager: java.util.List getConfiguredNetworks()>    	['network']
<android.net.wifi.WifiManager: boolean disconnect()>    	['disconnect']
<android.net.wifi.WifiManager: int addNetwork(android.net.wifi.WifiConfiguration)>    	['network']
<android.net.wifi.WifiManager: boolean removeNetwork(int)>    	['network']
<android.net.wifi.WifiManager: boolean enableNetwork(int,boolean)>    	['network']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
----------------------------
----------------------------
----------------------------
<android.accounts.AccountManager: android.accounts.AccountManager get(android.content.Context)>    	['account']
<android.accounts.AccountManager: android.accounts.Account[] getAccounts()>    	['account', 'account']
<android.provider.Contacts$People: android.net.Uri createPersonInMyContactsGroup(android.content.ContentResolver,android.content.ContentValues)>    	['contact', 'contact']
<android.provider.Contacts$Settings: java.lang.String getSetting(android.content.ContentResolver,java.lang.String,java.lang.String)>    	['contact']
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,long)>    	['contact']
<android.provider.Contacts$People: void setPhotoData(android.content.ContentResolver,android.net.Uri,byte[])>    	['contact', 'photo']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.lang.String getFile()>    	['url', 'file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: void <init>(java.io.File,java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: boolean exists()>    	['file']
----------------------------
----------------------------
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
----------------------------
----------------------------
----------------------------
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
----------------------------
----------------------------
<android.os.PowerManager$WakeLock: boolean isHeld()>    	['power']
<android.os.PowerManager$WakeLock: void release()>    	['power']
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
----------------------------
----------------------------
----------------------------
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: void <init>(java.io.File,java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.text.ClipboardManager: boolean hasText()>    	['clipboard']
----------------------------
----------------------------
----------------------------
<android.telephony.PhoneNumberUtils: java.lang.String formatNumber(java.lang.String)>    	['phone']
<android.telephony.PhoneNumberUtils: java.lang.String formatNumber(java.lang.String)>    	['phone']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.telephony.gsm.SmsMessage: java.lang.String getOriginatingAddress()>    	['sms', 'address']
<android.telephony.gsm.SmsMessage: android.telephony.gsm.SmsMessage createFromPdu(byte[])>    	['sms']
<android.telephony.gsm.SmsMessage: java.lang.String getMessageBody()>    	['sms']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: long getTime()>    	['location']
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<java.util.Timer: void cancel()>    	['timer']
----------------------------
----------------------------
----------------------------
----------------------------
<android.net.NetworkInfo: android.net.NetworkInfo$DetailedState getDetailedState()>    	['network']
<android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>    	['power']
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
