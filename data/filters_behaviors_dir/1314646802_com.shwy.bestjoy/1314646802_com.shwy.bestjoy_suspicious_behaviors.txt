<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app:[]	app[]
<android.hardware.Camera: void setOneShotPreviewCallback(android.hardware.Camera$PreviewCallback)>	app:[]	app[]
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app:[]	app[]
<android.media.MediaPlayer: void start()>	capture.xml:['medium', 'player']	app['player']	ui-unmatch
<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri)>	group_edit.xml:[]	app[]
<android.media.Ringtone: java.lang.String getTitle(android.content.Context)>	group_edit.xml:[]	app[]
--------------------------------
<android.webkit.WebView: android.webkit.WebBackForwardList restoreState(android.os.Bundle)>	help.xml:['restore']	app['restore']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	help.xml:['url']	app['url']	ui-unmatch
--------------------------------
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	app:[]	app[]
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	app:[]	app[]
<android.location.LocationManager: boolean addGpsStatusListener(android.location.GpsStatus$Listener)>	app:[]	app[]
<java.util.TimerTask: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	app:['timer']	app['timer']	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	app:[]	app[]
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	app:[]	app[]
--------------------------------
<android.app.Activity: void onPause()>	open_gps.xml:['pause']	app['pause']	ui-unmatch
<android.media.MediaPlayer: void stop()>	open_gps.xml:['medium', 'player']	app['player']	ui-unmatch
--------------------------------
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	product_verify_pad.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	capture.xml:['pause']	app['pause']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	capture.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void stopPreview()>	capture.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void release()>	capture.xml:['camera']	app[]	ui-unmatch
--------------------------------
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	app:[]	app[]
<java.util.TimerTask: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	app:['timer']	app['timer']	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	app:[]	app[]
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	app:[]	app[]
--------------------------------
<android.app.Activity: void onPause()>	group_view.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	network.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	input_view_pad.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.URLConnection: long getLastModified()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<android.accounts.Account: void <init>(java.lang.String,java.lang.String)>	app:['account']	app['account']	ui-unmatch
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean mkdirs()>	app:[]	app[]
<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>	app:['power']	app['power']	ui-unmatch
--------------------------------
<android.os.PowerManager$WakeLock: void acquire()>	app:['power']	app['power']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app:[]	app[]
<android.os.PowerManager$WakeLock: void release()>	app:['power']	app['power']	ui-unmatch
<java.io.File: boolean isDirectory()>	app:['directory']	app['directory']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	app:[]	app[]
<java.io.File: boolean canRead()>	app:[]	app[]
<java.io.File: java.lang.String getName()>	app:[]	app[]
<java.io.File: long lastModified()>	app:[]	app[]
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(java.lang.CharSequence[],int,android.content.DialogInterface$OnClickListener)>	app:['choice']	app['choice']	ui-unmatch
<android.os.PowerManager$WakeLock: void acquire()>	app:['power']	app['power']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	app:[]	app[]
<java.io.FileInputStream: void close()>	app:[]	app[]
<android.os.PowerManager$WakeLock: void release()>	app:['power']	app['power']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	app:['language']	app['language']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	photo_show.xml:['file']	app[]	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	photo_show.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	photo_show.xml:['file']	app[]	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	photo_show.xml:['file', 'file']	app[]	ui-unmatch
<java.io.File: boolean delete()>	photo_show.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.location.GpsStatus: int getMaxSatellites()>	app:[]	app[]
<android.location.Location: double getLatitude()>	app:['latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app:['longitude']	app['longitude']	ui-unmatch
<android.location.Geocoder: java.util.List getFromLocation(double,double,int)>	app:[]	app[]
<android.location.Address: int getMaxAddressLineIndex()>	app:['address', 'address']	app['address', 'address']	ui-unmatch
<android.location.Address: java.lang.String getThoroughfare()>	app:['address']	app['address']	ui-unmatch
<android.location.Address: java.lang.String getFeatureName()>	app:['address']	app['address']	ui-unmatch
<android.location.Location: double getAltitude()>	app:[]	app[]
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	app:[]	app[]
<android.location.LocationManager: void removeGpsStatusListener(android.location.GpsStatus$Listener)>	app:[]	app[]
<android.location.Address: java.lang.String getAddressLine(int)>	app:['address', 'address']	app['address', 'address']	ui-unmatch
--------------------------------
<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>	main.xml:['power']	app['power']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	main.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.app.Activity: void setVolumeControlStream(int)>	show_result.xml:['volume']	app['volume']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	show_result.xml:['medium', 'player']	app['player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	show_result.xml:['medium', 'player', 'audio']	app['player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	show_result.xml:['medium', 'player']	app['player']	ui-unmatch
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>	show_result.xml:['file', 'file']	app[]	ui-unmatch
<android.content.res.AssetFileDescriptor: long getStartOffset()>	show_result.xml:['file']	app[]	ui-unmatch
<android.content.res.AssetFileDescriptor: long getLength()>	show_result.xml:['file']	app[]	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>	show_result.xml:['medium', 'player']	app['player']	ui-unmatch
<android.content.res.AssetFileDescriptor: void close()>	show_result.xml:['file']	app[]	ui-unmatch
<android.media.MediaPlayer: void setVolume(float,float)>	show_result.xml:['medium', 'player', 'volume']	app['player', 'volume']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	show_result.xml:['medium', 'player']	app['player']	ui-unmatch
<android.location.Geocoder: java.util.List getFromLocation(double,double,int)>	show_result.xml:['location']	app[]	ui-unmatch
<android.location.Address: int getMaxAddressLineIndex()>	show_result.xml:['address', 'address']	app['address', 'address']	ui-unmatch
<android.location.Address: java.lang.String getThoroughfare()>	show_result.xml:['address']	app['address']	ui-unmatch
<android.location.Address: java.lang.String getFeatureName()>	show_result.xml:['address']	app['address']	ui-unmatch
<android.location.Address: java.lang.String getAddressLine(int)>	show_result.xml:['address', 'address']	app['address', 'address']	ui-unmatch
<android.media.MediaPlayer: void setLooping(boolean)>	show_result.xml:['medium', 'player']	app['player']	ui-unmatch
<android.media.MediaPlayer: void start()>	show_result.xml:['medium', 'player']	app['player']	ui-unmatch
<java.util.Timer: void <init>()>	show_result.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	show_result.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	app:['timer']	app['timer']	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	app:[]	app[]
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	app:[]	app[]
--------------------------------
<android.app.Activity: void onPause()>	enterprise_card_pad.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
--------------------------------
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>	app:['shortcut']	app['shortcut']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	encode.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	splash.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
--------------------------------
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	app:[]	app[]
<android.location.LocationManager: void removeGpsStatusListener(android.location.GpsStatus$Listener)>	app:[]	app[]
<android.os.PowerManager$WakeLock: void release()>	app:['power']	app['power']	ui-unmatch
<android.os.PowerManager$WakeLock: void release()>	app:['power']	app['power']	ui-unmatch
--------------------------------
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	open_gps.xml:['location']	app[]	ui-unmatch
--------------------------------
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	app:[]	app[]
<java.util.TimerTask: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	app:['timer']	app['timer']	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	app:[]	app[]
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	app:[]	app[]
--------------------------------
<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>	app:['power']	app['power']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void seekTo(int)>	app:['player']	app['player']	ui-unmatch
--------------------------------
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app:[]	app[]
<android.hardware.Camera: void setOneShotPreviewCallback(android.hardware.Camera$PreviewCallback)>	app:[]	app[]
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app:[]	app[]
<android.media.MediaPlayer: void start()>	capture.xml:['medium', 'player']	app['player']	ui-unmatch
<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri)>	group_edit.xml:[]	app[]
<android.media.Ringtone: java.lang.String getTitle(android.content.Context)>	group_edit.xml:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	main.xml:['storage']	app['storage']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app:[]	app[]
<android.hardware.Camera: void setOneShotPreviewCallback(android.hardware.Camera$PreviewCallback)>	app:[]	app[]
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app:[]	app[]
<android.media.MediaPlayer: void start()>	capture.xml:['medium', 'player']	app['player']	ui-unmatch
<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri)>	group_edit.xml:[]	app[]
<android.media.Ringtone: java.lang.String getTitle(android.content.Context)>	group_edit.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	main.xml:[]	app[]
<java.io.File: boolean exists()>	main.xml:[]	app[]
<java.io.File: boolean isDirectory()>	main.xml:['directory']	app['directory']	ui-unmatch
<java.io.File: long lastModified()>	main.xml:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	main.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: void setConnectTimeout(int)>	main.xml:['url', 'connect']	app['url', 'connect']	ui-unmatch
<java.net.URLConnection: void setDefaultUseCaches(boolean)>	main.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: void connect()>	main.xml:['url', 'connect']	app['url', 'connect']	ui-unmatch
<java.net.URL: java.lang.String toString()>	main.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.io.InputStream getInputStream()>	main.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	main.xml:[]	app[]
<java.io.FileInputStream: void <init>(java.io.File)>	main.xml:[]	app[]
<java.io.File: boolean delete()>	main.xml:[]	app[]
<java.io.File: java.io.File getParentFile()>	main.xml:[]	app[]
<java.io.File: boolean mkdirs()>	main.xml:[]	app[]
<java.net.MalformedURLException: void printStackTrace()>	main.xml:['url']	app['url']	ui-unmatch
<java.io.File: long length()>	main.xml:[]	app[]
<java.net.UnknownHostException: void printStackTrace()>	main.xml:['host']	app['host']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	main.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<java.io.File: boolean exists()>	fast_note.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	fast_note.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.telephony.gsm.SmsMessage: android.telephony.gsm.SmsMessage createFromPdu(byte[])>	app:[]	app[]
<android.telephony.gsm.SmsMessage: byte[] getUserData()>	app:[]	app[]
<android.telephony.gsm.SmsMessage: java.lang.String getOriginatingAddress()>	app:['address']	app['address']	ui-unmatch
<android.telephony.gsm.SmsManager: android.telephony.gsm.SmsManager getDefault()>	app:[]	app[]
<android.telephony.gsm.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)>	app:[]	app[]
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	app:[]	app[]
<java.util.Timer: void <init>()>	app:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	group_main.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<java.util.Timer: void <init>()>	open_gps.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	open_gps.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	app:['timer']	app['timer']	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	app:[]	app[]
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	app:[]	app[]
--------------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>	fast_note.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: boolean exists()>	fast_note.xml:['file']	app[]	ui-unmatch
<java.io.File: long lastModified()>	fast_note.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	fast_note.xml:['file']	app[]	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	fast_note.xml:['file']	app[]	ui-unmatch
<java.io.FileNotFoundException: java.lang.String getMessage()>	fast_note.xml:['file']	app[]	ui-unmatch
<java.io.File: long lastModified()>	fast_note.xml:['file']	app[]	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.lang.String getFile()>	app:['url']	app['url']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean mkdirs()>	app:[]	app[]
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:[]	app[]
<java.io.FileOutputStream: void <init>(java.io.File)>	app:[]	app[]
--------------------------------
<java.util.Locale: java.lang.String getLanguage()>	app:['language']	app['language']	ui-unmatch
--------------------------------
<android.location.Location: double getLatitude()>	app:['latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app:['longitude']	app['longitude']	ui-unmatch
<android.location.Geocoder: java.util.List getFromLocation(double,double,int)>	app:[]	app[]
<android.location.Address: int getMaxAddressLineIndex()>	app:['address', 'address']	app['address', 'address']	ui-unmatch
<android.location.Address: java.lang.String getThoroughfare()>	app:['address']	app['address']	ui-unmatch
<android.location.Address: java.lang.String getFeatureName()>	app:['address']	app['address']	ui-unmatch
<android.location.Location: double getAltitude()>	app:[]	app[]
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	app:[]	app[]
<java.util.Timer: void cancel()>	app:['timer']	app['timer']	ui-unmatch
<android.location.Address: java.lang.String getAddressLine(int)>	app:['address', 'address']	app['address', 'address']	ui-unmatch
--------------------------------
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	app:[]	app[]
<android.os.PowerManager$WakeLock: void release()>	app:['power']	app['power']	ui-unmatch
<android.text.ClipboardManager: void setText(java.lang.CharSequence)>	app:['clipboard']	app['clipboard']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	photo_show.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMultiChoiceItems(java.lang.CharSequence[],boolean[],android.content.DialogInterface$OnMultiChoiceClickListener)>	app:['choice']	app['choice']	ui-unmatch
--------------------------------
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(int,int,android.content.DialogInterface$OnClickListener)>	photo_show.xml:['choice']	app['choice']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	photo_show.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean delete()>	photo_show.xml:['file']	app[]	ui-unmatch
<java.io.File: java.io.File getParentFile()>	photo_show.xml:['file', 'file']	app[]	ui-unmatch
<java.io.File: java.lang.String[] list()>	photo_show.xml:['file']	app[]	ui-unmatch
<java.io.File: java.lang.String getName()>	photo_show.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	photo_show.xml:['file']	app[]	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	photo_show.xml:['file', 'file']	app[]	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	app:['url']	app['url']	ui-unmatch
<java.io.File: java.lang.String getName()>	app:[]	app[]
<java.io.FileInputStream: void <init>(java.io.File)>	app:[]	app[]
<java.net.HttpURLConnection: int getResponseCode()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	splash.xml:['file']	app[]	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	splash.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	share.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	fast_note.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	fast_note.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	fast_note.xml:['pause']	app['pause']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	fast_note.xml:['file']	app[]	ui-unmatch
<java.io.File: long lastModified()>	fast_note.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	fast_note.xml:['file']	app[]	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	fast_note.xml:['file']	app[]	ui-unmatch
<java.io.FileNotFoundException: java.lang.String getMessage()>	fast_note.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.telephony.gsm.SmsManager: android.telephony.gsm.SmsManager getDefault()>	app:[]	app[]
<android.telephony.gsm.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)>	app:[]	app[]
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	app:[]	app[]
<android.location.Location: long getTime()>	app:[]	app[]
<android.location.Location: double getLatitude()>	app:['latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app:['longitude']	app['longitude']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTimeInMillis(long)>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	app:['calendar']	app['calendar']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void seekTo(int)>	app:['player']	app['player']	ui-unmatch
--------------------------------
<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>	main.xml:['power']	app['power']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	group_edit.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	group_edit.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	group_edit.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>	main.xml:['power']	app['power']	ui-unmatch
--------------------------------
<android.hardware.Camera: android.hardware.Camera open()>	capture.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>	capture.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	capture.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: int getPreviewFormat()>	capture.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	capture.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	capture.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	capture.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	capture.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,int)>	capture.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	capture.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	capture.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	capture.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void set(java.lang.String,int)>	capture.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	capture.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void startPreview()>	capture.xml:['camera']	app[]	ui-unmatch
--------------------------------
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app:[]	app[]
<android.hardware.Camera: void setOneShotPreviewCallback(android.hardware.Camera$PreviewCallback)>	app:[]	app[]
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app:[]	app[]
<android.media.MediaPlayer: void start()>	capture.xml:['medium', 'player']	app['player']	ui-unmatch
<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri)>	group_edit.xml:[]	app[]
<android.media.Ringtone: java.lang.String getTitle(android.content.Context)>	group_edit.xml:[]	app[]
--------------------------------
<android.net.wifi.WifiManager: boolean disconnect()>	network.xml:['disconnect']	app['disconnect']	ui-unmatch
<android.net.wifi.WifiManager: boolean removeNetwork(int)>	network.xml:['network']	app['network']	ui-unmatch
<android.net.wifi.WifiManager: java.util.List getConfiguredNetworks()>	network.xml:['network']	app['network']	ui-unmatch
<android.net.wifi.WifiManager: boolean disconnect()>	network.xml:['disconnect']	app['disconnect']	ui-unmatch
<android.net.wifi.WifiManager: int addNetwork(android.net.wifi.WifiConfiguration)>	network.xml:['network']	app['network']	ui-unmatch
<android.net.wifi.WifiManager: boolean removeNetwork(int)>	network.xml:['network']	app['network']	ui-unmatch
<android.net.wifi.WifiManager: boolean enableNetwork(int,boolean)>	network.xml:['network']	app['network']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	contacts_memo_manager.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.accounts.AccountManager: android.accounts.AccountManager get(android.content.Context)>	contacts_memo_manager.xml:['account']	app['account']	ui-unmatch
<android.accounts.AccountManager: android.accounts.Account[] getAccounts()>	contacts_memo_manager.xml:['account', 'account']	app['account', 'account']	ui-unmatch
<android.provider.Contacts$People: android.net.Uri createPersonInMyContactsGroup(android.content.ContentResolver,android.content.ContentValues)>	contacts_memo_manager.xml:['contact', 'contact']	app[]	ui-unmatch
<android.provider.Contacts$Settings: java.lang.String getSetting(android.content.ContentResolver,java.lang.String,java.lang.String)>	contacts_memo_manager.xml:['contact']	app[]	ui-unmatch
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,long)>	contacts_memo_manager.xml:['contact']	app[]	ui-unmatch
<android.provider.Contacts$People: void setPhotoData(android.content.ContentResolver,android.net.Uri,byte[])>	contacts_memo_manager.xml:['contact', 'photo']	app[]	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	contacts_memo_manager.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.lang.String getFile()>	contacts_memo_manager.xml:['url', 'file']	app['url']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	contacts_memo_manager.xml:['storage']	app['storage']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	contacts_memo_manager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	contacts_memo_manager.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	contacts_memo_manager.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	contacts_memo_manager.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	contacts_memo_manager.xml:['file']	app[]	ui-unmatch
--------------------------------
<java.util.Timer: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	app:['timer']	app['timer']	ui-unmatch
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	app:[]	app[]
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	app:[]	app[]
--------------------------------
<android.os.PowerManager$WakeLock: boolean isHeld()>	app:['power']	app['power']	ui-unmatch
<android.os.PowerManager$WakeLock: void release()>	app:['power']	app['power']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	splash.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	splash.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean delete()>	splash.xml:['file']	app[]	ui-unmatch
--------------------------------
<java.io.File: boolean exists()>	encode.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	encode.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	encode.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean delete()>	encode.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	encode.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void close()>	encode.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.text.ClipboardManager: boolean hasText()>	share.xml:['clipboard']	app['clipboard']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	member_edit.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	member_edit.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	member_edit.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.telephony.gsm.SmsMessage: java.lang.String getOriginatingAddress()>	app:['address']	app['address']	ui-unmatch
<android.telephony.gsm.SmsMessage: android.telephony.gsm.SmsMessage createFromPdu(byte[])>	app:[]	app[]
<android.telephony.gsm.SmsMessage: java.lang.String getMessageBody()>	app:[]	app[]
--------------------------------
<android.location.Location: double getLatitude()>	app:['latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app:['longitude']	app['longitude']	ui-unmatch
<android.location.Location: long getTime()>	app:[]	app[]
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	app:[]	app[]
<java.util.Timer: void cancel()>	app:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.net.NetworkInfo: android.net.NetworkInfo$DetailedState getDetailedState()>	app:['network']	app['network']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	app:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	app:['network']	app['network']	ui-unmatch
--------------------------------
<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>	main.xml:['power']	app['power']	ui-unmatch
--------------------------------
