<android.provider.MediaStore$Images$Media: android.database.Cursor query(android.content.ContentResolver,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String)>	account_create.xml:['medium', 'store', 'medium']	app['medium', 'store', 'medium']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	account_create.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	account_create.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	account_create.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	account_create.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	account_create.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	account_create.xml:['file']	app['file']	ui-unmatch
--------------------------------
<java.io.File: java.io.File[] listFiles()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.util.Calendar: java.util.Calendar getInstance()>	home.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTimeInMillis(long)>	home.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	home.xml:['calendar']	app['calendar']	ui-unmatch
<android.content.ContextWrapper: java.lang.String[] fileList()>	home.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	home.xml:['file']	app['file']	ui-unmatch
<java.io.File: long lastModified()>	home.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	home.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	home.xml:['file']	app['file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	home.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	home.xml:['network']	app['network']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	home.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	home.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	home.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	home.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	home.xml:['file']	app['file']	ui-unmatch
<android.content.ContextWrapper: java.io.FileInputStream openFileInput(java.lang.String)>	home.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read()>	home.xml:['file']	app['file']	ui-unmatch
<java.io.File: long lastModified()>	home.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	home.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	home.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	home.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	home.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	home.xml:['file']	app['file']	ui-unmatch
--------------------------------
<java.util.Calendar: java.util.Calendar getInstance()>	home.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTimeInMillis(long)>	home.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	home.xml:['calendar']	app['calendar']	ui-unmatch
<android.content.ContextWrapper: java.lang.String[] fileList()>	home.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	home.xml:['file']	app['file']	ui-unmatch
<java.io.File: long lastModified()>	home.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	home.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	home.xml:['file']	app['file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	home.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	home.xml:['network']	app['network']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	home.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	home.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	home.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	home.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	home.xml:['file']	app['file']	ui-unmatch
<android.content.ContextWrapper: java.io.FileInputStream openFileInput(java.lang.String)>	home.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read()>	home.xml:['file']	app['file']	ui-unmatch
<java.io.File: long lastModified()>	home.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	home.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	home.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	home.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	home.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	home.xml:['file']	app['file']	ui-unmatch
--------------------------------
<java.util.Calendar: java.util.Calendar getInstance()>	home.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTimeInMillis(long)>	home.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	home.xml:['calendar']	app['calendar']	ui-unmatch
<android.content.ContextWrapper: java.lang.String[] fileList()>	home.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	home.xml:['file']	app['file']	ui-unmatch
<java.io.File: long lastModified()>	home.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	home.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	home.xml:['file']	app['file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	home.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	home.xml:['network']	app['network']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	home.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	home.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	home.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	home.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	home.xml:['file']	app['file']	ui-unmatch
<android.content.ContextWrapper: java.io.FileInputStream openFileInput(java.lang.String)>	home.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read()>	home.xml:['file']	app['file']	ui-unmatch
<java.io.File: long lastModified()>	home.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	home.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	home.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	home.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	home.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	home.xml:['file']	app['file']	ui-unmatch
<android.provider.MediaStore$Images$Media: android.database.Cursor query(android.content.ContentResolver,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String)>	upload.xml:['medium', 'store', 'medium']	app['medium', 'store', 'medium']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	upload.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	upload.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	upload.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	upload.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	upload.xml:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	upload.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	home.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	upload.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	app:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	app:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	login.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	login.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	login.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	login.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setAllowUserInteraction(boolean)>	login.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	login.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	login.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	login.xml:['http', 'url']	app['http', 'url']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	app:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.io.FileOutputStream: void close()>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(int)>	app:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setAllowUserInteraction(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.io.FileInputStream: int available()>	app:['file']	app['file']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setAllowUserInteraction(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.FileInputStream: int read(byte[],int,int)>	app:['file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<android.content.ContextWrapper: java.lang.String[] fileList()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: long lastModified()>	app:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.util.Calendar: java.util.Calendar getInstance()>	home.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTimeInMillis(long)>	home.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	home.xml:['calendar']	app['calendar']	ui-unmatch
<android.content.ContextWrapper: java.lang.String[] fileList()>	home.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	home.xml:['file']	app['file']	ui-unmatch
<java.io.File: long lastModified()>	home.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	home.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	home.xml:['file']	app['file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	home.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	home.xml:['network']	app['network']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	home.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	home.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	home.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	home.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	home.xml:['file']	app['file']	ui-unmatch
<android.content.ContextWrapper: java.io.FileInputStream openFileInput(java.lang.String)>	home.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read()>	home.xml:['file']	app['file']	ui-unmatch
<java.io.File: long lastModified()>	home.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	home.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	home.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	home.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	home.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	home.xml:['file']	app['file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	rate.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	rate.xml:['network']	app['network']	ui-unmatch
<android.content.ContextWrapper: java.io.FileInputStream openFileInput(java.lang.String)>	rate.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read()>	rate.xml:['file']	app['file']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	account_create.xml:['url']	app['url']	ui-unmatch
<java.io.FileInputStream: int available()>	account_create.xml:['file']	app['file']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	account_create.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	account_create.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	account_create.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	account_create.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setAllowUserInteraction(boolean)>	account_create.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	account_create.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	account_create.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.FileInputStream: int read(byte[],int,int)>	account_create.xml:['file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	account_create.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	account_create.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	account_create.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	account_create.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	account_create.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setAllowUserInteraction(boolean)>	account_create.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	account_create.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	account_create.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	account_create.xml:['http', 'url']	app['http', 'url']	ui-unmatch
--------------------------------
