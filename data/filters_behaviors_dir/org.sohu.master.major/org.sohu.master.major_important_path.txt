----------------------------
----------------------------
----------------------------
----------------------------
<android.os.SystemClock: void sleep(long)>    	['clock']
----------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
----------------------------
<android.graphics.Camera: void <init>()>    	['camera']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.FileReader: void <init>(java.lang.String)>    	['file']
<android.app.ActivityManager$MemoryInfo: void <init>()>    	['memory']
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>    	['memory']
<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>    	['submit']
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>    	['file', 'file']
<java.io.File: long lastModified()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.lang.String getName()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.content.pm.IPackageManager: void deleteApplicationCacheFiles(java.lang.String,android.content.pm.IPackageDataObserver)>    	['file']
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.ScrollView: void getLocationInWindow(int[])>    	['location']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.hardware.Camera: void setOneShotPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: boolean isConnected()>    	['network', 'connect']
----------------------------
<android.widget.RadioButton: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)>    	['radio']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.widget.RadioGroup: int getCheckedRadioButtonId()>    	['radio', 'radio']
<android.widget.RadioButton: java.lang.CharSequence getText()>    	['radio']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
----------------------------
----------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: long length()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.hardware.Camera: void setOneShotPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: long length()>    	['file']
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.hardware.Camera: void setOneShotPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<android.net.Uri: android.net.Uri fromFile(java.io.File)>    	['file']
----------------------------
----------------------------
----------------------------
<java.util.Calendar: int get(int)>    	['calendar']
<java.util.Calendar: void set(int,int,int)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.util.Calendar: void set(int,int,int)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<android.widget.TextView: void setShadowLayer(float,float,float,int)>    	['shadow']
<java.util.Calendar: int get(int)>    	['calendar']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
----------------------------
----------------------------
<java.io.FileReader: void <init>(java.lang.String)>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.lang.String getParent()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean equals(java.lang.Object)>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: java.lang.String toString()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.io.File getAbsoluteFile()>    	['file', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
----------------------------
----------------------------
<android.app.ActivityManager: android.os.Debug$MemoryInfo[] getProcessMemoryInfo(int[])>    	['memory']
<android.os.Debug$MemoryInfo: int getTotalPss()>    	['memory']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.Environment: java.io.File getDataDirectory()>    	['directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<android.net.Uri: android.net.Uri fromFile(java.io.File)>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean canRead()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
----------------------------
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void setFlashMode(java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void setFlashMode(java.lang.String)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera: void release()>    	['camera']
----------------------------
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.hardware.Camera: void setOneShotPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
----------------------------
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.hardware.Camera: void setOneShotPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getBlockCount()>    	['stat']
----------------------------
----------------------------
----------------------------
<android.app.ActivityManager: android.os.Debug$MemoryInfo[] getProcessMemoryInfo(int[])>    	['memory']
<android.os.Debug$MemoryInfo: int getTotalPss()>    	['memory']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>    	['camera']
<android.hardware.Camera: void setOneShotPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>    	['camera']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
----------------------------
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<android.widget.TextView: void setShadowLayer(float,float,float,int)>    	['shadow']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: long length()>    	['file']
<android.content.Context: java.io.File getFilesDir()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean canRead()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.lang.String getName()>    	['file']
<java.io.File: void <init>(java.io.File,java.lang.String)>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
