<android.os.SystemClock: void sleep(long)>	bus_search_layout.xml:['clock']	app['clock']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	bus_search_result_layout.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	bus_search_result_layout.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bus_search_result_layout.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.graphics.Camera: void <init>()>	ice_layout.xml:['camera']	app['camera']	ui-unmatch
--------------------------------
<java.io.FileReader: void <init>(java.lang.String)>	phone_acc_layout.xml:['file']	app['file']	ui-unmatch
<android.app.ActivityManager$MemoryInfo: void <init>()>	phone_acc_layout.xml:['memory']	app['memory']	ui-unmatch
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>	phone_acc_layout.xml:['memory']	app['memory']	ui-unmatch
<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>	phone_acc_layout.xml:['submit']	app['submit']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	sd_layout.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	sd_layout.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	sd_layout.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: long lastModified()>	sd_layout.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	sd_layout.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.lang.String getName()>	sd_layout.xml:['file']	app['file']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	post_layout.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.content.pm.IPackageManager: void deleteApplicationCacheFiles(java.lang.String,android.content.pm.IPackageDataObserver)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	open_run_layout.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.widget.ScrollView: void getLocationInWindow(int[])>	ice_layout.xml:['location']	app['location']	ui-unmatch
--------------------------------
<java.io.File: boolean isDirectory()>	app:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app:['camera']	app['camera']	ui-unmatch
<android.hardware.Camera: void setOneShotPreviewCallback(android.hardware.Camera$PreviewCallback)>	app:['camera']	app['camera']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app:['camera']	app['camera']	ui-unmatch
<android.media.MediaPlayer: void start()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	weather_layout.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnected()>	weather_layout.xml:['network', 'connect']	app['network', 'connect']	ui-unmatch
--------------------------------
<android.widget.RadioButton: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)>	bus_search_layout.xml:['radio']	app['radio']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	bus_search_layout.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	bus_search_layout.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	bus_search_layout.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	bus_search_layout.xml:['file']	app['file']	ui-unmatch
<android.widget.RadioGroup: int getCheckedRadioButtonId()>	bus_search_layout.xml:['radio', 'radio']	app['radio', 'radio']	ui-unmatch
<android.widget.RadioButton: java.lang.CharSequence getText()>	bus_search_layout.xml:['radio']	app['radio']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	sd_layout.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	sd_layout.xml:['file']	app['file']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	black_select_layout.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: boolean isDirectory()>	black_select_layout.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: long length()>	black_select_layout.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	black_select_layout.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	black_select_layout.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	black_select_layout.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app:['camera']	app['camera']	ui-unmatch
<android.hardware.Camera: void setOneShotPreviewCallback(android.hardware.Camera$PreviewCallback)>	app:['camera']	app['camera']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app:['camera']	app['camera']	ui-unmatch
<android.media.MediaPlayer: void start()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	black_select_layout.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	black_select_layout.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	black_select_layout.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	black_select_layout.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	black_select_layout.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	black_select_layout.xml:['file']	app['file']	ui-unmatch
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app:['camera']	app['camera']	ui-unmatch
<android.hardware.Camera: void setOneShotPreviewCallback(android.hardware.Camera$PreviewCallback)>	app:['camera']	app['camera']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app:['camera']	app['camera']	ui-unmatch
<android.media.MediaPlayer: void start()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	black_select_layout.xml:['file']	app['file']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	black_select_layout.xml:['file']	app['file']	ui-unmatch
--------------------------------
<java.util.Calendar: int get(int)>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void set(int,int,int)>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	calendar_layout.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	calendar_layout.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	calendar_layout.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	calendar_layout.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void set(int,int,int)>	calendar_layout.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	calendar_layout.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	calendar_layout.xml:['calendar']	app['calendar']	ui-unmatch
<android.widget.TextView: void setShadowLayer(float,float,float,int)>	calendar_layout.xml:['shadow']	app['shadow']	ui-unmatch
<java.util.Calendar: int get(int)>	calendar_layout.xml:['calendar']	app['calendar']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	phone_acc_layout.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<java.io.FileReader: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getParent()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean equals(java.lang.Object)>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String toString()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>	weather_layout.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	weather_layout.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.io.File getAbsoluteFile()>	weather_layout.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	weather_layout.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	weather_layout.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	weather_layout.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.app.ActivityManager: android.os.Debug$MemoryInfo[] getProcessMemoryInfo(int[])>	quick_opti_layout.xml:['memory']	app['memory']	ui-unmatch
<android.os.Debug$MemoryInfo: int getTotalPss()>	quick_opti_layout.xml:['memory']	app['memory']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	quick_opti_layout.xml:['permission']	app['permission']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getDataDirectory()>	quick_opti_layout.xml:['directory']	app['directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	quick_opti_layout.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	quick_opti_layout.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	quick_opti_layout.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	quick_opti_layout.xml:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	quick_opti_layout.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	cpu_layout.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	sd_layout.xml:['file']	app['file']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	sd_layout.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	sd_layout.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	quick_opti_layout.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	app:['file', 'directory']	app['file', 'directory']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	cpu_layout.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	cpu_layout.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean canRead()>	cpu_layout.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	cpu_layout.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	cpu_layout.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	cpu_layout.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.hardware.Camera: android.hardware.Camera open()>	tools_layout.xml:['camera']	app['camera']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	tools_layout.xml:['camera']	app['camera']	ui-unmatch
<android.hardware.Camera$Parameters: void setFlashMode(java.lang.String)>	tools_layout.xml:['camera']	app['camera']	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	tools_layout.xml:['camera']	app['camera']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	tools_layout.xml:['camera']	app['camera']	ui-unmatch
<android.hardware.Camera$Parameters: void setFlashMode(java.lang.String)>	tools_layout.xml:['camera']	app['camera']	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	tools_layout.xml:['camera']	app['camera']	ui-unmatch
<android.hardware.Camera: void release()>	tools_layout.xml:['camera']	app['camera']	ui-unmatch
--------------------------------
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app:['camera']	app['camera']	ui-unmatch
<android.hardware.Camera: void setOneShotPreviewCallback(android.hardware.Camera$PreviewCallback)>	app:['camera']	app['camera']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app:['camera']	app['camera']	ui-unmatch
<android.media.MediaPlayer: void start()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app:['camera']	app['camera']	ui-unmatch
<android.hardware.Camera: void setOneShotPreviewCallback(android.hardware.Camera$PreviewCallback)>	app:['camera']	app['camera']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app:['camera']	app['camera']	ui-unmatch
<android.media.MediaPlayer: void start()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<java.io.File: java.lang.String getPath()>	app:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
--------------------------------
<android.app.ActivityManager: android.os.Debug$MemoryInfo[] getProcessMemoryInfo(int[])>	open_run_layout.xml:['memory']	app['memory']	ui-unmatch
<android.os.Debug$MemoryInfo: int getTotalPss()>	open_run_layout.xml:['memory']	app['memory']	ui-unmatch
--------------------------------
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>	app:['camera']	app['camera']	ui-unmatch
<android.hardware.Camera: void setOneShotPreviewCallback(android.hardware.Camera$PreviewCallback)>	app:['camera']	app['camera']	ui-unmatch
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>	app:['camera']	app['camera']	ui-unmatch
<android.media.MediaPlayer: void start()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<java.util.Calendar: java.util.Calendar getInstance()>	calendar_layout.xml:['calendar']	app['calendar']	ui-unmatch
--------------------------------
<java.util.Calendar: java.util.Calendar getInstance()>	calendar_layout.xml:['calendar']	app['calendar']	ui-unmatch
<android.widget.TextView: void setShadowLayer(float,float,float,int)>	calendar_layout.xml:['shadow']	app['shadow']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	black_select_layout.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	app:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	cpu_layout.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	cpu_layout.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	cpu_layout.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	cpu_layout.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	cpu_layout.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean canRead()>	cpu_layout.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	cpu_layout.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	cpu_layout.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: java.lang.String getName()>	cpu_layout.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	cpu_layout.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	cpu_layout.xml:['file']	app['file']	ui-unmatch
--------------------------------
