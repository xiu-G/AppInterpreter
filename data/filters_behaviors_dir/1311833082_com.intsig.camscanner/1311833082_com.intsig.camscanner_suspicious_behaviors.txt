<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(android.widget.ListAdapter,int,android.content.DialogInterface$OnClickListener)>	main_menu.xml:['choice']	app['choice']	ui-unmatch
--------------------------------
<java.lang.IllegalAccessException: void printStackTrace()>	app:['access']	app['access']	ui-unmatch
--------------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>	app:[]	app[]
<android.hardware.Camera: android.hardware.Camera open()>	capture.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	capture.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: java.util.List getSupportedFlashModes()>	capture.xml:[]	app[]
<android.hardware.Camera: void stopPreview()>	capture.xml:[]	app[]
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>	capture.xml:[]	app[]
<android.hardware.Camera: void stopPreview()>	capture.xml:[]	app[]
<android.hardware.Camera: void release()>	capture.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	capture.xml:['file']	app[]	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	capture.xml:['file']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewSizes()>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: java.util.List getSupportedPictureSizes()>	capture.xml:['picture']	app['picture']	ui-unmatch
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>	capture.xml:['picture']	app['picture']	ui-unmatch
<android.hardware.Camera$Parameters: void setFlashMode(java.lang.String)>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	capture.xml:[]	app[]
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String getFlashMode()>	capture.xml:[]	app[]
<android.hardware.Camera: void startPreview()>	capture.xml:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	capture.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	capture.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	capture.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String toString()>	capture.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	capture.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean isDirectory()>	capture.xml:['file', 'directory']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	capture.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	capture.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	capture.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean delete()>	capture.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean createNewFile()>	capture.xml:['file', 'file']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	capture.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String toString()>	capture.xml:['file']	app[]	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	capture.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	capture.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	capture.xml:['stat']	app['stat']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String getFlashMode()>	capture.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean isDirectory()>	app:[]	app[]
<java.io.File: boolean isDirectory()>	app:[]	app[]
<java.io.File: java.io.File[] listFiles()>	app:[]	app[]
<java.io.File: boolean isFile()>	app:[]	app[]
<java.io.File: long length()>	app:[]	app[]
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:[]	app[]
<java.io.File: java.lang.String toString()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean mkdirs()>	app:[]	app[]
<java.io.File: java.lang.String getName()>	app:[]	app[]
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:[]	app[]
<java.io.File: boolean createNewFile()>	app:[]	app[]
<java.io.FileInputStream: void <init>(java.io.File)>	app:[]	app[]
<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>	app:[]	app[]
<java.io.FileOutputStream: void <init>(java.io.File)>	app:[]	app[]
<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>	app:[]	app[]
<java.nio.channels.FileChannel: long size()>	app:[]	app[]
<java.nio.channels.FileChannel: long transferTo(long,long,java.nio.channels.WritableByteChannel)>	app:[]	app[]
<java.nio.channels.FileChannel: void close()>	app:[]	app[]
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<java.io.FileOutputStream: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean isFile()>	app:[]	app[]
<java.io.FileInputStream: void <init>(java.io.File)>	app:[]	app[]
<java.io.FileInputStream: int read(byte[])>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
--------------------------------
<android.hardware.Camera: android.hardware.Camera open()>	capture.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	capture.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: java.util.List getSupportedFlashModes()>	capture.xml:[]	app[]
<android.hardware.Camera: void stopPreview()>	capture.xml:[]	app[]
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>	capture.xml:[]	app[]
<android.hardware.Camera: void stopPreview()>	capture.xml:[]	app[]
<android.hardware.Camera: void release()>	capture.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	capture.xml:['file']	app[]	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	capture.xml:['file']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewSizes()>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: java.util.List getSupportedPictureSizes()>	capture.xml:['picture']	app['picture']	ui-unmatch
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>	capture.xml:['picture']	app['picture']	ui-unmatch
<android.hardware.Camera$Parameters: void setFlashMode(java.lang.String)>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	capture.xml:[]	app[]
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String getFlashMode()>	capture.xml:[]	app[]
<android.hardware.Camera: void startPreview()>	capture.xml:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	capture.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	capture.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	capture.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String toString()>	capture.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	capture.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean isDirectory()>	capture.xml:['file', 'directory']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	capture.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	capture.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	capture.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean delete()>	capture.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean createNewFile()>	capture.xml:['file', 'file']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	capture.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String toString()>	capture.xml:['file']	app[]	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	capture.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	capture.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	capture.xml:['stat']	app['stat']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String getFlashMode()>	capture.xml:[]	app[]
--------------------------------
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	document.xml:['file']	app[]	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	document.xml:['memory']	app['memory']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	document.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getDataDirectory()>	document.xml:['directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	document.xml:['file']	app[]	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	document.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	document.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	document.xml:['stat']	app['stat']	ui-unmatch
--------------------------------
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(int,int,android.content.DialogInterface$OnClickListener)>	document.xml:['choice']	app['choice']	ui-unmatch
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(android.widget.ListAdapter,int,android.content.DialogInterface$OnClickListener)>	document.xml:['choice']	app['choice']	ui-unmatch
--------------------------------
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	document.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	document.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	document.xml:['file']	app[]	ui-unmatch
--------------------------------
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>	document.xml:['file']	app[]	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	document.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean delete()>	document.xml:['file']	app[]	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	document.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean renameTo(java.io.File)>	document.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.app.ListActivity: void onPause()>	document.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	capture.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>	main_menu.xml:['shortcut']	app['shortcut']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<android.webkit.MimeTypeMap: java.lang.String getFileExtensionFromUrl(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:[]	app[]
<java.io.File: long length()>	app:[]	app[]
--------------------------------
<android.content.ServiceConnection: void onServiceDisconnected(android.content.ComponentName)>	app:['disconnect']	app['disconnect']	ui-unmatch
--------------------------------
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	update.xml:['telephony', 'device']	app['telephony']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	update.xml:['url']	app['url']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperator()>	update.xml:['telephony', 'network']	app['telephony', 'network']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkCountryIso()>	update.xml:['telephony', 'network', 'country']	app['telephony', 'network', 'country']	ui-unmatch
--------------------------------
<android.hardware.Camera: android.hardware.Camera open()>	capture.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	capture.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: java.util.List getSupportedFlashModes()>	capture.xml:[]	app[]
<android.hardware.Camera: void stopPreview()>	capture.xml:[]	app[]
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>	capture.xml:[]	app[]
<android.hardware.Camera: void stopPreview()>	capture.xml:[]	app[]
<android.hardware.Camera: void release()>	capture.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	capture.xml:['file']	app[]	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	capture.xml:['file']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewSizes()>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: java.util.List getSupportedPictureSizes()>	capture.xml:['picture']	app['picture']	ui-unmatch
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>	capture.xml:['picture']	app['picture']	ui-unmatch
<android.hardware.Camera$Parameters: void setFlashMode(java.lang.String)>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	capture.xml:[]	app[]
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String getFlashMode()>	capture.xml:[]	app[]
<android.hardware.Camera: void startPreview()>	capture.xml:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	capture.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	capture.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	capture.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String toString()>	capture.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	capture.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean isDirectory()>	capture.xml:['file', 'directory']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	capture.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	capture.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	capture.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean delete()>	capture.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean createNewFile()>	capture.xml:['file', 'file']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	capture.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String toString()>	capture.xml:['file']	app[]	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	capture.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	capture.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	capture.xml:['stat']	app['stat']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String getFlashMode()>	capture.xml:[]	app[]
--------------------------------
<java.io.File: void <init>(java.lang.String)>	main_menu.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	main_menu.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	main_menu.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean isFile()>	main_menu.xml:['file', 'file']	app[]	ui-unmatch
<java.io.File: boolean delete()>	main_menu.xml:['file']	app[]	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	main_menu.xml:['language']	app['language']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	main_menu.xml:['file']	app[]	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	main_menu.xml:['memory']	app['memory']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	main_menu.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	main_menu.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void flush()>	main_menu.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void close()>	main_menu.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	main_menu.xml:['file']	app[]	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	main_menu.xml:['memory']	app['memory']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	main_menu.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.hardware.Camera: android.hardware.Camera open()>	capture.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	capture.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: java.util.List getSupportedFlashModes()>	capture.xml:[]	app[]
<android.hardware.Camera: void stopPreview()>	capture.xml:[]	app[]
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>	capture.xml:[]	app[]
<android.hardware.Camera: void stopPreview()>	capture.xml:[]	app[]
<android.hardware.Camera: void release()>	capture.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	capture.xml:['file']	app[]	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	capture.xml:['file']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewSizes()>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: java.util.List getSupportedPictureSizes()>	capture.xml:['picture']	app['picture']	ui-unmatch
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>	capture.xml:['picture']	app['picture']	ui-unmatch
<android.hardware.Camera$Parameters: void setFlashMode(java.lang.String)>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	capture.xml:[]	app[]
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String getFlashMode()>	capture.xml:[]	app[]
<android.hardware.Camera: void startPreview()>	capture.xml:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	capture.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	capture.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	capture.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String toString()>	capture.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	capture.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean isDirectory()>	capture.xml:['file', 'directory']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	capture.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	capture.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	capture.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean delete()>	capture.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean createNewFile()>	capture.xml:['file', 'file']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	capture.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String toString()>	capture.xml:['file']	app[]	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	capture.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	capture.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	capture.xml:['stat']	app['stat']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String getFlashMode()>	capture.xml:[]	app[]
--------------------------------
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	app:['telephony']	app['telephony']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	main_menu.xml:['language']	app['language']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	main_menu.xml:['file']	app[]	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	main_menu.xml:['memory']	app['memory']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	main_menu.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	main_menu.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void flush()>	main_menu.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void close()>	main_menu.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	main_menu.xml:['file']	app[]	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	main_menu.xml:['memory']	app['memory']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	main_menu.xml:['file']	app[]	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean mkdirs()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String,java.lang.String)>	app:[]	app[]
<java.io.FileOutputStream: void <init>(java.io.File)>	app:[]	app[]
<android.location.Location: double getLatitude()>	app:['latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app:['longitude']	app['longitude']	ui-unmatch
--------------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	app:[]	app[]
<java.io.FileOutputStream: void <init>(java.lang.String)>	app:[]	app[]
<java.io.FileInputStream: void <init>(java.lang.String)>	app:[]	app[]
<java.io.FileOutputStream: void <init>(java.lang.String)>	app:[]	app[]
<java.io.FileOutputStream: void flush()>	app:[]	app[]
<java.io.FileOutputStream: void close()>	app:[]	app[]
<java.io.FileOutputStream: void write(byte[],int,int)>	app:[]	app[]
<java.io.FileNotFoundException: void printStackTrace()>	app:[]	app[]
<java.io.FileNotFoundException: void printStackTrace()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<java.lang.OutOfMemoryError: void printStackTrace()>	app:['memory']	app['memory']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app:[]	app[]
--------------------------------
<android.provider.MediaStore: android.net.Uri getMediaScannerUri()>	app:['medium', 'medium']	app['medium', 'medium']	ui-unmatch
--------------------------------
<java.util.Locale: java.lang.String getLanguage()>	main_menu.xml:['language']	app['language']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	main_menu.xml:['file']	app[]	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	main_menu.xml:['memory']	app['memory']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	main_menu.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	main_menu.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void flush()>	main_menu.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void close()>	main_menu.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	main_menu.xml:['file']	app[]	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	main_menu.xml:['memory']	app['memory']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	main_menu.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.provider.MediaStore$Images$Thumbnails: android.graphics.Bitmap getThumbnail(android.content.ContentResolver,long,int,android.graphics.BitmapFactory$Options)>	app:['medium']	app['medium']	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	app:['memory']	app['memory']	ui-unmatch
--------------------------------
<android.provider.MediaStore$Images$Thumbnails: android.graphics.Bitmap getThumbnail(android.content.ContentResolver,long,int,android.graphics.BitmapFactory$Options)>	app:['medium']	app['medium']	ui-unmatch
--------------------------------
<java.util.Locale: java.lang.String getLanguage()>	main_menu.xml:['language']	app['language']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	main_menu.xml:['file']	app[]	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	main_menu.xml:['memory']	app['memory']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	main_menu.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	main_menu.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void flush()>	main_menu.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void close()>	main_menu.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	main_menu.xml:['file']	app[]	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	main_menu.xml:['memory']	app['memory']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	main_menu.xml:['file']	app[]	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	capture.xml:['file']	app[]	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	capture.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	capture.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	capture.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean delete()>	capture.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.hardware.Camera$Parameters: void setRotation(int)>	capture.xml:[]	app[]
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	capture.xml:[]	app[]
<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>	capture.xml:['picture']	app['picture']	ui-unmatch
--------------------------------
<android.graphics.Canvas: void restoreToCount(int)>	app:['restore']	app['restore']	ui-unmatch
--------------------------------
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	unlock.xml:['telephony']	app['telephony']	ui-unmatch
--------------------------------
<java.lang.OutOfMemoryError: void printStackTrace()>	app:['memory']	app['memory']	ui-unmatch
--------------------------------
<android.content.ServiceConnection: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>	app:['connect']	app['connect']	ui-unmatch
--------------------------------
<java.util.Timer: void <init>()>	main_menu.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	main_menu.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	main_menu.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	main_menu.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<java.util.Locale: java.lang.String getLanguage()>	main_menu.xml:['language']	app['language']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	main_menu.xml:['file']	app[]	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	main_menu.xml:['memory']	app['memory']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	main_menu.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	main_menu.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void flush()>	main_menu.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void close()>	main_menu.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	main_menu.xml:['file']	app[]	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	main_menu.xml:['memory']	app['memory']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	main_menu.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.content.ServiceConnection: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>	app:['connect']	app['connect']	ui-unmatch
--------------------------------
<android.provider.MediaStore$Images$Thumbnails: void cancelThumbnailRequest(android.content.ContentResolver,long)>	app:['medium']	app['medium']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	page_imageview.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean delete()>	page_imageview.xml:['file']	app[]	ui-unmatch
--------------------------------
<java.util.Locale: java.lang.String getLanguage()>	main_menu.xml:['language']	app['language']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	main_menu.xml:['file']	app[]	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	main_menu.xml:['memory']	app['memory']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	main_menu.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	main_menu.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void flush()>	main_menu.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void close()>	main_menu.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	main_menu.xml:['file']	app[]	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	main_menu.xml:['memory']	app['memory']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	main_menu.xml:['file']	app[]	ui-unmatch
--------------------------------
<java.util.Locale: java.lang.String getLanguage()>	main_menu.xml:['language']	app['language']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	main_menu.xml:['file']	app[]	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	main_menu.xml:['memory']	app['memory']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	main_menu.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	main_menu.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void flush()>	main_menu.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void close()>	main_menu.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	main_menu.xml:['file']	app[]	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	main_menu.xml:['memory']	app['memory']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	main_menu.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	image_scan.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.graphics.Canvas: void restore()>	app:['restore']	app['restore']	ui-unmatch
<android.graphics.Canvas: void restore()>	app:['restore']	app['restore']	ui-unmatch
--------------------------------
<java.util.Locale: java.lang.String getLanguage()>	app:['language']	app['language']	ui-unmatch
<java.net.URI: java.lang.String getHost()>	app:['host']	app['host']	ui-unmatch
<java.net.URI: int getPort()>	app:['port']	app['port']	ui-unmatch
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.util.GregorianCalendar: void <init>(java.util.TimeZone)>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void set(int,int,int)>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void set(int,int,int,int,int,int)>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void set(int,int)>	app:['calendar']	app['calendar']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	image_scan.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean delete()>	image_scan.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	account_edit_text_entry.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.hardware.Camera: android.hardware.Camera open()>	capture.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	capture.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: java.util.List getSupportedFlashModes()>	capture.xml:[]	app[]
<android.hardware.Camera: void stopPreview()>	capture.xml:[]	app[]
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>	capture.xml:[]	app[]
<android.hardware.Camera: void stopPreview()>	capture.xml:[]	app[]
<android.hardware.Camera: void release()>	capture.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	capture.xml:['file']	app[]	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	capture.xml:['file']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewSizes()>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: java.util.List getSupportedPictureSizes()>	capture.xml:['picture']	app['picture']	ui-unmatch
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>	capture.xml:['picture']	app['picture']	ui-unmatch
<android.hardware.Camera$Parameters: void setFlashMode(java.lang.String)>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	capture.xml:[]	app[]
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String getFlashMode()>	capture.xml:[]	app[]
<android.hardware.Camera: void startPreview()>	capture.xml:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	capture.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	capture.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	capture.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String toString()>	capture.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	capture.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean isDirectory()>	capture.xml:['file', 'directory']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	capture.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	capture.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	capture.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean delete()>	capture.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean createNewFile()>	capture.xml:['file', 'file']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	capture.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String toString()>	capture.xml:['file']	app[]	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	capture.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	capture.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	capture.xml:['stat']	app['stat']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String getFlashMode()>	capture.xml:[]	app[]
--------------------------------
<android.app.Activity: void onPause()>	accounts_list.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:[]	app[]
<java.lang.OutOfMemoryError: void printStackTrace()>	image_scan.xml:['memory']	app['memory']	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	app:['memory']	app['memory']	ui-unmatch
--------------------------------
<java.util.Timer: void <init>()>	main_menu.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	main_menu.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	main_menu.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	main_menu.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<java.util.Locale: java.lang.String getLanguage()>	main_menu.xml:['language']	app['language']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	main_menu.xml:['file']	app[]	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	main_menu.xml:['memory']	app['memory']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	main_menu.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	main_menu.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void flush()>	main_menu.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void close()>	main_menu.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	main_menu.xml:['file']	app[]	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	main_menu.xml:['memory']	app['memory']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	main_menu.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.hardware.Camera: android.hardware.Camera open()>	capture.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	capture.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: java.util.List getSupportedFlashModes()>	capture.xml:[]	app[]
<android.hardware.Camera: void stopPreview()>	capture.xml:[]	app[]
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>	capture.xml:[]	app[]
<android.hardware.Camera: void stopPreview()>	capture.xml:[]	app[]
<android.hardware.Camera: void release()>	capture.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	capture.xml:['file']	app[]	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	capture.xml:['file']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewSizes()>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: java.util.List getSupportedPictureSizes()>	capture.xml:['picture']	app['picture']	ui-unmatch
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>	capture.xml:['picture']	app['picture']	ui-unmatch
<android.hardware.Camera$Parameters: void setFlashMode(java.lang.String)>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	capture.xml:[]	app[]
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String getFlashMode()>	capture.xml:[]	app[]
<android.hardware.Camera: void startPreview()>	capture.xml:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	capture.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	capture.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	capture.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String toString()>	capture.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	capture.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean isDirectory()>	capture.xml:['file', 'directory']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	capture.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	capture.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	capture.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean delete()>	capture.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean createNewFile()>	capture.xml:['file', 'file']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	capture.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String toString()>	capture.xml:['file']	app[]	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	capture.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	capture.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	capture.xml:['stat']	app['stat']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String getFlashMode()>	capture.xml:[]	app[]
--------------------------------
<android.hardware.Camera: android.hardware.Camera open()>	capture.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	capture.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: java.util.List getSupportedFlashModes()>	capture.xml:[]	app[]
<android.hardware.Camera: void stopPreview()>	capture.xml:[]	app[]
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>	capture.xml:[]	app[]
<android.hardware.Camera: void stopPreview()>	capture.xml:[]	app[]
<android.hardware.Camera: void release()>	capture.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	capture.xml:['file']	app[]	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	capture.xml:['file']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewSizes()>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: java.util.List getSupportedPictureSizes()>	capture.xml:['picture']	app['picture']	ui-unmatch
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>	capture.xml:['picture']	app['picture']	ui-unmatch
<android.hardware.Camera$Parameters: void setFlashMode(java.lang.String)>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	capture.xml:[]	app[]
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String getFlashMode()>	capture.xml:[]	app[]
<android.hardware.Camera: void startPreview()>	capture.xml:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	capture.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	capture.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	capture.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String toString()>	capture.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	capture.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean isDirectory()>	capture.xml:['file', 'directory']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	capture.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	capture.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	capture.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean delete()>	capture.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean createNewFile()>	capture.xml:['file', 'file']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	capture.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String toString()>	capture.xml:['file']	app[]	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	capture.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	capture.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	capture.xml:['stat']	app['stat']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String getFlashMode()>	capture.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	document.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	document.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean delete()>	document.xml:['file']	app[]	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	document.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.net.Uri: java.lang.String getHost()>	app:['host']	app['host']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getDataDirectory()>	app:[]	app[]
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
--------------------------------
<android.content.ServiceConnection: void onServiceDisconnected(android.content.ComponentName)>	app:['disconnect']	app['disconnect']	ui-unmatch
--------------------------------
<android.graphics.Canvas: void restore()>	app:['restore']	app['restore']	ui-unmatch
--------------------------------
<android.hardware.Camera: android.hardware.Camera open()>	capture.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	capture.xml:[]	app[]
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: java.util.List getSupportedFlashModes()>	capture.xml:[]	app[]
<android.hardware.Camera: void stopPreview()>	capture.xml:[]	app[]
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>	capture.xml:[]	app[]
<android.hardware.Camera: void stopPreview()>	capture.xml:[]	app[]
<android.hardware.Camera: void release()>	capture.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	capture.xml:['file']	app[]	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	capture.xml:['file']	app[]	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewSizes()>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: java.util.List getSupportedPictureSizes()>	capture.xml:['picture']	app['picture']	ui-unmatch
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>	capture.xml:['picture']	app['picture']	ui-unmatch
<android.hardware.Camera$Parameters: void setFlashMode(java.lang.String)>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>	capture.xml:[]	app[]
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String getFlashMode()>	capture.xml:[]	app[]
<android.hardware.Camera: void startPreview()>	capture.xml:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	capture.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	capture.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	capture.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String toString()>	capture.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	capture.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean isDirectory()>	capture.xml:['file', 'directory']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	capture.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	capture.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	capture.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean delete()>	capture.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean createNewFile()>	capture.xml:['file', 'file']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	capture.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String toString()>	capture.xml:['file']	app[]	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	capture.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	capture.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	capture.xml:['stat']	app['stat']	ui-unmatch
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	capture.xml:[]	app[]
<android.hardware.Camera$Parameters: java.lang.String getFlashMode()>	capture.xml:[]	app[]
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	update.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	update.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	update.xml:['http', 'url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: java.lang.String getHeaderField(java.lang.String)>	update.xml:['http', 'url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	update.xml:['http', 'url', 'disconnect']	app['url', 'disconnect']	ui-unmatch
<java.net.HttpURLConnection: int getHeaderFieldInt(java.lang.String,int)>	update.xml:['http', 'url']	app['url']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	capture.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	capture.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	capture.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void flush()>	capture.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void close()>	capture.xml:['file']	app[]	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	capture.xml:['file']	app[]	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	main_menu.xml:['language']	app['language']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	main_menu.xml:['file']	app[]	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	main_menu.xml:['memory']	app['memory']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	main_menu.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	main_menu.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void flush()>	main_menu.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void close()>	main_menu.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	main_menu.xml:['file']	app[]	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	main_menu.xml:['memory']	app['memory']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	main_menu.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	capture.xml:['file']	app[]	ui-unmatch
<java.io.File: java.lang.String getName()>	capture.xml:['file']	app[]	ui-unmatch
--------------------------------
