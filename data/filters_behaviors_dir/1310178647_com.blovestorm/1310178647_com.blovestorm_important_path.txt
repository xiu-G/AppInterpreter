----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<android.content.ContextWrapper: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.File: boolean delete()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>    	['file']
<java.io.FileWriter: void <init>(java.io.File)>    	['file']
<java.io.FileWriter: void close()>    	['file']
<java.io.FileWriter: void flush()>    	['file']
----------------------------
----------------------------
<android.media.RingtoneManager: android.net.Uri getDefaultUri(int)>    	['ring']
----------------------------
----------------------------
----------------------------
----------------------------
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: long length()>    	['file']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: long length()>    	['file']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>    	['telephony']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: java.lang.String getName()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.net.Proxy: java.lang.String getDefaultHost()>    	['host']
<android.net.Proxy: int getDefaultPort()>    	['port']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTimeInMillis(long)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.util.Calendar: int getActualMaximum(int)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.util.Calendar: void set(int,int)>    	['calendar']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoInput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setUseCaches(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void addRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void connect()>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>    	['http', 'url']
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>    	['file', 'file']
<java.io.File: java.lang.String getName()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.net.HttpURLConnection: void disconnect()>    	['http', 'url', 'disconnect']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.io.File: boolean delete()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
<java.lang.Runtime: long freeMemory()>    	['memory']
<com.android.internal.telephony.ITelephony$Stub: com.android.internal.telephony.ITelephony asInterface(android.os.IBinder)>    	['telephony']
<com.android.internal.telephony.ITelephony: void cancelMissedCallsNotification()>    	['telephony', 'call']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>    	['host']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence,android.graphics.drawable.Drawable)>    	['host', 'indicator']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.content.Intent)>    	['host']
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>    	['host']
----------------------------
<android.app.ActivityGroup: void onPause()>    	['pause']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.ListView: void setChoiceMode(int)>    	['choice']
----------------------------
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTime(java.util.Date)>    	['calendar']
<java.util.Calendar: void add(int,int)>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<com.android.internal.telephony.ITelephony$Stub: com.android.internal.telephony.ITelephony asInterface(android.os.IBinder)>    	['telephony']
<com.android.internal.telephony.ITelephony: void call(java.lang.String)>    	['telephony', 'call']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.RingtoneManager: android.net.Uri getDefaultUri(int)>    	['ring']
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Timer: void cancel()>    	['timer']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void scheduleAtFixedRate(java.util.TimerTask,long,long)>    	['timer', 'rate']
----------------------------
----------------------------
----------------------------
<android.telephony.gsm.SmsManager: android.telephony.gsm.SmsManager getDefault()>    	['sms']
<android.telephony.gsm.SmsManager: java.util.ArrayList divideMessage(java.lang.String)>    	['sms']
<android.telephony.gsm.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)>    	['sms']
<android.telephony.gsm.SmsMessage: android.telephony.gsm.SmsMessage createFromPdu(byte[])>    	['sms']
<android.telephony.gsm.SmsMessage: java.lang.String getOriginatingAddress()>    	['sms', 'address']
<android.telephony.gsm.SmsMessage: long getTimestampMillis()>    	['sms']
<android.telephony.gsm.SmsMessage: java.lang.String getMessageBody()>    	['sms']
----------------------------
<android.telephony.PhoneStateListener: void onCallStateChanged(int,java.lang.String)>    	['phone', 'call']
----------------------------
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
----------------------------
<android.widget.RadioButton: void setChecked(boolean)>    	['radio']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
<android.net.NetworkInfo: java.lang.String getExtraInfo()>    	['network']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.lang.IllegalAccessException: void printStackTrace()>    	['access']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoInput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setUseCaches(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void connect()>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>    	['http', 'url']
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: long length()>    	['file']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<android.media.RingtoneManager: android.net.Uri getDefaultUri(int)>    	['ring']
<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri)>    	['ring', 'ring']
<android.media.AudioManager: int getRingerMode()>    	['audio']
<android.os.PowerManager$WakeLock: void release()>    	['power']
<android.media.AudioManager: void setRingerMode(int)>    	['audio']
<android.media.AudioManager: void setVibrateSetting(int,int)>    	['audio']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void setLooping(boolean)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.AudioManager: int getVibrateSetting(int)>    	['audio']
<android.media.AudioManager: int getRingerMode()>    	['audio']
<android.media.MediaPlayer: boolean isPlaying()>    	['medium', 'player', 'play']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.media.AudioManager: void setStreamVolume(int,int,int)>    	['audio', 'volume']
<android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>    	['shortcut']
<java.io.File: void <init>(java.lang.String)>    	['file']
<android.net.Uri: android.net.Uri fromFile(java.io.File)>    	['file']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTime(java.util.Date)>    	['calendar']
<java.util.Calendar: int getActualMaximum(int)>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTime(java.util.Date)>    	['calendar']
<java.util.Calendar: void add(int,int)>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTime(java.util.Date)>    	['calendar']
<java.util.Calendar: void add(int,int)>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTime(java.util.Date)>    	['calendar']
<java.util.Calendar: void add(int,int)>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.net.HttpURLConnection: void disconnect()>    	['http', 'url', 'disconnect']
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onRestoreInstanceState(android.os.Bundle)>    	['restore']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.provider.Contacts$Phones: java.lang.CharSequence getDisplayLabel(android.content.Context,int,java.lang.CharSequence,java.lang.CharSequence[])>    	['contact', 'phone']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.telephony.TelephonyManager: int getPhoneType()>    	['telephony', 'phone']
----------------------------
<android.telephony.TelephonyManager: int getPhoneType()>    	['telephony', 'phone']
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.ListView: void setChoiceMode(int)>    	['choice']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.Activity: android.content.ComponentName getCallingActivity()>    	['call']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.ListActivity: void onPause()>    	['pause']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<android.net.Proxy: java.lang.String getDefaultHost()>    	['host']
<android.net.Proxy: int getDefaultPort()>    	['port']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setReadTimeout(int)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoInput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void connect()>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.lang.String getContentType()>    	['http', 'url']
<java.net.HttpURLConnection: void disconnect()>    	['http', 'url', 'disconnect']
<java.net.HttpURLConnection: void setConnectTimeout(int)>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: int getContentLength()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<android.media.RingtoneManager: android.net.Uri getDefaultUri(int)>    	['ring']
<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri)>    	['ring', 'ring']
<android.media.AudioManager: int getRingerMode()>    	['audio']
<android.os.PowerManager$WakeLock: void release()>    	['power']
<android.media.AudioManager: void setRingerMode(int)>    	['audio']
<android.media.AudioManager: void setVibrateSetting(int,int)>    	['audio']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void setLooping(boolean)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.AudioManager: int getVibrateSetting(int)>    	['audio']
<android.media.AudioManager: int getRingerMode()>    	['audio']
<android.media.MediaPlayer: boolean isPlaying()>    	['medium', 'player', 'play']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.media.AudioManager: void setStreamVolume(int,int,int)>    	['audio', 'volume']
<android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>    	['shortcut']
<java.io.File: void <init>(java.lang.String)>    	['file']
<android.net.Uri: android.net.Uri fromFile(java.io.File)>    	['file']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTime(java.util.Date)>    	['calendar']
<java.util.Calendar: int getActualMaximum(int)>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTime(java.util.Date)>    	['calendar']
<java.util.Calendar: void add(int,int)>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTime(java.util.Date)>    	['calendar']
<java.util.Calendar: void add(int,int)>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTime(java.util.Date)>    	['calendar']
<java.util.Calendar: void add(int,int)>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
----------------------------
<com.android.internal.telephony.ITelephony: void call(java.lang.String)>    	['telephony', 'call']
<java.util.Timer: void cancel()>    	['timer']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void scheduleAtFixedRate(java.util.TimerTask,long,long)>    	['timer', 'rate']
----------------------------
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.telephony.gsm.SmsMessage: int[] calculateLength(java.lang.CharSequence,boolean)>    	['sms']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>    	['telephony']
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: java.util.ArrayList divideMessage(java.lang.String)>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>    	['telephony']
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>    	['telephony']
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.telephony.PhoneNumberUtils: boolean isDialable(char)>    	['phone']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
----------------------------
----------------------------
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setReadTimeout(int)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoInput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setUseCaches(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void addRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void connect()>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>    	['http', 'url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.HttpURLConnection: void disconnect()>    	['http', 'url', 'disconnect']
<java.net.HttpURLConnection: int getContentLength()>    	['http', 'url']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.util.zip.ZipFile: void <init>(java.io.File)>    	['file']
<java.util.zip.ZipFile: java.util.zip.ZipEntry getEntry(java.lang.String)>    	['file']
<java.util.zip.ZipFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>    	['file']
<java.util.zip.ZipFile: void close()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.content.Context: java.io.File getFilesDir()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: java.lang.String getName()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: void <init>(java.io.File,java.lang.String)>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.ListView: void setChoiceMode(int)>    	['choice']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.ListView: int getChoiceMode()>    	['choice']
<android.widget.ListView: void setChoiceMode(int)>    	['choice']
----------------------------
<android.widget.AbsListView: int getChoiceMode()>    	['choice']
<android.widget.AbsListView: int getChoiceMode()>    	['choice']
----------------------------
<android.widget.AbsListView: int getChoiceMode()>    	['choice']
----------------------------
<android.widget.AbsListView: int getChoiceMode()>    	['choice']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.RingtoneManager: android.net.Uri getDefaultUri(int)>    	['ring']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.telephony.PhoneNumberUtils: java.lang.String extractNetworkPortion(java.lang.String)>    	['phone', 'network']
<android.telephony.PhoneNumberUtils: java.lang.String formatNumber(java.lang.String)>    	['phone']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.Activity: void setVolumeControlStream(int)>    	['volume']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>    	['host']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence,android.graphics.drawable.Drawable)>    	['host', 'indicator']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.content.Intent)>    	['host']
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>    	['host']
<android.widget.TabHost: void setCurrentTabByTag(java.lang.String)>    	['host']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.lang.Runtime: long freeMemory()>    	['memory']
----------------------------
<java.lang.Runtime: long freeMemory()>    	['memory']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(int,int,android.content.DialogInterface$OnClickListener)>    	['choice']
----------------------------
----------------------------
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoInput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setUseCaches(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void connect()>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>    	['http', 'url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.HttpURLConnection: void disconnect()>    	['http', 'url', 'disconnect']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Timer: void cancel()>    	['timer']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void scheduleAtFixedRate(java.util.TimerTask,long,long)>    	['timer', 'rate']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: int read(byte[],int,int)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.FileReader: void <init>(java.lang.String)>    	['file']
<java.io.FileReader: void close()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>    	['location']
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
----------------------------
----------------------------
<android.widget.ListView: void setChoiceMode(int)>    	['choice']
----------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.TimePicker: void setIs24HourView(java.lang.Boolean)>    	['hour']
----------------------------
----------------------------
----------------------------
<android.widget.TimePicker: void setCurrentHour(java.lang.Integer)>    	['hour']
<android.widget.TimePicker: void setCurrentHour(java.lang.Integer)>    	['hour']
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
----------------------------
----------------------------
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>    	['shortcut']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.telephony.SmsMessage: byte[] getPdu()>    	['sms']
<android.telephony.SmsMessage: long getTimestampMillis()>    	['sms']
----------------------------
----------------------------
<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri)>    	['ring', 'ring']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.RadioButton: void setChecked(boolean)>    	['radio']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
----------------------------
----------------------------
<android.telephony.TelephonyManager: int getCallState()>    	['telephony', 'call']
<android.telephony.TelephonyManager: void listen(android.telephony.PhoneStateListener,int)>    	['telephony']
<java.util.Timer: void cancel()>    	['timer']
----------------------------
----------------------------
----------------------------
----------------------------
<android.provider.Contacts$People: java.io.InputStream openContactPhotoInputStream(android.content.ContentResolver,android.net.Uri)>    	['contact', 'contact', 'photo']
----------------------------
----------------------------
----------------------------
----------------------------
<android.telephony.SmsMessage: android.telephony.SmsMessage createFromPdu(byte[])>    	['sms']
<android.telephony.SmsMessage: java.lang.String getDisplayOriginatingAddress()>    	['sms', 'address']
<android.telephony.SmsMessage: java.lang.String getDisplayMessageBody()>    	['sms']
<android.telephony.SmsMessage: java.lang.String getMessageBody()>    	['sms']
<android.telephony.SmsMessage: java.lang.String getDisplayOriginatingAddress()>    	['sms', 'address']
<android.media.RingtoneManager: android.net.Uri getDefaultUri(int)>    	['ring']
<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri)>    	['ring', 'ring']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.Dialog: void onRestoreInstanceState(android.os.Bundle)>    	['restore']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>    	['power']
<android.os.PowerManager$WakeLock: void acquire()>    	['power']
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Calendar: void set(int,int)>    	['calendar']
<android.telephony.PhoneStateListener: void <init>()>    	['phone']
<android.telephony.TelephonyManager: void listen(android.telephony.PhoneStateListener,int)>    	['telephony']
<android.media.AudioManager: int getStreamVolume(int)>    	['audio', 'volume']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void scheduleAtFixedRate(java.util.TimerTask,long,long)>    	['timer', 'rate']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.lang.Runtime: long freeMemory()>    	['memory']
----------------------------
----------------------------
----------------------------
----------------------------
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
<android.telephony.PhoneStateListener: void onCallStateChanged(int,java.lang.String)>    	['phone', 'call']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: boolean isPlaying()>    	['medium', 'player', 'play']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<com.android.internal.telephony.ITelephony$Stub: com.android.internal.telephony.ITelephony asInterface(android.os.IBinder)>    	['telephony']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
----------------------------
----------------------------
<android.telephony.TelephonyManager: void listen(android.telephony.PhoneStateListener,int)>    	['telephony']
<java.util.Timer: void cancel()>    	['timer']
<android.os.PowerManager$WakeLock: void release()>    	['power']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.AudioManager: int getStreamVolume(int)>    	['audio', 'volume']
<android.media.AudioManager: void setStreamVolume(int,int,int)>    	['audio', 'volume']
<android.media.AudioManager: int getRingerMode()>    	['audio']
<android.media.AudioManager: int getVibrateSetting(int)>    	['audio']
<android.media.AudioManager: void setRingerMode(int)>    	['audio']
<android.media.AudioManager: void setVibrateSetting(int,int)>    	['audio']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.AudioManager: int getStreamMaxVolume(int)>    	['audio', 'volume']
<android.telephony.TelephonyManager: int getCallState()>    	['telephony', 'call']
<android.telephony.PhoneStateListener: void <init>()>    	['phone']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void <init>()>    	['timer']
<java.util.Timer: void scheduleAtFixedRate(java.util.TimerTask,long,long)>    	['timer', 'rate']
<com.android.internal.telephony.ITelephony: boolean endCall()>    	['telephony', 'call']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.AudioManager: int getMode()>    	['audio']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.RadioButton: void setChecked(boolean)>    	['radio']
<android.widget.RadioButton: void setChecked(boolean)>    	['radio']
----------------------------
----------------------------
----------------------------
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: java.io.File getFilesDir()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: java.lang.String getName()>    	['file']
<android.widget.ListView: void setChoiceMode(int)>    	['choice']
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
----------------------------
----------------------------
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.AudioManager: int getMode()>    	['audio']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<com.android.internal.telephony.ITelephony: void cancelMissedCallsNotification()>    	['telephony', 'call']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.provider.ContactsContract$CommonDataKinds$Phone: java.lang.CharSequence getTypeLabel(android.content.res.Resources,int,java.lang.CharSequence)>    	['contact', 'phone']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>    	['host']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence,android.graphics.drawable.Drawable)>    	['host', 'indicator']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.content.Intent)>    	['host']
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>    	['host']
<android.widget.TabHost: void setCurrentTabByTag(java.lang.String)>    	['host']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: long lastModified()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<android.media.RingtoneManager: android.net.Uri getDefaultUri(int)>    	['ring']
<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri)>    	['ring', 'ring']
<android.media.AudioManager: int getRingerMode()>    	['audio']
<android.os.PowerManager$WakeLock: void release()>    	['power']
<android.media.AudioManager: void setRingerMode(int)>    	['audio']
<android.media.AudioManager: void setVibrateSetting(int,int)>    	['audio']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void setLooping(boolean)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.AudioManager: int getVibrateSetting(int)>    	['audio']
<android.media.AudioManager: int getRingerMode()>    	['audio']
<android.media.MediaPlayer: boolean isPlaying()>    	['medium', 'player', 'play']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
<android.media.AudioManager: void setStreamVolume(int,int,int)>    	['audio', 'volume']
<android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>    	['shortcut']
<java.io.File: void <init>(java.lang.String)>    	['file']
<android.net.Uri: android.net.Uri fromFile(java.io.File)>    	['file']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTime(java.util.Date)>    	['calendar']
<java.util.Calendar: int getActualMaximum(int)>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTime(java.util.Date)>    	['calendar']
<java.util.Calendar: void add(int,int)>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTime(java.util.Date)>    	['calendar']
<java.util.Calendar: void add(int,int)>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTime(java.util.Date)>    	['calendar']
<java.util.Calendar: void add(int,int)>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void set(int,int)>    	['calendar']
<java.util.Calendar: int getActualMaximum(int)>    	['calendar']
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
<android.media.RingtoneManager: android.net.Uri getDefaultUri(int)>    	['ring']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.lang.IllegalAccessException: void printStackTrace()>    	['access']
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>    	['shortcut']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
<java.util.Timer: void cancel()>    	['timer']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.RingtoneManager: android.net.Uri getDefaultUri(int)>    	['ring']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void add(int,int)>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: boolean isPlaying()>    	['medium', 'player', 'play']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.database.Cursor: boolean getWantsAllOnMoveCalls()>    	['call']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.ListView: void setChoiceMode(int)>    	['choice']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
