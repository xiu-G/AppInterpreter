<java.util.Calendar: java.util.Calendar getInstance()>	main.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	main.xml:['calendar']	app['calendar']	ui-unmatch
<android.content.ContextWrapper: java.io.FileInputStream openFileInput(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	main.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void <init>(java.io.File)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void flush()>	main.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.media.RingtoneManager: android.net.Uri getDefaultUri(int)>	app:['ring']	app['ring']	ui-unmatch
--------------------------------
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	app:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	app:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	app:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	app:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	app:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app:['calendar']	app['calendar']	ui-unmatch
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	app:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	app:['telephony']	app['telephony']	ui-unmatch
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getName()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	app:['network']	app['network']	ui-unmatch
<android.net.Proxy: java.lang.String getDefaultHost()>	app:['host']	app['host']	ui-unmatch
<android.net.Proxy: int getDefaultPort()>	app:['port']	app['port']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTimeInMillis(long)>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int getActualMaximum(int)>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void set(int,int)>	app:['calendar']	app['calendar']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void addRequestProperty(java.lang.String,java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	app:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getName()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	app:['file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	app:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app:['file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	whitelist_list.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<java.lang.Runtime: long freeMemory()>	call_logs_list.xml:['memory']	app['memory']	ui-unmatch
<com.android.internal.telephony.ITelephony$Stub: com.android.internal.telephony.ITelephony asInterface(android.os.IBinder)>	call_logs_list.xml:['telephony']	app['telephony']	ui-unmatch
<com.android.internal.telephony.ITelephony: void cancelMissedCallsNotification()>	call_logs_list.xml:['telephony', 'call']	app['telephony']	ui-unmatch
--------------------------------
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>	tab_content.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence,android.graphics.drawable.Drawable)>	tab_content.xml:['host', 'indicator']	app['host', 'indicator']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.content.Intent)>	tab_content.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>	tab_content.xml:['host']	app['host']	ui-unmatch
--------------------------------
<android.app.ActivityGroup: void onPause()>	tab_content.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.widget.ListView: void setChoiceMode(int)>	list_content_simple.xml:['choice']	app['choice']	ui-unmatch
--------------------------------
<java.util.Calendar: java.util.Calendar getInstance()>	data_listener_high.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTime(java.util.Date)>	data_listener_high.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void add(int,int)>	data_listener_high.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	data_listener_high.xml:['calendar']	app['calendar']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	app:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>	privacy_conversation_list.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	privacy_conversation_list.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	privacy_conversation_list.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	privacy_conversation_list.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	privacy_conversation_list.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	privacy_conversation_list.xml:['calendar']	app['calendar']	ui-unmatch
<com.android.internal.telephony.ITelephony$Stub: com.android.internal.telephony.ITelephony asInterface(android.os.IBinder)>	privacy_conversation_list.xml:['telephony']	app['telephony']	ui-unmatch
<com.android.internal.telephony.ITelephony: void call(java.lang.String)>	privacy_conversation_list.xml:['telephony', 'call']	app['telephony']	ui-unmatch
--------------------------------
<android.media.RingtoneManager: android.net.Uri getDefaultUri(int)>	app:['ring']	app['ring']	ui-unmatch
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.util.Timer: void cancel()>	app:['timer']	app['timer']	ui-unmatch
<android.media.MediaPlayer: void stop()>	app:['medium']	app['medium']	ui-unmatch
<java.util.Timer: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void scheduleAtFixedRate(java.util.TimerTask,long,long)>	app:['timer', 'rate']	app['timer', 'rate']	ui-unmatch
--------------------------------
<android.telephony.gsm.SmsManager: android.telephony.gsm.SmsManager getDefault()>	app:[]	app[]
<android.telephony.gsm.SmsManager: java.util.ArrayList divideMessage(java.lang.String)>	app:[]	app[]
<android.telephony.gsm.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)>	app:[]	app[]
<android.telephony.gsm.SmsMessage: android.telephony.gsm.SmsMessage createFromPdu(byte[])>	app:[]	app[]
<android.telephony.gsm.SmsMessage: java.lang.String getOriginatingAddress()>	app:['address']	app['address']	ui-unmatch
<android.telephony.gsm.SmsMessage: long getTimestampMillis()>	app:[]	app[]
<android.telephony.gsm.SmsMessage: java.lang.String getMessageBody()>	app:[]	app[]
--------------------------------
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
--------------------------------
<android.widget.RadioButton: void setChecked(boolean)>	app:['radio']	app['radio']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app:['file']	app['file']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	app:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getExtraInfo()>	app:['network']	app['network']	ui-unmatch
--------------------------------
<java.lang.IllegalAccessException: void printStackTrace()>	app:['access']	app['access']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	app:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	app:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	app:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	app:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	app:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app:['file']	app['file']	ui-unmatch
<android.media.RingtoneManager: android.net.Uri getDefaultUri(int)>	app:['ring']	app['ring']	ui-unmatch
<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri)>	app:['ring', 'ring']	app['ring', 'ring']	ui-unmatch
<android.media.AudioManager: int getRingerMode()>	app:['audio']	app['audio']	ui-unmatch
<android.os.PowerManager$WakeLock: void release()>	app:['power']	app['power']	ui-unmatch
<android.media.AudioManager: void setRingerMode(int)>	app:['audio']	app['audio']	ui-unmatch
<android.media.AudioManager: void setVibrateSetting(int,int)>	app:['audio']	app['audio']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	app:['medium']	app['medium']	ui-unmatch
<android.media.MediaPlayer: void setLooping(boolean)>	app:['medium']	app['medium']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	app:['medium']	app['medium']	ui-unmatch
<android.media.MediaPlayer: void start()>	app:['medium']	app['medium']	ui-unmatch
<android.media.AudioManager: int getVibrateSetting(int)>	app:['audio']	app['audio']	ui-unmatch
<android.media.AudioManager: int getRingerMode()>	app:['audio']	app['audio']	ui-unmatch
<android.media.MediaPlayer: boolean isPlaying()>	app:['medium', 'play']	app['medium', 'play']	ui-unmatch
<android.media.MediaPlayer: void stop()>	app:['medium']	app['medium']	ui-unmatch
<android.media.MediaPlayer: void release()>	app:['medium']	app['medium']	ui-unmatch
<android.media.AudioManager: void setStreamVolume(int,int,int)>	app:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	app:['network']	app['network']	ui-unmatch
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>	app:['shortcut']	app['shortcut']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTime(java.util.Date)>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int getActualMaximum(int)>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTime(java.util.Date)>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void add(int,int)>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTime(java.util.Date)>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void add(int,int)>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTime(java.util.Date)>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void add(int,int)>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	app:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
--------------------------------
<android.app.Activity: void onRestoreInstanceState(android.os.Bundle)>	tab_content.xml:['restore']	app['restore']	ui-unmatch
--------------------------------
<android.telephony.TelephonyManager: int getPhoneType()>	intercept_rule.xml:['telephony', 'phone']	app['telephony']	ui-unmatch
--------------------------------
<android.telephony.TelephonyManager: int getPhoneType()>	intercept_rule.xml:['telephony', 'phone']	app['telephony']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	intercept_rule.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	app:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.widget.ListView: void setChoiceMode(int)>	app:['choice']	app['choice']	ui-unmatch
--------------------------------
<android.app.Activity: android.content.ComponentName getCallingActivity()>	tab_content.xml:['call']	app[]	ui-unmatch
--------------------------------
<android.app.ListActivity: void onPause()>	ip_rules_list.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<android.net.Proxy: java.lang.String getDefaultHost()>	main.xml:['host']	app['host']	ui-unmatch
<android.net.Proxy: int getDefaultPort()>	main.xml:['port']	app['port']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	app:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.lang.String getContentType()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	app:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	app:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	app:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app:['file']	app['file']	ui-unmatch
<android.media.RingtoneManager: android.net.Uri getDefaultUri(int)>	app:['ring']	app['ring']	ui-unmatch
<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri)>	app:['ring', 'ring']	app['ring', 'ring']	ui-unmatch
<android.media.AudioManager: int getRingerMode()>	app:['audio']	app['audio']	ui-unmatch
<android.os.PowerManager$WakeLock: void release()>	app:['power']	app['power']	ui-unmatch
<android.media.AudioManager: void setRingerMode(int)>	app:['audio']	app['audio']	ui-unmatch
<android.media.AudioManager: void setVibrateSetting(int,int)>	app:['audio']	app['audio']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	app:['medium']	app['medium']	ui-unmatch
<android.media.MediaPlayer: void setLooping(boolean)>	app:['medium']	app['medium']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	app:['medium']	app['medium']	ui-unmatch
<android.media.MediaPlayer: void start()>	app:['medium']	app['medium']	ui-unmatch
<android.media.AudioManager: int getVibrateSetting(int)>	app:['audio']	app['audio']	ui-unmatch
<android.media.AudioManager: int getRingerMode()>	app:['audio']	app['audio']	ui-unmatch
<android.media.MediaPlayer: boolean isPlaying()>	app:['medium', 'play']	app['medium', 'play']	ui-unmatch
<android.media.MediaPlayer: void stop()>	app:['medium']	app['medium']	ui-unmatch
<android.media.MediaPlayer: void release()>	app:['medium']	app['medium']	ui-unmatch
<android.media.AudioManager: void setStreamVolume(int,int,int)>	app:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	app:['network']	app['network']	ui-unmatch
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>	app:['shortcut']	app['shortcut']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTime(java.util.Date)>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int getActualMaximum(int)>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTime(java.util.Date)>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void add(int,int)>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTime(java.util.Date)>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void add(int,int)>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTime(java.util.Date)>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void add(int,int)>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
--------------------------------
<com.android.internal.telephony.ITelephony: void call(java.lang.String)>	app:['telephony']	app['telephony']	ui-unmatch
<java.util.Timer: void cancel()>	app:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void scheduleAtFixedRate(java.util.TimerTask,long,long)>	app:['timer', 'rate']	app['timer', 'rate']	ui-unmatch
--------------------------------
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.telephony.gsm.SmsMessage: int[] calculateLength(java.lang.CharSequence,boolean)>	privacy_conversation_list.xml:['sms']	app[]	ui-unmatch
--------------------------------
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	app:['telephony']	app['telephony']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	app:[]	app[]
<android.telephony.SmsManager: java.util.ArrayList divideMessage(java.lang.String)>	app:[]	app[]
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	app:[]	app[]
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	app:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	app:['telephony']	app['telephony']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	privacy_book_list.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.telephony.PhoneNumberUtils: boolean isDialable(char)>	app:[]	app[]
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	app:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void addRequestProperty(java.lang.String,java.lang.String)>	main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	main.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	main.xml:['file']	app['file']	ui-unmatch
<java.util.zip.ZipFile: void <init>(java.io.File)>	main.xml:['file']	app['file']	ui-unmatch
<java.util.zip.ZipFile: java.util.zip.ZipEntry getEntry(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.util.zip.ZipFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>	main.xml:['file']	app['file']	ui-unmatch
<java.util.zip.ZipFile: void close()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	main.xml:['storage']	app['storage']	ui-unmatch
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean isFile()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getName()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	main.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.widget.ListView: void setChoiceMode(int)>	smsscan_feesmsscan_screen.xml:['choice']	app['choice']	ui-unmatch
--------------------------------
<android.widget.ListView: int getChoiceMode()>	smsscan_feesmsscan_screen.xml:['choice']	app['choice']	ui-unmatch
<android.widget.ListView: void setChoiceMode(int)>	smsscan_feesmsscan_screen.xml:['choice']	app['choice']	ui-unmatch
--------------------------------
<android.widget.AbsListView: int getChoiceMode()>	smsscan_feesmsscan_screen.xml:['choice']	app['choice']	ui-unmatch
<android.widget.AbsListView: int getChoiceMode()>	smsscan_feesmsscan_screen.xml:['choice']	app['choice']	ui-unmatch
--------------------------------
<android.widget.AbsListView: int getChoiceMode()>	smsscan_feesmsscan_screen.xml:['choice']	app['choice']	ui-unmatch
--------------------------------
<android.widget.AbsListView: int getChoiceMode()>	smsscan_feesmsscan_screen.xml:['choice']	app['choice']	ui-unmatch
--------------------------------
<android.media.RingtoneManager: android.net.Uri getDefaultUri(int)>	communication_strengthen.xml:['ring']	app['ring']	ui-unmatch
--------------------------------
<android.telephony.PhoneNumberUtils: java.lang.String extractNetworkPortion(java.lang.String)>	smart_dialer.xml:['network']	app['network']	ui-unmatch
<android.telephony.PhoneNumberUtils: java.lang.String formatNumber(java.lang.String)>	smart_dialer.xml:[]	app[]
--------------------------------
<android.app.Activity: void setVolumeControlStream(int)>	app:['volume']	app['volume']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	smart_dialer.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	blacklist_list.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	list_content_simple.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>	tab_content.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence,android.graphics.drawable.Drawable)>	tab_content.xml:['host', 'indicator']	app['host', 'indicator']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.content.Intent)>	tab_content.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>	tab_content.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void setCurrentTabByTag(java.lang.String)>	tab_content.xml:['host']	app['host']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	call_info_font_set.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	app:['pause']	app['pause']	ui-unmatch
--------------------------------
<java.lang.Runtime: long freeMemory()>	call_logs_list.xml:['memory']	app['memory']	ui-unmatch
--------------------------------
<java.lang.Runtime: long freeMemory()>	app:['memory']	app['memory']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	call_info_display_set.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(int,int,android.content.DialogInterface$OnClickListener)>	privacy_book_list.xml:['choice']	app['choice']	ui-unmatch
--------------------------------
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	app:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	app:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	app:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	data_listener_high.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<java.util.Timer: void cancel()>	main.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>()>	main.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	main.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void scheduleAtFixedRate(java.util.TimerTask,long,long)>	main.xml:['timer', 'rate']	app['timer', 'rate']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[],int,int)>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	app:['file']	app['file']	ui-unmatch
<java.io.FileReader: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.FileReader: void close()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	smsscan_setting.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	sys_conversation_list.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>	main.xml:['storage']	app['storage']	ui-unmatch
--------------------------------
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>	app:['location']	app['location']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	app:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.widget.ListView: void setChoiceMode(int)>	ip_rules_list.xml:['choice']	app['choice']	ui-unmatch
--------------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>	main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	main.xml:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	app:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.widget.TimePicker: void setIs24HourView(java.lang.Boolean)>	time_period_edit.xml:['hour']	app['hour']	ui-unmatch
--------------------------------
<android.widget.TimePicker: void setCurrentHour(java.lang.Integer)>	time_period_edit.xml:['hour']	app['hour']	ui-unmatch
<android.widget.TimePicker: void setCurrentHour(java.lang.Integer)>	time_period_edit.xml:['hour']	app['hour']	ui-unmatch
--------------------------------
<java.util.Calendar: java.util.Calendar getInstance()>	ip_time_set_list.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	ip_time_set_list.xml:['calendar']	app['calendar']	ui-unmatch
--------------------------------
<java.util.Calendar: java.util.Calendar getInstance()>	intercept_task_add.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	intercept_task_add.xml:['calendar']	app['calendar']	ui-unmatch
--------------------------------
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>	app:['shortcut']	app['shortcut']	ui-unmatch
--------------------------------
<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri)>	app:['ring', 'ring']	app['ring', 'ring']	ui-unmatch
--------------------------------
<android.widget.RadioButton: void setChecked(boolean)>	intercept_rule_edit.xml:['radio']	app['radio']	ui-unmatch
--------------------------------
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	code_lib_edit_list.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	app:['pause']	app['pause']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.telephony.TelephonyManager: int getCallState()>	app:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: void listen(android.telephony.PhoneStateListener,int)>	app:['telephony']	app['telephony']	ui-unmatch
<java.util.Timer: void cancel()>	app:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.provider.Contacts$People: java.io.InputStream openContactPhotoInputStream(android.content.ContentResolver,android.net.Uri)>	call_collection_list.xml:['contact', 'contact', 'photo']	app['photo']	ui-unmatch
--------------------------------
<android.telephony.SmsMessage: android.telephony.SmsMessage createFromPdu(byte[])>	app:[]	app[]
<android.telephony.SmsMessage: java.lang.String getDisplayOriginatingAddress()>	app:['address']	app['address']	ui-unmatch
<android.telephony.SmsMessage: java.lang.String getDisplayMessageBody()>	app:[]	app[]
<android.telephony.SmsMessage: java.lang.String getMessageBody()>	app:[]	app[]
<android.telephony.SmsMessage: java.lang.String getDisplayOriginatingAddress()>	app:['address']	app['address']	ui-unmatch
<android.media.RingtoneManager: android.net.Uri getDefaultUri(int)>	app:['ring']	app['ring']	ui-unmatch
<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri)>	app:['ring', 'ring']	app['ring', 'ring']	ui-unmatch
--------------------------------
<android.app.Dialog: void onRestoreInstanceState(android.os.Bundle)>	alert_dialog.xml:['restore']	app['restore']	ui-unmatch
--------------------------------
<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>	app:['power']	app['power']	ui-unmatch
<android.os.PowerManager$WakeLock: void acquire()>	app:['power']	app['power']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	call_logs_list.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>	main.xml:['storage']	app['storage']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	main.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<java.util.Calendar: void set(int,int)>	app:['calendar']	app['calendar']	ui-unmatch
<android.telephony.PhoneStateListener: void <init>()>	app:[]	app[]
<android.telephony.TelephonyManager: void listen(android.telephony.PhoneStateListener,int)>	app:['telephony']	app['telephony']	ui-unmatch
<android.media.AudioManager: int getStreamVolume(int)>	app:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
<java.util.Timer: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void scheduleAtFixedRate(java.util.TimerTask,long,long)>	app:['timer', 'rate']	app['timer', 'rate']	ui-unmatch
--------------------------------
<java.lang.Runtime: long freeMemory()>	call_logs_list.xml:['memory']	app['memory']	ui-unmatch
--------------------------------
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: boolean isPlaying()>	app:['medium', 'play']	app['medium', 'play']	ui-unmatch
<android.media.MediaPlayer: void stop()>	app:['medium']	app['medium']	ui-unmatch
<android.media.MediaPlayer: void release()>	app:['medium']	app['medium']	ui-unmatch
--------------------------------
<com.android.internal.telephony.ITelephony$Stub: com.android.internal.telephony.ITelephony asInterface(android.os.IBinder)>	app:['telephony']	app['telephony']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
--------------------------------
<android.telephony.TelephonyManager: void listen(android.telephony.PhoneStateListener,int)>	app:['telephony']	app['telephony']	ui-unmatch
<java.util.Timer: void cancel()>	app:['timer']	app['timer']	ui-unmatch
<android.os.PowerManager$WakeLock: void release()>	app:['power']	app['power']	ui-unmatch
--------------------------------
<android.media.AudioManager: int getStreamVolume(int)>	app:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
<android.media.AudioManager: void setStreamVolume(int,int,int)>	app:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
<android.media.AudioManager: int getRingerMode()>	app:['audio']	app['audio']	ui-unmatch
<android.media.AudioManager: int getVibrateSetting(int)>	app:['audio']	app['audio']	ui-unmatch
<android.media.AudioManager: void setRingerMode(int)>	app:['audio']	app['audio']	ui-unmatch
<android.media.AudioManager: void setVibrateSetting(int,int)>	app:['audio']	app['audio']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	app:['medium']	app['medium']	ui-unmatch
<android.media.AudioManager: int getStreamMaxVolume(int)>	app:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
<android.telephony.TelephonyManager: int getCallState()>	app:['telephony']	app['telephony']	ui-unmatch
<android.telephony.PhoneStateListener: void <init>()>	app:[]	app[]
<java.util.TimerTask: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void scheduleAtFixedRate(java.util.TimerTask,long,long)>	app:['timer', 'rate']	app['timer', 'rate']	ui-unmatch
<com.android.internal.telephony.ITelephony: boolean endCall()>	app:['telephony']	app['telephony']	ui-unmatch
--------------------------------
<android.media.AudioManager: int getMode()>	app:['audio']	app['audio']	ui-unmatch
--------------------------------
<android.widget.RadioButton: void setChecked(boolean)>	intercept_rule_edit.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setChecked(boolean)>	intercept_rule_edit.xml:['radio']	app['radio']	ui-unmatch
--------------------------------
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>	code_libs_man.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	code_libs_man.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	code_libs_man.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	code_libs_man.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	code_libs_man.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	code_libs_man.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	code_libs_man.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	code_libs_man.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean isFile()>	code_libs_man.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getName()>	code_libs_man.xml:['file']	app['file']	ui-unmatch
<android.widget.ListView: void setChoiceMode(int)>	code_libs_man.xml:['choice']	app['choice']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	call_info_set.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	app:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.media.AudioManager: int getMode()>	app:['audio']	app['audio']	ui-unmatch
--------------------------------
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	code_lib_edit_list.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	code_lib_edit_list.xml:['file']	app['file']	ui-unmatch
--------------------------------
<com.android.internal.telephony.ITelephony: void cancelMissedCallsNotification()>	app:['telephony']	app['telephony']	ui-unmatch
--------------------------------
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>	tab_content.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence,android.graphics.drawable.Drawable)>	tab_content.xml:['host', 'indicator']	app['host', 'indicator']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.content.Intent)>	tab_content.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>	tab_content.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void setCurrentTabByTag(java.lang.String)>	tab_content.xml:['host']	app['host']	ui-unmatch
--------------------------------
<java.io.File: long lastModified()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	app:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app:['file']	app['file']	ui-unmatch
<android.media.RingtoneManager: android.net.Uri getDefaultUri(int)>	app:['ring']	app['ring']	ui-unmatch
<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri)>	app:['ring', 'ring']	app['ring', 'ring']	ui-unmatch
<android.media.AudioManager: int getRingerMode()>	app:['audio']	app['audio']	ui-unmatch
<android.os.PowerManager$WakeLock: void release()>	app:['power']	app['power']	ui-unmatch
<android.media.AudioManager: void setRingerMode(int)>	app:['audio']	app['audio']	ui-unmatch
<android.media.AudioManager: void setVibrateSetting(int,int)>	app:['audio']	app['audio']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	app:['medium']	app['medium']	ui-unmatch
<android.media.MediaPlayer: void setLooping(boolean)>	app:['medium']	app['medium']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	app:['medium']	app['medium']	ui-unmatch
<android.media.MediaPlayer: void start()>	app:['medium']	app['medium']	ui-unmatch
<android.media.AudioManager: int getVibrateSetting(int)>	app:['audio']	app['audio']	ui-unmatch
<android.media.AudioManager: int getRingerMode()>	app:['audio']	app['audio']	ui-unmatch
<android.media.MediaPlayer: boolean isPlaying()>	app:['medium', 'play']	app['medium', 'play']	ui-unmatch
<android.media.MediaPlayer: void stop()>	app:['medium']	app['medium']	ui-unmatch
<android.media.MediaPlayer: void release()>	app:['medium']	app['medium']	ui-unmatch
<android.media.AudioManager: void setStreamVolume(int,int,int)>	app:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	app:['network']	app['network']	ui-unmatch
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>	app:['shortcut']	app['shortcut']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTime(java.util.Date)>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int getActualMaximum(int)>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTime(java.util.Date)>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void add(int,int)>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTime(java.util.Date)>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void add(int,int)>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTime(java.util.Date)>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void add(int,int)>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
--------------------------------
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void set(int,int)>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int getActualMaximum(int)>	app:['calendar']	app['calendar']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	list_content_simple.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.media.RingtoneManager: android.net.Uri getDefaultUri(int)>	app:['ring']	app['ring']	ui-unmatch
--------------------------------
<java.lang.IllegalAccessException: void printStackTrace()>	app:['access']	app['access']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	intercept_task_list.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>	app:['shortcut']	app['shortcut']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void <init>()>	app:['medium']	app['medium']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	set.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<java.util.Timer: void cancel()>	app:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.media.RingtoneManager: android.net.Uri getDefaultUri(int)>	communication_strengthen.xml:['ring']	app['ring']	ui-unmatch
--------------------------------
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void add(int,int)>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	intercept_bwlist_list.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: boolean isPlaying()>	app:['medium', 'play']	app['medium', 'play']	ui-unmatch
<android.media.MediaPlayer: void stop()>	app:['medium']	app['medium']	ui-unmatch
<android.media.MediaPlayer: void release()>	app:['medium']	app['medium']	ui-unmatch
--------------------------------
<android.widget.ListView: void setChoiceMode(int)>	call_collection_list.xml:['choice']	app['choice']	ui-unmatch
--------------------------------
