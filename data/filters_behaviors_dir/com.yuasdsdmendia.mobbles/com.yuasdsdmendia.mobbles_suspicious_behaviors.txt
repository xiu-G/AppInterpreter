<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.widget.TextView: void setShadowLayer(float,float,float,int)>	app:['shadow']	app['shadow']	ui-unmatch
<android.media.MediaPlayer: void start()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.SoundPool: void release()>	app:['sound']	app['sound']	ui-unmatch
<android.media.SoundPool: void <init>(int,int,int)>	app:['sound']	app['sound']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	empty_room2.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	empty_room2.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: java.io.FileDescriptor getFD()>	empty_room2.xml:['file']	app['file']	ui-unmatch
<android.media.SoundPool: int load(java.io.FileDescriptor,long,long,int)>	empty_room2.xml:['sound']	app['sound']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app:[]	app[]
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:[]	app[]
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	app:['file']	app['file']	ui-unmatch
<android.media.MediaPlayer: void release()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void setLooping(boolean)>	shopv3.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setVolume(float,float)>	shopv3.xml:['medium', 'player', 'volume']	app['medium', 'player', 'volume']	ui-unmatch
<android.location.LocationManager: java.util.List getAllProviders()>	app:[]	app[]
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	app:[]	app[]
--------------------------------
<android.media.MediaPlayer: int getCurrentPosition()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void pause()>	app:['medium', 'player', 'pause']	app['medium', 'player', 'pause']	ui-unmatch
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void start()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<android.addextras.access_token: void <init>()>	app:['access']	app['access']	ui-unmatch
<android.addextras.failing_url: void <init>()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.media.SoundPool: int load(android.content.Context,int,int)>	app:['sound']	app['sound']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app:['sound']	app['sound']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void reset()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.graphics.Canvas: void restore()>	app:['restore']	app['restore']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app:['sound']	app['sound']	ui-unmatch
<java.util.TimerTask: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	app:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.media.SoundPool: void <init>(int,int,int)>	newduel_activity.xml:['sound']	app['sound']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	newduel_activity.xml:['calendar']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLDecoder: java.lang.String decode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	app:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getErrorStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<android.addextras.access_token: void <init>()>	app:['access']	app['access']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	webnewduel_activity.xml:['url']	app['url']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	webnewduel_activity.xml:['script']	app['script']	ui-unmatch
<android.media.SoundPool: void <init>(int,int,int)>	capture.xml:['sound']	app['sound']	ui-unmatch
<android.media.SoundPool: int load(android.content.Context,int,int)>	capture.xml:['sound']	app['sound']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	capture.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	capture.xml:['sensor']	app['sensor']	ui-unmatch
<android.addextras.address: void <init>()>	capture.xml:['address']	app['address']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void seekTo(int)>	empty_room2.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.graphics.Canvas: void restore()>	app:['restore']	app['restore']	ui-unmatch
<android.location.Location: void <init>(java.lang.String)>	app:[]	app[]
<android.location.Location: void setLatitude(double)>	app:['latitude']	app['latitude']	ui-unmatch
<android.location.Location: void setLongitude(double)>	app:['longitude']	app['longitude']	ui-unmatch
<android.location.Location: float distanceTo(android.location.Location)>	app:[]	app[]
--------------------------------
<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>	app:['submit']	app['submit']	ui-unmatch
--------------------------------
<android.view.View: void getLocationOnScreen(int[])>	empty_room2.xml:['location']	app[]	ui-unmatch
--------------------------------
<android.media.SoundPool: int play(int,float,float,int,int,float)>	empty_room2.xml:['sound', 'play']	app['sound']	ui-unmatch
--------------------------------
<android.media.SoundPool: int play(int,float,float,int,int,float)>	newduel_activity.xml:['sound', 'play']	app['sound']	ui-unmatch
--------------------------------
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.util.Timer: void cancel()>	app:['timer']	app['timer']	ui-unmatch
<java.util.Timer: int purge()>	app:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void prepareAsync()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<android.os.SystemClock: long elapsedRealtime()>	app:['clock']	app['clock']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	app:['language']	app['language']	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	app:['country']	app['country']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnected()>	app:['network', 'connect']	app['network', 'connect']	ui-unmatch
<android.net.Uri: java.lang.String getHost()>	app:['host']	app['host']	ui-unmatch
--------------------------------
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	app:[]	app[]
<android.os.SystemClock: long elapsedRealtime()>	app:['clock']	app['clock']	ui-unmatch
--------------------------------
<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>	webnewduel_activity.xml:['submit']	app['submit']	ui-unmatch
--------------------------------
<android.graphics.Paint: void setShadowLayer(float,float,float,int)>	app:['shadow']	app['shadow']	ui-unmatch
--------------------------------
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: java.io.FileDescriptor getFD()>	app:['file']	app['file']	ui-unmatch
<java.io.FileDescriptor: void sync()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app:['sound']	app['sound']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	empty_room2.xml:['pause']	app['pause']	ui-unmatch
<java.util.Timer: int purge()>	empty_room2.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void cancel()>	empty_room2.xml:['timer']	app['timer']	ui-unmatch
<android.media.MediaPlayer: boolean isPlaying()>	empty_room2.xml:['medium', 'player', 'play']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void stop()>	empty_room2.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.hardware.Camera: android.hardware.Camera open()>	capture.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>	capture.xml:['camera']	app[]	ui-unmatch
--------------------------------
<java.util.Timer: void <init>()>	empty_room2.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	empty_room2.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	empty_room2.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	empty_room2.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void scheduleAtFixedRate(java.util.TimerTask,long,long)>	empty_room2.xml:['timer', 'rate']	app['timer']	ui-unmatch
--------------------------------
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app:['file']	app['file']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app:['file']	app['file']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app:['sound']	app['sound']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app:['sound']	app['sound']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	empty_room2.xml:['sound', 'play']	app['sound']	ui-unmatch
--------------------------------
<android.media.SoundPool: void stop(int)>	app:['sound']	app['sound']	ui-unmatch
<android.media.MediaPlayer: void stop()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.graphics.Paint: void setShadowLayer(float,float,float,int)>	app:['shadow']	app['shadow']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app:['sound']	app['sound']	ui-unmatch
--------------------------------
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app:['sound']	app['sound']	ui-unmatch
--------------------------------
<android.os.SystemClock: long elapsedRealtime()>	empty_room2.xml:['clock']	app['clock']	ui-unmatch
<android.media.SoundPool: void release()>	empty_room2.xml:['sound']	app['sound']	ui-unmatch
<android.media.MediaPlayer: void stop()>	empty_room2.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	empty_room2.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<java.util.Timer: void cancel()>	app:['timer']	app['timer']	ui-unmatch
<android.media.SoundPool: void release()>	app:['sound']	app['sound']	ui-unmatch
--------------------------------
<java.net.UnknownHostException: void printStackTrace()>	app:['host']	app['host']	ui-unmatch
--------------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>	splash_activity.xml:['storage']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	splash_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	splash_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	splash_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	splash_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	splash_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	splash_activity.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File,boolean)>	splash_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	splash_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	splash_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	splash_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	splash_activity.xml:['file']	app['file']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSimOperator()>	splash_activity.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	splash_activity.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	splash_activity.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getLine1Number()>	splash_activity.xml:['telephony']	app['telephony']	ui-unmatch
<android.location.Criteria: void setPowerRequirement(int)>	splash_activity.xml:['power']	app['power']	ui-unmatch
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>	splash_activity.xml:['location']	app[]	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	splash_activity.xml:['location', 'location']	app[]	ui-unmatch
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>	splash_activity.xml:['address']	app['address']	ui-unmatch
<java.util.Timer: void <init>()>	splash_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	splash_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	splash_activity.xml:['timer']	app['timer']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	splash_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void deleteOnExit()>	splash_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	splash_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	splash_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	splash_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	splash_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: void deleteOnExit()>	splash_activity.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	splash_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	splash_activity.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	splash_activity.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app:['sound']	app['sound']	ui-unmatch
--------------------------------
<android.graphics.Canvas: void restore()>	app:['restore']	app['restore']	ui-unmatch
--------------------------------
<java.util.Timer: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	app:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.location.Location: java.lang.String getProvider()>	app:[]	app[]
<android.location.Location: float getAccuracy()>	app:[]	app[]
<android.location.Location: double getLongitude()>	app:['longitude']	app['longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	app:['latitude']	app['latitude']	ui-unmatch
<android.location.Location: float distanceTo(android.location.Location)>	app:[]	app[]
<android.location.Location: double getLatitude()>	app:['latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app:['longitude']	app['longitude']	ui-unmatch
<android.location.Location: long getTime()>	app:[]	app[]
--------------------------------
<android.media.MediaPlayer: int getDuration()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app:['sound']	app['sound']	ui-unmatch
<android.media.SoundPool: void resume(int)>	app:['sound']	app['sound']	ui-unmatch
<android.media.SoundPool: void pause(int)>	app:['sound', 'pause']	app['sound', 'pause']	ui-unmatch
--------------------------------
<java.io.FileOutputStream: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void setAudioStreamType(int)>	app:['medium', 'player', 'audio']	app['medium', 'player', 'audio']	ui-unmatch
--------------------------------
<java.util.Timer: void cancel()>	newduel_activity.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.accounts.AccountManager: android.accounts.AccountManager get(android.content.Context)>	signup.xml:['account']	app['account']	ui-unmatch
<android.accounts.AccountManager: android.accounts.Account[] getAccountsByType(java.lang.String)>	signup.xml:['account', 'account']	app['account', 'account']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void prepare()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.view.View: void getLocationOnScreen(int[])>	grid_activity.xml:['location']	app[]	ui-unmatch
--------------------------------
<android.os.PowerManager$WakeLock: void release()>	app:['power']	app['power']	ui-unmatch
<android.app.Activity: void onPause()>	app:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: boolean isLooping()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.hardware.Camera: void stopPreview()>	capture.xml:['camera']	app[]	ui-unmatch
--------------------------------
<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>	app:['power']	app['power']	ui-unmatch
<android.os.PowerManager$WakeLock: void acquire()>	app:['power']	app['power']	ui-unmatch
--------------------------------
<android.media.SoundPool: int load(android.content.Context,int,int)>	app:['sound']	app['sound']	ui-unmatch
--------------------------------
<android.media.SoundPool: int play(int,float,float,int,int,float)>	capture.xml:['sound', 'play']	app['sound']	ui-unmatch
--------------------------------
<java.util.TimerTask: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	splash_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	app:['timer']	app['timer']	ui-unmatch
--------------------------------
<java.util.Timer: void <init>()>	app:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>	capture.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewSizes()>	capture.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>	capture.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera$Parameters: void setRotation(int)>	capture.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setDisplayOrientation(int)>	capture.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>	capture.xml:['camera']	app[]	ui-unmatch
<android.hardware.Camera: void startPreview()>	capture.xml:['camera']	app[]	ui-unmatch
--------------------------------
<android.widget.TextView: void setShadowLayer(float,float,float,int)>	app:['shadow']	app['shadow']	ui-unmatch
--------------------------------
<android.widget.TextView: void setShadowLayer(float,float,float,int)>	empty_room2.xml:['shadow']	app['shadow']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	empty_room2.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: int get(int)>	empty_room2.xml:['calendar']	app[]	ui-unmatch
<android.graphics.Paint: void setShadowLayer(float,float,float,int)>	empty_room2.xml:['shadow']	app['shadow']	ui-unmatch
<android.media.SoundPool: void <init>(int,int,int)>	empty_room2.xml:['sound']	app['sound']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	empty_room2.xml:['sound', 'play']	app['sound']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void pause()>	app:['medium', 'player', 'pause']	app['medium', 'player', 'pause']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URL: java.lang.String toString()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.lang.String getFile()>	app:['url', 'file']	app['url', 'file']	ui-unmatch
<java.net.HttpURLConnection: void addRequestProperty(java.lang.String,java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	app:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	app:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor)>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.media.SoundPool: void pause(int)>	app:['sound', 'pause']	app['sound', 'pause']	ui-unmatch
<android.media.SoundPool: int load(android.content.Context,int,int)>	app:['sound']	app['sound']	ui-unmatch
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app:['sound']	app['sound']	ui-unmatch
--------------------------------
<android.media.SoundPool: int play(int,float,float,int,int,float)>	empty_room2.xml:['sound', 'play']	app['sound']	ui-unmatch
<android.graphics.Paint: void setShadowLayer(float,float,float,int)>	empty_room2.xml:['shadow']	app['shadow']	ui-unmatch
--------------------------------
<android.location.Geocoder: java.util.List getFromLocation(double,double,int)>	app:[]	app[]
<android.location.Address: java.lang.String getAddressLine(int)>	app:['address', 'address']	app['address', 'address']	ui-unmatch
<android.location.Address: java.lang.String getLocality()>	app:['address']	app['address']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.lang.String toString()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void addRequestProperty(java.lang.String,java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	app:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	app:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app:['file']	app['file']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	app:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
--------------------------------
<android.os.SystemClock: long elapsedRealtime()>	app:['clock']	app['clock']	ui-unmatch
--------------------------------
<android.media.SoundPool: int play(int,float,float,int,int,float)>	app:['sound']	app['sound']	ui-unmatch
--------------------------------
<java.util.Locale: java.lang.String getLanguage()>	app:['language']	app['language']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	app:['permission']	app['permission']	ui-unmatch
<android.content.pm.PackageManager: android.content.pm.PermissionInfo getPermissionInfo(java.lang.String,int)>	app:['permission']	app['permission']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	app:['permission']	app['permission']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	app:['permission']	app['permission']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	app:['permission']	app['permission']	ui-unmatch
<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>	app:['power']	app['power']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnected()>	app:['network', 'connect']	app['network', 'connect']	ui-unmatch
<android.os.PowerManager$WakeLock: void acquire()>	app:['power']	app['power']	ui-unmatch
<android.os.SystemClock: long elapsedRealtime()>	app:['clock']	app['clock']	ui-unmatch
<android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)>	app:['alarm']	app['alarm']	ui-unmatch
<java.net.Socket: boolean isConnected()>	app:['connect']	app['connect']	ui-unmatch
<android.content.pm.PackageManager: android.content.pm.PermissionInfo getPermissionInfo(java.lang.String,int)>	app:['permission']	app['permission']	ui-unmatch
<java.net.NetworkInterface: java.util.Enumeration getNetworkInterfaces()>	app:['network', 'network']	app['network', 'network']	ui-unmatch
<java.net.NetworkInterface: java.util.Enumeration getInetAddresses()>	app:['network', 'address']	app['network', 'address']	ui-unmatch
<java.net.InetAddress: boolean isLoopbackAddress()>	app:['address', 'address']	app['address', 'address']	ui-unmatch
<java.net.InetAddress: java.lang.String getHostAddress()>	app:['address', 'host', 'address']	app['address', 'host', 'address']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	app:['network']	app['network']	ui-unmatch
<android.app.AlarmManager: void cancel(android.app.PendingIntent)>	app:['alarm']	app['alarm']	ui-unmatch
<java.net.InetSocketAddress: void <init>(java.lang.String,int)>	app:['address']	app['address']	ui-unmatch
<java.net.Socket: void connect(java.net.SocketAddress,int)>	app:['connect']	app['connect']	ui-unmatch
<java.net.Socket: java.net.InetAddress getInetAddress()>	app:['address']	app['address']	ui-unmatch
<java.net.Socket: boolean isConnected()>	app:['connect']	app['connect']	ui-unmatch
<java.util.Timer: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	app:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri)>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void release()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.graphics.Canvas: void restore()>	app:['restore']	app['restore']	ui-unmatch
--------------------------------
<java.util.Calendar: java.util.Calendar getInstance()>	app:[]	app[]
<java.util.Calendar: int get(int)>	app:[]	app[]
<java.util.Calendar: int get(int)>	app:[]	app[]
<java.util.Calendar: java.util.Calendar getInstance()>	app:[]	app[]
<java.util.Calendar: int get(int)>	app:[]	app[]
<android.telephony.TelephonyManager: int getCallState()>	app:['telephony', 'call']	app['telephony', 'call']	ui-unmatch
<android.os.SystemClock: long elapsedRealtime()>	app:['clock']	app['clock']	ui-unmatch
<android.location.Location: void <init>(java.lang.String)>	app:[]	app[]
<android.location.Location: void setLongitude(double)>	app:['longitude']	app['longitude']	ui-unmatch
<android.location.Location: void setLatitude(double)>	app:['latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLatitude()>	app:['latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app:['longitude']	app['longitude']	ui-unmatch
--------------------------------
<java.util.Timer: void <init>()>	newduel_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	newduel_activity.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void scheduleAtFixedRate(java.util.TimerTask,long,long)>	newduel_activity.xml:['timer', 'rate']	app['timer']	ui-unmatch
--------------------------------
