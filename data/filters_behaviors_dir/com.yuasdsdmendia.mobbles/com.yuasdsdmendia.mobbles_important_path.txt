----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.widget.TextView: void setShadowLayer(float,float,float,int)>    	['shadow']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.SoundPool: void release()>    	['sound']
<android.media.SoundPool: void <init>(int,int,int)>    	['sound']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: java.io.FileDescriptor getFD()>    	['file']
<android.media.SoundPool: int load(java.io.FileDescriptor,long,long,int)>    	['sound']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
----------------------------
<android.media.MediaPlayer: void setLooping(boolean)>    	['medium', 'player']
<android.media.MediaPlayer: void setVolume(float,float)>    	['medium', 'player', 'volume']
<android.location.LocationManager: java.util.List getAllProviders()>    	['location']
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>    	['location', 'location']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: int getCurrentPosition()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void pause()>    	['medium', 'player', 'pause']
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
----------------------------
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
<android.addextras.access_token: void <init>()>    	['access']
<android.addextras.failing_url: void <init>()>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.SoundPool: int load(android.content.Context,int,int)>    	['sound']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void reset()>    	['medium', 'player']
----------------------------
----------------------------
<android.graphics.Canvas: void restore()>    	['restore']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.view.View: void getLocationOnScreen(int[])>    	['location']
----------------------------
<android.media.SoundPool: void <init>(int,int,int)>    	['sound']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean delete()>    	['file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.URLDecoder: java.lang.String decode(java.lang.String)>    	['url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoInput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void connect()>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getErrorStream()>    	['http', 'url']
<android.addextras.access_token: void <init>()>    	['access']
<android.webkit.WebView: void loadUrl(java.lang.String)>    	['url']
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>    	['script']
<android.media.SoundPool: void <init>(int,int,int)>    	['sound']
<android.media.SoundPool: int load(android.content.Context,int,int)>    	['sound']
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>    	['sensor', 'sensor']
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>    	['sensor']
<android.addextras.address: void <init>()>    	['address']
----------------------------
<android.media.MediaPlayer: void seekTo(int)>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.graphics.Canvas: void restore()>    	['restore']
<android.location.Location: void <init>(java.lang.String)>    	['location']
<android.location.Location: void setLatitude(double)>    	['location', 'latitude']
<android.location.Location: void setLongitude(double)>    	['location', 'longitude']
<android.location.Location: float distanceTo(android.location.Location)>    	['location']
----------------------------
<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>    	['submit']
----------------------------
----------------------------
<android.view.View: void getLocationOnScreen(int[])>    	['location']
----------------------------
----------------------------
----------------------------
<android.view.View: void getLocationOnScreen(int[])>    	['location']
----------------------------
----------------------------
----------------------------
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
----------------------------
----------------------------
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: boolean exists()>    	['file']
----------------------------
----------------------------
----------------------------
<java.util.Timer: void cancel()>    	['timer']
<java.util.Timer: int purge()>    	['timer']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void prepareAsync()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>    	['file']
<android.os.SystemClock: long elapsedRealtime()>    	['clock']
<java.util.Locale: java.lang.String getLanguage()>    	['language']
<java.util.Locale: java.lang.String getCountry()>    	['country']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: boolean isConnected()>    	['network', 'connect']
<android.net.Uri: java.lang.String getHost()>    	['host']
----------------------------
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<android.os.SystemClock: long elapsedRealtime()>    	['clock']
----------------------------
<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>    	['submit']
----------------------------
----------------------------
<android.graphics.Paint: void setShadowLayer(float,float,float,int)>    	['shadow']
----------------------------
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: java.io.FileDescriptor getFD()>    	['file']
<java.io.FileDescriptor: void sync()>    	['file']
----------------------------
----------------------------
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
<java.util.Timer: int purge()>    	['timer']
<java.util.Timer: void cancel()>    	['timer']
<android.media.MediaPlayer: boolean isPlaying()>    	['medium', 'player', 'play']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>    	['camera']
----------------------------
----------------------------
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void scheduleAtFixedRate(java.util.TimerTask,long,long)>    	['timer', 'rate']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<android.net.Uri: android.net.Uri fromFile(java.io.File)>    	['file']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
----------------------------
----------------------------
<android.media.SoundPool: void stop(int)>    	['sound']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.graphics.Paint: void setShadowLayer(float,float,float,int)>    	['shadow']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
----------------------------
----------------------------
<java.util.Calendar: void setTime(java.util.Date)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
----------------------------
----------------------------
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
----------------------------
----------------------------
<android.os.SystemClock: long elapsedRealtime()>    	['clock']
<android.media.SoundPool: void release()>    	['sound']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Timer: void cancel()>    	['timer']
<android.media.SoundPool: void release()>    	['sound']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.view.View: void getLocationOnScreen(int[])>    	['location']
----------------------------
----------------------------
----------------------------
----------------------------
<java.net.UnknownHostException: void printStackTrace()>    	['host']
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File,boolean)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: long length()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.telephony.TelephonyManager: java.lang.String getSimOperator()>    	['telephony']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>    	['telephony']
<android.telephony.TelephonyManager: java.lang.String getLine1Number()>    	['telephony']
<android.location.Criteria: void setPowerRequirement(int)>    	['power']
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>    	['location']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>    	['address']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.io.File: void <init>(java.io.File,java.lang.String)>    	['file']
<java.io.File: void deleteOnExit()>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.io.File,java.lang.String)>    	['file']
<java.io.File: void deleteOnExit()>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
----------------------------
----------------------------
----------------------------
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.graphics.Canvas: void restore()>    	['restore']
----------------------------
----------------------------
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
----------------------------
<android.location.Location: java.lang.String getProvider()>    	['location']
<android.location.Location: float getAccuracy()>    	['location']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: float distanceTo(android.location.Location)>    	['location']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.Location: long getTime()>    	['location']
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.media.SoundPool: void resume(int)>    	['sound']
<android.media.SoundPool: void pause(int)>    	['sound', 'pause']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
----------------------------
----------------------------
----------------------------
<java.util.Calendar: void setTime(java.util.Date)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.ImageView: void getLocationInWindow(int[])>    	['location']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
----------------------------
----------------------------
----------------------------
<java.util.Timer: void cancel()>    	['timer']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.accounts.AccountManager: android.accounts.AccountManager get(android.content.Context)>    	['account']
<android.accounts.AccountManager: android.accounts.Account[] getAccountsByType(java.lang.String)>    	['account', 'account']
----------------------------
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.view.View: void getLocationOnScreen(int[])>    	['location']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.PowerManager$WakeLock: void release()>    	['power']
<android.app.Activity: void onPause()>    	['pause']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: boolean isLooping()>    	['medium', 'player']
----------------------------
<android.hardware.Camera: void stopPreview()>    	['camera']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>    	['power']
<android.os.PowerManager$WakeLock: void acquire()>    	['power']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.SoundPool: int load(android.content.Context,int,int)>    	['sound']
----------------------------
----------------------------
----------------------------
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
----------------------------
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Timer: void <init>()>    	['timer']
----------------------------
----------------------------
----------------------------
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewSizes()>    	['camera']
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>    	['camera']
<android.hardware.Camera$Parameters: void setRotation(int)>    	['camera']
<android.hardware.Camera: void setDisplayOrientation(int)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera: void startPreview()>    	['camera']
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.TextView: void setShadowLayer(float,float,float,int)>    	['shadow']
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.TextView: void setShadowLayer(float,float,float,int)>    	['shadow']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<android.graphics.Paint: void setShadowLayer(float,float,float,int)>    	['shadow']
<android.media.SoundPool: void <init>(int,int,int)>    	['sound']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
----------------------------
<android.media.MediaPlayer: void pause()>    	['medium', 'player', 'pause']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setDoInput(boolean)>    	['http', 'url']
<java.net.URL: java.lang.String toString()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.lang.String getFile()>    	['url', 'file']
<java.net.HttpURLConnection: void addRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void connect()>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.HttpURLConnection: void disconnect()>    	['http', 'url', 'disconnect']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor)>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.SoundPool: void pause(int)>    	['sound', 'pause']
<android.media.SoundPool: int load(android.content.Context,int,int)>    	['sound']
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
----------------------------
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
<android.graphics.Paint: void setShadowLayer(float,float,float,int)>    	['shadow']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.location.Geocoder: java.util.List getFromLocation(double,double,int)>    	['location']
<android.location.Address: java.lang.String getAddressLine(int)>    	['address', 'address']
<android.location.Address: java.lang.String getLocality()>    	['address']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URL: java.lang.String toString()>    	['url']
<java.net.HttpURLConnection: void addRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoInput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setConnectTimeout(int)>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: void connect()>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.net.HttpURLConnection: void disconnect()>    	['http', 'url', 'disconnect']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.SystemClock: long elapsedRealtime()>    	['clock']
----------------------------
----------------------------
----------------------------
<android.media.SoundPool: int play(int,float,float,int,int,float)>    	['sound', 'play']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Locale: java.lang.String getLanguage()>    	['language']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.content.pm.PackageManager: android.content.pm.PermissionInfo getPermissionInfo(java.lang.String,int)>    	['permission']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>    	['power']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: boolean isConnected()>    	['network', 'connect']
<android.os.PowerManager$WakeLock: void acquire()>    	['power']
<android.os.SystemClock: long elapsedRealtime()>    	['clock']
<android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)>    	['alarm']
<java.net.Socket: boolean isConnected()>    	['connect']
<android.content.pm.PackageManager: android.content.pm.PermissionInfo getPermissionInfo(java.lang.String,int)>    	['permission']
<java.net.NetworkInterface: java.util.Enumeration getNetworkInterfaces()>    	['network', 'network']
<java.net.NetworkInterface: java.util.Enumeration getInetAddresses()>    	['network', 'address']
<java.net.InetAddress: boolean isLoopbackAddress()>    	['address', 'address']
<java.net.InetAddress: java.lang.String getHostAddress()>    	['address', 'host', 'address']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
<android.app.AlarmManager: void cancel(android.app.PendingIntent)>    	['alarm']
<java.net.InetSocketAddress: void <init>(java.lang.String,int)>    	['address']
<java.net.Socket: void connect(java.net.SocketAddress,int)>    	['connect']
<java.net.Socket: java.net.InetAddress getInetAddress()>    	['address']
<java.net.Socket: boolean isConnected()>    	['connect']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
----------------------------
----------------------------
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri)>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void release()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.graphics.Canvas: void restore()>    	['restore']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<android.telephony.TelephonyManager: int getCallState()>    	['telephony', 'call']
<android.os.SystemClock: long elapsedRealtime()>    	['clock']
<android.location.Location: void <init>(java.lang.String)>    	['location']
<android.location.Location: void setLongitude(double)>    	['location', 'longitude']
<android.location.Location: void setLatitude(double)>    	['location', 'latitude']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
----------------------------
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void scheduleAtFixedRate(java.util.TimerTask,long,long)>    	['timer', 'rate']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
