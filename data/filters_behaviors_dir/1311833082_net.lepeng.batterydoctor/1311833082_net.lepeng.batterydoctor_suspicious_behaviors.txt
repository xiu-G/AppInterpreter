<android.hardware.SensorManager: java.util.List getSensorList(int)>	app:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	main.xml:['country']	app['country']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	main.xml:['language']	app['language']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	main.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	main.xml:['telephony', 'network']	app['telephony', 'network']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkCountryIso()>	main.xml:['telephony', 'network', 'country']	app['telephony', 'network', 'country']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperator()>	main.xml:['telephony', 'network']	app['telephony', 'network']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.lang.String getResponseMessage()>	main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.util.Locale: java.lang.String getISO3Country()>	main.xml:['country']	app['country']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	main.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	main.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Timer: void <init>()>	main.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	main.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	main.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.media.AudioManager: int getStreamVolume(int)>	app:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
--------------------------------
<android.media.AudioManager: int getRingerMode()>	app:['audio']	app['audio']	ui-unmatch
<android.media.AudioManager: int getVibrateSetting(int)>	app:['audio']	app['audio']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.lang.String getResponseMessage()>	main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<android.os.SystemClock: long elapsedRealtime()>	main.xml:['clock']	app[]	ui-unmatch
--------------------------------
<android.net.NetworkInfo: android.net.NetworkInfo$DetailedState getDetailedState()>	app:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState[] values()>	app:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo$DetailedState: int ordinal()>	app:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo$DetailedState: int ordinal()>	app:['network']	app['network']	ui-unmatch
--------------------------------
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	app:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	app:['sensor']	app['sensor']	ui-unmatch
--------------------------------
<android.accounts.AccountManager: android.accounts.AccountManager get(android.content.Context)>	app:['account']	app['account']	ui-unmatch
<android.accounts.AccountManager: android.accounts.Account[] getAccountsByType(java.lang.String)>	app:['account', 'account']	app['account', 'account']	ui-unmatch
--------------------------------
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<android.os.SystemClock: long elapsedRealtime()>	main.xml:['clock']	app[]	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	main.xml:['language']	app['language']	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	main.xml:['country']	app['country']	ui-unmatch
--------------------------------
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	app:['script']	app['script']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.media.Ringtone: void stop()>	app:['ring']	app['ring']	ui-unmatch
--------------------------------
<java.io.FileWriter: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void write(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.FileWriter: void close()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.lang.String getResponseMessage()>	main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
--------------------------------
<android.media.AudioManager: void setRingerMode(int)>	app:['audio']	app['audio']	ui-unmatch
<android.media.AudioManager: int getRingerMode()>	app:['audio']	app['audio']	ui-unmatch
<android.media.AudioManager: int getStreamVolume(int)>	app:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
<android.media.AudioManager: void setStreamVolume(int,int,int)>	app:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
--------------------------------
<android.media.AudioManager: void setStreamVolume(int,int,int)>	app:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
<android.media.AudioManager: int getRingerMode()>	app:['audio']	app['audio']	ui-unmatch
<android.media.AudioManager: void setRingerMode(int)>	app:['audio']	app['audio']	ui-unmatch
--------------------------------
<android.media.Ringtone: void stop()>	app:['ring']	app['ring']	ui-unmatch
--------------------------------
<android.os.SystemClock: long elapsedRealtime()>	main.xml:['clock']	app[]	ui-unmatch
<android.widget.Chronometer: void setBase(long)>	main.xml:['chronometer']	app['chronometer']	ui-unmatch
<android.widget.Chronometer: void start()>	main.xml:['chronometer']	app['chronometer']	ui-unmatch
<android.widget.Chronometer: void stop()>	main.xml:['chronometer']	app['chronometer']	ui-unmatch
--------------------------------
<android.media.Ringtone: void stop()>	app:['ring']	app['ring']	ui-unmatch
--------------------------------
<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri)>	app:['ring', 'ring']	app['ring', 'ring']	ui-unmatch
<android.media.Ringtone: void play()>	app:['ring', 'play']	app['ring', 'play']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	app:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo$State: android.net.NetworkInfo$State[] values()>	app:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo$State: int ordinal()>	app:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo$State: int ordinal()>	app:['network']	app['network']	ui-unmatch
--------------------------------
<android.os.PowerManager$WakeLock: void release()>	flashlight.xml:['power']	app[]	ui-unmatch
<android.app.Activity: void onPause()>	flashlight.xml:['pause']	app[]	ui-unmatch
--------------------------------
<java.util.Calendar: java.util.Calendar getInstance()>	main.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	main.xml:['calendar']	app['calendar']	ui-unmatch
<android.os.SystemClock: long elapsedRealtime()>	app:[]	app[]
<android.widget.Chronometer: void setBase(long)>	app:['chronometer']	app['chronometer']	ui-unmatch
<android.widget.Chronometer: void start()>	app:['chronometer']	app['chronometer']	ui-unmatch
--------------------------------
<android.media.AudioManager: int getStreamVolume(int)>	app:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
<android.media.AudioManager: int getRingerMode()>	app:['audio']	app['audio']	ui-unmatch
<android.media.AudioManager: void setStreamVolume(int,int,int)>	app:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
<android.media.AudioManager: int getStreamVolume(int)>	app:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
<android.media.AudioManager: int getStreamMaxVolume(int)>	app:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<android.app.AlarmManager: void set(int,long,android.app.PendingIntent)>	app:[]	app[]
<android.app.AlarmManager: void cancel(android.app.PendingIntent)>	app:[]	app[]
--------------------------------
<android.content.Context: java.io.File getFilesDir()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean isDirectory()>	main.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<java.io.File: long length()>	main.xml:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isFile()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	main.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	main.xml:['file', 'directory']	app['file', 'directory']	ui-unmatch
<android.media.Ringtone: void stop()>	main.xml:['ring']	app['ring']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	app:['network']	app['network']	ui-unmatch
--------------------------------
<java.io.FileReader: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: boolean getBackgroundDataSetting()>	app:['connectivity']	app['connectivity']	ui-unmatch
--------------------------------
<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>	flashlight.xml:['power']	app[]	ui-unmatch
<android.os.PowerManager$WakeLock: void acquire()>	flashlight.xml:['power']	app[]	ui-unmatch
--------------------------------
<android.app.ActivityManager$MemoryInfo: void <init>()>	main.xml:['memory']	app['memory']	ui-unmatch
--------------------------------
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	app:['permission']	app['permission']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	app:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperator()>	app:['telephony', 'network']	app['telephony', 'network']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	app:['language']	app['language']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.lang.String getResponseMessage()>	main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.util.TimerTask: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.lang.String getResponseMessage()>	main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
--------------------------------
<java.io.FileInputStream: void <init>(java.lang.String)>	main.xml:['file']	app['file']	ui-unmatch
<android.text.format.Formatter: java.lang.String formatFileSize(android.content.Context,long)>	main.xml:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.lang.String getResponseMessage()>	main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
--------------------------------
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	app:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener,android.hardware.Sensor)>	app:['sensor']	app['sensor']	ui-unmatch
--------------------------------
<android.net.NetworkInfo: int getType()>	app:['network']	app['network']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	app:['network']	app['network']	ui-unmatch
--------------------------------
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	app:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	app:['sensor']	app['sensor']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.lang.String getResponseMessage()>	main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getDataDirectory()>	main_history.xml:['directory']	app['directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main_history.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	main_history.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	main_history.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	main_history.xml:['stat']	app['stat']	ui-unmatch
<android.text.format.Formatter: java.lang.String formatFileSize(android.content.Context,long)>	main_history.xml:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getDataDirectory()>	main_history.xml:['directory']	app['directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	main_history.xml:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	main_history.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	main_history.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	main_history.xml:['stat']	app['stat']	ui-unmatch
--------------------------------
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	main_history.xml:['location']	app['location']	ui-unmatch
<android.os.SystemClock: long elapsedRealtime()>	main_history.xml:['clock']	app[]	ui-unmatch
--------------------------------
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>	main.xml:['memory']	app['memory']	ui-unmatch
<android.text.format.Formatter: java.lang.String formatFileSize(android.content.Context,long)>	main.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.text.format.Formatter: java.lang.String formatFileSize(android.content.Context,long)>	main_history.xml:['file']	app['file']	ui-unmatch
<android.provider.Browser: void clearHistory(android.content.ContentResolver)>	main_history.xml:['history']	app[]	ui-unmatch
<android.provider.SearchRecentSuggestions: void clearHistory()>	main_history.xml:['history']	app[]	ui-unmatch
<java.lang.IllegalAccessException: void printStackTrace()>	main_history.xml:['access']	app['access']	ui-unmatch
<android.text.ClipboardManager: void setText(java.lang.CharSequence)>	main_history.xml:['clipboard']	app['clipboard']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.lang.String getResponseMessage()>	main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
--------------------------------
<java.util.Calendar: java.util.Calendar getInstance()>	main.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	main.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTime(java.util.Date)>	main.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void add(int,int)>	main.xml:['calendar']	app['calendar']	ui-unmatch
--------------------------------
<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener,android.hardware.Sensor)>	app:['sensor']	app['sensor']	ui-unmatch
--------------------------------
<android.content.ContextWrapper: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<android.app.Activity: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<android.app.Activity: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	app:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.lang.String getResponseMessage()>	main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	app:['script']	app['script']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.lang.String getResponseMessage()>	main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	main.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String[] list()>	app:['file']	app['file']	ui-unmatch
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<android.os.SystemClock: long uptimeMillis()>	app:[]	app[]
--------------------------------
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	app:['calendar']	app['calendar']	ui-unmatch
--------------------------------
<android.media.AudioManager: void setVibrateSetting(int,int)>	app:['audio']	app['audio']	ui-unmatch
<android.media.AudioManager: void setRingerMode(int)>	app:['audio']	app['audio']	ui-unmatch
--------------------------------
