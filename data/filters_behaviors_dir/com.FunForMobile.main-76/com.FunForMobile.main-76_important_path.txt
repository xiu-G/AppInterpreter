----------------------------
----------------------------
<android.media.AudioRecord: int getMinBufferSize(int,int,int)>    	['audio', 'record']
----------------------------
----------------------------
----------------------------
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>    	['medium', 'store', 'medium']
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>    	['medium', 'store', 'medium']
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>    	['medium', 'store', 'medium']
----------------------------
----------------------------
<android.view.MenuItem: android.view.MenuItem setAlphabeticShortcut(char)>    	['shortcut']
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>    	['access', 'file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.webkit.MimeTypeMap: java.lang.String getFileExtensionFromUrl(java.lang.String)>    	['file', 'url']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.SystemClock: long uptimeMillis()>    	['clock']
<java.io.FileNotFoundException: java.lang.String getMessage()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.VideoView: void <init>(android.content.Context,android.util.AttributeSet,int)>    	['video']
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setDoInput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setUseCaches(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.HttpURLConnection: java.lang.String getHeaderField(java.lang.String)>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>    	['url']
<java.net.MalformedURLException: java.lang.String toString()>    	['url']
----------------------------
<java.io.FileNotFoundException: java.lang.String getMessage()>    	['file']
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
<java.util.Timer: void cancel()>    	['timer']
<java.util.Timer: int purge()>    	['timer']
----------------------------
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>    	['medium', 'store', 'medium']
----------------------------
----------------------------
<android.provider.MediaStore$Images$Thumbnails: void cancelThumbnailRequest(android.content.ContentResolver,long,long)>    	['medium', 'store']
<android.provider.MediaStore$Video$Thumbnails: void cancelThumbnailRequest(android.content.ContentResolver,long,long)>    	['medium', 'store', 'video']
----------------------------
----------------------------
<java.util.Timer: void cancel()>    	['timer']
----------------------------
----------------------------
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>    	['permission']
<java.util.Locale: java.lang.String getLanguage()>    	['language']
<java.util.Locale: java.lang.String getCountry()>    	['country']
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>    	['script']
<android.webkit.WebSettings: void setSavePassword(boolean)>    	['password']
<java.io.File: void <init>(java.io.File,java.lang.String)>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.webkit.WebSettings: void setDomStorageEnabled(boolean)>    	['storage']
<android.gesture.GestureStore: void <init>()>    	['store']
<android.gesture.GestureStore: void load(java.io.InputStream)>    	['store']
<android.os.SystemClock: long elapsedRealtime()>    	['clock']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.view.View: void getLocationOnScreen(int[])>    	['location']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
<android.media.AudioRecord: void stop()>    	['audio', 'record']
<android.media.AudioRecord: void release()>    	['audio', 'record']
<android.media.AudioTrack: void stop()>    	['audio']
<android.media.AudioTrack: void release()>    	['audio']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setDoInput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setUseCaches(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.HttpURLConnection: java.lang.String getHeaderField(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void disconnect()>    	['http', 'url', 'disconnect']
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>    	['url']
<java.net.MalformedURLException: java.lang.String toString()>    	['url']
----------------------------
<android.widget.ListView: void setChoiceMode(int)>    	['choice']
----------------------------
<android.view.View: void getLocationOnScreen(int[])>    	['location']
----------------------------
----------------------------
----------------------------
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>    	['medium', 'store', 'medium']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.view.View: void getLocationOnScreen(int[])>    	['location']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: void <init>(java.io.File,java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.FileInputStream: int read(byte[],int,int)>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.net.Uri: java.lang.String getHost()>    	['host']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>    	['access', 'file']
<android.media.MediaScannerConnection: void <init>(android.content.Context,android.media.MediaScannerConnection$MediaScannerConnectionClient)>    	['medium']
<android.media.MediaScannerConnection: void connect()>    	['medium', 'connect']
<android.provider.MediaStore$Images$Media: java.lang.String insertImage(android.content.ContentResolver,android.graphics.Bitmap,java.lang.String,java.lang.String)>    	['medium', 'store', 'medium']
<java.text.BreakIterator: java.text.BreakIterator getWordInstance()>    	['word']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
----------------------------
<android.media.MediaPlayer: boolean isPlaying()>    	['medium', 'player', 'play']
----------------------------
----------------------------
----------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String toString()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: void <init>(java.lang.String,java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>    	['medium', 'store', 'medium']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: void <init>(java.io.File,java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>    	['medium', 'store', 'medium']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.VideoView: void <init>(android.content.Context,android.util.AttributeSet)>    	['video']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.URLDecoder: java.lang.String decode(java.lang.String)>    	['url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoInput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void connect()>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getErrorStream()>    	['http', 'url']
----------------------------
----------------------------
<java.io.FileNotFoundException: java.lang.String toString()>    	['file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setDoInput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setUseCaches(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setFixedLengthStreamingMode(int)>    	['http', 'url']
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: java.lang.String toString()>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.net.Uri: java.lang.String getHost()>    	['host']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener)>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.widget.MediaController: void <init>(android.content.Context)>    	['medium']
----------------------------
<android.media.MediaPlayer: int getCurrentPosition()>    	['medium', 'player']
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.media.MediaPlayer: boolean isPlaying()>    	['medium', 'player', 'play']
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void seekTo(int)>    	['medium', 'player']
----------------------------
<android.media.MediaPlayer: boolean isPlaying()>    	['medium', 'player', 'play']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
----------------------------
<android.media.MediaPlayer: boolean isPlaying()>    	['medium', 'player', 'play']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<android.media.MediaPlayer: void release()>    	['medium', 'player']
----------------------------
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.FileInputStream: long skip(long)>    	['file']
<java.io.FileInputStream: int read(byte[],int,int)>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: void connect()>    	['url', 'connect']
<java.net.URLConnection: java.io.InputStream getInputStream()>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void seekTo(int)>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: int getCurrentPosition()>    	['medium', 'player']
<android.media.MediaPlayer: boolean isPlaying()>    	['medium', 'player', 'play']
<android.media.MediaPlayer: void pause()>    	['medium', 'player', 'pause']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>    	['medium', 'store', 'medium']
----------------------------
----------------------------
----------------------------
----------------------------
<android.view.View: void getLocationOnScreen(int[])>    	['location']
----------------------------
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>    	['camera']
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>    	['camera']
<android.hardware.Camera$Parameters: void set(java.lang.String,int)>    	['camera']
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>    	['camera']
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>    	['camera']
<android.hardware.Camera: void startPreview()>    	['camera']
<android.hardware.Camera$Parameters: void setPictureSize(int,int)>    	['camera', 'picture']
<android.hardware.Camera: void release()>    	['camera']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: void connect()>    	['url', 'connect']
<java.net.URLConnection: java.io.InputStream getInputStream()>    	['url']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>    	['access', 'file']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Timer: void cancel()>    	['timer']
<android.app.ListActivity: void onPause()>    	['pause']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.net.Uri: java.lang.String getHost()>    	['host']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>    	['medium', 'store', 'medium']
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>    	['medium', 'store', 'medium']
----------------------------
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>    	['medium', 'store', 'medium']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setDoInput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setUseCaches(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setFixedLengthStreamingMode(int)>    	['http', 'url']
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
----------------------------
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMultiChoiceItems(java.lang.CharSequence[],boolean[],android.content.DialogInterface$OnMultiChoiceClickListener)>    	['choice']
----------------------------
<android.widget.ListView: void setChoiceMode(int)>    	['choice']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.TabActivity: android.widget.TabHost getTabHost()>    	['host']
<android.widget.TabHost: int getCurrentTab()>    	['host']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.SystemClock: long elapsedRealtime()>    	['clock']
<android.view.View: void getLocationOnScreen(int[])>    	['location']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.net.Uri: java.lang.String getHost()>    	['host']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Timer: void cancel()>    	['timer']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Locale: java.lang.String getCountry()>    	['country']
<java.util.Locale: java.lang.String getLanguage()>    	['language']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>    	['telephony', 'network']
<android.telephony.TelephonyManager: java.lang.String getNetworkCountryIso()>    	['telephony', 'network', 'country']
<android.telephony.TelephonyManager: java.lang.String getNetworkOperator()>    	['telephony', 'network']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: int getType()>    	['network']
----------------------------
----------------------------
----------------------------
----------------------------
<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>    	['camera', 'picture']
----------------------------
<android.hardware.Camera: android.hardware.Camera open()>    	['camera']
----------------------------
<android.hardware.Camera: void stopPreview()>    	['camera']
<android.hardware.Camera: void release()>    	['camera']
----------------------------
----------------------------
----------------------------
<android.provider.MediaStore$Images$Media: java.lang.String insertImage(android.content.ContentResolver,android.graphics.Bitmap,java.lang.String,java.lang.String)>    	['medium', 'store', 'medium']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.view.View: void getLocationOnScreen(int[])>    	['location']
----------------------------
----------------------------
<android.widget.ListView: void setChoiceMode(int)>    	['choice']
----------------------------
----------------------------
----------------------------
----------------------------
<android.provider.MediaStore$Images$Media: java.lang.String insertImage(android.content.ContentResolver,android.graphics.Bitmap,java.lang.String,java.lang.String)>    	['medium', 'store', 'medium']
----------------------------
----------------------------
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: boolean mkdirs()>    	['file']
<android.os.Environment: java.io.File getExternalStoragePublicDirectory(java.lang.String)>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>    	['access', 'file']
<android.provider.MediaStore$Images$Media: java.lang.String insertImage(android.content.ContentResolver,android.graphics.Bitmap,java.lang.String,java.lang.String)>    	['medium', 'store', 'medium']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.FileNotFoundException: void <init>(java.lang.String)>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri)>    	['medium', 'player']
<android.media.MediaPlayer: void setOnErrorListener(android.media.MediaPlayer$OnErrorListener)>    	['medium', 'player']
<android.media.MediaPlayer: void prepareAsync()>    	['medium', 'player']
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: boolean mkdirs()>    	['file']
<android.os.Environment: java.io.File getExternalStoragePublicDirectory(java.lang.String)>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>    	['access', 'file']
<android.provider.MediaStore$Images$Media: java.lang.String insertImage(android.content.ContentResolver,android.graphics.Bitmap,java.lang.String,java.lang.String)>    	['medium', 'store', 'medium']
----------------------------
----------------------------
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setDoInput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setUseCaches(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.io.FileNotFoundException: java.lang.String toString()>    	['file']
<java.net.HttpURLConnection: void setFixedLengthStreamingMode(int)>    	['http', 'url']
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: java.lang.String toString()>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
<android.view.View: void getLocationOnScreen(int[])>    	['location']
----------------------------
----------------------------
----------------------------
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>    	['medium', 'store', 'medium']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.view.View: void getLocationOnScreen(int[])>    	['location']
----------------------------
----------------------------
----------------------------
<android.media.MediaMetadataRetriever: void <init>()>    	['medium']
<android.media.MediaMetadataRetriever: void release()>    	['medium']
<android.media.MediaMetadataRetriever: void setMode(int)>    	['medium']
<android.media.MediaMetadataRetriever: void setDataSource(android.content.Context,android.net.Uri)>    	['medium']
<android.media.MediaMetadataRetriever: android.graphics.Bitmap captureFrame()>    	['medium']
----------------------------
----------------------------
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>    	['medium', 'store', 'medium']
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.provider.MediaStore: android.net.Uri getMediaScannerUri()>    	['medium', 'store', 'medium']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String toString()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.io.File: java.lang.String getPath()>    	['file']
----------------------------
<android.view.View: void getLocationOnScreen(int[])>    	['location']
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Timer: void cancel()>    	['timer']
----------------------------
<android.media.AudioManager: void adjustStreamVolume(int,int,int)>    	['audio', 'volume']
----------------------------
<android.widget.VideoView: void <init>(android.content.Context)>    	['video']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.graphics.Paint: void setShadowLayer(float,float,float,int)>    	['shadow']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)>    	['account']
<android.accounts.AccountManagerFuture: java.lang.Object getResult()>    	['account']
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.ListView: void setChoiceMode(int)>    	['choice']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.accounts.AccountManager: android.accounts.AccountManager get(android.content.Context)>    	['account']
<android.accounts.AccountManager: android.accounts.Account[] getAccountsByType(java.lang.String)>    	['account', 'account']
<android.accounts.AccountManager: void invalidateAuthToken(java.lang.String,java.lang.String)>    	['account']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>    	['medium', 'store', 'medium']
----------------------------
----------------------------
----------------------------
<android.net.Uri: java.lang.String getHost()>    	['host']
----------------------------
----------------------------
----------------------------
----------------------------
<android.graphics.Canvas: void restore()>    	['restore']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>    	['medium', 'store', 'medium']
<java.io.FileNotFoundException: java.lang.String getMessage()>    	['file']
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>    	['medium', 'store', 'medium']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String toString()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: void connect()>    	['url', 'connect']
<java.net.URLConnection: java.io.InputStream getInputStream()>    	['url']
----------------------------
<android.media.MediaPlayer: boolean isPlaying()>    	['medium', 'player', 'play']
<android.media.MediaPlayer: void pause()>    	['medium', 'player', 'pause']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.accounts.AccountManager: android.accounts.AccountManager get(android.content.Context)>    	['account']
<android.accounts.AccountManager: android.accounts.Account[] getAccounts()>    	['account', 'account']
----------------------------
----------------------------
<android.provider.MediaStore$Images$Thumbnails: android.net.Uri getContentUri(java.lang.String)>    	['medium', 'store']
<android.provider.MediaStore$Images$Thumbnails: android.database.Cursor queryMiniThumbnail(android.content.ContentResolver,long,int,java.lang.String[])>    	['medium', 'store']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setDoInput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setUseCaches(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setFixedLengthStreamingMode(int)>    	['http', 'url']
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>    	['medium', 'store', 'medium']
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
----------------------------
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>    	['sms']
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>    	['sms']
----------------------------
<android.view.View: void getLocationOnScreen(int[])>    	['location']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.graphics.Canvas: void restore()>    	['restore']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void start()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
----------------------------
----------------------------
----------------------------
<android.widget.ListView: void setChoiceMode(int)>    	['choice']
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>    	['host']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(int)>    	['host']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(android.view.View)>    	['host', 'indicator']
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>    	['host']
<android.widget.TabHost: void setCurrentTab(int)>    	['host']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: boolean mkdirs()>    	['file']
<android.os.Environment: java.io.File getExternalStoragePublicDirectory(java.lang.String)>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>    	['access', 'file']
<android.provider.MediaStore$Images$Media: java.lang.String insertImage(android.content.ContentResolver,android.graphics.Bitmap,java.lang.String,java.lang.String)>    	['medium', 'store', 'medium']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: boolean mkdirs()>    	['file']
<android.os.Environment: java.io.File getExternalStoragePublicDirectory(java.lang.String)>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>    	['access', 'file']
<android.provider.MediaStore$Images$Media: java.lang.String insertImage(android.content.ContentResolver,android.graphics.Bitmap,java.lang.String,java.lang.String)>    	['medium', 'store', 'medium']
<java.util.Timer: void cancel()>    	['timer']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: boolean mkdirs()>    	['file']
<android.os.Environment: java.io.File getExternalStoragePublicDirectory(java.lang.String)>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>    	['access', 'file']
<android.provider.MediaStore$Images$Media: java.lang.String insertImage(android.content.ContentResolver,android.graphics.Bitmap,java.lang.String,java.lang.String)>    	['medium', 'store', 'medium']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: boolean mkdirs()>    	['file']
<android.os.Environment: java.io.File getExternalStoragePublicDirectory(java.lang.String)>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>    	['access', 'file']
<android.provider.MediaStore$Images$Media: java.lang.String insertImage(android.content.ContentResolver,android.graphics.Bitmap,java.lang.String,java.lang.String)>    	['medium', 'store', 'medium']
<android.media.MediaMetadataRetriever: void <init>()>    	['medium']
<android.media.MediaMetadataRetriever: void setMode(int)>    	['medium']
<android.media.MediaMetadataRetriever: void setDataSource(android.content.Context,android.net.Uri)>    	['medium']
<android.media.MediaMetadataRetriever: android.graphics.Bitmap captureFrame()>    	['medium']
<android.media.MediaMetadataRetriever: void release()>    	['medium']
----------------------------
----------------------------
----------------------------
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>    	['file']
<android.os.SystemClock: long elapsedRealtime()>    	['clock']
<java.util.Locale: java.lang.String getLanguage()>    	['language']
<java.util.Locale: java.lang.String getCountry()>    	['country']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<javax.net.ssl.HttpsURLConnection: void setDoInput(boolean)>    	['url']
<javax.net.ssl.HttpsURLConnection: void setDoOutput(boolean)>    	['url']
<javax.net.ssl.HttpsURLConnection: void setUseCaches(boolean)>    	['url']
<javax.net.ssl.HttpsURLConnection: void setRequestMethod(java.lang.String)>    	['url']
<javax.net.ssl.HttpsURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>    	['url']
<javax.net.ssl.HttpsURLConnection: java.io.OutputStream getOutputStream()>    	['url']
<javax.net.ssl.HttpsURLConnection: int getResponseCode()>    	['url']
<javax.net.ssl.HttpsURLConnection: java.lang.String getResponseMessage()>    	['url']
<javax.net.ssl.HttpsURLConnection: java.io.InputStream getInputStream()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
<java.util.Timer: void cancel()>    	['timer']
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: boolean mkdirs()>    	['file']
<android.os.Environment: java.io.File getExternalStoragePublicDirectory(java.lang.String)>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>    	['access', 'file']
<android.provider.MediaStore$Images$Media: java.lang.String insertImage(android.content.ContentResolver,android.graphics.Bitmap,java.lang.String,java.lang.String)>    	['medium', 'store', 'medium']
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: boolean mkdirs()>    	['file']
<android.os.Environment: java.io.File getExternalStoragePublicDirectory(java.lang.String)>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>    	['access', 'file']
<android.provider.MediaStore$Images$Media: java.lang.String insertImage(android.content.ContentResolver,android.graphics.Bitmap,java.lang.String,java.lang.String)>    	['medium', 'store', 'medium']
<android.os.SystemClock: long uptimeMillis()>    	['clock']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.net.Uri: java.lang.String getHost()>    	['host']
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>    	['medium', 'store', 'medium']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: boolean mkdirs()>    	['file']
<android.os.Environment: java.io.File getExternalStoragePublicDirectory(java.lang.String)>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>    	['access', 'file']
<android.provider.MediaStore$Images$Media: java.lang.String insertImage(android.content.ContentResolver,android.graphics.Bitmap,java.lang.String,java.lang.String)>    	['medium', 'store', 'medium']
----------------------------
----------------------------
----------------------------
----------------------------
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>    	['location']
<android.os.SystemClock: long elapsedRealtime()>    	['clock']
----------------------------
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
----------------------------
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setDoInput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setUseCaches(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.io.FileNotFoundException: java.lang.String toString()>    	['file']
<java.net.HttpURLConnection: void setFixedLengthStreamingMode(int)>    	['http', 'url']
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: java.lang.String toString()>    	['url']
----------------------------
----------------------------
<android.widget.VideoView: void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener)>    	['video']
<android.widget.VideoView: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['video']
<android.widget.VideoView: void setOnErrorListener(android.media.MediaPlayer$OnErrorListener)>    	['video']
<android.widget.MediaController: void <init>(android.content.Context)>    	['medium']
<android.widget.MediaController: void setAnchorView(android.view.View)>    	['medium']
<android.widget.VideoView: void setMediaController(android.widget.MediaController)>    	['video', 'medium']
<android.widget.VideoView: void setVideoURI(android.net.Uri)>    	['video', 'video']
<android.widget.VideoView: void start()>    	['video']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.FileNotFoundException: java.lang.String getMessage()>    	['file']
----------------------------
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setDoInput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setUseCaches(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.HttpURLConnection: java.lang.String getHeaderField(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void disconnect()>    	['http', 'url', 'disconnect']
<java.net.MalformedURLException: java.lang.String toString()>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: boolean mkdirs()>    	['file']
<android.os.Environment: java.io.File getExternalStoragePublicDirectory(java.lang.String)>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>    	['access', 'file']
<android.provider.MediaStore$Images$Media: java.lang.String insertImage(android.content.ContentResolver,android.graphics.Bitmap,java.lang.String,java.lang.String)>    	['medium', 'store', 'medium']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: boolean mkdirs()>    	['file']
<android.os.Environment: java.io.File getExternalStoragePublicDirectory(java.lang.String)>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>    	['access', 'file']
<android.provider.MediaStore$Images$Media: java.lang.String insertImage(android.content.ContentResolver,android.graphics.Bitmap,java.lang.String,java.lang.String)>    	['medium', 'store', 'medium']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Timer: void cancel()>    	['timer']
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: long length()>    	['file']
----------------------------
<android.media.MediaPlayer: int getCurrentPosition()>    	['medium', 'player']
<android.media.MediaPlayer: void seekTo(int)>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
<java.util.Timer: void cancel()>    	['timer']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<android.provider.MediaStore$Audio$Media: android.net.Uri getContentUriForPath(java.lang.String)>    	['medium', 'store', 'audio', 'medium']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>    	['access', 'file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: java.io.FileDescriptor getFD()>    	['file']
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<java.io.File: boolean delete()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
<android.media.MediaPlayer: int getCurrentPosition()>    	['medium', 'player']
<android.media.MediaPlayer: void <init>()>    	['medium', 'player']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void reset()>    	['medium', 'player']
<android.media.MediaPlayer: void setAudioStreamType(int)>    	['medium', 'player', 'audio']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.FileInputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: java.io.FileDescriptor getFD()>    	['file']
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['medium', 'player']
<android.media.MediaPlayer: void seekTo(int)>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(java.lang.String)>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: boolean isPlaying()>    	['medium', 'player', 'play']
<android.media.MediaPlayer: void stop()>    	['medium', 'player']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
----------------------------
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setDoInput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setUseCaches(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.HttpURLConnection: java.lang.String getHeaderField(java.lang.String)>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>    	['url']
<java.net.MalformedURLException: java.lang.String toString()>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: void <init>(java.io.File,java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.view.MenuItem: android.view.MenuItem setAlphabeticShortcut(char)>    	['shortcut']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: void connect()>    	['url', 'connect']
<java.net.URLConnection: java.io.InputStream getInputStream()>    	['url']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>    	['url']
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>    	['script']
----------------------------
<android.media.MediaPlayer: int getCurrentPosition()>    	['medium', 'player']
----------------------------
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: void connect()>    	['url', 'connect']
<java.net.URLConnection: java.io.InputStream getInputStream()>    	['url']
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: void connect()>    	['url', 'connect']
<java.net.URLConnection: java.io.InputStream getInputStream()>    	['url']
----------------------------
----------------------------
<android.media.MediaPlayer: int getCurrentPosition()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.provider.MediaStore$Images$Thumbnails: android.net.Uri getContentUri(java.lang.String)>    	['medium', 'store']
<android.provider.MediaStore$Images$Thumbnails: android.database.Cursor queryMiniThumbnail(android.content.ContentResolver,long,int,java.lang.String[])>    	['medium', 'store']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Timer: void cancel()>    	['timer']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
----------------------------
<android.widget.RadioButton: boolean isChecked()>    	['radio']
----------------------------
<java.util.Timer: void cancel()>    	['timer']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.ListActivity: void onPause()>    	['pause']
<java.util.Timer: void cancel()>    	['timer']
----------------------------
<java.util.Timer: void cancel()>    	['timer']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.ListActivity: void onPause()>    	['pause']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: boolean mkdirs()>    	['file']
<android.os.Environment: java.io.File getExternalStoragePublicDirectory(java.lang.String)>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>    	['access', 'file']
<android.provider.MediaStore$Images$Media: java.lang.String insertImage(android.content.ContentResolver,android.graphics.Bitmap,java.lang.String,java.lang.String)>    	['medium', 'store', 'medium']
----------------------------
----------------------------
----------------------------
<android.media.MediaMetadataRetriever: void <init>()>    	['medium']
<android.media.MediaMetadataRetriever: void setMode(int)>    	['medium']
<android.media.MediaMetadataRetriever: void setDataSource(android.content.Context,android.net.Uri)>    	['medium']
<android.media.MediaMetadataRetriever: android.graphics.Bitmap captureFrame()>    	['medium']
<android.media.MediaMetadataRetriever: void release()>    	['medium']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>    	['medium', 'store', 'medium']
----------------------------
----------------------------
<java.util.Timer: void cancel()>    	['timer']
----------------------------
----------------------------
<android.media.MediaPlayer: void reset()>    	['medium', 'player']
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri)>    	['medium', 'player']
<android.media.MediaPlayer: void setLooping(boolean)>    	['medium', 'player']
<android.media.MediaPlayer: void prepare()>    	['medium', 'player']
<android.media.MediaPlayer: void start()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.net.Uri: java.lang.String getHost()>    	['host']
<android.media.RingtoneManager: android.net.Uri getActualDefaultRingtoneUri(android.content.Context,int)>    	['ring', 'ring']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.RingtoneManager: void setActualDefaultRingtoneUri(android.content.Context,int,android.net.Uri)>    	['ring', 'ring']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: void connect()>    	['url', 'connect']
<java.net.URLConnection: java.io.InputStream getInputStream()>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Timer: void cancel()>    	['timer']
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: void connect()>    	['url', 'connect']
<java.net.URLConnection: java.io.InputStream getInputStream()>    	['url']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void write(byte[],int,int)>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void pause()>    	['medium', 'player', 'pause']
----------------------------
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>    	['medium', 'store', 'medium']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.URLConnection: void connect()>    	['url', 'connect']
<java.net.URLConnection: java.io.InputStream getInputStream()>    	['url']
----------------------------
----------------------------
<android.media.AudioManager: void adjustStreamVolume(int,int,int)>    	['audio', 'volume']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.provider.SearchRecentSuggestions: void clearHistory()>    	['history']
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setDoInput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setUseCaches(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setFixedLengthStreamingMode(int)>    	['http', 'url']
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: boolean mkdirs()>    	['file']
<android.os.Environment: java.io.File getExternalStoragePublicDirectory(java.lang.String)>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>    	['access', 'file']
<android.provider.MediaStore$Images$Media: java.lang.String insertImage(android.content.ContentResolver,android.graphics.Bitmap,java.lang.String,java.lang.String)>    	['medium', 'store', 'medium']
----------------------------
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setDoInput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setUseCaches(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.io.FileNotFoundException: java.lang.String toString()>    	['file']
<java.net.HttpURLConnection: void setFixedLengthStreamingMode(int)>    	['http', 'url']
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: java.lang.String toString()>    	['url']
----------------------------
----------------------------
<android.widget.ListView: void setChoiceMode(int)>    	['choice']
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setDoInput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setUseCaches(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setFixedLengthStreamingMode(int)>    	['http', 'url']
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: java.lang.String toString()>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMultiChoiceItems(java.lang.CharSequence[],boolean[],android.content.DialogInterface$OnMultiChoiceClickListener)>    	['choice']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.RadioButton: void setOnClickListener(android.view.View$OnClickListener)>    	['radio']
<android.widget.RadioButton: void setChecked(boolean)>    	['radio']
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.RingtoneManager: void setActualDefaultRingtoneUri(android.content.Context,int,android.net.Uri)>    	['ring', 'ring']
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMultiChoiceItems(java.lang.CharSequence[],boolean[],android.content.DialogInterface$OnMultiChoiceClickListener)>    	['choice']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.provider.MediaStore$Images$Thumbnails: android.net.Uri getContentUri(java.lang.String)>    	['medium', 'store']
<android.provider.MediaStore$Images$Thumbnails: android.database.Cursor queryMiniThumbnail(android.content.ContentResolver,long,int,java.lang.String[])>    	['medium', 'store']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setDoInput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setUseCaches(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>    	['url']
<java.net.MalformedURLException: java.lang.String toString()>    	['url']
----------------------------
----------------------------
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setDoInput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setUseCaches(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>    	['http', 'url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.lang.String getResponseMessage()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>    	['url']
<java.net.MalformedURLException: java.lang.String toString()>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>    	['medium', 'store', 'medium']
<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>    	['file']
<java.nio.channels.FileChannel: long size()>    	['file']
<android.media.MediaMetadataRetriever: void <init>()>    	['medium']
<android.media.MediaMetadataRetriever: void release()>    	['medium']
<android.media.MediaMetadataRetriever: void setMode(int)>    	['medium']
<android.media.MediaMetadataRetriever: void setDataSource(android.content.Context,android.net.Uri)>    	['medium']
<android.media.MediaMetadataRetriever: android.graphics.Bitmap captureFrame()>    	['medium']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.telephony.TelephonyManager: java.lang.String getLine1Number()>    	['telephony']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.net.Uri: java.lang.String getHost()>    	['host']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: boolean mkdirs()>    	['file']
<android.os.Environment: java.io.File getExternalStoragePublicDirectory(java.lang.String)>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>    	['access', 'file']
<android.provider.MediaStore$Images$Media: java.lang.String insertImage(android.content.ContentResolver,android.graphics.Bitmap,java.lang.String,java.lang.String)>    	['medium', 'store', 'medium']
----------------------------
<java.io.FileNotFoundException: java.lang.String getMessage()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.AudioManager: void adjustStreamVolume(int,int,int)>    	['audio', 'volume']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: void seekTo(int)>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.provider.MediaStore$Images$Media: java.lang.String insertImage(android.content.ContentResolver,android.graphics.Bitmap,java.lang.String,java.lang.String)>    	['medium', 'store', 'medium']
----------------------------
----------------------------
----------------------------
<android.view.MenuItem: android.view.MenuItem setAlphabeticShortcut(char)>    	['shortcut']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: boolean mkdirs()>    	['file']
<android.os.Environment: java.io.File getExternalStoragePublicDirectory(java.lang.String)>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>    	['access', 'file']
<android.provider.MediaStore$Images$Media: java.lang.String insertImage(android.content.ContentResolver,android.graphics.Bitmap,java.lang.String,java.lang.String)>    	['medium', 'store', 'medium']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>    	['medium', 'store', 'medium']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: int getCurrentPosition()>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>    	['medium', 'store', 'medium']
----------------------------
----------------------------
<android.media.MediaPlayer: int getCurrentPosition()>    	['medium', 'player']
<android.media.MediaPlayer: void seekTo(int)>    	['medium', 'player']
----------------------------
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.media.MediaPlayer: void seekTo(int)>    	['medium', 'player']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.view.View: void getLocationOnScreen(int[])>    	['location']
<android.media.MediaMetadataRetriever: void <init>()>    	['medium']
<android.media.MediaMetadataRetriever: void setMode(int)>    	['medium']
<android.media.MediaMetadataRetriever: void setDataSource(android.content.Context,android.net.Uri)>    	['medium']
<android.media.MediaMetadataRetriever: android.graphics.Bitmap captureFrame()>    	['medium']
<android.media.MediaMetadataRetriever: void release()>    	['medium']
