<android.media.AudioRecord: int getMinBufferSize(int,int,int)>	blog_comment_list.xml:['audio', 'record']	app[]	ui-unmatch
--------------------------------
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>	app:['store']	app['store']	ui-unmatch
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>	app:['store']	app['store']	ui-unmatch
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>	app:['store']	app['store']	ui-unmatch
--------------------------------
<android.view.MenuItem: android.view.MenuItem setAlphabeticShortcut(char)>	photoflipper.xml:['shortcut']	app['shortcut']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	gif_player.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	gif_player.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean isDirectory()>	gif_player.xml:['file', 'directory']	app[]	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	gif_player.xml:['access', 'file']	app['access']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	gif_player.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	gif_player.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void close()>	gif_player.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	gif_player.xml:['file']	app[]	ui-unmatch
<android.webkit.MimeTypeMap: java.lang.String getFileExtensionFromUrl(java.lang.String)>	gif_player.xml:['file', 'url']	app['url']	ui-unmatch
--------------------------------
<android.os.SystemClock: long uptimeMillis()>	photostreamer.xml:['clock']	app['clock']	ui-unmatch
<java.io.FileNotFoundException: java.lang.String getMessage()>	photostreamer.xml:['file']	app[]	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	blog_comment_list.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	blog_comment_list.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	blog_comment_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	blog_comment_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	blog_comment_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	blog_comment_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	blog_comment_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	blog_comment_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	blog_comment_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.lang.String getHeaderField(java.lang.String)>	blog_comment_list.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	blog_comment_list.xml:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: java.lang.String toString()>	blog_comment_list.xml:['url']	app['url']	ui-unmatch
--------------------------------
<java.io.FileNotFoundException: java.lang.String getMessage()>	photoflipper.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	roomlist.xml:['pause']	app['pause']	ui-unmatch
<java.util.Timer: void cancel()>	roomlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: int purge()>	roomlist.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>	app:['store']	app['store']	ui-unmatch
--------------------------------
<android.provider.MediaStore$Images$Thumbnails: void cancelThumbnailRequest(android.content.ContentResolver,long,long)>	gallerypicker.xml:['medium', 'store']	app['store']	ui-unmatch
<android.provider.MediaStore$Video$Thumbnails: void cancelThumbnailRequest(android.content.ContentResolver,long,long)>	gallerypicker.xml:['medium', 'store', 'video']	app['store']	ui-unmatch
--------------------------------
<java.util.Timer: void cancel()>	app:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	blog_comment_list.xml:['permission']	app['permission']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	blog_comment_list.xml:['language']	app['language']	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	blog_comment_list.xml:['country']	app['country']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	blog_comment_list.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebSettings: void setSavePassword(boolean)>	blog_comment_list.xml:['password']	app[]	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	blog_comment_list.xml:['file']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	blog_comment_list.xml:['file']	app[]	ui-unmatch
<android.webkit.WebSettings: void setDomStorageEnabled(boolean)>	blog_comment_list.xml:['storage']	app[]	ui-unmatch
<android.gesture.GestureStore: void <init>()>	blog_comment_list.xml:['store']	app['store']	ui-unmatch
<android.gesture.GestureStore: void load(java.io.InputStream)>	blog_comment_list.xml:['store']	app['store']	ui-unmatch
<android.os.SystemClock: long elapsedRealtime()>	blog_comment_list.xml:['clock']	app['clock']	ui-unmatch
--------------------------------
<android.view.View: void getLocationOnScreen(int[])>	blog_comment_list.xml:['location']	app[]	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	blog_comment_list.xml:['pause']	app['pause']	ui-unmatch
<android.media.AudioRecord: void stop()>	blog_comment_list.xml:['audio', 'record']	app[]	ui-unmatch
<android.media.AudioRecord: void release()>	blog_comment_list.xml:['audio', 'record']	app[]	ui-unmatch
<android.media.AudioTrack: void stop()>	blog_comment_list.xml:['audio']	app[]	ui-unmatch
<android.media.AudioTrack: void release()>	blog_comment_list.xml:['audio']	app[]	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	wallpaperphotoflipper.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	wallpaperphotoflipper.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	wallpaperphotoflipper.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	wallpaperphotoflipper.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	wallpaperphotoflipper.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	wallpaperphotoflipper.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	wallpaperphotoflipper.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	wallpaperphotoflipper.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	wallpaperphotoflipper.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.lang.String getHeaderField(java.lang.String)>	wallpaperphotoflipper.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	wallpaperphotoflipper.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	wallpaperphotoflipper.xml:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: java.lang.String toString()>	wallpaperphotoflipper.xml:['url']	app['url']	ui-unmatch
--------------------------------
<android.widget.ListView: void setChoiceMode(int)>	friendlist_grouplist.xml:['choice']	app['choice']	ui-unmatch
--------------------------------
<android.view.View: void getLocationOnScreen(int[])>	talklist.xml:['location']	app[]	ui-unmatch
--------------------------------
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>	chatlist.xml:['medium', 'store', 'medium']	app['store']	ui-unmatch
--------------------------------
<android.view.View: void getLocationOnScreen(int[])>	chatlist.xml:['location']	app[]	ui-unmatch
<java.io.File: boolean isDirectory()>	chatlist.xml:['file', 'directory']	app[]	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	chatlist.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	chatlist.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: int available()>	chatlist.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void close()>	chatlist.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: int read(byte[],int,int)>	chatlist.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.net.Uri: java.lang.String getHost()>	blogitem_list.xml:['host']	app['host']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	blogitem_list.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	blogitem_list.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean isDirectory()>	blogitem_list.xml:['file', 'directory']	app[]	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	blogitem_list.xml:['access', 'file']	app['access']	ui-unmatch
<android.media.MediaScannerConnection: void <init>(android.content.Context,android.media.MediaScannerConnection$MediaScannerConnectionClient)>	blogitem_list.xml:['medium']	app[]	ui-unmatch
<android.media.MediaScannerConnection: void connect()>	blogitem_list.xml:['medium', 'connect']	app['connect']	ui-unmatch
<android.provider.MediaStore$Images$Media: java.lang.String insertImage(android.content.ContentResolver,android.graphics.Bitmap,java.lang.String,java.lang.String)>	blogitem_list.xml:['medium', 'store', 'medium']	app['store']	ui-unmatch
<java.text.BreakIterator: java.text.BreakIterator getWordInstance()>	blogitem_list.xml:['word']	app['word']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	blogitem_list.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	tonelist.xml:['medium', 'player']	app['player']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: boolean isPlaying()>	audio_player.xml:['medium', 'player']	app['player']	ui-unmatch
--------------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>	facebookphotoflipper.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	facebookphotoflipper.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String toString()>	facebookphotoflipper.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	facebookphotoflipper.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean isDirectory()>	facebookphotoflipper.xml:['file', 'directory']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	facebookphotoflipper.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String,java.lang.String)>	facebookphotoflipper.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	facebookphotoflipper.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean delete()>	facebookphotoflipper.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean createNewFile()>	facebookphotoflipper.xml:['file', 'file']	app[]	ui-unmatch
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>	facebookphotoflipper.xml:['medium', 'store', 'medium']	app['store']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	facebookphotoflipper.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	facebookphotoflipper.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	facebookphotoflipper.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean isDirectory()>	facebookphotoflipper.xml:['file', 'directory']	app[]	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	facebookphotoflipper.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	facebookphotoflipper.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void close()>	facebookphotoflipper.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	facebookphotoflipper.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>	photolist.xml:['medium', 'store', 'medium']	app['store']	ui-unmatch
--------------------------------
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	blog_album.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	blog_album.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	blog_album.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	blog_album.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLDecoder: java.lang.String decode(java.lang.String)>	blog_album.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	blog_album.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	blog_album.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	blog_album.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	blog_album.xml:['http', 'url', 'connect']	app['http', 'url', 'connect']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	blog_album.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	blog_album.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getErrorStream()>	blog_album.xml:['http', 'url']	app['http', 'url']	ui-unmatch
--------------------------------
<java.io.FileNotFoundException: java.lang.String toString()>	talklist.xml:['file']	app[]	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	talklist.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	talklist.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	talklist.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	talklist.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	talklist.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	talklist.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	talklist.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setFixedLengthStreamingMode(int)>	talklist.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	talklist.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	talklist.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: java.lang.String toString()>	talklist.xml:['url']	app['url']	ui-unmatch
--------------------------------
<android.net.Uri: java.lang.String getHost()>	audio_player.xml:['host']	app['host']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	audio_player.xml:['medium', 'player']	app['player']	ui-unmatch
<android.media.MediaPlayer: void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener)>	audio_player.xml:['medium', 'player']	app['player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	audio_player.xml:['medium', 'player']	app['player']	ui-unmatch
<android.widget.MediaController: void <init>(android.content.Context)>	audio_player.xml:['medium']	app[]	ui-unmatch
--------------------------------
<android.media.MediaPlayer: int getCurrentPosition()>	audio_player.xml:['medium', 'player']	app['player']	ui-unmatch
<android.media.MediaPlayer: int getDuration()>	audio_player.xml:['medium', 'player']	app['player']	ui-unmatch
<android.media.MediaPlayer: boolean isPlaying()>	audio_player.xml:['medium', 'player']	app['player']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void seekTo(int)>	audio_player.xml:['medium', 'player']	app['player']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: boolean isPlaying()>	audio_player.xml:['medium', 'player']	app['player']	ui-unmatch
<android.media.MediaPlayer: void stop()>	audio_player.xml:['medium', 'player']	app['player']	ui-unmatch
<android.media.MediaPlayer: void release()>	audio_player.xml:['medium', 'player']	app['player']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: boolean isPlaying()>	audio_player.xml:['medium', 'player']	app['player']	ui-unmatch
<android.media.MediaPlayer: void stop()>	audio_player.xml:['medium', 'player']	app['player']	ui-unmatch
<android.media.MediaPlayer: void release()>	audio_player.xml:['medium', 'player']	app['player']	ui-unmatch
--------------------------------
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	editor.xml:['url']	app['url']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	editor.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void close()>	editor.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: long skip(long)>	editor.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: int read(byte[],int,int)>	editor.xml:['file']	app[]	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.URLConnection: void connect()>	app:['url', 'connect']	app['url', 'connect']	ui-unmatch
<java.net.URLConnection: java.io.InputStream getInputStream()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void seekTo(int)>	audio_player.xml:['medium', 'player']	app['player']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: int getCurrentPosition()>	editor.xml:['player']	app['player']	ui-unmatch
<android.media.MediaPlayer: boolean isPlaying()>	editor.xml:['player']	app['player']	ui-unmatch
<android.media.MediaPlayer: void pause()>	editor.xml:['player', 'pause']	app['player', 'pause']	ui-unmatch
--------------------------------
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>	app:['store']	app['store']	ui-unmatch
--------------------------------
<android.view.View: void getLocationOnScreen(int[])>	talklist.xml:['location']	app[]	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	blogitem_list.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	blogitem_list.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: void connect()>	blogitem_list.xml:['url', 'connect']	app['url', 'connect']	ui-unmatch
<java.net.URLConnection: java.io.InputStream getInputStream()>	blogitem_list.xml:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	blogitem_list.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	blogitem_list.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean isDirectory()>	blogitem_list.xml:['file', 'directory']	app[]	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	blogitem_list.xml:['access', 'file']	app['access']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	blogitem_list.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	blogitem_list.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	app:['pause']	app['pause']	ui-unmatch
--------------------------------
<java.util.Timer: void cancel()>	chatlist.xml:['timer']	app['timer']	ui-unmatch
<android.app.ListActivity: void onPause()>	chatlist.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.net.Uri: java.lang.String getHost()>	photolist.xml:['host']	app['host']	ui-unmatch
--------------------------------
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>	photolist.xml:['medium', 'store', 'medium']	app['store']	ui-unmatch
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>	app:['store']	app['store']	ui-unmatch
--------------------------------
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>	app:['store']	app['store']	ui-unmatch
--------------------------------
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setFixedLengthStreamingMode(int)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
--------------------------------
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMultiChoiceItems(java.lang.CharSequence[],boolean[],android.content.DialogInterface$OnMultiChoiceClickListener)>	talklist.xml:['choice']	app['choice']	ui-unmatch
--------------------------------
<android.widget.ListView: void setChoiceMode(int)>	friendlist.xml:['choice']	app['choice']	ui-unmatch
--------------------------------
<android.app.TabActivity: android.widget.TabHost getTabHost()>	contacttab.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: int getCurrentTab()>	contacttab.xml:['host']	app['host']	ui-unmatch
--------------------------------
<android.os.SystemClock: long elapsedRealtime()>	sso_confirm_user.xml:['clock']	app['clock']	ui-unmatch
<android.view.View: void getLocationOnScreen(int[])>	sso_confirm_user.xml:['location']	app[]	ui-unmatch
--------------------------------
<android.net.Uri: java.lang.String getHost()>	videolist.xml:['host']	app['host']	ui-unmatch
--------------------------------
<java.util.Timer: void cancel()>	chatlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>()>	chatlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	chatlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	chatlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>()>	chatlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	chatlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	chatlist.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<java.util.Locale: java.lang.String getCountry()>	ffm_main.xml:['country']	app['country']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	ffm_main.xml:['language']	app['language']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	ffm_main.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>	ffm_main.xml:['telephony', 'network']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkCountryIso()>	ffm_main.xml:['telephony', 'network', 'country']	app['telephony', 'country']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperator()>	ffm_main.xml:['telephony', 'network']	app['telephony']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	ffm_main.xml:['connectivity', 'network']	app['connectivity']	ui-unmatch
<android.net.NetworkInfo: int getType()>	ffm_main.xml:['network']	app[]	ui-unmatch
--------------------------------
<android.provider.MediaStore$Images$Media: java.lang.String insertImage(android.content.ContentResolver,android.graphics.Bitmap,java.lang.String,java.lang.String)>	camera.xml:['store']	app['store']	ui-unmatch
--------------------------------
<android.view.View: void getLocationOnScreen(int[])>	statuslist.xml:['location']	app[]	ui-unmatch
--------------------------------
<android.widget.ListView: void setChoiceMode(int)>	friend_list_pmm.xml:['choice']	app['choice']	ui-unmatch
--------------------------------
<android.provider.MediaStore$Images$Media: java.lang.String insertImage(android.content.ContentResolver,android.graphics.Bitmap,java.lang.String,java.lang.String)>	photostreamer.xml:['medium', 'store', 'medium']	app['store']	ui-unmatch
--------------------------------
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	share.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	share.xml:['sms']	app[]	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	blog_album.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean isDirectory()>	blog_album.xml:['file', 'directory']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	blog_album.xml:['file']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStoragePublicDirectory(java.lang.String)>	blog_album.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	blog_album.xml:['file']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	blog_album.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	blog_album.xml:['access', 'file']	app['access']	ui-unmatch
<android.provider.MediaStore$Images$Media: java.lang.String insertImage(android.content.ContentResolver,android.graphics.Bitmap,java.lang.String,java.lang.String)>	wallpaperphotoflipper.xml:['medium', 'store', 'medium']	app['store']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri)>	app:['player']	app['player']	ui-unmatch
<android.media.MediaPlayer: void setOnErrorListener(android.media.MediaPlayer$OnErrorListener)>	app:['player']	app['player']	ui-unmatch
<android.media.MediaPlayer: void prepareAsync()>	app:['player']	app['player']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	blog_album.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean isDirectory()>	blog_album.xml:['file', 'directory']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	blog_album.xml:['file']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStoragePublicDirectory(java.lang.String)>	blog_album.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	blog_album.xml:['file']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	blog_album.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	blog_album.xml:['access', 'file']	app['access']	ui-unmatch
<android.provider.MediaStore$Images$Media: java.lang.String insertImage(android.content.ContentResolver,android.graphics.Bitmap,java.lang.String,java.lang.String)>	wallpaperphotoflipper.xml:['medium', 'store', 'medium']	app['store']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.FileNotFoundException: java.lang.String toString()>	photoflipper.xml:['file']	app[]	ui-unmatch
<java.net.HttpURLConnection: void setFixedLengthStreamingMode(int)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: java.lang.String toString()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.view.View: void getLocationOnScreen(int[])>	flirt_list.xml:['location']	app[]	ui-unmatch
--------------------------------
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>	talklist.xml:['medium', 'store', 'medium']	app['store']	ui-unmatch
--------------------------------
<android.view.View: void getLocationOnScreen(int[])>	chatlist.xml:['location']	app[]	ui-unmatch
--------------------------------
<android.media.MediaMetadataRetriever: void <init>()>	chatlist.xml:['medium']	app[]	ui-unmatch
<android.media.MediaMetadataRetriever: void release()>	chatlist.xml:['medium']	app[]	ui-unmatch
<android.media.MediaMetadataRetriever: void setMode(int)>	chatlist.xml:['medium']	app[]	ui-unmatch
<android.media.MediaMetadataRetriever: void setDataSource(android.content.Context,android.net.Uri)>	chatlist.xml:['medium']	app[]	ui-unmatch
<android.media.MediaMetadataRetriever: android.graphics.Bitmap captureFrame()>	chatlist.xml:['medium']	app[]	ui-unmatch
--------------------------------
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>	app:['store']	app['store']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void <init>()>	tonelist.xml:['medium', 'player']	app['player']	ui-unmatch
--------------------------------
<android.provider.MediaStore: android.net.Uri getMediaScannerUri()>	app:['store']	app['store']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	gallerypicker.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String toString()>	gallerypicker.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	gallerypicker.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	gallerypicker.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean mkdir()>	gallerypicker.xml:['file']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	gallerypicker.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.view.View: void getLocationOnScreen(int[])>	talklist.xml:['location']	app[]	ui-unmatch
--------------------------------
<java.util.Timer: void cancel()>	talklist.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.media.AudioManager: void adjustStreamVolume(int,int,int)>	send_voice.xml:['audio', 'volume']	app['volume']	ui-unmatch
--------------------------------
<android.graphics.Paint: void setShadowLayer(float,float,float,int)>	app:['shadow']	app['shadow']	ui-unmatch
--------------------------------
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)>	list_content_simple.xml:['account']	app[]	ui-unmatch
<android.accounts.AccountManagerFuture: java.lang.Object getResult()>	list_content_simple.xml:['account']	app[]	ui-unmatch
--------------------------------
<android.widget.ListView: void setChoiceMode(int)>	friendlist.xml:['choice']	app['choice']	ui-unmatch
--------------------------------
<android.accounts.AccountManager: android.accounts.AccountManager get(android.content.Context)>	list_content_simple.xml:['account']	app[]	ui-unmatch
<android.accounts.AccountManager: android.accounts.Account[] getAccountsByType(java.lang.String)>	list_content_simple.xml:['account', 'account']	app[]	ui-unmatch
<android.accounts.AccountManager: void invalidateAuthToken(java.lang.String,java.lang.String)>	list_content_simple.xml:['account']	app[]	ui-unmatch
--------------------------------
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>	photolist_setlogo.xml:['medium', 'store', 'medium']	app['store']	ui-unmatch
--------------------------------
<android.net.Uri: java.lang.String getHost()>	gif_player.xml:['host']	app['host']	ui-unmatch
--------------------------------
<android.graphics.Canvas: void restore()>	app:['restore']	app['restore']	ui-unmatch
--------------------------------
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>	gallerypicker.xml:['medium', 'store', 'medium']	app['store']	ui-unmatch
<java.io.FileNotFoundException: java.lang.String getMessage()>	gallerypicker.xml:['file']	app[]	ui-unmatch
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>	gallerypicker.xml:['medium', 'store', 'medium']	app['store']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	gallerypicker.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String toString()>	gallerypicker.xml:['file']	app[]	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	gallerypicker.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	gallerypicker.xml:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	gallerypicker.xml:['stat']	app['stat']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.URLConnection: void connect()>	app:['url', 'connect']	app['url', 'connect']	ui-unmatch
<java.net.URLConnection: java.io.InputStream getInputStream()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: boolean isPlaying()>	audio_player.xml:['medium', 'player']	app['player']	ui-unmatch
<android.media.MediaPlayer: void pause()>	audio_player.xml:['medium', 'player', 'pause']	app['player', 'pause']	ui-unmatch
<android.media.MediaPlayer: void start()>	audio_player.xml:['medium', 'player']	app['player']	ui-unmatch
--------------------------------
<android.accounts.AccountManager: android.accounts.AccountManager get(android.content.Context)>	list_content_simple.xml:['account']	app[]	ui-unmatch
<android.accounts.AccountManager: android.accounts.Account[] getAccounts()>	list_content_simple.xml:['account', 'account']	app[]	ui-unmatch
--------------------------------
<android.provider.MediaStore$Images$Thumbnails: android.net.Uri getContentUri(java.lang.String)>	facebookphotoflipper.xml:['medium', 'store']	app['store']	ui-unmatch
<android.provider.MediaStore$Images$Thumbnails: android.database.Cursor queryMiniThumbnail(android.content.ContentResolver,long,int,java.lang.String[])>	facebookphotoflipper.xml:['medium', 'store']	app['store']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	facebookphotoflipper.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean delete()>	facebookphotoflipper.xml:['file']	app[]	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setFixedLengthStreamingMode(int)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
--------------------------------
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>	photolist_setlogo.xml:['medium', 'store', 'medium']	app['store']	ui-unmatch
--------------------------------
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	sms_invite.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	sms_invite.xml:['sms']	app[]	ui-unmatch
--------------------------------
<android.view.View: void getLocationOnScreen(int[])>	statuslist.xml:['location']	app[]	ui-unmatch
--------------------------------
<android.graphics.Canvas: void restore()>	app:['restore']	app['restore']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void start()>	audio_player.xml:['medium', 'player']	app['player']	ui-unmatch
--------------------------------
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.widget.ListView: void setChoiceMode(int)>	contacttab.xml:['choice']	app['choice']	ui-unmatch
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>	contacttab.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(int)>	contacttab.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(android.view.View)>	contacttab.xml:['host', 'indicator']	app['host', 'indicator']	ui-unmatch
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>	contacttab.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void setCurrentTab(int)>	contacttab.xml:['host']	app['host']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	blog_album.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean isDirectory()>	blog_album.xml:['file', 'directory']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	blog_album.xml:['file']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStoragePublicDirectory(java.lang.String)>	blog_album.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	blog_album.xml:['file']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	blog_album.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	blog_album.xml:['access', 'file']	app['access']	ui-unmatch
<android.provider.MediaStore$Images$Media: java.lang.String insertImage(android.content.ContentResolver,android.graphics.Bitmap,java.lang.String,java.lang.String)>	wallpaperphotoflipper.xml:['medium', 'store', 'medium']	app['store']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	user_profile.xml:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	blog_album.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean isDirectory()>	blog_album.xml:['file', 'directory']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	blog_album.xml:['file']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStoragePublicDirectory(java.lang.String)>	blog_album.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	blog_album.xml:['file']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	blog_album.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	blog_album.xml:['access', 'file']	app['access']	ui-unmatch
<android.provider.MediaStore$Images$Media: java.lang.String insertImage(android.content.ContentResolver,android.graphics.Bitmap,java.lang.String,java.lang.String)>	wallpaperphotoflipper.xml:['medium', 'store', 'medium']	app['store']	ui-unmatch
<java.util.Timer: void cancel()>	app:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	app:['timer']	app['timer']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	blog_album.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean isDirectory()>	blog_album.xml:['file', 'directory']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	blog_album.xml:['file']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStoragePublicDirectory(java.lang.String)>	blog_album.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	blog_album.xml:['file']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	blog_album.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	blog_album.xml:['access', 'file']	app['access']	ui-unmatch
<android.provider.MediaStore$Images$Media: java.lang.String insertImage(android.content.ContentResolver,android.graphics.Bitmap,java.lang.String,java.lang.String)>	wallpaperphotoflipper.xml:['medium', 'store', 'medium']	app['store']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	blog_album.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean isDirectory()>	blog_album.xml:['file', 'directory']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	blog_album.xml:['file']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStoragePublicDirectory(java.lang.String)>	blog_album.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	blog_album.xml:['file']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	blog_album.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	blog_album.xml:['access', 'file']	app['access']	ui-unmatch
<android.provider.MediaStore$Images$Media: java.lang.String insertImage(android.content.ContentResolver,android.graphics.Bitmap,java.lang.String,java.lang.String)>	wallpaperphotoflipper.xml:['medium', 'store', 'medium']	app['store']	ui-unmatch
<android.media.MediaMetadataRetriever: void <init>()>	talklist.xml:['medium']	app[]	ui-unmatch
<android.media.MediaMetadataRetriever: void setMode(int)>	talklist.xml:['medium']	app[]	ui-unmatch
<android.media.MediaMetadataRetriever: void setDataSource(android.content.Context,android.net.Uri)>	talklist.xml:['medium']	app[]	ui-unmatch
<android.media.MediaMetadataRetriever: android.graphics.Bitmap captureFrame()>	talklist.xml:['medium']	app[]	ui-unmatch
<android.media.MediaMetadataRetriever: void release()>	talklist.xml:['medium']	app[]	ui-unmatch
--------------------------------
<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>	ffm_main.xml:['file']	app[]	ui-unmatch
<android.os.SystemClock: long elapsedRealtime()>	ffm_main.xml:['clock']	app['clock']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	ffm_main.xml:['language']	app['language']	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	ffm_main.xml:['country']	app['country']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<javax.net.ssl.HttpsURLConnection: void setDoInput(boolean)>	app:['url']	app['url']	ui-unmatch
<javax.net.ssl.HttpsURLConnection: void setDoOutput(boolean)>	app:['url']	app['url']	ui-unmatch
<javax.net.ssl.HttpsURLConnection: void setUseCaches(boolean)>	app:['url']	app['url']	ui-unmatch
<javax.net.ssl.HttpsURLConnection: void setRequestMethod(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<javax.net.ssl.HttpsURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	app:['url']	app['url']	ui-unmatch
<javax.net.ssl.HttpsURLConnection: java.io.OutputStream getOutputStream()>	app:['url']	app['url']	ui-unmatch
<javax.net.ssl.HttpsURLConnection: int getResponseCode()>	app:['url']	app['url']	ui-unmatch
<javax.net.ssl.HttpsURLConnection: java.lang.String getResponseMessage()>	app:['url']	app['url']	ui-unmatch
<javax.net.ssl.HttpsURLConnection: java.io.InputStream getInputStream()>	app:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	user_profile.xml:['pause']	app['pause']	ui-unmatch
<java.util.Timer: void cancel()>	user_profile.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	blog_album.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean isDirectory()>	blog_album.xml:['file', 'directory']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	blog_album.xml:['file']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStoragePublicDirectory(java.lang.String)>	blog_album.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	blog_album.xml:['file']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	blog_album.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	blog_album.xml:['access', 'file']	app['access']	ui-unmatch
<android.provider.MediaStore$Images$Media: java.lang.String insertImage(android.content.ContentResolver,android.graphics.Bitmap,java.lang.String,java.lang.String)>	wallpaperphotoflipper.xml:['medium', 'store', 'medium']	app['store']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	blog_album.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean isDirectory()>	blog_album.xml:['file', 'directory']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	blog_album.xml:['file']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStoragePublicDirectory(java.lang.String)>	blog_album.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	blog_album.xml:['file']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	blog_album.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	blog_album.xml:['access', 'file']	app['access']	ui-unmatch
<android.provider.MediaStore$Images$Media: java.lang.String insertImage(android.content.ContentResolver,android.graphics.Bitmap,java.lang.String,java.lang.String)>	wallpaperphotoflipper.xml:['medium', 'store', 'medium']	app['store']	ui-unmatch
<android.os.SystemClock: long uptimeMillis()>	send_ffm_pmm.xml:['clock']	app['clock']	ui-unmatch
--------------------------------
<android.net.Uri: java.lang.String getHost()>	photolist_setlogo.xml:['host']	app['host']	ui-unmatch
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>	photolist_setlogo.xml:['medium', 'store', 'medium']	app['store']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	blog_album.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean isDirectory()>	blog_album.xml:['file', 'directory']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	blog_album.xml:['file']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStoragePublicDirectory(java.lang.String)>	blog_album.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	blog_album.xml:['file']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	blog_album.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	blog_album.xml:['access', 'file']	app['access']	ui-unmatch
<android.provider.MediaStore$Images$Media: java.lang.String insertImage(android.content.ContentResolver,android.graphics.Bitmap,java.lang.String,java.lang.String)>	wallpaperphotoflipper.xml:['medium', 'store', 'medium']	app['store']	ui-unmatch
--------------------------------
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	ffm_main.xml:['location']	app[]	ui-unmatch
<android.os.SystemClock: long elapsedRealtime()>	ffm_main.xml:['clock']	app['clock']	ui-unmatch
--------------------------------
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.FileNotFoundException: java.lang.String toString()>	photolist.xml:['file']	app[]	ui-unmatch
<java.net.HttpURLConnection: void setFixedLengthStreamingMode(int)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: java.lang.String toString()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.widget.VideoView: void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener)>	videoplayer.xml:['video']	app[]	ui-unmatch
<android.widget.VideoView: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	videoplayer.xml:['video']	app[]	ui-unmatch
<android.widget.VideoView: void setOnErrorListener(android.media.MediaPlayer$OnErrorListener)>	videoplayer.xml:['video']	app[]	ui-unmatch
<android.widget.MediaController: void <init>(android.content.Context)>	videoplayer.xml:['medium']	app[]	ui-unmatch
<android.widget.MediaController: void setAnchorView(android.view.View)>	videoplayer.xml:['medium']	app[]	ui-unmatch
<android.widget.VideoView: void setMediaController(android.widget.MediaController)>	videoplayer.xml:['video', 'medium']	app[]	ui-unmatch
<android.widget.VideoView: void setVideoURI(android.net.Uri)>	videoplayer.xml:['video', 'video']	app[]	ui-unmatch
<android.widget.VideoView: void start()>	videoplayer.xml:['video']	app[]	ui-unmatch
--------------------------------
<java.io.FileNotFoundException: java.lang.String getMessage()>	photolist_setlogo.xml:['file']	app[]	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	ffm_main.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	ffm_main.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	ffm_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	ffm_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	ffm_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	ffm_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	ffm_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.lang.String getHeaderField(java.lang.String)>	ffm_main.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	ffm_main.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<java.net.MalformedURLException: java.lang.String toString()>	ffm_main.xml:['url']	app['url']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	blog_album.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean isDirectory()>	blog_album.xml:['file', 'directory']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	blog_album.xml:['file']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStoragePublicDirectory(java.lang.String)>	blog_album.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	blog_album.xml:['file']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	blog_album.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	blog_album.xml:['access', 'file']	app['access']	ui-unmatch
<android.provider.MediaStore$Images$Media: java.lang.String insertImage(android.content.ContentResolver,android.graphics.Bitmap,java.lang.String,java.lang.String)>	wallpaperphotoflipper.xml:['medium', 'store', 'medium']	app['store']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	blog_album.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean isDirectory()>	blog_album.xml:['file', 'directory']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	blog_album.xml:['file']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStoragePublicDirectory(java.lang.String)>	blog_album.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	blog_album.xml:['file']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	blog_album.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	blog_album.xml:['access', 'file']	app['access']	ui-unmatch
<android.provider.MediaStore$Images$Media: java.lang.String insertImage(android.content.ContentResolver,android.graphics.Bitmap,java.lang.String,java.lang.String)>	wallpaperphotoflipper.xml:['medium', 'store', 'medium']	app['store']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: int getDuration()>	audio_player.xml:['medium', 'player']	app['player']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	tonelist.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean delete()>	tonelist.xml:['file']	app[]	ui-unmatch
--------------------------------
<java.util.Timer: void cancel()>	statuslist.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: int getCurrentPosition()>	app:['player']	app['player']	ui-unmatch
<android.media.MediaPlayer: void seekTo(int)>	app:['player']	app['player']	ui-unmatch
--------------------------------
<java.util.Timer: void cancel()>	follow_list.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>()>	follow_list.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	follow_list.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	follow_list.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	friendlist.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	editor.xml:['file']	app[]	ui-unmatch
<android.provider.MediaStore$Audio$Media: android.net.Uri getContentUriForPath(java.lang.String)>	editor.xml:['store', 'audio']	app['store']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	editor.xml:['file']	app[]	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	editor.xml:['access', 'file']	app['access']	ui-unmatch
<java.io.File: boolean createNewFile()>	editor.xml:['file', 'file']	app[]	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	editor.xml:['file']	app[]	ui-unmatch
<android.media.MediaPlayer: void <init>()>	editor.xml:['player']	app['player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	editor.xml:['player', 'audio']	app['player']	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	editor.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: java.io.FileDescriptor getFD()>	editor.xml:['file']	app[]	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>	editor.xml:['player']	app['player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	editor.xml:['player']	app['player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	editor.xml:['player']	app['player']	ui-unmatch
<android.media.MediaPlayer: void start()>	editor.xml:['player']	app['player']	ui-unmatch
<java.io.File: boolean delete()>	editor.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	editor.xml:['file']	app[]	ui-unmatch
<android.media.MediaPlayer: int getCurrentPosition()>	editor.xml:['player']	app['player']	ui-unmatch
<android.media.MediaPlayer: void <init>()>	editor.xml:['player']	app['player']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	editor.xml:['file']	app[]	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	editor.xml:['player']	app['player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	editor.xml:['player', 'audio']	app['player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	editor.xml:['player']	app['player']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	editor.xml:['file']	app[]	ui-unmatch
<java.io.File: java.lang.String getName()>	editor.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void reset()>	editor.xml:['player']	app['player']	ui-unmatch
<android.media.MediaPlayer: void setAudioStreamType(int)>	editor.xml:['player', 'audio']	app['player']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	editor.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void <init>(java.lang.String)>	editor.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: java.io.FileDescriptor getFD()>	editor.xml:['file']	app[]	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>	editor.xml:['player']	app['player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	editor.xml:['player']	app['player']	ui-unmatch
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	editor.xml:['player']	app['player']	ui-unmatch
<android.media.MediaPlayer: void seekTo(int)>	editor.xml:['player']	app['player']	ui-unmatch
<android.media.MediaPlayer: void start()>	editor.xml:['player']	app['player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(java.lang.String)>	editor.xml:['player']	app['player']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: boolean isPlaying()>	editor.xml:['player']	app['player']	ui-unmatch
<android.media.MediaPlayer: void stop()>	editor.xml:['player']	app['player']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	editor.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean delete()>	editor.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	streamitem_list.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	talklist.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	talklist.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	talklist.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	talklist.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	talklist.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	talklist.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	talklist.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	talklist.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	talklist.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.lang.String getHeaderField(java.lang.String)>	talklist.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	talklist.xml:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: java.lang.String toString()>	talklist.xml:['url']	app['url']	ui-unmatch
--------------------------------
<java.io.File: boolean isDirectory()>	photolist_setlogo.xml:['file', 'directory']	app[]	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	photolist_setlogo.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	photolist_setlogo.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void close()>	photolist_setlogo.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	photolist_setlogo.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.view.MenuItem: android.view.MenuItem setAlphabeticShortcut(char)>	photostreamer.xml:['shortcut']	app['shortcut']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	audio_video_player.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	audio_video_player.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: void connect()>	audio_video_player.xml:['url', 'connect']	app['url', 'connect']	ui-unmatch
<java.net.URLConnection: java.io.InputStream getInputStream()>	audio_video_player.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	audio_video_player.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	audio_video_player.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	app:['script']	app['script']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: int getCurrentPosition()>	audio_player.xml:['medium', 'player']	app['player']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.URLConnection: void connect()>	app:['url', 'connect']	app['url', 'connect']	ui-unmatch
<java.net.URLConnection: java.io.InputStream getInputStream()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.URLConnection: void connect()>	app:['url', 'connect']	app['url', 'connect']	ui-unmatch
<java.net.URLConnection: java.io.InputStream getInputStream()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: int getCurrentPosition()>	app:['player']	app['player']	ui-unmatch
--------------------------------
<android.provider.MediaStore$Images$Thumbnails: android.net.Uri getContentUri(java.lang.String)>	photostreamer.xml:['medium', 'store']	app['store']	ui-unmatch
<android.provider.MediaStore$Images$Thumbnails: android.database.Cursor queryMiniThumbnail(android.content.ContentResolver,long,int,java.lang.String[])>	photostreamer.xml:['medium', 'store']	app['store']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	photostreamer.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean delete()>	photostreamer.xml:['file']	app[]	ui-unmatch
--------------------------------
<java.util.Timer: void cancel()>	statuslist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>()>	statuslist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	statuslist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	statuslist.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.widget.RadioButton: boolean isChecked()>	statuslist.xml:['radio']	app['radio']	ui-unmatch
--------------------------------
<java.util.Timer: void cancel()>	statuslist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>()>	statuslist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	statuslist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	statuslist.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.app.ListActivity: void onPause()>	statuslist.xml:['pause']	app['pause']	ui-unmatch
<java.util.Timer: void cancel()>	statuslist.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<java.util.Timer: void cancel()>	statuslist.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.app.ListActivity: void onPause()>	talklist.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	blog_album.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean isDirectory()>	blog_album.xml:['file', 'directory']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	blog_album.xml:['file']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStoragePublicDirectory(java.lang.String)>	blog_album.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	blog_album.xml:['file']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	blog_album.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	blog_album.xml:['access', 'file']	app['access']	ui-unmatch
<android.provider.MediaStore$Images$Media: java.lang.String insertImage(android.content.ContentResolver,android.graphics.Bitmap,java.lang.String,java.lang.String)>	wallpaperphotoflipper.xml:['medium', 'store', 'medium']	app['store']	ui-unmatch
--------------------------------
<android.media.MediaMetadataRetriever: void <init>()>	chatlist.xml:['medium']	app[]	ui-unmatch
<android.media.MediaMetadataRetriever: void setMode(int)>	chatlist.xml:['medium']	app[]	ui-unmatch
<android.media.MediaMetadataRetriever: void setDataSource(android.content.Context,android.net.Uri)>	chatlist.xml:['medium']	app[]	ui-unmatch
<android.media.MediaMetadataRetriever: android.graphics.Bitmap captureFrame()>	chatlist.xml:['medium']	app[]	ui-unmatch
<android.media.MediaMetadataRetriever: void release()>	chatlist.xml:['medium']	app[]	ui-unmatch
--------------------------------
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>	app:['store']	app['store']	ui-unmatch
--------------------------------
<java.util.Timer: void cancel()>	chatlist.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void reset()>	tonelist.xml:['medium', 'player']	app['player']	ui-unmatch
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri)>	tonelist.xml:['medium', 'player']	app['player']	ui-unmatch
<android.media.MediaPlayer: void setLooping(boolean)>	tonelist.xml:['medium', 'player']	app['player']	ui-unmatch
<android.media.MediaPlayer: void prepare()>	tonelist.xml:['medium', 'player']	app['player']	ui-unmatch
<android.media.MediaPlayer: void start()>	tonelist.xml:['medium', 'player']	app['player']	ui-unmatch
--------------------------------
<android.net.Uri: java.lang.String getHost()>	tonelist.xml:['host']	app['host']	ui-unmatch
<android.media.RingtoneManager: android.net.Uri getActualDefaultRingtoneUri(android.content.Context,int)>	tonelist.xml:[]	app[]
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.URLConnection: void connect()>	app:['url', 'connect']	app['url', 'connect']	ui-unmatch
<java.net.URLConnection: java.io.InputStream getInputStream()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<java.util.Timer: void cancel()>	app:['timer']	app['timer']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	blog_album.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	blog_album.xml:['url']	app['url']	ui-unmatch
<java.net.URLConnection: void connect()>	blog_album.xml:['url', 'connect']	app['url', 'connect']	ui-unmatch
<java.net.URLConnection: java.io.InputStream getInputStream()>	blog_album.xml:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	blog_album.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	blog_album.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void pause()>	audio_player.xml:['medium', 'player', 'pause']	app['player', 'pause']	ui-unmatch
--------------------------------
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>	app:['store']	app['store']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.URLConnection: void connect()>	app:['url', 'connect']	app['url', 'connect']	ui-unmatch
<java.net.URLConnection: java.io.InputStream getInputStream()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.media.AudioManager: void adjustStreamVolume(int,int,int)>	chatlist.xml:['audio', 'volume']	app['volume']	ui-unmatch
--------------------------------
<android.provider.SearchRecentSuggestions: void clearHistory()>	app:['history']	app['history']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setFixedLengthStreamingMode(int)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	blog_album.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean isDirectory()>	blog_album.xml:['file', 'directory']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	blog_album.xml:['file']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStoragePublicDirectory(java.lang.String)>	blog_album.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	blog_album.xml:['file']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	blog_album.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	blog_album.xml:['access', 'file']	app['access']	ui-unmatch
<android.provider.MediaStore$Images$Media: java.lang.String insertImage(android.content.ContentResolver,android.graphics.Bitmap,java.lang.String,java.lang.String)>	wallpaperphotoflipper.xml:['medium', 'store', 'medium']	app['store']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.io.FileNotFoundException: java.lang.String toString()>	photostreamer.xml:['file']	app[]	ui-unmatch
<java.net.HttpURLConnection: void setFixedLengthStreamingMode(int)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: java.lang.String toString()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.widget.ListView: void setChoiceMode(int)>	pmmlist.xml:['choice']	app['choice']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setFixedLengthStreamingMode(int)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: java.lang.String toString()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMultiChoiceItems(java.lang.CharSequence[],boolean[],android.content.DialogInterface$OnMultiChoiceClickListener)>	talkinbox.xml:['choice']	app['choice']	ui-unmatch
--------------------------------
<android.widget.RadioButton: void setOnClickListener(android.view.View$OnClickListener)>	ffm_main.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setChecked(boolean)>	ffm_main.xml:['radio']	app['radio']	ui-unmatch
--------------------------------
<android.media.RingtoneManager: void setActualDefaultRingtoneUri(android.content.Context,int,android.net.Uri)>	tonelist.xml:[]	app[]
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMultiChoiceItems(java.lang.CharSequence[],boolean[],android.content.DialogInterface$OnMultiChoiceClickListener)>	tonelist.xml:['choice']	app['choice']	ui-unmatch
--------------------------------
<android.provider.MediaStore$Images$Thumbnails: android.net.Uri getContentUri(java.lang.String)>	photoflipper.xml:['medium', 'store']	app['store']	ui-unmatch
<android.provider.MediaStore$Images$Thumbnails: android.database.Cursor queryMiniThumbnail(android.content.ContentResolver,long,int,java.lang.String[])>	photoflipper.xml:['medium', 'store']	app['store']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	photoflipper.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean delete()>	photoflipper.xml:['file']	app[]	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	login.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	login.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	login.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	login.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	login.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	login.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	login.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	login.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	login.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	login.xml:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: java.lang.String toString()>	login.xml:['url']	app['url']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.lang.String getResponseMessage()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: java.lang.String toString()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>	talklist.xml:['medium', 'store', 'medium']	app['store']	ui-unmatch
<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>	talklist.xml:['file']	app[]	ui-unmatch
<java.nio.channels.FileChannel: long size()>	talklist.xml:['file']	app[]	ui-unmatch
<android.media.MediaMetadataRetriever: void <init>()>	talklist.xml:['medium']	app[]	ui-unmatch
<android.media.MediaMetadataRetriever: void release()>	talklist.xml:['medium']	app[]	ui-unmatch
<android.media.MediaMetadataRetriever: void setMode(int)>	talklist.xml:['medium']	app[]	ui-unmatch
<android.media.MediaMetadataRetriever: void setDataSource(android.content.Context,android.net.Uri)>	talklist.xml:['medium']	app[]	ui-unmatch
<android.media.MediaMetadataRetriever: android.graphics.Bitmap captureFrame()>	talklist.xml:['medium']	app[]	ui-unmatch
--------------------------------
<android.telephony.TelephonyManager: java.lang.String getLine1Number()>	confirm_phone.xml:['telephony']	app['telephony']	ui-unmatch
--------------------------------
<android.net.Uri: java.lang.String getHost()>	audio_video_player.xml:['host']	app['host']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	blog_album.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean isDirectory()>	blog_album.xml:['file', 'directory']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	blog_album.xml:['file']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStoragePublicDirectory(java.lang.String)>	blog_album.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	blog_album.xml:['file']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	blog_album.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	blog_album.xml:['access', 'file']	app['access']	ui-unmatch
<android.provider.MediaStore$Images$Media: java.lang.String insertImage(android.content.ContentResolver,android.graphics.Bitmap,java.lang.String,java.lang.String)>	wallpaperphotoflipper.xml:['medium', 'store', 'medium']	app['store']	ui-unmatch
--------------------------------
<java.io.FileNotFoundException: java.lang.String getMessage()>	photolist.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.media.AudioManager: void adjustStreamVolume(int,int,int)>	talklist.xml:['audio', 'volume']	app['volume']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void seekTo(int)>	editor.xml:['player']	app['player']	ui-unmatch
--------------------------------
<android.provider.MediaStore$Images$Media: java.lang.String insertImage(android.content.ContentResolver,android.graphics.Bitmap,java.lang.String,java.lang.String)>	facebookphotoflipper.xml:['medium', 'store', 'medium']	app['store']	ui-unmatch
--------------------------------
<android.view.MenuItem: android.view.MenuItem setAlphabeticShortcut(char)>	facebookphotoflipper.xml:['shortcut']	app['shortcut']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	blog_album.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean isDirectory()>	blog_album.xml:['file', 'directory']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	blog_album.xml:['file']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStoragePublicDirectory(java.lang.String)>	blog_album.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	blog_album.xml:['file']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	blog_album.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>	blog_album.xml:['access', 'file']	app['access']	ui-unmatch
<android.provider.MediaStore$Images$Media: java.lang.String insertImage(android.content.ContentResolver,android.graphics.Bitmap,java.lang.String,java.lang.String)>	wallpaperphotoflipper.xml:['medium', 'store', 'medium']	app['store']	ui-unmatch
--------------------------------
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>	app:['store']	app['store']	ui-unmatch
--------------------------------
<java.util.Timer: void <init>()>	talklist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	talklist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	talklist.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	tonelist.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: int getCurrentPosition()>	app:['player']	app['player']	ui-unmatch
--------------------------------
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>	app:['store']	app['store']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: int getCurrentPosition()>	app:['player']	app['player']	ui-unmatch
<android.media.MediaPlayer: void seekTo(int)>	app:['player']	app['player']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: int getDuration()>	app:['player']	app['player']	ui-unmatch
<android.media.MediaPlayer: void seekTo(int)>	app:['player']	app['player']	ui-unmatch
--------------------------------
