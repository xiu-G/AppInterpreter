<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	app:['location']	app['location']	ui-unmatch
--------------------------------
<android.location.Location: void distanceBetween(double,double,double,double,float[])>	app:['location']	app['location']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.widget.TabHost: int getCurrentTab()>	tab_content.xml:['host']	app['host']	ui-unmatch
<java.util.Timer: void cancel()>	showsearch.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>()>	showsearch.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	showsearch.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void scheduleAtFixedRate(java.util.TimerTask,long,long)>	showsearch.xml:['timer', 'rate']	app['timer', 'rate']	ui-unmatch
--------------------------------
<android.widget.TabHost: void setCurrentTab(int)>	tab_content.xml:['host']	app['host']	ui-unmatch
--------------------------------
<android.widget.TabHost: void setCurrentTab(int)>	tab_content.xml:['host']	app['host']	ui-unmatch
<android.widget.RadioButton: boolean isChecked()>	showsearch.xml:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: boolean isChecked()>	showsearch.xml:['radio']	app['radio']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	showsearch.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void add(int,int)>	showsearch.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	showsearch.xml:['calendar']	app['calendar']	ui-unmatch
<android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)>	showsearch.xml:['alarm']	app['alarm']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	showsearch.xml:['pause']	app['pause']	ui-unmatch
<java.util.Timer: void cancel()>	showsearch.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	showsearch.xml:['permission']	app['permission']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	showsearch.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getNetworkOperator()>	showsearch.xml:['telephony', 'network']	app['telephony', 'network']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	showsearch.xml:['language']	app['language']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	showsearch.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	showsearch.xml:['url']	app['url']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	showsearch.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnectedOrConnecting()>	showsearch.xml:['network', 'connect', 'connect']	app['network', 'connect', 'connect']	ui-unmatch
<android.widget.TabHost: void setCurrentTab(int)>	tab_content.xml:['host']	app['host']	ui-unmatch
<android.widget.RadioButton: void setChecked(boolean)>	showsearch.xml:['radio']	app['radio']	ui-unmatch
--------------------------------
<android.location.Location: void <init>(java.lang.String)>	app:['location']	app['location']	ui-unmatch
--------------------------------
<android.location.Geocoder: java.util.List getFromLocationName(java.lang.String,int)>	loading.xml:['location']	app['location']	ui-unmatch
<android.location.Address: double getLatitude()>	loading.xml:['address', 'latitude']	app['address', 'latitude']	ui-unmatch
<android.location.Address: double getLongitude()>	loading.xml:['address', 'longitude']	app['address', 'longitude']	ui-unmatch
<android.location.Location: void setLatitude(double)>	loading.xml:['location', 'latitude']	app['location', 'latitude']	ui-unmatch
<android.location.Location: void setLongitude(double)>	loading.xml:['location', 'longitude']	app['location', 'longitude']	ui-unmatch
<android.location.Criteria: void setPowerRequirement(int)>	loading.xml:['power']	app['power']	ui-unmatch
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>	loading.xml:['location']	app['location']	ui-unmatch
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	loading.xml:['location', 'location']	app['location', 'location']	ui-unmatch
<android.location.LocationManager: java.util.List getProviders(boolean)>	loading.xml:['location']	app['location']	ui-unmatch
<android.location.LocationManager: java.util.List getProviders(boolean)>	loading.xml:['location']	app['location']	ui-unmatch
<android.location.Location: double getLatitude()>	loading.xml:['location', 'latitude']	app['location', 'latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	loading.xml:['location', 'longitude']	app['location', 'longitude']	ui-unmatch
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	loading.xml:['location', 'location']	app['location', 'location']	ui-unmatch
--------------------------------
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>	tab_content.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(android.view.View)>	tab_content.xml:['host', 'indicator']	app['host', 'indicator']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.content.Intent)>	tab_content.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>	tab_content.xml:['host']	app['host']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.URLConnection: void connect()>	app:['url', 'connect']	app['url', 'connect']	ui-unmatch
<java.net.URLConnection: java.io.InputStream getInputStream()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<java.util.Timer: void cancel()>	loading.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>()>	loading.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	loading.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void scheduleAtFixedRate(java.util.TimerTask,long,long)>	showsearch.xml:['timer', 'rate']	app['timer', 'rate']	ui-unmatch
--------------------------------
<android.addextras.android.intent.action.CALL: void <init>()>	loading.xml:['call']	app['call']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	loading.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnectedOrConnecting()>	loading.xml:['network', 'connect', 'connect']	app['network', 'connect', 'connect']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	loading.xml:['pause']	app['pause']	ui-unmatch
<java.util.Timer: void cancel()>	loading.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<java.io.FileOutputStream: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.widget.TabHost: android.widget.TabWidget getTabWidget()>	tab_content.xml:['host']	app['host']	ui-unmatch
--------------------------------
<android.os.SystemClock: long elapsedRealtime()>	app:['clock']	app['clock']	ui-unmatch
<android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)>	app:['alarm']	app['alarm']	ui-unmatch
<android.app.AlarmManager: void cancel(android.app.PendingIntent)>	app:['alarm']	app['alarm']	ui-unmatch
--------------------------------
<java.io.FileOutputStream: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>	app:['url']	app['url']	ui-unmatch
--------------------------------
<java.util.Timer: void cancel()>	app:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void scheduleAtFixedRate(java.util.TimerTask,long,long)>	showsearch.xml:['timer', 'rate']	app['timer', 'rate']	ui-unmatch
<android.app.TabActivity: android.widget.TabHost getTabHost()>	app:['host']	app['host']	ui-unmatch
<android.widget.TabHost: int getCurrentTab()>	app:['host']	app['host']	ui-unmatch
<android.app.TabActivity: android.widget.TabHost getTabHost()>	app:['host']	app['host']	ui-unmatch
<android.widget.TabHost: int getCurrentTab()>	app:['host']	app['host']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	app:['pause']	app['pause']	ui-unmatch
<java.util.Timer: void cancel()>	app:['timer']	app['timer']	ui-unmatch
--------------------------------
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>	app:['access']	app['access']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.io.InputStream getInputStream()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.URLConnection: void connect()>	app:['url', 'connect']	app['url', 'connect']	ui-unmatch
<java.net.URLConnection: java.io.InputStream getInputStream()>	app:['url']	app['url']	ui-unmatch
<java.util.Timer: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void scheduleAtFixedRate(java.util.TimerTask,long,long)>	showsearch.xml:['timer', 'rate']	app['timer', 'rate']	ui-unmatch
--------------------------------
<javax.mail.PasswordAuthentication: void <init>(java.lang.String,java.lang.String)>	app:['password']	app['password']	ui-unmatch
--------------------------------
<android.location.Location: double getLongitude()>	app:['location', 'longitude']	app['location', 'longitude']	ui-unmatch
<android.location.Location: double getLatitude()>	app:['location', 'latitude']	app['location', 'latitude']	ui-unmatch
--------------------------------
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	app:['location', 'location']	app['location', 'location']	ui-unmatch
<android.location.Location: double getLatitude()>	app:['location', 'latitude']	app['location', 'latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app:['location', 'longitude']	app['location', 'longitude']	ui-unmatch
<android.location.Location: void setLatitude(double)>	app:['location', 'latitude']	app['location', 'latitude']	ui-unmatch
<android.location.Location: void setLongitude(double)>	app:['location', 'longitude']	app['location', 'longitude']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
--------------------------------
