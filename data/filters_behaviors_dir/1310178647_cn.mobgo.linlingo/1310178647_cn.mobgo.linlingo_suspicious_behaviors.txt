<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	activity_drawing.xml:['sensor']	app['sensor']	ui-unmatch
--------------------------------
<android.hardware.Sensor: int getType()>	activity_drawing.xml:['sensor']	app['sensor']	ui-unmatch
<android.media.MediaPlayer: void start()>	activity_drawing.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void stop()>	activity_drawing.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	activity_drawing.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener,android.hardware.Sensor)>	activity_drawing.xml:['sensor']	app['sensor']	ui-unmatch
--------------------------------
<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener,android.hardware.Sensor)>	activity_drawing.xml:['sensor']	app['sensor']	ui-unmatch
<android.media.MediaPlayer: void stop()>	activity_drawing.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	activity_drawing.xml:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<java.util.GregorianCalendar: java.util.Calendar getInstance()>	activity_almanac.xml:['calendar']	app[]	ui-unmatch
<java.util.Calendar: int get(int)>	activity_almanac.xml:['calendar']	app[]	ui-unmatch
--------------------------------
<android.net.Proxy: java.lang.String getDefaultHost()>	app:['host']	app['host']	ui-unmatch
<android.net.Proxy: java.lang.String getDefaultHost()>	app:['host']	app['host']	ui-unmatch
<android.net.Proxy: int getDefaultPort()>	app:['port']	app['port']	ui-unmatch
--------------------------------
<android.net.Proxy: java.lang.String getDefaultHost()>	app:['host']	app['host']	ui-unmatch
<android.net.Proxy: java.lang.String getDefaultHost()>	app:['host']	app['host']	ui-unmatch
<android.net.Proxy: int getDefaultPort()>	app:['port']	app['port']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	app:['telephony']	app['telephony']	ui-unmatch
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>	app:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getParentFile()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	app:['telephony']	app['telephony']	ui-unmatch
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>	app:['address']	app['address']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.telephony.TelephonyManager: int getNetworkType()>	app:['telephony']	app['telephony']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	app:['language']	app['language']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>	activity_main.xml:['location']	app[]	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	activity_main.xml:['file']	app['file']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	activity_main.xml:['language']	app['language']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	activity_main.xml:['call', 'permission']	app['call', 'permission']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: void stop()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.MediaPlayer: void release()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
--------------------------------
<android.app.Dialog: void onRestoreInstanceState(android.os.Bundle)>	app:['restore']	app['restore']	ui-unmatch
<java.util.Calendar: void set(int,int)>	app:[]	app[]
<java.util.Calendar: java.util.Date getTime()>	app:[]	app[]
--------------------------------
<android.net.NetworkInfo: boolean isConnected()>	app:['connect']	app['connect']	ui-unmatch
--------------------------------
<java.text.DateFormatSymbols: java.lang.String[] getShortMonths()>	app:['month']	app['month']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:[]	app[]
<java.util.Calendar: int get(int)>	app:[]	app[]
<android.text.format.DateFormat: java.text.DateFormat getMediumDateFormat(android.content.Context)>	app:['medium']	app['medium']	ui-unmatch
--------------------------------
<android.content.Context: java.io.File getFilesDir()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getParentFile()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[],int,int)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.util.Calendar: java.util.Calendar getInstance()>	alert_dialog.xml:['calendar']	app[]	ui-unmatch
--------------------------------
<java.text.DateFormatSymbols: java.lang.String[] getShortMonths()>	alert_dialog.xml:['month']	app['month']	ui-unmatch
--------------------------------
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	app:['telephony']	app['telephony']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	app:['language']	app['language']	ui-unmatch
--------------------------------
<android.widget.FrameLayout: void onRestoreInstanceState(android.os.Parcelable)>	app:['restore']	app['restore']	ui-unmatch
--------------------------------
