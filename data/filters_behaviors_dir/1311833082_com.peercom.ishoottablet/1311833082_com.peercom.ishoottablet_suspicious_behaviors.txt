<android.webkit.WebView: void loadUrl(java.lang.String)>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	setting.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	setting.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void flush()>	setting.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void close()>	setting.xml:['file']	app[]	ui-unmatch
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	setting.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	setting.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void flush()>	setting.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void close()>	setting.xml:['file']	app[]	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	setting.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
--------------------------------
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:[]	app[]
<java.io.FileInputStream: int available()>	app:[]	app[]
<java.io.FileInputStream: int read(byte[])>	app:[]	app[]
<java.io.FileInputStream: void close()>	app:[]	app[]
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:[]	app[]
<java.io.FileOutputStream: void write(byte[])>	app:[]	app[]
<java.io.FileOutputStream: void flush()>	app:[]	app[]
<java.io.FileOutputStream: void close()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:[]	app[]
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:[]	app[]
<java.io.FileInputStream: int available()>	app:[]	app[]
<java.io.FileInputStream: int read(byte[])>	app:[]	app[]
<java.io.FileInputStream: void close()>	app:[]	app[]
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:[]	app[]
<java.io.FileOutputStream: void write(byte[])>	app:[]	app[]
<java.io.FileOutputStream: void flush()>	app:[]	app[]
<java.io.FileOutputStream: void close()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:[]	app[]
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:[]	app[]
<java.io.FileInputStream: int available()>	app:[]	app[]
<java.io.FileInputStream: int read(byte[])>	app:[]	app[]
<java.io.FileInputStream: void close()>	app:[]	app[]
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:[]	app[]
<java.io.FileOutputStream: void write(byte[])>	app:[]	app[]
<java.io.FileOutputStream: void flush()>	app:[]	app[]
<java.io.FileOutputStream: void close()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:[]	app[]
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<java.util.Timer: void <init>()>	player.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	player.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLDecoder: java.lang.String decode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void connect()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getErrorStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:[]	app[]
<java.io.FileInputStream: int available()>	app:[]	app[]
<java.io.FileInputStream: int read(byte[])>	app:[]	app[]
<java.io.FileInputStream: void close()>	app:[]	app[]
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:[]	app[]
<java.io.FileOutputStream: void write(byte[])>	app:[]	app[]
<java.io.FileOutputStream: void flush()>	app:[]	app[]
<java.io.FileOutputStream: void close()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:[]	app[]
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(java.lang.CharSequence[],int,android.content.DialogInterface$OnClickListener)>	shootdetails.xml:['choice']	app['choice']	ui-unmatch
--------------------------------
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	changepw.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: int available()>	changepw.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	changepw.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void close()>	changepw.xml:['file']	app[]	ui-unmatch
<android.webkit.WebView: void postUrl(java.lang.String,byte[])>	changepw.xml:['url']	app['url']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	changepw.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebSettings: void setSavePassword(boolean)>	changepw.xml:[]	app[]
<android.webkit.WebSettings: void setSaveFormData(boolean)>	changepw.xml:['form']	app['form']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean mkdirs()>	app:[]	app[]
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
--------------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>	findpw.xml:['url']	app['url']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	findpw.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebSettings: void setSavePassword(boolean)>	findpw.xml:[]	app[]
<android.webkit.WebSettings: void setSaveFormData(boolean)>	findpw.xml:['form']	app['form']	ui-unmatch
--------------------------------
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:[]	app[]
<java.io.FileInputStream: int available()>	app:[]	app[]
<java.io.FileInputStream: int read(byte[])>	app:[]	app[]
<java.io.FileInputStream: void close()>	app:[]	app[]
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:[]	app[]
<java.io.FileOutputStream: void write(byte[])>	app:[]	app[]
<java.io.FileOutputStream: void flush()>	app:[]	app[]
<java.io.FileOutputStream: void close()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:[]	app[]
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:[]	app[]
<java.io.FileInputStream: int available()>	app:[]	app[]
<java.io.FileInputStream: int read(byte[])>	app:[]	app[]
<java.io.FileInputStream: void close()>	app:[]	app[]
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:[]	app[]
<java.io.FileOutputStream: void write(byte[])>	app:[]	app[]
<java.io.FileOutputStream: void flush()>	app:[]	app[]
<java.io.FileOutputStream: void close()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:[]	app[]
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:[]	app[]
<java.io.FileInputStream: int available()>	app:[]	app[]
<java.io.FileInputStream: int read(byte[])>	app:[]	app[]
<java.io.FileInputStream: void close()>	app:[]	app[]
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:[]	app[]
<java.io.FileOutputStream: void write(byte[])>	app:[]	app[]
<java.io.FileOutputStream: void flush()>	app:[]	app[]
<java.io.FileOutputStream: void close()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:[]	app[]
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:[]	app[]
<java.io.FileInputStream: int available()>	app:[]	app[]
<java.io.FileInputStream: int read(byte[])>	app:[]	app[]
<java.io.FileInputStream: void close()>	app:[]	app[]
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:[]	app[]
<java.io.FileOutputStream: void write(byte[])>	app:[]	app[]
<java.io.FileOutputStream: void flush()>	app:[]	app[]
<java.io.FileOutputStream: void close()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:[]	app[]
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	searchshooting.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
--------------------------------
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:[]	app[]
<java.io.FileInputStream: int available()>	app:[]	app[]
<java.io.FileInputStream: int read(byte[])>	app:[]	app[]
<java.io.FileInputStream: void close()>	app:[]	app[]
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:[]	app[]
<java.io.FileOutputStream: void write(byte[])>	app:[]	app[]
<java.io.FileOutputStream: void flush()>	app:[]	app[]
<java.io.FileOutputStream: void close()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:[]	app[]
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:[]	app[]
<java.io.FileInputStream: int available()>	app:[]	app[]
<java.io.FileInputStream: int read(byte[])>	app:[]	app[]
<java.io.FileInputStream: void close()>	app:[]	app[]
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:[]	app[]
<java.io.FileOutputStream: void write(byte[])>	app:[]	app[]
<java.io.FileOutputStream: void flush()>	app:[]	app[]
<java.io.FileOutputStream: void close()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:[]	app[]
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:[]	app[]
<java.io.FileInputStream: int available()>	app:[]	app[]
<java.io.FileInputStream: int read(byte[])>	app:[]	app[]
<java.io.FileInputStream: void close()>	app:[]	app[]
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:[]	app[]
<java.io.FileOutputStream: void write(byte[])>	app:[]	app[]
<java.io.FileOutputStream: void flush()>	app:[]	app[]
<java.io.FileOutputStream: void close()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:[]	app[]
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:[]	app[]
<java.io.FileInputStream: int available()>	app:[]	app[]
<java.io.FileInputStream: int read(byte[])>	app:[]	app[]
<java.io.FileInputStream: void close()>	app:[]	app[]
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:[]	app[]
<java.io.FileOutputStream: void write(byte[])>	app:[]	app[]
<java.io.FileOutputStream: void flush()>	app:[]	app[]
<java.io.FileOutputStream: void close()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:[]	app[]
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:[]	app[]
<java.io.FileInputStream: int available()>	app:[]	app[]
<java.io.FileInputStream: int read(byte[])>	app:[]	app[]
<java.io.FileInputStream: void close()>	app:[]	app[]
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:[]	app[]
<java.io.FileOutputStream: void write(byte[])>	app:[]	app[]
<java.io.FileOutputStream: void flush()>	app:[]	app[]
<java.io.FileOutputStream: void close()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:[]	app[]
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:[]	app[]
<java.io.FileInputStream: int available()>	app:[]	app[]
<java.io.FileInputStream: int read(byte[])>	app:[]	app[]
<java.io.FileInputStream: void close()>	app:[]	app[]
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:[]	app[]
<java.io.FileOutputStream: void write(byte[])>	app:[]	app[]
<java.io.FileOutputStream: void flush()>	app:[]	app[]
<java.io.FileOutputStream: void close()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:[]	app[]
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:[]	app[]
<java.io.FileInputStream: int available()>	app:[]	app[]
<java.io.FileInputStream: int read(byte[])>	app:[]	app[]
<java.io.FileInputStream: void close()>	app:[]	app[]
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:[]	app[]
<java.io.FileOutputStream: void write(byte[])>	app:[]	app[]
<java.io.FileOutputStream: void flush()>	app:[]	app[]
<java.io.FileOutputStream: void close()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:[]	app[]
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: int getDuration()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.AudioManager: int getStreamMaxVolume(int)>	app:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
<android.media.AudioManager: int getStreamVolume(int)>	app:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
<android.media.AudioManager: int getStreamMaxVolume(int)>	player.xml:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
<android.media.AudioManager: void setStreamVolume(int,int,int)>	player.xml:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
<android.widget.VideoView: void start()>	player.xml:['video']	app['video']	ui-unmatch
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:[]	app[]
<java.io.FileInputStream: int available()>	app:[]	app[]
<java.io.FileInputStream: int read(byte[])>	app:[]	app[]
<java.io.FileInputStream: void close()>	app:[]	app[]
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:[]	app[]
<java.io.FileOutputStream: void write(byte[])>	app:[]	app[]
<java.io.FileOutputStream: void flush()>	app:[]	app[]
<java.io.FileOutputStream: void close()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:[]	app[]
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.widget.VideoView: void seekTo(int)>	player.xml:['video']	app['video']	ui-unmatch
<android.widget.VideoView: void start()>	player.xml:['video']	app['video']	ui-unmatch
--------------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>	notice.xml:['url']	app['url']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	notice.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebSettings: void setSavePassword(boolean)>	notice.xml:['password']	app[]	ui-unmatch
<android.webkit.WebSettings: void setSaveFormData(boolean)>	notice.xml:['form']	app['form']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnectedOrConnecting()>	app:['network']	app['network']	ui-unmatch
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:[]	app[]
<java.io.FileInputStream: int available()>	app:[]	app[]
<java.io.FileInputStream: int read(byte[])>	app:[]	app[]
<java.io.FileInputStream: void close()>	app:[]	app[]
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:[]	app[]
<java.io.FileOutputStream: void write(byte[])>	app:[]	app[]
<java.io.FileOutputStream: void flush()>	app:[]	app[]
<java.io.FileOutputStream: void close()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:[]	app[]
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	app:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean mkdirs()>	app:[]	app[]
<java.io.File: java.io.File[] listFiles()>	app:[]	app[]
<java.io.File: boolean isFile()>	app:[]	app[]
<java.io.File: java.lang.String getParent()>	app:[]	app[]
<java.io.File: java.lang.String getName()>	app:[]	app[]
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	app:['calendar']	app['calendar']	ui-unmatch
--------------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:[]	app[]
<java.io.FileInputStream: int available()>	app:[]	app[]
<java.io.FileInputStream: int read(byte[])>	app:[]	app[]
<java.io.FileInputStream: void close()>	app:[]	app[]
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:[]	app[]
<java.io.FileOutputStream: void write(byte[])>	app:[]	app[]
<java.io.FileOutputStream: void flush()>	app:[]	app[]
<java.io.FileOutputStream: void close()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:[]	app[]
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
<android.widget.VideoView: void seekTo(int)>	app:['video']	app['video']	ui-unmatch
--------------------------------
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:[]	app[]
<java.io.FileInputStream: int available()>	app:[]	app[]
<java.io.FileInputStream: int read(byte[])>	app:[]	app[]
<java.io.FileInputStream: void close()>	app:[]	app[]
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:[]	app[]
<java.io.FileOutputStream: void write(byte[])>	app:[]	app[]
<java.io.FileOutputStream: void flush()>	app:[]	app[]
<java.io.FileOutputStream: void close()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:[]	app[]
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	talklist.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
--------------------------------
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:[]	app[]
<java.io.FileInputStream: int available()>	app:[]	app[]
<java.io.FileInputStream: int read(byte[])>	app:[]	app[]
<java.io.FileInputStream: void close()>	app:[]	app[]
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:[]	app[]
<java.io.FileOutputStream: void write(byte[])>	app:[]	app[]
<java.io.FileOutputStream: void flush()>	app:[]	app[]
<java.io.FileOutputStream: void close()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:[]	app[]
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<java.io.FileNotFoundException: void printStackTrace()>	app:[]	app[]
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:[]	app[]
<java.io.FileInputStream: int available()>	app:[]	app[]
<java.io.FileInputStream: int read(byte[])>	app:[]	app[]
<java.io.FileInputStream: void close()>	app:[]	app[]
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:[]	app[]
<java.io.FileOutputStream: void write(byte[])>	app:[]	app[]
<java.io.FileOutputStream: void flush()>	app:[]	app[]
<java.io.FileOutputStream: void close()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:[]	app[]
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	sns_invite_my_fb_friend.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
--------------------------------
<android.widget.VideoView: boolean isPlaying()>	app:['video']	app['video']	ui-unmatch
<android.widget.VideoView: void pause()>	app:['video', 'pause']	app['video', 'pause']	ui-unmatch
<android.widget.VideoView: void start()>	app:['video']	app['video']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	login.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	login.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	login.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	login.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	login.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	login.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	login.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	login.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	login.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	login.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	login.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	login.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean mkdirs()>	login.xml:['file']	app[]	ui-unmatch
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>	login.xml:['file']	app[]	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	login.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: int available()>	login.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	login.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void close()>	login.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean delete()>	login.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:[]	app[]
<java.io.FileInputStream: int available()>	app:[]	app[]
<java.io.FileInputStream: int read(byte[])>	app:[]	app[]
<java.io.FileInputStream: void close()>	app:[]	app[]
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:[]	app[]
<java.io.FileOutputStream: void write(byte[])>	app:[]	app[]
<java.io.FileOutputStream: void flush()>	app:[]	app[]
<java.io.FileOutputStream: void close()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:[]	app[]
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	download.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(java.lang.CharSequence[],int,android.content.DialogInterface$OnClickListener)>	changeprofile.xml:['choice']	app['choice']	ui-unmatch
--------------------------------
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:[]	app[]
<java.io.FileInputStream: int available()>	app:[]	app[]
<java.io.FileInputStream: int read(byte[])>	app:[]	app[]
<java.io.FileInputStream: void close()>	app:[]	app[]
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:[]	app[]
<java.io.FileOutputStream: void write(byte[])>	app:[]	app[]
<java.io.FileOutputStream: void flush()>	app:[]	app[]
<java.io.FileOutputStream: void close()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:[]	app[]
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.webkit.WebView: void postUrl(java.lang.String,byte[])>	payment_transaction_page.xml:['url']	app['url']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	payment_transaction_page.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebSettings: void setSavePassword(boolean)>	payment_transaction_page.xml:['password']	app[]	ui-unmatch
<android.webkit.WebSettings: void setSaveFormData(boolean)>	payment_transaction_page.xml:['form']	app['form']	ui-unmatch
--------------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
--------------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:[]	app[]
<java.io.FileInputStream: int available()>	app:[]	app[]
<java.io.FileInputStream: int read(byte[])>	app:[]	app[]
<java.io.FileInputStream: void close()>	app:[]	app[]
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:[]	app[]
<java.io.FileOutputStream: void write(byte[])>	app:[]	app[]
<java.io.FileOutputStream: void flush()>	app:[]	app[]
<java.io.FileOutputStream: void close()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:[]	app[]
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.widget.VideoView: void pause()>	app:['video', 'pause']	app['video', 'pause']	ui-unmatch
--------------------------------
<android.widget.VideoView: void pause()>	app:['video', 'pause']	app['video', 'pause']	ui-unmatch
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:[]	app[]
<java.io.FileInputStream: int available()>	app:[]	app[]
<java.io.FileInputStream: int read(byte[])>	app:[]	app[]
<java.io.FileInputStream: void close()>	app:[]	app[]
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:[]	app[]
<java.io.FileOutputStream: void write(byte[])>	app:[]	app[]
<java.io.FileOutputStream: void flush()>	app:[]	app[]
<java.io.FileOutputStream: void close()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:[]	app[]
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	player.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	player.xml:['url']	app['url']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	player.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: int available()>	player.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	player.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void close()>	player.xml:['file']	app[]	ui-unmatch
<android.widget.VideoView: void setVideoURI(android.net.Uri)>	player.xml:['video', 'video']	app['video', 'video']	ui-unmatch
<android.widget.VideoView: void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener)>	player.xml:['video']	app['video']	ui-unmatch
<android.widget.VideoView: void setOnErrorListener(android.media.MediaPlayer$OnErrorListener)>	player.xml:['video']	app['video']	ui-unmatch
<android.widget.VideoView: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	player.xml:['video']	app['video']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	searchfirstview.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
--------------------------------
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:[]	app[]
<java.io.FileInputStream: int available()>	app:[]	app[]
<java.io.FileInputStream: int read(byte[])>	app:[]	app[]
<java.io.FileInputStream: void close()>	app:[]	app[]
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:[]	app[]
<java.io.FileOutputStream: void write(byte[])>	app:[]	app[]
<java.io.FileOutputStream: void flush()>	app:[]	app[]
<java.io.FileOutputStream: void close()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:[]	app[]
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>	notice_setting_page.xml:['url']	app['url']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	notice_setting_page.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebSettings: void setSavePassword(boolean)>	notice_setting_page.xml:['password']	app[]	ui-unmatch
<android.webkit.WebSettings: void setSaveFormData(boolean)>	notice_setting_page.xml:['form']	app['form']	ui-unmatch
--------------------------------
<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>	player.xml:['power']	app['power']	ui-unmatch
<android.os.PowerManager$WakeLock: void acquire()>	player.xml:['power']	app['power']	ui-unmatch
<android.widget.VideoView: int getDuration()>	player.xml:['video']	app['video']	ui-unmatch
<android.widget.VideoView: int getCurrentPosition()>	player.xml:['video']	app['video']	ui-unmatch
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:[]	app[]
<java.io.FileInputStream: int available()>	app:[]	app[]
<java.io.FileInputStream: int read(byte[])>	app:[]	app[]
<java.io.FileInputStream: void close()>	app:[]	app[]
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:[]	app[]
<java.io.FileOutputStream: void write(byte[])>	app:[]	app[]
<java.io.FileOutputStream: void flush()>	app:[]	app[]
<java.io.FileOutputStream: void close()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:[]	app[]
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	player.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnectedOrConnecting()>	player.xml:['network', 'connect', 'connect']	app['network']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	player.xml:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	player.xml:['file']	app[]	ui-unmatch
<java.util.Timer: void <init>()>	player.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	player.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<android.widget.VideoView: void setVideoURI(android.net.Uri)>	player.xml:['video', 'video']	app['video', 'video']	ui-unmatch
<android.widget.VideoView: void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener)>	player.xml:['video']	app['video']	ui-unmatch
<android.widget.VideoView: void setOnErrorListener(android.media.MediaPlayer$OnErrorListener)>	player.xml:['video']	app['video']	ui-unmatch
<android.widget.VideoView: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>	player.xml:['video']	app['video']	ui-unmatch
<android.media.AudioManager: int getStreamMaxVolume(int)>	player.xml:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
<android.media.AudioManager: int getStreamVolume(int)>	player.xml:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
--------------------------------
<android.widget.VideoView: void pause()>	app:['video', 'pause']	app['video', 'pause']	ui-unmatch
<android.widget.VideoView: void start()>	player.xml:['video']	app['video']	ui-unmatch
<android.widget.VideoView: int getDuration()>	player.xml:['video']	app['video']	ui-unmatch
<android.widget.VideoView: void seekTo(int)>	player.xml:['video']	app['video']	ui-unmatch
--------------------------------
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	mypage.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	mypage.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void flush()>	mypage.xml:['file']	app[]	ui-unmatch
<java.io.FileOutputStream: void close()>	mypage.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	login.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.webkit.WebView: void postUrl(java.lang.String,byte[])>	paymentpage.xml:['url']	app['url']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	paymentpage.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebSettings: void setSavePassword(boolean)>	paymentpage.xml:['password']	app[]	ui-unmatch
<android.webkit.WebSettings: void setSaveFormData(boolean)>	paymentpage.xml:['form']	app['form']	ui-unmatch
--------------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>	iguide.xml:['url']	app['url']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	iguide.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebSettings: void setSavePassword(boolean)>	iguide.xml:['password']	app[]	ui-unmatch
<android.webkit.WebSettings: void setSaveFormData(boolean)>	iguide.xml:['form']	app['form']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
--------------------------------
<android.webkit.WebView: void postUrl(java.lang.String,byte[])>	question_ask_page.xml:['url']	app['url']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	question_ask_page.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebSettings: void setSavePassword(boolean)>	question_ask_page.xml:['password']	app[]	ui-unmatch
<android.webkit.WebSettings: void setSaveFormData(boolean)>	question_ask_page.xml:['form']	app['form']	ui-unmatch
--------------------------------
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:[]	app[]
<java.io.FileInputStream: int available()>	app:[]	app[]
<java.io.FileInputStream: int read(byte[])>	app:[]	app[]
<java.io.FileInputStream: void close()>	app:[]	app[]
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:[]	app[]
<java.io.FileOutputStream: void write(byte[])>	app:[]	app[]
<java.io.FileOutputStream: void flush()>	app:[]	app[]
<java.io.FileOutputStream: void close()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:[]	app[]
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.util.TimerTask: void <init>()>	detail_write.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>()>	detail_write.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	detail_write.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
--------------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>	join.xml:['url']	app['url']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	join.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebSettings: void setSavePassword(boolean)>	join.xml:['password']	app[]	ui-unmatch
<android.webkit.WebSettings: void setSaveFormData(boolean)>	join.xml:['form']	app['form']	ui-unmatch
--------------------------------
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:[]	app[]
<java.io.FileInputStream: int available()>	app:[]	app[]
<java.io.FileInputStream: int read(byte[])>	app:[]	app[]
<java.io.FileInputStream: void close()>	app:[]	app[]
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:[]	app[]
<java.io.FileOutputStream: void write(byte[])>	app:[]	app[]
<java.io.FileOutputStream: void flush()>	app:[]	app[]
<java.io.FileOutputStream: void close()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:[]	app[]
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
--------------------------------
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:[]	app[]
<java.io.FileInputStream: int available()>	app:[]	app[]
<java.io.FileInputStream: int read(byte[])>	app:[]	app[]
<java.io.FileInputStream: void close()>	app:[]	app[]
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:[]	app[]
<java.io.FileOutputStream: void write(byte[])>	app:[]	app[]
<java.io.FileOutputStream: void flush()>	app:[]	app[]
<java.io.FileOutputStream: void close()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:[]	app[]
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<java.util.Calendar: java.util.Calendar getInstance()>	hotlist.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void add(int,int)>	hotlist.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	hotlist.xml:['calendar']	app['calendar']	ui-unmatch
--------------------------------
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	likefanpage.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebSettings: void setSavePassword(boolean)>	likefanpage.xml:['password']	app[]	ui-unmatch
<android.webkit.WebSettings: void setSaveFormData(boolean)>	likefanpage.xml:['form']	app['form']	ui-unmatch
--------------------------------
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
<android.widget.VideoView: int getDuration()>	app:['video']	app['video']	ui-unmatch
<android.widget.VideoView: void seekTo(int)>	app:['video']	app['video']	ui-unmatch
--------------------------------
<android.graphics.Camera: void <init>()>	shootinglist.xml:['camera']	app['camera']	ui-unmatch
--------------------------------
<android.media.MediaPlayer: int getDuration()>	app:['medium', 'player']	app['medium', 'player']	ui-unmatch
<android.media.AudioManager: int getStreamMaxVolume(int)>	app:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
<android.media.AudioManager: int getStreamVolume(int)>	app:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoOutput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setDoInput(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setReadTimeout(int)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	app:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:[]	app[]
<java.io.FileOutputStream: void write(byte[])>	app:[]	app[]
<java.io.FileOutputStream: void flush()>	app:[]	app[]
<java.io.FileOutputStream: void close()>	app:[]	app[]
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:[]	app[]
<java.io.FileInputStream: int available()>	app:[]	app[]
<java.io.FileInputStream: int read(byte[])>	app:[]	app[]
<java.io.FileInputStream: void close()>	app:[]	app[]
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:[]	app[]
<java.io.FileOutputStream: void write(byte[])>	app:[]	app[]
<java.io.FileOutputStream: void flush()>	app:[]	app[]
<java.io.FileOutputStream: void close()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:[]	app[]
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	filelist.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	shootinglist.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
--------------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>	app:['url']	app['url']	ui-unmatch
--------------------------------
<java.util.TimerTask: void <init>()>	login.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>()>	login.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	login.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
--------------------------------
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:[]	app[]
<java.io.FileInputStream: int available()>	app:[]	app[]
<java.io.FileInputStream: int read(byte[])>	app:[]	app[]
<java.io.FileInputStream: void close()>	app:[]	app[]
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:[]	app[]
<java.io.FileOutputStream: void write(byte[])>	app:[]	app[]
<java.io.FileOutputStream: void flush()>	app:[]	app[]
<java.io.FileOutputStream: void close()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:[]	app[]
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:[]	app[]
<java.io.FileInputStream: int available()>	app:[]	app[]
<java.io.FileInputStream: int read(byte[])>	app:[]	app[]
<java.io.FileInputStream: void close()>	app:[]	app[]
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:[]	app[]
<java.io.FileOutputStream: void write(byte[])>	app:[]	app[]
<java.io.FileOutputStream: void flush()>	app:[]	app[]
<java.io.FileOutputStream: void close()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:[]	app[]
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	sns_gift_my_fb_friend.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
--------------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>	instance_notice.xml:['url']	app['url']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	instance_notice.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebSettings: void setSavePassword(boolean)>	instance_notice.xml:['password']	app[]	ui-unmatch
<android.webkit.WebSettings: void setSaveFormData(boolean)>	instance_notice.xml:['form']	app['form']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	shooter_shootinglist.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	shooter_shootinglist.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	shooter_shootinglist.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	shooter_shootinglist.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:[]	app[]
<java.io.FileInputStream: int available()>	app:[]	app[]
<java.io.FileInputStream: int read(byte[])>	app:[]	app[]
<java.io.FileInputStream: void close()>	app:[]	app[]
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:[]	app[]
<java.io.FileOutputStream: void write(byte[])>	app:[]	app[]
<java.io.FileOutputStream: void flush()>	app:[]	app[]
<java.io.FileOutputStream: void close()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:[]	app[]
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	shooter_shootinglist.xml:['url']	app['url']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	shooter_shootinglist.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	shootinglist_extendlist.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
--------------------------------
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:[]	app[]
<java.io.FileInputStream: int available()>	app:[]	app[]
<java.io.FileInputStream: int read(byte[])>	app:[]	app[]
<java.io.FileInputStream: void close()>	app:[]	app[]
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:[]	app[]
<java.io.FileOutputStream: void write(byte[])>	app:[]	app[]
<java.io.FileOutputStream: void flush()>	app:[]	app[]
<java.io.FileOutputStream: void close()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:[]	app[]
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:[]	app[]
<java.io.FileInputStream: int available()>	app:[]	app[]
<java.io.FileInputStream: int read(byte[])>	app:[]	app[]
<java.io.FileInputStream: void close()>	app:[]	app[]
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:[]	app[]
<java.io.FileOutputStream: void write(byte[])>	app:[]	app[]
<java.io.FileOutputStream: void flush()>	app:[]	app[]
<java.io.FileOutputStream: void close()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:[]	app[]
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnectedOrConnecting()>	app:['network']	app['network']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	app:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean mkdirs()>	app:[]	app[]
<java.io.File: java.io.File[] listFiles()>	app:[]	app[]
<java.io.File: boolean isFile()>	app:[]	app[]
<java.io.File: java.lang.String getParent()>	app:[]	app[]
<java.io.File: java.lang.String getName()>	app:[]	app[]
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	app:['calendar']	app['calendar']	ui-unmatch
--------------------------------
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:[]	app[]
<java.io.FileInputStream: int available()>	app:[]	app[]
<java.io.FileInputStream: int read(byte[])>	app:[]	app[]
<java.io.FileInputStream: void close()>	app:[]	app[]
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:[]	app[]
<java.io.FileOutputStream: void write(byte[])>	app:[]	app[]
<java.io.FileOutputStream: void flush()>	app:[]	app[]
<java.io.FileOutputStream: void close()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:[]	app[]
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<java.util.Calendar: java.util.Calendar getInstance()>	mypage.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	mypage.xml:['calendar']	app['calendar']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	mypage.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: int available()>	mypage.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	mypage.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void close()>	mypage.xml:['file']	app[]	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	mypage.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: int available()>	mypage.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	mypage.xml:['file']	app[]	ui-unmatch
<java.io.FileInputStream: void close()>	mypage.xml:['file']	app[]	ui-unmatch
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:[]	app[]
<java.io.FileInputStream: int available()>	app:[]	app[]
<java.io.FileInputStream: int read(byte[])>	app:[]	app[]
<java.io.FileInputStream: void close()>	app:[]	app[]
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:[]	app[]
<java.io.FileOutputStream: void write(byte[])>	app:[]	app[]
<java.io.FileOutputStream: void flush()>	app:[]	app[]
<java.io.FileOutputStream: void close()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:[]	app[]
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.media.AudioManager: int getStreamMaxVolume(int)>	player.xml:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
<android.media.AudioManager: int getStreamVolume(int)>	player.xml:['audio', 'volume']	app['audio', 'volume']	ui-unmatch
<android.widget.VideoView: void pause()>	player.xml:['video', 'pause']	app['video', 'pause']	ui-unmatch
<android.widget.VideoView: int getCurrentPosition()>	player.xml:['video']	app['video']	ui-unmatch
<android.os.PowerManager$WakeLock: void release()>	player.xml:['power']	app['power']	ui-unmatch
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:[]	app[]
<java.io.FileInputStream: int available()>	app:[]	app[]
<java.io.FileInputStream: int read(byte[])>	app:[]	app[]
<java.io.FileInputStream: void close()>	app:[]	app[]
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:[]	app[]
<java.io.FileOutputStream: void write(byte[])>	app:[]	app[]
<java.io.FileOutputStream: void flush()>	app:[]	app[]
<java.io.FileOutputStream: void close()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:[]	app[]
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:[]	app[]
<java.io.FileInputStream: int available()>	app:[]	app[]
<java.io.FileInputStream: int read(byte[])>	app:[]	app[]
<java.io.FileInputStream: void close()>	app:[]	app[]
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:[]	app[]
<java.io.FileOutputStream: void write(byte[])>	app:[]	app[]
<java.io.FileOutputStream: void flush()>	app:[]	app[]
<java.io.FileOutputStream: void close()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:[]	app[]
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:[]	app[]
<java.io.FileInputStream: int available()>	app:[]	app[]
<java.io.FileInputStream: int read(byte[])>	app:[]	app[]
<java.io.FileInputStream: void close()>	app:[]	app[]
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:[]	app[]
<java.io.FileOutputStream: void write(byte[])>	app:[]	app[]
<java.io.FileOutputStream: void flush()>	app:[]	app[]
<java.io.FileOutputStream: void close()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:[]	app[]
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	player.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
--------------------------------
<android.widget.VideoView: void pause()>	app:['video', 'pause']	app['video', 'pause']	ui-unmatch
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
<android.os.PowerManager$WakeLock: void release()>	app:['power']	app['power']	ui-unmatch
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:[]	app[]
<java.io.FileInputStream: int available()>	app:[]	app[]
<java.io.FileInputStream: int read(byte[])>	app:[]	app[]
<java.io.FileInputStream: void close()>	app:[]	app[]
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:[]	app[]
<java.io.FileOutputStream: void write(byte[])>	app:[]	app[]
<java.io.FileOutputStream: void flush()>	app:[]	app[]
<java.io.FileOutputStream: void close()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:[]	app[]
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.widget.VideoView: void pause()>	app:['video', 'pause']	app['video', 'pause']	ui-unmatch
--------------------------------
<android.media.AudioManager: void setStreamMute(int,boolean)>	player.xml:['audio']	app['audio']	ui-unmatch
--------------------------------
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
<android.widget.VideoView: int getDuration()>	app:['video']	app['video']	ui-unmatch
<android.widget.VideoView: void seekTo(int)>	app:['video']	app['video']	ui-unmatch
--------------------------------
<android.widget.VideoView: void pause()>	app:['video', 'pause']	app['video', 'pause']	ui-unmatch
--------------------------------
<android.widget.VideoView: boolean isPlaying()>	app:['video']	app['video']	ui-unmatch
<android.widget.VideoView: void pause()>	app:['video', 'pause']	app['video', 'pause']	ui-unmatch
<android.widget.VideoView: void start()>	app:['video']	app['video']	ui-unmatch
--------------------------------
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
<android.widget.VideoView: void seekTo(int)>	app:['video']	app['video']	ui-unmatch
--------------------------------
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
--------------------------------
<android.widget.VideoView: void pause()>	app:['video', 'pause']	app['video', 'pause']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	player.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	player_shootinglist.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
--------------------------------
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:[]	app[]
<java.io.FileInputStream: int available()>	app:[]	app[]
<java.io.FileInputStream: int read(byte[])>	app:[]	app[]
<java.io.FileInputStream: void close()>	app:[]	app[]
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:[]	app[]
<java.io.FileOutputStream: void write(byte[])>	app:[]	app[]
<java.io.FileOutputStream: void flush()>	app:[]	app[]
<java.io.FileOutputStream: void close()>	app:[]	app[]
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean mkdirs()>	app:[]	app[]
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnectedOrConnecting()>	app:['network']	app['network']	ui-unmatch
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:[]	app[]
<java.io.FileInputStream: int available()>	app:[]	app[]
<java.io.FileInputStream: int read(byte[])>	app:[]	app[]
<java.io.FileInputStream: void close()>	app:[]	app[]
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:[]	app[]
<java.io.FileOutputStream: void write(byte[])>	app:[]	app[]
<java.io.FileOutputStream: void flush()>	app:[]	app[]
<java.io.FileOutputStream: void close()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:[]	app[]
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	app:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean mkdirs()>	app:[]	app[]
<java.io.File: java.io.File[] listFiles()>	app:[]	app[]
<java.io.File: boolean isFile()>	app:[]	app[]
<java.io.File: java.lang.String getParent()>	app:[]	app[]
<java.io.File: java.lang.String getName()>	app:[]	app[]
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	app:['calendar']	app['calendar']	ui-unmatch
--------------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
--------------------------------
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:[]	app[]
<java.io.FileInputStream: int available()>	app:[]	app[]
<java.io.FileInputStream: int read(byte[])>	app:[]	app[]
<java.io.FileInputStream: void close()>	app:[]	app[]
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:[]	app[]
<java.io.FileOutputStream: void write(byte[])>	app:[]	app[]
<java.io.FileOutputStream: void flush()>	app:[]	app[]
<java.io.FileOutputStream: void close()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:[]	app[]
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<java.util.TimerTask: void <init>()>	detail_write2.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>()>	detail_write2.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnectedOrConnecting()>	app:['network']	app['network']	ui-unmatch
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:[]	app[]
<java.io.FileInputStream: int available()>	app:[]	app[]
<java.io.FileInputStream: int read(byte[])>	app:[]	app[]
<java.io.FileInputStream: void close()>	app:[]	app[]
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:[]	app[]
<java.io.FileOutputStream: void write(byte[])>	app:[]	app[]
<java.io.FileOutputStream: void flush()>	app:[]	app[]
<java.io.FileOutputStream: void close()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:[]	app[]
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:[]	app[]
<java.io.FileInputStream: int available()>	app:[]	app[]
<java.io.FileInputStream: int read(byte[])>	app:[]	app[]
<java.io.FileInputStream: void close()>	app:[]	app[]
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:[]	app[]
<java.io.FileOutputStream: void write(byte[])>	app:[]	app[]
<java.io.FileOutputStream: void flush()>	app:[]	app[]
<java.io.FileOutputStream: void close()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:[]	app[]
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnectedOrConnecting()>	app:['network']	app['network']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getContentLength()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	app:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean mkdirs()>	app:[]	app[]
<java.io.File: java.io.File[] listFiles()>	app:[]	app[]
<java.io.File: boolean isFile()>	app:[]	app[]
<java.io.File: java.lang.String getParent()>	app:[]	app[]
<java.io.File: java.lang.String getName()>	app:[]	app[]
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	app:['calendar']	app['calendar']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	offdownload.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:[]	app[]
<java.io.FileInputStream: int available()>	app:[]	app[]
<java.io.FileInputStream: int read(byte[])>	app:[]	app[]
<java.io.FileInputStream: void close()>	app:[]	app[]
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:[]	app[]
<java.io.FileOutputStream: void write(byte[])>	app:[]	app[]
<java.io.FileOutputStream: void flush()>	app:[]	app[]
<java.io.FileOutputStream: void close()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:[]	app[]
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:[]	app[]
<java.io.FileInputStream: int available()>	app:[]	app[]
<java.io.FileInputStream: int read(byte[])>	app:[]	app[]
<java.io.FileInputStream: void close()>	app:[]	app[]
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:[]	app[]
<java.io.FileOutputStream: void write(byte[])>	app:[]	app[]
<java.io.FileOutputStream: void flush()>	app:[]	app[]
<java.io.FileOutputStream: void close()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:[]	app[]
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	hotlist.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	hotlist.xml:['calendar']	app['calendar']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	detail_write2.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
--------------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	mypage.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
--------------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
--------------------------------
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:[]	app[]
<java.io.FileInputStream: int available()>	app:[]	app[]
<java.io.FileInputStream: int read(byte[])>	app:[]	app[]
<java.io.FileInputStream: void close()>	app:[]	app[]
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:[]	app[]
<java.io.FileOutputStream: void write(byte[])>	app:[]	app[]
<java.io.FileOutputStream: void flush()>	app:[]	app[]
<java.io.FileOutputStream: void close()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:[]	app[]
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean isFile()>	app:[]	app[]
<java.io.FileOutputStream: void <init>(java.io.File)>	app:[]	app[]
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app:[]	app[]
<java.io.FileOutputStream: void close()>	app:[]	app[]
<java.io.File: long length()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	app:[]	app[]
--------------------------------
<android.webkit.WebView: void postUrl(java.lang.String,byte[])>	paymentpage.xml:['url']	app['url']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	paymentpage.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebSettings: void setSavePassword(boolean)>	paymentpage.xml:['password']	app[]	ui-unmatch
<android.webkit.WebSettings: void setSaveFormData(boolean)>	paymentpage.xml:['form']	app['form']	ui-unmatch
--------------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:[]	app[]
<java.io.FileInputStream: int available()>	app:[]	app[]
<java.io.FileInputStream: int read(byte[])>	app:[]	app[]
<java.io.FileInputStream: void close()>	app:[]	app[]
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:[]	app[]
<java.io.FileOutputStream: void write(byte[])>	app:[]	app[]
<java.io.FileOutputStream: void flush()>	app:[]	app[]
<java.io.FileOutputStream: void close()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:[]	app[]
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:[]	app[]
<java.io.FileOutputStream: void write(byte[])>	app:[]	app[]
<java.io.FileOutputStream: void flush()>	app:[]	app[]
<java.io.FileOutputStream: void close()>	app:[]	app[]
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: java.lang.String getTypeName()>	app:['network']	app['network']	ui-unmatch
--------------------------------
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>	adult.xml:['url']	app['url']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	adult.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebSettings: void setSavePassword(boolean)>	adult.xml:['password']	app[]	ui-unmatch
<android.webkit.WebSettings: void setSaveFormData(boolean)>	adult.xml:['form']	app['form']	ui-unmatch
--------------------------------
<android.webkit.WebView: void postUrl(java.lang.String,byte[])>	paymentpage.xml:['url']	app['url']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	paymentpage.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebSettings: void setSavePassword(boolean)>	paymentpage.xml:['password']	app[]	ui-unmatch
<android.webkit.WebSettings: void setSaveFormData(boolean)>	paymentpage.xml:['form']	app['form']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	shootinglist_extendlist.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	app:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	hotlist.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	hotlist.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: void setConnectTimeout(int)>	hotlist.xml:['http', 'url', 'connect']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void setUseCaches(boolean)>	hotlist.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	hotlist.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	hotlist.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: void disconnect()>	hotlist.xml:['http', 'url', 'disconnect']	app['http', 'url', 'disconnect']	ui-unmatch
--------------------------------
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:[]	app[]
<java.io.FileInputStream: int available()>	app:[]	app[]
<java.io.FileInputStream: int read(byte[])>	app:[]	app[]
<java.io.FileInputStream: void close()>	app:[]	app[]
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:[]	app[]
<java.io.FileOutputStream: void write(byte[])>	app:[]	app[]
<java.io.FileOutputStream: void flush()>	app:[]	app[]
<java.io.FileOutputStream: void close()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:[]	app[]
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.webkit.WebView: void loadUrl(java.lang.String)>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	hotlist.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
--------------------------------
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:[]	app[]
<java.io.FileInputStream: int available()>	app:[]	app[]
<java.io.FileInputStream: int read(byte[])>	app:[]	app[]
<java.io.FileInputStream: void close()>	app:[]	app[]
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:[]	app[]
<java.io.FileOutputStream: void write(byte[])>	app:[]	app[]
<java.io.FileOutputStream: void flush()>	app:[]	app[]
<java.io.FileOutputStream: void close()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:[]	app[]
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.webkit.WebView: void postUrl(java.lang.String,byte[])>	paymentpage.xml:['url']	app['url']	ui-unmatch
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>	paymentpage.xml:['script']	app['script']	ui-unmatch
<android.webkit.WebSettings: void setSavePassword(boolean)>	paymentpage.xml:['password']	app[]	ui-unmatch
<android.webkit.WebSettings: void setSaveFormData(boolean)>	paymentpage.xml:['form']	app['form']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
--------------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>	app:['url']	app['url']	ui-unmatch
--------------------------------
<java.util.TimerTask: void <init>()>	detail_write2.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>()>	detail_write2.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:[]	app[]
<java.io.FileInputStream: int available()>	app:[]	app[]
<java.io.FileInputStream: int read(byte[])>	app:[]	app[]
<java.io.FileInputStream: void close()>	app:[]	app[]
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:[]	app[]
<java.io.FileOutputStream: void write(byte[])>	app:[]	app[]
<java.io.FileOutputStream: void flush()>	app:[]	app[]
<java.io.FileOutputStream: void close()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:[]	app[]
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	shootdetails.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnectedOrConnecting()>	app:['network']	app['network']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isConnectedOrConnecting()>	app:['network']	app['network']	ui-unmatch
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:[]	app[]
<java.io.FileInputStream: int available()>	app:[]	app[]
<java.io.FileInputStream: int read(byte[])>	app:[]	app[]
<java.io.FileInputStream: void close()>	app:[]	app[]
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:[]	app[]
<java.io.FileOutputStream: void write(byte[])>	app:[]	app[]
<java.io.FileOutputStream: void flush()>	app:[]	app[]
<java.io.FileOutputStream: void close()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:[]	app[]
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
--------------------------------
<android.widget.VideoView: int getCurrentPosition()>	app:['video']	app['video']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:[]	app[]
<java.io.FileInputStream: int available()>	app:[]	app[]
<java.io.FileInputStream: int read(byte[])>	app:[]	app[]
<java.io.FileInputStream: void close()>	app:[]	app[]
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:[]	app[]
<java.io.FileOutputStream: void write(byte[])>	app:[]	app[]
<java.io.FileOutputStream: void flush()>	app:[]	app[]
<java.io.FileOutputStream: void close()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>	app:['call', 'permission']	app['call', 'permission']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_invite_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_invite_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	sns_gift_my_fb_friend.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	sns_gift_my_fb_friend.xml:['url']	app['url']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Date getTime()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	searchshooting.xml:['calendar']	app['calendar']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	searchshooting.xml:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	searchshooting.xml:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>	app:[]	app[]
<java.util.Timer: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	hotlist.xml:['timer']	app['timer']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<java.net.HttpURLConnection: int getResponseCode()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean delete()>	app:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	app:['storage']	app['storage']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:['storage', 'directory']	app['storage', 'directory']	ui-unmatch
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
--------------------------------
