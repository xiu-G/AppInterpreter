----------------------------
----------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>    	['url']
----------------------------
----------------------------
----------------------------
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
----------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
----------------------------
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getBlockCount()>    	['stat']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getBlockCount()>    	['stat']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getBlockCount()>    	['stat']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
----------------------------
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
----------------------------
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>    	['http', 'url']
<java.net.URLDecoder: java.lang.String decode(java.lang.String)>    	['url']
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoInput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void connect()>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getErrorStream()>    	['http', 'url']
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getBlockCount()>    	['stat']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
----------------------------
----------------------------
----------------------------
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(java.lang.CharSequence[],int,android.content.DialogInterface$OnClickListener)>    	['choice']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.webkit.WebView: void postUrl(java.lang.String,byte[])>    	['url']
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>    	['script']
<android.webkit.WebSettings: void setSavePassword(boolean)>    	['password']
<android.webkit.WebSettings: void setSaveFormData(boolean)>    	['form']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>    	['file']
<java.io.File: boolean delete()>    	['file']
----------------------------
----------------------------
----------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
----------------------------
----------------------------
----------------------------
----------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>    	['url']
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>    	['script']
<android.webkit.WebSettings: void setSavePassword(boolean)>    	['password']
<android.webkit.WebSettings: void setSaveFormData(boolean)>    	['form']
----------------------------
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getBlockCount()>    	['stat']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
----------------------------
----------------------------
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getBlockCount()>    	['stat']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
----------------------------
----------------------------
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getBlockCount()>    	['stat']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<android.webkit.WebView: void loadUrl(java.lang.String)>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getBlockCount()>    	['stat']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
----------------------------
----------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
----------------------------
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getBlockCount()>    	['stat']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
----------------------------
----------------------------
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getBlockCount()>    	['stat']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
----------------------------
----------------------------
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getBlockCount()>    	['stat']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
----------------------------
----------------------------
----------------------------
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getBlockCount()>    	['stat']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getBlockCount()>    	['stat']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
----------------------------
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getBlockCount()>    	['stat']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getBlockCount()>    	['stat']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.media.AudioManager: int getStreamMaxVolume(int)>    	['audio', 'volume']
<android.media.AudioManager: int getStreamVolume(int)>    	['audio', 'volume']
<android.media.AudioManager: int getStreamMaxVolume(int)>    	['audio', 'volume']
<android.media.AudioManager: void setStreamVolume(int,int,int)>    	['audio', 'volume']
<android.widget.VideoView: void start()>    	['video']
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getBlockCount()>    	['stat']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<android.widget.VideoView: void seekTo(int)>    	['video']
<android.widget.VideoView: void start()>    	['video']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>    	['url']
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>    	['script']
<android.webkit.WebSettings: void setSavePassword(boolean)>    	['password']
<android.webkit.WebSettings: void setSaveFormData(boolean)>    	['form']
----------------------------
----------------------------
----------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: boolean isConnectedOrConnecting()>    	['network', 'connect', 'connect']
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getBlockCount()>    	['stat']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getContentLength()>    	['http', 'url']
<java.net.HttpURLConnection: void disconnect()>    	['http', 'url', 'disconnect']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: java.lang.String getParent()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getBlockCount()>    	['stat']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.widget.VideoView: void seekTo(int)>    	['video']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getBlockCount()>    	['stat']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
----------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
----------------------------
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getBlockCount()>    	['stat']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
----------------------------
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getBlockCount()>    	['stat']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
----------------------------
----------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.VideoView: boolean isPlaying()>    	['video', 'play']
<android.widget.VideoView: void pause()>    	['video', 'pause']
<android.widget.VideoView: void start()>    	['video']
----------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>    	['file']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.io.File: boolean delete()>    	['file']
----------------------------
----------------------------
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getBlockCount()>    	['stat']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
----------------------------
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(java.lang.CharSequence[],int,android.content.DialogInterface$OnClickListener)>    	['choice']
----------------------------
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getBlockCount()>    	['stat']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>    	['url']
----------------------------
----------------------------
----------------------------
<android.webkit.WebView: void postUrl(java.lang.String,byte[])>    	['url']
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>    	['script']
<android.webkit.WebSettings: void setSavePassword(boolean)>    	['password']
<android.webkit.WebSettings: void setSaveFormData(boolean)>    	['form']
----------------------------
----------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getBlockCount()>    	['stat']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
----------------------------
----------------------------
----------------------------
<android.widget.VideoView: void pause()>    	['video', 'pause']
----------------------------
<android.widget.VideoView: void pause()>    	['video', 'pause']
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getBlockCount()>    	['stat']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.widget.VideoView: void setVideoURI(android.net.Uri)>    	['video', 'video']
<android.widget.VideoView: void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener)>    	['video']
<android.widget.VideoView: void setOnErrorListener(android.media.MediaPlayer$OnErrorListener)>    	['video']
<android.widget.VideoView: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['video']
----------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getBlockCount()>    	['stat']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
----------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>    	['url']
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>    	['script']
<android.webkit.WebSettings: void setSavePassword(boolean)>    	['password']
<android.webkit.WebSettings: void setSaveFormData(boolean)>    	['form']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>    	['power']
<android.os.PowerManager$WakeLock: void acquire()>    	['power']
<android.widget.VideoView: int getDuration()>    	['video']
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getBlockCount()>    	['stat']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: boolean isConnectedOrConnecting()>    	['network', 'connect', 'connect']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<android.widget.VideoView: void setVideoURI(android.net.Uri)>    	['video', 'video']
<android.widget.VideoView: void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener)>    	['video']
<android.widget.VideoView: void setOnErrorListener(android.media.MediaPlayer$OnErrorListener)>    	['video']
<android.widget.VideoView: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>    	['video']
<android.media.AudioManager: int getStreamMaxVolume(int)>    	['audio', 'volume']
<android.media.AudioManager: int getStreamVolume(int)>    	['audio', 'volume']
----------------------------
<android.widget.VideoView: void pause()>    	['video', 'pause']
<android.widget.VideoView: void start()>    	['video']
<android.widget.VideoView: int getDuration()>    	['video']
<android.widget.VideoView: void seekTo(int)>    	['video']
----------------------------
----------------------------
----------------------------
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
----------------------------
----------------------------
----------------------------
<android.webkit.WebView: void postUrl(java.lang.String,byte[])>    	['url']
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>    	['script']
<android.webkit.WebSettings: void setSavePassword(boolean)>    	['password']
<android.webkit.WebSettings: void setSaveFormData(boolean)>    	['form']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>    	['url']
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>    	['script']
<android.webkit.WebSettings: void setSavePassword(boolean)>    	['password']
<android.webkit.WebSettings: void setSaveFormData(boolean)>    	['form']
----------------------------
----------------------------
----------------------------
----------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
----------------------------
----------------------------
----------------------------
----------------------------
<android.webkit.WebView: void postUrl(java.lang.String,byte[])>    	['url']
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>    	['script']
<android.webkit.WebSettings: void setSavePassword(boolean)>    	['password']
<android.webkit.WebSettings: void setSaveFormData(boolean)>    	['form']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getBlockCount()>    	['stat']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
----------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
----------------------------
----------------------------
----------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>    	['url']
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>    	['script']
<android.webkit.WebSettings: void setSavePassword(boolean)>    	['password']
<android.webkit.WebSettings: void setSaveFormData(boolean)>    	['form']
----------------------------
----------------------------
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getBlockCount()>    	['stat']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
----------------------------
----------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
----------------------------
----------------------------
----------------------------
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getBlockCount()>    	['stat']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void add(int,int)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>    	['script']
<android.webkit.WebSettings: void setSavePassword(boolean)>    	['password']
<android.webkit.WebSettings: void setSaveFormData(boolean)>    	['form']
----------------------------
----------------------------
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.widget.VideoView: int getDuration()>    	['video']
<android.widget.VideoView: void seekTo(int)>    	['video']
----------------------------
----------------------------
<android.graphics.Camera: void <init>()>    	['camera']
----------------------------
----------------------------
----------------------------
<android.media.MediaPlayer: int getDuration()>    	['medium', 'player']
<android.media.AudioManager: int getStreamMaxVolume(int)>    	['audio', 'volume']
<android.media.AudioManager: int getStreamVolume(int)>    	['audio', 'volume']
----------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setUseCaches(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoOutput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setDoInput(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: void setReadTimeout(int)>    	['http', 'url']
<java.net.HttpURLConnection: void setConnectTimeout(int)>    	['http', 'url', 'connect']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setConnectTimeout(int)>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: void setUseCaches(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.HttpURLConnection: void disconnect()>    	['http', 'url', 'disconnect']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getBlockCount()>    	['stat']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
----------------------------
----------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>    	['url']
----------------------------
----------------------------
----------------------------
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getBlockCount()>    	['stat']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
----------------------------
----------------------------
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getBlockCount()>    	['stat']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
----------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>    	['url']
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>    	['script']
<android.webkit.WebSettings: void setSavePassword(boolean)>    	['password']
<android.webkit.WebSettings: void setSaveFormData(boolean)>    	['form']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getBlockCount()>    	['stat']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
----------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
----------------------------
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getBlockCount()>    	['stat']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getBlockCount()>    	['stat']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: boolean isConnectedOrConnecting()>    	['network', 'connect', 'connect']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getContentLength()>    	['http', 'url']
<java.net.HttpURLConnection: void disconnect()>    	['http', 'url', 'disconnect']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: java.lang.String getParent()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
----------------------------
----------------------------
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getBlockCount()>    	['stat']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getBlockCount()>    	['stat']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.AudioManager: int getStreamMaxVolume(int)>    	['audio', 'volume']
<android.media.AudioManager: int getStreamVolume(int)>    	['audio', 'volume']
<android.widget.VideoView: void pause()>    	['video', 'pause']
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.os.PowerManager$WakeLock: void release()>    	['power']
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getBlockCount()>    	['stat']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getBlockCount()>    	['stat']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getBlockCount()>    	['stat']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
----------------------------
<android.widget.VideoView: void pause()>    	['video', 'pause']
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.os.PowerManager$WakeLock: void release()>    	['power']
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getBlockCount()>    	['stat']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
----------------------------
----------------------------
<android.widget.VideoView: void pause()>    	['video', 'pause']
----------------------------
<android.media.AudioManager: void setStreamMute(int,boolean)>    	['audio']
----------------------------
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.widget.VideoView: int getDuration()>    	['video']
<android.widget.VideoView: void seekTo(int)>    	['video']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.VideoView: void pause()>    	['video', 'pause']
----------------------------
<android.widget.VideoView: boolean isPlaying()>    	['video', 'play']
<android.widget.VideoView: void pause()>    	['video', 'pause']
<android.widget.VideoView: void start()>    	['video']
----------------------------
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.widget.VideoView: void seekTo(int)>    	['video']
----------------------------
<android.widget.VideoView: int getCurrentPosition()>    	['video']
----------------------------
----------------------------
<android.widget.VideoView: void pause()>    	['video', 'pause']
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
----------------------------
----------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
----------------------------
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>    	['file']
<java.io.File: boolean delete()>    	['file']
----------------------------
----------------------------
----------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: boolean isConnectedOrConnecting()>    	['network', 'connect', 'connect']
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getBlockCount()>    	['stat']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getContentLength()>    	['http', 'url']
<java.net.HttpURLConnection: void disconnect()>    	['http', 'url', 'disconnect']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: java.lang.String getParent()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>    	['url']
----------------------------
----------------------------
----------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>    	['url']
----------------------------
----------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getBlockCount()>    	['stat']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: boolean isConnectedOrConnecting()>    	['network', 'connect', 'connect']
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getBlockCount()>    	['stat']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
----------------------------
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getBlockCount()>    	['stat']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: boolean isConnectedOrConnecting()>    	['network', 'connect', 'connect']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getContentLength()>    	['http', 'url']
<java.net.HttpURLConnection: void disconnect()>    	['http', 'url', 'disconnect']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.File: java.lang.String getParent()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getBlockCount()>    	['stat']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getBlockCount()>    	['stat']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
----------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getBlockCount()>    	['stat']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
----------------------------
----------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean isFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.File: long length()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.webkit.WebView: void postUrl(java.lang.String,byte[])>    	['url']
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>    	['script']
<android.webkit.WebSettings: void setSavePassword(boolean)>    	['password']
<android.webkit.WebSettings: void setSaveFormData(boolean)>    	['form']
----------------------------
----------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>    	['url']
----------------------------
----------------------------
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getBlockCount()>    	['stat']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: java.lang.String getTypeName()>    	['network']
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
----------------------------
----------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>    	['url']
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>    	['script']
<android.webkit.WebSettings: void setSavePassword(boolean)>    	['password']
<android.webkit.WebSettings: void setSaveFormData(boolean)>    	['form']
----------------------------
----------------------------
----------------------------
<android.webkit.WebView: void postUrl(java.lang.String,byte[])>    	['url']
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>    	['script']
<android.webkit.WebSettings: void setSavePassword(boolean)>    	['password']
<android.webkit.WebSettings: void setSaveFormData(boolean)>    	['form']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
----------------------------
----------------------------
----------------------------
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: void setConnectTimeout(int)>    	['http', 'url', 'connect']
<java.net.HttpURLConnection: void setUseCaches(boolean)>    	['http', 'url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.HttpURLConnection: void disconnect()>    	['http', 'url', 'disconnect']
----------------------------
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getBlockCount()>    	['stat']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<android.webkit.WebView: void loadUrl(java.lang.String)>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
----------------------------
----------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
----------------------------
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getBlockCount()>    	['stat']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
<android.webkit.WebView: void postUrl(java.lang.String,byte[])>    	['url']
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>    	['script']
<android.webkit.WebSettings: void setSavePassword(boolean)>    	['password']
<android.webkit.WebSettings: void setSaveFormData(boolean)>    	['form']
----------------------------
----------------------------
----------------------------
----------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
----------------------------
----------------------------
----------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getBlockCount()>    	['stat']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>    	['url']
----------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: boolean isConnectedOrConnecting()>    	['network', 'connect', 'connect']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
----------------------------
----------------------------
----------------------------
----------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
----------------------------
----------------------------
----------------------------
----------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
<android.net.NetworkInfo: boolean isConnectedOrConnecting()>    	['network', 'connect', 'connect']
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getBlockCount()>    	['stat']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
----------------------------
----------------------------
<android.widget.VideoView: int getCurrentPosition()>    	['video']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int available()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>    	['call', 'permission']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: java.util.Date getTime()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>    	['file']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<java.net.HttpURLConnection: int getResponseCode()>    	['http', 'url']
<java.net.HttpURLConnection: java.io.InputStream getInputStream()>    	['http', 'url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getBlockCount()>    	['stat']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
----------------------------
----------------------------
----------------------------
