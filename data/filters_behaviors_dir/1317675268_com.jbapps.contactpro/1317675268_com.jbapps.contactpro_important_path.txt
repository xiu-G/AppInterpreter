----------------------------
----------------------------
<android.media.RingtoneManager: void <init>(android.content.Context)>    	['ring']
<android.media.RingtoneManager: void setType(int)>    	['ring']
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>    	['file', 'file']
<android.content.res.AssetFileDescriptor: long getStartOffset()>    	['file']
<android.content.res.AssetFileDescriptor: long getLength()>    	['file']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.util.Locale: java.lang.String getLanguage()>    	['language']
<java.util.Locale: java.lang.String getCountry()>    	['country']
<android.telephony.PhoneNumberUtils: java.lang.String stripSeparators(java.lang.String)>    	['phone']
<android.telephony.TelephonyManager: int getPhoneType()>    	['telephony', 'phone']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Timer: void cancel()>    	['timer']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Timer: void cancel()>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<java.util.Locale: java.lang.String getLanguage()>    	['language']
<java.util.Locale: java.lang.String getCountry()>    	['country']
<java.util.Locale: java.lang.String getLanguage()>    	['language']
<java.util.Locale: java.lang.String getCountry()>    	['country']
<java.util.Locale: java.lang.String getLanguage()>    	['language']
<java.util.Locale: java.lang.String getLanguage()>    	['language']
<android.provider.ContactsContract$CommonDataKinds$Phone: int getTypeLabelResource(int)>    	['contact', 'phone']
<android.provider.ContactsContract$CommonDataKinds$Email: int getTypeLabelResource(int)>    	['contact', 'email']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<com.android.internal.telephony.ITelephony: void cancelMissedCallsNotification()>    	['telephony', 'call']
<android.media.AudioManager: int getRingerMode()>    	['audio']
<android.os.SystemClock: long uptimeMillis()>    	['clock']
<android.telephony.TelephonyManager: java.lang.String getVoiceMailNumber()>    	['telephony', 'voice']
<android.media.AudioManager: int getRingerMode()>    	['audio']
<android.os.SystemClock: long uptimeMillis()>    	['clock']
<android.media.AudioManager: int getRingerMode()>    	['audio']
<android.os.SystemClock: long uptimeMillis()>    	['clock']
<android.media.AudioManager: int getRingerMode()>    	['audio']
<android.os.SystemClock: long uptimeMillis()>    	['clock']
<android.media.AudioManager: int getRingerMode()>    	['audio']
<android.os.SystemClock: long uptimeMillis()>    	['clock']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.lang.OutOfMemoryError: java.lang.String getLocalizedMessage()>    	['memory']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(java.lang.CharSequence[],int,android.content.DialogInterface$OnClickListener)>    	['choice']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.FileInputStream: void close()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>    	['file', 'file']
<android.content.res.AssetFileDescriptor: long getStartOffset()>    	['file']
<android.content.res.AssetFileDescriptor: long getLength()>    	['file']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.util.Locale: java.lang.String getLanguage()>    	['language']
<java.util.Locale: java.lang.String getCountry()>    	['country']
<android.telephony.PhoneNumberUtils: java.lang.String stripSeparators(java.lang.String)>    	['phone']
<android.telephony.TelephonyManager: int getPhoneType()>    	['telephony', 'phone']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Timer: void cancel()>    	['timer']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Timer: void cancel()>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<java.util.Locale: java.lang.String getLanguage()>    	['language']
<java.util.Locale: java.lang.String getCountry()>    	['country']
<java.util.Locale: java.lang.String getLanguage()>    	['language']
<java.util.Locale: java.lang.String getCountry()>    	['country']
<java.util.Locale: java.lang.String getLanguage()>    	['language']
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: boolean canRead()>    	['file']
<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>    	['power']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.telephony.PhoneNumberUtils: boolean compare(java.lang.String,java.lang.String)>    	['phone']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.accounts.AccountManager: android.accounts.AccountManager get(android.content.Context)>    	['account']
<android.accounts.AccountManager: android.accounts.AuthenticatorDescription[] getAuthenticatorTypes()>    	['account']
<android.accounts.AccountManager: void addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener,android.os.Handler,boolean)>    	['account', 'account']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.provider.Contacts$ContactMethods: java.lang.Object decodeImProtocol(java.lang.String)>    	['contact', 'contact']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMultiChoiceItems(java.lang.CharSequence[],boolean[],android.content.DialogInterface$OnMultiChoiceClickListener)>    	['choice']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.provider.ContactsContract$CommonDataKinds$Phone: int getTypeLabelResource(int)>    	['contact', 'phone']
<android.provider.ContactsContract$CommonDataKinds$Email: int getTypeLabelResource(int)>    	['contact', 'email']
<android.provider.ContactsContract$CommonDataKinds$Im: int getProtocolLabelResource(int)>    	['contact']
<android.provider.ContactsContract$CommonDataKinds$StructuredPostal: int getTypeLabelResource(int)>    	['contact']
<android.provider.ContactsContract$CommonDataKinds$Organization: int getTypeLabelResource(int)>    	['contact']
<java.util.Date: int getYear()>    	['year']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTime(java.util.Date)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<android.provider.ContactsContract$CommonDataKinds$Event: int getTypeResource(java.lang.Integer)>    	['contact']
<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri)>    	['ring', 'ring']
<android.media.Ringtone: java.lang.String getTitle(android.content.Context)>    	['ring']
----------------------------
----------------------------
----------------------------
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMultiChoiceItems(java.lang.CharSequence[],boolean[],android.content.DialogInterface$OnMultiChoiceClickListener)>    	['choice']
----------------------------
<android.text.ClipboardManager: void setText(java.lang.CharSequence)>    	['clipboard']
----------------------------
----------------------------
----------------------------
<android.os.PowerManager$WakeLock: boolean isHeld()>    	['power']
<android.os.PowerManager$WakeLock: void release()>    	['power']
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
----------------------------
<android.graphics.Camera: void <init>()>    	['camera']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>    	['file', 'file']
<android.content.res.AssetFileDescriptor: long getStartOffset()>    	['file']
<android.content.res.AssetFileDescriptor: long getLength()>    	['file']
<android.telephony.PhoneNumberUtils: java.lang.String extractNetworkPortion(java.lang.String)>    	['phone', 'network']
----------------------------
----------------------------
----------------------------
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>    	['location']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long)>    	['timer']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.accounts.AccountManager: android.accounts.AccountManager get(android.content.Context)>    	['account']
<android.accounts.AccountManager: android.accounts.Account[] getAccountsByType(java.lang.String)>    	['account', 'account']
<android.media.AudioManager: int getRingerMode()>    	['audio']
<android.os.SystemClock: long uptimeMillis()>    	['clock']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>    	['file', 'file']
<android.content.res.AssetFileDescriptor: long getStartOffset()>    	['file']
<android.content.res.AssetFileDescriptor: long getLength()>    	['file']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.util.Locale: java.lang.String getLanguage()>    	['language']
<java.util.Locale: java.lang.String getCountry()>    	['country']
<android.telephony.PhoneNumberUtils: java.lang.String stripSeparators(java.lang.String)>    	['phone']
<android.telephony.TelephonyManager: int getPhoneType()>    	['telephony', 'phone']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Timer: void cancel()>    	['timer']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Timer: void cancel()>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<java.util.Locale: java.lang.String getLanguage()>    	['language']
<java.util.Locale: java.lang.String getCountry()>    	['country']
<java.util.Locale: java.lang.String getLanguage()>    	['language']
<java.util.Locale: java.lang.String getCountry()>    	['country']
<java.util.Locale: java.lang.String getLanguage()>    	['language']
----------------------------
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMultiChoiceItems(java.lang.CharSequence[],boolean[],android.content.DialogInterface$OnMultiChoiceClickListener)>    	['choice']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Timer: void cancel()>    	['timer']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.webkit.WebView: void loadDataWithBaseURL(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.Environment: java.io.File getRootDirectory()>    	['directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getBlockCount()>    	['stat']
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdir()>    	['file']
<java.util.zip.ZipFile: void <init>(java.io.File)>    	['file']
<java.util.zip.ZipFile: java.util.Enumeration entries()>    	['file']
<java.util.zip.ZipFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>    	['file']
<java.io.File: java.io.File getParentFile()>    	['file', 'file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File,boolean)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.PowerManager$WakeLock: boolean isHeld()>    	['power']
<android.os.PowerManager$WakeLock: void release()>    	['power']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.graphics.Camera: void translate(float,float,float)>    	['camera']
<android.graphics.Camera: void rotateY(float)>    	['camera']
<android.graphics.Camera: void applyToCanvas(android.graphics.Canvas)>    	['camera']
<android.graphics.Camera: void rotateX(float)>    	['camera']
----------------------------
----------------------------
----------------------------
<java.util.Locale: java.lang.String getLanguage()>    	['language']
<java.util.Locale: java.lang.String getCountry()>    	['country']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: java.lang.String toString()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.TimerTask: boolean cancel()>    	['timer']
<java.util.Timer: void cancel()>    	['timer']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String toString()>    	['file']
----------------------------
----------------------------
----------------------------
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(java.lang.CharSequence[],int,android.content.DialogInterface$OnClickListener)>    	['choice']
----------------------------
----------------------------
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.util.Locale: java.lang.String getLanguage()>    	['language']
<java.util.Locale: java.lang.String getCountry()>    	['country']
<android.telephony.PhoneNumberUtils: java.lang.String stripSeparators(java.lang.String)>    	['phone']
<android.telephony.TelephonyManager: int getPhoneType()>    	['telephony', 'phone']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Timer: void cancel()>    	['timer']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Timer: void cancel()>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<java.util.Locale: java.lang.String getLanguage()>    	['language']
<java.util.Locale: java.lang.String getCountry()>    	['country']
<java.util.Locale: java.lang.String getLanguage()>    	['language']
<java.util.Locale: java.lang.String getCountry()>    	['country']
<java.util.Locale: java.lang.String getLanguage()>    	['language']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.webkit.WebView: void loadDataWithBaseURL(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>    	['url']
----------------------------
----------------------------
<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri)>    	['ring', 'ring']
<android.media.Ringtone: java.lang.String getTitle(android.content.Context)>    	['ring']
----------------------------
----------------------------
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.util.Calendar: void setTimeInMillis(long)>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: boolean canRead()>    	['file']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String toString()>    	['file']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
----------------------------
<android.os.PowerManager$WakeLock: void acquire()>    	['power']
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<android.os.PowerManager$WakeLock: void release()>    	['power']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
----------------------------
----------------------------
<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>    	['power']
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.accounts.AccountManager: android.accounts.AccountManager get(android.content.Context)>    	['account']
<android.accounts.AccountManager: android.accounts.Account[] getAccounts()>    	['account', 'account']
<android.telephony.TelephonyManager: int getSimState()>    	['telephony']
----------------------------
----------------------------
----------------------------
<android.widget.RadioButton: int getId()>    	['radio']
----------------------------
<android.widget.RadioGroup: void setOnCheckedChangeListener(android.widget.RadioGroup$OnCheckedChangeListener)>    	['radio']
<android.widget.RadioButton: void setChecked(boolean)>    	['radio']
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Locale: java.lang.String getLanguage()>    	['language']
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>    	['url']
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>    	['file', 'file']
<android.content.res.AssetFileDescriptor: long getStartOffset()>    	['file']
<android.content.res.AssetFileDescriptor: long getLength()>    	['file']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.util.Locale: java.lang.String getLanguage()>    	['language']
<java.util.Locale: java.lang.String getCountry()>    	['country']
<android.telephony.PhoneNumberUtils: java.lang.String stripSeparators(java.lang.String)>    	['phone']
<android.telephony.TelephonyManager: int getPhoneType()>    	['telephony', 'phone']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Timer: void cancel()>    	['timer']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Timer: void cancel()>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<java.util.Locale: java.lang.String getLanguage()>    	['language']
<java.util.Locale: java.lang.String getCountry()>    	['country']
<java.util.Locale: java.lang.String getLanguage()>    	['language']
<java.util.Locale: java.lang.String getCountry()>    	['country']
<java.util.Locale: java.lang.String getLanguage()>    	['language']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>    	['telephony']
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>    	['url']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.telephony.PhoneStateListener: void <init>()>    	['phone']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.ActivityGroup: void onPause()>    	['pause']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.RadioButton: void setChecked(boolean)>    	['radio']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>    	['host']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(android.view.View)>    	['host', 'indicator']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.content.Intent)>    	['host']
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>    	['host']
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>    	['host']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(android.view.View)>    	['host', 'indicator']
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.content.Intent)>    	['host']
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>    	['host']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<com.android.internal.telephony.ITelephony: boolean endCall()>    	['telephony', 'call']
----------------------------
----------------------------
----------------------------
<android.telephony.PhoneNumberFormattingTextWatcher: void <init>()>    	['phone']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.accounts.AccountManager: android.accounts.Account[] getAccounts()>    	['account', 'account']
<android.accounts.Account: void <init>(java.lang.String,java.lang.String)>    	['account']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
----------------------------
----------------------------
<android.media.AudioManager: int getRingerMode()>    	['audio']
<android.os.SystemClock: long uptimeMillis()>    	['clock']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.telephony.TelephonyManager: void listen(android.telephony.PhoneStateListener,int)>    	['telephony']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(java.lang.CharSequence[],int,android.content.DialogInterface$OnClickListener)>    	['choice']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.zip.ZipFile: void <init>(java.io.File)>    	['file']
<java.util.zip.ZipFile: java.util.Enumeration entries()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.lang.OutOfMemoryError: void printStackTrace()>    	['memory']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.PowerManager$WakeLock: boolean isHeld()>    	['power']
<android.os.PowerManager$WakeLock: void release()>    	['power']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File,boolean)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
----------------------------
----------------------------
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<java.util.Calendar: void setTime(java.util.Date)>    	['calendar']
<android.telephony.PhoneNumberUtils: int getFormatTypeForLocale(java.util.Locale)>    	['phone']
<android.telephony.PhoneNumberUtils: void formatNumber(android.text.Editable,int)>    	['phone']
<android.telephony.PhoneNumberUtils: java.lang.String extractNetworkPortion(java.lang.String)>    	['phone', 'network']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.PowerManager$WakeLock: void acquire()>    	['power']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: java.lang.String getCanonicalPath()>    	['file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: boolean canRead()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<java.io.File: long lastModified()>    	['file']
<android.os.PowerManager$WakeLock: void release()>    	['power']
<android.os.PowerManager$WakeLock: void acquire()>    	['power']
<android.os.PowerManager$WakeLock: void release()>    	['power']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.lang.OutOfMemoryError: void printStackTrace()>    	['memory']
<java.util.Locale: java.lang.String getCountry()>    	['country']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMultiChoiceItems(java.lang.CharSequence[],boolean[],android.content.DialogInterface$OnMultiChoiceClickListener)>    	['choice']
<android.accounts.AccountManager: android.accounts.AccountManager get(android.content.Context)>    	['account']
<android.accounts.AccountManager: android.accounts.Account[] getAccounts()>    	['account', 'account']
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(java.lang.CharSequence[],int,android.content.DialogInterface$OnClickListener)>    	['choice']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.telephony.TelephonyManager: void listen(android.telephony.PhoneStateListener,int)>    	['telephony']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.Environment: java.io.File getDataDirectory()>    	['directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getBlockCount()>    	['stat']
<android.os.Environment: java.io.File getDataDirectory()>    	['directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File,boolean)>    	['file']
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>    	['store']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<android.content.Context: java.io.File getFilesDir()>    	['file']
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>    	['file']
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>    	['file']
<java.io.FileInputStream: void close()>    	['file']
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.net.URLConnection openConnection()>    	['url']
<javax.net.ssl.HttpsURLConnection: void setSSLSocketFactory(javax.net.ssl.SSLSocketFactory)>    	['http', 'url']
<javax.net.ssl.HttpsURLConnection: void setHostnameVerifier(javax.net.ssl.HostnameVerifier)>    	['http', 'url']
<java.net.URLConnection: void setConnectTimeout(int)>    	['url', 'connect']
<java.net.URLConnection: void setReadTimeout(int)>    	['url']
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>    	['url']
<java.net.URLConnection: void setDoOutput(boolean)>    	['url']
<java.net.URLConnection: java.io.OutputStream getOutputStream()>    	['url']
<java.net.URLConnection: java.io.InputStream getInputStream()>    	['url']
<android.content.Context: java.io.File getFilesDir()>    	['file']
<java.io.File: void <init>(java.io.File,java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File,boolean)>    	['file']
<java.io.File: boolean delete()>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.io.FileOutputStream: void <init>(java.io.File,boolean)>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void flush()>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.SystemClock: long uptimeMillis()>    	['clock']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.content.Context: java.io.File getFilesDir()>    	['file']
<java.io.File: void <init>(java.io.File,java.lang.String)>    	['file']
<java.io.File: boolean delete()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>    	['file', 'file']
<android.content.res.AssetFileDescriptor: long getStartOffset()>    	['file']
<android.content.res.AssetFileDescriptor: long getLength()>    	['file']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.util.Locale: java.lang.String getLanguage()>    	['language']
<java.util.Locale: java.lang.String getCountry()>    	['country']
<android.telephony.PhoneNumberUtils: java.lang.String stripSeparators(java.lang.String)>    	['phone']
<android.telephony.TelephonyManager: int getPhoneType()>    	['telephony', 'phone']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Timer: void cancel()>    	['timer']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Timer: void cancel()>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<java.util.Locale: java.lang.String getLanguage()>    	['language']
<java.util.Locale: java.lang.String getCountry()>    	['country']
<java.util.Locale: java.lang.String getLanguage()>    	['language']
<java.util.Locale: java.lang.String getCountry()>    	['country']
<java.util.Locale: java.lang.String getLanguage()>    	['language']
----------------------------
----------------------------
----------------------------
<android.provider.ContactsContract$CommonDataKinds$Event: int getTypeResource(java.lang.Integer)>    	['contact']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getPath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: java.lang.String getName()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.graphics.Camera: void save()>    	['camera']
<android.graphics.Camera: void restore()>    	['camera', 'restore']
<android.graphics.Camera: void getMatrix(android.graphics.Matrix)>    	['camera']
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean mkdirs()>    	['file']
<java.util.zip.ZipFile: void <init>(java.io.File)>    	['file']
<java.util.zip.ZipFile: java.util.Enumeration entries()>    	['file']
<java.util.zip.ZipFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>    	['file']
<java.io.File: java.io.File getParentFile()>    	['file', 'file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
----------------------------
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<android.app.Activity: void onRestoreInstanceState(android.os.Bundle)>    	['restore']
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: java.lang.String getName()>    	['file']
----------------------------
----------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.FileInputStream: void <init>(java.io.File)>    	['file']
<java.io.File: long length()>    	['file']
<java.io.FileInputStream: int read(byte[])>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<android.net.Uri: android.net.Uri fromFile(java.io.File)>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.net.URL: void <init>(java.lang.String)>    	['url']
<java.net.URL: java.io.InputStream openStream()>    	['url']
<java.net.MalformedURLException: void printStackTrace()>    	['url']
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>    	['file', 'file']
<android.content.res.AssetFileDescriptor: long getStartOffset()>    	['file']
<android.content.res.AssetFileDescriptor: long getLength()>    	['file']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.util.Locale: java.lang.String getLanguage()>    	['language']
<java.util.Locale: java.lang.String getCountry()>    	['country']
<android.telephony.PhoneNumberUtils: java.lang.String stripSeparators(java.lang.String)>    	['phone']
<android.telephony.TelephonyManager: int getPhoneType()>    	['telephony', 'phone']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Timer: void cancel()>    	['timer']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Timer: void cancel()>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<java.util.Locale: java.lang.String getLanguage()>    	['language']
<java.util.Locale: java.lang.String getCountry()>    	['country']
<java.util.Locale: java.lang.String getLanguage()>    	['language']
<java.util.Locale: java.lang.String getCountry()>    	['country']
<java.util.Locale: java.lang.String getLanguage()>    	['language']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.AudioManager: int getRingerMode()>    	['audio']
<android.os.SystemClock: long uptimeMillis()>    	['clock']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(android.widget.ListAdapter,int,android.content.DialogInterface$OnClickListener)>    	['choice']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Locale: java.lang.String getLanguage()>    	['language']
<java.util.Locale: java.lang.String getCountry()>    	['country']
<java.util.Locale: java.lang.String getLanguage()>    	['language']
<java.util.Locale: java.lang.String getCountry()>    	['country']
<java.lang.OutOfMemoryError: void printStackTrace()>    	['memory']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.RelativeLayout: void onRestoreInstanceState(android.os.Parcelable)>    	['restore']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.AudioManager: int getRingerMode()>    	['audio']
<android.os.SystemClock: long uptimeMillis()>    	['clock']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.provider.ContactsContract$CommonDataKinds$Phone: int getTypeLabelResource(int)>    	['contact', 'phone']
<android.provider.ContactsContract$CommonDataKinds$Email: int getTypeLabelResource(int)>    	['contact', 'email']
<java.util.Locale: java.lang.String getLanguage()>    	['language']
<android.provider.ContactsContract$CommonDataKinds$StructuredPostal: int getTypeLabelResource(int)>    	['contact']
<java.util.Locale: java.lang.String getLanguage()>    	['language']
<android.provider.ContactsContract$CommonDataKinds$Im: int getProtocolLabelResource(int)>    	['contact']
<android.provider.ContactsContract$CommonDataKinds$Organization: int getTypeLabelResource(int)>    	['contact']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.provider.ContactsContract$Contacts: android.net.Uri lookupContact(android.content.ContentResolver,android.net.Uri)>    	['contact', 'contact', 'contact']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.Activity: void onPause()>    	['pause']
----------------------------
----------------------------
----------------------------
----------------------------
<android.media.AudioManager: int getRingerMode()>    	['audio']
<android.os.SystemClock: long uptimeMillis()>    	['clock']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(android.widget.ListAdapter,int,android.content.DialogInterface$OnClickListener)>    	['choice']
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTime(java.util.Date)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
----------------------------
----------------------------
----------------------------
<android.graphics.Canvas: void restore()>    	['restore']
----------------------------
<android.telephony.PhoneStateListener: void onCallStateChanged(int,java.lang.String)>    	['phone', 'call']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: boolean mkdirs()>    	['file']
<java.io.File: void <init>(java.io.File,java.lang.String)>    	['file']
<android.net.Uri: android.net.Uri fromFile(java.io.File)>    	['file']
----------------------------
----------------------------
----------------------------
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: void setTime(java.util.Date)>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
----------------------------
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(android.widget.ListAdapter,int,android.content.DialogInterface$OnClickListener)>    	['choice']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.net.Uri: android.net.Uri fromFile(java.io.File)>    	['file']
----------------------------
----------------------------
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.telephony.TelephonyManager: java.lang.String getSimSerialNumber()>    	['telephony']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>    	['power']
<android.os.PowerManager$WakeLock: void acquire()>    	['power']
<android.os.PowerManager$WakeLock: void release()>    	['power']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>    	['shortcut']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.Environment: java.io.File getRootDirectory()>    	['directory']
<java.io.File: java.lang.String getPath()>    	['file']
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
----------------------------
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.provider.ContactsContract$CommonDataKinds$Event: int getTypeResource(java.lang.Integer)>    	['contact']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.telephony.PhoneNumberUtils: boolean compare(android.content.Context,java.lang.String,java.lang.String)>    	['phone']
----------------------------
----------------------------
----------------------------
<android.telephony.TelephonyManager: void listen(android.telephony.PhoneStateListener,int)>    	['telephony']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getBlockCount()>    	['stat']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>    	['location']
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>    	['location', 'location']
<android.location.Location: double getLatitude()>    	['location', 'latitude']
<android.location.Location: double getLongitude()>    	['location', 'longitude']
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>    	['location']
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>    	['location', 'location']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.RadioButton: void setVisibility(int)>    	['radio']
<android.widget.RadioButton: void setChecked(boolean)>    	['radio']
----------------------------
<android.graphics.Camera: void save()>    	['camera']
<android.graphics.Camera: void translate(float,float,float)>    	['camera']
<android.graphics.Camera: void rotateY(float)>    	['camera']
<android.graphics.Camera: void applyToCanvas(android.graphics.Canvas)>    	['camera']
<android.graphics.Camera: void rotateX(float)>    	['camera']
<android.graphics.Camera: void restore()>    	['camera', 'restore']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.graphics.Canvas: void restore()>    	['restore']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>    	['connectivity', 'network']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.view.View: void getLocationOnScreen(int[])>    	['location']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.util.Locale: java.lang.String getLanguage()>    	['language']
<java.util.Locale: java.lang.String getCountry()>    	['country']
<android.telephony.PhoneNumberUtils: java.lang.String stripSeparators(java.lang.String)>    	['phone']
<android.telephony.TelephonyManager: int getPhoneType()>    	['telephony', 'phone']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Timer: void cancel()>    	['timer']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Timer: void cancel()>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<java.util.Locale: java.lang.String getLanguage()>    	['language']
<java.util.Locale: java.lang.String getCountry()>    	['country']
<java.util.Locale: java.lang.String getLanguage()>    	['language']
<java.util.Locale: java.lang.String getCountry()>    	['country']
<java.util.Locale: java.lang.String getLanguage()>    	['language']
----------------------------
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.util.Locale: java.lang.String getLanguage()>    	['language']
<java.util.Locale: java.lang.String getCountry()>    	['country']
<android.telephony.PhoneNumberUtils: java.lang.String stripSeparators(java.lang.String)>    	['phone']
<android.telephony.TelephonyManager: int getPhoneType()>    	['telephony', 'phone']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Timer: void cancel()>    	['timer']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Timer: void cancel()>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<java.util.Locale: java.lang.String getLanguage()>    	['language']
<java.util.Locale: java.lang.String getCountry()>    	['country']
<java.util.Locale: java.lang.String getLanguage()>    	['language']
<java.util.Locale: java.lang.String getCountry()>    	['country']
<java.util.Locale: java.lang.String getLanguage()>    	['language']
----------------------------
----------------------------
<android.provider.ContactsContract$RawContacts: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)>    	['contact', 'contact', 'contact']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.util.Locale: java.lang.String getLanguage()>    	['language']
<java.util.Locale: java.lang.String getCountry()>    	['country']
<android.telephony.PhoneNumberUtils: java.lang.String stripSeparators(java.lang.String)>    	['phone']
<android.telephony.TelephonyManager: int getPhoneType()>    	['telephony', 'phone']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Timer: void cancel()>    	['timer']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Timer: void cancel()>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<java.util.Locale: java.lang.String getLanguage()>    	['language']
<java.util.Locale: java.lang.String getCountry()>    	['country']
<java.util.Locale: java.lang.String getLanguage()>    	['language']
<java.util.Locale: java.lang.String getCountry()>    	['country']
<java.util.Locale: java.lang.String getLanguage()>    	['language']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>    	['file', 'file']
<android.content.res.AssetFileDescriptor: long getStartOffset()>    	['file']
<android.content.res.AssetFileDescriptor: long getLength()>    	['file']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: long getTimeInMillis()>    	['calendar']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean createNewFile()>    	['file', 'file']
<java.io.FileOutputStream: void <init>(java.io.File)>    	['file']
<java.io.FileOutputStream: void write(byte[])>    	['file']
<java.util.Locale: java.lang.String getLanguage()>    	['language']
<java.util.Locale: java.lang.String getCountry()>    	['country']
<android.telephony.PhoneNumberUtils: java.lang.String stripSeparators(java.lang.String)>    	['phone']
<android.telephony.TelephonyManager: int getPhoneType()>    	['telephony', 'phone']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>    	['telephony', 'device']
<java.util.Timer: void cancel()>    	['timer']
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
<java.util.Timer: void cancel()>    	['timer']
<java.util.Calendar: java.util.Calendar getInstance()>    	['calendar']
<java.util.Calendar: int get(int)>    	['calendar']
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>    	['connectivity', 'network']
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>    	['network']
<java.util.Locale: java.lang.String getLanguage()>    	['language']
<java.util.Locale: java.lang.String getCountry()>    	['country']
<java.util.Locale: java.lang.String getLanguage()>    	['language']
<java.util.Locale: java.lang.String getCountry()>    	['country']
<java.util.Locale: java.lang.String getLanguage()>    	['language']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.lang.OutOfMemoryError: void printStackTrace()>    	['memory']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.telephony.TelephonyManager: void listen(android.telephony.PhoneStateListener,int)>    	['telephony']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>    	['storage']
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: boolean exists()>    	['file']
<java.io.File: boolean delete()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.FileOutputStream: void <init>(java.lang.String)>    	['file']
<java.io.FileOutputStream: void close()>    	['file']
<java.io.FileNotFoundException: void printStackTrace()>    	['file']
----------------------------
<android.widget.GridView: void getLocationOnScreen(int[])>    	['location']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>    	['storage', 'directory']
<java.io.File: void <init>(java.lang.String)>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Timer: void <init>()>    	['timer']
<java.util.TimerTask: void <init>()>    	['timer']
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>    	['timer']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.os.StatFs: void <init>(java.lang.String)>    	['stat']
<android.os.StatFs: int getBlockSize()>    	['stat']
<android.os.StatFs: int getAvailableBlocks()>    	['stat']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.app.Activity: void setVolumeControlStream(int)>    	['volume']
<java.util.Locale: java.lang.String getLanguage()>    	['language']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.widget.GridView: void getLocationOnScreen(int[])>    	['location']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.io.File: void <init>(java.lang.String)>    	['file']
<java.io.File: java.io.File[] listFiles()>    	['file', 'file']
<java.io.File: boolean isDirectory()>    	['file', 'directory']
<java.io.File: java.lang.String getAbsolutePath()>    	['file']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<java.util.Locale: java.lang.String getCountry()>    	['country']
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
----------------------------
<android.graphics.Canvas: void restoreToCount(int)>    	['restore']
----------------------------
