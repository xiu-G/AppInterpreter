<android.media.RingtoneManager: void <init>(android.content.Context)>	popupmenu_layout.xml:['ring']	app['ring']	ui-unmatch
<android.media.RingtoneManager: void setType(int)>	popupmenu_layout.xml:['ring']	app['ring']	ui-unmatch
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>	popupmenu_layout.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getStartOffset()>	popupmenu_layout.xml:['file']	app['file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getLength()>	popupmenu_layout.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	popupmenu_layout.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	popupmenu_layout.xml:['calendar']	app['calendar']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	popupmenu_layout.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	popupmenu_layout.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	popupmenu_layout.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	popupmenu_layout.xml:['file']	app['file']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	popupmenu_layout.xml:['language']	app[]	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	popupmenu_layout.xml:['country']	app['country']	ui-unmatch
<android.telephony.PhoneNumberUtils: java.lang.String stripSeparators(java.lang.String)>	popupmenu_layout.xml:[]	app[]
<android.telephony.TelephonyManager: int getPhoneType()>	popupmenu_layout.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	popupmenu_layout.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	popupmenu_layout.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Timer: void cancel()>	popupmenu_layout.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>()>	popupmenu_layout.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	popupmenu_layout.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	popupmenu_layout.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void cancel()>	popupmenu_layout.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	popupmenu_layout.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	popupmenu_layout.xml:['calendar']	app['calendar']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	popupmenu_layout.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	popupmenu_layout.xml:['network']	app['network']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	popupmenu_layout.xml:['language']	app[]	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	popupmenu_layout.xml:['country']	app['country']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	popupmenu_layout.xml:['language']	app[]	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	popupmenu_layout.xml:['country']	app['country']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	combcontact.xml:['language']	app[]	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	popupmenu_layout.xml:['language']	app[]	ui-unmatch
<android.provider.ContactsContract$CommonDataKinds$Phone: int getTypeLabelResource(int)>	popupmenu_layout.xml:[]	app[]
<android.provider.ContactsContract$CommonDataKinds$Email: int getTypeLabelResource(int)>	popupmenu_layout.xml:[]	app[]
--------------------------------
<com.android.internal.telephony.ITelephony: void cancelMissedCallsNotification()>	app:['telephony']	app['telephony']	ui-unmatch
<android.media.AudioManager: int getRingerMode()>	app:['audio']	app['audio']	ui-unmatch
<android.os.SystemClock: long uptimeMillis()>	app:['clock']	app['clock']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getVoiceMailNumber()>	app:['telephony', 'voice']	app['telephony', 'voice']	ui-unmatch
<android.media.AudioManager: int getRingerMode()>	app:['audio']	app['audio']	ui-unmatch
<android.os.SystemClock: long uptimeMillis()>	app:['clock']	app['clock']	ui-unmatch
<android.media.AudioManager: int getRingerMode()>	app:['audio']	app['audio']	ui-unmatch
<android.os.SystemClock: long uptimeMillis()>	app:['clock']	app['clock']	ui-unmatch
<android.media.AudioManager: int getRingerMode()>	app:['audio']	app['audio']	ui-unmatch
<android.os.SystemClock: long uptimeMillis()>	app:['clock']	app['clock']	ui-unmatch
<android.media.AudioManager: int getRingerMode()>	app:['audio']	app['audio']	ui-unmatch
<android.os.SystemClock: long uptimeMillis()>	app:['clock']	app['clock']	ui-unmatch
--------------------------------
<java.lang.OutOfMemoryError: java.lang.String getLocalizedMessage()>	app:['memory']	app['memory']	ui-unmatch
--------------------------------
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(java.lang.CharSequence[],int,android.content.DialogInterface$OnClickListener)>	app:['choice']	app['choice']	ui-unmatch
--------------------------------
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	groupmanage.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	groupmanage.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	groupmanage.xml:['file']	app['file']	ui-unmatch
--------------------------------
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>	popupmenu_layout.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getStartOffset()>	popupmenu_layout.xml:['file']	app['file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getLength()>	popupmenu_layout.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	popupmenu_layout.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	popupmenu_layout.xml:['calendar']	app['calendar']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	popupmenu_layout.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	popupmenu_layout.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	popupmenu_layout.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	popupmenu_layout.xml:['file']	app['file']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	popupmenu_layout.xml:['language']	app[]	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	popupmenu_layout.xml:['country']	app['country']	ui-unmatch
<android.telephony.PhoneNumberUtils: java.lang.String stripSeparators(java.lang.String)>	popupmenu_layout.xml:[]	app[]
<android.telephony.TelephonyManager: int getPhoneType()>	popupmenu_layout.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	popupmenu_layout.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	popupmenu_layout.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Timer: void cancel()>	popupmenu_layout.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>()>	popupmenu_layout.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	popupmenu_layout.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	popupmenu_layout.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void cancel()>	popupmenu_layout.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	popupmenu_layout.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	popupmenu_layout.xml:['calendar']	app['calendar']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	popupmenu_layout.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	popupmenu_layout.xml:['network']	app['network']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	popupmenu_layout.xml:['language']	app[]	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	popupmenu_layout.xml:['country']	app['country']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	popupmenu_layout.xml:['language']	app[]	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	popupmenu_layout.xml:['country']	app['country']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	combcontact.xml:['language']	app[]	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:[]	app[]
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean canRead()>	app:['file']	app['file']	ui-unmatch
<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>	app:['power']	app['power']	ui-unmatch
--------------------------------
<android.accounts.AccountManager: android.accounts.AccountManager get(android.content.Context)>	app:['account']	app['account']	ui-unmatch
<android.accounts.AccountManager: android.accounts.AuthenticatorDescription[] getAuthenticatorTypes()>	app:['account']	app['account']	ui-unmatch
<android.accounts.AccountManager: void addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener,android.os.Handler,boolean)>	app:['account', 'account']	app['account', 'account']	ui-unmatch
--------------------------------
<java.util.Timer: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	app:['timer']	app['timer']	ui-unmatch
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMultiChoiceItems(java.lang.CharSequence[],boolean[],android.content.DialogInterface$OnMultiChoiceClickListener)>	app:['choice']	app['choice']	ui-unmatch
--------------------------------
<android.provider.ContactsContract$CommonDataKinds$Phone: int getTypeLabelResource(int)>	contact_detail.xml:['phone']	app[]	ui-unmatch
<android.provider.ContactsContract$CommonDataKinds$Email: int getTypeLabelResource(int)>	contact_detail.xml:['email']	app[]	ui-unmatch
<android.provider.ContactsContract$CommonDataKinds$Im: int getProtocolLabelResource(int)>	contact_detail.xml:[]	app[]
<android.provider.ContactsContract$CommonDataKinds$StructuredPostal: int getTypeLabelResource(int)>	contact_detail.xml:[]	app[]
<android.provider.ContactsContract$CommonDataKinds$Organization: int getTypeLabelResource(int)>	contact_detail.xml:[]	app[]
<java.util.Date: int getYear()>	contact_detail.xml:['year']	app['year']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	contact_detail.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTime(java.util.Date)>	contact_detail.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	contact_detail.xml:['calendar']	app['calendar']	ui-unmatch
<android.provider.ContactsContract$CommonDataKinds$Event: int getTypeResource(java.lang.Integer)>	contact_detail.xml:[]	app[]
<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri)>	contact_detail.xml:['ring', 'ring']	app['ring', 'ring']	ui-unmatch
<android.media.Ringtone: java.lang.String getTitle(android.content.Context)>	contact_detail.xml:['ring']	app['ring']	ui-unmatch
--------------------------------
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMultiChoiceItems(java.lang.CharSequence[],boolean[],android.content.DialogInterface$OnMultiChoiceClickListener)>	contact_detail.xml:['choice']	app['choice']	ui-unmatch
--------------------------------
<android.text.ClipboardManager: void setText(java.lang.CharSequence)>	contact_detail.xml:['clipboard']	app['clipboard']	ui-unmatch
--------------------------------
<android.os.PowerManager$WakeLock: boolean isHeld()>	app:['power']	app['power']	ui-unmatch
<android.os.PowerManager$WakeLock: void release()>	app:['power']	app['power']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.util.Timer: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	app:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.graphics.Camera: void <init>()>	app:['camera']	app['camera']	ui-unmatch
--------------------------------
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getStartOffset()>	app:['file']	app['file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getLength()>	app:['file']	app['file']	ui-unmatch
<android.telephony.PhoneNumberUtils: java.lang.String extractNetworkPortion(java.lang.String)>	app:['network']	app['network']	ui-unmatch
--------------------------------
<java.util.Timer: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long)>	app:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.accounts.AccountManager: android.accounts.AccountManager get(android.content.Context)>	app:['account']	app['account']	ui-unmatch
<android.accounts.AccountManager: android.accounts.Account[] getAccountsByType(java.lang.String)>	app:['account', 'account']	app['account', 'account']	ui-unmatch
<android.media.AudioManager: int getRingerMode()>	app:['audio']	app['audio']	ui-unmatch
<android.os.SystemClock: long uptimeMillis()>	app:['clock']	app['clock']	ui-unmatch
--------------------------------
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>	popupmenu_layout.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getStartOffset()>	popupmenu_layout.xml:['file']	app['file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getLength()>	popupmenu_layout.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	popupmenu_layout.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	popupmenu_layout.xml:['calendar']	app['calendar']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	popupmenu_layout.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	popupmenu_layout.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	popupmenu_layout.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	popupmenu_layout.xml:['file']	app['file']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	popupmenu_layout.xml:['language']	app[]	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	popupmenu_layout.xml:['country']	app['country']	ui-unmatch
<android.telephony.PhoneNumberUtils: java.lang.String stripSeparators(java.lang.String)>	popupmenu_layout.xml:[]	app[]
<android.telephony.TelephonyManager: int getPhoneType()>	popupmenu_layout.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	popupmenu_layout.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	popupmenu_layout.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Timer: void cancel()>	popupmenu_layout.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>()>	popupmenu_layout.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	popupmenu_layout.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	popupmenu_layout.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void cancel()>	popupmenu_layout.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	popupmenu_layout.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	popupmenu_layout.xml:['calendar']	app['calendar']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	popupmenu_layout.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	popupmenu_layout.xml:['network']	app['network']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	popupmenu_layout.xml:['language']	app[]	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	popupmenu_layout.xml:['country']	app['country']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	popupmenu_layout.xml:['language']	app[]	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	popupmenu_layout.xml:['country']	app['country']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	combcontact.xml:['language']	app[]	ui-unmatch
--------------------------------
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMultiChoiceItems(java.lang.CharSequence[],boolean[],android.content.DialogInterface$OnMultiChoiceClickListener)>	app:['choice']	app['choice']	ui-unmatch
--------------------------------
<java.util.Timer: void cancel()>	app:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.webkit.WebView: void loadDataWithBaseURL(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>	help_view.xml:['url']	app['url']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getRootDirectory()>	app:[]	app[]
<java.io.File: java.lang.String getPath()>	app:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdir()>	app:['file']	app['file']	ui-unmatch
<java.util.zip.ZipFile: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.util.zip.ZipFile: java.util.Enumeration entries()>	app:['file']	app['file']	ui-unmatch
<java.util.zip.ZipFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getParentFile()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>	app:[]	app[]
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:[]	app[]
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File,boolean)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.os.PowerManager$WakeLock: boolean isHeld()>	app:['power']	app['power']	ui-unmatch
<android.os.PowerManager$WakeLock: void release()>	app:['power']	app['power']	ui-unmatch
--------------------------------
<android.graphics.Camera: void translate(float,float,float)>	app:['camera']	app['camera']	ui-unmatch
<android.graphics.Camera: void rotateY(float)>	app:['camera']	app['camera']	ui-unmatch
<android.graphics.Camera: void applyToCanvas(android.graphics.Canvas)>	app:['camera']	app['camera']	ui-unmatch
<android.graphics.Camera: void rotateX(float)>	app:['camera']	app['camera']	ui-unmatch
--------------------------------
<java.util.Locale: java.lang.String getLanguage()>	theme_setting_view.xml:['language']	app[]	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	theme_setting_view.xml:['country']	app['country']	ui-unmatch
--------------------------------
<java.io.File: java.lang.String toString()>	act_edit.xml:['file']	app['file']	ui-unmatch
--------------------------------
<java.util.TimerTask: boolean cancel()>	app:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void cancel()>	app:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>	app:[]	app[]
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:[]	app[]
<java.io.File: java.lang.String toString()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(java.lang.CharSequence[],int,android.content.DialogInterface$OnClickListener)>	combcontact.xml:['choice']	app['choice']	ui-unmatch
--------------------------------
<java.util.Calendar: java.util.Calendar getInstance()>	popupmenu_layout.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	popupmenu_layout.xml:['calendar']	app['calendar']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	popupmenu_layout.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	popupmenu_layout.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	popupmenu_layout.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	popupmenu_layout.xml:['file']	app['file']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	popupmenu_layout.xml:['language']	app[]	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	popupmenu_layout.xml:['country']	app['country']	ui-unmatch
<android.telephony.PhoneNumberUtils: java.lang.String stripSeparators(java.lang.String)>	popupmenu_layout.xml:[]	app[]
<android.telephony.TelephonyManager: int getPhoneType()>	popupmenu_layout.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	popupmenu_layout.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	popupmenu_layout.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Timer: void cancel()>	popupmenu_layout.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>()>	popupmenu_layout.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	popupmenu_layout.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	popupmenu_layout.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void cancel()>	popupmenu_layout.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	popupmenu_layout.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	popupmenu_layout.xml:['calendar']	app['calendar']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	popupmenu_layout.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	popupmenu_layout.xml:['network']	app['network']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	popupmenu_layout.xml:['language']	app[]	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	popupmenu_layout.xml:['country']	app['country']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	popupmenu_layout.xml:['language']	app[]	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	popupmenu_layout.xml:['country']	app['country']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	combcontact.xml:['language']	app[]	ui-unmatch
--------------------------------
<android.webkit.WebView: void loadDataWithBaseURL(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>	help_view.xml:['url']	app['url']	ui-unmatch
--------------------------------
<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri)>	act_edit.xml:['ring', 'ring']	app['ring', 'ring']	ui-unmatch
<android.media.Ringtone: java.lang.String getTitle(android.content.Context)>	act_edit.xml:['ring']	app['ring']	ui-unmatch
--------------------------------
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app:['calendar']	app['calendar']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	app:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTimeInMillis(long)>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app:['calendar']	app['calendar']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:[]	app[]
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean canRead()>	app:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:[]	app[]
<java.io.File: java.lang.String toString()>	app:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	app:['calendar']	app['calendar']	ui-unmatch
--------------------------------
<android.os.PowerManager$WakeLock: void acquire()>	app:['power']	app['power']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<android.os.PowerManager$WakeLock: void release()>	app:['power']	app['power']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>	app:['power']	app['power']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	app:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.accounts.AccountManager: android.accounts.AccountManager get(android.content.Context)>	app:['account']	app['account']	ui-unmatch
<android.accounts.AccountManager: android.accounts.Account[] getAccounts()>	app:['account', 'account']	app['account', 'account']	ui-unmatch
<android.telephony.TelephonyManager: int getSimState()>	app:['telephony']	app['telephony']	ui-unmatch
--------------------------------
<android.widget.RadioButton: int getId()>	app:['radio']	app['radio']	ui-unmatch
--------------------------------
<android.widget.RadioGroup: void setOnCheckedChangeListener(android.widget.RadioGroup$OnCheckedChangeListener)>	app:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setChecked(boolean)>	app:['radio']	app['radio']	ui-unmatch
--------------------------------
<java.util.Locale: java.lang.String getLanguage()>	app:[]	app[]
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	app:['url']	app['url']	ui-unmatch
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>	popupmenu_layout.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getStartOffset()>	popupmenu_layout.xml:['file']	app['file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getLength()>	popupmenu_layout.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	popupmenu_layout.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	popupmenu_layout.xml:['calendar']	app['calendar']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	popupmenu_layout.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	popupmenu_layout.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	popupmenu_layout.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	popupmenu_layout.xml:['file']	app['file']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	popupmenu_layout.xml:['language']	app[]	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	popupmenu_layout.xml:['country']	app['country']	ui-unmatch
<android.telephony.PhoneNumberUtils: java.lang.String stripSeparators(java.lang.String)>	popupmenu_layout.xml:[]	app[]
<android.telephony.TelephonyManager: int getPhoneType()>	popupmenu_layout.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	popupmenu_layout.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	popupmenu_layout.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Timer: void cancel()>	popupmenu_layout.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>()>	popupmenu_layout.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	popupmenu_layout.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	popupmenu_layout.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void cancel()>	popupmenu_layout.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	popupmenu_layout.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	popupmenu_layout.xml:['calendar']	app['calendar']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	popupmenu_layout.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	popupmenu_layout.xml:['network']	app['network']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	popupmenu_layout.xml:['language']	app[]	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	popupmenu_layout.xml:['country']	app['country']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	popupmenu_layout.xml:['language']	app[]	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	popupmenu_layout.xml:['country']	app['country']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	combcontact.xml:['language']	app[]	ui-unmatch
--------------------------------
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	app:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>	app:['telephony']	app['telephony']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	app:['url']	app['url']	ui-unmatch
--------------------------------
<android.app.ActivityGroup: void onPause()>	theme_tab.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.widget.RadioButton: void setChecked(boolean)>	app:['radio']	app['radio']	ui-unmatch
--------------------------------
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>	theme_tab.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(android.view.View)>	theme_tab.xml:['host', 'indicator']	app['host', 'indicator']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.content.Intent)>	theme_tab.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>	theme_tab.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>	theme_tab.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setIndicator(android.view.View)>	theme_tab.xml:['host', 'indicator']	app['host', 'indicator']	ui-unmatch
<android.widget.TabHost$TabSpec: android.widget.TabHost$TabSpec setContent(android.content.Intent)>	theme_tab.xml:['host']	app['host']	ui-unmatch
<android.widget.TabHost: void addTab(android.widget.TabHost$TabSpec)>	theme_tab.xml:['host']	app['host']	ui-unmatch
--------------------------------
<com.android.internal.telephony.ITelephony: boolean endCall()>	app:['telephony']	app['telephony']	ui-unmatch
--------------------------------
<android.accounts.AccountManager: android.accounts.Account[] getAccounts()>	app:['account', 'account']	app['account', 'account']	ui-unmatch
<android.accounts.Account: void <init>(java.lang.String,java.lang.String)>	app:['account']	app['account']	ui-unmatch
--------------------------------
<java.io.FileOutputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.media.AudioManager: int getRingerMode()>	app:['audio']	app['audio']	ui-unmatch
<android.os.SystemClock: long uptimeMillis()>	app:['clock']	app['clock']	ui-unmatch
--------------------------------
<android.telephony.TelephonyManager: void listen(android.telephony.PhoneStateListener,int)>	app:['telephony']	app['telephony']	ui-unmatch
--------------------------------
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(java.lang.CharSequence[],int,android.content.DialogInterface$OnClickListener)>	app:['choice']	app['choice']	ui-unmatch
--------------------------------
<java.util.zip.ZipFile: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.util.zip.ZipFile: java.util.Enumeration entries()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.lang.OutOfMemoryError: void printStackTrace()>	app:['memory']	app['memory']	ui-unmatch
--------------------------------
<android.os.PowerManager$WakeLock: boolean isHeld()>	app:['power']	app['power']	ui-unmatch
<android.os.PowerManager$WakeLock: void release()>	app:['power']	app['power']	ui-unmatch
--------------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>	app:[]	app[]
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:[]	app[]
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File,boolean)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTime(java.util.Date)>	app:['calendar']	app['calendar']	ui-unmatch
<android.telephony.PhoneNumberUtils: int getFormatTypeForLocale(java.util.Locale)>	app:[]	app[]
<android.telephony.PhoneNumberUtils: void formatNumber(android.text.Editable,int)>	app:[]	app[]
<android.telephony.PhoneNumberUtils: java.lang.String extractNetworkPortion(java.lang.String)>	app:['network']	app['network']	ui-unmatch
--------------------------------
<android.os.PowerManager$WakeLock: void acquire()>	app:['power']	app['power']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getCanonicalPath()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean isDirectory()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean canRead()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	app:['file']	app['file']	ui-unmatch
<java.io.File: long lastModified()>	app:['file']	app['file']	ui-unmatch
<android.os.PowerManager$WakeLock: void release()>	app:['power']	app['power']	ui-unmatch
<android.os.PowerManager$WakeLock: void acquire()>	app:['power']	app['power']	ui-unmatch
<android.os.PowerManager$WakeLock: void release()>	app:['power']	app['power']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	app:['memory']	app['memory']	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	app:['country']	app['country']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	app:['file']	app['file']	ui-unmatch
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMultiChoiceItems(java.lang.CharSequence[],boolean[],android.content.DialogInterface$OnMultiChoiceClickListener)>	app:['choice']	app['choice']	ui-unmatch
<android.accounts.AccountManager: android.accounts.AccountManager get(android.content.Context)>	app:['account']	app['account']	ui-unmatch
<android.accounts.AccountManager: android.accounts.Account[] getAccounts()>	app:['account', 'account']	app['account', 'account']	ui-unmatch
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(java.lang.CharSequence[],int,android.content.DialogInterface$OnClickListener)>	app:['choice']	app['choice']	ui-unmatch
--------------------------------
<android.telephony.TelephonyManager: void listen(android.telephony.PhoneStateListener,int)>	app:['telephony']	app['telephony']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getDataDirectory()>	app:[]	app[]
<java.io.File: java.lang.String getPath()>	app:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getDataDirectory()>	app:[]	app[]
<java.io.File: java.lang.String getPath()>	app:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File,boolean)>	app:['file']	app['file']	ui-unmatch
<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>	app:['store']	app['store']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>	app:['file']	app['file']	ui-unmatch
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void close()>	app:['file']	app['file']	ui-unmatch
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.net.URLConnection openConnection()>	app:['url']	app['url']	ui-unmatch
<javax.net.ssl.HttpsURLConnection: void setSSLSocketFactory(javax.net.ssl.SSLSocketFactory)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<javax.net.ssl.HttpsURLConnection: void setHostnameVerifier(javax.net.ssl.HostnameVerifier)>	app:['http', 'url']	app['http', 'url']	ui-unmatch
<java.net.URLConnection: void setConnectTimeout(int)>	app:['url', 'connect']	app['url', 'connect']	ui-unmatch
<java.net.URLConnection: void setReadTimeout(int)>	app:['url']	app['url']	ui-unmatch
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URLConnection: void setDoOutput(boolean)>	app:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.io.OutputStream getOutputStream()>	app:['url']	app['url']	ui-unmatch
<java.net.URLConnection: java.io.InputStream getInputStream()>	app:['url']	app['url']	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File,boolean)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app:['file']	app['file']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File,boolean)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void flush()>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.os.SystemClock: long uptimeMillis()>	app:['clock']	app['clock']	ui-unmatch
--------------------------------
<android.content.Context: java.io.File getFilesDir()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>	popupmenu_layout.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getStartOffset()>	popupmenu_layout.xml:['file']	app['file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getLength()>	popupmenu_layout.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	popupmenu_layout.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	popupmenu_layout.xml:['calendar']	app['calendar']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	popupmenu_layout.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	popupmenu_layout.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	popupmenu_layout.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	popupmenu_layout.xml:['file']	app['file']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	popupmenu_layout.xml:['language']	app[]	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	popupmenu_layout.xml:['country']	app['country']	ui-unmatch
<android.telephony.PhoneNumberUtils: java.lang.String stripSeparators(java.lang.String)>	popupmenu_layout.xml:[]	app[]
<android.telephony.TelephonyManager: int getPhoneType()>	popupmenu_layout.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	popupmenu_layout.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	popupmenu_layout.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Timer: void cancel()>	popupmenu_layout.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>()>	popupmenu_layout.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	popupmenu_layout.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	popupmenu_layout.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void cancel()>	popupmenu_layout.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	popupmenu_layout.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	popupmenu_layout.xml:['calendar']	app['calendar']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	popupmenu_layout.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	popupmenu_layout.xml:['network']	app['network']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	popupmenu_layout.xml:['language']	app[]	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	popupmenu_layout.xml:['country']	app['country']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	popupmenu_layout.xml:['language']	app[]	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	popupmenu_layout.xml:['country']	app['country']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	combcontact.xml:['language']	app[]	ui-unmatch
--------------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>	app:[]	app[]
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:[]	app[]
<java.io.File: java.lang.String getPath()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: java.lang.String getName()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.graphics.Camera: void save()>	app:['camera']	app['camera']	ui-unmatch
<android.graphics.Camera: void restore()>	app:['camera', 'restore']	app['camera', 'restore']	ui-unmatch
<android.graphics.Camera: void getMatrix(android.graphics.Matrix)>	app:['camera']	app['camera']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean mkdirs()>	app:['file']	app['file']	ui-unmatch
<java.util.zip.ZipFile: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
<java.util.zip.ZipFile: java.util.Enumeration entries()>	app:['file']	app['file']	ui-unmatch
<java.util.zip.ZipFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File getParentFile()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean createNewFile()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.io.FileOutputStream: void <init>(java.io.File)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	act_edit.xml:['file']	app['file']	ui-unmatch
<android.app.Activity: void onRestoreInstanceState(android.os.Bundle)>	act_edit.xml:['restore']	app['restore']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean isDirectory()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getName()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	report.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	report.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: void <init>(java.io.File)>	report.xml:['file']	app['file']	ui-unmatch
<java.io.File: long length()>	report.xml:['file']	app['file']	ui-unmatch
<java.io.FileInputStream: int read(byte[])>	report.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	report.xml:['file']	app['file']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	report.xml:['file']	app['file']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.io.InputStream openStream()>	app:['url']	app['url']	ui-unmatch
<java.net.MalformedURLException: void printStackTrace()>	app:['url']	app['url']	ui-unmatch
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>	popupmenu_layout.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getStartOffset()>	popupmenu_layout.xml:['file']	app['file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getLength()>	popupmenu_layout.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	popupmenu_layout.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	popupmenu_layout.xml:['calendar']	app['calendar']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	popupmenu_layout.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	popupmenu_layout.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	popupmenu_layout.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	popupmenu_layout.xml:['file']	app['file']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	popupmenu_layout.xml:['language']	app[]	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	popupmenu_layout.xml:['country']	app['country']	ui-unmatch
<android.telephony.PhoneNumberUtils: java.lang.String stripSeparators(java.lang.String)>	popupmenu_layout.xml:[]	app[]
<android.telephony.TelephonyManager: int getPhoneType()>	popupmenu_layout.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	popupmenu_layout.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	popupmenu_layout.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Timer: void cancel()>	popupmenu_layout.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>()>	popupmenu_layout.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	popupmenu_layout.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	popupmenu_layout.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void cancel()>	popupmenu_layout.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	popupmenu_layout.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	popupmenu_layout.xml:['calendar']	app['calendar']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	popupmenu_layout.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	popupmenu_layout.xml:['network']	app['network']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	popupmenu_layout.xml:['language']	app[]	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	popupmenu_layout.xml:['country']	app['country']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	popupmenu_layout.xml:['language']	app[]	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	popupmenu_layout.xml:['country']	app['country']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	combcontact.xml:['language']	app[]	ui-unmatch
--------------------------------
<android.media.AudioManager: int getRingerMode()>	app:['audio']	app['audio']	ui-unmatch
<android.os.SystemClock: long uptimeMillis()>	app:['clock']	app['clock']	ui-unmatch
--------------------------------
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(android.widget.ListAdapter,int,android.content.DialogInterface$OnClickListener)>	app:['choice']	app['choice']	ui-unmatch
--------------------------------
<java.util.Locale: java.lang.String getLanguage()>	app:[]	app[]
<java.util.Locale: java.lang.String getCountry()>	app:['country']	app['country']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	app:[]	app[]
<java.util.Locale: java.lang.String getCountry()>	app:['country']	app['country']	ui-unmatch
<java.lang.OutOfMemoryError: void printStackTrace()>	app:['memory']	app['memory']	ui-unmatch
--------------------------------
<android.widget.RelativeLayout: void onRestoreInstanceState(android.os.Parcelable)>	app:['restore']	app['restore']	ui-unmatch
--------------------------------
<android.media.AudioManager: int getRingerMode()>	app:['audio']	app['audio']	ui-unmatch
<android.os.SystemClock: long uptimeMillis()>	app:['clock']	app['clock']	ui-unmatch
--------------------------------
<android.provider.ContactsContract$Contacts: android.net.Uri lookupContact(android.content.ContentResolver,android.net.Uri)>	act_edit.xml:['contact', 'contact', 'contact']	app[]	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	theme_setting_view.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.media.AudioManager: int getRingerMode()>	app:['audio']	app['audio']	ui-unmatch
<android.os.SystemClock: long uptimeMillis()>	app:['clock']	app['clock']	ui-unmatch
--------------------------------
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(android.widget.ListAdapter,int,android.content.DialogInterface$OnClickListener)>	act_edit.xml:['choice']	app['choice']	ui-unmatch
--------------------------------
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTime(java.util.Date)>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	app:['calendar']	app['calendar']	ui-unmatch
--------------------------------
<android.graphics.Canvas: void restore()>	app:['restore']	app['restore']	ui-unmatch
--------------------------------
<java.io.File: boolean mkdirs()>	act_edit.xml:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	act_edit.xml:['file']	app['file']	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	act_edit.xml:['file']	app['file']	ui-unmatch
--------------------------------
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: void setTime(java.util.Date)>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	app:['calendar']	app['calendar']	ui-unmatch
--------------------------------
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(android.widget.ListAdapter,int,android.content.DialogInterface$OnClickListener)>	act_edit.xml:['choice']	app['choice']	ui-unmatch
--------------------------------
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	act_edit.xml:['file']	app['file']	ui-unmatch
--------------------------------
<java.io.FileOutputStream: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.telephony.TelephonyManager: java.lang.String getSimSerialNumber()>	app:['telephony']	app['telephony']	ui-unmatch
--------------------------------
<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>	app:['power']	app['power']	ui-unmatch
<android.os.PowerManager$WakeLock: void acquire()>	app:['power']	app['power']	ui-unmatch
<android.os.PowerManager$WakeLock: void release()>	app:['power']	app['power']	ui-unmatch
--------------------------------
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>	app:['shortcut']	app['shortcut']	ui-unmatch
--------------------------------
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getRootDirectory()>	app:[]	app[]
<java.io.File: java.lang.String getPath()>	app:['file']	app['file']	ui-unmatch
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
--------------------------------
<android.location.Location: double getLatitude()>	app:['latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app:['longitude']	app['longitude']	ui-unmatch
--------------------------------
<android.telephony.TelephonyManager: void listen(android.telephony.PhoneStateListener,int)>	app:['telephony']	app['telephony']	ui-unmatch
--------------------------------
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockCount()>	app:['stat']	app['stat']	ui-unmatch
--------------------------------
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>	app:[]	app[]
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>	app:[]	app[]
<android.location.Location: double getLatitude()>	app:['latitude']	app['latitude']	ui-unmatch
<android.location.Location: double getLongitude()>	app:['longitude']	app['longitude']	ui-unmatch
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>	app:[]	app[]
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>	app:[]	app[]
--------------------------------
<android.widget.RadioButton: void setVisibility(int)>	app:['radio']	app['radio']	ui-unmatch
<android.widget.RadioButton: void setChecked(boolean)>	app:['radio']	app['radio']	ui-unmatch
--------------------------------
<android.graphics.Camera: void save()>	app:['camera']	app['camera']	ui-unmatch
<android.graphics.Camera: void translate(float,float,float)>	app:['camera']	app['camera']	ui-unmatch
<android.graphics.Camera: void rotateY(float)>	app:['camera']	app['camera']	ui-unmatch
<android.graphics.Camera: void applyToCanvas(android.graphics.Canvas)>	app:['camera']	app['camera']	ui-unmatch
<android.graphics.Camera: void rotateX(float)>	app:['camera']	app['camera']	ui-unmatch
<android.graphics.Camera: void restore()>	app:['camera', 'restore']	app['camera', 'restore']	ui-unmatch
--------------------------------
<android.graphics.Canvas: void restore()>	app:['restore']	app['restore']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>	app:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
--------------------------------
<java.util.Calendar: java.util.Calendar getInstance()>	popupmenu_layout.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	popupmenu_layout.xml:['calendar']	app['calendar']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	popupmenu_layout.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	popupmenu_layout.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	popupmenu_layout.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	popupmenu_layout.xml:['file']	app['file']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	popupmenu_layout.xml:['language']	app[]	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	popupmenu_layout.xml:['country']	app['country']	ui-unmatch
<android.telephony.PhoneNumberUtils: java.lang.String stripSeparators(java.lang.String)>	popupmenu_layout.xml:[]	app[]
<android.telephony.TelephonyManager: int getPhoneType()>	popupmenu_layout.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	popupmenu_layout.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	popupmenu_layout.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Timer: void cancel()>	popupmenu_layout.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>()>	popupmenu_layout.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	popupmenu_layout.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	popupmenu_layout.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void cancel()>	popupmenu_layout.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	popupmenu_layout.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	popupmenu_layout.xml:['calendar']	app['calendar']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	popupmenu_layout.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	popupmenu_layout.xml:['network']	app['network']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	popupmenu_layout.xml:['language']	app[]	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	popupmenu_layout.xml:['country']	app['country']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	popupmenu_layout.xml:['language']	app[]	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	popupmenu_layout.xml:['country']	app['country']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	combcontact.xml:['language']	app[]	ui-unmatch
--------------------------------
<java.util.Calendar: java.util.Calendar getInstance()>	popupmenu_layout.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	popupmenu_layout.xml:['calendar']	app['calendar']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	popupmenu_layout.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	popupmenu_layout.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	popupmenu_layout.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	popupmenu_layout.xml:['file']	app['file']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	popupmenu_layout.xml:['language']	app[]	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	popupmenu_layout.xml:['country']	app['country']	ui-unmatch
<android.telephony.PhoneNumberUtils: java.lang.String stripSeparators(java.lang.String)>	popupmenu_layout.xml:[]	app[]
<android.telephony.TelephonyManager: int getPhoneType()>	popupmenu_layout.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	popupmenu_layout.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	popupmenu_layout.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Timer: void cancel()>	popupmenu_layout.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>()>	popupmenu_layout.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	popupmenu_layout.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	popupmenu_layout.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void cancel()>	popupmenu_layout.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	popupmenu_layout.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	popupmenu_layout.xml:['calendar']	app['calendar']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	popupmenu_layout.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	popupmenu_layout.xml:['network']	app['network']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	popupmenu_layout.xml:['language']	app[]	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	popupmenu_layout.xml:['country']	app['country']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	popupmenu_layout.xml:['language']	app[]	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	popupmenu_layout.xml:['country']	app['country']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	combcontact.xml:['language']	app[]	ui-unmatch
--------------------------------
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	popupmenu_layout.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	popupmenu_layout.xml:['calendar']	app['calendar']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	popupmenu_layout.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	popupmenu_layout.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	popupmenu_layout.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	popupmenu_layout.xml:['file']	app['file']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	popupmenu_layout.xml:['language']	app[]	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	popupmenu_layout.xml:['country']	app['country']	ui-unmatch
<android.telephony.PhoneNumberUtils: java.lang.String stripSeparators(java.lang.String)>	popupmenu_layout.xml:[]	app[]
<android.telephony.TelephonyManager: int getPhoneType()>	popupmenu_layout.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	popupmenu_layout.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	popupmenu_layout.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Timer: void cancel()>	popupmenu_layout.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>()>	popupmenu_layout.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	popupmenu_layout.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	popupmenu_layout.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void cancel()>	popupmenu_layout.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	popupmenu_layout.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	popupmenu_layout.xml:['calendar']	app['calendar']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	popupmenu_layout.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	popupmenu_layout.xml:['network']	app['network']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	popupmenu_layout.xml:['language']	app[]	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	popupmenu_layout.xml:['country']	app['country']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	popupmenu_layout.xml:['language']	app[]	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	popupmenu_layout.xml:['country']	app['country']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	combcontact.xml:['language']	app[]	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	app:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	app:['calendar']	app['calendar']	ui-unmatch
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>	popupmenu_layout.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getStartOffset()>	popupmenu_layout.xml:['file']	app['file']	ui-unmatch
<android.content.res.AssetFileDescriptor: long getLength()>	popupmenu_layout.xml:['file']	app['file']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	popupmenu_layout.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: long getTimeInMillis()>	popupmenu_layout.xml:['calendar']	app['calendar']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	popupmenu_layout.xml:['file']	app['file']	ui-unmatch
<java.io.File: boolean createNewFile()>	popupmenu_layout.xml:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.FileOutputStream: void <init>(java.io.File)>	popupmenu_layout.xml:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void write(byte[])>	popupmenu_layout.xml:['file']	app['file']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	popupmenu_layout.xml:['language']	app[]	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	popupmenu_layout.xml:['country']	app['country']	ui-unmatch
<android.telephony.PhoneNumberUtils: java.lang.String stripSeparators(java.lang.String)>	popupmenu_layout.xml:[]	app[]
<android.telephony.TelephonyManager: int getPhoneType()>	popupmenu_layout.xml:['telephony']	app['telephony']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	popupmenu_layout.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	popupmenu_layout.xml:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<java.util.Timer: void cancel()>	popupmenu_layout.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void <init>()>	popupmenu_layout.xml:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	popupmenu_layout.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	popupmenu_layout.xml:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void cancel()>	popupmenu_layout.xml:['timer']	app['timer']	ui-unmatch
<java.util.Calendar: java.util.Calendar getInstance()>	popupmenu_layout.xml:['calendar']	app['calendar']	ui-unmatch
<java.util.Calendar: int get(int)>	popupmenu_layout.xml:['calendar']	app['calendar']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	popupmenu_layout.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>	popupmenu_layout.xml:['network']	app['network']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	popupmenu_layout.xml:['language']	app[]	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	popupmenu_layout.xml:['country']	app['country']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	popupmenu_layout.xml:['language']	app[]	ui-unmatch
<java.util.Locale: java.lang.String getCountry()>	popupmenu_layout.xml:['country']	app['country']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	combcontact.xml:['language']	app[]	ui-unmatch
--------------------------------
<java.lang.OutOfMemoryError: void printStackTrace()>	app:['memory']	app['memory']	ui-unmatch
--------------------------------
<android.telephony.TelephonyManager: void listen(android.telephony.PhoneStateListener,int)>	app:['telephony']	app['telephony']	ui-unmatch
--------------------------------
<android.os.Environment: java.lang.String getExternalStorageState()>	app:[]	app[]
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:[]	app[]
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean exists()>	app:['file']	app['file']	ui-unmatch
<java.io.File: boolean delete()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.io.FileOutputStream: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.FileOutputStream: void close()>	app:['file']	app['file']	ui-unmatch
<java.io.FileNotFoundException: void printStackTrace()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>	app:['file']	app['file']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getExternalStorageDirectory()>	act_edit.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	act_edit.xml:['file']	app['file']	ui-unmatch
--------------------------------
<java.util.Timer: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.TimerTask: void <init>()>	app:['timer']	app['timer']	ui-unmatch
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>	app:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.os.StatFs: void <init>(java.lang.String)>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getBlockSize()>	app:['stat']	app['stat']	ui-unmatch
<android.os.StatFs: int getAvailableBlocks()>	app:['stat']	app['stat']	ui-unmatch
--------------------------------
<android.app.Activity: void setVolumeControlStream(int)>	app:['volume']	app['volume']	ui-unmatch
<java.util.Locale: java.lang.String getLanguage()>	app:[]	app[]
--------------------------------
<android.widget.GridView: void getLocationOnScreen(int[])>	speeddial_setting.xml:['location']	app[]	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	app:['file', 'file']	app['file', 'file']	ui-unmatch
<java.io.File: boolean isDirectory()>	app:['file']	app['file']	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	app:['file']	app['file']	ui-unmatch
--------------------------------
<java.util.Locale: java.lang.String getCountry()>	app:['country']	app['country']	ui-unmatch
--------------------------------
<android.graphics.Canvas: void restoreToCount(int)>	app:['restore']	app['restore']	ui-unmatch
--------------------------------
