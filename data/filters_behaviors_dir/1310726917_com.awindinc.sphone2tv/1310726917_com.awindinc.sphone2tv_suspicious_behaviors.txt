<android.os.CountDownTimer: void cancel()>	app:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.os.CountDownTimer: android.os.CountDownTimer start()>	app:['timer']	app['timer']	ui-unmatch
<android.os.CountDownTimer: void cancel()>	photo.xml:['timer']	app['timer']	ui-unmatch
<android.os.CountDownTimer: android.os.CountDownTimer start()>	photo.xml:['timer']	app['timer']	ui-unmatch
<android.os.CountDownTimer: void cancel()>	mediasender.xml:['timer']	app['timer']	ui-unmatch
<android.os.CountDownTimer: void <init>(long,long)>	mediasender.xml:['timer']	app['timer']	ui-unmatch
<android.os.CountDownTimer: android.os.CountDownTimer start()>	app:['timer']	app['timer']	ui-unmatch
<android.os.CountDownTimer: void cancel()>	app:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.os.CountDownTimer: void <init>(long,long)>	photo.xml:['timer']	app['timer']	ui-unmatch
<android.os.CountDownTimer: void <init>(long,long)>	screen.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<java.nio.channels.SocketChannel: boolean isConnected()>	ptg.xml:['connect']	app[]	ui-unmatch
--------------------------------
<android.os.CountDownTimer: void cancel()>	app:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener)>	screen.xml:['sensor']	app['sensor']	ui-unmatch
<android.media.AudioRecord: void stop()>	screen.xml:['audio', 'record']	app['audio', 'record']	ui-unmatch
<android.media.AudioRecord: void release()>	screen.xml:['audio', 'record']	app['audio', 'record']	ui-unmatch
<android.hardware.SensorManager: java.util.List getSensorList(int)>	screen.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: java.util.List getSensorList(int)>	screen.xml:['sensor', 'sensor']	app['sensor', 'sensor']	ui-unmatch
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>	screen.xml:['sensor']	app['sensor']	ui-unmatch
<android.media.AudioRecord: int getMinBufferSize(int,int,int)>	screen.xml:['audio', 'record']	app['audio', 'record']	ui-unmatch
<android.media.AudioRecord: void <init>(int,int,int,int,int)>	screen.xml:['audio', 'record']	app['audio', 'record']	ui-unmatch
<android.media.AudioRecord: void startRecording()>	screen.xml:['audio', 'record', 'record']	app['audio', 'record', 'record']	ui-unmatch
--------------------------------
<com.android.vending.licensing.LicenseChecker: void checkAccess(com.android.vending.licensing.LicenseCheckerCallback)>	device_scan.xml:['access']	app['access']	ui-unmatch
<com.android.vending.licensing.Policy: boolean allowAccess()>	device_scan.xml:['access']	app['access']	ui-unmatch
<com.android.vending.licensing.NullDeviceLimiter: void <init>()>	device_scan.xml:['device']	app['device']	ui-unmatch
<com.android.vending.licensing.Policy: void processServerResponse(com.android.vending.licensing.Policy$LicenseResponse,com.android.vending.licensing.ResponseData)>	device_scan.xml:['server']	app['server']	ui-unmatch
<com.android.vending.licensing.Policy: boolean allowAccess()>	device_scan.xml:['access']	app['access']	ui-unmatch
<com.android.vending.licensing.LicenseChecker: android.os.Handler access$2(com.android.vending.licensing.LicenseChecker)>	device_scan.xml:['access']	app['access']	ui-unmatch
<com.android.vending.licensing.Policy: void processServerResponse(com.android.vending.licensing.Policy$LicenseResponse,com.android.vending.licensing.ResponseData)>	device_scan.xml:['server']	app['server']	ui-unmatch
<com.android.vending.licensing.Policy: boolean allowAccess()>	device_scan.xml:['access']	app['access']	ui-unmatch
--------------------------------
<android.os.CountDownTimer: void cancel()>	mediasender.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	mediasender.xml:[]	app[]
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	mediasender.xml:[]	app[]
<java.io.File: java.lang.String getPath()>	mediasender.xml:[]	app[]
<java.io.File: java.lang.String getName()>	mediasender.xml:[]	app[]
<android.os.CountDownTimer: void cancel()>	mediasender.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.os.CountDownTimer: void cancel()>	app:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.os.CountDownTimer: void cancel()>	app:['timer']	app['timer']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: java.io.File[] listFiles()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	file_browser.xml:['file']	app[]	ui-unmatch
<java.io.File: java.io.File[] listFiles()>	file_browser.xml:['file', 'file']	app[]	ui-unmatch
<java.io.File: java.lang.String getParent()>	file_browser.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean isDirectory()>	file_browser.xml:['file', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getName()>	file_browser.xml:['file']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	file_browser.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.os.CountDownTimer: void cancel()>	app:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.os.CountDownTimer: void cancel()>	mediasender.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.os.CountDownTimer: void cancel()>	app:['timer']	app['timer']	ui-unmatch
<java.net.NetworkInterface: java.util.Enumeration getNetworkInterfaces()>	device_scan.xml:['network', 'network']	app['network', 'network']	ui-unmatch
<java.net.NetworkInterface: java.util.Enumeration getInetAddresses()>	device_scan.xml:['network', 'address']	app['network']	ui-unmatch
<java.net.InetAddress: boolean isLoopbackAddress()>	device_scan.xml:['address', 'address']	app[]	ui-unmatch
<java.net.InetAddress: java.lang.String getHostAddress()>	device_scan.xml:['address', 'host', 'address']	app['host']	ui-unmatch
<java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>	device_scan.xml:['address']	app[]	ui-unmatch
<java.net.InetAddress: java.lang.String getHostAddress()>	device_scan.xml:['address', 'host', 'address']	app['host']	ui-unmatch
--------------------------------
<android.os.CountDownTimer: android.os.CountDownTimer start()>	app:['timer']	app['timer']	ui-unmatch
<android.os.CountDownTimer: void cancel()>	photo.xml:['timer']	app['timer']	ui-unmatch
<android.os.CountDownTimer: android.os.CountDownTimer start()>	photo.xml:['timer']	app['timer']	ui-unmatch
<android.os.CountDownTimer: void cancel()>	mediasender.xml:['timer']	app['timer']	ui-unmatch
<android.os.CountDownTimer: void <init>(long,long)>	mediasender.xml:['timer']	app['timer']	ui-unmatch
<android.os.CountDownTimer: android.os.CountDownTimer start()>	app:['timer']	app['timer']	ui-unmatch
<android.os.CountDownTimer: void cancel()>	app:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.accounts.AccountManager: android.accounts.AccountManager get(android.content.Context)>	device_scan.xml:['account']	app['account']	ui-unmatch
<android.accounts.AccountManager: android.accounts.Account[] getAccounts()>	device_scan.xml:['account', 'account']	app['account', 'account']	ui-unmatch
<android.net.wifi.WifiInfo: int getNetworkId()>	device_scan.xml:['network']	app['network']	ui-unmatch
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>	device_scan.xml:['address']	app[]	ui-unmatch
<java.net.InetSocketAddress: void <init>(java.lang.String,int)>	device_scan.xml:['address']	app[]	ui-unmatch
<java.net.Socket: void connect(java.net.SocketAddress,int)>	device_scan.xml:['connect']	app[]	ui-unmatch
<android.net.wifi.WifiInfo: int getNetworkId()>	device_scan.xml:['network']	app['network']	ui-unmatch
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>	device_scan.xml:['address']	app[]	ui-unmatch
--------------------------------
<android.os.CountDownTimer: void cancel()>	screen.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.os.CountDownTimer: android.os.CountDownTimer start()>	screen.xml:['timer']	app['timer']	ui-unmatch
<android.app.Activity: void onPause()>	screen.xml:[]	app[]
--------------------------------
<android.os.CountDownTimer: void cancel()>	screen.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.webkit.WebView: void loadUrl(java.lang.String)>	app:['url']	app['url']	ui-unmatch
--------------------------------
<java.io.File: java.lang.String getName()>	file_browser.xml:['file']	app[]	ui-unmatch
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	file_browser.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.os.CountDownTimer: void cancel()>	photo.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>	ptg.xml:['address']	app[]	ui-unmatch
<java.net.InetAddress: java.lang.String getHostAddress()>	ptg.xml:['address', 'host', 'address']	app['host']	ui-unmatch
<java.nio.channels.SocketChannel: boolean isConnected()>	ptg.xml:['connect']	app[]	ui-unmatch
<java.net.InetSocketAddress: void <init>(java.lang.String,int)>	ptg.xml:['address']	app[]	ui-unmatch
<java.nio.channels.SocketChannel: boolean connect(java.net.SocketAddress)>	ptg.xml:['connect']	app[]	ui-unmatch
<java.nio.channels.SelectionKey: boolean isConnectable()>	ptg.xml:['connect']	app[]	ui-unmatch
<java.nio.channels.SocketChannel: boolean finishConnect()>	ptg.xml:['connect']	app[]	ui-unmatch
--------------------------------
<android.net.wifi.WifiInfo: int getNetworkId()>	device_scan.xml:['network']	app['network']	ui-unmatch
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>	device_scan.xml:['address']	app[]	ui-unmatch
<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>	device_scan.xml:['power']	app['power']	ui-unmatch
<android.os.PowerManager$WakeLock: void setReferenceCounted(boolean)>	device_scan.xml:['power']	app['power']	ui-unmatch
<android.os.PowerManager$WakeLock: void acquire()>	device_scan.xml:['power']	app['power']	ui-unmatch
--------------------------------
<android.os.CountDownTimer: void <init>(long,long)>	device_scan.xml:['timer']	app['timer']	ui-unmatch
<android.os.CountDownTimer: android.os.CountDownTimer start()>	device_scan.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<java.net.InetAddress: java.lang.String getHostAddress()>	sphone2tv_login.xml:['host']	app['host']	ui-unmatch
<android.accounts.AccountManager: android.accounts.AccountManager get(android.content.Context)>	sphone2tv_login.xml:['account']	app['account']	ui-unmatch
<android.accounts.AccountManager: android.accounts.Account[] getAccounts()>	sphone2tv_login.xml:['account', 'account']	app['account', 'account']	ui-unmatch
<android.addextras.SelectDeviceIndex: void <init>()>	sphone2tv_login.xml:['device']	app['device']	ui-unmatch
--------------------------------
<android.os.PowerManager$WakeLock: void release()>	device_scan.xml:['power']	app['power']	ui-unmatch
--------------------------------
<android.os.CountDownTimer: void cancel()>	mediasender.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>	sphone2tv_login.xml:[]	app[]
<android.content.Context: java.io.File getFilesDir()>	sphone2tv_login.xml:['file']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	sphone2tv_login.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	sphone2tv_login.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean canRead()>	sphone2tv_login.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean canWrite()>	sphone2tv_login.xml:['file']	app[]	ui-unmatch
<android.content.Context: java.io.File getFilesDir()>	sphone2tv_login.xml:['file']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	sphone2tv_login.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	sphone2tv_login.xml:['pause']	app[]	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	photo.xml:[]	app[]
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>	photo.xml:[]	app[]
<java.io.File: java.lang.String getPath()>	photo.xml:[]	app[]
<java.io.File: java.lang.String getName()>	photo.xml:[]	app[]
<android.os.CountDownTimer: android.os.CountDownTimer start()>	app:['timer']	app['timer']	ui-unmatch
<android.os.CountDownTimer: void cancel()>	photo.xml:['timer']	app['timer']	ui-unmatch
<android.os.CountDownTimer: android.os.CountDownTimer start()>	photo.xml:['timer']	app['timer']	ui-unmatch
<android.os.CountDownTimer: void cancel()>	mediasender.xml:['timer']	app['timer']	ui-unmatch
<android.os.CountDownTimer: void <init>(long,long)>	mediasender.xml:['timer']	app['timer']	ui-unmatch
<android.os.CountDownTimer: android.os.CountDownTimer start()>	app:['timer']	app['timer']	ui-unmatch
<android.os.CountDownTimer: void cancel()>	app:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.os.CountDownTimer: void cancel()>	app:['timer']	app['timer']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	file_browser.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean isDirectory()>	file_browser.xml:['file', 'directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getPath()>	file_browser.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.os.CountDownTimer: void cancel()>	app:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.os.CountDownTimer: void cancel()>	app:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.os.CountDownTimer: void cancel()>	app:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.os.CountDownTimer: void cancel()>	photo.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.os.CountDownTimer: void cancel()>	photo.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<com.android.vending.licensing.ServerManagedPolicy: void <init>(android.content.Context,com.android.vending.licensing.Obfuscator)>	device_scan.xml:['server']	app['server']	ui-unmatch
--------------------------------
<android.app.Application: void onLowMemory()>	app:['memory']	app['memory']	ui-unmatch
--------------------------------
<android.os.CountDownTimer: android.os.CountDownTimer start()>	app:['timer']	app['timer']	ui-unmatch
<android.os.CountDownTimer: void cancel()>	photo.xml:['timer']	app['timer']	ui-unmatch
<android.os.CountDownTimer: android.os.CountDownTimer start()>	photo.xml:['timer']	app['timer']	ui-unmatch
<android.os.CountDownTimer: void cancel()>	mediasender.xml:['timer']	app['timer']	ui-unmatch
<android.os.CountDownTimer: void <init>(long,long)>	mediasender.xml:['timer']	app['timer']	ui-unmatch
<android.os.CountDownTimer: android.os.CountDownTimer start()>	app:['timer']	app['timer']	ui-unmatch
<android.os.CountDownTimer: void cancel()>	app:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.os.CountDownTimer: android.os.CountDownTimer start()>	app:['timer']	app['timer']	ui-unmatch
<android.os.CountDownTimer: void cancel()>	photo.xml:['timer']	app['timer']	ui-unmatch
<android.os.CountDownTimer: android.os.CountDownTimer start()>	photo.xml:['timer']	app['timer']	ui-unmatch
<android.os.CountDownTimer: void cancel()>	mediasender.xml:['timer']	app['timer']	ui-unmatch
<android.os.CountDownTimer: void <init>(long,long)>	mediasender.xml:['timer']	app['timer']	ui-unmatch
<android.os.CountDownTimer: android.os.CountDownTimer start()>	app:['timer']	app['timer']	ui-unmatch
<android.os.CountDownTimer: void cancel()>	app:['timer']	app['timer']	ui-unmatch
--------------------------------
