<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	app:['permission']	app['permission']	ui-unmatch
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>	app:['telephony', 'device']	app['telephony', 'device']	ui-unmatch
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>	app:['address']	app['address']	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	app:[]	app[]
<java.io.File: java.lang.String getPath()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean mkdirs()>	app:[]	app[]
<android.app.AlarmManager: void set(int,long,android.app.PendingIntent)>	app:['alarm']	app['alarm']	ui-unmatch
--------------------------------
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	main_plug.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	main_plug.xml:['network']	app['network']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	main_plug.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: int getType()>	main_plug.xml:['network']	app['network']	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: int getPort()>	app:['url', 'port']	app['url', 'port']	ui-unmatch
<java.net.URL: java.lang.String getProtocol()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.lang.String getHost()>	app:['url', 'host']	app['url', 'host']	ui-unmatch
<java.net.URL: java.lang.String getPath()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.lang.String getQuery()>	app:['url']	app['url']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	main_plug.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main_plug.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	main_plug.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	main_plug.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean mkdir()>	main_plug.xml:['file']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	main_plug.xml:['file']	app[]	ui-unmatch
<android.text.method.PasswordTransformationMethod: android.text.method.PasswordTransformationMethod getInstance()>	app:['password']	app['password']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main_lock_file.xml:[]	app[]
<java.io.File: java.io.File[] listFiles()>	main_lock_file.xml:[]	app[]
<java.io.File: boolean isFile()>	main_lock_file.xml:[]	app[]
<java.io.File: java.lang.String getName()>	main_lock_file.xml:[]	app[]
<java.io.File: boolean isDirectory()>	main_lock_file.xml:['directory']	app[]	ui-unmatch
<java.io.File: boolean isDirectory()>	main_lock_file.xml:['directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	main_lock_file.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	main_lock_file.xml:[]	app[]
<java.io.File: java.lang.String getName()>	main_lock_file.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: java.io.File[] listFiles()>	app:[]	app[]
<java.io.File: boolean isDirectory()>	app:[]	app[]
<java.io.File: java.lang.String getName()>	app:[]	app[]
<java.io.File: java.lang.String[] list()>	app:[]	app[]
<java.io.File: java.lang.String getAbsolutePath()>	app:[]	app[]
--------------------------------
<android.view.View: void getLocationOnScreen(int[])>	main_plug.xml:['location']	app['location']	ui-unmatch
<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>	main_plug.xml:['location']	app['location']	ui-unmatch
--------------------------------
<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri)>	main_preferences.xml:['ring', 'ring']	app['ring', 'ring']	ui-unmatch
<android.media.Ringtone: java.lang.String getTitle(android.content.Context)>	main_preferences.xml:['ring']	app['ring']	ui-unmatch
<android.app.admin.DevicePolicyManager: boolean isAdminActive(android.content.ComponentName)>	main_preferences.xml:['device']	app['device']	ui-unmatch
<android.media.Ringtone: java.lang.String getTitle(android.content.Context)>	main_preferences.xml:['ring']	app['ring']	ui-unmatch
--------------------------------
<android.support.v4.app.FragmentActivity: void onPause()>	main_preferences.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.os.SystemClock: long elapsedRealtime()>	confirm_lock_pattern.xml:['clock']	app['clock']	ui-unmatch
--------------------------------
<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>	app:['access']	app['access']	ui-unmatch
<java.io.RandomAccessFile: long length()>	app:['access']	app['access']	ui-unmatch
<java.io.RandomAccessFile: int read(byte[],int,int)>	app:['access']	app['access']	ui-unmatch
<java.io.RandomAccessFile: void close()>	app:['access']	app['access']	ui-unmatch
<android.os.SystemClock: long elapsedRealtime()>	app:['clock']	app['clock']	ui-unmatch
<android.os.SystemClock: long elapsedRealtime()>	confirm_lock_pattern.xml:['clock']	app['clock']	ui-unmatch
<android.os.CountDownTimer: void <init>(long,long)>	confirm_lock_pattern.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>	main.xml:['shortcut']	app['shortcut']	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	main.xml:['permission']	app['permission']	ui-unmatch
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>	main.xml:['connectivity', 'network']	app['connectivity', 'network']	ui-unmatch
<android.net.NetworkInfo: boolean isAvailable()>	main.xml:['network']	app['network']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: boolean exists()>	app:[]	app[]
<java.io.File: boolean mkdir()>	app:[]	app[]
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.lang.String getFile()>	app:['url']	app['url']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	main_plug.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main_plug.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	main_plug.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	main_plug.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean mkdir()>	main_plug.xml:['file']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	main_plug.xml:['file']	app[]	ui-unmatch
<android.text.method.PasswordTransformationMethod: android.text.method.PasswordTransformationMethod getInstance()>	app:['password']	app['password']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main_lock_file.xml:[]	app[]
<java.io.File: java.io.File[] listFiles()>	main_lock_file.xml:[]	app[]
<java.io.File: boolean isFile()>	main_lock_file.xml:[]	app[]
<java.io.File: java.lang.String getName()>	main_lock_file.xml:[]	app[]
<java.io.File: boolean isDirectory()>	main_lock_file.xml:['directory']	app[]	ui-unmatch
<java.io.File: boolean isDirectory()>	main_lock_file.xml:['directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	main_lock_file.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	main_lock_file.xml:[]	app[]
<java.io.File: java.lang.String getName()>	main_lock_file.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: java.io.File[] listFiles()>	app:[]	app[]
<java.io.File: boolean isDirectory()>	app:[]	app[]
<java.io.File: java.lang.String getName()>	app:[]	app[]
<java.io.File: java.lang.String[] list()>	app:[]	app[]
<java.io.File: java.lang.String getAbsolutePath()>	app:[]	app[]
--------------------------------
<android.text.ClipboardManager: void setText(java.lang.CharSequence)>	chat.xml:['clipboard']	app['clipboard']	ui-unmatch
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>	chat.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: java.util.ArrayList divideMessage(java.lang.String)>	chat.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)>	chat.xml:['sms']	app[]	ui-unmatch
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>	chat.xml:['sms']	app[]	ui-unmatch
--------------------------------
<java.net.URL: void <init>(java.lang.String)>	app:['url']	app['url']	ui-unmatch
<java.net.URL: int getPort()>	app:['url', 'port']	app['url', 'port']	ui-unmatch
<java.net.URL: java.lang.String getProtocol()>	app:['url']	app['url']	ui-unmatch
<java.net.URL: java.lang.String getHost()>	app:['url', 'host']	app['url', 'host']	ui-unmatch
--------------------------------
<android.telephony.TelephonyManager: int getPhoneType()>	app:['telephony']	app['telephony']	ui-unmatch
--------------------------------
<android.telephony.SmsMessage: java.lang.String getOriginatingAddress()>	app:['address']	app['address']	ui-unmatch
<android.telephony.SmsMessage: android.telephony.SmsMessage createFromPdu(byte[])>	app:[]	app[]
<android.telephony.SmsMessage: long getTimestampMillis()>	app:[]	app[]
<android.media.AudioManager: int getRingerMode()>	app:['audio']	app['audio']	ui-unmatch
<android.telephony.SmsMessage: java.lang.String getDisplayMessageBody()>	app:[]	app[]
--------------------------------
<android.support.v4.app.FragmentActivity: void onPause()>	main_applock.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.app.admin.DeviceAdminReceiver: void <init>()>	app:['device']	app['device']	ui-unmatch
--------------------------------
<android.os.Environment: java.io.File getDataDirectory()>	confirm_lock_pattern.xml:['directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	confirm_lock_pattern.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	confirm_lock_pattern.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	confirm_lock_pattern.xml:['file']	app[]	ui-unmatch
<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>	confirm_lock_pattern.xml:['access', 'file']	app['access']	ui-unmatch
<java.io.RandomAccessFile: void close()>	confirm_lock_pattern.xml:['access', 'file']	app['access']	ui-unmatch
--------------------------------
<android.app.Activity: void onPause()>	main_lock_file.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.text.ClipboardManager: void setText(java.lang.CharSequence)>	app:['clipboard']	app['clipboard']	ui-unmatch
--------------------------------
<android.support.v4.app.FragmentActivity: void onPause()>	main_apphide.xml:['pause']	app['pause']	ui-unmatch
--------------------------------
<android.os.SystemClock: long elapsedRealtime()>	confirm_lock_pattern.xml:['clock']	app['clock']	ui-unmatch
--------------------------------
<android.os.CountDownTimer: void cancel()>	confirm_lock_pattern.xml:['timer']	app['timer']	ui-unmatch
--------------------------------
<android.telephony.TelephonyManager: int getCallState()>	app:['telephony']	app['telephony']	ui-unmatch
<android.media.AudioManager: void setRingerMode(int)>	app:['audio']	app['audio']	ui-unmatch
<android.media.AudioManager: int getRingerMode()>	app:['audio']	app['audio']	ui-unmatch
<com.android.internal.telephony.PhoneUtils: boolean endCall(android.content.Context)>	app:[]	app[]
<com.android.internal.telephony.ITelephony: boolean endCall()>	app:['telephony']	app['telephony']	ui-unmatch
--------------------------------
<android.text.method.PasswordTransformationMethod: android.text.method.PasswordTransformationMethod getInstance()>	app:['password']	app['password']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	main_plug.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main_plug.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	main_plug.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	main_plug.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean mkdir()>	main_plug.xml:['file']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	main_plug.xml:['file']	app[]	ui-unmatch
<android.text.method.PasswordTransformationMethod: android.text.method.PasswordTransformationMethod getInstance()>	app:['password']	app['password']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main_lock_file.xml:[]	app[]
<java.io.File: java.io.File[] listFiles()>	main_lock_file.xml:[]	app[]
<java.io.File: boolean isFile()>	main_lock_file.xml:[]	app[]
<java.io.File: java.lang.String getName()>	main_lock_file.xml:[]	app[]
<java.io.File: boolean isDirectory()>	main_lock_file.xml:['directory']	app[]	ui-unmatch
<java.io.File: boolean isDirectory()>	main_lock_file.xml:['directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	main_lock_file.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	main_lock_file.xml:[]	app[]
<java.io.File: java.lang.String getName()>	main_lock_file.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: java.io.File[] listFiles()>	app:[]	app[]
<java.io.File: boolean isDirectory()>	app:[]	app[]
<java.io.File: java.lang.String getName()>	app:[]	app[]
<java.io.File: java.lang.String[] list()>	app:[]	app[]
<java.io.File: java.lang.String getAbsolutePath()>	app:[]	app[]
--------------------------------
<android.provider.ContactsContract$Contacts: java.io.InputStream openContactPhotoInputStream(android.content.ContentResolver,android.net.Uri)>	app:['photo']	app['photo']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	main_smslock.xml:['file']	app[]	ui-unmatch
<java.io.File: long lastModified()>	main_smslock.xml:['file']	app[]	ui-unmatch
<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>	main_smslock.xml:['permission']	app['permission']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main_smslock.xml:['file']	app[]	ui-unmatch
<java.io.File: long lastModified()>	main_smslock.xml:['file']	app[]	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main_smslock.xml:['file']	app[]	ui-unmatch
<java.io.File: long length()>	main_smslock.xml:['file']	app[]	ui-unmatch
<android.text.format.Formatter: java.lang.String formatFileSize(android.content.Context,long)>	main_smslock.xml:['file']	app[]	ui-unmatch
--------------------------------
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(java.lang.CharSequence[],int,android.content.DialogInterface$OnClickListener)>	app:['choice']	app['choice']	ui-unmatch
--------------------------------
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<android.net.Uri: android.net.Uri fromFile(java.io.File)>	app:[]	app[]
<android.os.Environment: java.lang.String getExternalStorageState()>	main_plug.xml:['storage']	app[]	ui-unmatch
<android.os.Environment: java.io.File getExternalStorageDirectory()>	main_plug.xml:['storage', 'directory']	app[]	ui-unmatch
<java.io.File: void <init>(java.io.File,java.lang.String)>	main_plug.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean exists()>	main_plug.xml:['file']	app[]	ui-unmatch
<java.io.File: boolean mkdir()>	main_plug.xml:['file']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	main_plug.xml:['file']	app[]	ui-unmatch
<android.text.method.PasswordTransformationMethod: android.text.method.PasswordTransformationMethod getInstance()>	app:['password']	app['password']	ui-unmatch
<java.io.File: void <init>(java.lang.String)>	main_lock_file.xml:[]	app[]
<java.io.File: java.io.File[] listFiles()>	main_lock_file.xml:[]	app[]
<java.io.File: boolean isFile()>	main_lock_file.xml:[]	app[]
<java.io.File: java.lang.String getName()>	main_lock_file.xml:[]	app[]
<java.io.File: boolean isDirectory()>	main_lock_file.xml:['directory']	app[]	ui-unmatch
<java.io.File: boolean isDirectory()>	main_lock_file.xml:['directory']	app[]	ui-unmatch
<java.io.File: java.lang.String getAbsolutePath()>	main_lock_file.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	main_lock_file.xml:[]	app[]
<java.io.File: java.lang.String getName()>	main_lock_file.xml:[]	app[]
<java.io.File: void <init>(java.lang.String)>	app:[]	app[]
<java.io.File: java.io.File[] listFiles()>	app:[]	app[]
<java.io.File: boolean isDirectory()>	app:[]	app[]
<java.io.File: java.lang.String getName()>	app:[]	app[]
<java.io.File: java.lang.String[] list()>	app:[]	app[]
<java.io.File: java.lang.String getAbsolutePath()>	app:[]	app[]
--------------------------------
<android.media.Ringtone: void play()>	app:['ring']	app['ring']	ui-unmatch
--------------------------------
<com.android.internal.telephony.PhoneUtils: void cancelMissedCallsNotification(android.content.Context)>	app:[]	app[]
<com.android.internal.telephony.ITelephony: void cancelMissedCallsNotification()>	app:['telephony']	app['telephony']	ui-unmatch
--------------------------------
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMultiChoiceItems(java.lang.CharSequence[],boolean[],android.content.DialogInterface$OnMultiChoiceClickListener)>	contactlist.xml:['choice']	app['choice']	ui-unmatch
<android.provider.ContactsContract$CommonDataKinds$Phone: java.lang.CharSequence getTypeLabel(android.content.res.Resources,int,java.lang.CharSequence)>	contactlist.xml:['contact', 'phone']	app[]	ui-unmatch
--------------------------------
